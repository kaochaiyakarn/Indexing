domain theoretic models polymorphism thierry coquand inria rocquencourt carl gunter university pennsylvania glynn winskel aarhus university may give illustration construction useful producing describing models girard reynolds polymorphic calculus 
key unifying ideas grothendieck fibration category continuous sections associated constructions indexed category theory universal types calculus interpreted category continuous sections fibration 
major example new model polymorphic calculus 
type interpreted scott domain 
fact understanding universal types polymorphic calculus categories continuous sections appears useful generally 
example technique applies finitary projection model bruce longo model girard 
inspired girard arose trying extend construction model scott domains 
hoped pin pointing key construction help deeper understanding models polymorphic calculus relations 

jean yves girard discovery polymorphic calculus gir 
motivations came proof theory calculus represent proofs second order arithmetic 
rey john reynolds rediscovered calculus independently motivation different provide formal basis certain polymorphic type disciplines programming languages 
designing calculus girard reynolds extended typed calculus allow form parametric polymorphism 
types include universal types types polymorphic terms thought describing functions defined uniform manner types 
terms applied types sense parameterised types 
information computation vol 
pp 

le chesnay cedex france department computer information sciences philadelphia pa computer science department ny munkegade dk aarhus denmark 
thierry coquand carl gunter glynn winskel detail type variables ff introduced typed calculus instance ff thought identity function type denoted ff 
polymorphic identity function term denotes identity function type denoted term ff ff universal type denoted piff ff ff 
type oe term ff universal type piff oe instantiated term oe ff type oe ff oe instance polymorphic identity instantiates type oe identity oe type oe oe 
pioneering girard contains results syntax calculus understanding models semantics developed slowly incomplete 
trivial model got interpreting types empty point set 
proof theoretic view may point set represents true empty set false prove consistency smi clearly inadequate model polymorphism 
essence difficulty providing nontrivial models arises impredicative nature calculus abstraction universal type piff oe type variable ff understood range types including universal type 
impossible interpret types nontrivial sets classical set theory see rey lately pitts shown polymorphism interpreted constructive set theory pit 
nontrivial models known term models realisability models gir ideas mccracken mcc scott models universal domain types coded particular kinds retracts 
models stronger calculi type types tailored directly requirements polymorphic calculus suggest general definition model calculus 
gir girard produced interesting new model types polymorphic calculus represented certain kinds objects called qualitative domains extended cgw 
category domains gir cgw usual taken denotational semantics particular morphisms functions stable sense berry just scott continuous 
left open question model similar girard traditional category scott domains continuous functions 
achievement model polymorphic calculus 
viewed doing scott domains continuous functions girard qualitative domains stable functions 
types interpreted scott domains types free type variables called variable types girard continuous functors category scott domains 
girard provided inspiration construction domains denote universal types different 
taken trouble expose construction model instance 
key unifying idea grothendieck fibration category continuous sections 
universal type interpreted category case domain continuous sections fibration 
looked way girard construction retract models mccracken scott domain theoretic models polymorphism construction instances common idea universal types interpreted continous sections grothendieck fibration 
briefly outline 
section section introduces basic ideas domain theory category theory shall rely 
section contains treatment grothendieck fibrations continuous sections instances domains base category domain obtain constructions represent dependent sum product types martin lof type theory suitable category domains base category get construction shall denotation universal types 
concreteness show construction carried framework information systems elementary representation domains 
section contains proofs technical lemmas needed demonstration construction yields model polymorphic 
section gives syntax polymorphic calculus equational rules section denotational semantics accompanied proofs soundness rules 
section show traditional domain models polymorphism mccracken scott retracts cast light similar ideas appear thesis taylor tay 
views state art models polymorphism 
stated girard guiding influence 
received encouragement advice number people grateful martin hyland pointing construction produced grothendieck fibration eugenio moggi construction applied girard model pino rosolini valuable discussions 
significance fibrations modelling polymorphism anticipated thesis paul taylor see tay gave category theoretic analysis concept type types indexed category theory exclusively considering domains indexed partial orders categories embeddings 
categories domains 
section review basic concepts category domain theory 
purpose largely establish notation terminology 
assume reader familiarity topics 
knowledge results sp starting point proofs results stated section 
hi partial order 
say directed nonempty partial order hd having element said complete say complete partial order abbreviated cpo directed subset upper bound point cpo said finite directed collection thierry coquand carl gunter glynn winskel bd denote collection finite elements cpo algebraic set fx bd xg directed cpo bounded complete bounded subset upper bound 
call bounded algebraic cpo scott domains just domains 
domain upper bounds finite sets finite elements finite exist 
function cpo monotonic order preserving 
monotonic function cpo continuous directed domains continuous functions form category important denotational semantics 
cartesian closed 
domains 
product domain theta consisting pairs elements ordered coordinatewise obvious projections 
function space consists continuous functions ordered pointwise called extensional order iff pair continuous functions cpo said embedding projection pair ffi ffi called embedding projection 
equally notations ffi fg composition functions notation pick embedding projection parts embedding projection pair embedding projection pairs example adjunction case simple partial order categories follows embedding determines accompanying projection uniquely vice versa 
category domains embedding projection pairs morphisms central importance 
call category ep write ep mean embedding projection pair embedding part function take composition embedding projection pairs ep ep ffi ffi ffi ep 
identity domain category pair id id 
partial order hi forms category objects elements set morphisms point point written point set empty 
directed family ep consists functor directed set hi ep provides indexing family objects ep morphisms ij ep ii id ik jk ij cone directed family family morphisms hae ep domain ae ae ffi ij note embeddings monic morphisms ij directed family uniquely determined cone 
shall speak cone directed family troubling mention directed family cone understood uniquely determined directed family morphisms ij ae ae directed colimit cone hae ep directed domain theoretic models polymorphism family universal property cone hae ep unique mediating morphism ep ae ae ffi initial object category cones 
general say category directed complete colimits directed families 
particular cpo directed complete regarded category 
category ep example directed complete category shall concerned calculations involving directed colimits 
useful relate pairs common domain certain morphisms ep correspond images embeddings lemma domains 
ep ep 
hg ffi ffi ep iff ffi ffi theorem category ep directed complete 
cone hae ep directed colimit iff fae ffi ae ji ig directed id fae ffi ae ji ig theorem domain 
ff ffi jf ep finite xg directed subset finite elements id ff ffi jf ep finite xg virtue theorem see theorem implies domain colimit finite domains embed 
fact set theorem directed deduce lemma ep ep finite domains 
finite domain ep hg ffi ffi ep hg ffi ffi ep gg gg fact elements set theorem finite deduce lemma suppose hae ep directed colimit ep finite domain ep ep ae ffi categories define product category theta category objects pairs objects respectively 
arrows pairs thierry coquand carl gunter glynn winskel 
obvious composition identity 
projections fst theta snd theta understood context subscripts usually dropped 
functors unique functor hf theta fst ffi hf snd ffi hf particular diagonal functor delta theta hid id define theta hf ffi fst ffi theta theta write terminal category object arrow unique functor category 
category number define th power theta generally define product list categories setting theta theta theta theta functor directed complete categories continuous just case preserves directed colimits 
continuous function example continuous functor categories partial orders 
easy check functor theta continuous iff continuous arguments individually 
categories form ep problem verifying continuity reduce problem functors ep ep continuous 
verify continuity functor useful employ lemma functor ep ep continuous iff domain family domains functions ep ff ffi ji ig directed ffi id ffi id product operator theta categories cuts continuous functor theta ep theta ep ep domains write id fst snd id fst function space operator functor ep suppose ep ep 
define ep setting ffi ffi ffi ffi 
domain theoretic models polymorphism functors ep take arguments manipulation little introducing notation 
functor ep define functor follows 
action objects function define 
define functor op action objects defining 
may write ff meaning clear context 
semantic treatment type expressions cope presence free type variables type expression denote functor arguments provide environment associating values variables 
convenient define generalisations product function space functors ep cope extra parameters 
functors ep ep define theta ffi theta ffi delta ep ffi theta ffi delta ep define version operation functor trivial domain setting functors numbers define th projection theta fst theta gamma fn ffi gamma snd theta gamma fn 
keep number parentheses minimum calculations helpful introduce binding conventions 
assume association left expression fxy parsed 
convention holds application section object parses read expression parses assume application binds tightly composition ffif parses ffi ffit parses ffi 
functors assume binds tightly parses assume pi introduced section binds tightly 
application bind tightly theta theta parses theta 
interpreting types 
approach closed types free type variables denote domains 
types free variables denote functors domains yield domain instantiation free variables 
thought way denotation type piff oe thierry coquand carl gunter glynn winskel functor argument oe way respects rules polymorphic calculus 
section definition operation functors achieve 
operation called pi shares properties universal quantification viewed abstractly similar way right adjoint operation padding functor extra argument 
treatment conforms category theoretic definition model polymorphic calculus proposed seely see part shall express ideas concretely giving particular constructions domains 
concrete approach way necessary know cartesian closed category order understand means model simple typed lambda calculus 
slight exception approach arises construction pi show special case general traditional category theory sections grothendieck fibration functor 
familiar constructions types dependent sum product arise special cases 
fibrations sections 
cat continuous functor category category categories 
define grothendieck fibration category sigmaf consisting ffl objects pairs ffl morphisms 
pairs ff ff composition morphisms ff 
fi 
fi ffi ff ffi fi ffi ff sigmaf category identity morphism id id 
projection sigmaf defined functor takes ff 
definition grothendieck fibration quite standard traditional opposite categories consequently functor take arguments category op cofibration better name purposes inconvenient 
construction pif continuous sections objects 
section sigmaf functor sigmaf ffi id course continuous section functor continuous 
sections objects form category morphisms cartesian natural transformations natural transformations project identity morphisms typical morphism sections natural transformation section domain theoretic models polymorphism section consisting family morphisms sigmaf id course component natural transformation form id ff ff 
natural transformation ensures ffi ffi category pif defined full subcategory continuous sections 
families indexed domain 
shall concerned fibrations sections solely case functor takes values domains 
special forms base category structure pif general category isomorphic domain 
simple example arises domain functor goes domain category domains embeddings case pif domain sigmaf shall call constructions dependent product dependent sum terminology martin lof type theory mar mar 
constructions known appear exercises plo 
presentation ideas see order give categorical characterisation dependent product sums show constructions give verify properties see tt 
see section application dependent products 
domain regarded category unique morphism precisely thinking graph order relation set morphisms shall write unique morphism ep continuous functor category domains embedding projection pairs 
functor provides domain element embeddings satisfy functor laws id ffi case category sigmaf objects 
morphism 
arises 
follows category sigmaf isomorphic partial order defined objects sigmaf iff easy check relation partial order surprisingly sigmaf domain 
proposition domain 
ep continuous functor 
sigmaf domain 
case projection functor continuous function sigmaf domains 
proof sigmaf element 
suppose ig directed subset sigmaf fx ig directed subset upper bound easy see set ff ig directed 
thierry coquand carl gunter glynn winskel show upper bound sigmaf clearly upper bound supposing see ffi continuity 
sigmaf cpo 
routine argument shows sigmaf bounded complete 
ig set upper bound 
upper bound see ffif 
upper bound exists 
follows upper bound cpo sigmaf algebraic finite elements form bc elements certainly finite argument 
suppose directed subset sigmaf assumed form ig 
seen directed set upper bound upper bound directed set ff ig 
finite finite image embedding finite element ffi see ffi ffi 
finite 
sigmaf consider set bc saw showing sigmaf bounded complete upper bound form element fact upper bounds finite elements finite 
directed 
fact continuous show upper bound 
certainly set fe bc directed upper bound assuming ff continuous preserves directed colimits colimiting cone domain theoretic models polymorphism bc sent colimiting cone ff bc ep theorem ensures ff ffi bc see ff bc see directly finite element bc finite lub directed set elements form equal element 
course element sigmaf upper bound finite elements 
clearly set finite elements countable 
completes proof sigmaf domain 
easy see comes equipped continuous projection function sigmaf turn attention pif continuous functor ep domain elements continuous sections 
section functor sigmaf ffi id bearing mind nature sigmaf take image 
categories sigmaf partial orders functor amounts monotonicity implies implies implies sections correspond families ht 
continuous sections correspond families satisfy monotonicity condition directed set call families continuous 
continuous sections correspond continuous families ht ht respectively 
morphism corresponds family morphisms hff component ff simply amounts ordering morphism sections corresponds pointwise ordering iff corresponding families 
surprisingly show pif domain convenient isomorphic category continuous families morphisms pointwise order 
clearly category partial order show domain 
thierry coquand carl gunter glynn winskel proposition domain 
ep continuous functor 
pif domain 
proof family component consisting ft ig directed set pif define family clearly satisfies 
directed subset satisfies continuous family 
pif cpo 
show pif bounded complete assume ft ig set continuous families upper bound domain bounded complete define family ix satisfies 
directed subset show notice fact embeddings preserve upper bounds 
bc define family component easy check satisfies continuous family 
consider family obtained way upper bound finite number families delta delta delta domain theoretic models polymorphism show finite 
suppose directed subset get upper bound directed set 
finite directed dominates ensures shows finite 
continuous family easily seen upper bound directed set delta delta delta delta delta delta en assured upper bounds mentioned exist bounded bounded complete partial order 
follows family finite element pif form delta delta delta 
clearly elements form countable set 
pif domain 
families indexed category domains 
important example arises ep ep continuous functor 
case shall see sigmaf considered category pif isomorphic domain viewed categories 
assume ep ep continuous functor 
case sigmaf category objects pairs ep morphisms 
correspond morphisms ff note sigmaf partial order simply morphisms 
need consider form colimits sigmaf directed family sigmaf corresponds directed set hi indexing family objects sigmaf morphisms ij ep ff ij colimit family corresponds pair collection morphisms hg xi making colimiting cone ep fg earlier case ep ep category pif continuous sections seen consisting certain kinds continuous families ordered pointwise 
sections correspond families ht ep monotonic satisfy ep implies ff continuous sections preserve directed colimits 
hae xi directed colimit ep sx directed colimit sigmaf considering form directed colimits sigmaf follows continuous sections correspond families satisfy requirement directed colimits hae xi ep thierry coquand carl gunter glynn winskel ae recalling theorem write condition follows 
cone hae xi fae ffi ae ig directed ae ffi ae id implies ae call families satisfying continuous 
morphisms continuous sections correspond associated families ordered pointwise iff ep continuous families 
point tempting conclude pif partially ordered set press demonstration domain 
unfortunately quite objects continuous sections sets 
elements pif classes put correspondence elements suitable set 
see take countable subcategory domains equivalent full subcategory finite domains embedding projection pairs morphisms 
continuous section determined restriction standard domains ordered pointwise restrictions order preserving correspondence pif sense pif isomorphic partially ordered set fact domain 
generous sense isomorphism quite standard category theory usual notion isomorphism pif isomorphic domain viewed categories 
described sense mean pif isomorphic domain 
details proof theorem 
theorem ep ep continuous functor 
category pif isomorphic domain 
proof take pi partial order consisting families ht monotonic sense ep implies ff ordered pointwise 
clear pi set show pif pi isomorphic categories pi domain 
clearly continuous section pif determines restriction element res pi conversely element pi extended continuous section ext ext ff ep domain checked defined 
note set ff ep directed upper bound really exist 
show take elements set ff ff domain theoretic models polymorphism arising morphisms ep ep finite domains 
lemma finite domain ep ep ep ffi ffi monotonic follows fg element set 
set directed definition yield family 
remains show family continuous 
firstly show family monotonic assume ep notice fg ext fg ff ep fg ffi ff ep ffi ep fh ep ext shows monotonicity 
suppose hae ep directed colimit 
complete demonstration continuity require ext ae ext ig note set directed ext monotonic 
monotonicity obtain ext ae ext ig definition ext upper bound elements ff ep 
consider element 
lemma ep ae ffi see ff ae ffi ae fh ae ext follows ext ae ext equality required continuity obvious 
easy see operations restriction res pif pi extension ext pi pif preserve order relation 
pi certainly ext consider identity morphism monotonicity see res ext ff ep res ext pi res definition ext res see ext res ff ep domain continuous colimit finite embeddings sense theorem ff ep thierry coquand carl gunter glynn winskel ext res pif conclude res pif pi ext pi pif form order isomorphism 
show pi domain 
element family suppose ft ig directed set pi define family upper bound exists set ft ig directed ft ig monotonic supposing ep see ff ff ff fact ff continuous 
similar argument shows pi bounded complete case argument uses fact embeddings preserve existing upper bounds 
suppose monotone family fx finite define ff defined bound set join taken right 
possible show monotone family depend choice upper bound exists form delta delta delta fx delta delta delta fx finite element pi remaining argument showing element pi lub elements finite elements form echoes proof proposition omit 
having chosen countable follows finite elements form countable set pi domain isomorphic pif strictly speaking category pif partial order objects classes sets isomorphic domain 
shall treat pif domain fact domain continuous families elements fuss problem foundations 
reader replace construction pif isomorphic small category pi provided proof 
pi parameters 
discussion need pi operator parameters 
theta ep ep continuous write pi ep continuous functor domain theoretic models polymorphism defined follows 
action pi objects pi pi 
define pi ep pi pi pi id pi id section pi pi 
course show definition sense 
check pi pi 
suppose pi pi pi id wish show pi 
suppose ep 
id id id id id id proves monotonicity 
prove continuity suppose ep functions ffi form directed collection ffi id id id id id id id id id pi pi 
suppose pi pi pi id 
wish show pi pi 
suppose ep 
id id id id id id proves monotonicity 
prove continuity suppose ep functions ffi thierry coquand carl gunter glynn winskel form directed collection ffi id keep notation simple oe id ep ff id ep fi id ep oe id ep note fi ffi oe ffi ff id ffi id ffi id id ffi id ffi id id oe ff ffi ff id fi ffi fi id oe fi ffi fi ffi oe ffi ff ffi ff fi ffi fi ffi oe ffi ff ffi ff fi ffi oe ffi ff pi oe pi oe 
oe fi ffi oe ffi ff ff fi ffi oe fi id pi pi 
shown definitions pi pi sense 
proof pi ep pi pi proof pi continuous functor routine 
notation shall concerned functors theta ep ep associated pi case ep case shall write pi pi information systems 
inspiration came originally girard gir 
uses representation qualitative domains morphisms stable functions rigid embeddings give domain theoretic models polymorphism model second order calculus 
domains representation information systems similar way give interesting elementary pif functor domains 
give sketch approach presentation information systems wl sco 
proofs straightforward essential follows omit 
recall definition information system definition information system defined structure con countable set tokens con non null subset finite subsets consistent sets subset con theta entailment relation satisfy ffl con implies con ffl implies fag con ffl implies fag con ffl con implies ffl con implies information system determines domain proposition elements information system con defined subsets satisfy ffl implies con finite set ffl implies ordering elements inclusion obtain domain jaj finite elements precisely sets fa ae ag obtained con 
domain determines information system definition domain 
define id bd con bd set finite elements con defined follows con iff ae bd finite bounded iff con proposition domain 
id information system domain elements isomorphic isomorphism pair 
fe bd dg oe oe 
thierry coquand carl gunter glynn winskel known continuous function domains determined action finite elements relation finite elements induces relation defined follows 
definition continuous function domains 
define bd theta embeddings domains correspond kinds mappings finite elements associated information systems 
proposition continuous function domains function embedding iff ffl function bd ffl cond iff fx cone finite subsets bd ffl iff fx elements finite subsets bd define information system pif continuous functor domains earlier countable category equivalent full subcategory finite domains embedding projection pairs 
definition ep ep continuous functor domains 
take consist pairs finite subset define con iff ff ep con fy define tokens elements con 
con define iff ff ep fy define pi con 
theorem ep ep continuous functor domains 
pi information system 
ii pif pi isomorphism pair pif pi oe pi pif oe ht ep ff xg domain theoretic models polymorphism basic combinators 
introduce notation results shall provide semantics polymorphic calculus 
concerned functors category ep suppose continuous functors ep ep claim projection map defined earlier section check suppose ep 
ffi ffi clear continuous section 
ep ep continuous functors 
suppose continuous section functor ep ep continuous section functor ep ep define continuous section apply equation apply 
show apply really section suppose ep 
apply ffi apply ffi apply ffi ffi apply see apply continuous suppose ep functions ffi form directed collection ffi id apply thierry coquand carl gunter glynn winskel ffi ffi apply ep ep ep theta ep ep ep ep continuous functors 
suppose continuous section functor pi ep ep define continuous section apply functor ffi hid ep gi ep ep equation apply 
check apply section suppose ep ffi hid ep gi apply ffi apply ffi ffi pi ffi pi ffi ffi pi ffi pi pi ffi pi id id ffi id ffi id id apply penultimate step follows fact section ep 
see apply continuous suppose ep functions ffi form directed collection ffi id ffi hid ep gi apply domain theoretic models polymorphism pi ffi pi pi ffi id ffi id ffi id id apply ep ep continuous functors suppose continuous section functor ep ep define continuous section curry functor setting curry 
see define section suppose ep 
curry ffi curry ffi ffi curry ffi curry see curry continuous suppose ep functions ffi form directed collection ffi id curry curry ep ep ep theta ep ep suppose continuous section ffi fst ep 
define curry continuous section equation curry thierry coquand carl gunter glynn winskel sense continuous functor wish show curry section pi words want show pi curry curry ep 
ep pi curry pi ffi curry ffi pi curry id curry id id ffi fst id ffi fst id curry see curry continuous suppose ep functions ffi form directed collection ffi id pi curry ffi fst id curry notation suppose ep ep ep ep ep ep functors 
continuous sections pi pi define continuous section pi setting apply curry domain theoretic models polymorphism need lemma lemma 
curry curry 

curry curry 

apply apply 

apply apply proof 
curry curry curry 
curry curry 
apply apply apply 
apply apply apply thierry coquand carl gunter glynn winskel notation suppose ep ep ep theta ep ep continuous functors pi ffi fst define continuous section pi ffi hid ep gi setting apply curry need lemma lemma 
curry curry 

curry ffi fst curry 

apply apply 

apply ffi hid ki apply 
proof 
curry curry curry 
curry ffi fst curry ffi fst curry curry 
apply apply apply domain theoretic models polymorphism 
apply ffi hid ki apply apply syntax polymorphic calculus 
types polymorphic calculus syntax oe oe oe ff piff oe terms calculus described follows oe ff distinguish subcollection typed terms calculus terms oe derivable typing rules listed 
sequents typing rules form sigma oe oe oe possibly empty list typings variables include free term variables sigma ff ff list type variables include free type variables appear oe oe sigma abbreviation sigma empty list abbreviation sigma sigma empty list 
typing rules polymorphic calculus 
projection oe sigma oe oe sigma oe sigma oe oe oe pi sigma ff oe sigma ff piff oe elimination sigma oe oe sigma oe sigma oe pi elimination sigma piff oe sigma oe ff oe restrictions thierry coquand carl gunter glynn winskel ffl projection rule variable appear ffl pi rule free occurrence ff type variable ffl pi elimination rule free oe sigma 
terms calculus particular typed terms taken satisfy collection equational rules form sigma sigma lists variable typings type variables 
assume lists free term variables appear sigma includes free type variables appear rules follows equational rules polymorphic calculus 
reflexivity oe sigma oe oe sigma oe sigma oe oe oe oe type sigma ff oe sigma ff ff piff oe congruence sigma oe sigma oe oe sigma oe type congruence sigma piff oe sigma foe foe oe ff oe difficult see rules lambda expression satisfies sigma oe satisfies sigma oe 
remaining axioms sigma oe abbreviation sigma oe 
symmetry sigma oe sigma oe transitivity sigma oe sigma oe sigma oe domain theoretic models polymorphism fi oe sigma oe sigma oe sigma oe oe type fi sigma ff oe sigma ff foe oe ff oe ff oe sigma oe oe sigma oe oe oe type sigma piff oe sigma ff piff oe restrictions ffl reflexivity axiom variable appear ffl type rule free occurrence ff type variable ffl type fi rule free occurrence ff type variable ffl rule variable occur free ffl type rule variable ff occur free semantics polymorphic calculus 
section provide detailed description semantics polymorphic calculus syntax described previous section 
showing model interprets types differently models finitary projections described earlier show equational theory model different model 
define ep ep th projection continuous functor action objects dm action arrows sigma ff ff list type variables sigma oe continuous functor ep ep semantic function defined inductively follows ffl ff ff ff ffl sigma oe oe sigma oe sigma oe thierry coquand carl gunter glynn winskel ffl sigma piff oe pi sigma ff oe assign meaning sequent sigma oe equation oe oe sigma oe sigma oe sigma oe sigma oe example type polymorphic identity follows piff ff ff pi ff ff ff pi ff ff ff ff pi define semantics sequents calculus 
general value oe oe sigma oe continuous section functor oe oe sigma oe ep ep semantic equations follows ffl oe oe oe sigma oe ffl sigma oe oe oe curry oe sigma oe ffl sigma ff piff oe curry sigma ff oe ffl sigma oe apply sigma oe oe sigma oe ffl sigma oe ff oe apply sigma piff oe sigma oe second equations suppose variable doesn appear free see third line sense note lemma ff appear free type oe sigma ff oe sigma oe ffi fst proof straightforward structural induction oe 
example polymorphic identity function continuous section pi ff ff piff ff ff curry ff ff ff ff curry curry ff ff ff curry curry domain theoretic models polymorphism lemma permutation ng fi mg fj oe oe ff ff oe oe oe ff ff oe proof easy structural induction lemma substitution suppose sigma oe oe sigma oe apply curry oe sigma oe sigma oe sigma proof help reduce amount notation needed arguments sigma oe sigma oe sigma oe show lengths sigma respectively 
proof structural induction term cases 
case suppose th variable sigma oe case case oe suppose oe oe oe sigma sigma oe oe curry oe sigma oe curry oe sigma oe oe oe sigma oe hyp curry oe oe sigma oe lemmas case ff suppose oe piff oe sigma ff oe 
sigma ff oe curry sigma ff oe curry sigma ff oe oe sigma ff oe hyp curry oe sigma ff oe lemmas thierry coquand carl gunter glynn winskel case 
suppose sigma oe oe sigma oe 
sigma oe apply sigma oe oe sigma oe apply oe sigma oe oe oe sigma oe hyp apply oe sigma oe oe oe sigma oe case 
suppose sigma sigma foeg oe apply sigma sigma oe apply oe sigma sigma oe hyp apply oe sigma sigma oe lemma lemma sigma oe ff oe sigma oe ffi hid sigma oe proof structural induction oe lemma type substitution suppose sigma ff oe ff appear free apply curry sigma ff oe sigma oe sigma oe ff oe ff oe proof help reduce amount notation needed sigma oe ff oe ff oe sigma ff oe sigma oe show proof structural induction cases 
case trivial 
case oe suppose oe oe sigma oe ff oe oe ff oe ff oe curry oe ff oe sigma oe ff oe ff curry oe sigma ff hyp curry oe sigma ff lemma domain theoretic models polymorphism case fi suppose oe oe oe 
sigma fi oe ff oe ff oe curry sigma fi oe ff oe ff oe curry ffi fst sigma fi ff oe hyp curry sigma fi oe lemmas case 
suppose oe oe oe 
sigma oe ff oe ff oe ff oe apply sigma oe ff oe ff oe oe sigma oe ff oe ff oe apply sigma ff oe oe sigma ff oe hyp apply sigma ff oe oe sigma ff oe lemma case 
suppose sigma sigma oe ff oe ff oeg oe ff oe apply sigma oe ff oe ff sigma oe ff oe apply sigma ff sigma oe ff oe hyp apply sigma ff sigma oe ffi hid ki lemma apply sigma ff sigma oe lemma lemma suppose sigma oe oe appear oe sigma oe oe sigma oe oe ffi fst proof structural induction dramatic version lemma lemma suppose sigma oe 
ff sigma sigma ff oe sigma piff oe ffi fst proof structural induction say equation sigma oe satisfied semantics just case sigma oe sigma oe 
prepared state central result thierry coquand carl gunter glynn winskel theorem semantic function satisfies rules polymorphic calculus 
proof eleven rules altogether 
proofs non trivial rules fi type fi type fi rule type fi rule immediate substitution lemma type substitution lemma respectively 
consider rule sigma oe oe sigma oe oe oe subject restriction variable occur free appear 
sigma oe oe oe curry oe sigma oe curry apply oe sigma oe oe snd curry apply sigma oe oe ffi fst snd lemma sigma oe oe prove type rule sigma piff oe sigma ff piff oe subject restriction variable ff occur free appear sigma 
sigma ff piff oe curry sigma ff oe curry apply sigma ff piff oe sigma ff ff curry apply sigma piff oe ffi fst snd lemma sigma piff oe example wish compute interpretation piff ff trivial type 
show model distinct finitary projection model equational theories distinct equation piff ff piff ff piff ff valid model finitary projection model 
ht continuous section identity functor 
ep get arbitrary domain consider coalesced sum morphisms left adjoints inl inr resp fr morphism ep corresponding inl resp 
inr 
fr entails 
domain theoretic models polymorphism model type type 
purposes section 
firstly want illustrate notion family domains indexed domain example domains universal domain 
secondly want explain finitary projection model abl relates model 
order illustrate point shall show finitary projection model model powerful type system second order type system type system type types 
categorical description model may tay 
reformulation type type system extension intuitionistic type theory mar add universe slight change axioms type equalities compared version mar 
suppose special type thought type indices types operation element regarded dependent type suppose exists element type name type types 
suppose furthermore internalisation product operation dependent types 
exists ffl pi ffl app pi pi 
pi ffl lambda pi pi pi ask operations inverses lambda ffi app id app ffi lambda id ordinary formulation mar type equality rule pi rule square standard semantics 
purpose weaker system isomorphisms sufficient 
significant type type system weaker form equality translated syntactically formalism particular possible interpret girard paradox gir types syntactically inhabited 
describe syntactic translation full formal details give examples 
universal type second order calculus piff ff ff translated piff type pix ff ff type type system 

notice possible interpretation dependent product sums domain outlined previous section give interpretation intuitionistic type theory terms scott domains see mar 
shall develop precise verification model similar checking get model second order type theory verification full detail 
interesting note system obtained representing type type calculus hhp may seen providing syntactic condition means model type type ideas bm 
thierry coquand carl gunter glynn winskel type type type form application app 
way type piff ff interpreted id 
app lambda inverses fi conversion rules satisfied 
semantics domain theory point important difference finitary projection model categorical model 
types interpreted directly arbitrary domains finitary projections single universal domain 
construction model pick domain embedded pair phi psi known scott domains instance built inverse limit construction 
important note domains canonical choice influence choice model clear 
part non canonical construction 
domain exists embedding projection pair phi psi element called finitary projection id ffi image domain respect restriction order known partial order finitary projections respect extensional ordering domain shall write fp domain embedded sco 
obtain embedding projection pair phi psi fp composition embedding projection fp phi psi 
take interpretation set image phi call cause real confusion 
notice interpret type types universal domain sequel convenient uncurried notation 
defines finitary projection psi subdomain image finitary projection fx psi xg 
notice subdomain universal domain furthermore subdomain 
family example continuous family domains domain 
embedded universal domain embedding inclusion map projection defined gamma 
psi 
embedded canonical embedding pi explicitly embedding defined way pi image embedding defined gamma 
psi 
definition projection image projection defined gamma 
psi 
embedding define element fp element phi shall write 
explicitly phi phi psi psi psi psi construction isomorphic pi app lambda notation halves isomorphism 
find app psi pi domain theoretic models polymorphism lambda phi psi 
check desired equalities 
phi psi ffi psi 
psi phi psi psi psi psi psi psi psi psi psi psi ffi psi psi psi ffi psi psi lambda app phi psi ffi psi phi psi equality suppose pi app lambda psi phi ffi psi ffi psi build element take phi phi ffi psi 
phi ffi psi fp phi psi definition equality domain get interpret second order calculus calculus get model second order calculus reader check get way model described abl 
example example shall show general interpretation piff ff id non trivial domain 
significant shows get essentially different model categorical approach interpretation piff ff trivial domain 
id isomorphic pi show pi trivial trivial trivial 
element different 
psi definition 
results psi pi psi 
intuitive explanation difference models finitary projection model restrict domains finitary projections big domain morphisms allow inclusions arbitrary embeddings 
get small category isomorphic domain fp finitary projections category subcategory full category ep inclusion functor 
dependent type continuous function fp defines composition thierry coquand carl gunter glynn winskel inclusion functor dependent domain domain see general definition product dependent domain previously specialise 
explains interpretation piff ff bigger finitary projection model consider fp category domains forget morphisms inclusions instance non trivial automorphisms 
sense categorical model refinement model take account embeddings inclusions 
questions comparisons related 
want describe girard model gir cgw follows pattern model 
idea translate definitions stable framework ber 
requiring continuity functors functions require pull backs preserved property called stability 
place extensional ordering functions take stable ordering 
place natural transformations functors take cartesian natural transformations 
category di ep ber gir full subcategories qualitative domains coherent spaces gir 
relationship girard explained general result due moggi state special case proposition stable functor di ep di ep family ht di ep continuous stable section uniform di ep 
need express stable section simple calculation pull backs grothendieck fibration shows pull back diagram 



di ep di ep di ep di ep 
key fact di ep find domain morphisms di ep form pull back diagram 
clear think terms representation event structures di domains see section cgw 
expressing stability condition diagram get uniformity ht stable model leads smaller interpretation 
instance known stable models interpretation piff ff ff point domain 
model turns infinite contains continuous operations indexed integer bounds finite elements 
bound finite elements examples parametric operations uniform 
clear non uniform operations interesting 
domain theoretic models polymorphism terms get form syntax second order calculus uniform stable model may helpful producing fully models 
question raised example interpretation syntactic type effectively domain smy 
know precise form interpretation piff ff ff elements ones 
question may asked stable models gir cgw 
motivations introducing notion coherent domain gir case possible give explicit description interpretation syntactic types 
important general question connection models general definition model second order calculus bm 
surprising point strictly speaking model girard models models sense bruce meyer pointed moggi 
essential collection types interpreted category set 
done follow verbatim bruce meyer definition 
contrasted finitary projection model abl model bruce meyer definition 
adds weight proposal seely general definition model see tt construction model tt sense 
possible generalise slightly definition bruce meyer ideas developed ber definition equivalent seely definition 
may ask relationship known models polymorphisms 
instance ideal model mps models effective topos see instance hyl 
contrast effective topos model hyl model direct extension commonly denotational semantics programming languages allows handle recursion types 
construction choice category embedding projection pairs arbitrary left adjoints 
constructions go way category place embeddings 
instance get simple model complete algebraic lattices left adjoints model interpretation polymorphic identity type points expected see tt brief description model 
understand relationship model detail 
notice choice appear stable case noticed pitts due stable function greater id stable ordering function equal identity 
stability id 
deduce left adjoint stable case embedding 
explained central role grothendieck fibrations continuous sections play interpretation polymorphism 
presentation deliberately examples model particular new model polymorphism worked considerable detail 
point view probably 
clear right framework encompass relate full range models thierry coquand carl gunter glynn winskel techniques home model appropriate meet certain requirements full abstraction 
abl amadio bruce longo 
finitary projection model second order lambda calculus solutions higher order domain equations 
meyer editor logic computer science pages ieee computer society press 
ber erard berry 
stable models typed calculus 
international colloquium automata languages programs pages lecture notes computer science vol 
springer 
bm bruce meyer 
semantics polymorphic lambda calculus 
kahn macqueen plotkin editors semantics data types pages lecture notes computer science vol 
springer 
cgw coquand gunter glynn winskel 
di domains model polymorphism 
main melton mislove schmidt editors mathematical foundations programming language semantics pages lecture notes computer science vol 
springer april 
gir girard 
interpr etation fonctionelle elimination des coupures de arithm etique ordre sup erieur 
th ese etat university paris vii 
gir girard 
system variable types fifteen years 
theoretical computer science 
hhp harper honsell plotkin 
framework defining logics 
gries editor symposium logic computer science pages ieee computer society press ithaca new york june 
hyl hyland 
effective topos 
troelstra van dalen editors brouwer symposium pages north holland 
mar martin lof 
intuitionistic theory types 

unpublished 
mar martin lof 
domain interpretation type theory 

unpublished 
mar martin lof 
type theory 
studies proof theory bibliopolis 
mcc mccracken 
investigation programming language polymorphic type structure 
phd thesis syracuse university 
domain theoretic models polymorphism mps macqueen plotkin sethi 
ideal model recursive polymorphic types 
principles programming languages pages acm 
pit pitts 
polymorphism set theoretic constructively 
category theory computer science lecture notes computer science vol 
springer 
plo plotkin 
category complete partial orders tool making meanings 
postgraduate lecture notes department computer science edinburgh university 
rey reynolds 
theory type structure 
paris programming symposium pages lecture notes computer science vol 
springer 
rey reynolds 
polymorphism set theoretic 
kahn macqueen plotkin editors semantics data types pages lecture notes computer science vol 
springer 
sco scott 
ordered sets computer science 
rival editor ordered sets pages reidel 
sco scott 
domains denotational semantics 
nielsen schmidt editors international colloquium automata languages programs pages lecture notes computer science vol 
springer 
see seely 
categorical semantics higher order polymorphic lambda calculus 
journal symbolic logic 
smi smith 
independence peano fourth axiom martin lof type theory universes 
journal symbolic logic 
smy smyth 
effectively domains 
theoretical computer science 
sp smyth plotkin 
category theoretic solution re cursive domain equations 
siam journal computing 
tay taylor 
recursive domains indexed category theory polymorphism 
phd thesis cambridge university 
tt coquand ehrhard 
equational presentation higher order logic 
category theory computer science lecture notes computer science vol 
springer 
wl winskel larsen 
information systems solve recursive domain equations effectively 
kahn macqueen plotkin editors semantics data types pages lecture notes computer science vol 
springer 
