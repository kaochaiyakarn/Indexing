design issues mobile agent programming systems anand tripathi department computer science university minnesota minneapolis mn usa june describe mobile agent paradigm increasingly popular network centric programming compare earlier paradigms distributed computing evolved 
design mobile agent systems requires resolution system level issues provision code mobility object naming portability scalability range security issues go hand hand mobile code 
agent programming requires suitable languages programming models support code mobility runtime systems provide fundamental primitives creation migration management agents 
discuss requirements describe mobile agent systems illustrate different approaches taken designers address problems 
keywords mobile agents mobile code distributed objects distributed computing 
interest network centric programming applications months due exponential growth internet user base widespread popularity worldwide web 
response new techniques languages paradigms evolved facilitate creation applications 
promising new paradigms mobile agents 
discusses mobile agent paradigm surveys requirements terms language level features system level support 
examine mobile agent systems illustrate address issues 
mobile agents broad sense agent program acts behalf human user 
mobile agent program represents user computer network capable migrating autonomously node node perform computation behalf user 
tasks determined agent application range online shopping real time device control distributed scientific computing 
applications inject mobile agents network allowing roam network predetermined path agents determine dynamically gathered information 
having accomplished goals agents may return home site order report results user 
historical perspective traditionally distributed applications relied client server paradigm client server processes communicate message passing remote procedure calls rpc 
communications model usually synchronous client suspends sending request server waiting results call 
alternative architecture called remote evaluation rev proposed email cs umn edu stamos gifford 
rev client invoking remote procedure sends procedure code server requests server execute return results 
earlier systems chorus introduced concept active messages migrate node node carrying program code executed nodes 
generic concept mobile object encapsulates data set operations data transported network node 
emerald early example system provided object mobility limited homogeneous local area networks 
code data agent context parameters data results data procedure code results data 
agent dispatch 
agent migration 
agent migration 
agent migration server client server server client client rpc rev mobile agent server server evolution mobile agent paradigm mobile agent paradigm evolved antecedents 
illustrates differs rpc rev rpc data transmitted client server directions 
rev code sent client server data returned 
contrast mobile agent program encapsulating code data context sent client server 
procedure call return results client 
migrate servers transmit information back origin migrate back client appropriate 
autonomy simple procedure call 
telescript developed general magic early system expressly designed support mobile agents commercial applications 
followed research systems tacoma agent tcl agents written script languages 
emergence java support mobile code led heightened research activity area 
aglets voyager concordia ajanta examples java mobile agent systems 
see sidebar web prominent mobile agent projects 
system url agent tcl www cs dartmouth edu agent aglets aglets trl ibm jp ajanta www cs umn edu ajanta ara www uni kl de ag ara index html concordia www com projects concordia www cnri reston va home koe messengers www ics uci edu bic messengers moa www camb org ri java moa mole www informatik uni stuttgart de vs mole html odyssey www com technology odyssey html tacoma www cs uit dos tacoma voyager www objectspace com voyager sidebar web mobile agent research applications mobile agents advantages mobile agent paradigm comparison rpc message passing identified 
stem capability paradigm reduce network usage increase asynchrony clients servers add client specified functionality servers introduce concurrency 
discuss capabilities identify applications exploit 
information search filtering applications download process large amounts server resident information generate comparatively small amounts result data 
mobile agents execute server machines access server data network bandwidth requirements reduced 
applications involve repeated client server interactions require maintaining network connection extended period making separate requests 
mobile agents client maintain network connection agents access process information 
permits increased asynchrony client server 
feature especially useful mobile computers typically low bandwidth unreliable connections network switched save power consumption 
repeated client server interactions reduced agent transfer operations reducing frequency network usage 
client server applications servers typically provide public interface fixed set primitives 
clients may need higher level functionality composed primitives requirements change time 
modifying server interface support requirements client client maintain interface server node mobile agent 
added advantage reducing number network interactions required 
feature exploited service providers dynamically enhance server capabilities 
mobile agents viewed mechanism introducing parallel activities execute concurrently 
client decompose task multiple agents providing parallelism fault tolerance 
mobile agent paradigm exploited variety ways ranging low level system administration tasks middleware user level applications 
example system level application real time control 
application uses rpcs control device may difficult impossible guarantee meet real time deadlines associated device 
communication delays accurately predictable underlying network provides quality service guarantees 
application send agent device control device locally resulting better predictability 
examples system level applications include network maintenance testing fault diagnosis installing upgrading software remote machines 
mobile agents useful building middleware services active message systems distributed collaboration systems active mail message program interacts recipient multimedia interface adapts interaction session recipient responses 
mobile agent paradigm suited type application carry sender defined session protocol multimedia message 
example user level application electronic marketplace 
vendors set online shops products services information sale 
customer agent carry shopping list set preferences visit various sellers find best deal preferences purchase product digital forms cash 
application imposes broad spectrum requirements mobile agent systems 
apart mobility needs mechanisms restricted resource access secure electronic commerce protection agent data robustness user control roving agents 
subsequent sections application example illustrate various design issues encountered mobile agent systems 
applications need monitor events remote machines particular stock price fallen threshold benefit mobile agents agents need network polling 
periodically downloading stock quote data agent sent quotes service monitor stock price 
agent inform user specified event occurs 
system level issues mobile agent system infrastructure implements agent paradigm 
main challenges designing infrastructure discussed section 
machine intends play host mobile agents provide protected agent execution environment agent server 
agent server responsible executing agent code providing primitive operations agent programmers allow agents migrate communicate access host resources logical network agent servers implements mobile agent system 
agent servers specialized provide application specific services 
example electronic marketplace vendor runs agent server provides shop front interface customers agents 
shop front includes product descriptions price lists mechanisms agents look catalogs order products 
useful agent applications require internet wide access resources 
users need dispatch agents laptops irrespective physical location 
mechanisms agent infrastructure scale wide area networks 
agents execute different hosts lifetimes 
general assume hosts identical architectures run operating system 
agents programmed language machine independent widely available 
agent mobility primary identifying characteristic mobile agents ability autonomously migrate host host 
support agent mobility fundamental requirement agent infrastructure 
agent request host server transport remote destination 
agent server deactivate agent capture state transmit server remote host 
destination server restore agent state remote host completing migration 
state agent includes data execution state thread 
lowest level represented execution context call stack 
captured transmitted agent destination server thread precisely point requested migration 
useful transparent load balancing fault tolerant programs 
alternative capture execution state higher level terms application defined agent data 
agent code direct control flow appropriately state restored destination 
captures execution state coarse granularity function level contrast instruction level state provided thread context 
agent systems execute agents commonly available virtual machines language environments usually provide thread level state capture 
agent system developer modify virtual machines purpose renders system incompatible standard installations virtual machines 
mobile agents autonomous migration occurs explicit programmer control state capture arbitrary points usually unnecessary 
current systems rely coarse grained execution state capture maintain portability 
issue implementing agent mobility transfer agent code 
possibility agent carry code migrates 
allows agent run server execute code 
systems transfer code require agent code pre installed destination server 
third approach agent carry code contains code base server provides code request 
agent execution needs code installed current server server contact code base download required code 
referred code demand 
naming various entities system agents agent servers resources users need assigned names uniquely identify 
agent uniquely named owner communicate control travels itinerary 
example user may need contact shopper agent update preferences carrying 
agent servers need names agent specify desired destination migrates 
namespaces may common different entities agents agent servers may share namespace 
allows agents uniformly request migration particular server location agent needs communicate 
system provide mechanism find current location entity name 
process called name resolution 
names assigned entities may location dependent allows easier implementation name resolution 
systems agent tcl aglets tacoma names hostnames port numbers resolve dns 
systems agent migrates name change 
application task tracking agents cumbersome 
desirable provide location transparent names application level 
done ways 
provide local proxies remote entities encapsulate current location 
system updates location information entity moves providing location transparency application level 
example voyager uses approach agent names servers identified dns names 
alternative global location independent names change entity relocated 
requires provision name service maps symbolic name current location named entity 
ajanta global names uniformly types entities 
systems concordia voyager interoperate corba model locating accessing remote objects 
security issues mobile code network raises security issues 
completely closed local area network contained entirely organization possible trust machines software installed 
users may willing allow arbitrary agent programs execute machines agents execute arbitrary machines 
open network internet entirely possible agent server belong different administrative domains 
cases lower levels mutual trust 
servers exposed risk system penetration malicious agents analogous viruses trojan horses 
malicious just buggy agents cause inordinate consumption resources denying agents legitimate users server 
security related requirements categorized follows ffl privacy integrity agent ffl authentication agents servers ffl authorization access control ffl metering charging payment mechanisms privacy integrity agents carry code data traverse network 
parts state may sensitive may need kept secret agent travels network 
example shopper agent may carry owner credit card number personal preferences 
agent transport protocol needs provide privacy prevent eavesdroppers acquiring sensitive information 
agent may trust servers equally 
need mechanism selectively reveal different portions agent state different servers 
example shopping agent may solicit quotations various vendors 
ensure fairness vendor quotation readable modifiable 
security breach result modification agent code traverses network 
farmer argue generally considered impossible prevent modification especially hostile servers possible detect 
need means verifying agent code unaltered transit untrusted network visiting untrusted server 
hand agent state typically needs updated journey collect information servers example 
assume servers visited benign guarantee agent state maliciously modified 
provide mechanisms allow tampering detected 
cryptographic mechanisms provide secure communication facility agent communicate home site servers transport agents safely untrusted networks 
selective revealing state accomplished encrypting different parts state different public keys belonging servers allowed access parts state 
mechanisms seals message digests detect tampering agent code 
authentication agent attempts transport remote server server needs ascertain identity agent owner order decide rights privileges agent server environment 
vendor server needs know visiting agent identity determine user charge services rendered 
conversely agent migrates server needs assurance identity server reveals sensitive data server 
digital signature systems develop mutual authentication schemes 
need adapted mobile agent domain integrated agent transport protocols 
order verify signatures agents servers need reliably know signing entity public key 
requires key certification infrastructure 
public keys certified trusted agencies posted network wide directories accessed agents servers 
infrastructure integrated name resolution service name lookup return public key addition object location 
general agents carry secret private keys authentication purposes leaves vulnerable malicious hosts 
authorization access control authorization granting specific resource access rights specific principals owners agents 
principals trusted agents granted restrictive access 
involves specifying policies granting access resources identities principals roles organization security classifications 
additional restrictions may placed agent rights owner limit damage caused buggy code 
encoded agent state enforced server 
agent server needs protect resources unauthorized access 
addition authorization mechanisms necessary provide enforcement mechanism implements access control policy 
authorization enforcement mechanisms operate different levels level individual objects agent granted read write access particular file site wide level agent create network connections agent mb disk space create connections hosts foo com domain 
infrastructure provide convenient means encoding rules 
traditional mechanisms access control lists capabilities security labels need adapted purpose 
mechanisms take account example length time entity may access resource 
necessary mobile agent systems prevent denial service attacks agents acquire release resources preventing agents 
similarly malicious server repeatedly retransmit agent server tying resources 
retransmissions detected 
metering charging mechanisms agents travel network consume resources cpu time disk space different servers 
servers may legitimately expect providing resources 
agents may access value added services information provided agents expect payment return 
marketplace example users send agents conduct purchases behalf 
mechanisms needed agent carry digital cash pay resources 
operating system level support may needed metering resource usage cpu time agent amount disk space needed visit 
alternatively server may implement coarse grained charging fixed charge levied visit agent 
subscription services possible server allow incoming agent owner paid monthly fee 
security features supported selected mobile agent systems summarized table 
language level issues agent programming languages models agent may execute heterogeneous machines varying operating system environments portability agent code prime requirement 
agent systems interpreted programming languages provide portable virtual machines executing agent code 
important criterion selecting agent language safety 
languages support type checking encapsulation restricted memory access particularly suitable implementing protected servers 
systems scripting languages tcl python perl coding agents 
languages relatively simple allow rapid prototyping moderately sized agent programs 
mature interpreter environments permit efficient high level access local resources operating system facilities 
script programs suffer poor modularization encapsulation performance 
agent systems object oriented languages java telescript obliq 
agents defined class objects encapsulate state code system provides support object migration network 
systems offer natural advantages object orientation building agent applications 
complex agent programs easier write maintain object oriented languages 
systems interpreted versions traditional procedural languages system secure communication server resource protection agent protection telescript agent transfer capability resource access 
supported cated rsa quotas imposed 
rc 
agent authority 
tacoma supported supported supported agent tcl uses pgp uses safe tcl secure supported authentication execution environment 
support encryption 
owner authorization 
aglets supported statically specified access rights supported security categories trusted untrusted 
voyager supported programmer extend security supported manager 
security categories native foreign 
concordia agent transfer encrypted screens accesses agents protected authenticated statically configured acl agents ssl 
agent owner identity 
resource access mechanism 
ajanta transfer encrypted capability resource access 
mechanisms detect des authenticated authorization agent tampering agent elgamal protocol 
owner state code 
table security features agent programming 
mobile agent systems differ significantly programming model coding agents 
cases agent program merely script little flow control 
script language python borrows features object oriented programming provides extensive support procedural flow control 
systems model agent application set distributed interacting objects having thread control able migrate autonomously network 
callback programming model system signals certain events different times agent life cycle 
agent programmed set event handling procedures 
programming primitives section identify primitive language level operations required programmers implementing agent applications 
categorize agent programming primitives ffl basic agent management creation dispatching cloning migration 
ffl agent agent communication synchronization 
ffl agent monitoring control status queries recall termination agents 
ffl fault tolerance checkpointing exception handling audit trails ffl security related encryption signing data sealing basic agent management primitives agent creation dispatch agent creation primitive allows programmer create instances agents partitioning application task roving components 
introduces concurrency system 
agent creation involves submission entity treated agent system naming agent migration telescript location dependent dns 
absolute go relative meet migration 
tacoma location dependent dns 
single primitive meet supports absolute relative migration 
agent tcl location dependent name absolute agent jump primitive 
dns optional symbolic alias 
agent fork primitive sends clone agent 
aglets urls dns names 
absolute dispatch primitive 
supports itinerary abstraction 
voyager location independent global id single primitive moveto supports absolute local proxy 
relative migration 
concordia location dependent dns 
absolute contents agent directory service available 
itinerary 
ajanta location independent global names 
single primitive go supports absolute relative migration 
supports itinerary abstraction 
table agent mobility support system 
single procedure evaluated remotely rev script object 
object oriented systems agent usually created instantiating class provides agent abstraction 
system inspect submitted code ensure conforms relevant protocols doesn violate security policy 
identity agent creator set credentials agent may generated time 
transmitted part agent allow entities identify unambiguously 
shopping agent credentials allow vendors charge appropriate user items sold services rendered 
newly created agent just passive code assigned thread execute 
activation dispatched specific agent server 
server authenticates incoming agent credentials determines privileges granted 
assigns thread execute agent code 
variant creation primitive allows agent create identical copies execute parallel potentially visit hosts performing task creator 
aglets supports cloning agents 
variant forking agents supported agent tcl example newly created agent retains parent child relationship creator 
allows programmers create agents inherit ownership privileges parents 
agent migration course execution agent program may determine needs visit site network 
achieve invokes migration primitive 
agent server suspend agent execution capture state transmit requested destination 
server destination receive agent state activate appropriate security checks passed 
destination specified agent absolute name server needs migrate relative name agent resource needs locate 
systems provide absolute migration primitives 
relative migration supported systems telescript tacoma ajanta 
systems build migration primitives provide higher level abstractions itinerary contains list servers visit corresponding code execute locations 
table summarizes basic mobility support provided mobile agent systems surveyed 
agent communication synchronization order accomplish useful agents need communicate synchronize user may dispatch agents query vendors catalogs parallel 
agents need collab identify best deal available 
suitable inter agent communication primitives available 
inter agent communication established different mechanisms 
approach provide message passing primitives allow agents send asynchronous datagram style messages set stream connections 
aglets supports datagrams tagged string values agent tcl provides types messages 
method invocation approach communication object systems 
agent objects located server provided invoke operations 
example ajanta telescript allow agents acquire safe located agents 
agents located remote method invocation provided 
voyager supports variants synchronous way reply invocations 
collective communication primitives useful applications groups agents collaborative tasks 
primitives communicate agent group 
group coordination mechanisms barriers built primitives 
concordia supports group communication limited event delivery 
voyager uses hierarchical object grouping mechanism delivery invocation messages groups 
systems support agent grouping 
communication implemented shared data 
example ajanta agents gain access shared object exchange information 
similarly tacoma server provides cabinet visiting agents store data allowing share state simultaneously server 
concordia uses shared object provide barrier agent groups 
metaphor agent communication event signalling 
events usually implemented asynchronous messages 
agent may request system notify certain events interest occur agent creation arrivals departures checkpointing referred publish subscribe model event delivery 
model provide broadcast events agents group 
concordia voyager provide primitives 
agent monitoring control agent parent application may need monitor agent status executes remote host 
exceptions errors occur agent execution application may need terminate agent 
involves tracking current location agent requesting host server kill 
ajanta provides terminate primitive purpose 
similarly agent owner may simply recall agent back home site allow continue executing 
equivalent forcing agent execute migrate call home site 
owner event mechanism signal agent raise exception remotely 
agent event exception handler respond migrating home 
aglets ajanta provide retract operation user recall agents electronic mall run digital cash 
capability remotely terminating recalling agents raises security issues agent owner authority terminate 
authentication functions need built primitives system ensure entity attempting control agent owner authorized owner 
ajanta system performs authentication 
order determine needs recall abort agent owner able query agent status time time 
queries answered agent host server keeps track status information active inactive status error conditions resource consumption agents executing site 
owner needs application specific query answered agent simply communicates agent usual agent communication system communication primitives events monitoring agent control telescript local method invocation events supported supported location 
language level 
tacoma agents locate exchange supported supported data meet 
agent tcl message passing agent send events identical supported agent receive 
messages 
stream communication agent meet agent accept 
aglets send receive message objects 
supported force agents return supports synchronous way retract primitive 
reply communication modes 
access control provided 
voyager supports rmi corba dcom 
javabeans compliant supported synchronous way event model 
multicast invocations 
concordia local method invocation publish subscribe supported location 
integrates corba 
multicast events 
multicast possible construct 
ajanta local method invocation proxy agent status queries request agent return location rmi proxy 
supported servers 
recall primitive 
force immediate return retract 
kill agent terminate 
access control provided 
table communication control primitives primitives 
summary communication control primitives supported various systems table 
primitives fault tolerance checkpoint primitive creates representation agent state stored non volatile memory 
agent host node server crashes owner initiate recovery process 
determine agent known checkpoint request server restart agent state 
addition checkpoints agent servers maintain audit trail allow owner trace agent progress itinerary potentially determine cause crash 
systems tacoma voyager concordia support checkpointing fault tolerance 
agent encounters exception handle server take suitable actions assist application recovery 
example send notification agent owner recall agent terminate 
alternatively server simply transfer agent back owner 
allows owner inspect agent state locally restart appropriately corrected state 
ajanta supports approach 
security related primitives agents may pass untrusted hosts networks agent programmer needs primitive operations protecting sensitive data 
includes primitives encryption decryption protect privacy data message sealing message digests tampering code data detected 
digital signatures signature verification primitives may needed establish authenticated communication channels 
public key cryptography programmer needs secure key pair generation primitive key certification infrastructure 
primitives related encoding allocation digital cash may required 
agent identity certified public key digital cash allocation constraints access rights encoded credentials owner suitable operations provided system 
mobile agent systems surveyed support primitives 
examples mobile agent systems academic industrial research groups currently investigating building mobile agent systems 
section give overview representative subset listed approximately chronological order development 
telescript telescript developed general magic includes object oriented type safe language agent programming 
telescript servers called places offer services usually installing stationary agents interact visiting agents 
agents go primitive absolute migration places specified dns hostnames 
system captures execution state thread level agent resumes operation immediately go statement 
relative migration possible meet primitive 
located agents invoke methods communication 
event signalling facility available 
telescript significant support security access control 
agent place associated authority principal responsible 
place query incoming agent authority potentially deny entry agent restrict access rights 
agent issued permit encodes access rights resource consumption quotas system terminates agents exceed quotas raises exceptions attempt unauthorized operations 
telescript commercially successful primarily required programmers learn completely new language 
general magic telescript project embarked similar java system called odyssey uses design framework 
common systems lacks thread level state capture 
tacoma tacoma joint project university norway cornell university 
agents written tcl technically carry scripts written languages 
agent state explicitly stored folders aggregated 
agent created packing program distinguished folder called code 
intended host name stored host folder 
absolute migration destination requested meet primitive 
meet command names parameters agent destination host capable executing incoming code system supplied ag tcl executes tcl scripts 
briefcase containing code host application defined folders sent agent 
system capture thread level state agent migrates 
ag tcl script restarts agent program destination 
agents meet primitive communicate locating exchanging 
synchronous asynchronous communication supported 
alternative communication mechanism cabinets immobile repositories shared state 
agents store application specific data cabinets accessed agents 
security mechanisms implemented 
fault tolerance tacoma uses checkpointing provides rear guard agents tracking mobile agents migrate 
agent tcl agent tcl developed dartmouth college allows tcl scripts migrate servers support agent execution communication status queries non volatile storage 
modified tcl interpreter execute scripts allows capture execution state thread level 
agent migrates entire source code data execution state transferred 
migration absolute destination specified location dependent name 
possible clone agent dispatch desired server 
agents location dependent identifiers dns hostnames change migration 
inter agent communication accomplished exchanging messages setting stream connection 
event signalling primitives available events currently identical messages 
agent tcl uses safe tcl execution environment provide restricted resource access 
ensures agents execute dangerous operations appropriate security mediation 
system maintains access control lists coarse granularity agents arriving particular machine subjected access rules 
agent tcl calls external program pgp perform authentication checks necessary encrypting data transit 
cryptographic primitives available agent programmers 
aglets aglets java system developed ibm 
agents called aglets system migrate agent servers called contexts located different network hosts 
distinguishing feature aglets callback programming model 
system invokes specific methods agent certain events life cycle occur 
example agent arrives server method automatically invoked 
programmer implements agent class inheriting default implementations callback methods class overriding application specific code 
agent migration absolute requires specifying location dependent urls destination servers 
mobility implemented java object serialization thread level execution state captured 
agent reactivated destination run method invoked 
programmer implement control flow method 
agents shielded proxy objects provide language level protection location transparency 
message passing mode communication supported aglets invoke methods 
messages tagged objects synchronous way reply 
system provides retract primitive recalls caller server 
access control primitive 
aglets currently limited security support comprehensive authorization framework developed 
voyager java agent system developed objectspace 
novel feature voyager utility called vcc takes java class creates remotely accessible equivalent called virtual class 
instance virtual class created remote host resulting virtual provides access instance 
mechanism implementing agents 
agent assigned globally unique identifier optional symbolic name object construction 
name service available locate agent identifier name 
virtual class provides moveto primitive allows agent migrate desired location 
destination specified server dns hostname port number virtual object agent wishes located 
execution state captured thread level moveto call specifies particular method executed migration complete 
forwarder object remains original location ensures attempts contact agent site redirected new location 
agent communication possible method invocation virtual 
agents synchronous way reply type invocations 
multicasting possible agents aggregated hierarchically groups 
simple checkpointing facility implemented 
concordia concordia developed mitsubishi electric supports mobile agents written java 
common java systems provides agent mobility java serialization class loading mechanisms capture execution state thread level 
agent object associated separate itinerary object specifies agent migration path dns hostnames methods executed host 
concordia extensive support agent communication providing asynchronous event signalling specialized group collaboration mechanism 
addresses fault tolerance requirements object persistence mechanism reliable agent transfer agents servers create checkpoints recovery purposes 
agent state protected transit persistent stores encryption protocols 
servers protect resources statically specified access control lists user identities 
agent associated particular user carries way hash user password 
clear hash securely bound specific agent 
mechanism applies closed systems agent server access global password file verifying agent password 
ajanta java system developed university minnesota 
ajanta provides agent mobility java serialization state capture 
thread level execution state captured 
agent code loaded demand agent specified server 
transmissions agent code state encrypted authenticated public key protocols 
absolute relative migration supported uniformly name service translate global location independent names network addresses 
name service supports public key infrastructure 
ajanta agent executed isolated protection domain prevent interference agents 
server resources protected encapsulating proxy objects created dynamically customized specific client agents 
mechanism allow secure inter agent communication method invocation 
communication network possible remote method invocation 
authenticated control functions allow applications recall terminate remote agents time 
ajanta addresses problem protecting agent state malicious servers 
provides cryptographic mechanisms agent owner secure parts agent state detect subsequent tampering 
agents keep parts state private selectively reveal certain objects specific servers 
described mobile agent paradigm discussed requirements terms system support 
different approaches taken designers address issues identified 
choice programming model varies script agents useful quickly automating simple tasks objectoriented agents better suited complex applications benefit modularity type safety 
demise technically impressive system telescript indicates popular general purpose languages programming models internet domain succeed special purpose ones telescript 
major obstacle preventing widespread acceptance mobile agent paradigm security problems raises 
include potential system penetration malicious agents converse problem exposure agents malicious servers 
find current system solves security problems satisfactorily mobile agent security remains open research area 
ad hoc integration security mechanisms mobile agent framework design integrates security basic agent infrastructure preferable 
far designers paid little attention application level issues ease agent programming control management agents dynamic discovery resources literature basic templates composing agent itineraries just starting appear 
yellow pages services standardized interfaces necessary allow user agents dynamically locate resources need 
current systems require programmer know network addresses resources 
uniform location independent resource naming schemes help simplify programmer task 
larger complex systems roving agents deployed programmers need reliable control primitives starting stopping issuing commands agents 
agent system incorporate robustness fault tolerance mechanisms allow applications operate unreliable networks 
little done far quantifying performance tradeoffs mobile agent paradigm 
summary find mobile agent systems reach maturity needed especially address security robustness concerns 
acknowledgments anonymous referees comments helpful improving presentation 

parallelism fault tolerance chorus 
journal systems software pages 
mitsubishi electric 
concordia infrastructure collaborating mobile agents 
proceedings st international workshop mobile agents ma april 
william farmer joshua guttman vipin swarup 
security mobile agents issues requirements 
proceedings th national information systems security conference pages october 
robert gray 
agent tcl flexible secure mobile agent system 
proceedings th annual tcl tk workshop tcl july 
colin harrison david chess aaron 
mobile agents idea 
technical report ibm research division watson research center march 
available url www research ibm com ps 
dag johansen robbert van renesse fred schneider 
operating system support mobile agents 
proceedings th ieee workshop hot topics operating systems hotos pages may 
eric jul henry levy norman hutchinson andrew black 
fine grained mobility emerald system 
acm transactions computer systems february 
gunter danny lange oshima 
security model aglets 
ieee internet computing pages july august 
anand tripathi 
agent server architecture ajanta mobile agent system 
proceedings international conference parallel distributed processing techniques applications pdpta july 
objectspace 
objectspace voyager core package technical overview 
technical report objectspace july 
available www objectspace com 
bruce schneier 
applied cryptography 
john wiley nd edition 
james stamos david gifford 
remote evaluation 
acm transactions programming languages systems october 
tommy thorn 
programming languages mobile code 
acm computing surveys september 
john 
active message processing messages messengers 
uhlig editor computer message system pages 
north holland 
james white 
mobile agents 
technical report general magic october 
