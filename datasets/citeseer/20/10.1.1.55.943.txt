phase exact algorithm max sat weighted max sat problems brian borchers judith march describe phase algorithm max sat weighted max sat problems 
phase gsat heuristic find solution problem 
second phase enumeration procedure davis putnam loveland algorithm find provably optimal solution 
heuristic stage improves performance algorithm obtaining upper bound minimum number unsatisfied clauses pruning branches search tree 
compare algorithm integer programming branch cut algorithm 
implementation phase algorithm faster research partially supported onr number 
mathematics department new mexico tech nm 
department mathematical sciences clemson university clemson sc integer programming approach problems 
integer programming approach effective phase algorithm classes problems including max sat problems 
propositional logic formula written conjunctive normal form conjunction clauses clause disjunction set literals literal variable negation variable 
satisfiability problem sat stated formula conjunctive normal form truth assignment logical variables true 
satisfiability problem known np complete restrict clauses literals garey johnson 
exact algorithms satisfiability problem include davis putnam loveland algorithm davis putnam loveland resolution robinson integer programming approaches blair thompson hooker hooker jeroslow wang 
heuristics sat include selman levesque mitchell gsat heuristic selman selman kautz resende feo grasp heuristic resende feo 
algorithms search sat truth assignment 
heuristic discovers truth assignment proven problem satisfiable 
satisfying truth assignment discovered shown problem unsatisfiable 
concerns related maximum satisfiability problem max sat weighted version maximum satisfiability problem 
max sat problem stated collection clauses cm involving logical variables find truth assignment maximizes number satisfied clauses weighted max sat problem stated collection clauses cm involving logical variables clause weights find truth assignment maximizes total weight satisfied clauses number applications max sat problem discussed hansen jaumard hansen jaumard 
max sat weighted max sat problems np hard 
furthermore polynomial time approximation scheme max sat np papadimitriou yannakakis 
goemans williamson shown possible approximate max sat factor polynomial time goemans williamson 
heuristics satisfiability problem constructing truth assignments satisfy large number clauses heuristics automatically applicable max sat problem 
hansen jaumard hansen jaumard give summary heuristics approximation algorithms max sat 
gsat heuristic selman levesque mitchell extended weighted problems jiang 
integer programming approaches solve max sat weighted max sat problems 

describe cutting plane algorithm max sat problem 
companion borchers joy mitchell describe branch cut algorithm general max sat problem 
describe new algorithm exact solution max sat weighted max sat problems 
report results computational tests algorithm integer programming approach solve number test problems 
noted submission authors aware wallace freuder discusses somewhat similar algorithm max sat problems 
phase algorithm max sat algorithm max sat problem begins gsat heuristic find solution problem 
phase algorithm obtain upper bound ub number clauses unsatisfied optimal solution 
high quality heuristic solution helps improve performance second phase algorithm 
second phase algorithm backtracking algorithm davis putnam loveland procedure implicitly enumerate possible truth assignments 
procedure partially specified truth assignment values true false assigned variables update upper bound ub new record solutions 
keep track unsat number clauses left unsatisfiable current solution 
unsat ub current partial solution extended yield solution better current incumbent solution 
discard current partial solution backtrack partial solution 
backtrack find variable fixed false branching 
set variable true continue processing 
unsat ub gamma perform unit clause tracking 
unit clause clause literals fixed false 
literals left unit clauses fixed true unsat increase value ub 
performing unit clause tracking update value unsat 
examined current solution unsat ub add logical variable current partial solution 
variable tried true false creates new subproblems considered 
refer step branching 
branch algorithm selects clauses smallest number literals 
pick variable appears largest number clauses 
fix false 
go iteration algorithm 
algorithm stops implicitly enumerated possible solutions 
algorithm max sat problem summarized algorithm 
algorithm phase algorithm max sat 
gsat heuristic obtain heuristic solution 
ub number unsatisfied clauses solution 


backtracking search 
update unsat number clauses left unsatisfiable current solution 
unsat ub gamma perform unit clause tracking 
unsat ub goto step 
variables fixed true false new best solution 
ub unsat 
goto step 
branch 
pick variable fix false 

backtrack 
find largest jk fixed false branching 
exists 
fix jk true 
goto step 
relatively simple modify algorithm weighted maximum satisfiability problems 
modifications gsat heuristic weighted problems discussed jiang 
backtracking search counting number unsatisfied clauses ub unsat count total weight unsatisfied clauses 
unit clause tracking performed unit clause weight greater equal ub gamma unsat 
quite simple modify algorithm solve sat problems 
step skip gsat procedure simply set ub 
modification algorithm backtrack current solution unsatisfied clauses 
computational results algorithm described previous section implemented code unweighted problems referred maxsat 
code weighted code test problems available www edu borchers maxsat html 
problems referred 
compared performance codes integer programming code max sat weighted max sat problems joy 
code software package development branch cut algorithms nemhauser 
codes tested ibm rs megabytes main memory 
codes compiled ibm compiler flag full code optimization 
testing codes objectives 
objective determine size problems reasonably solved implementation phase algorithm 
second objective determine gsat heuristic improved performance phase algorithm 
third objective determine algorithm competitive integer programming approach 
tested codes variety randomly generated max sat problems 
problems variables clauses 
problem sizes picked problems close satisfiability problems large number unsatisfied clauses optimal solution 
computational results shown tables 
number variables clauses increases problems difficult code solve 
max sat problems variables clause tially faster cases 
difference performance extreme number clauses increases 
problems variables clause maxsat consistently faster 
number clauses increases competitive times clauses variables maxsat faster factor 
performance problems variables clause explained observation processed small branch cut trees solving problems 
problems variables clause process substantially larger branch cut trees 
appears lower bounds obtained solving linear programming problems adding cutting planes effective variable clause problems problems variables clause 
tested codes number randomly generated weighted max sat problems 
problems randomly generated sizes max sat test problems 
clause integer weight uniformly distributed 
computational results shown table 
faster code weighted max sat problems code faster max sat problems 
cases weighted problems easier solve corresponding unweighted problems 
order determine effective gsat heuristic ran maxsat number test problems gsat heuristic turned 
computational results shown table 
relatively small problems gsat heuristic worthwhile 
larger problems gsat heuristic dramatic effect cpu time required solve problem 
maxsat code gsat times faster code heuristic 
summary described phase algorithm solution max sat weighted max sat problems 
algorithm uses gsat heuristic phase find heuristic solution 
uses modified davis putnam loveland procedure obtain provably optimal solution 
implemented algorithm compared integer cut algorithm 
implementation phase algorithm capable solving randomly generated max sat max sat problems variables clauses reasonable amount time fast workstation 
problems harder solve simple satisfiability problems similar size 
implementation phase algorithm considerably faster integer programming approach max sat problems integer programming approach faster phase algorithm max maxsat vars clauses opt soln time backtracks time nodes hours hours hours hours hours hours hours hours hours hours table computational results max sat test problems 
sat problems 
algorithm dominant problems choice appropriate algorithm depends characteristics problem solved 
maxsat vars clauses opt soln time backtracks time nodes hours hours hours hours hours hours table computational results max sat test problems 
maxsat vars clauses opt soln time backtracks time nodes hours hours hours hours hours hours hours hours hours table computational results weighted max sat test problems 
maxsat vars clauses opt soln time backtracks time nodes hours hours hours table computational results weighted max sat test problems 
problem maxsat vars clauses vars clause time backtracks table computational results max sat problems gsat 
blair jeroslow lowe 

results experiments programming techniques propositional logic 
computers operations research 
cunningham tun cel wang 

linear programming rounding approach max sat 
johnson trick editors cliques coloring satisfiability volume dimacs series discrete mathematics theoretical computer science pages 
ams 
davis putnam 

computing procedure quantification theory 
journal association computing machinery 
garey johnson 

computers intractability guide theory np completeness 
freeman new york 
goemans williamson 

improved approximation algorithms maximum cut satisfiability problems semidefinite programming 
journal acm 
hansen jaumard 

algorithms maximum satisfiability problem 
computing 
thompson 

column subtraction algorithm exact method solving weighted set covering packing partitioning problems 
computers operations research 
hooker 

resolution vs cutting plane solution inference problems computational experience 
operations research letters 
hooker 

branch cut solution inference problems propositional logic 
annals mathematics artificial intelligence 
jeroslow wang 

solving propositional satisfiability problems 
annals mathematics ai 
jiang kautz selman 

solving problems hard soft constraints stochastic algorithm max sat 
st international joint workshop artificial intelligence operations research 
joy mitchell borchers 

branch cut algorithm max sat weighted max sat 
appear proceedings dimacs workshop satisfiability theory applications 
loveland 

automated theorem proving logical basis 
north holland new york 
nemhauser 

mixed integer optimizer 
operations research letters 
papadimitriou yannakakis 

optimization approximation complexity classes 
journal computers system sciences 
resende feo 

grasp satisfiability 
johnson trick editors cliques coloring satisfiability volume dimacs series discrete mathematics theoretical computer science pages 
ams 
robinson 

machine oriented logic resolution principle 
journal association computing machinery 
selman kautz 

empirical study greedy local search satisfiability testing 
proceedings eleventh national conference artificial intelligence aaai washington dc pages 
selman levesque mitchell 

new method solving hard satisfiability problems 
proceedings tenth national conference artificial intelligence aaai san jose ca pages 
wallace freuder 

comparitive studies constraint satisfaction davis putnam algorithms maximum satisfiability problems 
johnson trick editors cliques coloring satisfiability volume dimacs series discrete mathematics theoretical computer science pages 
ams 
