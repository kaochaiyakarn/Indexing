appear fourth international conference simulation adaptive behavior sab increasing adaptivity evolution strategies ralf salomon ai lab department computer science university zurich zurich switzerland fax email salomon ifi unizh ch automated generation controllers real world autonomous agents means evolutionary methods attracted lot attention 
pertinent research employed genetic algorithms variations thereof 
applied different evolutionary method generation control architecture braitenberg vehicles evolutionary strategies 
application es accelerates development controllers order magnitude hours compared days 
result important development process done real systems 
addition dramatic speedup important theoretical reason preferring evolutionary strategy genetic algorithms epistatic interaction 
autonomous agents self sufficient embodied systems robots useful 
autonomous means agent operates human control 
self sufficient means agent maintain internal energy level long time typically agent gets reward doing useful 
autonomous agents equipped sensors effectors motors grippers 
agent perceives environment sensors infrared sensors manipulates environment actively effectors 
major goal research autonomous agents study intelligence result system environment interaction understanding intelligence computational level 
autonomous agents important field new ai 
overview special issues involved autonomous agent design see example 
control structures autonomous agents developed designer applying evolutionary algorithms 
research projects genetic algorithms gas evolve neural control structures autonomous agents :10.1.1.101.146:10.1.1.133.9324
pointed harvey automated evolution appropriate allows development complex control structures exhibit interactions sub systems :10.1.1.101.146
advocate evolutionary algorithms adaptive systems 
gas successfully applied small tasks increasing amount research gives strong evidence gas time consuming parameters exhibit 
describes interaction parameters respect fitness individual 
results research strongly indicate independence parameters essential prerequisite ga high global convergence performance presence drastically slows convergence 
problem context autonomous agents parameters control systems realworld applications independent 
consequently evolution simple controllers braitenberg vehicles time consuming 
relieve problem suggested divide evolution complex systems different stages :10.1.1.101.146
research projects focused gas option evolutionary algorithms 
surprisingly little attention devoted evolution strategy es defined rechenberg schwefel 
es especially designed applications involve real valued parameters 
section gives brief comparison algorithms respect autonomous agents 
result comparison performance es degrade presence es behaves invariant respect 
theoretical analysis section supported case study evolution braitenberg vehicles 
section describes setup case study 
case study consists khepera tm robot example small robot widely research autonomous agents 
subsection describes khepera detail 
order achieve goal operating autonomously agent perform different tasks exploring environment moving avoiding obstacles forth 
agent behavior controlled control system typically implemented neural network 
control system uses sensor readings internal state determine agent action 
subsection describes simple neural control architecture called braitenberg vehicle section describes arena robots operate 
section demonstrates benefits es applied development adaptive control architectures 
section reports experiments obtained applying es evolution braitenberg vehicles 
es evolves reasonable braitenberg controllers generations takes approximately half hours 
research uses gas task :10.1.1.133.9324
ga approach requires approximately half days 
es speeds developmental process order magnitude 
speed great practical relevance experiments done real systems dynamically interact real world 
time reduction allows application complex control structures currently 
important feature gas ability genomes variable length 
section briefly shows important feature incorporated es 
section concludes summary 
evolutionary algorithms evolutionary algorithms seen framework includes genetic algorithms evolutionary strategies evolutionary programming genetic programming 
algorithms heuristic population search procedures natural selection population genetics 
typically population search procedures generate offspring generation 
fitness value defined fitness function assigned offspring 
depending fitness population member survives certain probability 
evolutionary algorithms implement different strategies algorithm best suited different application domains 
subsections give brief description gas es 
comparison evolutionary algorithms 
section compares schemes detail respect autonomous agents adaptivity performance issues 
furthermore algorithms grounded extensive theory example :10.1.1.30.5983
genetic algorithm ga technique holland gas 
exist ga variety variants covering different applications aspects 
canonical ga described follows step initialization population individuals evaluation individuals fitness step selection parents preselected selection scheme roulette wheel linear ranking truncation selection step recombination selected parents exchanging parts genes step mutation genes prespecified probability step go step ga particular application domain designer concerned coding parameters implementation mutation recombination crossover operators choice selection scheme 
traditionally ga treats parameter bit string 
depending required precision coding scheme encode parameter certain number bits attached mapping function 
mapping function maps bit representation real valued parameters 
coding scheme directly bit representation programming language 
case mapping function needed 
algorithms bga treat parameter real valued data type implement mutation adding subtracting small random numbers :10.1.1.30.5983
generation ga typically draws pairs parents applies mutation recombination probabilities pm respectively 
generating specified number offspring ga evaluates offspring selects best population members parents generation 
typical selection schemes roulette wheel selection linear ranking truncation selection 
gas elitist selection scheme preserves best individual order maintain gained success 
influence different selection schemes resulting convergence example 
gas important find appropriate parameter settings 
normally mutation probability pm set small values pm denotes number parameters number weights neural network controller :10.1.1.30.5983
generally gas prefer high recombination rates 
point point crossover recombination probability set values uniform recombination probability set 
ga framework successfully applied various domains function optimization vlsi design neural network learning autonomous agent development 
applications gas field autonomous agents example :10.1.1.101.146:10.1.1.133.9324
evolution strategy es introduced see 
es similar gas 
es maintains population parents generates offspring generation 
es parents selected best offspring es parents selected union parents offspring 
details see example 
currently es recommended especially noisy environments 
contrast gas es encodes parameter floating point numbers applies mutation parameters simultaneously pm 
mutations typically implemented adding oe normal distributed random numbers 
key concept es simplest form maintains global step size oe individual 
step size self adapted mechanism offspring inherits step size parent 
step size modified log normal random numbers prior mutation 
means step size self adapted nearly optimal values statistical sense offspring survive best adapted step size 
details different step size schemes see 
addition es recombination schemes gas 
self adaptation mechanism step size oe great advantage 
allows es self adapt different fitness landscapes 
population size es parameters tuned designer 
es directly encodes parameters floating point numbers es better suited problems neural networks specified set parameters 
evolutionary programming ep introduced fogel 
ep evolutionary algorithm similar es 
applications general function optimization 
schemes similar expected ep yields similar results applied evolution braitenberg vehicles 
genetic algorithm vs evolution strategy differences gas es small significantly influence performance algorithms consequently aim different problem domains 
remainder subsection discusses important aspects 
main difference algorithms gas apply mutations parameters offspring es applies mutation parameters pm 
furthermore es encodes parameter floating point number gas general case worry coding scheme 
traditionally gas encode parameters bitstrings 
applications involve real valued parameters directly floating point numbers :10.1.1.30.5983
addition es features self adaptation mechanism self adapts step size parameter settings done user 
coding mechanisms clear es suited real valued parameters gas traditional bit coding schemes preferred tasks problem 
furthermore es increases adaptation algorithm inherently adaptive 
applications report high performance applied various optimization task especially optimization multimodal function contain millions local optima global optimum 
high performance achieved applications suggest gas easily escape local optima global convergence 
results show performance gas drastically degrades rotation applied coordinate system 
furthermore theoretical analysis shows computational complexity gas increas applied multimodal functions parameters depend 
applied simple unimodal functions drastically slows convergence gas 
analysis suggests independence parameters essential prerequisite high performance gas 
rotation coordinate system change fitness function fitness landscape induces 
describes interaction different parameters respect fitness function 
words parameters parameters involved adapted simultaneously order achieve improvement fitness function adapting parameter leads worse fitness 
applying mutation parameter sufficient situations 
particular application important question parameters independent depend 
looking control structures autonomous agents controller parameters independent general case 
section investigates evolution braitenberg controllers 
turns weights braitenberg network independent 
results show simple es order magnitude faster ga approaches 
argued acceleration development controllers order magnitude important 
improvement wheel left wheel right ir ir ir ir ir ir ir ir khepera robot 
right part shows approximate location infrared sensors ir 
ir great practical interest 
control architectures allow agent adapt environment developed real hardware 
important developmental process consumes hours take days 
second moderate convergence speed important complexity control architectures increases 
theoretical point view randomized algorithm eventually finds solution probability strictly greater zero 
practical point view time matters 
convergence speed allows development complex control architectures turn allows agent better adapt environment tasks done agent 
summary results section strongly suggest research community devote attention evolution strategy evolutionary programming 
experimental setup section describes experimental setup evolution optimization braitenberg vehicles 
subsection describes khepera robot widely research autonomous agents 
braitenberg architecture described subsection subsection describes arena robot operate 
khepera robot khepera robot cf 
fig 
mm diameter mm high 
robot equipped infrared ambient light sensors motors controlled independently 
khepera sensors motors controlled motorola micro controller 
khepera operate modes 
mode program downloaded onboard memory allows khepera operate hardware 
second mode khepera connected workstation serial link 
experiments reported robot controlled workstation ambient light sensors 
detailed description robot electrical parts 
motors controlled independently sending commands function calls robot 
valid speed values range gamma inside program values normalized range gamma 
avoid problems caused floating point integer conversion random numbers added motor speeds time step 
setting motors speed different signs example robot spins spot 
robot interprets speed settings commands 
internal pid controllers take care robot dynamics 
rapidly changing motor commands induce additional dynamics cause problems fitness evaluation 
means attached wheel encoders robot measures motor real speed differ command setting situations robot move 
real speeds obtained sending special commands robot 
khepera equipped infrared proximity sensors 
sensor readings type integer values range 
program sensor readings normalized values range 
sensors give reasonable input values object distances mm mm 
sensor value indicates robot close object sensor value indicates robot receive reflection infrared signal 
major problem khepera sensor readings noisy causes problems fitness evaluation controller weights braitenberg network 
effect noisy sensors fitness evaluation seen fig 

fig noisy fitness time fitness contribution noisy sensor readings cause dynamical change individual fitness contributions constant environmental conditions 
ure shows fitness contributions dynamically changing constant environmental conditions constant motor speeds constant ambient light constant position arena 
furthermore sensor readings subject environmental conditions material object object surface ambient light 
long series experiments environment kept constant 
summary fitness evaluation extremely noisy 
braitenberg vehicles outlined autonomous agent sit doing consume energy eventually die 
agent operate environment 
moving avoiding obstacles key issue autonomous agent research 
braitenberg proposed simple architectures tasks 
shows control architecture inspired braitenberg type vehicle 
main idea sensor high proximity activation accelerates motor sensor side sensor slows motor opposite side 
principle presence obstacle leads different motor speeds causes robot turn 
depending activation proximity sensors robot turns spins spot backs 
braitenberg type architectures simple straight forward finding appropriate weights easy 
control architecture typically implemented neural network 
activation left motor calculated formula ip right motor left motor obstacle moving path control architecture inspired braitenberg type vehicle 
sensory information controls motors inhibitory excitatory connections 
ip denotes activation proximity sensor denotes weight connects proximity sensor ip left motor 
weight represents idle activation left motor 
bias weight responsible robot forward motion absence obstacle 
calculation right motor activation similarly ip main problem determine weights robot moving avoids obstacles 
done trial error process 
standard neural network training procedures reasonable determine set training patterns prior training 
evolution strategy ideal candidate optimization problem 
experimental setup experimental setup chosen close possible setups proposed research :10.1.1.133.9324
shows arena robot move 
arena size cm walls wood height cm 
width corridors chosen proximity sensor maximum value 
discussed robot arena move forward quickly avoid obstacles 
order evolve braitenberg vehicles fitness function incorporate motor speeds distance obstacles 
speed distance sufficient 
case robot spinning spot high speed far away obstacle high fitness 
robot useful 
fitness function arena approximate size cm 
indicated position facing left starting point fitness evaluation 
enhanced third term favors straight movements penalizing turns see :10.1.1.133.9324
fitness measured follows 
particular time step motor speeds proximity sensors ir measured 
speed robot center penalty term deltav jv gamma sensor highest activation ip max ip calculated 
fitness contribution step gamma deltav gamma ip total fitness sum max time steps max max gamma deltav gamma ip khepera board controller allows sending sensor values milliseconds ms 
means robot moves ms constant motor speeds 
controller receives new values calculates new motor speeds time step 
individual fitness component calculated added total fitness 
experiments section reports typical results evolving braitenberg vehicles means es step size 
results discussed subsection 
es generates new offspring generation selects fittest individuals parents generation 
selection scheme implies strategy elitist selection scheme 
non elitist selection scheme chosen fitness evaluation extremely noisy cf 
fig 

experiments reported es fitness generation braitenberg fittest average typical run evolution constrained braitenberg vehicle 
upper graph represents best individual lower graph average population 
generates offspring crossover uniform recombination intermediate recombination initial standard deviation set 
source additional noise individual starting conditions vary 
long time environmental conditions held constant phenomenon intrinsic real world applications 
experiment runs performed 
figures typical runs resemble average performance 
shows fitness best individual average fitness entire population 
average runs shown averaging eliminates interesting details 
runs percent interval runs 
evolution braitenberg vehicles main problem find controller exhibits tiny reasonable behavior 
initializing weights random leads agent immediately crashes wall gets stuck 
help guide evolution process weights initialized small negative random weights gamma weights set small positive values 
furthermore series experiments exploit morphology robots left right part controllers constrained equal gammai mod constraint leads reduced search space parameters 
experiments fitness evaluation done time steps 
time step requires ms evaluation controller takes seconds 
constrained controllers typical run evolution constrained braitenberg controller seen fig 

shows fitness population fittest agent average population 
generations vehicles sitting initial position crashing backwards wall resulting negative fitness 
generations agents moving forward steps got stuck wall time avoidance behavior sufficient 
short forward movement results small positive fitness step useful agent 
generations fittest agents moving slowly inside corridor 
hitting walls 
hitting wall controllers set motor speeds negative values causes robots back wall turning continue moving inside corridor 
generations fittest agents perform complete laps arena 
controller sides constrained equal identical weights ensure total symmetric behavior 
tolerances electrical characteristics motors sensors impose asymmetric behavior 
consequently controllers find compromise 
result braitenberg vehicles constrained controllers move forward straight line turn approach obstacle 
braitenberg vehicle constrained controller moves high speed rough trajectory 
braitenberg vehicle adapts behavior environment unspecified changing characteristics electrical components 
unconstrained controllers shows typical run evolution unconstrained braitenberg controller 
controller parameters es evolve sides controller connections left motor activation right motor activation seen figs 
evolution unconstrained braitenberg controller requires time final performance lower performance constrained controller 
unconstrained controller develops different survival strategy 
controllers different bias weights cause robot turn small circles 
circling results small positive fitness 
generations circling process preserved radius larger larger 
approximately generations controller side improves object avoidance behavior prevents robot crashing wall resulting behavior interpreted wall 
wall fitness generation unconstrained braitenberg fittest average typical run evolution unconstrained braitenberg vehicle 
upper graph represents best individual lower graph average population 
behavior encoded fitness function 
emerged evolution process 
ongoing evolution process wall behavior improved generations robots perform complete laps arena 
discussion previous subsections investigated development different controller types constrained unconstrained controllers 
constrained control architecture inspired biological observation animals symmetric shape 
constrained controller parameters accelerates evolution process time limits number potential solutions 
consequence controllers develop different survival strategies 
relationships controller types investigated series control experiments weights unconstrained controllers initialized weights taken evolved constrained controller 
generations controllers losing behavior fitness dropped values 
unconstrained controllers started develop wall behavior discussed 
developed controller adapted environment control architecture 
investigations shown controller reacts sensitively parameter changes controller parameters exhibit high 
results sensor non linearities ms time interval subsequent sensor readings 
reasonable change example bias weight result high speed robot crash wall 
conversely changing avoidance weight degrade fitness robot tend 
consequently parameters adapted simultaneously 
es obeys requirement mutation probability pm es applies mutation parameters time 
suspected observable main reason inefficiency ga approaches :10.1.1.133.9324
research reports ga needs generations population individuals 
optimization process takes approximately hours approximately times longer es approach 
coincides research discussed investigates performance gas applied artificial fitness functions 
main results indicate independence parameters optimized essential prerequisite gas ga performance significantly degrades 
points ga research main focus application es evolution optimization braitenberg vehicles 
comparison remote research problematic parameters realworld application replicated 
addition series control experiments ga es 
control experiments yield roughly performance reported :10.1.1.133.9324
ga needs approximately times fitness evaluations es 
ga suffers high need large population individuals 
generation ga generates times offspring es 
application es converges time period ga performs generations 
enhancements research gas important consider genomes varying length 
applications explicitly feature development complex control structures :10.1.1.101.146
main underlying idea ga develops small solution important properties 
ongoing evolution process genome allowed grow size enables system add beneficial features 
argued dynamical growth genome proprietary gas reasonable es 
outlined types algorithms similar 
apply mutation recombination 
mutation operator length genome matter 
applying recombination crossover operators ensure correctness new genome anyway 
hybrid method proposed allows development neural networks minimal topology 
essentially hybrid method works follows offspring randomly adds removes neurons connections network inherited parents 
similar self adaptation step size hybrid method self adapts probabilities adding removing connections units 
means network dynamically grow shrink depending actual environment 
discussed practical application evolution strategy evolution optimization braitenberg vehicles 
braitenberg vehicles autonomous agents simple control architecture typically implemented neural network 
autonomous agents important tools new artificial intelligence study intelligence result system environment interaction understanding intelligence computational level 
practical experiments constrained unconstrained braitenberg controllers investigated 
controllers typically develop different survival strategies discussed 
comparison research apply genetic algorithms similar tasks shows es approach faster ga approach 
suspected high controller parameters drastically slows ga approach 
es speeds development braitenberg controllers order magnitude important experimentation done real systems 
es converges hours compared hours required ga approach 
argued evolution strategy adaptive self adapts parameters step size mutation probability 
allows better embed approach complex tasks 
argued small mutation rate usually gas biologically plausible mutation rate pm es 
argue way 
looks living things individuals differ attributes 
example comparing arbitrary selected humans humans differ perspectives 
nature applies mutation genes 
genomes encode parameters resulting individual 
genome encodes developmental processes 
modifying gene results different developmental programs consequently resulting individual differs perspectives 
evolutionary approaches involve real developmental processes growing argue es better reflect nature principles 
furthermore experiments indicate evolution process highly benefit exploitation physical matters 
research devoted complex control architectures object avoidance navigation manipulation neural controllers designated enhance robots capabilities competences supported part human capital mobility fellowship european union number 
rolf pfeifer peter eggenberger helpful discussion 
back optimal mutation rates genetic search 
forrest ed 
proceedings fifth international conference genetic algorithms pp 

morgan kaufmann san mateo ca 
back schwefel 
overview evolutionary algorithms parameter optimization evolutionary computation pp 

mit press cambridge ma 
beyer 
theory evolution strategies benefits sex theory 
evolutionary computation pp 

mit press cambridge ma 
braitenberg vehicles experiments synthetic psychology mit press cambridge massachusetts 
brooks robust layered control system mobile robot 
ieee journal robotics automation pp 

cliff husbands harvey evolving visually guided robots 

meyer roitblat wilson eds animals animats pp 

mit press bradford books cambridge ma 
de jong analysis behavior class genetic adaptive systems 
ph thesis university michigan 
floreano mondada automatic creation autonomous agent genetic evolution neural network driven robot 
cliff husbands meyer wilson eds animals animats iii proceedings third international conference simulation adaptive behavior pp 

mit press bradford books cambridge ma 
floreano mondada evolution homing navigation real mobile robot appear ieee transactions systems man cybernetics part vol june 
fogel autonomous automata industrial research vol 
pp 

fogel evolutionary computation new philosophy machine learning intelligence ieee press piscataway nj 
goldberg genetic algorithms search optimization machine learning addison wesley publishing 
holland adaptation natural artificial systems ann arbor michigan university michigan press 
harvey husbands cliff thompson jakobi evolutionary robotics sussex approach :10.1.1.101.146
pfeifer brooks eds robotics autonomous systems special issues practice autonomous agents 
khepera users manual laboratoire de swiss federal institute technology epfl lausanne switzerland 
maes ed designing autonomous agents theory practice biology engineering back mit press cambridge ma 
muhlenbein schlierkamp voosen science breeding application breeder genetic algorithm :10.1.1.30.5983
evolutionary computation pp 

mit press cambridge ma 
nolfi parisi learning adapt changing environments evolving neural networks technical report institute psychology 
national research council rome italy 
www kant rm cnr public html 

potter de jong cooperative coevolutionary approach function optimization 
davidor schwefel manner eds proceedings parallel problem solving nature pp 

springer verlag 
rechenberg evolutionsstrategie 
stuttgart 
salomon hybrid method evolving neural network topologies 
dagli fern andez ghosh eds proceedings artificial neural networks engineering annie pp 

new york asme press 
salomon performance degradation genetic algorithms coordinate rotation 
appear fifth annual conference evolutionary programming ep held san diego usa february march 
salomon implicit independence assumptions notorious problem genetic algorithms 
appear proceedings international symposia soft computing intelligent industrial automation held reading uk march march 
schwefel evolution optimum seeking john wiley sons new york brisbane toronto singapore 
steels ed biology technology intelligent autonomous agents 
special issue robotics autonomous systems elsevier amsterdam lausanne new york oxford 
thierens goldberg convergence models genetic algorithm selection schemes 
davidor schwefel manner eds proceedings parallel problem solving nature pp 

springer verlag 
