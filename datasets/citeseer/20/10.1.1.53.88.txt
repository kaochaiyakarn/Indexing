new approach text searching ricardo baeza yates 
de ciencias de la computaci universidad de chile blanco santiago chile gaston gonnet informatik eth zurich switzerland introduce family simple fast algorithms solving classical string matching problem string matching classes symbols don care symbols complement symbols multiple patterns 
addition solve problems allowing mismatches 
features algorithms don need buffer input real time algorithms constant size patterns suitable implemented hardware 
string searching important component problems including text editing bibliographic retrieval symbol manipulation 
surveys string searching 
string matching problem consists finding occurrences pattern length text length generalize problem allowing don care symbols complement symbol finite class symbols 
solve problem patterns mismatches 
small patterns worst case time linear size text say pattern small bounded constant 
main idea represent state search number search step small number arithmetic logical operations provided numbers large represent possible states search 
word size bits computer time algorithm sigmaj extra space sigmaj preprocessing time sigma denotes alphabet 
string matching empirical results show new algorithm compares favourably knuth morris pratt kmp algorithm pattern length bm algorithm short patterns length 
patterns don care symbols complement symbols practical efficient algorithm literature generalized finite class symbols complements 
searches mismatches algorithm times faster known algorithm 
main properties class algorithms ffl simplicity preprocessing search simple bitwise logical operations shifts additions 
communications acm oct 
ffl buffering text need stored 
ffl real time time delay process text character bounded constant depending pattern length 
worth noting bm algorithm needs buffer text 
properties indicates class algorithms suitable hardware implementation 
reasons believe new approach valuable contribution applications dealing text searching 
preliminary version 
section presents new algorithm 
sections extend approach general patterns 
section give efficient implementations programming language 
shift add approach string matching algorithm finite automata theory knuth morris pratt algorithm exploits finiteness alphabet boyer moore algorithm 
pat pattern length text text length trying represent global state search previous algorithms vector different states state tells state search positions 
pattern positions gamma 
text current position text 
intuitively think string comparators running parallel reading concurrently text position 
analogy called bit parallelism introduce approach survey 
set states reading th character text 
number mismatches pat 
pat text gammai 
text characters different corresponding positions 
match current position text 
pattern 
suppose position gamma text searching pattern 
gives value gamma advance position text new value 
table pat value 
difficult see gamma gamma text defining reason call algorithm shift add algorithm 
assume arbitrary precision arithmetic word size dependency current position implicit 
suppose need bits represent gamma gamma pattern pattern pattern pattern pattern text 
text pattern pattern pattern pattern pattern example shift add algorithm 
individual state shall see depends searching problem 
represent vector state efficiently number base state gamma deltai string matching need bit characters matched 

pat 
text gammai 
text report match equivalently state gamma update state reading new character text ffl shift vector state bits left reflect advanced position text 
practice sets default 
ffl update individual states new character 
table defined preprocessing pattern entry alphabet symbol operator op old vector state table value gives new state 
note works operator individual state produce carry affects state search step changes state assignment state state gamma 
op text 
denotes bitwise shift left operation 
definition table basically cases 
define gamma ffi pat deltai symbol alphabet sigma ffi condition true 
implementation subsequent section 
need delta delta sigmaj bits extra memory word size delta sigmaj words needed 
set table preprocessing pattern search 
done mb sigmaj time 
example fa dg alphabet pattern 
entries table digit position pattern choice op case exact string matching bitwise logical 
finish example searching occurrence text 
initial state 
text state example state means current position partial matches left lengths respectively 
match text indicated value leftmost bit state search 
complexity search time worst average case mb en mb time compute constant number operations integers mb bits word size bits 
practice patterns length word size bits worst average case time 
uniform cost ram model log size problem case size text 
applies size alphabet 
say string searching algorithm mn log time space complexity 
kind pattern searching problem choose op appropriately sections 
similar idea gonnet applied searching text signatures 
string matching classes extend pattern language allow don care symbols complement symbols finite class symbols 
formally position pattern ffl character alphabet sigma 
practice bit words address conceivable text 
ffl don care symbol matches symbol 
ffl characters class characters allow ranges example 
ffl complement character class characters matches character belong example pattern pp tv matches word python patton 
size description pattern number elements class size considered complements taken account size pattern 
previous example 
string matching don care symbols addressed fischer paterson achieving log log log log sigmaj asymptotic search time pinter including complement symbols complexity theoretical results algorithms practical 
pinter gives mn algorithm faster naive algorithm 
small patterns complexity algorithm better easier implement 
similar class patterns considered abrahamson theoretical algorithm runs log log log time problem called generalized string matching 
attempts adapt kmp algorithm case failed reason bm algorithm knuth solve problem 
possible horspool version bm algorithm worst case mn average don care character near pattern idea shift table worthless 
mapping class characters unique character karp rabin algorithm solves problem 
probabilistic algorithm check reported match search time mm number matches 
potentially algorithm slow practice multiplications modulus operations 
search extended patterns need modify table position process character class 
gamma ffi class deltai class class characters th position pattern 
example fa dg alphabet ab ab pattern 

string matching entries table maintain mb sigmaj preprocessing time mb em sigmaj time size description pattern initially represent alphabet bit positions corresponding don care symbols complements 
worst case mj sigmaj practical queries similar shows preprocessing phase pseudocode class patterns notation means sequence th position 
search time remains 
pat complement sigmaj pat pat complement pseudocode preprocessing pattern classes 
extend algorithm soundex classes special symbols text 
example don care symbols text define 
string matching mismatches section allow characters pattern mismatch corresponding text 
example pattern mismatch matches dispatch 
landau vishkin give efficient algorithm solve particular problem 
algorithm uses log time space 
fast space required unacceptable practical purposes 
galil giancarlo improve algorithm kn log time space 
algorithm uses static lowest common ancestor algorithm suffix tree 
constant involved linear term large slower landau vishkin algorithm practice 
approaches problem 
solve problem explicitly pattern solution easily extended multiple patterns see section 
case bit represent individual state 
count matches mismatches 
cases log bits individual state necessary bound matches mismatches 
note count matches complement meaning ffi definition simple algorithm dlog op addition 
report match 
note independent value log need log bits extra space 
assume represent value machine word need words preprocessing time 
small need sigmaj extra space sigmaj preprocessing time 
word size bits fix solve problem 
clearly log bits necessary count allow mismatches 
problem adding potential carry state group bits 
get problem having overflow bit remember overflow happened bit set zero step search 
case need dlog bits 
step record overflow bits overflow state reset overflow bits individual states fact steps improvement practical 
new search algorithm shown 
mask mb lim 
gamma state state 
text 
state mask state state mask state lim print match current position improved search algorithm string matching mismatches 
note count matches mismatches log gamma 
problem case possible bits gamma state dlog ke dlog table maximum pattern length bit word depending tell errors match 
table shows maximal values constrained bit word 
slightly complex algorithm log extra bits solve cases 
example fa dg alphabet pattern see example values table 
want search occurrences mismatches text value mismatches position state represented number range 
initial state initial overflow 
text state report match sum leftmost digits state overflow 
case match position mismatch detected position match position mismatches detected position 
possible dlog bits performing log log operations loop 
idea add bit slice ones 
detect shifts bitwise ands 
example perform operations state gamma 
state 

state state char significant bit bit individual state bits bit slice ones 
difficult show need log log operations 
example shift bits 
table shows maximum value case 
mismatches different cost change definition reflect 
case number mismatches maximum allowed cost 
example define mismatch vowels costs mismatches cost see 
multiple patterns consider briefly section problem string matching classes pattern time 
denote union symbol example matches pattern pattern kmp algorithm bm algorithm extended case see respectively achieving worst case time total length set patterns 
search delta delta delta keep vector state pattern immediate mmax time algorithm set patterns max max jp 
coalesce vectors keeping information vector state achieving en search time sum jp disadvantage need numbers size sum bits sum extra space 
similar way extend representation handle mismatches 
implementation section efficient implementations various algorithms count number matches patterns text single word integers 
algorithms different actions case match easily derived 
include experimental results 
programming independent word size possible 
symbolic constants variables ffl size alphabet 
example ascii codes 
ffl word word size bits case 
ffl number bits individual state string matching variable string matching mismatches 
ffl eos string 
shows efficient implementation string matching algorithm 
note gamma leftmost bits unsigned variables 
avoid operation set main loop 
implementation possible op bitwise logical operation complementing value sigma 
experimental results searching times possible matches pattern english text length legal document table 
pattern prefix length example representative queries re rep delta delta delta representa patterns chosen letter different frequency english text frequent 
timings seconds absolute error bounded seconds 
include preprocessing time cases 
algorithms implemented boyer moore suggested horspool baeza yates fastest practical version algorithm pratt suggested authors new algorithm kmp idea scan character pattern 
version shown 
note kmp dependent frequency letter pattern text depends pattern length 
possible implementation combine algorithm algorithm searching left right jumping algorithm 
idea kmp hybrid algorithm 
table see outperforms kmp faster 
true faster patterns length smaller depending pattern horspool mentions 
compared grep program berkeley unix operating system algorithm faster see table spite grep faster input routines low level 
shows execution time searching words chosen random english text 
data brute force algorithm try possible position included 
shift algorithm faster knuth morris pratt define word word size bits define eos string define number bits state define size alphabet ascii search text pattern shift algorithm string searching register char text char pattern register unsigned int state lim initial unsigned int int matches strlen pattern word error pattern size word size preprocessing lim pattern eos pattern lim pattern lim lim 
search matches initial pattern text eos text text scan state initial initial state state state 
text state state lim matches match current position len pattern text state initial text eos return matches shift algorithm string matching 
algorithm faster boyer moore algorithm small note algorithm requires time patterns classes 
figures shows implementation pattern matching mismatches pattern pattern representative kmp grep kmp grep pattern legislative pattern kinematics kmp grep kmp grep table experimental results prefixes different patterns time seconds 
word size bits log bits state 
code similar exact string matching case algorithm slightly slower independent log 
table shows simulation results searching strings english text values small values include data algorithms naive algorithm tries possible position landau vishkin algorithm window size process text mn table suggested original shift add algorithm word size bits bits log bits 
data galil giancarlo algorithm included slower landau vishkin algorithm 
results shift add algorithm clearly faster need multiple word arithmetic larger values multiple patterns preprocessing similar classes 
change search phase match testing condition state mask mask match 
mask bit value position corresponding state bit length pattern naive knuth morris pratt shift boyer moore boyer moore horspool time sec experimental results searching strings english text 
naive lv sa naive lv sa naive lv sa table experimental results seconds searching patterns mismatches pattern lengths 
pattern 
note indicates pattern ends current position possible say pattern starts wasting mb time number matches number patterns 
unsigned int mask lim preprocessing variables unsigned int int number bits state int type kind search match mismatch pattern text pattern matching mismatches int word eos char pattern text int strlen pattern type mismatch count mismatches pattern matching matches type match count matches clog ceiling log base word error search case preprocessing preprocessing pattern search return search text int clog int ceiling log int log returns 

return string matching mismatches 
final remarks simple class algorithms string matching kinds patterns mismatches 
practical algorithms string matching classes mismatches 
time complexity achieved linear pattern lengths smaller word size bits case applications 
longer patterns need implement integer arithmetic precision needed word number 
number words number small algorithm practical choice string matching classes mismatches 
large algorithm find partial match verify true match simpler algorithm 
running time linear matches 
preprocessing pat char pat int int lim 


type match lim 

pat eos type match pat pat pat word mask mask preprocessing string matching mismatches 
vlsi technology chip uses register bits implements algorithm stream text faster searching times achieved 
applications algorithms restricted main memory text editing example text data bases coarse granularity index provided pattern matching done granules partial answers 
type algorithms matching problems example patterns form set patterns sigma set patterns see set strings classes sigma represents arbitrary characters 
research extend kind errors example transposition characters operation maintains length string design hardware implementation 
int search text search phase char text unsigned int state overflow int matches matches initial state type match state overflow state mask overflow text eos text state state 
text mask overflow overflow 
state mask state type match state overflow lim matches match errors state overflow lim matches match state errors return matches search phase string matching mismatches 
historical note added proof done authors university waterloo part ph thesis author 
submitted revised early 
publication delay new missing experimental results partially outdated 
particular practical improvements boyer moore type algorithms published 
time wu manber extended nicely basic algorithm include approximate string searching 
appears issue cacm 
technique string searching comparisons 
results show full potential practical non comparison text searching algorithms explored 
wish acknowledge helpful comments anonymous referees 
abrahamson 
generalized string matching 
siam computing 
aho corasick 
efficient string matching aid bibliographic search 
acm june 
baeza yates 
improved string searching 
software practice experience 
baeza yates 
string searching algorithms 
frakes baeza yates editors information retrieval algorithms data structures chapter pages 
prentice hall 
baeza yates 
text retrieval theory practice 
th ifip world computer congress madrid spain september 
baeza yates gonnet 
new algorithm pattern matching mismatches 
technical report cs department computer science university waterloo ontario canada 
baeza yates gonnet 
new approach text searching 
proc 
th acm sigir pages cambridge mass june 
addendum acm sigir forum numbers page 
baeza yates gonnet 
fast string matching mismatches 
information computation 
appear 
tech 
report cs dept computer science university waterloo 
baeza yates 
efficient text searching 
phd thesis dept computer science university waterloo may 
research report cs 
baeza yates 
string searching algorithms revisited 
dehne 
sack santoro editors workshop algorithms data structures pages ottawa canada august 
springer verlag lecture notes computer science 
baeza yates 
fast practical approximate pattern matching 
combinatorial pattern matching pages tucson az april 
boyer moore 
fast string searching algorithm 
acm 
walter 
string matching algorithm fast average 
icalp volume lecture notes computer science pages 
springer verlag 
fischer paterson 
string matching products 
karp editor complexity computation siam ams proceedings volume pages 
american mathematical society providence ri 
galil giancarlo 
improved string matching mismatches 
sigact news 
gonnet 
unstructured data bases efficient text searching 
acm pods volume pages atlanta ga mar 
gonnet baeza yates 
handbook algorithms data structures pascal addison wesley wokingham uk 
second edition 
horspool 
practical fast searching strings 
software practice experience 
hume sunday 
fast string searching 
software practice experience nov 
karp rabin 
efficient randomized pattern matching algorithms 
ibm res 
development 
kernighan ritchie 
programming language 
prentice hall englewood cliffs nj 
knuth 
art computer programming sorting searching volume 
addison wesley reading mass 
knuth morris pratt 
fast pattern matching strings 
siam computing 
landau vishkin 
efficient string matching mismatches 
theoretical computer science 
pinter 
efficient string matching don care patterns 
apostolico galil editors combinatorial algorithms words volume nato asi series pages 
springer verlag 
smith 
experiments fast substring search algorithm 
software practice experience oct 
sunday 
fast substring search algorithm 
communications acm aug 
technical correspondence 
notes fast substring search algorithm 
cacm apr 
wu manber 
fast text searching errors 
technical report tr department computer science university arizona tucson arizona june 
wu manber 
agrep fast approximate pattern matching tool 
proceedings usenix winter technical conference pages san francisco ca jan 
