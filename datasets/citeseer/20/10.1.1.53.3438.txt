linearity laziness david wakeling colin runciman university york criticism levelled functional languages cope elegantly efficiently problems involving changes state 
wadler proposed new approach problems 
proposal involves type system linear logic girard 
allows programmer specify natural imperative operations time sacrificing crucial property referential transparency 
investigate practicality wadler approach describing design implementation variant lazy ml 
small example program shows imperative operations referentially transparent way time highlights problems approach 
implementation variant machine 
give benchmark figures compare performance machine original 
results disappointing cost maintaining linearity terms lost optimisations compile time extra data structures created run time cancels gains linear types reduce amount garbage collection 
consider language implementation extended accommodate aggregates arrays 
results promising linear arrays usually efficient ones efficient destructively updated ones 
conclude larger aggregates promising area application wadler type system 
years researchers advocated functional programming languages mathematical tractability economy expression suitability programming parallel computers 
functional languages cope naturally real world situations involving changes state authors address department computer science university york york dd united kingdom 
electronic mail dw uk ac york colin uk ac york altering pixel bit mapped display updating record database 
imperative solution problems concise efficient functional verbose inefficient 
function altering bit mapped display example take bit map arguments return new bit map part result 
verbosity solution annoying worse manifest inefficiency implementation update display directly sacrificing referential transparency copy bit map pixel altered 
situations optimising compiler double edged sword 
may improve performance dramatically example detecting bit map updated directly loss referential transparency doing turns program inefficient inefficient unpredictable ways small change program fooling compiler analysis lead large decrease efficiency hard trace 
unfortunate behaviour functional program depend heavily cleverness compiler 
functional programmer expected know better write program way just compiled efficiently 
wadler proposed new approach problems involving changes state 
approach try reduce verbosity functional solution problems try increase efficiency predictability 
implementations lazy functional languages employ notion sharing achieved indirectly environment directly pointers 
view sharing essential efficient implementation saving time avoiding recomputation values saving space having copy value 
view sharing source inefficiency possibility sharing prevents implementation re storage space immediately 
storage space longer eventually recovered re expensive process known garbage collection 
wadler developed type system linear logic girard attempts reconcile viewpoints giving programmer greater control storage management 
wadler type system distinct families types conventional types linear types 
value conventional type may shared share may thrown away throw 
value linear type hand obey linearity constraint shared thrown away 
implementation level may pointers conventional value may duplicated may may discarded exactly pointer linear value 
conventional storage safely recovered re garbage collection linear storage recovered directly result explicit instructions compiled code program 
wadler idea programmer specify new type conventional linear declared trade flexibility efficiency 
restrictions values conventional type updated directly require garbage collection 
conversely values linear type exactly updated directly avoid overhead garbage collection 
rest organised sections 
section briefly reviews wadler type system section describes functional programming language 
section gives small example program 
section concerned various aspects implementation language section describes language implementation extended incorporate aggregate structures arrays 
section reviews closely related section concludes 
wadler type system wadler type system distinct families types coexist 
conventional type base type function type pair type theta ranges conventional base types range conventional types 
linear type base type function type pair type omega case ranges linear base types range linear types 
wadler nonlinear type system combines families types theta omega ranges conventional base types ranges linear base types range types 
nonlinear calculus variant calculus combines terms conventional calculus linear calculus bound variables exactly analogous way case xm xmn case cm xm xmn fix wadler adopts inverse convention terms linear calculus annotated symbol 
notation follows tradition linear logic 
ranges variables range terms 
novel feature calculus allows algebraic type declarations form delta delta delta nq new base type name new constructor names ij types 
gives typing rules nonlinear calculus usual style 
wadler discusses rules detail purposes important points note ffl assumption linear variable exactly typing rule var 
assumption list nonlinear assumption nonlinear words type checker enforces linearity constraint 
ffl closure conventional function may incorporate linear value rule 
restrictions conventional functions 
closure bind linear value restriction value binding disallowed 
ffl rules applications rule rule clear linear variable may appear function argument portion application 
clearly linear variable occurs exactly linear variable occurs exactly linear variable conjunction lists occurs exactly 
ffl conventional data structure may linear components rule ki 
updating component data structure updates structure updating conventional data structures disallowed 
functional language nonlinear calculus simple elegant syntax spartan fanatic advocate program computer 
developed functional programming language agreeable syntax nonlinear calculus uses nonlinear type system 
language called nonlinear lazy ml variant language lazy ml lml developed chalmers university augustsson johnsson 
section shall concerned mainly type system type inference area significant interesting differences languages 
var nonlinear nonlinear ki tn nonlinear ki tn typing rules nonlinear calculus types conventional base types int bool char linear base types 
decisions taken design providing linear versions basic types worthwhile 
decision partly result reading lafont partly result unsuccessful attempts write useful functions linear integers 
conventional type variables written linear type variables written conventional functions constructed 
arrow linear functions constructed arrow 
requirement closure conventional function incorporate linear value means function signature type incorrect allows linear value times time conventional function applied conventional argument implementation duplicates linear value 
problem type checker permissive guarantee function applied 
course arrow definition type correct 
signature acquaintance linear functions appear exotic 
role minor serve type checker restricting partial applications ensuring integrity linear values 
experience programming style results ambitious linear functions recommended 
lafont example extensive programs difficult understand 
allows programmer declare algebraic data types 
different kinds type declaration conventional ones linear ones 
example type clist clist declares type conventional list conventional values 
restrictions lists type may number times 
declaration linear type llist llist declares type linear list conventional values 
list type exactly shared thrown away 
list items unrestricted 
linear type announces programmer prepared trade flexibility exchange efficient implementation 
flexibility lost type system insists linear lists exactly efficiency gained implementation re space occupied linear list cells explicitly avoiding overhead garbage collection 
explicit recovery storage accomplished destructive 
consider definition concatenation function linear lists signature llist llist llist ys ys xs ys xs ys pattern matching perform case analysis argument 
clauses chosen space occupied linear list cell examined safely recovered type system guarantees referred 
function destroys argument computing result 
type checking type checking takes place program translated nonlinear calculus techniques similar described peyton jones book 
translation information type signatures program information types primitive operations annotate resulting terms 
example function signature id id translated id type checking performed stages 
stage uses simple variant milner archetypal type checking algorithm information supplied type signatures 
stage function considered type incorrect ambiguous 
example type signature omitted id ambiguous possible types 
programmer write type signatures resolve ambiguities type checker 
second stage type checker ensures variables declared linear type obey linearity constraint 
simple syntactic check performed possible path function counting occurrences variables linear types 
additional checks ensure linear values incorporated cyclic structures created rec appear closures conventional functions appear components conventional data structures 
stage implementation largely matter convenience 
direct implementation typing rules section involves counting assumption lists maintained type checker turns awkward 
description type checking quite straightforward 
pitfalls 
consider example function increments nth element linear list 
signature int llist int llist int xs xs xs xs pattern matching transformation described wadler peyton jones book function translated nonlinear calculus follows type annotations omitted sake clarity 
case jj xs case case error jj xs xs jj case error jj xs xs problem repeated case analysis 
linear list translation may twice type incorrect 
wadler points straightforward improve translation pattern matching avoid repeated case analysis single variable 
subtle problems solved way shall show 
lml argument patterns matched strictly 
differs languages miranda tuple patterns matched lazily argument evaluated components required evaluation right hand side 
form lazy pattern matching essential lml achieved binding mechanism expression 
consider expression form expression evaluated check matches pattern value variables required suppose declare linear types follows 
linear type lpr linear type signal bool signal type pairs linear values second type infinite sequences booleans 
declarations define function divide copies signal signature divide signal signal signal divide xs lpr xs xs divide xs lpr xs xs miranda trademark research software limited function translated nonlinear calculus pattern matching expression lazy type annotations omitted sake clarity divide 
case xs rec divide xs xs case lpr jj error xs case lpr jj error lpr xs xs jj error type check 
local variable introduced pattern matching transformation linear pair case expressions discards linear components 
entertaining somewhat futile exercise attempt translate divide function nonlinear calculus remember pattern matching kind preserving linearity laziness suggested original definition 
done linearity demands result divide xs shared laziness demands shared selectors xs xs 
problem divide fact serious time simple function throw enterprise 
solution sorts depends details implementation shall postpone discussion section 
worrying problems type checking prevented writing interesting programs 
described 
example generating mandelbrot set mandelbrot set set complex numbers governed iterative formula formula converges initial point set 
unfortunately impossible find points iteration converges 
possible find approximation set making simple sufficient condition divergence sequence iterations diverge size complex number written jzj exceeds 
point iteration diverged fixed finite number iterations assumed lie set 
points computed plotted complex plane 
approximation mandelbrot set heart program generate set implementation iteration trading flexibility efficiency shall type complex numbers linear linear type complex float float allowing true assignment iterative loop just imperative programming language 
define central function inset returns true point set certain predefined number iterations false 
signature inset complex bool inset inset inset function uses auxiliary inset compute result 
arguments gives function initial value iteration counter initial value point iterations iteration count reaches predefined maximum jzj exceeds 
clause inset function tests iteration counter inset number iterations reached point assumed set result true 
unfortunately type correct simply return true immediately involve discarding linear values intermediate function required signature complex complex true function returns true arguments destructive case analysis function similar 
second clause inset function tests jzj complicated inset lpr lpr inset size complex number squaring parts adding square root sum 
want size order compare avoid square root operation comparing 
function squared size returns square size complex number signature complex float complex numbers represented linear type operation complex number including squared size consumes destructive case analysis 
take copy testing 
assuming fails test carry iteration involves computing value explicitly copy order satisfy type checker insists linear values exactly 
avoid copying specialising function mul complex arguments function sqr complex signature complex complex mandelbrot set may obtained mapping inset function grid complex numbers represented list 
program illustrates problems encountered writing programs 
loss flexibility results linear types dramatic 
extra functions written copy throw away linear values order avoid writing artificial functions resorts programming unnatural ways 
having supply type signatures especially quite simple functions 
seriously type signatures lead loss polymorphism 
signature appropriate function context program developed mask true polymorphic nature system performing pure type inference reveal 
implementation built linear types library functions process 
particular example programmer define linear pairs explicitly 
time course linear types built implementation functions processing find way libraries 
new library functions just imitations existing ones process conventional types 
need provide complicates life programmer implementor 
programming quite laborious 
programs cumbersome significant loss flexibility compared conventional language lml 
restrictive nature type system means receives type checker program development frequent sharp problems finds hard correct 
implementation section describes implementation machine called nonlinear machine 
nonlinear machine closely related johnsson augustsson machine follows shall refer machine conventional machine 
familiarity idea programmed graph reduction conventional machine assumed section familiarity excellent tutorial description peyton jones book 
nonlinear machine type checking lambda lifting compiler compiles function code nonlinear machine 
machine instructions construct manipulate graphs representing expressions 
thought finite state machine components instructions remaining executed stack pointers stack basic values conventional partition graph linear partition graph global environment dump stack 
components specify entire state machine written hi di effect machine instruction described state transition rule 
example effect push instruction described rule delta delta delta nm di hi nm delta delta delta nm di important difference nonlinear machine conventional nonlinear machine partitions graph respect type vertices 
single graph appears state conventional replaced graphs state nonlinear machine 
partition essential support linear data structures 
difference machines 
destructive case analysis case analysis conventional linear data structures performed single case instruction 
instructions accessing components data structure pushes components linear data structure stack conventional 
difference instructions effect data structure node 
instruction destroys components subsequently accessed stack node vanished graph 
understanding storage recovered re 
instruction behaves similar manner node operates remains graph 
small example serves illustrate case instructions implement destructive case analysis 
define tail function linear lists signature tail llist llist tail xs xs function compiles instructions tail push eval case push update pop unwind case instruction examines value top stack selects appropriate label 
control reaches instruction destroys node pushes components stack 
protection mechanism section showed function divide translated type incorrect form nonlinear calculus noted impossible translate function form exhibits linearity laziness suggested original definition 
solution problem allows transformation lazy pattern matching take place 
run time protection mechanism delay destruction linear nodes longer shared 
works follows ffl linear node shared protection count attached 
protection count set number pointers sharing node ffl time node accessed selectors protection count decremented ffl node accessed selectors protection count destroyed 
compiler determines protection count examining lazily matched pattern 
case divide example protection count 
solution easily generalised complicated patterns pairs 
works properly variables pattern 
leads space leak protection count attached shared linear node reduced 
weakness means lazy pattern matching care 
protection mechanism workable solution extremely difficult problem 
implement protection mechanism variant split instruction added nonlinear machine 
instruction respects protection count linear graph node operates 
protection count greater instruction causes decremented node protected remains graph 
node destroyed 
compiler detects case expressions select components shared linear values uses 
run time solutions problem lazy pattern matching possible 
example instruction modified update components node destroys 
need 
unfortunately hard implement schemes source source transformations employed compiler 
heap organisation garbage collection nonlinear machine heaps conventional heap managed classic scheme suggested fenichel linear heap divided number free lists possible linear graph node size 
non volatile storage area graph nodes representing compile time constants integers strings 
avoids having allocate space heap needed see 
conventional heap non volatile area free space space conventional heap hp ffl fi ffl fl fp fp 
linear heap conventional linear heaps supports implicit destruction nodes garbage collection free list organisation linear heap supports explicit destruction nodes destructive case analysis 
simulated stack free list important optimisations performed augustsson johnsson lml compiler involves simulated stack 
machine instruction encountered machine code emitted value pushed simulated stack maintained code generator 
code generation operands taken simulated stack possible machine code emitted take real stack run time 
compiler retains optimisation adds simulated free list 
node destroyed destructive case analysis machine code emitted link back appropriate free list stored simulated free list maintained code generator 
code generation space new linear nodes allocated re nodes simulated free list possible code acquire new cell appropriate free list emitted 
care required managing simulated stack simulated free list presence destructive operations 
example components linear node subject destructive case analysis saved registers real stack bypassing simulated stack 
disaster ensues destroyed node appear simulated stack node may reallocated 
equally important ensure simulated free list flushed real avoid space leaks 
updating sharing apart type checking nonlinear machine treats linear functions applications exactly way conventional ones 
means graph nodes representing functions applications stored partition graph 
problem arises result function application linear value 
node representing application updated node representing value order ensure lazy evaluation 
conventional machine updates copying root node result application node 
nonlinear machine clearly nonsense attempts keep graph nodes partitioned type 
compiler arrange update indirection node 
instruction set nonlinear machine largely borrowed conventional machine 
gives rise unexpected benign form sharing linear values 
seen push instruction works copying pointer top stack 
pointer linear value linear value shared 
fortunately linear value accessed new pointer execution 
fact sharing causes problem garbage collection garbage collector prepared encounter pointers linear nodes destroyed 
benchmarks list structures benchmark programs written compiled prototype compiler 
minor alterations omitting extra functions required maintain linearity programs written lml compiled chalmers lml compiler version 
benchmark programs follows 
ffl adder gate level simulation bit ripple carry performing additions 
ffl mandelbrot generates crude view mandelbrot set ordinary terminal 
ffl turtle draws hilbert curves simple turtle graphics 
ffl qsort quicksort list random numbers 
benchmark figures recorded lightly loaded sun fileserver bytes memory running version sun unix operating system 
implementations total heap space limited mbyte order force significant number garbage collections 
compiler instructed generate code version nonlinear machine total heap space reserved linear heap remainder divided semispaces conventional heap 
lml compiler similarly instructed generate code version conventional machine total heap space divided semispaces single conventional heap 
benchmarks measured total execution time amount time spent garbage collecting number garbage collections amount storage allocated heap 
execution time measured seconds storage allocated measured bytes 
table gives results programs produced compiler table gives results programs produced lml compiler 
execution time gcs heap storage allocated total gc conventional linear adder mandelbrot turtle qsort table results programs linear lists execution time gcs heap storage allocated total gc conventional adder mandelbrot turtle qsort table results lml programs conventional lists benchmark figures disappointing 
performance programs generally worse lml ones 
reasons 
need apply extra functions share linear values explicit copying throw away explicit case analysis 
functions costly terms space time 
graphs representing applications built heap garbage collected 
particular problem adder mandelbrot programs cases exacerbated fact extra functions inner loop entire program 
notice increase number garbage collections cases 
advantages conventional machine semispace heap organisation single test heap exhaustion sequence allocations 
free list organisation linear heap means test free list exhaustion allocation 
cost test quite low omitting produces speed 
reason simulated free list optimisation quite effective speed 
programming involves passing tuples single values order maintain linearity 
tuples expensive reasons 
firstly obvious cost creating destroying 
cost underestimated mandelbrot program storage allocated linear heap tuples sole purpose maintain linearity adder program rises 
secondly tuples exact significant cost terms lost opportunities compile time optimisation 
upshot nonlinear machine builds graphs run time optimised away conventional machine compile time 
aggregate structures problems involving large aggregates arrays file systems function languages 
difficult implementation allow aggregate updated maintaining referential transparency acceptable efficiency 
past number solutions aggregate update problem proposed including run time checks syntactic restrictions interpretation 
section shall give solution showing nonlinear type system implementation arrays 
implementation literature describes implementation techniques conventional arrays arrays destructively updated arrays 
arrays require run time checks maintain referential transparency updated arrays require compile time checks 
bloss describes techniques 
shows arrays expensive run time arrays expensive compile time 
linear arrays offer solution dilemma 
array declared linear type single threaded array verified compile time type checker run time updates array done destructively 
linear array created way conventional 
operation array list array allocates space linear array elements drawn list 
update operation update array int array similar conventional arrays index operation index array int array different 
nonlinear type system prevents linear array thrown away index operation return array part result 
type simply pairs conventional value linear 
linear type array really disposed done explicitly 
operation array list destroys array returns list elements 
brief description linear array primitives obvious destructive update operations sequenced program remains safe 
consider function swap swaps elements linear array 
swap array int oint array swap index index update update data dependencies required ensure indexing operations performed prior updates 
extra machinery sequential 
sequential necessary 
obvious place store linear arrays linear heap implementation stores conventional heap garbage collects complexities managing free list objects size determined compile time 
benchmarks arrays benchmark programs written compiled prototype compiler 
minor alterations result tuples maintain linearity programs written lml compiled modified versions chalmers lml compiler arrays second destructively updated arrays 
cases strict sequence update operations correctly 
benchmark programs follows 
ffl histogram counts occurrences list random decimal digits 
ffl warshall finds transitive closure identical node graphs 
ffl life charts evolution generations small colony cells theta board 
ffl qsort place quicksort array random numbers 
benchmarks recorded conditions described section total heap size raised bytes 
table gives results programs produced compiler linear arrays table gives results programs produced lml compiler arrays table gives results programs produced lml compiler destructively updated arrays 
execution time gcs heap storage allocated total gc conventional linear histogram life warshall qsort table results programs linear arrays execution time gcs heap storage allocated total gc conventional histogram life warshall qsort table results lml programs arrays execution time gcs heap storage allocated total gc conventional histogram life warshall qsort table results lml programs destructively updated arrays linear arrays usually faster arrays slower destructively updated ones 
fare particularly badly programs qsort life programs perform order magnitude indexing updating operations 
reason course need pass tuples order maintain linearity 
case fine grained data structures tuples exact high cost terms lost optimisations compile time extra performed run time 
related things prompted wadler develop nonlinear calculus nonlinear type system observation languages linear calculus shortcomings 
know languages developed lafont holmstrom 
thesis lafont describes implementation small functional programming language linear calculus 
attempting apply calls compilation scheme published papers ordinary functional language designs linear functional language called live 
language exposes programmer full linear calculus small types integers permitted escape linearity constraint 
live implemented linear variant categorical machine called linear machine 
advantage machine require garbage collection 
obvious disadvantages grain reduction small similar sk reduction machine results computations shared machine designed implement linear language sharing 
inefficient 
holmstrom described functional programming language linear calculus 
language functions data types inherit linearity constraint linear calculus 
holmstrom considers constraint unacceptable general provides way lift works types just machine representation 
unfortunately holmstrom language exhibits fundamental lack flexibility lafont 
holmstrom sketched implementation language linear variant landin secd machine 
machine performs direct interpretation program source code 
interest allows restricted form sharing requires garbage collection 
mechanism sharing result computation remarked inefficient 
guzm hudak developed variant calculus capable expressing destructive operations type system ensures operations compromise referential transparency 
reject approach purely linear logic described constraining 
type system captures notion state annotating type function possible ways indicate uses argument 
resulting type system complex nonlinear controls destructive operations considerably precision allowing non destructive operations contexts destructive ones permitted vice versa 
guzm hudak plan implement extension haskell ideas 
wadler proposed expression observation perfectly safe linear value temporarily long exists updated 
expression 
read access linear value unfortunately construction comes number extremely ad hoc restrictions example evaluation possible component evaluate component 
wadler formalises requirements unsure relate existing theory 
avoided construction grounds complexity poor interaction lazy evaluation dubious theoretical foundation 
wadler currently trying bridge gap theory practice latest attempts establish connection theoretically lafont holmstrom practically guzm hudak 
detailed account author thesis 
described design implementation functional language wadler approach problems involving changes state 
revealed number drawbacks approach 
broadly follows 
right destructive operations accompanied onerous responsibility maintain linearity 
leads significant loss flexibility programming difficult 
needed extension underlying nonlinear calculus read access granted wadler expression 
unfortunately logical foundation expression unclear need research find logical justification expression similar construction justification 
possible approach follow guzm hudak adopting sophisticated type system connection linear logic looser kind 
nonlinear machine attempt implement graph reduction technique successfully implementation lml 
performance disappointing 
research needed machine architectures suitable implementing languages 
particularly favour approach machine better sharing information tim spineless tagless machine 
suggested better dispense run time machinery dealing linear values 
values stored single garbage collected heap 
destructive operations linear values restricted detected compile time simulated freelist 
restriction pointless pass tuples maintain linearity lost optimisations compile time extra data structures created run time 
suggestion amounts weakening linearity constraint linear values shared thrown away 
words single threaded 
single threaded type systems promising area research represent departure wadler original proposal investigated 
linear array implementation shows promise 
linear arrays usually efficient ones efficient destructively updated ones 
firmly convinced larger aggregates promising area application nonlinear type system intend continue arrays file systems 
benefitted greatly correspondence lennart augustsson thomas johnsson lml compiler machine served basis correspondence yves lafont holmstrom phil wadler papers introduced linear logic 
grateful comments neil jones paul hudak simon peyton jones 
wakeling funded research studentship science engineering research council great britain 
augustsson 
compiling lazy functional languages part ii 
phd thesis chalmers university technology goteborg november 
augustsson johnsson 
lazy ml users manual july 
distributed lml compiler version 
bloss 
update analysis efficient implementation functional aggregates 
proceedings conference functional programming languages computer architecture pages 
acm press september 
cousineau 
curien mauny 
categorical machine 
science computer programming 
fairbairn wray 
tim simple lazy machine execute supercombinators 
proceedings conference functional programming languages computer architecture pages 
springer verlag september 
lncs 
fenichel 
lisp garbage collector computer systems 
cacm november 

girard 
linear logic 
theoretical computer science 

girard lafont 
linear logic lazy computation 
proceedings international joint conference theory practice software development tapsoft pages 
springer verlag march 
lncs 
guzm hudak 
single threaded polymorphic lambda calculus 
proceedings fifth annual ieee symposium logic computer science pages june 
holmstrom 
simple efficient way handle large data structures applicative languages 
proceedings serc chalmers workshop declarative programming pages 
university college london april 
holmstrom 
linear functional language 
proceedings workshop implementation lazy functional languages pages september 
report programming methodology group chalmers university technology goteborg 
holmstrom 
quicksort linear functional language 
pmg memo 
chalmers university technology goteborg january 
hudak 
semantic model counting abstraction 
abramsky hankin editors interpretation declarative languages pages 
ellis horwood 
hudak wadler editors 
report programming language haskell non strict purely functional language version 
technical report university glasgow department computer science april 
johnsson 
compiling lazy functional languages 
phd thesis chalmers university technology goteborg february 
lafont 
linear machine 
theoretical computer science 
lafont 
logiques cat egories machines 
phd thesis universit de paris 
landin 
mechanical evaluation expressions 
computer journal 
mandelbrot 
fractal geometry nature 
freeman 
milner 
theory type polymorphism programming 
journal computer system sciences 
peyton jones 
implementation functional programming languages 
prentice hall 
peyton jones 
spineless tagless machine 
proceedings conference functional programming languages computer architecture pages 
acm press september 
schmidt 
detecting global variables denotational specifications 
acm transactions programming languages systems april 
turner 
new implementation technique applicative languages 
software practice experience january 
wadler 
linear logic 
technical report department computing science university glasgow december 
wadler 
linear types change world 
ifip working conference programming concepts methods sea israel april 
wadler 
private communication february 
wakeling 
linearity laziness 
thesis department computer science university york november 
technical report 
