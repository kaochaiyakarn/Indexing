geometry caching ray tracing displacement maps matt pat hanrahan computer science department stanford university technique rendering displacement mapped geometry raytracing renderer 
displacement mapping important technique adding detail surface geometry rendering systems 
allows complex geometric variation added simpler geometry cost geometric complexity completely describing nuances geometry modeling time advantage detail added adaptively rendering time 
cost displacement mapping geometric complexity 
provide able efficiently render scenes effectively millions geometric primitives 
scan line process primitives time complexity doesn tax traditional ray tracing algorithms require random access entire scene database part scene geometry may need available point rendering 
displaced geometry fully instantiated memory straightforward intersect rays displacement mapping practical ray tracers due memory cost holding geometry 
introduce geometry cache order handle large amounts geometry created displacement mapping 
subset geometry created rendering image coherent manner able take advantage fact rays spawned traditional ray tracing algorithms spatially coherent 
algorithm efficiently rendered highly complex scenes limited amount memory 
displacement mapping valuable technique modeling variation surface geometry computer graphics 
allows user describe surface detail displacement maps analogous texture maps define offset base surface displacement shaders algorithmically describe detail added surface 
displacement mapping unusual essentially modeling operation performed rendering time number advantages including easy inclusion adaptive detail reduced computation geometry visible 
appearance rough surfaces frequently created displacement mapping strongly affected self shadowing 
scan line algorithms typically include shadows shadows rendered approximate techniques shadow maps 
unfortunately techniques break geometry fine detail 
ray tracing algorithms compute accurate shadows desirable support complex luminaires realistic surface reflection models global illumination algorithms 
fmmp graphics stanford edu url www graphics stanford edu implementation displacement mapping reyes rendering algorithm 
reyes subdivides original geometry pixel sized polygons vertices displaced 
huge amounts geometry process produces feasible rendering systems scan line techniques easily render geometry scene primitive time discard primitive processing 
traditional implementations raytracing algorithm need random access entire scene database rays traced potentially pass part scene 
bump mapping technique perturbs normal smooth surface give appearance greater detail 
substitute displacement mapping easy implement gives similar effects creating large amounts geometry 
suffers number disadvantages surface bump mapped object remains smooth silhouettes smooth object cast shadows 
techniques improving accuracy shadows bump mapped surfaces exist provide full flexibility accuracy ray tracing displacement maps 
order implement displacement mapping ray tracing system necessary develop techniques managing large amounts geometry 
techniques ray tracing complex scenes done manage large databases walkthroughs flight simulators examined methods ray tracing scenes geometry fit memory 
snyder barr rendered scenes billions primitives geometric complexity result instancing simple models times 
developed efficient algorithm running time memory ray tracing displacement maps 
input geometry lazily triangulated adaptively subdivided displaced stored geometry cache 
cache keeps fixed number displaced triangles memory discards geometry referenced cache fills 
scheme render scenes millions polygons created displacement mapping having small subset total geometry memory time 
test scenes contains unique displaced primitives rendered quickly mb memory 
remainder discuss previous implementations displacement mapping related discuss desirable qualities displacement mapping algorithms 
describe algorithm implemented report performance discuss trade offs 
summarize results suggest directions 
background previous displacement mapping introduced cook described detail part reyes algorithm 
reyes geometric primitives subdivided grids pixel sized 
vertices displaced polygons shaded 
shaded stochastically sampled samples filtered generate image pixels 
memory requirements create store samples objects entire scene simultaneously prohibitive reyes divides screen rectangular buckets rendered individually 
bucket primitives possibly visible bucket account maximum amount primitive displaced turned grids possibly displaced shaded broken 
placed buckets overlap stored memory buckets processed 
displacement mapping naturally incorporated reyes algorithm approach suffers number disadvantages algorithm addresses ffl resolution grid shading resolution displacements 
means example higher grid resolutions necessary acceptable necessary acceptable looking shading particularly displacements large abrupt shading smooth 
system separates displacement mapping process shading process virtue ray tracing renderer 
geometry subdivided displaced rays intersected subdivision adaptive displaced surface accurately represented displaced polygons 
shading occurs points rays intersect displaced surface 
able greatly reduce geometric complexity displaced geometry rendering 
ffl displaced object obscured closer object reyes performs displacement shading calculations visibility checks performed created shaded 
hierarchical visibility techniques reduce impact problem scan line systems 
classic trade offs ray tracers scan line 
create displaced triangles ray approaches geometry displaced defer creation geometry needed 
scenes high depth complexity greatly reduces processing time geometry visible 
ffl shadow maps environment maps rendering scene reyes re renders scene creating maps 
calculations necessary displacement mapping redone renderings 
addition techniques prone aliasing particularly detailed self shadowing geometry 
able trace rays compute shadows reflections transmission effects accurately rendered system 
different form coherence reyes nearby eye rays generally intersect surfaces nearby locations additional rays traced nearby intersections follow similar paths 
algorithm recalculates geometry needed discarded cache potentially calculate displaced geometry 
displacement mapping focused techniques directly intersecting rays displacement mapped geometry subdividing small polygons 
primitive precomputed displacement map techniques compute mapping flattens original primitive 
applying inverse mapping ray curved ray intersected displacement map treated 
technique attractive memory requirements modest practice problems finding intersection curved ray expensive operation typically requiring iterative calculations find intersection 
second technique handles displacements surface normal 
kajiya developed technique rendering fractal terrains creates triangles lazily 
technique similar method displacement mapping cache geometry created try remove unnecessary geometry triangle mesh 
discuss lazy creation fractal terrain data provide details statistics part algorithm 
basic algorithm algorithm phases 
starting input triangle mesh insert triangles regular grid voxels bound maximum distance input triangle displaced determine voxels receive geometry primitive subdivided displaced 
grid holds information called contributor grid 
second phase starts ray intersects contributor grid 
starting voxel ray intersects subdivide displace input triangles inside voxel store displaced triangles second voxel grid dimensions resolution contributor grid 
second grid called geometry cache 
perform ray intersection tests displaced geometry voxel 
ray continues stepping voxels find intersection displaced triangles leaves grid 
third phase recycling phase allows strictly limit memory store displaced triangles 
determine fixed number displaced triangles geometry cache discard entries 
subdivision displacement system allows user write displacement shaders language similar renderman shading language 
shader access information local differential geometry point applied displace point space 
input triangle execute shader vertices 
resulting triangle requires subdivision subdivision criteria developed recursively subdivide splitting edges half computing positions new vertices created subdivision creating new 
checked see needs subdivided subdivide triangle edge length world space 
user set desired edge length displaced geometry triangle edge lengths length 
triangle possibly subdivide check length edge maximum edge length 
edges shorter maximum edge length terminate recursion add triangle geometry cache 
edges longer split displacement shader calculate positions midpoints edges 
edges need subdivided split evaluate displacement shader midpoints edges wanted subdivide rest midpoints just interpolate positions vertices ends edges 
technique frequently algorithms subdivide patches triangles rendering 
ensures triangle shares edge subdivided triangle need subdivided triangle subdivided meet shared edge 
preferable base edge length image space world space number difficulties 
realistic lens systems introduce non linear projections determining object image space current implementation operates triangle meshes straightforward extend algorithm operate curved surfaces geometry subdivision step accounted true curved geometry 
phase input triangles left added contributor grid middle 
contributor grid stores list input triangles voxel recording input triangles contribute geometry voxel subdivided displaced 
create lists bounding box computed triangle 
bounding box maximum displacement distance triangle added lists voxel bounding box overlaps 
phase ray stepped voxels geometry cache right 
ray enters voxel test geometry cache 
compare list potential input triangles corresponding voxel contributor grid list input triangles accounted geometry cache 
example subdivide displace triangle ray 
phase geometry cache fills recycling phase begins 
contents voxels referenced discarded voxels marked letter 
reason recycled voxels don appear completely empty triangles overlap multiple voxels individually stored 
note triangle subdivided displaced phase determined voxels geometry cache received displaced triangles voxels triangle list potential contributors 
remove triangle lists contributor grid 
phases algorithm 
size difficult able account geometry viewer displaced object magnifies reduces size object 
light sources introduce complication displaced geometry casts shadow part shadow cast single displaced triangle approximately size pixel final image 
open research issue 
add displaced geometry cache reduce amount geometry removing geometric detail subtle visible 
triangle subdivided triangles defined vertices 
test triangles nearly coplanar checking vertices midpoints cracking problem 
input triangles left subdivided different levels 
vertex shared edge constrained lie lower triangle crack result center 
fixed interpolating location positions ends edge right 
edges parent triangle nearly edges user set tolerance merge triangles defined corner vertices 
edges nearly flat move midpoints nearly flat edges lie edges prevents cracking mesh adjacent triangles flat simplified 
process starts finest level subdivision displacement step continues recursively non flat region displaced triangles single input triangle merged single displaced triangle 
technique save valuable space geometry cache 
surprisingly effective experience geometry merged 
add displaced triangles geometry cache improve accuracy contributor grid 
voxels contributor grid start recording input triangles contribute geometry remove triangles lists voxels contribute geometry 
need recompute displaced triangles voxel recycled example reduces number input triangles displaced ones contribute geometry 
final optimization ensure voxels geometry cache contain large numbers triangles excessively slow intersection calculations 
put voxel grid inside voxel displaced triangles 
resolution voxel grid varies depending triangles voxel 
important time memory tradeoff adding sub voxel grids sped rendering test scenes factor modest cost memory 
aggressive adding sub voxel grids excessively high resolution total memory unacceptable 
technique similar technique accelerating ray tracing proposed 
cache management performance geometry cache central algorithm 
factors adjusted improve cache performance capacity access coherence replacement strategy 
cache hold geometry need coherently access geometry created previous access better picking voxels replaced accessed long time computation necessary fill voxels 
minimizing amount memory store displaced triangle able fit larger cache amount memory 
voxel geometry cache holds array vertex locations array structures hold vertex indices triangle voxel 
recursive subdivision done compute displaced triangles maintains information shared vertices store compact points polygons representation displaced triangles voxel 
displaced triangles pixel sized store vertex normals 
triangle normal shading saves time storage space 
tried geometry cache access patterns coherent possible carefully choosing screen sampling pattern 
eye rays spatially coherent practice rays spawned nearby eye rays spatially coherent 
ray tracers render image scan line time rendering pixels sequentially scan line 
coherent sampling pattern 
improve coherence hilbert curve processes pixels coherent manner 
effective sampling strategy divide screen rectangular buckets render sequentially 
replacement strategy discard geometry stored accessed voxel cache full 
strategy performs widely manage cache replacement performed extensive tests evaluate effectiveness replacement strategies 
analysis results evaluate system gathered statistics test scenes 
ffl displacement mapped sphere displacement mapped box sitting table room plate 
displacement shader sphere uses sinusoidal functions determine displacement box displaced shader edges 
geometric simplification step greatly reduced amount geometry represent box somewhat reduced geometry needed sphere 
simple scene demonstrates calculation accurate transmission shadows scene displacement maps 
ffl facade building viewed late afternoon plate 
approximately pixels scene geometry displacement mapped front building done displacement shaders top part bottom part 
additionally window pane displaced edges rest slightly bumpy simulating low quality glass 
shadows cast critical success image 
particularly evident comparison plate facade scene rendered computing shadows 
shadows stone casts important self shadowing brings ridges stone giving depth lacking 
glass created displacement mapping distinctive easily included scene trace rays compute specular transmission 
baseline compare execution time memory algorithm rendered scene displacement mapping 
rendered scenes cache unlimited size determine storage necessary store displacement mapped model find lower bound running time table 
detailed results facade scene results sphere box scene similar 
rendering scenes quick memory low 
displacement mapping caused geometric complexity increase running time double memory increase times limit amount geometry memory 
fact running time doubled points displaced unlimited cache image resolution samples pixel input triangles displaced triangles time render memory mb mb geometry saved simplification table statistics building facade 
tests run sgi onyx mhz processor memory paging impact running time 
main advantages ray tracing complexity handled time intersect rays geometry grows approximately logarithmically geometric complexity 
turned testing performance geometry caching algorithm comparing effects different screen sampling algorithms 
tried different sampling patterns scan line buckets hilbert curve 
scan line pattern standard top bottom left right order ray tracers bucket pattern subdivided screen pixel buckets rendered top bottom left right hilbert curve sampling pattern generated hilbert curve screen sampled pixels order curve passed 
time minutes cache size thousands triangles hilbert buckets scanline capacity misses percent cache size thousands triangles hilbert buckets scanline effect cache size versus running time various screen sampling strategies minutes left capacity misses right 
cache effective sampling patterns hilbert curve bucket pattern resulted significantly better performance scan line sampling 
particular hilbert curve sampling cache displaced triangles total geometric complexity megabytes memory scene took time cache unlimited size 
size cache small total geometric complexity performance decreased rapidly cache 
standard measure cache effectiveness percentage percentage cache accesses information interest cache 
causes cache misses relevant geometry cache compulsory misses capacity misses 
compulsory misses unavoidable time piece information needed cache 
strive minimize capacity misses occur piece information previously discarded cache needed 
gathered data percentage cache accesses capacity misses percentage misses capacity misses table 
expect capacity misses running time closely related percentage misses due capacity decreases cache size increases 
interesting result scan line sampling leads catastrophic drop performance cache small coherent sampling patterns degrade gracefully 
believe result replacement strategy cache lru replacement strategy small hold data accessed access pattern goes sequentially data cache performance terrible 
replacement strategy randomly picking cache entry replacement probably scan line sampling degrade gracefully 
cache statistics facade scene geometry cache size cache size percentage total geometric complexity total memory mb mb mb mb increase memory compared scene mb mb mb mb cache hit percentage percentage total misses capacity misses running time table effect cache size memory cache hit percentage capacity misses running time 
hilbert sampling tests 
algorithm allows efficient rendering displacement maps ray tracer 
algorithm shown effective realistic scenes 
previous implementations displacement mapping non ray tracing systems able trace rays compute shadows reflections effects result robustly handle self shadowing geometric detail unable accurately compute specular light transport 
providing efficient ray tracing displacement maps algorithm rendering techniques possible 
store subset displaced triangles geometry cache lazily filled displaced triangles rays approach displaced geometry cache fills old geometry discarded 
pixels rendered spatially coherent pattern spatial coherence rays spawned nearby eye rays access patterns cache coherent small caches suffice render scenes quickly 
rendering algorithms access scene incoherent manner traditional implementations path tracing example algorithm performs poorly algorithms cache big hold geometry created 
similarly scene hundreds light sources scene poor access patterns 
teller able perform radiosity computations enormous models small amounts memory reordering computation accessed scene database coherent pattern 
expect similarly reordering order rays eye rays traced cache behavior improve 
comparison rendering techniques ray tracing best performance scenes huge amounts geometry time intersect ray collection geometry approximately logarithmic amount geometry 
amount detail scenes ray traced limited geometry fit memory algorithms possible ray trace scenes geometric complexity fit memory requiring extensive modifications internals rendering system 
techniques displacement mapping available rendering system able images new effects previously impractical amounts geometric complexity ray tracer 
acknowledgments craig kolb reid helped develop rendering toolkit done offered helpful suggestions 
eric suggested merge flat triangles causing holes mesh gordon stoll source interesting conversations caching rendering 
julie dorsey hans pedersen asking feature enduring early versions implementation 
research supported nsf contract ccr equipment silicon graphics blinn simulation surfaces 
computer graphics siggraph proceedings aug vol 
pp 

cook shade trees 
computer graphics siggraph proceedings july christiansen ed vol 
pp 

cook carpenter catmull reyes image rendering architecture 
computer graphics siggraph proceedings july stone ed pp 

glassner ray tracing 
academic press 
greene kass hierarchical buffer visibility 
computer graphics proceedings annual conference series pp 

hanrahan lawson language shading lighting calculations 
computer graphics siggraph proceedings aug baskett ed vol 
pp 

wyvill subdivision ray tracing 
proceedingsof graphics interface toronto ontario june canadian information processing society pp 

kajiya new techniques ray tracing procedurally defined objects 
computer graphics siggraph proceedings july vol 
pp 

kajiya rendering equation 
computer graphics siggraph proceedings aug evans eds vol 
pp 

kolb hanrahan mitchell realistic camera model computer graphics 
siggraph conference proceedings cook ed pp 

max horizon mapping shadows bump mapped surfaces 
visual computer july 
kolb mace synthesis rendering eroded fractal terrains 
computer graphics siggraph proceedings lane ed vol 
pp 

patterson inverse displacement mapping 
computer graphics forum june 
reeves salesin cook rendering shadows depth maps 
computer graphics siggraph proceedings stone ed vol 
pp 

snyder barr ray tracing complex models containing surface tessellations 
computer graphics siggraph proceedings july stone ed vol 
pp 

fast inverse displacement mapping shading shadow 
graphics interface workshop local illumination may pp 

teller fowler funkhouser hanrahan partitioning ordering large radiosity computations 
proceedings siggraph july glassner ed pp 

teller visibility preprocessing interactive walkthroughs 
computer graphics siggraph proceedings july sederberg ed vol 
pp 

space filling curves measure coherence 
graphics gems ii arvo ed 
academic press pp 

williams casting curved shadows curved surfaces 
computer graphics siggraph proceedings aug vol 
pp 

woo fournier survey shadow algorithms 
ieee computer graphics applications nov 
