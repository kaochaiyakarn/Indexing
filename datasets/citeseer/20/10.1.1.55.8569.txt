developing theories types computability thesis proposal lars birkedal school computer science carnegie mellon university april committee members scott carnegie mellon university carnegie mellon university brookes carnegie mellon university reynolds carnegie mellon university rosolini universita di genova italy domain theory type theory style martin lof polymorphic style girard reynolds topos theory topological sheaf theoretic treatments realizability approach going back early kleene attempted improve set theory providing large suite closure conditions domains types objects far reaching logic properties emphasizing computable constructive aspects definitions qualities functions 
scott domain theory variations proposed studied see introductions especially successful allowing recursive definitions types solutions domain equations expense introducing complex structure partial elements order solutions fixed point equations domains 
topological effective versions domain theory remained separated studies 
worse scott logic computable functions lcf limited means expression popular program specification verification 
various formulations type theory useful showing difference predicative impredicative reasoning needed connections partial total functions hard pin 
complex history topos theory proved point view version higher order intuitionistic logic 
called effective topos eff hyland johnstone pitts building previous realizability categories effectively domains shown full faithful subcategories eff 
eff model type theory extensively studied 
scott proposed synthetic domain theory modelled eff hopes bringing domain theory type theory 
success program qualified verification properties subcategories eff proved harder expected 
alternative axiomatic domain theory proposed see model theory faced technical difficulties combine domains general types 
reviewing situation graduate lectures scott returned graph model calculus giving version realizability construction known long time tried 
saw known method partial equivalence relations helped gave domains types large category including popular mathematical spaces 
saw kind reasoning equivalence relations spaces provides cartesian closed category result noted 
graph model essentially restricts attention countably spaces sufficient applications 
preparing seminar lectures winter scott saw graph model submodel recursively enumerable sets integers effective enumeration operators allow interpret realizability style intuitionistic modal logic combines topological effective worlds 
roughly speaking modal proposition realized realized computable realizer 
types realize give continuous function choose function realize gamma delta find computable function 
certain types allow passage computable elements computable function restrict computable employing modal logic able reason familiar types constructs products function spaces effective counterparts 
aspects program topology analysis going focus thesis andrej bauer 
remainder proposal organized follows 
give brief historical overview section section recall notion partial combinatory algebra 
section outline logic realizability modality subsection giving realizability interpretation sorted higher order intuitionistic logic 
subsection explain interpretation extended modal intuitionistic higher order logic operator 
logics types just sets subsections notion type extended cover certain quotients subobjects sets 
subsection describe certain category partial equivalence relations explain partial equivalence relations may seen special types logic 
complete overview logic realizability modality give rough sketch category domains subcategory category partial equivalence relations 
section give overview proposed thesis 
brief chronology domain theory founded scott originally defined domain complete continuous countably lattice give model untyped lambda calculus 
variety approaches solving domain equations 
earliest inverse limit construction originally devised scott generalized reynolds eventually abstracted wand smyth plotkin 
freyd abstracted give axiomatic categorical account recursive domain equations 
cattani fiore winskel gave general account limit colimit coincidence recursive domain equations 
method method retracts due scott expressed solution domain equation set fixed points idempotent function universal domain 
method comes flavors depending uses arbitrary idempotent functions called retractions restricts projections closures 
described textbook gunter 
winskel larsen developed method scott information systems 
approach described textbook winskel 
going back suggestions kreisel partial equivalence relations give models polymorphic types girard troelstra scott emphasized importance 
period modelling expressive type theories pitts freyd scedrov longo moggi hyland breazu tannen coquand mitchell abadi plotkin 
suggestion scott mccracken devised models polymorphism domains closures retractions universal domain 
amadio bruce longo devised model finitary projections 
girard qualitative domains stable functions coquand gunter winskel considered models scott domains 
seely gave categorical definition constitutes model polymorphic lambda calculus ma reynolds 
ma reynolds gave definition constitutes relationally parametric model 
ma reynolds phrased definitions indexed category theory robinson rosolini gave formulation internal categories 
described language fibred category theory forthcoming book jacobs 
axiomatic theory domains mentioned freyd algebraically compact categories crucial 
simpson generalized fiore gave comprehensive treatment axiomatic domain theory categories partial maps 
fiore plotkin power complete sets works axiomatic domain theory 
seventies scott promoted idea models intuitionistic higher order logic functions continuous hyland effective topos model 
scott idea models give simple description domains certain kinds constructive sets 
steps direction synthetic theory domains taken mccarty showed comprehensive treatments domain theory refer reader 
notes plotkin recommended overview article 
selection see handbook article gunter 
effective scott domains fully embedded effective topos rosolini gave logical definition domain called oe sets 
followed hyland taylor gave axioms domain theory phoa 
direction includes longley rosolini reus longley simpson fiore rosolini reus streicher 
partial combinatory algebras shall recall notion partial combinatory algebra 
partial combinatory algebra pca consists set partial application function delta theta exists distinct elements satisfying kx sx sxy kxy xz yz means defined kleene equality means defined defined case equal 
write xy delta letting delta total combinatory algebra just pca application total ab 
simply write pca delta 
pca combinatory completeness polynomial term built variables constants application delta element ab delta delta delta gamma ab delta delta delta partial function obtained interpreting polynomial prove uses abstraction rules define functional abstraction km free mn rosolini pointed clear hyland showed category partial equivalence relations fully embedded effective topos ershov category enumerated sets full subcategory category partial equivalence relations effectively domains characterized ershov full subcategory category enumerated sets 
detailed treatments partial combinatory algebras example 
combinatory completeness obtained delta delta delta note pairing pcas untyped lambda calculus ha bi zab si ka kb projections ck ki ha bi ha bi ha bi ci delta pca 
say subset sub algebra sub pca contains closed partial application 
note sub pca delta element defined lambda calculus constants element notation 
sets write oe set delta delta write oe oe 
example 
consider set natural numbers equipped kleene application delta fmg fmg denotes partial recursive function coded existence required properties immediate consequence theorem 
refer pca kleene model 
example 
denote set terms untyped lambda calculus countably infinite set variables 
fi quotient modulo fi equality see induced application 
defines total combinatory algebra may take equivalence classes lambda terms xz yz 
example 
denote set terms untyped lambda calculus countably infinite set variables ae set closed terms 
recall definition term head normal form hnf form xm delta delta delta mm 
head variable hnf set hnf 
form delta delta delta mm technically definition dependent particular encoding partial recursive functions natural numbers purposes choice encoding irrelevant 
called head redex suppose delta head red ex 
write results contracting delta 
relation called step head reduction 
define reflexive transitive closure equivalence relation hnf related exists hnf hnf hnf endow hnf partial applicative structure declaring delta mn hnf easy see define partial binary operation hnf hnf delta forms partial combinatory algebra defining equivalence classes lambda terms xz yz head normal form 
example 
denote set natural numbers powerset 
suppose theta coding function pairs delta delta delta fin coding function finite subsets recall function continuous preserves inclusion fa delta delta delta continuous function 
define graph set graph yi fx continuous completely determined graph yi graph defining delta yi yields continuous application operation delta theta 
delta forms total combinatory algebra 
example 
re denote recursively enumerable subsets previous example assume coding functions recursive re delta forms sub pca delta clearly may chosen subsets 
refer re recursively enumerable graph model 
logic realizability modality kleene introduced called recursive realizability interpretation single sorted order intuitionistic logic 
idea recursive realizability represent proofs formulas intuitionistic logic godel numbers generally elements partial combinatory algebra outline idea lifted give realizability interpretation typed sorted higher order intuitionistic logic essentially 
section types just sets sections notion type extended cover certain quotients subobjects sets 
brevity discussion discussion shall give semantics syntax distinguish notationally 
intuitionistic higher order logic higher order signature sigma consists underlying set sigmaj atomic types containing special type prop collection typed function symbols oe oe oe oe atomic types 
explicit predicate symbols higher order signature 
function symbols oe oe prop understood predicate symbols 
likewise formulas simply terms type prop 
intuitionistic higher order logic sigma collection types including atomic types closed unit type theta product type 
function type standard associated collection constant terms types 
propositions terms type prop finite disjunctions finite conjunctions implication oe equality oe type oe existential universal quantification types oe 
higherorder specification consists higher order signature sigma collection sequents higher order logic associated sigma 
higher order specification determines higher order theory closing intuitionistic higher order logic derivability 
initial semantics types intuitionistic higher order logic interpreted ordinary sets 
types product type theta interpreted ordinary cartesian product sets function type interpreted set functions closed terms type interpreted elements set partial combinatory algebra 
closed formula interpreted subset denoted elements thought proofs formula 
say closed formula valid realizable interpreted non empty subset 
type prop propositions interpreted powerset specifically atomic formulas interpreted set function closed formulas interpreted subsets interpret ordinary propositional connectives follows ha bi hk ai hki bi oe delta delta oeae abbreviation oe oe 
note conjunction interpreted essentially forming product sets realizers idea proof consists proof proof 
intuitionistically proof consists proof indication proof 
definition essentially involves disjoint union 
intuitionistically implication oe understood proved construction proof provides proof definition 
follows realizability interpretation crude doubly negated formulas sense valid realizes 
valid realizable 
doubly negating formula forgets realizers roughly speaking doubly negated formulas computational content 
equality closed terms type interpreted propositions terms type prop equality defined strong prop just mean valid equal 
propositions formula closely related godel double negation translation embeds classical valued logic intuitionistic logic 
prop stronger oeae 
valid exactly equal subsets valid just exists realizers mapping vice versa 
extend interpretation cover open terms open formulas 
terms type free variables type context interpreted ordinary set theoretic functions formulas free variables type formulas context interpreted ordinary functions set interpretation connectives extended pointwise apply formulas free variables 
quantification suppose interpretation formula free variable type define definitions extended pointwise closed formulas 
sequent formulas context valid exists realizes delta realizes 
words sequent valid formula gamma oe delta valid 
closed formula law excluded middle realized realizes hk ai realizes realizes realizes hki ai realizes 
lead believe incorrectly logic classical 
classical law excluded middle hold formulas context case valid consider 
emphasize logic intuitionistic higher order logic satisfies usual rules typed order predicate logic see page 
instance oe oe oe oe valid 
rules valid just standard ones oeae effect validity expresses property type fail notions type quotient types 
logical rules equality standard ones may substitute equals equals usual 
included equality standard equations cartesian closed category example theta xi thetaj extensionality terms viewing functions sets constant terms type internally equal externally equal equal ordinary settheoretic sense functions equal 
phenomenon referred strong equality page 
mention axiom choice oe easily seen valid 
logic close logic sets stress classical 
completes description realizability interpretation strong typed intuitionistic higher order logic 
note interpretation certainly sound sense derivable usual rules typed intuitionistic higher order logic valid semantics 
modal intuitionistic higher order logic show extend typed intuitionistic higher order logic introducing modal operator express issues computability suggested scott 
purpose sub pca delta 
thinking providing model untyped computation submodel consisting computable elements shall refer elements realizers elements computable realizers 
concrete example mind case graph model recursively enumerable submodel re see examples 
closed formula closed formula interpreted restricts subalgebra valid just case computable realizer 
definition easily see oe valid 
example modal validity verify gamma oe oe oe delta valid 

defined pure lambda calculus see section 
oe delta closed partial application 

delta delta assumption oe 
delta 
shows realizes formula 
note valid replace middle oe oeae formula reason realizer oe member required realizer oe 
note related inference rule oe computable realizers 
example verify gamma oeae delta valid 
hx yi delta delta realizes formula realizes left right direction realizes right left direction 
left right direction suppose gamma delta delta definition noting ki members gamma delta likewise right left direction 
valid axioms intuitionistic higherorder logic 
example gamma oe oe oe oe delta valid easily seen 
inference clearly preserves consequences axioms intuitionistic higher order logic valid validated computable realizers 
sequence modal validities including examples covered gamma oe gamma oeae delta gamma oe delta gamma oe oe oe delta gamma oeae delta gamma oeae delta gamma oeae delta gamma oeae delta note validity formula gamma oe delta reflects doubly negated formulas computational content mentioned 
refer sorted intuitionistic higher order logic operator modal intuitionistic higher order logic abbreviated emphasize usual rules intuitionistic higher order logic valid particular usual rules equality may substitute equals equals 
explained extensional sense propositions may entail oeae equal 
obtain extensional model intuitionistic higher order logic topos employ known method employing partial equivalence relations changing meaning types equality 
fact show modal intuitionistic higher order logic define toposes interest semantics called rt rt ct 
rt construction hyland johnstone pitts crucial new connective 
standard realizability toposes realizability topos rt model extensional typed intuitionistic higher order logic 
types interpreted pairs ji ji set ji theta ji prop partial equivalence relation symmetric transitive relation logic means formulas ji oe ji oe required valid logic explicitly symmetry means exist realizer ji delta similarly transitivity 
way think type ji quotient subset set ji subset set ji valid non empty set quotient comes equivalent non empty realized 
notation 
write ji vertical bars bracketing 
context clear leave subscript write ji ji 
write terms type jj context type ji interpreted equivalence classes functional relations ji jj 
functional relation relation logic total single valued defined quotients ji jj emphasize functional relation ji jj set theoretic function ji jj precisely functional relation formula valid logic def gamma ji jj ji jj oe delta gamma ji jj oe delta gamma ji jj oe jj delta gamma ji oe jj delta formula conjunct expresses respects equivalence relations extensional second conjunct expresses defined quotients strict third conjunct expresses single valued fourth conjunct expresses total 
functional relations equivalent induce maps quotients formally formula ji jj oeae valid 
product type types ji jj type theta ji theta jj underlying set ji theta jj equality predicate pointwise equality def ji jj function type ji jj type underlying set ji set functions ji theta jj equality predicate def ji jj oeae described types terms interpreted rt go describe interpretation formulas 
ease presentation shall restrict closed formulas interpreted subsets propositional constants connectives oe interpreted realizability interpretation equality closed terms type jj interpreted je quantification suppose predicate free variable type ji suppose interpreted function define jij oe jij point quantification quantification objects exist existence predicate see scott details identity existence intuitionistic logic 
note expected 
example ji jj formula valid rt exists realizer jij ji ij oe jjj jj jj case graph model see example exist continuous function element ji ij produces realizer jj jj realizer 
means axiom choice hold arbitrary types 
closed terms really equivalence classes functional relations identify elements open formulas context interpreted called extensional strict predicates functions ji oe oe holds formula left means extensional strict predicates replace equals sense rt equals 
open formulas connectives interpreted realizability interpretation implication oe predicates context interpreted mapping 
ha bi quantification strict predicates interpreted shown 
complete description model rt just remains mention type omega propositions underlying set equality predicate omega def oeae refer rt standard realizability topos note included operator predicates rt 
predicates types rt simply sets types ji ji non empty ji ji ij operator sense strict predicate just ordinary predicate sense ji clear mean predicates non set types ji rt extensional strict predicate function ji may define function 

necessarily extensional strict predicate 
realizers general possible construct realizer 
words part available types rt 
way think rt types non set types predicates regarded predicates rt 
rt essentially put front predicates define rt restricting attention types equality predicates realized computable realizers maps realized computable realizers 
way get exactly topos case kleene model rt effective topos eff gotten taken 
formulas valid rt realized computable realizers subalgebra computable topos respect topos ct define type interpreted pair ji ji set predicate context ji symmetric transitive 
formulas required valid 
gamma ji oe delta gamma ji oe delta note just function ji theta ji realizers symmetry transitivity required taken subalgebra terms type jj context ji interpreted equivalence classes relations ji jj function ji theta jj functional relations 
validity required formula gamma delta relations equivalent gamma ji jj oeae delta valid 
topos ct suggested thomas streicher 
defined different underlying logic standardly define rt rt shown generally underlying logic define toposes 
means logic reason rt effective siblings rt ct 
standard realizability topos equality predicate type valued terms valued functional relations 
standard realizability topos restrict attention subalgebra connection computability people restricted attention rt types terms realized computable realizers perfectly sense talk computable operation assuming arguments computable 
toposes rt ct important computability perspective 
may define morphism ji jj rt computable exists representative functional relation 
sake specialist record surjective geometric morphism ct rt logical functor ct rt identity objects 
morphism rt objects ct computable image morphism ct 
category concreteness section shall mainly concerned graph model pca effective submodel 
emphasize considerations apply generally case arbitrary pca sub pca definition category partial equivalence relations graph model pca call category objects partial equivalence relations jx morphisms jx equivalence classes elements satisfy jx delta delta elements equivalent jx delta delta write partial equivalence relation jx category cartesian closed category known cartesian closed structure great interest embeds topological spaces recursively enumerable submodel notion computability 
specifically may say map computable representative re fact shall outline objects morphisms may seen special types terms rt realizability topos 
allow extensional intuitionistic higher order logic rt reason 
jx object quotient set partial equivalence relation jx jx jx define setting jx jx type rt easily seen realized symmetric transitive 
instance symmetry show exists realizer realizes formula oe see host examples 
categorically speaking full faithful embedding category topos rt surely identity realizer 
transitivity show exists realizer realizes formula oe surely realizer 
consider morphism jx 
corresponding types rt jx obtained described 
define functional relation setting hx fx jx fx verify functional relation representatives map corresponding functional relations equivalent define term rt topos 
theorem notion computability coincides notion computability rt sense morphism jx computable corresponding morphism rt computable 
category domains universal algebraic scott domain natural define domains partial equivalence relations pointed sense closed chains 
literature relations variously called inductive admissible pointed complete 
partial combinatory algebras graph model need general notion domain 
suggestions general notions domains realizability toposes 
purposes longley simpson particularly relevant exactly concerned domains realizability toposes arbitrary partial combinatory algebras 
give rough sketch general idea 
fixed point combinator satisfying zx zx element note realizers symmetry transitivity fact members subalgebra re shown type ct re 
see pages details 
fact defines full faithful embedding category category rt 
may defined untyped lambda calculus 
define lifting related iff 
delta delta delta delta delta delta jx delta delta 
delta delta diverge delta delta zk 
idea equivalence class consisting diverging combinators 
may show initial respectively final algebra lifting functor 
thought vertical natural numbers added top element 
monomorphism thought inclusion morphisms object thought chains 
object said complete iff morphism exists unique morphism ffi show called pointed complete objects thought bottom fixed point suitable sense 
furthermore induced notion ordering show maps automatically continuous respect ordering 
define object complete lifting complete 
consider subcategory complete objects 
finds category objects suitable category predomains finite limits finite coproducts natural numbers object forms exponential ideal category 
pca longley simpson developed general suitable notion domain allows basic constructions domain theory 
goals mentioned extend cover recursive domain equations 
proposed thesis section give overview proposed thesis 
topic mention possible questions investigate 
modal intuitionistic logic plan investigate connection computability validity realizability toposes graph model submodel 
questions include zk may thought diverging computation 
fact may extend definition obtain lifting monad category partial equivalence relations see 

formula context free relational symbols formally function symbols codomain type prop included difference validity prop prop delta delta delta gamma prop prop delta delta delta delta specifically uniformity condition interpretation big intersection realizers defined automatically computable 

special validities modal intuitionistic higher order logic gamma oe delta validity kind known known system 
interesting validities propositional fragment formulas involving quantifiers 

type natural numbers theory peano arithmetic validity rt truth 
set valid sentences correspond 
includes provable sentences probably form recursively enumerable set 

axiomatic theory combinatory algebra 
axiomatize adding axioms axioms partial combinatory algebras 
validity versus validity axiomatized 

mentioned results concerning comparison toposes rt rt ct 
perspicuous comparisons phrased terms internal logics toposes 

connections modality moggi computational lambda calculus 
entirely formal axiomatic description pca known 
recursive domain equations plan investigate solve recursive domain equations general pca particular pca questions include 
polynomial functors initial algebras final coalgebras 
answer adjoint functor theorem 
difference doing rt rt 
understand need better understanding solutions obtained adjoint functor theorem constructed 
relation solutions obtained sets viewed types topos solutions get category sets 

fixed points covariant functors 
able adjoint functor theorem get existence solution 

category domains solutions recursive domain equations sub category 
plan investigate logically formulate notion complete object investigate solve recursive domain equations 
longley simpson give suggestion proceed 
briefly longley simpson proposal view complete objects suitably complete internal category realizability topos theory freyd concerning algebraically compact categories reduce solution mixed variance domain equations covariant domain equations 

bigger internal full subcategories category 
line issue question solve domain equations involves types category types topos 

question reynolds posed earlier combine types domain theory usual types ordinary set theory 
particular classes domain equations involving ordinary types space real numbers find solutions recursive domain equations 
answering questions theory useful semantics 
reasoning principles recursive domain equations preceding paragraph focused problem existence solutions recursive domain equations 
know solutions exist ask formulate prove properties recursively defined domains 
plan investigate 
reasoning principles valid recursively defined domains 
combine principles logic topos modality 
investigation mixed induction coinduction principles recursively defined domains developed pitts reinterpreted hermida jacobs categorical logical setting particular emphasis allowing reasoning parameters context 
goal give model fpc meta language plotkin recursive types logic computable functions 
different partial combinatory algebras different pca give different corresponding categories partial equivalence relations different corresponding realizability toposes shown longley phoa different pca give categories different properties 

way say pca sense better 

specific partial combinatory algebras graph model term models notion domain relate studied notions domains pointed complete partial equivalence relations 

harper studied operational notions equivalence ml language recursive types 
crucial pointed complete partial equivalence relations operational semantics operational notion approximation relation 
obvious question construct pca category includes studied general notion domain category coincide pointed complete 

operational ordering relate natural ordering complete objects 

relation recursive domain equations category complete objects interpretation 

reasoning principles express terms operational semantics 
answering questions give account generally allow force ambient topos brought models operational semantics 
recursion polymorphism complete objects internally complete interpret kind polymorphism notion polymorphism investigated properly 
briefly collection complete objects form type call type topos rt 
topos rt models dependent products type oe type topos rt oe type expression depending internal completeness complete objects means type fact complete object oe complete notion impredicative polymorphism objects 
notion polymorphism shall interested questions 
obtain parametric model sense ma reynolds 
making fact complete objects form internal category ambient category closure properties may able approach robinson rosolini get parametric model 
useful programming language semantics particularly obtain explicit description model 

algebras obtained polymorphism 
example covariant functor type initial algebra 
known weakly initial initial algebra obtained quotients 
case kleene pca pca untyped lambda calculus known algebraic type corresponding sorted algebraic signature sigma modelled initial algebra corresponding sigma results depend crucially exact partial combinatory algebra cover polynomial functors coproducts included 
results extended algebra computer science particular applications area algebraic specifications interested existence initial final algebras coalgebras structures specified sort equations see survey theory algebraic specifications 
note solving recursive domains equations lists natural numbers theta thought showing existence free algebras structures specified equations 
questions interested 
happens allow equations 
classes algebras show existence initial algebras final coalgebras 
finitary algebraic theories finitary means basic operation finite arity correspondence monads 
initial algebras obtained constructing small internal category algebras monad internal adjoint functor theorem get existence initial algebras 
approach mentioned 
general classes algebras essentially algebraic ones equations may partially defined totally equationally defined subspaces answer immediate 
sketches general tool specify algebras proposals reasoning calculi proof theory sketches may relevant get general formal framework specifying reasoning algebras 
questions include 
appropriate calculus sketches applications 

calculus combined logic get smooth workable formal theory 
particular specify reason algebras context 
versus exact categories shown categories partial equivalence relations may understood reflective subcategories called free exact categories 
exact categories better categorical properties corresponding category need better understanding may applied example programming language semantics 
plan investigate questions shown certain conditions satisfied case kleene realizability shown type give initial algebra 
results possibly generalized pca 

extent may corresponding exact category category advantages 

sense may corresponding exact category seen internal category topos may logically characterized abadi plotkin 
model polymorphism recursive types 
th annual ieee symposium logic computer science pages 
ieee computer society press 
abramsky jung 
domain theory 
abramsky dov gabbay maibaum editors handbook logic computer science volume pages 
oxford university press 
amadio bruce longo 
finitary projection model second order lambda calculus solutions higher order domain equations 
proceedings symposium logic computer science pages cambridge massachusetts 
bagchi wells 
graph logic sketches general framework 
manuscript april 
bagchi wells 
graph logic sketches ii finite product categories equational logic 
manuscript 
barendregt 
lambda calculus 
syntax semantics volume studies logic foundations mathematics 
north holland revised edition second printing edition 
bauer 
topology computability 
thesis proposal april 
beeson 
foundations constructive mathematics 
number ergebnisse der mathematik ihrer 
springer verlag berlin 
birkedal carboni rosolini scott 
type theory exact categories 
proceedings th annual ieee symposium logic computer science 
appear 
free exact category category partial equivalence relations reflective subcategory 
birkedal harper 
constructing interpretations recursive types operational setting summary 
theoretical aspects computer science 
breazu tannen coquand 
extensional models polymorphism 
theoretical computer science july 
cattani fiore winskel 
theory recursive domain equations applications concurrency 
brics report series rs brics december 
coquand gunter winskel 
domain theoretic models polymorphism 
information computation 
fiore 
axiomatic domain theory categories partial maps 
distinguished dissertations computer science 
cambridge university press 
fiore jung moggi hearn riecke rosolini stark 
domains denotational semantics history accomplishments open problems 
bulletin eatcs jun 
published technical report csr university birmingham school computer science 
fiore plotkin power 
complete sets axiomatic domain theory 
proceedings th annual ieee symposium logic computer science 
ieee computer society press 
fiore rosolini 
category cpos synthetic viewpoint 
brookes mislove editors electronic notes theoretical computer science 
mathematical foundations programming semantics 
thirteenth annual conference 
freyd 
algebraically complete categories 
carboni rosolini editors category theory 
proceedings como volume lecture notes mathematics pages 
springer verlag 
freyd 
recursive types reduced inductive types 
proceedings fifth ieee conference logic computer science pages 
freyd 
remarks algebraically compact categories 
fourman johnstone pitts editors applications categories computer science 
proceedings lms symposium durham volume london mathematical society lecture note series pages 
cambridge university press 
freyd robinson rosolini 
dinaturality free 
fourman johnstone pitts editors applications categories computer science 
proceedings lms symposium durham volume london mathematical society lecture note series pages 
cambridge university press 
freyd scedrov 
semantic aspects polymorphic lambda calculus 
proceedings symposium logic computer science pages ithaca new york 

girard 
interpr etation fonctionelle elimination des coupures de arithm etique ordre sup erieur 
th ese etat universit paris vii 

girard 
system variable types fifteen years 
theoretical computer science 
gunter 
semantics programming languages 
structures techniques 
mit press 
gunter 
semantics types programming languages 
abramsky dov gabbay maibaum editors handbook logic computer science volume pages 
oxford university press 
hermida jacobs 
algebraic view structural induction 
tiuryn editors proceedings computer science logic number lncs pages 
hermida jacobs 
structural induction coinduction setting 
unpublished manuscript full version september 
huet editor 
logical foundations functional programming 
university texas austin year programming 
addison wesley reading massachusetts 
hyland 
effective topos 
troelstra van dalen editors brouwer symposium volume studies logic foundations mathematics pages amsterdam 
north holland 
hyland 
small complete category 
annals pure applied logic november 
hyland 
steps synthetic domain theory 
carboni rosolini editors proceedings como category theory conference volume lecture notes mathematics pages 
springer berlin 
hyland johnstone pitts 
tripos theory 
mathematical proceedings cambridge philosophical society 
jacobs 
categorical logic type theory 

draft book 
longley 
realizability toposes language semantics 
phd thesis university edinburgh 
longley simpson 
uniform approach domain theory realizability models 
math 
struct 
comp 
science 
longo moggi 
constructive natural deduction set interpretation 
mathematical structures computer science july 
ma reynolds 
types abstraction parametric polymorphism part 
brookes main melton mislove schmidt editors mathematical foundations programming semantics volume lecture notes computer science pages 
springer verlag 
makkai 
generalized sketches framework completeness theorems 
journal pure applied algebra 
martin lof 
intuitionistic theory types predicative part 
rose shepherdson editors logic colloquium pages amsterdam 
north holland 
martin lof 
intuitionistic type theory 
bibliopolis napoli 
mccarty 
realizability recursive mathematics 
cmu cs school computer science carnegie mellon university 
mccracken 
investigation programming language polymorphic type structure 
phd thesis syracuse university 
mitchell 
type inference approach reduction properties semantics polymorphic expressions summary 
proceedings acm conference lisp functional programming pages cambridge massachusetts 
moggi 
computational lambda calculus monads 
proceedings th annual symposium logic computer science pages ca 
ieee computer society press 
moggi 
notions computation monads 
information computation 
phoa 
domain theory realizability toposes 
cst trinity college cambridge 
available technical report ecs lfcs university edinburgh 
phoa 
fibrations topos theory effective topos modest sets 
technical report university edinburgh 
pitts 
polymorphism set theoretic constructively 
pitt poign rydeheard editors category theory computer science proc 
edinburgh volume lecture notes computer science pages 
springer verlag 
pitts 
relational properties domains 
information computation 
appear 
plotkin 
domains 
department computer science 
university edinburgh 
plotkin 
lectures predomains partial functions 
notes course center study language information stanford 
reus 
program verification synthetic domain theory 
phd thesis ludwig maximilians universitat munchen november 
reus streicher 
general synthetic domain theory logical approach 
mathematical structures computer science 
reynolds 
notes lattice theoretic approach theory computation 
technical report syracuse university october 
revised march 
reynolds 
relation direct continuation semantics 
editor proceedings second colloquium automata languages programming saarbrucken volume lecture notes computer science pages 
springer verlag 
reynolds plotkin 
functors expressible polymorphic typed lambda calculus 
erard huet editor logical foundations functional programming chapter pages 
addisonwesley 
robinson 
variations algebra monadicity generalisations equational theories 
manuscript 
robinson rosolini 
colimit completions effective topos 
journ 
symb 
logic 
robinson rosolini 
reflexive graphs parametric polymorphism 
abramsky editor proc 
th symposium logic computer science pages paris 
computer society 
hyland robinson rosolini 
algebraic types models 
main melton mislove schmidt editors mathematical foundations programming semantics 
th conference volume lecture notes computer science pages tulane university new orleans louisiana usa march april 
spinger verlag 
rosolini 
continuity effectiveness topoi 
phd thesis university oxford 
rosolini 
notes synthetic domain theory 
draft 
scott 
type theoretical alternative iswim cuch 
manuscript 
university oxford 

scott 
outline mathematical theory computation 
th annual princeton conference information sciences systems pages 
scott 
lattice flow diagrams 
editor symposium semantics algorithmic languages volume lecture notes mathematics pages 
springer verlag 
scott 
continuous lattices 
lawvere editor toposes algebraic geometry logic volume lecture notes mathematics pages 
springer verlag 
scott 
data types lattices 
siam journal computing 
scott 
identity existence intuitionistic logic 
application sheaves volume lecture notes mathematics 
springer 
scott 
domains denotational semantics 
nielsen schmidt editors proceedings th international colloquium automata languages programming volume lecture notes computer science pages 
springer verlag 
scott 
type theoretical alternative iswim cuch 
theoretical computer science 
reprint manuscript 
seely 
categorical semantics higher order polymorphic lambda calculus 
journal symbolic logic december 
simpson 
recursive types kleisli categories 
unpublished manuscript august 
smyth plotkin 
category theoretic solution recursive domain equations 
siam journal computing 
hansen lindstrom 
mathematical theory domains 
number cambridge tracts computer science 
cambridge university press 
streicher 
topos computable analysis 
unpublished manuscript 
taylor 
fixed point property synthetic domain theory 
th annual symposium logic computer science pages washington 
ieee computer society press 
troelstra editor 
metamathematical investigation intuitionistic arithmetic analysis volume lecture notes mathematics 
springer verlag berlin 
wand 
recursive specification data types 
ernest manes editor category theory applied computation control volume lecture notes computer science pages berlin 
springer verlag 
wand 
fixed point constructions order enriched categories 
theoretical computer science 
winskel 
formal semantics programming languages 

mit press 
winskel larsen 
information systems solve recursive domain equations effectively 
kahn editor semantics data types volume lecture notes computer science pages 
springer verlag 
wirsing 
algebraic specification 
van leeuwen editor handbook theoretical computer science chapter pages 
elsevier science publishers 
