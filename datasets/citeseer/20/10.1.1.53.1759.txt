explicit constructive necessity neil ghani valeria de paiva eike ritter school computer science university birmingham introduces calculus explicit substitutions corresponding modal logic constructive necessity 
semantically motivated calculus develop machines framework specifying analysing computation stages context functional languages 
prove syntactic properties calculus call xdiml sketch interpretation binding analysis partial evaluation respects execution programs stages 
introduces calculus explicit substitutions corresponding modal logic constructive necessity 
semantically motivated calculus develop machines framework specifying analysing computation stages context functional languages 
provide full curry howard isomorphism constructive modal logic 
entails giving calculus annotating natural deduction proofs logic typed calculus terms 
annotations types correspond propositions terms correspond proofs proof normalisation corresponds term reduction 
calculus provide categorical model described 
add explicit substitutions calculus 
explicit substitutions theoretical way making calculi closer implementation making substitution part calculus meta theoretical operation 
step providing basic curry howard isomorphism uses type theory developed barber plotkin intuitionistic linear logic adapting modal logic replacing modality modality 
inherit semantic foundations barber plotkin calculus add reduction calculus prove syntactic properties required developing machine 
second step follows approach adding explicit substitutions calculus provide basis machine 
addition categorical techniques 
categorical approach straightforwardly allows carry earlier calculus explicit substitutions proofs desirable syntactic properties 
standard technology research supported epsrc project 
gr slam explicit substitutions linear machine 
applied design machine modal calculus explicit substitutions 
main application modal calculus framework specifying analysing computation stages context functional languages 
constructive type theory translate variant nielson nielson level functional language levels correspond compile time run time types programs 
gives rise compile time run time operational semantics 
show separation types terms run time compile time ones really works show closed compile time term ground type reduce unique run time term compile time operational semantics 
closed run time term ground type reduce value run time operational semantics 
theorem asserting facts easily obtained results calculus described 
davies pfenning discuss modal logic application binding analysis 
operational semantics motivated kripke semantics modal logics standard operational semantics calculus 
goubault presents modal calculus explicit substitutions distinguish modal intuitionistic contexts unsuitable binding analysis nielson nielson level functional language 
davies uses style modal logic give translation twolevel calculus modal logic 
approach additional axioms essential axiom evaluation code run time 
organised follows 
describe type theory constructive modal logic variant barber dual intuitionistic linear logic dill 
call type theory dual intuitionistic modal logic diml provide reduction version calculus sketch proofs traditional syntactic requirements subject reduction confluence strong normalisation diml 
section add explicit substitutions diml obtaining xdiml 
discuss reduction version prove xdiml satisfies subject reduction 
prove correctness xdiml translating away explicit substitutions 
discuss application type theory xdiml presenting operational semantics showing preservation execution stages 
dual intuitionistic modal logic presents proof system constructive necessity called dual intuitionistic modal logic diml barber dual intuitionistic linear logic dill 
typing judgements diml form gamma delta gamma declares modal variables may occur arbitrarily term delta declares intuitionistic variables may occur subterm form 
diml contains parallel expressions form xn addition notation ally compact closer inherently parallel explicit substitutions xdiml simplify correctness proof xdiml 
typing judgements diml types diml ground types function types box types 
variables tagged xm indicate modal intuitionistic raw expressions diml xm tt xn variables 
tags variables omitted increase legibility 
standard abbreviations parallel expressions identify ff equivalent terms 
context sequence form xn distinct variables types 
diml context consists contexts gamma delta containing disjoint sets variables written gamma delta 
call variables gamma modal variables delta intuitionistic 
typing judgements diml form gamma delta generated inference rules 
weakening kinds variables admissible typing rule variables 
contraction kinds variables follows additive way contexts combined 
exchange admissible 
gamma gamma delta xm gamma delta delta xi gamma delta gamma delta 
gamma delta gamma delta gamma delta tu 
gamma gamma delta gamma delta gamma delta gamma delta tn xn fig 

typing judgements diml complex nature contexts diml results subtle metatheory 
just rules typing variables substitution lemmas depending nature variable substituted 
motivation lemma consider special case xm lemma substitution gamma delta gamma jx delta gamma delta denotes traditional meta level substitution 
similarly gamma gamma gamma xm aj delta gamma delta approach regard elimination rules inverse derive fi equality judgement type constructor 
leads full full curry howard correspondence diml 
space concerns expand remarks move directly reduction diml 
reduction calculus diml customary reduction diml consists fi redexes congruence raw expressions containing basic reductions terms equivalent equational theory generated diml reduction relation called diml equivalent written subject reduction means typing information preserved reduction consider reductions redexes typed terms subject reduction reducts typed 
terms equivalent equational theory generated diml reduction relation called diml equivalent written subject reduction means typing information preserved reduction consider reductions redexes typed terms subject reduction reducts typed 
lemma subject reduction typing judgement gamma delta rewrite typing judgement gamma delta theorem relation strongly normalising confluent 
proof 
strong normalisation proved standard reducibility methods confluence follows local confluence may easily checked 
adding explicit substitutions diml traditional form fi reduction substitutes argument body abstraction step 
highly inefficient redex may copied arbitrarily 
implementations usually evaluate terms environment contraction fi redex creates new substitution added existing environment 
order faithfully model implementations abadi proposed substitution part calculus 
way obtain calculus explicit substitution called oe calculus additional reduction rules corresponding inductive definition reduction calculus 
fi reduction calculus replaced rule creates explicit substitution 
apply idea diml 
addition just calculus contained dill oe calculus contained xdiml 
containment step reduction oe calculus mapped step reduction xdiml 
summarized diagram inclusions subcalculi full lines dotted lines refer embeddings involved proof explicit substitution calculus refines corresponding calculus explicit substitutions 
oe calculus calculus xdiml diml judgements xdiml order correctly add explicit substitutions diml require just terms form substitutions form substitution 
equivalent regarding half expression explicit substitution written hu xi expressions hu xi hu xi replaces notationally cumbersome expressions substitutions behaviour governed oe rewrite rules 
formally raw expressions xdiml xm tt hi hf hf hf xi subscripts hf hf indicate substitution intuitionistic modal variable omitted increase legibility 
write ht xn hhi xn ht pn write hf gi hf pn pattern variable 
substitution ht pn variable substitution variable pattern substitution pattern 
term substitution hi hs hs arbitrary xdiml term 
xdiml variables bound abstractions substitution operator variable bound ht xi ht xi ff equivalent ht yi consequently definition bound variable complex calculus see full treatment 
henceforth identify ff equivalent terms barendregt variable convention bound variables distinct free variables 
xdiml term judgements form gamma delta substitution judgements form gamma delta gamma delta judgements 
replacing expressions substitutions obtain embedding diml xdiml 
embedding left implicit regard diml xdiml 
xdiml satisfies weakening contraction exchange sorts variables 
xdiml reduction correctness reduction oe calculus consists modified form fi reduction creates explicit substitution set oe rewrite rules functions distribute substitutions term constructors 
xdiml rewrite rules lead loss subject reduction rule oe instantiated ht xi redex typed reduct 
term judgements gamma gamma delta gamma delta delta gamma delta gamma delta gamma delta gamma delta gamma delta tu gamma gamma delta gamma delta gamma delta gamma delta gamma delta substitution judgements rules dom gamma delta gamma gamma delta delta gamma delta hi gamma delta gamma delta gamma delta gamma delta gamma delta gamma delta gamma delta gamma delta gamma delta gamma gamma delta hf xm gamma aj delta gamma delta gamma delta gamma delta gamma delta hf xi gamma delta gamma delta gamma delta gamma delta gamma delta hf xi gamma aj delta fig 

xdiml typing judgements xdiml certain oe rewrite rules apply term substitutions new rewrite rules added extract term substitutions 
firstly rewrite rule separates substitutions variable substitutions ht pn oe restricted patterns similarly definitions 
substitution new rewrites oe hf pi oe hg pi 
rules may counter intuitive rewrite opposite direction term substitution 
rewrites natural explanation examples ghani expansions expressions 
formally xdiml reduction congruence raw expressions containing basic redexes 
xdiml reduction satisfies subject reduction restrict reduction typed terms 
term variable substitution xdiml reduction sequence oe denotes result applying addition step oe rewrite step xdiml rewrite desired embedding oe calculus xdiml 
correctness proof oe calculus constructs reduction preserving embedding calculus containing explicit substitutions embedding essentially performs explicit substitutions 
terms terms normalisation confluence oe calculus follow strong normalisation confluence calculus 
modified fi reduction hf xi fi hf xi fi hu xi oe rewrite rules sub 
term sub 
hi oe hi oe oe hf pi oe hg pi ht pi oe ht pi ht piv oe hh pi oe hg pi uv oe oe hg xi fresh hg xm oe ht xm hg xi oe hg xi oe hg yi oe fig 

reductions xdiml correctness proof xdiml essentially construct reduction preserving embedding terms xdiml terms diml 
xdiml term called canonical iff diml term xdiml substitution called canonical iff sub terms canonical 
key clause embedding xdiml diml case canonical substitution applied canonical term translation term defined recursively case analysis 
firstly hi fr hi fr hi 
ancillary notions fr defined follows hi hi hi hi hi hi hf xi fr hf xi hf xi hf xi hf fr hf yi hf yi hf gr may easily verify canonical canonical oe arbitrary xdiml terms mapped canonical terms arbitrary xdiml substitutions canonical substitutions translation gamma maps respects term constructors 
key properties gamma proposition reductions oe oe ii reduction oe xdiml 
iii reduction fi xdiml 
iv diml xdiml 
prove confluence normalisation theorem relation confluent xdiml term rewrites unique diml normal form 
proof 
terms related xdiml equational theory proposition diml equivalent 
diml confluent terms common reduct diml reduction gives rise sequence xdiml reductions reduce normal form term computed calculating diml normal form uniqueness confluence 
reduction strategy normalisation proof usually machines strategy executes possible substitutions fi reductions 
counterexample strong normalisation oe calculus applies xdiml shows strongly normalising 
termination particular reduction strategy needs shown separately 
way apply reducibility method see proof wide range reduction strategies terminate 
analysis computation stages modal logic application diml operational semantics execution functional programs stages 
execution stages called partial evaluation program 
program executed stages information available time want change control flow execution execute early part program 
functional language means variables split kinds kind bound values compile time called static compile time variables kind variables bound run time called dynamic run time variables 
process separating variables compile time run time variables called binding analysis 
aim binding analysis identify variables compile time variables correspond parts program guaranteed terminate arguments needed redexes 
way obtains distinction kinds function spaces hand function space bound variable called compile time variable 
function executed compile time 
hand function space bound variable called run time variable 
function executed run time 
standard presentation distinction uses level calculus 
calculus kinds variables kinds types 
kinds variables compile time run time variables types separated compile time types run time types 
abstraction application defined compile time types run time types 
redexes compile time type reduced compile time redexes run time type run time 
run time expressions may encapsulated code compiler may manipulate 
normally code free variables encapsulation permitted run time expression free run time variables 
free compile time variables bound compilation allowed 
different versions level calculus literature 
nielson nielson give typing rules specify compiletime reductions performed 
palsberg defines partial evaluator function performs compile time reductions 
implies compiletime reduction take place run time abstractions 
follow approach view compile time reductions performed run time execution takes place 
distinction compile time run time modelled modal logic 
modal type represents code type term represents piece code evaluated run time stage 
davies pfenning give embedding level calculus different modal calculus motivated kripke semantics modal logic application operator represents new stage computation 
model execution stages different way modal logic 
distinction intuitionistic modal variables function spaces model distinction run time compile time variables function spaces respectively 
execution stages reflected separation operational semantics compile time run time semantics 
compiletime semantics run time semantics reduce fi redexes compile time run time applications respectively 
evaluation proceed stages compile time operational semantics eliminates compile time redexes run time operational semantics eliminates run time redexes compile time redexes 
operational semantics operationally equivalent model stages computation way 
want model stages add new modality new stage 
way obtain context stacks davies pfenning standard operational semantics 
version level calculus diml 
partition diml types compile time types run time types denote intuitionistic modal function space respectively ground type 
diml terms partitioned compiletime terms run time terms judgements gamma gamma delta gamma context compile time variables delta context run time variables grammar const xm cc code const rr eval const constants ground type 
compile time terms stands expressions evaluated compiletime run time expressions potential values 
code included constructor code diml term constructor evaluated copied 
run time terms models expressions evaluated runtime 
constructor eval abbreviation incorporates code produced compiler run time system evaluation 
term xm abbreviation diml term xm level calculus diml conservativity result sense davies pfenning trivially holds level term formed formed diml term definition 
partitioning terms follows standard partitioning diml intuitionistic modal terms term gamma modal term modal hypotheses term gamma delta intuitionistic term intuitionistic modal hypotheses 
turn operational semantics 
xdiml expressions definition operational semantics step explicit substitution calculus machines small 
metatheory xdiml developed earlier show correctness operational semantics 
compile time operational semantics call value semantics compile time terms rule eval code reduce intuitionistic applications represent run time redexes 
consequence reduce intuitionistic abstractions 
values operational semantics type run time terms compiletime terms subexpressions values type modal closures substitution ht values ground type constants 
rules operational semantics 
substitution hcv xm cv value 
ar hh xm xm hh ym xm xm xi xi xi xi fi hf xi xm fi xm cv hh cv xm app ts ts ts cv plus congruence rules run time constructors 
fig 

compile time operational semantics operational semantics run time terms standard call value semantics rule eval code values expected ones constants ground types intuitionistic abstractions function spaces 
rules give xdiml expressions 
way achieve separation computation stages 
staged operational semantics gives rise natural machines level calculus standard machines substitution hv xi value 
fi hf xi fi xi xi app ts ts ts tv cv fig 

run time operational semantics calculus modal compile time fi redexes intuitionistic run time fi redexes 
compile time machine needs extension treat run time abstractions values reduce 
easy intuitionistic abstraction occurs function part modal fi redexes 
proof operational semantics models separation execution stages relies meta theoretic properties explicit substitution calculus xdiml 
mentioned reducibility method applied xdiml show termination operational semantics 
theorem closed compile time term ground type exists unique run time term view xdiml terms 
ii closed run time term ground type level calculus exists unique value view xdiml terms 
proof 
show separation stages shows compile time value compile time function space term xm uniqueness follows confluence reduction xdiml 
existence value follows reducibility argument similar 
described type theory xdiml associated modal logic constructive necessity suitable easy prove correct implementation machine 
obtain type theory processes generic applied logical systems 
process consists providing curry howard correspondence style dual contexts gave type theory diml satisfies syntactic properties wanted subject reduction confluence strong normalisation 
second process adding explicit substitutions diml obtain xdiml 
straightforward hoped works obtain desired syntactic results xdiml 
pleasing find type theory xdiml obtain semantical methods hidden way see practical applications machines binding analysis 
implementation machine step 
give means compare different ways doing binding analysis partial evaluation 
semantic foundation machine possible give slightly different machine slightly different methods binding analysis partial evaluation give conceptual explanation differences 
gratefully acknowledge discussions rowan davies frank pfenning subject 

martin abadi luca cardelli pierre louis curien jean evy 
explicit substitutions 
journal functional programming 

barber 
linear type theories semantics action calculi 
phd thesis lfcs university edinburgh 

barber plotkin 
dual intuitionistic linear logic 
technical report lfcs university edinburgh 

consel 
binding time analysis higher order untyped functional languages 
proc 
acm conference lisp functional programming pages 

davies 
temporal logic approach binding time analysis 
proc 
lics pages 

rowan davies frank pfenning 
modal analysis staged computation 
guy steele jr editor proc 
rd popl pages 
acm press 

ghani 
adjoint rewriting 
phd thesis university edinburgh 

ghani de paiva ritter 
linear explicit substitutions 
proc 


ghani de paiva ritter 
models explicit substitution calculi 
technical report school computer science university birmingham 

gomard 
partial type inference untyped functional programs 
proc 
acm conference lisp functional programming pages 

goubault 
logical foundations eval quote mechanisms modal logic 
manuscript 

jones gomard sestoft 
partial evaluation automatic program generation 
prentice hall englewood cliffs nj 



typed calculi explicit substitution may terminate 
proc 
tlca pages 
lncs 

nielson nielson 
level functional languages 
cup 

palsberg 
correctness binding time analysis 
functional programming 

ritter de paiva 
explicit substitution names extended 
proc 
icalp lncs pages 

eike ritter 
categorical machines higher order lambda calculi 
theoretical computer science 

eike ritter 
normalization typed lambda calculi explicit substitution 
proc 
csl pages 
lncs 
