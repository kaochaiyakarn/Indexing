approach unix security logging stefan axelsson ulf ulf gustafson jonsson department computer engineering chalmers university technology teborg sweden email sax jonsson ce chalmers se line intrusion detection systems rely logged data 
logging mechanism may complicated time consuming amount logged data tends large 
counter problems suggest simple cheap logging method light weight logging 
easily implemented unix system particularly solaris operating system sun 
logging invocation exec system call arguments 
data realistic intrusion experiments show benefits proposed logging particular logging method consumes little system resources comparable methods effective 
main problem collecting audit data log difficult collect data altogether easy collect overwhelming amount 
sheer volume audit data immediate reason logging considered costly security measure 
collection large amount audit data places considerable strain processing storage facilities mention time spent manually aided computers sifting logs order find breaches security 
tradeoff logging audit data logging little able ascertain breach taken place ande lunt 
unix installations run form security logging software mainly security logging facilities expensive terms disk storage processing time cost associated analysing audit trail manually special software 
suggest minimal logging policy lightweight logging single system call exec 
empirical data derived practical intrusion experiments compare lightweight logging method simple methods 
concluded intrusion traceability proposed logging method superior comparable methods 
purpose logging main purpose logging security reasons able hold users system accountable actions dod 
logging basic requirements identification authentication 
impossible hold user accountable action indicated logs excluded user 
perfect accountability may result mere existence log logging mechanism serves useful purposes ncsc possible review patterns objects users security mechanisms system evaluate effectiveness 
allows site security officer discover repeated attempts users system bypass security mechanisms 
possible site security officer trail abuse may occur user assumes privileges greater normal ones 
may come result security violation possible user abuse privileges new role 
knowledge mechanism logs security relevant actions system acts deterrent intruders 
course security logging policy effective capacity known intruders 

published proccedings st national information systems security conference pp 
oct crystal city arlington va usa existence log fact damage assessment damage control easier effective 
turn raises user assurance attempts bypass security mechanisms recorded discovered 
logs vital aid aspect contingency resolution kahn 
unix environments general systems discussion particular mentioned aims fully realized 
instance user assumed super user privileges unix system typically power turn logging alter existing logs subvert running logging mechanism provide false record events 
furthermore unix systems typically sufficiently strong methods authentication possible hold user accountable grounds appears audit trail 
case knowledge security violation taken place preferred situation breach security taken place gone unnoticed 
lightweight logging definition strive logging policy allow detect trace attacks system incorporated intrusion detection system ids mere simplicity facilitate intrusion detection task 
main purpose provide audit trail security officer establish exactly occurred occurred merely able detect sort significant event taken place 
logging policy meet requirements system transparent user behave manner accustomed 
system resources sparse little possible consumed 
means minimizing storage space processing time time spent administrator 
meeting requirements sufficient data recorded maximize chances detect trace intrusions 
possible trace intrusions logging relevant information exec system call system 
number exec calls roughly corresponds number commands issued user amount audit data order recording security relevant data 
unfortunately configure sunos bsm audit mechanism see section generate record command executed 
wishes record invocation exec system call audit system calls audit class total different system calls 
may produce audit data care store process 
furthermore arguments exec call recorded fact reduces quality audit data considerably 
example example classic unix intrusion scenario exploited gain super user privileges 
security flaw sunos version experiment conducted 
order flaw exist shell script system setuid run privileges owner group caller 
flaw exploited intruder calling shell script symbolic link results intruder gaining access interactive command interpreter henceforth called shell 

intrusion data collected premise attackers operated insiders 
order log data relevant tracing intrusions outsiders network security tool tcp wrapper combined suggested logging mechanism 
see vene description tcp wrapper 

see section detailed presentation unix process accounting facility 

restrictions lifted sunos table penetration scenario 
step shell command comment ln vulnerable file link setuid root shell script 
invoke shell script 
root user interactive root shell 
flaw comes result bug unix kernel 
kernel executes shell script applies setuid bit shell calls shell filename shell script argument 
filename shell mistakes command line switch start interactive mode 
versions sunos problem corrected 
analyse needs recorded order trace intrusion look system calls exploiting flaw 
steps table detail system calls invoked running ln sh 
commands executed shell performs fork exec sequence prerequisite command execution unix 
outline suggestion information included audit record table 
filename longer passed argument shell 
shell passed filename form dev fd refers file descriptor open file 
see steve dev fd interface 
table system calls 
step system calls invoked comment fork execve bin ln ln stat file directory symlink vulnerable file close close close exit link setuid root shell script fork execve 
xf fff xf fff xf fff invoke shell script shell starts calls 
system calls executed dependent input shell 
root table proposed system call logging 
information recorded execve step ln example step sh example record creation time stamp xxxx xxxx real uid log uid yy yy effective uid real gid effective gid process id parent process id filename bin ln current working directory hack hack root directory return value success success argument vector execve vulnerable file field table merits comment field log uid 
propose user assigned unique identifier logs system 
identifier change duration session user real uid changes result invocation command su instance 
existence log uid field easier trace commands invoked user strictly necessary 
information may distilled complete knowledge branch process tree root login leaf current process 
log uid simplifies task borrowed concept auditing ncsc dod 
audit records clear user executed ln command soft link name shell script user invoked shell script link 
look detail clear need log invocations execve system call user trace intrusion 
log argument vector argv execve call need log symlink call separately 
seen information recorded log argument vector ln command 
data necessary trace specific intrusion back user performed 
essence proposed logging scheme creates audit record command issued 
holds true regular accounting differences logging start execution command execution better chance detecting ongoing intrusion attempt 
especially true consider long running commands crack passwords search filesystem example 
furthermore command commences intrusion logged 
far certain delay logging command completed execution may turned auditing severe security intrusions unix environments performed setuid program performing illicit action 
logging real effective uid time command run detect intrusions 
regular accounting logs characters finished command programs copied renamed easy circumvent 
logging full path name command arguments proposed auditing policy difficult trick 
logging data collection experiment experiment years performed number intrusion experiments unix systems 
original goal experiments quantitative modelling operational security tried find measures security reflect system ability resist attacks 
order extensive logging reporting enforced great deal data generated 
believe data useful validation logging policy proposed 
experiments number students allowed perform intrusions system operational laboratory courses department computer engineering chalmers sweden 
system consisted sun elc disk workstations file server running sunos sunos 
system configured delivered special security enhancing features 
attackers worked pairs account system insiders encouraged perform intrusions possible 
activities limited set rules meant avoid disturbing users system ensure experiment legal 
details 
logging main classes accounting experiment system active connect time accounting performed various programs write records var adm sun 
programs login update files keep track logged system logged 
process accounting performed system kernel 
termination process record process written file case var adm 
process accounting main purpose provide operator system command usage statistics base service charges system sun 
error administrative logging primarily performed daemon sun 
various system daemons user programs kernel log abnormal noteworthy conditions syslog function 
conditions var log syslog file experiment system 
class logging designed security mind sunos bsm basic security module logging sub system sun 
logging facility said sun microsystems conform requirements laid forth sunos bsm formally certified 
logging mechanism active experiment system 
system logging accounting files experiment system consist usr adm var log syslog usr adm var adm messages 
connect time accounting various system programs enter records usr adm files users log system 
purpose file provide information users currently logged system entry particular user cleared logs system 
file modified manner user logs entry containing time left system 
file contains record user entered exited system 
file contains information indicating system shut rebooted date command change system time 
records contain information name terminal user logged 
name user logged 
name remote host user logged 
time user logged system 
process accounting process accounting system mentioned designed provide operator system command usage statistics base service charges system 
system usually activated booting system 
active unix kernel appends audit record log file typically usr adm termination process 
audit record contains fields accounting flags contains information indicating execve accomplished process super user privileges 
exit status 
accounting user 
accounting group id controlling terminal 
time invocation 
time spent user state 
time spent system state 
total elapsed time 
average memory usage 
number characters transferred 
blocks read written 
accounting command name characters filename recorded 
error administrative logging functions described user system programs logging facility provided syslog service 
system start logging daemon started processes communicate syslog interface 
messages sent syslog contain priority argument encoded facility level indicate entity system generated log entry severity event triggered entry 
syslog service configured act different facilities levels appending message appropriate file write message system console notify system administrator send message network daemon host 
experiment system syslog configured append messages var adm messages debug messages sendmail var log syslog 
evaluation intrusion data respect different logging methods experiments defined intrusion successful performance action user normally allowed perform 
intrusions known security community cert 
cert informs system vulnerability specific intrusion experiment yielded data 
greatest advantage intrusion data know exactly intrusion performed obviously specific interest discussing logging intrusion detection purposes 
categorize intrusions kind audit trail leave 
intrusion class discuss possibility detecting attack normal system accounting monitoring means suggested lightweight logging method 
intrusions categorized broad classes rest section 
sake brevity typical intrusion class described detail outlined 
discussion structured headings system logging logging performed kernel system processes init 
application program logging logging performed application programs su monitoring resource utilization attacks result abnormal load cpu disk network monitored anomalous behaviour detected 
practice intrusions detected users system report acts funny respect 
lightweight logging execve discussion validity recorded information related suggested logging policy 
class misuse security enhancing packages programs available help supervisor unix system increase security testing known security problems 
programs course ab attacker learn existing flaws attacked system 
crack target system enforce password shadowing user able read encrypted password values mount dictionary attack obtaining executing publicly available password guessing program crack 
system logging execution kinds programs known packages consisting subprograms leaves distinct patterns multiple entries file easy detect trace provided commands renamed 
application program logging resource utilization possibly massive disk network nfs cpu utilization 
suggested logging program recorded saved arguments 
spawned subprogram collection recorded arguments 
approach gives accurate information considering patterns log file 
cops intended system administrators find security problems unix installations cops publicly available package attackers 
consists set programs tries find point potential security vulnerabilities 
password generation rules assigning passwords students attending diverse courses department program randomly creates character lower case passwords 
passwords easier memorize program password contain vowels consonants distinct pattern 
unfortunately turns pattern severely limits randomness user passwords exhaustive search feasible 
attackers compiled dictionary satisfied password generation rules ran crack 
system logging proposed logging policy capable detecting packages encountered experiment 

see www cert org information cert advisories publish 
class search files misconfigured permissions setuid programs general search filesystem files attacker write permission files setuid user step performed security packages mentioned 
list separate class attackers performed search trying breach security 
attacks common resource intensive terms network disk traffic may detected 
search files public write permission target attack configured permissions diverse files system especially system files user configuration files 
files public write permissions modified arbitrary users compromising integrity system 
experiment chose count general searching breach regarded action breach demanded detailed description exploit vulnerable file 
system logging find command traces 
arguments find command available doubtful security administrator tell difference benign uses find uses consistent ongoing intrusion attempt 
application program logging resource utilization possibly massive disk network nfs cpu utilization 
suggested logging arguments find command name logged making possible discover attacker searching 
attacker tries hide name making soft hard links find command links traceable 
search setuid files wrongly configured setuid files may compromise system security especially setuid shell scripts setuid programs built shell escapes 
case demanded detailed description exploit vulnerable file 
suggested logging policy detect usage find purposes searching files 
system logging hand difficult time differentiating suspect legitimate uses find 
class attacks system initialization experiment system configured possible attack halting system initialization 
single user root privileges obtained able exploited multi user root 
single user boot possible boot clients console single user mode 
possible set secure console login 
possible modify arbitrary filesystem client 
clients disk root directories mounted nfs file server 
system logging var adm var adm var adm messages possible tell machine rebooted come multi user mode 
commands executed single user mode logged logging active single user mode 
application program logging resource utilization limited 
suggested logging possible log actions performed single user mode normally done 
single user mode viewed transient administrative state employed administrative duties system repair 
resources necessary running logging mechanism may unavailable 
case root partition mounted read making difficult store log disk 
inserting new account passwd file primarily method multi user root 
single user root possible insert new account password file 
possible log account client comes multi user mode 
setuid command interpreter program root filesystem single user root possible copy command interpreter shell change owner copy arbitrary user example root set setuid flag 
host entered multi user mode attacker need execute copied shell take identity assigned owner 
method primarily multi user root 
file server intrusion setuid program clients disk modifications clients root filesystems available users file server 
way possible user executing setuid program described preceding intrusion scenario 
system fully operational initialization difficult methods detect trace intrusion attempt 
technically difficult design logging mechanism function circumstances effect giving away super user privileges happens walk 
turns attack outsider attack monitor physical access computer room order chance catching intruder 
class exploiting inadvertent read write permissions system files experiment system configured critical system files directories set inadvertently lax access permissions 
possible attackers modify critical files subvert system programs case read data attackers access 
yp configuration error nis see yp installed manual meaning necessary initialize var yp bringing machine multi user mode 
doing neglecting appropriate activated default single user mode may result dangerous file permission settings files created circumstances 
nis server configuration database var yp target system permission mode writable readable 
writable default experiment system writable users 
possible intruder hide appearing output commands users importantly allows user alter system files 
accomplished editing issuing setuid command write instance uses find output file 
system logging show user issued instance write command looks benign 
certainly way differentiating write ordinary legitimate uses command 
application program logging resource utilization limited 
suggested logging unfortunately command user uses manipulate stand audit trail kind intrusion difficult trace 
log arguments commands issued chances catching modifying command increased substantially comparison chances 
crash server client wishes connect server local machine client looks unix domain socket predefined location filesystem tmp unix experiment system 
socket directory world writable experiment system result user remove socket hang server 
replacing socket non empty directory forcing server restart directory unlinked files left hanging 
require supervisor manually fix system boot fsck 
reading mounted backup tapes experiment system backup tapes tape awaiting night backup run 
backup tapes constantly reused fairly common policy installations tape device file world read permissions set possible attackers read previous week backup tapes 
enabled read files normally allowed read 
misuse system files erroneous permissions detectable proposed logging scheme 
misuse manifests suspect argument user command command accesses file normally access 
system logging slim chances detecting arguments logged 
class intercepting data due configuration errors nature certain unix system applications possible attackers intercept communication users experiment system 
snooping server publicly available program called listen traffic server 
program tries connect server target machine request granted possible intercept keystrokes typed console user target machine 
frame buffer grabber person log sunos workstation remote host may able read contents console video ram memory 
frame buffer character special file dev fb default writable readable 
ethernet snooping typical unix clients remote login transmit authentication information clear network 
possible access network network topology technology permitting eavesdrop traffic learn passwords unix installations local super user privileges able perform kind attack case experiment system attackers performed intrusions 
system logging records commands issued user including root 
super user run popular network listening tools appear log entries intruder turned logging unfortunately 
application program logging resource utilization listening network traffic setting network interface promiscuous mode load local host heavily 
suggested logging argument applies 
arguments instance tcpdump recorded easier differ legitimate illegitimate uses tcpdump 
snooping described performed special programs part system distribution 
easy attacker rename popular packages installing logging effort 
experiment attackers bother intrusions relatively easy trace programs normally run 
class trojan horses attackers unsuspecting users execute trojan horses applications purported benign addition 
trojan su possible create fake su program executed saves copy entered password prints error message su sorry password wrong 
program erases filesystem 
system logging normally su executed result unsuccessful record starting su 
indicates program executed root privileges 
consequently trojan horse su run root privileges appear plain su easily detected 
judge circumvented carefully designed trojan horse 
regard tracing thing tells user executed trojan su location creator program 
application program logging resource utilization limited 
suggested logging information trace intrusion recorded intrusion method requires command invoked su 
information recorded user executed program full path program real uid setuid settings logged 
full path program logged chances discovering planted fake su program increases 
trojan mail attachment somewhat social engineering attack 
group attackers sent mail message contained announced picture explicit nature 
picture viewed normal software installed system supplied software attached mail 
software trojan horse hijacked viewer account correctly displayed picture 
system logging records part path command 
impossible differentiate running legitimate commands trojan counterpart 
suggested logging policy detects attacks show execution normal system command suspect path running command introduced system suspicious way 
class forged mail news owing design mail news servers experiment system fairly easy send message purported 

documentation unclear exact circumstances inserted 
fairly unreliable indicator privileges acquired executing program 
faking email unix systems possible fake sender mail message making appear originate user non existing user 
done connecting mail port tcp ip interacting directly sendmail daemon 
system logging telnet command find record sending machine connect records syslog described time stamps 
application program logging message sent workstations find tracks var log syslog left sendmail machine faked sender identity 
resource utilization limited 
suggested logging clearly information recorded trace sending fake mail 
partial information may available depending way way telnet command invoked command 
forged news consequence way remote usenet news server protocol designed fairly easy forge usenet news article appear originated user system 
authentication performed news client software prevents user connecting remote news server hand telnet 
attackers forged mail news telnet command passing parameters command line easy detect suggested logging actual mail news article difficult trace 
trivial invoke telnet command command line arguments foil methods logging 
class subverting setuid root applications reading writing system files setuid root applications unix systems allowed read write file default 
imperative applications check user supplied arguments carefully lest doing user normally allowed 
applications contain flaws allow attacker perform unauthorized reading writing critical files 
xterm logfile bug version xterm client option entire session logged file 
furthermore xterm setuid root able change owner device file current user 
bug possible user specify existing file logfile xterm xterm append data supplied attacker file 
system logging file see run xterm common occurrence safely say impossible trace intrusion way 
application program logging resource utilization limited 
suggested logging log arguments xterm run catch invocation logfile mechanism telltale argument echo bin sh similar hallmark intrusion 
xterm logfile bug version variation preceding exploit attacker create file output xterm inserted file provided file exist 
change files mail alias unix operating system maintains global mail aliases database sendmail program reroute electronic mail 
standard alias delivered versions unix decode 
allowing alias possible modify directories system 
finger daemon finger utility experiment system setuid root insufficient access check returning information user 
possible finger display contents file strategic symbolic link plan user home directory target file 
ex vi preserve changes file unix text editors ex vi feature event computer crashes user unexpectedly logged system preserves file user editing 
utility accomplishes set uid root weakness attacker replace change owner file system 
dev audio denial service owing kernel bug possible crash machine sending file rcp dev audio remote machine 
interactive setuid shell problem sunos fixed operating systems 
attacker simply invokes setuid shell script symbolic link immediately results interactive shell effective uid gid owner shell script 
detailed section 
methods trick setuid program inevitably supply suspect arguments command modify filesystem advance running setuid command 
depending specific circumstances logging proposal high chance detecting tracing intrusion log suspect arguments log commands poison filesystem 
system logging manage accomplish 
class buffer overrun mentioned setuid program careful checking arguments 
exists class security flaws attacker setuid application filling internal argument buffer overflows setuid program execution context 
way possible attacker force setuid program execute arbitrary instructions 
encountered attack 
include severity type attack widespread commonly encountered field 
buffer overrun rdist rdist utility fixed length buffer filled overflow stack rdist set uid root 
attackers manage exploit crash rdist include case interesting class intrusions 
system logging usual manage leave conclusive traces log files 
invocation program overflow condition probably show name finished program recorded execution original program image typically overlaid set uid shell 
application program logging resource utilization limited 
suggested logging log arguments command rdist case immediately see wrong 
fact record log entire program rdist overflowing stack 
may fortunate variations exploits keep actual overflow code environment variable log 
see original exec rdist followed exec root shell intervening fork conclusive proof system subverted 
see discussion concerning exploit typical kinds exploits 
class execution exploit scripts possible novice attacker download programs command scripts exploit known security flaw 
packages wide circulation provide attacker easy entry system 
setuid root script included specific example breach involves setuid script setuid script included sunos distribution tapes 
security flaw widespread exploit scripts developed widely circulated 
particular exploit script load root experimenters successfully deeper understanding security flaw involved 
exploit script question uses environment variable ifs trick producing interactive shell super user privileges 
system logging record arguments commands user executes difficult establish load root exploit script run 
exploit script executes number commands predefined sequence theory possible ascertain script run level certainty 
generally possible detailed knowledge script 
mentioned previously marker indicate super user privileges appear case 
application program logging resource utilization limited 
suggested logging determine commands run arguments easier determine breach occurred 
particular fact user executed script turn invokes exec bin sh sh root privileges gives game away 
flaw exploited environment variable record lead storage data 
strong indication sort ifs manipulation taken place fact audit trail shows user executed command named bin part shell script 
sendmail original mail handling client bin mail set uid root sunos 
recipient mail message lacks mail box program creates appends mail message 
unfortunately exists race condition creation mail box opening writing 
exploit scripts published exploit race condition 
operate replacing newly created mail box symbolic link file result overwritten created contents specified attacker 
script known established normal system logging 
suggested logging deal script previously examined traced analysed determine effects 
summary discussion results studying security breaches clear main system logging mechanism suffers major shortcomings commit executed command audit trail finished executing 
misses crucial long running commands 
commands process image overlaid call exec appear audit trail command crashes compromises system risk included audit trail 
record arguments issued commands 
turns log material useless alphabet soup security perspective impossible see executed commands set act terms files cases arguments commands set legitimate uses commands apart illegitimate ones 
mechanism supposed trace uses super user privileges unreliable best erroneous worst 
trusted provide worthwhile information super user privileges 
section compared lightweight logging logging methods system logging application program logging monitoring resource utilization 
order comparison group logging methods heading traditional logging believe employed 
results summarised table contains total different attacks classes 
see lightweight logging detects intrusions classes traditional logging covers intrusions classes 
coverage loosely defined related number missed intrusions lightweight logging factor better traditional logging missed intrusions compared 
despite fact traditional logging collects audit data sources 
method succeeded detecting attacks classes altogether 
table summary logging mechanism evaluation 
class number intrusions class lightweight logging traditional logging misuse security enhancing packages search files misconfigured permissions setuid programs attacks system initialization exploiting inadvertent read write permissions system files intercepting data trojan horses forged mail news subverting setuid root applications reading writing system files buffer overrun execution exploit scripts number classes number intrusions comparison clear correcting shortcomings original mechanism mentioned proposed policy manages trace overwhelming portion intrusions fall categories user run commands run log shows log uid correspond known supervisor executed commands super user privileges 
user run commands suspect arguments doing managed trick system application doing illicit 
user run suspicious looking sequence commands 
indicates user run exploit script security enhancing package run 
furthermore result logging policy produces audit trail detailed information extracted exactly intrusion performed performed 
logging security relevant information pertaining executed command general environment executed sufficiently complete record events base action provided audit trail protected manipulation 
accomplished logging dedicated network write media detailed 
shown lightweight logging method effective tracing intrusion comparable methods traces overwhelming majority intrusions encountered experiments 
easily implemented sunos bsm module newer versions sunos operating system sun 
consume resources terms processing power storage capacity left running machines installation 
poor man logging 
ande james anderson 
computer security threat monitoring surveillance 
technical report box fort washington pa february revised april matt bishop 
standard audit trail format 
proceedings th national information systems security conference pages baltimore maryland usa october 
sarah littlewood tomas jonsson 
measurement operational security 
proceedings ninth annual conference computer assurance compass pages gaithersburg maryland usa june july 
dod department defense 
trusted computer system evaluation criteria december 
dod std 
garfinkel gene spafford 
practical unix internet security 
reilly associates second edition 
jonsson tomas 
quantitative model security intrusion process attacker behaviour 
ieee transactions software engineering vol 
april 
kahn jay kahn marshall abrams 
contingency planning bad things happen systems 
proceedings th national information systems security conference pages baltimore maryland usa october 
lunt teresa lunt survey intrusion detection techniques computers security june 
mukherjee todd heberlein karl levitt network intrusion detection 
ieee network may june ncsc national computer security center 
guide understanding audit trusted systems 
june 
ncsc tg version 
tomas jonsson sarah littlewood 
operational measures computer security experimentation modelling 
brian randell editors predictably dependable computing systems esprit basic research series chapter viii 
springer verlag 
steve richard stevens 
advanced programming unix environment 
addison wesley publishing isbn 
sun sun microsystems 
system network administration march 
part revision sun sun microsystems basic security module guide 
sun microsystems garcia avenue mountain view california usa 
vene venema 
tcp wrapper network monitoring access control traps 
proceedings rd usenix unix security symposium pages baltimore maryland usa september 
usenix association 
