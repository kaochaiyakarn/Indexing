verification reactive systems disco pvs tampere university technology software systems laboratory finland 
provided mechanical verification support disco language 
disco object oriented specification language specification reactive systems 
main contributions 
mapping object oriented specifications pvs theorem prover invariant properties mechanically verified 
second systematic theorem prover animation facility disco environment strengthening invariants 
done disco project aim develop methodology associated tools specification reactive systems 
specification language tools described introduce briefly 
disco language defined semantics possible reason formally disco specifications 
describes invariant properties verified pvs theorem prover 
gives overview system 
user constructs specification disco language 
specification examined animation tool validate specification informal requirements 
user satisfied specification captures requirements formal verification increase confidence specification 
verification need find stronger invariant implies invariant want verify 
theorem prover animation tool systematically strengthening invariants 
main contributions mapping object oriented specifications pvs logic theorem prover animation tool systematically strengthening invariants 
familiar example alternating bit protocol give flavor disco specifications look mapped logic theorem prover 
rest structured follows 
section reviews related 
section introduces disco specification language alternating bit protocol example 
section gives formalization tla pvs section describes mapping disco constructs disco specification compiler animation pvs specification pvs proof fig 

disco specification environment logic 
section illustrates invariants proved section draws outlines 
related theorem provers applied reasoning action systems von wright formalized temporal logic actions tla hol theorem prover 
engberg implemented mechanical verification system tla lp verification system 
system intended general purpose tla prover pvs formalization tla target logic 
chou describes general framework reasoning distributed algorithms hol theorem prover 
properties programs verified verifying properties counterparts mapping concrete programs 
describes experiment existing specifications written vdm sl translated hand pvs logic 
unity logic formalized variety theorem provers main difference deal object oriented specifications number variables potentially infinite 
implemented automatic translation specification language logic theorem prover 
disco disco specification language joint action approach back kurki 
joint action system consists set objects set actions 
guard action true combination participating objects action executed 
execution action atomic parallelism modeled nondeterministic choice actions 
meaning disco specification set execution sequences allows 
presenting details disco specification language show familiar example specified 
language support stepwise refinement disco give specification monolithic 
specifications realistic size stepwise refinement 
brevity give full specification just representative parts 
illustrates specification disco animation tool 
fig 

specification disco animation tool alternating bit protocol briefly outline version alternating bit protocol example 
protocol ensures correct delivery messages unreliable channel may lose messages corrupt 
version channels 
sender places messages message channel receiver read receiver places acknowledgments acknowledgment channel sender read 
sender receiver maintain bit additional information transmitted messages acknowledgments party 
initial state values bits receiver sender messages acknowledgments transit 
sender wants send message stores message message channel bit enters state indicating expecting acknowledgment 
state repeatedly send message acknowledgment bit received 
acknowledgment received sender inverts bit enters state acknowledgments pending 
receiver repeatedly sends acknowledgments negation bit 
reads message bit equal bit receives message negates bit 
continues send acknowledgments new value bit 
specification alternating bit protocol disco give definition data channel 
single top level state indicating channel contains valid message 
message consists alternating bit data sent 
class data channel state invalid valid extend valid data integer bit boolean disco objects hierarchical state structure similar statecharts 
extend clause declares variables data bit reside state valid data channel enters state invalid variables inactive 
asterisk front invalid indicates default state 
definition ack channel similar omitted 
class definition describes structure objects belonging class 
number objects infinitely 
implementation specification fixes number objects class 
animation requires specific instance specification 
shows instance specification consisting object class 
class sender defined 
constant attributes ch ch channels 
history variable sent messages formulating main invariant ordering messages 
definition class receiver similar omitted 
class sender ch ack channel null ch data channel null state ready waiting ack sent integer bit boolean sent messages sequence integer number assertions structure system needed 
give necessary conditions implementation needs fulfill order verified invariants hold 
assertions initial conditions system 
representative assertions listed 
assert data receiver exists data channel receiver ch assert connected receiver sender ch ch ch ch assert unique ack sender rr receiver ch rr ch 
rr assertions sender data exists receiver data exists sender ack exists receiver ack exists unique data sender omitted similar 
completeness give assertions corresponding invariants want verify 
relates bits sender receiver channels second states protocol preserves message ordering 
return assertions section discussing verification 
assert channel bits sender receiver data data channel ack ack channel ch data data ch ch ack ack ch 
bit bit 
ack invalid ack valid bit bit bit bit 
data invalid data valid bit bit assert delivered messages sender receiver ch ch ch ch 
sent messages received messages sent 
sent messages received messages give actions objects participate 
actions send resend move message sender data channel 
message sent send action modeled action parameter receives arbitrary integer value time action executed 
message stored sent subsequent action resend action resend similar send omitted 
action send integer sender ch data channel ch ch ready waiting ack state transition state waiting ack sent ch valid ch valid data ch valid bit bit message received bit matches bit receiver 
receiving message removes channel 
received message appended sequence received messages alternating bit receiver negated 
action receive message receiver ch data channel ch ch ch valid ch valid bit bit bit bit received messages ch data 
received messages ch invalid actions acknowledge receive ack similar receive message 
actions lose message lose ack lose contents channel entering state invalid omit actions brevity 
temporal logic section give formalization temporal logic pvs logic 
logic essentially lamport temporal logic actions differences description tla 
logic syntactic forms disco language mapped 
start formalizing state simply uninterpreted data type formalization state type behaviors sequences states formalized behavior type nat 
state types temporal formulas actions state predicates expected mappings type behavior 
bool type state 
bool action type state state 
bool represent terminating computations nonterminating computations repeating state 
stuttering step needed 
stutter action action lambda unprimed primed state unprimed primed primed unprimed order able actions state predicates temporal formulas introduce lifting functions declared conversions pvs 
action state predicate encountered context requiring temporal formula automatically converted pvs conversions 
temporal lambda behavior action temporal action lambda behavior define temporal operator temporal formula behavior behavior bool forall nat suffix ready define invariant state predicate invariant system initial condition actions assumptions iff holds behaviors satisfying assumptions initial condition consisting steps stuttering steps 
invariant assumptions bool action bool forall behavior assumptions stutter 
derive theorems corresponding inference rules tla 
theorems invariant proofs 
theorem invariant rule standard technique establishing invariants show predicate holds initial state actions invalidate 
second theorem invariant intro rule allows introduce previously established invariants assumptions proof 
straightforward prove 
theorem forall assumptions bool action forall behavior stutter assumptions 
forall nat assumptions 

invariant assumptions theorem forall assumptions bool action invariant assumptions 
forall behavior assumptions stutter 
forall nat convenient derive stronger invariant implying invariant want prove prove stronger invariant 
invariant implication rule allows 
theorem forall assumptions bool action invariant assumptions forall behavior nat assumptions 

invariant assumptions mapping disco pvs section describe mapping disco constructs pvs specification previous section example 
classes disco class represented record type pvs logic 
components disco class gives rise elements record type 
example class sender maps type sender type inch objid objid state 
int bit state 
bool state 
list int ready state 
bool state 
bool ref objid kinds components class parameters variables 
parameters constant components change values actions represented elements corresponding type 
field ch example parameter 
variables change values actions represented functions state appropriate type 
field bit example variable 
disco state anonymous finite state machine 
represent disco state collection boolean variables 
fields ready waiting ack correspond state disco class 
hierarchical structure disco states preserved pvs representation 
parameters variables embedded states converted top level components prefixing names enclosing state items 
example variable valid bit mapped valid bit pvs representation 
expressions mapping disco expressions pvs straightforward 
disco constants map pvs constants disco operators map pvs operators parameters variables objects accessor functions pvs creates record type 
object class sender ch maps ch ch parameter 
bit maps bit state 
disco states expand corresponding collections boolean variables 
assertions mentioned section kinds assertions 
exemplified data receiver exists assert data receiver exists data channel receiver ch assertion refers constant attributes objects invalidated actions 
need prove invariant 
map state independent assertions boolean formulas taken assumptions doing verification 
assertion data receiver exists maps bool forall exists receiver inch ref assertions invalidated actions mapped boolean functions state 
example assertion delivered messages maps pvs follows 
receiver sender state bool inch inch implies append state bool forall sender forall receiver state dependent assertions give rise proof obligations 
assertion theorem generated 
theorem invariant init actions assertion predicate init conjunct initial conditions assertions actions conjunct actions 
bulk involved verifying invariant goes establishing actions invalidate invariant 
case actions preserve invariant trivially handful actions need special consideration 
produce lemma action preserves assertion action assertion pair 
lemmas imply assertion invariant help modularize proof 
actions action relation states map boolean function states 
disco action gives changes take place leaving implicit left unchanged 
pvs counterpart needs spell new values unchanged parts state 
gives mapping action send pvs 
parameters participants map existentially quantified variables 
give guard separate function convenient doing verification 
body action consists sequence assignments state transitions individually mapped corresponding pvs formulas 
assignments disco map equalities pvs left hand side mapping ch sender int state bool ref ch ready send unprimed primed state bool exists ch sender int ch unprimed ready primed false primed true primed invalid ch primed false valid ch primed true ch primed ch primed bit unprimed forall ch implies invalid primed invalid unprimed valid primed valid unprimed primed unprimed primed unprimed forall sender implies primed unprimed forall sender implies ready primed ready unprimed primed unprimed invalid valid valid bit unchanged ack bit unchanged received messages unchanged bit unchanged sent messages unchanged fig 

mapping action send pvs 
primed state 
state transitions map assignments corresponding boolean variables similar fashion state items map boolean variables 
verification invariants set verify invariants 
simple invariant bits sender receiver channels related 
second concerns messages delivered channel 
channel bits observing values alternating bits related produce invariant candidate 
invariant interesting illustrates systematically strengthen invariant candidates animation tool 
proposed invariant assert channel bits sender receiver data data channel ack ack channel ch data data ch ch ack ack ch 
bit bit 
ack invalid ack valid bit bit bit bit 
data invalid data valid bit bit attempted proof channel bits leaves subproofs completed 

analyzing subproof reveals represents state bits equal sender receiver acknowledgment alternating bit equal transit formulas sequent 
informal reasoning suggests reachable state system 
simulation disco animation tool indicate strengthen channel bits conjunct bit bit ack valid bit 
ss ack ch assumptions init action temporal actions ref data ref data inch inch ref ch ref ch bit bit valid ch ch valid data data invalid ch fig 

unresolved subproof proof channel bits similar analysis subproofs reveals represent states 
represents exactly state remaining ones represent identical situation common value bit zero 
invariant candidate channel bits strengthened conjuncts exclude states assert channel bits aux sender receiver data data channel ack ack channel ch data data ch ch ack ack ch 
bit bit 
ack invalid bit ack valid bit bit bit 
data invalid data valid bit bit bit bit ack valid bit bit bit ack valid bit give outline proof preserves channel bits aux establishes action send invalidate channel bits 
shows outline proof 
send preserves channel bits aux hide assumptions 
ground fig 

outline proof send preserves channel bits aux disco pvs translation produces custom proof script automating routine parts invariant proof 
generated script applied yields subproofs 
resolved bdd simplification 
second subproof describes situation senders connected data channel 
violates assumption unique data sender need introduce assumption sender unique suitably instantiated 
additional information sequent pvs decision procedures complete proof 
subproofs similar 
branches automatically proved pvs decision procedures branches require suitable instances assumptions brought sequent 
original assertion channel bits proved applying invariant implication rule 
delivered messages second invariant establishes sequence sent messages suffix sequence received messages 
formulate directly disco assertion immediately implies 
assert delivered messages sender receiver ch ch ch ch 
sent messages received messages sent 
sent messages received messages case channel bits invariant strong proved 
technique recognizing subproofs representing states animation tool produce stronger version invariant 
somewhat arbitrarily separate strengthening conjuncts separate assertions 
strengthened delivered messages assert delivered messages aux sender receiver ack ack channel ch ch ch ack ack ch 
sent messages received messages sent 
sent messages received messages bit ack valid bit sent messages received messages bit bit sent messages received messages bit bit sent messages received messages addition auxiliary invariants introduced data corrupted ready bits 
guarantees message placed data channel contents changed bit changed 
second introduces constraints values bits sender state ready implemented mechanized chain disco specifications logic pvs prover 
formal verification invariant properties disco specifications 
main contributions mapping object oriented specification language pvs logic theorem prover animation tool systematically strengthen invariants 
experiences verification disco specification alternating bit protocol describe single instance sender receiver pair associated channels world senders receivers channels 
class definitions sender receiver state connected channels imply particular structure 
structure needs explicitly assertions 
subgoals resolved pvs decision procedures generality disco specification 
example prover constructs subproof corresponding situation senders connected data channel need refer appropriate assumptions order resolve subproof 
practise means expanding definitions instantiating resulting quantified formulas appropriate values 
installing assumptions automatic rewrites feasible search space pvs decision procedures large 
verifying typical disco specification involves reasoning state machines pvs decision procedures quite effective 
strong invariant usually problem prove 
main problem find invariant 
failed subproofs disco animation tool systematic strengthening invariants 
analyze subproof see represents unreachable state simulation animation tool augment informal reasoning 
convinced identified unreachable state characterized assignment values variables strengthen invariant conjunct quite case original invariant describes intuitively understandable property system strengthening conjuncts immediately obvious 
easy mistakes strengthening conjuncts leads wasted verification efforts 
planning finite state methods quick check strengthened invariants attempting proof pvs 
examples tried far suggest verification done reasonable amount effort 
difficult estimate gone verification alternating bit protocol tools constant development estimate specifying verifying similar case matter weeks 
pvs logic proved flexible express semantics disco natural way 
interesting compare theorem provers higher order logic fare respect 
far concentrated invariants planning eventually extend verification liveness properties 
invariant proofs attempted automatic support provided 
liveness proofs need supporting invariants 

disco home page 
www cs tut fi disco disco english fm html 

sten 
translating specifications vdm sl pvs 
von wright grundy harrison editors proceedings th international conference theorem proving higher order logics volume lecture notes computer science pages 
springer verlag 

andersen petersen 
program verification 
joyce seger editors international workshop higher order logic applications volume lecture notes computer science pages 

back kurki 
distributed cooperation action systems 
acm transactions programming languages systems october 

back kurki 
decentralization process nets centralized control 
distributed computing 

brown 
proof environment concurrent programs 
fme industrial strength formal methods volume lecture notes computer science pages 

chandy misra 
parallel program design foundation 
addisonwesley 

ching chou 
mechanical verification distributed algorithms higherorder logic 
computer journal 

urban engberg peter gr leslie lamport 
mechanical verification concurrent systems tla 
probst editors computer aided verification fourth international workshop 
cav 
montreal canada 
june july volume lecture notes computer science 
springer verlag 

stephen garland john guttag 
overview lp larch prover 
proceedings third international conference rewriting techniques applications volume lecture notes computer science 
springer verlag 

michael gordon 
hol proof generating system higher order logic 
graham birtwistle subrahmanyam editors vlsi specification verification synthesis pages 
boston kluwer academic publishers 

david harel 
statecharts visual formalism complex systems 
science computer programming jun 

barbara pierre cr 
modular coding unity coq 
von wright grundy harrison editors proceedings th international conference theorem proving higher order logics volume lecture notes computer science pages 

hannu 
design specification language reactive systems 
phd thesis tampere university technology 

kurki hannu kari 
object oriented specification reactive systems 
proceedings th international conference software engineering pages 
ieee computer society press 

leslie lamport 
temporal logic actions 
acm transactions programming languages systems may 

thomas 
hol formalization temporal logic actions 
volume lecture notes computer science 
springer verlag 

owre rushby shankar 
pvs prototype verification system 
deepak kapur editor th international conference automated deduction volume lecture notes artificial intelligence pages 
springer verlag 

von wright 
theorem prover reasoning concurrent algorithms 
probst editors computer aided verification fourth international workshop 
cav 
montreal canada 
june july volume lecture notes computer science 
springer verlag 
article processed macro package llncs style 
