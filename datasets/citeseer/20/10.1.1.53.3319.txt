direct volume rendering textures orion wilson allen van gelder jane wilhelms computer information sciences university california santa cruz ucsc crl center computer engineering information sciences university california santa cruz cs ucsc edu avg cs ucsc edu wilhelms cs ucsc edu june advent fast texture mapping hardware modern graphics workstations warranted research rendering techniques texture mapping full advantage 
developed new easy implement method direct volume rendering produces high quality images speeds approaching orders magnitude faster existing techniques workstations hardware support dimensional texture maps 
rectilinear data set converted dimensional texture map containing color opacity information 
rendering phase texture map applied stack parallel planes effectively cut texture slices 
slices composited form image original data set 
describes theory implementation technique 
keywords computer graphics scientific visualization texture mapping direct volume rendering 
overview rendering speed major problem direct volume rendering regions volume may contribute image new orientations generally require considerable re computation 
spectrum methods offering different combinations rendering speed versus image quality sab uk lev kru lev mhc wes lh lev 
methods hardware assisted gouraud shading capabilities speed rendering calculating projections volume regions treating polygons st lh wil 
new method takes advantage sophisticated capability new graphics computers hardware assisted texture mapping 
method significantly faster hardware assisted gouraud shading method call coherent projection easier implement producing images comparable better quality 
main limitations restriction rectilinear volumes small size texture maps allowed hardware 
limitation may inherent method dealt described 
mentions possibility texture map volume rendering report design silicon graphics reality engine ake 
independently papers written describing texture mapping hardware direct volume rendering 
neumann sketch approaches call object space image space apply ct data cn 
guan discuss hardware issues gl 
cam foran describe texture mapping hardware accelerate numerical radon transforms ccf 
methods described require substantial programming hand compute transformations clipping details omitted 
describes programming eliminated graphics library procedures perform texture space transformations set clipping planes 
new method convert data volume texture map time pass transfer function maps scalar data values appropriate color red green blue opacity 
color opacity modified account depth integration account desired number planar slices stored texture map 
texture map applied parallel planes slices texture 
plane rendered square texture coordinates need specified corners 
texture mapping polygon vertex point texture space graphics system maps values texture map polygon surface interpolating texture coordinates 
similar gouraud shading texture coordinates interpolated colors 
crucial difference texture coordinates outside range interpolated colors clamped 
corners squares range texture coordinates interpolation creates range values precisely pixel volume 
squares parallel projection plane screen space texture map oriented user desires 
squares thinner spacing point give better image quality fewer give greater speed 
major advantage method original data converted texture map reality engine specialized texture hardware perform slice rendering compositing quickly 
example shown table rendering times faster coherent projection considered fast method 
conversion texture map need done volume rendered arbitrarily scaled translated rotated 
resulting images definition clarity comparable rendering methods 
graphics workstations offer texture mapping hardware believe common providing quick simple direct volume rendering method rectilinear data 
detailed description method major steps method create texture map second render slices 
creating texture map interpret plane rendered center slice thickness data slice bread 
means plane contribute color intensity opacity due slice 
thickness slice delta just total distance covered stack planes divided number planes 
knowing delta color emission unit distance opacity unit distance assigned data point transfer function compute color opacity go texture map 
detailed explanation computation see briefly formulas ff ln gamma gamma gammaff delta ff delta gamma gammaff delta components red green blue 
note defined ff approaches power series expansion 
equation expresses integration color opacity thickness slice 
resulting color intensities real numbers range black full color 
floating point values converted integers appropriate range storage texture map 
voxel data assigned color opacity twelve bit texture map entry called texel generated stored 
process needs repeated transfer function changed number slices changed need repeated different viewing transformations rotation scaling 
rounding errors creating texture map possible encounter significant rounding error problems bit twelve bit texture map 
rendering bit texture map twice fast twelve bit map memory requirement half problem occurs certain conditions 
consequently desirable bit map 
example color contribution plane small rounding error appear zero 
seen blank areas final image number slices large color contributions single pixels plane rounded zero 
texture map bits color channel rounding errors half 
case rounding error may detrimental slices 
problem exacerbated data set question largely homogeneous region constant value pixels rounded direction error accumulates 
non homogeneous data rounding errors tend cancel 
problem negligible hardware texture maps size available texture map bits channel simply reducing magnitude errors 
twelve bit textures supported reality engine rounding error half 
quite sufficient acceptable texture map distributing data slices 
accurate final image rarely requires slices theta times maximum resolution volume 
slices volume original orientation left rotated right 
viewer line sight orthogonal slices 
orientations texture coordinates assigned corners square slices way interpolate range exactly volume 
rounding errors storage texture concerned errors accumulate blending compositing stage rendering noticed 
rendering slices texture created render volume applying texture parallel planes represented squares screen space build stack slices texture sliced bread see 
squares drawn back front 
orientation squares remain fixed screen space parallel projection plane normals viewer 
squares viewed separation line sight delta color opacity obtained texture map correct 
color opacity nonlinear functions delta impossible adjust discrepancy 
texture coordinates original orientation consider world space coordinate frame center volume origin 
texture coordinates proxies spatial 
essentially construct bounding cube centered origin large contain rotation volume 
side bounding cube needs length diagonal volume shall denote squares rendered see comprise series slices bounding cube parallel cube xy faces 
suppose volume resolution spacing deltax deltay deltaz 
view set voxels volume sides lengths deltax deltay deltaz 
initial orientation want texture coordinates point gamman deltax gamman deltay gamman deltaz 
similarly want texture coordinates deltax gamman deltay gamman deltaz corners volume 
corners bounding cube follows want assign texture coordinates corners follows ffl texture coordinate lower corners gammad gamma deltax ffl texture coordinate upper corners deltax see illustration geometry 
ffl pattern followed texture coordinate deltay distinguishing lower upper 
ffl pattern followed texture coordinate deltaz distinguishing lower upper 
choose texture map resolution done existing system essentially requires texture map resolutions powers 
powers great respectively define deltax deltay deltaz require upper face volume texture coordinate 
upper upper faces similarly modified required equation deltax deltax function evaluates respectively corners embedded volume located sigma deltax 
equations similar replacing respectively 
represent required transformation combination scales translation 
matrix denote uniform scale matrix denote nonuniform scale reason scales evident matrix denote translation 
gamma texture map resolution 
texture coordinates corners bounding cube squares slice cube easily interpolation coordinates affected 
example assume volume resolution spacing deltax deltay deltaz 
diagonal 

get gammad gamma gammad gamma gammad gamma lx geometry texture coordinates 
illustrates orthographic projection volume size geometry squares contain texture mapped image volume 
sides labeled long diagonal volume length arbitrary viewing angles description section volume correctly rendered viewed original orientation 
observe ordinary textures 
view volume arbitrary angle requires texture map correctly calculate intersection rendered squares volume 
render volume rotated viewpoint keep bounding cube stationary screen space rotate texture space coordinates corners squares slice bounding cube see right half 
done program code standard matrix multiplication techniques 
alternatively texture matrix part graphics system 
matrix just viewing matrix transforms texture coordinates 
way programmer gives texture coordinates geometry vertices matter orientation texture matrix rotation 
method cpu overhead small 
required texture space transformation obtained simply inserting inverse client rotation matrix transformation equation follows gamma gamma gamma gamma fact uniform scaling commutes rotation 
evaluating corners bounding cube sigma sigma sigma accomplished applying texture space transformation gamma sigma sigma sigma 
graphics library calls texture mode translate nonuniform scale defined equation negated reversed order rotation calls specified client 
mapping world space texture space linear rotation linear 
trilinear interpolation done hardware case linear functions commutes rotation 
image volume deformed 
care taken regards order scaling rotation operations performed texture coordinates 
volume delta dimension equations result non uniform scaling texture coordinates stretched dimension 
situation performing rotation scaling wrong order leads shearing distortion 
transforming texture coordinates correct order operations rotation scaling 
counter intuitive way object translate rotate geometry square scale data resolution data deltas data side lengths texture map resolution data diagonal rotate scale translate data texture map texture map resulting image data texture coordinates interpolation 
scaling 
coordinates rotation 
coordinates coordinates get texture map 
example texture coordinate transformations 
coordinates specified corners geometry square series matrix transformations mapped texture map 
transformations usually done trick transforming points sample texture map texture map 
example example works texture matrix calculation show pre matrix texture coordinates corner data rectangle get transformed correct final texture coordinates 
see 
assume data resolution spacing deltax deltay 
diagonal texture map resolution 
assume viewer rotated volume theta gamma ffi 
case multiple rotations viewer order reversed 
parameters texture matrices rotate gamma theta ffi scale translate choose pre matrix texture coordinates corners planes gamma gamma explained connection equation 
example interpolated raw texture coordinates lower right corner rotated data set gamma 
transformed hardware texture matrices follows original coordinates gamma rotation gamma scaling gamma translation agrees corresponding texel texture map coordinates planar regions outside data volume complexity deal rendering regions planes lie outside volume 
recall planes remain parallel projection plane image volume rotates 
solution chose uses clipping planes 
texture rendered volume lines world coordinates position programmable world space clipping planes available silicon graphics line graphics systems geometrically clip parts squares lie outside volume 
case involves small 
orient geometry planes parallel projection plane perform inverse current world rotation drawing 
clip planes whichever transformation matrix active defined need define clip planes inverse rotation 
way clip planes defined world space line rendered image volume properly clip away parts geometry planes lie outside volume 
clipping planes related advantages 
rendering speed increases times texture coordinates calculated invalid pixels 
expected speedup technique 
speedup varies data sets different sizes take advantage clipping 
example thin column shaped volume clip cube shaped 
second advantage region enclosed clipping planes may shrunk desired subregion volume rendered 
solution clip planes volume send resulting polygons graphics system rendering 
clipping planes efficient easy implement chose 
picking number planes default number planes chosen viewed straight data point sampled plane 
world space distance covered plane equals length diagonal volume default number planes deltaz 
example volume deltaz get planes 
rendered images look better planes 
planes relative resolution data set sample points may contribute final image 
planes artifacts noticeable clipped edge rendered square visible 
clipping planes rotated world space screen space rotation applied texture coordinates 
transition inside clipping region color contributed image outside plane abrupt edge shows 
problems avoided increasing number slices 
data method slices bits interpolation setup rendering cp total trilinear sec sec sec point sec sec sec point sec sec sec point sec sec sec point sec sec sec cp na sec sec table times volume rendering options 
times elapsed seconds mhz reality engine rendered images pixels double buffered 
neighborhood planes allows fairly smooth realtime animation textures sized images covering theta pixels 
obtained rendering speeds frames second 
having planes course slows rendering 
hardware texture map issues reality engine set sample texture map nearest neighbor method socalled point interpolation trilinear interpolation 
trilinear method slower point interpolation gives smoother appearing images 
final hardware consideration texture memory limited 
machine allows maximum size texture map megabytes 
permits texture map channels bit texels 
larger volumes rendered subdividing appropriately sized subvolumes method back front order 
speed overhead incurred tenth second texture map copy texture regular memory texture memory 
experimental results compared texture mapped direct volume rendering program different compared coherent projection direct volume rendering relatively fast direct volume rendering method rectilinear volumes 
user settings include number slices alternatively set specifying desired distance planes bit bit texture maps point trilinear interpolation 
table shows results data set seen table trilinear interpolation slower point interpolation bit textures twice fast bit textures decreasing number slices half doubles rendering speed 
compared coherent projection volume textured methods examined fast 
equation approximating time render planes seconds booleans indicating bit textures bit trilinear interpolation nearest neighbor 
high potential iron protein louis david case clinic la jolla california 
best quality image created table slices sample twice data point bit textures trilinear interpolation 
texture map created loaded rendering times faster coherent projection 
guaranteeing slice sample point encountered line sight gives approximately times speed coherent projection faster bit textures point interpolation 
image quality shows minimal deterioration 
texture map recreated change transfer function mapping data colors desire faster better quality images method times faster regenerating coherent projection 
discussion volume texturing fast simple method direct volume rendering rectilinear volumes available appropriate hardware 
images quality 
implementation presently uses orthogonal perspective projection stereo viewing added easily 
funds support study allocated cooperative agreement nasa ames research center moffett field california interchange 
nca national science foundation number asc number cda 
ake kurt 
graphics 
computer graphics acm siggraph proceedings august 
ccf brian nancy cam jim foran 
accelerated volume rendering tomographic reconstruction texture mapping hardware 

submitted publication 
cn newman 
accelerating volume reconstruction texture hardware 
technical report tr university north carolina chapel hill 
robert carpenter pat hanrahan 
volume rendering 
computer graphics july 
gl guan 
innovative volume rendering texture mapping 
spie medical imaging images captures formatting display 
spie 
kru wolfgang krueger 
volume rendering data feature enhancement 
computer graphics proceedings san diego workshop volume visualization 
lev marc levoy 
display surfaces volume data 
ieee computer graphics applications march 
lev marc levoy 
efficient ray tracing volume data 
acm transactions graphics july 
lev marc levoy 
volume rendering fourier projection slice theorem 
proceedings graphics interface vancouver 
stanford university technical report 
lh david pat hanrahan 
hierarchical splatting progressive refinement algorithm volume rendering 
computer graphics acm siggraph proceedings july 
mhc nelson max pat hanrahan roger 
area volume coherence efficient visualization scalar functions 
computer graphics acm workshop volume visualization december 
sab paolo 
rendering algorithm visualizing scalar fields 
computer graphics july 
st peter shirley allan 
polygonal approximation direct scalar volume rendering 
computer graphics december 
uk craig upson michael keeler 
buffer visible volume rendering 
computer graphics july 
allen van gelder jane wilhelms 
rapid exploration curvilinear grids direct volume rendering 
visualization conference san jose ca october 
ieee 
extended university california technical report ucsc crl 
wes lee 
footprint evaluation volume rendering 
computer graphics august 
wil peter williams 
interactive splatting volumes 
visualization pages 
ieee october 
jane wilhelms allen van gelder 
coherent projection approach direct volume rendering 
computer graphics proceedings acm siggraph 
