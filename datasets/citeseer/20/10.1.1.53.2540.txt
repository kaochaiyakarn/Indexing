spaces wave lehman stephen peter wyckoff ibm almaden research center university oregon bellcore toby almaden ibm com stephen cs uoregon edu wyckoff bellcore com millions small heterogeneous computers poised spread infrastructure society 
today disguised pim personal information management computers tiny processors eventually aspects life 
thing holding back portal new electronic society access point infinite store information lack high quality logical link world network backbone 
enter spaces network middleware package new age ubiquitous computing 
spaces tuplespace network communication buffer database capabilities enables communication applications devices network heterogeneous computers operating systems 
spaces possible connect computers leads way infinitely large cluster cooperating machines 
describe spaces package explore distributed applications spaces 
landscape computing shifting rapidly 
supercomputers replaced networks personal computers desktop pcs replaced palmtop computers soon replaced turn embedded wearable truly ubiquitous computers 
dramatic rapid miniaturization processors left software industry position number different architectures applications multiplies need inter operability systems paramount 
urgently needed high quality logical link desktop palmtop tera flop computer 
spaces project ibm almaden research center created address exactly need 
spaces 
spaces combination database tuplespace mobile computing java tm readers familiar terms possibly tuplespace 
tuplespace popularized parallel programming linda project yale university back acg gel cg 
tuplespace globally shared associatively addressed memory space 
central concept linda tuplespace simple agents communicate agents writing reading consuming tuples tuple ordered set typed values universally visible tuplespace 
tuplespace model attractive replaces synchronous point point communication asynchronous anonymous associatively addressed messaging messages kept persistent message store 
tuplespace robust reliable mechanism parallel distributed applications 
communication asynchronous anonymous variable number agents task 
message addressing associative dynamic set message receivers register interest participate 
direct addressing scheme multi cast truly dynamic set message receivers hard manage 
new world network connected embedded computer devices wireless way pdas personal digital assistants smart cell phones automobile pcs perfect setting tuplespace communication model 
just tuplespace needed create complete network middleware package 
connect devices common language platform run 
disparity hardware platforms language compilers create formidable barrier creating network middleware 
information flow freely devices network computers mainframes significant cache information managed middleware implies amount database function needed 
network middleware package fits upcoming requirements newly connected world uses tuplespace communication model ubiquitous programming language database support 
describes spaces middleware component represents core ubiquitous computing project ibm almaden research center 
spaces combines database tuplespace java tm technology create powerful new computing paradigm general platform independent repository connects heterogeneous systems common computing platform 
combination features represents new interface model database system time generation tuplespace systems 
structure follows 
section discusses previous tuplespace systems showing evolved original global communication systems spaces 
variations tuplespace systems impact computing discuss spaces different rest 
section presents overview function spaces 
note discuss internal implementation spaces covered detail spaces architecture 
section shows applications built top spaces network mobile computing applications cluster web crawlers 
section concludes 
related today tuplespace systems roots artificial intelligence blackboard systems created 
notion expert agents participate group computation blackboard systems demonstrated usefulness global communication buffer collaborative computing 
linda tuplespace systems follow projects took narrower view global communication buffer exclusively high speed messaging parallel processes large high performance computations 
projects explored various combinations linda database systems linda java tm linda distributed systems 
tuplespace brief description tuplespace globally shared associatively addressed memory space 
basic element tuplespace system tuple simply vector typed values fields 
tuples associatively addressed matching tuples 
tuplespace simply unstructured collection tuples 
tuple created process placed space primitive perspective client tuple pushed 
tuples read removed read primitives take tuple template return matching tuple 
note space unstructured choice multiple matching tuples arbitrary implementation dependent 
tuplespace implementations provide blocking non blocking versions tuple retrieval primitives 
blocking read example waits matching tuple tuplespace non blocking version return tuple value matching tuple immediately available 
simple tuplespace colors tuplespace single field tuples illustrate tuplespace operations 
client issued read command color type blue 
tuple value copy tuple returned blocking nonblocking read 
second case client issued blocking command color type white 
colors type client blocked command waiting color type added tuplespace 
third case client issued nonblocking read command color type black 
non blocking case colors type black null value equivalent tuple value returned immediately 
return null blocked return blue client client client red orange yellow green blue indigo violet color space example 
tuplespace provides simple powerful mechanism inter process communication synchronization crux parallel distributed programming 
process data share generates tuple places tuplespace 
process requiring data simply requests tuple space 
quite efficient message passing systems tuplespace programs typically easier write maintain number reasons ffl destination uncoupling fully anonymous communication message passing systems partially anonymous necessary receiver message identify sender sender specify receiver 
creator tuple requires knowledge tuple destination 
ffl space uncoupling tuples retrieved associative addressing scheme multiple disjoint processes access tuples way 
ffl time uncoupling tuples lifespan independent processes generated processes may read 
enables time disjoint processes communicate seamlessly 
tuplespace extends message passing systems simple data repository features associative addressing 
conceptually ranks pure message passing system terms function far relational database systems implementations include transactions persistence significant form query facility 
blackboard systems idea globally accessible data space communication multiple independent processes dates back blackboard systems artificial intelligence research early 
blackboard systems idea global slate blackboard experts various backgrounds collaborate solve difficult problems 
famous systems hearsay ii system developed carnegie mellon university 
system structured group diverse independent agents called knowledge sources communicate blackboard global database 
knowledge sources search blackboard problem descriptions matching domains expertise write solutions problems calculated back blackboard 
blackboard serves purposes representing intermediate states problem solving activity communicating hypotheses solutions knowledge sources 
blackboard architecture widely recognized interesting flexible approach problem integrating diverse independent agents cooperative system 
early general purpose blackboard systems available project approach designed adhoc solution 
general idea collaborative space useful constructive global communication buffer didn catch general distributed programming tool 
original tuplespace mentioned literature name tuplespace originated system developed suny stony brook late early 
system stony brook microcomputer network parallel computer composed set processors torus shaped communication grid 
order support distributed computations network scheme devised communicate global state system node 
supported operations read write node find update information network state 
systems programming language called linda designed consisting communication primitives 
essentially wrappers read write respectively operations provided network system 
linda contained novel parallel language constructs evolved study symmetric programming languages discussed 
linda evolved non destructive read primitive added see concept associative addressing structured name introduced 
term tuplespace replaced global buffer literature gelernter begun porting linda different architectures 
year linda evolved set communication primitives linda appeared literature see 
despite changes implementation tuplespace remained essentially unchanged time 
tuplespace projects years tuplespace research restricted parallel programming community 
tuplespace systems available form commercial products freely available research projects 
famous tuplespace project linda scientific computing associates marketed large financial enterprises simple solution parallel computing needs 
tuplespace systems created parallel computer 
describe previous simply list linda university york linda implementations javelin piranha linder 
time tuplespace expanded pure parallel applications diverse area distributed computing 
number projects including laura javaspaces jada part pagespace showed decoupling clients servers easily accomplished tuplespace 
tuplespace implementations common opportunity enhance matching process obvious 
object space objective linda added basic ideas object orientation standard linda model 
time researchers investigated combinations tuplespace database systems 
similarities tuplespace databases long recognized surprisingly projects explored connections subjects 
persistent linda plinda project add database functionality including transactions simple query join engine linda 
perl linda extend linda database operations se combine linda primitives perl scripting language creating system web developers need simple data repository 
period linda target fault tolerant systems ft linda mom persistent linda plinda 
discussion tuplespace hot research area interest 
rise fall popularity strongly correlated rise fall research parallel processing parallel hardware particular 
linda model parallel processing simple reasonably efficient applications amount communication lower amount computation basic area done thoroughly yale commercial interest systems 
fault tolerance projects linda testbed parallel distributed ideas attempt improve add functionality linda model 
linda communication mechanism model distributed parallel research flexibility simplicity 
late systems building distributed applications cropped 
linda starting point systems provides communication synchronization simple data repository framework 
systems attract interest 
provided heterogeneity portability inter operability able provide solution addressed issues 
tuplespace received renewed interest 
result platform independence ubiquity java tm explosion distributed applications world wide web 
linda attractive systems easy implement provides tools needed build simple distributed applications 
web linda systems targeted distributed applications done parallel systems 
advent java tm growth world wide connectivity enabled distributed applications brake systems cars super computers inter operate 
thousands different types devices varying communication needs challenge provide flexible communication substrate 
believe tuplespace system augmented java tm database technology go long way meeting challenge 
spaces spaces marriage tuplespace database implemented java tm tuplespace component provides flexible communication model 
database component adds stability durability advanced query capabilities extensive data storage capacity 
java tm gives instant portability 
java ability download new classes fly creates flexibility spaces ability perform new functions handle new types 
tuplespace function overview sense main function spaces message processing 
follows client view spaces message center message database 
message database clients create delete tuple spaces house related families tuples messages 
security reasons clients expected log system user password 
access permissions user depend groups user associated 
group specific set permissions define operators group call particular space space access control list 
special spaces spaces server users general purpose access galaxy space space spaces administration space users groups passwords permissions kept 
spaces accessible specific commands create space delete space define user define password 
deciding space put tuples having user password system user needs know call spaces operators described space 
addition standard set operators spaces provides ability user define new operators dynamically administrators space allowed 
features spaces added user convenience 
file support works follows 
user large data object inconvenient read load tuple single value spaces allows user simply file url universal resource locator tuple 
spaces client server code cooperate move file transparently user 
feature transaction support 
users don need times important group set spaces actions logical operation entirely succeeds commits leaves residual trace aborts 
tuplespace operators basic spaces operators superset standard linda primitives 
read write take provided set oriented operators scan novel rendezvous operator 
write stores tuple argument space 
take read tuple template argument matched tuples space 
spaces matching algorithms described 
take removes returns matching tuple space read returns copy matched tuple leaving space unchanged 
match take read return java tm type null leave space unchanged 
blocking versions provided match block matching tuple written process 
linda programmers recognize semantics primitives inp rdp rd respectively 
scan analogous read take return set matching tuples space 
takes tuples exchanges matching tuples provided process call 
addition expanded set built operators spaces allows new operators defined dynamically 
enables programmers enhance power spaces runtime providing greater degree flexibility expressiveness previously achieved tuplespace implementation 
spaces terminology implementation operator handler 
spaces provides add handler operator allows user stretch limits spaces functionality 
spaces matching algorithms enhanced versions original tuplespace algorithm 
standard case template simply tuple formal fields 
formal field type associated value 
tuple matches template conditions hold 
tuple template number fields 
tuple fields instance type corresponding field template 
non formal field template value field matches value corresponding tuple field 
condition simply extends linda notion exact type equivalence object oriented notion subtype equivalence 
enhancements basic algorithm interesting query named fields 
differentiating features spaces builds index named field tuple 
enables clients request tuples solely values fields name regardless structure rest tuple position named field tuple 
example index query form foo 
select tuples format containing field named foo 
integer value 
possible specify range values index 
detailed examples tuplespace enhancements including description spaces event mechanism spaces architecture 
database dependability spaces employs real data management layer functions similar heavy weight relational database systems manage data 
space operations performed transactional context ensures integrity data 
operations transaction recorded log stable storage transaction commits 
event server failure log replay operations committed transactions 
mentioned previous section data manager indexes tagged data highly efficient retrieval 
expanded query capability provides applications tools probe data detailed queries maintaining simple easy interface 
combination tuplespace database technology implemented java tm results system addresses communication data management needs wide variety computing devices 
power flexibility positions spaces solution generation 
spaces distributed applications early stages spaces project validated design building distributed applications 
multi user whiteboard application multi user chat room application distributed cut paste buffer application 
applications useful easy write demonstrate power spaces programming model really stress system way show spaces features 
result clear needed build ambitious applications stretch spaces system demonstrate real capabilities 
main efforts undertaken build substantial infrastructure top spaces 
effort performed sibling group ibm almaden research center grand central station gcs project 
gcs group spaces types communication duties client data delivery workstation coordinator collaborative web crawling 
second effort performed spaces team 
spaces build infrastructure universal connection lightweight mobile computers heavyweight network computing services 
spaces grand central station gcs team spaces different parts system 
spaces coordination mechanism team collaborating web crawlers intelligently crawl digital universe 
second spaces delivery mechanism took answer data search engine pushed various types information clients 
provides visual overview design 
pager client cell phone client pda client pc workstation auto pc spaces gcs search engine crawler crawler crawler architecture gcs 
collaborative web crawling highlevel design collaborative web crawling system uses multiple crawlers 
crawlers designed collaborate exploring web space generating summaries storing summaries 
order achieve maximum efficiency coordinated load balanced overhead minimized 
coordination achieved partitioning web space url space sub spaces assigning subspace processor 
processor responsible building summaries urls contained assigned sub space 
construction summary new urls may discovered crawler 
event process keep processing urls belonging sub space including new urls appropriate route urls proper processors 
implement spaces communication processors 
types information needed communication foreign urls processor needs send url crossing hyperlink processor assigned coordination signals re map load re balance system tspaces store url lists 
shows high level description current architecture 
information delivery shown gcs support variety clients spaces provide delivery mechanism diverse set devices fixed desktop tuplespace urls urls dynamic load balancing coordination architecture 
machines smart mobile phones 
devices different characteristics speed frequency connect capacity 
spaces flexible meet requirements 
example desktop machine typically available times notified event data available 
case spaces operates buffer 
hand pda mobile phone may connect infrequently spaces perform different duties 
manage data holding client possibly discarding data exceeds user allocated space 
second link mobile device spaces slower user may want selectively retrieve data query download entire set 
spaces able randomly select deliver database system answer sets 
universal information appliance initial experiences gcs information delivery clients brought forth useful experiences 
example hadn initially considered clients wouldn consume entire answer set 
resulted support gracefully expiring data spaces engine wasn selected grew stale 
lessons learned decided pursue ambitious project involving general application support mobile clients 
simply deliver data direction search engine client gcs case universal information appliance uia true way wireless connected pda 
spaces network glue uia issues queries commands entities electronic universe receives data applications executed commands entities 
model extremely powerful 
connected spaces connected device empowered contact device service entire electronic universe 
architecture details system available journal article 
cluster computing discussion berkeley project example today cluster computing set machines connected high speed switched network 
achievements fastest web search engine fastest disk disk sort impressive years ago mainframes ruled computing scene 
imagined collection desktop machines beating mainframe 
predict similarly imaginable scenario involve palmtop embedded computers 
hooked high speed wireless links plethora tiny processors perform equally computation doubt applications 
spaces created space connect devices devices especially new set smaller devices 
shown spaces today workstation oriented setting 
experience collaborative crawling gcs shows spaces operate high speed communication buffer database storing tens thousands urls 
step just happen embedded devices evolve 
just today pcs powerful yesterday mainframes tomorrow embedded devices powerful today pcs 
cluster computing connection coordination thousands millions heterogeneous devices ranging mainframes pcs embedded computers 
global communication buffer concept long career overly prominent 
far blackboard systems tuplespace systems existed relative obscurity features brought computing community useful 
experience building large system small applications spaces shown powerful model needs brought mainstream 
reason stayed quiet availability 
implementations university projects written 
result finished systems deployed real world portable platforms 
real power system spaces having access virtually computer microchip clothing way mainframe running corporate federal database 
classical tuplespace system 
experience shown tuplespace excellent communication model needs data repository advanced query capability 
direction taken spaces 
spaces natural fit distributed world 
provide underlying network glue ties computing devices big small 
improve network connectivity current environments getting isolated macintosh printer windows client real benefit come connect mobile embedded devices making class network computers full access network resources 
ahuja nicholas carriero david gelernter linda friends computer pp august 
brian anderson dennis shasha persistent linda linda transactions query processing workshop research directions high level parallel programming languages mont france june 
published springerverlag lecture notes computer science 
blackboard technology group www com david bakken richard schlichting supporting fault tolerant parallel programming linda ieee transactions parallel distributed systems pp 
march 
arthur bernstein david gelernter storing retrieving network state survey proposal suny stony brook technical report october 
cannon dunn adding fault tolerant transaction processing linda journal software practice experience 
nicholas carriero eric freeman david gelernter david kaminsky adaptive parallelism piranha computer pp 
january 
nicholas carriero david gelernter linda context communications acm vol 
april 
ciancarini tolksdorf pagespace architecture coordinate distributed applications web computer networks isdn systems volume number may 
ciancarini tolksdorf pagespace architecture coordinate distributed applications web cs 
de www www overview html daniel corkill blackboard systems ai expert vol 
pp september 
douglas wood rowstron linda implementation revisited transputer occam developments pp 
ios press 
erman hayes lesser reddy hearsay ii speech understanding system integrating knowledge resolve uncertainty acm computing surveys vol 
june 
kevin lehman armando morales universal information appliance ibm systems journal 
daniel ford qi lu lehman matthias peter lazarus john thomas grand central station information ibm research technical report 
www com david gelernter integrated microprocessor network experiments distributed programming suny stony brook technical report may 
david gelernter arthur bernstein distributed communication global buffer proceedings acm symposium principles distributed computing pp 
august 
david gelernter generative communication linda acm toplas vol 
january 
david gelernter nicholas carriero coordination languages significance communications acm vol 
february 
nicol orchestration service www browsers accessories nd int 
world wide web conference 
www cs unibo rossi jada jensen linda distributed programming paradigm master thesis department mathematics computer science university aalborg denmark june 
jeong shasha wyckoff approach fault tolerant parallel processing intermittently idle heterogeneous workstations proceedings seventh international symposium fault tolerant computing ftcs pp 
ieee june 
object oriented distributed programming objective linda proceeding international workshop high speed networks open distributed platforms june 
cs berkeley edu flp cs tu berlin de andreas object space distributed parallel th ieee workshop trends distributed computing systems pp 
lisbon september 
www meets linda linda global www transaction processing systems world wide web journal 
robert tolksdorf laura coordination language open distributed systems th ieee international conference distributed computing systems icdcs pp 
antony rowstron alan wood efficient distributed tuple space implementation networks workstations euro par 
sun microsystems specification 
java sun com products javaspaces shang hua teng qi lu matthias daniel ford toby lehman collaborative web crawling information gathering processing internet hawaii international conference systems sciences 
peter wyckoff stephen lehman 
history tuplespace systems ibm research technical report 
peter wyckoff stephen lehman daniel ford spaces ibm systems journal august 
pp 
