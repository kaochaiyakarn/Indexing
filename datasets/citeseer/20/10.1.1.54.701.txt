situation state calculus versus branching temporal logic jaime ramos am sernadas department mathematics ist lisbon portugal 
situation calculus sc formalism reasoning action 
sc notion state situation usually characterized set fluents hold situation 
concept insufficient system specification 
overcome limitation extension sc proposed situation state calculus ssc concept state primitive just actions situations fluents 
ssc compared branching temporal logic btl 
representation btl ssc defined shown establish sound complete encoding 
situation calculus sc specialization sorted order logic equality 
proposed formalism specifying dynamic systems 
years refinements extensions proposed allow sc cope problems temporal reasoning concurrency actions duration inter alia 
main concepts sc situations actions fluents 
situation represents state system specifying 
system changes situation action performed 
properties system characterized fluents may may hold situation 
basic sorts language sit situations act actions flt fluents sorts depending system specifying 
constant symbol sort sit denoting initial situation 
function symbol actions situations situations 
predicate symbols holds poss 
predicate symbol holds relate fluents situations define fluent true false situation 
predicate symbol poss relates actions situations defines action enabled situation 
may write sentences poss drop holds drop poss drop holds colleagues aspire project alberto cristina sernadas javier pinto valuable comments suggestions stages 
partially supported praxis xxi program fct praxis xxi projects mat mat acl plus tit esprit iv working groups aspire fireworks 
previous sentences drop action symbol parameter fluent symbols parameter 
term drop sort situation denotes situation resulting doing action drop situation sentence understood possible drop object dropping floor 
sentence regarded meaning object may dropped held 
situation calculus axiomatized style similar peano foundational axioms number theory 
initial situation plays role number 
single successor function family successor functions action term binary relation situations oe oe stands obtained sequence possible actions 
axioms called foundational axioms 
oe oe poss 

stands oe axioms establish order situations tree structure rooted detailed discussion see 
axiomatization proposed main goal find monotonic solution problems frame problem ramification problem intention study problems 
going axiomatization different purpose 
interesting observe interpret oe system reached recognize temporal component situations 
fact compare sc linear temporal logic 
propose comparison sc branching temporal logic 
axiomatization bears price 
section discuss problems arise axiomatization sc 
section propose solution overcome problems situation state calculus ssc 
section ssc compared branching temporal logic btl 
comparison achieved map underlying logical structures see appendix definition logical structure map 
order define map extend ssc ability refer lines branching structure situations 
completeness result comparison 
situation state calculus section discuss problem arises consider sc axiomatized foundational axioms 
propose solution overcome problem extending sc new concept state 
call extension situation state calculus ssc 
preliminary version ssc 
usual define state system situation set fluents hold situation 
situations state set fluents hold situations holds adopt notion state face major problem non determinacy actions 
consider instance stack natural numbers fluent top sort nat action push parameter sort nat action pop parameters 
term sort situation push push 
clearly situations state fluent holds top top 
consider situations push push 
case state top term sort fluent holds situations 
consider situations pop pop 
stack behaves expected 
means situations state performed action pop situations got situations state 
furthermore unable specify stack auxiliary fluents 
instance unable express push pop back state 
attempt write pop push formula clearly contradicts foundational axioms 
obviously drop foundational axioms making legal sentence 
said want situations temporal flavor 
solution introduce concept state language situations actions fluents 
syntax define syntax ssc specialization syntax 
start defining set basic sorts bs composed sorts sit situations act actions flt fluents stt states 
sorts data types 
definition 
ssc signature signature sigma hg xi bs ii ffl sit fs act sit sit sit stt fw sit stt contains element bs iii flt stt act stt sit sit foeg pw contains element bs iv indexed family disjoint sets 
ssc signature hg xi element fw act said action symbol parameters sort element fw flt said fluent symbol parameters sort comparison sc new function symbol 
function symbol associates state situation 
fixed action symbol nil technical reasons clear 
element said variable sort denote variables sort sit variables sort act variables sort flt variables sort stt 
note predicate symbols holds poss depend states situations 
example stack 
define signature stack natural number sigma hg xi nat ffl flt ffl act fnil pop nat act 
define signature morphisms usual way proviso preserve basic sorts 
signatures signature morphisms constitute category sig ssc subcategory sig sig ssc 
sig inclusion functor 
functor sen ssc sig ssc set defined sen ffi order logic call element sen ssc sigma sigma formula 
denote sigma set terms sort defined sigma assume ssc signature sigma derivation relation section introduce derivation relation ssc 
start presenting foundational axioms 
formula slightly changed ssc predicate symbol poss depends states situations 
definition 
set foundational axioms sigma ax sigma contains formulas 



oe 
oe poss 


sigma formula 
introduce axioms new objects language 
want ensure junk states state state situation 
want guarantee determinacy actions 
definition 
set state axioms sigma ax sigma contains formulas 


axioms characterize states equivalence classes situations state equivalence class situations properties 
properties just set fluents hold situations 
definition 
set axioms nil sigma ax sigma contains formulas poss nil nil having introduced axioms define derivation relation ssc 
signature sigma derivation relation ssc sigma defined derivation relation signature sigma adding foundational axioms axioms nil state axioms axioms deductive system 
definition 
gamma set sigma formulas 
define set derived formulas gamma follows gamma ssc sigma gamma ax sigma ax sigma ax sigma fol sigma sigma define ssc sigma sen ssc sigma theta sen ssc sigma follows gamma ssc sigma iff gamma ssc sigma notion state position write formulas stack instance 
example stack 
consider signature stack 
write sigma formulas 
reset 
pop push 
holds top push 
poss pop 
holds top holds top look equational specification stack observe similarities specifying behavior stack stack data type 
stack example consider situations 
push push pop pop 
axiom stack derive 

state axiom derive 
fluent holds states top 
semantics section introduce semantics ssc 
case define ssc interpretation structures sentences define int ssc sig ssc op cls int ffi op interpretation structures signature sigma choose ones satisfy foundational axioms sigma ax sigma state axioms sigma ax sigma axioms nil ax sigma definition 
define int ssc sigma class interpretation structures int ffi op sigma satisfies foundational axioms sigma ax sigma satisfies state axioms sigma ax sigma satisfies axioms nil sigma ax sigma signature morphism oe sigma sigma int ssc oe restriction int oe int ssc sigma 
ssc interpretation structure sigma hd denote interpretation operation symbol interpretation predicate symbol omitting explicit arity symbols 
easy check int ssc functor 
follows going need notion standard interpretation structure 
concept closely related notion standard interpretation structure number theory 
definition 
ssc interpretation structure hd called standard interpretation structure sit inductively defined follows ffl sit ffl sit provided sit act oe transitive closure sit act poss interpretation structure isomorphic standard interpretation structure called standard 
satisfaction relation derivation relation ssc signature define satisfaction relation ssc satisfaction relation 
definition 
define satisfaction relation ssc sigma int ssc sigma theta sen ssc sigma ssc sigma iff sigma logical structure previous definitions put logical structure ssc 
proposition 
tuple ssc ssc sen ssc int ssc ssc ssc logical structure 
logical structure obviously sound gamma ssc sigma gamma ssc sigma complete gamma ssc sigma gamma ssc sigma 
proof results fact ssc logical structure straightforward 
ssc versus btl section compare situation state calculus branching temporal logic btl 
comparison established map underlying logical structures 
order define map establish relation logical structures syntactical level signatures formulas semantic level interpretation structures 
closely related van benthem correspondence theory studies connections modal classical logics 
start presenting logical structure intended branching temporal logic 
extended ssc ability refer lines tree situations objects language 
define map logical structures study properties 
branching temporal logic section logical structure btl 
definitions results taken 
btl signature just set propositional symbols 
sig btl set 
btl signature set sigma formulas sigma inductively defined follows sigma provided sigma sigma provided sigma sigma provided sigma sigma provided sigma sigma provided sigma functor sen btl defined usual way signature sigma sen btl sigma sigma signature morphism oe sigma sigma sen btl oe defined sen btl oe oe sigma structural formulas 
assume usual abbreviations logic connectives temporal operators path operator exists path 
interpretation structure signature sigma tuple hht hw ri total transition system non empty set infinite paths called runs occurs path path map sigma denote th position path 
functor int btl sig btl op cls signature sigma int btl sigma class interpretation structures sigma signature morphism oe sigma sigma int btl oe int btl sigma int btl sigma defined int btl oe hht hht oe sigma satisfaction formula interpretation structure hht index path inductively defined follows btl sigma iff btl sigma iff btl sigma btl sigma iff btl sigma btl sigma btl sigma iff btl sigma btl sigma btl sigma iff btl sigma formula true btl sigma btl sigma 
axiomatization logic proposed 
going detail fact axiomatization exists denote operators represented 
adopted avoid confusion order quantifiers 
gamma btl sigma fact formula derived gamma proposed consequence relation 
define logical structure btl btl btl sen btl int btl btl btl logical structure sound weakly complete 
follows going need notation technical results 
path transition system denote suffix starting satisfying condition btl interpretation structure signature sigma consider define set fj set define btl interpretation structure fw occurs theta btl sigma iff btl sigma 
result particular case generation theorem 
branching situation state calculus btl ssc underlying branching structure 
main idea comparing logics temporal component situations time instants lines tree situations paths btl 
need able refer lines objects language 
need extend ssc ability refer lines 
call extension branching situation state calculus bssc 
step put lines language 
introduce new sort lin lines 
furthermore need able relate lines situations need able express situations occur line 
introduce new predicate symbol arguments situation line 
definition 
bssc signature ssc signature sigma hg xi lin ii sit lin iii fw pw contains lin lin 
bssc signature morphism oe ssc signature morphism oe lin lin 
bssc signatures morphisms constitute category sig bssc inclusion functor sig bssc sig ssc sig bssc 
sig ssc functor sen bssc sig bssc set defined sen ssc ffi assume sigma denotes bssc signature 
having defined language need characterize lines terms situations 
similar idea proposed compare sc linear temporal logic predicate actual defined select single line tree situations 
definition 
set line axioms sigma ax sigma contains formulas 


poss 



oe 
axiom expresses fact line passes initial situation 
second axiom expresses fact gaps line 
third fourth axioms impose point line exactly successor 
axiom expresses lines line passing reachable situation 
axioms true interpretation structure domain sort lin lin set paths tree situations fulfilling suitable closure conditions literature branching temporal logic sets paths called bundles 
shown order formula true exactly interpretation structures lin set paths 
define derivation relation bssc adding line axioms derivation relation ssc 
definition 
gamma set sigma formulas 
define set derived formulas gamma follows gamma bssc sigma gamma ax sigma ssc sigma define bssc sigma sen bssc sigma theta sen bssc sigma follows gamma bssc sigma iff gamma bssc sigma definition 
define int bssc sigma class ssc interpretation structures int ssc ffi satisfy line axioms sigma ax sigma signature morphism oe sigma sigma int bssc oe restriction int ssc oe int bssc sigma 
family satisfaction relation bssc defined ssc 
proposition 
tuple bssc bssc sen bssc int bssc bssc bssc logical structure 
follows consider standard interpretation structures int bssc sigma denotes class standard interpretation structures 
defined ssc 
map btl bssc going define map btl bssc step translate signatures 
define functor omega sig btl sig bssc translate propositional symbol fluent parameters 
definition 
define functor omega sig btl sig bssc follows sigma btl omega sigma hg xi bssc ffl flt sigma oe sigma sigma sig btl omega oe omega oe oe sigma step translate formulas 
define natural transformation ff sen btl sen bssc need define auxiliary function ff sigma signature sigma motivation function translates btl formula bssc formula line situation semantics btl formulas 
definition 
function ff sigma sen btl sigma theta omega sigma lin theta omega sigma sit sen bssc omega sigma inductively defined ff sigma holds ff sigma ff sigma ff sigma ff sigma ff sigma ff sigma oe ff sigma oe oe ff sigma ff sigma ff sigma 
having defined function define natural transformation ff 
semantics btl formula satisfied interpretation structure iff satisfied points lines 
proposition 
define natural transformation ff sen btl sen bssc ffi omega follows ff sigma ff sigma proof 
prove ff natural transformation sen btl sen bssc ffi omega sufficient show signature morphism oe sigma sigma sigma formula sigma lin sigma sit condition holds sen bssc ffi omega oe ff sigma ff sigma sen btl oe easily proven induction structure 
ut prove defining map need show ff preserves theorems 
lemma 
gamma sen btl sigma 
gamma btl sigma implies ff sigma gamma bssc sigma ff sigma 
proof 
show ff translation btl axioms bssc theorem rules preserved ff 
straightforward 
ut define natural transformation fi translating bssc interpretation structures btl interpretation structures 
signature sigma fi sigma assigns bssc interpretation structure btl interpretation structure corresponding signature 
define transition system states set reachable situations transition relation immediate transition relation induced situations 
set paths defined usual way choosing ones correspond lines 
proposition 
define natural transformation fi int bssc ffi omega op int btl follows int bssc omega sigma fi sigma fs sit oe sg act poss ae fi fi fi fi lin oe fs holds proof 
show sigma fi sigma fact btl interpretation structure sigma immediate consequence bssc interpretation structure ensures transition system total due axioms nil fact set paths satisfying condition paths due line axioms 
show fi natural transformation int bssc ffi omega op int btl show morphism oe sigma sigma bssc interpretation structure omega sigma condition holds fi sigma int bssc ffi omega op oe int btl oe fi sigma ut having established result prove second condition definition map logical structures 
prove technical results 
start introducing notation 
bssc interpretation structure fi sigma hht define relation theta lin iff lemma 
bssc interpretation structure sit act 
proof 
simple induction structure account standard interpretation structure satisfies line axiom 
ut lemma 
bssc interpretation structure fi sigma hht lin proof 
take path act results satisfying line axiom take assignment 
prove induction length ut lemma 
sigma formula bssc interpretation structure omega sigma assignment 
condition holds fi sigma btl sigma iff bssc omega sigma ff sigma proof 
prove induction structure 
just sketch proof base 
sigma fi sigma btl sigma iff iff holds iff bssc omega sigma holds iff bssc omega sigma ff sigma 
cases logical connectives immediate consequence induction hypothesis 
proof temporal operator path operator consequence induction hypothesis lemmas respectively 
ut having results prove second condition definition map logical structures 
lemma 
sen btl sigma int bssc omega sigma 
fi sigma btl sigma iff bssc omega sigma ff sigma 
proof 
follows previous lemmas 
ut proposition 
tuple omega ff fii map btl bssc proof 
lemmas prove ff fi natural transformations 
lemmas prove natural transformations satisfy conditions definition map 
ut result represent considered btl bssc 
adopt bssc semantics btl knowing consequence relation sound semantics temporal theorems proved bssc 
natural question completeness arises btl complete bssc semantics 
answer question 
need auxiliary results 
lemma 
sigma formula 
bssc omega sigma ff sigma implies btl sigma 
proof 
assume btl sigma 
btl interpretation structure sigma btl sigma btl sigma 
consider defined 
define bssc interpretation structure hd satisfying conditions act sit inductively defined follows ffl sit ffl ww sit provided sit lin stt ww poss iff holds iff oe iff iff prefix situations sequences states states just states actions pairs lines paths 
initial situation paths start state 
need generate sit order standard interpretation structure 
intuitive conclude state situation state sequence action enabled state component action exactly state 
having defined interpretation structure prove fact bssc standard interpretation structure 
satisfies foundational axioms state axioms line axioms due construction properties btl interpretation structures 
lemma 
assignment hj condition holds btl sigma iff bssc omega sigma ff sigma proof 
proof similar proof lemma 
ut fact btl sigma conclude bssc omega sigma ff sigma assignment bssc omega sigma ff sigma 
proves bssc omega sigma ff sigma 
ut result answer question btl complete bssc semantics 
equivalent showing map weakly conservative 
proposition 
map omega ff fii weakly conservative bssc omega sigma ff sigma implies btl sigma 
proof 
assume btl sigma 
btl weakly complete btl sigma 
lemma bssc omega sigma ff sigma 
soundness bssc may conclude bssc omega sigma ff sigma 
ut result may conclude btl weakly complete bssc semantics 
proof result depends existence complete axiomatization btl 
technique may temporal logics complete axiomatizations 
concluding remarks started situation calculus axiomatization proposed reiter 
main reason adopting axiomatization enriches situations temporal component 
axiomatization loose ability go back previous situation loose notion situation state earlier versions sc 
authors try solve problem defining state set fluents hold situation 
showed notion specify systems 
order solve problem proposed new extension sc situation state calculus ssc 
compared ssc branching temporal logic btl 
encoded btl extended version ssc bssc showed coding sound complete theorems btl translated bssc theorems 
furthermore proved gain extra theorems 
similar results linear temporal logic extend detail translation interpretation structures prove similar completeness result 
temporal logic considered full ctl weaker version interpretation structures transition systems distinguished set paths 
important stress considered btl ctl limitations bssc conservativeness result wanted required complete axiomatization open problem full ctl axiomatization possible define map underlying logical structures map conservative 
step temporal logics ssc import reasoning techniques tools exist temporal logic instance prove safety properties liveness properties 
furthermore want extend ssc agent ssc possible specify community interacting agents line done temporal logic 

burgess 
logic time 
journal symbolic logic 

ehrig mahr 
fundamentals algebraic specification initial semantics volume eatcs monographs theoretical computer science 
springer verlag new york 

fiadeiro sernadas 
structuring theories consequence 
sannella tarlecki editors proceedings th workshop trends data type specification volume lncs pages berlin 
springer 

gelfond lifschitz 
limitations situation calculus 
robert boyer editor automated reasoning essays honor woody bledsoe pages 
kluwer academic dordrecht 

goguen burstall 
introducing institutions 
clarke kozen editors logics programs workshop carnegie mellon university june volume lncs pages 
springer verlag new york 

lifschitz 
formal theories action 
artificial intelligence 

manna pnueli 
completing temporal picture 
theoretical computer science 

mccarthy hayes 
philosophical problems standpoint artificial intelligence 
meltzer michie editors machine intelligence pages 
edinburgh university press scotland 

meseguer 
general logics 

ebbinghaus editor proc 
logic colloquium 
north holland 

miller shanahan 
narratives situation calculus 
journal logic computation special issue actions processes 

pinto reiter 
reasoning time situation calculus 
annals mathematics artificial intelligence papers honour jack minker 

ramos 
situation state calculus 

editors proceedings second esslli student session 

reiter 
frame problem situation calculus simple solution completeness result goal regression 
lifschitz editor artificial intelligence mathematical theory computation papers honor john mccarthy pages 
academic press san diego ca 

reiter 
proving properties states situation calculus 
articial intelligence 

sernadas sernadas costa 
object specification logic 
journal logic computation 

sernadas sernadas ramos 
temporal logic approach object certification 
data knowledge engineering 

stirling 
modal temporal logics 
abramsky gabbay maibaum editors handbook logic computer science 
volume 
background computational structures pages 
oxford university press 

van benthem 
correspondence theory 
gabbay guenthner editors handbook philosophical logic volume ii extensions classical logic volume synthese library chapter ii pages 
reidel publ 
dordrecht 


branching time logic quantification branches point view modal logic 
journal symbolic logic 

reynolds 
non definability class complete bundled trees 

appear 
logical structures concept logical structure proposed called logic 
related concepts institutions institutions 
definition 
logical structure tuple sen int sig category sen sig set functor int sig op cls functor indexed family relations fj sigma int sigma theta sen sigma sigma indexed family relations sigma sen sigma theta sen sigma sigma satisfying conditions sigma ffl sigma sen sigma ffl gamma sigma provided gamma sigma gamma gamma sen sigma gamma gamma sen sigma ffl gamma sigma provided gamma sigma gamma gamma sigma sen sigma gamma gamma sen sigma morphism oe sigma sigma sig ffl gamma sigma sen oe gamma sigma sen oe sen sigma gamma sen sigma ffl sigma sen oe iff int oe sigma sen sigma int sigma 
logical structure sound gamma sigma implies gamma sigma 
logical structure complete gamma sigma implies gamma sigma 
definition 
logical structures map triple omega ff fii omega sig sig functor ff sen sen ffi omega natural transformation fi int ffi omega op int natural transformation satisfying conditions gamma sigma ff sigma gamma omega sigma ff sigma fi sigma sigma iff omega sigma ff sigma 
map logic structures said conservative iff ff sigma gamma omega sigma ff sigma implies gamma sigma article processed macro package llncs style 
