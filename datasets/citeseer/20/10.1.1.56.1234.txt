reasoning actual hypothetical occurances concurrent non deterministic actions baral michael gelfond richard watson department computer science university texas el paso el paso texas cs edu propose extension action description language express actual hypothetical situations concurrent execution actions observations truth values fluents situations opposed hypothetical values fluents expressible ac observations actual occurrences possibly non deterministic combination actions 
corresponding entailment relation formalizes various types common sense reasoning actions effects modeled previous approaches 
translation domain descriptions disjunctive logic programs 
perform nontrivial reasoning intelligent agent situated changing domain needs knowledge causal laws describe effects actions changing domain ability observe record occurrences actions truth values fluents particular moments time 
discovery methods representing kind information form allowing various types reasoning dynamic world time tolerant updates central problems knowledge representation 
efforts systematic development provably correct methods gl san lll reason actions 
viewed continuation started gl authors introduced high level action description language capable expressing causal laws describing effects actions statements values fluents possible states world 
fluents mean propositions truth values depend time 
years syntax semantics expanded allow descriptions effects concurrent non deterministic actions descriptions global constraints expressing time independent relations fluents bg kl bt bar gl bt ht mt 
collection sound complete translations domain descriptions languages disjunctive abductive equational logic programs dun dds ht tur alp 
works direct axiomatizations theories actions classical logic nonmonotonic extensions pr pin rei ls ms pro helped increase understanding underlying ontological principles reasoning actions advantages limitations general purpose non monotonic formalisms 
allowed establishment equivalence previously known theories actions seemingly different intuitions languages logics kar stimulated theory implementation logic programming languages ab tur lt lmt 
bgp baral propose language inspired called express actual situations observations truth values fluents situations opposed hypothetical values fluents expressible observations actual occurrences actions 
believe adaption significantly improves applicability action description languages various areas ai 
goal extend allow representation concurrent non deterministic actions 
formalization concurrent action language ac bg proposed language extension ac allow hypothetical statements domain descriptions statements allowed domain descriptions ac hand allows actual observations 
describe semantics proposed language defined natural extension demonstrate way examples corresponding entailment allows capture various interesting forms reasoning actions 
proposal differs extensions dealing concurrent non deterministic actions way 
best knowledge proposal allows reasoning actual occurrences concurrent actions 

representation non deterministic actions different believe natural cases literature 
translation domain descriptions disjunctive logic programs gl :10.1.1.49.9332
disjunctive logic programs important availability interpreters wat wc large class disjunctive programs 
currently working investigating applicability design architecture intelligent agents capable observing planning acting changing environment discovering efficient methods computing corresponding entailment relation 
direction research aimed combining extensions dialects noted extension mainly allow hypothetical statements domain descriptions 
syntax start description language capable expressing actual observations compound actions hypotheses 
alphabet consists disjoint nonempty sets symbols called fluents actions actual situations 
elements denoted possibly indexed letters respectively 
assume contains special situations called initial current situations 
corresponds word 
fluent literal fluent possibly preceded 
fluent literals denoted possibly indexed letters possibly preceded 
equated action mean arbitrary set unit actions 
set fa unit action identified actions form fa called compound interpreted sets actions performed concurrently start contemporaneously 
specified action mean compound action 
expression denote sequence actions 
kinds propositions causal laws facts hypotheses 
effect law expression form causes action fluent literals 
called preconditions 
read law guaranteed true execution action state world true 
write effect law causes atomic fluent fact expression form fluent literal situation 
stated situations mean actual situations 
intuitive reading observed true situation 
atomic occurrence fact expression form ff occurs ff sequence actions situation 
states sequence ff actions observed occurred situation 
assume actions sequence follow action sequence immediately 
atomic precedence fact expression form precedes situations 
states situation occurred situation propositions type express general knowledge effects actions referred laws 
propositions called atomic facts observations 
fact propositional combination atomic facts 
hypothesis expression form actions situation 
expression reads assuming sequence actions occurs starting situation fluent true resulting situation 
collection laws facts called domain description 
domain descriptions include hypotheses hypotheses inferred domain description 
sets laws facts domain description denoted respectively 
consider domain descriptions propositions contain situation constant see domain descriptions represent knowledge actions consider example example suppose series observations red water red seen alive dry time shot fired red 
suppose generally known red wet shooting red dead information represented domain description consisting propositions alive dry squirt occurs precedes shoot occurs squirt causes dry shoot causes alive complete description need define language 
simplicity assume language contains fluents actions explicitly mentioned propositions stated assumption examples 
domain descriptions conjunction informal assumptions clarify description meaning changes values fluents caused execution actions 
actions language domain description 
effects action possibly compound specified causal laws domain description inherited sub actions 
actions occur needed explain facts domain description 
actions may happen concurrently 
assumptions give intuitive understanding domain descriptions consider instance domain description example 
easy see assumption implies squirt shoot action occur assumptions conclude moment red wet dead 
goal build mathematical model help better understand eventually types arguments 
step suggest semantics domain descriptions precisely specifies sets acceptable reached descriptions assumptions 
semantics section introduce semantics domain description start defining causal models proceed explaining facts true models 
state set fluent names 
causal interpretation partial function psi sequences actions states empty sequence belongs domain psi psi prefix closed psi called initial state psi 
partial function psi serves interpretation laws ff belongs domain psi say ff possible initial state psi 
fluent state oe say holds oe true oe oe holds oe false oe oe 
truth propositional formula respect oe defined usual 
better understand role psi plays interpreting domain descriptions define models descriptions consisting entirely effect laws 
achieve goal attempt carefully define effects actions determined description informal assumptions 
fluent immediate effect executing oe effect law causes preconditions hold oe 
unit actions effects possible 
compound actions effects may determined assumption says compound actions may inherit effects sub actions 
meaning statement somewhat ambiguous needs refinement 
see problem consider instance domain description causes prefix closed mean sequence actions ff action ff ffi domain psi ff 
recall ffi denotes concatenation ff ffi means sequence actions follows ff 
fa bg causes action fa cg 
action inherit effect effect fa bg 
follow bg opt second alternative basis specificity principle says specific information overrides specific information 
leads definition definition fluent inherited effect executing oe ae immediate effect oe 
action ae immediate effect oe 
definition effect executing oe immediate effect executing oe inherited effect executing oe 
oe ff effect oeg gamma oe ff effect oeg res oe oe oe gamma oe 
definition captures meaning effect laws definition causal interpretation psi satisfies effect laws sequence ff ffi language psi ff ffi res psi ff psi ff gamma psi ff undefined 
say psi causal model satisfies effect laws example suppose general information effects actions performed mary mary tries lift bowl hand spills soup table table wet 
uses hands spill soup 
specify effects domain description consider alphabet consisting fluent name spilled unit actions lift lift effect laws lg causes spilled rg causes spilled lift rg causes spilled spilled resulting domain description denoted easy see causal model defined transition function psi psi ff ffi lg psi ff ffi rg psi ff action sequence ff psi ff ffi psi ff example consider domain description consisting propositions causes causes easy see ff psi ff ffi fa bg undefined 
fa bg psi ff gamma fa bg psi ff ffg 
example consider domain description consisting propositions fa bg causes fb cg causes easy see ff psi cg ff gg 
fa cg psi ff ff gg gamma fa bg psi ff 
interpreting observations arbitrary domain description causal interpretation psi causal model interpret observations need define meaning situation constants consider mapping sigma sequences actions language mapping called situation assignment satisfies properties 
sigma 
sigma prefix sigma 
definition interpretation pair psi sigma psi causal model sigma situation assignment sigma belongs domain psi 
sigma called actual path simplicity denoted sigma define truth facts interpretation facts true called false definition interpretation psi sigma 
true satisfied true psi sigma 
atomic fact occurs true sequence fi actions sequence sigma ffi fi prefix actual path 
precedes true sigma proper prefix sigma truth non atomic facts defined usual 
set facts true interpretation members true complete definition model need formalize underlying assumption domain descriptions actions occur needed explain facts domain description 
done imposing minimality condition situation assignments leads definitions 
definition ff fi sequences actions 
say ff fi exists subsequence fi ff definition interpretation psi sigma called model domain description conditions satisfied psi causal model facts true interpretation psi sigma satisfies previous conditions sigma sigma 
proposition shows model psi sigma domain description psi completely determined initial state 
proposition psi sigma psi sigma models domain description language psi psi psi psi corollary domain description language models psi uniquely defined psi uniquely defined 
domain description said consistent model 
definition domain description entails fact written iff true models definition domain description said define unique actual path situations explicitly mentioned precedes precedes lemma domain description defines unique actual path atomic fluent facts occur propositions form situation assignments models coincide situations explicitly mentioned sequence xm sequence subsequence exists strictly increasing sequence indices proposition shows empty set actions action behaves wait action effects fluents 
refer wait action 
example domain description precedes precedes occurs occurs fg occurs examples section illustrate way examples domain descriptions represent information notion entailment captures informal arguments information descriptions informal assumptions 
start example section 
proposition consider domain description example 
dry alive proof 
consider causal interpretation psi situation assignment sigma defined follows psi psi ff ffi squirt alive psi ff psi ff ffi shoot dry psi ff psi ff ffi sigma sigma sigma easy check interpretation psi sigma satisfies definition model show model model psi sigma psi psi sigma sigma 
definition situation assignment maps statements satisfied psi psi 
psi psi causal models causal models uniquely determined initial values psi psi establish sigma sigma notice satisfy conditions actual path sigma start compound action superset followed necessarily immediately action possibly wait 
definition sigma sigma 
model sigma satisfies minimality condition 
implies sigma sigma 
recall definition situation assignment sigma prefix 
true sigma sigma 
complete proof suffices notice dry alive true example reasoning cases consider modification example precondition loaded shoot action guns initially loaded 
alive loaded loaded shoot occurs shoot causes alive loaded shoot causes alive loaded proposition alive example explaining observations consider modified version example moment shot fired red moment red observed dead assume domain contains unit actions different squirt shoot 
resultant story represented domain description consisting propositions proposition 
alive proposition squirt shoot occurs occurs 
entails squirt occured shoot occured squirt shoot occured simultaneously consider examples modifications example 
cases assume bowl initially table lifted soup spilled 
example consider case bowl lifted sides 
domain defined follows lift causes spilled lift causes spilled lift causes lifted lift causes lifted lift rg causes spilled spilled lift rg causes lifted initially spilled initially lifted lift rg occurs proposition spilled lifted example consider example left side lifted right side lifted 
new domain represented propositions previous example new propositions 
precedes lift occurs lift occurs proposition spilled lifted example consider case aren told actions occured moment observe bowl lifted soup spilled 
new domain represented propositions new propositions 
lifted spilled proposition lift rg occurs hypothetical reasoning domain descriptions express types knowledge reasoning easily expressible variants lack ability hypothetical reasoning 
hypothetical reasoning allow hypothesis form query language note definitions query language strictly stronger ac means specifying domain descriptions powerful 
convenience introduce additional notation current situation simply write write currently notions model domain description truth atomic facts models remain unchanged 
define answers queries need definition domain description psi sigma interpretation say hypothesis true interpretation true psi sigma ffi 
definition domain description hypothesis say iff true models truth arbitrary queries sets queries defined usual 
reasoner knowledge formulated domain description hypothetical queries various purposes 
believe important planning 
suppose reasoning agent domain description collection fluent literals viewed goal achieved performing actions hypothetical statements entailment define notion plan definition domain description set fluent literals 
sequence ff actions plan achieving goal ff fluent literal planning program able generate sequences actions viewed possible plans test entailment relation consider instance example 
example consider variant domain description alive loaded loaded shoot causes alive loaded shoot causes alive loaded goal reasoner come candidate plan shoot achieving goal 
candidate plan tested proving hypothetical statement alive shoot checking alive shoot 
easy check statement true shoot plan notice resulting domain description obtained adding shoot occurs entails case entailment relation allows modeling sophisticated forms hypothetical reasoning 
aspect discussed bgp 
definitions notations useful discussions 
sets hypotheses 
say premise entails true model true 
denote proposition iff set hypotheses inconsistent domain description model satisfies important notice entailment relation defined domain description monotonic addition new hypothesis set hypotheses decrease set models satisfying increase set 
nonmonotonicity occurs new information real world new laws new facts added reasoner knowledge 
example consider domain description consisting shoot causes alive loaded load causes loaded suppose domain description reasoner know fred dead shooting assumption initially gun loaded 
notice statements hypothetical naturally represented follows loaded alive shoot question formulated answer obviously 
relating goal extend language formally state relation theorem domain description contain compound actions 
query contain compound actions iff 
conservative extension 
proof follows trivially semantics logic programs extended logic programs disjunctive logic programs section review necessary definitions results theory declarative logic programming 
addition negation failure cla classical logic programming languages consider connectives classical strong explicit negation gl epistemic disjunction gl :10.1.1.49.9332
connectives needed allow representation various forms incomplete information 
complete agreement nature semantics connectives interrelation negation failure 
different proposals discussed literature 
see instance minker lmr pereira pca dix dix przymusinski prz gelfond lifschitz gl :10.1.1.49.9332
follow gl :10.1.1.49.9332
applicability approach representation incomplete information discussed bg gel 
disjunctive logic program dlp collection rules form literal atom possibly preceded negation failure 
expression left hand right hand side called head body rule 
head body empty 
intuitively rule read believed true believed fl believed 
rule form sets fl fl mg fl referred head pos neg respectively 
lit stands head pos neg 
dlp pi head pi pi head 
set predicates lit denotes set literals predicates dlp pi lit pi denotes set literals predicates language pi 
clear context write lit lit pi 
literal form atom denotes sets literals say complete literal complementary literals belongs program determines collection answer sets sets ground literals representing possible beliefs program 
definition gl pi disjunctive logic program variables :10.1.1.49.9332
set literals pi logic program obtained pi deleting rule formula body ii formulas form bodies remaining rules 
definition answer set disjunctive logic program pi containing smallest sense set theoretic inclusion subset lit rule pi ii contains pair complementary literals lit 
set literals answer set arbitrary disjunctive logic program pi answer set pi program consistent answer set containing contradictory literals 
shown gel program consistent answer sets consistent 
henceforth program mean disjunctive logic program 
ground literal entailed dlp belongs answer sets 
rules dlp referred extended logic program gl pw 
discussion need proposition proposition bg answer set disjunctive logic program pi ground instance rule type pi fl mg fl exists 
consistent answer set pi exists ground instance rule pi fl mg fl fl fl approximating entailment relation methodology computing entailment relation translating domain description declarative logic program pid proving soundness possible completeness translation entailment section limit ourself domain descriptions facts atomic facts contain action sequences explicit actual path 
definition clarifies meant explicit actual path 
definition consistent domain description situation constants say explicit actual path compound unit action gamma precedes occurs iff occurs easy see satisfying conditions contains statements occurs gamma occurs gamma unique actual path model psi sigma sigma gamma sigma sigma 
assume explicit actual path describe program pid approximating entailment relation alphabet pid consists symbols actions fluent literals situations language predicates holds occurs causes imm follows undefined subset eq member atomic 
typed variables situations actions fluent literals lists fluent literals variables indexed 
corresponding lower case letters denote constants respective types 
domain description explicit actual path logic programming approximation pid entailment consists rules 
domain dependent axioms description actual path imm follows 
imm follows gamma occurs 
occurs gamma gamma bc boundary conditions atomic fluent fact translated rule form literal atom denotes literal holds positive literal literal holds jgj negative literal fluent jf 
cl causal laws translation effect law causes consists causes intuitively causes means action executed situation true direct effect action 
domain independent axioms ea effects actions effect axioms defined follows result causes undefined ii undefined causes causes iii undefined res undefined effect axiom allows prove hold preconditions satisfied 
axiom differs suggested gl allowing terms compound actions predicate undefined 
axioms new 
describe effects individual actions related effects actions performed concurrently 
ia inheritance axioms result result undefined ii causes iii causes iv undefined intuitively means action ae causes cancelling inheritance effect action sub action intuitively means action inherit effect sub actions situation non inheritance axioms essential correct treatment concurrent actions 
axioms effects compound actions normally inherited effects components 
fi inertia axiom result causes atomic undefined rule motivated common sense law inertia mh fluents normally changed actions 
rule allows apply law inertia reasoning past 
auxiliary predicate causes essentially abnormality predicate mcc 
axiom differs suggested gl predicate atomic restrict inertia rules unit actions predicate undefined restrict inertia rules executable actions 
si second inertia axiom imm follows occurs result second inertia axiom assures effects actions inertia passed named situations 

fa full awareness initial state axiom turner tur called complete initial situations rule 
prefer call full awareness initial situation rule means program aware fluents language initial situation 
holds holds 
la library axioms subset member member subset subset atomic member member eq atomic atomic eq subset eq member xj member jt member properties pid section prove various relationships pid 
main results propositions theorems lemmas proofs propositions theorems 
noted rules pid ground instantiations schemas describing pid previous subsection substitutions variables ground terms done accordance definitions types 
give overview splitting sets show result allow ignore library axioms proofs 
definition splitting set lt splitting set program pi set literals rule pi head lit ae splitting set pi say splits set rules pi lit ae called bottom pi relative splitting set denoted pi 
subprogram pi pi called top pi relative definition partial evaluation lt partial evaluation program pi splitting set set literals program pi defined follows 
rule pi pos ae neg put pi rules satisfy property head head pos pos neg neg definition solution lt splitting set program pi 
solution pi pair hx literals ffl answer set pi ffl answer set pi pi ffl consistent 
lemma splitting lemma lt splitting set program pi 
set literals consistent answer set pi solution hx pi observation program pid split see definition splitting set consisting lit subset subset atomic eq 
easy see bottom part consists rules la top part consists rest 
easy see bottom part unique answer set 
virtue lemma rest consider top part program pid partially evaluated unique answer set bottom part 
lemma pi extended logic program set disjunctions set literals 
disjunction form exists pi pi answer sets 
proof follows immediately definition answer sets 
introduce notations forthcoming proofs 
notation 
set fluent literals fp said hold state oe holds oe 
say hold oe 

set fluent literals fp denote set fh 

direct oe ff immediate effect oeg 

direct gamma oe ff immediate effect oeg 

inherited oe ff inherited effect oeg 

inherited gamma oe ff inherited effect oeg 

model psi sigma actual situation sequence actions ff denote state psi sigma oe state psi sigma ffi ff oe ff 
sequence actions ff denote situation result result gamma result ff 
note oe direct oe inherited oe gamma oe direct gamma oe inherited gamma oe 
proposition domain description 
logic program pid locally stratified 
proof sketch sequence actions ff am actual situation level defined pair ja cardinality am say 
iff easy see assignment strata atoms satisfies conditions gives local stratification atoms form imm follows occurs belong lowest strata 
ii atoms holds ff holds ff ff ff sequence actions actual situations level ff level ff strata holds ff strata holds ff 
iii strata holds ff strata causes ff strata ff strata ff strata undefined ff strata holds ff ffi lemma domain description set literals language pid 
consistent answer set pid iff consistent answer set pid pid holds ag holds holds ag 
proof consistent answer set pid 
definition consistent answer set pid easy see program pi contain answer set pi answer set pi consistent answer set pid definition consistent answer set pid 
consistent answer set pid easy see satisfies pid suppose minimal set satisfies pid ae satisfy pid 
case differ facts initial state 
consider case holds holds 
arguments case similar 
holds holds conclude extended logic program pi normal logic program pi denotes program obtained replacing literals pi see gl relation answer sets extended logic program pi stable models corresponding normal logic program pi holds consistency holds contradicts assumption ae 
case differ facts initial state 
satisfy pid contradicting assumption answer set pid minimal set satisfies pid answer set pid 
domain description explicit actual path consider ground instantiations rules pid second inertia axiom si description actual path full awareness axiom fa 
set instantiations containing situation constants denoted easy see pi consists union sets ground instantiations si fa 
lemma models vs answer sets psi sigma model consistent answer set fh 
executable direct oe ff gamma iff causes ff gamma 
direct gamma oe ff gamma iff causes ff gamma 
inherited oe ff gamma iff ff gamma 
inherited gamma oe ff gamma iff ff gamma 
undefined ff gamma 
oe ff holds ff 
oe ff holds ff 
executable holds ff holds ff undefined ff gamma proof prove theorem induction level sequence actions 
base case level directly conditions theorem 
induction hypothesis level 
assume ih 
executable direct oe ff gamma iff causes ff gamma 
direct gamma oe ff gamma iff causes ff gamma 
inherited oe ff gamma iff ff gamma 
inherited gamma oe ff gamma iff ff gamma 
undefined ff gamma oe ff holds ff 
oe ff holds ff 
executable fluent atom holds ff holds ff undefined ff gamma induction level 
executable direct oe ff gamma iff effect law causes holds oe ff gamma definition iff ff gamma ae ih iff causes ff gamma consistency rule cl proposition 
similar 
inherited oe ff gamma iff ae effect law causes holds oe ff gamma ae effect law causes holds oe ff gamma definition iff ae direct oe ff gamma ae direct gamma oe ff gamma definition iff ae causes ff gamma ae causes ff gamma ih iff ae causes ff gamma ff gamma consistency applying proposition rule ia ii 
iff ff gamma 
applying proposition rule ia iii similar 
executable oe ff gamma gamma oe ff gamma direct oe ff gamma direct gamma oe ff gamma inherited oe ff gamma inherited gamma oe ff gamma exist causes ff gamma causes ff gamma exist ff gamma ff gamma lemma 
undefined ff gamma proposition rules ea ii ia iv program 
oe ff oe ff gamma oe ff gamma gamma oe ff gamma cases true 
atomic oe ff gamma gamma oe ff gamma ii 
atomic oe ff gamma oe ff gamma gamma oe ff gamma iii 
direct oe ff gamma iv 
atomic inherited oe ff gamma gamma oe ff gamma atomic oe ff gamma gamma oe ff gamma holds gamma ih causes ff gamma undefined ff gamma holds ff proposition rule fi 
note rule fi atomic 
ii 
atomic oe ff gamma oe ff gamma gamma oe ff gamma oe ff gamma gamma oe ff gamma conclude exists atomic action effect axioms form causes holds oe ff gamma easy see ff gamma executable oe ff gamma ih implies holds res ff gamma inherited gamma oe ff gamma conclude ff gamma undefined ff gamma proposition rule ia conclude holds ff iii 
direct oe ff gamma causes ff gamma holds ff applying proposition rule ea 
iv 
atomic inherited oe ff gamma gamma oe ff gamma inherited oe ff gamma easy show exists action ae gamma executable direct oe ff gamma conclude iii holds res ff gamma gamma oe ff gamma conclude ff gamma proposition rule ia conclude holds ff 
holds ff proposition cases true 
note undefined ff gamma cases holds ff gamma atomic causes ff gamma 
rule fi ii 
exists effect law causes ff gamma ae 
rule ea 
iii 
exists action ae holds res ff gamma ff gamma 
rule ia 
ih holds ff gamma implies oe ff gamma causes ff gamma conclude direct gamma oe ff gamma 
atomic inherited gamma oe ff gamma 
gamma oe ff gamma 
oe ff ii 
exists effect law causes ff gamma ae ih holds oe ff gamma oe ff gamma 
executable gamma oe ff gamma 
oe ff iii 
exists action ae holds res ff gamma ff gamma show direct gamma oe ff gamma 
suppose case 
arguments similar iii holds ff inconsistent contradiction 
ff gamma conclude inherited gamma oe ff gamma 
gamma oe ff gamma 
holds res ff gamma ih conclude oe ff gammai oe ff gamma 
oe ff gammai showed gamma oe ff gamma oe ff suppose oe ff gamma oe ff gamma means exists action ae direct oe ff gamma 
maximal sub action direct oe ff gamma exist action ae direct oe ff gamma 
claim actions ae causes hold oe ff gamma suppose claim false 
exists action ae direct gamma oe ff gamma 
maximality inherited gamma oe ff gamma 
ff gamma contradicts original assumption ff gamma claim true 
definition oe ff gamma oe ff 
similar proof 

executable cases case gamma executable 
case gamma executable 
case oe ff gamma gamma oe ff gamma case direct oe ff gamma direct gamma oe ff gamma case inherited oe ff gamma inherited gamma oe ff gamma cases possible 
case direct oe ff gamma direct gamma oe ff gamma similar case show causes ff gamma causes ff gamma undefined ff rule ea ii 
case inherited oe ff gamma inherited gamma oe ff gamma exists ae direct oe ff gamma direct gamma oe ff gamma exist ae ae direct gamma oe ff gamma direct oe ff gamma 
similar case show causes ff gamma causes ff gamma ff gamma ff gamma ia iii proposition ff gamma ff gamma undefined ff proposition rules ia iv 
case ih rule ea iii get undefined ff rules holds ff holds ff head undefined ff gamma body holds ff holds ff ends proof lemma 
lemma model psi sigma consistent domain description exists consistent answer set fh 

ff ff proof proposition seen locally stratified 
note contains complete information initial state disjunctions unique answer set say show coherent 
coherent iff exist atom elp pi consistency answer set pi corresponds coherence answer sets pi possible derive holds holds holds holds derived fi ea ia 
induction level easily shown derive holds holds fi previous situation incoherent violating inductive hypothesis 
ii fi ea lead 
body ea true holds holds respectively atom causes block fi deriving holds holds respectively 
iii bodies fi ia true time fi applicable atomic actions ia needs action non atomic 
iv holds holds derived ea 
case undefined block derivation 
ea ia lead 
body ea true holds holds respectively atom true blocking ia deriving holds holds respectively 
vi holds holds derived ia time block derivation 
coherent gl consistent unique answer set lemma agree fluent facts hypothesis form ff lemma consistent domain description explicit actual path pi obtained pid replacing si result gamma gamma gamma occurs gamma pi equivalent pid :10.1.1.49.9332
lemma consistent domain description explicit actual path rule result gamma gamma psi sigma model tm hm fh program tm unique consistent answer set am 
am 
am ff ff proof 
induction base 
lemma follows immediately lemma 
inductive step obviously tm tm gamma hm 
inductive hypotheses tm gamma unique consistent answer set am gamma notice head tm gamma forms splitting set lt tm am answer set tm iff am am gamma answer set partial evaluation tm am gamma tm am gamma easy see ii tm am gamma hm fh am gamma result gamma gamma inductive hypotheses implies fluent literal am gamma gamma sigma actual path sigma sigma gamma ffi am gamma satisfies conditions lemma hm unique consistent answer set satisfies conditions ii 
implies lemma tm lemma model psi sigma consistent domain description explicit actual path exists unique consistent answer set pid 

ff ff proof lemma answer set pid iff answer set pi notice pi split splitting set lit follows occurs atg 
seen bottom contains rules describing actual path top contains rest pi easily seen bottom part unique answer set denote consider pi pi 
notice top bottom contain common literals pi pi pi 
denote pi pi fh rule result gamma gamma 
lemma unique answer set denote notice lemma answer set pi iff answer set pi pi contains complete information initial state lemma remove disjunctions fa answer sets 
easily seen pi fa backward proof unique answer set pi lemma unique unique answer set pi unique answer set pid theorem consistent domain description explicit actual path logic programming approximation pid sound proof follows directly lemma 
example shows restrictions pid complete 
example consider domain description precedes fa bg occurs causes causes fa bg causes candidates initial state model psi sigma fg psi sigma fpg 
easy see psi sigma ffi fa bg ffg psi sigma ffi fa bg undefined 
easy show psi sigma model psi sigma model fa bg consider program pid easy show pid answer sets holds holds holds result fa bg ae holds undefined fa bg ae holds holds result fa bg belong answer sets pid pid pid fa bg complete 
show adding stronger condition initial state achieve soundness completeness 
definition domain description said strongly complete fluent language theorem strongly complete consistent domain description explicit actual path logic programming approximation pid sound complete proof soundness proven theorem 
prove completeness notice easily seen model say unique 

ff ff lemma exist unique answer set pid 

ff ff 

ff ff complete proof need show answer set pid 
proposition pid locally stratified lemma disjunctions removed changing answer sets pid unique answer set actions non predictable effects section discuss extension language allow representation actions non predictable non deterministic effects 
start example san example version shooting scenario previous examples 
time gun save space assume shooter chambers top chamber aligned gun barrel 
action shoot successful results death fred bullet top chamber 
action load puts bullet top chamber cylinder new actions spin rotates cylinder 
result spin top chamber may may contain bullet 
spin typical example action non predictable effects 
explanations phenomena spin single indivisible action cause chamber containing bullet possible positions actual effect performing spin may different different times 
approach adopted kl san 
explanation see pin views spin single action collection actions precise deterministic effect 
unpredictability outcome caused simply lack knowledge unique action collection performed 
treatment follow second view find intuitive certain cases 
represent knowledge occurrences effects non deterministic actions augment syntax semantics expand alphabet new symbol expression form actions called non deterministic action possible instances generalized actions mean deterministic non deterministic actions 
propositions new language defined follows 
occurrence facts hypothesis expressions form occurs generalized actions fluent literal situation 

propositions exactly notice non deterministic actions occur causal laws 
effect executing action particular situation determined effects deterministic instances 
semantics domain descriptions refines intuition 
notion interpretation definition transition function situation assignment define model need expand definition validity occurrence facts containing non deterministic action 
say sequence deterministic actions possible instance sequence generalized actions instance atomic fact form occurs true interpretation instance occurs true deal hypothetical reasoning need expand notion truth hypothesis containing non deterministic actions 
say form true false interpretation instance true false notice formulation hypothetical queries answered unknown corresponding true false case 
illustrate definition consider representation example example acts alive precedes load occurs spin occurs laws load causes bullet load causes top shoot causes dead top bullet shoot causes top top shoot causes top top shoot causes top top shoot causes top top move top causes top variable ranges chambers spin stands non deterministic action move top top 
proposition domain description 
dead shoot shoot 
bullet top 
top top bullet extended language allow compound actions actions consist simultaneous execution set unit actions 
extended language allows hypothetical reasoning effect actions allowing hypothetical statements queries useful planning reasoning actual occurances actions useful formalizing reactive behavior robot formalizing execution transactions databases 
reason compound actions elegantly capture associated frame problem want explicitly specify effect possible compound actions incorporate inheritance mechanisms compound action normally inherits effects sub actions 
close terms allowing concurrent actions actual observations mcc km 
works kind compound actions allowed ones subactions conflict action 
works ongoing appropriate point give detailed comparison proposal 
ab apt bezem 
acyclic programs 
new generation computing 
alp alferes li pereira 
concurrent actions changes situation calculus 
geffner editor proc pages 
mcgraw hill 
bar baral 
reasoning actions non deterministic effects constraints qualification 
proc 
ijcai pages 
bg baral gelfond 
representing concurrent actions extended logic programming 
proc 
th international joint conference artificial intelligence chambery france pages 
bg baral gelfond 
logic programming knowledge representation 
journal logic programming 
bgp baral gelfond 
representing actions laws observations hypothesis 
journal logic programming appear 
bt thielscher 
representing concurrent actions solving conflicts 
proc 
german conference ai 
cla clark 
negation failure 
gallaire minker editors logic data bases pages 
plenum press new york 
dds denecker de schreye 
representing incomplete knowledge abductive logic programming 
proc 
ilps vancouver pages 
dix dix 
classifying semantics logic programs 
proceedings international workshop logic programming nonmonotonic reasoning washington pages 
dun dung 
representing actions logic programming application database updates 
warren editor proc 
iclp pages 
gel gelfond 
logic programming reasoning incomplete information 
annals mathematics artificial intelligence 
gl gelfond lifschitz 
logic programs classical negation 
warren peter szeredi editors logic programming proc 
seventh int conf pages 
gl gelfond lifschitz :10.1.1.49.9332
classical negation logic programs disjunctive databases 
new generation computing pages 
gl gelfond lifschitz 
representing actions extended logic programs 
joint international conference symposium logic programming pages 
gl giunchiglia lifschitz 
dependent fluents 
proc 
ijcai pages 
ht holldobler thielscher 
actions specificity 
miller editor proc 
iclp pages 
kar kartha 
soundness completeness theorems formalizations action 
ijcai pages 
kl kartha lifschitz 
actions indirect effects preliminary report 
kr pages 
km kakas miller 
simple declarative language describing narratives actions 
journal logic programming appear 
lll lesperance levesque lin marcu reiter scherl 
logical approach high level robot programming progress report 
working notes aaai fall symposium control physical world intelligent systems appear new orleans la november 
lmr lobo minker rajasekar 
foundations disjunctive logic programming 
mit press 
lmt lifschitz mccain turner 
automation reasoning action logic programming approach 
posters international symposium logic programming 
ls lin shoham 
provably correct theories actions preliminary report 
proc 
aaai 
lt vladimir lifschitz hudson turner 
splitting logic program 
pascal van hentenryck editor proc 
eleventh int conf 
logic programming pages 
mcc mccarthy 
overcoming unexpected obstacle 
manuscript 
mcc mccarthy 
applications circumscription formalizing common sense knowledge 
artificial intelligence 
mh mccarthy hayes 
philosophical problems standpoint artificial intelligence 
meltzer michie editors machine intelligence volume pages 
edinburgh university press edinburgh 
ms miller shanahan 
narratives situation calculus 
journal logic computation october 
mt mccain turner 
language independence language tolerance logic programs 
proc 
eleventh intl 
conference logic programming pages 
pca pereira alferes 
classical negation logic programs 
de artificial 
pin pinto 
temporal reasoning situation calculus 
phd thesis university toronto department computer science february 
krr tr 
pr pinto reiter 
temporal reasoning logic programming case situation calculus 
proceedings th international conference logic programming hungary pages 
pro 
hypothetical reasoning actions situation calculus event calculus 
computational intelligence 
prz przymusinski 
stationary semantics disjunctive logic programs deductive databases 
north american conference logic programming pages 
pw pearce wagner 
reasoning negative information strong negation logic programming 
technical report fur logic information freie universitat berlin 
rei reiter 
frame problem situation calculus simple solution completeness result goal regression 
lifschitz editor artificial intelligence mathematical theory computation pages 
academic press 
san sandewall 
features fluents approach representation knowledge dynamical systems 
technical report och linkoping 
san sandewall 
range applicability non monotonic logics strict inertia 
journal logic computation october 
tur turner 
monotonicity theorem extended logic programs 
warren editor proc 
th international conference logic programming pages 
tur turner 
signed logic programs 
proc 
international symposium logic programming pages 
wat watson 
inference engine epistemic specifications 
thesis department computer science university texas el paso 
wc warren chen 
query evaluation founded semantics 
proc 
pods 
