approximating disjoint path problems greedy algorithms packing integer programs extended stavros cli ord stein dartmouth college department computer science hanover nh 
edge vertex disjoint path problems unsplittable flow generalization np hard problems multitude applications areas routing scheduling bin packing 
hardness problems study polynomial time approximation algorithms bounded performance guarantees 
introduce techniques yield new algorithms wide range disjoint path problems 
basic techniques 
propose simple greedy algorithms edge vertex disjoint paths second propose framework packing integer programs general problems unsplittable flow 
part tools develop improved approximation algorithms class packing integer programs result believe independent interest 
examines approximation algorithms disjoint path problems generalizations 
edge vertex disjoint path problem graph set connection requests called commodities 
connection request vertex pair objective connect maximum number pairs edge vertex disjoint paths 
vertex disjoint paths problem connection requests assumed disjoint 
call set connected pairs realizable 
generalization paths problem multiple source unsplittable flow 
problem commodity set associated demand edge capacity demand routed single path objective maximize sum demands fully routed respecting capacity constraints 
wlog assume max standard definition problem literature demands capacities multiple source unsplittable flow problem obtain edge disjoint path problem 
see applications motivation unsplittable flow :10.1.1.3.583
problems mail stavros cliff cs dartmouth edu 
research partly supported nsf award ccr nsf career award ccr 
assign weight connection request seek find realizable set maximum total weight 
state explicitly deal weighted version problem 
edge vertex disjoint path problems fundamental extensively studied see np hard problems multitude applications areas telecommunications vlsi scheduling :10.1.1.3.583
despite attention received disjoint path problems general graphs remain notoriously hard terms approximation edge disjoint paths algorithm known find fraction realizable paths 
approximating problems traditional notion approxi mation algorithm outputs polynomial time realizable set size times optimum 
give refer algorithms output realizable set size non linear function optimum opt opt 
overview previous 
main approaches followed approximation 
approach call rounding approach consists solving fractional relaxation rounding techniques obtain integral solution 
fractional relaxation typically multicommodity flow rounding techniques date involved sophisticated non standard randomized rounding 
objective value resulting solution compared fractional optimum upper bound integral optimum opt 
approach successful yielded approximation algorithm uniform unsplittable flow special case unsplittable flow capacities value 
denote dilation fractional solution maximum length flow path fractional relaxation 
bounds rely dilation particularly appealing expander graphs known polylog 
rounding approach yields unweighted uniform unsplittable flow unweighted edge disjoint paths realizable set size max max bound weighted version approach known limitations known gap exists fractional integral optima edge vertex disjoint path problems graph 
ii second approach call routing approach commodity split routed fractionally path course algorithm 
analysis objective value solution compared estimated upper bound opt 
approach limited applicability far reason perceived hardness deriving upper bounds opt resorting fractional relaxation 
example method aware line bounded greedy algorithm approximation guarantee depends diameter graph :10.1.1.3.583
algorithm easily modified line procedure outputs realizable sets size opt opt edge vertex disjoint paths 
opt bound best known bound date paths 
routing approach rounding approach unweighted edp opt opt eo opt eo opt weighted edp weighted ucufp weighted ufp log log table :10.1.1.3.583
known approximation bounds edge disjoint paths edp uniform capacity unsplittable flow ucufp general unsplittable flow ufp notation omitted 
eo denotes set edges path integral optimal solution average length paths solution 
results citation come 
bound weighted edp problem holds assumption number connection requests 
contribution 
provide techniques approximating problems bear approaches 
tables summarize previous new bounds edge vertex disjoint path unsplittable flow problems 
routing approach approach ii give simple deterministic greedy algorithm greedy path edge disjoint paths performance guarantees comparable obtained multicommodity flow algorithms 
greedy algorithms extensively studied combinatorial optimization due elegance simplicity 
provides example usefulness greedy method 
underlying idea keeps routing commodities su ciently short paths final number commodities routed respect optimum 
greedy path outputs realizable set size max opt opt edge disjoint path problem 
set edges paths optimal solution 
note opt dominates opt unweighted case consider give bounds facilitate comparison existing conform traditional notion approximation algorithm 
approximation existentially improves multicommodity flow results optimal solution uses small portion edges graph 
bound obtained noticing opt opt denotes average length paths optimal solution 
essentially algorithm greedy obtains path problem realizable set size max opt opt set vertices paths optimal solution 
recall best known bound date opt 
realizable set output algorithm size potentially better 
significant improvement opt 
example opt obtain constant factor approximation 
opt guarantee follows immediately 
routing approach rounding approach unweighted opt opt vo opt vo opt weighted table :10.1.1.3.583
known approximation bounds vertex disjoint paths notation omitted 
vo denotes set vertices path integral optimal solution average length paths solution 
results citation come 
turn rounding approach approach handle weighted disjoint path unsplittable flow problems 
propose packing integer programs unifying framework abstracts away need customized complex randomized rounding schemes 
packing integer program form maximize subject ax 
develop part tools improved approximation algorithm class packing integer programs called column restricted relevant unsplittable flow problems 
armed new algorithm existing algorithms general packing integer programs show packing formulations provide unified simplified derivation results lead new ones 
particular obtain approximation algorithm weighted unsplittable flow networks arbitrary demands capacities approximation algorithm weighted vertex disjoint paths 
believe new algorithm column restricted packing integer programs independent interest 
elaborate results rounding approach providing background necessary 
packing integer programs packing integer programs studied class integer programs model np complete problems including independent set hypergraph matching job shop scheduling flow path related problems 
problems di cult approximate known worst case approximation ratios 
packing integer program pip defined follows 
definition 
max pip seeks maximize subject ax constraints form allowed 
entry assumed integral 
min maximum number non zero entries column parameters definition appear approximation bounds 
convenience call capacity row restrictions values entries wlog values arbitrary packing program scaled satisfy requirements 
state explicitly packing program deviates requirements 
say pip 
previous packing programs 
basic techniques approximating packing integer programs randomized rounding technique raghavan thompson plotkin shmoys tardos 
denote optimum value linear relaxation 
standard randomized rounding yields integral solutions value general pip pip see 
srinivasan improved standard randomized rounding bounds obtained bounds general pip pip 
new results column restricted pip 
results show various combinations values bounds obtained pip significantly better general pip 
fact better example approximation ratio obtained pip polynomially better approximation ratio pip parameters 
natural ask bridge gap 
progress direction defining column restricted pip non zero entries th column value 
column restricted pip arise applications unsplittable flow problems see section 
show obtain approximation guarantees pip similar ones obtained pip 
denote optimum linear relaxation obtain integral solution value 
letting obtain bound log case worse log factor 
show improve stated approximations max bounded away 
develop results complete version 
give overview technique 
find optimum solution linear relaxation column restricted pip partition fixed number intervals values generate packing subproblem range 
packing subproblem corresponding range include columns component vector allocate fraction original value fraction determined information find approximate solutions subproblem combine obtain solution original problem 
key idea solution define capacity allocation vector subproblem generalizes previous authors single source unsplittable flow 
key idea subproblem approximated pip 
applications packing approximation introduce new framework applying packing techniques disjoint path problems 
formulate integer program necessarily pip solve linear relaxation integer program obtain solution typically multicommodity flow problem 
explicitly solution guide formation column restricted pip 
related usage solution linear relaxation integer programs di erent context 
integral approximate solution created pip approximate solution original disjoint path problem possibly small degradation approximation factor 
integral solution existing algorithms approximating pip black box 
algorithms apply case weights commodities generalize srinivasan edge disjoint paths 
approach yields applications explain 
application weighted unsplittable flow 
denote respectively 
obtain realizable set weight max log log unsplittable flow arbitrary demands capacities 
fact give better type bound small analytical form complicated 
see details 
case number commodities show obtain max log bound 
notice edge disjoint path problem natural assumption connection requests feasibly routed 
note approximation entails log approximation problem routing rounds 
pursue problem extended 
application weighted vertex disjoint paths 
give algorithm outputs solution value max 
algorithm relies observation solving fractional relaxation problem rounding essentially instance hypergraph matching formulated packing program constraints 
algorithm surprisingly simple performance guarantee matches integrality gap known problem 
application routing low congestion 
problem received lot attention literature routing problems minimizing congestion factor allowed scale capacities order achieve optimal near optimal realizable set 
usage packing rounding algorithms assumed parameter packing program equal 
allowing equivalent allowing congestion corresponding disjoint path problem 
advantage packing approach tradeo allowed congestion obtained immediately plugging packing algorithms black box 
example approximation edge disjoint paths max log number connection requests 
congestion tradeo generalize previous srinivasan showed tradeo uniform capacity unsplittable flow 
state tradeo explicitly various problems obtained easily simple modifications algorithms 
application independent set square graph 
graph th power graph vertices adjacent distance demonstrate power packing formulations providing approximation algorithm finding maximum independent set square graph 
give results depend maximum vertex degree approximation ratio polynomially improved sense approximation fixed obtained polynomial time np 
studying np hard problems powers graphs topic received attention literature 
independently srinivasan personal communication obtained results similar approximating vertex disjoint paths rounding approach unsplittable flow column restricted packing integer programs 
builds methods 
approximating column restricted pip section approximation algorithm column restricted pip 
column restricted pip 
call value non zero entries th column value column section assume polynomial time algorithm pip fractional optimum outputs integral solution value parameters packing program 
example known 
start providing subroutine solving column restricted pip column values close range 
theorem 
column restricted pip column values equal positive integer min necessarily greater 
find polynomial time solution value denotes optimum linear relaxation min proof 
transform system pip ij ij 
feasible solution fractional integral feasible solution vice versa 
fractional optimum programs 
maximum number non zero entries column unambiguously 
assumed approximation algorithm returning solution objective value 
invoking algorithm completes proof 
proof lemma generalizes lemma 
lemma 
column restricted pip column values interval number 
min necessarily greater 
algorithm packing finds solution value optimum fractional relaxation algorithm runs polynomial time 
proof sketch 
sketch algorithm packing 
obtain pip follows 
round nearest multiple multiply set equal resulting value 
times corresponding set ij ij 
fractional solution value obtained scaling optimal fractional solution note multiple invoke theorem find solution value 
scaling component factor yields vector feasible value 
lemma 
column restricted pip column values interval multiple number 
min necessarily greater 
algorithm interval packing finds solution value optimum fractional relaxation algorithm runs polynomial time 
proof sketch 
similar lemma 
multiples don pay factor initial rounding 
give idea full algorithm 
technique generalizes earlier authors single source unsplittable flow 
denote optimum solution linear relaxation going create packing subproblems contains columns values fixed range 
obtain integral solution combining approximate solutions subproblems 
crucial step capacity allocation subproblems 
consider candidate vector call th fractional capacity vector 
fractional capacity vector th entry equal ij words allocate capacity th subproblem pulling amount capacity solution columns values 
benefit scheme relevant entries obtain feasible solution linear relaxation able benefit lemma find approximate integral solution need entries larger increases required capacity subproblem potentially fractional capacity 
resort sophisticated capacity allocation ensure total capacity vector share subproblems ii subproblems benefit subroutines lemmata 
particular initially assign subproblem fractional capacity vector asymptotically negligible ect scaling fractional optimum subproblem 
exploit unused vector capacity add extra units entries 
set column indices define submatrix consisting columns vector entry subvector consisting entries indices need combine back various subvectors define entry vector various entries various subvectors mapped back original positions 
positions corresponding index sets set 
algorithm column partition step 
find vector yields optimal solution linear relaxation step 
define partition interval log consecutive subintervals 

constant larger 

form subproblem 
restrictions defined define similarly step 
ith entry 
define step 
form solution setting 
step 
invoke packing obtain solution vector combine solutions subproblems form vector step 
invoke interval packing obtain solution vector step 
vectors output call maximizes tasks remain 
show vector output algorithm feasible solution original packing problem second lower bound terms optimum fractional relaxation abbreviate examine vector lemma 
algorithm column partition runs polynomial time vector outputs feasible solution value 
proof sketch 
optimal solution linear relaxation lemma value solution step 
definition restriction scaled feasible fractional solution value 
claim value follows 
feasibility note aggregate capacity row sum capacities subproblem 
sum step aggregate capacity remains account theorem main result section 
theorem 
column restricted pip optimum linear relaxation algorithm column partition finds polynomial time solution value max log 
proof 
vectors solves packing problem column values lying respectively 
induced packing problems 
optimal solution linear relaxation value optimal solution linear relaxation remains lower bound approximation achieved vectors corresponding domain column values 
fixed subproblems note function variable vector solves optimally 
solution feasible column values value left hand side packing constraint exceed 
lemma vector outputs solution value 
value solution output sum lemma 
distinguish cases 
function linear 
function convex sum minimized terms equal log 
instantiating function max linear case convex case completes proof 
applications pip approximation weighted multiple source unsplittable flow approach weighted unsplittable flow consists finding optimum fractional relaxation weighted multicommodity flow solved polynomial time linear programming 
relaxation consists allowing commodity shipped path 
call paths fractional paths 
round stages 
stage select fractional paths commodity expense congestion capacities may violated 
addition commodities may routed 
second stage commodities routed stage select ultimately routed respecting capacity constraints 
stage column restricted pip 
introduce terminology giving algorithm 
routing set paths route amount flow routing flow edge equal routing edge unsplittable flow 
fractional routing commodity flow split potentially paths ii demand routed 
fractional routing corresponds standard multicommodity flow 
fractional routing flow commodity shipped path fraction demand shipped commodity value routing weighted sum demands routed algorithm max routing step 
find optimum fractional routing invoking weighted multicommodity flow algorithm 
denote value step 
scale capacities factor log obtain network capacity function invoke raghavan algorithm round routing step 
scale flow path factor log obtain fractional single path routing feasible step 
construct column restricted pip follows 

set commodities shipped columns commodity rows edge ij path pk commodity goes edge 
cost vector entry set wk commodity shipped ue 
step 
invoke algorithm column partition find integral solution construct unsplittable flow routing commodity path pk 
theorem 
weighted multiple source unsplittable flow problem algorithm max routing finds polynomial time unsplittable flow value max log log value optimum fractional routing proof sketch 
note routing feasible scaling flow step routing feasible rounded solution maintains feasibility 
value easily extend analysis raghavan algorithm show weights routes constant fraction 
set equal amount flow routed commodity divided vector feasible fractional solution value log 
theorem follows theorem lower bound value integral solution give bound depends dilation fractional routing 
theorem 
weighted multiple source unsplittable flow problem polynomial time algorithm finds unsplittable flow value value dilation optimum fractional routing construction proof theorem give max log bound case number commodities 
omit details version 
weighted vertex disjoint paths relaxation problem integral multicommodity flow commodity associated demand 
express vertex disjoint paths integer program constraints multicommodity flow additional bandwidth constraints vertices total flow vertex 
lp linear relaxation optimal solution lp consists set fractional flow paths 
algorithm relies observation gives rise time fractional solution pip 
particular pip models matching problem hypergraph vertex set hyperedge subset path fractional solution 
words paths may viewed sets vertices regard flow edges proceed give full algorithm 
algorithm path packing step 
formulate linear relaxation lp find optimal solution 
flow decomposition express set paths 
connecting pair terminals carrying units flow 
step 
construct pip follows 
matrix ij path includes vertex 
vector ones 
equal wk path connects terminals sk tk step 
find integral solution output corresponding set paths 
theorem 
weighted vertex disjoint paths problem algorithm path packing finds polynomial time solution value max dilation value optimum solution linear relaxation lp 
proof sketch 
show feasible solution problem 
clearly constraints packing program constructed step ensure paths vertex disjoint 
excludes possibility path optimal value linear relaxation setting equal yields feasible fractional solution applying standard randomized rounding srinivasan algorithms step obtain claimed bounds objective value application independent set section show packing formulation leads approximation problem find maximum weight independent set square graph 
theorem 
graph weight vector vertices exists polynomial time algorithm outputs independent set square weight max 
denotes optimum fractional relaxation maximum vertex degree hardness approximation result problem finding maximum independent set th power graph follows 
theorem 
problem finding maximum independent set th power graph fixed integer approximation fixed np 
greedy algorithms disjoint paths section turn routing approach unweighted edge vertex disjoint path problems 
algorithm greedy path step 
set 
step 
commodity shortest path minimum length 
path exists halt output step 
add remove edges remove goto step 
approximation ratio algorithm 
theorem 
algorithm greedy path runs polynomial time outputs solution edge disjoint paths problem size times optimum set edges paths optimal solution 
give improved bounds size output realizable set 
theorem 
algorithm greedy path outputs solution edge disjoint path problem size opt set edges paths optimal solution 
proof 
total number iterations greedy path set th iteration 
optimal set paths 
say path hits path share edge 
define set paths correspond commodities routed path added th iteration algorithm 
hits paths hit path length turn paths hit length selected algorithm furthermore paths edge disjoint total number edges 

applying inequality left hand side obtain 
termination algorithm paths hit path obtain 
wlog assume greedy path obtains approximation 
follows opt 
corollary 
algorithm greedy path outputs solution edge disjoint path problem size opt average length paths optimal solution 
algorithm greedy path gives solution vertex disjoint paths modification step remove vertices call resulting algorithm greedy 
analogues results seen hold greedy 
theorem 
algorithm greedy outputs solution vertex disjoint path problem size max opt opt opt set vertices paths optimal solution average length paths optimal solution 
acknowledgments 
wish jon kleinberg aravind srinivasan valuable discussions 
aslam helpful discussions 

erdos linial 
optima dual integer linear programs 
comb 

aumann rabani 
improved bounds optical routing 
proc 
th acm siam symp 
discrete algorithms 

broder frieze upfal 
static dynamic path selection expander graphs random walk approach 
proc 
th ann 
acm symp 
theory computing 

cooper 
hamilton cycles square random graph 
random structures algorithms 


square connected graph hamiltonian 
combinatorial theory 

frank 
packing paths cuts circuits survey 
korte lovasz schrijver eds paths flows vlsi layout 
springerverlag berlin 

garg vazirani yannakakis 
primal dual approximation algorithms integral flow multicut trees 
algorithmica 

karp leighton rivest thompson vazirani vazirani 
global wire routing dimensional arrays 
algorithmica 

karp 
computational complexity combinatorial problems 
networks 

kleinberg 
approximation algorithms disjoint paths problems 
phd thesis mit cambridge ma may 

kleinberg 
single source unsplittable flow 
proc 
th ann 
symp 
foundations computer science october 

kleinberg rubinfeld 
short paths expander graphs 
proc 
th ann 
symp 
foundations computer science 

kleinberg tardos 
disjoint paths densely embedded graphs 
proc 
th ann 
symp 
foundations computer science 

stein 
improved approximation algorithms unsplittable flow problems 
proc 
th ann 
symp 
foundations computer science 

stein 
approximating disjoint path problems greedy algorithms packing integer programs 
technical report pcs tr department computer science dartmouth college 

leighton rao 
circuit switching multi commodity flow approach 
workshop randomized parallel computing 

leighton rao 
approximate max flow min cut theorem uniform multicommodity flow problems applications approximation algorithms 
proc 
th ann 
symp 
foundations computer science 


lin skiena 
algorithms square roots graphs 
siam discrete mathematics february 

lovasz 
ratio optimal fractional covers 
discrete mathematics 

martin shmoys 
new approach computing optimal schedules job shop scheduling problem 
proc 
th conference integer programming combinatorial optimization 

peleg upfal 
disjoint paths expander graphs 
comb 

plotkin 
competitive routing virtual circuits atm networks 
ieee selected areas comm 
special issue advances fundamentals networking 

plotkin shmoys tardos 
fast approximation algorithms fractional packing covering problems 
math 
oper 
res 

raghavan 
probabilistic construction deterministic algorithms approximating packing integer programs 
computer system sciences 

raghavan thompson 
randomized rounding technique provably algorithms algorithmic proofs 
comb 

robertson seymour 
outline disjoint paths algorithm 
korte lovasz schrijver eds paths flows vlsi layout 
springer verlag berlin 

schrijver 
homotopic routing methods 
korte lovasz schrijver eds paths flows vlsi layout 
springer berlin 

shmoys stein wein 
improved approximation algorithms shop scheduling problems 
siam computing june 

srinivasan 
improved approximations packing covering problems 
proc 
th ann 
acm symp 
theory computing 

srinivasan 
extension lovasz local lemma applications integer programming 
proc 
th acm siam symp 
discrete algorithms 

srinivasan 
improved approximations edge disjoint paths unsplittable flow related routing problems 
proc 
th ann 
symp 
foundations computer science 

srinivasan 
teo 
constant factor approximation algorithm packet routing balancing local vs global criteria 
proc 
th ann 
acm symp 
theory computing 

stein 
approximation algorithms multicommodity flow shop scheduling problems 
phd thesis mit cambridge ma august 

underground 
graphs hamiltonian squares 
disc 
math 
