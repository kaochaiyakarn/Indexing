kb hydro heterogeneous distributed knowledge base system ram panda describe heterogeneous knowledge base management system designed developed north dakota state university support ibm rochester mn 
system called kb hydro 
connect variety autonomous local database systems knowledge base systems unified system 
show global serializability atomic commitment attained kb hydro 
local system assumed shelf binary licensed system 
achieves global serializability set objects roll request order linked list object developed 
roll general serialization graph test sgt methodology ber provides freedom idle wait deadlock livelock restart 
kb hydro uses attribute level granularity access control mechanism 
approach reduces conflicts substantially 
atomic commitment provided twophase commit 

rapid advancements communication networking technology dramatically changing way data knowledge integrated processed 
enterprises interested integrating consolidating physically dispersed data knowledge resources including non standard data managed object oriented database management systems dbms 
accordingly level management software needed access data knowledge pre existing databases located computer network variety vendors variety models 
systems refer heterogeneous distributed knowledge base management systems 
partially supported ibm research 
ideally provide transparent efficient global transaction atomicity correctness durability standard transactions access non standard objects 
describe called knowledge base distributed request ordering system kb hydro developed north dakota state university support ibm abs rochester mn 
kb hydro intended distributed knowledge management networked heterogeneous environment combining variety local knowledge base systems local database systems including ibm native database system fully object oriented machine interface 
transaction correctness global serializability atomic commitment 
local autonomy provided site 
local autonomy taken mean local system shelf binary licensed commercial product 
local systems may knowledge base systems standard transaction processing systems decision support systems multimedia object management systems 
site kb hydro local server module hydro customized take advantage local interface provided local system site 

depicts kb hydro 
developed local server options transaction management 
local server option hac sites visible prepared statement available second hac ii 
hac iii local server decision support systems query provides operation level atomicity provide atomic commitment 
time local multimedia object management systems treated read sites global transactions 
hac iii sites 
models points view developing systems 
point view management large organization independent data knowledge base systems mandates organization wide data knowledge integration 
assume strong incentives individual departments apply membership organization wide database knowledge base federation 
local system managers fit resources portion federated schema provide access paths 
local hydro objects hydro hydro provide connection federation 
model takes point view local autonomy temporary system liability virtue 
local sites export local schema resources wish available federation 
export schema information concurrency provide globally respect resources 
information govern concurrency control needs sub transactions 
site global control software resides called global site maintains federated schemata helps maintaining different surrogate structures required 
kbms local trans 
log log global trans dbms 
log hydro 
kb hydro hydro advanced knowledge applications accommodated standard recovery full atomic commitment 
read requests transaction level concurrency control needed 
updates research done transaction management global atomic commitment relaxed kor 
relaxing atomicity commit long duration nested transactions better accommodated 
presence failures compensating transactions produce acceptable system states semantic undo procedures kor 
procedures require high levels local control may possible presence local autonomy 
applications continue require full atomic commitment acceptably correct execution 
full atomic commitment solved problem 
concentrates providing full atomic commitment updates atomic commitment read accesses 
alternatives investigated add non atomic commitment updates semantics transaction 
section review basic concurrency control object handles updates kb hydro request order linked list object roll 
section define transaction model define version hydro roll object version hydro may roll object updates 
section describe achieve atomic commitment 
section discuss progress going implementations hydro note come 

request ordered linked list concurrency control section give description basic object places kb hydro 
request order link list object roll object 
systems common approaches concurrency control waiting policy restart policy 
locking methods waiting policies data locking provide concurrency control 
cause unnecessary periods idle waiting cause deadlocks transactions involved cyclic wait 
avoid deadlocks form prevention avoidance technique required adding complexity delays system ber 
timestamp protocols transaction timestamps restarting eliminate access orders result errors 
possible certain transactions policy may repeatedly stopped restarted resulting problem known livelock ber 
phenomena waiting restarting desirable 
describe roll object minimize waiting restarting providing correct serializable recoverable executions 
roll method serialization graph tester sgt approach ber 
serialization graph tester maintains stored serialization graph ssg contains pertinent conflict information 
sgt approach optimal sense serializable execution rejected 
sgt attains serializable executions ensuring ssg remains acyclic ber 
roll method data item requests indicated bit vector called request vector rv bit position corresponds different logical data item system means request means request 
total bits assigned data item access modes offered bits read write access distinguished 
roll data structure linked list fifo queue bit vectors data structure accessed transactions 
conceptually individual element roll owned transaction 
transaction access roll element tail pointer 
methods post check release associated roll object 
pointer setting actions post actions operations done parallel 
briefly post atomic enqueue operation transaction establishes data needs precedence order posting rv 
assuming desirable distinguish read write mode requests consecutive pair bits assigned data item read bit write bit 
rv bits read bit positions corresponding data items read bits write bit positions corresponding data items written 
check operation allows transaction determine point time exactly needed data items available immediate 
check transaction logically ors rvs ahead roll 
logical compliment vector determines exactly items currently available 
release operation allows transaction give access data item requesting transaction simply flipping corresponding bit zero 
detailed description operations reader referred 
shown roll concurrency control correct 
produces conflict serializable executions 
summarize proof follows 
transaction may access data item preceding conflicting transactions roll released 
operation transaction performs conflicts operation preceding transaction list follow operations transaction 
serialization partial order equivalent posting order serializable execution may done posting order 
basic roll idle wait deadlock livelock restart free 
terms ordering data item requests transaction inverse ordering automatically implemented 
simplest accurate measure data items immediate availability 
roll immediately available items granted unavailable hot items available soon possible 
main cause delay waiting policies phase locking pl single system scheduler 
roll method scheduler transaction posts request monitors availability requested items check operation series simple fast steps executed parallel 
pl require data needs roll 
modifications accommodate non transactions described 
modifications necessarily introduce possibility restart partial restart shown unavoidable non methods theorem 
details non roll scope 
main cause delay timestamp ordering systems transaction restart 
basic roll method employed kb hydro restart manage conflicts serious performance drawback exist 
attribute level roll knowledge base systems knowledge represented objects 
object large complex may attributes 
tedious task try apply traditional concurrency control protocols manage knowledge requests 
due fact knowledge objects stratified nonuniform size structure 
getting exclusive access object level result bottleneck lot idle waiting wasteful efforts 
attribute level roll scheme beneficial 
method main roll objects post roll object roll 
bit position corresponds object 
post vector pv created object transaction requires access 
object request vector bits set object access required 
pv posted ppost 
check operation determines open posting 
created bit set corresponding needed attribute correct access mode 
soon finds needed object open posting corresponding bit released 
continue object needs corresponding 
note needs attribute level 
relational data system view relational tuple object 
associated tuple currently accessed indicate access needs attribute field level 
scheme provides field level access granularity 
level granularity finer provide higher throughput possible existing systems 
corresponds active encapsulated object 
objects accessed time 
deactivated space released soon holds bits 
illustrates 
tail tail tail tail object object attr attr rolls 
roll posting establishes serialization partial order transactions 
ensures local postings consistent objects 
provide concurrency handling requests attribute level object class levels 
note pv vectors wide 
replaced hierarchical scheme class subclass 
doing reduce size pvs significantly 
noted accessed transaction serves insure various get serialization partial order 
brute force way insure provide single post semaphore 
transaction seize semaphore local release semaphore 
require idle waiting semaphore queue scheme 
view concept multi post semaphore providing higher throughput post process 
long duration transactions typical object oriented database setting including kbs setting allows higher processing speeds conventional methods large accessed initiation ppost process done parallel subsequent operations fast 
discuss performance enhancement scheme dramatically decrease width bit vectors situations vectors expected excessively wide wide process efficiently 
employed needed 
limited partition roll problem excessive bit vector width 
note problem due excessive number 
limited partition roll mcc substantially reduce size roll vectors increase performance algorithm 
granule assigned set bits usually read access write access 
relatively easy match granules bits result wide vector 
transactions tiny subset granules database need read written correspondingly little space vector 
dynamically allocate words roll vector needed allowing roll vectors large needed currently active set transactions 
consider example bit granule bits machine word transaction needs access granules objects 
strictly sequential mapping granules bits bits set array elements 
elements needed reflect requests entire vector allocated ored check 
map logical blocks array elements respectively 
allow second transaction enter system request granules 
requests logical blocks 
mapped simply extend array block map logical block array element 
logical block array element remains order preserve relative position blocks roll vectors 
ensure check operation proceed correctly logical block logical block transactions enter system number mapped blocks grow 
transactions complete may logical block longer active transaction case physical array element may reused new logical block 
check operation array elements ored active transactions saving great deal time 
discuss performance enhancement scheme dramatically improve performance situations roll queue long 
useful large number transactions posting unit time useful assigned hot spots objects accessed large percentage transactions 
access vector roll roll expected long vectors linked time implementation alternative suggested 
queuing rvs access vectors avs queued 
av vector produced check operation usually result oring rvs ahead checkers rv 
bottom oring operations done completely parallel concurrently progress time 
inefficient roll long 
note checking transaction ends av 
set avs produced just check operation proceeds top 
suggest background process execution operation starts second top point assessing bit release count data structure associated level roll sequentially ors previous av previous rv update current av 
costly check operation reduced simple copy operation avoids oring altogether 
tremendous time resource savings expected cost updating avs active transactions cost check scheme 
linking avs rvs reduces cost check essentially just copy vector part long oring process 
question trigger updater process 
post immediate updater pass sense newly posted transaction gets av 
old approach pass anyway top bottom 
way trigger wait releases take place new post invoke updater pass 
recommend triggering pass triggered fixed number time units number selected depending environment 
release implemented xor release mask vector rv mask vectors retained ored cumulative mask vector cmv 
cmv tell updater positions need updating 
way updater need read pertinent pages rv rvs put disk 
case transaction manager retain release list rls positions released tm updater pass 
rls translated page lists pls updater accumulate proceeds top 
way minimum pages get accessed 
effective small number hot objects 
case kbs dynamic transactions occur hard implement concept requesting necessary 

knowledge base heterogeneous distributed request ordering kb hydro kbs dbms systems built existing dbms adding inference engines postgres 
believe distributed knowledge data base management system developed bottom accommodate currently existing local knowledge data base management systems 
assume local system shelf binary licensed commercial product supports local serializability recoverability atomic commitment 
model global transaction assigned global transaction manager gtm global hydro object available global transactions 
gtm viewed simplicity centralized 
gtm interact possibly network determine processing site 
gtm cleared process site creates cohort local transaction manager process site manages interaction site 
interact object determine access local system 
local transactions intercepted assigned local transaction managers 
local level global subtransactions local transactions treated similarly 
kb hydro provides global serializability deadlock livelock freedom atomic commit allows multiple concurrent global transactions site reduces system wide scheduler bottlenecks allowing concurrency control activity execute parallel 
maintains special site roll bit position corresponds site 
gtm begins global transaction execution creating site request vector object srv bit site data access needed bits appending srv site roll site roll post 
site roll posting establishes global serialization partial ordering respect global transactions 
transaction involves inferencing gtm submits sub transaction 
gtm checks site roll determine sites immediately post local rv sends post request message cohort global sub transaction manager site 
local posting done acknowledges successful posting gtm 
gtm release site bit site 
gtm site roll periodically required sites available local posting 
local posting done parallel possible maintaining consistent global serialization partial ordering 
assume global schema exists provide mapping required data items specific bit positions 
unit local site maintains roll objects enforce global serializability supervise atomic commitment 
unit employs concurrency control options hcc hcc ii local system types class class class 
discuss option turn 
hcc hcc contains separate roll objects local transactions global transactions 
hcc post operation done follows 
local transaction manager ltm acting behalf local transaction submitted site enqueues rvs copies tail address atomic operation 
global subtransaction manager enqueues rv copies tail address atomic operation 
hcc check operation done follows 
ltm local transaction checks 
conflicts waits wait duration function number conflicts 
conflicts ltm may interacting local system 
global transaction checks 
conflicts waits similar ltm 
net effect check operations active global subtransaction path connected active transaction serialization graph eliminating possibility indirect conflict elm 
direct conflicts resolved local system compatibility local serialization partial ordering guaranteed site roll post release protocols 
consider variation hcc provides concurrency allowing active global sub transaction share path component local transactions 
noted increased concurrency gained expense considerable additional atomic commit overhead offers prepare statement programming interface 
prepare statement issued acknowledged guarantees issuer commit rollback statement rejected 
commercial systems provide full prepare sense additional atomic commit overhead required hcc variation sites may prohibitive recommend variation sites 
variation hcc just roll serves realization stored serialization graph ssg ber 
transaction manager cleared interact local system ways 
method provides fast test 
second method exhaustive 
exhaustive test fast quickcheck attempted determine local submission result just global transaction serialization graph site 
case clearly global transactions serialization graph component indirect global conflict result 
quickcheck performed comparing simple counter values number global transactions posted transaction posted number transactions removed roll source nodes graph 
difference values immediate submission permitted 
quickcheck fails full check roll searched starting transaction posted rv upward 
edge exists iff conflicting bits rvs position 
count kept number global transactions graph searched 
count exceeds check fails 
global transactions ssg component global transactions direct indirect conflict 
shown necessary condition global serializability elm 
hcc variation ensure correctness vector removal roll delayed vector source node serialization graph testing sense ber 
way guarantee background process called remove 
hcc ii local post operation hcc ii done writing fixed non user data item referred ticket 
approach inspired ticket approach geo 
ticket write operation acknowledged local system acknowledges post gtm 
local roll object hcc ii 
gtm releases corresponding bit site roll 
executes local sub transaction parallel 
correctness method seen follows 
hcc ii forces direct conflict global transactions show potential having indirect conflict 
local system force local serialization partial order compatible global serialization partial order imposed site roll 
terms stored serialization graphs ssgs hcc ii force global sub transactions site ssg component forces serialization partial order site roll 
global serialization graph cycle exist 

atomic commit protocols achieve atomic commitment global transactions define classes local systems 
variation standard phase commitment pc 
phase commitment protocols involve voting phase vote response prepare message gtm acting coordinator 
voting guarantee go way commit abort site 
presence local autonomy state difficult achieve 
second phase pc protocol decision phase gtm decision broadcasts ready order gtm come commit decision 
commitment features provided classify local systems classes class class class 
classes vary regard voting phase 
theorem motivate approach atomic commitment 
theorem global atomic commitment level local transactions enter system guarantee 
proof assume provided local transaction level 
appear serialization partial order involved sites global sub transaction conflict global sub transaction direct conflict occurs local systems resolve 
indirect conflict occurs local system detect 
guaranteed local transaction caused indirect conflict forced wait earlier global sub transaction committed 
guaranteed indirect conflict occurrences excluded atomic commitment achieved 
class class local systems externalize prepare command offer visible ready state 
issues prepare waits acknowledgment 
receiving acknowledgment votes moves ready state 
class local systems hac concurrency control units delays release operations global decision received implemented 
implementation global decision straight forward 
decision commit commit operation issued locally 
global decision abort abort operation issued locally 
local systems assumed provide local recoverability conflicting transaction committed serialization partial order uncertainty period 
class local systems hac ii concurrency control units need delay transactions 
global decision commit commit operation issued locally 
global decision abort abort operation issued locally 
class class local systems guarantee rigorous execution transactions site transactions allowed conflict uncommitted transactions 
examples rigorous dbmss include systems strict phase locking conservative timestamp ordering concurrency control method 
force writes ready record dt log ready list receiving acknowledgment read write local system 
moves ready state votes 
noted global sub transaction committed locally conflicting operations allowed local system uncertainty period 
global decision commit local commit issued commit acknowledged ready record removed 
global decision abort abort issued locally resulting sub transactions rolled back 
site failed decision phase decision commit uncommitted global subtransactions reissued dt log ready list order recovery 
note local transaction dependent uncommitted global transaction committed due local 
recovery local transactions rolled back local system 
re issue order local transactions may original issue order affect global serializability 
scheme followed hcc hcc ii concurrency control units 
class class default class local system commitment features known 
hcc local system acknowledges global sub transactions local commit resets zero ready state 
decision commit releases bits 
decision abort submit suitable compensating transaction write values undo effects locally release rv bits 
values force written dt log prior sending vote 
note doing provide interface roll guaranteed local system interface 

described design heterogeneous knowledge base management system known kb hydro 
connects autonomous theshelf local database knowledge base systems unified system 
inferencing engines rule bases existing local sites containing answer knowledge requests 
knowledge request assigned kbms local execution sites required inferencing engine resides 
shown global serializability atomic commitment attained kb hydro 
kb hydro achieves global serializability set objects roll request order linked list object developed 
kb hydro uses attribute level granularity access control mechanism reduce conflict substantially 
atomic commitment provided phase commit 
ber bernstein hadzilacos goodman concurrency control recovery dbms addison wesley 
elm elmagarmid helal supporting updates heterogeneous ieee data engineering conf 
eswaran notions consistency predicate locks database system cacm vol 
nov pp 

geo georgakopoulos rusinkiewicz sheth forced local conflicts data engineering kobe japan april pp 

kor korth levy silberschatz formal approach recovery compensating transactions proc 
vldb pp 

mcc mccann improved supercomputer database concurrency control roll technical report tr luo ordering accesses improve transaction processing performance int conf data engineering los angeles feb pp 

richter concurrency control extended query language th int conference supercomputing santa clara ca 
request order linked list roll concurrency control object proc 
ieee conf 
data engineering april kobe japan 
rajkumar ram hydro heterogeneous distributed database system proc 
acm sigmod int conf 
management data denver may 
nsf workshop multidatabases semantic interoperability tulsa ok november 
yu yu chang distributed query processing acm computing surveys vol 
december pp 

