approaches specification testing debra richardson owen malley cindy information computer science university california irvine ca current software testing practices focus exclusively implementation despite widely acknowledged benefits testing software specifications 
propose approaches specification testing extending wide variety implementation testing techniques applicable formal specification languages 
demonstrate approaches anna larch specification languages 
specifications provide valuable information testing 
software testing techniques rely solely implementation information select test data 
implementation testing techniques focus actual behavior implementation ignore intended behavior inasmuch test output manually compared 
hand considering information formal specifications enables testing intended behavior actual functionality 
specification testing techniques may direct attention aspects problem implemented incorrectly completely neglected implementation techniques reveal aspects chance 
specification testing techniques augment replace implementation structural testing 
specification considered implementation specific details data structures algorithms sufficiently tested 
propose explicit interaction specification testing techniques 
widely recognized software lifecycle include validation activities phase including quality supported part national science foundation ccr cooperation defense advanced research projects agency arpa order program code 
assessment developed documents test case selection documents 
shows software lifecycle model quality assessment test case selection pervasive phase selected test cases provide test plan focusing level abstraction considered phase 
soon executable software developed appropriate test cases run 
focus utilizing specifications selecting test cases 
specification test case selection traditionally consisted user selected test cases requirements specification 
specification informal case effectively done 
existing specification testing systems manage user selected test cases automated test case selection feasible 
stages lifecycle formal specification languages formal specification testing techniques employed 
particular integration unit test cases selected formal module specifications 
unfortunately techniques exist 
shaded boxes specification design test case selection focus research described 
describe research aimed developing approaches specification test case selection 
functional testing requirements done dawn programming consisted merely heuristic criteria mye 
difficult determine criteria satisfied 
part motivation developing implementation testing techniques advantage application automated satisfaction determined 
implementation techniques formalizations functional testing heuristics instance domain testing wc formal variant boundary value testing mye 
propose complete circle formalize specification testing 
believe traditional functional testing formalized extending implementation techniques applicable formal specification languages 
approaches developing applicable spectrum note complete model lifecycle instance include analysis activities maintenance 
functional testing distinct interpretations years 
referred testing guidelines requirements mye 
gave meaning functional testing 
requirements analysis architectural design algorithm design implementation transformation testing execution oracle systems requirements module interface specifications module design specification module implementation user selection spec test case selection design test case selection code test case selection system test plan integration unit integration test plan test plan unit test plan test case selection software lifecycle languages including algebraic specifications state specifications pre post conditions assertions procedural design languages 
considering wide variety functional implementation techniques simply coverage techniques 
section describe predominant testing methods categorizing types errors uncover 
section briefly overview past research specification testing 
section describe approaches specification testing developed extending notions underlying error fault testing techniques typically implementation source code 
approaches postulate specification may incorrect may influence development incorrect implementation 
second assume specification correct oracle 
sections apply approaches specification languages anna larch 
discuss intentions research 
implementation testing software testing considers structural white box unit testing independent testing single procedure information garnered analyzing procedure implementation 
structural techniques simply address path selection concerned test data selection 
path selection techniques concerned statements combinations statements executed increased error detection 
common path selection techniques control flow coverage techniques 
data flow coverage proposed sensitive error detection 
survey graph theoretic analysis path selection techniques appears 
general path selection technique augmented test data selection technique select data specific path 
judicious selection test data may inadvertently mask faults source code phenomenon called coincidental correctness 
classify test data selection techniques error fault 
error techniques geared revealing specific types errors error incorrect value produced program execution 
formal error techniques analyze partial path representation usually developed symbolic evaluation rc select test data expected sensitive specific types errors 
survey error testing appears cr 
domain testing focuses detection domain errors analyzing path condition selecting data boundaries path domain wc 
computation testing analyzes path computation selects special values algebraic manipulations cr 
fault testing selects test data focus detecting particular types faults fault mistake source code 
fault testing techniques consist rules applied source code select test data sensitive commonly introduced faults 
survey testing appears rt 
earliest formalized fault testing techniques introduced independently hamlet ham demillo lipton dls 
techniques followed attempt distinguish program tested variants set related programs differ defined types faults 
relay model provides fault error may wrong internal value observable error failure 
relay named analogy relay race 
technique test data selection rt 
relay guarantees detection errors caused fault user chosen fault classification 
relay model proposes selection test data originates error introduces incorrect state potential fault type transfers error route computations data flow failure revealed 
relay develops revealing conditions describe distinguish source variant 
test data set satisfying revealing conditions contains test datum reveals chosen faults 
extending error fault techniques applicable formal specification languages 
approaches spec error testing spec fault testing consider specification may faulty may source faults introduced implementation apply error fault techniques specification 
approaches oracle error testing oracle fault testing treat specification oracle violated error fault techniques applied implementation hopes detecting errors 
describe approaches provide examples application anna larch sections follow 
previous specification testing long acknowledged test case selection merely source code gg 
provides mathematical framework testing confirms need specification testing gou 
achieve understood results specification testing specifications written formal language defined semantics 
laski illustrates informal specifications fail uncover errors las 
traditional functional testing approach partition input domain equivalence classes select test data class 
goodenough gerhart refine general approach derive condition table multiple sources information column condition table represents test case combination conditions tested gg 
category partition method ostrand tester analyzes specification identifies separately testable functional units categorizes function inputs partitions categories equivalence classes ob 
approaches leave test case selection completely tester document reading activities 
researchers propose techniques focus selecting test cases specification 
weyuker ostrand propose revealing subdomains constructed subdividing path domains errors may derived specification wo 
richardson clarke propose partition analysis method develops partition overlaying implementation partition specification partition rc rc 
functional testing employs specification design information functional decomposition applies guidelines different functional classes select test cases 
fribourg gaudel approach selecting descriptions monotonically increasing collections test sets data types algebraic specifications gm 
gopal budd propose test adequacy technique mutation predicate calculus specification gb 
test case selection approaches sufficiently defined generally applicable 
techniques directed testing specifications implementation 
kemmerer proposes methods testing functional specifications symbolic execution specification rapid prototyping transformation procedural form kem 
goguen support testing algebraic specifications obj gt 
specification testing technique focuses selecting actual test cases specification 
approaches specification oracle provide debugging capabilities address test case selection 
gannon hamlet describe data abstraction implementation specification testing system provides facilities testing data type implementations algebraic specifications user supplied data 
anna tool set provides capabilities writing assertions compiled run time checks debugging methodology 
presents method uses programmer supplied assertions select test data detect inconsistencies code vel 
new specification testing approaches approach specification testing extend implementation techniques applicable formal specification languages provide testing methodology combines implementation specification testing 
defining test case selection criteria include formal error detection fault detection criteria 
suggest active specification oracle violated error detection specification satisfied 
focus test case selection ideas 
test case consists input criterion acceptance criterion 
input criterion condition describing data satisfies test case may specific actual test data general condition input domain output range 
acceptance criterion condition describing execution test case acceptable error revealed 
cases acceptance criterion output description may specify expected output values expected computation terms inputs output assertion 
acceptance criterion may human oracle denote ok 
examples test case descriptions 
structural coverage technique requires set paths executed test cases 
test case consist path condition describes path domain path representation derived symbolic evaluation rc human oracle applied actual output 
structural coverage test case input path condition accept ok actual output hand specification coverage technique pre post condition language larch interface language require test case pre post condition pair 
pre post condition coverage test case input pre condition accept post condition approaches mere fact test case exists satisfying input description implies error detected acceptance criterion false 
example case selected attempting violate pre post condition pair 
pre post condition violation test case input pre condition post condition accept false test case description may cover portion specification implementation 
instance assertion language anna may produce intermediate assertions acceptance test run evaluated appropriate location 
useful locations pre indicating execution post indicating execution 
intermediate assertion test case input accept specification testing approaches discussed select test cases described form 
describe approaches apply pre post condition pairs 
may obvious specifications languages represented form 
instance symbolic evaluation procedural specification provides path conditions path values serve pre conditions post conditions respectively 
representation test cases facilitates testing methods 
test cases test adequacy metrics 
test data selected means checked determine required test cases tested 
second test cases test data selection 
input criterion solved provide test data 
third test cases test oracle 
actual output produced test datum satisfying test case input criterion compared corresponding acceptance criterion 
specification error testing spec error testing attempts detect errors implementation derive misunderstanding specification errors specification 
error testing techniques typically analysis symbolic representation implementation ideas extended application formal specification languages 
symbolic evaluation specification partitions input space way program paths partition implementation domain 
form specification partition depends type specification language 
evaluation pre post condition language larch interface language partitions domain pre conditions 
representation derived symbolic evaluation symbolic pre post condition pairs 
assertion language anna ordered pairs assertions form pre post condition pairs 
evaluation algebraic specification language larch shared language state language selects specification paths partitioned procedural constructs path domain computation pair defines pre post condition pair 
general approach select test cases detect potential errors representation 
apply error techniques described pre postcondition representation 
pre conditions postconditions distinguished domain computation neatly path domain computation 
apply technique representations appropriate 
domain testing technique drives selection boundary values domain specified preconditions post conditions 
spec domain test case pre condition input boundary pre accept pre post ok spec domain test case post condition input pre boundary post accept post ok computation testing technique drives selection special values computations specified preconditions post conditions 
spec computation test case pre condition input special pre accept pre post ok spec computation test case post condition input pre special post accept post ok specification fault testing goal spec fault testing detect faults specification revealing specification failures detect coding faults due misunderstanding specification revealing implementation failures 
fault testing techniques postulate faults exist implementation select test cases detect faults exist 
techniques extended applied formal specifications 
fault classes course dependent specification language 
general approach select test cases detect potential faults specification source 
specification correct hypothesized faults may indicative faults introduced implementation 
employ relay model select revealing conditions distinguish variant source apply pre conditions post conditions 
spec fault test case pre condition input revealing variant pre pre accept pre post ok pre post condition pairs subscripted association obvious 
spec fault test case post condition input pre revealing variant post post accept post ok oracle error testing oracle error testing applies error techniques implementation explicitly attempting force violation oracle embodied specification 
domain testing techniques applied select boundary values path domain described path condition pc computation testing techniques applied select special values path computation described path values pv 
oracle domain test case pc input boundary pc pre post accept false oracle computation test case pv input special pv pre post accept false form oracle error testing incompleteness testing test cases selected portions input domain left unspecified 
violation oracle occurs pre conditions satisfiable 
necessarily indicate error specification may indifferent input simply incomplete supports tester determining implementation handles cases properly 
oracle incompleteness test case input pre accept ok oracle fault testing oracle fault testing focuses detecting specific faults implementation transferring resulting errors violate specification 
employ relay model context 
potential fault select revealing condition post condition error attempt force source variant satisfy post condition violate 
post condition violated fault detected cut transfer route 
extension transfer route required defined model 
extreme transfer output may required post condition violated 
oracle fault test case input pc revealing variant source source variant post post accept post ok specification testing anna overview anna anna specification language designed extend ada programming language 
closer de package intstack type stack type private max elems constant integer overflow underflow exception function length stack stack type return integer function empty stack stack type return boolean function full stack stack type return boolean function top stack stack type return integer function create return stack type procedure push stack stack type item integer full stack 
raise overflow raise overflow 
stack stack length stack length stack top stack item procedure pop stack stack type item integer empty stack 
raise underflow raise underflow 
stack stack length stack length stack top stack item function push pop stack type return stack type function returns stack result pushing random element stack popping 
axiom stack type 
push pop private subtype stack range integer range max elems type elem list array max elems integer type stack type record count stack range elems elem list record intstack anna ada package specification stack sign language specification language risks biasing implementation 
aside anna presents interesting vehicle specification testing 
intent anna described luckham von henke support activity explanation making programs readable facilitating program design 
provide overview anna language thorough descriptions appear 
anna specification consists assertions ada code 
ada source code anna constructs stand independent specification may developed 
assertions written anna constructs virtual text quantified expressions annotations 
assertions affect ada code comments restricted altering values actual objects code 
figures anna ada specification implementation stack package presents anna ada implementation square root function 
examples illustrate anna syntax utility testing 
virtual text virtual text simply ada style code refer change actual objects 
main purpose virtual code define functions annotations clarify intended meaning code 
stack example virtual function length appears specification body explain semantics push pop 
push pop appears quantified expressions package body intstack function length stack stack type return integer return stack count length function empty stack stack type return boolean return stack count elem list empty function full stack stack type return boolean return stack count elem list full function top stack stack type return integer return stack elems stack count top function create return stack type stack stack type elem list 
return stack create procedure push stack stack type item integer full stack stack count stack count stack elems stack count item raise overflow push procedure pop stack stack type item integer empty stack item stack elems stack count stack count stack count raise underflow pop intstack anna ada package body stack describe consistent behavior stack 
quantified expressions quantified expressions anna general classical order logic anna quantified expressions may defined values 
quantified expression example 
defined value exist values undefined 
true long value defined false false 
undefined values quantified expression definition classical logic 
example quantified expression stack example appears line stack type 
push pop push pop virtual routine checks newly inserted item goes top stack 
annotations annotations boolean expressions denote conditions hold true region code single statement entire program 
anna provides rich set annotations varying scope influence 
annotations may virtual text logical variables actual variables 
types annotations may variable values calculation particularly case annotations concerning preconditions post conditions subprograms 
distinguish variable original current values key words 
types statement annotations simple statement annotation constrains state execution preceding statement compound statement annotation constrains execution succeeding compound statement 
annotation line square root simple statement annotation hold execution statement line 
object annotation condition associated specific object equivalent placing simple statement annotations object 
likewise type annotation condition types applies objects type 
assertions lines square root object annotations high low respectively 
annotations imply restrictions mid 
subprogram annotation provides means listing preconditions post conditions subprogram 
annotations illustrated stack specification push pop conditions meet 
subprogram annotations lines indicate push increment stack size store item top stack 
lines indicate pop decrement stack size return top stack item 
complete annotations explain behavior stacks saying package stacks implemented 
exception annotations come varieties 
weak exception annotation describes conditions true exception raised 
strong exception annotation describes conditions exceptions raised 
illustrated stack specification 
pop strong exception annotation line states incoming stack full overflow exception raised 
addition weak exception annotation line says exception overflow raised stack remain unchanged 
push similar exception annotations 
context annotations simply expand concept clauses statically checked compile time 
useful integration testing consider 
anna package axioms define properties allowable operations private type algebraic specifications 
allows powerful method specifying data types 
axiom line stack specification defines lifo behavior stacks 
package states method specifying trace actions performed package operations 
package regarded having type 
initial value initial state package type trace subprograms package invoked 
useful state refer sequence calls push pop particularly defining axiom describes virtual function push pop defined simulate action pop push stack elem 
done directly ada allow modification function parameters 
function squareroot natural return natural return natural 

low natural low mid high natural high mid mid natural low high loop low high exit mid mid mid high mid elsif low mid low low low mid mid low high loop return mid squareroot anna ada implementation square root behavior push followed pop 
specification error testing suppose select domain test cases object annotation low mid squareroot line 
annotation object annotation high mid pre conditions 
postcondition 
symbolic evaluation pre condition post condition pair symbolic input derives pre post condition pair pre post low post mid post high post mid post mid post 
mid post selecting boundary values pre condition select test case input accept high post mid post low post mid post mid post 
mid post ok satisfies input condition execution violates loop assertion 
test case focuses attention low determine low initialized 
testing approaches assume initialization low fixed zero 
specification fault testing applying spec fault testing squareroot suppose posit annotation high mid high mid line 
partial revealing condition pc true origination condition origination condition infeasible transfer need considered 
revealing condition satisfied assured variant fault variant module equivalent original 
original redundant need high mid possible satisfy high mid 
oracle error testing apply oracle error testing square root symbolically evaluate path assignment low low line path representation derived pc pv low high mid assignment low follows suppose attempt violate object annotation low 
select test case input 
accept false value satisfies input condition 
reveals inconsistency annotation low mid assignment low low branch line 
object annotation low low mid 
oracle fault testing suppose hypothesize high squareroot high line 
revealing condition pc true origination condition oc transfer condition tc 

test case input oc tc accept low high ok satisfies input condition causes violation loop assertion proposed variant original source violate assertion 
inspection reveals variants run correctly right side loop assertion comes suspicion corrected high 
specification testing larch overview larch larch tiered specification language win shared language tier interface language tier 
shared language specification defines implementation language independent theory data type language specific interface language describes module interfaces theory 
shared language specification language independent written implementation language known reused programs different languages 
hand interface language specifies module implementation level interface 
trait imports integer introduces empty intstack push intstack integer intstack top intstack integer rest intstack intstack size intstack integer closes intstack new push partitioned top rest constrains intstack intstack integer rest push rest empty exempt top push top empty error size empty size push size larch shared language specification stack larch shared language larch shared language extends capabilities algebraic specification 
extensions increase power algebraic specifications provide information consistency checking 
shared language traits sorts terms correspond modules types objects respectively implementation language 
provides shared language trait defining stack integers 
trait may import include previously defined traits 
case new trait may rely properties previously defined trait 
imported trait affected axioms new trait included trait extended constrained new trait 
import include clauses allow inheritance modularization traits facilitate information hiding 
trait integer imported define trait 
closes clause guarantees term sort defined trait sequence specified operations 
closes clause indicates stack sequences push empty stack 
partitioned clause means terms sort equal functions mentioned partitioned clause equal 
top rest partition stacks top rest equal stacks stacks equal 
exempt clause states results left intentionally unspecified 
larch interface language larch family interface languages provides interfaces theory shared language specification implementations 
different implementation languages different properties different interface languages 
example clu interface language provides sake clarity shared language identifiers upper case interface language identifiers mixed case 
package intstack provides mutable stack intstack function empty stack returns boolean pre true post empty size function full stack returns boolean pre true post full size function top stack returns integer pre true post top top function create return stack pre true post create empty new create procedure push stack integer pre size mutates post post push procedure pop stack integer pre size mutates post post top pre post rest pre pre size post raise larch interface specification stack signals clusters iterators pascal 
hand pascal interface language provides semantics var parameters clu 
design goal interface languages approximate syntax implementation language 
examples ada interface language 
provides interface specification intstack previous example 
limit visibility interface language shared language provides clause links package set shared language traits visible 
procedure function package implementation specified list pre post condition pairs 
pre post pair pre post pre true function executed post true 
conditions arbitrary order predicates including quantifiers refer shared language component values variables 
conditions arbitrary specifi clu pascal interface languages described previous papers 
package intstack provides mutable stack intstack rest top implement rest top top defined rest added 
function rest stack returns stack pre empty post rest rest rest intstack mapping function concrete values cations incomplete non deterministic 
mutates clause middle pre post pair indicates parameters global variables modified function 
post conditions values parameters global variables function 
denote value parameter state function called value function called 
evaluating larch specifications implementation state predicates larch specifications refer variable refer variable value concrete value 
example pre condition push size 
size defined concrete values value 
determine particular state execution implementation satisfies larch assertion mapping concrete values implementation values shared language specification required 
similar gannon hamlet mills verifying correctness modules specifications 
mapping concrete values computed mappings function trait partitioned clause implemented function interface specification 
unfortunately extension larch may require programmer implement unnecessary functions 
stack example implementor need implement equivalent functions top rest implemented 
interface language specification stack extended mapping information 
related concrete functions recursing data structure possible find conditions equivalence concrete values 
stack concrete value broken top rest algorithm recursively break results atomic pieces 
gives example process 
shared language rules functions partitioned clause complete solution selected conditions 
larch specification oracle concrete inputs outputs converted representations 
input output pair satisfies pre postconditions oracle accept test reject 
input output concrete value conditions top rest top rest top rest error value push push push empty solving value 
function squareroot integer returns integer pre post squareroot 
squareroot pre post raise domain error squareroot larch interface specification squareroot representations available non determinism incompleteness features interface language exempt clauses shared language trait problem 
specification error testing application spec error testing domain testing larch pre post conditions 
compute value boundary pre post condition recursively analyze expression condition 
operator remove subexpression time select test case violates removed condition test case satisfies 
impossible violate removed condition condition necessary 
operator select test case cause subexpression true false 
additional test case subexpressions true tested 
test cases infeasible specification incomplete analyzed incompleteness testing 
test case descriptions examples approach applied squareroot 
input accept squareroot 
squareroot raise domain error ok input squareroot 
squareroot accept squareroot 
squareroot input squareroot squareroot accept squareroot 
squareroot specification fault testing spec fault testing tester ensure specific faults specification implementation 
larch tiers faults hypothesized tier 
consider fault interface specification 
hypothesized fault post condition pop squareroot line top rest rest top rest 
revealing condition distinguishes alternatives 
origination condition rest transfer condition top rest top input size top rest top accept top rest ok test case differentiates specification variant 
test case may reveal fault specification alternatively may reveal fault implementation decrementing count retrieving element caused misunderstanding specification oracle error testing apply oracle error testing corrected ada code squareroot larch specification 
example pick path symbolic representation derived pc pv return symbolic values evaluate postcondition specifications 
violate oracle find solution negation post condition satisfied restriction path condition 
input accept false clearly values satisfy input condition violations specification chosen path 
approach oracle error testing incompleteness testing 
larch incompleteness introduced exempt clauses shared language specification represent terms specified value trait theory missing cases input ranges violate pre conditions function 
larch stack specification ambiguities caused rest empty exempt pushing stacks elements 
test cases executed sure implementation output acceptable 
test case rest input empty accept ok test case push input size accept ok oracle fault testing suppose hypothesize stack elems stack count stack elems stack count push line 
relay model reveal potential fault transferring error post condition variants satisfies specification 
words variant partitioned clause stack specification equality stacks divided test top rest 
sufficient necessary condition derived comparing tops stacks 
fault method transfer incorrect state top push stack item variants satisfy specification 
relay selects conditions transfer incorrect state top push 
pc stack count elem list origination condition transfer condition stack elems stack count item corresponding test case description input stack count elem list stack elems stack count item variant accept ok push elem element different value item test case executes correctly hypothesized fault 
describe research formalizing test case selection specifications 
extend notions error fault testing provide spec testing spec fault testing 
augment implementation techniques actively specifications oracles oracle error testing oracle fault testing 
apply techniques specification languages anna larch 
exploring implementation testing techniques may formal specifications 
continuing examine specification languages ideas apply 
kem refine rea candidates 
serves demonstrate broad applicability specification testing help choose language focus efforts 
formalize specification approaches test case selection requires settling time single semantic definition 
gain solid understanding error detection capabilities approach evaluate strengths weaknesses 
focusing development testing tools anna specification language part team effort 
team framework developing tools contain generic analysis capabilities designed language independent 
currently writing front anna translate team common internal representation developing symbolic evaluation capabilities anna 
enable test case selection capabilities team automate test data generation test case descriptions 
believe specification testing developed incorporated software development lifecycle 
requires formal specification languages specification design phases 
test cases test specifications early lifecycle design implementation 
intend explore possibility extending specification languages incorporate test case descriptions user specify environment generate automatically 
believe developers reluctant formal specification languages demonstrate concrete advantages gained testing 
choquet fribourg 
gaudel 
test set generation algebraic specifications logic programming 
journal systems software 
lori clarke andy podgurski debra richardson steven 
formal evaluation data flow path selection criteria 
ieee transactions software engineering se november 
cr lori clarke debra richardson 
rigorous approach error sensitive testing 
proceedings sixteenth hawaii international conference system sciences pages january 
lori clarke debra richardson steven 
team support environment testing evaluation analysis 
proceedings acm sigsoft third symposium software development environments pages november 
appeared sigplan notices software engineering notes 
dls richard demillo lipton 
hints test data selection help practicing programmer 
ieee computer april 
gb gopal tim budd 
program testing specification mutation 
technical report tr university arizona november 
gg john goodenough susan gerhart 
theory test data selection 
ieee transactions software engineering se june 
john gannon richard hamlet mills 
theory modules 
ieee transactions software engineering se 
john guttag james horning wing 
larch family specification languages 
ieee transactions software engineering pages september 
gm 
gaudel 
algebraic specifications software testing theory application 
rapport lri 
john gannon paul richard hamlet 
implementation specification testing 
acm transactions programming languages systems july 
gou john 
mathematical framework investigation testing 
ieee transactions software engineering se november 
gt joseph goguen joseph 
obj language writing testing formal algebraic program specifications 
ieee conference specification reliable software pages 
ham richard hamlet 
testing programs aid compiler 
ieee transactions software engineering se july 
william 
theory testing 
edward miller william editors tutorial software testing validation techniques pages 
ieee new york 
william 
functional approach program testing analysis 
ieee transactions software engineering se october 
kem richard kemmerer 
testing formal specifications detect design errors 
ieee transactions software engineering january 
david luckham anna language annotating ada programs 
technical report stanford university july 
las janusz laski 
testing top program development 
proceedings second workshop software testing verification analysis pages banff july 
acm sigsoft ieee cs software engineering technical committee 
david luckham friedrich von henke 
overview anna specification language ada 
ieee software march 
mye myers 
art software testing 
john wiley sons new york 
ob thomas ostrand marc 
method specifying generating functional tests 
communications acm june 
thomas ostrand ron sigal elaine weyuker 
design tool manage specification testing july 
rc debra richardson lori clarke 
partition analysis method increase program reliability 
proceedings fifth international conference software engineering pages san diego california march 
rc debra richardson lori clarke 
partition analysis method combining testing verification 
ieee transactions software engineering se december 
rc debra richardson lori clarke 
testing techniques symbolic evaluation 
anderson editor software requirements specification testing pages 
blackwell scientific 
rea reasoning systems palo alto california 
refine user guide 
rt debra richardson margaret thompson 
relay new model error detection 
coins technical report university massachusetts amherst massachusetts december 
rt richardson thompson 
relay model error detection application 
proceedings second workshop software testing verification analysis pages banff canada july 
acm sigsoft ieee cs software engineering technical committee 
vel 
method test data selection 
journal systems software 
wc lee white edward cohen 
domain strategy computer program testing 
ieee transactions software engineering se may 
win jeannette wing 
tiered approach specifying programs 
phd thesis mit 
wo elaine weyuker thomas ostrand 
theories program testing application revealing subdomains 
ieee transactions software engineering se may 
