data flow frequency analysis ramalingam ibm watson research center box yorktown heights ny usa rama watson ibm com conventional dataflow analysis computes information facts may hold execution program 
useful program optimization know probability fact holds true program execution 
provide precise formulation problem large class dataflow problems class finite bi distributive subset problems 
show reduced generalization standard dataflow analysis problem requires sum paths quantity usual meet paths quantity 
show kildall result expressing meet paths value maximal fixed point carries generalized setting 
outline ways adapt standard dataflow analysis algorithms solve generalized problem intraprocedural interprocedural case 
conventional dataflow analysis computes information facts may hold execution program 
example type analysis answers questions particular expression may evaluate value particular type run time 
useful program optimization know probability fact holds true program execution 
example useful optimizations performed known expression evaluates value particular type high probability high frequency 
probability certain branch program taken run time estimated statically profiling information :10.1.1.111.6293
show frequency probability dataflow facts computed large class dataflow problems class call finite bi distributive subset fbs problems edge control flow graph annotated probability 
appear proceedings acm sigplan conference programming language design implementation philadelphia pa may 
finite bi distributivity requires set dataflow facts finite dataflow functions distribute set union set intersection 
class dataflow analysis problems general class separable problems known gen kill bit vector problems general class finite distributive subset problems introduced reps 
problem computing expected frequency various statements program controlflow graph edges labelled probability studied previously 
aware previous generalizing techniques general dataflow analysis problems 
provide theoretical foundation dataflow frequency analysis outline algorithms problem 
organized follows 
section overview lattice theoretic framework dataflow analysis class finite distributive subset problems 
section provide precise formulation problem studied 
show reduced generalization standard dataflow analysis problem requires sum paths quantity usual meet paths quantity 
section show kildall result expressing meet paths value maximal fixed point carries generalized setting 
section show result utilized compute required solution standard elimination techniques dataflow analysis 
reinterpret problem terms exploded control flow graph introduced reps show problem reduces fairly known markov chain problem exploded graph minor difference 
section show extend results handle procedures 
section presents 
preliminary material review lattice theoretic framework dataflow analysis developed kildall 
monotonic dataflow analysis problem tuple ffl semilattice meet operation ffl set monotonic functions ffl control flow graph entry vertex ffl dataflow fact associated entry vertex 
ffl map edges dataflow functions convenience assume entry vertex predecessors 
ignore procedures section 
function extended map path graph function path defined ffi gamma delta delta delta 
identity function 
path entry vertex vertex define state 
meet paths mop solution dataflow analysis problem defined follows def paths state paths denotes set paths kildall showed mop solution maximal fixed point mfp collection equations gamma frg provided distributive 
starting point restricted version monotonic dataflow analysis problem finite distributive dataflow analysis problem dataflow analysis problem semilattice powerset finite set set distributive functions meet operation set union 
essentially intraprocedural version framework introduced reps 
analysis problems meet operation set intersection transformed set union problem considering dual noted 
essentially finite set facts may may hold true various program points problem determine facts hold true program point 
occasionally convenient think powerset set functions bitvector 
meet paths solution program point oe oe fact may hold program point oe function said distributive oe oe oe oe 
strictly speaking kildall result requires dataflow function distribute arbitrary meets oe oe oe oe 
particular empty meet empty set top element semi lattice distributivity condition requires 
usual gen kill functions satisfy 
luckily requirement 
relevant vertices graph unreachable entry vertex 
particularly significant problem 
hold program point 
treat oe subset places function places 
words set characteristic function interchangeably 
context usage clear 
example consider reaching definitions problem 
case set definitions statements assign value variable program 
oe solution particular program point oe definition may reach program point 
expected frequency dataflow facts interested extending dataflow analysis determine just fact may may hold program point probability fact may hold true point number times fact expected hold true point 
assume edge control flow graph associated probability prob 
interpret prob probability execution follow edge reaches obviously sum probabilities outgoing edges vertex exit vertex outgoing edge 
note consider probabilities obtained 
may estimated various heuristics may profile data 
see section 
consider path entry vertex vertex product prob edges path denote prob program execution follow path recall state denotes abstraction state execution path 
combine information identify number times various facts expected hold true point single execution program 
definition def paths prob def paths state prob denotes number times vertex expected execute program execution denotes number times fact expected hold true program point recall state holds true state gives probability holds true 
essential assumption probability program execution particular branch independent execution history obviously hold true reality 
assumption necessary get handle problem 
note path vertex occurs denote number occurrences similarly holds denote number occurrences holds true execution respect dataflow analysis framework consideration 
exit denote exit vertex control flow graph 
argue expected values defined follows paths exit prob occurs paths exit prob holds shown definition yields values definition exists path exit probability non zero 
definition take non terminating program execution account somewhat complicated extend definition handle cases 
definition handles cases correctly chose definition 
interested computing quantities step reformulate problem framework dataflow analysis framework significant difference 
denote set non negative reals extended 
denote set extended new element denote maps set domain values interested 
explained interested computing jdj values vertex elements essentially combine jdj values vector 
domain values semilattice 
usual meet operation non idempotent sum operation 
define summation operator theta follows oe oe def oe oe definition extended straightforward fashion infinite sums oe def oe possibly infinite index set infinite sum oe defined dealing non negative numbers 
oe converge finite value value 
define scalar multiplication maps non negative real number ff delta theta follows ff oe def ff oe tricky part defining 
define 
turns right definition guarantees multiplication continuous function 
non zero ff ff 
inject values follows oe define oe ae oe def oe def oe typographical reasons denote injection function oe def oe 
note oe thought subset oe fg 
consider sum paths quantity definition def paths prob state definition essentially combines jdj scalar quantities defined vertex definition vector quantity lemma shows 
lemma proof see appendix 
standard dataflow analysis deal domain values computed vertex belong transfer functions associated edges graph belong trying switch domain seen inject value oe original dataflow lattice value oe new pseudo lattice interest 
see inject transfer function corresponding transfer function stages 
consider distributive function function completely determined oe define ae def oe def fdg gamma oe definition may understood easiest interpreting fdg oe subsets gamma set difference operator 
function essentially representation relation defined reps 
see 
representation relation denoted binary relation express terms follows conversely expressed terms follows fy reps show representation relation pictorially depicted bipartite graph jdj vertices 
example set fa cg 
representation relation function fcg fbg represented graph reps information binary relation convenient purpose function convenience treating elements subsets current discussion 
switch treating functions functions think function thing show inject transfer function corresponding transfer function follows oe def oe soon see definition sense functions satisfy simple property 
say function bi distributive distributes set union set intersection terms representation relation discussed distributive function bi distributive iff vertex representation relation incoming edge 
usual bit vector problems reaching definitions context standard dataflow analysis representation relation serves things replace domain domain side benefit transfer functions extended truly distributive satisfy oe oe 
see footnote 
domain distinguish situations execution reaches program point dataflow facts hold true ii execution reach program point 
abstractly represented empty set 
switch powerset distinction 
empty set denotes execution reach program point fg denotes execution reaches program point dataflow facts hold true 
get ahead moment order understand definition 
consider edge transfer function assume state oe oe indicates expected hold true assume tells facts hold true holds true things simpler assume fact holds true depends fact say fact expected hold true 
quantity oe trying define 
definition follows automatically reasoning 
see lemma proof intuition definition 
available expressions live variables bi distributive transfer functions 
copy constant propagation see example bit vector problem bi distributive problem 
hand variables problem bi distributive statement possibly uninitialized possibly uninitialized statement representation relation associated transfer function contain incoming edges vertex corresponding fact possibly uninitialized 
lemma oe boe provided bi distributive proof see appendix 
lemma essentially says diagram commutes recall oe oe remember intention move analysis domain domain commutativity diagram indicates right track 
done 
consider transfer function associated edge define new transfer function def prob extend transfer function paths usual 
recap stage domain values summary function defined associated edge control flow graph transfer function essentially dataflow analysis framework albeit summary operator idempotent 
lemma establishes performing execution new framework equivalent performing execution original framework weighting result probability execution path 
folded probabilities framework 
lemma assume bi distributive edge path graph oe boe prob oe proof see appendix 
establish sum paths quantity computed framework yields values set compute place 
definition def paths bc theorem bi distributive edge 
proof follows directly lemma definition 
concludes task shown values want compute defined definition sum paths solution non idempotent dataflow analysis framework 
expected frequencies fixed point task show desired sum paths quantity computed fixed point collection equations 
doesn follow directly kildall result 
primarily summary operator meet join operator idempotent set facts lattice 
see section kildall theorem generalizes holds true despite 
function said linear transformation distributes addition scalar multiplication ff fi ff fi said continuous distributes infinite sums ff ff lemma distributive continuous linear transformation 
continuous linear transformation fi fi 
proof see appendix 
familiar linear algebra may note 
somewhat vector space underlying set semiring field 
serves basis definition standard way extending function defined basis linear transformation space 
restriction distributive comes defined distributive definition denote collection equations xu gamma frg bc theorem continuous linear transformation edge sum paths values form fixed point set equations 
assignment satisfies collection equations 
proof see appendix 
establish result similar kam ullman result relating mop mfp 
theorem ordering ordering induced usual arithmetic ordering oe oe say oe oe iff oe oe 
theorem function linear transformation edge equal fixed point proof see appendix 
theorem continuous linear transformation edge fixed point set equations proof immediate theorems 
follows theorem lemma fixed point yield expected frequencies finite bi distributive subset problems 
computing fixed point turn question compute desired information 
looking closely set equations observe domain variables set equations variable corresponds jdj dimensional vector 
replacing vector variable xu set scalar variables fy jd corresponds xu break equation jdj equations 
structure resulting set equations better understood considering exploded control flow graph introduced reps 
exploded graph obtained replacing vertex control flow graph jdj vertices replacing edge set edges 
rm recall denotes representation relation function edges control flow graph replaced representation relation transfer function associated edge 
original dataflow analysis problem reduces reachability exploded graph single procedure case 
vertex exploded graph corresponds new scalar variable label edge 
exploded graph probability corresponding edge original graph prob 
def prob 
reduces set equations form ae bc prob summation taken edges exploded graph 
recall entry vertex original graph 
set linear equations particularly simple form 
fact reveal just dataflow analysis reduces reachability exploded graph problem interested reduces simple algebraic path problem see exploded graph algebraic path problem closed semiring closure operator defined ff ff def ae gamma ff ff ff algebraic path problem known markov chain problem consequently standard algorithms solving algebraic path problems 
algorithms worst case complexity number vertices exploded graph jv jdj 
algorithms algebraic path problem usually inefficient dataflow analysis fail utilize sparsity graph computing unnecessary information form solution pairs problem 
purposes efficient adapt various elimination dataflow analysis algorithms solve problem 
see survey elimination algorithms 
algorithms linear linear size graph 
allen cocke interval analysis algorithm example linear reducible flow graphs loop nesting depth bounded constant 
tarjan algorithm linear reducible flow graphs 
algorithms arbitrary graphs complexity higher irreducible graphs 
apply elimination algorithms original graph exploded graph 
exploded graph larger number edges exploded graph jej jdj jej number edges original graph vertex representation relation function incoming edge closure composition corresponding dataflow functions computed constant time 
original graph smaller closure corresponding dataflow functions expensive jdj worst case 
appears difficult determine minor difference markov chains assumed sum probabilities edges going vertex 
true original control flow graph need true exploded graph 
alternatives better worst case complexity measure 
general appears better apply elimination algorithm exploded graph exploits sparsity graph performing closure composition dataflow functions 
drawback exploded graph may irreducible original graph reducible 
address issue may come mind readers 
set linear equations real variables usually unique solution multiple solutions solution 
possibilities relate problem involves set linear equations domain addition restriction positive reals eliminates possibility solution exists 
multiple solutions exist existence fixed point guaranteed restriction positive reals 
possibilities seen best consider variable eliminated recursive equation 
consider equation ff expression containing ff equation reduces non recursive yu gamma ff ff non zero equation finite solution 
unique solution domain 
ff infinitely solutions yu fixed point want compute 
ff solutions yu fixed point 
possibilities captured precisely transformed non recursive equation yu ff closure operator defined previously 
recall 
note closure operator constant time operation 
closure operator elimination techniques imply worry convergence algorithm 
handling interprocedural analysis procedures add new twist meet paths formulation dataflow analysis problems 
program multiple procedures represented supergraph contains control flow graph procedure control flow graph entry vertex denoted exit vertex denoted exit entry vertex unique procedure denoted main considered entry vertex program 
procedure call site represented vertices call vertex call return site vertex return edges call call edge exit return return edge procedure called 
precise interprocedural dataflow analysis algorithm computes meet valid paths solution opposed meet paths solution 
considers corresponding call edge call return edge exit return matching open close parentheses path said level valid path sequence call return edges path forms balanced sequence parentheses 
path said valid path expressed concatenation zero level valid paths call edges 
denote vp set valid paths level valid paths respectively generalize definition interprocedural case take sum valid paths 
call return edges labelled probability 
show compute quantity adapting existing interprocedural intraprocedural analysis techniques 
algorithm consists phases 
phase compute summary information procedure 
define summary set paths quantity prob denote 
quantity linear transformation represented jdj theta jdj matrix real values labelled bipartite graph jdj vertices jdj vertices just labelled representation relation 
phase algorithm compute summary information procedure summarizes set level valid paths exit quantity exit 
absence recursion information computed bottom call graph intraprocedural algorithm procedure 
presence recursion information computed iteratively 
introduce symbolic variable denote summary information procedure 
explained earlier represents jdj theta jdj scalar variables 
replace interprocedural edges summary edges callsite procedure introduce edge call return transfer function analyze procedure separately 
analysis control flow graph done intraprocedural case edges representation relation summary edges labelled symbolic variables real values 
perform analysis adaptation tarjan generalized path algorithm 
algorithm performs elimination symbolically computes symbolic regular expression expression containing operators vertex procedure quantity case essentially expresses symbolic expression set variables fx calls qg 
consider particular value computed exit vertex procedures 
expresses summary function procedure expression summary function procedures calls 
solve collection equations iteration numerically converge fixed point 
intraprocedural case may non linear equations need iterative techniques elimination solve equations 
problem iterative techniques iteration may converge infinite recursion call graph expected execution frequency procedure fixed point 
possible way tackling problem compute just expected execution frequency procedure done just elimination techniques 
values may proceed iterative techniques compute frequency dataflow facts 
values heuristically alter probability labelling values finite 
summary values computed vertex procedure computed evaluating corresponding symbolic expression 
phase compute solution entry vertex procedures construct call graph program representing call site edge calling procedure called procedure 
consider call site procedure associate edge corresponding call site transfer function call quantity readily available results analysis phase 
apply intra procedural algorithm call graph gives meet valid paths solution entry vertex procedure 
phase compute rest solution meet valid paths solution vertex procedure obtained applying solution originally motivated procedure cloning optimization generates specializations procedures specific subtypes types formal parameters 
efficient code generated specialized versions unspecialized version types arguments precisely known 
necessary selective specializations generated avoid code explosion 
requires knowledge procedures executed frequently arguments different types passed various procedures 
information typically gathered run time tracing tools record relevant information 
explores possibility computing information statically branch conditional node labelled value indicates probability branch taken 
probability labelling may computed simple heuristics profiling tools static analysis 

labelling computed profiling tools certainly convenient gather simple data run time having gather run time specialized information varies analysis problem 
profile data problem specific dataflow information gathered existing shelf execution profilers 
step addressing problem 
presents theoretical foundation algorithms computing frequency dataflow facts 
remains done 
consider type analysis problem arises mentioned cloning optimization 
exist simple effective type analysis algorithms see fall fbs framework 
powerful type analysis algorithms distributive 
results apply algorithms 
remains seen done algorithms 
hope finite monotonic dataflow analysis problems formulate appropriate equations fixed point upper bound frequency dataflow facts extending corresponding result monotonic dataflow analysis 
second issue concerns fact problem requires solving equations real valued variables traditional dataflow analysis problems deal discrete lattices 
consequently need deal issues precision error magnification 
instance sensitive solution initial probability assignment 
small change probability assignment cause big change final solution 
designing algorithms solve problem appropriate go traditional dataflow elimination algorithms look elimination iteration schemes area numerical analysis deal issues 
related question needs addressed concerns convergence complexity iterative methods interprocedural case 
intraprocedural problem solved convergence problem 
third issue deserves consideration assume probability program execution particular branch independent execution history 
remains seen approximation affect solution 
problem computing expected frequency execution various statements program control flow graph edges labelled probability studied previously 
couple papers utilized estimates probability specific facts program optimization 
proebsting fischer outline register allocation algorithm utilizes estimates probability register allocated variable remaining register subsequent variable 
patterson computes probability various variables having various values utilizes information branch prediction applications optimizations instruction scheduling 
papers results relating quantities computed formally defined quantity sum path quantity 
explore problem generalized setting 
exploded control flow graph introduced reps provides natural easy way understand problem reduction algorithm 
fact structural similarities extension reps outlined sagiv 
sagiv study class dataflow problems call interprocedural distributive environment ide problems 
similarities arise fact sagiv show ide problems reduce simpler dataflow problem involving simpler lattice exploded graph show dataflow frequency problem fbs problems reduces simple markov chain problem exploded graph 
primary difference final reduced form problems cases summary operator idempotent case 
author anonymous referees helpful comments 
allen cocke 
program data flow analysis procedure 
commun 
acm march 
bacon wegman zadeck 
rapid type analysis 
technical report rc number pending ibm watson research center 
ball larus 
optimally profiling tracing programs 
conference record nineteenth acm symposium principles programming languages pages 
paul carini michael hind srinivasan 
flow sensitive type analysis 
technical report rc ibm watson research center 
cormen leiserson rivest 
algorithms 
mit press cambridge ma 
dean chambers grove 
selective specialization object oriented languages 
proceedings acm sigplan conference programming language design implementation pages 
minoux 
graphs algorithms 
john wiley sons new york 
kam ullman 
global data flow analysis iterative algorithms 
acm 
kam ullman 
monotone data flow analysis frameworks 
acta informatica 
kildall 
unified approach global program optimization 
conference record acm symposium principles programming languages pages new york ny 
acm 
knoop steffen 
interprocedural coincidence theorem 
kastens editors proceedings fourth international conference compiler construction lecture notes computer science vol 
pages 
springer verlag 
pande barbara ryder 
static type determination 
proceedings sixth usenix technical conference pages april 
pande barbara ryder 
static type determination aliasing 
technical report lcsr tr department computer science rutgers university july 
patterson 
accurate static branch prediction value range propagation 
proceedings acm sigplan conference programming language design implementation pages 
proebsting fischer 
probabilistic register allocation 
proceedings acm sigplan conference programming language design implementation pages 
ramamoorthy 
discrete markov analysis computer programs 
proceedings acm th national conference pages 
reps horwitz sagiv 
precise interprocedural dataflow analysis graph reachability 
conference record second acm symposium principles programming languages pages 
ryder 
elimination algorithms data flow analysis 
acm computing surveys september 
sagiv reps horwitz 
precise interprocedural dataflow analysis applications constant propagation 
appear theoretical computer science 
technical report cs tr computer sciences department university 
sagiv reps horwitz 
precise interprocedural dataflow analysis applications constant propagation 
proceedings fase colloquium formal approaches software engineering pages 
sharir pnueli 
approaches interprocedural data flow analysis 
muchnick jones editors program flow analysis theory applications pages 
prentice hall englewood cliffs nj 
tarjan 
fast algorithms solving path problems 
acm 
wagner graham harrison 
accurate static estimators program optimization 
proceedings acm sigplan conference design implementation pages 
wu larus 
static branch frequency program profile analysis 
proceedings th international symposium microarchitecture pages 
appendix proof lemma paths prob state paths prob state paths prob equation similarly paths prob state paths prob state paths prob state equation paths state prob state lemma bi distributive oe exists unique oe oe oe 
proof oe 
consider case oe 

follows directly definition assume oe 
distributive oe oe fdg oe fdg 
oe fdg 
unique fd fd fd fd fd fd bi distributive oe 
contradicts assumption oe 
follows unique oe 
follows directly monotonicity oe oe fdg oe 
result follows 
proof lemma need show oe boe consider oe precisely oe 
lemma implies exists unique oe precisely exists unique oe 
consequently oe boe oe oe unique oe oe consider oe precisely oe 
previous lemma implies oe precisely oe 
words oe consequently boe oe oe oe consider boe oe boe oe oe oe fdg gamma oe oe oe fdg gamma oe oe oe proof lemma follows induction path length 
lemma follows trivially empty path transfer function identity function frameworks 
assume result holds specific path show holds true path consisting path followed edge 
boe boe prob oe induction hypothesis prob prob oe definition prob prob oe linear transformation prob oe lemma prob oe proof lemma assume distributive 
ff ff ff ff ff ff assume continuous linear transformation 
fi ff fi ff fi ff ff fi proof theorem result trivially holds true entry vertex empty path path 
recall assumed entry vertex predecessors 
consider vertex entry vertex 
paths bc paths bc paths bc linear proof theorem vertex fixed point set equations finite set paths entry vertex vertex show bc induction sum lengths paths base cases empty case bc result holds fixed point element 
ii singleton consisting empty path case entry vertex bc bc result holds true 
induction step 
predecessor denote set paths edge note tv fp bc bc tv bc tv bc tv bc linear inductive hypothesis vertex fixed point theorem follows sum infinite set simply limit sums finite subsets 
