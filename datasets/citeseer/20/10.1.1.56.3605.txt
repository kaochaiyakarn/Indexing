department computer science lund institute technology lund university box lund sweden fine grained revision control collaborative software development boris magnusson ulf sten min lu cs tr published proceedings acm sigsoft symposium foundations software engineering los angeles california december fine grained revision control collaborative software development boris magnusson ulf sten min department computer science lund university box lund sweden email boris magnusson sten minor ulf dna lth se presents framework controlling evolution complex software systems concurrently developed teams software engineers 
general technique fine grained revision control hierarchically structured information programs documents described evaluated 
levels hierarchy revision controlled leaves branch nodes 
technique supports sharing unchanged nodes revisions automatic change propagation change oriented representation differences 
software development environment facilitating optimistic check revisions alternatives check incremental merge support visualization change propagation integrated flexible diff ing technique providing group awareness team members 
keywords software development version configuration control incremental merge cscw group awareness despite fact software systems developed documented maintained teams development environments give poor support people working 
availability world wide networks adds dimension geographical distribution picture problem urgent 
networks distribution notes news essential component infrastructure 
example common authors papers depend working mail connection 
people existing environments different patterns coordination develop 
turn person time changes 
split combine shared document partitioned person changes part 
done updated pieces combined 
method copy merge person full copy document changes changes merged 
cooperation methods serve restricted situations persons involved short time period developing single documents severe drawbacks strategy turn means person time 
split combine means partitioning fixed period time 
copy merge gives merging situation develop nightmare case strategy changes support merging 
reasons techniques directly carried developing software large teams large number inter dependent software documents 
copy merge approach advantage providing maximal flexibility allowing authors change want want 
copy merge viable support merging improved 
interaction modes requirements development maintenance software systems typically alternates group tasks involving persons individual assignments 
group tasks involves activities initial design specification structuring integration components testing debugging integration components groups individuals involved 
individual assignments involve detailed design implementation specific components documentation component testing debugging 
implementation performed asynchronously individuals small groups independently 
situation rarely interesting see somebody doing right changed period time say vacation release need coordination planning 
simultaneous interaction team needed 
environment needs support development synchronous asynchronous modes interaction 
performing task bug fix new implementation case different parts system need altered 
difficult outset determine exactly parts alter 
environment allow developer access change part system reasonable time frame 
furthermore hard determine long take complete task 
locking files particular task acceptable 
policy allowing users check copy version needed accepting merging required check 
reasons preventing developer changing specific component access policies result architecture environment 
software components organized logical relations modules data types classes 
consequence organization change small part component results component considered changed 
particular importance objectoriented languages update patterns differ modular procedural languages 
object oriented language adding functionality typically means adding methods classes considered changed 
procedural language scenario leads new procedure new file 
environment provide mechanisms limit effect change 
furthermore class seen configuration operations having revision history brings configuration aspects picture stage 
task involves changes different software components environment support creation alternative configurations new revisions software systems built modifications tested 
changes different modules originating task depend 
environment give support keeping track dependent changes 
result optimistic check policy requested need frequent merging alternatives 
environment give strong support performing merging detecting conflicts 
environment provide mechanisms enable developers avoid causing merge situations mistake 
existing environments examples existing revision control systems functionality provide take popular systems unix environments rcs tic sccs roe 
systems complete files larger piece affected single change target independent changes 
pessimistic lock checkout protocol 
problematic local team creating dead lock situations problem sorted small meetings 
large distributed team spontaneous meetings practical problems grow number developers involved 
furthermore systems state differences revisions calculated edited files 
change oriented differences recording operation differences editing larger potential supporting merging variants described lo lie lcd 
conventional revision control systems give support teams level ambition heading 
systems provide advanced support points view dsee lcm nse nse share common problematic characteristics outlined 
teams single site rely network file systems nfs san andrew msc file access 
systems solve team related problems discussing revision control aspects addressed 
distributed teams files manually distributed copied means systems email ftp 
result revision control done sites manually 
automated support distribution files maintaining revision control information merging needed 
product sun microsystems attempt attack problems 
optimistic check policy merge support uses line textual representation state differences approach 
development encouraging supports fundamental decision regarding copy merge strategy viable 
groupware synchronous editors egr kp mo interesting efforts support group related activities discussed solve problems asynchronously performed tasks 
editors provide mechanisms revision variant control metaphor shared document 
approach ambitious team supporting system fulfill requirements mentioned section 
demand flexibility avoidance inter locking different developers means systems optimistic check approach locking 
consequence reduce result parallel development 
fine grained revision control model effect change parts merge kept smaller 
change oriented representation merge support sophisticated explore information nature changes 
hierarchical representation integrated revision control mechanisms directly supports keeping track related changes storage unit 
example merging trivial techniques consider merging variants change local procedure class variant addition new procedure 
shared revision history graph provides overview team members aware changes coarse level 
active diff facility enables team members see changes fine grained level 
facility comes close synchronous editing mode facilitated group editors 
summary adopted copy merge metaphor provide mechanisms reduce merge nightmare 
exploring hierarchical organization get benefits split combine metaphor drawbacks 
system developed part ongoing project collaborative software development environments 
previous mj project project object oriented software development 
environment developed lund mj orm supported collaborative software development limited extent configuration management gus 
aim current project support teams programmers working system 
section give overview system architecture working section data structure designed support fine grained revision control hierarchical documents 
main contribution 
overview system system provides flexible model editing covers conventional asynchronous editing synchronous editing 
synchronous editor allows multiple users access edit shared material simultaneously employing see see metaphor 
active research area cscw computer supported cooperative community years egr 
discussed previous section model inappropriate program development different activities require different strategies synchronous asynchronous smooth transition mm 
section show hierarchical representation programs hierarchical browsing 
give short fine grained revision control functionality automatically keeps track program modifications supports merging simultaneous editing different users 
notion active diffs making users aware modifications done users 
hierarchical representation browsing program organized hierarchical structure fragments 
fragments typically correspond abstractions 
hierarchical program representation programming language blocks classes procedures functions 
hierarchy fundamental architecture 
program displayed hierarchy edited terms hierarchy elements hierarchy revision controlled database server stores programs terms hierarchy 
shows example user view program 
program hierarchy top evolution graph 
program contains class procedure fragments shown manipulated hierarchical browser allowing parts level overlap moved outside parent window 
subparts added removed browser selecting entries menu new class 
parts contain text edited text editor 
subdivision particular parts built system described grammar specifying hierarchy 
supplying different grammars browser may tailored different programming languages 
may application areas authoring hierarchical document consists chapters sections paragraphs 

term program generic fashion 
may program fragment typically module 
approach hierarchical browsing initially developed mj orm environment hm turned useful intuitive way viewing editing program structures 
furthermore collaborative environment may means organize 
fine grained revision control fragments hierarchy revision controlled explained detail section 
give brief overview 
lower part shows evolution graph program 
evolution graph contains results different actions creating revisions creating alternatives merging alternatives depicted 
revision step evolution document 
may contain arbitrary changes compared predecessor 
typically may contain new classes procedures parts may removed may contain minor modifications error corrections 
revision changed frozen 
way modifying document create new revision alternative desired modifications 
alternatives serve main purposes 
split evolution similar programs different purposes 
program may instance modified alternatives different target machines core common contents 
purpose support simultaneous development multiple users 
user wants edit revision edited user alternative created revision 
users edit alternatives merge revision ready 
hierarchical fine grained revision control functionality fragments instance revision controlled implemented basic functionality database server hierarchical documents 
supported parts system 
reason support group awareness expand section 
group awareness addition advantages revision control offers teams programmers system supports collaboration group awareness 
hierarchical organization revision control functionality 
group awareness available ways system evolution graph shared users presentation active diffs 
user enters system evolution graph indicates status program 
user see editing moment happened time 
instance see alternatives revisions alternatives alternative merging 
different kinds revisions document alternatives edited moment editing keys alternatives crossed 
checking revision editing revision may edited asynchronously 
checking revision user alternative created allows simultaneous editing revision merging 
order users aware users doing document alternatives simultaneously edited users system provides active diffs 
active diff shows difference revisions alternatives document 
diffs actual edit operations performed stored revision database handler deltas revisions 
way fine grained accurate differences reflect modifications performed user 
example 
differences current previous revisions shown text window editing 
insertions appear underlined text deletions markers 
markers may expanded interactively order see actual deletions 
way underlined insertions may collapsed markers 
presentation quite similar diffs prep systems markers change interactively result ongoing editing 
differences structure level shown similar way icons window titles marked additions deletions changes part subparts 
active diffs arbitrary revisions alternatives shown 
done selecting revisions diff presentation evolution graph 
way possible see changes certain revision created way alternatives differ 
active diffs shown different alternatives currently edited 
instance user sets diff alternative currently editing alternative simultaneously edited differences alternatives shown continuously modifications performed appear markers window name active diffs 
notice diffs shown demand free turn diff presentation desires 
diff markers edited edit alternative 
example users generalized users color coding markers visualize changed 
active alternative diffs may way giving synchronous editing view document presenting merged situation 
resolving conflicts delayed merging checkin 
awareness provided active diffs editing contribute avoiding unintentional conflicting changes unnecessary resolving merge conflicts 
system architecture system organized client server architecture 
database server stores documents synchronizes access client applications run users 
major difference client server systems functionality client application understand revision control mechanisms 
example editor aware revision document editing supply change oriented diffs document edited 
contain functionality re construct old revision diffs 
fine grained hierarchical revision control section describe server engineering database storing hierarchical information 
section consider representation structure represent revisions alternatives 
section discuss revision control data structure support change oriented editing 
twolevel merging approach structure data section followed evaluation techniques section 
model data model simple hierarchical structure 
nodes hierarchy corresponds units may chosen application 
typically software development environment described previous section nodes correspond abstractions programming language classes procedures functions 
application authoring nodes may correspond chapters sections paragraphs 
server responsible storing retrieving revision controlling node data sequence bytes making semantic interpretation 
gives example representation program module shown 
node tree subject revision control 
example data node changed new revision node established 
furthermore new revisions ancestor nodes top level created change propagation mechanism 
conceptually may viewed establishing new revision entire tree 
practice reasonable new revision part say class program results new revision program 
somewhat formally define node changed node data modified son nodes changed added deleted 

hierarchically structured program node node data program module class circle procedure draw procedure move change propagated tree particular root node considered changed modification tree 
order avoid replication data nodes changed shared 
shows example 
program hierarchy shown revisions 
second revision node data altered conceptually resulting new revision program including new contents 
new revision changed node node data created 
new revision root node created consequence change propagation mechanism 
left part tree unaffected change shared revisions 
overhead change propagation reasonably low 
addition modified node data represented backward deltas comment 
reason sharing revisions tree course space efficiency equally important property support change oriented editing merging facilitated ability identify modified tree 
expand section 
naturally application see tree structure independent storage sharing 
simple case considered obvious representation correct sense 
growing show evolution hierarchical revision tree example starting structure 
single evolution line revisions followed example showing alternative revisions 
growing revisions creating new revision initiated operation open new revision existing revision followed operations change structure document content nodes finalized operation freezes revision 
change operations result user actions 
discuss exactly triggered edit operation auto save function explicitly user demand 

sharing node revisions revision revision edited revision revision conceptual view sharing node revisions edited shows example growing revisions 
maintain tree structure new revisions created add main root revision roots sons 
node store evolution graph depicted rectangle revision tree similar user interface 
see result creation new revision just initiated 
situation different edit actions take place 
user edit content existing node node shown 
system may build nodes ancestor nodes due change propagation nodes exist new revision 
illustrated node example 
show creation revision building just created added new node node 
deletion node simple 
point changes revision chosen show cases change step order drawings complex 
think fairly easy conclude sharing mechanism correct sense cases 
growing alternatives description single evolution line discussed 
need parallel development alternatives 
shows alternative created revision 
node edited 
revision succeeding revisions 
course possible create alternatives fork node 
change oriented editing support discussion previous sections ignored handling data nodes assumed data copied node data edited node copied result change propagation mechanism 
describe improved change oriented delta scheme cases sharing node data nodes shared 
server point view application provide new revision node data delta write request 
responsibility server store information return node data deltas read requests 
application capability construct combine deltas 
server uses backwards delta technique storing latest revision full expect retrieved frequently 
shows simple example data leaf node edited 
complete version somewhat simplified sake clarity presentation 
augmented shared data backwards deltas order give full picture 
differs respects 
revisions root node share data 
data modified second revision root node result change propagation 
way overhead revision root revision root 
growing revisions revision initiated editing node revision adding node revision main root 
alternatives single evolution line alternative revision created replicating data revision nodes 
second edited data leaf node replicated 
full data stored latest revision data earlier revisions represented backwards deltas 
deltas basically inverses editing operations performed user editing data revision revision 
case alternative revisions full data stored latest revision alternative 
fork revision alternatives spawn deltas alternative 
furthermore creation alternative revision node latest full data re created latest revision applying deltas latest revision fork node 
deltas serve purposes 
scalability 
deltas save space number revisions grow allowing data revision reconstructed 
reason provide advanced change oriented merge support presentation active diffs actual operations performed user computation differences 
level merging cases expect people organize little projects merged main development line ready 
potential conflicts caused projects merged main line 
experience people working kind optimistic check technique conflicts rare 
cases file touched person kan 
valuable system place helps identify rare cases conflicts second gives support solving conflicts 
merge alternatives takes place levels node structure node data level 
level system uses revision revision edited 
deltas sharing data node revisions default rules suggest merged result 
user modify temporary result create desired merged revision 
illustrate technique small example merging alternatives running example new revision 
alternatives common root revision 
alternative revision edited node added node son node 
alternative edited node 
node structure level default rule incorporate changes additions deletions occurring development lines 
example means node included shared revision 
node included marked added added revision 
node included identified conflicting node edited development lines 
node marked conflicting contains conflicting node 
user happy result example delete node merged result 
case conflicting modifications node structure node inserted alternative subtree deleted alternative resolved manually user 
node data level conflicting nodes resolved application 
application provides default rules order suggest alternative 
text editor working optimistic suggest textual changes conflicting node included 
changes similar way shown 
user remove changes modifications wants 
merge developer want continue alternative creating new revisions changes merged 
point merge include changes ignored previous merge 
mechanism supports incremental merging 
evaluation hierarchical structure revisions may considered kind configuration management 
aim model primarily support representation 
revision merged revision generic configurations dynamic version selection described tic support evolution process configuration 
common feature model change oriented model lie lcd revisions global 
means revision document selected individual nodes single revision accessed 
model similar unified framework version modeling engineering databases proposed katz kat revision controlled component hierarchies change propagation mechanism 
katz model concerned limiting scope change propagation model propagates changes way root 
order efficiently sharing node revisions delta techniques crucial 
system integrated revision control functionality sharing change propagation techniques eh editor fm 
aims eh differs 
eh uses avl dags storing documents list lines vertex containing line modeling document structure node contains class procedure furthermore model designed supporting merging configurations comprising configuration tree node data addressed models 
fundamental difference systems approach handles revisions basic property database server furthermore applications editor browser section support revision control 
integrated revision control contrast systems glue revision control top existing files tools 
major performance scalability concerns may come regarding representation storage overhead time produce old revision information node 
storage overhead comes storing deltas old revisions overhead structure information tree 
structure information fairly small pointer node negligible content node reasonable size procedure text paragraph intended 
keeping track deltas costs pointer compared separate file traditional approach costing file directory overhead longer access times 
deltas worst case stored format standard diffs generated unix utility diff revision control systems reason believe storage form inherently worse current techniques 
fact aspects indicate revision trees memory efficient 
change oriented deltas turn compact traditional line text oriented diffs especially changes typically small compared length source line 
second large amount sharing common parts 
pay number alternatives grow traditional representation store full document parts alternative 
regarding time overhead calculate old revision note done demand fairly small pieces information assuming hierarchical storage intended 
time calculations needed compared communication times client server full node information necessary deltas sent message file access times model gives essentially read delta traditional diffs requires file opened closed 
confident performance applying deltas problem practice large applications 
scalability terms number simultaneous users concern 
overhead representation possibly large number alternatives caused simultaneous users addressed 
likewise expect performance problems active diffs involving large number alternatives diffs set needed probably subset alternatives 
active diff set large number alternatives order magnitude response times required seconds fractions second 
having experimental evidence expect modest requirement fulfilled 
merging large number alternatives may scalability problem 
successive way merge alternatives probably practically feasible 
typically alternatives created main development line may main development line system just main development alternative group currently working subsequently merged main development line 
furthermore expect merging fairly straightforward process merge conflicts probably reasonably infrequent result group awareness provided active diffs 
expectation supported experience group editor grove reported egr 
implementation status fine grained revision control model implemented top existing tree structured storage implementation gus 
corresponding editor structured text documents exist application try case 
support merging editor time writing implemented sub project remains development full support merging detailed level 
currently multi server functionality supported 
research step development server support multiple servers order improve speed stability geographically distributed teams 
involves developing automatic merging structures network server failure protocols keep duplicated database consistent sites 
questions access policies protection urgent access data revisions active diff information 
far ignored questions focused enabling sharing collaboration place 
mentioned supporting merge alternatives time inherent problem merging alternatives time default rules 
fact interesting facility hypothetically merge existing alternatives system get overview system develops including merge conflicts prepare 
long run aim technique storing structured program information syntax tree ast form 
involve things development algorithms representing applying deltas trees 
needed algorithms documented gus 
mj orm environment need store asts decorated semantic information 
includes finding representations deltas semantic information avoid long take place revision focus changed 
investigate semantic information making intelligent diff merge functionality lexical changes account semantic consequences change hpr 
identified fine grained revision control crucial enabling technique supporting software evolution possibly geographically distributed teams software engineers 
main characteristics design includes support versioning hierarchically structured information fine grained revision history fine grained change oriented diffs sharing common parts document revisions 
model supports storing documents programs tree structured information 
integrates revision control seamlessly levels system database applications editors browsers 
novel benefit design enables parallel development allowing optimistic check providing advanced support merging alternatives regarding structure content 
supports flexible modes interaction ranging asynchronous form synchronous members team aware actions interference 
acknowledgments authors wants members software development research group dept computer science lund university stimulating discussions contributed substantially 
particular want torsten olsson working structured document editor rel constructive comments earlier drafts 
supported part swedish national board industrial technical development 
egr ellis gibbs rein groupware issues experiences communications acm january 
fm fraser myers editor revision control acm transactions programming languages systems pp 
april 
gus gustavsson software configuration management integrated environment licentiate thesis dept computer science lund university lund 
hm magnusson mj environment direct interaction abstractions proceedings ecoop nd european conference object oriented programming lecture notes computer science vol 
springer verlag 
hpr horwitz prins reps integrating noninterfering versions programs acm transactions programming languages systems july 
kan nineties exciting time software development keynote address tools europe versailles march 
kat katz unified framework version modeling engineering databases acm computing surveys 
knudsen madsen magnusson object oriented environments mj approach prentice hall 
kp prakash distributed toolkit supporting multiple group editors proceedings cscw acm conference computer supported cooperative los angeles 
lcm chase jr mclean jr domain software engineering environment large scale software development efforts 
proceedings st international conference computer workstations 
ieee november 
lcd lie conradi karlsson change oriented versioning software engineering database acm sigsoft software engineering notes vol nov 
lo van operation merging proceedings fifth acm sigsoft symposium software development environments december 
mm min magnusson model semi synchronous collaborative editing proceedings ecscw third european conference computer supported cooperative milano kluwer academic publishers 
magnusson min overview mj orm environment proceedings nd international conference tools technology object oriented languages systems paris 
mo olson shredit shared electronic workspace cognitive science machine intelligence laboratory tech 
report university michigan ann arbor 
msc morris satyanarayanan howard rosenthal smith andrew distributed personal computing environment cacm vol march 
morris miller flexible diff ing collaborative writing system proceedings cscw acm conference computer supported cooperative toronto 
nse sun micro systems 
nse 
roe source code control system 
ieee transactions software engineering se december 
san sandberg design implementation sun network file system 
proceedings usenix june 
users guide manual set 
sun micro systems mountain view appear 
tic tichy rcs system revision control 
experience july 
tic tichy tools software configuration management proceedings international workshop software version configuration control germany 
