real time nonphotorealistic rendering lee markosian michael kowalski samuel daniel goldstein john hughes brown university site nsf science technology center computer graphics scientific visualization providence ri nonphotorealistic rendering npr help comprehensible simple pictures complicated objects employing economy line 
current nonphotorealistic rendering primarily batch process 
presents real time nonphotorealistic renderer deliberately trades accuracy detail speed 
renderer uses method determining visible lines surfaces modification appel hidden line algorithm improvements topology singular maps surface plane 
method describe determining visibility potential npr system requires description visible lines surfaces scene 
major contribution describe tool significantly improve performance systems 
demonstrate system nonphotorealistic rendering styles operate complex models interactive frame rates 
cr categories subject descriptors computer graphics picture image generation display algorithms additional key words non photorealistic rendering computer graphics concerned production images order convey visual information 
historically research computer graphics focused primarily problem producing images indistinguishable photographs 
graphic designers long understood photographs best choice presenting visual information 
simplified diagram preferred image required delineate explain 
point context repair manual asking photograph mechanics real thing front 
strothotte note architects trace computer renderings initial designs create look want avoid giving clients false impression completeness 
general question photorealistic imagery depends visual effect intended designer 
growing body research computer graphics recognized power usefulness nonphotorealistic imagery 
nonphotorealistic rendering npr methods primarily batch oriented interactive 
exception zeleznik sketch system crude nonphotorealistic renderings tricks standard polygon rendering pipeline 
obstacle achieving real time nonphotorealistic rendering problem determining visibility straightforward buffering may give incorrect results 
occur drawn screen correspond literally geometry scene 
example line segment vertices triangle mesh may rendered hand drawn style 
part line directly correspond original line segment may clipped buffering 
presents new real time npr technique economy line idea great deal information effectively conveyed strokes 
certain key features images convey great deal information algorithm preferentially renders silhouettes certain user chosen key features creases minimal shading surface regions 
accomplish interactive rates rely approximate data silhouette rendered frame large silhouettes rendered high probability 
key ideas support scheme ffl rapid probabilistic identification silhouette edges ffl interframe coherence silhouette edges ffl fast visibility determination improvements simplifications appel hidden line algorithm 
demonstrate techniques support variety rendering styles produced interactive rates 
include spare line rendering style suitable illustrations including optional rendering hidden lines variety sketchy hand drawn styles suitable approximate models technique adding shading strokes basic visible line renderings order better convey information preserving artistic effect 
technique uses method determining hidden surfaces simple extension hidden line algorithm 
methods describe renderer able produce basic visible line drawings free form surfaces effective rate model polygons second modern workstation 
structure algorithm determine silhouette curves model ii determine visibility silhouette feature edges modified appel algorithm iii render silhouette feature edges 
basic algorithm extended perform shading surface regions case step ii extended determine visibility surfaces 
explain parts detail describe final part section 
assumptions definitions assume model rendered represented nonself intersecting polygon mesh edge adjacent faces mesh topological manifold 
second assumption precise need definitions definition polygon front facing dot product outward normal vector point polygon camera position positive 
polygon back facing 
silhouette edge edge adjacent front facing back facing polygon 
border edge edge adjacent just face 
silhouette edge front facing adjacent face nearest camera front facing 
silhouette edges back facing 
second assumption image render view generic sense definition view generic multiplicity image silhouette curves finite number points ii multiplicity points coincide projection vertices mesh iii number invariant small changes viewing direction 
method may fail non generic views observed practice computations performed double bit floating point numbers 
appel algorithm appel hidden line algorithm notion quantitative invisibility qi counts number front facing polygons point object camera 
algorithm applied entire mesh edges polyhedral model determine qi points qi visible drawn 
descriptions basic algorithm 
summarize key ideas 
algorithm identifies silhouette edges traverse interior edge qi changes edge crosses silhouette 
generic view qi change vertex vertex lies silhouette edge 
fact characterized authors complication algorithm ll discuss 
algorithm proceeds determining raytracing example qi point connected set edges propagating qi point care note changes edge propagated passes silhouettes vertex propagated lies silhouette 
way number ray tests minimized exploiting edge coherence 
improving appel algorithm fast randomized algorithm finding silhouettes focus primarily rendering silhouettes prominence appel algorithm important find quickly 
straightforward approach finding silhouettes requires exhaustive search conflicts goal achieving interactive frame rates rendering complex models 
definition adopted 
compromise developed randomized algorithm rapidly detecting silhouette edges 
examine small fraction edges model find silhouette edge easy stepping adjacent silhouette edges trace entire silhouette curve 
typical silhouette edges detect examine edges object 
likelihood silhouette detected proportional length long ones significant detected 
order edges dihedral angle assign probabilities decrease increases increase chances finding silhouette edges randomly chosen view probability edge silhouette proportional gamma radians 
sufficiently small changes camera position orientation case silhouette curve frame contains edges edges previous frame 
exploit frame frame coherence silhouettes checking silhouette edge previous frame 
increase chance finding silhouettes current frame select small fraction silhouette edges previous frame starting point limited search traversing edges away camera depending start point lies back facing front facing region surface respectively 
search stops edge number edges traversed exceeds pre set bound 
remove seed seek approach check edge model observe fold increase total running time finely tessellated models see section 
silhouettes cusps complication appel algorithm arises mapping surface plane singular silhouette edges 
understanding complicated case better allows avoid unneeded computation 
redefine qi number layers surface front back facing obscuring point 
observe generic views qi silhouette curve change vertex vertex special type call cusp definition vertex called cusp vertex cusp holds see 
adjacent exactly silhouette edges front facing back facing 
adjacent silhouette edges 
adjacent border edge qi non silhouette curve intersects silhouette curve vertex change passes vertex 
appel algorithm requires local test vertex belonging silhouette 
interested primarily propagating qi suppose object tessellation refined scheme properties subsequent refinement total number edges quadruples number distinct silhouette curves connected sets silhouette edges remains constant number edges silhouette curve doubles 
hard show constant probability detecting silhouette maintained checking edges number edges refinement object 
case necessary contradicts corollary 
arrows indicate cusps 
typical cusp 
exotic cusp 
border cusp edges meeting center sheet border edges 
silhouette curves testing changes qi just cusp vertices provides significant savings computation time 
avoiding ray tests show avoid ray tests required appel algorithm 
assume objects scene completely view camera edge touches bounding box image space silhouettes require ray test automatically visible 
ray test required connected set cluster silhouette edges containing edge 
appel algorithm proceed ray test establish qi distinguished point cluster followed propagation step qi assigned remaining points cluster 
reversing order eliminate need ray test altogether second step sufficient determine entire silhouette curve occluded 
see 
surface side view 
smaller branch rear 
smaller branch front 
change qi cusps indicated 
traversing inner silhouette sufficient determine silhouette totally occluded 
connected cluster silhouette edges choose edge point infinitesimally close vertices 
call point base point cluster 
denote qi base point 
qi points cluster defined offsets assign preliminary lower bound value calculate offsets graph search account image space intersections edges current cluster silhouette edges cusp vertices encountered traversal 
curve qi increases passes silhouette may change arbitrary locally measurable amount cusp vertex 
record minimum qi encountered search 
may safely increment gammam 
easy show closed surface front facing silhouette edges qi back facing silhouette edges note front facing back facing silhouette edges identifying cusps detected surface edge concave convexity edge determined pre process step 
odd qi 
surfaces add needed correct parity 
case cluster totally occluded shows example 
examine intersection involving edges different clusters 
situation qi occluding edge qi occluded edge portion find estimated qi values increment base qi cluster containing occluded edge gamma propagate information clusters 
practice observations account clusters consequently ray tests required current frame 
remaining cases perform needed ray tests efficiently technique call walking 
walking relative qi values points silhouette cluster determined respect qi base point determine correct value technique assuming objects scene front camera 
briefly discuss render immersive scenes 
silhouette cluster totally enclosed image space enclosing silhouette may boundary region may totally obscure enclosed silhouette 
see 
enclosed silhouette totally occluded 
detect enclosures consequent occlusions follows 
disregard silhouette curves known totally occluded 
disregard silhouette curve touches image space box bounds silhouette edges totally enclosed 
remaining silhouette curve choose point currently assigned qi 
denote projection identify enclosing silhouettes tracing path image space boundary enclosing silhouette curve encountered image space point find corresponding point choose branch surface adjacent tracing path projection heads back branch surface exists 
branches surface satisfy condition case proceed enclosing silhouette 
traverse surface path projection reverse direction original path surface walk succeeds arriving point projects depth test determines occluded portion surface 
walking method general immersive scenes geometry may surround camera 
alternative approach perform ray tests efficiently octree data structure find intersections line segment triangles scene 
problem approach silhouette curves scene gone undetected randomized algorithm finding silhouettes possible small region occlusion detected silhouette propagated incorrectly entire silhouette 
occur intersections undetected silhouettes taken account ray test may count occlusions due surfaces bounded undetected silhouettes 
walking method count surfaces 
steps decrease probability missing silhouette curves lie viewing frustum approach minimizing problem 
discussion point tacitly assumed edges interest silhouette edges 
methods easily accomodate border edges non silhouette edges creases decorative edges 
border edges cause change sigma qi edges passing 
edges cause change qi edges passing 
implementation details follow approach projecting silhouette edges image space finding intersections 
done sweep line algorithm log time number silhouette edges see 
convenient spatial subdivision data structure divides image space bounding box silhouette edges grid cells 
silhouette edge scan converted grid edges share cell need tested intersection 
method worst case complexity performs average 
re spatial subdivision grid walking step order find enclosing silhouettes projection intersects image space path rendering visible lines surfaces demonstrate visibility algorithm produce styles nonphotorealistic renderings interactive rates 
accompanying video shows system action images produced renderer included 
world space polylines rendered projected film plane 
artistic expressive strokes generated modifying resulting polylines 
techniques generating expressive strokes drawing polylines directly slight enhancements variations line width color see high resolution perturbed strokes defined adding offsets polyline texture mapped strokes follow shape polyline 
variation method render occluded lines style depends number layers surface occluding 
second method parameterize polyline arc length 
define new parametric curve original parametric curve adding vector offset defined tangent normal basis 
vector offsets allows double back form loops 
tangent normal basis allows perturbation patterns follow silhouette curvature 
offset vectors precomputed stored lookup tables computed fly 
implemented techniques 
precomputed offsets file format specifies vector offsets 
format incorporates break tags signal renderer leave selected adjacent vertices unconnected allowing strokes incorporate disconnected shapes circles dashes letters 
variations small number fundamental stroke classes sawtooth parabolic undulations noise produce wide variety stroke styles high frequency sawtooth curves produce style low frequency parabolic curves produce wandering lazy style high frequency low magnitude noise applied stroke normal tangent directions produces jittery hand drawn style low frequency high magnitude offsets stroke tangent produces jerky rough sketched look 
alternative method computing offsets noise function indexed screen space location 
perlin noise function define displacements visible lines 
third method builds texture mapped mesh polyline spine 
texture map represents single 
repeat texture spine approximately preserving original aspect ratio 
order generate mesh walk spine adding perpendicular crossbar vertex polyline seam repeating 
additionally width stroke vary lighting computed polyline vertices thicker darker areas thinner lighter areas 
simple implementation handle self intersections texture map mesh due areas high curvature 
lastly demonstrate technique generating curved shading strokes order produce richer artistic effect better convey information 
see 
principle economy line supports goals maintaining interactive frame rates 
extension hidden line algorithm allows derive visibility information surface regions 
method described 
place shading strokes particles world space surface define screen space 
approach meier painterly rendering system 
advantage approach maintains frame frame coherence 
simplifying assumption lighting comes point source located camera position 
greatly simplifies task computing stroke placement density achieve target tone 
distribution strokes surface produces higher apparent densities regions away light exactly want darker tone 
initial implementation assigns stroke particle center triangle assumes sufficiently triangulation 
strokes drawn occluded computed gray value lambertian shading model falls threshhold 
stroke directions defined cross product local surface normal ray camera stroke location strokes line silhouette lines 
strokes preset length sufficiently large screen space length drawn polylines 
direction segment polyline computed local surface normal taken blend normals vertices triangle stroke centered 
render strokes artistic rendering methods described 
performance treat models subdivision surfaces allows refine mesh approximates smooth surface arbitrary degree accuracy 
see description type subdivision surfaces 
tables list performance statistics renderer operating models subdivided indicated number polygons 
test machine mhz sun ultra tm model creator graphics 
method performs particularly smooth meshes fewer cusps intersecting silhouette edges irregular bumpy surfaces 
contrast pen ink rendering system produces decidedly finer images takes minutes frame 
half time spent visibility determination 
paul haeberli rendering method source code implementing 
graphics capabilities rendering lines 
model triangles frames sec triangles sec mechanical part venus table performance basic visible line renderer 
times measured mhz ultrasparc 
model triangles frames sec slowdown mechanical part venus table performance basic line renderer checking edges frame slowdown comparison models listed table 
model triangles frames sec triangles sec blobby teddy bear venus table performance shaded line renderer 
models shown accompanying video 
envision avenues 
handling shading strokes restrictive generalized support arbitrary lighting conditions better control density strokes screen space match target gray value 
shaded stroke renderings enhanced addition cast shadows visibility algorithm easily extended find 
technique computing shadow regions straightforward 
generally feel exploration rendering styles developed 
rendering styles demonstrated take simple automated approach renderings produced regard content scene intent designer 
rich unexplored area research npr additional information model definitions produce nonphotorealistic renderings reflect information model basic geometric attributes target particular effects 
acknowledgments mark seung hong help images video christine help modelling holden lending dan shell paul haeberli idea source code displacing lines perlin noise 
sponsors nsf graphics visualization center alias wavefront microsoft mitsubishi nasa sun microsystems 
appel 
notion quantitative invisibility machine rendering solids 
proceedings acm national conference pp 

blinn 
jim blinn corner chapter pp 

morgan kaufmann 
cohen 
automatic illustration geometric models lines 
proceedings symposium interactive graphics pp 
march 
elber cohen 
hidden curve removal free form surfaces 
proceedings siggraph pp 
august 
foley van dam feiner hughes 
computer graphics principles practice chapter pp 

addison wesley 
montanari 
algorithm hidden line elimination 
communications acm april 
haeberli 
paint numbers image representations 
proceedings siggraph pp 
august 
hoppe derose duchamp halstead jin mcdonald schweitzer stuetzle 
piecewise smooth surface reconstruction 
proceedings siggraph pp 
july 

method solving visibility problem 
ieee computer graphics applications pp 


expressive rendering review nonphotorealistic techniques 
ieee computer graphics applications may 

computer generated copper plates 
computer graphics forum 

solution hidden line problem polyhedra 
ieee transactions computers march 
meier 
painterly rendering animation 
proceedings siggraph pp 
august 
perlin 
image synthesizer 
proceedings siggraph pp 
july 
preparata shamos 
computational geometry chapter 
springer verlag 
saito takahashi 
comprehensible rendering shapes 
proceedings siggraph pp 
aug 
strothotte forsey 
render frames influence people 
computer graphics forum september 
sutherland sproull 
characterization hidden surface algorithms 
computing surveys march 
williams 
topological reconstruction smooth occluding contour 
technical report university massachusetts amherst ma 
salesin 
computer generated pen ink illustration 
proceedings siggraph pp 
july 
salesin 
rendering parametric surfaces pen ink 
proceedings siggraph pp 
august 
zeleznik herndon hughes 
sketch interface sketching scenes 
proceedings siggraph pp 
august 
mechanical part model courtesy university washington 
mechanical part rendered sketchy lines 
rendering terrain texture mapped strokes 
human expressive outline shading strokes 
mechanical part hidden lines varied styles 
