event distributed workflow execution eve andreas dimitrios tombros department computer science university zurich 
ch zurich switzerland tombros ifi unizh ch technical report may revised march event driven workflow execution events event condition action rules fundamental metaphors defining enforcing workflow logic 
processing entities enact workflows reacting generating new events 
foundation events eases integration processing entities coherent systems 
event engine called eve implementing event driven execution distributed workflows 
functionality includes event registration detection management event notification distributed autonomous reactive software components represent workflow processing entities 
eve maintains history event occurrences system monitoring analysis executing workflows 
describe distributed multi server multi client architecture eve illustrate usage workflow execution 
keywords event systems workflow management distributed workflow execution overview currently enterprises optimize streamline business processes 
examples include insurance claim handling credit card applications business processes completely partially automated represented workflow specifications 
workflow management systems wfms software systems providing workflow definition implementation functionality scheduling execution control 
workflow specifications workflow types consist subworkflows atomic steps data flows execution order constraints assignment tasks pe 
productive wfms requires effectively support integration heterogeneous information resources people applications called processing entities pe 
resulting integrated system called workflow system ws 
current commercial ws architectures effectively address problems related representation control coordination pe operate environments distributed multiple organizational entities heterogeneous respect automation degree interfaces evolve time operate independently part ws 
research efforts address various aspects problems especially pertaining distribution heterogeneity 
proposed solutions effectively support flexible representation integration pe runtime evolution ws architecture propose strongly coupled integration framework rigid task structure 
event systems recognized architectural style choice loosely coupled systems best knowledge approach far uses events integration coordination mechanism distributed heterogeneous dynamically configurable ws 
researchers including proposed event condition action rules eca rules provided active database management systems workflow execution 
approaches centralized renders distribution openness scalability hard achieve 
event services specified corba services support notion event services restricted primitive events typically hybrid sense rely messages events coordination paradigms 
propose layered event architecture ws 
ws described domain specific architecture model represents pe autonomous reactive components communicating parameterized events 
behavior components expressed eca rules 
propose event middleware layer execution platform called eve able integrate reactive components ws architecture description executable 
event ws architectures workflow execution various advantages event coordination model allows complete process specification imposing limiting assumptions concrete process architecture 
complex process situations expressed composite events coordination accomplished defining appropriate reactive behavior pe 
architecture ws changed workflow execution subject process restrictions 
interaction patterns dynamically administered eve 
powerful uniform mechanism express component behavior provided mechanism failure exception handling straightforward 
correct execution respect specification monitoring workflows guaranteed formal semantics 
logging workflow situations events done practically extra cost compared message architecture 
presents architecture ws focusing distributed event engine eve 
section position eve survey related 
ws architecture model section sake comprehensiveness 
describe architecture functionality eve section approach distributed event detection workflow execution section 
related eca rules proposed authors workflow execution 
systems composite events detect complex workflow situations 
eve system eca rules workflow management addressing problem distributed event workflow execution 
current commercial wfms metro inconcert typically built centralized process engine relational database server 
eventbased coordination systems yeast purpose similar eve centralized event detection rule execution architecture 
additionally yeast supports event action rules 
number research systems consider distributed workflow execution 
uses graph workflow definition model 
steps executed agents coordinated potentially distributed workflow engine accesses centralized dbms store workflow states 
wide proposes distributed hierarchical workflow engine basic access layer stores process state centralized relational dbms 
meteor process scheduling distributed various task managers 
distribution task managers implemented corba 
mentor workflows modeled state charts partitioned involved pe 
pe specific statechart executed locally pe workstation 
various aspects implementation eve naming services facilitated functionality corba distributed object technologies 
emphasis research eve complement efforts concentrating reactive eventbased coordination integration architecture accompanying advantages heterogeneous system integration message approach 
event specific functionality eve richer corba event services see table 
omg currently process specifying workflow management facility 
facility uses event service communicating state changes workflow execution elements activities 
event service restricted primitive events complex workflow situations detected communicated 
eve fully supports eca rule services standardization consideration omg model workflow system architectures section briefly introduce model propose description workflow system architectures 
general workflow types specified way graph formalism mapped architecture model level 
presume particular workflow modeling approach simply assume basic elements workflow specified way workflow structure terms atomic 
example discusses integration eca rules corba environment 
corba event service eve communication model push pull push typed events composite events event parameters type multiple typed event filtering disconnected consumers suppliers multicasting eca rules table 
comparison corba event related functionality eve activities subworkflows dependencies steps workflow 
specification subsequently mapped behavior processing entities compose ws architecture 
note event coordination layer propose independent modeling formalism 
section serves illustrate purpose specification layer event architecture 
workflow example order better illustrate concepts introduce example workflow processing health insurance claim hic fig 

workflow initiated hic arrives insurance agency 
insurance agent creates file containing diagnosis treatments cost hic insurance number step 
claimed amount exceed chf claim directly accepted corresponding entry customer database check prepared printed print 
various controls control local database prescribed treatment covered patient insurance 
request central clearing house control equivalent expensive medication available 
done subworkflow sw consisting step 
hand subworkflow sw executed insurance medical expert controls treatment suits diagnosis 
controls completed corresponding entry customer database rejection letter payment check pre prepared insurance agent printed print 
brokers services 
broker services model sm describe software process architecture resulting ws 
workflow type specifications mapped elements sm way described detail 
general atomic step corresponds execution service 
eca rules define services executed context workflows 
perspective sm ws consists interacting reactive components called brokers representing pe 
broker behavior defined eca rules describing reaction simple events service requests composite events request specific time interval action part rules 
different types brokers represent human user interfaces organizational groups external applications wfms components 
subworkflow atomic step join join split split structure example workflow type sw sw primitive event types represent atomic happenings 
kinds primitive event types distinguished broker interaction events requests req replies rpl exceptions exc services workflows time event types 
time events absolute relative periodical 
composite event types represent complex process specific situations combining primitive composite events 
constructed type constructors 
sequence seq occurs component events occur respective order 
exclusive disjunction dex occurs component events occur 
conjunction con occurs component events occur regardless order 
repetition rep occurs component event occurs predefined number times 
negation neg event occurs component event occurred interval 
events occur concurrently ccr occur point time 
event type definition restricted time interval defined events events considered relevant occur interval 
restrictions specified composite events 
particularly required component events occur workflow 
formal semantics distributed composite events described 
broker functionality described services specified signature service name request parameters resulting replies exceptions 
broker interaction broadcasting parameterized events 
service execution started request event client broker terminated reply exceptions defined service generated server broker 
server dynamically determined service parameters organizational relationships workflow execution history ways specified 
workflow instance starts executing initiation request event occurs 
workflows executed provision services requested 
services providers associated relationships capabilities implying predefined behavior broker service requested eca rules form service request event service parameters condition parameters broker state true execute service provision actions generate reply event workflow production data manipulated pe workflow steps generally stored external systems accessible wfms 
brokers may provide access production data wfms engine providing interfaces part state 
broker state manipulated action parts eca rules 
brokers services example shown table 
main advantages model describe workflow system architectures consist simplification system integration task provision powerful broker type services location application clearing house medical expert user interface oracle client agency insurance agent user interface agency lpf printer frontend print agency table 
brokers services example general purpose definition mechanisms functional informational behavioral aspects workflow systems 
various aspects workflow specifications heterogeneous processing entities mapped relatively simple homogeneous representation layer directly transformed executable form 
eve middleware component workflow execution point view software architecture model runtime system workflow engine needed sm system executable 
runtime system forms middleware allowing brokers execute workflows 
straightforward mapping event sm execution engine achieved providing event middleware layer 
words workflows executed brokers reacting generating new events 
approach implies groups services provided eve 
distribution 
processing entities typically distributed network workflows executable distributed manner eve support distribution 
requires distributed event detection communication facilities eve servers clients brokers 

runtime repository 
order maintain necessary meta information operate workflow system naming persistence retrieval services needed 
accomplished runtime repository stores provides information brokers event types eca rules information altered runtime evolution ws possible shutting recompiling system 

workflow execution 
order execute workflows event driven style event detection event notification task assignment services needed 
services allow execute workflows remote sites 
tasks accomplished leveraging event systems services active database systems notification workflow execution 

event history management 
order facilitate maintenance workflow systems logging monitoring analysis services provided 
services rely event histories maintained eve 
event history persistent recoverable corresponding services underlying object manager shore 

failure handling 
general types failures distinguished system failures failure workflow execution level 
eve provides exception event notification mechanisms combined eca rules definition reactions workflow execution errors proposed 
furthermore communicating brokers special adapters persistent event queues eve able handle temporary unavailability failures connectivity brokers 
execution workflow starts proceeds soon event generated broker 
local eve server performs event detection rule execution 
execution rule task assignment determines responsible brokers notified subsequently react defined eca rules 
particularly brokers generate new events handled eve servers transitively see fig 

advantage approach due event driven style brokers know providers requested services 
furthermore events forwarded responsible pe handled asynchronously pe 
brokers request execution sub workflows generating workflow request events eca rules 
subworkflows executed remote server 
require atomic steps directly contained workflow executed site machine lan managed particular 
site called home site workflow 
subworkflows executed sites home site parent workflows different instances workflow type different home sites 
limitation required distribution achieved appropriately specifying subworkflows significantly eases synchronization servers leads better synchronization performance see section 
multi server architecture communication brokers involved workflows typically reside different machines results workflow systems physically distributed varying degree different machines domain lan different organizational subnets 
eve supports distributed execution workflows multi server multi client architecture 
means provided middleware services distribution kept transparent brokers pe represent general required know physical location service providers 
workflow systems distributed large areas consist multiple eve servers 
provide aforementioned required services 
important ones described detail sections immediately address eve client server architecture communication 
eve servers communicate directly local brokers remote servers 
broker communicates solely local eve server 
brokers interact transparently forwarding events generate platform specific eve adapters local server 
ed event broker ed ed ed ed eve rule rule ed ed ed rule rule 
event 
event detection logging 
rule execution broker broker broker event history 
service execution workflow execution process eve rule generation eve servers control progress workflows 
control defined terms eca rules determine happen particular composite event occurs 
accept handle client connection requests known network address 
brokers may log logout system logged broker establishes communication channel server 
eve servers exchange administration information current location connectivity brokers 
provide persistent queues events forwarded disconnected brokers 
workflow monitoring achieved special purpose brokers provide event monitoring services 
brokers communicate local eve server eve adapter 
eve adapters normally library linked broker code provide interface eve system brokers 
provide communication transparency server login event generation notification 
adapters handle temporary server unavailability keeping persistent queues client generated events 
brokers informed occurrence interesting events callbacks adapter provides listening port eve server 
eve server forwards network event occurrences adapters brokers registered runtime repository interested events 
execution broker actions new events may generated broker 
broker informs local eve server occurrence events eve adapter 
turn performs event detection logs events eventual resulting composite events event history forwards occurrences interested local brokers servers interested remote brokers 
overview architecture eve example brokers fig 

eve servers reside insurance agency site site clearing house site 
communication infrastructure implemented adaptive communication environment framework 
eve servers implemented solaris extensions acceptor pattern dispatches handler connecting broker 
handler responsible incoming events initiates appropriate actions workflow engine triggers event detection process 
adapter implementation client platform specific 
currently java versions implemented 
eve server lpf eve adapter oracle dbms agency clearing house repository architecture eve example workflow system event history runtime repository event communication agent gui eve adapter eve adapter shore eve server shore eve adapter eve server shore expert gui eve adapter eve runtime repository runtime repository implements naming persistence querying services contains information needed execute workflow instances 
explicit representation meta information runtime repository leads higher degree flexibility compared approaches hard wired interpretive techniques workflow execution better maintainability workflow systems compared compilation approaches 
repository managed eve servers top object oriented database system shore 
runtime repository contains information workflow types name initiation termination events active terminated instances specification participating brokers including context specific behavior responsibilities organizational relationships brokers brokers groups event types corresponding defined event part broker eca rules eca rules defining structure workflows 
eca rules 
eca rules eve confused broker eca rules implement processes broker interactions 
eve rule defined triple event type condition action 
instance event type occurs condition holds action executed 
conditions return set object considered hold return non empty result 
resulting set passed action part 
conditions implement task assignment condition computes set eligible brokers request selects task assignment strategy specified request event type 
possible task assignment strategies random eligible broker chosen load broker minimal number pending requests chosen responsibility effectively chosen broker fulfill requirements specified current request combination strategies 
actions arbitrary code fragments typically including notifying broker service request 
eve rules reside eve servers compiled stored dynamically linkable libraries loaded execution time corresponding rule fires 
execution service example start execution subworkflows sw sw service completed 
expressed rule residing server con rpl ok hic con rpl sw done result rpl sw done result raise req hic sw done result sw done result rule task assignment residing req hic br assign filter returns assigned broker br notify req hic sw done result sw done result 
checks equality workflow ids broker ids shown 
workflow execution order allow event driven workflow execution eve implement detection signaling primitive composite events interested brokers 
composite event detection issue extensively considered centralized 
semantics composite events different distributed system 
fact renders concepts techniques centralized unfeasible inadequate distributed environments need extended 
event occurrences event detection event occurrences actual happenings interest point time considered instances event types 
occurrence attributes event type occurrence occurrence site unique site specific occurrence identifier timestamp event occurred see section name requested service request identifier case request confirmation reply events workflow identifier event occurred identifier broker raised event list component occurrences case composite events list typed parameters production data 
events detected persistent event detector ed objects residing eve servers 
order generate new primitive event broker notifies server occurrence adapter 
server forwards event occurrence appropriate event detector 
time events detected system clock 
primitive event detection composite event detection takes place 
matter adapted approach originally proposed centralized sentinel 
composite ed graph see fig 
nodes event types edges represent event composition 
nodes marked component occurrences 
event detected parent nodes informed check new event obtained component events form new event composition 
check performed event type dependent way 
multiple instances component event type exist oldest adequate chosen chronicle consumption mode appropriate workflow management case new event consumed ed stores ok event detector graph attached rule event rule rpl sw done 
true request log service rpl sw done position possible new sibling component occurrences received 
event detection recursive parent node compose new occurrence turn informs parents bottom manner 
addition event composition edges event nodes rule objects 
primitive composite event occurrence detected rule attached rule added list rules fired 
firing takes place soon event detection cycle terminated 
distributed composite event detection server synchronization timestamps play crucial role defining semantics composite events define ordering event occurrences 
centralized environments global time assumed ordering exist distributed environments 
eve adopt approach deal distributed event ordering 
assume site local clock 
local clocks synchronized precision event occurrences globally ordered provided granularity global time base larger precedence model events occurring different sites ordered timestamp event larger 
difference timestamps events considered occur concurrently 
events occur site ordered clock tick apart 
details timestamp computation precedence model see 
correct event composition chronicle consumption mode relies ordering component occurrences timestamps 
event composition oldest eligible instance chosen multiple candidates 
new events composed older adequate component event occurred site 
poses special problem distributed environments signaling events remote sites typically takes different amounts time may temporarily impossible due detector site crash order arrival events different remote sites may order occurrence 
ed correctly compose new events components originating multiple sites synchronized detectors components recursively 
furthermore efficiency considerations dictate effort synchronize servers event detectors overly burden workflow execution process respect number affected detectors number messages needed exchange synchronization information 
servers cooperating specific workflow instance need synchronized events generated instances unrelated workflow types temporally causally related 
synchronization needed event detectors detect workflow termination events directly indirectly contain events components 
detector synchronization works follows see fig 

broker attached server requests sub workflow forwards request server affected detectors informed need synchronize detector maintains information servers needs synchronize synchronization set 
server set counter records number workflow instances requested records server set event received 
set global time derived local server synchronized involved remote servers synchronization point minimum events timestamps received remote servers 
server signalled event called synchronized site guaranteed events timestamps earlier synchronization point received safe ed consume events composite event detection 
affected detectors receives event component event timestamp event larger synchronization point 
case event sent received event queued processed 
new determined determines new synchronization point queued events occurred prior new synchronization point flushed processed centralized event detection 
kinds events exchanged servers relevant synchronization synchronization events workflow termination events 
synchronization events bear specific meaning indicate sending server alive 
sent predefined synchronization intervals servers request events executing sub workflow instances received 
case server receives event knows received previous workflow termination events remote server exploit information synchronization detectors 
workflow termination events indicate completion workflow instance processed ed 
case event received workflow reply exception counter respective server corresponding synchronization set decremented 
new value counter instances corresponding workflow type active remote server 
server deleted synchronization set respective detectors ancestors 
procedure allows minimize server workflow type number remote servers synchronized 
consequently detectors syn ed ced ed ced ed ced ced ed ced synchronization servers event detectors server detector structure event exchange synchronization set synchronized detectors fact currently executes behalf instances workflow type 
event detection locations execution example workflow shown table 
example note detector event con rpl ok hic con rpl sw done result rpl sw done result synchronized ed component events 
event history specific point time sequence event occurrences describes happened past 
occurrences form event history 
elements history events occurring subsequently constrain happen 
case occurrence type component composite event type consumed occurrence type 
second parts entire event history may provide important information broker actions course single workflows taken 
event history database monitoring analysis successive optimization workflows 
maintained eve servers physically distributed 
server maintains consistent view global event history composite events inserted detector synchronization taken place meaning earlier candidate component events occurred 
logically integrated view global event history possible partial ordering timestamps events 
history forms basis formal definition workflow execution correctness 
summary services described eve middleware layer allows distributed reactive components cooperate way renders distribution transparent 
event agency site site clearing house site req rpl done req req sw req sw req req rpl done rpl done rpl sw done rpl sw done rpl ok con rpl ok con rpl sw done rpl sw done req rpl done req rpl done req print rpl print table 
event detection sites sample workflow execution time precedence depicted horizontal table lines event parameters omitted simplification style eve eases integration coordination reactive components maintenance evolution workflow systems 
eve multi server architecture distributed event detection detector synchronization avoids centralized architecture potentially efficient vulnerable functionality degradation case site crashes depending course workflow specifications currently executing 
special purpose services eve task assignment enable reactive components execute workflows event driven style workflow systems described terms eventbased model executable seamless way 
proper software architecture workflow systems crucial order adequately structure entire environment including pe coordination system fulfill requirements flexible integration pe reusability pe definitions layered event architecture workflow systems 
specifically introduced distributed event engine eve serving underlying execution platform workflows 
event approach workflow execution combines runtime efficiency flexibility 
contributions summarized follows novel architecture distributed ws providing functionality eventdriven workflow execution integrated framework addresses problems relevant distributed execution workflows event detection global event history 
remains done specify implement semantic recovery mechanisms eve eca rules 
ultimately address workflow type evolution particularly respect long running workflows organizational change 
capabilities area obviously depend semantics workflows rely previous rule base evolution object oriented 


metro solution www com metro overview index html 

act net consortium 
active database management system manifesto rulebase features 
acm sigmod record september 

alonso agrawal el abbadi mohan 
functionality limitations current workflow management systems 
ieee expert appear special issue cooperative information systems 

alonso hagen 
schek 
distributed processing stand systems applications 
proc 
rd vldb athens greece august 

barbar rusinkiewicz 
computation model dynamic workflows autonomous distributed environments 
technical report department computer science university houston may 

barrett clarke tarr wise 
framework event software integration 
acm trans 
software engineering methodology october 

bussler jablonski 
implementing agent coordination workflow management systems active database systems 
proc 
th ride ads houston february 

carey dewitt franklin hall mcauliffe naughton schuh solomon tan white 
persistent applications 
proc 
acm sigmod minneapolis may 

casati ceri pernici pozzi 
deriving active rules workflow management 
proc 
th dexa zurich switzerland september 

ceri grefen sanchez 
wide distributed architecture workflow management 
proc 
ride 

chakravarthy 
kim 
composite events active databases semantics contexts detection 
proc 
th vldb santiago chile september 

dayal hsu ladin 
organizing long running activities triggers transactions 
proc 
sigmod atlantic city nj may 

georgakopoulos hornick sheth 
overview workflow management process modeling workflow automation infrastructure 
distributed parallel databases kluwer academic publishers september 

tombros 
realization cooperative agents active object oriented database management system 
proc 
nd intl 
workshop rules database systems athens greece september 

tombros 
logging post mortem analysis workflow executions event histories 
proc 
rd intl 
workshop rules database systems sweden june 

hsu 
distributed process management infrastructure 
distributed parallel databases april 

krishnamurthy rosenblum 
yeast general purpose event action system 
ieee transactions software engineering october 

lam su 
rules rule services corba 


inconcert workflow 
workgroup computing report 

mylopoulos gal kontogiannis 
generic integration architecture cooperative information systems 
proc 
st int conf 
cooperative information systems brussels belgium june 

common object request broker architecture specification 
revision 
object management group july 

corba services common object services specification 
omg july www omg org corba htm 

workflow management facility 
joint submission workflow rfp omg august 

schmidt 
ace object oriented framework developing distributed applications 
proc 
th usenix technical conf cambridge ma april 

schmidt 
acceptor design pattern passively initializing network services 
report november 

herbert moody 
monitoring composite events distributed systems 
technical report computer laboratory cambridge university uk february 

sheth kochut miller das lin lynch 
supporting state wide immunization tracking multi paradigm workflow technology 
proc 
nd vldb bombay india september 

tombros dittrich 
design implementation process oriented environments brokers services 
freitag jones lengauer 
schek eds object orientation parallelism persistence kluwer academic publishers 

tombros dittrich 
design process oriented environments reactive components 
technical report department computer science university zurich june 

tombros dittrich 
semantics reactive components event driven workflow execution 
proc 
th intl 
conf 
advanced information systems engineering barcelona spain june 


real time communication 
mullender ed distributed systems 
nd ed addison wesley 

weikum kotz dittrich 
mentor project steps enterprise wide workflow management 
proc 
th icde new orleans february 
