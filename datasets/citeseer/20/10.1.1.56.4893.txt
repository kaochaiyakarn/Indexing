categories framework solving domain equations abbas edalat michael smyth department computing imperial college science technology medicine queen gate london sw bz england 
notion category information systems category introduced generalisation scott known category information systems 
theory partial orders categories complete algebraic shown algebraic categories obtained certain completion countable categories 
proposed axioms complete category introduce global partial order morphisms category making cpo 
initial algebra theorem class functors continuous cpo morphisms proved giving canonical solution domain equations effective version results algebraic categories provided 
basic examples categories representing categories sets boolean algebras scott domains continuous scott domains constructed 
distinctive feature information systems representing scott domains expressed sco lw collection information systems information ordering 
consequence domain equations form recursive specification types handled ordinary cpo fixed point techniques 
feature noticed context presentation domains sequentiality concrete data structures bc 
shall information systems loosely cover presentations domains systems presentation spaces structures domains 
ordering information systems typically defined follows 
information systems token sets iff operations relations restrictions ask tokens information systems drawn common pool tokens token delta appear distinguished member information systems consider context find typically collection information systems cpo example algebraic cpo trivial information system token set deltag element see section 
versions course dispense delta empty system 
result approach domain equations appreciably simpler standard approaches terms inverse limits universal objects categories 
pointed simple approach terms ordering information systems give elaborate category theoretic methods yield specifically get initial algebra theorem characterising intended solutions domain equation 
enquiry really starts question needs added information system method get fully equivalent standard methods solving domain equation 
answer suggest global information ordering morphisms needed addition including objects 
concretely define note sets pairs tokens 
general theory concretely way required properties global ordering objects morphisms arriving axiomatic notion category information systems category 
required theory domain equations far effective initial algebra theorem developed level available applied routinely various concrete situations scott domains stable domains stone spaces metric spaces 
various constructions functor category categories information systems handled 
summarise remainder 
section introduces categories elaborated partial orders complete categories corresponding cpo appropriate notion algebraic category 
section presents general initial algebra theorem complete categories 
section shown material preceding sections straightforwardly 
section basic examples considered scott domains continuous generalisation domains little detail boolean algebras regarded information systems stone spaces 
basic definitions axioms section give basic definitions category information systems simply call category related notions 
notations fairly standard 
category denote class objects obj class morphisms mor delete subscript mappings dom cod mor obj denote domain codomain mappings associated id obj mor denotes mapping takes object identity morphism object identity morphism denoted id 
denote morphism domain codomain mor cod dom denote composition common notation ffi read followed functor categories write obj obj fm mor mor induced mappings objects morphisms respectively 
identity endofunctor denoted id say countable category mor countable 
denotes finite power set constructor set set finite subsets partial order write bounded exists denote class compact elements algebraic cpo ka categories category intuitively speaking ordered category distinguished class morphisms called inclusion morphisms induces partial order class morphisms class objects 
precise definition 
definition category tuple delta ffl category ordered hom sets ffl mor subclass inclusion morphisms hom set hom inclusion morphism denote ae ffl partial order hom obj ffl delta obj distinguished object satisfy axioms axiom class objects obj inclusion morphisms form partial order represented category 
ii delta exists obj delta morphisms hom delta 
iii mor compositions defined 
axiom composition morphisms monotone respect partial order hom sets compositions defined 
axiom says category order enriched category 
ii initial algebra theorem section holds axiom iii dispensed general setting 
choose retain axiom implies inclusion morphisms monomorphisms subcategory strict morphisms algebraic category algebraic category proposition 
convenience denote category carrier write delta 
define partial orders obj mor category delta follows ffl exists ffl dom dom ii cod cod iii cod cod dom dom note iff diagram dom cod dom cod weakly commutes 
easily checked relations fact partial orders 
note axiom require just pre order obtain pre category just pre orders 
proposition id delta element mor 
ii inclusion morphisms monomorphisms 
iii composition morphisms monotonic respect proof mor 
axiom ii delta delta id delta delta delta id delta ii suppose 
axiom iii get 
iii suppose monotonicity composition morphisms respect example partial orders 
partial order element considered category standard way gives rise category mor discrete partial order hom sets delta 
similarly pre orders examples pre categories 
example sets 
consider category sets denote sets 
easily checked sets large category just set inclusions discrete partial order hom sets empty set 
iff complete categories way define cpo partial order having lubs increasing chains define complete category category completion properties definition complete category delta category satisfies axioms axiom mor cpo 
axiom mor 
axiom composition morphisms continuous operation respect hf hg increasing chains mor cod dom 
proposition complete category obj cpo mappings id obj 
mor dom cod mor 
obj continuous 
proof ha increasing chain objects 
hid increasing chain inclusion morphisms axiom lub say 
hand axiom increasing chain hid id lub 
follows axiom id id claim fact id id 
obj upper bound ha immediately obtain id id id id id proves obj cpo id continuous 
establish continuity dom increasing chain morphisms 
axiom increasing chain morphisms hid lub id id obtain dom dom 
continuity cod proved similar way 
example complete partial orders 
cpo considered category complete category 
see example 
straightforward check axioms 
example sets 
observe sets example complete large category 
increasing chain objects delta delta delta lub increasing chain morphisms hf lub 
routine verify axioms 
algebraic categories algebraic category complete category mor algebraic compact morphisms objects related desirable way follows 
definition algebraic category complete category satisfies axioms axiom mor algebraic 
axiom mor compact cod obj compact 
ii obj compact mor compact 
iii composition compact morphisms compact 
see proposition axiom remarks proposition axiom ii axiom iii proposition algebraic category obj algebraic cpo compact morphisms compact domains 
proof note set compact objects countable axiom ii id compact compact set compact morphisms countable 
obj 
exists increasing chain compact morphisms id cod compact axiom 
proves cpo obj algebraic 
compact morphism algebraic category 
exists increasing chain compact objects ha define continuity dom 
compact implies compact 
example algebraic cpo 
algebraic cpo considered category algebraic category 
see example 
compact objects precisely compact points compact morphisms precisely morphisms compact points 
routine check axioms 
example sets elements countable alphabet 
consider category sets elements countable alphabet 
denoting category set isys easily check set isys algebraic category 
fact morphism construct increasing chain morphisms finite sets lub follows 
choose finite sets integer define section note product theta categories category delta thetap delta delta partial order hom sets inclusion morphisms defined obvious way 
furthermore theta complete algebraic complete algebraic 
completion category recall ideal completion countable poset gives rise algebraic cpo directed ideals ordered inclusion 
way take ideal completion countable category obtain algebraic category follows 
definition countable category delta completion delta ffl obj obj ffl mor mor dom fg cod fg id fid ag ff gg assuming equation cod dom denoting downward closure ffl exists iff exists fin bg ffl inclusion partial order hom sets ffl delta deltag 
order show defined category convenient simple lemma proof omit 
lemma suppose posets directed monotonic surjection 
directed finite subsets respectively exists upperbound upper bound show proposition defined category 
proof need show dom cod id defined definition fact directed ideals obj mor verify assuming cod dom say cod dom cod dom 
directed exists applying lemma mapping dom find cod dom 
cod dom 
proposition iii remains show applying lemma mapping cod find dom cod 
proposition iii cod dom need verify satisfies basic axioms category 
fact routine check id identity morphism hom dom cod composition morphisms associative 
establish expected result proposition algebraic category 
proof proof divided parts 
category verify axiom iii 
suppose 
want show 
exist 
choose deduce equation step proof proposition get follows proof complete 
ii complete category claim iff suppose definition domain codomain morphism follows definition composition morphisms gets cod dom cod dom imply combining observations obtain id id suppose hand exists follows proves claim 
easy check increasing chain morphisms hf mor lub dom dom cod cod 
mor cpo 
inclusion morphisms form mor easy establish increasing chains morphisms hf hg cod dom 
complete proof complete category 
iii algebraic 
mor algebraic follows fact directed ideal completion countable poset mor 
compact elements mor just principal ideals mor 
mor compact element cod cod principal ideal obj compact element obj axiom holds 
suppose obj compact elements obj compact 
gives axiom ii 
compact morphisms composed compact axiom iii satisfied 
conversely algebraic category isomorphic completion countable category 
precise need definition base algebraic category subcategory compact objects compact morphisms obj obj mor clearly countable category 
proposition algebraic category isomorphic proof functors defined gamma 
fb obj ag fm gamma 
fg mor fg gamma 
gm gamma 
give isomorphism practice concrete algebraic categories obtained completing categories finite hom sets 
fact see final section result holds algebraic information categories concrete algebraic categories 
introducing notion information categories presenting basic examples going establish fundamental results solving domain equations complete categories 
initial algebra theorem section main results initial algebra theorem suitable class endofunctors complete category 
definitions 
strict morphisms definition morphism category strict diagram delta commutes 
case scott information systems strict morphisms represent usual notion strict function preserves element 
proposition category 
mor strict strict 
ii inclusion morphisms strict 
iii composition strict morphisms strict 
iv complete lub increasing chain strict morphisms strict 
proof assume delta delta delta delta strictness delta delta delta delta axiom iii delta delta delta delta ii follows transitivity 
iii easy 
iv increasing chain strict morphisms delta delta 
lubs sides continuity composition respect get delta delta 
define category subcategory strict morphisms obj obj mor ff mor proposition shown 
proposition category 
ii algebraic complete category proof axiom holds inclusion morphisms strict proposition ii axiom holds proposition iii 
ii complete category mor cpo proposition iv axioms complete category trivially hold algebraic strict morphism lub increasing chain compact morphisms strict proposition 
implies algebraic 
standard functors dealing functors categories natural require functors preserve class inclusion morphisms 
definition categories complete categories 
functor standard preserves order hom sets inclusion morphisms strictness preserving preserves strict morphisms 
ii functor continuous induced map morphisms fm mor 
mor continuous cpo function 
standard continuous endofunctors categories 
list basic properties proposition categories complete categories 
functor standard iff 
ii composition standard functors standard 
iii standard functor strictness preserving 
iv continuous endofunctor induced map objects obj 
obj continuous 
proof ii trivial 
iii delta delta delta delta delta delta delta delta iv follows easily continuity id dom proposition observation dom ffi fm ffi id dealing standard functors assume functors categories standard 
proceed state results categories 
recall denote inclusion morphism ae lemma lub increasing chain objects complete category colimit chain colimit chain proof ae ae ae delta delta delta chain trivially cone 
hom cone find hs increasing chain morphisms lub fixing lub equations respect get show unique morphism satisfying assume equation holds 
lub sides obtain proves part 
second part note inclusion morphisms strict proposition ii need check strict strict 
follows proposition iv 
corollary continuous functor complete category chain delta ae delta ae delta ae delta delta delta colimit colimit chain proof proposition iv continuous obj lub increasing chain delta delta delta delta delta delta satisfies rest follows lemma 
initial algebras recall endofunctor category category algebras objects pairs obj hom morphisms objects hom diagram oe oe commutes 
initial algebra defined initial object exists category algebras say initial algebra fixed point initial algebras give canonical solution domain equations play fundamental role computing science see example ma details 
remember functors categories assumed standard 
theorem continuous endofunctor complete category initial algebra proof delta corollary 
id algebra id strict proposition ii 
suppose algebra dom cod strict 
prove existence unique strict morphism diagram 
oe commutes 
existence inductively define morphisms follows delta gamma show hg increasing chain strict morphisms lub strict satisfies show increasing note axiom ii proposition iii delta delta assume inductively monotonic mor composition morphisms monotonic operation respect follows proving inductive step 
show strict note strict inclusion morphism 
assume strict 
strict standard functor proposition iii strict composition strict morphisms strict 
follows proposition iv strict lub increasing chain strict morphisms 
furthermore continuity implies morphism category algebras mediating id 
uniqueness strict morphism satisfying show induction delta 
equation just strictness condition assume equation holds delta delta delta delta delta delta completes inductive proof 
follows delta delta delta completes proof 
succeeded obtaining initial algebra theorem essentially cpo construction usual heavy category theoretic machinery global functors 
example cpo considered complete category 
see example continuous functions induce continuous functors initial algebra theorem reduces statement fixed point 
pre fixed point pre fixed point 
example consider set isys 
see example 
bnf notation construct set endofunctors follows id fa theta fa ffi id identity functor fa constant functor maps objects obj finite power set constructor gamma theta gamma gamma gamma product disjoint sum functors denotes finite set obj gamma gamma function space constructor ffi composition straightforward check defines set continuous endofunctors 
note function space constructor gamma gamma fix argument order get covariant functor 
furthermore finiteness set necessary continuity example endofunctor id continuous fact strictly larger set natural numbers 
example solve domain equation set isys singleton set 
writing readily find solution colimit 
appreciate fix notation disjoint sum sets write ag bg nil nil nil delta delta delta find dropping brackets nil nil nil nil delta delta delta identified categories information systems domains inclusion morphism corresponds embedding projection pair function space constructor induces covariant standard continuous functor arguments subcategory inclusion morphisms 
restricted subcategory apply initial algebra theorem functors involving function space 
restriction analogous corresponding treatment function space constructor categories domains sp 
see section detail 
note continuous endofunctor may initial algebra 
fact existence proof theorem guaranteed uniqueness fail general allow non strict morphisms 
effectiveness section effective theory algebraic categories 
idea postulate suitable recursive structure base category define computable objects morphisms lubs effective chains objects morphisms respectively 
computable functor defined standard functor computable cpo function mor 
aim obtain effective version initial algebra theorem 
standard notions classical recursion theory example cut 
particular oe th partial recursive function standard enumeration hm delta delta delta tupling function effective cpo briefly recall theory computability algebraic cpo 
see plo details 
algebraic cpo element kq surjection representing enumeration basis kq write upper bound 
say effectively respect index ha si conditions hold 
ii recursive index 
iii recursive index effective chain compact elements index respect increasing chain oe oe oe delta delta delta element said computable exists effective chain lub index respect defined index effective chain 
denoting poset computable elements cq obtain enumeration cq cq respect algebraic cpo enumeration compact computable elements respectively say continuous function computable exists recursive function diagram commutes 
index said index note composition computable functions computable composition recursive functions recursive 
need simple results plo 
lemma lub increasing effective chain computable elements computable index effectively obtained index effective chain 
corollary fixed point computable function algebraic cpo computable index effectively obtainable index function 
effective categories ready define notion effectively algebraic category 
definition algebraic category 
enumeration base enumeration obj enumeration mor compact objects morphisms objects morphisms respectively 
said effectively respect index ha wi conditions hold mor effectively respect index ha si dom recursive index cod recursive index recursive index recursive index proposition algebraic category effectively respect 
obj effectively respect index effectively obtained index respect 
ii mappings dom cod mor 
obj mapping id obj 
mor computable index effectively obtained index respect 
iii obj computable indices respectively computable index effectively obtained 
iv mor computable cod dom computable index effectively obtained proof id delta 
integer id 
delta 
show am recursive index effectively obtained clearly am id id integers id am id respectively 
recursive index follows am recursive index effectively obtained predicate am treated similar way 
ii mor computable index say 
oe dom dom oe 
integer dom oe recursive index effectively obtained say am oe dom oe recursive 
dom computable 
similarly show cod id computable mappings 
iii oe oe integer integer oe oe exists am compact integer oe oe 
recursive index effectively obtained 
iv indices respectively oe oe integer cod oe dom oe integer oe cod oe dom oe oe applying find recursive index effectively computable definition continuous endofunctor effectively algebraic category computable induced cpo function fm mor 
mor computable 
ii algebra computable mor computable 
proposition computable endofunctor induced function obj obj computable 
proof follows immediately equality dom ffi fm ffi id composition computable functions computable 
effective version initial algebra theorem appeared eda 
theorem computable endofunctor computable initial algebra id index effectively obtainable computable algebra unique morphism satisfying computable index effectively obtained 
proof index corollary delta computable index effectively obtained establishes part theorem 
computable algebra index say defined proof theorem 
claim hg lub effective chain computable morphisms index effectively obtainable show th element chain computable index denoted effectively obtained fact delta proposition iii computable index effectively obtainable suppose induction hypothesis holds follows computability computable index effectively obtainable proposition iv computable index effectively obtainable inductive proof complete 
function recursive index effectively obtainable proves claim 
lub chain result follows lemma 
effective initial algebra theorem satisfactory theory computability algebraic categories 
basic examples briefly treat simple examples categories 
bounded complete information systems bounded complete information system structure jaj delta jaj countable set tokens pre order jaj partial binary operation jaj delta distinguished token satisfying delta jaj 
ii exists iff jaj case note propositional languages fourman grayson fg 
require bounded complete information systems distinguished token delta 
morphism approximable mapping bounded complete information systems jaj jbj relation jaj theta jbj satisfying deltaf delta ii afb afb af iii fb afb identity morphism object approximable mapping category bounded complete information systems approximable mappings denoted bc isys full subcategory gunter category pre orders approximable mappings gun equivalent category dom bounded complete scott domains continuous functions 
equivalence functors dom oe bc isys gamma 
kd iff fm gamma 
ar iff gamma 
fil gm gamma 
fil set filters routine check fact induce equivalence categories preserve order 
define set inclusion morphisms follows 
inclusion morphism exists equal jaj theta jbj iff substructure jaj jbj respectively restrictions jaj 
easily verified bc isys deltag category 
furthermore proposition shows embedding projection pairs domains inclusion morphisms information systems fully capture 
proposition functor maps inclusion morphisms embeddings 
ii embedding projection pair scott domains exist information systems diagram commutes proof 
define approximable map bpa iff id id 
conclude embedding corresponding projection 
ii put proviso compact element corresponding compact element note category bc isys complete increasing chain objects ha lub object ja increasing chain morphisms lub just union 
consider full subcategory bc isys objects partial order 
object bc isys isomorphic lindenbaum algebra quotient structure equivalence induced upto relabelling tokens object bc isys follows categories fact equivalent 
easily shown bc isys algebraic category nice feature object compact carrier set finite compact morphisms precisely morphisms compact objects 
convenient bc isys 
regards functors usually defines bc isys possible define bc isys 
illustrate constructing function space category 
function space constructor recall initial algebra theorem holds covariant functors general function space constructor gamma 
gamma bc isys op theta bc isys bc isys contravariant argument 
situation analogous encountered domain theory problem handled restricting subcategory projection embeddings function space constructor induces covariant functor sco sp 
follow similar line restrict subcategory inclusion morphisms denoted bc isys obtain covariant functor gamma gamma bc isys theta bc isys bc isys proposition treatment equivalent corresponding domain theory 
describe action gamma gamma objects inclusion morphisms 
convenience drop superscript objects bc isys defined follows 
ffl ji consists finite sets pairs elements ja deltag finite satisfying conditions fa jl lg bounded ii fi fi iii ffl iff exists ffl bounded ji ji cl cl closure conditions 
closure obtained steps cl start subsets jl lg fa jl lg bounded add pair 
note exists satisfies 
cl ii remove redundancies imposing ii iii 
ffl delta routine check object bc isys 
conditions iii ensure compact element function space scott domains unique representation function space corresponding information systems space fact partial order simply pre order 
functor gamma 
gamma acts inclusion morphisms follows 
readily seen 
define functor gamma 
gamma covariant arguments standard desired 
reader verify functor fact continuous captures intended meaning function space 
details section es 
continuous bounded complete posets bc isys construct complete category continuous bounded complete posets 
known continuous bounded complete posets exactly projections bounded complete scott domains 
means category continuous bounded complete posets scott continuous functions equivalent full subcategory cbc isys envelope see example ls page bc isys 
detail construction follows 
delta category 
envelop objects retractions morphisms morphism morphism dom dom notational convenience denote object explicitly dom cod 
inclusion morphisms defined putting iff hom sets ordering induced hom set orderings distinguished object delta delta id delta 
define pk informally category projections full subcategory objects id 
proposition suppose complete category 
pk complete category 
proof outline consider just axioms verified 
axiom ii inclusion delta id delta delta clearly element hom delta id delta 
projections evidently strict delta delta 
axiom iii suppose 
means written 
id follows satisfies axiom iii deduce axioms completeness pk key observation global ordering mor pk restriction suppose 

morphisms pk 
putting assumption definition iff iff claimed 
easily verified lub respect mor increasing sequence mor pk morphism pk mor pk mor 
readily follows axioms hold pk 
course cbc isys pk bc isys 
notice presence axiom iii forces construction pk standard 
treatment terms standard construction notion category lacking axiom iii see eda 
turning domain equations note standard endofunctor complete category preserves order hom set gives rise standard endofunctor pk defined follows 
object morphism 

checked continuous continuous 
means usual functors bc isys give rise standard continuous functors cbc isys initial algebra theorem solve domain equations cbc isys 
continuous information systems attained popularity shall briefly compare preceding works subject 
previously es construction obtain continuous systems context concrete information categories 
context objects obtained adding transitive interpolative relation dense order structures objects details ensuing treatment differ preceding relation understood substructure relation necessarily coincide categorically defined considered 
hoo independently account continuous information systems terms construction account resembles treatment concrete case quite closely 
difference detail retains entailment relation finite sets tokens individual tokens reducing mere ordering information done 
applications develops continuous systems quite different consider introduce cpo systems study domain equations 
apart constructions may idea presenting continuous domains simply possible terms densely ordered sets tokens 
done smy structures structure transitively ordered set tokens predecessors token directed set 
idea taken vickers vic works simpler notion densely ordered set structures 
far concerns topics smy addresses effective solution domain equations sequences embeddings structures explicit cpo structures applications vic hand little bearing 
information systems boolean algebras consider category classical propositional logics cpl objects tuples pre order binary operations unary operation constants representing falsity truth respectively satisfying ffl ffl ffl ffl ffl 
write iff morphism objects relation defined follows ffl afb afb afb afb fb ffl ffl afb fb afb fb 
note identity morphism relation ja construct category information systems cpl isys cpl objects restriction jb theta clearly morphism inclusion map jaj jbj 
take equality trivial partial order hom sets put delta trivial object carrier set require objects cpl isys 
obtain category cpl isys easily shown complete 
objects cpl isys pre order fact partial order boolean algebras stone duality hal cpl isys dual category stone non empty stone spaces totally disconnected compact hausdorff spaces continuous maps 
recall equivalence functors stone oe cpl isys op defined follows 
stone space boolean algebra closed open sets continuous map restriction frame map omega omega omega object cpl isys set filter base topology closed open sets fx xg morphism morphism fa 
denote bool isys full subcategory consisting boolean algebras elements countable alphabet 
morphisms boolean homomorphisms 
boolean algebra partial order expressed terms objects bool isys 
obtain complete category bool isys easily seen algebraic 
functors define set standard continuous functors cpl isys id fa theta ffi id fa ffi identity functor constant functor composition respectively gamma theta gamma gamma gamma product disjoint sum vietoris functors describe 
product 
objects cpl isys product theta apart tokens form predicate operations theta defined componentwise extra requirement 
easy check fact gives categorical product 
furthermore product morphisms defined componentwise obvious way easy check functor gamma theta gamma cpl isys theta cpl isys cpl isys fact standard continuous 
coproduct 
coproduct defined algebra generated disjoint sum jaj jbj ag bg subject condition theta respectively frg theta inherit relations operations respectively furthermore simple check gives categorical coproduct functor gamma gamma cpl isys theta cpl isys cpl isys fact standard continuous 
vietoris algebra 
object cpl isys vietoris algebra algebra generated set pia ag subject conditions ffl pi 
ffl pia pia ffl pia pia pi 
ffl pi pia pi 
morphism cpl gamma isys morphism generated relations pia pib iff afb 
functor cpl isys cpl isys easily checked standard continuous 
corresponds vietoris endofunctor cpl isys defined follows 
stone space space set closed subsets base topology determined requiring closed open set subset consisting closed sets nonempty intersection closed open set 
continuous map mapping takes closed set image relation functors 
proposition diagram commutes isomorphism stone stone cpl isys cpl isys proof stone space 
straightforward check closed open sets generate boolean algebra satisfy ffl 
ffl ffl ffl complement hand generators pia vietoris algebra boolean algebra satisfy relations replaced pia 
follows isomorphic 
duality stone cpl isys implies solving domain equation categories equivalent solving dual equation particular initial algebra cpl isys corresponds final coalgebra stone 
domain equations quite interesting see example abramsky treatment non founded sets abr 
find initial algebra endofunctor type construction effective 
example solve domain equation theta bool isys 
readily find solution colimit 
writing terms sum get theta gamma gamma gamma gamma theta theta gamma gamma gamma gamma gamma gamma gamma gamma consist finite strings 
atoms precisely strings 
identified identified nonnegative integers equal atomic 
containing strings corresponds point string dominates atoms integers number initial 
fact boolean algebra associated final greatest solution dual equation category stone spaces 
point concluding remarks information categories categories bc isys cpl isys treated section examples general notion concrete category 
concrete categories objects sets internal structure operations predicates defined elements sets finite subsets weak second order structures terminology bar 
partial order objects corresponds substructure relation objects morphisms relations elements finite subsets carrier sets objects 
call categories information categories categories complete algebraic 
information categories partial order objects corresponds notion substructure jaj jbj predicates operations restrictions tokens partial order morphisms simply reduces inclusion relations 
similarly complete information categories lub chain objects union chain structures lub chain morphisms simply set union relations representing morphisms 
algebraic information categories compact objects precisely finite objects objects finite carrier set compact morphisms precisely relations finite objects 
features information categories conceptually simple easy handle task verifying certain category information category category straightforward 
notion information categories number substantial examples complete algebraic categories including categories information systems sfp domains di domains continuous domains constructed detail es examples including category information systems metric spaces preparation 
results serc foundational structures computer science imperial college london author funded project 
author samson achim jung steve vickers discussions information systems domain theory 
due achim jung mark ryan technical assistance producing paul taylor diagram macros 
abr abramsky 
tour finitary non founded sets 
eatcs bulletin 
bar barwise 
order logic 
barwise editor handbook mathematical logic studies logic foundations mathematics pages 
north holland 
bc berry 
curien 
sequential algorithms concrete data structures 
technical report report ecole nationale superieure des mines de paris centre de appliqu ees sophia antipolis 
cut 
computability recursive function theory 
cambridge university press 
eda edalat 
categories information systems 
master thesis imperial college university london 
eda edalat 
self duality information categories 
technical report doc department computing imperial college 
es edalat smyth 
categories information systems 
technical report doc department computing imperial college 
fg fourman grayson 
formal spaces 
van dalen editors brouwer symposium pages 
north holland 
gun gunter 
universal domains 
information computation 
hal 
lectures boolean algebras 
number van nostrand mathematical studies 
princeton 
hoo 
continuous information systems 
information computation 
ls lambek scott 
higher order categorical logic 
cambridge studies advanced mathematics vol 

cambridge university press 
lw larsen winskel 
information systems solve recursive domain equations effectively 
macqueen kahn plotkin editors semantics data types pages berlin 
springer verlag 
lecture notes computer science vol 

ma manes arbib 
algebraic approaches program semantics 
springer verlag 
plo plotkin 
post graduate lecture notes advanced domain theory incorporating pisa notes 
dept computer science univ edinburgh 
available 
sco scott 
continuous lattices 
lawvere editor toposes algebraic geometry logic pages 
springerverlag berlin 
lecture notes mathematics 
sco scott 
domains denotational semantics 
nielson schmidt editors automata languages programming proceedings 
springer verlag berlin 
lecture notes computer science 
smy smyth 
effectively domains 
theoretical computer science 
sp smyth plotkin 
category theoretic solution recursive domain equations 
siam computing 
vic vickers 
information systems continuous posets 
theoretical computer science 
