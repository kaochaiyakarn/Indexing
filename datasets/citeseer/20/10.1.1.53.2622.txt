stack genetic programming page stack genetic programming timothy st albany ca email net field genetic programming gp concerned finding optimum representations evolvable efficient computer programs 
describe new gp system target programs run stack virtual machine 
system shown certain advantages terms efficiency simplicity implementation certain classes problems effectiveness shown comparable superior current methods 
genetic programming emerged effective means automatically generating computer programs solve wide variety problems different problem domains 
optimum representation bred programs 
programs generated automatically evolutionary process successful different environments 
thrive evolutionary domain shape allows manipulated genotype set genetic operators 
secondly effective computer programs solve problem set guise utterances language adequate expressive power job hand 
absence compilation development process program representation serve different functions 
tension conflicting constraints generated variety approaches finding appropriate program representation concomitant virtual machine execution automatically generated programs 
chosen representation certain biases adept creating program structures art designing representation art principles understood finding program representation readily encode useful program structures influence evolutionary processes applied 
sense seeking representation evolutionary processes tend create individuals subspace possible computer programs candidates solving problem hand 
propose new program representation virtual machine designed simplicity flexibility evolutionary domain offering adequate expressive power generate programs arbitrary complexity 
stack genetic programming page genetic programming genetic programming gp development extension genetic algorithm ga 
ga described holland problem solving method potential solutions encoded fixed length bit strings 
population potential solution strings maintained correct solution sought iterative process repeated testing generation new potential solution strings 
new solution strings created simple combination mutation existing strings right reproduce allocated proportional fitness individual strings 
time population converges solution 
koza koza developed hierarchical extension ga similar process employed develop lisp programs 
conventional ga reproducing individuals fixed length binary strings koza gp begins individuals consisting randomly generated lisp expressions 
expression composed set functions terminals chosen problem 
functions take fixed number arguments composed terminals functions terminals input variables constants input sensors depending nature problem 
special form crossover operator defined maintains program syntax crossover consists replacement program segment contained matched parentheses individual similar segment 
nested lisp expression thought tree process amounts switching arbitrary subtrees 
addition function defined fails gracefully inappropriate data example division function terminate asked divide zero 
problem solutions expressed evaluated value entire expression problems demand single numerical result side effect action functions planning problem 
various extensions modifications method program representation developed koza 
changes amount modifications virtual machine interprets target programs 
include generation automatically defined functions koza tagging reuse useful program modules arise angeline pollack incorporation pseudo developmental process program repair banzhaf addition scratchpad memory target programs record state information teller 
stack gp implementation implementation stack gp system koza target programs lisp expressions consisting combinations functions terminals organization different 
functions lisp arguments return value irrelevant functions receive arguments numerical stack return result pushing stack 
function calls nested consist flat linear sequences functions terminals 
terminals simply class functions push preset variables stack executed 
typically error function evaluating critter program set value terminal variables running critter 
addition structure analogous koza ephemeral random constant erk defined 
function violates basic rule arguments stack arguments function takes numerical argument pushes stack 
program stack genetic programming page generation time erk enabled instances function randomly generated numerical argument assembled critter program sequence instances functions specified problem 
example example program solves symbolic regression problem erk range set case integers range 
written 
stack gp additional type closure constraint imposed functions 
functions take arguments numerical stack state stack time execution unknown advance unknown arity satisfied 
functions defined arity unsatisfied current stack state example binary ops called stack depth logical function stack depth 
stack protected underflow constraint stack overflow problem limited practice far specifying maximum allowable program length 
example typical function definition defun stack gp addition function 
stack depth spop spop table shows short program solves regression problem traces state numerical stack function executed 
step point execution stack comment stack doesn items called 
push current value terminal stack 
items stack 
push current value terminal stack 
pops top stack items multiplies pushes result 
push current value terminal stack 
push current value terminal stack 
add top stack items push result 
push current value terminal stack 
divide nd top stack value top push result 
perfect solution 
table 
example showing stack state test program executed 
sequence column actual correct result run symbolic regression problem see text 
notice program created constant computing steps 
stack genetic programming page numerical calculations performed reverse polish notation rpn 
rpn advantage context parse tree calculation expressed simply order functions terminals sequence constrained syntax demanding balanced parentheses 
parse trees arbitrary complexity generated limited permitted stack depth program sequence length 
method contexts efficiency execution coding essential hand held calculators forth postscript languages 
kelly spies adobe 
great value gp build programs grammatical constraints whatsoever random sequence rpn instructions form legal executable program 
special crossover operators needed programs sequences just cut recombined point new parse tree result 
stack purposely left free assume state constraints guaranteeing arity function met function called 
likewise problems error derived top value stack function returns penalty leaving extra junk stack 
course flexibility stack returned data structure allows problems involve returning complex multiple values easily implemented imposing special syntactical constraints program structure 
example successful program defining formula complex multiplication top values returned stack answer returns values stack 
values boldface contribute answer rest junk 
initial just random sequences functions function set chosen problem due nature rpn sufficient generate program parse trees varied shape depth special means necessary ensure initial range complexity 
genetic operators selection schemes terms evolutionary behavior stack gp ways similar traditional ga koza gp 
syntactical constraints critter sequences treated strings genetic crossover operators chosen 
goldberg crossover operator chosen experiments point crossover generates offspring 
see table 
scheme permits offspring sequences shorter longer parents necessary 
mother sin sin pi sin father sin sin pi pi child sin sin pi pi sin table 
crossover operation stack gp system 
points picked random parents child sequence created inserting sequence enclosed points father space defined points mother 
stack genetic programming page likewise various selection reproduction schemes basic ga systems employed 
chosen implement simple steady state tournament selection reproduction scheme operates follows loop termination criterion satisfied pick individuals random population 
replace fit offspring better 
probability perform point mutation new critter 
evaluate fitness new critter 
simple tournament selection scheme adequate ensure fitness ranking proportionate reproduction 
mutation frequency parameter system 
typically th individual created undergo point mutation consists changing function call sequence function current function set 
experiments method koza describes method assessing amount processing required particular problem 
problem run large number runs instantaneous probability success generation computed observed performance 
cumulative probability computed population size generation 
probability success generations compute number number independent runs necessary solve problem probability system allowed proceed generation 
cases 
log log purpose assessing stack gp system performance comparison koza published benchmarks problems run method 
problems taken koza run conditions close possible koza benchmarks 
case steady state reproduction method generations virtual represent period new created tested 
see figures 
graphs koza format show dotted sequence line sequence 
just represents number individuals processed certain probability receiving answer running individuals generation run 
contains optimum run called henceforth number individuals represented minimum curve minimum number individuals expect process get answer probability run optimum length 
number interest population size call rank fitness order individual fit individual fit 
call fitness ranking individual fit fit 
probability individual loser way tournament type described proportional square fitness ranking 
stack genetic programming page assessing performance stack gp system 
tables describe test problems give examples solution programs created 
objective find function independent variable dependent variable symbolic form fits sample data points target function 
terminal set independent variable erk ephemeral random constant pushes value stack range 
function set protected division 
fitness cases sample data pairs interval 
raw fitness sum fitness cases absolute difference value top stack gp numerical stack left critter program target value input data pairs 
standardized fitness raw fitness problem 
hits number fitness cases top stack value left critter program comes target value 
wrapper 
parameters 
initial critter length range 
success predicate critter program scores hits 
example correct program table 
tableau regression problem 
regression probability success 
performance curves runs mutation 
stack genetic programming page objective find critter program encoding boolean expression output equal input boolean function case majority function truth table terminal set function set arity functions fitness cases possible combinations boolean arguments 
raw fitness number mismatches top stack value left critter program correct answer possible input states 
standardized fitness raw fitness problem 
hits raw fitness problem 
wrapper 
parameters 
initial critter length range 
success predicate critter program scores hits 
example correct program table 
tableau boolean majority problem 
probability success boolean majority 
performance curves runs mutation rate individual 
stack genetic programming page objective find critter program encoding boolean expression output equal input boolean function case parity function truth table 
terminal set function set nand arity functions fitness cases possible combinations boolean arguments 
raw fitness number mismatches top stack value left critter program correct answer possible input states 
standardized fitness raw fitness problem 
hits raw fitness problem 
wrapper 
parameters 
initial critter length range 
success predicate critter program scores hits 
example correct program nand nand nand nand nand nand table 
tableau boolean parity problem 
boolean probability success 
performance curves runs mutation rate individual 
stack genetic programming page performance comparisons stack manipulation functions system worked function sets problems koza 
function sets don take full advantage character stack system attempt assess performance system special stack manipulation functions added 
symbolic regression problem additional set runs structured problem form fitting stack architecture 
terminal input values stack seeded input value test case critter run 
stack manipulation functions added function set dup simply duplicates top stack item pushes copy stack swap swaps top stack items 
boolean problems sets runs different function sets addition set runs koza original function set 
set conditional dup drop functions respectively duplicated removed top stack item value true 
set runs unusual logical operators discovered buggy versions logical operators certain combinations arguments left original arguments stack beneath result 
include results performance improvement functions striking 
tables summarize comparative performance runs stack gp system different conditions benchmark performance published koza 
run conditions koza published results stack gp 
stack gp dup terminals table 
performance regression problem 
runs 
run conditions koza published results stack gp 
stack gp dup drop stack gp bug bug bug see text table 
performance majority problem 
runs 
run conditions koza published results nand stack gp 
answer stack gp nand dup stack gp bug bug bug nand bug see text table 
performance parity problem 
runs 
limited computational resources necessitated limiting population sizes koza 
strange buggy version defined follows defun buggy version 
spop spop notice normal lisp doesn evaluate second argument doesn need determine result top stack value true second value popped 
analogous behavior nand functions 
stack genetic programming page discussion array problems run collecting full performance statistics problems including symbolic regression trigonometric quadratic functions 
system compose musical compositions functional set consisting operators time delays setting musical intervals relative absolute changing rhythmic melodic modes 
fitness function case driven manual aesthetic assessment algorithm assessed harmonic rhythmic complexity rewarded attempts near previously determined optimum 
suspect fact stack free accumulate junk effecting fitness may strong positive feature system program contains code determines final result introns code sequences perform calculations create stack junk 
certainly sequences may rise relevant offspring importantly may buried fragments useful previous individuals 
represent biology genes may useful past may expressed mutation 
done includes systematic assessment evolution intron fragments see improve population time performance effected excised way 
availability stack general evolving program means problems evolve state representations system 
sensitivity system limitations maximum allowable program length needs explored noticed performance suffers allows programs long 
may long programs tend leave junk stack program really effects outcome cases returned top stack value interest 
allowing long programs just slows rate meaningful crossovers effect short sequence program really matters 
tried scheme particular type crossover operator selection reproduction scheme needs done exploring alternatives area 
limited computational resources problems tried far necessarily small uncertain method scale better gp methods 
program implemented macintosh common lisp ported linux 
lisp chosen desirable attributes interactive development environment efficiency increased fold rewrite 
highly efficient run time behavior critter programs attractive features stack approach 
virtual machine run critter programs extremely small lines code making system attractive embedded processor applications control signal processing 
notice stack gp system described far mechanism allowing branching program execution 
large number problems branching execution necessary 
problems planning strategy sideeffects functions primary importance actual sequence program execution interest final calculated result 
cases begun working extended stack gp system second execution stack added system virtual machine functions 
function takes numerical argument numerical stack grabs items execution stream queue functions executed pushing fragment 
pops code fragment appending front stack genetic programming page execution stream analogous forth pick operator takes numerical argument pointer copying item depth pushing execution stream 
hopes operators permit evolution useful subroutines branching recursion area just 
described new method genetic programming stack virtual machine compared performance problems basic gp system published koza 
problems tested stack gp system took nearly number candidate program evaluations find solutions koza system function set 
additional stack manipulation functions added took advantage special characteristics stack system considerable increase efficiency noted 
performance simplicity efficiency system implementation lead stack genetic programming promising technique evolutionary programming worthy consideration 
adobe systems incorporated 
postscript language manual 
reading ma addison wesley 
angeline peter jordan pollack 
coevolving high level representations 
technical report pa 
laboratory artificial intelligence 
ohio state university 
july 
banzhaf wolfgang 
genetic programming pedestrians proc 
fifth international conference genetic algorithms 
ed 
stephanie forrest san mateo ca morgan kaufman 
goldberg david 
genetic algorithms search optimization machine learning 
reading ma addison wesley 
holland john 
adaptation natural artificial systems 
cambridge ma mit press 
kelly nicholas spies 
forth text 
englewood cliffs nj prentice hall 
koza john 
genetic programming 
cambridge ma mit press 
tackett walter 

genetic programming feature discovery image discrimination proc 
fifth international conference genetic algorithms 
ed 
stephanie forrest san mateo ca morgan kaufman 
teller astro 
evolution mental models 
advances genetic programming kinnear ed 
mit press 
