programmed graph rewriting formal specification configuration management system bernhard westfechtel lehrstuhl fur informatik iii rwth aachen 
aachen bernhard informatik rwth aachen de 
due increasing complexity hardware software systems configuration management receiving attention nearly engineering domains electrical mechanical software engineering 
observation driven develop configuration management model called coma managing systems engineering design documents 
coma model integrates composition hierarchies dependencies versions coherent framework sparse set essential configuration management concepts 
order give clear comprehensible specification coma model defined high level multi paradigm specification language progres combines concepts various disciplines database systems knowledge systems graph rewriting systems programming languages 
due increasing complexity hardware software systems configuration management receiving attention nearly engineering domains electrical mechanical software engineering 
configuration management defined discipline controlling evolution complex systems 
particular configuration management concerned managing system components versions interrelations 
way configuration management aids maintaining system consistency 
configuration management model called coma managing systems engineering design documents 
coma model integrates composition hierarchies dependencies versions coherent framework sparse set essential configuration management concepts 
model generic principles common diverse application domains 
hand adapted specific scenario software engineering scenario documents requirements software architectures module implementations managed 
partially supported deutsche forschungsgemeinschaft project title software communication structures technical systems 
coma model defined high level multi paradigm specification language progres combines concepts various disciplines database systems knowledge systems graph rewriting systems programming languages 
progres specification useful respects 
precisely defines object relation types means database schema 
second describes complex operations high level abstraction 
third specification serves starting point developing efficient implementation 
primarily demonstrates application progres specification language coma model explained briefly see comprehensive description 
section gives concise informal survey coma model 
sections devoted formal specification 
section describes implementation section compares 
section concludes 
survey model coma model represents structures consider essential configuration management recursive composition hierarchy describes components sub system consists 
leaf non leaf nodes hierarchy called documents document groups respectively 
components document group related various kinds dependencies 
documents document groups evolve versions 
object plane version plane object dependency composition relation version history relation fig 

object version plane coma model distinguishes object plane version plane fig 

object represents set versions 
version plane refines object plane object refined versions relation objects refined relations corresponding versions 
objects versions connected hierarchical composition non hierarchical dependency relations 
furthermore history relations versions object represent evolution 
database configuration management represented coma graph consisting kinds subgraphs illustrated fig 

examples refer small program system written modula 
modula distinguishes types compilation units program definition implementation modules denoted extensions respectively 
system contains exactly program module acting main program 
module interface specified definition module realized corresponding implementation module 
definition module exports resources types procedures may imported modules type 
version graph document group graph configuration graphs fig 

subgraphs coma graphs version graph fig 
root belongs object plane contents situated version plane represents evolution history object 
history relation indicates successor 
general evolution history required linear 
may contain branches bug fix may applied old version having delivered customer merges combine changes performed different branches 
respect composition hierarchy versions classified revisions configurations 
revision acts leaf composition hierarchy 
internal structure revision declarations statements module consists represented coma graph revision considered atomic unit coarse grained approach 
inner root nodes composition hierarchy denoted configurations 
configuration graph belongs version plane contains version components mutual dependencies 
fig 
shows examples 
initial configuration contains initial revisions components 
imports realized respectively 
transition involves changes interface resulting new revisions branch evolution history body modified yielding new revision imports 
document group graph belongs object plane represents version independent structural information 
general relation document group graph versions constrained condition version component dependency contained configuration graph corresponding object component dependency exist document group graph 
loosely speaking graph monomorphism exist configuration graph corresponding document group graph 
fig 
shows document group graph satisfies condition 
note elements corresponding elements occur configurations exception consists import 
schema having motivated coma model turn formal specification 
language progres developed project 
progres integrates concepts various disciplines database systems knowledge systems graph rewriting systems programming languages coherent language 
formal semantics progres logic calculus described 
concerned application progres configuration management problems 
sections demonstrate progres studying non trivial real application real sense prototypical configuration management system built coma model 
start classical database issue progres specification includes schema declares types graph elements 
progres attributed graphs consisting attributed nodes connected binary directed edges don carry attributes 
schema declares node classes edge types 
node class declares attributes edge type declares source target class cardinality 
node classes organized multiple inheritance hierarchy 
subclass inherits superclasses attributes incoming outgoing edge types 
fig 
displays schema diagram coma model 
boxes dashed solid arrows denote node classes inheritance relations edge types respectively 
note relations represented arrows fig 
modeled nodes adjacent edges history relation modeled history node predecessor successor edges 
solution allows attaching version version dependency document group object component configuration graph object plane version plane object dependency configuration version component history object predecessor successor contains contains master contains contains document group graph document revision version graph dependent master dependent fig 

schema diagram tributes relations establishing relations relations 
general relations modeled directly edges nodes connecting edges 
subgraph coma graph represented root node connected nodes belonging subgraph configuration graph represented configuration node connected version component version dependency nodes contains edges 
graph model constructed subgraphs mutually disjoint 
apart history nodes node version plane connected corresponding node object plane incoming edge 
node version plane may regarded instance exactly node object plane 
fig 
shows part textual schema refines overview diagram displayed fig 
definitions attributes cardinalities 
object node carries intrinsic name attribute serves unique key 
denotes number version created 
edge type connects object version nodes 
object may number versions conversely version attached exactly object lower upper bounds cardinality enclosed square brackets 
version node carries number identifies uniquely versions object stable attribute indicating version frozen may modified date attributes 
history relations represented history nodes predecessor successor edges connected object nodes incoming edges 
section node class object intrinsic key name string integer edge type object version node class version intrinsic integer stable boolean false string string edge type object history node class history edge type predecessor history version edge type successor history version fig 

textual schema version graphs schema powerful express kinds consistency constraints 
fig 
summarizes important structural constraints partially mentioned passing 
structural constraints preserved operations coma database 

configuration may contain version object version consistency 

versions object numbered unique way 

version successor stable 

components stable configuration stable 

cycles history dependency composition relations allowed 

version component dependency mapped corresponding object component dependency 
fig 

consistency constraints operations data manipulation languages rely low level operations creating deleting single entities relationships modifying single attributes progres provides graph rewrite rules specifying complex graph transformations declarative graphical way 
progres possible specify operations formally precisely high level abstraction approaches content informal imprecise comments deal lengthy low level programs 
graph transformations specified progres checked consistency schema specification time 
progres integrates database world world graph rewriting systems 
graph rewrite rule called production consists parts header composed identifier list formal parameters 
left production version type type history history condition stable return path version version predecessor successor type object fig 

graph rewrite rule creating history relation hand side describes subgraph replaced 
right hand side specifies subgraph inserted 
condition part lists conditions attributes nodes belonging left hand side 
transfer part assigns values attributes nodes belonging right hand side 
result parameters receive values return part 
graph rewrite rule fig 
receives node valued parameters identifying versions connected history relation 
furthermore supplied type parameter indicating actual type history relation created 
returns new history node parameter 
left hand side contains version nodes associated object node edges versions belong object 
nodes left hand side identified parameters respectively 
left hand side need searched globally 
double arrow node node denotes path condition 
keyword means rule applicable path specified structure 
path declaration rule declaration 

indicate traversal edge negative positive direction respectively denote concatenation transitive closure respectively 
condition excludes duplicates sequences history relations 
general path conditions powerful flexible way specify complex graph pat terns 
condition part constraints checked listed fig 
predecessor version stable successor carry greater number predecessor order prevent cycles constraints fig 
respectively 
protective rule nodes edges left hand side affected application 
nodes replaced identically carry labels form effect applying consists creating new history node identifier returned result parameter connecting predecessor successor object node respectively 
insertions emphasized bold face right hand side 
transaction version version type type history version version elem version version elem version history type version fig 

transaction complex operation graph rewrite rules may specify complex graph transformations convinced rule specification paradigm suffers severe limitations 
progres exceeds rule paradigm providing control structures composition graph rewrite rules 
control structures similar procedural programming languages designed take atomicity nondeterminism graph rewrite rules account 
fig 
shows transaction graph rewrite rule fig 

sample transaction deletes version reorganizes evolution history connecting predecessors successors 
top level body consists sequence statements separated operator 
statement asserts applied occurrence version deleted 
assertion violated sequence fails leaves host graph unaffected 
note control structure preserves atomicity graph rewrite rules case failure execution affect host graph 
statement consists loop iterating predecessors successors current version operator elem iterate elements set 
pair connected history relation statement introduces local variable 
current version deleted 
scope give comprehensive description coma operations 
typical examples primitive operations create delete object change name object create delete copy version create delete history relation 
primitives defined complex operations convenient freeze configuration recursively including transitive components 
adaptations far coma specification independent specific application domain 
domain independent part specification called generic model 
discuss generic model adapted specific domain 
result adaptation denoted concrete model 
running example configuration management modula programs see section 
progres type system supports clear separation generic model concrete model 
progres stratified type system distinguishes node classes node types instances classes nodes instances types 
node classes types specify generic concrete model respectively 
nodes actual instances manipulated runtime 
due stratified type system types order objects may supplied typed parameters may stored typed values node attributes 
order adapt generic model concrete types documents document groups dependencies defined 
furthermore operations adapted enforce consistency constraints imposed concrete model 
example modula scenario dependencies definition modules dependent program modules master prohibited 
achieve generic operations extended access scenario specific type information 
schema enriched defining meta attributes assigned node types values 
meta attributes may assigned initialized node class node type declarations values type instance specific 
level generic model meta attributes declared initialized operations access attributes 
level concrete model meaningful values assigned meta attributes node type declarations 
way coma operations adapted concrete scenario merely extending schema leaving code operations unchanged 
illustrate approach sketched describe adaptation modula scenario 
fig 
displays excerpt specification scenario 
composition document group type program er diagram boxes arrows denote component dependency types respectively 
kinds elements cardinalities attached cardinalities attached component types refer composition relations document groups components note er diagram applies object version plane 
describe er diagram transformed progres schema 
confine discussion version dependencies 
order perform scenario specific type checking meta attributes attached nodes class version dependency fig 

type valued attributes keyword type denote type master dependent component respectively 
boolean attributes represent upper bounds cardinality assigned true component may play master dependent role respectively 
lower bounds may defined analogously 
node class version dependency meta type version component boolean node type version component node type version component node type version dependency meta true false fig 

meta attributes specifying scenario specific constraints fig 
shows meta attributes redefined case import dependencies program definition modules 
defined components representing program definition modules may act dependents masters respectively 
assigned false program module may import multiple definition modules conversely definition module may act master configuration contains program module component 
fig 
presents graph rewrite rule receives master dependent component dependency type parameters 
rule check lot constraints enforced generic model master dependent belong configuration configuration stable corresponding object dependency exist exist dependency master dependent 
fig 
changes performed rule emphasized bold face 
furthermore elements rule concerning checks scenario specific constraints printed bold face italics 
dependency legal respect master dependent type see condition part accesses values meta attributes associated dependency type type cardinality overflow occur see restrictions applying nodes left hand side 
note restriction specified unary relation fulfilled component participates dependency type upper bound 
production version component type type version dependency version dependency condition type type type type stable transfer return document group object component master component master dependent object component contains contains contains dependent component contains contains object dependency type type master dependent contains contains contains contains contains type master dependent contains fig 

graph rewrite rule creating version dependency conclude section go feature progres nice application configuration management maintenance derived information 
significant portion configuration management research devoted system building 
large software systems complex task build executable system correctly trigger compile link steps right order correct options minimal effort 
sequel sketch tasks supported means derived attributes 
contrast intrinsic attributes assigned values explicitly derived attributes calculated attributes attached node nodes neighborhood 
note analogous distinction applies relations edges paths respectively 
neighbor nodes need belong context need connected path arbitrary length 
progres runtime system evaluates derived attributes lazy fashion values calculated demand 
maintain compiled code modula scenario derived attributes way fig 
module revision source code attached intrinsic contents attribute type file 
object code attributes attached component nodes contained program configurations class program component 
note declared optional attribute cardinality enclosed square brackets evaluation succeed 
node class revision version intrinsic contents file node class program component version component intrinsic file node type program component derived 
self def sourcecode self sourcecode self self imports nil transaction component program component file component fig 

derived attributes specify compilations program modules node type conditional expression denoted evaluation rule 
second alternative evaluates nil yield defined value alternative selected 
alternative guarded expression denoted 
selected guard evaluates true 
guard states source current component exist components depends compiled successfully 
case function called parameters source code set object codes imported components 
body function modula compiler called 
function returns nil compilation fails compiled code 
easy task simulate functionality known tool 
call function triggers necessary compilations correct order minimal effort delivers requested object code possible 
linking may handled analogous way attach attribute executable program module components define attribute evaluation rules provide function 
implementation progres specifications executable coma specification may regarded rapid prototype 
coma specification covers pages includes primitive operations subset complex operations offered coma system see 
specification developed help progres development environment consisting editor analyzer browser compiler interpreter tools 
progres environment available free software 
starting coma specification configuration management system developed project dedicated posteriori integration heterogeneous cim application systems cad systems cad systems nc systems 
coma system developed project consists schema editor adapting system specific scenario screen dump shown fig 
tools editing browsing analyzing configuration management data instance level interfaces cim application systems integrated osi communication system gluing components heterogeneous environment multiple types machines operating systems data management systems 
implementation coma system comprises loc written modula code dedicated implementation operations coma database 
implementation coma system considerably easier reuse components developed project concerned construction integrated software development environments 
relation best knowledge previous performed author unique applying specification language programmed graph rewriting configuration management engineering design documents 
hope convinced reader progres specification language suited describe manipulate complex graph structures occurring application domain 
fig 

screen dump coma schema editor comparing coma model functionality coma system configuration management systems observe traditional configuration management tools supports consistent production derived objects sccs rcs efficiently store revisions text files successful 
tools solves just configuration management problem integration possible limited extent 
furthermore file rely formal data model 
advantages databases acknowledged configuration management tools systems developed top built components database systems 
approach opens door configuration management benefits semantic expressiveness underlying data models 
pcte support versions complex objects extended er data model may quoted examples 
comprehensive approaches configuration management integrate versioning composition dependencies coherent framework realized cad framework dec cohesion environment 
conclude section briefly compare progres approaches graph rewriting 
research conducted area mainly driven theoretical computer scientists put strong emphasis developing sound theory 
situation begun change extensions categorical approach increase expressive power graph rewrite rules expense loosing theoretical properties 
hand design progres strongly driven application domains software engineering database systems 
designing specification language implementing integrated development environment moved away pencil mode applying graph rewriting systems 
respects intentions progres similar followed designed implemented tools editing executing programmed graph rewriting systems 
approach different respects type system control structures attributes 
configuration management model called coma managing systems engineering design documents 
coma model integrates composition hierarchies dependencies versions coherent framework sparse set essential configuration management concepts 
order give clear comprehensible formal specification coma model defined progres language 
exception non determinism backtracking play minor role coma specification exploited full range constructs provided progres specification language schema definition derived attributes relations stratified type system graph rewrite rules control structures transactions 
convinced progres superior approaches relying low level data manipulation primitives furthermore believe need expressiveness multi paradigm specification language 
experiences gained configuration management strongly confirmed attitudes 

tool integration standard ansi draft digital equipment 
feiler configuration management models commercial environments technical report software engineering institute carnegie mellon university pittsburgh 
feldman program maintaining computer programs software practice experience vol 

gro hermanns pollack schwartz westfechtel das cim informatik berichte rwth aachen 
der theorie und anwendungen informatik springer verlag 
fur software informatik springer verlag 
katz unified framework version modeling engineering databases acm computing surveys vol 
december 
lowe extended algebraic graph transformation dissertation technical university berlin 
lowe single pushout transformation attributed graphs link graph grammars data types proc 
symposium john wiley sons 
nagl characterization project schafer weber eds proc 
st int 
conf 
systems development environments factories pitman press 
nagl schurr specification environment graph grammars ehrig kreowski rozenberg eds graph grammars application computer science proc 
th int 
workshop lncs springer verlag 
version management pact integrated software engineering environment proc 
nd european software engineering conference 
source code control system ieee transactions software engineering vol 
december 
schurr mit formale anwendungen und deutscher verlag 
schurr progres language graph grammars ehrig kreowski rozenberg eds graph grammars application computer science proc 
th int 
workshop lncs springer verlag 
tichy rcs system version control software practice experience vol 
july 
tichy tools software configuration management proc 
international workshop software version configuration control teubner verlag stuttgart 
van der wolf architecture cad framework approach proc 
st european design automation conference ieee computer society press 
westfechtel revision control integrated software development environment proc 
nd international workshop software configuration management acm sigsoft software engineering notes vol 
november 
westfechtel revisions und einer informatik springer verlag 
westfechtel graph system managing configurations engineering design documents informatik berichte aib technical university aachen 
schurr nondeterministic control structures graph rewriting systems proc 
th int 
workshop graph theoretic concepts computer science wg lncs springer verlag article processed macro package llncs style 
