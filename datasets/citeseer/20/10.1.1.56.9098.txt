synchronization specifications agents net behaviour description tom holvoet pierre dept computer science leuven belgium mail tom holvoet cs kuleuven ac cooperative multi agent systems open systems consisting multiple agents coordinate order achieve common goal 
petri nets highly expressive visual formalism specifying concurrent systems 
combining agents nets means pursuing specification agents nets specification interrelationships order benefit obvious advantages nets visual formalism substantial theoretical background 
provide formalism specification multi model nets nets class composed subnets may differ 
idea model agent separate net inter net specifications describe cooperation structure corresponding agents 
argue kinds nets basic condition event nets place transition nets highlevel nets situations preferred modelling concurrent behaviour 
suggests need multi model net specifications 
motivation software systems computer supported cooperative cscw groupware world wide web related applications characterized set adverbs open flexible highly concurrent complex open systems systems systems components may join leave system execution 
components systems rely priori knowledge availability services research assistant belgian fund scientific research components 
flexibility means new components modules object added system run time 
component application modelled autonomous concurrent entity physical location change execution 
components related numerous ways going type relationship simple relation complex authorization synchronization protocol 
focus dynamic dependencies 
objects agents appear provide suitable abstractions modelling realizing systems 
developing systems mainly concerned goals ffl describing components interrelationships describing components need demand expect components describing components communicate particular needs model realize lot questions sense component may ffl deducing system properties dead locks starvation 
global idea followed 
system components modelled objects agents autonomous active objects behaviour modelled petri net 
petri nets formalism modelling concurrent systems visual eases readability model highly expressive terms concurrency causality synchronization non determinism 
transitions object agent specification depend transitions objects agents case corresponding action called autonomous action external state stimuli cause action occur 
dynamic interdependencies agents objects synchronization protocols described interdependencies corresponding petri nets 
provide means agent communication emphasizing agent interdependencies 
introduce specifications formal instrument describing net composition kind petri net terms corresponding object agent type state 
section small example give clue view systems modelled 
section introduces notion generic nets concrete kind petri net model 
recursive definition synchronization specifications provided section 
show usefulness feasibility new approach small application section 
introductory example order offer reader intuitive idea proposed small simple known example producer consumer problem 
may problem bad example applications cscw groupware 
allows basics approach 
problem described follows 
kinds entities system 
producers autonomously consecutively produce items consumers consecutively operate produced items 
call entities agents autonomous encapsulated behaviour 
behaviour agents modelled isolation meaning point inter agent cooperation taken account 
results simple nets 
agent cooperation tackled 
cooperation described agent type producer synchronize instance type consumer exchanging item 
need define type agents need cooperate producers consumers state order perform cooperation transitions deliver get fire time 
consumer consume get producer produce deliver behaviour specification producers consumers 
consumer consume get producer produce deliver simple synchronization specification 
described simple synchronization specification see 
graphically synchronization specification visualized double line interconnecting transitions 
semantically means activity respective agents bound state peer agent 
particular denotes deliver transition producer fire iff consumer fire get transition 
deliver transition get transition fire concurrently fires 
point interested analyzing properties system 
example consider configuration consisting producer consumer 
synchronization specification defining appropriate transition merging operation nets yields composite net system 
resulting net analysed deadlock liveness state reachability 
synchronization specifications intended specify agents perform cooperation agents expect demand need agents order proceed achieving goal 
synchronization specifications viewed means statically interconnect nets different agents system 
synchronization specifications means formally denote interdependency overview techniques modular net construction reader referred 
consume produce deliver get net modelling system specific configuration 
agent activity terms types state 
generic nets large variety petri nets exist 
sort probably certain characteristics grain size specification expressive comfort available formal analysis instruments available tools may preferred particular situations 
section introduce generic nets 
generic net version petri net 
results extracting commonalities classes nets 
section synchronization specifications defined generic nets 
sort nets special cases generic nets synchronization specifications implicitly defined defining synchronization kind nets 
generic net directed bipartite graph consisting kinds nodes places transitions flow relation arrows 
net element place transition arrow annotation function allowing inscriptions kind 
generic nets functions remain unspecified 
tokens 
tokens type reside places 
behaviour nets described generic enabling rule transition enabled boolean operation function transition annotation pre set post set annotations fire 
transition fires extracts appropriate tokens input places shift appropriate tokens output places 
easy understand concrete class nets described special kind generic net enhanced appropriate definitions ffl annotation functions ffl token type specifications ffl structural restrictions ffl behavioural restrictions 
example consider class weighted place transition nets infinite capacities 
annotation functions instantiated constant function yielding infinity places constant function yielding empty string transition weight function arrows 
type tokens constant tokens net 
type anonymous 
additional structural restrictions case pure simple condition event nets 
additional behavioural restrictions deal firing rule arrow weight respected transition firing 
synchronization specifications basic definition environment envisage components agents intend components share parts nets modelling interaction 
stead nets respective agents remain encapsulated parts agent descriptions composition operators specify interrelationship 
composition nets considered relation transitions 
flexible dynamic synchronization specifications achieved providing advanced transition composition operators 
operators interconnect transitions denoting synchronization transitions transitions belong nets different agents agents 
define synchronization specifications generic nets 
definition easily extrapolated denote synchronization specifications kind net 
introduce notions synchronized transitions synchronized blocks 
synchronized transition transition generic net subjected synchronization specification relation tox relation 
notation double lines starting transition see 
synchronized blocks ffl synchronized transition generic net 

synchronized transitions 
synchronized block conjunction synchronized transitions ffl conjunction synchronized blocks notation meeting double lines indicator see ffl disjunction synchronized blocks notation meeting double lines indicator building blocks define synchronization specifications 
synchronization specification pair synchronized blocks 
notationally synchronization specification interconnection pair double lines synchronized block 
achieve specifications semantically synchronized transition imposes restriction transition firing rule synchronized transition fire synchronized transition synchronized block fires time 
meaning synchronization specification best explained example 
example fire enabled 
vice versa fire enabled 
transition fire 
recursive definition synchronized blocks allows lot expressiveness flexibility specifying transition synchronization 
synchronization specifications defined generic nets allow specify synchronization transitions nets different classes 
case talk multi model nets 
high level extensions basic form synchronization specification easily extended way nets extended years 
similar weights nets annotating synchronized transitions weight function indicate number instances transition synchronize synchronization specification 
synchronized transitions ascribed preconditions function state corresponding agent state agent needs synchronize 
case transitions synchronization specification fire enabled appropriate preconditions fulfilled 
resembles preconditions predicate transition nets cpns 
precondition synchronized transition function input tokens transition 
transition synchronizations allow dynamicity constitute purely static synchronization merely interconnect names transitions 
transitions available time transition find transition synchronized block synchronize synchronize disjunctive synchronized block 
achieving flexibility able alter synchronization specifications run time calls thorough approach presenting synchronization specifications 
need viewed class objects execution 
limited space prohibits detailing subject 
advantages synchronization specifications enable composition different kinds nets 
evidently yield problems tries construct net system order deduce system properties 
algorithm constructing net described 
general 
agent agents agent agent synchronization specification idea construct high level net allows multiple instances certain classes agents representing agents tokens net 
principles algorithm similar ones constructing net called synthesis net cooperative nets cooperative objects 
correct outline algorithm investigation impact net analysis techniques analysis results lost compared analysis isolated nets subject current research 
practical experience proved synchronization specifications welcome instrument describing permissions performing particular actions 
permissions performers type actions performed previously state 
small cscw example consider simple shared blackboard application 
blackboard manipulated viewed possibly multiple users 
blackboard contain objects called blackboard objects figures text created users may changed users having selected clicking pointing device 
objects released users manipulate 
figures functionality assumed scaling reshape polygons 
user acquire pen blackboard object may redraw 
model simplified application consists number objects users blackboard objects pens 
internal behaviour objects depicted respective rectangles 
object cooperation modelled set synchronization specifications 
shows user releases blackboard object blackboard object switched un selected state removed 
similarly user may change blackboard object changing name changing shape 
synchronization specifications merely describe object entitled state serves describe interaction protocol 
protocol changing shape acquire pen blackboard object may done concurrently user reshape blackboard object 
synchronization specifications powerful tool denoting component cooperation specifying synchronization 
defined generic nets allow specify synchronization transitions kind nets 
synchronization specifications introduced logical description component cooperation 
believe systems classical highly distributed multi agent groupware environment purely net composition specifications suffice 
merely serve purpose specifying highly synchronized components 
complementary way specifying component cooperation coordination generative communication linda objective linda 
extends notion having message objects autonomous agents 
research concern thor remove move change free selected release select free idle click free active acquire pen release pen holding pen move change shape free release acquired grab object user pen simple cscw application 
investigation generative communication synchronization specifications language development environment agent system development 
de 
survey basic net models modular net classes 
advances petri nets pages 
gelernter 
generative communication linda 
acm transactions programming languages systems 
holvoet 
pn tox paradigm development environment object concurrency specifications 
proceedings workshop object oriented programming models concurrency turin italy 
appear 

designing coordination model open systems 
proceedings coordination italy april 
blanc 
cooperative nets 
proceedings th international conference application theory petri nets zaragoza spain lncs 
