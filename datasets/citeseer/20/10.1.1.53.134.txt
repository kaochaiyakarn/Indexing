evaluating evolutionary algorithms whitley mathias rana department computer science colorado state university fort collins colorado usa whitley cs colostate edu test functions commonly evaluate effectiveness different search algorithms 
results evaluation dependent test problems algorithms subject comparison 
unfortunately developing test suite evaluating competing search algorithms difficult clearly defined evaluation goals 
discuss basic principles develop test suites examine role test suites evaluate evolutionary search algorithms 
current test suites include functions easily solved simple search methods greedy hill 
test functions undesirable characteristics exaggerated dimensionality search space increased 
new methods examined constructing functions different degrees nonlinearity interactions cost evaluation scale respect dimensionality search space 
numerous empirical studies attempted show effectiveness particular search algorithm 
empirical experimental approaches comparing algorithms disadvantages especially algorithms designed robust general purpose optimization search tools 
obvious danger empirically evaluating search algorithms resulting depend problems testing algorithms compared 
side effect algorithms designed tuned perform particular test suite resulting specialization may may translate improved performance problems applications 
important test suites challenging diverse 
examine new existing methodologies constructing test functions comparing effectiveness evolutionary algorithms parameter optimization problems 
result new test suite principles designing test functions different evaluation purposes 
propose guidelines concerning types problems comparative studies evolutionary algorithms studies carried limitations studies 
methods constructing scalable test functions introduced 
methodologies guidelines possible perform critical comparisons different evolutionary algorithms facilitate comparisons heuristic search methods 
consider limitations current test suites particularly related evaluation evolutionary algorithms parameter optimization 
argue problems separable problems separable nonlinear interactions variables 
separable functions may nonlinear objective function may involve nonlinearities determining contribution single variable evaluation 
optimal value parameter determined independently parameters 
surprisingly functions current evolutionary search test suites separable 
test problems demonstrate effectiveness algorithms simulated annealing evolutionary search algorithms 
problematic separable functions solved exact methods 
functions readily solved local search methods may easily solved algorithm explicitly builds local search simulated annealing kirkpatrick tabu search glover 
test functions display symmetries may easier solve methods 
dimensional functions symmetry exists 
higher dimensions 
equivalent solutions may exists function variables 
show higher order symmetries exist may types genetic algorithms inappropriate method search 
separable functions commonly test problems scalable 
allows search algorithms tested problems progressively higher dimensionality muhlenbein 
scalability desirable nonlinear interactions test function sensitive scaling 
show simple methods constructing test functions allow nonlinear interactions variables selectively scaled dimensionality problem increased 
consider scaling impacts cost evaluation 
bcd binary coded decimal binary reflective gray encodings discrete problem representations major consideration applying evolutionary algorithms parameter optimization problems bit encodings 
explore relationship gray bcd representations relate real valued representations representations relate search behavior 
consider combinatorial optimization problems 
known test cases exist problems traveling salesman problem 
inherent difficulty problems status np complete problems thoroughly documented difficulty parameter optimization problems cormen 
furthermore researchers specialized representations operators applying evolutionary algorithms heuristic search methods class problems 
parameter optimization problems simple representations bit strings float strings manipulated general set operators 
specialized representations operators combinatorial optimization problems general comparative purposes results seen application dependent 
long term problems specialized component thorough test suite 
design principles parameter optimization problems proposed solve general problem discriminating search algorithms terms effectiveness 
principles developed help establish guidelines comparative studies focus evaluation effort classes test problems relevance basic evaluation goals 
evaluating evolutionary algorithms years terms evolutionary algorithms evolutionary computation come refer set algorithms evolutionary principles build adaptive systems 
genetic algorithms introduced john holland holland best known 
time germany researchers ingo rechenberg hans paul schwefel developing algorithms known evolution strategies 
fogel owens walsh define set methods referred evolutionary programming 
evolutionary algorithms population search methods employ form selection bias search solutions 
mutation recombination applied strings representing candidate solutions optimization search problem 
genetic algorithms tend emphasize recombination string pairs evolutionary programming tends emphasize mutation driven search mutation acts single strings 
evolution strategies place emphasis mutation genetic algorithms exclude recombination degree normally associated evolutionary programming 
genetic algorithms defined holland associated binary encodings notions schema processing hyperplane sampling real valued encodings tend evolution strategies 
publications provide detailed descriptions algorithms relationship back schwefel back back schwefel fogel fogel whitley 
limitations existing test problems years de jong test suite de jong continually standard measuring performance various genetic algorithms 
de jong test suite table includes variety characteristics may affect algorithmic performance 
test suite meant serve gold standard designed illustrate broad efficacy genetic algorithms different basic types parameter optimization problems belew 
functions include unimodal function nonlinear function variables discontinuous function noisy function multi modal function local optima 
test sets introduced years ackley schaffer caruana eshelman das davidor forrest mitchell 
best known problems illustrated table 
functions gamma gamma gamma gamma bx gamma ix gauss gamma gammaa ij gamma gamma gamma cos gamma gammax sin gamma gamma cos gamma sin gamma gamma sin gamma table common test functions 
known rastrigin schwefel griewangk functions scaled number variables muhlenbein 
functions labeled known sine envelope sine wave stretched sine wave functions schaffer 
test problems tune refine variants single evolutionary algorithm argue superiority approach 
danger practice algorithms customized particular set test problems troubling test problems represent types problems evolutionary algorithms best suited practice 
davis shown functions quickly solved random bit climber 
davis shown performance random bit climber sensitive representation problem 
additionally muhlenbein 
empirical evidence test functions argue breeder genetic algorithm scales ln function evaluations needed locate global optimum number parameters functions 
show search methods exist require function evaluations exactly solve 
addition show easier dimensionality function increased 
function mean soln mean sigma number solved table results pass line search nonlinear nonseparable functions 
optimal solution problems 
immediately identify problems separable functions 
separable addition noise prevent algorithm locating optimal solution 
line search algorithm exploits separability solving parameter independently enumeration 
separable function accepts variables coded bits total search space size nk line search checks points associated variables 
complete iteration line search cost 
assuming constant result exact method solving discretized separable functions 
example test problems encoded bits parameter 
parameter problem effective size search space easily enumerated 
general nonlinear functions line search exact method serves heuristic form local search run multiple times random restarts 
representation need binary discretization variables line search applied regard problem encoding 
leaves nonseparable nonlinear problems 
problems scalable results obtained pass line search problems table 
problems solved various evolutionary algorithms dramatically fewer evaluations eshelman mathias whitley 
noted line search effective heuristic part number values assigned parameter large coded bits parameter coded bits parameter 
test functions coded bits 
single iteration line search requires evaluations 
compare line search problem bits parameter parameters search space line search enumerate parameters times evaluations 
sampled rate parameter solved line search multiple iterations 
known rosenbrock function optimization literature 
solutions function obtained minimization methods require derivatives employ linear search brent 
test problems table griewangk function scalable nonlinear nonseparable 
exhibits undesirable properties dimensionality function increased 
summation term function induces parabolic shape cosine function product term creates waves parabolic surface waves create local optima 
shown enumeration low dimensional versions function basin attraction containing global optimum appears encompass larger percentage total space search space grows mathias whitley 
note product term involving cosine dimensionality search space increased contribution product term smaller local optima induced cosine term smaller 
suggests function easier dimensionality search space increased numeric real valued representations 
gray coding preserves adjacency contained numeric space mathias whitley path walks adjacency neighborhood corresponds discretized numeric representation search space exists subset paths traverse gray space representation 
see section bcd representation gray space contains discretized numeric representation 
conclude gray coded representations function easier dimensionality search space increased 
illustrates griewangk function variables 
figures dimensional slices function taken diagonal hypercube 
effects increasing dimensionality problem respect product term includes cosine clearly illustrated 
function simpler smoother dimensionality search space increased 
symmetry property functions exhibit symmetry 
functions symmetric seen examining evaluation functions see 
dimensional versions type separable functions table symmetric 
separable functions display increased symmetry higher dimensions 
observation vector representing parameter values potential solution separable function form constructed subfunction permutations represent equivalent solutions 
proof evaluation component independent components order evaluation irrelevant 
subfunction applied component permutations yield equivalent evaluations 
corollary observation components unique components equal unique permutations distinct equivalent solutions 
separable functions table global optimum unique global optimum component value permutations represent exactly solution 
single global optimum regardless dimension function 
symmetry partitions search space large equivalence classes 
general values parameter parameters combinations parameter values unique equivalent permutations combinations 
set combinations containing single duplicate gamma gamma 
combinations equivalent 
applications multiple equivalent solutions unknown 
problems necessarily easy 
multiple equivalent solutions exist classes neural networks 
griewank var dimension griewank var dimensions griewank var dimensions griewank var dimensions graphs represent slices griewangk function dimensional versions problem 
graphs clearly illustrate dimensionality increases local optima induced cosine decrease number complexity 
consider neural network hidden nodes fully connected input layer output layer 
vector represent set weights neural networks 
furthermore weights organized weights connect hidden unit fan fan connections adjacent vector partitions pieces corresponding hidden units 
possible vector 
reorderings equivalent solutions reordering partitions moves positions hidden nodes network changing neural network functionality 
case set weights minimizes error different weights different connections networks potentially multiple equivalent solutions 
existence multiple symmetric solutions induces known mode failure certain forms genetic algorithms 
assume symmetric solutions neural network optimization problem gamma gamma gamma single parameter assume component represents set weights attach th hidden node input output layer neural network 
strings represent different ordering hidden units result identical functionality 
recombining mean certain hidden nodes contained parents duplicated offspring hidden nodes shared parents lost 
parents represent solutions offspring lose functionality 
problem noted researchers montana davis whitley radcliffe schaffer 
goldberg refers offspring produced dissimilar near optimal parents 
issues symmetry significant new test problems introduced section 
separable functions table factors mitigate negative effects having symmetric equivalent solutions extremely large number points search space 
single global optimum 
second subfunction independent subfunction 
recombining vector parameters inverse poses particular problem individual components offspring 
time problems nonlinear interaction variables recombination operators preserve interacting subsets variables form schemata building blocks goldberg particular advantage may disadvantage vigorously explore search space 
general guidelines test suite problems test suites include problems representative types applications algorithm appropriate 
example inappropriate test heuristic search algorithms test suite linear functions methods generally appropriate 
ideally test suites include problems representative real world applications 
powerful algorithms range problems practical interest expand 
test suites include problems push limits methods tested 
addition test suites open ended testing hypothesis driven different comparative goals may demand different test problems may served fixed test suite 
evolutionary algorithms practical interest established exist functions evolutionary algorithms outperform simpler methods 
particular application problems solved simple local search line search methods heuristic search methods evolutionary algorithms simulated annealing tabu search unnecessarily complex costly 
related goal compare different types evolutionary algorithms heuristic search methods 
comparisons test problems solved simpler methods lead different comparisons difficult problems 
guidelines propose evaluating evolutionary algorithms 

test suites contain problems resistant hill climbing 
measuring relative performance evolutionary algorithms argue test suite comparison purposes composed largely problems resistant simple search strategies 
validate test suite problems comparison purposes benchmarked various hill climbing strategies including line search representations comparisons 
mainly interested identifying problems readily solved hill climbing 
mean problems solved hill climbing automatically removed test suite 
important disallow problems difficult certain hill climbing methods may yield competitive solutions 
problems solved hill climbing documented comparative results interpreted accordingly 
hill climbing strategies successful typically faster evolutionary algorithms algorithmic overhead 
forms heuristic search strategies escape local optima additional computational cost 
evolutionary algorithms advantages hill climbing algorithms stochastic search methods advantages may lost algorithm designers customize evolutionary algorithms adding mechanisms promote hill climbing 
proven problem multiple problem representations easily hill climbed liepins vose space possible representations dramatically larger search space 
standard representations real valued bcd gray encodings hill finding representation easily hill climbed far difficult solving optimization problem 
focus attention binary encoded problems bcd gray encodings number concepts methods developed apply real valued encodings problems 
hill climbing may defined local search method defines neighborhood moves position neighborhood offers improvement ascent position offering best improvement neighborhood steepest ascent 

test suites contain problems nonlinear nonseparable nonsymmetric 
issues shown relevant light limitations current test problems 
test suites contain functions nonlinear interactions variables easily solved decomposing problem solving individual parts 
similarly functions symmetric 
having problems known symmetries acceptable long comparative studies interpret data accordingly 

test suites contain scalable functions 
scalability important characteristic test functions forms basis predicting performance algorithms search space larger 
relevant real world applications 
additionally difficulty problem scale dimensionality problem increases mechanism provided controlling nonlinearity function 
considers class combinatorial optimization problems clear scale problems critical 
exact methods branch bound algorithms horowitz sahni exactly solve np complete problems problems relatively small 
example padberg rinaldi solved city problems exact methods relatively easy solve knapsack problems variables martello toth 
problems scaled inherent difficulty problem expressed 

test suites contain problems scalable evaluation cost 
common test functions evaluation extremely fast overhead search method significant part total computation cost 
nature test functions stands sharp contrast real world applications 
example problems seismic data interpretation changing parameter changes partial evaluations associated parameter cost full evaluation function grows function number parameters mathias whitley stork 
represents significant computational challenge number variables large seismic data interpretations may variables 
desirable cost evaluation test problems increase size problem scaled 
hand objective functions evaluation relatively fast 
np complete problems simple objective functions cost evaluation scales linear fashion cormen 
designer test suite consider cost evaluation scales respect dimensionality search problem 

test problems canonical form 
test functions table widely closer examination find representations solve problems different 
problems may represented binary real valued strings 
furthermore representations bcd form method translating binary strings real valued parameters may differ 
simplest case degree discretization may different 
insidious ways representations differ 
example common transform binary string positive integer shift scale integer value map range associated particular parameter 
alternatively representations complement 
parameters translated binary strings fashion researchers convert bcd representations gray coded representation 
practice different problem representations created great deal confusion comparative literature 
changes representation potentially dramatic impacts search algorithms 
trying solve particular problem particular class problems changing representation problem reasonable valuable 
general comparative purposes differences change difficulty problem 
different problem representations induce different numbers local optima different sized attraction basins 
solving problem different representations equates solving different problems 
results obtained representation problem algorithm may valid comparing performance algorithm different representation 
solution representation problem precise problem defined represented 
way adequately achieve electronic archive design test problems representation part problem specification 
building new test problems methods discussed building test functions employ strategy complex functions built simpler primitive functions 
functions advantage visualized enumerated 
construction methods allow directly determine global optimum higher order constructed functions 
testing strategies baseline comparisons selected algorithms illustrate test suite construction strategies initially tested forms forms evolutionary algorithms 
hill include ascent random bit climber rbc defined davis random mutation hill climber defined forrest mitchell line search algorithm section 
search strategies typically identified binary encodings search problems search methods redefined conjunction discretization parameter optimization problem 
davis random bit climber rbc starts changing bit time random position 
sequence bits tested randomly determined 
improvement accepted 
climber flipped bit string new random sequence testing bits chosen rbc checks bit improvement 
rbc checked bit string improvement local optima located rbc restarted new random point space generating new random string 
random mutation hill climbing uses mutation operator random changes single string 
bit string mutated low probability length string improvements accepted 
motivation testing algorithm define fixed neighborhood potentially reach point search space local optima encountered 
ran rbc dozens functions different dimensions 
case performance poorer rbc multiple restarts 
elected rbc comparative illustrations 
line search hand outperformed local search algorithms evolutionary algorithms 
long number values assigned parameter relatively small practical run line search multiple times 
spirit rbc line search enumerates individual parameters randomly determined order 
enumerates parameter values twice arrives value local optima reached 
line search restarted new random point space new random ordering parameters 
line search encounter local minima sensitive gradient information way simple gradient descent algorithm 
line search sensitive local minima encountered line enumerated 
advantage greedy search time exploit global structure line search distinct advantage best point dimension currently searched remains relatively region search space parameters enumerated 
example illustrates functions examples ackley functions global structure 
function gamma cos sin maximization problem solved single pass line 
best point line center space take second line global optimum 
second function posed minimization problem global structure slightly harder exploit 
initial cut space line search near outer edge concentric channels cut space pass global optimum 
cut lie near outer edge concentric channels line search stuck reaching optimum 
case multiple iterations line search may required find global optimum 
practicality running line search multiple times depends number variables discretization variables 
compared rbc chc line search affected representation relies enumeration individual parameter values affected neighborhood connectivity individual parameters coded 
various local search methods applied chc adaptive search algorithm eshelman elitist simple genetic algorithm tournament selection 
elitist simple genetic algorithm meant representative holland genetic algorithm 
elitist genetic algorithms date back de jong 
tournament selection goldberg somewhat nonstandard known genetic algorithms form fitness scaling quickly lose selective pressure making genetic algorithm ineffective optimization purposes goldberg 
dimensional renderings functions ray shading illustrate global structure 
functions viewed top looking 
function right 
fitness scaling methods disadvantage scaling algorithm impacts effectiveness search difficult tune 
tournament selection self scaling simple understand implement effective 
tournament selection stochastic form rank selection 
duplicating strings directly fitness tournament selection randomly picks strings keeps best goldberg 
done times create intermediate population strings 
recombination mutation probabilistically applied strings create population offspring 
algorithm elitist means best string previous generation copied offspring population restoring size population size elitist simple genetic algorithm 
recombination accomplished point reduced surrogate crossover operator booker applied probability 
mutation applied individual bit probability length string 
chc adaptive search algorithm eshelman features common genetic algorithms strong emphasis recombination characteristics classify evolution strategy 
chc employs parent population size selecting highly fit parents recombination typical genetic algorithms parents randomly uniformly paired conditionally mated produce offspring 
algorithm chooses best strings combined parent offspring populations generation reproducing parents 
chc algorithm maintains best strings encountered course search 
chc run typical comparative algorithm eshelman mathias whitley 
target value full set offspring may produced due threshold mating conditions attempt prevent mating similar strings 
potential parents differ positions specified adaptive threshold value mated 
chc implements form heterogeneous recombination special recombination operator 
exchanges half bits differ parents bit positions exchanged randomly determined 
chc uses recombination execute search search terminates new offspring inserted new population 
point restart mechanism known mutation eshelman introduce new diversity search 
string representing best solution course search template re seed population 
re seeding population accomplished randomly changing bits template string form gamma new strings population 
search resumed 
gray bcd encodings building testing new functions issue representation considered 
commonly representations evolutionary algorithms bit representations bcd standard binary gray encodings 
conversion bcd gray encoding performed simple conversion matrix 
exists theta matrix maps string length bcd binary reflective gray representation 
exists matrix maps binary reflective gray string back original representation 
matrices bit string 
fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi higher dimensions matrix continues bits diagonal upper minor diagonal bits diagonal upper triangle 
binary matrix multiplication matrix multiplication mod produces gray coding reverses process bit column vector 
example 
similarly 
matrix shown converts bcd binary reflective gray coding represents common form gray encoding reorderings columns matrix produce matrix gray transformation 
furthermore rotations gray representation produces gray representation 
produces large number possible gray codings rotations space change structure space respect genetic algorithms neighborhood search 
exact number possible gray representations open question 
note transformation matrix necessarily produce bcd encoding string grayed returns encoding original representation 
matrix transformation right 
bit hamming space adjacency bit hamming space 
gray coding genetic algorithm literature removes hamming cliffs 
hamming cliff corresponds pair numbers numeric space bit representations complementary 
bit space adjacent numeric space representations bit strings 
gray coding just remove hamming cliffs 
noted earlier gray codings preserve adjacency numeric representations functions 
illustrates adjacency bit strings hamming space 
note space wraps edges 
graph right shows adjacency relationships numeric representation preserved gray space 
left see half adjacency edges numeric representations preserved bcd space representations arbitrary length continues true half edges numeric representation preserved bcd representations 
set possible functions gray bcd encodings identical affine transform representation spaces 
shown ways gray bcd encodings equivalent mathias whitley 
representations clearly different terms adjacency 
degree adjacency strings length half inspection 
ordered set strings length increase ordered set string length bcd encoding append strings set create half new set strings append ordered set strings create second half 
degree adjacency half set new strings second set new strings remains half newly created set 
induction bcd encodings preserve half adjacency relations contained numeric space 
gray bcd adjacency bit hamming space gray bcd encodings 
invariance gray bcd encodings possible construct functions insensitive representation bcd encoding binary reflective gray code 
select exists set equivalences matrices gamma gammak theta identity matrix 
simplicity bit space note delta equivalences possible construct function results evaluation bcd gray coded strings 
bcd gray coding equivalent function ce exists evaluation function bit vector column form ce assume input ce gray coded ce simplifying expression yields ce bit strings length corresponding matrix identity matrix occurrence identity matrix 
general strings substrings length gamma corresponding matrix identity matrix gamma whitley 
show principle build functions insensitive binary reflective gray coding bcd encoding 
time resulting functions insensitive forms gray coding transformations space 
coding insensitive problems require function solved simultaneously multiple representations unclear relationship functions actual applications 
note potential constructing coding insensitive functions current study bcd gray codings 
argue gray coding default relationship numeric representation 
constructing nonseparable scalable functions way introduce nonlinear interactions retain scalability nonlinear function variables starting function 
function scaled variables example constructing new function xn xn xn gamma xn refer expanded function 
expanded function longer separable induces nonlinear interactions multiple variables 
function subterms terms easily constructed 
consider matrices variables labels left top edges appear variable pairs matrix 
minor diagonal scaling strategy injects paired arguments subfunction choosing variable pairs upper minor diagonal matrix 
pair arguments lower left corner matrix 
results evaluations variable interacts variables appears parameter positions refer wrap scaling strategy 
similar paired variables appears powell singular function gamma gamma gamma expanded evaluation function upper lower triangle matrix choose variable pairs full matrix including excluding main diagonal 
scaling test functions pairing technique provides method scaling cost evaluation 
furthermore expanded functions similar application problems statics problem seismic data interpretation mentioned earlier 
case evaluation summed matrix representing cross correlation terms associated pair parameters mathias whitley stork 
parameters represent time adjustments seismic signals maximizing cross correlations signal pairs aligns signals reveal features 
problem appears similar visualization signal processing problems fields magnetic resonance imaging 
properties separable expanded functions primitive function symmetric diagonal search space may easier find values expanded functions simultaneously reduce error dimensions 
note symmetric 
collapse symmetric functions higher dimensions occurs contexts 
example upper lower triangles full evaluation matrix identical pairs variables order variables reversed 
function symmetric expanded function identical evaluations expanded upper lower matrix expansions 
general evaluation full matrix expansion including diagonal equal times evaluation lower upper triangle matrix expansions 
seen significant implications search algorithms 
kind simple symmetry avoided nonsymmetric primitive functions 
separable functions section form symmetry occurs functions undergo expansion 
consider clearly optimum optimum property pattern holds higher dimensional versions making possible infer global optimum optimum symmetric function equal global optima due symmetry 
symmetric duplication global optima potentially occur 
higher dimensions symmetry problems extreme 
consider 
global optimum possible parameter value global optimum unique 
case shifts sequence parameter values distinct equivalent global optima minor diagonal scaling strategy full matrix scaling strategy 
full matrix scaling strategy equivalence classes exist 
theorem vector representing parameter values potential solution expanded function constructed full matrix evaluation permutations equivalent solutions 
proof expanded full matrix evaluation constructed parameter value appears value combination components addition appears value combination components set evaluations occur 
permutations vector holds regardless full matrix expansion include diagonal diagonal symmetric 
qed components unique components equal 
unique permutations equivalent solutions 
global optimum unique permutations equivalent global optima 
exists 
global optima 
placing global optimum primitive function diagonal global optimum problem multiple global optima avoided optimum determined enumerating space 
change fact equivalent solutions general 
counting arguments apply expanded functions full matrix evaluation applied separable functions section 
case vectors parameter values inverse vectors recombining may result problem 
simple separable functions nonlinear interactions variables expanded functions 
case analogous problem occur recombining neural networks 
ways avoid problem associated having numerous equivalent solutions 
solution weight various calls subfunctions differently 
way deal problem lower triangle matrix subfunction evaluation 
addition primitive functions nonsymmetric 
final property expanded functions allow partial incremental evaluation 
single variable changed possible update subcomputations effected 
matrix expansion subterms subterms change wrap expansion subterms change 
current study distinguish partial full evaluations applications allow partial evaluation 
partial evaluation exploited combinatorial optimization problems tsp comparing algorithms muhlenbein eshelman considered parameter optimization problems 
expanded functions landscapes expanded functions pairs variables provide limited degree nonlinearity 
nonlinearity implies potential interactions power set input variables 
functions built fully exploit interactions power set combinations variables 
idea appears related form kauffman landscapes 
problems expressed bit strings length bit interacts randomly chosen bits determine contribution fitness function 
functions desirable properties different types problems typically parameter optimization scalable sense able scale specific function known properties higher dimensional space 
possible principles construction landscapes combined construction methods proposed 
build primitive functions variables apply landscape expansion principles analogous fashion 
time difficult characterize types functions result randomly selecting variables 
limit attention expanded functions build nonsymmetric primitive functions variables 
new primitive functions dimensional functions constructed nonsymmetric local minima unique global solution diagonal 
jx gamma gamma sin jy jy gamma xj cos jx cos jy gamma xj sin jx sin gamma gamma xy constructed analogous structure schwefel functions 
plots rana function 
fx bits 
instructive examine expansion 
simple expansion causes local minima coalesce 
help combat problem weighted subfunctions 
plots illustrates weighting ameliorate coalescence 
plots constructed analogous sine envelope sine wave 
fx bits 
composite functions test functions introduced literature interesting properties may limited usefulness current form 
proposed composition starts primitive function variable composes inner function takes variables outputs single value falls domain outer primitive function 
separable function rastrigin schwefel expanded follows 
gamma subfunction original function transformation function maps variables domain resulting function single global optimum uniquely map set input parameters value yields global optimum example input yields global optimum transformation function may yield solutions inputs domain value domain composed griewangk function de jong manner illustrated wrap expansion gamma illustration rendering primitive function 
image represents weighted version 
image weighted version 
views functions 
illustration rendering original de jong test function view top looking 
image represents view simple function composition griewangk test functions 
composition fitness values clipped shown fitness values clipped illustration 
resulting function nonsymmetric nonsymmetric local minima 
expanded functions avoid scale problems associated simple version dimensional form 
shows dimensional view fitness landscape test function 
shows dimensional view fitness landscape function composition 
inspection fitness landscapes similar horn saddle landscape smoothed somewhat landscape function composition 
closer examination great deal texture exists new function 
clipping fitness values value reveals shaped canyon illustrated 
clipping fitness values landscape highlights bottom canyon numerous local minima 
example tests comparisons offered designed illustrate characteristics test problems interactions specific algorithms 
comparisons intended definitively compare algorithm motivate hypotheses research 
test problems posed minimization problems 
best mean solutions compared various algorithms evaluations 
comparisons affected amount time algorithms allowed search number evaluations 
particularly true functions may possible quickly locate globally competitive solutions difficult subsequent progress locate global optimum 
illustrating effects scaling problem associated simple function 
results gray coding 
results table show chc able locate optimal solution high degree regularity dimensions 
dimensions problem easier rbc 
note dimensionality space increasing number restarts required locate global optimum decreasing rbc 
surprisingly line search solve problem reliably rbc chc 
results illustrate search methods exploit features search space 
possible additional parameter enumeration carried line search hinders algorithm rbc checks neighbors possible values parameter exploits simplicity problem structure 
complex algorithms may disadvantage problems 
new dimensional nonsymmetric primitive functions developed proved easiest 
tested function lower triangle wrap expansions weighting chc line search consistently solved unweighted problem various forms chc order magnitude faster 
weighted versions proved difficult 
table presents results various algorithms dimensions weighted lower triangle expansion weighted wrap 
chc clearly gives best performance solving variants problem time 
dimensions lower means solutions compared rbc line search competitive algorithms 
table shows results rana function weighted lower triangle expansion weighted wrap expansion variables 
analysis variance griewangk alg nb mean mean var soln 
oe succ trials restarts chc chc rbc rbc line search line table simple gray coded alg 
nb mean mean var solution oe succ evals oe succ gray wrap gray chc rbc bcd wrap bcd chc rbc wrap line table results 
functions quickly consistently solved chc gray coded 
optimum evaluation 
alg 
nb mean mean var solution oe succ soln 
oe succ gray wrap gray chc rbc bcd wrap bcd chc rbc wrap line table rana function ran variables gray bcd encoding 
optimal evaluation 
anova comparing line search chc variants problem indicates significant differences exist 
line search typically generates best results tailed test indicated chc produced best results dimensions wrap expansion 
dimensions tailed test suggests line search produced superior results compared chc wrap expansion 
anova test significant differences performance comparison results bcd gray encodings genetic algorithms rbc line search included sensitive coding 
results significantly different 
results gray coding better results bcd coding algorithms individual case results dimensions yielded similar results bcd gray 
table shows results weighted lower triangle expansion weighted wrap expansion variables 
new primitive functions local optima 
line search typically generated best results chc produced best results dimension wrap 
test indicated line search produced best results dimensions wrap expansion dimensions ttest failed show significant difference line search chc wrap expansion 
gray coding difference case 
gives histograms results anova tests considered significant value generated 
chc variable minor diagonal expansion best solutions bcd grey spaces bcd grey chc variable minor diagonal expansion bcd grey best solutions bcd grey spaces histograms mean solution variables plotted respect gray bcd encoding algorithms 
mean solution distributions problems variables chc wrap expansion 
gray bcd distributions similar differences distributions evident 
anova failed demonstrate significant difference bcd gray encodings genetic algorithms bcd case 
conjecture deserves exploration function numeric representation complex coding closely related numeric representation disadvantage 
rana function proved difficult 
line search particularly lower triangle expanded functions 
note distributions mean solutions skewed lower triangle results global optimum located half time chc line search functions 
conjecture coalescence local minima may explain functions appear difficult line search minor diagonal wrap evaluation function opposed lower triangle matrix evaluation 
fewer expansion terms coalescence may problem 
look results composite function 
evaluated full unweighted matrix expansion 
full unweighted matrix expansion symmetry properties discussed section may represent difficulty algorithms recombination particularly higher dimensions grows extremely large 
true chc uses reduces surrogate operator designed preserve blocks bits representing hyperplane samples recombination 
chc hand typically chops parents strings randomly individual bits parents 
gray coded results 
alg 
nb mean mean var solution oe succ soln 
oe succ gray wrap gray chc rbc bcd wrap bcd chc rbc gray wrap gray line table results weighted lower triangle weighted wrap 
full matrix gray alg 
nb mean var solution oe succ chc rbc genitor line table composition unweighted full matrix evaluation 
particular function properties may poor test function genetic algorithms 
explore hypothesis symmetries problem difficult certain types genetic algorithms higher dimensions ran algorithms dimensions included additional algorithm genitor algorithm 
steady state genetic algorithm chc maintains best strings population 
genitor selects pairs parents recombination produces offspring immediately displaces worst member population 
selection done explicit linearly biased ranking population size 
genitor uses recombination operator 
reduced surrogate operator booker especially designed promote unbiased hyperplane sampling preserve linkage interacting parameters 
studies genitor search behavior closely tracked chc mathias whitley 
seen table genitor behavior problem similar 
results conclusive sufficient evidence warrant investigation hypothesis particular class functions suited search genetic algorithms attempt preserve linkage blocks interacting parameters recombination 
line search yields best performance dimensions 
chc produced best performance dimensions test indicates chc produced significantly better results dimensions 
poor performance line search dimensions attributed part fact bits parameter full iteration line search requires evaluations variables 
little full iteration line search possible evaluations 
discussion want overly interpret current set results comparative point view 
goal run algorithms problems known properties motivate need better understanding problem characteristics potentially interact different search algorithms 
wish promote idea specific types functions test specific hypotheses behavior search algorithms 
nonseparable problems multiple symmetric solutions induce predictable mode failure evolutionary algorithms recombination 
evolutionary algorithms rely mutation recombination exhibit behaviors correlated hillclimbing algorithms rbc 
conjectures similar appear literature adequately tested part test functions designed allow perform adequate experiments 
experiments motivate guidelines section 
critical know function solved simple hill climbing 
scaling significant difference different problems display different interactions algorithms different dimensions 
problem representation critical 
line search surprisingly current set comparisons 
cases chc decisively outperformed line search 
wrap expanded functions solved line search line search solutions lower average means algorithms 
pointed comparing performance evaluations somewhat arbitrary different results obtained evaluations 
brent suggests approach comparing algorithms measure number evaluations required obtain solution optimal solution 
metric provide different view algorithm performance 
current study intentionally gave line search sporting chance bits parameter discretizing functions 
bits parameter allow line search approximately iterations set parameter values evaluations 
keeping number bits parameter increasing number variables similar effect 
line search may appropriate parameters represented fine level discretization problems hundreds variables 
relatively poor performance compared chc demands discussion 
replaces parent population generation best string display greedy behavior chc 
steady state genetic algorithms evolution strategies similar chc maintain best strings far population 
algorithms tend better optimizers simple genetic algorithms 
hand part holland original theoretical analysis genetic algorithms developed show genetic algorithms minimized loss potential fitness payoff terms allocating trials regions search space average contain solutions 
loosely interpreted aggregate fitness values strings sampled generation considered performance metric just value best solution search 
relevance real biological populations obvious 
addition real biological systems fitness landscapes dynamically change time monotonically saving best solutions poor strategy situations 
performance criteria discussed holland conflicts high risk search strategy examine strings poor evaluation hope finding string evaluation 
conflicts enumerative methods local search methods look strings fixed neighborhood order find improvement 
ways simple genetic algorithms stable search methods trajectory population search space appears affected composition initial population algorithms chc genitor syswerda 
holland suggests preface edition adaptation natural artificial systems canonical genetic algorithms suited study complex adaptive systems behavior described trajectories global optima 
de jong pointed holland canonical genetic algorithms necessarily designed function optimizers 
theory empirical studies odds genetic algorithms community 
theory lead development recombination operators booker reduced surrogate operator empirical studies lead operators uniform crossover randomly individual bits parent strings 
hindsight existing empirical studies suspect nonlinear interactions variables penalty chopping parents recombination benefit preserving building blocks interacting parameters 
better empirical studies needed better understand relative merit different approaches genetic recombination 
said little canonical form new test functions 
example bit strings mapped positive integer corresponding discretization function integers shifted actual domain 
results reproducible weighting factors weight expanded functions 
independent implementations invite differences resulting functions test problems obtained electronically contacting authors 
problems exposed existing test functions guidelines proposed constructing parameter optimization test problems 
guidelines address shortcomings test suites currently evolutionary algorithms community 
introduced methods useful constructing robust test functions comparing evolutionary algorithms 
understanding critical features different test problems difficult 
ability visualize analyze primitive functions proved helpful current study sufficient determining complexity function 
order provide baseline test functions local search hill climbing algorithms included comparative study 
body literature optimization derivatives brent largely ignored evolutionary algorithms communities heuristic search communities 
argue test suites hypothesis driven 
john hooker similar arguments scientific testing competitive testing heuristic search community 
testable hypothesis posed researchers choose test problems informed fashion 
possible develop test basic hypotheses relationship test function characteristics computational behavior local search evolutionary algorithms applied constructed functions higher dimensionality 
results alert researchers common test suites experimental evaluation evolutionary algorithms comparisons evolutionary algorithms methods tabu search glover simulated annealing kirkpatrick 
evolutionary algorithms best applied simpler methods fail 
satisfactory solutions obtained application problems simpler optimization methods may advantage evolutionary algorithms 
follows comparative studies aimed evaluating performance evolutionary algorithms methods include test problems display characteristics evolutionary algorithms appropriate choice search method 
larry eshelman providing original code sine envelope sin wave stretched sine wave test functions answering questions chc 
dave providing tools generate fitness landscape ray shade renderings 
members genitor research group sat numerous discussions offered guidance time time larry frederic gruau 
adele howe offered useful comments 
research supported nsf iri iri colorado advanced software institute 
sponsored part colorado advanced technology institute purposes economic development 
david ackley 
connectionist machine genetic hillclimbing 
kluwer academic publishers 
back schwefel 
survey evolution strategies 
booker belew editors proc 
fourth international conference genetic algorithms pages 
morgan kauffman 
back schwefel 
overview evolutionary algorithms parameter optimization 
evolutionary computation 
richard belew 
paradigmatic fitting 
ga digest may 
booker 
improving search genetic algorithms 
lawrence davis editor genetic algorithms simulated annealing chapter pages 
morgan kaufmann 
brent 
algorithms minimization derivatives 
prentice hall englewood cliffs nj 
cormen leiserson rivest 
algorithms 
mit press 
yuval davidor 
naturally occurring niche species phenomenon model results 
booker belew editors proc 
fourth international conference genetic algorithms pages 
morgan kauffman 
lawrence davis 
bit climbing representational bias test suite design 
booker belew editors proc 
fourth international conference genetic algorithms pages 
morgan kauffman 
ken de jong 
analysis behavior class genetic adaptive systems 
phd thesis university michigan dept computer communication sciences 
ann arbor michigan 
ken de jong 
genetic algorithms function optimizers 
whitley editor foundations genetic algorithms pages 
morgan kaufmann 
larry eshelman 
chc adaptive search algorithm 
safe search engaging nontraditional genetic recombination 
rawlins editor foundations genetic algorithms pages 
morgan kaufmann 
fogel owens walsh 
artificial intelligence simulated evolution 
john wiley 
fogel 
philosophical differences evolutionary algorithms genetic algorithms 
fogel atmar editors proc 
nd annual conference evolutionary programming pages 
evolutionary programming society 
fogel 
evolutionary programming current directions 
statistics computing 
stephanie forrest melanie mitchell 
relative building block fitness building block hypothesis 
darrell whitley editor foundations genetic algorithms pages 
morgan kaufmann 
glover 
tabu search part orsa journal computing 
david goldberg 
genetic algorithms search optimization machine learning 
addisonwesley reading ma 
david goldberg 
note boltzmann tournament selection genetic algorithms simulated annealing 
technical report nb 
department engineering mechanics university alabama 
frank thomas back 
genetic algorithms evolution strategies similarities differences 
schwefel reinhard manner editors parallel problem solving nature pages 
springer verlag 
john holland 
adaptation natural artificial systems 
university michigan press 
edition mit press 
hooker 
testing heuristics wrong 
journal heuristics appear 
horowitz sahni 
fundamentals computer algorithms 
computer science press 
kauffman 

adaptation rugged fitness landscapes 
stein editor lectures science complexity pages 
addison wesley 
kirkpatrick gelatt vecchi 
optimization simulated annealing 
science 
liepins vose 
representation issues genetic algorithms 
journal experimental theoretical artificial intelligence 
martello toth 
knapsack problems algorithms computer implementations 
wiley sons 
keith mathias darrell whitley 
changing representations search comparative study delta coding 
journal evolutionary computation 
keith mathias darrell whitley 
transforming search space gray coding 
schaffer editor proc 
ieee international conference evolutionary computation pages 
ieee service center 
keith mathias darrell whitley christof stork tony 
staged hybrid genetic search seismic data imaging 
schaffer editor proc 
ieee international conference evolutionary computation pages 
ieee service center 
montana davis 
training feedforward neural networks genetic algorithms 
proc 
th international joint conf 
artificial intelligence pages 
morgan kaufmann 
muhlenbein 
evolution time space parallel genetic algorithm 
rawlins editor foundations genetic algorithms pages 
morgan kaufmann 
muhlenbein born 
parallel genetic genetic algorithm function optimizer 
booker belew editors proc 
fourth international conference genetic algorithms pages 
morgan kauffman 
muhlenbein schlierkamp voosen 
predictive models breeder genetic algorithm 
journal evolutionary computation 
padberg rinaldi padberg rinaldi optimization city symmetric tsp 
optimization research letters 
powell 
iterative method finding stationary values function variables 
comp 

radcliffe 
genetic neural networks mimd computers 
phd thesis university edinburgh edinburgh scotland 
rechenberg 
evolutionsstrategie optimierung technischer systeme nach prinzipien der biologischen evolution 
frommann stuttgart 
rosenbrock 
automatic method finding greatest values function 
comp 

schaffer caruana eshelman das 
study control parameters affecting online performance genetic algorithms function optimization 
schaffer editor proc 
third international conference genetic algorithms pages 
morgan kauffman 
schaffer whitley eshelman 
combinations genetic algorithms neural networks survey state art whitley schaffer editors proc 
international workshop combinations genetic algorithms neural networks pages 
ieee computer society press 
hans paul schwefel 
numerical optimization computer models 
wiley 
gilbert syswerda 
study reproduction generational steady state genetic algorithms 
rawlins editor foundations genetic algorithms pages 
morgan kaufmann 
darrell whitley 
genetic algorithm tutorial 
statistics computing 
whitley starkweather 
genetic algorithms neural networks optimizing connections connectivity 
parallel computing 
whitley mathias rana 
building better test functions 
schaffer editor proc 
fifth international conference genetic algorithms morgan kauffman 
