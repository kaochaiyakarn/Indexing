statechart semantics steps andrew department computer science state university new york stony brook stony brook ny usa november statecharts har highly structured economical description language complex reactive systems pnu hp communication protocols digital control units 
statecharts extend conventional state transition diagrams elements dealing notions hierarchy concurrency communication 
hierarchy achieved embedding statechart state statechart 
concurrency supported mainly synchronous operation statechart composition permitting broadcast style communication constituent statecharts 
graphical syntax statecharts appealing especially hierarchy problems statecharts linear syntax isn inductively defined semantics isn compositional semantics inductively defined syntax semantics synchronization mechanism isolated rest language 
important formal semantics statecharts behavior precisely unambiguously understood safety critical properties systems formally verified 
pointed easy task 
statecharts rich visual language complex synchronization mechanism 
formal semantics solving problems difficult impossible 
solution proceeds stages building inductively define statecharts algebra sa modify semantics statecharts compositional define semantics inductively terms sa define process algebra plotkin style structural operational semantics sos synchronization mechanism isolated merge operator 
stages 
summarize strategy remaining stages 
preliminary dissertation report prepared supervision smolka 
mail cs sunysb edu example statechart step semantics psi depicts example statechart demonstrates main features statecharts 
prominent ingredients statechart states drawn rectangles transitions drawn arrows 
state name states may contain refined states 
refinement statecharts may viewed embedding finite state automaton fsa state fsas composed parallel indicated dotted line separating 
fsa initial default state indicated presence small incoming arrow 
example state refined states state turn refined states parallel 
global state configuration statechart set states statechart occupies instant 
example statechart states simultaneously composed parallel 
statechart state states enclose state configuration case include states fs gg fe gg unambiguous abbreviation configuration 
transition label consisting parts trigger generated action 
trigger set consisting primitive negative events generated action set primitive events 
case transition state state trigger primitive event generated action original semantics statecharts hpss statechart reacts input step configuration producing output :10.1.1.20.5519
step collection transitions triggered input 
transition triggered input source state current configuration primitive event trigger input negative events trigger appear input 
transitions parallel components statechart synchronized broadcast 
instance configuration fe gg statechart receives input reacts transition generating broadcasting action triggers transition generating action takes place single step 
pointed mar reactive system defined response combination inputs null response see footnote page 
configuration fdg input produce response statechart remains configuration fdg 
hand configuration fe gg step ff hg inputs ab ac abc sc fails congruence input configuration fe gg input available steps configuration ff hg configuration fdg 
pnueli shalev ps refine semantics hpss specifying requirements semantics statecharts conform synchrony hypothesis sh stipulates response statechart set input events maximal :10.1.1.20.5519
causality requirement labels may construed causing input 
global consistency gc requirement testing absence event lead contradiction 
instance transitions labeled may synchronize 
refer semantics ps step semantics statecharts characterize mapping psi statecharts labeled transition systems ltss 
lts psi state configuration initial state alphabet labels transition relation 
legibility informal depiction psi omits implicit steps correspond input containing events necessary trigger relevant step 
example single step fe gg ff hg labeled bc lts psi sixteen steps superset fag set events fa existing linear syntax statecharts defined terms tuple superficially resembles definition fsa 
real inductively defined syntax statecharts terms explicit notion statecharts composition 
furthermore semantics compositional illustrates 
figures depict simple statecharts lts gives step semantics implicit steps omitted 
note negative events ensure example step input ac 
define statechart equivalence sc psi psi sc denotes lts isomorphism 
shows statechart context delta place holder 
blank area filled statechart 
statechart fills blank delta lts psi depicted 
shows lts results statechart delta 
clearly psi psi isomorphic trace equivalent 
intuitive notion statecharts equivalence congruence step semantics compositional 
case reasonable choice statecharts composition equivalence 
order define compositional semantics statecharts things needed 
way composing statecharts larger statecharts may formalize definition statecharts context 
second alternative semantic function psi needed psi psi 
generally need property statecharts sc delta sc sc equivalence psi psi call psi modifying semantic alphabet labeled transition systems statecharts mapped 
new semantic alphabet uses objects called words 
word consists set events transitive ordering relation defined set events 
function constructs word lts label follows 
acts semantic label 
acts syntactic label trigger action 
word semantic step fd fg fe gg hand word step fb fe result psi 
psi 

equivalence sa terms defined psi 

psi 

equivalence lts 
weakens isomorphism slightly follows set equality words notion matching written differ slightly section 
weakening lts 
isomorphism pleasant property distinguishing psi statecharts terms distinguishing context delta 
main results summarized follows ffl introduce inductively defined algebra sa statecharts terms statechart contexts defined 
ffl show algebra sa statecharts terms correspondence set theoretic syntax ps modulo simple syntactic identities 
ffl show congruence operators sa sa terms delta 
semantics compositional 
ffl show new semantics agrees ps sense 
largest congruence contained sc distinguishes statecharts necessary 
related presents denotational semantics variant statecharts time events events 
semantics events alternative treatment negative events consistent hpss ps treatment events support global consistency requirement gc :10.1.1.20.5519
terms alternative algebra statechart assembled connecting incomplete transitions various states statechart 
semantic domain set possible histories computations 
semantics compositional fully 
modifies semantics satisfy global consistency presents compositional axiomatization 
mar mar presents related graphical language argos gives compositional process algebraic semantics related language esterel different ps respects 
syntax argos designed prevent non determinism circularity semantics 
compositional denotational semantics event structures negation free variant statecharts 
presents axiomatization semantics 
remainder proceeds follows 
section introduces sps statecharts syntax ps 
section introduces algebra sa statecharts terms 
section ends showing syntaxes interchangeable 
section presents step semantics ps semantic mapping psi sa lts demonstrates semantics compositional 
section defines modified semantic mapping psi preserves syntactic information 
section concludes showing modified semantic mapping notion semantic equality largest sc respecting congruence 
section concludes proposal extending results fulfillment phd dissertation 
statecharts syntax ps statechart defined tuple finite set primitive events finite set names boxes finite set arrows root 
statechart tuple set ae gives primitive event names appear statechart universal set primitive events 
element negative event treat negation operator applied events point wise sets events 
label trigger action 
trigger label subset action subset label trigger action written functions trigger action set primitives ae gives primitive events occurring trigger action trigger 
set events ae gives events primitive negative events trigger action 
traditionally sets denoted statechart listing elements 
example label fa bg fc dg written ab cd 
set labels generated events theta statechart set names equipped functions children ps notation pi called set states called set transitions 
prefer usage boxes arrows respectively reserve terms state transition semantic concepts 
similarly symbol pi set events conflicts multiple product operator 
drop value store element tuple assumed empty restricted syntax ps 
addressing value stores subject 
type fand org partial function default understood structure children type default 
context clear drop subscript functions 
ae theta child relation defined children transitive reflexive transitive closures respectively 
names organized tree structure 
mean root name unique parent 
type children combined parallel call box 
type children combined sequentially traditional fsa call box 
convention box child box 
box children default children gives initial state fsa 
statechart set arrows finite subset theta theta arrow ff source label target 
arrow ff source ff target ff label ff furthermore trigger ff trigger label ff action ff action label ff siblings box 
type children 
ff primitives label table gives tuple elements statechart depicted fa children fa dg fb cg fe fg fg hg type default refer tuples defined sps syntax pnueli shalev 
point sps mentioned 
actual choice names sps tuple irrelevant 
reason definition sps syntactic equality sps tuples 
sps tuples syntactically equal written sps bijection enjoying properties table henceforth refer sps sps set sc simply statecharts 
ps source target arrow sets names children results valid statecharts generalized multi link variety arrow 
presenting syntax semantics multi link arrows scope report mechanics arrows complex add new insights 
note consequence properties table 
type type fh children children side defined default default table properties bijection witnessing sps step semantics statecharts ps defined terms sps tuples 
defer presentation semantics sps tuples section algebra sa section useful discussion 
inductively defined syntax statecharts statecharts constructed components resemble smaller statecharts leads idea defining operations statecharts construct complex statecharts collections simpler ones 
algebra sa statecharts algebra introduced section captures structure sps tuples 
defining sa translation function oe sa sps 
conclude section theorems demonstrating algebra sa correspondence set sps tuples 
appendix presents details proofs theorems supporting lemmas 
statecharts algebra sa signature sa consists types operators place sequential composition operator representing boxes fsa structures having states binary parallel composition operator representing boxes 
specifically sa kg finite ae theta theta term corresponding sps box 
terms arrow set respectively boxes arrows underlying fsa 
note arrow 
refers source destination places list say type sa theta term corresponding sps box parallel type theta convenience abbreviate place term tu 
sa context delta sa term sub term replaced delta 
anticipating translation function oe sa terms corresponding statechart 
tu theta tu tu tu tu translating sa sps function oe takes arbitrary sa term constructs sps tuple 
sps tuple parts define oe follows oe similarly structure children type default complicated sa terms associated names actual choice names reflected 
simply gathers primitive events mentioned term ik 
primitives theta constructs set names sub terms term sa terms names directly associated sub term get distinct name occurrence scheme producing names devised natural numbers label sub terms theta string numbers kleene star identifies unique sub term term 
notation string numbers length notational conventions string concatenation strings prefixing number string number string 
may refer name simply string numbers prefixes 

proper prefixes set excluding 
longest common prefix lcp names name defined order define set need function names sa assigns names sub terms term subterm sa 
sa extracts named sub term term 
write sub term named term subterm 
imagines term represented syntax tree ast name assigned sub term numbering siblings ast left right collecting numbers path root node representing sub term 
name root ast sub term containing term empty list 
names set lists term defined names tu names ik 
names names theta 
names table gives names sub terms statechart 







term name names want extract sub term named subterm names sa defined subterm 
subterm 
subterm subterm thetap 
subterm names subterm undefined 
position define 
sa term oe translation sub terms theta 
ffl names gamma subterm type subterm andg remove names nested sub terms 
ffl children type type subterm type children default 

default arrow set root ffl ffl 
parallel composition binary sa sps 
oe handles difference removing extra names corresponding nested terms 
statechart may correspond sa terms don want distinguish 
sa terms syntactically equivalent written sa oe sps oe 
theorems establish syntax sa interchangeable statecharts tuples syntax sps 
detailed presentation proofs may appendix theorem sa congruence operators sa 
sa gamma sa gamma theta sa theta theta sa theta order application nested terms order default sub terms term unimportant 
table gives set equations expressing 
theta sa theta sa theta theta sa theta theta sa sa sa 
simultaneously replaces js vice versa table axiomatization sa theorem gives sound complete axiomatization sa sa sa equivalence class sa sa containing oe delta sa sa sc defined oe delta sa oe sps theorem oe delta bijection 
light clear syntaxes equivalent henceforth interchangeably 
step semantics statecharts sa term sps tuple gives static structure statechart contain state information 
ps pnueli shalev define step semantics statecharts terms set configurations global states set steps semantic transitions configurations 
section characterize step semantics ps mapping psi sa lts lts domain labeled transition systems 
element lts tuple xi gamma set states xi alphabet start state gamma 
theta xi theta transition relation 
transition gamma 
usually written gamma lts isomorphism notion semantic equality 
ltss xi gamma 
xi gamma 
isomorphic written xi gamma 
xi gamma 
bijection states xi xi gamma 
gamma 
semantic mapping psi sa lts define mapping psi need define sa term entities xi delta gamma 
set configurations state set lts psi 
configuration maximal set mutually parallel leaves names leaves names fn names names sa defined follows tu ff gg ik 
theta 
shorthand pointwise pre extension name integer 
cg 
extend prefix closure operation applying pointwise sets names 
delta initial configuration represent initial state psi 
delta unique configuration chooses default box defined analogously 
delta tu delta delta delta theta delta delta statecharts specify reactive systems meaning statechart reacts input produces output 
semantic alphabet consists set input output pairs written subset 
convention denoted listing elements ab cd 
mislead resemblance syntactic labels different 
set xi theta input output pairs alphabet psi 
gamma 
theta xi theta set steps transition relation psi 
define gamma 
necessary identify admissible arrow sets intuitively subsets may gathered form step 
definitions needed specify sets admissible sets orthogonal arrows ff ff orthogonal written ff ff source ff parallel source ff 
type lcp source ff source ff note ff ff 
case definition relative sa 
context warrants subscript term function particular sa intended 
consistent set arrows set arrows orthogonal arrow function consistent consistent fff ff ff ff relevant configuration relevant arrows function relevant relevant fff source ff cg 
triggered set events ev set arrows triggered ev function triggered triggered ev ff fi fi fi fi fi trigger ff ev trigger ff ev actions set output actions generated set arrows function actions actions ff action ff 
enabled set arrows configuration input enables set arrows function enabled theta theta enabled relevant consistent triggered actions configuration input understood treat enabled function synchrony hypothesis mentioned arrow set satisfy enabled order admissible 
global consistency requirement enabled 
admissible arrow set solution equation enabled 
separable set arrows separable configuration input ae enabled gamma inseparable 
causality requirement admissible arrow set inseparable 
admissible arrow sets admissible arrow sets statechart configuration input function admit theta admit fa inseparable enabled ag write admit admit configuration relevant consistent arrow set relevant consistent configuration function theta gamma ff fn source ff ng ff delta subterm target ff particular definition conforms ps 
pointed author statecharts solution enabled appendix 
admit 
conflicts claim statecharts specify reactive systems defined response input 
may choose set admit case doing effect results reported 
admissible arrow set gives rise steps gamma 
may defined gamma 
fi fi fi fi fi admit actions semantic mapping psi delta gamma 
sa terms semantically equal written sc psi psi 
example statecharts context delta demonstrate sc congruence sa 
step semantics compositional 
appendix gives formal presentation result examples applying definitions leading admissibility 
show statechart step initial configuration input statechart arrow set separable 
semantics isomorphic differently labeled transitions get psi semantic mapping equivalence lts refines trace equivalence produce congruence sa 
section alternative semantics show compositional 
conclude section showing ffl sc preserved operator ffl enabledness existence solution enabled preserved operator 
sc preserved operator inseparability solution enabled inseparable preserved operator lemma sc preserved operator 
proof sketch sa sc witnessed delta gamma delta sc iff sc observe bijection extended bijection hx see lemma correspondence 
verify solution enabled 
exists inseparable 

solution enabled inseparable 
ff relevant 
relevant 
sc solution enabled inseparable 
reasoning shows detailed proofs lemmas may appendix proof strategy theta delta 
corresponding solution enabled 
inseparable 
appendix inseparability fails preserved contexts way context distinguishes sc terms 
lemma establishes enabledness preserved operator 
enabledness inseparability preserved operator admissibility sc congruence 
lemma sa sc witnessed 
admit thetap 
solution enabled thetap 
proof sketch general proof strategy summarized 
step theta delta theta delta step gamma gamma 
step gamma gamma 
corresponds may need extra input actions generated sc step gamma gamma 
gathers arrows original step arrows step solution enabled 
showing solution accomplished applying definition enabled particular case appendix presents details 
far notion semantic equivalence identity relation ltss lts isomorphism equivalent sa terms distinguished right context distinguished notion trace equivalence 
section introduce means identifying sa terms sc distinguishing context 
new semantic mapping incorporating insight leads equivalence 
find preserves inseparability largest congruence contained sc orderly step semantics compositional semantics sa section psi new semantic mapping statecharts terms show compositional 
psi psi 
delta gamma 
configurations delta initial configuration 
semantic alphabet new definition called set words gamma 
transition relation psi 

refer new semantic domain lts 
psi sa lts 
notion semantic equivalence lts 
isomorphism written 
sa psi 

psi 

semantic alphabet built sets events represented lts transitions arrows sets lead 
ae theta elements consist set primitive events relation called causal ordering function theta constructs word lts label admissible arrow set admit actions 
ra theta defined ra ff trigger ff action ff defined ra gamma ra causal relation transitive closure 
follow convention causal relation word subscripted set confusion result write just meaning 
word trigger maximal elements action arrow set say action triggered trigger exists ff trigger ff trigger ff trigger intuition definition ff final cause 
know trigger ff enabled 
call triggered action triggered say triggered lemma relates lts labels lts 
labels asserts inseparability equivalent notions 
detailed proof appears appendix words semantic labels resemble simplified form clock records syntax semantics different 
lemma sa term configuration enabled actions 
trigger 
action gamma 
inseparable triggered 
proof sketch parts follow definition fact enabled 
show triggered inseparable event arrow ff action ff 
set ff 
find enabled gamma separable 
show inseparable triggered triggered means ff trigger ff trigger ff gamma action ff arrow 
result follows finiteness fact enabled 
say words match written trigger trigger action action trigger action iff gamma 
theta theta set orderly steps transition relation psi 

obtain gamma 
gamma 
follows admit actions gamma gamma 
gamma gamma gamma 
new semantic function psi psi 
delta gamma 
recall lts isomorphism bijection matches states transitions 
identity set equality words matching transitions 

defined delta delta gamma 
gamma 
new semantic equivalence iff psi 

psi 
refer semantic mapping psi equivalence orderly step semantics 
equivalence sa theta sa congruence sa sa terms contexts delta congruence sc respecting sc theorem main technical result 
shows semantics compositional additional merit refines sc little possible 
detailed proof result may appendix theorem largest sc respecting congruence 
proof sketch respects sc easily seen lemmas demonstrate thing left show establishing congruence inseparability preserved operator 
result induction structure contexts delta gives sa sa terms delta theta delta lemma gives arrow set producing orderly step gamma 
trigger actions solution enabled 

actions 
remains show inseparable equivalently triggered 
abusing notation slightly 
actions actions know ap assume action observation means 
contradiction 
largest congruence continued sc time sc quite easy construct distinguishing context theta sc theta accomplished finding step matched due difference causal ordering words 
put arrow labeled result step matching arrow set separable 
semantics psi improves psi compositional 
accomplished providing semantic labels lts 
causal ordering events syntax 
ordering captures notion inseparability property 
identifying semantic labels match weakens notion lts isomorphism just congruence largest sc respecting congruence 
dissertation proposal presents linear syntax statecharts form algebra sa 
shown sa correspondence modulo sa set theoretic syntax ps 
furthermore sound complete axiomatization sa equations table 
sa may analyzing semantics statecharts shown traditional notion statecharts semantics step semantics compositional 
sc congruence step semantics compositional equivalence ltss refines trace equivalence 
furthermore shown inseparability key feature step semantics preserved sc need new semantic domain new semantic mapping statecharts new semantics rectify problem inseparability 
domain lts 
mapping psi shown semantics orderly step semantics compositional 
characterization semantic labels match elements lts 
isomorphic notion statechart equivalence sc respecting congruence largest congruence 
achieved semantic labels preserve causal ordering information syntax statecharts 
causal ordering turn supported alternative characterization inseparability notion 
results foundation propose construct dissertation see appendix proposed outline dissertation 
sections outline revise extend proposal 
briefly discuss rest dissertation paragraphs 
syntax directed definition orderly steps orderly step semantics construct syntax directed definition psi carried 
plotkin style sos proof rules plo related statecharts semantics 
construction improves semantics ways 
characterization transition relation practice highly redundant 
redundancy removed natural way modified structure semantic labels results amenable style proof rules 
second orderly step semantics relies large number complex interrelated definitions semantic mapping applied fresh term sa 
syntax directed definition psi allows reason rules existence transitions allows transitions proved sa term reasoning transitions larger term containing 
statecharts process algebra showed traditional process algebra prefix choice recursion need extended appropriate variant merge capturing statecharts broadcast communication new state refinement operator order produce statecharts process algebra spa 
improves algebra sa ways 
sa term configuration dichotomy process algebras 
spa term state simplifying presentation semantics 
second wealth published research relating process algebra operators specification semantics interactions 
experimenting language features spa easier sa operator defined explored anew 
propose extend bringing exact correspondence semantics new 
anticipate finding finite state subset spa corresponds exactly statecharts 
known sound complete axiomatization bisimulation exists finite state subset ccs mil mil plan spa 
implementation state refinement concurrency factory plan implement state refinement concurrency factory cgl ongoing project stony brook north carolina state university aimed putting process algebra industrial 
allow evaluate usefulness state refinement language construct isolation treatment communication statecharts 
useful significant contribution concurrency factory practical design specification tool 
concurrency factory motif tool 
implementation include modifying enabled transitions method system object adding user interface allow depiction state refinement style hierarchy 
extended example employed evaluate usefulness state refinement 
semantics statecharts rich complex wealth proposals literature extend statecharts various ways 
numerous issues addressed statecharts extensions 
survey questions concluding section proposed dissertation 
bergstra klop 
olderog 
failures algebra communicating processes 
siam journal computing 
cgl cleaveland lewis smolka zhang 
concurrency factory practical tools specification simulation verification implementation concurrent systems 
proceedings dimacs workshop specification parallel algorithms princeton nj 
har harel 
statecharts visual formalism complex systems 
science computer programming 
huizing gerth de roever 
modeling statecharts behavior fully way 
proc 
th caap number lecture notes computer science pages 
springer verlag 
hp harel pnueli 
development reactive systems 
logic models concurrent sytems number nato asi series pages berlin 
springer verlag 
hpss harel pnueli schmidt sherman :10.1.1.20.5519
formal semantics statecharts 
proc 
nd ieee symposium logic computer science pages 
ramesh de roever 
compositional axiomatization statecharts 
theoretical computer science july 
mar 
argos language graphical representation automata description reactive systems 
ieee workshop visual languages 
mar 
operational compositional semantics synchronous automaton composition 
proceedings concur third international conference concurrency theory 
mil milner 
communication concurrency 
international series computer science 
prentice hall 
mil milner 
complete axiomatization observational congruence finite state behaviours 
information computation may 

synchronous asynchronous models statecharts 
phd thesis universita di pisa genova udine 
plo plotkin 
structural approach operational semantics 
technical report daimi fn computer science department aarhus university 
pnu pnueli 
applications temporal logic specification verification reactive systems survey current trends 
de baker editor current trends concurrency number lecture notes science pages 
ps pnueli shalev 
step semantics statecharts 
theoretical aspects computer software number lecture notes computer science pages 
smolka 
state refinement process algebra 
proceedings north american process algebra workshop ithaca new york august 
available tr department computer science cornell university 
smolka 
compositional semantics statecharts labeled transition systems 
technical report state university new york stony brook stony brook new york 
smolka 
process algebraic semantics statecharts state refinement 
proceedings ifip working conference programming concepts methods calculi june 
appear 
outline proposed dissertation 
overview motivation related 
statecharts syntax examples pnueli shalev tuples statecharts algebra 
statecharts semantics step semantics statecharts equivalence 
compositional semantics statecharts semantic domain lts 
syntax directed definition orderly steps 
statecharts process algebra general case finite state case axiomatization bisimulation 
state refinement concurrency factory tcf comparison statecharts tcf implementation state refinement tcf extended example state refinement tcf 
table proposed dissertation outline proving theorem equivalence syntaxes sa sps lemmas theorems appendix support assertion syntaxes sa sps interchangeable 
refer section translation function oe section definition sps lemma asserts structure sub term term included structure modification name prefixed subterm 
lemma sa term 
subterm 
type 
type children 
children default 
default side defined 
particular note 
events proof structural induction terms sa 
base case tu trivially true name 
assume lemma true terms theta 
inductive hypothesis know example subterm 
ih cases ffl property trivially satisfied subterm 
ffl 
assumption nested term subterm 

just restatement definition 
names prefixes names leaves nested terms 
ffl 
definition ih subterm 
subterm 

proof rest identical 
syntactically equivalent statecharts identical structure 
lemma sa witnessing fact 
subterm sa subterm proof oe sps oe bijection enjoying properties table 
show bijection subterm subterm enjoying properties table 
subterm 
subterm 
consider subset prefixed 
bijection correspondence image 

jh follows lemma fact forces correspondence descendants 
furthermore correspondence correspondence 
conclude bijection 

furthermore properties table hold lemma hold 
desired bijection sa theorem sa congruence operators sa 
sa gamma sa gamma theta sa theta theta sa theta proof assume sa bijection witnessing fact 
show contexts delta enjoying properties table 
part delta gamma delta define follows 




bijection maps names bijection maps names form identity map bijection overlap 
remains confirm enjoys properties table 

cases ffl non trivial property verify fh jn children children interesting case 

know 


condition satisfied 
ffl 
identity map case properties trivially satisfied 
ffl 
case appeal lemma fact enjoys properties table 
similar argument confirms iff part delta theta delta 
note type 
define follows 





reasoning showing bijection exactly 
reasoning differs showing enjoys properties table confirm fh jn children children type trivially verified children root result know type 
type children 
children 
similarly type 
type 
bijection assures fh jn children children lemma contribute corresponding children root delta 
part case delta delta theta reasoning symmetric part 
sa preserved operators sa sa congruence operators sa 
lemma gives sa delta sa syntactic equivalence substitutive sa contexts 
theorem gives sound complete axiomatization sa proof soundness proof soundness proceeds exactly theorem 
theta theta bijection 




properties table follow lemma 
theta theta theta theta 






note 







verify 
iff 

completeness sa witnessing fact 
structural induction show set rewriting rules produce base case tu trivial tu needs applications 
terms 
table assures type 
type correspondence children 
children 
subterm 
lemma gives sa inductive hypothesis produced know 

preserve defaults 


application sa produces new term sa witnessed 


subterm 
gamma applications sa term sa results 
theorem allows substitute subterm 
result 
terms theta theta children 
subterm sa subterm inductive hypothesis subterm 
produced subterm 
case applications sa sa may necessary produce term sa witnessed identity map children 
order children 
lexicographically 
number sub terms respectively 
permutation corresponds children finite number applications sa sa produce term sa children order see consider gamma term ordered subterm 

apply sa 
apply sa subterm 
sa term results 
applications result subterm 
procedure applied subterm 
steps total 
requires gamma applications sa produce sa sub terms bijection identity map children root order occurrences terms 
substitution results equations sufficient prove sa time true 
theorem oe delta bijection 
proof oe delta injective follows directly definition 
equivalence classes sa terms mapped equivalence class sps tuples exactly tuples sps members equivalence class sa equivalence classes 
oe delta surjective follows fact translation oe easily reversed 
define oe gamma follows ffl order set children bijection ord children kg type ord default exists 
ffl type oe gamma oe gamma ord gamma oe gamma ord gamma ord ord jn children ag ffl type oe gamma oe gamma ord gamma theta theta oe gamma ord gamma gamma theta oe gamma ord gamma oe oe gamma sps easily seen exists equivalence class sa sa oe gamma sa oe delta sps proving lemma enabledness preserved sc sa term configuration delta context part subterm 
ax subset outside ax fff aj source ff subset 
ag lemma establishes term admissible arrow set subterm contributing corresponding admissible arrow set isolation surrounding context 
stage scheme depicted 
lemma delta ax 
admit admit actions proof show lemma true contexts gamma delta theta delta delta theta induction structure delta gives desired result 
terms case ax empty empty arrows outside orthogonal arrows inside admit difference leading provided syntax 
terms delta theta delta case symmetric 


admit thetap partition 
actions observe ffl show enabled verify relevant note reverse true 
consider pair arrows ff ff labeled ab respectively 
fff ff may admissible input context third arrow ff labeled input enable ff ff 
consistent triggered actions ffl show enabled ff enabled observe ff relevant ff consistent ff triggered actions ff enabled thetap ff ffl show inseparable contradiction 
ae enabled gamma consider ae ff gamma ff enabled thetap enabled thetap gamma separable contradicting admit thetap 
sa sc witnessed delta context subterm define function hx hx gamma lemma delta hx ax lemma 
admit arrow set corresponding bijection ax 
hx bijection hx delta delta hx proof sc bijection witnessing fact 
terms delta gamma delta 
hx hx 
result follows fact bijection delta delta definitions hx terms delta theta delta 
hx bijection hx 

result follows fact bijection delta delta definitions hx case delta delta theta symmetric 
induction structure delta gives result 
lemma sc preserved operator 
place terms sc gamma sc gamma proof details 

sc bijection witnessing fact delta gamma delta 
define bijection hx 
see gamma gamma 
iff hx gamma gamma 
hx observe gamma gamma 
cases gamma gamma 
gamma gamma 

gamma gamma 
case arrows relevant configuration arrow set leads step 
second case equals arrows orthogonal arrow step results 
third case arrows outside relevant arrow set leading step matched admissible arrow set giving step 
proof gamma gamma 
implies gamma gamma 
identical 
sc preserved operator sc congruence 
lemma states inseparability sc preserved operator 
lemma sa sc witnessed 
delta theta delta sa hx defined admit actions gamma gamma 
fff aj source ff admit admit ax 
lemma inseparable hx hx gamma 
hx proof general proof strategy summarized 
definition gives 


lemma assures admit actions admit actions 
actions actions 
gamma gamma 
resulting step 
assumption sc step gamma gamma 
arrow set admit actions 
step 
remains show enabled actions hx 
observe hx hx 
correct configuration 
similarly actions actions actions actions actions actions actions configuration generated action correct values 
show ffl enabled ffl enabled show enabled show ffl relevant ffl consistent ffl triggered actions table enabled df enabled know relevant relevant relevant 
similarly consistent consistent 
parallel arrows orthogonal arrows vice versa consistent 
triggered actions actions triggered actions actions triggered actions 
enabled 
show enabled consider ff enabled 
ff 
ff relevant ff relevant ff consistent ff consistent ff triggered actions ff triggered actions actions 
ff enabled actions 
solution enabled ff ff ff 
reasoning conclude ff enabled enabled 
inseparable hx admit hx gamma 
hx step 
example demonstration claimed example demonstrates sc congruence 
section shows sc fails preserved context delta solution enabled delta fag separable 
statechart represented sa term tu tu theta tu tu statechart tu tu tu tu ac ac ac bd table enabled pa df table shows values enabled delta enabled delta various values don list inputs just keep table shorter 
solution enabled indicated table box solution entry 
context delta delta tu tu theta delta convenience designate configurations give mapping follows hx df 

dg 

ef 





zb 

zc 

zd 

ze table enabled configurations df relevant arrows relevant pa df ff ff ff relevant ff ac ff ac ff ac bd ff choice consistent fff ff ff table lists values enabled pa df choice fa cg ignore input keep table shorter relevant pa df 
sets relevant consistent fff fff fff fff fff ff fff ff fff ff gg 
values enabled table 
examine step df bcd gamma gamma 

actions fff fa cg observe fff ff solution enabled inseparable 
sc step df input ac producing bd output ac bd gamma gamma 
ze arrow set fff observe fff ff solution enabled fag reflected table 
circled entry table solution enabled df fag gamma exhibiting separable 
causal loop ff ff input fff ff inseparable proving theorem congruence lemma relationship semantic words semantic labels xi states equivalent inseparability 
result central proof congruence 
lemma sa term configuration enabled actions 
trigger 
action gamma 
inseparable triggered 
proof 
part observe maximal trigger ff ff ff triggered actions contradicting enabled 
conversely maximal definition part observe gamma generated action arrow maximal case maximal definition part show contradiction inseparable triggered 
assume triggered 
assumption literal gamma 
finite infinite chain distinct delta delta delta delta delta delta case causal loop denote loop delta delta delta assume distinct minimal loop 
defined statecharts syntactic labels action trigger disjoint know mod ff trigger ff ff necessarily distinct ff 
fff aj trigger ff gamma inseparable solution enabled fag 
set admit fag situation statecharts specify reactive systems defined response null response input definition admit footnote page 
claim triggered generated proof claim actions observe ff ff triggered trigger ff trigger ff triggered actions 
assumption trigger ff ff contradiction claim true 
enabled gamma separable contradicting assumption admit 
conclude triggered 
triggered action sequence fff ff arrows triggered ff triggered action ff 
set enabled gamma ff action ff implies presence ff trigger 
ff action ff action ff sequence triggering arrows ff enabled gamma theorem largest sc respecting congruence 
proof largest congruence contained sc defined delta sc show show establishing sc respecting congruence delta sc show show exhibiting distinguishing context delta sc sc respecting congruence proceed structural induction context delta 
base case delta delta show sc follows definition lemma 
show preserved operators sa 
result operator follows directly lemma 
discussion existence uniqueness see example section 
recalling lemma issue operator establish inseparability 
sa witnessed 
delta theta delta sa hx defined admit actions gamma 
actions 
know lemma admit actions admit actions 
ap 
know enabled remains show inseparable hx proceed contradiction 

assume separable action ff trigger ff ff triggered 
clearly ff enabled actions 

wp contradicting largest congruence sc witnessed exhibit context delta theta delta sc 
easily done gone 
assume configuration input admit admit ap 
know trigger trigger action action trigger action 
wp ff arrow trigger ff ff trigger ff ff trigger set events needs input ff triggered 
create new ff statechart tu tu fff 

fff admit gamma fff separable hx gamma 
constructed context gamma triggered 

