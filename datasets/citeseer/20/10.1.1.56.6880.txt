model intelligence economy eric baum nec research institute independence way princeton nj eric research nj nec com november 
market algorithm autonomously complex tasks multiple cooperating agents giving agent motivation improving performance system 
specific model called hayek machine proposed tested simulated blocks world bw planning problem 
hayek learns solve complex bw problems previous learning algorithm 
intermediate reward simple features learned efficiently solve arbitrary bw problems 
hayek machine seen model evolutionary economics 
growing consensus attempt understand mind arising interaction modules agents simpler complex compared individual neurons 
view separately expressed workers wide variety disciplines discipline offering independent empirical evidence literatures evolutionary psychology cognitive psychology brain imaging philosophy 
computer science literature focusses constructivist approach intelligence 
divide conquer natural approach complex computational tasks 
finds growing consensus human intelligence originate interaction simpler agents 
extended appeared icml 
arguably critical problem producing intelligence multiagent system attributing credit agents collaborate project 
minsky wrote suppose tasks involved complex task winning chess game 
assign decision credit completed task 
complex problems decisions hierarchies running times fantastic 
back propagation addresses problem level individual neuron years study provide answer 
example evident backpropagation apply interactions modules complex compared individual neurons tasks involving reasoning planning 
take point view multiagent system learn reward agents learns perform tasks 
picture similar reinforcement learning community learns policy value simultaneously am proposing rewards computed agents possibly collaboration 
define economy agents set agents pass rewards modify behavior response rewards 
proposed seek appropriate constitution economy agents promotes evolution intelligence 
previous models viewed economies agents including prominently lenat holland classifier systems 
new definition useful leads insight 
discuss economic insights assignment credit classifier systems new model pose open questions 
knowledge holland author economic terminology insight multi agent learning machine 
classifier systems attracted considerable interest difficulties rewarding long chains agents collaborate 
suggests assignment credit agents collaborating sequence flawed 
proposes potential flaws 
tragedy commons arise rewards shared active agent shares payoff incentive agents including agents hurt performance active payoff coming 
reward money enter system earned world easier system learn cheat solve hard problems posing 
classifier systems seen substantially representational power naively apparent agent sets utilizing bids prioritize dynamically unstable 
miller drexler proposed applying economic ideas create complex programming environment distributed computing commented briefly possibility producing intelligence economy agents 
identified cheating problem mentioned proposed holland similarly generalized economies natural systems complex adaptive systems 
cas include am calling economies agents 
unfortunately know extent compact definition cas 
enforcing local conservation money solve 
particular noted conservation law positive feedback loops corrupt assignment credit remarked corruption plagued lenat multi agent intelligence 
describes economy agents call hayek machine 
hayek interacts external world modelled complex system hayek may take actions payoffs hayek response appropriate series actions 
experiments date tested hayek particular benchmark world blocks world described 
hayek consists collection agents initialized random 
agent function maps states world including internal state hayek bid action pair 
hayek computation proceeds steps follows 
step agent high bid active takes action pays bid previously active agent receives reward paid world step 
agents pay paid wealth fluctuates 
bankrupt agents negative wealth removed new agents created randomized process 
motivates hayek design 
hayek access world valuable resource correct actions create wealth 
doesn know utilize resource 
sells high bidder bunch agents 
winning bidder buys world property winning bidder right take action changing property right sell right collect rewards world owns 
agent owns resource motivated maximize value 
agent action adds value afford 
conversely competitive bidding forces agents bid close expected value world action 
bids estimate value choosing agent high bid rational 
hayek autonomously divides complex problems set subproblems way gives agent incentive improving wealth production system 
exception important caveats described new agent enter hayek economy entry increases hayek wealth production 
agent average takes world states higher value profitable enter 
agent average takes world states lower value go bankrupt removed 
hayek executes randomized hill climbing search collection agent space 
update hayek entry death agent improves performance average caveats 
main caveat stems fact hayek bootstrapping evaluation states 
new agents may able enter exploit entry degrades performance system 
phenomenon analagous insurance markets 
entry agents may perform computations take actions affecting world 
agents advances hayek learning improving valuation states 
hayek agents restricted productions single fixed bid action 
complex agents experimented 
agent triplet condition action bid 
condition boolean conjunction 
condition true agent bid bids zero 
agent specialist 
hayek experimented derives holland classifier systems general notion condition action bid agents agent paying bid preceding agent 
differs selling access world agent establishing clear title assignment credit avoiding tragedy commons imposing conservation money agent representation language 
hayek compared classifier system literature reinforcement learning literature 
blocks world bw problem hayek sees series instances 
instance consists stacks blocks block colors 
stack called goal second target 
hayek controls hand empty may grab top block stack goal holding block may drop top stack goal 
hayek succeeds copying goal stack target position actions rewarded 
sees new random instance 
picture bw problem shown 
blocks world benchmark domain remains widely studied today 
treated planning problem solver told objective construct plan solution 
alternatively learning planning problem learner receives reinforcement discover goal 
bw challenging reasons 
state space combinatorially huge raises curse dimensionality standard learning algorithms 
second goal highly non linear correctly stacking third tenth blocks top incorrect second gets 
third limited table size creates tower hanoi aspect long sequences actions may necessary solution stack top blocks soon needed 
experiments applied sophisticated general purpose ai planning algorithms blocks world problems finding solve problems involving small roughly single digit numbers blocks hand crafted knowledge specific blocks world 
domain knowledge problems involving tens blocks solved 
blocks world problems experiments similar identical experimented 
see discussion 
author aware addressed goal discovery problem blocks world number authors interested learning blocks world contexts 
whitehead ballard applied temporal difference algorithm learn pick green block initially blocks 
birk paul schema mechanism moved single block empty table 
koza genetic programming built fixed stack instance unbounded table built sensors pertinent information needed block top block top correct block target stack 
papers addressed bw versions involving discovery goal necessity stacking blocks top needed blocks 
days training hayek learns solve bw problems involving blocks started tabula rasa 
simple features intermediate reinforcement hayek learned solve arbitrary instances uses constant factor actions possible exponentially rare instances 
note hand coded planners take seconds computer time address blocks world instance 
trained hayek instantly solves novel instances humans spend years learning speak utter appropriate sentences evident reflection 
motivated approach attempt solve assignment credit problem multi agent systems able divide conquer hard problems 
perspective promising observation may hayek succeeded producing sets agents collaborate successfully engaging long series actions 
universal solver set example consists set agents 
random agent generator take order tries generate complex agent order tries 
exhaustively search set agents set combinatorially prohibitive 
optimism qualified reasons 
scheme hand aided hand limited representation 
representation implicitly encodes topology problem discussed 
rendered search tractable feature extend domains 
representation sufficiently limited describe general solution aided added feature top stack intermediate reward function 
intermediate reward function expanded representational capabilities stabilizing sets agents 
natural way encode algorithms representation holland consisting productions bids prioritize productions bids 
intermediate rewards stable agent sets average agents higher bid acting agents lower bid higher bid agents go broke 
intermediate reward guided learning increasing representation power important open question similar economic system powerful representation solve general bw problems intermediate reward 
constitution limited ways 
impossible small finite collection instances hayek wasn trained hayek solution solve training 
note course solve large instances requires actions 
agent represent negative knowledge condition don take action 
agents take actions possibility agents simply communicating results computations agents 
general claim asserted constitution hayek economy optimal 
devising better posed open problem 
ongoing experiments generalizations allowing complex agents reported 
describes blocks world environment detail 
gives details version hayek machine experimented including subsections describes new agents generated describes bid values generated analyzes convergence properties gives statistical analysis hayek blocks world 
describes empirical results bw including subsections describes hayek results simple feature describes hayek results tabula rasa compares simple strawman assesses experimental results 
discusses related including subsections discusses hayek context previous holland classifier systems conjectures problems versions discusses hayek context temporal difference real time dynamic programming algorithms argues hayek advantages discusses previous economic models computing 
suggests hayek machine viewed different perspective model economics 
concludes 
blocks world physical blocks world described encoded set vectors form delta delta delta gamma 
denotes stack number 
goal stack target 
denotes color block height means block height 
hayek actions written fg dg 
action respectively moves hand column grabs respectively drops top block 
holding block invalid 
hayek series instances random set stacks blocks 
reproduces stack position rewarded goes instance 
actions solution proceeds instance reward 
experimented reward schemes 
scheme hayek rewarded partial success 
agents removing top block incorrect partial stack position placing correct block correct partial computer code written charles garrett michael buro 
see 
stack reward 
agents removing correct block placing incorrect block stack placing block incorrect partial stack penalized 
agent solves instance reward 
scheme agents rewarded successfully solving instance 
hayek trained successively larger instances 
stage instances blocks distributed target goal stacks blocks distributed stacks 
hayek sees instances stage learned solve moves stage 
scheme hayek taught intermediate reward successively larger instances considerations motivated study intermediate rewards 
coming decades computers may faster programs complex robust 
hope train program computer guiding intermediate reward function 
view intermediate rewards feature human learning seek understand 
view evolution learned near tabula rasa simple reward number grandchildren knowledge infants form complex intermediate reward function coding hunger pain hayek machine hayek consists collection agents 
initial wealth agent zero 
agent condition numerical bid action 
computation proceeds steps 
step validity agents conditions evaluated 
condition boolean formula true action legal agent bids 
step single agent bidding highest active 
action taken pays bid previous active agent receives payoff world turn pay active agent 
agent active charged small rent fifth bw instance order remove agents active keep population small hayek run fast 
rent agent wealth changes active wins auction 
agent instance negative wealth removed 
agents form delta delta delta scheme experiments larger final rewards solving problems higher stages 
motivation scaling avoid transition higher stage 
scaling rewards impact 
runs initial random seed graduated reward nearly identical 
agent action grab respectively drop block bid hand holding respectively holding block 
experiments active agent bw instance pays bid agent receives 
expressions form op op denote atoms may meaning blank empty current content hand grid location form fx stack fy hg height 
existentially quantified variables analagous holland wildcards 
condition said valid agent bids assignment hg rendering boolean condition true 
system searches assignments randomized order assignments selected randomly 
height highest stack seen far 
action moves hand column performs action takes values fg dg grab drop may number note encoding departs tabula rasa cartesian coordinates 
existential quantifiers stack values block color arbitrary mixture implicitly encodes topology 
am interested minimizing encoded domain specific knowledge hopes hayek robustly solving wide variety problems 
topology broadly useful 
regard biological evolution having started priori knowledge topology manipulates objects embedded dimensional space 
experiments indicate human infants born implicit knowledge topology object permanence 
course child capable solving bw problems learned world 
experiments typically performed rent 
clear analytic understanding optimize choice rent 
rent bids tend rise expected 
charging instance rent principle bids small amount generally applicable agents profit opportunities amortize rent payment see smaller decline specialists 
higher rent favors general agents specific ones 
useful learning precisely opposite intuition says time solve current instance favor specific presumably pertinent agent 
higher rent help remove marginally unprofitable agents survive time luck 
random walk model agents stochastic payoff slight negative expectation expected lifetime forever randomly walk negative wealth removed entry principle clog system performance 
agent creation hayek creates agents random process 
half rules created de novo half mutations previous rules 
de novo rule clauses condition probability clause chosen randomly 
mutation consists insertion deletion random clause random replacement atom 
random choice clauses determined set parameters 
probability random agent terms condition 
take term tests equality probability tests inequality 

lefthand side clause set probability pe probability ph form specified follows 
probability index stack chosen uniformly delta delta delta 
probability height value chosen uniformly delta delta delta gamma total number blocks system 
experimented values equally effective 
action pair probability random number generator prob index stack chosen uniformly delta delta delta 
grab action probability grab drop action 
previous agent mutated follows 
random agent population chosen 
random clause condition chosen 
probability clause removed probability atoms replaced atom drawn distribution producing new random agents remaining probability clause removed new random clause added 
note parameters chosen sample roughly uniformly set possible clauses parameter tuning mentioned 
experimented naive metalearning scheme parameters learned tabula rasa 
choice replacement parameters metalearning noticeably impacted hayek performance 
ongoing sophisticated metalearning reported 
mention naive metalearning experiments evidence results generated sophisticated choice parameters agent creation 
bid assignment human contractors think hard bid 
hayek agents decide bids autonomously 
simplest approach agent assigned fixed random bid 
strategy learns bid exactly way condition action agents appropriate bids survive 
slight variation approach avoid having determine appropriate range random bid generation 
agents created called novices 
time novice agent condition true bid fixed ffl high bid applicable veteran rules veteran 
novices applied selected randomly 
ffl set fiat 
veteran applied novice bid fixed ffl 
mutations create new versions successful agents 
similar equivalent parents 
mutated rule higher bid displaces parent 
bids rise till mutated agents longer profitable 
competition drives agent bid expected value states action reaches 
analagous entrepreneurs copying successful business undercutting prices till profit margin near zero 
new agents bid promise pay preceding agent enter zero money 
requires temporarily extended credit 
real economies entities extending credit take considerable care assess credit 
hayek ran perfect credit verification agents extending credit allowed look see paid 
done backing computation agent ended instance negative wealth 
agent removed remaining agents reset ran instance 
computationally simple requiring backup agent agent die 
experiments credit verification new agents injected fictitious money system causing inflation speculative bubbles arose agents bid sums confidence new novice bid 
run progressed stage 
novice agents main goal system generating wealth world 
experimented means bid selection 
discussed subsection want bid converge expected value agent wins auction 
direct approach learn value real time dynamic programming rtdp temporal difference type td learning 
bid active agent bid agent reward particular step ffi small parameter update gamma ffi ffi 
estimator value subsequent state 
estimates value current state agent 
averages estimates timescale determined ffi 
experiments method done backup described method generated inflationary speculative bubbles small instances progressing stage 
holland set bids classifier systems ff small constant specificity classifier wealth 
motivation set bid dependent variable prefer specific rules 
view rule setting wealth terms bid 
expected pay exceeds bid rule profitable wealth rises bid bid equals expected pay 
ignored specificity irrelevant determining limit bid 
setting bids requires initiating new agents 
non zero speculative bubbles inflation problems discussed 
merged holland rule fixed bid scheme stage process 
created agents novices 
novice agents bids fixed active exactly fixed bid scheme agent dubbed apprentice 
apprentice accumulates sufficient capital justify bid ff designated veteran subsequently bid varies allows flexibility adjusting market conditions 
practice veteran lengthy process typical time agents fixed bid 
call scheme modified holland 
convergence described agents bids converge estimate expected value states lead 
desirable things occur agents bids estimate accurately 
agent high bid advance solution 
system plans rationally time choosing apply agent advance solution 
second new agents enter economy precisely improve performance system 
enter new agent profitably bid competitors means assumption agents bids accurately estimate value states lead valuable state advance solution 
conversely new agent leads higher value states afford competitors paid accurate estimate higher value state leads 
expect profitable entry bankruptcy improve hayek performance important caveats 
stem fact practice agent bid estimates average instances agent applies may inaccurate instance 
system stochastic 
instance bid noisy estimate 
agents may go bankrupt enter time just due runs luck 
second possibility 
see 
say profitable agent agent introduced system domain includes easily solved instances harder ones 
may best instances longer profit old bid 
better handling best instances unable capture bid reflects handling harder instances 
possibility inherent poor price discrimination hayek accurately evaluating states 
agents simple rules inflexible assigning bids configurations 
events tend price assignments accurate valuable learning happens agents generalize bidding value condition valid 
conditions chosen valid single state hayek machine reduces learning discussed 
ven diagram instance space 
region shows instances won auction 
agent enters capturing auction instances intersection 
step 
prices subset client states accurately 
bid adjust veteran rule modified holland pricing may bid accurately reflect value remaining clients 
certain region configuration space represent easily solved instances may reason 
discovery region may step learning better solution 
principle important prices able adjust downward 
bid readily adjust may go broke 
agents learned expect followed may go broke possibility crash 
typically systems similar agents slightly different bids 
goes broke starts winning auctions providing graceful price decreases 
experiments hayek applies knowledge gained small instances learn solve large ones 
occur intermediate market crashes caused loss memory 
hayek success indicates economy achieves considerable stability 
experimented specific hill climbing attachments prevent crashes 
maintained storage best set agents measured moving average solution efficiency 
new best set tried alternative approach stored best state updated steps improved 
stored best set updated 
system ran steps updating best set system reset stored best set 
instances agent creation process randomized resulted second search set effort improve 
time returned stored set increased allow longer search new best set reset fixed search value 
interestingly hayek forced hill climbing far inferior empirically hayek 
results indicate hayek making long excursions marginal agent changes making discoveries allowing significant gains 
results provide evidence hayek economy troubled market crashes 
statistical speculations consider sensible rule bottom block target stack different bottom block goal stack remove top block target stack 
hayek writes rule probability generating rule de novo random rule generation seen theta gamma theta gamma 
recall determines probability wildcards random rule creation 
rules usefully grabbing stack arise 
rule grabbing add clause hurting performance 
clause generated probability gamma grabbing rules contain clause 
grabbing rule contains clause acquire clause clause generated probability roughly gamma rule looks rule removes top block target location target differs neighbor goal universal clearing rule 
hayek create rule de novo mutation probability roughly theta gamma theta gamma 
gets similar interesting estimates producing useful rules placing correct blocks target 
exercises yield insights 
expect sort large potentially tractable numbers rules useful 
hayek price mechanism speeds search 
time novice rule applied hayek immediately estimates helps hurts knowledge available system expressed market price 
contrast alternate brand approach agents actual final result instance estimates state value 
say learned pretty solving simple instances hoping soon progress complex instances 
say new rule introduced simply wastes action 
worsen performance slightly 
say performance degrades 
brand rewarded times time penalized 
brand apply rule times decide remove 
rules enter brand strictly limit performance 
manifestation tragedy commons rules simply share final reward 
note rules rule useful hayek learned 
hayek simply took random actions solve small instances 
rule addition random actions solve higher fraction small instances 
hayek local search collections agents big win say random search 
producing universal clearing rule eqn harder assembled intact mutation smaller useful components 
discovering set rules improbable sets built useful agents discovered separately 
better tuned parameter settings principle impact greatly probabilities finding useful rules 
hayek easier time producing eqn harder time generalizing eqn 
mixture different creation types significantly faster 
experiments reported combination rule creation procedures optimize parameters 
experiments explicit variables language representing agents specified sufficiently flexible allow description general solution arbitrary bw problems 
consider illustration rule holding needed block place target 
written gamma notion gamma hayek express 
hope hayek improved autonomously expand representational capability necessary 
introduced terms top top top 
top height block go placed stack creating new random condition term type height appear top occurs probability top set top ran incremental rewards staged learning 
experiments reported fixed bid agents 
run ran hayek week mips cpu mhz rent 
hayek discovered set agents solves arbitrary bw instances long blocks goal actions 
solution efficient rule set solve instances constant factor actions possible 
pathological instances occur exponentially rarely require quadratically actions optimal 
rule set omitting dozen rules strictly general rules higher bids win auctions steady state eventually removed rent bid hand empty empty 
bid top empty 
bid 
bid top 
bid 
bid 
agents grabbing rules 
active hand empty 
agent universal clearing rule bad block target lifts top block target 
identical rule equation previous section hand empty grabbing rule apply 
agent grabs stack stack contains useful block agent grabs stack 
agents place blocks 
higher bid active target taller goal 
places blocks stack 
agents drop random stack 
note stack blocks condition rule valid height stack empty 
stack fewer blocks stack blocks rule bids 
likewise rule condition valid stacks identical 
therefor rules bid instance goal blocks hand empty 
note instances blocks dropping rules fail valid case rule set term form created probability top probability values delta delta delta chosen uniformly delta delta delta gamma 
fails 
hayek trained increasing stages forgot solve small instances 
program works follows 
agent keeps bad blocks target 
highest priority 
assume bad blocks target 
agents dig useful blocks 
agent higher bid stack useful block stack 
stack useful block may 
useful blocks picked dropped target probability third correctly placed blocks removed target 
steady progress solves instance 
reasons set rules optimally efficient 
random dropping causes inefficiency small constant factor 
say picked block stack hopes getting block beneath 
third chance replace third place 
cases pick block 
time picks block drops correct stack probability 
random retrying get block wants costs slightly factor efficiency simply dropping correctly 
picking stack block inefficient block color want may closer top stack 
stack staging ground construct examples ruleset uses omega gamma actions actions suffice 
see 
possible show instances ruleset inefficient constant factor occur exponentially rarely 
say random instance 
placing correct th block target third chance block want top stack chance gammak correct block buried 
ruleset take kn time solve block instance requires average block buried depth omega gamma occurs exponentially rare instances 
note intermediate payoffs essential allowing program 
algorithm utilizes differing bids prioritize agent actions 
hayek economic model intermediate payoffs agents bids get larger instance average 
hayek flexibility assign agent high bid precisely early agent get paid pays go broke 
intermediate payoffs allow greater flexibility representation 
runs restarted number additional runs scratch generated strong bw solvers produce universal solver 
results reported table 
evolution sample run shown 
additional runs lasted days mips cpu mhz 
runs ran additional days machines 
initial run discussed instance ruleset takes time 
placing correct block target shift vertically hashed blocks stacks 
instances exponentially rare random instance probability block wanted buried blocks gammak gamma stage best current agents evolution sample bw run intermediate reward 
shown stage reached number agents alive best performance consecutive instances current stage fraction instances solved 
graphed left hand scale meaning 
stage indicated left number agents right 
produce universal solver ran long unmeasured time possibly weeks 
runs rent 
runs successful population size grew gradually 
rent substantially lower optimal large agent sets greatly slowing computation previous run rent generated universal solver albeit longer run 
ran runs rent run lasting days 
column tables reports final stage reached 
recall stage total blocks system goes stage solving instances stage took best set agents produced final stage run measured running count number instances solved ran stage problem rule set learning turned 
runs allowed actions solve 
note actions required move blocks 
fraction stage instances solved reported column average number actions solution instances solved reported column 
number agents active winning auctions agent sets reported column 
total number training instances reported column 
rent runs stronger rent runs class considerable consistency especially say top runs considered 
rent runs saw instances rent runs maintained smaller agent population 
plausible accounts full difference rent runs eventually caught performance run longer 
runs new agents inserted tenth instance 
current agent set fact perfect solver new agents opportunity enter destroying perfect solver 
modified algorithm new agent inserted fifth instance current agent set failed instance known perfect 
agent set perfect solver additional agents added destroy 
took agent sets rent run restarted stage modification additional learning instances 
anticipated going higher stages allowed actions instance training limit 
reason final stage reached directly comparable 
performance stage directly comparable 
disregarding worst run cases mean stage unmodified runs deviation mean anti augmentation runs deviation improvement anti runs statistically significant especially runs additional learning time 
ran runs days rent variables intermediate reward 
reached stage reached stage 
exhibit trend larger agent population finishing agents 
ability bids priority variables sufficient far know allow representation solutions arbitrary problems observe comparison modified algorithm initialized flag 
agent inserted fifth instance flag 
flag decremented novice agent got positive wealth 
flag set failed solve instance agent time wealth died instance case flag set 
flag set instance time wealth died 
ensured flag zero failed instance added agent failed instance established rule died creating essentially new agent set test 
threshold heuristically chosen consider agent set new worthy testing novice agent gained wealth immediately died 
section improve hayek performance 
note optimal rent presumably lower absence intermediate reward money paid system 
empirical results features section describes results top features 
td systems straight holland style systems perfect credit verification experimentally exhibited interesting phenomena speculative bubbles solve bw instances blocks 
ran fixed bid system perfect credit verification times multistage problem payoff times intermediate payoff tax set 
run ran days mips cpu mhz 
discuss runs payoff 
reached stage stage reached stage 
runs generated total agents 
number agents alive time apparently randomly 
runs agents alive sixth 
runs intermediate payoff reached stage reached stage reached stage 
runs generated total agents 
total agents runs payoff ran cpu time agents time 
runs modified holland system comparable explicit statistical comparison 
fixed bid modified holland systems able solve intermediate payoffs blocks stack staged instances 
applied blocks stack incremental payoffs solved instances 
test sure rule sets hayek produced fact generalize trained instance stage holding random subset instances 
resulting rule set solved instances training set separate test set 
hayek generalize examples drawn distribution training set 
argued hayek utilizes economic model perform efficient hillclimbing search collection agent space 
search vastly efficient say exhaustive search collections agents 
estimated likelihood generating single useful rules small addition described tests variables tested rule sets larger instances trained likelihood randomly generating useful rule collections infinitesimal 
discussed clear instances evaluate set rules doing sort exhaustive search proceeding try set 
searched simple non economic hill climbing approach tried success 
worth reporting 
report exhaustive search perfect rule set 
generated random rule sets variables hayek random rule generator assigned rules random fixed bids 
applied rule sets 
system solved instances row increased stage 
failed instance deleted random rule created random rule 
efficient way search random rule sets random prioritization 
looks rule sets universal solvers able solve small block instances high probability 
searched way rule sets 
failed find rule set able solve stage instances row 
summary discussion experiments able discover universal solver variables intermediate reward 
runs variables intermediate reward frequently achieved agent sets able solve block instances block instances 
variables internal reward hayek able solve block instances variables internal reward hayek learned solve instances blocks 
occasionally run get stuck apparent local maximum nearly strong similar runs performance fairly consistent run run 
particular performance best half runs type quite consistent 
modification designed reduce possibility preventing convergence perfect solver improve performance statistically significant amount 
experiment substantial fraction runs improved stage late run 
learning process converged runs 
may explain additional runs able generate universal solver 
view experiments validating concept 
observed considerable stability economy ability solve hard bw problems 
engaged experiments aimed optimizing technique 
example determined optimal rent evident experiments size rent impacts performance established clearly fixed bid better worse modified holland bid scheme optimized agent creation parameters 
introduced agents instances 
plausible introduced agents times faster stability gaining big speedup 
blocks world planning problems hayek learns solve complex 
discussed am aware previous papers reporting learn bw problems involving goal discovery necessity stacking blocks blocks necessary 
simple efforts hayek restricted representation simply test software top variables inferior solutions hayek produced 
bacchus kabanza experimented snlp prodigy tlplan blocks world problems closely related different 
sophisticated programs representing years effort utilizing hand coded general purpose heuristics doing extensive searches course specified goal 
arguably represent state art general planning approaches 
run blocks world unbounded table snlp prodigy tlplan exceeded resource bounds problems blocks 
tlplan augmented hand coded special purpose knowledge blocks world 
allowed solve problems blocks 
tlplan run table room blocks 
simple handcoded rules solved problems blocks 
complete backtrack free strategy solved block problems 
bw problems identical bacchus kabanza 
physical task copying stacks blocks basically encoding distribution examples different 
blocks uniquely labelled mine come colors 
clear block problems hayek learns solve payoff block problems learns solve incremental payoff harder block problems planning algorithms solve hand coded domain knowledge 
plausible problems roughly comparable difficulty viewed strictly planning problems 
hayek solving goal discovery problem 
planning programs take cpu seconds search 
hayek trained solves instantly uses actions 
hayek solutions involve systems tens cases participating agents 
note variables incremental payoff hayek generated general efficient solution arbitrary size problems time evidently express 
related origin mental capabilities interaction smaller units widely studied 
models explicitly economic 
commented multi agent models risk unintended consequences arising distorted implicit incentives 
example miller drexler discuss imprecise motivation meta agents led parasitic behavior lenat eu 
discuss distorted incentives holland style classifiers 
valiant neuroid model proposes specialized agents assumes peripheral system arbitrate large measure interaction 
may hard task 
minsky society mind proposes subsystems high level address dynamic interaction 
specifying interaction vast unintended consequences may challenging task akin centrally managing complex economy 
classifier systems holland proposed explicitly economic model intelligence condition action bid agents 
seminal sparked literature greatly influenced ideas 
viewed empirical results holland style classifier systems disappointing 
research indicates problems may stem misguided incentives 
critical problem view agents enter holland economy initial wealth 
creates unfortunate incentive agents new agents earn money real world 
experiments perfect credit verification injection initial wealth causes inflation speculative bubbles 
mitigate problem classifier systems proceed generations existing rules bids replaced simultaneously 
runs long total amount earned world small compared initial wealth distorting effect minimized 
cost running generations system evolve smoothly 
contrast hayek learns continuously slowly adding new agents 
rules act simultaneously holland classifier systems 
payoff world active rules share 
invites phenomenon called tragedy commons 
tragedy commons ubiquitous problem economies property rights shared unclear 
just motivated land held common rule motivation active action lowers payoff 
hayek contrast allows rule time act 
property rights clear shared tragedy commons 
ongoing hayek generalized allow multiple computational actions parallel auction winner able take actions affecting world 
rule collects payoff 
holland non economic design choices reconsidered see 
holland classifiers particular representation different date hayek 
representation shown turing equivalent 
universal computers require infinite memory 
practical considerations force size limitations 
unclear holland representation particularly efficient learnable realization finite state machines 
particular omits priori topological bias 
bucket brigade algorithm hayek classifier systems property bids naively prioritize agents fact restricted requirement agents profitable survive 
agent typically precedes agent agent higher bid agent go broke 
precisely opposite bids specify default hierarchies 
representation flexible naively appears 
problem independently pointed uhlig 
hayek classifier systems therefor intrinsically free bids specify default hierarchies 
unclear flaw 
certainly needs way representation flexible hayek learn solve problems 
ongoing experimenting ways hayek expand representations achieve necessary flexibility 
intermediate reward functions yielded desired expressive power 
holland literature genetic algorithms ga train classifier systems 
shown ga contexts efficient hill climbing 
experience indicates contexts ga dramatically worse 
best performance sensitive choice crossover structure learning environments marginally tabula rasa optimal crossover structure unknown 
genetic programming related technology classifier systems 
comparison genetic programming strawman hillclimbing algorithm hillclimbing algorithm faster factor small boolean function learning task gradient descent neural algorithm faster strawman hillclimbing algorithm factor 
hayek currently trained hill climbing 
ongoing experimenting metalearning approaches viewed vaguely genetic ability combine agents complex combinations simple crossover 
temporal difference learning rtdp large literature learning methods maintain evaluation function mapping states values update evaluation state terms evaluation state reached plus reward transition move choices choosing action maximizing expected evaluation state randomization exploration 
refer class methods real time dynamic programming rtdp temporal difference learning tdl methods 
class methods powerful markovian environments lookup table learning shown converge 
unfortunately environments huge number states regularize evaluation mapping neural net give exploring entire state space 
circumstances interaction action choice evaluation update learning bias complex mathematical reason strong intuitive reason expect updates yield improvement say convergence algorithm 
notable empirical successes 
hayek machine viewed kind rtdp method 
runs hayek machine agents condition true exactly state basically reduces learning note case system perfect price discrimination occur 
appropriate environments proved converge just learning 
point view hayek machine particular approach generalization rtdp methods 
arguments may particularly interesting approach 
intuition update hayek addition new agent death old agent expected improve improving performance improving valuation 
hayek machine maps state action pairs values 
particular form bias may particularly effective environments combinatorial numbers states relatively actions 
keeping agents profitable hayek dynamically addresses bias variance tradeoff 
profitable agents definition trained hayek maintain data justify complex representation 
framework hayek machine free explore complex representations complex types agents maintaining intuition update improves performance 
am currently exploring complex representations difficult conceive standard rtdp frameworks 
collections agents modular way represent evaluation functions 
complex environments especially systems mind function different environments modularity may critical learning 
new agents enter bid may unreliable guide actual value action state 
backing ignore agents learning maintains table assigning value state step goes probabilistically state preference highest value 
learns dynamic backup values states 
single state agents hayek stores exactly information learns state values way backup states 
hayek search randomized randomized new agents 
course rate new random agents achieving optimal tradeoff exploitation exploration depend number states 
need novice agents finite fraction instances explore novel ground 
learning evaluation state typically updated best state 
duplicate hayek introducing new agents bid ffl successor ffl higher competitor done experiments reported 
go broke hayek conservative estimates 
agents bids far subsequent bids results indicate bid justified agent obtained wealth previous successes justify discrepancy 
hayek uses evaluations estimate reliability updating 
theorem saying approach hayek optimal way combine reliability estimates sensible way 
experiments td update bids hayek backup dying agents displayed speculative bubbles success solving bw instances couple blocks 
possibly impressive example rtdp success tesauro backgammon player starting zero knowledge trained neural network serve strong evaluation function game backgammon 
started hand coded features evaluation function produced sufficed play near championship level 
theory td successful backgammon 
backgammon simple linear evaluator total distance solution minus opponent total distance better random 
furthermore evaluator particularly accurate endgame 
rtdp backs result may expected learn endgame evaluations neural nets widely believed extract linear structure 
evaluator expected learned 
evaluator learned serve derived reward function give intermediate payoff portions game 
example step back total distance give information vulnerability 
deep backup effective evaluator particularly game stochastic backup precisely td 
unclear compare complexity backgammon blocks world 
backgammon larger state space bw problems initially longer number actions reward 
hand possible backgammon effective landscape easily learnable described 
contrast useful evaluator blocks world problem inherently highly nonlinear compare different locations 
highly nonlinear non monotonic nature blocks world problem instance required move blocks top target stack get incorrect bottom block soon need uncover find difficult believe td trained neural net familiar evaluation function technique able deal bw certainly reported result 
hand hayek form deal effectively problems early vision backgammon linear structure critical guide 
lines intuitive conjecture td effective backgammon skeptic conjecture hayek effective bw existence relatively small agents significant progress small sets agents solving bw problem dimensional topology built form wildcards cartesian coordinates helpful 
computation sizeable interesting literature discussing equilibrium economic models allocate resources distributed environment 
literature deals programming environments learning machines 
wellman walras programming environment users may describe agents provide appropriate cost demand curves 
prices determined cost demand various commodities 
walras environment implements general equilibrium theory 
contrast deals learning machine programming environment utilizes non equilibrium economics entry new agents bankruptcy old ones central rational pricing decisions programmed learned enforced bankruptcy 
pertinent current miller drexler proposed computing 
miller drexler chiefly concerned creating programming environment comment possibility computing learning 
instantiate learning approach come critical problem agents learn appropriate pricing decisions 
miller drexler conjectured computational markets set avoid imperfections real ones 
example computational markets principle absolutely rule theft fraud 
negative externalities need exist analog pollution 
priori possible computational market constructed analog public goods know hayek 
need moral extreme income inequality agents 
illuminates limitations perfect computational market arise agents imperfectly able learn optimal pricing 
motivation model economics orthodox economic models typically assumptions 
economic agents postulated complete information agent knows known perfect rationality infinite computational power 
real economies involve interaction humans computationally powerful infinitely differing information 
literature bounded rationality cf attempts improve economic analysis perturbing away perfect rationality 
drawback approach evident exactly direction perturb 
orthodox economics models typically discuss equilibrium phenomena 
quote text institutional fact life western market economies economies growth theory purports model technical advance results profit oriented investment part business firms 
profits successful innovation disequilibrium phenomena standard equilibrium proposed models question 
increasingly nascent field evolutionary economics attempted deal questions modelling interaction agents initially little rationality learn cf 

hayek machine seen entrant approach novel features 
hayek machine individual agents simple automatically generated rules decision bid bid expected far perfectly rational 
different condition knows world see incomplete differing information 
extent results assuming infinitely rational agents hold extreme hayek economy may hope gain confidence hold real world 
extent hayek suggests alternate explanations phenomena markets efficient disequilibrium phenomena may call question accepted lore 
example agents surviving evolution apparently behave rationally 
intuitively remarked selection mechanism cause rationality economic systems 
interesting computer model realizes picture 
hayek machine models interaction concretely defined complex physical world wealth may extracted careful complex coordinated actions collection people get build car create wealth world 
considerable departure standard economic paradigm central tenet value absolutely defined derives solely utilities individuals 
assumption externally defined value hayek machine addresses technological progress novel way 
time collection agents evolves learning society extract wealth world 
stress am suggesting hayek fleshed model economics 
am proposing hayek raises open questions worthy consideration economics community 
willing couple economy absolutely defined external reward function raises question class worlds class interactions agents demonstrate efficient wealth extraction 
simpler systems went note mechanism predictive power mechanism expected enforce rationality strongly firms strongly individuals personal lives 
experimented formal mathematical results may obtainable 
simulation interesting phenomena observed real economies speculative bubbles inflation intellectual property formation corporations technological progress arise hayek 
way imperfections price discrimination lead steps increase global wealth creation discussed suggests important role accurate price discrimination efficient working real economies 
discussion strategy proposed uses property rights autonomously divide complex computational problems collection agents way agent precisely incentive improving performance system 
argued division critical extremely complex problems controlling incentives agents critical problem multiagent systems mentioning examples holland classifier systems believe misguided incentives caused problems 
instantiation strategy described applied difficult blocks world problems able solve interesting size problems tabula rasa feature intermediate reward able generate system agents interacts solve arbitrary bw problem form 
limit agents recognize state strategy reduces qlearning interesting regime studied agents generalize argued important advantages standard reinforcement learning strategies including convergence intuition bias variance tradeoff modularity representation reliability estimate updates 
remarked agents generalize economy perfect computational economy imperfect price discrimination phenomenon principle allow updates fail improve performance 
generally argued hayek machine interest new evolutionary model economics 
open questions 
interesting determine performance improved simple tuning parameters agent creation rate agent creation method bid selection rent question prove interesting analytic results toy economies type 
interesting apply hayek different types problems simultaneously see transference knowledge occurs kind niche structure develops economy 
human corporate agents may computational resources available fixing prices hayek agents frequently constrained ability price discriminate 
known example airlines resort clumsy mechanism pricing saturday night stays order achieve degree price discrimination 
research focussed creating general economy encompassing agents create agents perform internal computational actions physical actions communicate information 
extensions problem domains course important 
charles garrett wrote code ran experiments year high level english language specifications 
efficient expert assistance integral making reality 
michael buro rewrote code ran experiments english language specifications 
arthur birk buro garrett grove kearns mitchell omohundro stone waltz 
weill useful comments draft talk bacchus scheinkman smith conversations 
andersen evolutionary economics post contributions pinter publishers london anderson arrow pines eds economy evolving complex system addison wesley redwood city ca 
bacchus kabanza 
temporal logic control search planning unpublished document available logos uwaterloo ca tlplan tlplan html 
short version european workshop planning 
barto bradtke singh 
learning act real time dynamic programming ai journal appear 
baum boneh garrett 
genetic algorithms proceedings eighth annual conference computational learning theory pp 
baum 
model mind faire economy extended proc 
th icml ed 
saitta morgan kaufman san fran 
ca 
baum economic metalearning submitted publication 
bertsekas tsitsiklis neuro dynamic programming athena scientific belmont ma 
birk paul schemas genetic programming document published 
carbonell blythe etzioni gill joseph khan knoblock minton perez reilly veloso wang prodigy manual tutorial 
technical report cmu cs school computer science carnegie mellon university 
clearwater ed 
market control paradigm distributed resource allocation world scientific singapore 
interview january issue reason 
nature firm new series vol pp 
cognitive adaptations social exchange adapted mind oxford university press 
ny pp 
crites barto improving elevator performance reinforcement learning touretzky mozer hasselmo eds 
advances neural information processing systems 
dennett consciousness explained little brown boston drescher minds mit press 
estlin mooney multi strategy learning search control partial order planning proceedings thirteenth national conference intelligence pp 

erol nau subrahmanian 
complexity domain independent planning 
proceedings aaai national conference pp 
forrest 
implementing semantic network structures classifier system 
proc 
international conference genetic algorithms pp 
hillsdale nj lawrence erlbaum associates 
fox functional volume models system level models functional neuroimaging icnn 

lin hanson incremental learning evaluation functions absorbing markov chains new methods theorems unpublished report 
hardin tragedy commons science 
holland 
escaping brittleness possibilities general purpose learning algorithms applied parallel rule systems 
michalski carbonell mitchell eds 
machine learning ii pp los altos ca morgan kauffman 
holland 
hidden order addison wesley reading ma 
huberman ed ecology computation studies computer science artificial intelligence north holland new york khardon roth 
learning reason 
proc 
th national conference artificial intelligence aaai press mit press pp 
koza genetic programming mit press cambridge ma pp 
lang hill climbing beats genetic search boolean circuit synthesis task koza twelfth international conference machine learning pp 

lang comments response post machine learning list vol 
august 
lenat role heuristics learning discovery case studies michalski carbonell mitchell eds machine learning artificial intelligence approach tioga pub 
palo alto ca pp 
uhlig 
rule thumb dynamic programming unpublished manuscript european economic association meeting maastricht available nl center html lloyd lectures checks population 
oxford england oxford university press 
working brain neuropsychology basic books ny maes pattie right thing connection science mcallester rosenblitt systematic nonlinear planning proceedings aaai national conference pp 
miller drexler markets computation open systems pp 
miller drexler comparative ecology pp 
minsky society mind simon schuster ny 
minsky steps artificial intelligence computers thought feigenbaum feldman eds aaai press menlo park pp 
minsky framework representing knowledge psychology computer vision ed 
winston mcgraw hill 
information highway stanford calif university video communications distinguished lecture series ix leaders computer science electrical engineering 
richard nelson sidney winter 
evolutionary theory economic change harvard press th printing 
newell 
unified theories cognition harvard university press cambridge ma 
palmer arthur holland lebaron artificial economic life simple model stockmarket physica pp 
ray 
approach synthesis life 
langton taylor farmer rasmussen editors artificial life ii volume xi pages 
addison wesley redwood city ca 
read leonard pencil family tree told leonard read freeman december 
rumelhart hinton williams 
learning internal representations error propagation parallel distributed processing eds 
rumelhart mcclelland mit press cambridge ma 
schuurmans schaeffer representational difficulties classifier systems proceedings international conference genetic algorithms fairfax va pp 
selfridge 
pandemonium paradigm learning proceedings symposium mechanisation thought process 
national physics laboratory 
simon 
bounded rationality 
newman eds new dictionary economics 
london macmillan barrett weld 
snlp planner implementation contact bug snlp cs washington edu 
sutton 
learning predict methods temporal differences machine learning 
tesauro 
practical issues temporal difference machine learning 
toga mazziotta brain mapping methods academic press new york 
valiant 
rationality proceedings eighth annual conference computational learning theory 
valiant 
circuits mind oxford university press 

adaptation dynamic environments minimal probability exploration 
proceedings third international conference simulation adaptive behavior pp 
mit press cambridge ma 
wellman market oriented programming environment application distributed multicommodity flow problems 
artificial intelligence research pp 
whitehead ballard 
learning perceive act 
machine learning 
watkins 
learning delayed rewards doctoral thesis cambridge university cambridge england 
wilson goldberg 
critical review classifier systems 
schaffer ed 
proc 
third international conf 
genetic algorithms san mateo ca morgan kauffman 
wilson classifier fitness accuracy evolutionary computation pp 
winograd understanding natural language academic press ny 
zhang dietterich 
high performance job shop scheduling time delay td lambda network 
touretzky mozer hasselmo eds 
advances neural information processing systems 
rent run stage stage steps agents final instances total rent run stage stage steps agents final instances total rent prevention run stage stage steps agents final instances add 
table runs intermediate reward 
stage final stage reached learning 
stage gives fraction right best rule set applied stage problems allowed actions solution 
steps gives number steps taken solve stage problems averaged solved 
agents final number agents population participating stage problems 
instances total total number instances seen training 
runs continued runs modified algorithm additional instances 
