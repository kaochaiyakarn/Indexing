appears proceedings acm sigplan conference programming language design implementation may 
program cache performance improved changing organization layout data complex pointer data structures 
previous techniques improved cache performance structures arranging distinct instances increase locality 
techniques produced significant performance improvements worked best small structures packed cache block 
extends concentrating internal organization fields data structure 
describes techniques structure splitting field reordering improve cache behavior structures larger cache block 
structures comparable size cache block structure splitting increase number hot fields placed cache block 
java programs structure splitting reduced cache rates improved performance benefits previously described cache conscious reorganization techniques 
large structures span cache blocks reordering fields place high temporal affinity cache block improve cache utilization 
describes tool recommends structure field reorderings 
preliminary measurements indicate reordering fields active structures improves performance microsoft sql server 
keywords cache conscious definition structure splitting class splitting field reorganization 
effective way mitigate continually increasing performance gap allocate data structures manner increases program locality improves cache performance 
cache conscious data layout clusters temporally related objects cache block nonconflicting blocks shown produce significant performance gains 
continues study data placement optimizations orthogonal direction reordering internal layout structure class fields 
describes cache conscious definition techniques structure splitting field reordering improve cache behavior programs 
words previous techniques focused external arrangement structure instances focuses internal organization 
particular previous techniques exception techniques reducing cache conflicts worked best structures smaller half cache block 
techniques apply larger structures 
indicates different opportunities improving cache performance 
caches finite capacity transfer data units called cache blocks encompass multiple words 
caches finite associativity restricts block placed cache 
placing contemporaneously accessed structure elements cache block improves cache block utilization provides implicit prefetch 
efficient cache space reducing structure cache block footprint 
mapping concurrently accessed structure elements fit single cache block non conflicting cache blocks reduces cache misses 
techniques directly improve structure cache block utilization reduce cache block working set 
addition decreasing structure cache footprint reduces number blocks potentially conflict techniques may indirectly reduce conflict misses 
illustrates relationship cache conscious definition technique size structure instances 
instances significantly smaller cache block case benefit additional manipulation definition time 
previous techniques chilimbi larus cache conscious object location uses copying garbage collector place objects referenced near memory effective 
structure instance size comparable size cache block case splitting structure elements hot cold portion produce hot structure pieces smaller cache block permits application cache conscious reorganization techniques portions 
show java objects belong category 
addition java type safe language class splitting automated 
step process profile java program determine member access frequency 
counts identify class member fields hot frequently accessed cold rarely accessed 
compiler extracts cold fields class places new object referenced indirectly original object 
accesses cold fields require extra indirection new class hot field accesses remain unchanged 
run time chilimbi larus cache conscious garbage collector locates modified object instances 
medium sized java benchmarks class splitting combined chilimbi larus cache conscious object colocation reduced cache rates class splitting accounting reduction improved performance class splitting contributing improvement 
structure elements span multiple cache blocks case copyright association computing machinery permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
request permissions publications dept acm fax permissions acm org 
cache conscious structure definition chilimbi computer sciences department university wisconsin madison dayton street madison wi chilimbi cs wisc edu bob davidson microsoft microsoft way redmond wa microsoft com james larus microsoft research microsoft way redmond wa larus microsoft com reordering structure fields place high temporal affinity cache block improve cache block utilization 
typically fields large structures grouped conceptually may correspond temporal access pattern 
unfortunately best order programmer may cause struc ture interact poorly program data access pattern result unnecessary cache misses 
compilers languages constrained follow programmer supplied field order correct problem 
increasing cache penalties manually reordering structure fields place high temporal affinity cache block relatively simple effective way improve program performance 
legacy applications designed machines lacked multiple levels cache memory access times uniform 
particular commercial applications manipulate large structures 
explore benefits field reordering describes tool recommends structure field reorderings 
correlates static information source location structure field accesses dynamic information temporal ordering accesses execution frequency 
data construct field affinity graph structure 
graphs processed produce field order recommendations 
preliminary measurements indicate reordering fields active structures improves performance microsoft sql server large highly tuned commercial application tpc benchmark 
rest organized follows 
section describes structure splitting 
section discusses field reordering describes 
section presents experimental results 
section briefly discusses related 

improving cache performance 
cache block cache block working set utilization cache conflicts cache block size cache capacity cache associativity 
cache conscious structure definition 
case structure size case structure size cache block size case structure size cache block size structure splitting field reorganization hot cold cache block action 
structure splitting chilimbi larus proposed generational garbage collector lay objects dynamically temporal affinity placed near reside cache block 
demonstrated vast majority live objects cecil object oriented language bearing similarities java smaller half cache block characteristic permitted low overhead real time data profiling cecil programs 
described new copying algorithm utilized profile information produce cache conscious object layout 
experiments section java objects small average approximately bytes larger cecil objects 
directly applying chilimbi larus cache conscious location scheme java programs yields smaller performance improvements section reported cecil 
difference attributable larger java objects reducing number contemporaneously accessed object instances packed cache block 
way reduce effective size java objects split java classes hot frequently accessed cold rarely accessed portion profiled field access frequencies 
splitting classes allows hot object instances packed cache block kept cache time 
structure splitting known optimization applied manually improve performance 
best knowledge completely automatic implementation technique 
illustrates class splitting process 
java program form verified bytecodes statically analyzed instrumented bit standard library instrumented static analyses produces variety class information including class field names field types field sizes 
instrumented java program executed profiled 
profile measures class instantiation counts instance variable non static class fields access statistics class basis 
algorithm uses static dynamic data determine classes split 
splitting decisions communicated vortex compiler compiles java bytecode native code 
compiler splits specified classes transforms program account change 
class splitting algorithm program transformations described detail subsequent sections 
applying chilimbi larus cache conscious object location scheme java programs split classes results performance improvements improvement attributable class splitting see section 
average java object size ran experiments investigate java follows size distribution cecil objects 
system uses vortex compiler developed university washington 
vortex language independent optimizing compiler object oriented languages front ends cecil java modula 
table describes java benchmark programs experiments 
programs compiled highest optimization level applies techniques class analysis splitting class hierarchy analysis class prediction closure delaying inlining addition traditional optimizations 
experiments run single processor sun contained mhz ultrasparc processors gb memory running solaris 
table shows results set experiments tested hypothesis heap allocated java objects average smaller cache block reasons having garbage collection objects greater equal bytes considered large managed differently 
small objects die fast 
cache conscious layout technique described chilimbi larus effective longer lived objects survive interested live object statistics 
table shows results experiment measured number small objects live scavenge averaged entire program execution 
results support hypothesis java objects small average live object size smaller cache block bytes 
comparing average live small 
class splitting overview 
verified java bytecode instrumented java bytecode jvm class access statistics static class information java native code split classes bit vortex class splitting algorithm table java benchmark programs 
program lines code plus line standard library jdk 
description cassowary constraint solver espresso martin odersky drop replacement javac javac sun java source bytecode compiler javadoc sun documentation generator java source pizza pizza java bytecode compiler object size java programs bytes cecil programs bytes appears java objects approximately bytes larger possibly due larger object headers 
larger size reduces effectiveness packing objects cache block 
class information bit gather static class information including class name number non static fields names access types descriptors non static fields 
non static fields tracked constitute instance variables class allocated heap 
addition bit instruments program generate field access frequencies class basis 
instrumented program runs order magnitude slower original 
hot cold class splitting algorithm class splitting involves trade offs 
primary advantage ability pack hot class instances cache block 
disadvantages include cost additional hot cold portion code bloat objects memory extra indirection cold field accesses 
section describes class splitting algorithm considers issues selecting classes split 
problem splitting classes hot cold portion field access counts precise solution program rerun input data set 
interested splitting classes resulting program performs wide range inputs 
optimal solution problem unnecessary field access frequencies different program inputs unpredictable 
class splitting algorithm uses heuristics 
heuristics may optimal measurements section demonstrate practice 
addition worked better alternatives examined 
ensuing discussion term field refers class instance variables non static class variables 
contains splitting algorithm 
splitting algorithm considers classes total field accesses exceed specified threshold 
check avoids splitting classes absence sufficient representative access data 
alternative criteria undoubtedly exist formula worked determining threshold 
ls represent total number program field accesses total number classes single field access number fields class total number accesses fields class splitting algorithm considers classes ls classes called live classes 
addition splitting algorithm considers classes larger bytes contain fields 
splitting smaller classes produce benefits space penalty incurred hot cold portion 
algorithm labels fields selected live classes hot cold 
aggressive approach produces smaller hot partition permits cache block location increases cost accessing cold fields 
competing effects balanced 
initially splitting algorithm takes aggressive approach marks field accessed times cold 
cold portion class sufficiently large merit splitting bytes offset space required cold object condition counterbalance splitting max hot class class max hot class hot cold functions return access counts class hot cold fields respectively 
condition informally justified follows 
consider instances different classes comparable size cache block high temporal affinity 
instance fields accessed times fields accessed times 
reasonable expect access costs cache misses class instances table heap allocated java objects small 
program heap allocated small objects bytes allocated small objects avg 
small object size bytes heap allocated large objects bytes bytes allocated large objects small objects cassowary espresso javac javadoc pizza table live java objects small 
program avg 
live small objects bytes occupied live small objects avg 
live small object size bytes avg 
live large objects bytes occupied live large objects live small objects cassowary espresso javac javadoc pizza max max hot portion located hot portion fit cache block cost cost max hot class hot class class class cold fields accessed level indirection 
definitely beneficial sum best case costs accessing original versions instances greater access cost instances split hot portions colocated max max max hot class hot class class class min max hot class max hot class class class apriori know class instances colocated best ensure td class max hot class class quantity termed temperature differential class 
classes meet criteria conservative formula labels fields accessed cold 
produce sufficiently large cold portion bytes class split 
program transformation modified vortex compiler split classes selected splitting algorithm perform associated program transformations 
hot fields accesses remain unchanged 
cold fields collected placed new cold counterpart split class inherits primordial object class methods constructor 
additional field new cold class added original class contains hot fields 
cold fields labelled public access modifier 
needed permit access private protected cold fields cold class field original hot class 
compiler modifies code account split classes 
transformations include replacing accesses cold fields extra level indirection cold class field hot class 
addition hot class constructors create new cold class instance assign cold class field 
illustrates transformations simple example 
discussion programs transfer structures back forth persistent storage external devices 
structures transparently changed losing backward compatibility 
new optimizations offer significant performance advantages cost compatibility may high explicit input output conversion necessary 
translation course routine languages java structure layout left split classes class mark split active suitable size mark suff cold fields temp diff mark split re mark conservative suff cold fields mark split 
class splitting algorithm 
class protected long public int static int public float private int class extends public long private short public long 
class public int static int public cld cld ref cld ref new cld cld ref class extends public long public cld cld ref cld ref new cld cld ref 
class cld public long public float public int cld 
class cld public long public short cld 

program transformation 
compiler 
splitting technique produces single split version selected class 
aggressive approach create multiple variants class direct subclass inherit version split access statistics inherited fields subclass 
simplify initial implementation choose explore option especially benefits unclear 
investigate aggressive class splitting 
focuses improving data cache performance class splitting considers member fields methods 
method splitting improve instruction cache performance 
addition offers additional opportunities overlapping execution mobile code transfer 

field reordering commercial applications manipulate large structures fields 
typically fields structures grouped logically may correspond temporal access pattern 
resulting structure layout may interact poorly program data access pattern cause unnecessary cache misses 
section describes tool produces structure field reordering recommendations 
recommendations attempt increase cache block utilization reduce cache pressure grouping fields high temporal affinity cache block 
languages permit unrestricted pointers reordering structure fields affect program correctness consequence poor programming practice 
structures constrained external factors file protocol formats 
reasons recommendations examined programmer applied programs 
illustrates process 
program profiled create record memory accesses 
trace file contains temporal information execution frequency structure field accesses 
combines dynamic data static analysis program source produce structure field order recommendations 
algorithm recommend structure field orders divided steps 
construct database containing static source file line dynamic access count information structure field accesses 
process database construct field affinity graphs structure 
produce structure field order recommendations affinity graphs 
contains evaluation facility produces cost metric represents structure cache block working set locality metric represents structure cache block utilization 
metrics help compare recommended field order original layout 
ranking active structures temporal activity access frequency identify structures benefit field reordering 
constructing structure access database tool querying manipulating program syntax tree analyze source program 
produces file containing information structure field access including source file line access occurs access read write read write field name structure instance structure type name 
structure instance pair function name corresponds function instance allocated 
pointer aliasing computing structure instances statically manner approximation 
example helps illustrate problem 
consider consecutive accesses fields different structure instances indistinguishable approximation 
lead incorrectly placing fields 
appear serious problem purposes instances showed similar access characteristics consecutive accesses field different indistinguishable instances different fields 
reads file builds structure access database represents hash table structure names 
hash table entry microsoft internal tracing tool trace file structure field orders rankings evaluation metrics 
overview 
ast toolkit static information structure field accesses sents structure type points list structure instances 
structure instance points list fields accessed instance field turn points list access sites record source location access took place 
uses program debug information associate temporal information execution frequency program trace field access site 
processing structure database structure database contains information field accesses instances structure type 
structure instance constructs field affinity graph weighted graph nodes represent fields edges connect fields accessed temporal trace information 
fields accessed milliseconds trace considered accessed contemporaneously 
experimented intervals ranging ms structures appear sensitive exact interval define contemporaneous access results reported section correspond ms interval 
edge weights proportional frequency contemporaneous access 
instance affinity graphs structure type combined produce single affinity graph structure 
producing structure field orders structure alignment respect cache block boundaries determined run time malloc pointer suitably manipulated approach satisfied increasing inherent locality placing fields high temporal affinity near reside cache block try pack fields exactly cache blocks 
alignment natural boundary constraints force gap layout alternative high temporal affinity fields unable occupy attempt fill structure fields accessed profiling scenario 
introduce notion configuration locality explain algorithm 
configuration locality attempts capture layout inherent locality 
step compute layout affinity field sum weighted affinities neighboring fields layout predefined horizon presumably equivalent cache block size side 
field surrounded fields layout layout affinity field layout affinity wt aff 
wt aff weights correspond distance fields number bytes separating start fields mea 
structure access database 
struct struct inst inst field field field access access access structure type instance type combine field access information multiple occurrences field build field affinity graph instance pair instance fields compute field affinity edge weight combine instance field affinity graphs create structure field affinity graph pair structure fields find structure instances pair fields affinity edge compute weighted affinity 
processing structure access database 
sure probability fields cache block 
weighting factor wt cache block size dist cache block size structure configuration locality sum field layout affinities 
illustrates process computing increase configuration locality adding field existing layout 
uses greedy algorithm produce structure field order recommendations structure field affinity graph 
starts adding pair fields connected maximum affinity edge structure field affinity graph layout 
step single field appended existing layout 
field selected increases configuration locality largest amount point computation 
process repeated structure field laid 
evaluating structure field orders best way evaluate structure field ordering measure impact performance entails tedious cycle editing recompiling rerunning application 
quality metric structure field orderings help compare recommended layout original layout help evaluate alternative layouts rerunning application 
especially useful field layout constraints prevent directly field ordering recommendations 
provides metrics evaluate structure field orders query facility compare alternative layouts 
metric average number structure cache blocks active application execution measure structure cache block working set cache pressure 
metric computed combining temporal information field accesses structure field order determine active cache blocks 
program execution divided temporal intervals ms 
metric assumes structures start cache block boundaries uses field order field sizes assign fields cache blocks 
fields cache block accessed execution interval block considered active interval 
represent total number program execution intervals number active structure cache blocks intervals structure cache block pressure cache block pressure second metric locality metric measures structure average cache block utilization 
ij represent fraction cache block accessed determined accessed field sizes relative cache block size program execution interval cache block utilization 
experimental evaluation section contains experimental evaluation class splitting field reordering 
class splitting section describes experimental methodology presents experiments measure effectiveness splitting algorithm impact performance java programs 
experimental methodology described earlier university washington vortex compiler infrastructure aggressive optimization 
table describes benchmarks 
compiled programs ran single processor sun contained mhz ultrasparc processors gb memory running solaris 
large amount system memory ensures locality benefits due improved cache performance reduced paging activity 
processor levels data cache 
level cache kb direct mapped byte cache blocks 
level cache unified instruction data mb cache byte cache blocks 
system entry itlb entry dtlb fully associative 
level data cache hit requires processor cycle 
level cache followed level cache hit costs additional cycles 
level cache typically results additional cycle delay 
experimental results set experiments designed investigate potential class splitting java benchmarks study behavior structure field affinity graph cache block size structure layout configuration locality affinity affinity affinity affinity 
producing field orders structure field affinity graph 
splitting algorithm examine sensitivity splitting decisions program inputs 
table shows java benchmarks different sets inputs significant number classes accessed classes candidates splitting live sufficiently large 
promising candidate classes field access profiles justify splitting class 
cold fields include variables handle error conditions store limit values auxiliary objects critical data structure traversal path 
splitting algorithm fairly insensitive input data profiling field accesses 
benchmarks regardless input data set classes selected splitting identical second number enclosed brackets indicates number common classes split different inputs fields labeled hot cold barring exceptions 
closer examination classes split input set revealed classes smallest normalized temperature differentials greater 
table analyses characteristics split classes detail 
accesses fields split classes account total number program field accesses 
average dynamic split class sizes computed weighting split class number split instances 
splitting algorithm reduces dynamic class sizes cassowary shows reduction exception javadoc permits hot instances fit cache block 
normalized temperature differentials high indicating significant disparity hot cold field accesses 
additional space costs hot cold portion modest order kb 
ultrasparc hardware counters measure effect cache conscious object layouts cache rates 
experiment repeated times average value reported cases variation smallest largest values 
exception cassowary test input data set differed input data generate field access statistics class splitting 
measured impact chilimbi larus cache conscious object location scheme original versions java benchmarks 
measured impact hot cold split classes versions benchmark 
results shown table report rates cache blocks bytes rates marginally affected 
cl represents direct application chilimbi larus cache conscious object location scheme cl cs represents scheme combined hot cold class splitting 
results indicate chilimbi larus cache conscious object location scheme reduces rates hot cold class splitting increases effectiveness scheme reducing rates measured impact techniques execution time 
results shown table indicate hot cold class split table class splitting potential 
benchmark classes static accessed classes live classes candidate classes live suitably sized split classes splitting success ratio split candidates cassowary espresso input espresso input javac input javac input javadoc input javadoc input pizza input pizza input table split class characteristics benchmarks split class access total prog 
accesses avg 
pre split class size static avg 
pre split class size dyn avg 
hot class size static avg 
hot class size dyn avg 
reduction hot class size static avg 
reduction hot class size dyn avg 
normalized temperature differential additional space allocated cold class field ref bytes cassowary espresso input espresso input javac input javac input javadoc input javadoc input pizza input pizza input ting affects execution time producing improvements gains chilimbi larus location scheme 
structure field reordering processor mhz pentium ii xeon system mb cache processor 
system gb memory disks rpm fiber channel drive 
system running microsoft sql server top windows nt 
ran tpc benchmark system 
microsoft sql server instrumented collect trace structure field accesses running tpc 
trace produce structure field order recommendations structures defined sql server source indicated accounted structure accesses tpc workload 
addition top active structures account structure accesses 
reason focused active structures sql server uses number persistent disk structures fields reordered affecting compatibility section 
addition dependencies casting structures prevent reordering fields reordering 
sql server highly tuned commercial application active structures previously fields reordered hand 
select structures constraints reordering showed largest potential benefits cost locality metrics provided table 
reordered structures recommendations ran benchmark modified sql server times 
performance modified sql server consistently better 

related research focused reorganizing data layout pointer codes improve memory system performance :10.1.1.37.5419
calder apply compiler directed approach uses profile information place global data constants stack variables heap objects 
techniques produced significant improvements globals stack data modest gains heap objects 
approach differs respects 
adjusted placement entire objects reorganized internal field objects 
second focus heap object 
chilimbi describe tools data structures cache conscious heap allocator improving cache performance programs 
tools require source code modifications produce significant performance improvements 
tools reorganize memory arrangement entire objects 
complements combination techniques yields larger benefits 
chilimbi larus showed generational garbage collection reorganize data structures objects high table impact hot cold object partitioning rate 
program cache rate base cache rate cl cache rate cl cs reduction rate cl reduction rate cl cs cassowary espresso javac javadoc pizza table impact hot cold object partitioning execution time 
program execution time secs base execution time secs cl execution time secs cl cs reduction execution time cl reduction execution time cl cs cassowary espresso javac javadoc pizza table evaluation metrics active sql server structures 
structure cache block utilization original order cache block utilization recommended order cache pressure original order cache pressure recommended order pss buf temporal affinity placed near reside cache block 
extend technique java increase effectiveness partitioning classes hot cold portion 
truong suggest field reorganization structures 
develop memory allocation library support interleaving identical fields different instances structure referenced demonstrate significant reductions cache rates execution times 
complements theirs perform field reorganization manually profiling data describe tool automates part process 
showed fully automate layout java languages 
concurrently kistler franz describe technique uses temporal profiling data reorder structure fields 
differs ways 
path profiling data capture temporal relationships 
second optimize layouts cache line fill buffer forwarding hardware feature supported powerpc optimize layouts inherent locality 
third algorithm divides affinity graph cache line sized cliques 
consequence technique may affinity fields placed consecutive cache lines 
cache line alignment allocation time suitably manipulating malloc pointer resultant layout may perform 
provide structure activity rankings metrics evaluating structure field orders permit informed selection suitable candidates structure field reordering 
seidl zorn combine profiling variety different information sources run time predict object frequency lifetime 
show program heap objects highly predictable prediction techniques effective 
predictions generate customized allocators decrease program page fault rate 
techniques hand aim reducing program cache rate 

describes techniques structure splitting field reordering improve cache performance changing internal organization fields data structure 
previous techniques concentrate arranging distinct structure instances worked best structures smaller half cache block techniques improve cache behavior larger structures 
measurements indicate java programs significant number classes field access profiles permit simple bimodal division hot frequently accessed cold rarely accessed fields 
addition classes account significant fraction field accesses 
structure splitting algorithm described effective dividing classes hot cold portions 
importantly splitting decisions robust fairly insensitive input data profiling class field accesses 
structure splitting algorithm reduced cache rates java programs improved performance improvement previously described cache conscious reorganization techniques 
promising results encourage experimentation larger variety benchmarks 
large structures span multiple cache blocks reordering fields place high temporal affinity cache block improves cache utilization 
describes tool recommends structure field reorderings 
preliminary measurements indicate reordering fields active structures improves performance microsoft sql server 
unfortunately constraints due persistent data formats code relied particular field orders prevented reordering promising structures 
results suggest structure layouts better left compiler runtime system specified programmers 
modern languages java provide opportunities exploit flexibility improve programs cache performance 
authors roger crew richard daniel weise helpful discussions 
bruce vo provided assistance microsoft tracing tool 
agarwal maurice franklin rick helped sql server 
authors indebted craig chambers writing java sparc assembly code generator providing vortex compiler infrastructure 
dave grove assisted vortex 
grateful han lee ben zorn providing bit java bytecode instrumentation tool 
anonymous referees offered useful comments 
research supported nsf nyi award ccr support sun microsystems nsf mip 
field reordering performed author intern microsoft research 
brad calder chandra john todd austin 
cache conscious data placement 
proceedings international conference architectural support programming languages operating systems asplos viii pages oct 
craig chambers 
object oriented multi methods cecil 
proceedings ecoop lncs springer verlag pages june 
craig chambers 
cecil language specification rationale 
university washington seattle technical report tr mar 
craig chambers jeffrey dean david grove 
optimization object oriented languages 
university washington seattle technical report june 
chilimbi james larus 
generational garbage collection implement cache conscious data placement 
proceedings international symposium memory management oct 
chilimbi mark hill james larus 
cache conscious structure layout 
proceedings acm sigplan conference programming language design implementation may 
crew 
language examining syntax trees 
proceedings usenix conference domain specific languages oct 
kistler franz 
automated record layout dynamic data structures 
department information computer science university california irvine technical report may 
calder lee zorn overlapping execution transfer non strict execution mobile programs 
proceedings international conference architectural support programming languages operating systems asplos viii pages oct 
lee zorn 
bit tool instrumenting java bytecodes 
proceedings usenix internet technologies systems usits pages dec 
seidl zorn 
segregating heap objects behavior lifetime 
proceedings international conference architectural support programming languages operating systems asplos viii pages oct 
sun microelectronics 
ultrasparc user manual 
transaction processing council 
tpc benchmark standard specification rev jun 
dan truong francois andre 
improving cache behavior dynamically allocated data structures 
international conference parallel architectures compilation techniques oct 
