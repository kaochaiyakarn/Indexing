combining type classes existential types konstantin ufer laufer math luc edu department mathematical sciences university chicago north sheridan road chicago il usa proc 
latin american informatics conference panel cem mexico september demonstrates novel combination type classes existential types adds significant expressive power language requiring minor syntactic change 
explore combination context higher order functional languages static typing parametric polymorphism algebraic data types hindley milner type inference 
examined underlying type theoretic issues focuses practical aspects extension 
examine limitations existing functional object oriented languages 
give examples demonstrate class types user defined interfaces address limitations 
give informal description translation language target language type classes 
extension equally applies languages similar type systems independent strictness considerations 
implemented chalmers haskell system examples developed system 
categories subject descriptors programming languages language classifications applicative languages programming languages language constructs data types modules packages logics meanings programs studies program constructs type structure general terms languages theory additional key words phrases object oriented programming dynamic dispatching polymorphism type inference existentially quantified types intent demonstrate combination independent programming language constructs type classes existential types adds significant expressive power lan guage requiring minor syntactic change 
explore combination context higher order functional languages static typing parametric polymorphism algebraic data types hindley milner type inference 
focuses practical consequences combining type classes existential types treated underlying type theoretic issues formally :10.1.1.51.53
developed type system type inference algorithm resulting language 
furthermore formal semantics translation implicitly typed second order calculus shown type system semantically sound 
sake concreteness language extension haskell 
languages similar type systems extended analogously 
furthermore extension independent strictness considerations 
proposal implemented chalmers haskell system 
examples developed tested hbi interpreter haskell syntax 
examine limitations existing functional object oriented languages 
demonstrate type classes existential types address limitations particular give examples illustrating express class types user defined interfaces heterogeneous aggregates different implementations type dynamic dispatching operations respect representation type separate interface implementation hierarchies 
give informal description translation language target language type classes 
remainder section motivates extension discussing limitations existing functional object oriented languages 
section describes algebraic data types extended existential quantification type classes 
section contains collection examples 
section illustrates implementation language 
section concludes outlook related 
limitations functional object oriented languages section motivates combination type classes existential types examining shortcomings existing languages 
functional languages common approach dealing heterogeneous lists statically typed languages introduce algebraic data type separate constructor type allowed list data key int bool int declare values type applying constructors 
example heterogenous list true want convert value list integer declaring function pattern matching notation toint toint toint length expression map toint applies toint element list results :10.1.1.117.695
disadvantages approach remember number different constructors 
component types algebraic data type consequently operation applied components long type correct 
importantly algebraic types form support extension 
new case added algebraic type example float type key function operates type key changed include new case 
show algebraic data types existential component types simultaneously cure drawbacks 
object oriented languages object oriented languages successful expressing heterogeneous aggregates extensible subtype hierarchies 
opposed statically typed functional languages lack type inference dynamically typed 
furthermore statically typed object oriented languages suffer contravariance rule record subtyping hard languages model hierarchies algebraic structures 
compare view object oriented approach identify conceptual relations classes implementations 
contrast ways relations manifest haskell 
relation class derived superclasses 
relation corresponds public inheritance 
haskell expressed hierarchy type classes 
implements relation class interface zero implementations 
class exactly implementation 
haskell type class may arbitrarily instance types type may belong number type classes long implements superclasses 
reuses relation new implementation derived existing purpose code reuse 
relation expressed private inheritance 
haskell conditional instance declarations express limited form reuse implementation level 
offers different kinds inheritance public private expressed mechanism 
furthermore multiple implementations modeled deriving classes superclass 
object oriented languages suffer similar problems 
proposed solution comes form separate signatures 
hand haskell language clearly separate relationships 
algebraic data types existential quantification type classes section describes data types user defined interfaces provided extending syntax algebraic data type definitions 
extension applied language polymorphic type system algebraic data types explicit type variables type classes implemented chalmers haskell system extension haskell 
type classes provide systematic approach ad hoc operator overloading :10.1.1.47.1059
class declaration introduces new class name new overloaded functions type supports group overloaded functions declared instance corresponding class 
algorithmic type inference principal types style hindley milner possible ml languages extended type classes haskell 
existential types formalization concept data type package ada cluster clu module modula 
stating value existentially quantified type mean type fixed private type giving type inference data types incorporated functional languages allowing component types algebraic data types existential ly quantified :10.1.1.51.53
data types class sense instances treated ordinary values 
combine type classes existential types follows existentially quantified type variables component types algebraic data types stand hidden representation types data type 
constraining existentially quantified type variables belong certain type classes require representation types support certain operations 
sense type classes serve interfaces data types 
syntactically extend algebraic data type definitions dropping restriction type variables bound formal type parameters may appear component types data type 
free type variable data type declaration considered local existentially quantified component types value constructor appears universally quantified type value constructor 
just universally quantified type variables constrained context form stating type variable belongs type class existentially quantified type variables constrained local contexts value constructors appear 
general form data type declaration follows data types value constructors type variables free types largest subset constrains type variables free types value constructor appears pattern existentially quantified type variable component types replaced fresh anonymous type types bound vari 

ik ik ik ables anonymous types satisfy local context constructor furthermore escape scope bound variables examples examples illustrate various applications existential quantification combined type classes 
examples developed tested chalmers haskell interpreter hbi 
assume numerals type int example type float 
minimum heterogeneous list consider algebraic data type declaration data key key int declaration introduces new type constructor key formal type parameter type value constructor key universally quantified key int key contrast declaration data key key int introduces new parameterless type key value constructor key type key int key applications key result type key construct list key id key length key true key type key heterogeneous sense elements different representation types :10.1.1.117.695
pattern matching extract components value type key 
type variable component type constructor key existentially quantified 
argument type type function definition identical giving function type key int key existentially quantified type variables escape scope introduced function definition ill typed value key function finds minimum list keys respect integer value obtained applying function xs xs expression evaluates 
observe key data type implementations explicitly bundle value type method type returning int 
element may viewed different implementation type 
implementations key differ representation types example second third elements methods elements 
value type key know representation type guaranteed safely apply second component method component value 
minimum heterogeneous list type classes type classes provide way associating methods type way methods implicitly available value type 
example type class key specifies instances implement method key returning integer class key key int instance type key declares implements method key example instance key int key id instance key bool key instance key key length type class key define interface data type key constraining existentially quantified type variable instance type class key 
interface expressed constructor context key type declaration data key key key define heterogeneous lists keys key key key true key implementations key representation type share method implemented instance declaration corresponding type :10.1.1.117.695
explicit case method dictionaries packed implicitly component values 
reflected translation scheme section corresponds dynamic dispatching objectoriented programming language method associated object selected applied object run time 
example section additional implementations type key may added simply declaring additional instances class key 
straightforward way compare different values type key mapping integer values function key key choose take general approach 
simply declare key instance equality ordered classes making collection predefined functions available 
methods need implemented class declarations eq ord contain default implementations methods instance eq key key key key key instance ord key key predefined polymorphic minimum function lists ordered values expression minimum evaluates key true 
composition list functions algebraic data types preceding examples constructor 
data types constructors possible existentially quantified type variables local component type constructor appear 
type describes lists functions type function allow composed 
notational convenience declare constructor right associative infixr data universally quantified type variables correspond argument type result type function respectively existentially quantified type variable represents intermediate types arising composition functions 
construct lists composable functions example id recursive function apply function resulting successive composition argument 
recursive call apply different type defined enable polymorphic recursion giving explicit type signature 
apply apply apply fl apply fl evaluation expression apply results true true 
count number functions composition num fl fl expression evaluates 
points color points example demonstrates object oriented concepts modeled type classes existential quantification 
start level class hierarchy points colored points 
object oriented terminology inheritance interface level establish relationships properties classes 
data color red green blue deriving eq type pair float float class point move pair pos pair class point colorpoint color color paint color define implementations class point cartesian coordinates data pair instance point move dx dy dx dy pos polar coordinates data pair instance point move dx dy moveto dx dy pos moveto sqrt atan pos cos sin previous examples define data type type class point interface data point point point making type point instance class point provide dynamic dispatching methods interface classes instance point point move point point move pos point pos instance declaration states instance type type class point may extended additional fields 
general declaration need specific point instance declaration colorpoint instance haskell requires instance type class instance superclasses type class 
instance point point move move pos pos instance declaration states instance point extended field type color results instance colorpoint 
object oriented terminology previous instance declaration provide inheritance implementation level code reuse 
furthermore automatically get colored version implementations point instance point colorpoint color color paint list points contains various combinations uncolored colored cartesian polar points point point blue point point pi red evaluate expressions map resulting point point blue point point red implementation section describe programs translated suitable target language 
approach original compile time translation scheme wadler blott developed nipkow snelting 
basic idea eliminate classes favor run time method dictionaries contain instances particular types overloaded functions associated class 
identifier polymorphic type scheme original environment typed function translated environment translated type dictionary arguments class constrains type variable original type result type function original type 
translation type preserving sense typed program translates typed target program 
type theoretic reasons target language explicitly implicitly typed second order calcu lus 
illustrative purposes translate implicitly typed calculus haskell syntax 
explain translation stepping second example section 
declare new type class declaration represent corresponding method dictionaries 
case introduce type constructor corresponding class key 
dictionaries class created value constructor 
data int function ky selects method dictionary type method contains ky instance declaration class key translates declaration method dictionary type 
corresponding instance key int declare dictionary type int forth id length application function key value translates expression selecting method dictionary type applying method value 
example expression key translates ky evaluates :10.1.1.117.695
existentially quantified type variables occur component types algebraic data types 
furthermore existentially quantified type variable may constrained type classes 
functions required type classes implicitly bundled component values available component values accessed 
bundling explicit translation type variable constrained type classes requires including dictionaries component type algebraic data type 
example type variable instance class key translated data type key contains dictionary type addition value type data key key application original value constructor key translated application new constructor key appropriate method dictionary supplied argument key key key true key value type key decomposed components available value type suitable dictionary type containing function selected applied value :10.1.1.117.695
seen translated function key ky surprising translation second example section exactly results example method provided explicitly component data type 
related demonstrated type classes existential types combined functional language static polymorphic type system explicit type variables algebraic data type declarations regardless strictness considerations 
illustrated class data types user defined interfaces overcome various drawbacks existing functional object oriented languages 
shown translate extended language suitable target language 
perry addresses hindley milner type inference existential types hope system 
typing rules sufficient guarantee absence runtime type errors hope compiler impose sufficient restrictions 
unsafe program haskell syntax typed typing rules rejected compiler 
type variable existentially quantified 
data case true ufer odersky extension ml existentially quantified types language operations types included explicitly existentially quantified component types recursive data types :10.1.1.51.53
avoided haskell type classes interfaces types formal semantics 
mitchell describe possibility treating modules class values address issue type inference 
hiding type components structure type structure implicitly coerced strong dependent sum type weak existentially quantified sum type 
harper lillibridge independently leroy explore idea new treatment standard ml module system 
approach structures weak sum types act class values 
stratification types different universes small types large strong sum types longer necessary 
module approaches semantically complex lack support type inference 
pierce turner describe object oriented language existential quantification recursive record types 
language extension include subtyping sufficiently powerful model features typical object oriented languages including methods superclass private instance variables supported 
language explicitly typed type inference considered 
chen hudak odersky extension haskell parameterized type classes 
jones describes general extension haskell type constructor classes 
plan extend analogously obtain container classes element types 
acknowledgments martin odersky sharing insights numerous discussions 
greatly benefited conversations stefan kaes tobias nipkow phil wadler 
lennart augustsson extension haskell existential quantification possible develop test examples contained 
anonymous referees fpca valuable feedback earlier version suggesting interesting example involving composition list functions 
augustsson 
haskell user manual may 
distributed hbc compiler 
baumgartner russo 
signatures extension type abstraction subtype polymorphism 
software practice experience 
appear 
cardelli wegner 
understanding types data abstraction polymorphism 
acm computing surveys december 
chen hudak odersky 
parametric type classes 
proc 
acm conf 
lisp functional programming 
harper lillibridge 
type theoretic approach higher order modules sharing 
proc 
th acm symp 
principles programming languages pages january 
hudak peyton jones wadler report programming language haskell non strict purely functional language version 
acm sigplan notices may 
jones 
polymorphic recursion haskell july 
posted haskell mailing list 
jones 
system constructor classes overloading implicit higher order polymorphism 
proc 
functional programming languages computer architecture 
acm june 
kaes 
parametric overloading polymorphic programming languages 
ganzinger editor proc 
nd european symposium programming lecture notes computer science vol 
pages nancy france march 
springer verlag 
ufer 
polymorphic type inference data types 
phd thesis new york university july 
available technical report december new york university department computer science 
ufer 
type classes existential types 
preliminary draft june 
ufer odersky 
type classes signatures types 
proc 
phoenix seminar workshop declarative programming november 
ufer odersky :10.1.1.51.53
polymorphic type inference data types 
acm transactions programming languages systems toplas 
appear 
leroy 
manifest types modules separate compilation 
proc 
th acm symp 
principles programming languages pages january 
mitchell 
extension standard ml modules subtyping inheritance 
proc 
th acm symp 
principles programming languages january 
mitchell plotkin 
types existential type 
acm trans 
programming languages systems 
nipkow prehofer 
type checking type classes 
proc 
th acm symp 
principles programming languages 
nipkow snelting 
type classes overloading resolution order sorted unification 
proc 
functional programming languages computer architecture pages 
acm 
perry 
implementation practical functional programming languages 
phd thesis imperial college 
pierce turner 
simple type theoretic foundations object oriented programming 
journal functional programming april 
stroustrup 
programming language 
addison wesley 
wadler blott 
ad hoc polymorphism ad hoc 
proc 
th acm symp 
principles programming languages pages january 
