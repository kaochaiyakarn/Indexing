learning order acyclic horn programs entailment chandra reddy prasad tadepalli department computer science oregon state university corvallis 
cs orst edu 
consider learning order horn programs entailment 
particular show subclass order acyclic horn programs constant arity exactly learnable equivalence entailment membership queries provided allows polynomial time subsumption procedure satisfies closure conditions 
consequence order acyclic determinate horn programs constant arity exactly learnable equivalence entailment membership queries 
learning order horn programs sets order horn clauses important problem inductive logic programming applications ranging speedup learning grammatical inference 
interested speedup learning concerns learning domainspecific control knowledge alleviate computational hardness planning 
kind control knowledge particularly useful domains represented goal decomposition rules 
decomposition rule specifies goal decomposed sequence subgoals set conditions true initial problem state 
subgoals turn set decomposition rules primitive action case directly executed 
logical inference horn clauses ideally suited planning needs keep track time 
spite difference rules represented order horn clauses adding situation variables literal indicate time interval literal true 
problem learning goal decomposition rules single goal mapped learning order horn definitions set horn clauses having head consequent literal 
learning goal decomposition rules multiple goals corresponds learning order horn programs 
henceforth omit prefix order possibility ambiguity 
appears proceedings th international conference machine learning 
reprinted permission 
learning entailment positive negative example horn clause implied implied target 
results cohen dzeroski 
indicate classes horn programs having single constant number clauses learnable examples 
khardon shows actions strategies consisting variable number constant size order production rules learned examples khardon 
cohen proves predicting restricted classes horn programs viz 
function free depth determinate constant arity variable number clauses variable size examples cryptographically hard 
frazier pitt entailment setting learning arbitrary propositional horn programs 
addition examples entailment membership queries entailment queries ask horn clause entailed target 
moving order representations frazier pitt showed classic sentences exactly learnable polynomial time examples entailment queries 
horn clause simple terms variables body clause restricted terms appear head 
page considered non recursive horn programs restricted simple clauses predicates constant arity showed learnable examples entailment queries 
generalized page result acyclic possibly recursive simple horn programs constant arity predicates 
reddy tadepalli showed non recursive horn definitions learnable examples entailment queries 
result applies non generative horn programs variables terms head restricted body 
show acyclic non generative horn programs constant arity polynomial time subsumption procedure learnable examples entailment queries certain closure conditions satisfied 
particular result applies acyclic horn programs constant arity determinate clauses 
goal decomposition rules hierarchical nature horn programs 
aspect learning hierarchical domains hierarchical order literals goals concepts 
systems learning hierarchically organized knowledge assumes structure hierarchy order literals known learner 
examples include marvin sammut banerji reddy tadepalli experimental side learning exercises natarajan learning acyclic horn sentences theoretical side 
fact khardon shows learning hierarchical strategies computationally hard structure hierarchy known khardon 
algorithm assumes hierarchical order literals known 
rest organized follows 
section provides definitions terminology 
section describes learning model learning algorithm proves learnability result 
section concludes discussion implications limitations 
preliminaries section define describe terminology rest 
brevity omit standard terminology books lloyd 
variants variants stand conjunction literals variants stand single literal 
definition 
definite horn clause horn clause clause short finite set literals contains exactly positive literal fl ln treated disjunction literals set universal quantification variables 
alternately represented called head consequent called body antecedent interpreted unit horn clause horn clause negative literals body 
horn program horn sentence set definite horn clauses interpreted conjunctively 
definition 
sets literals 
say subsumes denoted iff exists substitution say generalization definition plotkin 
sets literals 
say general generalization lgg iff definition plotkin 
selection clauses pair literals predicate symbol arity sign 
sets literals lgg selection predicate lgg lgg lgg 
lgg terms lgg lgg variable stands lgg pair terms computation lgg set literals 
example 
selections lgg variables standing pairs 
definition 
derivation horn clause horn program finite directed acyclic graph node arc node arcs terminating clause substitution 
example parent grandparent mother parent shows derivation mother mother grandparent 
proposition 
derivation clause horn program node grandparent parent parent mother mother fig 

derivation mother mother grandparent set predicate symbols set terms 
set atoms defined set horn programs atoms 
integer subset containing predicate symbols arity 
set atoms defined set horn programs atoms 
definitions describe class horn programs ah minimal models polynomial size 
definition 
sigma binary relation supported denoted atoms sigma sigma substitution definition 
horn program sigma acyclic relation sigma terminating infinite decreasing sequence 
example acyclic grandparent parent mother cycle formed relation 
khardon call definite clause non generative clause set terms consequent subset set terms subterms antecedent 
definition 
constant define horn program sigma class ah sigma acyclic clause non generative empty antecedent 
definition 
clause horn program sigma clause 
target clause sigma iff substitution call hypothesis clause definition 
antecedent prime consequent wrt sigma sigma sigma example parent prime consequent mother mother grandparent parent grandparent 
learning horn programs section show subclass ah exactly learnable exact learning model angluin entailment setting 
henceforth sigma ah denotes target horn program 
learning model learning entailment example horn clause 
example positive example sigma sigma negative 
entailment query takes input example outputs positive example sigma sigma 
equivalence query takes input horn program outputs sigma contain entail exactly horn clauses returns counterexample entailed exactly sigma derivation order query takes input atoms outputs 
algorithm exactly learns horn program sigma ah polynomial time equivalence entailment derivation order queries runs time polynomial size sigma size largest counterexample outputs horn program ah equivalence query answers 
learning algorithm section describe learning algorithm shown 
maintains hypothesis entailed target instance instance sigma counterexamples positive 
suppose counterexample learner see 
counterexample derivation target theory sigma derivation possible current hypothesis clause derivation learned sufficient generality 
algorithm tries identify antecedent literals clause target expanding derivation graph leaves goal clauses words computes minimal model implied closure saturation forward chaining line 
identify consequent called prime consequent calls line 
finds prime consequent tracing supported chain starting literal directly supported literals lines 
line reduce trim away irrelevant literals antecedent form new clause counterexample hypothesis subsumed single target clause see lemmas 
combines appropriate clause lgg lines 
uses entailment query find appropriate hypothesis clause checking result lgg implied target line 
clause exists appended new clause line 
problem approach size lgg product sizes arguments 
causes size hypothesis clause grow exponentially number examples combined worst case 
avoid antecedent literals clause lgg trimmed reduce size resulting clause bounded subsumed target clause lines 
result reduce replaces original hypothesis clause derived line 
step antecedents target clause consequents remain resulting hypothesis clause see lemma 
process repeats hypothesis equivalent sigma algorithm works unit clauses empty antecedents change 
equivalence entailment queries derivation order outputs horn program equivalent sigma 
fg empty hypothesis clauses set equivalent sigma counterexample returned fl forward chaining qf pf qf reduce qf sigma pg qg pg qg lgg pf qf replace reduce pg qg append pf qf return finds prime consequents set possible literals having terms fl gamma sigma lg return reduce irrelevant literals repeat literal sequence sigma gamma flg sigma gamma flg gamma flg change return fig 

algorithm example example see works consider sigma fl function symbol 
suppose fl adopt convention letters alphabet constants letters alphabet variables 
counterexample 
step change 
prime consequent suppose returns 
reduce eliminates antecedent sigma sigma 

combining clause obtain entailed sigma new fl suppose counterexample 
fl reduce remove implied literals wrt sigma line 
modified counterexample combined clause resultant lgg entailed sigma appended fl suppose counterexample 
line 
prime consequent reduce 
combined clauses resultant lgg entailed sigma added process continues sigma equivalent 
bring nuances reduce revisit part previous example 
consider input reduce 
sigma sigma sigma literal removed 
implied literals wrt sigma order literals removed reduce follows derivation order removed removed removed 
intuitively imagined way 
consider derivation tree counterexample consequent literal top antecedent literals bottom 
process literals bottom tree appropriate level resulting clause subsumed clause target 
case reduce removes leaves resulting clause subsumed clause sigma means reduce leaves literals implied remaining literals removed sigma gamma flg line 
removing literals result hypothesis clauses subsumed target clause example illustrates 
sigma fl suppose counterexample 
fl line 
reduce remove sigma ends clause subsumed target clause 
prevent redundant hypothesis clauses number high compared number target clauses 
argument formalized lemmas 
learnability ah section prove algorithm exactly learns subclass ah subsumption polynomial time complexity 
plan proof follows series lemmas establish hypothesis clause learned target clause lemma 
show target clause hypothesis clause lemma 
lemmas establish number hypothesis clauses bounded number target clauses 
fact bounds sizes hypothesis clauses established lemma show learns successfully polynomial time theorems 
define specific hypothesis class obeys conditions theorems prove class learnable theorem 
lemmas show input finds prime consequent subsumed clause sigma lemma 
input output 
assume sigma terminates prime consequent wrt sigma proof 
sigma acyclic terminating sequence 
loop lines iterate times length sequence terminates 
sigma lines 
line iteration immediately prior terminating iteration lines sigma prime consequent wrt sigma ut lemma 
prime consequent wrt sigma clause sigma proof 
assume prime consequent wrt sigma consider derivation sigma arcs terminate implies fl viz 
sigma contradicting assumption prime consequent 
fl clause substitution definition derivation 
implying ut definition lemmas help show reduce clause input removes irrelevant literals antecedent maintaining consequent 
definition 
conjunction closure respect sigma denoted defined flj sigma lemma 
prime consequent reduce prime consequent 
proof 
prime consequent literal ones gamma prime consequents lines literals supported removed 
case literal gamma sigma prime consequent 
ut lemma 
input reduce prime consequent wrt sigma output clause sigma proof 
prime consequent lemma prime consequent 
lemma clause sigma show assume exists literal gamma gamma literal literal gamma literal exist sigma acyclic 
reasons remain gamma sigma gamma flg sigma gamma flg disprove cases gamma flg 
sigma gamma flg 
reason remains sigma gamma flg means gamma flg contains literals imply literal contradicting gamma gamma contains literals contradicts statement disprove possibilities 
ut lemmas show maintains right clauses lemma 
clause target clause 
proof 
show prime consequent lemma clause sigma show prime consequent induction number times clause position updated 
introduced line 
lemmas prime consequent proves base case 
way clause hypothesis clause line 
clause position updated line 
inductive hypothesis assume prime consequent iteration loop lines position updated 
consider lgg 
suppose prime consequent substitutions definition order prime consequent similarly lgg contradicting assumption prime consequent prime consequent lemma reduce prime consequent lemma target clause 
ut lemma 
combines modified counterexample clause target clause proof 
combines sigma lgg 
lemma prime consequent lgg 
lemma sigma combined sigma lgg 
lgg 
ut lemma 
clause sigma hypothesis clause 
proof 
show new hypothesis clause added target clause distinct target clauses hypothesis clauses show hypothesis clauses common target clauses iteration loop lines distinct target clauses iteration 
added lemma clause sigma new clause added target clause distinct target clauses hypothesis clauses change iteration loop 
changes done proof 
suppose changes loss generality 
target clause assume common target clause iteration 
target clause counterexample current iteration 
show lgg target clause 
lgg 
target clause lgg 
lgg subset subset reduce outputs clause subset antecedent consequent reduce lgg 
new clause position reduce lgg common target clause iteration 
ut lemma shows modifications due reduce counterexample remains counterexample 
lemma 
line positive counterexample 
proof 
show counterexample line positive counterexample 
argue lines positive counterexample 
show line positive counterexample 
lemma clause sigma sigma line positive counterexample 
sigma contains literals literal lines line sigma positive counterexample 
lines sigma positive counterexample 
ut theorem shows exactly learns ah forward chaining polynomial time complexity 
theorem identifies conditions sigma returns time complexity forward chaining polynomial 
theorem 
exactly learns ah equivalence entailment queries provided determining polynomial sizes proof 
lemma positive counterexample 
counterexample new antecedent added line existing antecedent replaced line 
case replaced clause subsumed replacing clause lgg reduce generalize original clause turning constants variables dropping literals 
hand replaced clause subsume different replacing clause reduce 
contradicting counterexample replacement position changes clause position 
minimum change constant removal literal 
number clauses number distinct predicate symbols sigma maximum number terms clause counterexample maximum possible number literals terms st maximum number literals lemmas clause st includes literals versions 
consider removing literal 
need st counterexamples clause 
includes base counterexample introduce clause 
lemmas clauses need nst counterexamples equivalence queries 
call line takes st entailment queries literals need try possible consequents jlj st called counterexamples 
nst counterexamples condition line tested times needs entailment queries 
reduce called argument counterexamples arguments nst counterexamples 
reduce jpj iterations loop lines literal removed 
loop tried jpj times 
iteration loop lines takes entailment queries 
reduce needs jpj jpj entailment queries 
reduce needs st st entailment queries 
outputs reduce maximum possible number literals lgg reduce needs entailment queries 
total number entailment queries nst st 
determining takes time polynomial line takes st deltap time 
rest number entailment queries dominates time 
time taken polynomial ut definition 
horn clause 
called antecedent expansion contains variables class horn sentences closed antecedent expansion horn sentence obtained selecting subset horn clauses replacing antecedent expansions definition 
subsumption algorithm takes clause conjunction literals ground substitution variables returns true theorem 
exactly learns subclass ah equivalence entailment queries provided closed substitution antecedent expansion clauses target concepts polynomial time subsumption algorithm 
proof 
lemma clause target clause substitution target class closed substitution antecedent expansion hypothesis clauses polynomial time subsumption algorithm 
forward chaining step computing consequents line done polynomial time repeatedly checking hypothesis clause antecedent subsumes substitution variables adding previous theorem exactly learns ut definition theorem identify syntactic restrictions ah resulting subclass satisfies conditions previous theorem 
definition 
set literals 
horn clause determinate iff exists ordering substitution gamma ground fl gamma substitution ff variables ff ground call ordering literals clause determinate ordering horn program determinate iff clauses program determinate theorem 
class determinate horn programs ah denoted exactly learnable equivalence entailment queries 
definition strictly generalizes standard definition determinacy muggleton feng horn clause program determinate set literals determinate determinacy confused ij determinacy constant depth fixed arity determinacy restricted determinacy 
proof 
show closed substitution antecedent expansion 
consider target clause target program antecedent literals sorted determinate order 
fi target clause antecedent expansion substitution 
want show new clause determinate 
set literals substitution gamma fi ground substitution fl equivalent applying fi gamma fi gamma fl fi fl target clause satisfies determinacy single ground substitution ff fl flff means true fi 
literals variables single ground substitution 
fi determinate 
show clauses programs polynomialtime subsumption algorithm 
set literals clause literals unknown determinate ordering consider possible subsets fl size 
note subsets 
subset instantiate ki variables subset possible ways 
total number terms sigma gives ki different substitutions 
substitution substitution remaining literals clause 
order remaining literals substituted determined sequential search apply current substitution literal pick allows possible substitution remaining variables 
done jpj time 
antecedent subsumes considered subsets yield successful match 
total time algorithm bounded ki jpj polynomial variables assumed constants 
class satisfies conditions required theorem successful result follows 
ut discussion shown learnability certain subclasses acyclic ary horn programs 
specifically determinate horn programs ah exactly learnable equivalence entailment queries 
page programs considered allow local variables antecedents 
clauses non generative set terms variables occur head clause subset occur body clause 
needed constrain forward chaining inference step finish polynomial time unbounded 
appears simultaneously removing non generative simplicity restrictions difficult functions due unbounded nature inference case 
learning entailment learning interpretations standard settings order learning de raedt 
learning interpretations learner positive negative interpretation horn sentence true false 
interpretations partial truth values ground atoms may left unspecified 
membership queries available learning entailment learning interpretations equivalent horn programs 
learn negative interpretations follows 
negative interpretation minimize removing negative literals asking membership queries 
negative interpretation violate horn clause yields interpretation set positive literals negative literal convert positive counterexample similarly asks entailment membership query clause say turn membership query interpretation substituting unique skolem constant variable clause 
answer entailment query true iff answer membership query false 
limitation algorithm assumes supported relation 
reasonable assumption planning domains known goals occur subgoals desirable learn relation 
unfortunately difficult due number problems 
main difficulties possible determine set consequents antecedent prime consequent 
example consider target sigma fl counterexample literal correct consequent lemma says prime consequent right consequent choose knowing order clear identify 
learning possible clauses maintaining consequents resulting spurious matches redundant clauses counterexamples cases 
shown reddy tadepalli horn programs express goal decomposition rules rules planning situation calculus formalism 
believe algorithm discussed extensions applied learn rules important problem speedup learning 
rules special case hierarchical task networks erol hendler nau allow partial ordering subgoals constraints variables rules 
shown expressed horn programs 
acknowledgments gratefully acknowledge support onr nsf iri 
roni khardon anonymous reviewers icml ilp insightful comments 
angluin 

queries concept learning 
machine learning 


learning acyclic order horn sentences entailment 
proceedings eigth international workshop algorithmic learning theory 
ohmsha springer verlag 
cohen 

pac learning non recursive prolog clauses 
artificial intelligence 
cohen 

pac learning recursive logic programs efficient algorithms 
jl 
ai research 
de raedt 

logical settings concept learning 
artificial intelligence 
dzeroski muggleton russell 

pac learnability determinate logic programs 
proceedings fifth annual acm workshop computational learning theory pp 

erol hendler nau 

htn planning complexity expressivity 
proceedings twelfth national conference artificial intelligence aaai aaai press 
frazier pitt 

learning entailment application propositional horn sentences 
proceedings tenth international conference machine learning pp 

khardon 

learning take actions 
proceedings thirteenth national conference artificial intelligence aaai pp 

khardon 

learning order universal horn expressions 
proceedings eleventh annual conference computational learning theory colt 
lloyd 

foundations logic programming nd ed 
springer verlag berlin 
muggleton feng 

efficient induction logic programs 
proceedings conference algorithmic learning theory pp 

ohmsha springer verlag 
natarajan 

learning exercises 
proceedings second workshop computational learning theory pp 

morgan kaufmann 
page 

anti unification constraint logics foundations applications learnability order logic speed learning deduction 
ph thesis university illinois urbana il 
plotkin 

note inductive generalization 
meltzer michie 
eds machine intelligence vol 
pp 

elsevier north holland new york 
reddy tadepalli 

learning goal decomposition rules exercises 
proceedings th international conference machine learning 
morgan kaufmann 
reddy tadepalli 

learning horn definitions equivalence membership queries 
proceedings th international workshop inductive logic programming 
springer verlag 
sammut banerji 

learning concepts asking questions 
machine learning artificial intelligence approach vol 

morgan kaufmann 
article processed macro package llncs style 
