solution reuse dynamic constraint satisfaction problems erard verfaillie thomas schiex cert avenue edouard belin bp toulouse cedex france cert fr ai problems modeled constraint satisfaction problems csp dynamic set constraints consider evolves environment user agents framework distributed system 
context computing new solution scratch problem change possible important drawbacks inefficiency instability successive solutions 
propose method reusing previous solution producing new local changes previous 
give key idea corresponding algorithm 
establish properties termination correctness completeness 
show produce solution empty assignment previous assignment improved filtering learning methods forward checking 
experimental results related efficiency stability comparisons known algorithms backtrack heuristic repair dynamic backtracking 
problem description effort spent increase efficiency constraint satisfaction algorithms filtering learning decomposition techniques improved backtracking efficient representations heuristics effort resulted design constraint reasoning tools solve numerous real problems 
techniques assume set variables constraints compose csp completely known fixed 
strong limitation dealing real situations csp consideration may evolve ffl environment evolution set tasks performed execution conditions scheduling applications ffl user evolution user requirements framework interactive design ffl agents framework distributed system 
notion dynamic csp dcsp dechter dechter introduced represent situations 
dcsp sequence csps differs previous addition removal constraints 
easy see possible changes csp constraint domain modifications variable additions removals expressed terms constraint additions removals 
solve sequence csps possible solve scratch done 
naive method remembers previous reasoning important drawbacks ffl inefficiency may unacceptable framework real time applications planning scheduling time allowed replanning limited ffl instability successive solutions may unpleasant framework interactive design planning activity started basis previous solution 
existing methods existing methods classified groups ffl heuristic methods consist previous consistent assignment complete heuristic framework current csp hentenryck provost ffl local repair methods consist starting previous consistent assignment complete repairing sequence local modifications modifications variable assignment minton selman levesque mitchell ffl constraint recording methods consist recording kind constraint deduced framework csp justification order reuse framework new csp includes justification de kleer hentenryck provost schiex verfaillie 
methods groups aim improving efficiency stability group aim improving efficiency 
little apart previous ones fourth group gathers methods aim minimizing distance successive solutions 
key idea proposed method originated previous studies french space agency verfaillie aimed designing scheduling system remote sensing satellite spot 
problem set tasks performed evolved day arrival new tasks achievement previous ones 
requirements disturb little possible previous scheduling entering new task 
solving problem idea possible enter new task iff exists location tasks location incompatible location removed entered modifying location 
terms csp idea expressed follows consider binary csp consistent assignment subset variables variable belong assign obtain consistent assignment fvg iff exists value val assign val remove assignments val inconsistent val assign unassigned variables modifying assignment 
assignment val consistent variable solution immediate 
note sake simplicity consider binary csp 
see proposed method deals general ary csps 
method name local changes lc clearly belongs second group local repair methods solving csp looks solving fifteen puzzle problem sequence variable assignment changes allows consistent assignment extended larger consistent 
algorithm corresponding algorithm described follows lc csp return lc variables variables csp assignment subset csp variables consistent iff constraints assigned satisfied constraint assigned assignment iff variables assigned lc variables set assigned fixed variables set assigned fixed variables set unassigned variables return success variable chosen domain lc variable failure return failure return lc variables fvg gamma fvg lc variable return failure val value chosen save assignments assign variable val lc value val success return success variable restore assignments return lc variable gamma lc value val assignment assignment val inconsistent return failure val consistent return success non empty subset assignment gamma val consistent variables return lc variables fvg gamma properties consider theorems theorem csp csp consistent resp 
inconsistent procedure call lc csp returns success resp 
failure case success result consistent assignment csp variables 
theorem disjunct sets assigned variables set unassigned variables assignment exists resp 
exist consistent assignment procedure call lc variables returns success resp 
failure case success result consistent assignment theorem disjunct sets assigned variables unassigned variable domain fvg assignment subset csp variables subset notation designates restriction assignment exists resp 
exist consistent assignment procedure call lc variable returns success resp 
failure case success result consistent assignment theorem disjunct sets variables unassigned variable val possible values fvg assignment exists resp 
exist consistent assignment fvg val procedure call lc value val returns success resp 
failure case success result consistent assignment theorem expresses termination correctness completeness properties algorithm 
theorems express properties procedures lc variables lc variable lc value 
easy show theorem resp 
consequence theorem resp 

consider set fixed variables procedure lc variables fvg procedures lc variable lc value 
just easy show theorem resp 
theorem holds jv theorem resp 
theorem holds condition 
induction cardinal prove theorems 
assume jv prove theorem case 
consider procedure call lc value val ffl assume exists consistent assignment fvg val fvg val val equal consistent procedure returns success resulting assignment val consistent ffl assume exists consistent assignment fvg val fvg val inconsistent procedure returns failure 
theorem consequently theorem proven particular case 
assume theorems hold jv prove hold jv consider theorem procedure call lc value val jv gamma 
note procedure lc variables recursively called arguments satisfy relations jv gamma fvg allows induction assumption ffl assume exists consistent assignment fvg val val consistent procedure immediately return failure val consistent procedure returns immediately success consistent assignment exists non empty subset val consistent example set chosen call returns success consistent assignment induction assumption ffl assume exists consistent assignment fvg val val inconsistent procedure immediately return success val inconsistent procedure returns immediately failure exists non empty subset val consistent example set chosen call returns failure induction assumption 
theorem consequently theorems proven jv proven cardinal allows conclude theorem proven algorithm described ends correct complete 
practical practical point view problem choose set small possible order reduce number variables need unassigned subsequently reassigned 
general case ary csps simple method consists choosing variable unassigned constraint unsatisfied assignment val resulting assignment val consistent previously unsatisfied constraints longer assigned guarantee resulting set smallest ones 
note modify termination correctness completeness properties algorithm 
may alter results terms efficiency stability 
compare cost searching smallest sets variables unassigned resulting saving 
particular case binary csps simpler method consists variable assignment inconsistent val 
resulting set smallest 
important note algorithm able solve csp starting empty assignment scratch starting previous assignment 
description see algorithm corresponds situation 
second starting assignment step consists producing consistent assignment included large possible 
method 
resp 
resulting set assigned resp 
unassigned variables csp solved procedure call lc variables fixed variable 
comparisons improvements resulting algorithm related backjumping dechter prosser intelligent backtracking bruynooghe dynamic backtracking ginsberg heuristic repair minton algorithms different 
avoids useless backtracking choices involved current conflict 
ones avoids backtracking undoing choices involved current conflict 
allows search started previous assignment 
backjumping intelligent dynamic backtracking built dealing dynamic csps heuristic repair uses usual backtracking mechanism 
local changes combines advantages efficient backtracking mechanism ability start search previous assignment 
improved problem filtering learning method forward checking nogood recording schiex verfaillie 
difference backtrack forward checking nogood recording applied assigned variables local changes heuristic repair applied assigned fixed variables 
note combination local changes nogood recording example solution reasoning reuse 
experiments order provide useful comparisons algorithms implemented basis basic algorithms backtrack bt dynamic backtracking dbt heuristic repair hrp local changes lc conflict directed backjumping cbj backward bc forward checking fc bc bt cbj fc dbt bc dbt fc hrp cbj bc hrp cbj fc lc bc lc fc 
time ambiguity abbreviations bt dbt hrp lc designate algorithms 
note dbt lc improved cbj powerful backtracking mechanism 
heuristics algorithm simple efficient heuristics ffl choice variable assigned unassigned reassigned choose variable domain smallest ffl choice value bt dbt value variable previous solution exists hrp lc choose value minimizes number unsatisfied constraints 
case bt dbt hrp previous solution recorded exists 
case bt dbt framework choice value 
case hrp starting assignment 
case lc greatest consistent assignment previously solution previous problem consistent recorded starting assignment 
algorithms trivial cases solved search previous csp consistent resp 
inconsistent added resp 
removed constraint 
csp generation freuder randomly generated set problems ffl number nv variables equal ffl variable cardinality domain randomly generated ffl constraints binary ffl connectivity con constraint graph ratio number constraints number possible constraints takes possible values ffl mean tightness mt constraints mean ratio number forbidden pairs values number possible pairs values takes possible values value mt tightness constraint randomly generated mt gamma mt 
ffl size ch changes ratio number additions removals number constraints takes possible values 
possible pairs con mt problems generated 
resulting initial problems possible values ch sequence changes generated probability additions removals 
measures terms efficiency usual measures performed number nodes number constraint checks cpu time 
terms stability distance successive solutions number variables differently assigned solutions measured time exist 
nv dom ch number constraint checks backward checking mt con bt bt bt ci bt bt hrp hrp hrp hrp hrp dbt dbt dbt dbt dbt lc lc lc lc lc bt bt ci bt bt bt hrp hrp hrp hrp hrp dbt dbt dbt dbt dbt lc lc lc lc lc bt bt bt bt bt hrp hrp hrp hrp hrp dbt dbt dbt dbt dbt lc lc lc lc lc bt bt bt bt bt hrp hrp hrp hrp hrp dbt dbt dbt dbt dbt lc lc lc lc lc bt ci bt bt bt bt hrp hrp hrp hrp hrp dbt dbt dbt dbt dbt lc lc lc lc lc forward checking mt con bt bt bt ci bt bt hrp hrp hrp hrp hrp dbt dbt dbt dbt dbt lc lc lc lc lc bt bt ci bt bt bt hrp hrp hrp hrp hrp dbt dbt dbt dbt dbt lc lc lc lc lc bt bt bt bt bt hrp hrp hrp hrp hrp dbt dbt dbt dbt dbt lc lc lc lc lc bt bt bt bt bt hrp hrp hrp hrp hrp dbt dbt dbt dbt dbt lc lc lc lc lc bt ci bt bt bt bt hrp hrp hrp hrp hrp dbt dbt dbt dbt dbt lc lc lc lc lc results tables show mean number constraint checks solving dynamic problems changes intermediate size ch 
show results obtained bt cbj bc dbt bc hrp cbj bc lc bc 
second show results obtained forward checking bt cbj fc dbt fc hrp cbj fc lc fc 
top left corner cell letter resp 
means problems consistent resp 
inconsistent letters ci mean consistent inconsistent 
resp 
constrained problems small resp 
large values con mt loose resp 
tight constraints top left resp 
bottom right table 
number mean value set results dynamic problems 
cell algorithm provides best result pointed bold 
analysis previously observed cheeseman kanefsky taylor hardest problems constrained solution quickly constrained inconsistency quickly established intermediate ones difficult establish consistency inconsistency 
consider table see ffl hrp efficient constrained problems inefficient inefficient ffl dbt better bt best intermediate problems ffl lc better hrp best constrained problems constrained ones better loosely connected problems inefficient intermediate strongly connected problems 
consider second table previous lessons modified forward checking benefits bt hrp dbt lc number constraint checks roughly divided bt hrp dbt lc ffl hrp best constrained problems ffl bt dbt best ones intermediate ones ffl lc remains best constrained ones 
note results different case ary constraints forward checking efficient 
show results related cpu time number constraint checks cpu time strongly correlated spite little overhead hrp lc constraint checks second bt dbt hrp lc aspect depends widely implementation 
surprising algorithms provide similar results terms distance successive solutions 
result mechanisms algorithm heuristics choose value 
note hrp lc provide better results small changes large ones results obtained change sizes modify previous lessons 
experiments needed confirm believe proposed method may convenient solving large problems involving binary ary constraints globally underconstrained subject frequent relatively small changes real scheduling problems 
supported french space agency french ministry defence dga done cert france university new hampshire usa 
indebted turner weiner helping improve freuder wallace useful discussions 
verfaillie 
oscar ou comment des missions 
proc 
th international avignon workshop 

maintenance solution dynamic constraint satisfaction problem 
proc 
applications artificial intelligence engineering viii 
bruynooghe 
solving combinatorial search problems intelligent backtracking 
information processing letters 
cheeseman kanefsky taylor 
really hard problems 
proc 
th ijcai 
de kleer 
comparison atms csp techniques 
proc 
th ijcai 
dechter dechter 
belief maintenance dynamic constraint networks 
proc 
aaai 
dechter 
enhancement schemes constraint processing backjumping learning cutset decomposition 
artificial intelligence 

masc une approche multi agent des probl emes de satisfaction de contraintes 
th ese de doctorat toulouse france 
ginsberg 
dynamic backtracking 
journal artificial intelligence research 
hentenryck provost 
incremental search constraint logic programming 
new generation computing 
freuder 
efficient representation constraint satisfaction problem search space 
proc 
aaai 
minton johnston philips laird 
minimizing conflicts heuristic repair method constraint satisfaction scheduling problems 
artificial intelligence 
prosser 
hybrid algorithms constraint satisfaction problem 
computational intelligence 
schiex verfaillie 
nogood recording static dynamic csp 
proc 
th ieee international conference tools artificial intelligence 
selman levesque mitchell 
new method solving hard satisfiability problems 
proc 
aaai 
