relationship slices module cohesion linda ott jeffrey department computer science michigan technological university houghton mi high module cohesion suggested desirable property program modularity 
subjective nature definition cohesion difficult practice 
examine relationship data flow module level cohesion processing element flow graph pfg 
pfg regroup original levels cohesion classifications 
slice profiles defined generating slices output variables module 
relationship shown slice profiles pfg indicate levels cohesion 
suggested slice profiles determine easily cohesiveness module 

psychological complexity software measure difficult programmers interact software 
intended reflect software written terms understandability testability maintainability 
concepts identified boehm essential development high quality software 
decomposition system modules significantly reduce psychological complexity 
myers states modularity single attribute software allows program intellectually manageable 
studies completed indicate size major factor software complexity 
modularity offers rational solution breaking large problems smaller manageable pieces 
constantine yourdon identified qualitative properties effective modularization cohesion 
cohesion referred module strength binding functionality 
highest degree cohesion obtained module performs exactly task 
cohesion defined subjective measure requiring interpretation informal definitions provided constantine yourdon 
attempts subjective concept precise 
include suggested decision tree proposed page jones attempts find quantitative cohesion metrics 
aim show degree cohesiveness module seen examining slices generated output variables module 
section discuss cohesion provide simplification metric examining relationships processing elements module processing element flow graph pfg 
section contains brief description slicing presents slice profile 
section example slice profiles examined show indicate relationship processing elements module cohesiveness module 
section discuss implications relationship 
current address technology washington st denver 
cohesion constantine yourdon identified levels modular cohesion 
proposed subjective measure functional relatedness software module 
module viewed collection processing elements act compute outputs module 
cohesion reflects functionality module measuring degree relatedness processing elements module 
modules low cohesion consist unrelated processing elements 
high cohesion modules consist single processing element collection highly related elements 
levels cohesion originally defined functional sequential communicational procedural temporal logical coincidental 
practice degree discrimination necessary 
purposes study categories levels cohesion similarities seen processing element flow graphs 
emerson card levels discrimination 
nodes processing element flow graph pfg represent processing elements module 
solid edges indicate data flow relationships processing elements 
control relationships elements indicated effect graphs constructed 
example effect discussed section 
special nodes labeled inputs outputs represent set input variables module set output variables computed module respectively 
graphs identify processing element relationships typical modules cohesion classes described 

low coincidental temporal low cohesion class consists modules exhibiting lowest cohesion levels defined constantine yourdon 
coincidental temporal modules associated distinct processing elements 
node graph corresponds processing elements computing module outputs 
edges graph indicate data relationships processing elements module possibility common dependence subset input variables 
inputs outputs 
pfg module low cohesion 
nodes represent distinct unrelated processing elements indicating separate data paths module 
elements modules coincidental cohesion tend operate different data yielding separate data flows element 
modules temporal cohesion discernible modules coincidental cohesion time relationship determined examining data control flow 
temporal modules tend exhibit data flow patterns similar coincidental modules 

control cohesion logical procedural second cohesion discrimination level called control cohesion 
associated constantine yourdon logical procedural cohesion levels 
modules tend highly diversified difficult represent simple picture 
pfg serves example 
graph represents alternate definitions variables control common structure 
symbols represent processing elements corresponding alternate definitions variable similarly represent processing elements variable blocks low cohesion level contain unrelated processing elements computing effect control structure shown graph presence processing element nodes 
inputs outputs 
pfg module control cohesion 
correspond processing elements contained block enclosing structure 
correspond elements contained block 
control cohesion assumed processing element relationship result common enclosing control structures 
control bindings processing elements considered weaker data bindings 
modules higher cohesion levels control data bindings interrelated 

data cohesion communicational third discrimination level called data cohesion 
cohesive modules typified having common data relationship processing elements module 
example consider pfg module input sided communicational data flow 
pfg contains processing elements computing values related fact required generate value case common data relationship computation binds data flow patterns increases cohesiveness module 
inputs outputs 
pfg module input sided communicational data flow processing elements 
nodes labeled correspond processing elements compute values element labeled similarly processing elements modules exhibiting output sided communicational data flow bound common element produced inputs 
result common element generate outputs 
pfg typical module output sided communicational data flow 
inputs outputs 
pfg module output sided communicational data flow elements 
node corresponds processing element computes value required elements labeled modules types communicational data flow similar amount cohesiveness processing elements 
input sided pfg contains distinct data paths consisting elements 
output sided graph similar paths consisting elements 
similarity data relationships suggests classifying modules communicational flow types having data cohesion 

high cohesion sequential functional high cohesion discrimination level consists sequential functional levels constantine yourdon 
modules exhibiting sequential cohesion sequential data flow graphs 
shows pfg module sequential cohesion 
processing element pfg computes output processing element chain 
modules high cohesion tend independent 
processing elements sequential modules highly interrelated due strong data dependencies 
functional modules typically compute single output represented single processing element 
inputs outputs 
pfg module high cohesion 
nodes represent chain processing elements typical module sequential data flow 

program slicing slicing method program reduction introduced weiser 
starting subset program behavior called slicing criterion slicing process results minimal form program reflects subset program behavior 
slices proposed potential debugging tools program understanding aids 

definition slice weiser formal definition slice program flow graph state trajectories defined slicing criterion 
definitions restrict slices single module definitions thesis 
symbol indicate arbitrary module procedure function main program 
definition 
slicing criterion tuple denotes specific statement number module subset variables definition 
intraprocedural slice module slicing criterion executable module properties 
obtained deleting zero statements ii 
input execution behavior points slice observed module respect variables statement example consider module 
distinct tasks performed module computations sum product integers 
relationships tasks common input value control structure compute sum product 
module clearly falls category control cohesion described previous section 
procedure integer var sumn integer var prodn integer var integer sumn prodn sumn sumn prodn prodn 
module computes functions sum product integers 
module obtained slicing criterion sumn 
statements deleted effect value computed sumn 
note slice obtained module computes single function sum integers 
similar slice product function obtained criterion prodn 
procedure integer var sumn integer var prodn integer var integer sumn sumn sumn 
slice obtained slicing criterion sumn 

slice profiles slice profile convenient representation revealing slice patterns module 
figures identify relationship slices data flow 
example slice profile procedure 
line column contains line number statement module 
column variable name heading slice profile corresponds slice associated variable 
rows profile marked vertical bar statements included slice particular variable row blank 
statement column contains source statement 
example column heading sumn corresponds slice variable sumn 
slice sumn consists statements containing vertical bar column sumn statements 
line sumn prodn statement procedure integer var sumn integer var prodn integer var integer sumn prodn sumn sumn prodn prodn 
slice profile 
statements included slice sumn indicated column labeled sumn profile 
slice indicated column labeled prodn 

slicing criteria selection suitable slicing criteria necessary obtaining appropriate set slices examining cohesiveness module 
definition sets slices considered 
definition 
sl outputs set slices obtained criterion variable defined holds parameter variable retains assigned value module completed execution 
ii 
main program module data object passed module operating system standard output file 
definition sl outputs assumption purpose module compute outputs 
slice output variable consist statements contained processing elements involved computation output 
slices obtained module outputs union completely encompass module contains unused dead code 
union slices encompass processing elements module 

statement inclusion criteria factor consider types statements include slice 
weiser slices include addition executable statements declaration statements ends compound statements 
desirable slices debugging obtaining executable slices 
eliminating statements simplify problem slices identify cohesiveness 
type definition declaration statements apparent effect processing element relationships 
begins ends constitute separate statements serve grouping symbols statements contained compound statement 
inclusion statements significantly increase size slice intersection real overlap exists slices 
consider definition 
definition 
variable referent executable statements vres include executable statements variable 
vres defined emerson cohesion metric statements 
concerned slices identify processing elements module vres remainder 
contains profile module vres slices 
line sumn prodn statement procedure integer var sumn integer var prodn integer var integer sumn prodn sumn sumn prodn prodn 
slice profile 
vres included slices 

slice patterns processing element relationship section examine examples slice profiles show indicate relationships processing elements module 
example module exhibits low cohesion consists distinct processing elements correspond module outputs sumn prodn 
relationship elements 
slices output variables partition module disjoint subsets set module vres statements shown 
case clear partition imposed slices isolated processing elements 
control data relationships processing elements 
lack processing element relationship reflected non intersecting slices profile module 
line sumn prodn statement procedure integer var sumn integer var integer var prodn integer var integer sumn sumn sumn prodn prodn prodn 
slice profile 
contains variation module 
computation outputs enclosed loop structure 
common control structure binding force gained processing elements version module 
relationship processing elements module exhibits control cohesion 
reflected slice profile determining intersection slices results statement line 
statement removed slice resulting set slices partitions module unrelated processing elements 
line sumn prodn statement procedure integer var sumn integer var integer var prodn integer var integer sumn prodn sumn sumn prodn prodn 
slice profile 
slice profile procedure shown 
module consists processing elements computing output variables sumx 
module computes values array array values processing elements computing sumx 
implies data dependency processing elements element computing array 
relationship elements computing sumx 
module falls data cohesion category 
data dependency indicated slice profile intersection slices statements 
intersection contains data definitions statements required processing elements computing sumx 
separation elements computing sumx indicated profile disjoint subsets slices statements 
note module exhibits output sided communicational data flow 
common input array compute outputs sumx 
pfg shown identical pfg correspond processing elements computing variables sumx respectively 
modules exhibiting communicational data flow classified having data cohesion 
line sumx statement procedure integer var var sumx integer var integer var integer sumx sumx sumx 
slice profile 
profile module shown 
module consists processing elements computing positions largest max second largest elements array processing elements highly interrelated due strong dependency value max 
dependency sequential nature assignments max determined 
places high cohesion level 
high processing element relationship indicated profile amount overlap slices 
particular slice max entirely contained slice 
line max statement procedure integer var max integer var integer var integer max max max max max 
slice profile 

observations previous section relationship slice patterns processing element relationships summarized 
observation 
partition module induced slice output variable consists union statements processing elements module affect final value computed sliced variable 
observation 
intersection slices subset module processing elements 
observation 
slice intersections indicate processing element relationships 
intersection slices contains primarily control statements definitions control variables processing elements tend exhibit control cohesion 
intersection slices contains non control variable data definitions processing elements tend exhibit data cohesion 
serves example observation 
case slices clearly partition module distinct processing elements 
example third observation slice intersection contains control statement 
third observation seen module slice intersection contains data definitions array 
intersection common slices sumx indicating data dependency processing elements sumx element computing second observation seen slice completely contained intersection slices 
slice processing element computes attempted show relationship exists slice profile module cohesion module 
slice profiles automatically generated easily see tool detecting modules inappropriately low cohesion levels 
useful implementation system system maintenance 
slice profiles examined basis cohesion metrics 
hoped able quantitative metrics cohesion measuring properties slice profiles 

boehm brown macleod merritt characteristics software quality trw north holland publishing 

card church agresti empirical study software design practices ieee trans 
software eng 
se february 

constantine yourdon structured design englewood cliffs prentice hall new jersey 

conte shen software engineering metrics models benjamin cummings publishing 

curtis sheppard third time charm stronger replication ability software complexity metrics predict programmer performance proceedings th international conference software engineering munich germany 

curtis measurement experimentation software engineering proceedings ieee september 

emerson discriminant metric module cohesion proceedings th international conference software engineering chicago il 

software metrics publishers 

slice program metrics master thesis michigan technological university 

myers composite structured design van nostrand 

page jones practical guide structured systems design new york ny yourdon press 

investigation sliced cohesion metrics master thesis michigan technological university 

weiser program slicing proceedings th international conference software engineering san diego ca 

weiser programmers slices debugging comm 
acm july 

weiser program slicing ieee trans 
software eng 
se july 
