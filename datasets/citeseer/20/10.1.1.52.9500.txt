survey stream processing stephens computer systems research group department electronic electrical engineering university surrey guildford surrey 
gu xh 
email stephens ee surrey ac uk october stream processing term widely literature describe variety systems 
overview historical development stream processing detailed discussion different languages techniques programming streams literature 
includes analysis dataflow specialized functional logic programming streams reactive systems signal processing systems streams design verification hardware 
aim survey analysis development specialized topics determine general theory stream processing emerged 
discuss classify different classes stream processing systems literature perspective programming primitives implementation techniques computability issues including comparison semantic models formalize stream computation 
appear acta informatica 
report revised version reports csrg csrg 
contents contents theory stream processing overview brief history stream processing dataflow origins dataflow networks dataflow computation semantics uptake dataflow synchronous dataflow specialized functional logic programming overview functional approaches stream processing logic programming languages streams reactive systems signal processing networks streams signals sensors strong synchrony hypothesis time stream processing design verification hardware stream processing formalisms alpha stream machines stream processing primitives constructs common functional stream processing operations stream processing primitives logic programming stream processing languages running example rs flip flop formalization flip flop st implementation flip flop sps lucid lustre dataflow languages contents ii signal esterel pl daisy prolog streams stream astral computer science term stream processing generically refer study number disparate systems 
example dataflow systems reactive systems synchronous concurrent algorithms signal processing systems certain classes real time systems examples stream processing research 
conceptual level mathematical analysis systems usually study particular type stream processing system sps study system comprised collection modules compute parallel communicate data channels 
particular typical sps modules usually divided classes sources pass data systems filters called agents perform atomic computation sinks pass data system 
spss visualized directed graphs example source sink spss filters shown 
spss take name communication performed channels pass information modules infinite sequences data referred streams 
stream essentially infinite list elements taken data set interest usually formalized mathematically function represents discrete time 
typical spss stream processing research particular study spss traced back far form immediately recognizable today 
stream processing particularly active area research visualization systems spss appropriate formalize types computational models arise quite naturally computer science including artificial neural networks coupled map lattice dynamical systems cellular automata operating systems types safety critical systems 
stream computation appropriate formalize hardware levels abstraction including conceptual level register transfer level 
theory stream processing despite usefulness stream computation conceptual tool opinion preoccupation stream processing spss perspectives hindered development clear concise mathematically neutral theory systems compute streams 
believe observation supported large variety different implementation techniques semantic models literature model spss advantages techniques justified qualitative quantitative arguments 
believe fair observe exceptions stream processing systems convenient tool research concerned issues development general theory stream processing encompassing topics analysis computability stream processing primitives stream computation study languages logics needed specify reason systems compute streams theory verification different classes stream processing systems 
example dataflow considered canonical example stream processing research dataflow predominately concerned development parallel processing techniques 
particular highlighted fact dataflow considered specialized implementation method functional programming separate area research 
example broy carefully developed extensive theory parallel distributed asynchronous spss functional techniques see section 
definition specialized provide general theory stream processing sense defined see 
overview clarify issues believe important development general theory stream processing survey literature 
aim highlight important theoretical practical considerations discussions analysis stream transformers sts spss considered special case 
specifically st system takes streams input produces streams output characterized functional phi contrast sps system composed collection separate communicating processes receive stream data input produce stream data output 
sps viewed parallel implementation st specification stream processing defined study sts spss 
summary 
section brief historical perspective development stream processing early day 
sections historical overview devoted detailed analysis different approaches visualizing representing spss dataflow section specialized functional logic programming section reactive systems signal processing brief history stream processing section stream processing design hardware section 
case discuss basic motivations ideas underlying paradigm 
convenience order clarify certain issues relating computability theory language design deferred topic stream processing primitives languages arising research sections 
literature survey concluded section briefly mention topics related stream processing 
section concluding remarks 
colleagues comments suggestions preparation survey thompson connell poole swansea steggles newcastle 
addition anonymous referees comments improved presentation 
particular johnson indiana detailed constructive comments 
brief history stream processing section brief historical perspective development stream processing decades 
note mention known research research believe representative particular topic stream processing provides useful starting point reading reader may wish undertake 
topics covered overview analysed depth sections 
computer science term stream attributed landin see formulated development operational constructs part correspondence algol calculus see 
note landin original streams model histories loop variables observed streams model algol 
type spss identified literature dataflow systems certainly existed name dataflow early late see example 
term dataflow originates term data flow analysis see evaluate potential concurrency computations 
dataflow language probably famous lucid see conceived 
lucid part language pop see allowed limited streams 
relevant dataflow 
kahn published known see outlining simple parallel programming language designed representing spss fixed point semantics 
fixed point semantics spss style kahn common reason spss referred kahn networks 
brief history stream processing burge see discussed streams method structured programming introduced set functional stream primitives purpose 
henderson morris see friedman wise see published lazy evaluation techniques useful computing infinite data types streams example 
research project applicative programming streams examining issue concurrency stream programming 
continued presents file system text editor explores streams programming problems approximations real arithmetic sieve eratosthenes composites 
kahn contribution field joint macqueen see introduced language designed model distributed process interaction ideas 
dataflow continued area widespread research additional semantic models dataflow introduced example 
logic programming languages began model spss 
modification prolog model termed perpetual processes see logic programming introduced 
functional programming languages widely model spss 
notable area broy functional languages study stream distributed processing see example 
subject synchronous concurrent algorithms released 
conceived thompson tucker see stimulation stream processing 
year saw publication harel see subject reactive systems 
reactive systems signal processing networks synchronous dataflow networks considered special cases reactive systems stimulation large body stream processing research see example 
streams sts extensively hardware description example 
note sheeran ruby discussed includes generalization representation streams function space integers avoid dealing initial conditions hardware specifications 
incorporation streams foundational mathematics section 
surveys stream processing hardware design 
part friedman wise large body research concerned applicative stream processing design synthesis hardware language daisy 
dataflow semantic models dataflow developed example concerned flowchart schemes see applications study dataflow schemes 
useful overview concept dataflow extensive bibliography 
developments ruby continued including formalizations ruby algebra see example 
continue intensive area research see section research reactive systems see example 
produced body concerned theoretical foundations stream processing 
tucker zucker see released series generalizations computability theoretic results natural numbers algebras streams 
continued 
addition presents theoretical study compositional properties sts cartesian form 
theoretical meinke applications specification verification parameterization sts see meinke steggles hearn see respectively 
broy continues functional study distributed processing streams see example particular 
dataflow dataflow networks type spss appear literature detailed survey examination research aims dataflow analysis semantic models implementation techniques developed 
detailed concept dataflow 
aid discussion stream processing research literature concerned spss sequel useful able identify different types spss concisely 
classify spss main characteristics synchronous asynchronous filters filters compute synchronized manner respect filters example section filters compute synchronization respect filters 
deterministic non deterministic filters filters compute function 
uni directional bi directional channels 
notice definitions classifying features reflect behaviour individual filters sps part 
perspective classification synchrony asynchrony independent determinism nondeterminism perspective network behaviour may case 
dataflow shorthand notation denote spss designed model networks specific combinations properties sps fs ag ffi fd ng ae fu bg 
example classification synchronous deterministic sps unidirectional channels denoted sps asynchronous non deterministic sps bidirectional channels denoted anb sps 
origins mentioned dataflow research began far back continues area widespread research 
continuing aims dataflow approach avoid called von neumann bottleneck see exploit parallelism offered vlsi technology 
part research experiments specialized architectures undertaken interested reader consult bibliography list 
note passing point observed link von neumann sequential computing methods historically inaccurate early advocates parallel computing methodologies 
phrase dataflow literature 
dataflow networks classical dataflow network adu sps dataflow computation studied dataflow computation spss interest 
filters dataflow network referred coroutines see agents compute streams see data type usually restricted int bool real lists types 
dataflow computation semantics operational perspective dataflow model computation typically divided basic forms data driven eager evaluation filters compute depending availability data inputs demand driven lazy evaluation filters request data input lines wish compute 
argued informal implementation ideas embody semantics suitable dataflow computers 
contrast suggests operational semantic models dataflow piped eager tagged eager piped lazy tagged lazy graphical language called flat operator nets 
furthermore shows model possible determine operational semantics dataflow network equivalent intended denotational semantics 
kahn 
common approach denotational model dataflow domain theoretic semantics influential kahn see introduced simple parallel language representing adu spss algol style 
generality method kahn introduced provide semantics language means techniques provide language independent semantic model spss adu spss see section 
kahn interest language motivated development user friendly programming methodology describing adu spss kahn interested dataflow prove formally properties programmes written language 
particular properties relating networks described including termination non termination properties output 
kahn observed possible infinite sequences data data type passing arcs referred histories connect modules sps formalized mathematically set see section 
associating usual partial ordering observed complete partial order 
possible view sps input arcs output arcs computing functional 
assumption module computes continuous function unreasonable assumption functional continuous possible apply recursion theorem see example derive semantics specifically kahn observed fixed point functional required semantics network kahn showed method step formalizing semantics spss formalizing semantics language introduced describing networks typed language describing spss straightforward 
line kahn motivations observed adopting fixed point semantic approach scott induction rule kahn cited techniques proving properties recursive programs available programmer including structural induction recursion induction 
dataflow semantical models 
despite generality kahn method appropriate general classes dataflow network see 
example non deterministic models dataflow computation 
furthermore straightforward extensions kahn semantic model cope non determinism fail compositional see 
consequently reasons semantic models formulated dataflow 
example include 
despite semantic models dataflow widely adopted 
addition equivalence certain operational denotational semantic models dataflow addressed see example formal relationship different approaches dataflow poorly addressed literature correspondence model computation provided dataflow formal models computation 
example interesting despite fact dataflow approach senses closely related ccs see far aware dataflow formalized developed formalism 
suggested due value passing nature dataflow networks ccs handle concisely modelling dataflow creates overhead mathematical formulation ccs worthwhile 
uptake dataflow despite extensive body dataflow research dataflow approach appears little impact traditional approach von neumann computing 
specialized functional logic programming known dataflow language lucid see section described language looking application 
reasons poor uptake dataflow approach may stem different areas practical side implementation dataflow approach conventional architecture leads inefficiencies including large wasteful memory usage required development specialized architectures theoretical side mentioned lack generally accepted clear straightforward semantics 
synchronous dataflow asynchronous nature dataflow lead problems non determinism associated anomalous behaviour see cyclic networks suffer deadlock see 
synchronous dataflow developed avoid problems 
filter synchronous dataflow network clock global clock name suggest interplay clocks restricted ensures synchronous deterministic behaviour 
discuss synchronous dataflow fully section examine language lustre describe synchronous dataflow networks 
specialized functional logic programming theoretical approaches incorporate streams functional logic programming languages cases closely related essentially domain theoretic approach 
reason grouped areas research separate section literature survey 
detailed discussion domain theoretic relationship functional logic programming languages 
overview section examine functional approach stream processing particular broy 
section look logic programming streams detail modification prolog stream processing 
functional approaches stream processing function abstraction operator abstraction provides mechanism representation sts functional languages second order higher order forms 
dataflow languages functional languages researchers regard dataflow particular implementation technique functional paradigm see bibliography list subject 
particular functional programming sts referred data passing form higher order sts third order referred agent passing form 
dataflow languages functional languages closely related sense functional programming language considered suitable general purpose stream programming 
example known functional languages lisp ml miranda see represent sts 
languages provide natural specialized functional logic programming straightforward mechanism specification sts clear reason specialized stream orientated functional languages developed including see hope see ruth see designed meet specific needs real time programming streams 
functional spss semantics 
typically adu sps anu sps studied functional paradigm dataflow languages kahn widely adopted semantic approach functional stream processing 
related approaches including greatest fixed points see aczel logical theory constructions see 
addition lazy evaluation provided implementation technique functional stream processing widely adopted 
applications 
verification functionally specified sts explored literature 
particular operating systems area quite extensive research see overview swapping processes modelled agent passing stream transformers 
example operating system specification addition provides example anu sps specified classes functions 
detailed example functional stream processing research discuss broy significant contribution development techniques functionally stream processing 
particular discuss focus project provides functional framework specification distributed systems stream communication 
focus project 
focus see developed 
focus language collection tools modelling concepts provide framework description parallel distributed systems concurrent asynchronous processing elements 
networks data exchanged unbounded fifo channels modelled streams 
focus aims provide theory stepwise refinement modular development parallel systems includes verification calculi intended provide formal system reason correctness system implementations various level abstraction 
intention focus provide theory stream distributed processing see 
despite fact focus paradigm language provide concrete representations expressing sts sps 
sense specification language ampl see second language pl 
discuss languages pl sections respectively 
specification st focus paradigm provides transformational rules refinements concrete representations sense specification 
focus representation considered concrete form implementation refinements re writings formalism representation possible 
definition implementation language focus consider pl imagine techniques extended additional languages 
specialized functional logic programming logic programming languages streams logic programming provides high level useful method specification classes systems natural researchers explored logic programming languages specification spss 
examples modifications relational languages stream processing literature 
languages divided groups committed choice parallel programming systems example parlog see 
extension prolog include parallel parallel operators see example 
extension prolog include functional constructs example 
different classification logical languages programming streams divided groups languages static input output mode variable declarations example languages 
languages dynamic variable annotations example 
aware literature describes relationship classifications possible general comments methods incorporate streams logic programming 
describing spss relations 
term coroutine relational languages directly imply streams see 
typically logic programming languages modified stream programming designed represent adu spss particular description anu spss course depend stream processing operations types concurrency allowed particular language 
streams 
functional approach streams treated union finite infinite sequences 
particular streams typically implemented finite lists declaration manipulation infinite lists streams may permitted 
infinite lists relational languages may non terminating tend eager evaluation 
specialized logic programming languages extended non strict processes lazy evaluation cope stream programming termed perpetual processes see similarities functional languages 
survey relationship logical functional languages 
alternatively relational languages modified cope streams eliminating occurs check lead unsound inferences see 
semantics 
semantic approaches adopted dealing perpetual processes including fixed point semantics style kahn 
discussion comparison approaches 
reactive systems signal processing networks languages 
addition specialized logic programming languages mentioned section look detail modification prolog cope streams 
reactive systems signal processing networks reactive system paradigm see signal processing paradigm conceptually closely related 
essential difference approaches reactive system research concerned sdb spss signal processing concerned spss reactive systems channels bidirectional 
consequently point term reactive systems mean reactive systems signal processing networks 
reactive systems designed model real time systems operating systems process control programs repeatedly respond inputs environment producing outputs 
stream communication provides natural method specification real time systems 
real time system specification limited technique reason general real time system theory related stream processing specialized real time system research explored reactive system theory 
section discuss reactive systems separate topic 
streams signals sensors reactive systems signal processing systems communicate signals related concept streams 
signals divided types pure signals un typed simply communicate event synchronization typed signals communicate data 
reactive system paradigm signals may input output note typed signals input referred sensors 
informal definition signals signal processing networks sensors 
comparison typed signals streams section 
strong synchrony hypothesis time reactive system paradigm referred strong perfect synchrony hypothesis see requires filters network react instantly input producing corresponding output zero time 
consequence computation performed reactive system instantaneous 
addition reactive systems referred notion time see signals streams may time unit 
operation sub tasks processes defines new temporal relations define global ordering data compare 
semantics 
semantics reactive systems formalized temporal logic see 
addition includes comparison different semantic approaches general concurrent systems approaches applied reactive systems 
languages 
sections describe languages pro stream processing design verification hardware gramming reactive systems respectively lustre signal esterel contrast different approaches take 
stream processing design verification hardware levels abstractions hardware description role clocks important 
called state transformer formalization hardware see relies clock provide discrete measure evolution device values example registers memory initial values values time referred evolution device state 
state transformer model hardware naturally viewed special case stream transformer model hardware streams common hardware specification hardware verification literature 
stream processing techniques languages discussed survey study hardware 
remaining literature subject hardware specification verification lies outside scope streams incidental main thrust research 
interested reader may consult 
section discuss topic synchronous concurrent algorithms stream computational model extensively study hardware technical reasons contrasts approaches subject 
concept synchronous concurrent algorithm sca developed thompson tucker early see motivated originally need algebraic formalism specification verification general purpose hardware see case studies 
appropriate study specialized hardware devices specialized models computation including systolic arrays see neural networks see cellular automata coupled map lattice dynamical systems see 
general introductions topics systolic architectures neural networks cellular automata coupled map lattice dynamical systems see respectively 
informally sca visualized particular class dataflow sps sca fixed synchronous deterministic dataflow network modules compute communicate parallel channels synchronized discrete global clock modules receive produce data deterministically sca computes total function 
contrast stream processing formalisms discussed allow specification partial functions 
streams 
sca theory streams represented function space interest 
contrast approaches discussed functionality sca modelled cartesian form stream transformer stream processing formalisms form theta classical apparently unimportant difference specification technique essentially un curried form cartesian form specification subtle implications 
specifically perspective computability reconciliation techniques means straightforward see perspective automated verification cartesian forms significant advantages permits essentially order techniques establish correctness stream transformers see 
semantics 
denotational semantics provided value functions special case primitive recursive functions see 
rich theory founded generalized computability theory equational specification term re writing see example addresses theoretical issues neglected stream processing literature 
sca computational model generalized formalized ways graph theoretical models see process theoretic models see operational semantic models see infinite see 
languages 
formally equivalent languages developed specifying simulating reasoning pr see see see concurrent assignment statement see astral preq see 
language astral discussed section 
stream processing formalisms alpha language alpha see specifically stream processing language mention alpha described authors lucid design synthesis systolic vlsi see 
particular alpha equational language involves generalization stream variables represent spatial domain possibly infinite matrix indexed sub set example variable declared domain defined represents matrix methodology variable declared domain defined fi essentially stream compute spatial domains alpha uses generalization point wise extensions called motionless operators semantics formalized denotationally style kahn 
stream processing primitives constructs stream machines stream machines see machine model computation generalization turing machine see allow streams input output 
stream machines study system testing verification authors claim offer significant advantages 
stream processing primitives constructs section order clarify basic issues relating computability analyse detail stream processing primitives constructs literature 
section look specific languages specify particular classes stream processing systems discussed sections 
common functional stream processing operations section describe informally typical functional stream processing primitives literature defined generalized concept stream 
note passing primitives formalisms different name 
formalization description 
sequel denote data type algebra sort names taken set fn bg assume includes carriers natural numbers denoted represent discrete time booleans typical carrier denoted denote cartesian product theta theta delta delta delta sn example denote stream algebra sort names taken set fs sg convention stream 
section assume continuous algebra appropriate partial ordering carrier 
denote set finite infinite sequences generalized streams 
denotes empty sequence 
continuous mapping denoted functional stream processing primitives 
stream construction operator 
define stream construction operator denoted functionality infix notation jaj jnj jsj gamma jaj jnj stream processing primitives constructs concatenation 
define concatenation operator denoted ffl functionality ffl infix notation 
ffl ffl ffl element selection 
define head operator denoted hd functionality hd hd 
hd element elimination 
define tail operator denoted tl rest functionality tl tl 
tl element selection 
define operator denoted functionality 
jsj jnj 
tail 
filtering 
define filter operator denoted fl functionality fl infix notation fl 
fl fls fls 
stream processing primitives constructs pointwise change 
define pointwise change operator denoted 
functionality 
infix notation 

common functional stream processing higher order primitives act directly sts 

define operation denoted functionality 
infix notation 
define operation ambiguously denoted functionality 

infix notation stream processing primitives logic programming section identify generic stream processing primitives logic programming literature 
conclude section concrete examples types stream processing primitives list 
generic relational stream processing primitives 
stream processing primitives logic programming languages referred transducers see divided groups 
pointed list transducer types exhaustive indication case 
generators 
produce stream derived initial values 
generic enumerator definition follows enumerate stream initial state state enumerate state stream 
enumerate xs state value ns enumerate ns xs 
enumerate 
stream processing primitives constructs maps 
maps produce output stream applying function input stream 
generic map definition follows map xs ys map xs ys 
map 
filters 
filters produce part input stream output elements selected defined criteria 
generic filter definition follows filter xs ys inadmissible filter xs ys 
filter xs ys filter xs ys 
filter 
accumulators 
accumulators produce aggregate input values output 
generic enumerator definition follows accumulate stream value initial state state accumulate list state value 
accumulate xs value state ns accumulate xs ns value 
accumulate value final state value value 
notice accumulators strictly order primitives 
examples relational stream processing primitives 
list examples second order stream processing primitives functional form informally list 
constant define constr 
constr stream processing primitives constructs constant define 
gamma binary operator oe theta define agg oe agg oe oe agg oe gamma 
unary operator oe define map oe map oe oe binary relation ae theta define com ae theta com ae tt ae ff 
define rep rep div define lag lag gamma 
define merge theta merge 
stream processing languages stream processing languages promised examine examples stream processing languages designed represent particular classes spss identified literature 
section section discuss languages lucid lustre designed programme asynchronous synchronous dataflow spss respectively 
section briefly discuss called manchester languages mention dataflow languages literature 
section section discuss related languages signal esterel programming signal processing networks reactive systems respectively 
sections discuss functional languages pl daisy respectively 
section examine modification prolog designed stream programming 
section look language stream design verification hardware 
section describe language astral developed sca theory 
section discussion rs flip flop running example presenting comparing syntax stream processing languages discuss 
note choose running example combined formal analysis language constructs specific examples tailored demonstrate features language believe objective keeping aim survey discussed 
reader interested examples motivated specific features example languages directed cited appropriate section 
running example rs flip flop rs flip flop simply flip flop widely occurring device computer hardware 
flip flop designed output stream true tt false ff signals controlled input streams true false control signals 
valid control signals consist simultaneous input pairs ffl reset tt ff 
indicates flip flop output ff 
ffl set ff tt 
indicates flip flop output tt 
ffl hold ff ff 
indicates flip flop repeat previous output 
pair tt tt considered illegal input practical implementation flip flop able cope input 
formalization flip flop st informal description flip flop operation precise defining flip flop st follows flip flop stream processing languages defined flip flop tt flip flop ff tt ff tt ff tt flip flop 
particular notice specification outputs previous output illegal control signal tt tt supplied input 
implementation flip flop sps typical implementation flip flop visualized conceptual level comprising input streams modules output streams modules compute function 
reconcile implementation functionality specification stream considered proper output module output stream feedback compute flip flop output 
flip flop sps computation 
sps representing flip flop shown 
initially modules sps representing flip flop output rs flip flop sps initial values convenience assume pair tt ff 
flip flop initial output module computes synchronously streams control signals previous output module produce output 
properties flip flop 
note description flip flop highly conceptualized model idealized hardware flip flop sps requires pre stream processing languages post processing input output respectively meet specification 
pointed real discrete models flip flop implementations developed valued logic see example 
stems fact associating tt ff low high signal values leads false correspondence boolean logic voltage values 
example demonstrate certain basic important language features find convenient 
particular model flip flop enables show mutual recursion expressed vector valued components specified language deals explicit synchronization 
interested reader find studies flip flop various levels abstraction 
lucid lucid best known dataflow languages developed 
lucid programme essentially system recursion equations lucid described authors functional dataflow programming language 
term dataflow chosen lucid programme semantically equivalent dataflow network functional output filter function inputs 
note term functional imply computation side effects mathematical sense 
lucid described authors typeless language declaration section 
formal description say lucid operators overloaded type inferred context 
lucid conceived authors claim quite modest aims show real life programmes written purely declarative style programme verification possible 
authors felt purely functional language purpose reason efficiency lucid contains iterative constructs authors claim writing lucid programmes programmer may algorithms real everyday programming 

intended lucid exploit new highly parallel multiprocessor dataflow machines 
constructs primitives 
lucid programme expression structured clause taken iswim see simple data types example integers reals booleans words character strings finite lists 
lucid uses construct 
lucid usual operators data types just mentioned treats pointwise extensions time manipulate streams directly 
addition lucid uses explicit stream processing primitives semantics 

define irst irst stream processing languages 
define followed 
define fby theta fby gamma 
time 
define theta 
define theta tt 
soon 
define asa theta asa theta tt stream processing languages 
define theta defined defined tt tt 
streams 
languages discuss streams represented variables 
particular case lucid free variables explicitly declared treated input streams 
language development current uses 
conception various implementations lucid written see implementation lucid algebra pop taken experimentally software design see 
glu granular lucid appeared 
lucid syntax 
rs flip flop described lucid follows flipflop true fby false fby lustre lustre see synchronous dataflow language related lucid 
lucid description sps system equations 
lucid lustre requires output time functions defined set equations depends input received time property referred authors lustre causality 
note passing intuitively causality appears restrict lustre expressing stream processing languages class course values recursive functions see 
authors discuss issue computability respect 
common languages describing reactive systems lustre strong synchrony hypothesis notion time see section 
furthermore common language esterel see section lustre programs implemented compilation finite automata 
authors state lustre programs subject strict analysis deadlock domain theoretic analysis various clocks defined operator cycle sum test applied lucid programmes see 
authors concede approach detect potential deadlock rejects valid programmes 
strict approach interplay various clocks various filters compute programme ensures synchronous nature lustre 
primitives constructs 
common lucid underlying operations treated point wise extensions time lustre directly applied streams 
lustre program correct respect various static semantic tests applied compiled simplified basic syntax 
compilation restricted syntax eliminates separate node filter definitions employ modular programming technique 
particular stream operators compiled restricted subset stream operators form functionally complete set 
functionally complete set consists operations define informally 
algebra fs 
sn collection distinct values 
previous 
define pre pre gamma juj 
followed 
define fby theta fby 
notice different lucid operator fby 

define theta stream processing languages theta tt current 
define current theta current tt current gamma ff 
streams 
common equational stream processing languages undefined variables treated input streams lustre programmes 
notion stream lustre standard dataflow reactive system paradigm 
reason choose classify lustre dataflow language 
semantics 
separate approaches semantics lustre applied 
domain theoretic approach style kahn 
second approach operational semantics plotkin see 
operational semantics proofs equivalence different lustre programs semantic model analyse properties compilation lustre programmes finite automata 
language development current uses 
lustre diverse applications music synthesis description see verification real time systems see 
syntax 
rs flip flop expressed lustre follows node flipflop bool returns bool tt fby pre pre ff fby pre pre tel stream processing languages dataflow languages manchester languages 
called manchester languages see including sisal lapse mad manchester dataflow machine 
section briefly discuss languages 
reader interested topic specialized dataflow architecture consult 

language see functional language 
derives name fact single assignment functions argument permitted 
multiple argument functions achieved currying 
sisal 
language sisal see typed value orientated functional language designed dataflow computing machines 
name sisal derived streams iteration single assignment language 
sisal allows recursive constructs looping 
addition implemented manchester machine sisal implemented vax cray hp dataflow machines see 
valid 
language valid see higher order functional language designed achieve high level parallelism 
valid derives name value identification language mix algol lisp syntax including block structuring case statements 

language pronounced see high level dataflow language designed define operational semantics dataflow computing languages 
particular designed enable users express programmes forms concurrency high level abstraction machine dependent characteristics 
general dataflow languages 
val 
language val see synchronous functional language implicit concurrency 
name val derived languages value orientated variable orientation nature new values derived modified 
principle language values assigned identifiers identifiers variables order address certain issues arising automatic generation concurrent implementations 
id language id see un typed functional block structured language supports non determinism streams 
programme id consists list expressions expression loop conditional block procedure application 
signal signal see applicative language designed programme real time systems synchronous dataflow 
authors claim signal representation close specification system mathematical graphical leads elegant formal stream processing languages synchronization calculus 
signal uses concepts time logical time associated timing calculus strong synchrony hypothesis see section physical time 
system temporal determined entirely sequence communication events authors claim input events lustre dataflow approach 
individual processing elements spss described signal synchronized single global clock signal notion time see section 
streams 
name signal derived infinite sequences called signals processes signal system compute see section 
signal map data set clock 
notice clock starts 
appear description signals streams 
individual values signal may sampled continuous points simply discrete division indicated signal clock 
addition values persistent may sampled order value signal sampled time may henceforth sampled time 
see section operators 
notice interpretation signal related kahn visualization streams asynchronous fifo queues see section 
constructs primitives 
signal operators divided classes define signals operators create interconnections processes 
consider signal definition operators 
basic operations 
syntax signals data set constant signal creates process semantics creates process takes single signal input produces single signal output time cycle precisely value plus 
notice nature process specified clocks synchronized considered 
property signal processes general 
delays 
syntax init signals data set constant signal creates process semantics gamma stream processing languages statement creates process single input delays output time cycle outputs constant time 
notice delay defined separate processes statements statement omitted examples signal described process undefined time 
inconsistency examined signal underlying clocks init statement define values streams time 
composition 
syntax ja init cja jb denotes process formed composition processes init specified previous examples 
ordering sub processes composition unimportant associative commutative communication implied processes output signal process identifier left name input signal identifier right different process 
example intended semantics gamma operators 
signal uses operators event synchro syntax event synchro respectively 
semantics statements formalized clock calculus discuss give intuitive meanings statements called undersampling operator context example produces input signal defined time boolean signal defined true event delivers true boolean signal context example signal defined synchro context example explicitly synchronizes signal bs clocks 
lack global clock definition signal examining current value particular signal possible results may undefined value data set definition signals authors clock calculus give check semantics signal definitions 
boolean signals define clocks event operator clock calculus requires data sets reason authors claim boolean calculus insufficient gamma boolean signals denotes absence value gamma denotes false denotes true stream processing languages signals denotes absence value presence value 
calculus data set structure commutative field signal processes mapped 
mapping process analyse relationship sub modules clocks detect incorrectly defined processes 
example compositional process jx jy jz yj gives rise equations clock calculus represent boolean expression gammac gamma gamma gives gammac single solution process defined composition undefined 
intuitively clear example clocks defined mutually exclusive 
semantics 
signals semantics clock calculus described discuss 
syntax 
rs flip flop expressed follows signal init tt init ff esterel esterel see real time imperative concurrent language describing reactive systems 
esterel designed describing adb spss adu spss case languages lustre signal 
see section streams esterel 
authors state aim esterel develop rigorous formal model realtime computation operational semantics tasks programming conventional languages difficult 
constructs primitives 
basic structuring device esterel programme module input output signals broadcast communication internal signals internal broadcast communication 
body module describes operation include basic primitives constructs stream processing languages null process 
command creates process zero time 
local variable declaration 
command var type creates local variable process 
variable assignment 
command exp assigns variable value expression exp 
signal transmission 
command emit exp emits value exp signal 
conditional execution 
command upto exp repeatedly execute process value exp broadcast signal exp repeatedly execute process value exp broadcast signal twice 
sequential composition 
command invokes process immediately completion process 
parallel composition 
command jji stream processing languages simultaneously invokes processes sharing local variables local signals 
iteration 
command loop executes process continuous loop 
processes loop loop emit semantics due strong synchrony hypothesis checked static semantic evaluation 

command fi usual semantics strong synchrony hypothesis assume evaluated zero time control passed immediately 
process termination 
command tag exit executes process exit executed process terminated 
basic primitives higher level construct formed 
just convenience programming occur semantic model 
streams 
esterel uses notion stream processing signal signals notion time 
signal esterel signals input output processes information broadcast sense complete connectivity assumed processes 
commutative operator explicitly associated signal deal simultaneous transmission see values broadcast simultaneously signal value delta delta delta semantics 
esterel complicated semantic model different levels static semantics 
establish temporal relations processes check temporal paradoxes 
stream processing languages behavioural semantics 
define temporal behaviour respect static semantics 
computational semantics 
establish exactly program computes 
computational semantics established concurrency eliminated compiling sequential programme implemented automaton example similar method parser generators see example 
authors confident technique leads efficient implementation 
language development current uses 
esterel hci programming communication protocols real time controllers see respectively 
esterel environment exists see includes simulators debugging tools compiler hardware techniques discussed 
current research aim implement existing esterel programmes directly hardware 
syntax 
rs flip flop described esterel follows var bool flipflop module flipflop input bool output bool true false emit emit loop emit emit 
typed equational language provides specification formalism potentially recursive stream operations 
implicit concurrency expressed juxtaposition equational definitions programme agent definitions 
constructs primitives 
uses block structure includes constructs fi 
includes finite choice operator able define non deterministic behaviour 
basic stream processing primitives described section built operators 
addition functions mapping data data components mapping data streams data streams data defined user 
stream processing languages streams 
declaration input output streams explicit streams may occur left hand side equation 
particular output streams occur exactly left hand side input streams may occur left hand side 
semantics 
restricted second order definitions fixed point semantics style kahn 
language development current uses 
see section focus project 
prototype implemented sun workstation see experiments implement intel hyper cube progress see 
syntax 
rs flip flop represented follows programme flipflop chan bool chan bool funct bool bool agent chan bool sb sb chan bool ft sb ft sb agent chan bool lbs rbs chan bool lbs lbs lbs agent chan bool lbs rbs chan bool rbs rbs rbs true flipflop rt flipflop rt rt false flipflop rt flipflop rt rt flipflop 
pl pl imperative parallel procedural language designed stream programming 
constructs primitives 
sense pl considered classical language containing assignment statements loops 
addition pl non terminating loop construct loop pool 
pl syntactically similar allows definition functions components see section stream processing functions described section basic operations 
streams 
stream programming languages variables represent input addition variables explicitly represent output 
contrast explicit operators pl reading writing values streams channels denoted respectively stream processing languages defined informally follows 
channel identifier variable appropriate type command interpreted informally remove value channel assign value variable empty execution command delayed possible infinitely 
similarly channel identifier expression appropriate type command interpreted informally evaluate write value channel 
evaluated may depend input evaluation command may delayed possible infinitely 
operations provides model asynchronous communication pointed confused operators csp see provide synchronous communication 
pl equations restricted channel identifiers may occur right hand side 
new channels may introduced dynamically pl recursion dynamic networks may modelled 
reason word channel related concept stream pl semantics 
pl operational state transformer semantics derived 
intended semantics related equivalent denotational semantics st pl related formally specification 
language development current 
pl see section focus project 
syntax 
rs flip flop represented pl follows programme flipflop chan bool chan bool var bool var bool true false var nat time loop time fi time time pool flip flop 
stream processing languages daisy daisy see example lazy higher order untyped language suspending constructor see extensively stream programming synthesis hardware 
particular daisy contains higher order mapping operators optimized stream filtering intermediate constructor orders lists convergence suspensions 
feature provides means express manage asynchronous concurrency 
constructs primitives 
daisy general purpose functional language possible define stream processing functions described section 
daisy specific primitives unidirectional device terminal screens keyboards pipes sockets virtual channels window managers un scanners un parsers iteratively coerce character streams symbol streams expressions 
streams 
daisy standard functional approach definition order streams 
semantics 
daisy functional language standard kahn style semantics 
additional formal calculus reasoning symbolically manipulating daisy programmes see example 
furthermore operational interpretation daisy programmes may differ standard functional programmes due suspending constructors 
language development current uses 
daisy currently third implementation stage see example 
current research concerned refinement algebra digital system derivation see example 
particular development formal laws manipulation daisy programmes hardware synthesis 
daisy syntax 
rs flip flop described daisy follows flipflop 
tt ff prolog streams describe modification prolog see convenience denote prolog provide applicative language specification class adu spss 
constructs primitives 
prolog network agents specified set horn clauses clause corresponds particular agent 
structure stream processing languages language essentially prolog stream processing primitives available functional approach see section 
streams 
approach streams prolog functional languages 
particular prolog uni directional channels modelled shared syntactically distinguished input output variables atomic clause expressive power prolog limited compared conventional prolog invertibility limited 
authors claim problem practice 
semantics 
prolog formalized standard fixed point semantics see explicit distinction data constructors functions see modify semantic model deal infinite terms 
language development current uses 
intended prolog viewed proper extension term re writing system horn clause interpreted extended re write rule 
authors intention completion algorithms knuth bendix see generalized generate confluent systems prolog network descriptions 
aware subsequent authors field 
syntax 
rs flip flop represented prolog follows type bool tt ff type stream bool nil cons bool stream bool stream bool theta stream bool stream bool stream bool theta stream bool stream bool bool theta stream bool bool bool bool cons sb cons sb cons cons tt cons sb cons sb sb sb cons sb cons sb cons cons ff cons sb cons sb sb sb ff cons sb tt cons sb ff tt ff ff tt stream processing languages stream stream see concurrent scheme language designed formally specifying reasoning transforming hardware designs conceptual register gate level 
furthermore stream intended address description features associated level single formalism 
approach single programming language includes formal high level machine code descriptions primitives referred hierarchical approach see 
stream acronym standard representation algorithms micro electronics 
name stream intended reflect stream processing nature language 
addition role hardware description language stream directly interpreted dataflow language resembling language 
formal equivalence stream dennis language addressed 
constructs primitives 
stream uses stream processing primitives referred agents 
append 
define append agent theta ambiguously denoted gamma 
lifting 
oe sigma define lifting agent 
ambiguously denoted oe oe distribution 
define distribution agent distr theta theta ambiguously denoted distr distr theta tt theta ff stream processing languages selection 
define selection agent selec theta ambiguously denoted selec selec tt 
addition stream uses functional constructs building spss primitive spss parallel composition 
define parallel composition constructor ambiguously denoted functionality theta 
ju jv juj juj juj ju 
sequential composition 
define sequential composition constructor ambiguously denoted functionality theta 
feedback 
define feedback constructor ambiguously denoted functionality 
notice defined recursively terms computable depend definition stream processing languages forking 
define fork constructor ambiguously denoted fork functionality fork theta fork permuting 
define permutation constructor ambiguously denoted perm functionality perm theta theta perm sinks 
define sink constructor ambiguously denoted sink functionality sink juj sink juj streams 
common functional approach stream programing stream adopts generalized concept stream union finite infinite sequences 
semantics 
denotational algebraic semantics derived stream see respectively 
denotational semantics demonstrate equivalence stream procedural language stream processing 
language development current uses 
aware development stream hardware design 
syntax 
signal uses syntactic styles reflect different requirements hardware description different levels abstraction applicative style functional style 
rs flip flop represented styles follows applicative 
agent rs flipflop ni tt ff tou stream processing languages functional 
agent rs flipflop perm id id id perm id ff tt fork fork id perm id astral astral algebraic stream language see related intended provide formal equational specification language sts ideas taken sca theory see section 
particular theory astral designed reconcile specification technique formal semantics see section 
desirable semantics shown correctness broad non trivial class astral programmes decidable relative equational logic augmented induction case analysis proof system 
theoretical ideas implementation astral developed addition hardware specification intended high level declarative general purpose programming language 
note implementation astral restricts user primitive recursive definitions maintain theoretical properties astral 
authors claim practical purposes restriction limitation 
implementation astral discussed 
constructs primitives 
implementation astral intended general purpose stream programming language language specific stream processing primitives 
contrast astral able specify primitive recursive equational forms stream processing primitives mentioned survey 
astral programme essentially collection types definition non sts order functions user defined data types abbreviations reduce size syntactic complexity programmes permitted 
discuss classes definitions 
astral syntax derived indirectly compilation language preq contrast examples possible survey indicate formal semantics astral constructs 
interested reader consult 
evaluated un evaluated definitions function definitions 
classes definitions basic structure function name var type var type type type stream processing languages definition body indicate evaluated definition 
evaluated definitions concrete mechanism primitive recursive specified 
insure primitive recursiveness function name definition body evaluated form 
sort names range definition stream sorts 
un evaluated definitions concrete mechanism form semantics composed 
function name function body 
sort names range definition stream sorts 
order function definitions syntax standard functional specification technique form function name may appear definition body controlled syntactically preserve primitive recursiveness 
far user concerned syntactic distinction un evaluated function definitions range type defined function 
basic types compound expressions body function definitions case statements statement statements statements simply restrict usual general purpose programming primitives primitive recursive form 
example primitive recursive form lucid primitive expressed astral follows true max nat abbreviation abbreviation see max nat pre defined maximum value vary implementation implementation 
pre defined user defined type definitions 
contrast formal algebraic specification languages necessary explicit definition underlying signature variables astral programme 
information derived implicitly individual st function definition 
particular standard constants operations associated pre defined data types available user need explicit inclusion bit byte bool char nat int 
addition data types user defined data type associated array type set type stream type stream array type stream set type data type extended undefined element available user explicit definition 
example bitarray bitstream bitarray bitstream available user 
technical reasons associated automated verification astral programmes real numbers supported built library pre defined type 
user defined data types come basic forms restrictions pre defined types compound types type unions 
language development current 
partial implementation prototype astral specification verification system discussed 
development full verification system ideas taken currently progress 
astral syntax 
describing astral constructs concisely section show flip flop specification full flip flop implementation specified astral including pre post processing see section 
doing note examples evaluated definitions example un evaluated definition defined composition 
true false true false true false true 
true false 
bool 

div div 
examined topic stream processing classified study stream transformers sts second order functionals stream processing systems spss implementations sts typically visualized directed graphs 
shown literature rich examples stream processing research different motivating interests semantic models implementation techniques 
despite breadth existing shown general literature concentrated examination practical properties spss theoretical properties sts 
believe literature underdeveloped certain theoretical perspectives 
motivations writing survey clarify point show general theory stream processing exists accessible form 
research begun address general theoretical considerations discuss streams problem perspective foundational mathematics study generalized computability stream computation studies compositional properties cartesian form stream transformers studies specification formal verification sts algebraically study specification verification higher order systems including sts 
abelson sussman 
structure analysis computer programs 
mit press 
abramsky editor 
reasoning concurrent systems 

ackerman 
data flow languages 
editor afips national computer conference volume pages 
aczel 
non founded sets 
lecture notes 
university chicago press 
adams 
computation model data flow sequencing 
phd thesis stanford university december 
adams 
model parallel computations 
hobbs editor parallel processor systems technologies applications pages 
spartan 
hasegawa ono 
valid high level functional language dataflow machines 
rev ecl 
charles 
music synthesis description data flow language lustre 
microprogramming 
arvind 
relationships interpreters dataflow language 
neuhold editor formal description programming concepts pages 
north holland 
arvind 
asynchronous programming language computing machine 
department information computer science technical report university california 
ashcroft jagannathan wadge 
multidimensional programming 
oxford university press 
backus 
programming liberated von neumann style 
functional style algebra programs 
cacm august 
backus 
computer science wrong fundamental concept programme 
de bakker van editors algorithmic languages pages 
elsevier north holland amsterdam 

algebraic model synchronous systems 
information computation 

foundations theory synchronous systems 
theoretical computer science 
barwise moss 

mathematical 
becker chambers 
interactive environment data analysis graphics 
wadsworth belmont ca 
degano levi martelli 
formal model lazy implementations prolog compatible functional language 
campbell editor implementations prolog artificial intelligence pages 
ellis harwood 
martelli 
applicative communicating processes order logic 
goos hartmanis editors international symposium programming volume pages 
springer verlag 
levi 
relation logic functional languages survey 
journal logic programming october 
bergstra klop 
process algebra operational semantics static data flow networks 
mathematical centre technical report iw university amsterdam 
bergstra tucker 
equational specifications complete term rewriting systems computable semicomputable algebras 
university college swansea computer science division technical report csr university college swansea 
berry 
hardware implementation pure esterel 
international workshop formal methods vlsi lecture notes computer science 
berry 
esterel synchronous programming language mathematical semantics 
brookes roscoe editors seminar concurrency number lncs pages 
springer verlag 
berry gonthier 
synchronous programming reactive systems esterel pages 
elsevier science publishers bv north holland 
berry gonthier 
esterel synchronous programming language design semantics implementation 
science computer programming 
berry gonthier 
incremental development entity esterel 
computer networks 
berry 
synchronous approach reactive real time systems 
proceedings ieee 
blom 
tools specification analysis coupled map lattices 
final year dissertation department computer science university college swansea 
blom holden poole tucker zhang 
ii general purpose tool parallel deterministic systems applications simulating cellular systems 
journal physiology london 
leeds meeting jan boudol roy de simone 
process calculi theory practice verification tools 
automatic verification methods finite state systems number lecture notes computer science pages 
springer verlag 
de simone 
esterel language 
look real time languages number proceedings ieee pages 
brock 
operational semantics data flow language 
mit lab computer science technical memo mit 
brock ackerman 
scenarios model non determinate computation 
formalization programming concepts number lecture notes computer science 
springer verlag 
broy 
applicative real time programming 
information processing ifip world congress paris pages 
north holland 
broy 
theory nondeterminism parallelism communication concurrency 
theoretical computer science pages 
broy 
predicative specification functional programs describing communicating networks 
information processing letters 
broy 
semantics finite infinite networks communicating agents 
distributed computing 
broy 
example design distributed system formal setting lift problem 
technical report mip universit passau february 
broy 
non deterministic data flow programs avoid merge anomaly 
science computer programming 
broy 
design methodology distributed system 
broy editor constructive methods computer science volume nato asi series computer system sciences pages 
springer verlag 
broy 
functional specification time sensitive communicating systems 
de bakker de roever editors stepwise refinement distributed systems volume lecture notes computer science 
springer verlag 
broy 
compositional refinement interactive systems 
working material international summer school program design calculi 
broy 
inter action refinement 
working material international summer school program design calculi 
broy fuchs weber 
design distributed systems focus 
technical report tum technische universit january 
broy 
modelling operating system structures timed stream processing functions 
journal functional programming january 
broy lengauer 
denotational verses predicative semantics 
journal computer system sciences 
bryant 
switch level model simulator mos digital systems 
ieee transactions computers 
coen 
hardware specification assertion language astral 
editors correct hardware design methodologies pages 
north holland 
burge 
stream processing functions 
ibm journal research development pages 
burstall collins 
programming pop 
edinburgh university press 
burstall macqueen 
hope experimental applicative language 
lisp conference stanford 
caspi pilaud halbwachs plaice 
lustre declarative language programming synchronous systems 
th acm symposium principles programming languages munich pages january 
clark gregory 
notes implementation parlog 
journal logic programming 
clark gregory 
parlog parallel logic programming language 
research report imperial college may 
clark gregory 
relational language parallel programming 
acm conference functional programming computer architecture pages 
clement 
programming behaviour graphical objects esterel 
proceedings tapsoft number lecture notes computer science 
springerverlag 
cohn gordon 
mechanized proof correctness simple counter 
tucker editors theoretical foundations vlsi design volume tract theoretical computer science pages 
cambridge university press 

computability recursive function theory 
cambridge university press 
dannenberg 
functional language real time control 
symposium lisp functional programming 
de roever 
backtracking greatest fixed points 
neuhold editor formal descriptions programming concepts pages 
north holland 

transformation systeme von zu 
technical report sfb technische universit unchen 
degroot lindstrom 
logic programming functions equations relations 
prentice hall 
delgado 
formalism digital circuit design 
phd thesis technische universit unchen 
delgado 
semantics digital circuits 
goos hartmanis editors semantics digital circuits volume lecture notes computer science 
springerverlag 
delgado 
stream scheme language formally describing digital circuits 
goos hartmanis editors parle parallel architecture languages europe volume lecture notes computer science pages 
springer verlag 
delgado oller 
algebraic specification language describing communicating agents 
ogi conference passau pages february 
dennis 
version data flow procedure language 
robinet editor programming symposium volume lecture notes computer science 
springerverlag april 
derrick tucker 
specification verification synchronous concurrent algorithms nuprl proof development system 
centre theoretical computer science report university leeds 
le verge 
alpha du centaur experiment 
robert editors algorithms parallel vlsi architectures ii pages 
elsevier science publishers 

program verification logical theory constructions 
jouannaud editor functional programming languages computer architecture number lncs pages 
springer verlag 
sander 
functional programming approach specification verification concurrent systems 
technical report chalmers university technology university department computer sciences 
eker tucker 
verification synchronous concurrent algorithms obj 
case study pixel planes architecture 
proceedings workshop designing correct circuits oxford 
springer verlag 
eker tucker 
specification verification synchronous concurrent algorithms case study pixel planes architecture 
earnshaw dew editors parallel processing computer vision display pages 
addison wesley 
farah 
correct compilation useful subset lucid 
phd thesis university waterloo ontario canada 

equivalence denotational operational semantics pure dataflow 
phd thesis university warwick computer science department coventry united kingdom 
france 
semantically extended data flow diagrams formal specification 
ieee transactions software engineering 
friedman wise 
cons evaluate arguments 
proceedings rd colloquium automata languages programming pages 
edinburgh press 
friedman wise 
aspects applicative programming file systems 
proceedings acm conference language design reliable software pages 
acm sigplan 
friedman wise 
unbounded computational structures 
software practice experience 
goguen 
obj theorem prover applications hardware verification 
nd banff workshop hardware verification banff canada june 
gordon milner wadsworth 
edinburgh lcf 
semantics concurrent computation number lncs 
springer verlag 

parallel program development recursive numerical algorithm case study 
technical report sfb technische universit unchen march 
le besnard 
signal declarative language synchronous programming real time systems 
technical report irisa inria campus de beaulieu rennes france 
le guernic gautier 
programming real time applications signal 
proceedings ieee pages 

generation dataflow graphical object code lapse programming language 
editor number lecture notes computer science pages 
springer verlag june 
halbwachs 
programming verifying real time systems means synchronous data flow language lustre 
ieee transactions software engineering 
halbwachs caspi raymond pilaud 
synchronous dataflow programming language lustre 
proceedings ieee september 
hanna 
strongly typed theory structures behaviours 
milne pierre editors correct hardware design verification methods lecture notes computer science pages 
springer verlag 
hansson 
case studies specification correctness neural networks 
final year dissertation university college swansea 
harel pnueli 
development reactive systems 
weizmann institute science rehovot israel 
harman 
formal specifications digital systems 
phd thesis school computer studies university leeds 
harman tucker 
formal specification design verifiable computers proceedings uk conference pages university college swansea 
iee 
harman tucker 
clocks formal specification uart 
milne editor fusion hardware design verification 
north holland 
harman tucker 
formal specifications design verifiable computers 
proceedings uk conference pages 
institute electrical engineers iee 
held auspices information engineering directorate department trade industry dti 
harman tucker 
formal specification digital correlator user specification 
tucker editors theoretical foundations vlsi design volume tracts theoretical computer science 
cambridge university press 
harman tucker 
consistent refinements specifications digital systems 
editors correct hardware design methodologies pages 
north holland 
harrison 
ruth functional language real time programming 
goos hartmanis editors parle parallel architectures languages europe number lncs pages 
springer verlag 
hearn meinke 
atlas typed language algebraic specification 
heering meinke oller nipkow editors higher order algebra logic term rewriting international workshop hoa amsterdam netherlands lecture notes computer science pages 
springer verlag berlin 
henderson morris 
lazy evaluator 
rd conference principles programming languages pages 
acm 
saito toda 
data flow computing base language value logic 
fall joint comp conf 
hoare 
communicating sequential processes 
prentice hall 

specification verification synchronous concurrent algorithms 
phd thesis school computer studies university leeds 
thompson tucker 
specification verification synchronous concurrent algorithms case study convolution algorithm 
milne editor fusion hardware design verification pages 
north holland 
proceedings ifip working group working conference 
holcombe 
machines basis system specification 
software engineering 
holcombe 
machines stacks recursive enumerable functions 
technical report department computer science university sheffield england 
holden poole tucker zhang 
coupling synchronization multilayer neural computing system 
chaos fractals 
appear 
holden tucker thompson 
excitable media considered computational systems 
physica 
holden tucker thompson 
computational structure neural systems 
holden editors neurocomputers attention neurobiology synchronisation chaos pages 
manchester university press 
av holden tucker zhang poole 
coupled map lattices computational systems 
chaos 
av holden thompson tucker zhang 
theoretical framework synchronization coherence chaos real simulated neural networks 
taylor editor workshop complex dynamics neural networks pages 
springer verlag 
jagannathan 
descriptive prescriptive model dataflow semantics 
phd thesis department computer science university waterloo 

architecture parallel symbolic processing suspending construction 
phd thesis department computer science indiana university 
johnson 
synthesis digital designs recursion equations 
mit press 
johnson 
synthesis digital designs recursion equations 
mit press 
johnson 
manipulating logical organization system factorizations 
brown editors hardware specification verification synthesis mathematical aspects volume lncs 
springer verlag 
johnson zhu 
algebraic approach hardware specification derivation 
editor proceedings ifip international workshop applied formal methods correct vlsi design 
elsevier 
jones 
systematic software development vdm 
prentice hall international series computer science 
prentice hall 
jones sinclair 
functional programming operating systems 
computer journal 
jonsson 
fully trace model dataflow networks 
technical report swedish institute computer science 
kahn 
semantics simple language parallel processing 
proceedings ifip congress pages 
kahn 
primitive control logic programs 
proceedings symposium logic programing pages atlantic city 
ieee computer society 
kahn macqueen 
coroutines networks parallel processes 
ifip congress pages 
elsevier north holland amsterdam 
kamp 
recursive neural networks associative memory 
wiley 
kearney staples 
extensional fixed point semantics non deterministic data flow 
theoretical computer science 
keller 
denotational models parallel programs operators pages 
north holland 

lecture history computation colloquium oxford university 
knuth bendix 
simple word problems universal algebra 
leech editor computational problems algebra pages 
pergamon press 
kohonen 
correlation matrix memories 
anderson rosenfeld editors neurocomputing foundations research pages 
mit press 
kohonen 
associative memory system theoretical approach 
springer verlag 
kok 
fully semantics data flow nets 
goos hartmanis editors parle parallel languages architectures europe volume pages 
springer verlag 
kok 
fully semantics data flow nets 
goos hartmanis editors parle parallel languages architectures europe volume pages 
springer verlag 

discrete switch level circuit model uses valued node states 
phd thesis technische universiteit eindhoven 

discrete formalization switch level circuit behavior 
integration vlsi journal 
appear 

data flow programming language operating systems 
proceedings acm sigplan sigops interface meeting sigplan notices september 
kowalski 
predicate logic programming language pages 
northholland 
kung 
systolic architectures 
computer pages january 
landin 
correspondence algol church lambda calculus part 
communications acm 
landin 
correspondence algol church lambda notation part 
communications acm 
landin 
programming languages 
communications association computing machinery 
lee tan 
modeling visualized data flow diagrams petri net model 
software engineering 
leiserson saxe 
optimizing synchronous systems 
vlsi computing systems 
levi palamidessi 
contributions semantics logic perpetual processes 
acta informatica 
levi 
top mathematical semantics symbolic execution 
rairo inform 
th eor 
li martin 
sync model parallel execution method logic programming 
symposium logic programming pages salt lake city 
ieee computer society 
lindstrom panangaden 
stream execution logic 
proceedings symposium logic programming pages atlantic city 
ieee computer society 
lloyd 
foundations logic programming 
springer verlag 
manna ness vuillemin 
inductive methods proving properties programs 
communications association computing machinery august 
marshall 
cellular automata design implementation specification 
final year dissertation department computer science university college swansea 
martin 
specification simulation synchronous concurrent algorithms 
phd thesis school computer studies university leeds 
martin tucker 
concurrent assignment representation synchronous systems 
parallel computing 
mcconnell 
infinite synchronous concurrent algorithms 
phd thesis computer science department university college swansea 
mcconnell tucker 
infinite synchronous concurrent algorithms algebraic specification verification hardware stack 
bauer brauer schwichtenberg editors logic algebra specification pages 
springerverlag 
mcculloch pitts 
logical calculus ideas nervous activity 
anderson rosenfeld editors neurocomputing foundations research pages 
mit press 
tucker 
theoretical foundations hardware design 
tucker editors theoretical foundations vlsi design 
cambridge university press 
mcgraw allan thomas 
sisal streams iteration single assignment language 
language manual version lawrence livermore national laboratory california march 
mcilroy 
coroutines 
internal report bell telephone laboratories murray hill new jersey 
mead conway 
vlsi systems 
addison wesley 
meinke 
graph theoretic model synchronous concurrent algorithms 
phd thesis school computer studies university leeds 
meinke 
equational specification types combinators 
ager editor computer science logic lecture notes computer science 
springer verlag berlin 
meinke 
algebraic semantics rewriting terms types 
rusinowitch remy editors third international conference conditional term rewriting systems lecture notes computer science 
springer verlag berlin 
meinke 
universal algebra higher types 
theoretical computer science 
meinke 
second order initial algebra specification primitive recursion 
acta informatica 
meinke steggles 
specification verification higher order algebra case study convolution 
heering meinke oller nipkow editors higher order algebra logic term rewriting international workshop hoa amsterdam netherlands lecture notes computer science pages 
springer verlag berlin 
meinke tucker 
specification representation synchronous concurrent algorithms 
vogt editor concurrency number lecture notes computer science pages 
springer verlag 
milne 
timing constraints formalizing description verification 
proceedings computer hardware description languages applications 
northholland 
milner 
model lcf 
technical report computer science department stanford university 
milner 
calculi synchrony asynchrony 
theoretical computer science 
milner 
proposal standard ml 
acm symposium lisp functional programming pages austin texas 
milner 
communication concurrency 
prentice hall 
minsky papert 
perceptrons 
mit press 

deadlock avoidance data flow architecture 
proc 
symp 
automat 
computation contr pages april 
murakami sethi 
terminal call processing esterel 
technical report bell laboratories 
naish 
solutions predicates prolog 
proceedings symposium logic programming pages boston 
ieee computer society 

eine von ur eine 
diploma thesis universit passau 
donnell 
circuits systems implementing communication streams 
editor imacs transactions scientific computation volume pages 

donnell 
hydra hardware description functional language recursion equations high order combining forms 
milne editor fusion hardware design verification 
north holland 
parker 
automated synthesis digital systems 
ieee design test computers pages november 
parker 
stream data prolog chapter pages 
mit press 
plotkin 
structural approach operational semantics 
technical report daimi fn university denmark september 
pnueli 
applications temporal logic specification verification reactive systems survey current trends 
de bakker de roever rozenberg editors current trends concurrency number lecture notes computer science pages 
springer verlag 
poole 
synchronous algorithms dynamical systems 
phd thesis computer science department university college swansea october 
rabinovich 
equivalence dataflow networks 
computer science logic 
halbwachs raymond 
programming verifying critical systems means synchronous data flow programming language lustre 
conference software critical systems acm sigsoft 
rumelhart hinton williams 
learning internal representation error propagation 
rumelhart mcclelland editors parallel distributed processing 
explorations microstructure cognition 
volume foundations pages 
mit press 
rumelhart mcclelland editors 
parallel distributed processing 
explorations microstructure cognition 
volume psychological biological models 
mit press 
rumelhart mcclelland editors 
parallel distributed processing 
explorations microstructure cognition 
volume foundations 
mit press 

implementation structured lucid dataflow computer 
master thesis university manchester 
shapiro 
subset concurrent prolog 
technical report tr icot 
sharp editor 
data flow computing 
ablex publishing 
sharp rasmussen 
transformational rewriting ruby 
ifip transactions computer science technology 
sheeran 
fp algebraic vlsi design language 
phil st cross college november 
sheeran 
ruby language relations higher order functions 
technical report glasgow university 
sheeran 
retiming slowdown ruby 
milne editor fusion hardware design verification 
north holland 
sheeran 
categories working hardware designer 
brown editors hardware specification verification synthesis mathematical aspects volume lncs 
springer verlag 
jayaraman 
domain theoretic approach functional logic programming 
journal functional programming july 
staples nguyen 
fixed point semantics nondeterministic data flow 
journal association computing machinery 
stefanescu 
flowchart theories part deterministic case 
journal computer system sciences 
stefanescu 
flowchart theories part ii 
nondeterministic case 
theoretical computer science 
stephens 
algebraic stream processing 
phd thesis university college swansea 
stephens thompson 
cartesian stream transformer composition 
university college swansea department computer science report csr university college swansea 
appear fundamenta informaticae 
hansen om 
mathematical theory domains 
cambridge tracts theoretical computer science 
subrahmanyam 
functions logic computational model integrating functional logic programming 
international symposium logic programming pages 
ieee computer soc 
press 
sun microsystems incorporated 
yacc 
sussman steele 
constraints language expressing hierarchical descriptions 
artificial intelligence 
thompson 
mathematical theory synchronous concurrent algorithms 
phd thesis school computer studies university leeds 
thompson tucker 
theoretical considerations algorithm design 
earnshaw editor nato asi fundamental algorithms computer graphics 
springer verlag 
thompson tucker 
equational specification synchronous concurrent algorithms architectures 
computer science division technical report csr university college swansea 
thompson tucker 
equational specifications concurrent algorithms architectures second edition 
technical report csr computer science department university wales swansea 
thompson tucker yates 
artificial neural networks synchronous concurrent algorithms algebraic specification feedforward network 
technical report university college swansea computer science division research report 

relationship synchronous concurrent algorithms sccs 
technical report department computer science university college swansea 
tucker zucker 
program correctness data types semantics 
north holland 
tucker zucker 
theory computation stream algebras applications 
editors mathematical foundations computer science th international symposium prague lncs pages 
springer verlag 
tucker zucker 
computable functions stream algebras 
editor international summer school proof computation marktoberdorf nato advanced study institute pages 
springer verlag 
turner 
miranda non strict functional language polymorphic types 
functional programming language computer lecture notes computer science 
springer verlag 
van emden de lucena 
predicate logic language parallel programming 
clark editors logic programming pages 
academic press 
van emden kowalski 
semantics predicate logic programming language 
journal acm 
le verge 
alpha language design systolic arrays 
journal vlsi signal processing 
von neumann 
theory self reproducing automata 
university illinois press 
vuillemin 
proof techniques recursive programs 
phd thesis stanford university 

vi screen editor written 
technical report dcs ir university victoria computer science department 
wadge 
extensional treatment dataflow deadlock 
theoretical computer science 
wadge ashcroft 
lucid dataflow programming language 
academic press 
weijland 
verification systolic algorithm process algebra 
tucker editors theoretical foundations vlsi design volume tracts theoretical computer science 
cambridge university press 
welch 
parallel assignment revisited 
software practice experience 
weng 
stream orientated computation recursive data flow schemas 
project mac technical memo mit 
widrow hoff 
adaptive switching circuits 
anderson rosenfeld editors neurocomputing foundations research pages 
mit press 
prosser 
art digital design 
prentice hall 
wolfram 
theory applications cellular automata 
world scientific 
yates 
algebraic specification correctness artificial neural networks supervised learning algorithms 
phd thesis university college swansea 
zhu johnson 
algebraic framework data abstraction hardware description 
sheeran jones editors proceedings oxford workshop designing correct circuits 
springer verlag 
zhu johnson 
example interactive hardware transformation 
editor proceedings acm international workshop formal methods vlsi design 
