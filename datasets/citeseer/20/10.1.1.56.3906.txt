exploiting atomic broadcast replicated databases fernando pedone rachid guerraoui andr schiper epartement informatique ecole polytechnique ed erale de lausanne lausanne switzerland database replication protocols historically built top distributed database systems consequently designed implemented distributed transactional mechanisms atomic commitment 
argue approach adequate efficiently support database replication suitable alternatives atomic broadcast primitives employed 
precisely show fully replicated database systems deferred update replication model better throughput response time implemented atomic broadcast termination protocol implemented atomic commitment 
replication considered cheap software way increase data availability compared hardware specialised techniques 
designing replication scheme provides reasonable performance maintains data consistency active area research database distributed systems communities 
database context replication techniques deferred update model received increasingly attention past years :10.1.1.116.1182
deferred update model transactions processed locally server replica manager commit time forwarded certification servers replica managers 
deferred update replication techniques offer advantages immediate update techniques synchronise transaction operation servers 
advantages may cite better performance gathering propagating multiple updates execution single possibly nearby server reducing number messages network flexibility propagating updates convenient time dial connection better support fault tolerance simplifying server recovery missing updates may demanded servers lower deadlock rate eliminating distributed deadlocks :10.1.1.116.1182
deferred update replication techniques limitations 
firstly termination protocol propagate transaction servers certification usually atomic commitment protocol pc algorithm cost directly impacts transaction response time 
secondly certification procedure usually performed transaction termination time consists aborting conflicting transactions 
certification procedure typically leads high abort rate conflicts frequent impacts transaction throughput 
context client server distributed systems replication schemes guarantee strong replica consistency atomic broadcast communication 
atomic broadcast communication primitive enables send messages set processes guarantee processes agree set messages delivered order messages delivered 
guarantee consistency trivially ensured operation replicated server distributed replicas atomic broadcast 
authors mentioned possibility atomic broadcast support replication schemes database context little done direction mention exceptions section 
show atomic broadcast successfully improve performance database deferred update replication technique 
particular show different resilience scenarios deferred update replication technique atomic broadcast provides better transaction throughput response time similar scheme atomic commitment 
organised follows 
section replicated database model recall principle deferred update replication technique 
section describe variation replicated technique atomic broadcast prove correct 
section compare transaction throughput deferred update replication atomic broadcast throughput deferred update replication classical atomic note consider replication protocols allow replica divergence require 
focus replication schemes guarantee copy serializability 
commitment 
section consider different resilience scenarios compare transaction response time solution classical atomic commit 
section discuss related study alternatives traditional phase commit database replication 
section summarises main contributions discusses research perspectives 
deferred update technique section describe database model recall principle deferred update replication technique 
replicated database model consider replicated database system composed set processes sigma fp executing different processor shared memory access common clock 
process replica database plays role replica manager 
processes may fail crashing recover crash 
assume processes behave maliciously exclude byzantine failures 
process able execute requests certain time fail failed recovered say process time process said time say process correct time forever 
processes execute transactions sequences read write operations followed commit abort operation 
transactions submitted client processes executing processor replica database 
correctness criterion transaction execution copy serializability sr 
committed transactions represented set pi contains committed transactions process time non committed transactions represented transaction commits represented indicates serial order related committed transactions database 
notion forever theoretical assumption guarantee correct processes useful computation 
assumption prevents cases processes fail recover successively time system evolve 
forever means example termination protocol 
deferred update principle deferred update replication technique transactions locally executed process process site transaction issued execution interaction processes necessary local synchronisation 
transaction requests commit updates redo log records control structures propagated processes transaction certified possible committed 
procedure starting commit request called termination protocol 
certification test aims ensuring copy serializability 
guarantees committed transactions effect database equivalent serial execution transactions copy database 
database process read write requests commit request processor processor processor processor database process client client termination protocol client client local execution commit request termination protocol database process deferred update technique certification test decides abort transaction commit leads database inconsistent state 
example consider concurrent transactions executed different processes update common data item 
requesting commit arrives process process aborted process see updates updates 
deferred update technique transaction passes defined states see 
starts executing state read write operations locally executed process initiated 
transaction requests commit passes committing state sent processes 
transaction received process committing state 
transaction process remains committing state fate known process commit abort 
executing committing states transitory states commit abort states final states 
executing committing commit abort final state transitory state commit request abort request transaction transaction rejection transaction states deferred update algorithm summarise principle deferred update replication technique 
simplify presentation consider particular transaction executing process rs ws sets data items transaction reads writes respectively execution 

transaction initiated executed process read write operations request appropriate locks locally granted strict phase locking rule 
phase transaction executing state 

transaction requests commit passes committing state 
read locks released write locks maintained reaches final state process triggers termination protocol updates performed sent processes 

part termination protocol certified process 
certification test guarantees copy serializability 
outcome test commit abort concurrent transactions executed processes 
come back issue sections 
passes certification test write locks requested updates applied database 
transaction represented transactions execution state locks conflict write locks aborted sake 
time process may transactions participating termination protocol 
soon process catches process seen transactions system 
recovery procedure depends implementation termination protocol discuss issue section 
described objective termination protocol twofold propagating committing transactions processes ii certifying 
exact way done implementation specific 
typical deferred update implementation transaction propagation performed atomic commitment protocol certification test conflicting rule 
atomic commitment protocol ensures processes receive transaction committed processes agree conflicting rule leads abort transaction involved read write write write conflict 
section describe termination protocol atomic broadcast primitive propagate transactions ii certification test specifically designed atomic broadcast primitive 
sections show termination protocol provides better throughput response time classical termination protocol atomic commitment 
replication scheme atomic broadcast subsections recall definition atomic broadcast primitive deferred update replication algorithm primitive prove correct 
atomic broadcast atomic broadcast primitive enables send messages set processes guarantee processes agree set messages delivered order messages delivered 
precisely atomic broadcast ensures process delivers message correct process delivers uniform atomicity ii processes deliver messages different orders order iii process broadcasts message fail correct process eventually delivers termination 
important notice properties atomic broadcast defined terms message delivery terms message reception 
typically process receives message performs computation guarantee atomic broadcast properties delivers message 
notion delivery captures concept process forget delivered message 
expression delivering transaction mean delivering message contains transaction discuss implementation atomic broadcast primitives section 
termination protocol atomic broadcast describe termination protocol deferred update replication technique section atomic broadcast 
delivering committing transaction process certifies transaction case success commits 
transaction delivered certified successfully passes commit state writes processed 
abstractly presents main components involved termination protocol atomic broadcast way components related 
certifier executes certification test incoming transaction 
receives transactions delivered atomic broadcast module change relative order 
certifying transaction certifier may ask information data manager committed transactions 
transaction successfully certified write operations transmitted lock manager 
lock manager treats requests come certifier sequentially 
order process certify committing transaction know transactions conflict notion conflict defined precedes relation transactions operations issued transactions 
transaction precedes transaction denoted committed started execution 
relation 
means committed started execution 
definitions say transaction conflicts 
conflicting operations 
database implementation distinctions may apparent modules tightly integrated 
presentation clarity chosen separate modules 
operations conflict issued different transactions access data item write 
certifier data manager lock manager atomic broadcast transaction manager client client receive message send message read write commit abort data manager lock manager atomic broadcast transaction manager certifier client process transaction broadcast network transaction delivery process deterministic execution precisely process performs steps delivering 
certification test 
process aborts committed transaction conflicts updated data items read formally described follows 
aborted state committing pi 
ws rs tm 
commitment 
aborted passes commit state expressed committed transaction represents sequential order transaction pi pi ft process tries write locks processes updates 
cases consider 
transaction execution read write locks conflict write locks 
case aborted read write locks released 
precisely aborts transaction predicate conflict due write lock held tn tn aborted multiversion evaluated true 
aborted state executing pi 
rs ws ws ws transaction executed locally requested commit delivered executed locally write locks data items updated 
commits writes supersede ones overlap case need request write locks process updates database 
similar thomas write rule 
aborted pass certification test database restored state instance applying redo log entries database 
committing transaction set transactions 
see certification test determined follows 
process represent delivered committed transaction local time transaction starts execution process time checked certification time transactions ft information broadcast writes determined process certification time 
proof correctness sketch proving safety replication protocol comes showing history generates copy serializable 
give intuitive idea proof 
details see appendix 
process provided input committing transactions order process uses deterministic certifying algorithm commit abort transactions suffices show process generates copy serializable executions prove database system generates copy serializable executions prove correctness algorithm 
development proof model system mechanism necessary keep track multiple concurrent writes 
conflict due read lock best done abort tn commit doomed abort reads old pass certification test 
multiversion database transactions executing process version data items multiversion graph theorem bernstein 
theorem states multiversion history copy serializable produces acyclic multiversion serialization graph 
consequently proof composed parts 
part define multiversion serialization graph mv sg just contains committed transactions sequence states mv sg mv sg mv sg prove induction states atomicity order properties atomic broadcast primitive processes sigma produce mv sg 
second part prove mv sg acyclic showing edge mv sg delivered show transaction committed included mv sg include read version order relation form previous committed transaction mv sg multiversion graph theorem conclude replication protocol guarantees copy serializability 
liveness characterisation termination property atomic broadcast primitive assures transaction eventually reaches committing state database processes depending conflicts committed transactions committed aborted 
process deliver transaction soon recovers 
guarantee reflects liveness property algorithm 
section discuss conditions transaction committed algorithm compare conditions traditional deferred update replication technique atomic commitment 
transaction throughput section recall abort commit conditions termination protocol atomic commitment 
compare throughput solution deferred update termination protocol atomic broadcast 
throughput measures transaction commit rate 
liveness parameter 
termination protocol atomic commit atomic commit implementation deferred update termination protocol total order knowledge available processes conflict resolved aborting conflicting transactions 
describe termination protocol atomic commit 

certification test 
process decision commit abort transaction knows processes know requires interaction processes ensures transaction certified committing transaction taken account 
certifying transaction process decides abort transaction precede 
conflicting operations 
formally described follows 
aborted state committing state committing 
rs tm ws ws tm rs ws tm ws 
commitment 
aborted passes commit state tries write locks processes updates 
transactions locally executed read write locks data items updated aborted 
formally transactions execution aborted 
henceforth represented committed transaction aborted state executing pi 
rs ws ws ws order certify commit transactions system detect transactions executed concurrently different processes 
example done associating vector clocks timestamps local events execution commit transaction 
times property ordered events causally related 
time process communicates sends vector clock 
atomic broadcast vs atomic commit throughput values figures obtained means simulation involving database data items replicated database processes 
transaction different data items 
data item probability accessed hot spots 
data items database times chance accessed assume data items hot spots 
experiments consider concurrent committing transactions transactions requested commit 
committed transactions transactions atomic broadcast atomic commit committed transactions transactions atomic broadcast atomic commit equiprobable accesses committed transactions transactions atomic broadcast atomic commit committed transactions transactions atomic broadcast atomic commit hot spots results report effects total ordering committing requests 
show total order produce better results 
intuitively idea total order processes resolve conflicts aborting transactions involved aborting just 
example transactions conflict processes know delivered abort resolve conflict need abort 
order knowledge available aborting just transaction create inconsistencies 
processes abort systems resolve problem requiring transactions :10.1.1.116.1182
case really talk conflicting transactions 
response time section discuss implementation atomic broadcast primitive 
consider different implementations correspond different resilience degrees compare cost atomic commit protocols resilience degrees 
comparing costs atomic broadcast atomic commit implementations consider failure free runs frequent ones practice 
discussion assume communication links reliable messages lost corrupted 
sequencer atomic broadcast implementation described section sequencer process 
uses centralised approach distinguishes coordinator participant processes 
coordinator receives messages process step broadcasts processes step 
coordinator includes sequence number messages processes deliver messages order sequence numbers 
message number just delivered message number gamma delivered 
sequencer step step commit abort msg 
delivery forced write msg 
logging sequencer atomic broadcast failure free execution absence failures implementation clearly fulfils properties atomic broadcast primitive 
blocking coordinator broadcast possible 
coordinator keep broadcast messages process fails recovers brought date asking coordinator messages missed 
stable messages discarded coordinator 
message stable process knows processes delivered note sequence number necessary communication links fifo 
recover coordinator complicated failure occurs processes may received messages messages may unstable coordinator correctness just guaranteed coordinator remembers broadcast messages unstable ones 
solve problem broadcasting message coordinator stores stable storage 
recovering coordinator checks process sends messages received 
implementation satisfies atomicity property atomic broadcast primitive process just deliver message sent coordinator coordinator keeps messages stable storage stable 
processes eventually receive message coordinator deliver 
processes contact coordinator soon recover receive missed messages 
logging messages coordinator sure lose fails 
order property assured unique sequence numbers associated messages 
coordinator receives message broadcast eventually correct processes receive deliver guaranteeing termination property 
failure free execution processes implementation requires messages forced writes stable storage log 
implementation offers performance disadvantage relies fact sequencer correct process 
requirement similar phase commit coordinator correct process 
sections implementations atomic broadcast looses requirement 
atomic broadcast majority atomic broadcast implementation section proposed chandra toueg 
considers majority processes execution atomic broadcast atomic broadcast majority 
execution divided rounds process acts coordinator round 
failure suspicion failure occurs execution algorithm terminates round coordinator fails suspected round initiated predetermined process coordinator 
implementation failures process wanting broadcast message sends coordinator step forwards processes step 
process receiving answers ack coordinator step 
coordinator receives ack half processes sends control message saying delivered step 
coordinator fails suspected having failed new coordinator elected rotating coordinator principle 
execution failures implementation requires messages 
coord 
commit abort msg 
delivery step step step step atomic broadcast majority failure free execution atomic broadcast majority correct majority assumption implementation section means process seen delivered messages system 
assumption may considered restrictive crash recover model 
describe variation previous implementation system majority processes correct 
situation prevented processes deliver message storing stable storage fail forget delivered 
problem solved processes log messages delivering 
guarantees recovering processes determine messages delivered delivered 
implementation needs majority processes deliver message contrary previous case system resumes normal execution soon majority processes 
failure free execution processes implementation requires messages forced writes logs 
atomic broadcast vs atomic commit response time cost atomic broadcast direct effect system response time efficient broadcast implemented faster user receives result request full description protocol case failures scope 
forced write msg 
logging coord 
commit abort msg 
delivery step step step step atomic broadcast majority correct failure free execution transaction commit 
compare atomic broadcast implementation previous sections traditional atomic commit implementations 
presents qualitative analysis termination protocols 
characteristics phase commit pc phase commit pc protocols come 
considers forced log writes 
light pc variation pc assumes majority processes 
satisfies write voting rule assures consistency replicated database system 
protocol resilience number commu cost termination nication steps protocol sequencer abp blocking messages forced write phase commit blocking messages forced writes abp majority non blocking messages light pc non blocking messages abp majority correct non blocking messages forced writes phase commit non blocking messages forced writes cost termination protocol figures depict quantitative results 
measures obtained sparc workstations running solaris ethernet network tcp protocol transactions messages logs bytes 
measures convey average time deliver transaction message 
results figures show atomic broadcast protocols better performance atomic commit compared degree resilience 
optimisations proposed atomic commit protocols 
section representative implementations atomic commit protocols 
optimisations implementations done atomic broadcast primitives 
time ms number nodes phase commit atomic broadcast fig time ms number nodes phase commit atomic broadcast fig termination logging time ms number nodes phase commit atomic broadcast fig phase commit atomic broadcast fig time ms number nodes phase commit atomic broadcast fig phase commit atomic broadcast fig termination logging related limitations traditional atomic commitment protocols replicated contexts recognised authors 
summarise alternative propositions 
authors point fact atomic commitment leads abort transactions situations single replica manager crashes 
propose variation phase commit protocol commits transactions long majority replica managers 
class epidemic replication protocols proposed alternative traditional replication protocols 
solutions epidemic replication case lazy propagation consistency relaxed solved semantic knowledge application 
replication protocol deferred update model 
transactions execute process share data items locks solve local conflicts 
protocol variation phase commit protocol certificate terminate transactions 
atomic broadcast considered possible candidate support replication termination protocols 
schiper raynal pointed similarities properties atomic broadcast static transactions transactions operations known advance 
atomic broadcasting static transactions addressed 
reordering technique atomic broadcast allows greater transaction throughput replicated databases 
family protocols management replicated database immediate deferred models proposed 
protocols atomic broadcast primitive characteristics primitive described behaviour case failures discussed 
immediate update replication consists atomic broadcasting write operation 
authors describe possible implementations deferred update replication 
alternative atomic broadcasts necessary commit transaction 
second alternative transactions execute locally deferring writes commit time 
commit time transactions broadcast write locks requested 
approach drawbacks requires sort multiversion mechanism deal writes transaction execution transaction writes data item read reflect write transactions execution may aborted transactions executed locally conflicts dealt commit time ones happen locally 
amir utilise atomic broadcast implement replicated databases 
scheme proposed considers clients submit individual object operations transactions 
concluding remarks cheriton skeen expressed scepticism atomic broadcast support replicated databases 
reasons raised atomic broadcast replication schemes consider individual operations databases operations gathered inside transactions atomic broadcast guarantee uniform atomicity server deliver message crash servers receiving uniform atomicity fundamental distributed databases processes crashed agree commit transaction atomic broadcast usually considered crash process model process crashes recovers databases processes supposed recover crash 
considered atomic broadcast primitive crash recovery model guarantees uniformity process delivers transaction deliver 
shown primitive efficiently propagate transaction control information deferred update model replication 
choice replication model casual research shown immediate update models due nature applications side effects synchronisation :10.1.1.116.1182
indirectly points fact existing database replication protocols built top distributed database systems mechanisms developed deal distributed information necessarily designed replication mind 
example atomic commitment mechanism shown favourably replaced atomic broadcast primitive providing better throughput response time 
performance figures help dis common mis belief total order atomic broadcast primitives expensive compared traditional transactional primitives inappropriate high performance systems 
stated believe replication successfully applied performance achieved sacrificing consistency making semantic assumptions transactions 
important notice replication scheme atomic broadcast important assumptions processes certify commit transactions sequentially database fully replicated 
assumption bypassed concurrency transactions come certifier allowed transactions disjoint write sets 
second assumption fully replicated database reasonable traditional closed information systems inappropriate open system large number nodes large database 
systems replication partial processes store subsets database extend atomic broadcast useful context open issue 
agrawal el abbadi 
epidemic algorithms replicated databases 
proceedings sixteenth acm sigact sigmod sigart symposium principles database systems tucson arizona may 
agrawal alonso el abbadi 
exploiting atomic broadcast replicated databases 
technical report university california santa barbara swiss federal institute technology 
amir dolev melliar smith moser 
robust efficient replication group communication 
technical report cs hebrew university jerusalem 
bernstein hadzilacos goodman 
concurrency control recovery database systems 
addison wesley 
birman schiper stephenson 
lightweight causal atomic group multicast 
acm transactions computer systems august 
birman van renesse 
reliable distributed computing isis toolkit 
ieee press 
chandra toueg 
unreliable failure detectors reliable distributed systems 
journal acm march 
cheriton skeen 
understanding limitations causally totally ordered communication 
proceedings th acm symposium operating systems principles asheville north carolina december 

strategies techniques oracle replication 
technical report oracle 
demers epidemic algorithms replicated database maintenance 
fred schneider editor proceedings th annual acm symposium principles distributed computing pages vancouver bc canada august 
acm press 
gifford 
weighted voting replicated data 
acm sosp pacific grove ca december 
gray 
notes data base operating systems 
springer verlag heidelberg frg newyork ny usa lncs operating systems advanced course bayer graham eds volume 

gray neil shasha :10.1.1.116.1182
dangers replication solution 
proceedings acm sigmod international conference management data montreal canada june 
gray reuter 
transaction processing concepts techniques 
morgan kaufmann 
guerraoui oliveira schiper 
atomic updates replicated data 
european dependable computing conference italy 
lncs 
guerraoui schiper 
software replication fault tolerance 
ieee computer april 
gupta ramamritham 
revisiting commit processing distributed database systems 
proceedings acm sigmod international conference management data tucson arizona may 
hadzilacos toueg 
distributed systems ed chapter fault tolerant broadcasts related problems 
addison wesley 
jagadish mumick rabinovich 
scalable versioning distributed databases commuting updates 
proceedings thirteenth international conference data engineering april birmingham pages 
ieee computer society press april 
kaashoek tanenbaum 
group communication amoeba distributed operating system 
th international conference distributed computing systems pages washington usa may 
ieee computer society press 
keidar 
highly available paradigm consistent object replication 
master thesis institute computer science hebrew university jerusalem jerusalem israel 
kung john robinson 
optimistic methods concurrency control 
acm transactions database systems june 
pedone guerraoui schiper 
transaction reordering replicated databases 
th ieee symposium reliable distributed systems durham usa october 
ieee computer society press 
schiper raynal 
group communication transaction distributed systems 
communications acm april 
skeen 
nonblocking commit protocols 
edmund lien editor proceedings acm sigmod international conference management data pages ann arbor michigan april 
acm new york 
thomas 
majority consensus approach concurrency control multiple copy databases 
acm trans 
database systems june 
triantafillou 
high availability 

paris molina editors proceedings second workshop management replicated data pages monterey california november 
ieee computer society press 
appendix correctness proof proofs history derived system history just containing operations committed transactions involving data items stored multiversion history transactions execute version data items transactions execute processes different versions 
denote write writes generate new data versions subscript data writes read data item shown normal serialization graphs sg powerful prove multiversion histories correct copy serializable 
reason multiversion formalism prove histories produced algorithm correct 
formalism employs multiversion serialization graph mv sg mv sg short consists showing graph acyclic 
denote mv sg particular state multiversion serialization graph process transaction committed multiversion serialization graph passes state mv sg mv sg proof divided parts 
lemma shows properties atomic broadcast primitive determinism certification test processes sigma eventually construct mv sg 
lemmas show mv sg acyclic 
lemma process sigma constructs multiversion serialization graph mv sg process eventually constructs multiversion serialization graph mv sg proof proof induction 
basic step database initialised process empty multiversion serialization graph mv sg inductive step assumption assume process constructed multiversion serialization graph mv sg constructed mv sg inductive step 
consider transaction processing generates mv sg new multiversion serialization graph mv sg process order process deliver message containing certify commit 
order property atomic broadcast primitive process delivers message installing mv sg delivers message atomicity property process delivers message process delivers certify process takes account transactions locally committed transactions mv sg 
local state mv sg input message deterministic certification algorithm process constructs new multiversion serialization graph mv sg process eventually constructs mv sg show history produced process acyclic mv sg sr 
multiversion history version order multiversion serialization graph mv sg serialization graph read version order edges 
read relation defined operation 
cases version order relation mv sg distinct version order defined delivery order transactions 
formally version order expressed follows iff delivery delivery mv sg prove acyclic multiversion serialization graph mv sg show read version order relations mv sg follow order delivery committed transactions mv sg delivery delivery 
lemma read relation mv sg delivery delivery 
proof read relation mv sg contradiction assume delivery delivery 
happen reads uncommitted data transactions just read committed data assured strict phase locking rule situation possible 
lemma version order relation mv sg delivery delivery 
proof definition version order edges cases consider 
include mv sg show delivery delivery 
updated updated updates follow order delivery steps way happen having delivery delivery 
include mv sg show delivery delivery 
contradiction assume delivery delivery 
certifying process takes account commit state concurrent 
lead abort ws rs contradicting hypotheses theorem history produced algorithm sr 
proof lemmas process produces serialization graph mv sg edge mv sg satisfies relation delivery delivery 
process produces acyclic multiversion serialization graph mv sg lemma processes construct mv sg multiversion graph theorem history produced replication algorithm sr 

