comparison lauritzen spiegelhalter hugin shenoy shafer architectures computing marginals probability distributions prakash shenoy institute informatics school business university fribourg university kansas site regina rue summerfield hall ch fribourg switzerland lawrence ks usa ch edu decade architectures proposed exact computation marginals local computation 
compare architectures lauritzen spiegelhalter hugin shenoy shafer perspective graphical structure message propagation message passing scheme computational efficiency storage efficiency 
decade architectures proposed uncertain reasoning literature exact computation marginals multivariate discrete probability distributions 
pioneering architectures computing marginals proposed pearl 
pearl architecture applies singly connected bayes nets 
multiply connected bayes nets pearl proposed method conditioning reduce multiply connected bayes net singly connected bayes nets 
lauritzen spiegelhalter proposed alternative architecture computing marginals applies bayes net 
subsequently jensen proposed modification architecture 
call architecture hugin architecture architecture implemented hugin software tool developed group 
architecture abstracted lauritzen jensen applies generally domains including dempster shafer belief function theory 
inspired pearl shenoy shafer adapted generalized pearl architecture case finding marginals joint dempster shafer belief functions join trees 
motivated lauritzen spiegelhalter case probabilistic reasoning proposed framework computing marginals join trees applies domain satisfying axioms shenoy shafer 
shenoy proposed refinement join trees called binary join trees designed improve computational efficiency shenoy shafer architecture 
refer architecture shenoy shafer architecture 
sense shenoy shafer architecture considered adaptation pearl propagation scheme join tree graphical structure 
compare lauritzen spiegelhalter ls hugin shenoy shafer ss architectures perspective graphical structure message propagation message passing scheme storage efficiency computational efficiency 
main findings follows 
hugin architecture computationally efficient ls architecture storage efficient ls architecture 
surprising 
surprising average basis ss architecture computationally efficient hugin architecture 
commonly believed hugin architecture efficient architecture computing marginals experiments support belief 
bayesian networks section define bayesian network probability model describe example lauritzen spiegelhalter chest clinic problem 
bayesian networks denote variables uppercase roman letters set variables denote subsets variables lowercase roman alphabets denote set possible states variable assume set possible states subset variables cartesian product state space individual variables subset 
denote states subset variables lowercase boldfaced letters state denotes projection obtained simply dropping states variables course suppose subset variables 
potential function set nonnegative real numbers 
call domain potential denote potentials lowercase greek letters 
define multiplication potentials follows 
suppose potential suppose potential read times potential defined follows define marginalization potentials follows 
suppose potential suppose marginal denoted potential defined follows bayesian network model consists connected acyclic digraph set conditional potentials represents set variables denotes set directed arcs pairs variables 
acyclic digraph finite oriented graph multiple arcs directed cycles 
variables directed arc written say child parent pa denotes set parents conditional potentials satisfy condition pa pa pa assumption underlying bayesian network model prior joint probability distribution detailed description bayesian network model see lauritzen spiegelhalter pearl 
chest clinic problem section describe lauritzen spiegelhalter hypothetical chest clinic problem bayesian network model 
shortness breath may due tuberculosis lung cancer bronchitis 
visit asia increases chances tuberculosis smoking known risk factor lung cancer bronchitis 
results single chest ray discriminate lung cancer tuberculosis presence absence 

bayesian network chest clinic problem problem modeled bayesian network shown 
network denotes variable visit asia denotes smoker denotes tuberculosis denotes lung cancer denotes bronchitis denotes tuberculosis lung cancer denotes positive ray denotes 
assume variables binary state spaces 
denote conditional potential variable corresponding greek letter 
denote prior probability distribution denote conditional potential lauritzen spiegelhalter architecture section describe lauritzen spiegelhalter architecture computing marginals 
probabilistic model inferences computing marginal joint probability distribution variables interest 
simplicity assume interested marginal variables 
large number variables computing joint computationally intractable 
conditional potentials small domains compute marginals joint explicitly computing joint 
ls architecture construct join tree called junction tree propagate messages junction tree 
join tree tree nodes subsets variables variable distinct nodes variable node path nodes 
call join tree nodes cliques triangulated moral graph junction tree 
data structure enables local computations potentials domains cliques 
junction tree chest clinic problem shown 

junction tree chest clinic problem associate conditional potential smallest clique contains subset pa 
observations model potentials associate potentials smallest clique includes domain potential 
clique potential associated assume product potentials associated clique 
chest clinic problem suppose evidence patient visited asia 
model evidence potentials 
easy show evidence posterior joint distribution proportional product potentials including pick maximal node junction tree biggest state space root direct edges junction tree root 
propagation lauritzen spiegelhalter architecture done passes inward outward 
inward pass node send message inward neighbor outward pass node sends message outward neighbors 
precise rules follows shafer 
inward pass see 
inward propagation 
rule 
node waits send message inward neighbor received message outward neighbors 
node outward neighbors send message right away 
rule 
node ready send message inward neighbor computes message marginalizing current potential intersection inward neighbor 
sends message inward neighbor divides current potential message 
rule 
node receives message outward neighbor replaces current potential product potential message 
inward pass ends root received message outward neighbors 
outward pass see 
outward propagation rule 
node waits send messages outward neighbors received message inward neighbor 
root inward neighbor send message right away 
rule 
node ready send message outward neighbor computes message marginalizing current potential intersection outward neighbor 
sends message outward neighbor 
rule 
node receives message inward neighbor replaces current potential product potential message 
outward pass ends leaves received messages inward neighbors 
outward pass potential associated clique marginal posterior joint clique normalization constant 
outward pass marginal posterior distribution clique 
stated task computation marginal posterior variable bayes net 
compute marginal variable clique marginal contains variable 
efficient compute marginal smaller clique smallest clique contains variable 
example compute marginal chest clinic problem marginals cliques 
clique smallest number states efficient compute marginal 
course strategy ignores computational cost identifying smallest clique 
hugin architecture section sketch hugin architecture 
initially described computing marginals probability distributions jensen extended lauritzen jensen widely applicable domains satisfy axioms 
start assuming junction tree corresponding probability potentials clique 
introduce storage register cliques domain intersection cliques 
call storage register separator 
pick node root 
propagation hugin architecture done passes inward outward 
inward pass node send message inward neighbor outward pass node sends message outward neighbors 
hugin architecture inward pass sender divide message 
save separator 
requires space saves computations see shortly 
outward pass separator divides outward message message stored passing multiplied potential receiving node 
notice division done separator smaller state space cliques 
assume separator corresponding identity potential potential val ues identically domain separator inward action outward 
precise rules follows shafer 
inward propagation hugin architecture rule 
non root node waits send message neighbor received messages neighbors 
rule 
root waits send messages neighbors received messages 
rule 
node ready send message particular neighbor computes message marginalizing current potential intersection neighbor sends message separator neighbor 
rule 
separator receives message new nodes divides message current potential old sends quotient new old node replaces old new 
rule 
node receives message replaces current potential product potential message 

outward propagation hugin architecture rules force propagation move root back 
propagation potentials nodes separators marginals posterior joint denotes initial potentials clique nodes 
suppose set cliques set separators 
inward pass outward pass step propagation process 
compute marginal variable marginal smallest separator contains variable 
separator contains variable compute marginal clique contains variable 
ls architecture strategy ignores computational cost identifying smallest separator clique contains variable 
shenoy shafer architecture section sketch shenoy shafer architecture illustrate chest clinic problem 
shenoy shafer architecture start collection potentials define joint distribution 
domains potentials form hypergraph 
chest clinic problem start set potentials hypergraph 
step shenoy shafer architecture arrange subsets binary join tree 
binary join tree join tree node neighbors 
binary join tree construction process motivated idea fusion shenoy called peeling idea combinations done binary basis multiply potentials time 
binary join tree data structure designed cache computation reduce computation involved combination marginalization 
binary join tree hypergraph chest clinic problem shown 
shenoy describes formal procedure constructing binary join tree 
general binary join tree duplicate subsets 
pair duplicate nodes neighbors merging nodes increase number neighbors merged node merge duplicated nodes node 
get binary join tree call condensed binary join tree 
general may able get rid duplicate nodes shenoy 
notice condensed binary join tree obtained may singleton subsets 
ss architecture compute marginals subset join tree 
assume interested computing marginals singleton subsets 
important singleton subsets binary join tree 
step attach singleton subsets condensed binary join tree 
singleton subset included binary join tree ways 
shenoy describe method designed minimize number computations required compute marginal singleton subset 
short find smallest subset contains variable trying attach 
subsets select minimizes number computations required compute marginal node attach singleton subset 
attaching singleton subset binary tree nonbinary tree binary making copies node neighbors distributing neighbors equally copies putting edge copies 
chest clinic example procedure gives binary join tree shown 

binary join tree chest clinic problem oa binary join tree contains singleton subsets associate potential subsets binary join tree corresponds domain 
node tree needs compute marginal requests message neighbors 
messages computed rule follows 
rule computing messages suppose neighbors suppose requested message turn requests messages neighbors received messages computes message follows 
informally message node sends neighbor combination messages receives neighbors potential marginalized formally suppose denotes message suppose denotes neighbors binary join tree suppose denotes probability potential associated node message node neighboring node computed follows notice leaf join tree neighbor received request message send right away waiting messages 
node needs compute marginal requested received messages neighbors computes desired marginal rule follows 
rule computing marginals node received message neighbors combines messages probability potential reports results marginal 
denotes joint potential 
shenoy shafer architecture join tree nodes ar node binary join tree zero storage registers input probability potential reporting marginal joint marginal node desired 
edge separator join tree storage registers messages direction 
shows storage architecture simple join tree nodes 
nodes assumed input potential 
assume desire marginal nodes 
notice domain separator chest clinic problem suppose desire marginals variables problem 
achieve suppose singleton nodes binary join tree request message neighbors 
notice messages computed 
example message sb computed requested node 
notice ls hugin architectures division operations ss architecture 
notice ls hugin architectures input potentials remain unchanged propagation process ss architecture 
notice marginal joint potential variable computed corresponding singleton variable node binary join tree 
comparison section compare architectures 
focus attention graphical structure message propagation message passing scheme computational efficiency storage efficiency architecture 
architectures assume start bayesian network representation problem evidence observations likelihoods variables 
task compute marginals posterior distribution variables problem 
graphical structures message propagation 
ls hugin architectures propagation potentials done junction tree 
ss architecture propagation potentials done binary join tree 
nodes junction tree cliques triangulated moral graph original bayesian network 
corresponding binary join tree includes cliques subsets cliques 
binary join tree nodes corresponding junction tree 
example chest clinic problem junction tree shown nodes corresponding binary join tree shown nodes 
notice start binary join tree condense absorbing adjacent nodes subsets supersets get call corresponding junction tree junction tree yields marginals cliques ls architecture marginals cliques separators hugin architecture 
stated task compute marginals singleton variables computation needed architectures 
ls architecture marginal variable computed efficiently marginal smallest clique containing variable 
hugin architecture variable belongs separator marginal variable computed efficiently smallest separator containing variable 
variable belong separator marginal computed efficiently clique containing variable 
ss architecture include singleton subsets construction binary join tree graphical structure yields marginals singletons message passing stage 
necessary junction trees ls hugin architectures 
join tree including binary join trees 
message passing schemes architectures inefficient respect computation storage implement message passing schemes join trees nodes 
specific aspect discuss computational efficiencies architectures 
necessary binary join tree ss architecture 
join tree including junction trees 
computational penalty non binary join trees junction trees ss message passing scheme 
reasons ls architecture associated junction trees hugin architecture associated junction tree separators ss architecture associated binary join trees constructed manner described shenoy 
message passing schemes 
ls architecture designate maximal clique largest state space junction tree root 
propagation messages done stages inward phase clique send message inward neighbor outward phase clique sends message outward neighbors 
evidence potential representation 
outward phase clique marginals 
clique junction tree stores potential 
computations done clique junction tree 
hugin architecture designate node root 
clique sends message separators neighbors 
separator receives message neighboring clique sends message neighboring clique 
times joint potential equal product potentials cliques divided product potentials separators 
messages sent potential clique separator marginal joint node 
clique separator junction tree stores potential 
computations done clique separator junction tree 
ss architecture nodes marginals desired request messages neighbors 
node receives request message turn requests messages neighbors 
requested messages delivered marginals computed desired nodes 
node may store potential potential input output potentials input output 
edge separator nodes may store potentials 
computations done nodes separators 
restricted study article bayesian networks architectures applicable widely 
lauritzen jensen described axioms generalize ls hugin architecture domains 
axioms include axioms proposed shenoy shafer 
natural question generally applicable architectures 
shenoy shafer architecture division operation clear shenoy shafer architecture widely applicable hugin architecture 
example problem fast retraction proposed cowell david handled architectures probabilistic domain 
fast retraction handled non probabilistic domains hugin architectures axioms satisfied lauritzen jensen 
fast retraction easily handled shenoy shafer architecture lauritzen shenoy 
example system finite number logical formulae definition combination marginalization st rk 
ss architecture compute marginals 
natural definition division operation system ls hugin architecture compute marginals 
computational efficiencies 
traditional study worst case order magnitude complexity computational algorithms 
perspective essential differences architectures 
architectures compute marginals local computation 
worst case computational complexity algorithms exponential size variables maximal clique 
look computational efficiencies architectures crude measure binary arithmetic operations additions multiplications divisions clear crude measure describe actual computational efficiency 
measure include operations table lookups comparisons read write memory construction graphical data structure methodology follows 
randomly generate bayesian networks controlling parameters number variables maximum distance node neighbors ordering consistent arrows bayes net maximum number parents children variable added bayes net maximum state space variables maximum number variables observations 
number parents children node added bayes net selected randomly interval 
size state space variable network selected randomly interval 
number variables evidence observations likelihoods chosen randomly interval 
algorithm generate random bayes nets inequality total number neighbors 
generate junction trees ls hugin architectures binary join trees ss architecture making sure maximal subsets cliques join trees generated 
count binary arithmetic operations required architecture computing marginals variable network 
table shows number binary arithmetic operations required architectures randomly generated bayes nets 
corresponding join trees bayes nets formulae counting operations 
hugin architecture fewer additions ls architecture 
computation marginals singleton variables done clique marginals ls architecture hugin architecture done separator marginals variables clique marginals variables 
notice including computational cost identifying smallest clique ls architecture cost finding smallest separator clique hugin architecture part process compiling bayes net junction tree similar optimization ss architecture adding singleton subsets condensed binary join tree 
second ls hugin architectures number multiplications 
hugin architecture adaptation ls architecture surprising aspect architectures 
third hugin architecture fewer divisions ls architecture 
hugin architecture divisions separator ls architecture divisions cliques 
major motivation led hugin architecture 
hugin architecture computationally efficient ls architecture restrict comparison ss architecture hugin architecture 
comparing hugin ss architectures table notice bayes nets generated total number operations ss architecture hugin architecture 
number table 
binary arithmetic operations sample problems binary arithmetic operations architecture ls hugin ss random bayes net variables total operations variables total operations variables total operations variables total operations variables total operations variables total operations variables total operations variables total operations variables total operations variables total operations nodes total number operations depends strongly parameter maximum size state space variable parameter influences sizes cliques 
fully compare architectures average case generated random bayes nets fixed set parameters computed average total number operations architectures 
combinations parameters 
results shown table 
average ss uses fewer operations hugin 
variables larger state spaces difference hugin ss greater 
hugin requires approximately computations ss 
hugin requires approximately 
results contradict popular perception hugin efficient architecture computing marginals 
tables assuming division equal addition division equal multiplication 
true processors 
example intel pentium mmx mhz microprocessor division double precision takes approximately time multiplications 
motorola powerpc mhz microprocessor division double precision takes approximately time multiplications 
sun sparc processor division double precision takes approximately time multiplications 
ss architecture divisions factors add computational efficiency ss architecture 
guarantee doing binary multiplications junction tree hugin architecture multiplications done ss architecture binary join tree multiplications done binary basis 
notice hugin propagation done join tree assuming start clique marginal representation joint probability distribution 
computations done node separator computational penalty introducing additional nodes separators 
example chest clinic problem evidence hugin propagation binary join tree shown requires additions multiplications divisions total operations compared additions multiplications divisions total operations details see shenoy 
clearly hugin architecture junction tree efficient binary join tree 
improve junction tree data structure ls hugin architectures 
kong kj suggest new data structures 
study nested junction tree data structure suggested kj 
join trees suggested kong efficient ls hugin architectures junction trees studied 
introduce separator node neighboring nodes 
hugin architecture defined separator node exactly neighboring nodes 
course consider separator nodes kong join trees ordinary nodes 
case get join tree similar binary join trees considered sense join tree nodes junction tree seen efficient hugin architecture junction trees 
ss propagation done join tree assuming start evidence potential representation joint probability distribution 
computations done separator computations done node depends number neighbors may computational penalty arbitrary join trees 
example chest clinic problem evidence ss propagation junction tree shown requires additions multiplications total operations compared additions multiplications total operations binary join tree details see shenoy 
clearly ss architecture binary join tree efficient junction tree junction tree binary join tree 
notice restrict cliques guarantee find junction tree binary join tree 
join tree construction procedures proposed ss architecture see pp 
systematic study efficiency methods 
conjecture binary join table 
average case analysis computational efficiencies architectures random bayes nets average total binary operations random cases max 
size state space variables ls hugin ss variables variables variables variables variables variables variables variables variables variables variables variables variables variables variables variables variables variables tree construction process described article produces join trees efficient ss architecture produced kong procedure guarantee produce binary join trees 
storage efficiencies 
ls architecture clique junction tree stores potential 
total storage requirements depend number cliques junction tree state spaces cliques 
propagating messages junction trees get new piece evidence start input evidence potentials 
user may want edit input evidence potentials 
reasons include storage requirements input evidence potentials 
outward propagation marginals cliques 
stated task computation marginals variable 
marginals computed clique marginals 
include storage requirements storing marginals variable 
hugin architecture clique junction tree stores potential 
separator adjacent cliques stores potential 
user may need edit input evidence potentials 
need stored separately 
include storage space storing input evidence potentials 
messages computed marginals cliques separators 
need compute marginals singleton variables 
include storage space marginals variable 
ss architecture node may zero potentials 
node input potential singleton node marginal desired node potentials 
node input potential marginal node desired zero potentials 
cases potential input potential output potential 
regard edge adjacent nodes separator separator potentials depending messages requested 
adjacent nodes request messages separator store potentials 
message requested separator store potential 
general easy see assuming working junction tree hugin architecture storage requirements ls architecture storage separators 
comparing storage requirements hugin ss architectures general results 
binary join tree nodes corresponding junction tree node binary join tree potential associated 
input evidence potential included architectures output potentials included architectures 
differences storage due storage cliques separators hugin architecture storage separators ss architecture 
hugin architecture separators include exactly potential ss architecture separators include potentials usually lot separators binary join trees corresponding junction trees 
clique junction tree stores potential potentials ss architecture 
chest clinic example ss architecture storage ls hugin architectures 
easy construct artificial problem ss architecture storage ls hugin architectures 
consider bayes net disease variable symptom variables shown 
suppose pieces evidence nodes respectively 
junction tree binary join tree shown 
suppose variables states 
architectures storage input evidence output potentials 
ls architecture storage cliques junction tree 
hugin architecture total storage cliques separator 
ss architecture total storage separators 
problem ss storage ls hugin architectures 
storage analysis doesn take account runtime working memory required computing messages 
ss architecture marginalizing operation combine messages state space subset node 
ss architecture need add size state space largest subset join tree count 
study required compare storage efficiencies hugin ss architectures 
task remains done 
conjecture study storage requirements randomly generated bayes nets average hugin architecture storage efficient ss architecture 
comparing ls hugin architectures hugin computational efficient ls ls 
bayes net junction tree binary join tree storage efficient hugin 
sense hugin sacrifices storage efficiency achieve better computational efficiency 
average ss computationally efficient hugin 
conjecture average hugin storage efficient ss 
task remains done 
study ignores dynamics aspects computing marginals 
example suppose computed marginals singleton subsets get new item evidence 
necessary recompute messages 
architectures compute revised marginals re computing messages 
detailed study efficiency updating marginals task remains done 
started project kj proposed new data structure called nested junction trees hugin ss architectures schmidt shenoy proposed improvements ss hugin architectures 
results take account fully new proposed changes 
task remains done 
acknowledgments authors grateful support encouragement professor rg 
especially grateful robert st rk norbert lehmann help project 
benefited comments suggestions bernard roman rolf rg yves paul andre dennis nilsson schmidt anonymous referees 

graphical belief modeling chapman hall london 
kong optimality issues constructing markov tree graphical models research report department statistics university chicago chicago il 
thompson skolnick probability functions complex pedigrees advances applied probability 
cowell dawid fast retraction evidence probabilistic expert system statistics computing 
jensen olesen andersen algebra bayesian belief universes knowledgebased systems networks 
jensen lauritzen olesen bayesian updating causal probabilistic networks local computation computational statistics quarterly 
kj 
nested junction trees geiger shenoy eds uncertainty artificial intelligence proceedings thirteenth conference morgan kaufmann san francisco ca 
st rk information algebras information systems working institute informatics university fribourg fribourg switzerland 
lauritzen spiegelhalter local computations probabilities graphical structures application expert systems discussion journal royal statistical society series 
lauritzen jensen local computation valuations commutative semigroup technical report 
institute electronic systems department mathematics computer science aalborg university aalborg denmark 

performance architectures local computations bayesian networks phd dissertation institute informatics university fribourg fribourg switzerland preparation 
shenoy comparison architectures exact computation marginals working school business university kansas lawrence ks 
lauritzen shenoy computing marginals local computation working school business university kansas lawrence ks 
pearl 
fusion propagation structuring belief networks artificial intelligence 
schmidt shenoy improvements shenoy shafer hugin architectures computing marginals artificial intelligence press 
shafer 
probabilistic expert systems society industrial applied mathematics philadelphia pa shenoy 
valuation systems framework managing uncertainty expert systems zadeh eds fuzzy logic management uncertainty john wiley sons new york ny 
shenoy 
binary join trees computing marginals shenoy shafer architecture international journal approximate reasoning 
shenoy shafer propagating belief functions local computation ieee expert 
shenoy shafer axioms probability belief function propagation shachter levitt lemmer kanal eds uncertainty artificial intelligence north holland amsterdam 
