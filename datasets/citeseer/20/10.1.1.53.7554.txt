dynamic voltage scaling design low power microprocessor system trevor pering tom robert brodersen university california berkeley electronics research laboratory pering rb eecs berkeley edu eecs berkeley edu pering describes design low power microprocessor system run mhz mhz 
ramifications dynamic voltage scaling allows processor dynamically alter operating voltage run time description system design approach benchmarking 
addition depth discussion cache memory system 

design goal implementation lowpower microprocessor embedded systems 
estimated processor consume mw mhz mw mhz cmos process 
discusses system design cache optimization processor dynamic voltage scaling dvs ability 
cmos design energy operation equation switched capacitance operating voltage 
minimize aggressive low power design techniques reduce dvs optimize system design addresses complete microprocessor system just processor core section 
benchmark suite designed dvs embedded system section 
section discusses issues involved implementation dvs section presents depth discussion cache design 
basic goal dvs quickly adjust processor operating voltage run time minimum level performance required application 
continually adapting varying performance demands application energy efficiency maximized 
main difference design strongarm power performance target system targets ultra low power consumption moderate performance strongarm targets moderate power consumption high performance 
processor core arm architecture virtually identical strongarm 
similarities differences designs highlighted 

system overview effectively optimize system energy necessary consider critical components little benefit optimizing microprocessor core required elements dominate energy consumption 
reason included microprocessor core data cache processor bus external sram design seen 
energy consumed system shown completely application device dependent scope 
expected power distribution system 
reduce energy consumption memory system highly optimized sram design data bits wide requiring device op cv op system block diagram proc 
core unified cache sram sram sram sram dvs components fixed voltage components bridge cache sram core processor bus system energy breakdown activated access 
schemes multiple narrow width require multiple devices activated access resulting significant increases energy consumption 
alleviate high pin count problem bit memory devices multiplex data address bit lines data words 
custom designed high efficiency nonlinear switching voltage regulator generate dynamic supply voltages 
efficient regulator crucial efficient system energy consumed regulator 
switching linear regulator realize energy savings reduction afforded design 
threshold voltage significantly effects energy performance cmos circuit 
design uses achieve balance performance energy consumption 
strongarm comparison uses increases performance expense increased static power consumption 
idle strongarm reported consume mw predicted power consumption processor running mhz 
idle estimate processor consume order magnitude improvement 

benchmarks benchmark suite targets pdas embedded applications 
benchmark suites spec appropriate uses batch oriented target high performance workstations 
dvs evaluation requires benchmarking workload idle characteristics possible batch oriented benchmarks 
additionally target device order mb memory lacks system support required heavy weight benchmarks running spec target device simply impractical 
feel benchmarks needed adequately represent range workloads embedded systems audio decryption mpeg decoding user interfaces java interpreter web browser graphics primitive rendering writing implemented characteristics summarized table 
idle time represents portion system idle time dvs algorithms 
bus activity column reports fraction active cycles external processor bus important metric optimizing cache system 
cache architecture generate table discussed section 
example shows event impulse graph help characterize programs dvs analysis 
impulse represents mpeg frame indicates amount necessary process frame 
example fixed frame rate calculate optimal processor speed frame assuming outstanding frame time 

dynamic voltage scaling processor ability termed dynamic voltage scaling dvs alter execution voltage operation 
ability allows processor operate optimal energy efficiency point realize significant energy savings applications 
section discusses dvs design considerations explains affects architectural performance evaluations 
dvs combines equations sub micron cmos design energy operation maximum clock frequency operating voltage 
minimize energy consumed task reduce affecting reduction reduction shown second equation results corresponding decrease simple example effects 
reducing actual processor clock reducing reduce energy consumed processor task 
benchmark rate idle time bus activity audio mpeg ui table benchmark characterization event delay ms event number mpeg event delays mpeg event impulse graph op max vv op max op max clk strongarm example allows dynamically altered operation affecting linear reduction power consumed 
change causes linear increase task runtime causing energy task remain constant 
system runs minimizes energy consumed task 
software perspective abstracted away voltage parameter specify operating point terms actual voltage determined feedback loop driven simple ring oscillator 
primary reason design ease hardware implementation fortunately presents useful software interface 
system applies dynamic voltage entire system realize savings components 
possible multiple independent supply voltages independently meet subsystem performance requirements 
attempted design 
interface dvs incompatible external components custom designed level converting circuits 
implementation dvs requires application voltage scheduling algorithms 
algorithms discussed section monitor current expected state system determine optimal operating voltage frequency 
energy performance evaluation dvs dvs affect way analyze architectural trade offs 
example explore interaction dvs arm thumb instruction set 
apply thumb mpeg benchmark section analyze energy consumed 
example assumes bit memory system valid assumption high performance systems necessarily embedded designs 
mpeg benchmark idle running mhz bit arm instruction set 
dvs allows minimize operating voltage fill unnecessary idle time 
order approximation reduce energy consumed slow processor clock point idle time zero 
starting point consider application thumb instruction set benchmark 
typical programs bit thumb instruction set dense bit counterpart reducing energy consumed cache memory hierarchy 
due reduced functionality number instructions executed increases roughly increasing energy dissipated processor core task execution time 
example teach important lessons 
increase task delay directly relates increase energy dvs exposes trade energy performance 
second increase delay affects entire system core cache just fragment vital associated increase energy operation applied entire system 
presents metrics crossed configurations running mpeg benchmark 
configurations base mhz bit instructions 
thumb mhz thumb instructions 
adjusted mhz thumb instructions 
base configuration represents mpeg benchmark running bit code discussed 
thumb illustrates intermediate effects bit thumb architecture increasing clock speed 
energy consumed cache see decreases due decreased memory bandwidth caused smaller code size 
energy core rises slightly due increased number instructions processed 
energy decreases approximately 
delay increase caused expanded instruction stream pushes processor utilization 
mpeg application able process video frames fast 
adjusted configuration represents increase processor speed required maintain performance 
change clock frequency necessitates increase voltage raises energy operation entire system 
seen total energy columns energy savings longer realized bit architecture increases energy consumption 
energy efficient situations thumb instruction set may efficient tasks due non linearity voltage scaling 
base system initially running low voltage example increase processor speed necessary dramatically increase energy operation 
savings due reduced code size affect decrease system energy 
voltage scheduling effectively control dvs voltage scheduler dynamically adjust processor speed volt clk clk clk max max proc 
utilization proc 
speed energy op 
cache energy core energy total energy dvs example base thumb adjusted processor utilization processor speed energy operation cache energy core energy total energy age run time 
voltage scheduling significantly complicates scheduling task allows optimization processor clock rate 
voltage schedulers analyze current past state system order predict workload processor 
interval voltage schedulers simple techniques periodically analyze system utilization global level direct knowledge individual threads programs needed 
preceding time interval greater active example algorithm increase processors speed voltage time interval 
analyze effectiveness scheduling technique variety workloads 
interval scheduling advantage easy implement difficulty incorrectly predicting workloads 
investigation begun thread voltage schedulers require knowledge individual thread deadlines computation required 
information thread schedulers calculate optimal speed voltage setting resulting minimized energy consumption 
sample deadline voltage scheduling graph represent task start time deadline respectively graph area represents computational resources required 
circuit level considerations circuit level types components design adversely affected dvs complex logic gates memory sense amps 
complex logic gates input nand gates implemented cmos transistor chain different relative delay voltage varied 
additionally memory sense amps sensitive voltage variations analog nature necessary detect small voltage fluctuations memory cells 
largest extent possible voltage sensitive circuits avoided situations cache cam design described better redesign required components increased tolerance 
components efficient slower original version running fixed voltage 
estimate increase average energy instruction microprocessor order justified savings afforded dvs 

cache design section describes design cache system kb unified way set associative read allocate write back cache byte line size 
cache important component optimize consumes roughly system power central system performance 
primary design goal optimize low power maintaining performance cache analysis layout capacitance estimates aggregated benchmark statistics 
kb cache divided individual kb blocks 
kb block size chosen achieve balance block access energy global routing energy 
increasing block size decrease capacitance global routing increase energy access individual blocks 
cache geometry similar strongarm split kb kb instruction data cache 
features way associative cam array similar 
strongarm design caches consume approximately system power 
basic cache structure discovered cam cache design implementation efficient traditional set associative organization terms power performance 
fundamental drawback traditional design energy access scales linearly associativity multiple tags data fetched simultaneously maintain cycle time 
direct mapped cache extremely energy efficient performance unacceptable 
estimate energy way set associative design comparable way set associative traditional design 
voltage scheduling graph processor speed time data block implemented cam cache design cam tag array address word lines design modified vanilla cam major ways narrow memory bank fundamental sram data block design organized word row block word row block 
inhibited tag checks back back accesses mapping cache line trigger multiple tag checks 
word row block organization cache data chosen primarily large block width increase energy access data block 
block width words example effectively entail fetching words access wasteful words 
narrow block width unfortunately causes irregular physical layout increasing total cache area chose design energy primary concern 
natural lower bounds block width 
physical implementation sram block inherent minimum width words 
second arm architecture capability double bandwidth instruction fetches data reads lends word access implementation 
unnecessary tag checks waste energy inhibited temporally sequential accesses map cache line 
signal provided processor core small number access bits condition detected full address comparison 
simulations indicate tag checks avoided word cache line size aggregated instruction data accesses 
individual instruction data streams tag checks prevented respectively 
cache policies geometry cache energy roughly logarithmic relationship respect size due selective block enabling kb cache consumes little energy kb cache 
fundamental cache size constraint die cost determined primarily cache area 
benchmark simulations indicate kb unified cache sufficient felt increased cost kb cache justified 
chose unified cache compatible arm architecture 
cache line size wide ranging impact energy efficiency analysis indicates word line size optimal workload 
kb block size associativity inversely proportional line size word line yields way associativity kb words way 
energy cam tag access roughly linear associativity 
smaller cache line sizes generate external bus traffic consuming energy 
energy data memory practically constant slight variations caused updates due cache misses 
implement write back cache minimize external bus traffic 
simulations indicate write cache increase external bus traffic approximately increasing energy entire system 
observable performance difference policies 
simulations find significant evidence read allocate terms energy performance implement read allocate simplify internal implementation 
similarly find round robin replacement performance comparable lru random replacement due large associativity 
related low power cache literature suggests improvements standard set associative cache model 
architectural improvements proposed center concepts sub banking row buffering 
sub banking retrieves required portion cache line saving energy fetching data 
row buffering fetches saves entire cache line avoid unnecessary traditional set associative cache design tag mem data block tag mem data block block select address line size percent system energy line size energy breakdown data block cam access external memory tag comparisons 
cam cache design indirectly implements concepts sub banking row buffering 
word block size memory bank similar word sub banking 
tag checks inhibition similar row buffering tag check required cache line access 
presents technique reducing energy cam tlbs restricting effective associativity parallel tag compare modifying internal cam block 
due time constraints modifications considered design 

describes implementation low power dynamic voltage scaling dvs microprocessor 
analysis encompasses entire microprocessor system including memory hierarchy processor core 
custom benchmark suite appropriate target application portable embedded system 
dynamic voltage scaling allows processor operate maximal efficiency limiting peak performance 
understanding fluid relationship energy performance crucial making architectural design decisions 
new class algorithms termed voltage schedulers required effectively control dvs 
description cache design presents architectural circuit trade offs energy performance application domain 
minimized energy consumption cam cache design energy efficient traditional set associative configuration 
acknowledgments funded darpa possible cooperation advanced risc machines arm 
authors eric anderson kim keeton tom proofreading help 

arm data sheet document number arm advanced risc machines july 
brodersen energy efficient cmos microprocessor design proc 
th hawaii int conf 
system sciences 
chandrakasan burstein brodersen low power chipset portable multimedia terminal ieee journal solid state circuits vol 
december 
thumb reducing cost bit risc performance portable consumer applications ieee computer society international conference 
chan wasserman comparing algorithms dynamic speed setting lowpower cpu proc 
annual int conf 
mobile computing networking 
hicks owens analysis power consumption memory hierarchies proc 
int symp 
low power electronics design 
voltage scheduling problem dynamically variable voltage processors proc 
int symp 
low power electronics design 
juan lang navarro reducing tlb power requirements proc 
int symp 
low power electronics design 
analytical energy dissipation models low power caches proc 
int symp 
low power electronics design 
variable supply voltage scheme low power high speed cmos digital design ieee journal solid state circuits vol 
march 
mhz cmos risc microprocessor ieee int solid state circuits conf 
pering brodersen energy efficient voltage scheduling real time operating systems th ieee real time technology applications symposium works progress session 
pering brodersen simulation evaluation dynamic voltage scaling algorithms proc 
int symp 
low power electronics design 
sanders brodersen cmos dc dc converter portable battery operated system th annual ieee power electronics specialists conference 
su despain cache designs energy efficiency proc 
th hawaii int conf 
system sciences 
itsy open platform pocket computing presentation digital equipment western research laboratory 
weiser computer science issues ubiquitous computing communications acm vol 
july 
