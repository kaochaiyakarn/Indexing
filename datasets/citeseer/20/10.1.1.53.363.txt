quick compilers peephole optimization jack davidson david whalley department computer science university virginia charlottesville va summary machine modeling popular technique developing portable compilers 
compiler quickly realized translating machine operations target machine operations 
problem compilers trade execution efficiency portability 
typically code emitted compilers runs times slower code generated compilers employ sophisticated code generators 
describes compiler uses machine modeling achieve portability 
emitted target machine code improved simple classical rule directed peephole optimizer 
experiments compiler machines show small number general hand written patterns yields code comparable code compilers sophisticated code generators 
added bonus compilation time machines reduced percent 
key words code generation compilers peephole optimization portability popular method building portable compiler machine modeling technique compiler front emits code machine 
compiler particular machine realized constructing back translates machine operations semantically equivalent sequences operations 
technique simplifies construction compiler number ways 
divides compiler defined functional units front back 
second carefully designing machine support single source language code generation front trivial 
third front largely machine independent compiler new machine realized simply supplying new back 
machine modeling simplifies construction retargetable compiler emitted code usually substantially inferior code produced compiler constructed sophisticated code generator 
describes portable compiler uses machine modeling portability simple rule directed peephole optimizer produce reasonable object code 
compiler ported machines 
interesting aspect compiler machines including complex machine large number addressing modes operations peephole optimization rules required produce code comparable code emitted compilers sophisticated code generators 
furthermore davidson whalley machines compiler percent faster sophisticated ones 
front front compiler called vpcc portable compiler supports full programming language defined kernighan ritchie vpcc emits code hypothetical machine called cvm virtual machine 
cvm design motivated large extent principles arguments design evident reduced number machine operations 
cvm contains simple operators 
pascal cvm specifically designed implementation compilers interpreters 
general purpose machine 
complete description virtual machine appears appendix real risc machines cvm stack architecture opposed register architecture 
architecture provides instructions manipulating distinct stacks 
instructions manipulate values evaluation stack stack 
second stack called stack support calling sequence 
instructions call ret access stack 
separate stacks permit back ends pure stack machines register machines constructed easily 
section discusses mapping cvm real machine 
small machine language front number advantages code generation vpcc trivial 
reduced nature machine means code generator forgo case analysis typically necessary emit special case operators 
code verbose simple produce 
simplicity machine reduces effort required map machine target machine 
front emits code virtual machine retargeting front new machine requires relatively little effort 
defined constants changed reflect sizes integers floating double precision numbers pointers 
addition conditional compilation select order evaluation arguments functions best matches calling sequence supported target machine 
shows cvm code produced vpcc simple function computes length string 
quick compilers peephole optimization int slen char int return 
string length function seg text segment func int slen function slen dcl ptr char param declare parameter block dcl int auto declare local source stmt con int push addr int auto push address int store procedure prologue code label label addr ptr char param push address ptr char dereference dup ptr char duplicate top stack con int push int ptr char convert pointer ptr char add addr ptr char param push address ptr char store char dereference con char push char equal jump label addr int auto push address int dereference con int push int add addr int auto push address int store goto jump label label label addr int auto push address int dereference return int return value caller function 
example cvm code emitted vpcc code back back translates cvm operators machine specific assembly language 
cvm operator represents cases simple operation mapping cvm instructions target machine instructions usually trivial 
strategies map cvm code target machine 
strategy davidson whalley map stack stack cvm run time stack target machine 
back western electric constructed approach couple advantages strategy 
mapping cvm operators target machine instructions straightforward 
second approach require register allocator 
disadvantage register machines resulting code inefficient stack result target machine code memory 
machines adequate number allocable registers second strategy map stack target machine registers 
mapping bit difficult code generated substantially efficient 
shows assembly code produced string length function vax back uses strategy 
text change text segment align align byte slen declare slen global slen word slen mask containing registers slen subl slen sp adjust stack pointer locals slen set define symbol set define symbol movl load fp load address movl store location pointed ap load address movl load value movl move movl load addl add ap load address movl store location pointed movb load byte location pointed movb load byte compare bytes equal jump fp load address movl load value movl load addl add fp load address movl store location pointed jump fp load addr movl load value ret return caller ret return caller set slen define symbol slen 
set slen define register save mask save 
assembly code emitted vax back quick compilers peephole optimization back maps cvm stack registers 
function registers required compile function 
back uses registers possible need saved function calls 
alive call encountered contents copied register saved 
possible peephole optimizer replace load copy instruction load directly destination register copy instruction 
possibility depth stack exceed number registers available 
occurs back issues error message identifies source statement caused problem 
permits offending statement split simpler statements 
practice exceeding number available registers rarely occurs 
year vax back run registers 
strategy number machines success 
include machines different types registers motorola machines registers special uses intel 
changing implementation cvm operators manipulate stack strategies possible 
example target machine small number registers supports operations permit operands registers memory back easily run time stack registers exhausted 
similarly dedicated area activation record simulate stack 
choice implementation depends target machine characteristics effort willing invest implementing appropriate cvm instructions 
back consists set functions cvm instruction 
retarget compiler new machine functions modified emit assembly language performs indicated function 
machines modification simple changing sprintf statements construct assembly code statements 
peephole optimizer technique emitting code machine expanding assembly language particular machine yields compiler quickly easily retargeted new machine 
serious problems 
code produced compiler quite slow 
example code produced vpcc back vax runs times slower code produced berkeley bsd davidson whalley compiler 
second compiler runs slowly 
assembly phase compiler takes long time due verbosity emitted code 
slow compilation times particularly serious compiler students case fast compilation important fast execution 
solve problems simple rule directed peephole optimizer constructed improve naive machine code emitted compiler 
optimizer operates applying set optimization rules generated code 
optimization rules optimization rule consists parts pattern match pattern replace matched portion input 
example rule vax pattern match movl movl pattern replace replaces load address load indirect instruction single equivalent instruction 
notation digit specifies pattern matches occurrence pattern character 
addition limited form regular expressions notation 
example specifies pattern matches single characters 
occurrences denote string 
instance example line pattern second line pattern match string 
rule include semantic action performs check conversion input 
rule invert invert reverses sense condition specified branch 
example rule transform vax code sequence jne 
ability include simple semantic functions part rule permits single rule handle cases 
quick compilers peephole optimization previous example rule handles conditional branches 
applying rules assembly language instruction emitted back inserted doubly linked list 
instruction added back invokes peephole optimizer 
matching replacements occur point linked list marked cursor 
individual lines pattern match portion rule matched input reverse order 
example vax rule movl addl addl applied addl portion rule matched instruction cursor 
pattern matches matching continues previous line rule previous instruction linked list 
failure occurs point pattern matching rule list rules applied 
rules match control returns back inserts instruction linked list advances cursor optimizer 
entire pattern portion rule matches input instructions cursor correspond pattern match portion rule deleted replacement pattern instantiated inserted linked list 
cursor set point instruction corresponds line replacement pattern matching continues applying rule 
permits new patterns introduced replacement optimized 
previous string length function shows code produced vpcc peephole optimizer enabled 
terms instruction selection emitted code improved substantially 
davidson whalley text change text segment align align byte slen declare slen global slen word slen mask containing registers subl slen sp adjust stack pointer locals set define symbol set define symbol fp store movl ap load addl ap add store back test value location pointed equal zero jump incl fp add jump movl fp load ret return caller ret return caller set slen define symbol slen 
set slen define save mask save registers 
code produced vpcc vax compiling rules peephole optimizer originally implemented interpreter 
interpretative application rules input resulted compilers ran slow 
consequently translator compiles rules code implemented 
simple change resulted reduction cpu time required optimize program 
compilation rule code applies pattern input straightforward 
vax rule optimizes move zero clear instruction mov clr compiled quick compilers peephole optimization pat line goto pat try rule arg goto pat try rule arg replacement line arg arg goto pat rule successful start pat code subsequent rules follow simple character comparisons match portions pattern contain fixed characters 
portions pattern matched scanning forward character follows scanned characters copied array arg 
permits strings matched input replacement pattern 
example substrings matching copied arg arg respectively create replacement instructions 
example rule match rule applied 
practice unnecessary 
consider rule motorola 
lea movl movl rule replaces load effective address instruction followed load indirect load direct instruction 
matching movl pattern fails match input subsequent rules pattern begins fail 
waste time attempting match rules rule compiler determines rule attempt rule fails 
vax measurements benchmark programs revealed average rules attempted successful optimization rules possible tried unsuccessful attempt perform optimization 
numbers indicate compile compile time analysis performed rule compiler worthwhile 
davidson whalley vax optimization rules compiled routine consisting lines resulted object file bytes 
sizes text data bss segments compiler bytes respectively resulting total size bytes 
system compiler text data bss segments bytes respectively resulting total size bytes 
sun optimization rules resulted line program compiled byte object file 
text data bss sections compiler bytes respectively resulting total size bytes 
sun compiler text data bss sections measured bytes respectively 
total size compiler bytes 
compiling optimization rules code seriously affect size compiler 
results course experimenting vpcc optimizer vax discovered compiler surprisingly small number rules able generate code code generated standard compiler incorporates sophisticated code generator 
compiler pcc uses algorithm produce assembly code target machine table contains data comparing compilation execution times compilers 
order compare code generators runs runs reported table optimization phases vendor supplied compilers option pcc compilers disabled 
analyzing results thought orthogonality regularity vax instruction set assembly language allowed small number rules capture large percentage optimizations necessary produce code 
test true compilers additional machines constructed approach 
new machines sun motorola rules tektronix workstation national semiconductor rules intel rules 
table compares ports vpcc compilers vendors 
appendix ii contains complete rule set tektronix workstation 
sun compiler distributed sunos 
tektronix compiler distributed compiler microsoft compiler version 
sun tektronix compilers appear derivatives pcc 
code generation algorithms documented microsoft compiler uses code generator quick compilers peephole optimization developed house compile time execution time program cc vpcc vpcc cc cc vpcc vpcc cc puzzle grep matmult od merge qsort bubble vax average compile time execution time program cc vpcc vpcc cc cc vpcc vpcc cc puzzle grep matmult od merge qsort bubble sun average compile time execution time program cc vpcc vpcc cc cc vpcc vpcc cc puzzle grep matmult od merge qsort bubble tektronix average compile time execution time program cc vpcc vpcc cc cc vpcc vpcc cc puzzle grep matmult od merge qsort bubble average table 
comparison compilation execution times programs produce table ones determine optimization rules machine 
determine rules deduced training set sufficient second set programs davidson whalley selected benchmarked 
execution times programs comparisons native compilers table 
numbers indicate small number rules deduced benchmark programs sufficient produce relatively compiler 
execution time execution time program cc vpcc vpcc cc program cc vpcc vpcc cc cache cache lex lex keyword keyword mincost mincost acker acker sieve sieve vax average sun average execution time execution time program cc vpcc vpcc cc program cc vpcc vpcc cc cache cache lex lex keyword keyword mincost mincost acker acker sieve sieve tektronix average average table 
comparison execution times code produced vpcc compiler peephole optimizer improved mechanism combining instructions physically adjacent 
examinations emitted code previous studies shown result improvements emitted code faster compilation times 
order perform optimizations optimizer need perform flow analysis identify dead variables 
extra mechanisms required consistent goal quick simple way produce reasonable compiler 
quick compilers peephole optimization discussion caveats building compiler techniques described straightforward way implement fast compiler produces reasonably code 
number situations compilers 
educational environment compilation speed important execution speed 
educational settings characterized wide variety hardware budgets purchase software limited 
techniques described useful experimenting new languages developing new machines 
ability quickly build compiler permits experiments performed software quickly bootstrapped new machine 
approach build highly optimizing compiler 
approach conceptually practice simple caveats mentioned 
problem optimization rules interact resulting production poor code 
interactions avoided simple modification certain rules 
example machines typical interaction caused rule convert move constant zero clear instruction rules involving move instructions 
consider vax rules mov clr mov mov mov instructions movl movl fp emitted code generator move zero optimized clear instruction recall optimizations take place linked list 
second instruction emitted added linked list peephole optimizer invoked rule apply longer applicable 
solutions problem 
obvious solution add extra rules handle special situations 
example rule davidson whalley clr mov clr handle previous situation 
solution requires extra rules delay optimizations forcing match context available 
previous situation handled specifying rule handle clear instructions mov clr placing rule optimizes move instructions 
clear rule matched second instruction seen permits rules listed applied 
help determine actions optimizer rule compiler directed emit code rule matching routines records number times rule successfully applied 
information identify rules useful ordering rules 
second serious problem approach tempting spend time sifting emitted code looking new rules 
experience done amusement necessity 
certain satisfaction discovering new clever optimization rules may applied infrequently 
useful optimization rules generally obvious determined knowledge code generator emits code 
comparison lamb describes peephole optimizer similar described 
optimizer improve code emitted prototype ada compiler generated code vax 
optimization rules compiled set subroutines matched various pattern portions rule 
vax rules resulted subroutines 
noted extra rules necessary handle similar situations 
example vax optimizer required rules handle various types clear instructions 
language specifying rules handles type situation simply efficiently 
production version lamb optimizer constructed felt optimizer run quite fast 
experi ada registered trademark government ada joint program office 
quick compilers peephole optimization ment confirm 
davidson fraser describe fast rule directed peephole optimizer rules inferred automatically running training set peephole optimizer driven machine description 
advantage approach rules derived automatically 
disadvantage essentially compilers built operates machine description uses rules 
second constructed automatically completed 
final result thorough fast peephole optimizer 
amsterdam compiler kit peephole optimizers replace traditional code generator 
manner similar compiler described front emits code machine 
machine called em encoding machine models stack machine includes number special case operations increment decrement clear 
em code improved peephole optimizer replaces inefficient sequences em instructions efficient ones 
optimizer driven table pattern replacement pairs rules described 
tanenbaum reports rules em peephole optimizer 
improved machine code processed global optimizer performs number optimizations require larger view program structure back translates optimized machine code target machine instruction sequences 
second machine specific peephole optimizer improves target machine assembly code 
peephole optimizer similar operates em code 
number pattern replacement pairs required various machines reported 
summary described quick technique building simple fast compiler 
compiler code generator implemented simple rule directed peephole optimizer 
optimization rules written simple notation 
machines studied small number optimization rules sufficient construct compilers produced code compared favorably code emitted compilers sophisticated code generation techniques 
added bonus simple compilers smaller generally percent faster complicated counterparts 
davidson whalley nelson fung implemented code generator 
jonathan watts original implementation vpcc 
quick compilers peephole optimization appendix virtual machine instruction set arithmetic operators description pop pop push op pop pop push op unary operators description push op fld push extract field push insert field conversion operators description ot nt convert pointer type ot pointer type nt 
ot nt convert value type ot type nt 
data movement description con con push con addr id class level push addr id push addr addr dup push push swap pop pop push push rotate pop pop pop push push push dst src program control jump description call nargs push environ push retaddr switch switch stmt starting value consecutive values 
goto jump label pop pop pcv pc jne pop pop pcv pc pop pop pcv pc pop pop pcv pc pop pop pcv pc pop pop pcv pc func name class define start function 
ret pop environ push argument transmission description pass addr pass addr pass pseudo operations description code statement file name code generated source file name 
function required bytes locals 
prologue code procedure 
dcl id class level define variable id requires bytes 
dc value initialize memory location value 
label generate local label seg signal start segment notes 
executable opcode followed type indicator 

class denotes scope variable local global 
davidson whalley appendix ii rule set tektronix workstation national semiconductor 

load addr addr fp mov movd mov movd fp 
store addr addr fp mov movd mov movd fp 
store address addr addr fp movd movd fp isvar addr addr fp fp 
register relative load add mov movd mov movd 
register relative store add mov movd mov movd 
mov var mov rf movd mov rf movd fp mov movd fp 
convert var mov xz rf mov rf movd fp isvar mov fp 
convert mov rf movb mov xz rf mov 
memory relative load mov fp movd fp mov movd mov fp movd fp quick compilers peephole optimization 
memory relative store mov fp movd fp mov movd mov fp movd fp 
load binary operation store mov rf movd rf mov rf movd 
add register address add movd movd fp isvar addr addr fp 
special case putchar mov movd movb movb addr addr movd movd movd movd addr addr movb movb movd movd movb movb 
move quick mov movd 
delete useless assignment mov movd 
compare mov rf movd cmp rf cmpd cmp cmpd 
compare mov rf movd cmp rf cmpd cmp cmpd 
special case getchar putchar addr addr movd movd movd movd davidson whalley cmpd cmpd cmpd cmpd 
compare quick cmp cmpd 
call addr addr foo jsr jsr bsr bsr foo 
shift index register addr addr addr addr 
add reg address addr addr addr addr 
index register addr addr 
add offset addr addr addr addr addr 
add quick add addq 
special case getchar addr addr movd movd movd movd addr addr andd andd movd movd movd movd 
reverse compare quick quick compilers peephole optimization cmp cmpd bgt cmpd blt 
add quick minus value sub addq 
negate const move neg mov movd 
bin oper comb mov rf movd rf 
jump comb beq br br bne 
elim dup reg mov rf rf movd mov rf movd fp isvar mov movd fp 
elim reg addr deref movd movd mov movd mov movd davidson whalley 
poole waite machine modelling produce portable software software practice experience 

berry experience pascal compiler software practice experience september 

tanenbaum staveren stevenson practical tool kit making portable compilers communications acm september 

watts construction retargetable language front masters thesis university virginia charlottesville va 

kernighan ritchie programming language prentice hall englewood cliffs nj 

patterson reduced instruction set computers communications acm january 

davidson fraser code selection object code optimization transactions programming languages systems october 

steele code generator computers master project report university virginia charlottesville va august 

johnson tour portable compiler unix programmer manual th edition section january 

johnson portable compiler theory practice proceedings fifth annual symposium principles programming languages tucson az january 

ryan programming language compiler ibm systems journal 

lamb construction peephole optimizer software practice experience june 

davidson fraser automatic inference fast interpretation peephole optimization rules software practice experience november 

bal tanenbaum language machine independent global optimization intermediate code computer language 
