proceedings th international conference software engineering sorrento italy may testtube system selective regression testing research yih chen david rosenblum phong vo software engineering research department bell laboratories mountain avenue murray hill nj usa dsr research att com describes system called testtube combines static dynamic analysis perform selective retesting software systems written testtube identifies functions types variables macros covered test unit test suite 
time system test modified testtube identifies entities changed create new version 
coverage change information testtube selects test units cover changed entities testing new version 
applied testtube selective retesting software systems library source code analyzer 
additionally adapting testtube selective retesting nondeterministic systems main drawback dynamic analysis identification covered entities 
experience testtube quite encouraging observed reduction number test cases needed test typical software changes 
software systems mature maintenance activities dominant 
studies development effort life cycle software system spent maintenance large percentage due testing 
rare event major rewrite maintenance phase changes system usually small correct problems incrementally enhance functionality 
techniques selective software retesting help reduce development time 
clear analogy retesting recompilation software 
examples tools selective recompilation 
tools implement simple strategy recompilation carried source files changed files depend changed files 
similarly test suite typically consists test units exercises covers subset entities system test 
test unit rerun program entities covers changed 
system recompilation dependency program source files specified build scripts makefiles easy identify dependency test unit program entities covers 
computing dependency information requires sophisticated analyses source code execution behavior test units 
fortunately requisite technologies performing analyses available 
describes testtube system selective retesting identifies subset test suite rerun test new version system 
basic idea testtube illustrated 
boxes represent subprograms circles represent variables 
arrows represent static dynamic dependency relationships variable function calls entities system test test units entity tail arrow dependent entity head 
suppose shaded entities modified create new version system test 
naive retest strategy test units rerun order test changes 
analyzing relationships test units entities cover possible eliminate test units regression testing fl ieee system test test test test selective retesting new version 
new version rerun test unit 
number selective retesting techniques previously described literature 
early techniques designed tandem particular strategy generating tests ensuring test adequacy 
yau describe selective retesting technique partition testing 
ostrand weyuker harrold describe selective retesting techniques data flow testing 
approaches system test units analyzed determine test data adequacy criteria test unit satisfies criteria affected modification 
techniques adapted kinds test generation strategies mutation testing adaptation require methods tools support techniques customized chosen strategy instance 
techniques described data flow analysis independently chosen test generation strategy 
data flow techniques employ intraprocedural data flow analysis limits usefulness unit level testing 
furthermore conceivable computational complexity data flow analysis data flow selective retesting costly naive retest approach especially testing large software systems 
tried avoid costs data flow analysis employing slicing techniques 
example slicing technique described gupta conjunction data flow testing identify def pairs affected program edits requiring computation maintenance data flow histories program test units 
testtube techniques attempt reduce testing costs testing entities modified create new versions environment attempts reduce testing costs testing progresses unit level acceptance level 
particular manages integration test cycle lower level test cases exercised stub modules replaced real code 
testtube differs previous approaches number ways 
testtube chosen test generation test suite maintenance strategy note ignore problems generating adequate tests maintaining test suite new versions created 
second analysis employed testtube performed granularity suitable unit level system level testing 
third analysis algorithms employed testtube computationally inexpensive scale retesting large systems large numbers test units 
fourth analysis performed testtube produces purposes selective retesting 
fifth previous research selective retesting ignored problem testing nondeterministic systems real time telecom software begun adapt testtube selective retesting systems 
section discussion conditions testtube correct 
conditions met test suite new version tested testing test units selected testtube provide maximum amount information gained testing test suite 
describe implementation testtube programs section 
section describe experience testtube software systems library source code analysis program 
section discuss testtube employed test nondeterministic systems results library assumption nondeterminism 
results demonstrate tangible benefits doing selective retesting approach 
furthermore results show kinds systems expected maintenance actions favor selective retesting strategy 
conclude section discussion time space overhead testtube discussion plans research 
testtube methodology basic method terminology method underlying testtube simple 
partition software system basic code entities 
entities defined way easily computed source code monitored execution 
monitor execution test unit analyze relationship system test way determine subset code entities covers 
system changed identify set changed entities examine previously computed set covered entities test unit check see changed 
changed test unit need rerun 
test unit rerun set covered entities recomputed 
note notion constitutes change system programming language dependent 
approach works code entities defined partitioning software system done efficiently allowing effective reduction number test cases selected 
extreme testing retest approach simply considering entire software system single code entity 
hand data flow approaches mentioned section treat statement code entity obtain extremely precise information code entities covered test unit 
large cost data flow analysis may overwhelm benefits test reduction 
strike balance consider software system sets entities functions 
ffl functions basic entities execute program semantics creating storing values 
assume action program carried functions 
advantage functions basic code entity readily available profiling tools monitor program execution identify set covered functions 
ffl entities program variables types preprocessor macros 
variables define storage areas functions manipulate 
things types define storage extent variables 
assume storage location potentially manipulated function statically dynamically associated variable 
typically entities directly monitored execution great cost 
deduced source code function call trace 
define program software system composition subsets test unit system defined program fixed input 
fixing input means set functions covered test unit determined single execution 
set functions called set non functional entities functions called safe test skipping working testtube relies premise value creations manipulations program inferred static source code analysis relationships functional non functional entities 
premise valid languages pointer arithmetic type coercion 
case summarize testtube follows proposition test unit software system changes elements view input comprising input data values environment effects signals 
changed need rerun new version languages simple infer value manipulations just analyzing variables pointers functions 
example code uses type coercion convert integer value address value creation value memory store associated visible variable 
char problem languages allow arbitrary pointer arithmetic pointers may violate memory extents areas point 
means values may manipulated ways amenable source code analysis 
example pointer expression xp points memory extent defined variable address stored variable xp 
hardware compiler architectures may fact point memory area defined value changed referring int int xp 
xp account memory violations assume hypotheses hypothesis defined memory memory segment accessed identifiable symbolically defined variable 
hypothesis bounded pointer pointer variable pointer expression refer base variable bounded extent memory segment defined variable 
applications written languages defined memory assumption reasonable 
seldom case needs esoteric constructs coerce plain integer value address value programs require direct manipulation hardware addresses device drivers 
cases required addresses represented integer values usually separated memory space occupied normal variables 
need worry values variables changed mentioning variable names 
addition maintainability values assigned symbolic names macros amenable source code analysis 
hand bounded pointer hypothesis fails real programs due memory overwrite stray pointer faults 
faults hardest detect isolate remove 
number research techniques commercial tools available help detect faults see austin purify 
fault detected testing attempt identify entities affected fault example memory overwrites confined functions cause 
affected entities identified entities added set changed entities identified testtube current round testing 
extreme cases effects faults difficult determine assumed parts memory potentially damaged test units rerun order ensure thorough testing code exercises fault 
successful testtube depends quick removal faults propagate version version 
software system successfully grown maintenance phase hopefully faults 
implementation testtube programs designed implemented version testtube number existing analysis tools 
collection tools partitioned categories ffl instrumentation tools system source code automatically instrumented app annotation preprocessor 
instrumentation causes run test unit produce function trace list set functions covered defined section 
ffl program database tools version system test program database built information cia 
database contains information entities system comprises dependency relationships 
test unit testtube tool uses program database expand function trace list entity trace list set defined section 
versions source code testtube tool uses cia tool analyze corresponding program databases produces entity difference list 
ffl test selection tools tools provided assist selective retesting 
tool checks see intersection entity difference list entity trace list test unit test units nonempty intersections rerun 
estimate retesting cost tool computes list test units need rerun certain specified entities changed 
finds entities covered existing test suite 
entities recognized cia functions variables including pointers base variables preprocessor macros types files global entities entity declaration definition boundaries recorded 
entity considered changed token sequence tokens constitute entity changed 
cia database provides right code entity partition required testtube methodology 
rest section illustrates testtube tools test suite incl program detecting removing unnecessary include directives programs directives incorporate interface header files programs 
test units incl 
instrumented version incl app built cia database 
generated entity trace list test unit 
lists stored files names clo 
note initialization step necessary version incl 
versions entity trace lists test units rerun need updated 
built cia program database version incl 
example shows run compare databases contained directories respectively store entity difference list tt dfl 
tt dfl printed cat show program entities changed version version tt dfl cat tt dfl function incl function incl function incl macro incl ran check intersections tt dfl clo files 
output showed existing test units incl rerun clo files regenerated tt dfl clo rerun test rerun test rerun test rerun test possible predict testing cost implied set changes manually constructing hypothetical tt dfl file tool simplifies process 
cia entity pattern specifies entity kind regular expression match names entities kind identifies test units rerun matching program entities changed 
example query finds list functions defined incl names print lists test units cover output query shows changes different functions incur different testing costs function print file incl clo incl rerun test rerun test incl rerun test incl rerun test incl rerun test incl rerun test incl rerun test incl rerun test rerun test rerun test rerun test incl rerun test rerun test entity trace lists provided testtube aid evaluating adequacy test suite 
cia entity pattern finds entities matching pattern entity trace list 
example command finds functions incl covered test units specifier cia entity pattern wild card matches entity names 
function clo covered incl tree tree util util util fatal seen cia tool finds delete truly incl code test units added test suite function tree function completes illustration testtube tools code 
tools require redesigning existing test suites manually modifying code 
driven data readily obtainable program analysis tools app cia 
furthermore dependency program analysis tools removed 
example project uses tracing tool provide function trace lists program executions need instrument code app 
minimal textual transformation output tool testtube 
true cia 
outputs generated testtube analysis tools find applications selective retesting 
particular cia databases software projects study program structure eliminate dead program entities skip unnecessary header files compilation 
experience section describe experience applying testtube system level regression testing software systems 
library sfio testtube programming library called sfio safe fast input output replacement standard unix library stdio 
sfio contains number facilities creating manipulating streams including stacks streams user defined disciplines 
version sfio studied contains roughly lines code exports functions application programs 
analysis revealed library source code contains preprocessor macro definitions function definitions definitions global variables type definitions total entities defined library 
library contains various kinds function function variable type pairs entities 
suite test units test sfio 
test unit program function main sequences calls library covers subset entities library 
instance analysis test test disciplines sfio reveals coverage functions variables types macros sfio 
test sfio test program compiled linked library executed execution results validated test units 
goal sfio flesh details selective retesting method testtube supports ensure testtube tools provide required functionality 
instrumented library test programs app executed capture function trace lists 
addition built cia database library generate entity trace lists 
second version sfio perform selective retesting tool simulate minor maintenance sfio 
done determining function defined sfio test programs rerun function changed 
table presents sample results sfio 
table presents data functions exported library 
expected amount retesting required single modification depends heavily function modified 
interesting table functions require retesting functions changed maintenance 
particular observe exported functions sfio fall roughly groups core functions feature functions 
core functions provide basic functionality library nearly application programs feature functions specialized 
example virtually sfio applications create initialize streams applications stack 
core functions heavily design implementation stabilize early development 
hand feature functions changed adapt new requirements functionality may thoroughly tested 
maintenance library tend involve feature functions 
table function number function number function number changed tests changed tests changed tests table retesting required changing single function sfio test units 
shows maintenance require relatively little retesting favorable selective retesting strategy 
experience needed validate hypotheses 
tool incl second testtube involved tool incl described section 
studied versions incl containing roughly lines code providing command line options govern output format extent search performed 
analysis revealed source code version incl contains preprocessor macro definitions function definitions definitions global variables type definitions total entities defined tool 
tool contains various kinds pairs entities 
suite test units test incl 
test unit unix shell script invokes incl number command line options 
test incl shell script executed execution results compared automatically previously stored copies expected results 
goal incl determine reduction achieved regression testing version incl created version modify output formats 
illustrated section creation version involved changing function definitions macro definition additions deletions entities 
ran tool shell scripts test incl rerun test version producing reduction number test cases needed test new version 
illustrated section ran tools gather statistics effects minor maintenance incl entities incl source code covered test scripts 
results confirmed phenomena observed sfio regard core functions feature functions 
core functions define identifies header files contain variable function definitions exercised nearly tests feature functions called presence command line option requesting output tool dag exercised tests 
furthermore revealed key functions covered test script additional tests constructed test functions 
retesting nondeterministic systems major issue addressed mentioned section nondeterminism software system affects selective regression testing system 
certainly desirable design test units predictable behaviors outputs order control testing process difficult entirely eliminate nondeterminism results occurrences exceptions signals reading input files terminals checking values shell environment variables 
furthermore hard real time applications telecommunications switching software produce variety subtle behavior differences different runs test unit 
means techniques rely runtime tracing execution paths function call activity analyzing single trace test unit run may sufficient identify paths entities potentially covered test unit 
code instrumentation provides tracing produce unacceptable interference required timing behavior systems 
begun study number techniques overcoming deficiencies testtube 
techniques partitioned cases 
simpler case involves unit testing driver programs system testing libraries sfio test unit program containing func tion main calls system test 
case generating function trace list test unit dynamic tracing necessary statically compute transitive closure entities reachable main order identify functions potentially callable run test unit 
library sfio fits simpler case studied assumption nondeterminism 
repeated analysis described section potentially callable functions identified transitive closure search relationships starting function main test unit 
transitive closure search performed cia tool identified reachable variable type macro definitions addition potentially callable functions 
table presents results functions table 
numbers changed little table functions identify feature functions 
numbers increased dramatically functions identify core functions 
interpret table confirmation hypothesis regarding core feature functions observe modification core functions nondeterministic system require full retesting system test units 
difficult case testing nondeterministic systems system test contains function main performing transitive closure search perform simpler case course find function system dead code entities 
simpler case described suggests ways handle 
instance test unit person knowledgeable system identify number appropriate non main root functions system test transitive closure search 
point selective retesting systems testtube remove ad hoc analysis regression testing approach undesirable 
systems main deterministic driver root functions may better approach test unit generate trace function call activity single run test unit perform transitive closure search non main function appearing trace 
approach automates analysis inadequate systems certain kinds nondeterministic features signal handling 
systems remains seen extent test cases safely eliminated 
described system called testtube implements selective regression testing method dynamic static analysis software system test units 
experiences sfio incl verify tangible benefits derived selective retesting technique 
furthermore data sections suggest expected maintenance actions kinds systems favor selective retesting strategy 
particular maintenance actions typically perfection enhancement specialized feature functions resulting modifications require relatively small amounts retesting 
choice analysis methods selective retesting strategy governed spectrum tradeoffs desired detail accuracy analysis time space costs required perform analysis 
instance data flow analysis provide information system granularity source code statement relatively poor time complexity may prohibitive analysis large systems 
comparison previous selective retesting techniques testtube employs relatively coarse grained analysis system test producing reasonable practical tradeoff granularity analysis time space complexity 
phase testtube instrumentation program database construction test selection contributes amount overhead selective retesting 
instrumentation app dynamic tracing typically increases object code size compilation linking uninstrumented system libraries usually reduces space cost fully linked executable 
furthermore runtime cost generating trace insignificant may case low bandwidth devices collect trace embedded real time system 
construction cia database requires times disk space original source code time needed compile source code 
note projects app assertion processing cia source code analysis incurring costs 
rest overhead testtube comes test selection tools 
produces output linear size number changed components 
test selection tools currently naive algorithms computations determined minimum expected costs tools 
function number function number function number changed tests changed tests changed tests table retesting required changing single function sfio test units nondeterministic case 
phase space overhead time overhead instrumentation object code program database source code compile time test selection test units test units theta 
changed entities table overhead testtube selective regression testing 
table presents summary current overhead testtube selective regression testing 
note easy bypass tracing code minimal runtime cost field grade release system projects choose release instrumented code customers incur additional complete recompilation 
plan evaluate testtube cost model developed leung white 
currently exploring number related research issues 
integration testtube testing tools 
experience projects project testing organization uses unique set test generation methods test planning management methods testing tools 
generalizing interface testtube wide array testing environments presents significant challenge making testtube usable mainstream testing organizations 
intend study ways applying testtube analysis methods reduce cost testing improve adequacy test suite enhance source code quality 
instance tool quickly identify source code entities covered test suite new tests designed 
different direction mature system large amount retesting results small code changes code may modularized 
information supplied help identify ways architecture modularity code improved 
current practice testing typically carried late development cycle testers separated code developers 
reason prohibitively large cost running entire test suite code changed precludes frequent testing 
equally onerous reason lack code sharing inhibits individual developers having complete view system 
test minimization technology testtube combination code sharing technology file system possible shift burden testing software developers able test changes complete copies system test minimal cost 
goal need design software development environments processes code tests shared easily 
studies underway large software projects helping evaluate effectiveness testtube gain experience kinds testing problems regression testing real time switching systems manually run call processing scenarios 
acknowledgments development testtube aided immensely various discussions kent clapp brian rick greer randy dave korn todd steve poller filip elaine weyuker ray 
dave kent clapp brian emden gansner elaine weyuker gave helpful comments manuscript 
todd austin scott breach sohi 
efficient detection pointer array access errors 
technical report tr computer sciences department university wisconsin madison december 
cimitile de 
testing path change analysis 
proceedings conference software maintenance pages 
ieee computer society october 
david binkley 
semantic differencing reduce cost regression testing 
proceedings conference software maintenance pages 
ieee computer society november 
yih chen 
program database applications 
proceedings summer usenix conference pages 
usenix association june 
yih chen michael ramamoorthy 
information abstraction system 
ieee transactions software engineering se march 
stuart feldman 
program maintaining computer programs 
software practice experience march 
kurt fischer andrew 
methodology retesting modified software 
proceedings national telecommunications conference volume pages 
ieee november december 
fowler 
fourth generation 
proceedings usenix summer conference pages june 
gansner north vo 
dag program draws directed graphs 
software practice experience november 
rajiv gupta mary jean harrold mary lou soffa 
approach regression testing slicing 
proceedings conference software maintenance pages 
ieee computer society november 
mary jean harrold rajiv gupta mary lou soffa 
methodology controlling size test suite 
acm transactions software engineering methodology july 
mary jean harrold mary lou soffa 
incremental approach unit testing maintenance 
proceedings conference software maintenance pages 
ieee computer society october 
jean hartmann david robson 
techniques selective revalidation 
ieee software january 
reed hastings bob joyce 
purify fast detection memory leaks access errors 
proceedings winter usenix conference pages 
usenix association january 
gail kaiser perry william schell 
fusing integration test management change management 
proceedings th international computer software applications conference compsac pages 
ieee computer society september 
david korn eduardo 
new dimension unix file system 
software practice experience june 
david korn phong vo 
sfio safe fast string file io 
proceedings summer usenix conference pages 
usenix association june 
leung lee white 
cost model compare regression test strategies 
proceedings conference software maintenance pages 
ieee computer society october 
bennet burton swanson 
software maintenance management 
addison wesley 
myers 
art software testing 
wiley interscience 
thomas ostrand elaine weyuker 
data flow analysis regression testing 
proceedings sixth annual pacific northwest software quality conference september 
david rosenblum 
method programming assertions 
proceedings th international conference software engineering pages 
association computing machinery may 
phong vo yih chen 
incl tool analyze include files 
proceedings summer usenix conference pages 
usenix association june 
stephen yau 
method modified programs maintenance phase 
proceedings th international computer software applications conference compsac pages 
ieee computer society october 
