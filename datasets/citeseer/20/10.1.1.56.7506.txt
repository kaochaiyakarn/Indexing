proof theoretic assessment runtime type errors bell laboratories technical memo tm november carl gunter bell laboratories university pennsylvania didier emy inria rocquencourt analyze way result concerning absence runtime type errors expressed semantics language described proof rules called natural semantics 
argue usual way expressing results conceptual short compared similar results methods describing semantics 
short addressed form operational semantics proof rules call partial proof semantics 
partial proof semantics represents steps evaluation proofs logic variables subgoals 
semantics allows expression absence runtime type errors addresses problems results natural semantics 
demonstrate close correspondence partial proof semantics form structural operational semantics uses grammar describe evaluation contexts rules evaluation redexes may appear contexts 
partial proof semantics seen intermediary description natural semantics 
study case treatment language called ravl records variants language polymorphic type system supports flexible programming records variants 
runtime type errors natural semantics primary purposes imposing type discipline programming language ensure absence certain forms data incompatibilities occur runtime evaluation ill typed program 
instance problem occurs procedure call actual parameter fails proper form demanded formal parameter procedure 
guarantee runtime safety expressed precisely proved rigorously clean language design 
earliest examples treatment appeared milner mil introducing type system forms basis standard meta language sml mth mt 
similar results stated proved subsequent language designs involving types semantic specifications 
goal study relationships various approaches results perspective basis describing new form operational specification possible provide proof theoretic expression guarantees obtained type correctness program 
wright felleisen wf surveys literature results runtime type errors taken background discussion focuses form results semantics sml mth 
term natural semantics form specification rules look natural deduction see survey gun discussion 
example natural semantics rules describe call value evaluation evaluation local definitions bindings fun fun arrow fun app basic judgements form term program value typically defined term normal form viewed result evaluating binary relation defined relation satisfying collection rules 
example app rule viewed asserting result applying provided judgments hold evaluates value fun value result substituting evaluates sequential languages specified way possible show 
semantics expressed form theorem runtime type errors expressed providing rules illustrating errors arise showing type correct programs raise type errors approach example 
rules forms termed error origination propogation rules 
typical examples procedure error fun error error error distinguished value type 
rule indicates error raised originated operator application evaluated term fails form fun rule indicates evaluation argument procedure raises error application raises error 
proves type correct program raise runtime error showing subject reduction holds type oe type oe 
follows error error type oe 
approach directly express errors avoided due type correctness program ad hoc manner 
see mean note particular choice error rules determines exactly theorem indicating absence runtime errors means 
example rule error error consequence adding result stronger theorem asserting type correct program evaluate error 
formulating assertion runtime errors avoided result type correctness attention paid important origination propogation rules may omitted unclear rules chosen mechanically 
similar decisions kind semantic formulation milner mil 
contrasted kind result may assert structural operational semantics sos describe operational semantics programs 
semantics sequence steps evaluation transitions delta delta delta said evaluate just case value shows value 
formulation theorem asserting type correct programs runtime type errors says sequence relations holds type correct term value 
means evaluation sequence extended extended term sequence normal form 
way rules example possibility form value procedure non value rule applies 
intuitively type correctness term natural semantics assures rule applied term searching value evaluates 
generally term search proof proposition value analogy sos suggests type correctness implies proof search blocked subgoals 
remaining sections describe viewed proper analogy case transition system formalizing sense search proof natural semantics transition semantics partially completed proofs system call partial proof semantics 
absence runtime type errors setting described proof theoretically saying legitimately formed partial proof evaluation typed program total proof value developed applying additional proof steps subgoals 
illustrate partial proof semantics viewed intermediary natural semantics shares characteristic computation viewed search proof form sos defined combining rules reduction redexes grammar evaluation contexts 
treatment partial proof semantics done case illustration language called ravl polymorphic type system supports flexible programming records variants 
language typical new language proposals absence runtime type errors key design issue 
ravl similar languages record calculi type system intended ensure type correct field selection record raise runtime error due absence field ensure case analysis variant value covers possible cases 
rule operational significance error reported evaluation operator diverges 
similar propogation rule operator operational semantics programs appear non sequential 
ravl language programming records variants considerable interest developing programming languages strong static typechecking provide better treatment programming records languages developed 
seminal research john reynolds rey luca cardelli car car showed way achieve substantial degree subtyping relation types 
mitchell wand wan proposed pleasing calculus manipulation records 
system parametric polymorphism concept row variable provide desired flexibility offered prospect type inference 
subsequently proposals similar systems including machiavelli language atsushi ohori system didier emy em ml language jategaonkar mitchell jm 
ravl language introduced similar languages studied em em em 
new language records variants language ravl 
basic design goals ravl summarized follows 
ravl upwards compatible functional core fragment ml 
ravl statically inferred polymorphic typing system 
type safety properties ravl similar hold ml 
ravl provides intuitive flexible constructs manipulation records variants 
ravl theoretical language spirit languages studied cardelli milner 
ravl implemented efficiently believe acceptable concrete syntax possible 
syntax types terms 
collection symbols called labels tags variants field names records 
symbols labels finite sets labels 
typing system ravl composed syntax classes types rows schemes 
symbols syntax classes summarized follows ffl oe range types ff fi fl type variables ffl ae ranges rows row variables ffl range attendance variables 
types defined inductively collection operators 
operators signature indicating number arguments operator sorts arguments sorts types rows 
ffl type variable ff type expression ffl oe type expression oe type expressions ffl type expression ffl type expression ffl oe ae type expression type operator type arguments oe row arguments ae attendance arguments oe oe oe ae ae ae rows definition ffl row variable row ffl abs row ffl ae fag row attendance row 
definition ffl attendance variable attendance ffl abs attendance ffl pre oe attendance oe type 
definition ravl relative collection recursive type equations ff ff 
fm ff fm ff ff type free variables lie ff write oe ae type obtained simultaneously substituting types oe ae variables ff respectively expression 
usual type scheme type quantified variable followed type scheme 
syntax types summarized pseudo bnf grammar table 
table syntax ravl types oe ff oe oe oe ae abs ae fag abs pre oe oe ff rows defined rule scheme instantiated finite set labels 
labels grammar language context sensitive 
superscripts row expressions intended exclude expressions pi field defined twice pi pi fag 
occurrences row variable preceded set labels possibly various different orders 
labels inside row omitted outermost superscript 
particular case row expression embedded type expression 
convenient write pi example writing pi fag way expressing rules concerning formation expressions treat types sorted algebra em 
expressions rows taken modulo left commutativity ae fa bg ae fa bg distributivity abs abs abs fag ordinarily omit labels expressions write ae ae abs abs abs language expressions defined bnf grammar table 
typing judgments table syntax ravl terms 
fun intro elim fg fm mg tag tag case tag form list assertions full list rules appendix rules listed fall groups 
rules damas milner type inference ml 
second rules macqueen sethi treatment recursive types elimination constructors 
third rules records variants special ravl 
ravl expressive ml possible perform ml style type inference terms 
omit details result obtained arguments em em 
natural semantics 
natural semantics presents evaluation language set rules inferring binary relation programs values 
intuitive flexible way describe evaluator language particular rules provide formal definition ml standard mth 
sketch describe natural semantics ravl 
goal define binary relation terms special class terms called values 
values defined grammar table 
indicated right column name set values corresponding shape 
letters range values 
table syntax values normal values fun function values intro intro values fg fr ug record values tag variant values non error rules section taken rules semantics ravl 
examples record part language look follows fr ug project fr project fm ng fr ug extend type errors sos mentioned earlier possible formulate theorem concerning absence runtime errors transition semantics right kind 
look sos ravl style urged wright felleisen wf 
seen instance term rewriting grammar evaluation contexts control order redexes term reduced 
ravl evaluation contexts listed table 
evaluation contexts slightly general left right right left evaluation application describe call value evaluation 
sos ravl obtained connecting evaluation contexts reduction rules redexes table rule gamma 
gamma 
asserts term evaluates step evaluation context forms respectively terms gamma 
possible show resulting reduction system deterministic sense 
suppose gamma 
transitive closure gamma 
theorem gamma 
gamma 
values renaming bound variables 
result proved demonstrating local confluence 
result difficult evaluation contexts embedded 
theorem states precisely desired property 
theorem oe gamma 
term gamma 
value 
table evaluation contexts intro elim fe mg fm tag case tag tag table redex rules fun gamma gamma elim intro gamma 
fv ug gamma 
fv ug gamma 
fv ug gamma 
fv ug gamma fv ug case tag tag gamma case tag tag gamma tag tag gamma viewed guarantee safety runtime errors type correct programs proved demonstrating subject reduction holds 
reduction contexts permitted stronger subject reduction lemma safe evaluation easy consequence reduction lemma 
interesting prove subject reduction general semantics non deterministic result deterministic semantics obtained restricting evaluation contexts corollary safe evaluation theorem follow easily 
ravl proved subject reduction lemma full calculus contexts admissible 
partial proof semantics turn question result expressed system proof rules opposed transitions 
get intuition capture rigorously consider calculate result evaluating program language described natural semantics 
example application evaluated step evaluation may come application rule app 
means necessary calculate values combine term obtained substitution involving values evaluate term 
calculation involves subgoal variable value subgoal essentially corresponds clause grammar evaluation contexts table form delta delta delta delta delta delta values may view situation redex analogous fi reduction rule table 
semantics describe relations written analogous clauses grammar evaluation sos call rules apply search rules 
second analogous rules redex reduction sos call redex rules 
rules search redex rules combined 
call style semantic description partial proof semantics pps 
example consider rules associated application partial proof semantics ravl 
search redex rules respectively app fun app variables range syntax class partial values consists values grammar table logic variables idea logic variable represents unknown value determined resolution subgoals proof 
rule form value indicates value related 
additional rules apply formation subgoals leaves partial evaluation tree result evaluation variable subgoal full set pps rules ravl appendix 
definitions needed rules clear 
grammar terms ravl expanded include new syntax class logic variables denoted example program expanded grammar fx term logic variables said total program ones semantics particularly interests 
similarly refer values defined table total values 
recall letters range total values 
table letters range specific shapes values 
shown types values match values function types function values values recursive types intro values 
logic variables drawn new syntax class letters range logic variables 
partial value total value logic variable total values partial values contain logic variables 
partial proof viewed way representing intermediate steps search proof relation form logic variables 
proof said total logic variables said partial 
shown proof form total value logic variables 
subgoal leaf form total shown proof subgoals logic variables 
pps search proof viewed sequence proofs gamma 
gamma 
delta delta delta gamma 
partial proof form obtained resolving extending subgoals search viewed complete terminated proof total form total value 
examples may help illustrate idea 
partial proof logic variables ffg fun xg ffg fun xg refinement partial proof obtained carrying steps left subgoal ffg fun xg ffg fun xg fg fg fun fun ffg fun xg ffg fun xg ffg fun xg ffg fun xg logic variable replaced total value fun accordance redex rule project proof total 
constrast consider search proof program type correct 
step partial evaluation fg fun partial proof fg fun extended fg fg fun fun fg fun proof total remaining subgoal match rules way refining total proof continuing effort resolve subgoal 
theorem asserting absence runtime errors pps says situation occur type correct programs 
care taken names logic variables subgoals stating desired result resolution subgoals partial proof involving type correct program 
problem occur variable different subgoals 
example partial proof form instance app unwanted connection results evaluating simple technical restriction resolves problem 
partial proof said linear logic variables appearing subgoals distinct 
putting way linear proofs logic variable appears exactly subgoal 
lemmas theorem express desired manner similar sos 
lemma confluence ravl term suppose proofs stronger sense equivalent lemma sos approach proofs identified 
different choices reduction order expressed different ways parts proof completed 
local confluence proved full calculus proof difficult sos redexes 
local confluence determinism required type safety useful properties semantics 
operational semantics ravl order evaluation argument function confluence lemma says deterministic 
languages states concurrency leaving order evaluation unspecified semantics nondeterministic program language return answers 
central results lemma subject reduction oe total programs typed 
total oe 
theorem safe evaluation suppose oe linear 
extends total implies total 
discussion course shown sos pps specifications ravl equivalent 
primary difference pps rules derive evaluation relation sos describes evaluation relation transitive closure redex reduction relation 
possible modify sos description rules serve role evaluation contexts 
example pair rules suffice place clause delta delta delta delta delta delta table gamma 
gamma 
gamma 
gamma 
resulting formulation ones plo connection sos rules pps clear 
primary significance pps comes ability express intermediate stages search proof evaluation relation pps proofs similar spirit goal stack structures goal directed theorem proving differ allowing restricted form proposition fact theorem proved known proof complete result evaluation constructed proof 
ideally prefered retain natural semantics rules simply introduce logic variables subgoals technical difficulties force distinction search redex rules 
see problem arises suppose expressed app follows app rule applicable right hypothesis allowing infinite regress partial resolutions application subgoals 
permit infinite proof search arise divergent evaluation invalidate property total proofs uniquely determined 
basic ideas pps appeared programming languages semantics 
howe studies meta theory natural semantic proofs 
includes notion logic variables natural semantics linearity restriction 
howe restriction proof search basically effect relations 
somewhat similar idea embodied logic programming constructs freeze constrain wait declarations nai 
constructs restrain clause logic variables instantiated 
merit pps relative approaches semantics programming languages 
stressed pps provides link natural semantics sos ravl necessary determine robustness specification technique kinds languages 
example presentation sos evaluation contexts convenient describing semantics control features pps share lack property 
semantics state concurrency 
questions occupy investigations pps specification formalism 
acknowledge remarks val breazu tannen inspired think problem expressing freedom runtime errors natural semantics style useful conversations amy felty gunter doug howe xavier leroy luc fernando pereira 
gunter research partially supported nsf int onr young investigator 
abadi cardelli pierce plotkin 
dynamic typing statically typed language 
transactions programming languages systems april 
preliminary version proceedings sixteenth annual acm symposium principles programming languages austin tx january 
car cardelli 
semantics multiple inheritance 
kahn macqueen plotkin editors semantics data types pages 
lecture notes computer science vol 
springer 
car cardelli 
semantics multiple inheritance 
information computation 
gun gunter 
forms semantic specification 
bulletin european association theoretical computer science 
douglas howe 
computational open martin lof type theory 
proceedings sixth annual symposium logic computer science pages 
ieee computer society 
jm jategaonkar mitchell 
ml extended pattern matching subtypes 
cartwright editor symposium lisp functional programming pages 
acm 
mil milner 
theory type polymorphism programming 
journal computer system sciences 
mt milner tofte 
commentary standard ml 
mit press 
mth milner tofte harper 
definition standard ml 
mit press 
nai naish 
negation control prolog volume lecture notes computer science 
springer 
ohori buneman breazu tannen 
programming machiavelli polymorphic language static type inference 
sigmod conference management data pages 
acm 
plo plotkin 
structural approach operational semantics 
technical report fn computer science department aarhus university ny munkegade dk aarhus denmark 
em didier emy 
records variants natural extension ml 
sixteenth annual symposium principles programming languages 
em didier emy 
alg 
application au des objects dans les langages 
th ese de doctorat universit de paris 
em didier emy 
type inference records natural extension ml 
carl gunter john mitchell editors theoretical aspects object oriented programming 
types semantics language design 
mit press 
rey reynolds 
category theory design implicit conversions generic operators 
jones editor semantics directed compiler generation pages 
lecture notes computer science vol 
springer 
wan mitchell wand 
complete type inference simple objects 
gries editor second symposium logic computer science pages ithaca new york june 
ieee computer society press 
wf wright felleisen 
syntactic approach type soundness 
technical report comp tr department computer rice university 
typing rules ravl ff intro ff ff oe ff ae elim var oe fun fun oe oe oe app oe oe oe oe equal oe ae rec intro oe ae oe ae rec elim oe ae empty fg pi abs pi abs ae oe extend fm ng pi pre oe ae pi oe ae restrict pi abs ae pi pre oe ae project oe oe tag tag sigma pre oe ae sigma pre oe abs oe tag sigma pre oe ae oe sigma ae case case tag partial proof semantics ravl search rules fun fun fun app intro intro intro elim elim elim fg empty fg fu vg extend fm ng restrict project tag tag tag case tag case case tag tag tag redex rules app fun elim elim intro fv ug project fv ug fg fg fv ug fv ug restrict fv ug case tag tag case tag case tag tag tag tag rules subgoal subgoal value 
