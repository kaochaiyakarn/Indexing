genetic algorithm database query optimization kristin bennett michael ferris computer sciences department university wisconsin west dayton street madison wisconsin yannis ioannidis current query optimization techniques inadequate support emerging database applications 
outline database query optimization problem describe adaptation genetic algorithm problem 
method encoding arbitrary binary trees chromosomes describe crossover operators chromosomes 
preliminary computational comparisons current best known method query optimization indicate promising approach 
particular output quality time needed produce solutions comparable general better current method 
genetic algorithms widely accepted method difficult optimization problems 
describe implementation genetic algorithm ga problem database query optimization 
order give careful formulation ga give broad outline particular application 
key success database management system dbms especially relational model effectiveness query optimization module system 
input module internal representation query dbms user 
purpose select efficient strategy algorithm access relevant data answer query 
set strategies appropriate answer query member associated cost measured terms cpu time 
goal optimization algorithm find member satisfies min query optimization active area research development relational dbmss 
surveys query optimization related issues 
relational model data organized relations collections similar pieces information called tuples 
relations data units referenced queries processed internally 
strategy answer query sequence relational algebra operators applied relations database eventually produces answer cost strategy sum costs processing individual operator 
operators difficult process optimize join denoted 
essentially takes input relations combines tuples certain criteria produces new relation output 
join associative commutative number alternative strategies answer query grows exponentially number joins 
dbms usually supports variety join methods algorithms processing individual joins variety indices data structures accessing individual relations increase options 
query optimization algorithms primarily deal join queries 
focus 
current applications query usually involves small number relations 
exponential number joins size strategy space manageable 
commercial database systems variations query optimization algorithm performs exhaustive search space alternative strategies possible uses heuristics reduce size space 
algorithm proposed system prototype dbms refer system algorithm 
current query optimization techniques inadequate support needs newest database application domains artificial intelligence expert deductive dbmss cad cam engineering dbmss disciplines scientific dbmss 
simply put queries complex number operands diversity complexity operators query 
greatly exacerbates difficulty exploring space strategies demands new techniques developed 
proposed solutions randomized algorithms 
simulated annealing iterative improvement phase optimization combination successfully tried query optimization giving ample reason believe ga perform 
operators studies adapted ga incorporated standard ga code 
advantage version ga designed parallel architecture significant computational savings randomized methods obtained parallel implementation 
organized follows 
section defines strategy spaces interest query optimization experiments 
contains description system algorithm basis comparison results 
section describes specific genetic algorithm developed including representation chromosomes strategy spaces adopted crossover operators 
section contains results experiments 
section gives summary provides direction 
query optimization specifics strategy spaces query optimizers search complete strategy space subset expected contain optimum strategy similar cost 
understand various options need definitions related databases 
slight abuse notation consider query join associated constraint omitted clarity presentation specifies precisely tuples joined relations appear result 
query represented query graph query relations nodes joins relations undirected edges shown 
capital letters denote relations numbers represent joins 
query graph study tree queries queries query graph tree 
answer query constructed combining tuples relations query constraints imposed specified joins 
done step wise fashion step involving join pair relations tuples combined 
relations originally stored database results operations previous steps called intermediate relations 
strong effective heuristic database systems combine relations connected join original query 
operation produces cartesian product tuples relations 
expensive operation result large increasing cost subsequent operations 
query optimizers confine searching subspace strategies cartesian products 
heuristic adopted 
strategy answer query represented join processing tree 
tree leaves database relations internal nodes join operators edges indicate flow data bottom 
addition chosen index database relation chosen join method join specified 
internal nodes tree leaf child tree called linear 
called bushy 
join methods distinguish join operands outer left relation inner right relation 
outer linear join processing tree left deep tree linear join processing tree inner relations joins base relations 
study deal strategy spaces includes left deep trees denoted includes linear bushy ones denoted examples left deep tree bushy tree query shown avoiding details join constraints join methods 
interest stems fact dbmss strategy space system algorithm applied 
experiment quite optimum strategy results applying genetic algorithm spaces compare results applying system algorithm left deep tree bushy tree emphasize point ignoring strategies contain cartesian products number remaining strategies grows exponentially number joins query 
true space space superset 
size spaces depends specific query optimized dependent shape query graph number join methods supported system index structures exist query relations 
cartesian products excluded strategies small queries deal joins corresponding spaces large associated optimization problem computationally difficult 
system algorithm system algorithm dynamic programming 
specifically complete space constructed occasionally pruning parts identified suboptimal 
space constructed iteration number relations joined far 
th iteration best strategy join relations query sets relations 
iteration strategies relations constructed combining strategy previous collection appropriate remaining relations 
set relations multiple strategies usually constructed cost kept shown rest part optimum final strategy 
process needs iterations relations query complete 
main disadvantage algorithm needs maintain process large number strategies execution number grows exponentially number joins query 
especially iterations implies significant cpu cost processing significant cost due increased page faults 
algorithm inapplicable queries relations 
informal description algorithm slightly simplified 
interest space discussed various complications arise side effects specific types indices desirability strategy 
version algorithm experiments address complications 
interested reader find details original system algorithm 
genetic algorithm section describe implementation genetic algorithm solve problem outlined 
completeness briefly review terminology details 
ga works population chromosomes decoded solution problem 
chromosome population measure quality calculated called fitness 
chromosomes selected population parents fitness 
reproduction occurs pairs chromosomes produce offspring 
newly created population generation process repeated 
model fixed population size ga uses neighborhood scheme fitness information transmitted local neighborhood see example 
model algorithm scheme follows 
local neighborhood algorithm repeat chromosome evaluate broadcast neighborhood receive chromosomes neighborhood select chromosome mate neighborhood fitness reproduce chromosomes replace chromosome offspring population variance small experiments report neighborhood structure call ring considers chromosomes neighbors min ji gamma jj ji gamma jj ji gamma gamma jj viewed chromosome residing ring neighbors chromosomes links away 
neighborhood structure chosen proven effective problem instances 
query optimization aim minimize cost strategy generate fitness distribution neighborhood take negative cost convert maximization linear scaling values neighborhood maximum fitness proportion user supplied average fitness 
details scaling routine 
chromosome selects mating partner selection carried choosing chromosome neighborhood probability reproduction produces offspring 
current chromosome replaced best offspring provided offspring better worst chromosome neighborhood see 
ga efficient optimization technique believe reasonable parameter algorithm choices detailed particular problem 
effectiveness algorithm depends crucially representation problem operators exchange genetic information 
specialize particular problem query optimization 
describe ways encoding problem correspond strategy spaces attempt incorporate problem specific information possible see show mutation initial population choice crossover carried 
discussion broken parts dealing left deep strategies second bushy strategies third dealing crossover operators 
left deep strategies left deep strategies relatively small subset strategy space observed frequently strategy exists cost close optimal cost system uses strategy space appropriate apply ga compare results methods 
advantage choosing search space smaller large absolute terms disadvantage beat system terms output quality ga chromosome represents left deep strategy 
chromosome ordered list genes gene consists relation join method 
example represents left deep strategy representing join method 
code associate join method inner right relation join 
recreate join processing tree join second relations method associated second relation 
join resulting intermediate relation relation specified method 
repeat relations remain 
step verify edge exists query graph current relation relations occurred previously chromosome 
edge exists query strategy contains cartesian product chromosome penalized infinite cost 
note join method associated relation ignored crossover method produces cartesian products ga perform 
encoding problem similar constrained traveling salesman problem tsp choice methods transport cities 
fact analogy motivate choices crossover operator 
query optimization function expensive evaluate typical tsp functions join equivalently cost traveling directly cities dependent route previously taken cities visited 
indication complexity want emphasize cost join relations function sizes 
size depends directly precise set joins occurred previously 
depends joins remain processed data necessary execution contained relations 
mutation secondary operator guarantee connectedness search pace 
implementation types 
type changes join method randomly second swaps order adjacent genes 
left deep strategy generator ensures initial population contains cartesian products 
achieved cycling randomly generated permutation relations adding relation chromosome done introducing cartesian product 
join methods generated randomly 
bushy strategies quite best strategy query order produce better solutions system consider larger strategy space contains linear bushy strategies 
encode strategies chromosomes consider ing join gene represents join join method constituent relations query graph orientation instance alphabetically 
chromosome ordered list genes 
example represents strategy 
decoding list solution costly left deep decoding ability represent strategies 
decoding process grows bushy tree bottom 
maintains list intermediate relations waiting joined 
scanning chromosome left right finds constituent relations join gene examining query graph 
orientation gene indicates relation outer left inner right relation 
right relation formation intermediate relation list substituted right relation join intermediate relation removed list 
process done left relation 
left right relations joined method gene resulting relation added list 
genes processed intermediate relation remains list 
corresponds root bushy tree 
note representation similar described left deep trees ordered list genes important differences 
decoding scheme guarantees corresponding query strategy cartesian products 
consider feasible strategies problem 
second representation labeling joins relations 
somewhat natural may intermediate relations step decoding scheme relations easily associated join 
association critical simple computation 
left deep case intermediate relation constructed stage problem handling relations occur 
third representation uniquely defined chromosomes decode tree 
coding described advantage may possible beat system solution 
search space greatly increased giving ga difficult task 
believe decoding scheme important ga perform extra carry decoding guarantees algorithm considers feasible solutions problem furthermore standard crossover schemes motivated ga tsp database generate chromosomes 
mutation carried ways 
randomly change join method orientation 
second perform reordering genes chromosome transposing gene neighbor 
guarantee search space connected 
initial population generated randomly 
crossover order complete discussion method describe crossover operators investigated 
encodings chromosome ordered list genes 
outlined left deep case genes identified relation letter bushy case join number 
describe crossover operators solely terms genes 
method modified swap modifies local improvement algorithm incorporate information parents designed primarily left deep case 
described follows 
parent chromosomes randomly choose genes replace corresponding genes retaining order create offspring 
example left deep case suppose parent chromosomes mb md represent particular join methods randomly choose genes labeled resulting chromosome md mb interchange roles create offspring 
partly motivated swap transformation successfully database query optimization context randomized algorithms 
transformations quite similar crossover transformation takes account strategies previous simply operates 
note ordering information chromosomes retained information primary importance decoding schemes outlined 
crossover operator retains ordering information chromosome uses order information chromosome exchange genes 
bushy case modified chromosome different parents depending locus genes exchanged due decoding scheme left deep case solution look similar parent small possibility introducing cartesian product 
second method refer chunk adapted designed primarily bushy case 
generate random chunk chromosome follows 
suppose number genes chromosome start chunk genes uniformly generated random integer length chunk uniformly generated 
suppose randomly generate chunk resulting chromosome copies third fourth genes position offspring deletes corresponding genes remainder genes fill remaining positions offspring 
example represent particular join methods resulting chromosome chromosome created interchanging roles arrived method experimentation 
essential motivation scheme force reasonably sized subtree quarter half size original tree parent incorporated parent minimal disruption 
course chunk may may correspond subtree avoid excessive computation determining chunk scheme 
ordering information chromosome crucially determines strategy decoding scheme crossover operator attempts minimize ordering changes 
representation forcing chunk large size generally results genetic information exchanged enabling algorithm look larger variety solutions generate better solutions reasonable times 
crossover operators designed particular strategy spaces mind operators applied strategy spaces essentially consider chromosomes ordered list genes 
experimented combinations crossover operators spaces 
performance results section report experimental evaluation performance behavior genetic algorithm query optimization compared system algorithm 
describe testbed experiments discuss obtained results 
testbed experiments assumed dbms supports nested loops merge scan join methods 
tree queries generated randomly size ranged joins 
limit query size due inability system algorithm run larger queries primarily huge memory requirements 
generated join queries runnable system algorithm 
large queries genetic algorithm clearly superior traditional algorithm 
interest space precise cost formulas study 
capture cost various join methods indices textbook databases 
avoid presenting details assumed physical design database 
specifics exactly previous studies 
implemented algorithms tested dedicated decstation workstation 
experiments conducted population size 
different queries tested size joins 
system managed terminate join queries results case represent smaller number queries 
query algorithm run times 
output quality compare output quality lowest cost chromosome final generation 
cost average output strategy produced algorithms function query size shown 
axis number joins query 
axis represents scaled cost ratio output strategy cost cost system algorithm 
size average queries size average scaled output cost runs query shown 
results interesting 
observe average ga applied fails find optimum strategy largest queries joins clearly small range optimality 
small queries joins crossovers find optimum 
query size grows algorithm stable quality output deteriorates primarily due dramatic increase size strategy space 
ga applied results improve 
average sizes algorithm better strategy best left deep tree gains ranging 
note query size grows ga relatively better system 
increased query size relative difference best bushy strategies best left deep strategies increases searching richer space ga able improve output quality 
small set experiments increased population size promising results improving output quality large queries 
chunk chunk system ga ga ga ga number relations chunk chunk system ga ga ga ga number relations scaled cost strategy convergence average runs best runs interesting comparison crossovers 
ga applied preferred crossover chunk having worse performance 
due fact relations genes chromosome applying chunk produces offspring cartesian products 
case algorithm spends time useless failing converge strategy 
hand produces fewer strategies cartesian products winner 
exactly opposite happens ga applied chunk best performer generates large variety strategies looking larger area space time effectively 
overcome inherent problems randomized algorithms occasionally proposed algorithms run multiple times instance problem best solution chosen 
mind compare best output runs version ga algorithm query 
show average queries size 
see perfect finding optimum strategy 
chunk considerably improved inferior performance reasons explained 
similar improvements seen space 
especially large joins crossovers find strategies 
results indicate multiple runs ga algorithm may plausible way avoid potential instabilities produce high quality results 
time average time results axis represents number joins query axis represents processing time seconds 
join queries system failed finish time failure 
results follows 
system performs faster queries size ga faster queries size 
increase times ga linear 
larger increase time ga expected smaller space obvious increase steep corresponding increase time system 
believe system runnable queries joins require time ga final comment want version ga designed ported parallel machine 
parallel implementation chromosome population resides processor communication carried message passing 
total communication overhead minimal 
results optimization problems evaluation fitness function dominates processing time case query optimization expect linear speedups execution time 
limited parallelism incorporated system time execute parallel ga smaller system 
genetic algorithm database query optimization 
doing intro chunk chunk system ga ga ga ga number relations average processing time duced novel encoding decoding chromosomes represent binary trees associated new crossover operators 
exploit important characteristic algorithm efficient parallelization 
computational experiments sequential implementations algorithm shown method viable alternative commercially established algorithm 
fact large queries implementation ga comparable solutions better time different implementation better quality solutions expense additional time 
ga capable optimizing large size problems established algorithm fails 
plan adapt parallel implementation ga query optimization verify claims superiority system algorithm 
addition plan investigate applicability query optimization complex database environments parallel database machines 
described partially supported air force laboratory graduate fellowship program air force office scientific research afosr national science foundation iri 
anderson ferris 
genetic algorithm assembly line balancing problem 
proceedings integer programming combinatorial optimization conference waterloo september ontario canada 
university waterloo press 
cleveland smith 
genetic algorithms schedule flow shop releases 
schaeffer pages 
codd 
relational model data large shared data banks 
cacm 
goldberg 
genetic algorithms search optimization machine learning 
addison wesley reading ma 
grefenstette 
incorporating problem specific knowledge genetic algorithms 
davis editor genetic algorithms simulated annealing 
pitman london 
holland 
adaptation natural artificial systems 
university michigan press ann arbor michigan 
ioannidis kang 
randomized algorithms optimizing large join queries 
proc 
acm sigmod conference management data pages atlantic city nj may 
ioannidis wong 
query optimization simulated annealing 
proc 
acm sigmod conference management data pages san francisco ca may 
jarke koch 
query optimization database systems 
acm computing surveys june 
kim reiner batory 
query processing database systems 
springer verlag new york 
lin kernighan 
efficient heuristic algorithm traveling salesman problem 
operations research 
muhlenbein 
parallel genetic algorithms population genetics combinatorial optimization 
schaeffer pages 
schaeffer editor 
proceedings third international conference genetic algorithms san mateo california 
morgan kaufmann publishers selinger access path selection relational data base system 
proc 
acm sigmod conference management data pages boston ma june 
swami gupta 
optimization large join queries 
proc 
acm sigmod conference management data pages chicago il june 
ullman 
principles database systems 
computer science press rockville md 
