applying case maps multi agent systems feature interaction example buhr gray carleton university email buhr sce carleton ca tom gray serge com multi agent systems emerging potential solution problem constructing flexible network software 
characteristic systems behaviour patterns emerge combination details agents intricate ways 
understanding big picture composing details difficult designing details achieve desired system behaviour pattern easily cut try exercise 
help solve problems offer case maps ucms provide class representation system behaviour patterns level details 
illustrate approach apply classical distributed system problem kind agent systems capable solving feature interaction telephony 

multi agent systems emerging potential solution problem constructing flexible network software 
problem aim solve impossibility building entire system predefined requirements application functionality user interactions communication protocols available resources current technology forth 
things may change time 
agent solution build intelligence special software components called agents enable metalevel compared ordinary software enable adapt evolve 
example metalevel provided known bdi beliefs desires intentions model 
companion come research project high level design prototyping agent systems 
contribution illustrate concepts described companion applying specific example feature interaction problem 
show example visual ucm representations help human understanding agent systems systems 
point way understanding develop agent internal models capable resolving conflicts develop detail examples subject current research 
current agent community may said approach designing desired system behaviour multi agent systems design internal metalevel logic individual agents adaption evolution implement result stand back hope satisfactory behaviour emerge system level 
example scenarios intended system behaviour may developed design process techniques produce complex unwieldy descriptions scale yield sufficient insight system properties 
example presenters agent systems agent conference paam london april typically solved problem explaining systems displaying sequences diagrams style object interaction diagrams popularly software design 
boxes represented agents arrows represented message paths 
sequences diagrams needed agents relationships may change time 
developing approach employing case maps ucms enables humans understand specify agent system behaviour class artifact independent internal metalevel software logic agents 
approach high level defers details providing framework filling details understanding relationship details big picture 
hope approach help customers system designers communicate better requirements provide systematic starting point transforming requirements metalevel agent logic software implementations help system evolution providing high level making detailed changes 
intent sweep away start anew supplement conventional techniques agent domain software engineering domain new techniques give clearer system picture 
ucm technique authors knowledge unique level abstraction 
agent community communities object oriented community people detailed visual techniques describe systems 
example kendall models agent systems object oriented style diagrams require commitment agent centric details pairwise interactions messages pairwise inheritance relationships 
tools object oriented community support modelling systems level detail example 
agent community tool specifically supports design agent systems similar level detail 
perspective workflow models discussed applied kendall variation data flow models 
kendall points nuances useful agent systems basic properties data flow models remain show continuity causal paths system provide direct easy means describing central features agent systems self modification system level 
techniques agent community cool shoham aop represent agents formally logic visual representation 
visual representation known needed human understanding 
suitable high level visual representation case maps starting point generating detailed visual descriptions formal descriptions propose 
presents examples application ucms classical distributed system problem kind multi agent systems capable solving feature interaction telephony 
major problems dealing feature interaction lack techniques describe class manner background system terms details 
result danger feature interaction problem lost details 
ucms help problem representing feature interactions class way level details 
historically telephony feature interaction problems solved ad hoc detailed methods associated particular combinations features 
better techniques starting emerge level details needed class description conflict resolution problems feature interaction level details drive solutions 
feature interaction may take number forms form examine characteristic system behaviour patterns individual features come conflict events conspire combine features 
conflict resolved building avoidance detection fabric system 
system multi agent means agents collective fashion avoid problem recognize resolve 
building appropriate logic agents requires designer logic understand feature interaction problem firstclass terms system level 
show ucms may employed purpose 

case maps ucms companion describes elements ucms particularly useful purposes 
enable read independently short summary 
ucms give high level view causal sequences system paths 
causal sequences called scenarios 
ucms show paths scenarios actual scenarios enable human viewer reason actual scenarios 
general ucms may paths shows simplicity 
causality expressed paths understood humans necessarily individual components system 
filled circle indicates start point path point stimuli occur causing activity start progressing path 
bar indicates point point effect stimuli felt 
paths trace causal sequences start points 
causal sequences connect responsibilities indicated named points paths 
paths superimposed rectangular boxes representing operational components system indicate components participate causal sequences 
basic assumption stimulus response behaviour represented simple way paths 
common characteristic types systems concerned 
result view system conventional component centric view 
ucms may decomposed generalization responsibilities called stubs 
stubs may positioned paths responsibilities general responsibilities ways identify existence sub ucms may span multiple paths shown 
stubs enable draw ucms give high level overview general trend paths leaving localized obscure big picture sub ucms shown separate diagrams 
plug may involve additional system components shown main ucm 
key feature stubs agent systems ability represent dynamically pluggable behaviour patterns analogous plans agent terminology 
stub may alternative plug ins 
example ucm 

ucm stub 
may selected different system conditions time scenario reaches stub 
stubs kind shown dashed outline distinguish stubs static path decomposition 
useful ucm tricks agent systems slots dynamic components may created moved outside scope see 

feature interaction examples aim show ucms help design understanding scenario conflict problems level systems 
assumption better understanding lead better design 
aim point way beginnings process help human designers develop details agent metamodels systematic way ucms 
process outside scope 
case developing process subject current research 

ucm models features basic call scenario begins setting stage showing ucm basic call scenario user agents larger system agents see general call scenario 
assume user agents representatives inside system human users application environment 
responsibilities user agents store user information preferences 
precondition call scenario user wants place call 
postcondition phone rings answerer 
call path begins oh hook stub perform process ing caller 
path continues pcr process connection request stub answerer 
path ends phone ringing answerer 
presents part picture call path going left right 
general agent may caller answerer oh pcr stub paths may go directions 
continues setting stage showing agents initialized features shall examples described 
assumption agent may subscribe combination features 
features installation means creating plug feature putting feature pool oh pcr stub small arrow conveys meaning 
features loaded repository 
remaining feature calling wc 
example feature meaning subscription available time 
plug feature created moved directly active stub agent wc 
initialization sets agents call path realized implicit precondition call path initialization performed 
shows assumed meaning call path relation initialized elements 
call reaches oh plug selected oh pool moved oh stub small arrows mean selection movement 
things occurs pcr stub 
plug selected 
call connection ucm 
stubs oh 
processing caller different plug ins phone call view computer screen pcr 
process connection request different plug ins selected depending system conditions seen agent oh pcr caller answerer call user agent user agent ring 
initialization 
oh typical subscribe user agent pcr wc done oh pcr pool pool pcr caller answerer user agent user agent ring 
assumed standard pattern features stubs 
oh pcr oh call depends case conditions time 
wc stub part basic call scenario 
pattern selecting plug ins stubs assumed subsequent ucms 
default pcr plug shows default plug pcr stub absence features describes default behavior answerer subscribed feature 
remaining plug diagrams path enters stub main ucm enters plug point labelled enter exits plug return main ucm point labelled exit 
plug starts simple fork called indicates alternative scenario paths 
user busy path labeled busy followed caller notified answerer busy 
fork bar called fork indicates scenario proceeds concurrently paths 
path leads ring stub plug provided notifies answerer example ringing phone device path notifies caller call progress 
cross hatching underneath caller user agent indicates actual component context stub components plugins default formal ones created plugging occurs 
terminating call screening tcs plug pcr stub describes plug selected pcr stub user subscribed terminating call screening tcs feature conditions time entering stub select feature 
plugin brings new system component labelled tcs processing feature tcs pro cess thread triggered answerer user agent actual nature component important purposes 
tcs feature checks caller number number answerer screening list call connection allowed proceed 
caller number answerer screening list caller notified answerer refusing connection 
precondition scenario answerer busy call 
automatic re call arc plug pcr stub describes pcr plug selected answerer subscribed automatic re call feature arc system conditions time entry stub select feature 
plug additional start points relative ones labelled enter exit 
identify environmental events treated special way feature activated 
arc feature activated arriving call scenario finds answerer busy 
adds caller number list dialled automatically user longer busy 
path begins forking concurrent paths 
bottom path notifies caller answerer currently busy called back answerer available 
top path adds caller number arc list waits hook event 
filled circle path waiting place path leading hook event waiting place indicates trigger clears waiting condition 
hook event occurs path continues getting caller phone number arc list ringing answerer phone 
arc feature waits time answerer performs hook operation 
hook event happens time period caller notified special ringing answerer accepting call 
ring 
default pcr plug 
enter exit notify caller user agent ringing busy refused precondition answerer busy 
terminating call screening tcs plug pcr stub 
tcs ring tcs list check enter exit ringing notify caller user agent caller notified path 
automatic re call arc plug pcr stub 
precondition answerer busy add hook ring get arc list arc notify caller user agent enter timed hook caller notified exit call forwarding cf plug pcr stub describes pcr plug selected answerer subscribed call forwarding feature cf system conditions time entry stub select feature 
cf feature performs forward responsibility causes incoming call forwarded user agent responsible processing call request 
call waiting cw plug pcr stub describes pcr plug selected answerer subscribed call waiting cw system conditions time entry stub select feature 
precondition plugin answerer busy call 
plug shows paths 
plug selected basic call scenario follow top path bottom path followed event associated occurs 
top path starts alerting answerer incoming call concurrently notifying caller current call status 
bottom path shows answerer connect second call pressing flash key 
pressing flash key puts current connection hold connects second call shown respectively hold responsibility cnt stub plug provided 
answer call ac plug pcr stub describes pcr plug selected answerer subscribed answer call ac feature system conditions time entry stub select feature 
precondition path answerer busy call 
ac feature performs forward responsibility causes incoming call forwarded answerer answering service connects caller 
originating call screening ocs plug oh stub describes pcr plug selected caller subscribed originating call screening ac feature system conditions time entry stub select feature 
scenario path ocs plug begins ocs list checked 
dialled number caller screening list connection refused 
shown path fork check responsibility 
caller allowed connect dialled number 
way calling wc plug describes active wc feature user subscribed way calling 
precondition way calling scenario wc subscriber busy 
user add third party call pressing flash key shown diagram event 
result putting current conversation hold 
subscriber start normal outgoing precondition cf 

call forwarding cf plug pcr stub 
forward forwarded cf enter exit user agent pcr 
call waiting cw plug pcr stub 
precondition answerer busy cw alert enter exit notify caller user agent cnt flash key hold connected pressed precondition answerer busy 
answer call ac plug pcr stub 
forward answering service ac enter exit cnt ocs ocs list check enter exit denied 
originating call screening ocs plug oh stub 
caller user agent alternate exit call connect third party 

feature interactions feature interaction examples selected context examples described 

inconsistent behavior different plug ins stub inconsistent behaviour may occur plugins stub different agents agent different times 
illustrated tcs arc features 
interaction understood glance highlighted parts 
top see tcs feature active answerer busy caller number answerer tcs list call denied 
bottom see arc feature active check answerer tcs list call originating number tcs list denied 
particular conditions agent select plug ins 
different agents agent select different plug ins exhibit inconsistent behaviour 
suggest ucms offer designer effective framework reasoning feature interactions context system help design solutions 
glance context suggests obvious way way resolve interaction put tcs plug involves feature may result call connection 

unexpected behaviour different selected plug ins different stubs features activated different places scenario may interact unexpectedly 
example illustrates deals interactions originating call screening call forwarding features 
assume user agent call user agent call user agent shown screening list 
shown 
grey path going labeled illegal able connect long ocs list 
actual path follows calls shown 
call forwarding may forward call number screening list shown 
violates intend originating call screening 
see ocs activated connected ucms particularly powerful kind feature interaction focusing system view 
glance suggests obvious hold oh preconditions user busy wc connected flash key pressed 
way calling wc plug 
arc tcs call denied call accepted 
inconsistent behavior different plug ins selected stub 

connect call ring illegal 
ocs denies calls call denied call way resolve interaction allow features raise assertions execution 
assertions hold call process 
example raises assertion specifies receiver call solution allow negotiations different parties call 
example negotiate forwards permits 

conflict candidate plug ins stub interactions category happen agent decide feature preconditions feature activate plug select 
show ucms describe possible plug ins pcr stub call waiting cw feature answer call ac feature 
interaction occurs plug ins alternative plug stub preconditions 
suppose subscriber represented answerer user agent subscribes cw ac features 
subscriber busy call second call arrives second caller sent call waiting alert signal second call forwarded answering service 
see plug ins preconditions making eligible selected pcr stub 
example rule identified detecting feature interactions alternate plug ins having preconditions events different paths sign conflict 
possible ways resolve conflict 
way supply selecting agent policies resolve conflicts features 
example policy chooses conflicting features time day evening call answer may higher priority call waiting 
solution prioritize features determine feature controls call selected 
example call waiting higher priority 

conflict selected plug ins interactions category happen active features compete resource event 
example illustrates deals interactions call waiting cw way calling wc 
interaction shown highlighted parts 
interaction call waiting calling happens user call receives second call 
subscriber presses flash key flash key event considered response connect second call user allowed start way calling process 
way resolve interaction change add preconditions features mutually exclusive 
example new precondition added wc allows wc activated incoming call 

connect call ring forward 
conflict candidate plugins stub 
precondition answerer busy answering service ac cw caller user agent flash key pressed 
conflict plug ins waiting event 
wc wc connected flash key pressed preconditions cw wc user busy cw incoming call 
discussion derivation agent models ucms straight forward 
path segments traverse agent represent goals dynamically pluggable stubs represent sub goals path preconditions postconditions help forming belief set responsibilities paths constitutes agent high level tasks 
plugin represent plan selected fulfill goal stub 
having plan plug fulfill goal stub sign conflict 
developing process support 
process ucms give bird eye view system provide starting point developing details agent metamodels software implementations satisfy ucms 
novel aspect approach encourages constructive approach systems developed series levels abstraction humans machine assistance manipulate abstractions level abstractions lower level 
planned process starts discovering agents relationships defining system models sets collaborating agents constructing implementable system definitions models arranging agents instantiate system definitions evolving system models definitions experience 
goal ucm modelling phase discover agents high level behaviour 
accomplished tracing application scenarios describe functional behaviour ucm paths system discovering agents plug ins way 
generally starts black box cases knowledge agents required realize 
requirement agents cases known 
may start quite sketchy ideas cases agents 
example ucms may discover agents realize paths represent black box cases discover paths expression black box cases amounts discovering new cases variations existing ones 
ultimate result ucm modelling process ucm model system diagrammatic form causal paths scenarios structural substrate agents 
model aspects model describes macroscopic behaviour level collaborating agents achieving system purpose 
ucms level express interagent negotiations required reach mutual agreement completing portion purpose defer variant details plug ins 
model includes catalogue diagrams plug ins associated documentation system conditions may plugged 
ucm model causal model level details described interfaces methods messages 
ucm model formal diagrammatic structure informal associated documentation 
associated documentation defines aspects model preconditions postconditions scenarios paths responsibilities agents paths data flow paths system state changes caused performance responsibilities 
magic solution ucms problem designing details achieve full system functionality 
ucms offer supplemental view aids human understanding big picture 
view incomplete definition example scenarios 
moving view details implemented achieve full system functionality requires considerable effort 
ucms offer incomplete description requirements expressed informally prose design details 
incomplete description helps human understanding provides traceability directions 
research see www sce carleton ca agents traceability ucms full functional behaviour agent system provided intermediate models express aspects agents goals beliefs plans relationships usage rights contracts conversations 
elements intermediate models come partly ucms partly human input partly standard patterns 
example intermediate models derived ucms called agent internal model 
model describes agents terms goals beliefs tasks 
model derived ucms explained opening paragraph 

feature interaction telephony classical conflict resolution problem distributed systems kind agent systems capable solving 
described case maps ucms may employed describe system behaviour patterns class design artifacts way helps human discover understand feature interactions 
objective approach alluded developed detail systematic process help human designers develop ucms rules agent metamodel level solving conflict resolution problems feature interaction 
hope process help avoid lengthy cut try exercises metamodel level 
process subject current research 
fox cool language describing coordination multi agent systems proceedings international conference multiagent systems san francisco ca 
booch rumbaugh unified method objectoriented development documentation set version rational software 
automated detection feature interactions feature interactions telecommunications systems ios press pp 

buhr high level design prototyping agent systems research project description www sce carleton ca agents buhr case maps attributing behaviour architecture sce september contribution fourth international workshop parallel distributed real time systems april honolulu hawaii ftp sce carleton 
ca attributing ps 
buhr pearce design patterns case maps case study reengineering object oriented framework sce ftp sce carleton ca ps 
buhr case maps object oriented systems prentice hall 
buhr design patterns different scales plop allerton park illinois sep 
www sce carleton ca ftp pub plop ps 
buhr gray understanding defining behaviour systems agents case maps report poster ses sion paam www sce carleton ca ftp pub paam ps buhr gray high level visual notation understanding designing collaborative adaptive behaviour multiagent systems appear proc 
hicss hawaii january 
buhr hubbard case maps engineering real time distributed computer systems case study ace framework application hawaii international conference system sciences jan hawaii www sce carleton ca ftp pub hicss final public ps cameron feature interaction benchmark feature interactions telecommunications systems ios press pp 

implementation business processes mobile agents technical mountain view california 
kendall methodology developing agent systems enterprise integration ifip working conference tc special interest group architectures enterprise integration queensland australia november 
rao georgeff bdi agents theory practice technical note april 
selic ward real time object oriented modeling wiley 
shoham agent oriented programming artificial intelligence pp 
