visual programs harder read textual programs green petre mrc applied psychology unit road cambridge cb ef institute educational technology open university milton keynes mk aa van der veer tauber eds 
human computer interaction tasks organisation proc 
ecce th european conference cognitive ergonomics 
rome 
claims virtues visual programming languages generally strong simple minded statements visual programs inherently better textual ones 
paid scant attention previous empirical literature showing difficulties comprehending visual programs 
reports comparisons comprehensibility textual visual programs drawing methods developed green comparing detailed comprehensibility conditional structures 
visual language studied labview circuit diagram language express conditionals forwards structures condition implies action nesting backwards structures action governed conditions boolean operators place nesting 
green forwards structures gave relatively better access sequential information gilmore green showed backwards structures gave relatively better access circumstantial information 
differences supported study text graphics presentations 
visual programs harder comprehend textual ones strong effect single subject subjects experienced labview users experienced users circuit diagrams 
explanation structure graphics visual programs paradoxically harder scan text version 

large numbers visual programming languages vpls invented 
proponents claim languages easier understand textual languages tls 
claim ill digested tls utilizing full power brain myers rests unfortunately named called software science extended visual domain glinert excellent 
times vpls described de emphasizing issues syntax providing higher level abstraction myers cautious claim 
comments professional electronics designers tend support view petre green electronics domain different programming 
improved legibility vpls important issue tls notoriously hard read potential making increased legibility enable display problem solving larkin howes payne 
green bellamy parker proposed cyclical coding model programs developed chunk time chunk possibly inevitably corresponding programming plan rist davies chunk prepared mentally ready insert material written far programmer re establish intentions structure existing material 
parsing model supported detailed observations green davies 
model increasing comprehensibility certainly facilitate programming process 
fischer 
shown talking back environment typical interaction complex environments simpler ones studied laboratory 
may glimpse obvious programming languages mainly devised ease generation comprehension far cognitive aspects considered 
unfortunately previous research comprehensibility vpls duncan curtis 
developers vpls clearly believe products previous research wrong inappropriate 
today vpls usually dataflow languages flowchart languages studied curtis today commercial languages real users contrast subjects previous studies tls programming visual notations documentation dataflow model allowed languages familiar metaphors 
typical labview language language studies reported 
labview closely metaphor electronic block wiring diagrams 
examine claims vpls highly comprehensible labview type vpl 
builds preliminary green petre bellamy presenting outline data sample labview users various reasons presents outline results 
reports results sample electronics designers thoroughly familiar underlying metaphor labview presents full analyses relates findings match mismatch hypothesis gilmore green cognitive fit hypothesis vessey presents simple model information gathering vpls tls sufficient account results relates model models graphical lohse display problem solving larkin simon concludes claims advantages notation structures information displays closely related models cognitive processes information extraction 

background previous design programming languages frequently claim particular notation universally best notational structure highlights kinds information expense obscuring types 
conditional program structures procedural paradigm green distinguished circumstantial taxon sequence information showing nested conditionals favoured sequence information input happens claim strongly supported curtis conversely gilmore green showed declarative programming language gave improved access circumstantial information result know input 
gilmore green postulated spectrum information structures performance best structure information sought matched structure notation mismatch lead poor performance hypothesis 
parallel independent line vessey investigated tables graphs conveying information problem solving 
distinguished external problem representation terms available data representation problem solving task terms problem solved 
types information emphasized representations match asserts problem solver uses processes formulates mental representation emphasize type information 
consequently processes problem solver uses act representation complete task match problem solving process facilitated 


languages green gilmore simple tls distance existing full scale languages 
nest ine sequential notation nested conditionals assistance extra cues earlier shown assist novices professionals green guest green 
notation shall refer production system model structure clearly circumstantial 
languages employed experiment figures 
prevailing characteristic nest ine supports working forwards input output supports working backwards output input 
corresponding vpls happens labview language capable expressing conditionals sequential structure circumstantial structure 
boxes notation unusual interactive moment display shows arm conditional reader click true false button toggle arms conditional 
result sequential structure selector condition appropriate part case structure quickly 
contrast output reader search variety cases find appropriate case generate output reading input conditions relatively easy 
gates notation available labview seemingly circumstantial structure 
output relatively straightforward backwards input side recording conditions goes working forwards input output harder requiring reader branch backwards gate 

hypotheses duncan curtis 
advantages flowcharts text detailed level overview level 
chose investigate detailed comprehension conditionals 
part investigated question answering lines adopted green curtis 
new context dataflow vpls experienced users 
question answering task corresponds program 
forwards 
backwards 
part investigated comparisons programs previously studied 
programs notation different judgements correspond real world questions programs differ different notations real world equivalent program agree specification 
supporters vpls correct visual representations uniformly superior 
contrary hypothesis part sequential languages facilitate forwards questions circumstantial languages facilitate backwards questions strong assertion difference graphical textual modes 
part hypothesis mismatch program structures forwards backwards notation slow performance 

procedure examples stimulus programs shown figures covering text graphics crossed sequential circumstantial 
graphical notations derived labview exact screen images copied 
boxes notation interactive aspects labview emulated 
half programs outcome reached route multi path stimuli 
programs single path 
part experiment subject shown stimulus program short interval shown input data forwards question output result backwards question 
responses radio buttons 
forwards question single mouse click sufficient state action program 
backwards questions single path programs answered setting radio buttons appropriate values true false irrelevant multiple path programs radio buttons set 
examples tasks shown 
part study programs side side subject responded different button 
due poor design subjects group see received comparisons notation tl vpl 
mistake repaired group possible comparisons 
groups subjects recruited 
group occasional programmers labview months 
programming experience ranged years covered variety languages basic assembly language commonest 
group experienced programmers designers advanced digital electronics apparatus previous experience labview 

results part forwards backwards questions errors 
time scores transformed logarithmic units analysed anova repeated measures factors modality text vs graphics structure sequential vs circumstantial direction questioning forwards vs backwards single vs backwards multiple 
procedure part identical versions experiment subject populations differed treated combined results having additional groups factor group group vs group 
anova revealed interactions involving group factor significance level direction structure group reached 
main effect group group subjects responded significantly faster 
appears results report hold wide range subject populations 
pattern results illustrated expressed logarithmic units statistical analysis 
match mismatch forwards questions answered faster notations sequential structure backwards questions answered faster notations circumstantial structure predicted match mismatch cognitive fit hypothesis 
interaction direction structure highly significant 
graphics text graphics slower text 
main effect mode highly significant conditions high order interaction effects particular mode direction structure far significance 
geometric mean text responses seconds seconds graphics responses 
size effect hayes gives procedure estimating size effect terms total variance accounted 
largest effect sizes mode direction direction structure respectively total variance accounted 
uniformity effect individual subject compared times text notations times graphics notations 
mean time graphics conditions greater mean time text single subject 
part different judgements analyses responses correct responses 
comparison employed notations response time affected intrinsic difficulty notation individual combination notations 
particularly interested testing match mismatch effect 
contrast analyses test hypotheses judgements faster slower modalities differ graphics text structures differ sequential circumstantial 
significant 
tested intrinsic difficulty effect linear contrasts number graphics notations trial number sequential notations 
tests lower power contrasts significant 
mode longer response time structure showing weaker effect circumstantial components longer response time 
appear intrinsic effects mode structure stronger match mismatch effects intrinsic difficulty graphics mode strongest effect 
error data revealing 

discussion visual languages versus text languages obviously concerns plausibility dataflow vpls 
results hardly claimed vpls consistently superior tls 
data show graphical notations fact consistently worse textual notations 
tasks realistic tasks testing level detailed comprehension previously shown best point flowchart vpls 
language reasonably successful commercially 
size problems unrealistic labview manual gives examples comparable number control components 
subjects included levels programming experience familiarity labview familiarity wiring diagram metaphor 
view poor showing labview vpl shows dataflow languages poor communicating type structure 
problems graphical representations showed clearly part different comparisons gates structure stood hard 
sight subjects crawling screen mouse fingers talking aloud keep working memory updated remarkable 
structure difficult subjects group experienced 
support reasoning processes clearly leaves great deal desired 
match mismatch cognitive fit results show expected support match mismatch cognitive fit hypotheses confirming results obtained gilmore green curtis 
vessey effect expected 
similarly sinha vessey comparing lisp pascal vehicles learning recursion iteration cognitive fit told half story differences programming languages terms 
experiment reason may caused problems tracing program behaviour gathering information graphics notations 
information structures models information gathering profound difficulties graphics modes study seemingly contradict developments display problem solving payne howes larkin larkin simon sophisticated models information gathering tables versus graphs lohse 
reason far seek 
models just cited obtained results showing graphical presentation data improved information gathering 
instance lohse extremely thorough model predicts time required answer questions graphs tables allowing eye scan times time discriminate symbol shape time match symbols working memory graphical presentations allow faster scanning faster discriminations model predicts faster total times 
similar developed arguments lie larkin simon account diagrams improve simple problem solving 
contrast information gathering process vpl extremely complex 
illustrate plausible idealised instance 
difficult cast process form computational model exercise unnecessary point graphical structures equivalent 
program structures contain knots force working memory load reader 
essentially information gathering gates notation equivalent traversing maze 
interestingly text structures study contain similar knots better spatial topography graphical notations 
study cognitive processes involved understanding graphs tables limited match mismatch effect faster speeds scanning processing graphical symbols 
information structure graph considered 
cases graphical structure contains knots textual version supposed advantages graphics text prove illusory 
performance dominated working memory limitations 
duncan 
experimental studies flowchart different stages program debugging 
ergonomics 
curtis sheppard bailey bailey boehm davis 
experimental evaluation software documentation formats 
systems software 
davies 
skill levels strategic differences plan comprehension implementation programming 
sutcliffe macaulay eds 
people computers cambridge university press 
davies 
nature development programming plans 
int 
man machine studies 
fischer lemke mccall 
making argumentation serve design 
appear human computer interaction 
gilmore green 
comprehension recall miniature programs 
int 
man machine studies 
glinert 

programming environments 
chang 
ed 
principles visual programming systems 
prentice hall 
green 
conditional program statements comprehensibility professional programmers 
occupational psychology 
green bellamy parker 
parsing model device 
olson sheppard soloway eds 
empirical studies programmers second workshop 
ablex 
green petre bellamy 
comprehensibility visual textual programs test match mismatch conjecture 
koenemann moher robertson eds empirical studies programmers fourth workshop 
norwood nj ablex 
pp 


data flow visual programming languages 
visual languages computing press 
howes payne 
display competence user models menu driven interfaces 
int 
man machine studies 
larkin 
display problem solving 
eds complex information processing impact herbert simon 
hillsdale nj erlbaum 
larkin simon 
diagram worth words 
cognitive science 
lohse 
cognitive model perception understanding graphs 
proc 
chi acm conf 
human factors computing systems pp 
new york acm myers 

taxonomies visual programming program visualization 
visual languages computing 
rist 
plans programming definition demonstration development 
soloway iyengar eds empirical studies programmers 
norwood nj ablex 
petre green 
requirements graphical notations professional users electronics cad systems case study 
le travail 
instrument isn really 
ieee spectrum august 
pp 
green guest 
scope marking computer conditionals psychological evaluation 
int 
man machine studies 
sinha vessey 
cognitive fit empirical study recursion iteration 
unpublished ms dept accounting mis pennsylvania state univ vessey 
cognitive fit theory analysis graphs versus tables literature 
decision sciences 
note labview trademark national instruments trademark silicon beach software grateful rachel bellamy helped set experiment david hendry improved quality 
example nest ine notation text sequential 
example notation text circumstantial 
conditional structure shown logically equivalent structure shown suitable change labels bellow 
example boxes notation graphical sequential 
notation interactive 
mouse clicks true false buttons toggle true false arms conditionals 
arm visible time 
shows state display hungry true thirsty false lonely true cold false 
value irrelevant conditions relevant circumstances cf 
high false values wide deep irrelevant 
output shown sending boolean value possible output 
output hop 
conditional structure shown logically structurally equivalent structure shown suitable change labels hop 
notation exactly labview interactive component achieved writing emulation labview behaviour 
example gates notation graphical circumstantial 
input comes left cold proceeds right 
gates perform operations shown shown shown 
conditional structure shown logically structurally equivalent structure shown suitable change labels orbit bellow logically equivalent structure suitable change labels orbit 
notation exactly labview 
considerable freedom layout gates structures 
layouts designed professional circuit designer accepted practice 
high tall thick wide deep long outcome high wide deep tall long thick true false true false problem presentation forwards question backwards question 
presentation type notation appearing program screen 
circles represent macintosh radio buttons clicked mouse turn 
backwards questions contained sets answer buttons shown multi path programs single set single path programs 
buttons initialised shows correct answer question program shown 
graphics notations boxes gates seq circ forwards backwards single path backwards multi path text notations nest ine seq circ forwards backwards single path backwards multi path response times part pooled groups showing direction structure interaction forwards questions notations sequential structure nest ine boxes faster circumstantial backwards questions circumstantial structures faster 
note times graphics notations slower 
response times programs expressed sequential graphics boxes circumstantial graphics gates 
response times programs expressed sequential text circumstantial text 
textual text graphical graphical intrinsic effect mode different judgements 
comparing textual notations fastest comparing graphical notations slowest 
difference surprisingly great 
sequential seq circ 
circumstantial intrinsic effect structure different judgements 
comparisons notations sequential slightly faster circumstantial 
consider answering forwards question small gates program see 
suppose input tired false thirsty false 
plausible account cognitive process agreeing detailed observations subject strategies experiment take truth value tired false 
scan find tired program 
propagate false wire 
place finger choice point consider direction turn 
propagate horizontally 
reaching component sleep abandon branch haven sent true output 
propagate downwards 
reaching start propagate true 
reaching junction place finger choice point consider direction turn 
propagate horizontally 
reaching gate place finger start search backwards 
search reaches input thirsty 
look truth value false 
return finger abandon branch conjunction false 
return previous finger 
start propagate downwards 
reaching gate place finger start search backwards 
reaching remember invert signal 
search reaches thirsty set false set true 
return finger continue propagating true 
search reaches argue 
output argue 
typical search pattern small gates program typical strategies observed subjects 
task discover output input tired false thirsty false 
numbers diagram show order examining segments arrows show direction travel pointing hands show junctions fingers mental physical placed 
extremely simple case process trivial 
sleep tired drink tired thirsty argue tired thirsty version program shown 
input tired false thirsty false plausible account solution process simply try line 
try predicate tired 
match input tired false 
abandon line 
try line 
predicate matches 
try second predicate thirsty 
match input 
abandon 
try line 
matches successful 
output argue 
search pattern small program 
unsophisticated algorithm try line turn easy apply notation minimum working memory 
