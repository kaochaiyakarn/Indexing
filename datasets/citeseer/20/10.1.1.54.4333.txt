incremental model checking fixed point properties decomposable structures department computer science technion israel institute technology haifa israel mail cs technion ac il extended april 
assume transition system composed identified components 
propose method allows reduce model checking safety reachability liveness properties expressible fixed point logic complex system model checking derived formulas transitive closure logic components provided complex systems phi sum components 
basic idea goes back method proposed feferman generalize transitive closure logic tc generalization fixed point logic lfp due 
adapt method specific context model checking transition systems 
method allows precise definition incremental model checking 
give estimates incremental method starts better traditional methods 
hardware verification find situation mathematical model finite state device form finite relational structure transition system formalized property oe 
usually oe advance built aim satisfy oe 
checking oe holds 
process called model checking 
literature rich papers addressing problem eme 
built components index set structure 
process building candidate structures checked oe denotes jth attempt designing differs component partially supported german israeli foundation fund promotion research technion israeli institute technology contains parts sc thesis second author written supervision author problem address exploit modularity model checking process efficient 
question meaningful various aspects precise 
addressed issue monadic second order logic 
drawback approach msol non polynomial model checking complexity hardware specification languages polynomial model checking complexity 
carry program transitive closure logic tc contains reachability safety properties logarithmic space polynomial time model checking complexity 
necessary definitions theorems concerning tc section 
results bos bos get similar results fixed point logic lfp contains propositional calculus polynomial time model checking complexity 
background lfp section 
precisely achieve choice logic 
shall monadic version transitive closure logic tc fixed point logic lfp inherent reasons polynomial model checking complexity convenient pebble game characterizations needed proof main theorem 
practical point view choice justified reachability safety properties expressible tc additionally liveness properties expressible lfp precise definition modularity 
propose notion modularity generalization disjoint unions structures additional links components depend index structure specified nodes components described table 
table represented syntactically translation scheme phi defined section 
generalized disjoint unions long history mathematical logic mak 
model checking purposes introduced rav 
shall call phi sums 
section shall discuss realistic examples fall definition exhibit provably 
complexity measures 
measure advantage method shall differ usual approach looks cost checking satisfies oe uses size size oe sum relevant input size 
matter fact case overhead reduction outweighs expected gains consider time complexity helps consider space complexity 
shall ask method gain repeating process times small changes time 
purpose look size changed component number iterations 
detailed discussion cost evaluations section 
iterated case realistic design hardware may applications distributed large databases issue shall discuss 
main result shows truth oe depends components index structure exact formulation involved explained detail section 
extension feferman theorem fv order logic tc new lfp derived bos bos 
proof theorem modification proof monadic second order logic combined gradel pebble game transitive closure logic gra game bos fixed point logic 
order logic feferman theorem covers wide class generalized products sums structures representing transition systems processes extremely powerful 
extensions theorem tc lfp restricted class sum operations 
theorem derive method checking oe proceeds follows preprocessing 
oe phi construct sequence formulas boolean function phi oe construction polynomial size oe phi 
initialization 
assume structure checked 
run compute boolean values defined iff checking oe 
theorem states oe iff phi oe 
iteration 
new checked differing say recompute values phi oe close analysis section process reveals model checking procedure polynomial considerable gains efficiency possible scenario incremental stepwise building verification hardware 
interested space complexity gains obtained scenario single model checking procedure 
transitive closure fixed point logic notation meaning function formulas explained arbitrary structures vocabulary finite set relation constant symbols 
consider case adding function symbols 
denote structures underlying sets standard logics order logic fol second order logic sol monadic second order logic msol 
necessary definitions transitive closure fixed point logic tc lfp 
definition tc logic tc defined inductively order logic vocabulary transition system 
thorough discussion cf 
imm 
atomic formulas usual 
inductive clauses include closure boolean operations existential universal quantification clause syntax oe tc formula un free variables terms tc toe tc formula bound free 
semantics formula tc toe holds transition system assignment variables rcl oe 
logic tc defined similarly operators tc bind variables 
expressing reachability safety properties tc tc reasonably expressive model checking transition systems 
contains propositional dynamic logic cf 
har 
contains fragment computation tree logic ctl cf 
eme oe property states expressible tc tc closed rules gamma oe path state satisfies oe gamma oe path state satisfies oe path state satisfies oe possibly oe path state satisfies oe 
textbook mp large classification properties programs adapted transition systems 
basic reachability safety properties negations expressible tc tc large intersection properties discussed structure intersection complicated 
pebble game tc gra gradel introduced generalization ehrenfeucht fraiss games tc 
need game proof theorem give gradel definition theorem concerning pebble games tc verbatim gra 
definition 
suppose structures vocabulary oe 
interpretation constants oe respectively 
pebble game pair played players ii follows pairs pebbles 
round game consists move move tc move move 
player places unused pebbles element player ii answers putting corresponding pebble 
ii move 
similarly reversed board player places player ii responds 
iii tc move 
suppose pairs pebbles board 
gamma player selects sequence xm tuples xm consist sets constants elements 
player ii indicates similar sequences necessary length tuples xm player selects places unused pebbles player ii selects places corresponding pebbles 
iv tc move tc move structures interchanged 
pebbles placed player wins pebbles determine local isomorphism precisely elements carrying pebbles mapping isomorphism substructures generated pebbles elements constants player ii wins player wins 
theorem 
structures equivalent player ii winning strategy tc game pebbles 
ii tc definition lfp fixed point logic lfp viewed fragment second order logic second order variables occur positively fixed point construction 
similarly lfp corresponds case arity relation variables restricted 
semantics fixed point fixed point exist positivity assumption set variable 
detailed exposition cf 
ahv ef bos gro 
expressive power lfp ordered structures lfp expresses exactly polynomially recognizable classes finite structures 
order formula lfp polynomial model checker 
transition systems lfp corresponds exactly calculus cf 
var eme ad 
pebble games lfp pebble games lfp defined bos bos 
section shall quote result bos proof relies pebble games 
translation schemes section introduce general framework syntactically defined translation schemes 
introduce notion translation schemes rabin 
definition works wide class logics 
definition translation schemes phi 
oe vocabularies logic fol msol tc tc lfp lfp oe fr rm ae arity phi hoe formulas 
phi feasible oe oe exactly distinct free order variables kae distinct free order variables 
phi hoe called oe translation scheme shortly translation scheme parameters clear context 
speak scalar non vectorized translation schemes 
translation scheme phi naturally associate partial function phi structures oe structures 
definition induced map phi 
structure phi feasible oe structure phi defined follows universe phi set phi oe ii interpretation phi set phi phi ae deltak note phi oe structure cardinality 
iii partial function phi str str oe defined phi phi note phi defined iff xoe 
translation scheme phi naturally associate function phi oe formulas formulas 
definition induced map phi 
oe formula phi feasible oe formula phi defined inductively follows oe xm new variables denote hx put phi xm 
works relation variables 
ii boolean connectives translation distributes phi phi phi phi phi similarly 
iii existential quantifier relativization hy new variables 
put phi oe phi iv second order variables arity vector length order variables constants translate treating relation symbol put phi 
oe oe phi case fixed point operator similar second order logic left reader 
vi tc phi tc nk phi vii function phi oe defined phi phi observation 
phi fol sol tc lfp provided fol sol tc lfp vectorized phi 
ii phi msol provided msol scalar non vectorized phi 
iii phi tc kn lfp kn provided tc lfp phi feasible 
sequel assume phi vectorized stated 
facts easily verified 
proposition 
phi hoe oe translation scheme structure oe formula 
phi iff phi 
piecing structures section discuss various ways obtaining transition systems smaller components 
disjoint union disjoint union family structures simplest example structures components linked 
definition disjoint union 
hr vocabulary general case resulting structure hi true iff came true iff came definition partitioned index structure 
index structure 
called finitely partitioned parts unary predicates ff ff vocabulary interpretation forms partition universe ehrenfeucht fraiss games prove theorem 
index structure fol msol tc lfp proof proofs fol msol classical folklore 
proof lfp bos 
sketch proof tc uses pebble game tc gra 
move player puts pebble element player ii places pebble winning strategy components 
move similar 
tc move player selects sequence xm divide sequence segments xm xm xm xm xm xm subsequence lies component player ii constructs sequence yn follows uses auxiliary pebbles structure 
segment puts winning strategy components places pebbles elements chooses intermediate elements winning strategy tc move 
auxiliary pebbles reused segment 
player pebbles neighboring elements sequence yn cases occur elements component player ii just follows winning strategy corresponding component elements different components plays accordingly 
easy verify winning strategy 
auxiliary pebbles temporarily mark segments 
note index set part structures treated component 
component player ii copies faithfully moves player applications index structure finite fixed prove stronger statement dealing formulas theories 
theorem 
finitely partitioned index structure fol msol tc lfp structure isomorphic vocabularies accordance partition 
oe boolean function oe ii formulas iii msol formulas iff iff oe iff oe oe computable oe exponential quantifier depth oe 
furthermore depends msol theory index structure restricted quantifier rank oe 
proof analyzing proof theorem tedious book keeping 
special case analyzed gurevich gur 

index structures dependency formulas hidden boolean function sum structures disjoint union interesting 
combining translation schemes gives rich repertoire patching techniques 
definition phi sum 
finitely partitioned index structure fol msol tc lfp structure isomorphic vocabularies accordance partition 
furthermore phi non vectorized oe translation scheme 
phi sum structure phi structure isomorphic 

applications efficient shall interested translation schemes phi formula quantifier free order formula qr phi 
theorem 
finitely partitioned index structure fol msol tc lfp phi sum 
oe boolean function phi oe ii formulas iii msol formulas iff iff oe iff phi oe phi oe computable phi oe exponential quantifier depth oe 
proof analyzing proof theorem theorem 

index structures dependency formulas hidden boolean function show restriction tc lfp necessary 
proposition 
theorems hold tc lfp proof components finite linear orders 
counting argument easy produce arbitrary large pairs linear orders tc gamman equivalent different cardinalities 
consider structure ta ta tc formula distinguishes formula asserts components cardinality 
written tc succ succ succ order formula expressing successor ith component constant symbols interpreted resp 
element ith component 
generalized products generalized phi products defined sums allowing vectorized translation schemes restricting scalar ones 
shown proposition theorems hold products case fol 
examples uniform graph substitution pipelines consider composition input graphs viewed display graph node want copy certain additional edges added 
practice model pipeline works 
nodes marked latches 
hdg ri relational structures finite composition hdc jj sc defined follows notations definition dc dh true belongs sc phi phi phi phi phi phi phi phi phi phi phi phi hy hy xy phi phi phi phi phi phi phi phi phi phi phi phi hy hy xy phi phi phi phi phi phi phi phi phi phi phi phi hy hy xy ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl fig 

uniform graph substitution 
easy see fig 
construction obtained cartesian product theta fol translation scheme vectorization 
cartesian product obtained vectorization 
obtained disjoint union fol translation scheme vectorization 
proposition precise 
proposition 
isomorphic phi phi hoe oe 
example depending choice interpretation sophisticated parallel computations modelled 
synchronous parallel composition example synchronized parallel transition system sum 
consider parallel composition transition systems studied gl 
transition systems follows 
definition 
structure hs finite set states 
ii relation set initial states 
iii theta transition relation 
iv fs finite set atomic propositions 
synchronous product defined follows denotes set atomic propositions true definition 
structures 
composition denoted structure defined atomic propositions states theta initial states theta unary predicates iff transition relation iff 
proved theorem 
unary phi msol aka isomorphic phi 
words synchronized parallel composition transition systems general sum 
complexity consideration 
section discuss conditions theorem improves complexity model checking measured size composed structure 
scenarios follows formula set formulas oe advance 
structure transition system submitted model checker want know long takes check oe true 
theorems hold fol tc lfp model checking logics polynomial fol tc logarithmic space degree polynomial depends number nestings quantifiers tc operators cf 
imm 
scenario scenario consists checking structure 
case easy see reduction yield gains time contrary overhead generated big 
space considerations scenario give gains 
scenario check structures differ small components 
realistic situation stepwise development hardware 
time complexity simplicity assume transition system size phi sum structures size ffn size gamma ff want check formula oe true assume quantifier rank oe includes counting applications operators tc lfp checking oe bounded time computing phi oe gives formula quantifier rank qr phi 
applying theorem gives sequence formulas quantifier rank smaller equal checking bounded ffn ffn gamma ff gamma ff overhead generated analysis may considerable depend size scenario compare single model checking oe reduction components 
qr phi generated overhead justify 
scenario assume fixed modified times version denoted phi sum denoted denote cost computing reduction simplicity assume ff case qr phi gives reasonable results 
crude estimate yields ka kb gamma method gives improvement 
simplified gp gamma gamma gp case gamma space complexity case tc model checking nl 
contrast time complexity gains appear scenario assume transition system size phi sum structures size 
want check formula oe true checking oe bounded space logn delta logn applying theorem gives sequence formulas 
checking bounded logn logn 
total checking procedure decomposition bounded space max delta logn fi logn fi 
scenario compare single model checking oe reduction components 
case obtain condition logn fi delta logn fi delta shelah gave manuscript 
author stimulating discussions clarke early stages research 
stages courcelle arnold niwi nski kupferman grumberg helped finding examples apply method 
flum drew attention thesis 
ad arnold niwi nski 
fixed point characterization weak monadic logic definable sets trees 
podelski nivat editor tree automata languages pages 
elsevier science publishers 
ahv abiteboul hull vianu 
foundations database 
addison wesley 
bos 
ehrenfeucht fraiss game fixed point logic stratified fixed point logic 
csl volume lecture notes computer science pages 
springer 
bos 
ehrenfeucht fraiss games fixed point logic 
phd thesis department mathematics university freiburg germany 
ef ebbinghaus flum 
finite model theory 
preparation 
eme emerson 
temporal modal logic 
van leeuwen editor handbook theoretical computer science volume chapter 
elsevier science publishers 
fv feferman 
order properties products algebraic systems 
fundamenta mathematicae 
gl grumberg long 
model checking modular verification 
baeten editor concur volume lecture notes computer science pages xx yy 
springer holland 
gra gradel 
transitive closure logic 
borger jager richter editors computer science logic volume lecture notes computer science pages 
springer verlag 
gro 
structure fixed point logics 
phd thesis department mathematics university freiburg germany 
gur gurevich 
modest theory short chains journal symbolic logic 
har harel 
dynamic logic 
gabbay editors handbook philosophical logic volume chapter 
reidel publishing 
imm immerman 
languages capture complexity classes 
siam journal computing aug 
imm immerman 
expressibility parallel complexity 
siam journal computing 
mak 
compactness embeddings definability 
modeltheoretic logics perspectives mathematical logic chapter 
springer verlag 
mp manna pnueli 
temporal logic reactive concurrent systems 
springer verlag new york 

incremental model checking decomposable structures 
accepted mfcs august prague 
rav 
model checking various notions products 
phd thesis department computer science technion israel institute technology 
shelah 
weak law random graphs orders 
preprint 
var vardi 
complexity relational query languages 
stoc pages 
acm 
article processed macro package llncs style 
