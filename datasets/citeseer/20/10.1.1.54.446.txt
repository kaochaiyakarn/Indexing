simple reflective interpreter stanley jefferson daniel friedman imsa international workshop reflection meta level architecture tokyo november simple reflective interpreter stanley jefferson daniel friedman department computer science indiana university bloomington procedurally reflective programming languages enable user programs semantically extend language permitting run level language implementation access context 
reflective tower introduced brian smith principal architecture languages 
informally described infinitely ascending tower meta circular interpreters connected mechanism allows programs level run higher level 
various accounts reflective tower published including meta circular definition operational definitions denotational definitions 
operational account main aspects reflective tower claim simpler previous accounts 
approach implement finite tower level literally runs level directly 
complete scheme implementation included 
principal characteristic reflective programming languages extensible 
permit user define new language constructs semantic level effectively adding lines code language processor 
lisp reflective programming languages lisp brown blond provide extension capability permitting user level code run interpreter code access interpreter current expression environment continuation 
language extension capability primitive language constructs catch throw call cc quote defined user procedures 
reflective tower introduced smith provides unified coherent architecture reflective programming languages 
reflective tower described infinitely ascending tower interpreters 
interpreter bottom supported nsf ccr 
current affiliation hewlett packard laboratories deer creek road building palo alto ca supported nsf ccr nsf ccr 
tower executes user input interpreter tower executes interpreter immediately 
levels crucially connected mechanism permits program running level provide code run higher level 
various accounts reflective tower architecture including meta circular definition operational definitions denotational definitions meta continuation concept 
give account believe simpler easily understood previous accounts 
approach give literal model finite reflective tower 
interpreter small simplified subset scheme implemented scheme 
interpreter written subset scheme literally run 
permits finite towers interpreter run albeit inefficiently 
modifications interpreters finite tower connected infinite reflective tower 
literal model finite reflective tower understood behavior infinite reflective tower easily understood limiting behavior finite reflective tower height approaches infinity 
literal definition similar meta circular definition lisp 
differs runs circular reconstruct evaluation quotation 
literal model simpler operational denotational models models reflective tower implicitly explicitly 
models interesting useful clarify different aspects reflection 
rest organized follows section gives brief overview reflective tower architecture section presents simple interpreter capable interpreting section derives language extension mechanism interpreter section presents implementation reflective interpreter section comparison related section 
overview reflective tower architecture reflective tower described infinitely ascending tower meta circular interpreters 
interpreter tower bottom executes user input interpreter tower executes interpreter immediately 
interpreter state passed arguments interpreter expression environment continuation 
interpreter running level may different state interpreter running different level 
normally interpreters share global environment 
reifying procedures provide mechanism running code higher level gaining access level state form expression environment continuation 
reifying procedure simply reifier formal parameters 
reifier applied body run code belonging interpreter running application 
body run environment formal parameter bound list unevaluated arguments second formal parameter bound environment argument interpreter running application third formal parameter bound continuation argument interpreter 
fully model architecture body reifier access procedures structures interpreter 
reifying procedures invoke reifying procedures possible run user code arbitrarily high levels tower 
simple interpreter presenting garden variety interpreter subset scheme 
interpreter referred written language interpret 
written continuation passing style 
extended bnf subset scheme language implemented follows non terminals printed italic font terminals printed typewriter font 
exp exp lambda exp exp exp set 
identifier exp quote exp identifier constant syntactic categories identifiers constants scheme 
remaining notable characteristics follow set 
assigns unbound identifier small subset scheme primitives implemented error detection reporting non existent 
expressions principal structures manipulated environments continuations procedures 
usual continuation procedure argument 
environments represented association lists 
element association list pair consisting identifier value 
interpreter handles types procedures 
types represented lists distinguished tag 
compound procedure represented list containing tag formal parameters procedure body environment 
body compound procedure non empty list expressions 
environments contained compound procedures passed interpreter list bindings extend global environment variable binding looked get pair global environment searched necessary 
primitive procedure contains tag operator symbol 
example identity procedure compound addition procedure primitive 
follow convention expression environment continuation respectively 
scheme definitions principal procedures define interpreter interpret definitions definitions 
supporting definitions appendix 
procedure evaluate dispatches syntactic type expression operand 
set 
evaluate lambda constant 
evaluate constant variable 
evaluate variable 
evaluate assignment 
evaluate assignment abstraction 
evaluate abstraction evaluate combination usual abstraction simply evaluates procedure 
details understanding required section 
set 
evaluate abstraction lambda compound formals part body part set 
compound lambda formals body list compound formals body combinations evaluated conventional manner 
operator evaluated obtain procedure operands evaluated obtain arguments 
body procedure evaluated procedure lexical environment extended binding procedure formal parameters arguments 
set 
evaluate combination lambda evaluate operator part lambda proc evaluate operands operands part lambda args apply procedure proc args set 
apply procedure lambda proc args compound 
proc evaluate sequence procedure body proc extend procedure environment proc procedure parameters proc args apply primitive procedure name proc args evaluate operands produces list arguments list operands 
evaluate sequence successively evaluates sequence expressions yielding value final expression 
apply primitive simply passes task applying primitive language processor running interpreter 
global environment bound global env initialized bindings primitive procedures 
set 
initialize global env lambda set 
global env extend empty env primitive identifiers mapper primitive primitive identifiers read eval print loop provided procedure 
set 
openloop lambda read prompt write prompt display read prompt evaluate read empty env lambda display write prompt eq 
void displayed write newline openloop read prompt write prompt openloop prints output prompt input expression finished running output printed expression returns void value 
transcript illustrates starting interpreter running expression scheme prompt 
load simple ss 
initialize global env 
openloop 


interpreter written language possible load interpreter run 
definition includes procedure loading source files 
set 
lambda file lambda port lambda loop set 
loop lambda eof object 
close input port port evaluate empty env lambda ignore loop read port loop read port open input file file create level tower interpreters 
load simple ss 
initialize global env 
simple ss 
openloop 

initialize global env 
openloop 


absence level output prompt second openloop indicates second openloop finished running 
orient tower way lisp level runs level level numbering convention reversed lisp 
traps unbound variable errors exits 
notice level lost continuation previous transcript 

xxx error symbol bound xxx 
level displays error message exits 
control passes level openloop indicates level returned void value printing level output prompt value 
adding extension mechanism consider adding mechanism enable user supplied code run level interpreter 
stands runs user code level interpreter 
user code simply inspected decomposed manipulated code implements mechanism propose study impractical special form exit exp runs unevaluated operand level interpreter code exits interpreter 
chosen exit solely simplicity ability illustrate fundamental ideas 
refer putative interpreter extends exit mechanism 
illustrates behavior exit level tower 


exit 
new line added evaluate order dispatch exit forms 
assume line added definition evaluate immediately dispatch line assignment parentheses appropriately adjusted 
exit 
evaluate exit evaluation exit exp proceed evaluate exit temporarily defined lambda exp need way abstracting exp expression terms directly possible lambda evaluate arguments 
reject complicated inelegant possibility dynamically modifying procedure objects constituting proceed deriving acceptable definition evaluate exit previous lambda expression 
derivation requires additional assumption exp closed global environment 
preceding lambda expression written lambda lambda exp lambda expression evaluates procedure formed compound may write lambda compound list quote exp may exp yielding definition evaluate exit set 
evaluate exit lambda compound cdr expression compound cdr evaluates procedure object say proc problem proc probably won recognized procedure object language processor running example level run scheme system session ensues 
exit error attempt apply non procedure compound 
language processor running recognizes procedure objects definition evaluate exit works 
led consider twolevel tower interpreters run levels tower higher tower exit expression successfully run 
example expression exit exit fails twolevel tower 
openloop 

exit exit error attempt apply non procedure compound 
hand exit exit run error level tower returning level 
course uniformity levels achieved modeling infinite tower brown lisp blond 
mysterious final definition evaluate exit 
expression compound cdr definition evaluate exit runs argument exit level interpreter code instance basic observation combination exp exp run level exp evaluates compound procedure object body run level ability run user code level interpreter code consequence 
basic observation 
capability user code create procedure objects dynamically 
capability interpreter interpret tower created 
item included interpreter running level run user code interpreter level level numbering prompts 
instance crossing semantic levels exp treated data code 
interprets user expression exit exp treats expression data extracting car dispatching car passing argument extracting cdr embedding cdr procedure object 
procedure object exp body applied interpreter code exp run interpreter code language processor running contrast treats user expressions data allows user expressions run interpreter code 
reader may wondering couldn just define evaluate exit follows avoid issue towers 
set 
evaluate exit lambda evaluate nd lambda definition satisfy requirement argument exit run level interpreter code 
definition argument exit treated data interpreter 
transcript compared previous transcript illustrates behavioral difference definition derived definition 

openloop 

exit exit 
reflective interpreter turn attention defining reflective interpreter finite literal tower 
extend definition order solve couple technical problems literal towers 
extensions minor modification interpreter handle reifying procedures 
refer resulting interpreter ir complete definition ir including utility functions appendix 
self interpreting interpreter method building towers previous sections drawbacks 
drawback global environment structurally shared different levels tower 
global environment level tower initialized definitions global environment level entirely constructed new pairs 
assignments level observable levels 
illustrated transcript 
load simple ss 
initialize global env 
simple ss 
openloop 

set 
level var 
level var 
initialize global env 
openloop 

set 
level var 
level var 
level var error symbol bound level var 
level var error symbol bound level var solution inconvenience simply share global environment levels 
second drawback file containing interpreter definition loaded time new level created 
level results order magnitude slowdown time takes create levels quickly long having wait inhibits experimentation 
sharing global environment levels unnecessary load interpreter definition time new level created 
look closely environment structure tower 
consider previous transcript 
line 
load simple ss loads procedure definitions interpreter scheme environment 
global environment interpreter initialized bindings primitive procedures 
initialize global env order run level openloop level interpreter global environment include definitions interpreter 
accomplished reloading file interpreter global environment 
simple ss start interpreter read eval print loop 
openloop 

open level fail global environment global env bound level interpreter environment 

openloop 

error symbol bound global env level interpreter attempting run level interpreter code contained global env 
level interpreter determined global env bound exited scheme 
share global environment interpreter levels including binding global env level interpreter global environment 
binding interpreter global environment modifications shared levels 
global environment interpreter self referential circular structure 
procedure initializes interpreter global environment shared levels starts read eval print loop 
set 
boot tower lambda initialize global env file name set cdr 
global env cons cons global env global env cdr global env openloop 
initialized self referential global environment longer necessary run initialize global env time new level created 
transcript creates tower levels 
load simple ss 
boot tower 
openloop 

openloop 

successive openloop results order magnitude slowdown simply starting new level faster method previous sections 
capability call evaluate implementation procedure 
evaluate lambda 
reifying procedures consider adding reifying procedures interpreter 
reifying procedures mechanism lisp brown blond provide enable user code run level interpreter access interpreter current expression environment continuation 
overview ir reifying procedures created applying procedure compound reifier argument compound procedure 
result argument reifying procedure 
operator combination evaluates reifying procedure body reifying procedure run code interpreter evaluating combination body run extension reifying procedure lexical environment formal parameter bound list unevaluated operands combination second formal parameter bound environment argument interpreter evaluating combination third formal parameter bound continuation argument interpreter evaluating combination 
illustrate transcript follows showing definition reifying procedure aborts current level returning unevaluated argument 

set 
quit compound reifier lambda st 
quit foo foo 
quit bar bar 
interesting reifying procedures typically call evaluate bodies 
definition special form test exp evaluates exp test evaluates true 

set 
compound reifier lambda evaluate st lambda evaluate nd void 
shouldn happen 
useful define special form alpha abstracting 
alpha quit defined set 
quit alpha st body alpha closed environment definition 
definition alpha uses reifier compound takes list formal parameters procedure body environment directly creates associated reifying procedure 
define alpha follows set 
alpha compound reifier lambda reifier st cdr implementation reifying procedures represented compound procedures tag reifier compound 
converting reifying procedures compound procedures simply matter changing tags 
operations reifying procedures 
set 
reifier lambda formals body list reifier formals body set 
reifier compound lambda reifier cons compound cdr reifier set 
compound reifier lambda compound cons reifier cdr compound remains handle evaluation combinations operator evaluates reifying procedure 
suppose combination exp exp exp evaluates reifying procedure bound proc 
ext extension lexical environment proc formal parameters proc bound list unevaluated operands combination environment interpreter evaluating combination continuation interpreter evaluating combination respectively 
want run body proc level interpreter code environment ext 
running body value reifier compound proc level interpreter code environment ext 
basic observation running reifier compound proc operands part level interpreter code 
modification evaluate combination indicated semicolons runs body reifier proper level 
set 
evaluate combination lambda evaluate operator part lambda proc reifier 
proc reifier compound proc operands part evaluate operands operands part lambda args apply procedure proc args completes description changes order obtain ir full definition ir appears appendix 
expression reifier compound proc operands part essence reflective tower model 
essentially identical corresponding expression de reflect proc 
args env cont meta circular definition lisp 
lisp procedure de function ir procedure reifier compound converts closure reifier closure compound procedure 
significant difference expressions meta structural operator lisp expression operator combination program designating function structure designating closure 
observations reflective interpreter ir obtained making simple modifications modification created self referential global environment interpreters tower share global environment 
datatype reifying procedures defined case added evaluate combination handle applications 
error underlying scheme system usually results code run level attempts apply reifier 
compound reifier lambda wow error attempt apply non procedure compound wow 
error due running expression reifier compound proc operands part level ir interpreter code 
level ir run underlying scheme system understand representation ir procedures 
illustrates possible climb finite tower scheme resulting error 
openloop 

openloop 

set 
climb compound reifier lambda evaluate st lambda climb 
climb 
climb 
openloop 

climb error attempt apply non procedure compound evaluate 
due meta circularity ir user programs full access implementation structures ir illustrated transcript 

openloop 

openloop 

compound reifier lambda list compound display write prompt eq 
void displayed write newline openloop read prompt write prompt write prompt read prompt 

evaluate abstraction compound compound formals part body part 
comparison related lisp brown blond ir closely related 
interpreters reflective tower architecture described section 
ir models finite reflective tower model infinite reflective tower 
languages lexically scoped higher order applicative order dialects lisp 
include stepper reflective architecture differs substantially considered 
lisp differs significant ways lisp dialects 
reflection introduced semantically lisp defined 
new internal structures introduced order uniquely represent semantic concepts combinations represented list structure syntax assigned uniquely represent type internal structure 
results alignment syntactic structural semantic concepts 
quotation structural primitive lisp designate internal structures 
levels designation removed added explicitly 
evaluation replaced normalization takes expression designating structure normal form normalizes 
result semantical levels may crossed explicit 
reflection lisp described section 
meta circular definitions lisp 
meta circular definition uses lisp define lisp founded 
definition ir similar meta circular definition lisp 
level shifting meta circular access implicit definitions code applying essentially identical 
definition ir differs respects ffl models finite tower infinite tower 
ffl founded run scheme 
meta circular definition lisp run lisp implementation 
ffl require understanding lisp reconstruction evaluation quotation 
non reflective implementations lisp extremely operational 
order operate efficiently level shifting tower explicitly modeled stack continuations corresponding active levels tower 
full access interpreter implied meta circularity explicitly simulated 
brown blond reflective dialects scheme implemented scheme 
essentially executable denotational definitions non meta circular aspects reflective tower architecture 
level shifting tower explicitly modeled adding new context argument called meta continuation semantic valuation functions 
ir demonstrates meta circularity implies user programs access privileges interpreter 
procedures implement meta circular interpreter may inspected modified user program 
environments continuations similarly accessed user program 
ir user programs access privileges ir 
implementation lisp faithfully simulates corresponding meta circular definition protects allowing modification standard lisp system 
lisp user programs full inspection privileges 
blond brown internal structure interpreter largely hidden user programs 
brown blond attempt model meta circular properties reflective tower focus denotational semantics shifting levels tower 
brown blond rely scheme closures represent user defined procedures interpreter procedures interpreter continuations 
brown represents environment closure 
sanctioned operation blond brown interpreters user programs perform scheme closures application 
lisp brown ir close environment definition 
blond close environment level definition environment level application 
kind defined gamma abstractions second kind defined delta abstractions 
lisp brown ir application reified continuation interpreter continuation returns execution resumed point application 
procedure behavior reified continuations termed 
ir behavior natural consequence running literal tower interpreters 
brown lisp simulate behavior consequence reflective tower architecture 
designers blond argue reified continuations behave goto applied 
behavior obtained forgetting continuation effect reified continuation applied 
blond separate environment level global environment common levels 
brown ir global environment common levels 
approaches different lisp implementations 
executable reflective interpreter defined making minor modifications ordinary interpreter dialect scheme 
reflective interpreter literally models finite reflective tower 
slow practical simplicity ideal understanding experimenting 
literal model finite reflective tower understood behavior infinite reflective tower easily understood limiting behavior finite reflective tower height approaches infinity 
reflective interpreter illustrates switching levels tower involves treating data code vice versa 
uncomfortable sort semantical level crossing serves additional motivation understanding reconstruction evaluation quotation lisp 

grateful john simmons system providing helpful feedback 
jim des rivi eres steve greenbaum evan daniel kuokka julia lawall comments earlier drafts 
author grateful hewlett packard laboratories support facilities completing 
bawden reification evaluation conference record acm symposium lisp functional programming snowbird utah july 
danvy intensions extensions reflective tower conference record acm symposium lisp functional programming snowbird utah july 
danvy blond primer diku rapport diku computer science dept university copenhagen copenhagen denmark september 
des rivi eres smith implementation procedurally reflective languages proc 
acm symposium lisp functional programming august 
des rivi eres control related meta level facilities lisp extended meta level architectures reflection patti maes daniele nardi eds north holland 
friedman wand reification reflection metaphysics proc 
acm symposium lisp functional programming august 
maes nardi 
eds meta level architectures reflection north holland 
rees clinger eds 
revised report algorithmic language scheme sigplan notices december 
smith reflection semantics procedural language mit lcs tr mass inst 
tech cambridge ma january 
smith reflection semantics lisp conf 
rec 
th acm symp 
principles programming languages 
smith des rivi eres interim lisp manual intelligent systems laboratory xerox parc palo alto california 
wand friedman mystery tower revealed non reflective description reflective tower lisp symbolic computation vol 
june 
appendix complete reflective interpreter listing scheme source file named simple ss defines interpreter section 
loading file interpreter started typing boot tower 
simple reflective interpreter scheme systems may necessary load separate file initializes global variable file arbitrary value define 
may necessary include definition file define void cons lambda set 
evaluate lambda constant 
evaluate constant variable 
evaluate variable 
evaluate assignment 
evaluate assignment abstraction 
evaluate abstraction evaluate combination set 
evaluate constant lambda constant part set 
evaluate variable lambda get pair lambda success pair cdr success pair lambda wrong symbol bound set 
wrong lambda message object display error display message display object newline set 
evaluate lambda evaluate test part lambda evaluate part evaluate part set 
evaluate assignment lambda evaluate value part lambda get pair id part lambda success pair set cdr 
success pair void lambda set cdr 
global env cons cons id part cdr global env void set 
evaluate abstraction lambda compound formals part body part set 
evaluate combination lambda evaluate operator part lambda proc reifier 
proc reifier compound proc operands part evaluate operands operands part lambda args apply procedure proc args set 
evaluate operands lambda operands null 
operands evaluate car operands lambda evaluate operands cdr operands lambda cons set 
evaluate sequence lambda body null 
cdr body evaluate car body evaluate car body lambda evaluate sequence cdr body set 
apply procedure lambda proc args compound 
proc evaluate sequence procedure body proc extend procedure environment proc procedure parameters proc args apply primitive procedure name proc args set 
apply primitive lambda name args eq 
name car car st args eq 
name cdr cdr st args eq 
name cons cons st args nd args eq 
name set car 
set car 
st args nd args eq 
name set cdr 
set cdr 
st args nd args eq 
name st args nd args eq 
name st args nd args eq 
name null 
null 
st args eq 
name st args nd args eq 
name eq 
eq 
st args nd args eq 
name newline newline eq 
name write write st args eq 
name display display st args eq 
name read null 
args read read st args eq 
name st args nd args eq 
name st args nd args eq 
name st args nd args eq 
name symbol 
symbol 
st args eq 
name list args eq 
name pair 
pair 
st args eq 
name eof object 
eof object 
st args eq 
name close input port close input port st args eq 
name open input file open input file st args eq 
name void void shouldn happen environments 
set 
extend lambda ids vals null 
ids extend cons cons car ids car vals cdr ids cdr vals set 
get pair lambda id success failure find pair id success lambda find pair id global env success failure set 
find pair lambda elt alist success failure lambda result result success result failure elt alist set 
empty env list utilities 
set 
st lambda car set 
nd lambda car cdr set 
rd lambda car cdr cdr set 
th lambda car cdr cdr cdr set 
test tag lambda tag lambda pair 
eq 
car tag procedures 
set 
compound lambda formals body list compound formals body set 
compound 
test tag compound set 
primitive lambda op list primitive op set 
primitive 
test tag primitive set 
primitive identifiers lambda car cdr cons set car 
set cdr 
null 
eq 
newline write display read symbol 
list pair 
eof object 
close input port open input file void set 
reifier lambda formals body list reifier formals body set 
reifier compound lambda reifier cons compound cdr reifier set 
compound reifier lambda compound cons reifier cdr compound set 
reifier 
test tag reifier set 
procedure parameters nd set 
procedure body rd set 
procedure environment th set 
procedure name nd syntax 
set 
variable 
symbol 
set 

test tag set 
assignment 
test tag set set 
abstraction 
test tag lambda set 
quote 
test tag quote set 
constant 
lambda pair 
quote 
symbol 
set 
constant part lambda quote 
nd set 
test part nd set 
part rd set 
part th set 
id part nd set 
value part rd set 
formals part nd set 
body part lambda cdr cdr set 
operator part st set 
operands part cdr read eval print loop set 
openloop lambda read prompt write prompt display read prompt evaluate read empty env lambda display write prompt eq 
void displayed write newline openloop read prompt write prompt set 
lambda file lambda port lambda loop set 
loop lambda eof object 
close input port port evaluate empty env lambda ignore loop read port loop read port open input file file booting process set 
mapper lambda null 
cons car mapper cdr set 
initialize global env lambda set 
global env extend empty env primitive identifiers mapper primitive primitive identifiers set 
boot flat lambda initialize global env openloop 

set 
boot tower lambda initialize global env file name set cdr 
global env cons cons global env global env cdr global env openloop 
set 
file name simple ss 
