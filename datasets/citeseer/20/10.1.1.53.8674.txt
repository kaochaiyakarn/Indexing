appear proceedings seventh international conference parallel distributed computing systems las vegas nv october 
implementing lock free queues john valois department computer science rensselaer polytechnic institute troy ny study practical techniques implementing fifo queue data type lock free data structures synchronize operations concurrent processes mutual exclusion 
new algorithms linked lists arrays 
propose new solution aba problem associated compare swap instruction 
performance linked list algorithm compared lock free queue implementations conventional locking techniques 
concurrent access data structure shared processes synchronized order avoid conflicting updates 
conventionally done mutual exclusion processes modify data structure inside critical section code process guaranteed exclusive access data structure 
typically multiprocessor critical sections guarded spin lock refer methods mutual exclusion locking methods 
researchers studied methods implementing concurrent data structures mutual exclusion 
asynchronous environment lock free data structures advantages 
particular slow stopped processes prevent processes accessing data structure 
fifo queue important data type lying heart operating system implementation 
queues useful implementing parallel versions algorithms quicksort branch bound generally useful means distributing number processes 
authors proposed algorithms lock free queues literature :10.1.1.39.8065
remainder examine practical implementations lock free fifo queues 
section introduces essential concepts related lock free data structures 
sections surveys previous presents new algorithm lock free queues linked list data structure section discusses handle aba problem occur types algorithms 
section surveys algorithms arrays presents second new algorithm 
section reports preliminary experimental results comparing algorithms techniques 
background goal design concurrent queue supports normal enqueue dequeue operations 
concurrent data structure individual processes execute single operations sequentially operations different processes may progress simultaneously 
differs parallel data structure processes cooperate perform operations simultaneously sequential data structure accessed single process 
useful properties lock free data structure may 
non blocking property guarantees process executing operation complete finite number steps wait free property guarantees process complete operation finite number steps 
non blocking data structure property men tioned data structure accessible despite processes may slow halt operation 
wait free data structure ensures process starve 
note lock data structure property process inside critical section delay operations indefinitely 
authors terms lock free non blocking synonymous find useful distinguish algorithms require mutual exclusion provide non blocking property 
algorithms discuss fall category 
linearizability correctness condition data structures 
linearizability implies operation appears take place instantaneously point time relative order non concurrent operations preserved 
words operations concurrent data structure behaves exactly sequential counterpart 
concurrent operations take place relative sequential order 
universal constructions exist constructing data structures sequential functional algorithms concurrent lock algorithms 
general simple data structure queue methods far overhead algorithms considering 
assume target architecture supports common atomic read modify write primitives fetch add faa compare swap csw 
faa atomically reads value memory location adds value writes result back memory location returning original value 
csw takes values memory location old value new value 
current value memory location equal old value new value written memory location 
csw atomically writes new value memory location know current contents 
csw returns condition code indicating successful 
notation pseudo code pointer represents object pointed field refers field object 
assume memory allocation reclamation provided memory management discussed section 
linked list implementations section review proposed algorithms lock free queues linked list data structure propose new algorithm 
data structure algorithms composed records containing fields pointer record list value data value stored record 
global pointers head tail point records list pointers quickly find correct record dequeuing enqueuing respectively 
algorithms exception algorithm massalin pu described section implemented csw atomic primitive 
non linearizable methods csw implement queues shared multiple processors mentioned original attributed early 
brief mention method 
method works follows dequeue operation csw advance head pointer forward node linked list node originally pointed dequeued 
enqueue operation csw tail pointer point new node enqueued new node linked list 
author omits discussion handle empty queues trivial task empty queue concurrent enqueue dequeue operations conflict 
algorithms result non linearizable behavior 
particular possible process performing dequeue operation think queue empty enqueuing process slow linking new node list 
furthermore process halts completely list structure broken repaired halted process knowledge link needs 
blocking methods mellor crummey stone versions basic algorithm fix flaws 
order ensure queue linearizable algorithms detect slow enqueuing process linked node list simply wait 
employ mutual exclusion algorithms non blocking property 
non blocking methods prakash queue linearizable non blocking 
approach take snapshot current state queue information process able complete operation stalled process may blocking 
order accomplish enqueue operation algorithm uses csw link new node list uses second csw update tail 
second csw retried fails 
keeps information necessary process complete enqueue operation updating tail globally accessible 
disadvantage algorithm need take snapshot queue enqueuing dequeuing processes normally interfere experience contention 
massalin pu developed lock free queue algorithms part lock free multiprocessor operating system 
algorithms rely powerful variant compare swap allows arbitrary words modified atomically motorola processor consider algorithms 
new lock free queue describe new lock free queue algorithm 
pseudo code algorithm appears 
enqueue new record value null repeat tail succ compare swap null succ true compare swap tail succ true compare swap tail dequeue repeat head null error queue empty compare swap head return value enqueue dequeue operations 
algorithm prakash enqueue operations algorithm links new node list updates tail pointer 
dequeue operation slightly different 
having head point node currently front queue points node dequeued 
node head queue node immediately pointed head 
dummy node front list ensures head tail point node linked list avoiding problems occur queue empty contains single item 
technique eliminates contention enqueuing dequeuing processes single item queue 
longer need snapshot prakash algorithm intermediate state queue tail pointer updated 
process performing enqueue operation discover csw returns unsuccessfully attempt update tail 
shows queue implemented described section 
notice process midst enqueuing item tail pointer updated 
head tail queue linked list 
strategies retrying operations 
code employ strict policy regarding positioning tail pointer points node list immediately preceding 
accomplished second csw instruction attempts update tail pointer process fails enqueue node 
alternative policy treat tail hint location node list pointing node fairly close possibly exactly list 
gives pseudo code implementing policy 
theorem shows maximum distance list tail pointer stray limited number concurrent enqueue operations 
enqueue new record value null tail repeat null compare swap null compare swap tail enqueue alternative policy 
theorem concurrent processes performing queue operations tail points node gamma node list 
proof need consider processes performing enqueue operations 
consider operation succeeded setting tail pointer 
gamma operations completed enqueue operations adding nodes list failed update tail due conflict process 
concurrent enqueue operations inserted node list attempted change tail pointer 
third alternative exists 
experiments implementations policies indicated second policy resulted enqueuing processes spending majority time traversing linked list policy resulted undue contention second csw instruction 
intuitively second csw instruction superfluous time process fails link item list process successful updated tail 
observations lead third policy processes update tail pointer just successfully linked new item list 
simply code delta delta delta compare swap delta delta delta deleted 
experiments shown policy result fastest code conditions processes stall 
unfortunately change side effect destroying non blocking property stopped enqueuing process fails update tail pointer enqueues succeed 
nonblocking property restored implementing hybrid second third policies tail pointer updated tries enqueuing process simply search list update tail 
aba problem algorithms discussed section csw way pointer data structure read computation done determine change data structure csw write new value pointer changed interim 
subtle problem arise due fact csw instruction really ensure pointer changed certain value 
pointer changed coincidence value originally read csw instruction succeed fail 
see problem occur queue algorithm consider process attempting dequeue item 
process read value head determine address second node linked list node csw head point second node 
head changed due processes completing dequeue operations csw instruction fail 
suppose block memory making node list recycled reused new node enqueued process read head pointer tried csw 
node happens way front list process performs csw succeed corrupting linked list structure 
problem known aba problem 
conventional solution problem variant csw operates adjacent words memory time word hold pointer word hold tag incremented time pointer changed 
way pointer changes changes back original value tag changed csw operation succeed 
safe read protocol preceding solution addition requiring stronger version csw aba problem occur 
section propose alternative solution require double word version csw guarantees aba problem occur 
observe csw manipulate pointers root cause aba problem attributed nodes recycled reused processes looking 
view aba problem memory management 
solve keep track safe recycle node assigning node count reusing node count gone zero 
necessary ensure process pointer data structure atomically reads pointer increments count pointed node 
call operation safe read pseudo code operation 
corresponding release operation loop null return fetch add return release goto loop operation 
ment count process done pointer 
count zero memory block recycled 
release operations part presumed supported underlying memory management library provide usual alloc free operations 
details implement library providing versions operations author phd thesis 
array implementations common implement sequential queues circular array data structure 
type data structure advantage lower overhead linked list structures need pointers unnecessary allocate deallocate memory operation 
herlihy wing array queue non blocking linearizable requires array infinite length 
wing gong propose modification algorithm removing need infinite array algorithms running time dequeue operation degrades enqueue operations done 
algorithm proposed treiber suffers poor performance 
gottlieb algorithm efficient blocks certain conditions 
probability blocking occurring smaller increasing size array true non blocking algorithm 
new algorithm new algorithm lock free queue array 
algorithm non blocking linearizable 
approach differs previous algorithms uses csw instruction faa instruction 
algorithms previous section faa allocate position array enqueuing 
array set standard circular array 
addition data values user wishes store queue special values head tail empty 
initially location array set empty exception adjacent locations set head tail 
represents empty queue 
algorithm works follows 
enqueue value process finds unique location containing special tail value 
double word compare swap operation change adjacent locations ht ail empty hx 
note location adjacent containing tail empty queue full operation aborts 
dequeue operation works similar manner csw operation change adjacent locations xi returning value provided course tail case queue empty 
order quickly find locations array containing values head tail keep counts number enqueue number dequeue operations modulo size array 
counts incremented faa process completes operation determine location head tail values standard version csw provided data values stored half words 
number concurrent processes 
note keeping indices ends queue variables csw due aba problem prevent indices reused safe read protocol applied 
shows queue implemented described section 
notice process midst enqueuing item tail count variable incremented 
head count tail count empty empty head tail queue circular array 
technique provide stack deque double ended queue data types 
subtle problem real machines memory operations aligned 
algorithm requires unaligned csw operation infeasible real machine 
experimental results difficult characterize performance types concurrent algorithms running time depends number concurrent processes 
algorithms sequence operations take time proportional product number operations number concurrent processes 
theorem sequence queue operations take np time 
proof proof generalized algorithms 
note case contention processes operation complete constant time 
contention causes processes due things looking proper place data structure perform operation traversing nodes find linked list retrying failed csw operations 
note theorem time find linked list tail pointer 
array implementation enqueue dequeue operation counters correct value processes performed operation incremented counter 
new items may added linked list array operation progress 
traverse items total np operation cause gamma concurrent operations traverse item 
similar argument total retry failed csw operations np 
bound follows 
bound reflects worst case behavior 
order better compare performance different lock free algorithms discussed equivalent lock algorithms implemented proteus parallel architecture simulator 
numerical results quoted cycles simulated proteus 
asses performance algorithms measured quantities sequential latency operation time operation performed contention processes latency operation varying amounts contention concurrent operations 
contention modeled assuming infinite number processors performed queue operations interarrival times exponential distribution 
addition lock free data structures described section implemented concurrent queue mutual exclusion 
tested locking mechanisms simple test set locks test test set locks ticket locks queue locks mellor crummey scott 
order measure algorithm performance implement safe read protocol tests avoid aba problem reusing nodes linked list 
addition remove overhead memory allocation results pre allocated buffer nodes tests 
method managing contention processes necessary typically backing failed csw lock acquisition 
type backoff sensitive tuning parameters initial experiments backoff algorithm simple exponential backoff algorithms exception ticket queue locks 
ticket locks proportional backoff procedure queue locks require backoff 
latency contention graphs average latency enqueue operation 
results represent mean operations varying levels contention measured average interarrival time operations shows results dequeue operation 
interarrival time enqueue operation valois queue lock prakash stone tas ticket lock average latency enqueue operation 
interarrival time dequeue operation valois queue lock prakash stone tas ticket lock average latency dequeue operation 
preliminary results indicate lock free queues competitive data structures mutual exclusion 
algorithm efficient non blocking provides linearizable behavior making promising practical applications 
algorithm enqueue dequeue stone valois test test set test set prakash ticket lock queue lock table sequential latency queue operations 
sequential latency table contains results sequential latency tests 
algorithm stone algorithm fastest 
attributed simplicity sequential case contention algorithms execute instructions 
summary new data structures algorithms implementing concurrent queue non blocking linearizable 
proposed new solution aba problem 
initial experiments comparing algorithm alternatives including data structures mutual exclusion indicate practical 
research experiments needed determine performance algorithms varying conditions 
example lock free approach attractive processes suffer slow downs inside critical section experiments needed determine conditions lock free data structures outperform lock counterparts 
focused queue data type data types benefit lock free methods 
researchers lock free algorithms variety problems including disjoint sets garbage collection priority queues multiprocessor operating system kernel 
currently investigating implementations lock free data structures linked lists binary search trees 
universal constructions mentioned section provide lock free data structures property 
desirable property generally requires providing higher level coordination processes introduces large overhead 
believe better approach ensure fairness scheduling backoff policy 
needed determining best 
array implementation section feasible real machines due alignment problems 
algorithm far efficient solutions arrays 
algorithm realistic efficient lock free data structures provide alternative method synchronization advantages spin locking 
research needed determine extent advantages exploited applications 
anderson woll 
wait free parallel algorithms union find problem 
proceedings rd acm symposium theory computation pages 
brewer dellarocas weihl 
proteus high performance parallel architecture simulator 
proceedings acm sigmetrics performance conference june 
gottlieb rudolph 
basic techniques efficient coordination large numbers cooperating sequential processors 
acm transactions programming languages systems april 
herlihy 
methodology implementing highly concurrent data structures 
second acm sigplan symposium principles practice parallel programming pages 
herlihy moss 
lock free garbage collection multiprocessors 
proceedings rd annual acm symposium parallel algorithms architectures pages july 
herlihy wing 
axioms concurrent objects 
th acm symposium principles programming languages pages 
herlihy wing 
linearizability correctness condition concurrent objects 
acm transactions programming languages systems july 
hwang briggs 
computer architecture parallel processing pages 
mcgrawhill 
ibm watson research center 
system principles operation 
israeli 
efficient wait free implementation concurrent priority queue 
proceedings workshop distributed algorithms pages 
massalin pu 
lock free multiprocessor os kernel 
technical report cucs columbia university new york ny 
mellor crummey 
concurrent queues practical fetch oe algorithms 
technical report university rochester november 
mellor crummey scott 
algorithms scalable synchronization shared memory multiprocessors 
acm transactions computer systems february 
peter moller nielsen 
problem heap paradigm multiprocessor algorithms 
parallel computing 
plotkin 
sticky bits universality consensus 
proceedings th acm symposium principles distributed computing pages august 
prakash lee johnson 
non blocking algorithm shared queues compare swap 
proccedings international conference parallel processing volume pages 
prakash lee johnson 
non blocking algorithms concurrent data structures 
technical report tr university florida 
sites 
operating systems computer architecture 
stone editor computer architecture chapter pages 
science research associates nd edition 
stone 
simple correct shared queue algorithm compare swap 
proceedings supercomputing pages 
treiber 
systems programming coping parallelism 
technical report rj ibm almaden research center april 
turek 
resilient computation presence slowdowns 
phd thesis new york university 
valois 
phd thesis rensselaer polytechnic institute troy ny preparation 
wing gong 
library concurrent objects proofs correctness 
technical report cmu cs carnegie mellon university 
