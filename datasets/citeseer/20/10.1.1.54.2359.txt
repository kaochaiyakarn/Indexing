issues tcp sack sally floyd floyd ee lbl gov rough draft march note investigate issues regarding behavior tcp sack tcp sack option proposed mmfr 
question address tcp sack aggressive presence congestion current tcp implementations way damaging network 
second related question concerns current tcp implementations fare congested environment competing tcp implementations sack 
final issue address specific concerns limited number sack blocks sack option format proposed mmfr 
number successive ack packets dropped network fast recovery period sender unaware receiver received packet retransmit packet unnecessarily 
section quantify exposure tcp sack unnecessary retransmission packets 
show exposure low strictly exposure current tcp implementations 
background simulator discussion issues related tcp sack reader referred ff 
congestion control issues tcp sack damage network 
certainly possible build dangerous implementations tcp sack just possible build dangerous implementations tcp sack dangerous users internet 
implementations tcp sack follow underlying congestion control principles guided tcp implementations years jac 
window data packets dropped sender interprets supported director office energy research scientific computing staff department energy contract 
de ac sf 
congestion reduces sender congestion window half 
avoid overloading network outgoing data packets effectively clocked incoming ack packets obey principle conservation packets 
current tcp congestion control algorithms incoming ack packet permits outgoing data packets period expansion slow start 
implementations tcp sack adhere current practices listed 
argue implementation tcp sack follows current practices congestion control principles poses danger traffic network 
behavior tcp sack identical reno tcp packet dropped window data 
multiple packets dropped window data behavior tcp sack similar reno tcp single packet dropped window 
tcp sack unnecessarily penalize tcp connection multiple packets dropped single window data 
respects tcp sack behaves identically reno tcp 
wait duplicate retransmitting packet 
delay provides robustness packets reordered network 
sender receive single duplicate simply data packets reordered network case retransmission sender unnecessary 
respond conservatively sustained severe congestion 
tahoe reno tcp implementations respond conservatively sustained severe congestion simple halving congestion window roundtrip time 
tcp sack implementations conservative response provided possible wait retransmit timer expire followed slow start retransmitted packet dropped 
conservative response provided sender retransmission policy fast recovery incoming sack packets clock outgoing retransmitted data packets 
follows current practice reno tcp obey principle conservation packets fast recovery period 
tahoe implementations conservative response sus tained congestion provided slow start recovery congestion 
reno implementations number packets dropped window data retransmitted packet dropped conservative response sustained congestion provided waiting retransmit timer expire followed slow start 
retransmit timers ensure reliable delivery data 
tcp sack retransmit timers exactly done tahoe reno tcp reliable delivery data ensured 
behavior tcp sack respects easier understand behavior tcp tahoe reno algorithms 
tahoe tcp complications slow start congestion avoidance phases reno tcp behavior occurs multiple packets dropped window data performance tcp sack straightforward easier understand easier predict 
tcp sack allows fairly clean straightforward implementation window decrease algorithm internet years reducing sender congestion window half packets dropped current window data 
necessarily understand aspect modification tcp deployed network tcp sack years simulations receive concentrated attention immediate 
received advance thought discussion number deployments changed traffic dynamics internet www unicast multicast realtime traffic reliable multicast traffic 
older tcp implementations fare tcp sack 
tcp sack follows fundamental congestion control principles current implementations tcp connections current tcp implementations suddenly shut network having compete tcp sack 
current tcp connections handicapped throughput forced wait retransmit timer expire number packets dropped window data reno tcp ff requirement slow start single packet dropped tahoe tcp 
performance large window tcp remain handicapped sack option added tcp 
large window tahoe reno tcp connection competing bandwidth large window tcp sack connection tcp sack connection receive larger share link bandwidth 
way tahoe connection compete reno tcp connection environment multiple drops single window data red gateways fj reno tcp connection receive larger share link bandwidth 
tahoe connection compete reno connection noisy environment multiple packet drops congestion epoch tahoe connection receive larger share link bandwidth 
similarly internet number circumstances cause different tcp connections receive different shares link bandwidth 
circumstances include different roundtrip times different numbers congested gateways different tcp senders clock granularities different tcp receivers policies regards delayed acks 
argument deployment tcp sack tcp sack connections receive precisely bandwidth tahoe reno tcp connection receive circumstances 
certainly performance incentives high bandwidth tcp connections tcp sack 
tcp sack follows fundamental congestion control principles current implementations tcp mice short small bandwidth tcp connections tcp flavor penalized having compete elephants longer large bandwidth tcp connections tcp sack 
intend investigate competition bandwidth mice elephants detail 
unnecessary retransmission packets section investigate robustness tcp sack respect unnecessary retransmission packets 
show exposure tcp sack strictly current implementations tcp 
proposal mmfr sack option packet contain sack blocks allowing sack block repeated times successive ack packets 
ack packets reporting particular sack block dropped sender assume data sack block received unnecessarily retransmit segments 
section show exposure tcp sack regard unnecessary retransmission packets strictly exposure current implementations tcp 
worst case scenarios tahoe tcp shows simulations tahoe tcp 
bottom example uses delayed ack receiver top example 
tahoe tcp sender unnecessarily retransmit packets multiple packets time packet number mod 
time packet number mod 
duplicate packets retransmitted tahoe tcp 
dropped single window data 
simulations packets dropped window packets packets window unnecessarily retransmitted sender 
simulations run specifying simulator exactly packets drop gateway laboriously scheduling competing traffic produce desired pattern packet drops 
allows easily create worst case scenarios 
generated tracing data packets entering departing congested gateway 
graph axis shows packet arrival departure time seconds 
axis shows packet number mod 
packets numbered starting packet 
packet arrival departure marked dot graph 
example single packet passing gateway experiencing appreciable queueing delay generate marks close graph appear single mark 
packets delayed gateway dropped generate colinear marks constant packet number spaced queueing delay 
packets dropped due buffer simulations run ns commands ns dups tcl tahoe ns dups tcl tahoe respectively 
simulations run bug fix set true avoid multiple fast retransmits drops single window data flo 
flow indicated graph packet dropped 
limitations cumulative sender simulations find additional dropped packet roundtrip time 
consider top simulation 
time sender receives duplicate acks initiates fast retransmit retransmitting packet entering slow start 
sender receives ack packet acknowledging packets including packet sender increases congestion window packets retransmits packets 
packet needed receiver packet retransmission packet waste possibly valuable link bandwidth 
receiver receives retransmitted packet sends packets including packet 
continuing fashion sender receives packet increases congestion window retransmits packets 
packet needed receiver packets retransmitted unnecessarily 
tahoe implementations tcp congestion window contains packets sender unnecessarily retransmit half packets 
congestion window contains packets easy construct scenarios sender unnecessarily retransmits half packets window 
note behavior similar delayed acks 
worst case scenarios reno tcp shows worst case scenarios unnecessarily retransmitted packets reno tcp 
bottom example uses delayed ack receiver top example 
simulations packets dropped window eleven packets packets window unnecessarily retransmitted sender 
simulations sender wait retransmit timer expire recover multiple packets dropped single window data 
worst case scenarios tcp sack contrast examples tahoe reno tcp difficult construct scenarios tcp sack sender unnecessarily retransmits packets 
section consider sack option packet room exactly sack blocks sack packet 
section assumptions sender retransmit policies tcp sack 
sender retransmit packets received duplicate acks acks don ad simulations run ns commands ns dups tcl reno ns dups tcl reno respectively 
time packet number mod 
time packet number mod 
duplicate packets retransmitted reno tcp 
vance cumulative 
second duplicate ack received sender retransmits data packet 
constraints limit exposure tcp sack regards unnecessary retransmission packets 
exposure tcp sack limited redundancy sack option provides sack blocks appear successive sack option packets 
retransmit timeout tcp sack uses slow start procedure reno tahoe tcp exactly exposure packets 
show absence retransmit timeout scenario produce single unnecessarily retransmitted packet tcp sack requires sender congestion size packets 
congestion window packets required constructing formal proof description data packet dropped cause fast retransmit place 
sender successfully receive dup acks fast retransmit 
account required data packets 
sack packets dropped data ack packet eventual sender pkt 
reaction normal ack send normal data packet lost dup ack action dup ack action dup ack retransmit pkt 
dup ack ack lost data packet lost dup ack ack lost data packet lost dup ack ack lost data packet lost dup ack retransmit pkt 
worst case example tcp sack 
sender unaware receiver received particular packet 
account far required data packets 
data packet acknowledged successive sack packets data packet followed dropped packet followed singletons data packets preceded followed dropped packets 
account dropped data packets total far required data packets 
packet retransmitted sender packet acknowledged sender receives fourth duplicate ack order send unnecessarily retransmitted packet 
accounts required packets 
established congestion window packets required sender unnecessarily retransmit packet data packets dropped window data 
sequence data packets precise sequence exactly lost ack packets required order sender unnecessarily retransmit packet 
example successive sack packets dropped sender unaware receiver received packet 
sequence data packets forward direction sequence dropped sack packets sequence sack packets result unnecessarily retransmitted data packet 
congestion window eleven packets chance sequence dropped data packets accompanied just right sequence dropped ack packets permit sender unnecessarily retransmit packet 
pattern dropped data packets chance pattern dropped ack packets enables sender unnecessarily retransmit packet 
example particular case patterns sack packets dropped path receiver sender 
chances dropped packets exactly possible patterns 
attempted complete analysis worst case probabilities unnecessarily retransmitted packets tcp sack convinced number unnecessarily retransmitted packets acceptably low case number packets strictly corresponding tahoe reno implementations 
aware throughput degradation possible tcp sender unnecessarily retransmits packets cells written entire subject context tcp atm rf 
research congestion control algorithms clearly sack option open way research modifications tcp congestion control algorithms fack algorithm proposed matt mathis jamshid mahdavi add potential proposals tcp sack lossy links wireless satellite links 
modifications tcp underlying congestion controls course receive close attention review received proposed modification tcp underlying congestion controls 
previous research tcp sack section summarize published investigating performance tcp sack 
simulations flo investigate performance tcp sack reduce half window decrease algorithm increase window increase algorithm terminology scenarios number active tcp connections range round trip times numbers congested gateways 
flo example shows performance tcp sack environment red gateways 
figures flo considers performance tcp sack gateway queueing disciplines red random drop drop tail gateways 
note addressed possible concerns effects tcp sack shown behavior tcp sack cause undesirable network effects 
included contributions ideas kevin fall matt mathis jamshid mahdavi allyn romanow 
necessarily mean acknowledged agrees document 
borman braden jacobson 
tcp extensions high performance 
request comments proposed standard rfc internet engineering task force may 
rfc 
ff fall floyd 
comparisons tahoe reno sack tcp 
technical report 
available www nrg ee lbl gov 
html 
fj sally floyd van jacobson 
random early detection gateways congestion avoidance 
ieee acm transactions networking aug 
available www nrg ee lbl gov nrg papers html 
flo sally floyd 
connections multiple congested gateways packet switched networks part way traffic 
acm computer communication review oct 
flo sally floyd 
tcp successive fast retransmits 
technical report 
available ftp ftp ee lbl gov papers ps 
jac jacobson 
congestion avoidance control 
sigcomm symposium communications architectures protocols pages 
updated version available ftp ftp ee lbl gov papers ps mmfr matthew mathis jamshid mahdavi sally floyd allyn romanow 
tcp selective option 
internet draft progress 
rf allyn romanow sally floyd 
dynamics tcp traffic atm networks 
ieee journal selected areas communications 
available 
ee lbl gov nrg papers html 
