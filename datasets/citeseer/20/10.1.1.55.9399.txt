ukkonen mccreight weiner unifying view linear time suffix tree construction robert giegerich stefan kurtz universitat bielefeld technische fakultat postfach bielefeld germany phone fax mail uni bielefeld de 
review linear time suffix tree constructions weiner mccreight ukkonen 
terminology algorithm ukkonen online construction explain historic predecessors 
reveals relationships closer expect algorithms different intuitive ideas 
completely explains differences algorithms terms simplicity efficiency implementation complexity 
key words 
text processing 
online string matching 
suffix trees 
linear time algorithm 
program transformation 
motivation overview suffix trees provide efficient solutions myriad string processing problems 
suffix tree string really turns inside immediately exposing properties longest frequent subwords 
fundamental question occurs answered jwj steps independent length suffix tree constructed 
great importance suffix tree constructed represented linear time space 
spite basic role string processing elementary books algorithms data structures barely mention suffix trees give efficient algorithms construction 
exceptions 
reason historical starting seminal weiner suffix tree construction built reputation overly complicated 
purpose correct reputation working essential efficient suffix tree construction unnecessary complexity 
supported international computer science institute berkeley ca 
precisely review linear time algorithms weiner mccreight ukkonen 
call algorithms mcc ukk 
terminology algorithm ukkonen online construction explain predecessors 
reveals relationships closer expect algorithms different intuitive ideas 
completely explains differences algorithms terms simplicity efficiency implementation complexity 
section take time carefully establish terminology necessary suffix tree construction 
new aspects section generalized definition suffix links observations concerning duality reverse prefix trees 
section gives exposition ukkonen mccreight algorithm level showing different intuitive ideas lead sequence tree constructing operations 
sections observation precise 
derivation ukkonen algorithm section ukkonen transformed mccreight algorithm 
section explains transformation steps 
section revisits weiner algorithm 
sense precise shown version ukk working wrong tree 
section concludes 
see overview purpose purely academic new algorithms improvements old ones 
just explanations known ones relate 
puzzled complexity linear time suffix tree construction hope enjoy just reading sections 
technical material section may safely spared reading 
suffix trees duality properties trees suffix trees finite set alphabet 
elements characters 
denotes empty string denotes set strings denote characters denote strings 
reverse denoted gamma uvw possibly empty prefix word suffix prefix suffix proper different suffix prefix nested occurs notice nested suffix gamma nested prefix gamma call word right branching left branching different characters wa wc aw cw words 
course right branching gamma left branching gamma definition tree tree rooted tree edge labels node edge aw stands historic name weiner repetition finder 
suffix trees introduced special form trees 
terminology suffix tree construction applies trees 
tree 
path denote concatenation edge labels path root node due requirement unique edges node path labels unique denote path denote subtree node definition words represented tree string occurs contains node wu words denote set strings occurring words call pair respect node bu 
longest prefix canonical pair respect case write 
canonical pair form called explicit node denotes node canonical pair aw called implicit node node exist seen inside edge 
definition atomic compact trees atomic edge marked single character 
compact node root leaf branching node 
atomic trees known name trie 
atomic compact trees uniquely determined words occurring 
atomic tree node explicit 
compact tree nodes single outgoing edge implicit nodes 
definition suffix trees 
suffix tree tree words fw 

atomic suffix tree denoted ast 

compact suffix tree denoted cst 

ast gamma cst gamma called atomic compact reverse prefix tree respectively 
shows different suffix trees string 
reverse prefix tree course new just suffix tree gamma play important role explaining suffix tree constructions 
refine notation writing oe gamma node reverse prefix tree 
decide word occurs takes jwj steps check path labeled efficient access subwords raison etre suffix trees 
known space requirements representing atomic compact suffix trees holds reverse prefix trees alike different suffix trees string xxxxxxxx xz gamma gamma gamma psi gamma gamma gamma psi gamma gamma gamma psi gamma gamma gamma psi xxxxxxxx xz gamma gamma gamma psi gamma gamma gamma psi gamma gamma gamma psi cea gamma gamma gamma psi xxxxxxxx xz gamma gamma gamma psi gamma gamma gamma psi gamma gamma gamma psi ea gamma gamma gamma psi xxxxxxxx xz gamma gamma gamma psi gamma gamma gamma psi gamma gamma gamma psi gamma gamma gamma psi 
ast nodes take 
isomorphic subtrees shared 
sharing brings space requirements 
subtree sharing may impossible leaves annotated extra information 

cst nodes inner nodes branching leaves 
edge labels represented constant space pair indices necessary achieve theoretical worst case bound 
practice quite delicate choice representation virtual memory environment 
traversing tree reading edge labels create random accesses lead performance problems memory subsystem 
open edges particularly convenient representation edges lead leaf node leaf edges short introduced 
label leaf edge extends scanned prefix may represent index pair jtj denoting jtj value means extended right label leaf edge grows implicitly leaf continues represent complete suffix extended representation called open edge 
play crucial part sections 
little speculation say weiner seen idea designed ukkonen algorithm textbooks today 
shall return section 
trees isomorphic bijection node sets wu edge wu edge compact suffix trees xxxxxxxx xz gamma gamma gamma psi cda gamma gamma gamma psi cda xxxxxxxx xz gamma gamma gamma psi cda gamma gamma gamma psi gamma gamma gamma psi cda active suffixes prefixes notion plays central part constructions definition active suffix prefix active suffix longest nested suffix denoted ff 
active prefix longest nested prefix denoted ff gamma 
notation ff gamma ff gamma gamma node representing active suffix cst point suffix tree 
extended right character changes tree structure start point 
correspondingly active prefix node respond extensions left 
behavior proved spelled detail sections 
mccreight uses functions head tail split suffix initial part occurs left remainder 
define way 
definition head tail strings head longest prefix nested suffix ux 
tail defined head tail 
role sentinel character nested suffix suffix tree contain leaf convenient add sentinel character say occur nested suffix empty string non empty suffix uniquely corresponds leaf suffix tree 
considering word node number leaves equal number positions occurs definition suffix rests node suffix tree fs ws suffix tg 
clearly uniquely determines shape determined edge labels tw answer sentinel leaf ws 
answer sentinel seen cst shown 
simplifies proofs constructions considerably assume presence sentinel character 
contexts may expanded right online construction requirement unique final character sense 
subsequent sections sentinel character assumed explicitly say 
suffix links construction applications trees convenient augment trees auxiliary edges connect nodes quite unrelated tree structure definition suffix links consider tree aw node longest suffix node unlabeled edge aw suffix link suffix link aw called atomic 
notice node defined node suffix tree trie suffix links identical failure transitions 
name suffix link due 
authors define link root 
obscures algorithms observations section 
proposition 
atomic suffix tree suffix links atomic 

compact suffix tree suffix links atomic 
proof 
follows definitions nodes ast explicit 

show node aw node cst 
aw branching node leaf 
aw right branching non nested suffix 
holds node cst 
drop sentinel case assertion 
suffix links inner nodes cst atomic 
leaf aw may nested due lack explicit node case non atomic suffix link aw proper suffix note link possible exception suffix links cst atomic 
suffix links key efficient sequential suffix tree construction 
atomic suffix tree augmented suffix links seen head automaton 
denoting heads represent configuration ffl uv scanned part tree suffix link tree hj phi phi phi phi phi phi ade cde 
phi phi phi hj da dc ffl memorized part ffl unread part input string 
ay cx possible transitions ay cx edge ay ay cx ua cx suffix link ay view taken 
nicely summarizes additional power suffix links useful contexts 
example automaton compute matching statistics gram distance shift table boyer moore algorithm 
dualities suffix trees suffix links study deeper relation suffix trees suffix links 
note suffix links form tree 
definition suffix link tree gamma tree node oe node edge oe gamma oe vw vw suffix link easy confirm gamma fact tree node exactly suffix link designates parent gamma notation gamma justified subsequent results 
arbitrary tree gamma generally tree seen node oe edges 
changes suffix tree proposition duality atomic suffix trees ast gamma ast gamma 
words suffix link tree atomic suffix tree reverse prefix tree 
proof edge oe oe aw ast gamma iff suffix link aw ast iff nodes aw ast iff nodes oe oe aw ast gamma iff edge oe oe aw ast gamma 
atomic suffix tree gamma gamma gamma gamma psi gamma gamma gamma psi gamma gamma gamma psi oe oe oe shows ast ast gamma 
solid edges represent ast dotted edges labels represent suffix links 
vice versa ast gamma 
reason duality widely known considering compact suffix tree main object interest obscured fact explicit nodes compact suffix tree corresponding reverse prefix tree coincide 
weaker form duality holds proposition weak duality compact suffix trees 
cst gamma tree 

cst gamma represents subset words represented cst gamma 

cst gamma gamma cst 
proof 
assume node suffix link tree edges 
means cst suffix links 
aw node links point aw 
ffl suppose inner node 
right branching aw 
aw node contradiction 
ffl suppose leaves 
restriction generality suffix longer suffix link 
suffix link chain cst yields path labeled gamma suffix link tree 
course gamma gamma word 

statement cst gamma tree cst gamma gamma defined 
node set unchanged gamma operation reversal node names 
suffix link oe vw oe cst gamma iff suffix gamma vw gamma oe node vw gamma jr gamma jv gamma iff prefix vw node jrj jvj iff cst edge wv 
sequence trees constructed ukk mcc cst cst phi phi phi phi phi cst ad hj phi phi phi phi phi ad cst ada hj phi phi phi phi phi ada da cst hj phi phi phi phi phi dad cst hj phi phi phi phi phi ad gamma gamma gamma psi adc gamma gamma gamma psi adc cst phi phi phi phi phi hj phi phi phi phi phi adc hj phi phi phi phi phi ad gamma gamma gamma psi adc dc hj phi phi phi phi phi ad gamma gamma gamma psi adc gamma gamma gamma psi adc hj phi phi phi phi phi ad gamma gamma gamma psi adc gamma gamma gamma psi adc proposition slightly generalized sort suffix tree string gamma tree 
reverse statement hold 
example tree representing words aa bb 
gamma gamma tree suffix tree 
gamma word gamma represented suffix link tree right branching suffix 
adding sentinel change situation 
cst gamma subtree cst gamma nodes cst gamma nodes cst gamma 
precise sense proposition suffix link tree approximates reverse prefix tree 
duality cst approximates prefix links cst gamma 
point natural ask suffix prefix trees subsumed general data structure space duality inherent property 
fact affix trees introduced stoye self dual data structure 
scope 
turn suffix tree constructions 
comparison ukk mcc ukk reads left right character character incrementally constructs suffix trees prefixes seen far 
ukk labels open edges grow implicitly read edges split new open edges inserted explicitly 
intermediate trees constructing cst ukk shown left column 
mcc inserts suffixes initially empty tree 
starting longest suffix method online intermediate trees suffix trees 
suffix denote tree representing suffixes longer equal table operations compute intermediate trees operation applied ukk applied mcc add root cst cst add root cst split root ad cst add ad cst split root cst adc add cst adc add root cst dc right column shows intermediate trees constructing cst mcc 
introduce tree construction operations ffl split replaces edge vw uvw edges uv uvw ffl add adds new edge node leaf labeled note add operation abstracts edge label entered fully left open grow 
central observation section intermediate trees ukk mcc constructed sequence operations 
operations applied intermediate trees different way 
shown table analogies level break go concrete level presentation 
case abstracted number aspects essential making ukk mcc linear time algorithms 
take account analogy persists 
summarize shown full detail sections 
ukk transformed mcc modification control structure leaving sequence tree constructing operations invariant 

modification slight optimization 
fair implementation related data structures give mcc minor efficiency advantage ukk possible input 

transformation sacrifices online property 
mcc read ahead ukk lookahead quantified proposition 
assertion confirmed measurements 
fact invariance relative efficiency ukk mcc wonder deeper relationship algorithms 
note ukkonen remarks technical level main difference ukk mcc lies way character reads suffix link traversals arranged loops program 
study confirms explains observation 
development ukk mcc short derivation ukk space allow complete derivation ukk 
give short explanation concrete algorithm refer reader development 
online construction means generating series suffix trees longer longer prefixes cst trivial just root edges study step cst cst pa prefix character read 
construct cst pa insert suffixes pa cst 
sa suffix pa ukk observations suffixes ffl jff aj nested suffix corresponds leaf cst 
case sa correspond leaf cst pa implicit growing corresponding open edge 
ffl jff aj jff pa sa relevant suffix pa new leaf sa introduced 
ffl jff pa action required sa occurs cst 
ukk suffix represented canonical pair 
pairs canonical function 
relevant suffixes pa processed natural order decreasing length ff excluding ff pa corresponding canonical pairs accessed suffix links 
prefix globally ukk takes arguments call ffl cst 
ffl set suffix links ffl canonical pair ff ffl position gamma input character read 
convenience denote access canonical pair accomplished function link defined follows link root link cw root cw jtj 
ukk simply iteration function update inserts relevant suffixes 
ukk ukk update construct cst initial call ukk ukk root 
define function update 
relevant suffix update creates necessary new branching node edge splitting sets suffix link 
adds new open edge new suffix advances suffix link suffix canonical pair ff pt reached 
function applied right component pair extended new character 
indicated section edge labels implemented index pairs 
pair denotes label denotes suffix 
update edge root update update cw cwt update cw edge link cw bcw expression denotes tree results inserting suffix formally defined follows fb bt cw fb vg fb bcw bcw bt edge jwj equation implements add operation section 
second equation corresponds split add combination 
short description mcc embark derivation mcc ukk give short intuitive description target 
complete algorithm section transformation series 
mcc constructs cst successively inserting suffixes initially empty tree longest shortest 
produces sequence cst delta delta delta gamma cst compact trees suffix tree 
initial step mcc trivial obtained cst inserting longest suffix compact tree edge root suffix suppose head 
step mcc determines tail canonical pair head constant time tail 
accomplished suffix links scanning downward actual tree function scan see section 
constructs splitting node necessary adding leaf edge labeled tail 
transforming ukk mcc series program transformations ukk mcc mcc assumes ends sentinel 
assume rest section 
saw ukk produces sequence cst cst cst cst contain subsequence suffix trees leafs grow implicitly length input string 
sequence trees produced mcc non essential subsequences step produces tree different structure 
show fact additional non essential steps ukk difference algorithms 
technically transform ukk stepwise equivalent functions ukk ukk ukk ukk essential derivation steps 
equivalence means ukk root ukk root linear time complexity preserved 
ukk synthesize definition mcc 
definition essential steps derivation step ukk ukk essential set edges different set edges transformation step affect essential steps 
simply eliminates function update ukk yielding equivalent function ukk ukk ukk edge ukk root ukk ukk cw ukk cwt ukk cw edge link cw bcw develop ukk need lemmas 
lemma csa relevant suffix pa right branching word 
sa relevant suffix pa proof assumption cs nested suffix implies nested suffix strings character csa word suppose sd character strings right branching sa word 
sa relevant suffix pa lemma consider derivation ukk root delta delta delta cst 

cst derived gamma application equation 

assume derived application equation 
gamma derived gamma application equation 
proof 
gamma ukk gamma assume 
gamma derived gamma application equation equation 
occurs word character occurs contradiction sentinel derived gamma application equation 

equation applied gamma follows statement 
derived gamma application equation lead expression equation applicable 
show true equation 
assume derived gamma application equation 
gamma ukk cw ukk cw link cw bcw assumption 
gamma observe relevant suffix pa right branching lemma relevant suffix pa word 
occur cst cw 
equation applicable contradiction 
derived gamma equation 
consider maximal subderivation delta delta delta derivation equation applied 
lemma statement conclude derived application equation 
information need insert suffix bt bt canonical pair longest prefix bt occurs compute start node scan prefix gamma fall tree pair gamma obtain 
computing non essential steps equation function scan scan edge jpj jpj gamma scan jpj edge longest common prefix scan compute need equation 
furthermore lemma statement learn equation necessary 
transform ukk equivalent function ukk sentinel ensures happen exhausted nested suffix 
ukk ukk ukk root ukk scan ukk cw ukk cw link cw bcw notice equations result substituting equation 
correct obviously program transformation ukk ukk affect linear time complexity sequence non essential ukk derivation steps single character comparison transformed single non essential ukk derivation step character comparisons done order 
scan index starts advance string extra calls ukk give online property 
time gain slight speed advantage mcc ukk getting rid successive calls ukk 
step eliminate single non essential steps derivation form ukk root delta delta delta cst 
assume ukk derived expression gamma ukk application equation scan 
sentinel 
derive equation 
scan find equals right hand side equation 

equation applied deriving ukk link hq non essential step gamma merged step substitute equation yielding equivalent function ukk ukk ukk root ukk ukk scan link hq ukk cw ukk cw link cw bcw obviously ukk derivation steps essential 
furthermore transformation ukk ukk affect linear time complexity 
step synthesize definition function mcc properties mcc ukk root ukk root ukk link bu consider cases 
root 
mcc ukk 
ukk reduces application equation 
scan 
ukk reduces ukk root ukk root ukk link hq definition expressions equal mcc 

root 
mcc ukk 
scan ukk reduces ukk root ukk root ukk link hq definition expressions equal mcc 


mcc ukk link bu consider subcases ffl 
scan 
ukk reduces ukk root ukk root ukk link hq definition expressions equal mcc 
ffl 
link ukk reduces ukk equals mcc 
putting get definition mcc mcc root mcc mcc mcc link bu scan root scan scan definition mcc equivalent developed directly 
specification mcc easy see difference ukk mcc computation information delayed step mcc 
difference order number computation steps 
proposition jtj mcc froot tg root returns cst time 
proof construction mcc mcc froot tg root ukk froot tg root ukk root ukk root cst mcc derived ukk eliminating non essential derivation steps affecting number order essential steps mcc inherits linear time property 
synchronization points ukk mcc call point situation ffl ukk constructed suffix tree cst ffl mcc constructed tree suffix just inserted 
point ukk read character occur left behaves sentinel ukk mcc constructed cst character read 
generally mcc scanned call additional characters read mcc lookahead point proposition cw tail character string lookahead mcc point head uc head proof intuitively clear need scanned uc order insert new open edge formally verified implementation mcc section 
mean respect practical matters 
online construction attractive suffix tree intended search occurrences words word occurs suffix tree prefix occurrence constructed 
queries may expand tree 
suffix tree construction time amortized series queries 
practical advantage ukk online algorithm 
complete input string available say character file really matter partial tree construction stops exactly occurrence search key characters 
mcc may interleaved queries occurrences sense shares advantages truly online construction 
hand incrementally calculated computation say character stream difference matters ukk lazy mcc extra characters called mcc may induce overhead arbitrary dimension 
explanation weiner algorithm section go back roots take look algorithm year knuth 
explanation quite different treatment chen 
restate weiner algorithm technical form 
approach relate ukk 
shall explain today terminology revealing close relation algorithms discussed previous sections 
explanation enter detailed analysis take look weiner algorithm terms tree construction operations section 
reads input string right left successively inserts suffixes shortest 
shows suffix tree arises series add split operations 
ukk mcc crux lies efficient way move insertion point node node ad 
having read trough previous sections say just follow suffix link ad reverse direction 
idea totally wrong 
general case simple reverse links expensive usually exist needed 
traversing tree construct assume little known suffix trees 
natural thing think online construction successively building tree longer longer prefixes immediately problem arises existing leaf edges extended new character leading algorithm 
problem solved ukkonen open edges process right left 
way weiner calls suffix tree prefix tree vice versa treatment technical 
sequence trees constructed produced add root add root dc add root adc hj dc split root add adc hj phi phi phi phi phi adc dc split root ad add ad adc hj phi phi phi phi phi adc gamma gamma gamma psi adc hj phi phi phi phi phi ad gamma gamma gamma psi adc dc gamma gamma gamma psi adc leaves represent suffix need changed frequently 
decision quite logical bring tremendous difficulties shortly 
anyway building tree successively longer longer suffixes online property reverse direction 
call anti online property 
suppose suffix obtain cst cst naive anti online algorithm determines longest prefix word 
accomplished walking path cst far possible 
uv 
cases arise 
leaf cst leaf edge replaced leaf edge xv uv 

leaf cst algorithm splits necessary adds edge uv 
authors suggest similar naive versions algorithms shown efficiency log expected case 
factor log comes walking tree root point insertion 
algorithm access point 
string equals ff gamma problem solved iteration hop directly active prefix node 
course know exactly proposition edge vw cst ff gamma uv non empty 
proof longest prefix right branching nested prefix conclude ff gamma uv string non empty string ff gamma edge vw cst 
way ff gamma ff gamma cba xxxxxxxxxxxx gamma gamma gamma psi gamma gamma gamma psi 
bc bcde cb ae cb fd cb fd 
bcde link bcd bcd link bc bc enter relevant prefix bcd old active prefix hand just leaf inserted previous step 
hop new 
glancing ahead see ukkonen online algorithm swinging easily active suffix active suffix suffix links 
doing anti online construction interested active prefixes 
cst gamma available 
ff gamma prefix aff gamma determine ff gamma reverse prefix links shortening ff gamma right find prefix ap gamma occurs cst gamma 
exists ff gamma ap gamma ff gamma 
example 
shows relevant parts cst gamma plus new outgoing edge node oe bcd way ff gamma ff gamma cba 
sake comparison pairs written right left 
course simply construct reverse prefix tree dual problem started solve 
additional effort suffix tree simulate walk reverse prefix tree 
essential idea weiner algorithm time reason extra complexity 
consult proposition 
know cst gamma approximates reverse prefix tree 
learn reversed edges cst suffix links cst gamma approximate prefix links 
edges cst bidirectional sufficient approach ff gamma ff gamma 
final problem remains solution elegant expensive 
relevant suffixes inserted ukkonen algorithm follows edge suffix tree downward 
analogy shall need walk prefix edge ff gamma reached 
means additional effort record prefix edges nodes cst 
summing need extra information edges cst bidirectional traverse upwards 
node cst indicate node edge cst gamma 
call pending prefix edge 
target node edge happens node cst record proper prefix edge 
relevant parts cst pq gamma gamma gamma psi gamma gamma gamma psi gamma gamma gamma psi abc bc de bcd fb oe oe oe abc bcd ffi 
bcde bcd bcd bc bc bc abc simulate traversal prefix links cst gamma cst auxiliary information traversal starts leaf active prefix moves upward prefix edge indicated 
edge pending take detour higher tree recording length characters hit node proper prefix edge 
follow edge proceed downward cst recorded length detour 
example example 
shows relevant parts cst way ff gamma bcde ff gamma abc 
node bc pending prefix edge detour starts 
extra parenthesis bc indicate characters account length detour 
typical traversal passes root sophisticated example necessary demonstrate 
traversal create update extra information sure average see section 
summing may say weiner algorithm touch tragic faced problem growing leaf edges turns anti online construction 
means having traverse reverse prefix tree suffix tree constructed 
adds amount difficulty succeeds handling linear time constraint 
extra costs detail extra costs time space result simulated traversal reverse prefix tree 
recall extra information required see item page 
extra pointer needed equivalent effort storing suffix links ukk mcc 
extra data structures pending proper prefix edges space consuming maintainance slower 
extra information maintained fixed effort node visited 
vw uvw split uv node inherits proper pending prefix edges leaf uvw 
new leaf representing longest suffix naturally prefix edges created 
prefix edges node path ff gamma upward updated 
pending prefix edge explicit node uv record proper prefix edge uv 
point left final question traversal prefix links easily shown add node visits obvious true traverse suffix tree 
detour may take way root back 
exemplified 
fact happened iteration essentially back naive anti online algorithm 
prove form traversal visit nodes total 
lemma node encountered proper prefix edge ff gamma 
node au 
proof possibility node au xy aux explicit node 
inner node proposition applies 
suffix link points node ux proper prefix edge 
contradicts definition node traversal 
summit detour descent node 
consider depth nodes root visited decreased detour increased 
tree nodes 
sum increases bounded decreases add 
number nodes visited detours 
reached investigation clear suffix tree constructions considered mcc ukk closely related commonly assumed 
algorithms relative virtues different ffl ukk online elegant construction clue understanding ffl mcc efficient construction small margin ukk ffl practical virtue uses significantly time space remains true historic area string processing 
notion active suffixes suffix links duality suffix link trees prefix trees cardinal points linear time suffix tree construction 
truly formal way express conjecture sequential suffix tree construction concepts fail meet criterion 
pertain parallel constructions 
acknowledgments gene lawler encouraged exploit duality observation explaining suffix tree construction 
dan gusfield richard karp directed attention manuscript pratt 
dan gusfield provided carefully written exposition weiner algorithm 
discussions ukkonen improved understanding suffix trees 
careful comments referees gave valuable hints improve exposition 
contributions truly appreciated 
aho 
algorithms finding patterns strings 
van leeuwen editor handbook theoretical computer science volume pages 
elsevier 
aho corasick 
efficient string matching aid bibliographic search 
communications acm 
aho hopcroft ullman 
data structures algorithms 
addisonwesley reading ma 
apostolico 
myriad virtues subword trees 
pages 
apostolico galil 
combinatorial algorithms words 
springer verlag 
apostolico szpankowski 
self alignments words applications 
journal algorithms 
baeza yates 
string searching algorithms 
frakes baeza yates editors information retrieval algorithms data structures pages 
prentice hall englewood cliffs nj 
blumer blumer haussler ehrenfeucht chen 
smallest automaton recognizing subwords text 
theoretical computer science 
chang lawler 
approximate string matching sublinear expected time 
proceedings st ieee symposium foundations computer science pages 
chen 
efficient elegant subword tree construction 
pages 
cormen leiserson rivest 
algorithms 
mit press cambridge ma 
crochemore 
string matching constraints 
proceedings international symposium mathematical foundations computer science pages 
lecture notes computer science springer verlag 
crochemore rytter 
text algorithms 
oxford university press oxford 
vishkin 
symmetry breaking suffix tree construction 
proceedings th annual acm symposium theory computing pages 
giegerich kurtz 
suffix trees functional programming paradigm 
proceedings european symposium programming esop pages 
lecture notes computer science springer verlag 
giegerich kurtz 
comparison imperative purely functional suffix tree constructions 
science computer programming 
gonnet baeza yates 
text algorithms 
handbook algorithms data structures pascal pages 
addison wesley reading ma 
kurtz 
fundamental algorithms declarative pattern matching system 
dissertation technische fakultat universitat bielefeld available report july 
mccreight 
space economical suffix tree construction algorithm 
journal acm 
pratt 
improvements applications weiner repetition finder 
unpublished manuscript cambridge ma 
sedgewick 
algorithms 
addison wesley reading ma 
stephen 
string searching algorithms 
world scientific publishing 
stoye 

master thesis german technische fakultat universitat bielefeld 
ukkonen 
constructing suffix trees line linear time 
algorithms software architecture 
leeuwen ed information processing volume pages 
elsevier 
ukkonen 
line construction suffix trees revised version 
appear algorithmica available report department computer science university helsinki finland 
weiner 
linear pattern matching algorithms 
proceedings th ieee annual symposium switching automata theory pages 
