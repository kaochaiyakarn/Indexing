declarative semantics meta programming language henning christiansen roskilde university computer science dept box dk roskilde denmark mail henning dk 
logical programming language generative clause programs generalize definite clause programs meta programming level 
fundamental notion language meta goal consists plain goal program expected true 
declarative semantics defined terms herbrand models consisting meta goals 
known fixpoint characterization herbrand model definite clause programs generalizes immediately 
procedural semantics considered terms interpreter program compiler language 
meta level logic programming traditionally introduced means programmed logical language bowen kowalski bowen weinberg bowen hill lloyd subrahmanian 
way access meta level syntactically just call predicate consequently semantics understood terms interpreters internal mode operations 
order achieve declarative understanding meta programming need view language fundamental syntactic semantic categories reflect existence meta level 
propose language generative clause programs general concerned meta goals 
meta goal goal expression program expected true 
semantics language described terms herbrand models consisting 
fixpoint characterization known ordinary logic programs van emden kowalski model generalizes immediately 
semantic definition covers embedded meta levels natural way 
overview section introduces syntax generative clause programs compares bowen weinberg bowen 
apply ground representation program text order avoid confusion variables proceedings meta workshop meta programming logic bruynooghe ed 
april leuven belgium pp 

different levels 
universal quantifiers declare variables compact notation relation text term denotes specified simple compositional mapping 
intuitive semantic definition section 
section provides precise explanation fixpoint characterization herbrand model generative clause programs 
section illustrate procedural semantics interpreter language programmed prolog 
execute meta goals fully program parts 
full understanding procedural semantics terms proper generalization sld resolution cf 
lloyd covers entire formalisms lacking 
section sketch compiled implementation generative clause programs 
summary section 
logical language meta logical programming language generative clause programs generalizes definite clause pure prolog programs take basic syntactic notions 
definition notions constants variables functors terms ground terms defined usual 
programs described ground terms denoting 
programs denoted terms contain course usual logical variables 
logical goal represents statement expected provable program 
meta programming environment simultaneous programs involved introduce notion meta goal consists goal program expected provable 
symbol particular binary functor 
definition meta goal term form subterms called goal program parts respectively 
generative clause term form mn mn meta goals 
generative clause program list generative clauses 
intended meaning program parts instantiate terms represent programs 
left hand side program part provides handle current program instance rule applied program parts right hand side resemble program argument calls interpreter 
respect expressibility generative clause programs equivalent bowen weinberg bowen difference conceptual level language concerned concerned ordinary goals happen calls interpreter program 
fact view program list clauses opposed set emphasizes representability programs 
note program parts head rule may principle express strange conditions applicability rule 
writing disable rule rule programs 
believe reasonable program program part consist variable 
simplicity put syntactic restrictions language purpose 
notation terms denoting variables inspired colmerauer original notation generalized meta level programming 
variable denoted constant preceded asterisk 
symbol intended serve variable generated program considered ground term base level preceded asterisks forth embedded meta levels 
relation certain ground terms programs denote defined function 
assume existence bijective function constants variables 
definition syntactic denotation function generative clause programs partial function set ground terms set terms defined inductively follows 
constant constant gamma constant different unary term undefined 
say denotes observation term includes variable denotes 
similarly term misplaced asterisk 
term misplaced asterisks exists ground term denoting 
sensible terms 
example term denotes variable denotes term denotes variable 
term prog prog prog denotes clause capital letters indicate real variables 
prog meta goal body contains subterm serves template new rule extend current program 
instantiated say prog template denote rule 
notational shorthands goals generative clause need equipped explicit program parts 
part formal definition viewed notational convention 
generative clause shorthands apply order meta goal body clause program part identical program part head clause written simply program part head clause variable appear clause written simply gives natural injection definite clause programs set generative clause programs 
rule example notational conventions abbreviated form rule denoted follows 
implementation generative clause programs includes notation function symbol combination grammars allow sample clause written follows 
prog new prog new prog new rule prog new rule prog 
compared generative clause notation marked characteristics 
need universal quantifiers order distinguish variables different levels 
level base meta meta meta symbol serve variable determined independently context appears 
consider sample 
clear structural resemblance term denotes 
need catalogue pseudo predicates current theory 
meta programming facilities appear integral part language 
property obvious consider declarative semantics 
intuitive semantics plain definite clause programs distinguished lucid intuitive declarative semantics 
set ground goals provable program described simple inductive fashion 
show similar semantic characterization generative clause programs 
section give precise details consider formulation style suited elementary textbooks 
compare bratko 
comparison start giving definition definite clause programs assuming programs terms denoting 
definition provability relation definite clause programs dcp defined inductively follows 
pt ground term denotes definite clause program pt contains clause ground instance gn pt dcp pt dcp dcp holds programs goals 
semantic definition useful intuitively simple requires elementary mathematical insight 
independent implementation method 
qualities preserved definition generalized generative clause programs 
difference selection clause applied proof step 
definition provability relation generative clause programs gcp defined inductively follows 
pt ground term denotes generative clause program pt contains clause ground instance pt pt gn pt pt gcp pt gcp gcp holds programs goals 
note clear sort clause instance referred definition contain pt structure isomorphic 
contains representation clause instance quite different 
example clause instance 
observation pt dcp denote definite clause program pt gcp text denoting injection generative clause program 
injection notational conventions described 
ground goal instances pt dcp dcp pt gcp gcp dcp constitutes proper sublanguage gcp respect semantic syntactic aspects 
study precise meaning intuitive semantic definition 
fixpoint characterization herbrand model define declarative semantics generative clause programs herbrand model 
definite clause programs model characterized fixpoint mapping herbrand interpretations herbrand interpretations van emden kowalski 
development quite traditional herbrand interpretations concerned meta goals goals cover possible programs model 
adopt concepts notation lloyd 
notion self central semantics generative clause programs 
definition pt term denotes generative clause program pt 
set ground instances clauses pt denoted pt 
ground instance generative clause mn said self contained pt pt 
respect soundness definition refer note previous section 
definite clause program instance rule applied freely proof generative case interested instances selfcontained 
order define suitable notion herbrand models generative programs possibilities 
define truth generative clause involving constraint develop theory set axioms consisting self contained clause instances 
technical reasons take approaches equivalent 
definition set axioms generative clause programs axioms gcp set self contained generative clause instances 
herbrand interpretation generative clause programs set ground 
herbrand model generative clause programs herbrand interpretation mn axioms gcp holds fm mng implies axioms gcp equivalent infinite definite clause program concerned predicate know lloyd intersection non empty set herbrand models herbrand model 
intersection herbrand models generative clause programs called herbrand model denoted gcp definition mapping gcp herbrand interpretations herbrand interpretations defined follows 
gcp fm exists mn axioms gcp fm mng ig gcp identical usual transformation defined definite clause program case identified axioms gcp 
know lloyd chapters gcp continuous fixpoint lfp gcp theorem fixpoint characterization herbrand model generative clause programs 
gcp lfp gcp gcp precise meaning intuitive semantic definition previous section stated follows 
pt gcp gg gcp lfp gcp gcp interpreter generative clause programs step procedural semantics generative clause programs show simple interpreter programmed prolog 
partially correct implementation 
interpreter handle queries fully program parts 
declarative semantics describes language principle complete partially known programs goal proved 
predicate denotes maps ground term term denotes variable consistently replaced completely new variable 
predicate heavily non logical parts prolog case non ground program part stops error message 
definite clause program usually defined finite set rules 
checked results referenced section hold infinite programs 
demo prog member prog denotes prog 
demo prog member prog denotes prog body demo body 
demo demo demo 
interpreter called meta goal goal part may contain usual prolog variables program part ground representation 
interpreter inefficient serves illustrate procedural aspects language 
generalization interpreter similar generalization sld resolution cover incomplete program parts lacking 
compiled implementation view meta level programming taken invites compiled implementations 
section describe informally implemented compiler translates generative clause programs prolog code 
interpreter meta goals ground program parts executed way 
implementation dynamic compilation dynamically generated clauses structure sharing representation programs variations 
compiled approach program parts meta goals instantiated pointers compiled program representations program source texts 
suggestion identify particular program ground index integer number 
new indices created new program appears compiled common program space 
meta goal represented goal program index additional argument 
rule prog prog hnew belonging program index compiled prolog rule 
compile hnew 
programs variations programs program slight extension compiled program 
cases apply structure sharing representation rule compiled 
set programs embedded determines partial ordering 
program extension program program say program program choose set program indices respects ordering lists ordered degree instantiation means specific 
partial ordering fits nicely underlying prolog engine 
pattern matches say match necessarily way round 
clause prog prog belongs program indexed compile follows 
current current current query compiled safely executed prolog system 
clauses programs indices equal specific involved proof 
clearly implementation efficient concerned space 
respect execution speed noted additional meta level control takes place head compiled clauses treated optimal way prolog system 
expressions right hand side program parts 
rule program new rules rule prog extension style prog rule extension style furthermore define programs excluding specified rules prog rule index rules excluded referenced rule indices created optionally rules compiled 
writing rule just rule program part defined instantiate unique integer number 
example rule prog part program assigned rule index compiles 
current locked current rule excluded say program fact added program data base 
locked solution semantic problems due backtracking retracted code straightforward 
compiled clauses removed database program execution 
program indexing method suited programs calling recursively programs deeply nested hierarchy maximum depth giving upper limit size program indices 
worst case example simulation program models time gradually adding removing clauses developing program 
time step length current program index increased 
implemented system coupled meta level extension definite clause grammars called generative clause grammars 
impact grammatical meta level descriptions programming languages described christiansen 
additional techniques described implemented system handle generic predicates nonterminals means variables predicates nonterminals expected 
source text system written standard prolog notation available request author 
structure sharing representation hierarchies programs common efficient compiler implemented prolog relying partial ordering terms degree instantiation 
structure sharing general technique treated christiansen 
summary shown intuitively simple declarative semantics definite clause programs generalized meta level programming 
syntactic combination goal program proved meta goal central concept language generative clause programs gcp 
wellknown results fixpoint characterization herbrand model generalized gcp herbrand models sets meta goals 
get little step closer intuitive declarative understanding meta programming addition operational understanding meta interpretation 
able simple interpreter compiler language execute meta goals completely program parts 
provided proper generalization sld resolution cf 
lloyd full gcp language deep study procedural properties gcp subject research 
background author grammatical programming language syntax christiansen 
clear analogy grammatical descriptions meta level logic syntax trees isomorphic proof trees christiansen 
meta level programming compiled approach 
logic programming proceedings fourth international conference ed 
lassez mit press pp 

design implementation 
logic programming proceedings fifth international conference ed 
kowalski bowen mit press pp 

bowen meta level programming knowledge representation 
new generation computing pp 

bowen kowalski amalgamating language meta language logic programming 
logic programming clark eds pp 
academic press 
bowen weinberg meta level extension prolog 
ieee symposium logic programming pp 
boston 
bratko prolog programming artificial intelligence 
addison wesley 
christiansen syntax semantics implementation strategies programming languages powerful abstraction mechanisms 
proc 
th hawaii system sciences vol 
pp 

christiansen syntax semantics extensible languages 
roskilde university centre 
christiansen extensible logic extensible languages roskilde university centre 
christiansen structure sharing incremental systems 
structured programming vol 
pp 

christiansen meta level extension definite clause programs appear 

colmerauer les de groupe intelligence artificielle universite de 
appears metamorphosis grammars lecture notes computer science pp 

van emden kowalski semantics predicate logic programming language 
journal acm 
vol 
pp 

hill lloyd analysis meta programs 
proc 
workshop metaprogramming logic programming ed 
lloyd pp 
bristol 
lloyd foundations logic programming second extended edition 
springerverlag 
subrahmanian foundation meta logic programming 
proc 
workshop meta programming logic programming ed 
lloyd pp 
bristol 
