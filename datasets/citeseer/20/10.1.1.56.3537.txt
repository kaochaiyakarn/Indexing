multiple ontologies framework natural language generation marcel frohlich van de 
natural language generation nlg described arbitrarily structured knowledge sources example database 
built layers domain knowledge representation supporting different tasks 
benefit approach representation input nlg redundant representation maintained separately 
domain dependent components clearly distinguished 
domain independent tools natural language generation integrated 
keywords natural language generation nlg ontologies knowledge representation databases outline framework natural language generation systems 
design goals framework integration domain independent tools natural language generation integration existing domain models 
keystone framework sophisticated representation scheme different ontologies represent domain knowledge different tasks generation process 
may sound unnecessary complication lot extra 
helps separate domain dependent domain independent knowledge processing 
section discusses necessity separation technology natural language generation fit requirements industrial usage 
section gives quick overview architecture typical natural language generation system 
section presents framework called nlg db compares state art text generation system 
followed small case study framework prototype called como conceptual models 
section collects open questions section presents 
universitat tubingen marcel uni tuebingen de vrije universiteit amsterdam cs vu nl motivation automatically generated documents highly desirable properties 
obvious ones ffl maintainability automatic updates reduce life cycle costs documents dramatically 
ffl standards document standards example aircraft documentation enforced 
ffl tailoring documents tailored fly specific reader specific purpose 
ffl multimodality generated documents augmented appropriate multimedia content 
ffl multilinguality documents produced different languages 
unfortunately text generation systems capable handling advantages complex pieces software hardly step border academic research industrial 
diagram comparing requirements industrial research nlg systems shows merely problem complexity 
approaches research prototypes usually transferable industrial systems 
main reason introduce nlg industrial applications reduction costs improved flexibility 
critical factor quality control generated documents usually opposition flexibility 
industrial systems tend simple knowledge representation shallow techniques sentence patterns 
tailoring ling 
complexity multimedia databases multi ling 
standards industrial relevance academic research goal step easier applicability existing nlg tools 
main problem hand nlg tools looked expect certain structure domain knowledge base hand wanted fl frohlich van de ecai 
th european conference artificial intelligence edited henri prade published john wiley sons able database domain knowledge base 
bridged gap intermediate ontologies 
natural language generation text generation systems perform basic tasks step content determination 
choosing portion information shall communicated reader 
yield linear text system decide order presentation sentence boundaries 
method generate grammatically sound sentences underlying representation scheme 
steps just described get sorted list sentences far away natural language text 
improve procedure reasoning context sentence preceding text influences elements lexical items chosen express intended meaning sentence 
architectures text generation systems described pipeline pattern content determination sentence planning sentence generation 
constraints passed back previous task 
single knowledge base domain theory nlg application 
think characteristic difficult produce reusable components nlg 
generic components need agreement knowledge representation 
content determination sentence planning sentence generation communicative goal nlg pipeline architecture framework follows task pipeline uses different domain representation ontology task 
want development specific nlg modules nlg application development 
achieve clear distinction domain dependent modules domain independent modules isolated easier develop nlg application predefined framework reusable nlg components 
knowledge representation nlg db section describe different representation layers framework called nlg db 
ontology 
adopt wielinga view word ontology meta theory 
representational structure consisting sequence sorts set relations set functions set constants intensional specification set domain theories extensional specifications domain theory elements knowledge objects called object theory ontology meta theory representational structure 
knowledge represented representational structure 
constants function signatures relation signatures transformed constants means domain ontology ensemble knowledge objects object theory 
sorts relations functions constants sorts relations functions constants representational structure ontology representation layers different representation layers correspond tasks content determination sentence planning sentence generation 
top layer knowledge source example database 
conceptualisation content determination 
task ideal access original knowledge source content determination influenced original conceptualisation 
layer layer layer predication sentence oriented representation representation partitioned domain dependent domain dependent knowledge representation layers layer domain dependent ontology root concepts 
domain model broken called situa fl frohlich van de ecai 
th european conference artificial intelligence edited henri prade published john wiley sons tions see concept subtree situations diagram 
situation small portion domain model corresponds single predication 
interpreted high level phrase pattern 
situation determines maximal conceptual content phrase cases sentence determine expressed 
idea ontology corresponding tools mapping layer semantic lexicon come stede phd thesis 
system called moose part framework 
layer model domain parts relevant nlg system 
simpler conceptualisation layer 
different situations model different aspectual properties 
situation state activity event protracted activity activity culmination transition protracted culmination culmination stede taxonomy lowest layer layer domain independent ontology called upper model developed penman sentence generation systems 
sentence generation 
concepts upper model um encode semantic distinctions different languages suitable motivate distinctions expression 
encoded um textual interpersonal differences propositional differences experiential meaning 
remains stable different domains uses conceptualisation inherent natural language 
processing processing steps distinguished 
text planning level atomic speech acts simplified sentence discussed see example 
mapping speech act specifications include concepts layer called sitspecs 
sitspecs specifications elements layer 
input moose tool stede 
moose maps sitspecs called semspecs 
semspecs lexicalised spl expressions input format sentence generator 
speech act sitspec mapping representation layers involved domain dependent 
layer seen simplified form layer straightforward complex 
step implemented raw programming prototype 
example stede 
domain tanks event pre state activity post state fill state pour fill state path causer object container content value container value path jill water destination tank full full sitspec semspec processing step domain dependent lexicon involved 
lexical item defined major parts 
name denotation coverage partial semspec lookup element 
distinction denotation coverage opens possibility formulate complex patterns applicability covered denotation 
previous shows examples sitspecs tank domain 
moose finds possible combinations lexical items cover elements sitspec exactly 
lexical item covers concept sitspec 
partial semspecs combined formed semspec passed generator 
comparison knowledge representation gist gist big text generation application developed project european institutions involving researchers 
goal system generate automatically administrative application forms multiple languages specification bureaucratic procedure 
tools identical loom knowledge representation upper model english sentence generation 
interesting difference projects gist built real application 
having sentence generators language designed different linguistic theories mind gb hpsg gist designers introduce sentence representation layer suitable input 
chose augmented version upper model spl 
representation language called augmented mechanisms represent interpersonal textual parameters 
sentence generator programmed mapping module producing generators native input format 
compared hierarchy section layer subdivided generator independent dependent sentence representation 
strategy compatible gist follows fl frohlich van de ecai 
th european conference artificial intelligence edited henri prade published john wiley sons strategy holds concepts customised upper model handled different sentence generators 
gist consortium followed knowledge representation scheme extending upper model domain concepts 
kept separate root domain knowledge 
imagine dags common leaves 
domain knowledge modularised dimension specialisation 
common model top refined model administration turn refined model pension applications 
domain concepts inherit upper model concepts 
seen fixed mapping domain model upper model 
compared approach possible lexical item cover domain concept mapping domain concepts lexical items explicit hidden structure knowledge base generator grammars 
administration domain modelled domain model 
existing databases directly integrated nlg architecture 
case study como account withdraw count branch deposit transfer lock install cash drawer kiss method object interaction diagram bank domain experiments generate models typical example framework missing domain typical sense 
conceptual modelling uses ontologies produce new domain theories 
example conceptual model structure bank see 
want able generate texts diagram domain look ontology meta model modelling technique 
example called object interaction diagram system analysis design method called kiss method 
architecture implementation diagram see architecture prototype 
gray shaded operator library implemented 
prototype generate single sentences 
original idea connect case tool failed meta models implemented case tool capture full semantics diagrams implemented new meta models loom 
left side knowledge base holding meta models ontologies 
circles middle represent different processing units 
larger piece text moose module look text plan insert connectives realised stede currently working project focussing generation connectives 
hope forthcoming results easily integrated framework 
semantic syntactic lexicon currently separated 
experiments carried english grammar 
text semantic syntactic grammars lexicons sentence generator moose lexical choice rst text planner operator library rst structure meta models upper model spl sit spec lexical choice ontology system implemented acl tools wanted implemented language 
loom knowledge representation tool ontologies 
freely available linux version acl connected tcl tk gui 
screenshot application seen 
instances certain concepts listed list box top 
button load reload list generate sentence predefined type part model previously mouse selected instance involved 
generation result written text box bottom window 
fl frohlich van de ecai 
th european conference artificial intelligence edited henri prade published john wiley sons generation example demonstrate procedure show example taken object interaction model 
model states action type transfer associated twice object type cash drawer 
visible diagram model prepositions part association relations 
visible authorisation relation action transfer subject type labeled cashier 
label label label label activity mc mc mc mc action cashier cash drawer transfer cash drawer sitspec example case study 
meta domain conceptual modelling choosing transfer list box see screen shot text planner generates single speech act type inform transfer parameter 
default mapping sitspec includes associated object types authorised subject type simple spo sentence 
ontology layer situation modelled sentences 
sitspec generated shown graphical textual form corresponds part automatically loaded knowledge base 
layer elements type mc modelling concept sentence want generate relevant type modelling concept element belonged 
moose generates semspec material action lex transfer actor person lex cashier actee object lex money singularity nonsingular source object type lex cash drawer destination object lex cash drawer combine lexical items semantic lexicon 
example lexical item seen phrasal item 
model complex condition elements sitspec match condition action label transfer label cash drawer extra element semspec actee object lex money 
means fill gaps communicative point view original conceptualisation domain dependent semantic lexicon 
sentence generated see screenshot cashier transfers money cash drawer cash drawer 
detailed description prototype frohlich master thesis 
open questions research integrating missing processing steps steps integrated described framework real text generation 
stuff algorithm determine sentence boundaries inclusion specifications connectives semspecs information generated planner aggregation algorithms algorithms 
exploring specific data models data models promising candidates examination multidimensional data models relational schemas mimicking data warehouses data 
databases especially suitable point departure build systems lot effort put designing data models meta data 
linguistic techniques schema integration ones discussed offer better foundation nlg framework 
user point view interesting queries data warehouses tend variable queries oltp systems 
simple text templates 
combination intelligent data analysis tools text generation key technology new generation intelligent data analysis report tools 
fl frohlich van de ecai 
th european conference artificial intelligence edited henri prade published john wiley sons standardised business object frameworks sap business objects ibm san francisco 
frameworks offer large set predefined software components mirror conceptual entities universe discourse certain domains 
frameworks represent stable schemas augmented information necessary text generation 
allow text generation operative systems 
text generation standard engine intelligent user interfaces active object network environments 
implementation questions speed performance current system poor 
measure seconds sentence 
lot opportunities increase speed 
improved system implemented 
just standard fast server software 
existing lisp systems show speedups factor 
grammar development tool 
monolingual generation server implements core functions generation smaller 
algorithm sentence generation lot opportunities parallel processing 
multi threaded implementation increase processing considerably multi processor hardware 
grammars tailored certain applications 
parts grammar impact certain application automatically eliminated 
client server model networked client sever nlg application domain independent components installed client side move load server client 
example browser plug lexical choice sentence generation serving multiple nlg applications 
usage server send domain specific lexicon client 
shown different ontologies different processing steps powerful enhancement nlg pipeline architecture 
helps separate domain dependent modules nlg application domain independent modules 
development specialised nlg components nlg application development 
realistic perspective industrial nlg applications existing knowledge resources integrated ready nlg components assemble application 
john bateman development environment release german center information technology gmd ipsi 
john bateman robert kasper johanna moore richard whitney general organization knowledge natural language processing penman upper model technical report usc information sciences institute marina del rey california 
david brill loom manual version isi university southern california september 
draft 
contact fabio gist generating instructional text final report irst trento italy 
giovanni keith vander linden richard power implementation upper domain models gist deliverable tsp irst trento italy 
marcel frohlich nlg db natural language generation databases master thesis university tubingen 
robert kasper richard whitney spl sentence plan language text generation technical report forthcoming information sciences institute 
admiralty way marina del rey california 
gerald object orientation kiss method information architecture information system addisonwesley wokingham england 
keith vander linden specification extended sentence planning language gist deliverable tst itri brighton uk 
chris lecture notes 
autumn school magdeburg 
johanna moore paris planning texts advisory dialogs capturing intentional rhetorical information computational linguistics december 
penman project penman documentation primer user guide manual nigel manual technical report usc information sciences institute marina del rey california 
manfred stede lexical semantics knowledge representation multilingual sentence generation ph dissertation university toronto 
wielinga th 
schreiber van harmelen framework formalism expressing ontologies deliverable uva amsterdam netherlands 
esprit project 
fl frohlich van de ecai 
th european conference artificial intelligence edited henri prade published john wiley sons 
