generating realistic workloads network intrusion detection systems institute computer science foundation research technology ics forth gr network intrusion detection systems nids pervasive evaluating nids performance challenging 
goal study determine generate realistic workloads nids performance evaluation 
develop workload model appears provide reasonably accurate estimates compared real workloads 
model attempts emulate traffic mix different applications reflecting characteristics application way interact system 
implemented model part traffic generator extended tuned reflect needs different scenarios 
approach measuring capacity nids require setup full network testbed 
keywords security intrusion detection workload characterization generation 
intrusion detection receiving considerable attention mechanism keeping administrators informed potential security breaches suspicious network activity 
typical function network intrusion detection system nids set signatures describing known intrusion threat 
nids examines network traffic determines signatures indicating intrusion attempts matched 
simplest common form nids inspection match string patterns payload packets captured network link 
form detection called content matching 
considers problem determining efficient accurate methods evaluating performance content matching nids 
systems primary measure interest capacity system 
accurately measuring capacity nids worth examining main reasons 
administrators need determine configuration system hardware nids software ruleset traffic characteristics suitable deployment terms able cope permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
wosp january redwood city ca 
copyright acm 
kostas distributed systems lab cis department univ pennsylvania dsl cis upenn edu evangelos markatos institute computer science foundation research technology markatos ics forth gr load risk missing intrusion attempts 
shown performance highly dependent parameters configuration needs evaluated case case basis :10.1.1.10.7356
second nids technology continues evolve significant ongoing effort improve efficiency 
engineering efforts require accurate tools analyzing existing systems evaluating new ideas comparing different approaches 
previous shown nids evaluation easy measuring capacity networking systems routers web servers simplistic benchmarks easily misleading 
approach proposed modular traffic generator tuned closely resemble different types nids workloads 
modules create application specific traffic protocols dns smtp configured different levels detail workload model 
finest level modules emulate different sessions sets clients servers characteristics protocol 
coarser level module synthesize traffic statistical properties protocol including fraction traffic protocol packet size payload characteristics 
necessary appropriate models combined packet traces including widely available datasets available internet research 
modules emulating different types attacks nids attempt overload nids pattern matching engine goal evading detection 
proposed approach offers main advantages 
easy require live testbed real traffic 
second provides accurate results compared previously methodologies 
third extensible allowing new protocols models tunable users generate different types workloads different environments 
organization rest organized follows 
section provide brief overview intrusion detection systems particular emphasis pattern matching algorithms 
discuss methods employed nids performance evaluation discuss problems 
section analysis nids workloads impact performance determine accuracy different workload models 
analysis section architecture implementation nids traffic generator provide details modules implemented 
section summarize main results 

background section describe simplified model content matching nids operates summarize key characteristics pattern matching algorithms intrusion detection 
discuss previous nids evaluation place context 
basic nids model nids designed passive monitoring system reads packets network interface standard system facilities libpcap 
set normalization passes ip fragment reassembly tcp stream reconstruction packet checked nids ruleset 
ruleset typically organized dimensional data structure chain element called chain header tests input packet packet header rule 
packet header rule matched chain header points set signature tests including payload signatures trigger execution pattern matching algorithm 
pattern matching single expensive operation nids terms processing cost 
order understand interaction pattern matching algorithm ruleset experimental workload briefly pattern matching algorithms commonly intrusion detection systems 
pattern matching algorithms number algorithms proposed pattern matching nids 
performance algorithm may vary case applied 
multi pattern approach boyer moore fast rules perform large set 
contrary wu manber behaves large sets performance degraded short patterns appear rules 
xb idea cases mismatch tries filter patterns match 
xb introduces additional preprocessing cost packet amortized certain number rules 
subsections detailed description algorithm provided 
boyer moore algorithm known algorithm matching single pattern input proposed boyer moore 
boyer moore algorithm compares search pattern input starting rightmost character search pattern 
allows heuristics may reduce number comparisons needed pattern matching compared naive algorithm 
heuristics triggered mismatch 
heuristic called bad character heuristic works follows mismatching character appears search pattern search pattern shifted mismatching character aligned rightmost position mismatching character appears search pattern 
mismatching character appear search pattern search pattern shifted character pattern position past mismatching character input 
second heuristic called suffixes heuristic triggered mismatch 
mismatch occurs middle search pattern non empty suffix matches 
heuristic shifts search pattern occurrence suffix pattern 
horspool improved boyer moore algorithm simpler efficient implementation uses bad character heuristic 
fisk varghese developed set wise boyer moore algorithm boyer moore concepts operating set patterns 
integrated tested single traffic trace enterprise internet connection 
xb algorithm xb pattern matching algorithm designed providing quick negatives search pattern exist packet payload assuming relatively small input size order packet size 
mismatches far common matches pattern matching enhanced testing input payload packet missing fixed size sub strings original signature pattern called elements 
false positives induced xb cases fixed size sub strings signature pattern showing arbitrary positions input separated actual matches standard pattern matching algorithms boyer moore algorithm 
small input assumption ensures rate false positives reasonably small experiments demonstrate false positive rates worst case 
common case negative responses obtained resorting general purpose pattern matching algorithms 
xb algorithm evaluated traffic traces diverse environments traces containing attacks normal web traffic wan traffic traces local isp 
wu manber algorithm implementation snort uses simplified variant wu manber multi pattern matching algorithm discussed 
mwm algorithm bad character heuristic similar boyer moore uses bad shift table constructed pre processing patterns 
mwm performs hash character prefix current input index group patterns checked starting character boyer moore 
performance mwm originally measured text files various sets patterns 
attempt measure mwm basic algorithm pattern matching nids performed 
results show snort faster previous versions set wise boyer moore aho corasick large part improvement due substantially re engineered nids engine 
previous nids evaluation known efforts developing methodology nids evaluation 
study combined synthesized stream includes normal traffic number attacks 
principal goal measure ability systems identify new attacks knowledge prior attacks estimate detection false alarm rates 
study determines receiver operating characteristic roc curves comparing percentage detected attacks false alarm rate 
similar approach described development testbed simulating behavior large network tracing traffic testbed input nids evaluation 
nss group evaluated commercial nids opensource snort 
testbed mbit network real traffic 
primary metrics interest attack detection rate correct labeling attacks 
attacks commonly available exploits web ftp finger attacks generated specialized tools stick 
attacks background traffic generated order test nids different network loads 
background traffic consisted small byte large byte pack ets consumed variable percentage network bandwidth zero 
approaches tested nids injecting attacks stream real background traffic measuring fraction attacks detected nids 
mell studied past evaluation efforts listed number problems related nids evaluation 
sanitized traffic effect background traffic difficulties generating traffic testbed network problems spotted 
furthermore set recommendations nids testing 
recommendations included shared datasets multiple organizations widely available traffic traces traces containing attacks real attacks real data cleansing removal confidential data traffic logs order overcome privacy issues 
provided study past evaluation efforts proposed environment suitable nids evaluation 
environment uses synthetic background traffic controlled injection attacks order emulate real network 
furthermore equipped ability respond traffic real time generate traffic gigabit speed provide realistic traffic scenarios 
hall spotted number limitations applying nids 
fixed resources memory size memory bandwidth set upper bound performance packet capture packet flow architecture 
difficulties generation real traffic high peak rates 
packet analysis state tracking may infer performance penalties 
proposed test suite nids evaluation component measure different portion nids 
test suite included testing maximum bandwidth nids inspect packet loss testing alarm capabilities stressing state tracking engine set tests configurable metrics mainly traffic 
studied performance bottlenecks snort impact different architectures operating systems :10.1.1.10.7356
testbed utility generate traffic pair hosts 
measurements performed fixed payload sizes types rules rules check headers rules perform pattern matching 
experiments basic metric interest number rules processed packet loss 
extended set machines different architecture examined 
studied impact different operating systems nids operation specifically linux openbsd effect multiprocessor systems performance packet capturing 
study illustrates difficulties evaluating nids performance 
shows nids performance sensitive packet ruleset content 
adding random content widely available traffic header traces sight questionable method nids evaluation 
analysis shows sensitivity exhibits certain patterns estimating performance depending pattern matching algorithm characteristics traffic 
regarding ruleset content random rule patterns determining nids performance scalability requires extreme care results suggest accurate way creating synthetic rulesets permutations existing patterns 
packet content sensitivity follows predictable pattern depending algorithm traffic 
second demonstrates large differences measured performance depending traffic characteristics highest measured mean cost packet times lowest cost traces examined due differences distri bution packets different subsets nids ruleset 
third shown choice processor architecture dramatic effect system performance relative performance different pattern matching algorithms 
cases pattern matching algorithm faster algorithm processor slower processor 
single algorithm performs best cases hybrid pattern matching engine triggering different algorithms depending ruleset packet size appears best approach parameters may vary depending processor architecture 

analysis metrics basic metrics evaluating nids attack detection rate false alarm rate 
attack detection rate defined fraction attacks successfully detected nids false alarm rate fraction alarms indicate real intrusion total number alarms produced nids 
nids uses statistical anomaly detection methods metrics reflect quality algorithm attack detection rate affected ability system process input stream sustaining packet loss 
content matching systems snort detection process exact statistical methods 
attack detection rate closely related capacity system packets processed attacks specified ruleset detected 
content matching systems false alarm rate dependent ruleset configuration alarm filtering usually done outside critical path 
focus capacity maximum loss free rate basic metric interest study 
capacity nids relates processing time reflected measured number instructions processor cycles devoted operation nids 
running time provide reasonable estimate nids capacity cases easily measured setting full testbed trace driven execution 
burstiness packet arrival rates variable processing needs nids may cause transient overload packet loss may reflected processing time 
capacity terms accurate normally requires testbed experimentation measurement time consuming 
discuss method approximating capacity nids complexities setting testbed section 
single stream trace synthetic workload models straightforward approach measuring nids performance simple packet generator 
generators create stream packets certain characteristics udp tcp protocols different packet sizes 
approach acceptable evaluating systems routers processing involved simple 
content matching nids complex needs check packet hundreds rules involve deep payload inspection variable cost packet depending type content packet 
presents fraction nids processing time spent pattern matching traces containing real payloads 
experiment pattern matching accounts total processing time consider number processor instructions issued 
rest processing time spent header checking packet decoding approximately 
complexity pattern forth web ideval processing time ideval forth web ideval xb mwm ideval xb mwm string matching header check packet decoding forth web ideval instructions cost nids pattern matching terms processing time instructions matching single stream model produce accurate performance estimates 
determine sensitivity nids performance traffic characteristics analyzed behavior snort variety network traces different environments 
processing time packet byte different traces 
ind nlanr mra aix contain widearea network traffic captured set peering points 
traces collected small lan hack festival 
forth web trace containing number concurrent web browsing sessions captured forth traces atm link university crete 
observe highest measured cost appears times lowest measured cost 
investigate causes variability record subset nids ruleset chain header triggered packet trace 
results shown 
see different subsets nids ruleset varies significantly roughly packets forth web trace trigger set rules set triggered packets traces 
nlanr traces large fraction packets trigger rules 
differences expected traces represent traffic different settings wide area hacker contest web environment visible differences traces type 
simplified single stream workloads single traffic trace sufficient evaluating nids performance 
single traffic trace sufficient reasonable strategy carefully selected set traces benchmark 
main problems approach 
full packet traces available mainly privacy issues 
publicly available traces packet payloads removed ip addresses sanitized 
second traces require significant storage requirements easily distributed 
example second trace fully utilized gigabit link requires gb storage 
furthermore traces offer little flexibility experimentation simple modification traffic characteristics instance different packet ideval forth web ideval ideval traces ideval ideval nlanr aix nlanr mra nlanr ind forth web number rules packets distribution number rules checked packet traces ideval ideval nlanr aix nlanr mra nlanr ind forth web processing time packet processing time byte xb mwm processing time packet byte sizes require existence creation new trace 
replaying stored trace expensive limits maximum sending rate generator storage bus performance limits high performance tools :10.1.1.12.8563
addressed multiple senders adds cost complexity testbed experiment setup 
nids evaluation easier desirable design synthetic workloads statistical properties network traffic 
synthetic workloads generate traffic similar real traffic 
modeling packet headers achieved statistical information collected available traces coarse time scale aggregate measurements 
issue payload modeling remains open 
modeling packet payloads effort find suitable approach model payload generation traffic traces contained packets real payload forth web ideval 
evaluated approaches order find way generating payload gives results similar real ones 
approach packet headers left unchanged payloads altered 
approach modeling payloads uniformly random payloads 
usually payload contain exclusively printable characters requests ftp command binary content images compressed files 
evaluated performance snort xb mwm main pattern matching algorithm 
experiments rulesets latest available ruleset time experiments ruleset coming latest official release shows uniformly random content introduces error measured processing time nids error depends algorithm ruleset 
considering xb algorithm patterns consisting sequences character main reason difference 
pattern adjacent zeros part rules ruleset version 
real payloads sequences appears packets protocols gif headers null data uniformly random payloads occurrence rare rate xb sees pair inside payload decide exclusion pattern fall back pattern matching routine invoked 
case uniformly random payloads number fallback routine invocations significantly smaller equivalent number real payloads 
table shows times repetitive patterns fall back routine invoked actual searching 
notice searches forth web containing uniformly random payloads nearly searches triggered real payloads traces reduction rate searches reaches 
xb mwm uniform real uniform real forth web ideval ideval table number searches xb mwm hand difference processing time uniformly random real payloads mwm caused algorithm 
mwm searches byte prefix payload common prefix patterns 
example patterns cgi bin common prefix ht 
mwm searches common prefixes suffix checked algorithm constrained minimum pattern length determination suffix 
match suffix text suffix prefix checked 
real payloads common prefixes example prefix 
prefix located patterns command register conf httpd conf occurrence payload trigger checks 
uniformly random payloads occurrence leading checks consequently diverging real case 
table shows number patterns checked trace 
uniformly random payload mwm performs approximately checks comparison case traces real payload 
difference performance real uniformly random payloads depends ruleset 
snort ruleset rules added overhead detection engine xb rules searching pattern absent 
summarizes results ruleset 
difference real uniformly random payloads varies remaining algorithm dependent 
cases error small results consistent different rulesets 
studies generating simple traffic stream order evaluate nids systems :10.1.1.10.7356
default behavior fill packets pattern determine accuracy payload model replaced payloads traces string ttcp 
see type payload nids behaves substantially different compared original traces 
traces ttcp payloads introduce errors forth web error 
reason error pattern consists limited set characters content fixed rules triggered data structures pattern matching repeatedly accessed way resulting better cache performance stress detection engine 
approach try generate synthetic payloads statistical model analysis traces real payloads 
basic idea method cluster packets protocol message type 
example udp packets port belong dns cluster 
consider set clusters packets containing text packets containing images packets application data pdf sounds videos requests dns queries ftp data ssh telnet mail netbios traffic belonging previous clusters 
choice clustering considering popularity protocols 
shows fraction packets cluster traces real payloads 
forth web trace containing web traffic percentage packets 
observe traffic originating web servers belongs application data cluster 
natural considering size multimedia elements video usually larger html pages 
remaining tcp control traffic acks 
ideval traces contain wan traffic identify clusters ssh ftp mail telnet 
large portion traffic nearly belongs telnet cluster significant portion packets belongs dns cluster 
consider distinct clusters web traffic packets containing requests different impact nids detection engine compared packets carrying html pages pdf file terms rules examined amount done pattern matching engine 
cluster maintain set empirical distributions distribution offset packet 
empirical distributions obtained payload traces recording character probability appearance offset 
web trace extract information clusters concerning web traffic text images application data requests ideval trace clusters 
illustrate model captures behavior different payload types examine cluster requests 
cluster maintain distributions ethernet packet exceed bytes containing values value character 
requests string get distribution contain single value second contain third contain distribution offset contain characters name requested normalized processing cost uniform ttcp model forth web ideval ideval forth web ideval ideval forth web ideval ideval real mwm mwm xb xb requests images text ssh ftp telnet normalized time traces uniformly random ttcp modeled payloads text app data requests dns mail images protocol breakdown forth web ideval traces object begins offset 
model capture high frequency character fact printable characters allowed requests 
turn triggering pattern matching algorithm behavior closely resembles behavior real requests 
example gif header format puts null data bytes 
furthermore common pairs characters generated example ge number rules triggered reaches real case 
advantage statistical approach efficiently generates payloads basic similarities real traffic payloads 
powerful full protocol emulation preserves protocol characteristics 
contrast approaches uniformly random payloads ignore structure packet experiments demonstrating accuracy processing time normalized xb real dns ftp icmp images mail netbios apps req 
ssh telnet text real dns ftp icmp images mail netbios mwm error breakdown payload model apps req 
ssh telnet text method 
difference real modeled payloads smaller previous approaches appears consistent different rulesets 
consistency important evolution rulesets unpredictable 
case uniformly random payloads notice increase web ruleset approach difference 
difference rulesets exceeded approach case uniformly random ttcp approaches difference varied 
understand observed errors measured difference real synthetic payloads payload cluster separately 
see errors small average clusters appear modeled poorly 
example error text cluster xb apps cluster mwm 
highlights imperfect nature particular model variability different payload clusters 
needed accurate nids performance estimates desirable average error appears acceptable practical purposes substantially better previously models 

methodology architecture efforts develop system integrates experimental results implemented modular extensible traffic generator 
shows architecture generator 
modules allows emulate mix different send predefined traffic modules random payload send telnet ttcp payload payload generation modules configuration file parser module initialization module selection time configuration send dns modeled payload send random basic api replay trace user defined payload generation send packet libpcap system libraries generator architecture user view implementation view user defined traffic module attack selection attack generation module protocols part synthetic workload 
level detail workload configured single flow traffic fully specified protocols 
module responsible generating specific protocol example dns queries 
module consists parts initialization function initialization performed traffic function actual traffic generated injected network 
traffic function may modules shape packet payload generation modules construct payloads modules reproduce certain types attacks nids 
implemented modules types traffic dns queries telnet random background traffic 
module reproduces web traffic dns module emulates queries performed domain name service telnet module emulates telnet protocol random module generates traffic random source destination ports addresses 
choice dns telnet protocol building predefined modules popularity seen 
normal traffic modules developed module replaying traffic trace 
extended reproduce protocols individual traffic modules developed plugged 
example develop module sending smtp traffic 
module set options allowing customized configuration 
development module simple requires implementation initialization traffic function 
registration module generator committed way similar preprocessors 
nids workload modules analysis performed section emphasis issue payload generation 
generator comes predefined modules generating payloads uniformly random ttcp statistical model section 
modularity allows development custom payload generation modules predefined modules suitable 
example develop module generates protocol specific payloads specific format initialize modules module 
characteristic fully fledged protocol emulation tool 
module ability generate attack traffic 
valuable certain types attacks may affect performance detection engine 
example module sends packets emulating attack client web server certain types algorithmic attacks nids 
note generator modules need developed care easily introduce performance bottlenecks 
reasonable strategy avoiding bottlenecks generate pool different packets buffers initialization simply pick packet buffer offset packet generation loop 
capacity estimation estimating capacity nids terms maximum loss free rate difficult requires setup network testbed traffic generators capable producing traffic fast reach nids limits 
shrink wrapped capacity estimation method performed locally single system 
basic idea emulate operation nids virtual time virtual network interface packet queue 
system maintains virtual clock tracks packet arrival events produced model trace workload emulates enqueue dequeue actions measures amount time needed nids process packet 
measured processing time packet determines processing packet packets waiting queue point virtual time 
packet received possible determine packet processed enqueued dropped 
measured loss rate experiment tune experiment reaches zero loss desired capacity estimate system 
method implemented part modified libpcap library communicates traffic generator standard unix ipc mechanisms 
minimize interference generator nids modified library uses large amount buffer space generator write packets 
buffer management properly memory aligned reflect buffering strategies modern network interfaces 
example applications measuring sensor capacity measured capacity sensor generating synthetic workload data web trace running available rules activated 
capacity sensor measured mwm xb gigabit testbed 
measurements show xb mwm capacity reached mbit values agree measured processing time xb mwm giving mbit respectively gb traffic 
capacity processing time agree case note coincidental particular workload contain bursty traffic 
measuring robustness overload attacks normalized time forth web ideval traces ideval xb attacks xb attacks mwm attacks mwm attacks normalized running time traces attacks normalized time percentage attacks xb mwm normalized running time traces algorithmic attacks perform simple experiment determining sensor robustness overload attacks 
feed regular attack free packet traces attack module transforms regular payloads payloads containing attack strings overload sensor 
shows difference load nids original trace representing average case behavior modified trace representing overload attack 
observe type attack increases load case traffic forth web traces 
different type attack create payloads result worst case behavior pattern matching engine 
example packet containing zeroes results poor behavior mwm algorithm rules happens implementation snort tries find occurrences patterns payload 
byte packet mwm finds occurrences 
similar attack constructed xb creating payloads containing maximum number unique pairs sequential characters ruleset fits packet 
reported particular problem developers snort release software appears removed flaw 
effect algorithmic attacks nids performance 
instrumented attack modules replace payloads trace containing normal web traffic payloads contained algorithmic attacks 
evaluated performance mwm xb attacks changing percentage packets containing 
increase processing time linear percentage attacks algorithms 
notice mwm performance degraded factor case xb degradation significant factor 
summary studied problem modeling nids workloads developing methodology evaluating content matching intrusion detection systems 
main results study 
shown nids performance highly sensitive underlying traffic simple stream analysis performed tools trace analysis easily misleading 
considering observation argue nids workload model needs accurately reproduce application level characteristics network traffic 
second examined accurately emulate interaction packet payloads nids content matching component 
payload model empirical distributions single byte patterns offset packet different sets distributions protocol message type 
compared model payloads real traffic traces showing model error cases insignificant 
essential enables creation necessary statistical workload models allowing widely available header traffic traces part comprehensive multi trace nids benchmark 
third proposed method measuring nids capacity accurately emulates operation nids requiring fully fledged network testbed high performance traffic generators 
basic idea virtual clock emulate packet arrivals queuing behavior real measurements required processing time packet 
proposed methods implemented part traffic generator tool modular extensible users adapt needs different environments 
believe offers important insights problem nids performance evaluation 

availability source code workload generation tools discussed patch containing xb algorithm url www ics forth gr ids html 
supported part ist project ist funded european union part ear project funded greek general secretariat research technology 
second author supported part onr 
evangelos markatos university crete 
kostas done ics forth 

nlanr dast iperf tcp udp bandwidth measurement tool 
dast nlanr net projects iperf 
markatos 
xb domain specific string matching algorithm intrusion detection 
proceedings th ifip international information security conference sec may 
markatos 
performance analysis content matching intrusion detection systems 
proceedings th ieee ipsj symposium applications internet saint january 
levine owen riley 
intrusion detection testing benchmarking methodologies 
proceedings ieee information assurance workshop pages march 
boyer moore 
fast string searching algorithm 
commun 
acm october 
staniford 
faster pattern matching intrusion detection exceeding speed snort 
proceedings nd darpa information survivability conference exposition discex ii june 
courcoubetis 
measurement analysis real network traffic 
proceedings th conference informatics hci august 
fisk varghese 
analysis fast string matching applied content forwarding intrusion detection 
technical report cs updated version university california san diego 
hall wiley 
capacity verification high speed network intrusion detection systems 
proceedings advances intrusion detection raid 
horspool 
practical fast searching strings 
software practice experience 
lawrence berkeley national laboratory 
internet traffic archive 
ita ee lbl gov 
lippmann haines fried das 
darpa line intrusion detection evaluation 
computer networks october 
liu yang 
nonstationary traffic train model fine scale inference coarse scale counts 
ieee journal selected areas communications internet www measurement mapping modeling august 
markatos 
exb exclusion signature matching intrusion detection 
proceedings november 
mccanne leres jacobson 
libpcap 
lawrence berkeley laboratory berkeley ca available anonymous ftp ftp ee lbl gov mchugh 
testing intrusion detection systems critique darpa intrusion detection system evaluations performed lincoln laboratory 
acm transactions information system security november 
mell hu lippmann 
overview issues testing intrusion detection systems 
csrc nist gov publications nistir nistir pdf 
moore hall harris pratt :10.1.1.12.8563
architecture network monitor 
proceedings passive active measurement workshop pam 
mueller 
dragon way top 
network computing pages july 
slattery 
ftp arl mil ftp pub ttcp 
nlanr measurement operations analysis team 
nlanr network traffic packet header traces 
pma nlanr net traces 
robert terrence brian eric luigi 
testing evaluating computer intrusion detection systems 
communications acm september 
moore :10.1.1.10.7356
characterizing performance network intrusion detection sensors 
proceedings advances intrusion detection raid september 
sommer paxson 
enhancing byte level network intrusion detection signatures context 
proceedings acm conference computer communications security ccs october 

snort detection revisited 
www snort org docs snort pdf october 
stress tool 
www net stick 
nss group 
intrusion detection systems group test december 
www nss uk ids 
group 
capture flag contest 
available www com 
tool 
www net index html 
veitch 
wall yates 
line generation fractal multifractal traffic 
proceedings workshop passive active measurement pam pages april 
wu manber 
fast algorithm multi pattern searching 
technical report tr university arizona 
