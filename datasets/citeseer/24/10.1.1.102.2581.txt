gamma linda zavattaro software engineering sen sen october centrum voor wiskunde en informatica report sen issn cwi box gb amsterdam netherlands cwi national research institute mathematics computer science 
cwi part stichting mathematisch centrum smc dutch foundation promotion mathematics computer science applications 
smc sponsored netherlands organization scientific research nwo 
cwi member ercim european research consortium informatics mathematics 
copyright stichting mathematisch centrum box gb amsterdam nl kruislaan sj amsterdam nl telephone telefax gamma linda zavattaro cwi box gb amsterdam netherlands compare gamma linda prominent coordination languages generative communication shared data space 
gamma computation obtained applying multiset rewriting rules reminiscent way chemical reactions happen solution 
hand linda permits interprocess communication means creation consumption shared data 
non blocking input operator allowed terminates indicating required datum consumed available 
recall simple calculi gamma linda coordination models 
languages turing powerful show expressive power comparable particular prove exists program distribution preserving encoding language respects input output behaviour 
mathematics subject classification computing reviews classification system keywords phrases coordination languages models generative communication expressiveness concurrent languages term coordination indicate new class models formalisms mechanisms describing concurrent distributed activities ch 
basically coordination achieved generative communication shared data space linda gc gamma bm dynamically evolving interconnections processes consequence observations state changes manifold 
survey pa lists different coordination languages models 
amount different proposals requires definition criteria comparison classification 
represents step analysis possible criteria 
particular compare gamma bm linda gc prominent representative family coordination languages generative communication shared data space 
gamma bm computation described defining multiset rewriting rules reminiscent way chemical reactions happen solution 
example program able find maximum element non empty multiset integers written gamma follows computation consists repeated execution rewriting rule consumes available pair elements respectively matched variables produce new occurrence computation terminates element available element maximum 
visiting university bologna italy 
linda gc consists set primitives allowing interprocess communication consumption data items shared data space 
consider coordination primitives provided linda emits occurrence datum kind consumes occurrence inp non blocking predicative version required datum available consumed true returned terminates returning false 
linda variant gamma program written follows inp return observe loop terminates data available control exits loop consumed element returned maximum 
order compare gamma linda coordination models recall process algebraic representations languages bgz bgz respectively 
semantics means level transition system lower level describes semantics programs denoted usually upper level describes configuration composed program multiset data available shared data space evolve 
small linda calculus proven turing equivalent bgz 
show simple gamma calculus consider turing powerful 
languages computationally equivalent compare analyzing possibility encoding language preservation properties 
comparing criterion essentially weakening notion uniform encoding preserving reasonable semantics pal discriminate expressive power calculus mpw asynchronous fragment bou ht :10.1.1.13.1182:10.1.1.13.1182
require distribution programs preserved encodings formally want encodings usually denoted compositional respect parallel composition operator denoted languages program distribution preservation main reason consider requirement forbid possibility introducing new external managers extra coordinators 
fact program distribution preservation requirement think define encodings kind pn pn programs pn new program controller interactions 
encoding preserve notion observational semantics programs 
consider observable input output behaviour 
particular consider divergent ii deadlock termination behaviours formally require configuration divergent computation ii computation terminating state 
prove gamma linda comparable comparing criterion 
precisely show exists program distribution preserving encoding language respects input output behaviour 
impossibility encoding linda gamma intuitive difficult prove 
directly follows monotonicity gamma gamma program able transform data space able transform denotes multiset union 
monotonicity hold linda permits observe absence data means inp primitive 
suppose inp activates particular computation instance introduced data space considered computation activated 
hand impossibility encoding gamma linda intuitive difficult prove 
essentially follows fact multiset rewriting rules atomically executed gamma 
ensures conflict happens rewriting rules applied multiset 
hand linda permits consume produce single data item atomic way 
usually atomicity operations involving multisets data obtained linda synchronization mechanisms semaphores monitors 
mechanisms built linda implementation usually requires explicit managers 
example classical way obtain mutual exclusion concurrent programs introduce fresh token name occur consumed programs started immediately clear approach uses extra coordinator process avoided program distribution preserving property 
structure section syntax semantics calculi gamma linda consider section presents formal proof result section reports comparisons related concluding remarks 
languages semantics recall process algebraic representations gamma bm linda gc bgz bgz respectively 
fresh way operational semantics linda calculus levels approach followed gamma calculus semantics programs describe programs interact shared data space coordination level 
approach definition formal semantics coordination language manifold 
language gamma reaction ranged ri ranged ai reactions actions respectively 
ranged set gamma programs defined syntax programs gamma program parallel composition basic programs 
countable set names ranged ranged mi set containing multisets names indicate possible kinds data denotes occurrence datum kind sets denote set functions consider existence ir ia functions reactions actions respectively ir reactions boolean ia actions program ir functions multiset names ir true rewritten indicated ia 
consider example gamma program ir true ia gamma program able produce time available consumption 
alternative description gamma programs ia ir alternative description example true turing powerful encode gamma random access machine ram ss known turing equivalent formalism 
permits conclude gamma turing powerful best knowledge aware previous papers analyzing computational power gamma 
translation ram inspired linda process algebra bgz 
ram composed set registers rj holding arbitrary large natural numbers sequence numbered instructions 
min shown instructions sufficient model recursive function succ rj add contents register rj rj contents register rj zero decrease go instruction jump instruction contents register rj indicate means jn indicates rj empty 
program counter described pi indicating instruction execute th 
succ instruction easily implemented succ rj pi jn pi jn instruction consider parallel composition gamma programs performs decrement instruction second executes jump instruction rj pi jn pi jn pi pl true operational semantics operational semantics defined labelled transition system label 
subscript omitted clear context 
set labels label ranged indicates multiset rewriting operation transforms performed 
labelled transition relation minimal satisfying axiom rule table 
axiom indicates basic program perform transition labelled able rewrite multiset 
rule ensures perform rewriting operation put context easy observe transitions programs change program 
words transitions self loops 
fact program 
ir true ia table transition system specification symmetric rule omitted 
inp inp table transition system specification symmetric rule omitted 
subset linda bgz linda process algebra called introduced bgz fragment shown turing powerful :10.1.1.51.321
recall fragment denote programs language ranged defined syntax inp unique primitive program representing inaction usually omitted sake simplicity 
structured programs prefix forms forms inp parallel composed programs possible prefixes 
prefixes represent emission consumption respectively 
prefix unbounded replication terms guarded input operations program able consume unbounded amount data kind activating new program form inp represents program requires consume data kind available consumed program activated chosen 
example program inp consumes occurrence available creates new occurrence operational semantics language described labelled transition system 
omitted clear context 
set labels ranged 
kinds labels stand input output actions respectively third label indicates absence data kind tested 
transition relation minimal axioms rules table 
axioms describe semantics input output prefixes respectively term requires consume datum kind performing transition labelled produces new datum kind means step labelled axiom indicate program inp able consume datum kind test absence means transition labelled axiom states term spawn new instance program consuming datum kind table transition system specification coordination level 
rule indicates program able perform transition perform parallel programs 
observe transition system synchronization rules considered 
reflects fact dealing asynchronous language programs directly synchronize interact means coordination medium described 
coordination level section described unified coordination level gamma linda programs 
configuration representing state computation coordination level composed active program data available 
formally possible configurations represented terms composing set ranged defined syntax configurations gamma linda program multiset names representing data available 
computations coordination level described transition system parameterized possible transitions programs described program level 
omitted clear context 
sake conciseness consider labels special cases general labels 
transition relation minimal satisfying rules table 
rule permits consumption coordination medium new data 
rule indicates transition testing absence data kind performed data kind available shared data space 
example computation coordination level recall gamma program true transition system program level ensures 
rule table immediately follows similar program able repeatedly consume data produce written language transition system program level ensures 
coordination level example suggest gamma programs easily encoded linda show true general 
consider example gamma program true true consider program configuration ensured computation terminates configurations approach order encode gamma programs linda obtain encoding satisfactory introduce new deadlocks 
consider configuration independently consume deadlock reached data space empty involved processes require consume data 
non blocking input inp solve partially problem 
consider new encoding inp inp program consumes blocking second available new attempt consume data tried 
way undesired deadlock avoided 
new deadlocks introduced encoding satisfactory introduces divergences 
consider case programs consume computation steps consist execution non blocking inp operations fail 
point initial state reached data space consumed data 
section prove exists program distribution preserving encoding programs preserves input output behaviour programs 
interesting note inverse holds encoding exists 
comparing languages indicated previous section consider input output behaviour 
particular observe possibility divergent computations existence computation terminates deadlocks data space certain state 
formally consider configuration divergence deadlock termination behaviour defined follows iff exist ci ci ci iff previous section proposals encoding observed satisfactory introduce new deadlocks second add divergences 
presenting proof impossibility defining satisfactory encoding mapping programs programs vice versa formalize notion satisfactory 
require input output behaviour preserved iff divergence preservation iff deadlock termination preservation require distribution programs preserved external managers extra coordinators introduced encodings formally want encoding compositional respect parallel operator observe denote parallel composition languages dealing program distribution preservation encoding start showing impossibility encoding 
result follows monotonicity gamma addition data shared data space forbid possibility executing previously available computations 
lemma monotonicity program 
corollaries monotonicity lemma 
related big bang property gamma san follows fact process able produce new data starting empty data space computation surely diverges 
corollary program 

second corollary states process divergent computation starting data space diverge data space multiset 
corollary program 
multiset prove impossibility defining encoding preserves deadlock termination behaviour 
theorem respects deadlock termination behaviour 
proof consider program observe 
suppose contradiction encoding preserves deadlock termination behaviour contradicting corollary 
interesting note program distribution preservation property considered theorem 
impossibility result holds divergent behaviour considered 
case proof requires definition program property diverging available inp program chooses branch divergent program data space 
consumed 
point view divergent behaviour theorem shows exists program presenting divergent behaviour 
theorem exists encoding respects divergent behaviour 
proof suppose contradiction encoding 
consider program defined divergence preservation 
fact implies corollary contradiction 
encoding analyse problem encoding show possible require preserve program distribution want forbid new deadlock divergences 
case proof complex uses requirements introduced 
intuitively proceed way 
recall running gamma example true observe iff fact programs able perform rewriting operation 
hand show linda program parallel composition identical programs computation step program able reply step 
fact implies andq lemma program configuration 
configuration deadlocked exists program multiset indicates computation steps performed 
proof configuration deadlocked thesis trivially holds 
exists configuration proceed case analysis rule table prove transition 
rule input output operation performed 
case input ensures fact data space structured union identical multisets ensures available 
occurrence datum kind removed indicates multiset difference 
andq second subprogram consume occurrence case output operation treated symmetrically 
rule data space left unchanged fact fact data space left unchanged ensures second subprogram perform transition available transition 
corollary program exists computation 
cn 

computation diverges 
exists deadlocked configuration cm cm theorem exists program distribution preserving encoding respects input output behaviour 
proof suppose contradiction encoding 
consider running gamma example defined observe program distribution preservation divergence preservation iff deadlock termination preservation corollary applied configuration cases 
computation diverges 
implies contradiction 

computation terminates deadlocked configuration implies leading contradiction 
related gamma linda prominent representative family coordination languages shared memory model 
provided uniform level presentation process algebraic representations gamma linda previously introduced bgz bgz respectively 
main result languages incomparable exists program distribution preserving encoding language respecting input output behaviour 
interesting observe proof non gamma linda essentially shows impossibility having linda satisfactory implementation multiset input operations min primitive consumes data items intuitively think realize kind operations established transaction protocols phase commit algorithms 
formally prove approach permits obtain completely satisfactory solutions new external managers coordinator processes needed deadlocks divergences introduced 
idea compare relative expressive power concurrent languages studying possibility encoding language preservation properties pal discriminate expressive power calculus mpw asynchronous fragment bou ht study expressiveness called negative test operators bj prove separation equivalence results regarding expressiveness class linda dialects :10.1.1.13.1182
pal palamidessi proves exists uniform encoding calculus asynchronous fragment preserves reasonable semantics :10.1.1.13.1182
notion uniform encoding requires modularity parallel composition operator substitution free names notion reasonable semantics corresponds observation particular actions performed particular channels 
comparing criterion essentially weakening consider name substitution analyze input output behaviour programs care intermediate actions 
comparison criterion investigate expressive power called negative test operators 
prove tfa operator tests message available strictly increases expressive power language 
operator permits model inp linda primitive follows inp tfa ccs alternative choice 
show addition operator able instantaneously produce new instance execution negative test increases expressiveness language 
left investigation possibility implementing gamma linda language extended operation 
brogi jacquet bj uses notion inspired modular embedding bp compare relative expressiveness linda languages obtainable account subset coordination primitives tell get ask corresponding linda rd respectively non linda tfa operator negative form ask 
comparing criterion differs aspects require compositionality operators alternative choice operator observe divergent behaviour allow encoding shared data space 
differences require different proof techniques 
results obtain confirm observation fact possibility testing absence messages increases expressiveness languages 
prove dialect primitive strictly expressive obtained adding command 
expressiveness operators min investigated nestmann nes 
joint input inspired join calculus fg added asynchronous calculus ht bou 
new operator permits atomically receive separated channels 
expressiveness join input investigated showing possible encodings mixed guarded choice synchronous calculus obtained language 
fact multiset input operators strictly increases expressive power formally proved basic way consider language containing negative test operator 
left analysis expressive power coordination primitives sequential composition operator gamma programs introduced hls revisited 
acknowledge interesting discussions arbab members amsterdam coordination group 
particular devoted jan rutten precious suggestions earlier versions 
david sands indication big bang property gamma oscar nierstrasz suggestion transaction protocols order realize multiset rewritings linda 
grateful nadia busi roberto gorrieri comments 
bm ban tre le tayer 
programming multiset transformation 
communications acm 
bp de boer palamidessi 
embedding tool language comparison csp hierarchy 
proc 
concur volume lncs pages 
arbab de bakker rutten scutell zavattaro 
transition system semantics control driven coordination language 
forthcoming 
bou boudol 
asynchrony calculus 
technical report inria sophia antipolis 
bj brogi 
jacquet 
expressiveness linda concurrent languages 
proc 
express volume notes theoretical computer science elsevier 
bgz busi gorrieri zavattaro 
semantics output operation generative communication 
proc 
coordination volume lncs pages 
bgz busi gorrieri zavattaro 
turing equivalence linda coordination primitives 
proc 
express volume electronic notes theoretical computer science elsevier 
bgz busi gorrieri zavattaro :10.1.1.51.321
process algebraic view linda coordination primitives 
theoretical computer science 
ch ciancarini hankin editors 
proc 
coordination 
volume lncs 
ciancarini gorrieri zavattaro 
alternative semantics parallel operator calculus gamma programs 
large coordination programming mechanism models semantics pages imperial college press 
fg fournet gonthier 
reflexive chemical machine 
proc 
popl pages acm 
gc gelernter carriero 
coordination languages significance 
communications acm 
hls hankin le tayer sands 
parallel programming style algebra programs 
proc 
parle volume lncs pages 
mpw milner parrow walker 
calculus mobile processes 
information computation 
min minsky 
computation finite infinite machines 
prentice hall englewood cliffs 
ht honda tokoro 
object calculus asynchronous communication 
ecoop volume lncs pages 
springer 
nes nestmann 
expressive power join input 
proc 
express volume electronic notes theoretical computer science elsevier 
pal palamidessi :10.1.1.13.1182
comparing expressive power synchronous asynchronous calculus 
proc 
popl pages acm 
pa papadopoulos arbab 
coordination models languages 
forthcoming 
san sands 
laws synchronised termination 
proc 
st imperial college departement computing workshop theory formal methods pages springer 
ss shepherdson sturgis 
computability recursive functions 
journal acm 
zavattaro 
hierarchy negative test operators generative communication 
proc 
express volume notes theoretical computer science elsevier 

