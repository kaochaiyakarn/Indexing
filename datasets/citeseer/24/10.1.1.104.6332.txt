overview types compilation xavier leroy inria rocquencourt domaine de voluceau le chesnay france types programming languages programming languages equipped type system detects type errors program variable result type context expects data different incompatible type 
type checking take place statically compile time dynamically run time 
type checking proved effective catching wide class programming errors trivial misspelled identifiers fairly deep violations data structure invariants 
program considerably safer ensuring integrity data structures type correct interconnection program components 
safety motivation equipping programming languages type systems 
motivation came historically facilitate efficient compilation programs 
static typing restricts set programs compiled possibly eliminating programs containing constructs difficult compile efficiently compile correctly 
static typing guarantees certain properties invariants data manipulated program compiler take advantage semantic guarantees generate better code 
types compilation workshops dedicated study interactions type systems compilation process 
exploiting type information code generation optimization early example type system directed efficient compilation fortran 
fortran type system introduces strict separation integers numbers floating point numbers compile time 
main motivation separation fortran designers avoid difficulties handling mixed arithmetic run time chapter 
type system compiler knows generate integer arithmetic operations floating point arithmetic operations conversions integers floats 
text published proceedings types compilation workshop pages lecture notes computer science springer verlag march 
www springer de comp lncs index html 
copyright springer verlag separation hardware design processor architectures provide separate register sets arithmetic units integers floats 
turn architectural bias nearly impossible generate efficient numerical code language type system statically distinguish floating point numbers integers 
area compilers rely heavily static typing handling variable sized data 
different data types different natural memory sizes instance double precision floats usually occupy space integers size memory layout aggregate data structures records arrays vary sizes number elements 
precise knowledge size information required generate correct code allocates operates data structures 
knowledge usually derived static typing information type data determines memory size layout 
languages static typing compiled efficiently data representations fit default size necessary boxing heap allocating handling pointer data larger default size expensive operation 
languages type system flexible allow determination size information cases polymorphism type abstraction subtyping difficult impossible exploit unboxed data representations see various approaches :10.1.1.27.353:10.1.1.135.3242:10.1.1.14.4810
guarantees provided type system enable powerful program optimizations 
instance strongly typed language type system allow casts incompatible types pointers incompatible types alias point memory block 
guarantees load store operations pointers interfere allowing aggressive code motion instruction scheduling 
envision different heap allocation strategies objects different types exemplified genius proceeding 
area type information useful optimization method dispatch object oriented languages 
general method dispatch expensive operation involving run time lookup code associated method object method suite followed costly indirect jump code 
class language actual class object belongs known compile time efficient direct invocation method code generated 
code method small expanded line point call 
simple examination static type object class hierarchy program uncovers opportunities optimization 
instance static type object class subclasses compiler knows actual class object generate direct invocations methods object 
program analyses optimizations non standard type systems points convergence hand algorithms type checking type inference hand static analyses programs intended support code optimization 
come surprise static analyses type inference algorithms attempt reconstruct semantic information implicit program source propagate information program recording program point 
formal evidence static analyses type inference problems recast common framework interpretation 
remarkable essentially identical algorithms type inference certain program analyses 
instance unification order terms type inference hindley milner type system ml haskell basis fast program analyses steensgaard aliasing analysis henglein tagging analysis 
baker reflects informally connection hindley milner type inference program analyses 
technique attracted considerable interest type inference standpoint program analysis standpoint consists setting systems set inclusion constraints set inequations solving iteratively 
technique perform type inference type systems subtyping 
technique basis flow analyses functional object oriented languages 
analyses approximate flow control data presence class functions objects effective optimize function applications method invocations eliminate dynamic type tests dynamically typed languages 
palsberg keefe draw formal connection areas proving equivalence flow analysis cfa type inference algorithm amadio cardelli type system subtyping recursive types 
aiken proceedings surveys set inclusion constraints equality unification constraints program analyses 
non standard type systems developed capture precisely behavior programs support program transformations 
effect systems introduced lucassen gifford enrich function types effects approximating dynamic behavior functions inputoutput operations store 
information useful code motion automatic parallelization 
jouvelot talpin tofte region annotations types data structures functions determine aliasing lifetime information data structures 
ml compiler developed tofte relies lifetime information managing memory stack regions compiler controlled explicit deallocation regions conventional garbage collector 
tolmach proceedings presents reformulation simple effect systems monadic type systems 
shao trifonov develop type system keep track class continuations program allowing interoperability languages support callcc languages 
non standard type systems record exploit results earlier program analyses 
instance banerjee develop rich type systems capture exploit flow information produced flow analyses 
example thiemann proceedings develops type system captures resource constraints appear compilers register allocation 
types run time programming languages require compiled programs manipulate amount type information run time 
interesting compilation issues arise trying run time manipulations types efficient possible 
prime example compilation run time type tests languages scheme lisp clever tagging schemes developed support fast run time type tests 
example objectoriented languages java modula run time type inspection programs dynamically test actual class object 
clever encodings type hierarchy developed perform tests efficiently 
source language fully statically typed compilers run time systems may need propagate type information run time order support certain operations 
typical example handling non parametric polymorphic operations polymorphic equality ml type classes haskell 
example handling polymorphic records 
ways required type information efficient form attach simple tags data structures pass extra arguments type representations dictionaries functions polymorphic functions 
elsman proceedings compares performances approaches case ml polymorphic equality 
passing run time representations type expressions extra arguments polymorphic function allows type directed compilation techniques applied languages polymorphic typing 
til compiler flint compiler rely run time passing type expressions taken extensions type system handle unboxed data structures polymorphic functions modules types :10.1.1.27.353
constructing passing type expressions run time entail execution overhead 
shao saha proceedings shows minimize overhead lifting type related computations loops functions take place program execution 
non conservative garbage collectors require amount type information run time order distinguish pointers non pointers memory roots heap blocks 
traditional approach tags run time values 
alternatively appel suggested attach source types blocks function code reconstruct type information reachable objects run time variant ml type reconstruction 
hosoya yonezawa proceedings complete formalization approach 
communicating static type information run time system challenging requires close cooperation compiler back 
instance type directed garbage collector needs type information associated registers stack locations garbage collection points cooperation register allocator needed map types program variables registers stack slots 
bernard proceedings discuss experience coercing generic back propagating type information 
operation relies heavily run time type information marshaling un marshaling arbitrary data structures streams bytes crucial mechanism persistence distributed programming 
proceedings duggan develops rich type systems support marshaling presence user defined marshaling operations data types 
typed intermediate languages traditional compiler technology types checked source language intermediate representations compilation process essentially untyped 
intermediate representations may carry type annotations introduced front provision type checking intermediate representations 
compilers developed take opposite approach intermediate representations equipped typing rules type checking algorithms various passes type preserving transformations typed input produce typed term target intermediate language 
need typed intermediate representations obvious compilers require precise type information available till run time til flint till late compilation process :10.1.1.27.353
requiring compiler pass type preserving output typable nearly impossible ensure propagation correct type information compiler 
compilers rely crucially types typed intermediate languages extremely useful facilitate debugging compiler 
compiler development testing type checkers intermediate representations run outcome program transformation performed compiler 
catches large majority programming errors implementation transformations 
contrast traditional compiler testing shows generated code incorrect indicate pass erroneous type checking intermediate representations pinpoints precisely culprit pass 
glasgow haskell compiler exploit systematically technique 
far typed intermediate representations described applied exclusively compiling functional languages 
wright proceedings develops typed intermediate language compiling java discusses difficult issue making explicit self parameter methods type preserving way 
typed intermediate languages usually go way code generation 
instance glasgow haskell preserves types high level program transformation actual code generation untyped 
til compiler goes steps particular performing conversion functions closures type preserving manner 
morrisett proceedings shows go way assembly code proposes type system assembly code type check reasonably optimized assembly code including uses stack 
applications types discussion concentrated core compiler technology functional object oriented languages types exciting unexpected applications areas programming language implementation 
instance type directed partial evaluation interesting alternative traditional partial evaluation source level reductions 
danvy proceedings presents type directed partial evaluator uses run time code generation 
presents partial evaluator run time code generator 
languages distributed programming process calculi area exploitation type information crucial obtain performances 
kobayashi proceedings surveys topic 
types interesting applications area language security mobile code 
java applets popularized idea foreign compiled code locally verified type correctness execution 
local type checking compiled code enables language security techniques rely typing invariants java sandbox 
advances typed intermediate languages important impact area 
instance java code verification performed unoptimized bytecode machine morrisett proceedings show similar verifications carried optimized machine code 
lee necula proof carrying code show generalize approach verification arbitrary specifications 
considerable cross fertilization type systems compilers hope see exciting new applications types area programming language implementations near 

ole agesen jens palsberg michael 
type inference self analysis objects dynamic multiple inheritance 
proc 
european conference object oriented programming ecoop 

alfred aho ravi sethi jeffrey ullman 
compilers principles techniques tools 
addison wesley 

alexander aiken edward wimmers 
type inclusion constraints type inference 
functional programming languages computer architecture pages 
acm press 

andrew appel 
run time tags aren necessary 
lisp symbolic computation 

david bacon peter sweeney 
fast static analysis virtual function calls 
object oriented programming systems languages applications pages 
acm press 

henry baker 
unify conquer garbage updating aliasing 
functional languages 
lisp functional programming 
acm press 

anindya banerjee 
modular polyvariant type closure analysis 
international conference functional programming pages 
acm press 

lars birkedal mads tofte magnus 
region inference von neumann machines region representation inference 
rd symposium principles programming languages pages 
acm press 

patrick cousot 
types interpretations 
th symposium principles programming languages pages 
acm press 

jeffrey dean david grove craig chambers 
optimization object oriented programs static class hierarchy analysis 
proc 
european conference object oriented programming ecoop pages 
springer verlag 

greg defouw david grove craig chambers 
fast interprocedural class analysis 
th symposium principles programming languages pages 
acm press 

allyn robert muller turbak wells 
strongly typed flow directed representation transformations 
international conference functional programming pages 
acm press 

amer diwan kathryn mckinley eliot moss 
type alias analysis 
programming language design implementation pages 
acm press 

jonathan scott smith trifonov 
type inference recursively constrained types application oop 
mathematical foundations programming semantics volume electronic notes theoretical computer science 
elsevier 

mary fern ndez 
simple effective link time optimization modula programs 
programming language design implementation pages 
acm press 

robert harper greg 
compiling polymorphism intensional type analysis 
nd symposium principles programming languages acm press 

nevin heintze 
set analysis ml programs 
lisp functional programming pages 
acm press 

fritz henglein 
global tagging optimization type inference 
lisp functional programming 
acm press 

suresh jagannathan andrew wright 
polymorphic splitting effective polyvariant flow analysis 
acm transactions programming languages systems 

pierre jouvelot david gifford 
algebraic reconstruction types effects 
th symposium principles programming languages pages 
acm press 

xavier leroy 
unboxed objects polymorphic typing 
th symposium principles programming languages pages 
acm press 

xavier leroy 
effectiveness type unboxing 
workshop types compilation 
technical report boston college computer science department june 

john lucassen david gifford 
polymorphic effect systems 
th symposium principles programming languages pages 
acm press 

minamide greg morrisett robert harper 
typed closure conversion 
rd symposium principles programming languages pages 
acm press 

john mitchell 
coercion type inference 
th symposium principles programming languages pages 
acm press 

george necula 
proof carrying code 
th symposium principles programming languages pages 
acm press 

atsushi ohori 
polymorphic record calculus 
acm transactions programming languages systems 

atsushi ohori 
unboxed operational semantics ml polymorphism 
lisp symbolic computation 

jens palsberg patrick keefe 
type system equivalent flow analysis 
nd symposium principles programming languages pages 
acm press 

simon peyton jones 
compiling haskell program transformation report 
european symposium programming volume lecture notes computer science 
springer verlag 

simon peyton jones john launchbury 
unboxed values class citizens non strict functional language 
functional programming languages computer architecture volume lecture notes computer science pages 

john plevyak andrew chien 
precise concrete type inference objectoriented languages 
object oriented programming systems languages applications pages 
acm press 

zhong shao 
flexible representation analysis 
international conference functional programming pages 
acm press 

zhong shao andrew appel 
type compiler standard ml 
programming language design implementation pages 
acm press 

olin shivers 
control flow analysis scheme 
programming language design implementation pages 
acm press 

olin shivers 
control flow analysis higher order languages 
phd thesis carnegie mellon university may 

bjarne steensgaard 
points analysis linear time 
rd symposium principles programming languages pages 
acm press 

jean pierre talpin pierre jouvelot 
type effect discipline 
information computation 

tarditi morrisett cheng stone harper lee 
til type directed optimizing compiler ml 
programming language design implementation pages 
acm press 

mads tofte jean pierre talpin 
region memory management 
information computation 

philip wadler stephen blott 
ad hoc polymorphism adhoc 
th symposium principles programming languages pages 
acm press 

