gridtorrent optimizing data transfers grid collaborative sharing antony national technical university athens school electrical computer engineering computing systems laboratory cslab ece ntua gr 
grid systems expand popular growing need efficient scalable robust data transfer mechanisms deal effectively large file transfers flash crowd situations 
address problem data transfer optimization presenting gridtorrent modified bittorrent protocol tightly coupled modern grid middleware components 
grid torrent transfer files directly established gridftp servers gridtorrent peers simultaneously requesting information 
peer peer approach enables aggregate data transfer throughput numerous requests rely single data source achieve better utilization available grid resources 
experimental results conducted prototype implementation suggest significant advantages gridtorrent optimize data transfers 
gridtorrent completely backwards compatible deployed grids 
keywords grid data grid data management data transfer replica location service replica optimization service peer peer networks collaborative sharing years grid systems gained popularity widely utilized scientific community 
grid wide area large scale distributed computing system remotely located disjoint diverse processing data storage facilities integrated common software architecture 
hardware layer grid may comprise component including individual computers clusters computing farms network attached storage arrays tape libraries specialized sensors scientific instruments connect shared network provide necessary software level services remotely administered 
grid essential critical components data management layer 
pioneering grid efforts early faced problem managing extremely large scale datasets order petabytes shared broad heterogeneous user communities 
essential design system architecture capable meeting advanced requirements context grid paradigm 
proposed data grid architecture allows distributed storage accessibility large set shared data resources defining set basic data services interacting order expose known file apis semantics user applications higher level grid services 
data grid architecture employs services data management purposes 
fundamental service data transfer service responsible moving files grid nodes 
gridftp 
replica location service rls keeps track physical locations files 
optimization service selects best data source transfer terms completion time manages dynamic replica creation deletion file usage statistics 
introduce gridtorrent focused realtime optimization data transfers grid 
gridtorrent implementation bittorrent designed interface exploit defined deployed data grid components protocols 
argue protocol peer peer techniques provide needed effectiveness scalability extreme load flash crowd conditions 
ground bittorrent due sustained throughput compared peer peer data transfer protocols aforementioned scenarios 
gridtorrent integrated existing middleware distributions offering data transfer optimization requiring extra services grid infrastructure 
instance torrent files gridtorrent uses rls provided existing grid 
gridtorrent client able gridftp partial file transfer feature request file fragments servers hold file 
gridtorrent possible connect gridtorrent clients gridftp servers located grid 
gridtorrent inherent mechanism bittorrent protocol selects best download sources fly realtime bandwidth metrics independent actual transfer mechanism 
addition gridtorrent deployments backwards compatible additional data stored replica location service ignored regular clients data management api considered gridtorrent enabled clients 
rest organized follows section presents overview data management services grid 
bittorrent protocol briefly described section 
prototype section evaluated performance results implementation section 
conclude related area thoughts direction 
data management services grid locating files core building blocks data grid architecture replica location service 
grid environment may require data scattered globally due individual site storage limits remain equally accessible participating computing elements 
cases common local caching data reduce network latencies normally add constant overhead remote data access operations 
grid terminology local copies read remote files storage elements called replicas applications running grid request local file instances specialized grid data management services 
file grid application ask replica location service locate corresponding instances requested item local replica exists application normal file semantics access contents 
case remote copies component data grid take responsibility copying remote data local node update replica location indices position new instance 
widespread solution currently deployed grid framework constructs uniform filename namespace unique vo identifiers logical filenames manages mappings identifiers physical locations files physical filenames 
applications locate data matter source request physical location information 
replica location service data grid services structured similar url describing access protocol site path site directory structure replica 
order distribute replica location data grid main components local replica catalogs replica location indices lrc maintains information logical filenames access lists creation date various file attributes 
stores map physical filenames replicas logical filename lfn pfn maps 
lfn lrc return associated pfn set 
rli maintains information catalogs associated logical filenames 
find catalog holds replica file list lfn lfn lrc map 
default deployment scenario participant vo manages lrc orchestration rls done single central rli vo 
requirements multiple deployed parallel providing optional coarse grain load balancing fail features replica location infrastructure 
framework instructs multiple indices catalogs form level hierarchy lrc linked multiple vice versa 
multiple form tree structures 
transferring files rli replica location indices rli rli rli lrc lrc lrc lrc soft state update protocol local replica catalogs fig 

replica location service deployment scenario fundamental building block data grid architecture gridftp protocol protocol defined global grid forum addresses issue data transfer grid nodes 
modern grid middleware distributions globus toolkit include gridftp service integral part grid infrastructure 
extends standard ftp protocol introducing features grid security infrastructure gsi third party control data transfer 
provides ability user application site initiate monitor control data transfer operation parties source destination sites data transfer 
achieved separation control data channel 
additional extension support manual setting automatic negotiation tcp buffer sizes optimize transfer large files large sets small files 
techniques adopted grid community past years direction evolved significantly 
widespread solution currently deployed grid globus striped gridftp protocol included current release globus toolkit 
new features added gridftp enable transfer data striped interleaved multiple servers partial file transfer meaning transfer file portions complete file parallel data transfer multiple tcp streams parallel single source destination multiple servers participating striped transfer 
gridftp protocol client server model undesirable characteristics centralized techniques server overload existence single point failure inability cope flash crowds 
replica location service exploited optimize data movement services 
replica aware algorithms data movement services take advantage multiple replicas boost aggregate transfer throughput 
argue centralized approach may reach limits number potential downloaders volume data increase orders magnitude 
brief description bittorrent protocol bittorrent peer peer protocol allows clients download files multiple sources uploading users time obtaining central server 
goal reduce download time large popular files load servers serve files 
torrent file name file size piece size sha tracker url peer new client new connections data data publish list peers peer data tracker peer peer url peer url peer url peer set fig 

bittorrent deployment scenario file divided chunks typically kb 
clients exploit fragmentation simultaneously downloading chunks sources 
integrity reasons imposed extended fragmentation hash kept group chunks called piece 
information file size stored file identified extension torrent 
bootstrap client reads file obtain fragmentation policy url tracker 
tracker service responsible holding information concerning peers involved file transaction 
connection corresponding tracker client receives random list peers currently downloading uploading file 
peers categorized seeds file leechers downloading pieces 
point client responsible establish connections peers decide data movements local information 
order improve availability ensure uniform distribution pieces peer selects pieces downloaded rarest policy 
effectiveness bittorrent relies built incentive mechanism algorithm 
essentially peer selection algorithm poses limit number concurrent uploads typically set gives priority peers best upload rates 
period peer recalculates upload rates neighbors decides peers unchoke 
protocol avoids free riders meaning peers download contributing system 
furthermore additional peer randomly third period means optimistic unchoke 
latest version bittorrent client replaces tracker service distributed hash table dht dynamically locating peers participate file transaction 
gridtorrent design extending replica location service main component bittorrent protocol file known torrent file 
file contains important information data downloaded 
design eliminate file incorporate necessary information grid catalogs specifically replica location service 
file add attributes rls catalog file size size piece hash piece optional information stored replica location service defines number replicas file physical location actual data 
physical location identified unique physical file name pfn gridftp url 
enable gridtorrent protocol introduce gridtorrent url form gtp site fully qualified domain name path file advantage proposed modification implemented features model solution preserving backwards compatibility existing grid architecture 
extra data stored replica location service default ignored existing applications recognize 
application translate gridtorrent url simply ignore corresponding replica 
proposed changes current grid architecture enhance performance data transfers furthermore seamlessly integrate current state art grid data management 
extending data transfer service gridtorrent grid enabled version bittorrent client 
uses existing grid protocols provide optimized data transfer service ability directly communicate gridftp servers 
gridtorrent design comprises components handles communication replica location service 
component responsible finding file information file size piece size registering replicas rls finding existing replicas 
handles communication grid torrent gridftp enabled peers 
handles disk storing retrieving files 
file hashing enabled responsible verifying correctness file comparing sha downloaded piece sha provided rls 
main advantages gridtorrent inherent optimization algorithm replica selection 
request gridtorrent file trigger query replica location service 
query occur periodically notified changes locations file replicas joins departures nodes gridftp servers gridtorrent leechers seeds 
receiving list peers gridtorrent acts protocol prefix pfn 
concerns gridtorrent client involved peers initiate communication exchanging bittorrent message informing pieces possess 
furthermore time peer downloads piece sends message notifying peers connected new acquisition 
order download data gridtorrent client peer issues request message blocks blocks parts piece referenced piece index zero byte offset piece length 
having information available pieces gridtorrent starts downloading pieces random order 
case gridftp server peer need exchange messages 
downloading technique client issues gridftp partial get message data specific block intends download 
selection block performed way 
gridtorrent deployment scenario depicted 
exploit information gained messages applying specific download strategy 
example downloading pieces rarest order described earlier 
optimize piece selection policy client preferring peers better download rates 
whilst pieces downloading various peers gridtorrent client maintains statistics mean transfer time 
time block downloaded peer mean transfer time node calculated current download rate peer history 
gridtorrent protocol uses bittorrent tit tat algorithm ensure peers contribute file downloading discourage free riding 
new client new connections gridftp server publish attributes striped gridftp striped gridftp peer peer nt rls lfn file size piece size pfn peer pfn peer striped gridftp striped gridftp pfn pfn 
gridftp server peer set fig 

gridtorrent deployment scenario peer upload constant number peers time utilizing aforementioned optimistic unchoking mechanism 
implementation experimental results gridtorrent prototype implementation entirely written java 
grid torrent client bindings globus toolkit libraries exploits gridftp client api replica location service api 
experiments planetlab infrastructure 
testbed consists planetlab nodes completely heterogeneous 
dedicated rls service gridftp server remaining nodes file transfer clients 
summarizes experiment results prototype presenting minimum maximum average completion time seconds 
compare performance gridtorrent versus gridftp distributing file constant set nodes 
having gridftp server running node invoke concurrent file transfers gridftp server client nodes testbed gridftp gridtorrent measure total completion time 
experiment conducted file sizes varying mb mb 
derived concentrating mean completion time curves gridftp performs better small file sizes gridtorrent results faster transfers larger files 
observed crossover point mb gridtorrent clearly outperforms gridftp 
due overhead introduced inherent bittorrent protocol fragmenting mechanism client contact rls obtain information file receive list peers involved file transfer contacting 
messages exchanged gridtorrent clients apart fig 

minimum maximum average time required independent downloaders transfer file gridftp gridtorrent messages containing file chunks constitute overhead case small file sizes compensated parallelism offered protocol 
examining carefully conclude gridtorrent maximum average completion time general better gridftp minimum completion time considerably higher 
justified fact gridftp server participating clients located lan 
gridtorrent protocol concentrates fairness nodes take advantage lan speeds gridftp 
general cases bandwidth issue gridftp perform faster contrast cases bandwidth bottleneck gridtorrent parallelism boost performance 
related efficient movement distributed volumes data subject constant research area distributed systems 
having analyzed current data transfer practices grid environments section focus proposed data movement techniques centralized context peerto peer paradigm 
kangaroo architecture data transfer system aims better performance making opportunistic chain servers 
disks buffers hiding network latencies 
environments high throughput needed consistency major concern 
chien conceptualize communication problem readers writers proposing composite endpoint protocol cep solution bulk transfers 
users provide high level transfer data cep scheduler generates schedule optimizes transfer performance producing balanced weighting directed graph various algorithms 
readers writers implement provided schedule 
model remains centralized 
follows similar approach bittorrent targets bulk data transfer analogous assumptions 
support connection feature bittorrent encourages cooperation 
papers technical reports analyzing bittorrent performance published 
derived bittorrent tracker client logs 
related aims estimate global efficiency bittorrent client interactions scalability system flash crowd conditions detailed measurement study behavior bittorrent terms popularity availability download performance content lifetime pollution level 
authors attempt theoretically trace file sharing system behavior introducing simple fluid model obtaining expressions average number seeds average number downloaders average download time functions various system parameters 
bittorrent built incentive mechanism evaluated 
simulator approach understand bittorrent performance 
authors examine potential unfairness protocol certain circumstances 
evaluation shows bittorrent treat unfairly high bandwidth peers 
solve problems authors suggest block level rate level tit tat policy 
wei compare bittorrent ftp data delivery grid environments 
experiments conducted lan cluster involving nodes demonstrate bittorrent efficient large file transfers scalable number nodes increases 
contrast focus data grid environments specific concern flash crowd situations computational desktop grids propose architecture directly deployed real life grid environment 
believe data grid deployments client server data transfer mechanisms put aside favor peer peer techniques provide better network traffic distribution resolve single point failure problem 
described peer peer data transfer algorithm gridtorrent popular bittorrent protocol 
gridtorrent compatible current data grid architecture utilized changes deployed grid middleware 
experiments conducted planetlab infrastructure show gridtorrent outperforms gridftp cases large data transfers limited bandwidth nodes 
contrary gridftp performs better bandwidth constraints 
cases gridtorrent transfer data enables remote peers exploit collaborative sharing properties underlying bittorrent protocol order boost aggregate performance 
plan evaluate implementation larger set possible data transfer scenarios different protocol parameters 

foster kesselman grid blueprint new computing infrastructure 
morgan kaufmann 
foster kesselman tuecke anatomy grid enabling scalable virtual organizations 
international journal supercomputer applications 
datagrid project eu datagrid web cern ch eu datagrid 

chervenak foster kesselman salisbury tuecke data grid architecture distributed management analysis large scientific datasets 
journal network computer applications 
stockinger samar allcock foster tierney file object replication data grids 
cluster computing 
chervenak deelman foster guy hoschek iamnitchi kesselman ripeanu stockinger stockinger tierney framework constructing scalable replica location services 
proceedings acm ieee conference supercomputing ieee computer society press 
foster kesselman globus metacomputing infrastructure toolkit 
international journal supercomputer applications 
foster kesselman tsudik tuecke security architecture computational grids 
proceedings th acm conference computer communications security new york ny usa acm press 
allcock link foster globus striped gridftp framework server 
proceedings acm ieee conference supercomputing sc 

official site globus toolkit globus org toolkit 

cohen incentives build robustness bittorrent 
workshop economics peer peer systems berkeley ca usa 
official bittorrent client www bittorrent org 

thain son livny kangaroo approach data movement grid 
proceedings tenth ieee symposium high performance distributed computing hpdc 

chien composite endpoint protocol cep scalable endpoints flows 
proceedings ieee international symposium cluster computing grid ccgrid 

sherwood bhattacharjee cooperative bulk data transfer protocol 
proceedings ieee infocom 

keller biersack felber dissecting bittorrent months torrent lifetime 
proceedings th passive active measurement workshop 

sips measurement study bittorrent peer peer file sharing system 
technical report pds delft university technology 
qiu srikant modeling performance analysis bittorrent peer topeer networks 
proceedings sigcomm comput 

volume 

bharambe padmanabhan analyzing improving bittorrent performance 
technical report carnegie mellon institution microsoft research 
wei collaborative data distribution bittorrent computational desktop grids 
proceedings th international symposium parallel distributed computing 

