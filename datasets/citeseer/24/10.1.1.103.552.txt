need metamodels 
andreas prinz irit universit paul sabatier toulouse route de toulouse france irit fr www irit fr faculty engineering university college norway andreas prinz 
model driven technologies usually rely metamodels describing structure models explicitly implicitly 
reality turns standardized metamodels relying hinders integration 
discuss place role models meta models 
discussion driven pragmatic goal advantage models meta models order facilitate tool integration 
result argue doing tool integration meta model approach 
example look information covered meta model really needed bring different models 
today software industry faces increased interest modelling techniques aiming raise abstraction software development 
relevant steps direction omg initiative promoting modelling mda mde 
order fully operational model driven engineering framework lots things remain done need carefully studied theoretical level 
results mdx evolution increased interest metamodels meta modelling techniques 
meta modelling definitely needed step mdx approach feel important place deserves models main actor 
give new view place role meta models 
view starts idea main actor mdx environment model main goal new technology able reason model level process information model level compose various models perspective role meta models facilitate models 
open areas mdx concerns integration different kinds models order able jointly 
current development computers ambient presence asks integration different tools 
course integration task easier established standards integration tools 
various reasons standards largely missing 
new view meta models role basis new methodology integration tools ad hoc standards developed real standard 
method meta modelling base integration provide specializations allow handling inconsistent deviating models coming different sources 
structured follows section describes view models meta models role abstraction 
context section gives view relationship models meta models allows flexible tool integration 
section illustrates approach example conclude section 
basic notions mda mde model meta model mda mde technique notion model gives representation system developed allows reason simple way 
modelling new issue traditionally science means master complexity 
key success abstraction 
consensual definition model model properties people agree sufficient needs 
important properties model underlined offers simplified view system respect fixed set criteria seen set statements system able answer questions place actual system giving answers system :10.1.1.10.4892
course possible questions pertinent system modelled view 
models expressed modelling languages 
various modelling languages exist depending kind information model suppose render model modelling software modelling language dedicated software modelling uml sdl language closer theory applied model instance formal verification asm petri nets automata 
obviously important aspect modelling language linguistic aspect way defined syntactically kind systems applied kind information model 
aspects typically stored meta model 
meta model description concepts modelling language provides caring actual syntax 
particular kind meta model grammar 
way syntax meta model specifies captured valid models expressed certain modelling language see 
concretely meta models define sets concepts relationships abstraction filter modelling see 
example uml meta model defines uml models look structured gives elements behavior expressed uml 
done defining uml model elements specifying relationships allowed forbidden model element configurations describing textually system abstraction uml 
exact nature relationship model corresponding meta model far settled 
discussion particularly active uml community 
strong object oriented background community long taken model instanceof meta model object oriented style 
furthermore relationship instanceof said relate system modelling model representing 
experience proved relationship describe links possibly existing model meta model system model 
section discuss order predicate calculus grammars 
context model predicate calculus formula meta model predicate calculus grammar 
case formula really instance grammar 
instanceof relationship context inappropriate 
cope lack precision authors propose conformsto relation model corresponding meta model 
generic relationship actual nature depends technological space model meta model system study 
example case uml object oriented setting say uml model containing structural part classes relationships instanceof uml meta model predicate calculus formula predicate calculus grammar 
gives concrete examples conformsto relationship 
summary meta model abstracts representation issues language focus important aspects disregarding concrete representation 
place meta models meta models meta modelling new ideas 
long time data base modelling 
mda mde induced tendency gave central role 
section describe today place meta models software development propose new view role 
previous section defined meta models offering description concepts modelling language provides showing actual syntax 
immediate consequence definition meta models serve basis integration various tools modelling language 
case common practice 
meta models typically describe part syntax language 
known meta models course uml standard meta model 
meta model main part uml standard definition primary responsibility 
define language specifying uml models section infrastructure part 
meta model defines main concepts existing uml mutual relationships 
practical question comes immediately meta model exploited uml modelling tools 
practice shown uml tool builders get inspiration standard meta model mainly due uml meta model complexity definition style fit needs tool builders purely industrial political reasons 
leads issue meta model qualities definition style 
uml meta model defined concern capturing language constituents accent language syntax semantics 
necessarily fit need tools focusing particular usages language graphical editor constraints checker simulators 
factor related intrinsic quality uml meta model course fact language huge different tools choose different subset language cover leads different language subsets 
result principle uml tools standard uml meta model fact actual base meta models different 
integration tools techniques meta model trivial partners agree definition meta model defines exchange formats access interfaces 
users particular tools common meta model may able distinguish foreign model model tool 
situation highly hypothetical 
agreeing common metamodel may harder achieve integration task tool integration benefit common meta model 
order come situation tool providers agree common meta model important join forces defining 
note case uml language standard meta model defining language 
uml tools directly serve integration purpose 
software development system typically handled various tools 
tools deals abstraction software study point view technique theory 
tool tool applied model 
tool deals certain technique theory theory tool applied software systems syst 
model meta model terminology technological space defined theory theory tool theory tool corresponds meta model abstraction level 
tool uses abstraction system respect theory tool base theory 
case tool applied theory tool syst model system syst tool conformsto theory meta model provided theory 
illustrates case single tool theory 
fig 

relation system model theory tool principle system model abstraction respect considered theory independent tool 
go back uml example considered think uml modelling tools 
see system terms uml concepts believe model uml syst tools 
reality seen different mainly different tools usually model differently system 
means ideal setting theory syst single meta model theory leading single model system tools 
talk theory tool syst 
today related tools different meta models 
case typical way connect tools ensure interoperability model translations transformations models corresponding various tools 
happen meta model level syntax level 
approach obvious drawbacks 
critical integration problem solved particular cases extensible reusable 
number transformations considered order tools 
propose different point view considering single meta model corresponding theory consider different tools correspond different meta models seen case practice 
means theory tool theory tool 
theory set related meta models corresponding actual tool 
consider fact single model corresponds system 
setting order integrate different tools theory properly define conformity relationship relating model meta models corresponding tools find techniques exploit relationship 
describing models meta models mutual relationships classical picture edge pyramid meta models top models meaning model corresponds single meta model meta model may models conforming definition 
classical view model meta model relationship versions uml standard 
occurs versions discussed detail 
believe possible view relationship model meta model reasons need center models 
models exist corresponding meta model defined 
ocl defined grammar text 
meta model language standardized meta models ocl exist defined different authors various needs 
single ocl expression presence ocl meta model corresponds ocl model conforming various meta models 
similarly uml model dealt various tools different meta model fact instance meta models 
compares model centric view classical pyramid shaped view tree layered model example model meta model architectures 
fig 

comparative view architectures news need agree completely common meta model fact necessary agree joint parts metamodel 
done tool select parts handle run analysis 
remaining parts simply ignored 
example ignoring temporal properties specification just analyzing rest 
situation readily handled meta models 
define core part language meta model extend meta model needs individual tools 
case core works unifying layer tools 
meta model defined modularly different parts meta model address different needs 
instance meta model module corresponding basic concepts dealt meta model module corresponding relationships constraints model elements complete structural semantics module elements needed dynamic semantics depending focus tools modules 
necessary tools know extensions tool doing anyway ignore meta model module dealing part 
hand tool handling extensions obviously know complete set extensions 
note necessary agree standardization extensions handled tool 
long run may lead standardizing language 
example grammars order predicate calculus order compare different tools handling theory consider example grammars mainly understood existing tools handling known 
focus tools examples bison example lr tool antlr example ll tool different ideas bad grammars concept grammar express input 
considered grammars course level meta model language 
order really look concrete example need sample grammar 
application order predicate calculus taken order predicate calculus pc sample grammar 
pc constants true false integer numbers 
furthermore operators 
parentheses indicate precedence universal existential quantification 
variables bound allow functions 
leads grammar ebnf 
formula con formula unop formula formula binop formula ll lr special classes grammars generate tools compilers 
see details 
unop quant var formula name arguments binop impl equ quant forall exists var name arguments formula formula course want handle level syntax meta model level modelled uml 
fig 

grammar meta model meta classes correspond basic notions grammar terminal nonterminal repetition associations highlight main relations existing concepts 
grammar meta model contains understanding grammars terms ebnf 
best high level notation ebnf higherlevel constructs identified explicitly allow easy conversion formalisms 
general easier translate higher level lower level constructs way round 
model grammar dive tools understanding grammar 
please note description complete add detail 
yacc grammar bison successor yacc grammar proper input 
grammar formatted needs yacc follows 
token con name impl equ forall exists formula con formula unop formula formula formula formula formula formula impl formula formula equ formula quant var formula name opt arguments opt arguments empty arguments unop quant forall exists var name arguments formula formula formula empty formula formula delivering specification bison leads error messages due ambiguities called conflicts bison grammar 
considered grammar kinds problems binary operator formula rule stating apply 
terms precedence relationship established operators 
similarly need precedence unary operator relation binary operators 
need precedence quantification 
straightforward solve ambiguity problems 
lines meant left equ left impl left left unary unary quant formula 
unop formula prec unary quant var formula prec unary quant 
changes bison able produce parser considered language problems 
having looked way bison handles grammar able pinpoint bison way looking grammars corresponding meta model 
antlr grammar fig 

meta model partial antlr starts grammar representation 
consider parser part grammar lexical entities 
ebnf grammar provided previous section translated antlr follows 
class extends parser formula formula equ formula formula impl formula formula formula formula formula formula quant var formula con open par formula close par name open par arguments 
close par unop binop impl equ quant forall exists var name arguments formula comma formula see description similar original presentation 
antlr reports problems follows 
precedence problems yacc appear antlr 
antlr handle left recursion ll parser generator include precedences handle recursion 
fortunately established methods just assume change antlr 
see case 
class extends parser formula formula formula formula equ formula 
formula formula impl formula 
formula formula formula 
formula formula formula 
formula formula quant var formula formula con open par formula close par name open par arguments 
close par 
antlr show way handles grammars meta model shown 
meta model refer back general grammar meta model antlr uses kind ebnf grammar representation 
back grammar fig 

meta model partial tools complained grammar respect dealing precedence probably repair problem original model 
means need way express precedences 
prec prec prec prec prec prec quant state associativity binary operations left 
course include precedences meta model added easily example 
inclusion precedences show meta model extension look 
related described related areas 
grouped related categories efforts clarifying relationships concepts existing context mda mde tool integration approaches 
fig 

extension meta model precedences study mda mde specific concepts basic notions related mda mde intensively studied various authors 
basic notions context model meta model model realization relationship notions 
notions course new invented omg 
database community traditionally notions meta data equivalent meta model 
mda mde important place concepts included wider framework software development 
defines basic concepts mda mde model meta model model transformation relationships terms set theory 
aim approach formalize allow better understanding mda mde concepts 
starts idea mda mde technology suffers terminology confusion due presence lot concepts precise definition classical misconception level abstraction level pyramid discussed section 
authors give precise definition concepts discuss appropriateness instanceof relationship meta models models 
study relationships various abstraction levels model meta model hierarchy particular respect instanceof kind relationship 
tool integration approaches shown section meta models offer practical way concrete problem tool integration 
problem classical recurring issue mda mde tools needed process model software development tools tightly related 
rest need practical means integration 
important techniques today tool integration point point integration usually done focusing specific tool 
order allow higher range applicability tool providers connect tools frameworks 
connections provided ad hoc basis existing tools 
combination theoretically sound just far combined tools concerned 
technology combinations language transformations 
example context integration sdl asm provided sdl formal semantics defines integration sdl asm 
kernel language integration tools take challenge provide general exchange format mapped different concrete notations 
example tool allows analyze general state transition systems 
tool intermediary format system specifications various modelling techniques sdl uml 
meta model integration idea approach integrate languages dealt analysis kind systems coming different origins 
prominent example combined meta model doubt uml language 
uml language consists sub languages cases state machines ocl integration fully described 
spite problems integration agreement achieved definition uml considered success account variety languages techniques viewpoints taken account 
concluding remarks mdx technology promotes models software development order away possible low level technical details focus software model 
approach gives weight models context software development asks able reason model level process information model level compose various models new view place role meta models 
perspective role meta models facilitate models 
addresses precisely open areas mdx integration different kinds models order able jointly 
new view meta models role basis new methodology integration tools ad hoc standards developed real standard 
note argue standard definition may unrealistic goal 
believe ad hoc standards small meta models designed particular purpose realistic target serve goal tool integration 
develop technique integrating different validation tools meta modelling approach 
technique consists meta modelling base theories various tools 
modular definition meta model structured core containing key concepts base theory allows incremental integration 
common core concepts tools related considered theory unified represent set concepts integration really needs agree 
necessary agree parts meta model tools 
parts meta model supported tool due features implemented simpler models simply ignored 
main interests technique lift abstraction level position integration efforts level models meta models 
allows concentrate basic concepts theory mutual relationships 
concepts model meta model new proves relationship needs studied 
believe pragmatic definition relationship helps tool integration 
things remain done 
point view important step working platform integration allows experiments real tools languages 
started eclipse platform emf framework 

alfred aho ravi sethi jeffrey ullman 
compilers principles techniques tools 
prentice hall international 

atkinson hne 
essence multilevel metamodeling 
gogolla editors uml volume pages 
lncs 

thomas baar reiner 
integrated metamodel ocl types 
france editor oopsla workshop refactoring uml search core minneapolis minnesota usa october 

jean 
search basic principle model driven engineering 
upgrade european journal informatics professional 

jean olivier 
precise definition omg mda framework 
proceedings th ieee international conference automated software engineering ase pages november 

jean zivin richard 
true reflective modeling scheme 
walter robert stroud francesco editors reflection software engineering st oopsla workshop reflection software engineering denver usa november volume lncs pages 
springer 

rger stark 
state machines method high level system design analysis 
springer verlag 

marius susanne graf joseph sifakis 
toolset 
sfm rt th int 
school formal methods design computer communication software systems real time number lncs pages 

petri 
kommunikation mit 
des iim nr 
bonn institut mathematik 
second edition new york air force base technical report radc tr vol suppl 
english translation 

jim scott dan john pat mccarthy 
java developer guide eclipse 
addison wesley 

charles donnelly richard stallman 
bison yacc compatible parser generator 
see dinosaur net bison index html 

jean marie favre 
basic theory model model driven engineering 
workshop software model engineering joint event uml oct 

jean marie favre 
foundations model driven reverse engineering models episode stories fidus papyrus solarus online 
jean heckel editors language engineering model driven software development number dagstuhl seminar proceedings 
internationales und forschungszentrum schloss dagstuhl germany 

jean marie favre tam nguyen 
megamodel model software evolution transformations 
entcs 

catherine griffin 
emf 
see www eclipse org articles article emf emf html 

john hopcroft rajeev motwani jeffrey ullman 
automata theory languages computation 
addison wesley 

itu 
itu recommendation specification description language sdl annex international telecommunication union 

itu 
itu recommendation specification description language sdl 
international telecommunication union august 

stephen johnson 
yacc compiler compiler 
see dinosaur net yacc index html 

omg 
model driven architecture guide 
omg document object management group 
available www omg org mda 

omg 
unified modeling language specification version 
omg document object management group 
available www omg org technology documents formal uml htm 

omg 
ocl specification 
object management group june 
ptc 

parr quong 
antlr predicated ll parser generator 
software practice experience number vol 

acm press new york 

rensink 
subjects models languages transformations 
jean heckel editors language engineering model driven software development number dagstuhl seminar proceedings 
internationales und forschungszentrum schloss dagstuhl germany 

mark richters martin gogolla 
metamodel ocl 
uml unified modeling language standard second international conference fort collins usa october proceedings volume lncs pages 
springer 

ed 
models mean 
ieee software 

andr 
metamodeling mathematics precise visual framework describing semantics domains uml models 
quel hu mann cook editors uml unified modeling language th international conference dresden germany september october proceedings volume lncs pages 
springer 

