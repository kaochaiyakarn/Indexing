empirical study security exposure hosts hostile virtualized environments virtual machines increasingly commonplace method separating hostile hazardous code commodity systems potential security exposure implementation flaws increased dramatically 
investigates state popular virtual machine implementations systems employing combination source code auditing blackbox random testing assess security exposure hosts hostile virtualized environments 
keywords virtualization security software testing secure isolation fundamental concepts virtualization confining program virtualized environment guarantee action performed inside virtual machine interfere system hosts consequently virtual machines seen rapid adoption situations separation hostile hazardous program critical 
consider virtualized environment hostile untrusted code executed untrusted data processed services inside virtual machine virtual machines malware analysis documented numerous proposals hosting hazardous applications honeypots intrusion detection systems 
seeks test safe assumptions isolation containment practice analysis popular virtual machine implementations architecture today 
new concept describes dos reduced privilege virtual machines trivially escaped tim shelton describes flaw vmware workstation nat service result compromising host machine little research published area 
virtual machine threats root secure monitors commodity operating systems compromised privileges essential virtual 
excepting allocated hosts resources 

compromise service attacker result untrusted code executed 
google com google machine monitor root secure meaning level privilege virtualized guest environment permits interference host system 
detection detecting virtualized environments explored detail researchers 
virtual machines employed malware analysis honeypots endeavour undetectable risk changing behaviour emulated code 
emulated malware sample choose act example executed physical machine immediately performs malicious action 
detection considered able detect virtual machine specifically virtual machine implementation may prerequisite serious attacks investigated 
able identify virtual machine implementation attacker difficulty determining escape environment 
security threats level threat posed hostile virtualized environment subvert normal operation virtual machine classified follows total compromise 
virtual machine monitor subverted execute arbitrary code host privileges vmm process 
partial compromise 
vmm leaks sensitive information host hostile process interferes vmm allocating resources administrator intended state checkpoints 
abnormal termination 
virtual machine monitor exits unexpectedly triggers infinite loop prevents host administrator interacting virtual machine example suspending rolling back particularly accessible unprivileged user guest 
overview sections describes testing procedure tools investigation 
section iv 
presents results testing section results analyzed 
related field known author described section vi section ii 
testing virtual machine emulators selected investigation open source software permitted man ual analysis code inspecting relevant sections programming errors 
remaining emulators proprietary software products distributed source code available automated blackbox testing procedure fuzz technique pioneered miller designed 
subsystems identified comparison metrics complex components virtual machine emulators reasoned complex code harbour subtle bugs exposed random blackbox testing methods employed 
subsystems identified instructions correctly parsing trapping privileged instructions handling illegal faulting opcodes correctly 
emulated devices handling invalid illegal nonsensical activity 
multiple tools selected written exercise code manner 
main tools employed investigation 
testing hardware operating system robustness malformed illegal nonsensical instructions documented tools part common operating system test suites linux test project wood katz proposed validating cache controllers random data early 
purposes investigation simple tool george selected 
subjects emulated environment stress test fault handling continually attempting execute random byte sequences failure encountered 
implementing accurate emulation hardware device software undoubtedly challenging task correctness implementation considered handling invalid operations 
simple tool developed modeled fuzz generate random port activity inside virtual machines errors encountered catalogued analysed 

provides insight error prone components operating systems 

linux test project ltp sourceforge net authors knowledge similar testing performed 
table virtual machine emulators tested name type open source pure software emulator 
virtual machine proprietary virtual machine popular macintosh platform 
qemu open source pure software virtual machine emulator 
virtual machine proprietary virtual machine popular microsoft windows platform 
vmware proprietary virtual machine 
xen open source emulator 
product name obscured vendor failed respond time publication 
vendor unable investigate issues time publication 
test platform iii 
procedure tests performed typical commodity system pentium iv ghz running linux operating system exception virtual machine supports microsoft windows hosts 
virtual machines tested latest versions available time writing default configuration state possible 
minimal configuration required options selected described relevant sections 
flaws identified result investigation reported respective developers 
case open source implementations patches provided 
vendors unable respond reports time publication names products obscured remainder 
failure criteria implementation considered failed automated tests performed emulated code virtualized environment crash cause emulator abnormally exit 
crash reproduced investigated impact determined classified full partial minor compromise defined 
causing emulator crash necessarily security flaw privileged user virtualized environment may legitimately request emulated machine halted 
implications malware analysis hostile sample perform harmless operation effect physical machine immediately halts emulator analyse 
additionally considered simple litmus test quality code amount testing performed 
implementation continually crashes aborts seen significant testing candidate research 
carefully analysing crashes encountered may determined weakest code exists research may prove fruitful 
testing procedure source code available source code audit performed identify flaws possible 
audit involves human researcher familiar programming errors manually reading source code identifying possible result security problems 
audit completed flaws identified reproduced live environment documented 
secondly virtual machine subjected stress testing utility described section fatal error encountered error reproduced analysed corrected feasible test continues run error period hours 
machine subjected hours failures reduced minimum series results collected tabulated 
iv 
results table virtual machine failure impact name full partial minor virtual machine xa qemu virtual machine vmware xen see test platform page 
flaws may impact implementations derived code 
due lack appropriate hardware findings tested 
table virtual machine failure impact page summarises flaws impact respective emulator 
emulator discussed depth section appropriate serious flaws described detail 
qemu qemu open source pure software emulator fabrice advanced features dynamic translation system offers better performance typically seen similar emulators 
qemu distributed full source code gpl license detailed source code audit possible revealed presence multiple exploitable implementation flaws 
qemu latest version available writing default configuration 

qemu fabrice free fr qemu ble iso image prepared software required testing 
proprietary virtual machine emulator win lin source code licensed qemu project copy software obtained testing affected issues described 
kvm appear include derive code qemu 
qemu xx heap overflow invalidate region routine video video copy operations vga extension code omits bounds checking multiple locations see table allowing overwrite adjacent buffers attempting mark non existent regions dirty 
overflowing data controllable overflow allows lsb nearby function pointers moved attacker controlled location 
qemu ne mtu heap overflow ethernet frames written directly ne device registers size checked mtu transferred see table resulting large values en register overwriting heap buffer library arbitrary attacker controller data devices memory banks 
flaw reachable alternative nic emulated qemu verified fix 
qemu ne receive integer error nonsensical values specific device registers result sanity checks bypassed integer overflowing attacker controlled data overflowing heap buffer see table 
qemu net socket heap overflow 
qemu perform adequate sanity checking data received net socket listen option resulting exploitable heap overflow 
guests local attackers send traffic port potentially compromise qemu process 
qemu miscellaneous infinite loop discovered emulated sb device 
dma code dereference uninitialized function pointer commands issued unregistered dma channel 
unprivileged aam instruction correctly handle undocumented divisor operand resulting qemu process performing integer divide zero 
see table 
win lin www win lin com 
kvm kvm com 
www org 
www org jargon html html 
maximum transmission unit 
ascii adjust multiply www org secrets opcodes aam htm unprivileged instruction halt virtual machine feature disabled 
see table 
vga bios safely ignored documentation accompanying cause qemu exit immediately 
prompts user continue encountering panic 
bios safely ignored cause qemu exit immediately 
multiple integer errors exist emulated ide controller allowing large counts bypass sanity checks 
summary attacker access qemu virtualized environment potentially compromise virtual machine process execute arbitrary code privileges emulator 
malware studied inside qemu unprivileged state terminate virtual machine safely reliably 
code examples flaws provided section vmware workstation server vmware family popular proprietary virtual machine emulators platform 
major products bearing vmware name vmware workstation vmware server 
vmware workstation server studied investigation 
source code freely available programs focus random testing followed analysis anomalies encountered 
latest version vmware workstation available time writing vmware server 
close default configuration possible 
vmware security vulnerabilities affecting security host vmware virtual machine published 
tim shelton reported heap overflow service specially crafted port ftp command result exploitable heap overflow allowing hostile virtualized code compromise execute code host machine 
communication channel exists guest host officially undocumented successfully reverse engineered documented researchers known vmware backdoor 
theoretically channel allow hostile guests steal clipboard data leak sensitive information host potentially dangerous operations 
care taken avoid hosting potentially hostile machines 
audit procedure vmware setup default options selected linux guest subjected long period stress testing tools 
setting auto mated testing procedure proved significant challenge testing revealed large number reachable assertions vmware emulated hardware triggered poking ports unexpected fashion 
assertions failed assertions encountered testing logged catalogued 
table demonstrates assertions relative various regions 
gives idea tested code exists demands careful inspection 
dozens unique assertions discovered 
biggest source appears emulation code 
see table map vmware assertions relative region page 
vulnerabilities serious flaw discovered power management code 
specially crafted poke port see table results bounds write attacker controlled location 
interacting power management subsystem specific ways write arbitrary location performed restarting suspended virtual machine 
see vmware crash dialog page 
vmware miscellaneous null dereference discovered emulated floppy disk controller triggered reading word port 
impact null dereference generally low done potentially exploiting errors 
summary attacker necessary privileges access guest ports potentially compromise virtual machine monitor executing arbitrary code privileges process 
assertions segmentation faults interest malware researchers direct security implications suggest subsystems received little testing give hints researchers concentrate efforts 
pure software virtual machine implementation written 
remarkably robust comparison implementations tested investigation highly configurable error handling multiple disparate frontends random testing proved simple set 
latest release available time writing 
default installation minimal sample compile time options popular distributions taken intersection options 
ice break point www org secrets opcodes htm 
sourceforge net see table compile time configuration page 
table compile time configuration enable usb enable pci enable enable sse enable dnow enable cpu level enable optimizations enable ne enable sb linux enable xx enable apic enable pni enable sep enable idle hack audit procedure released permissive license source code audit possible revealed major exploitable flaw emulated ne network interface card 
audit completed subjected stress test combination 
configurable error handling allowed instruction continue event panic allowed excellent fuzz testing performance relatively coverage 
ne rx frame heap overflow serious flaw emulated ne device allows large value register exceed available memory device see table allows attacker root privileges guest poke unexpected data device results complete compromise process 
trivially exploited due large number function pointers heap 
simple testcase table rx frame heap overflow testcase page 
miscellaneous integer divide zero exists emulated floppy disk controller resulting abnormal termination process 
summary attacker privileged access emulated environment virtual machine may able compromise process execute arbitrary code host 
reduce risk compromise minimum possible hardware enabled reducing attack surface exposed hostile guests 
virtual machine proprietary virtual machine emulator available windows mac linux 
emulator particularly popular macintosh users considered market leader macintosh platform 
linux version studied investigation issues confirmed macintosh version 
latest version available time writing investigation design decisions automated testing product posed considerable problem 
unsupported opcode operation encountered monitor immediately aborts attempting ignore operation 
unprivileged code inside guest immediately terminate machine 
non root user inside virtualized linux system disrupt entire system 
multiple esoteric malformed instructions identified require privileges 
possible catalogued remain 
instructions resulting vmm abort list exhaustive 
variations instructions operands size prefixes malformed esoteric instructions cause machine immediately abort 
instructions executed privileges guest environment 
int xaa interrupt xaa probably 
int xaa interrupt return invalid address easily exploited code sequence 
push multiple malformed non temporal instructions cause monitor abort example specifying register destination 
ebx ecx xc reading writing th th segment registers causes parallels abort immediately 
mov bx mov bx heap overflow exploitable heap overflow discovered emulated vga device 
attacker root access guest environment trigger operations overflow heap buffer 
see table parallels generated bug report overflow page 
summary virtual machine exhibited multiple flaws due design automated testing proved difficult 
flaws demonstrate unprivileged code inside virtualized environment terminate disrupt operation virtual machine potentially compromise vmm process 
dhcp daemon distributed product appear derived isc distribution vmware research application may interesting 

non temporal dword move issue affects operations temporal hint 
xen xen free hypervisor unique design takes advantage privilege rings architecture 
xen unique design excellent scaling performance characteristics won industry wide acceptance 
xen design congruent security 
hardware assisted mode intel vt virtual extensions amd amd extension xen relies qemu derived emulator provide emulated devices run domain ring privileges 
suitable hardware available author experiment configuration research suggests compromising qemu emulator flaws described section result complete compromise system 
virtual machine product proprietary virtual machine microsoft windows 
latest version available writing date windows system host 
observations source code available product subjected random testing 
multiple flaws resulted abnormal termination vmm process located primarily emulated vga device including null dereferences bounds writes 
flaws encountered directing ide controller emulated network interface card 
flaws investigated 
summary microsoft windows familiar author unix systems product subjected cursory tools 
multiple flaws encountered potentially exploitable examination 
results security audits multiple popular virtual machine implementations today 
simple tool exposes exploitable security flaws virtual machines available today 
knowledge author similar research conducted 
results produced tool known decade locating trivial flaws demonstrates 
virtual machine tested robust withstand testing procedure multiple exploitable flaws allow attacker restricted environment reliably escape host system 
results obtained demonstrate need research security prove security panacea 
recommendations simple recommendations safely deploying virtualization production environments treat virtual machines services compromised systrace acls privileged users disable emulated hardware don need external services don dhcp daemons reduce attack surface exposed hostile users 
xen worth watching separating domains limit impact compromise 
maintain integrity guest operating systems protect kernel standard procedures disabling modules dev mem dev port take advantage features available bsd systems 
keep guest software date published vulnerabilities 
attacker elevate privileges guest likelihood compromising vmm significantly reduced 
keep virtual machine software updated ensure known vulnerabilities corrected 
avoid guests operate protected mode security features offered avoid running untrusted code root equivalent privileges guest 
vi 
related previous related security focussed main areas implementation detection usage 
peter provides depth coverage current detection techniques excellent notable advances detection techniques 
secure implementation virtual machine technology covered 
multiple researchers suggested uses virtual machines assumption guaranteed isolation including 
process random testing applications determine reliability robustness miller extended numerous researchers security analysis 
vii 
differential testing technique described detail automate discovery new detection techniques identify virtual machine 
executing random combinations instructions physical virtual hardware comparing results large catalogue detection techniques generated need human intervention 
statistics obtained distribution reachable assertions errors efforts subsystems demonstrate flaws 
external services provided vmware require investigation 
access suitable hardware testing xen fully modes prove interesting research 
devise strategy better implement automated testing parallels 
viii 
author google sponsoring research 
additional chris evans dean mcnamee rob holland valuable assistance advice expertise 
ix 
miller empirical study reliability unix utilities communications acm december barham fraser hand harris ho neugebauer pratt warfield 
xen art virtualization 
sigops oper 
syst 
rev dec 
chen noble 
virtual better real 
proceedings eighth workshop hot topics operating systems may 
hotos 
ieee computer society washington dc 
differential testing software digital technical journal digital equipment december 
miller moore 
empirical study robustness macos applications random testing 
proceedings st international workshop random testing portland maine july 
rt 
acm press new york ny 
karger 
multi level security requirements 
proceedings st annual computer security applications conference december 
acsac 
ieee computer society washington dc 
ben yehuda mason krieger utilizing virtualization linux xen june 
van effect virtualization os interference proceedings workshop operating system interface high performance applications st louis mo 
adams agesen 
comparison software hardware techniques virtualization 
sigarch comput 

news oct 
lie 
vmm sensors monitor honeypots 
proceedings nd international conference virtual execution environments ottawa ontario canada june 
vee 
acm press new york ny 
crandall de oliveira su wu chong 
temporal search detecting hidden malware virtual machines 
sigarch comput 

news oct 
van doorn 
hardware virtualization trends 
proceedings nd international conference virtual execution environments ottawa ontario canada june 
vee 
acm press new york ny 
chou yang chelf hallem engler 
empirical study operating systems errors 
proceedings eighteenth acm symposium operating systems principles banff alberta canada october 
sosp 
acm press new york ny 
schaefer gold linde 
program confinement kvm 
proceedings annual conference acm 
acm press new york ny 
popek goldberg 
formal requirements third generation architectures 
commun 
acm jul 
david wood garth gibson randy katz verifying multiprocessor cache controller random test generation ieee design test computers vol 
pp 
jul aug 
john scott robin cynthia irvine analysis intel pentium ability support secure virtual machine monitor www cs nps navy mil people faculty irvine publications vmm usenix pdf garfinkel pfaff chow rosenblum boneh 
terra virtual machine platform trusted computing 
proceedings nineteenth acm symposium operating systems principles bolton landing ny usa october 
sosp 
acm press new york ny 
separation model virtual machine monitors research security privacy 
proceedings ieee computer society symposium vol pp may kwan durfee 
vault practical uses virtual machines protection sensitive user data 
parc technical report 
chen noble 
virtual better real 
proceedings eighth workshop hot topics operating systems may 
hotos 
ieee computer society washington dc 
peter attacks virtual machine emulators symantec security response 
december garfinkel rosenblum 
virtual machine introspection architecture intrusion detection 
internet society 
citeseer ist psu edu garfinkel virtual html shelton vmware heap overflow lists grok org uk full disclosure december html ee sean smith david practical server privacy secure coprocessors 
ibm systems journal people com html collins intel pentium bug description workarounds doctor dobb journal december 
win lin 
february 
wikipedia free encyclopedia 
retrieved february en wikipedia org index php title win lin kato vmware backdoor infoseek jp vmware backdoor html large memory management vulnerabilities com core memory pdf joanna rutkowska red org papers html danny val smith detecting presence virtual machines local data table www net files active vm pdf figures table invalidate region qemu hw vga 
lines cur cur cur cur target page mask cur cur cpu physical memory set dirty offset cur cur target page size pitch 
notice page mask applied cur cur 
similar error occurs subroutines 
table input qemu void input const uint pkt int pkt len 
case eth ip get return note add align ip header len pkt len memcpy data pkt pkt len 
bounds checking performed len size buffer pointed data 
table ne receive qemu hw ne 
write packet data size avail index len size len avail len avail memcpy mem index buf len 
values controlled guest overflow 
len negative number interpreted memcpy large positive integer 
table qemu aam integer divide zero demonstration section data msg db see message qemu xa section text global start start mov eax mov ebx mov ecx int aam mov eax mov ebx mov ecx msg mov edx int exit xor eax eax xor ebx ebx eax int table qemu demonstration section data msg db message seen inside qemu xa section text global start start mov eax int test eax eax parent xor eax eax xor ebx ebx eax int parent mov ebx eax mov ecx mov edx mov eax int mov eax mov ebx mov ecx msg mov edx int xor eax eax xor ebx ebx eax int table map vmware assertions relative region 
table vmware acpi pm write section text global start start mov eax mov ebx int mov ax mov dx dx ax xor ebx ebx xor eax eax eax int table vmware crash dialog table bx ne rx frame ne cc void bx ne rx frame const void buf unsigned io len 
copy buffer update signal interrupt config bx ne mem bx ne curr page bx ne bx ne curr page bx ne curr page pages bx ne page memcpy memcpy buf io len bx ne curr page 
size buffer hardcoded bytes values placed 
io len obtained device register 
table rx frame heap overflow testcase include sys io int main int argc char argv ffb outb outb return inserted 
table virtual machine invalid testcase section data msg db see message parallels xa section text global start start mov eax mov ebx mov ecx sigsegv int push sigsegv mov eax mov ebx mov ecx msg mov edx int xor eax eax xor ebx ebx eax int table virtual machine interrupt xaa testcase section data msg db see message parallels xa section text global start start mov eax mov ebx mov ecx signal int mov eax mov ebx mov ecx signal int int xaa signal mov eax mov ebx mov ecx msg mov edx int xor eax eax xor ebx ebx eax int table virtual machine segment registers testcase section data msg db see message parallels xa section text global start start mov eax mov ebx mov ecx int mov ebx mov ebx mov eax mov ebx mov ecx msg mov edx int xor eax eax xor ebx ebx eax int table virtual machine generated bug report overflow virtual machine linux version build xxxx received sigsegv segmentation fault lib tls libc memcpy usr qt lib znk dfd usr qt lib zn ad usr lib xxx xxx linux usr lib xxx xxx linux ff 
