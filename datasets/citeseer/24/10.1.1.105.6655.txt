automated security proofs sequences games bruno blanchet david pointcheval cnrs cole normale sup rieure paris blanchet di ens fr 
presents automatic technique proving protocols primitives exact security computational model 
automatic proofs cryptographic protocols reserved dolev yao model quite strong assumptions primitives 
hand proofs reductions complexity theoretic framework subtle security assumptions considered security analyses manual 
process calculus defined order take account probabilistic semantics computational model 
rich describe usual security notions symmetric asymmetric cryptography basic computational assumptions 
example illustrate new tool proof quite famous asymmetric primitive unforgeability chosen message attacks uf cma full domain hash signature scheme trapdoor wayness permutations 
exist main frameworks analyzing security cryptographic protocols 
famous cryptographic community provable security reductionist sense adversaries probabilistic polynomial time turing machines try win game specific cryptographic primitive protocol security notion satisfied 
computational security achieved contradiction adversary win attack game non negligible probability defined computational assumption invalid wayness intractability integer factoring consequence actual security relies sole validity computational assumption 
hand people formal methods defined formal models called dolev yao framework order able prove security cryptographic protocols 
formal security proofs cryptographic primitives ideal 
main advantage formalism automatic verifiability provability security strong unfortunately unrealistic assumptions 
goal take best framework drawbacks achieve automatic provability classical realistic computational assumptions 
bruno blanchet david pointcheval computational model 
seminal diffie hellman complexity theory tightly related cryptography 
cryptographers tried hard problems build secure cryptosystems 
adversaries modeled probabilistic polynomial time turing machines security notions defined security games adversary interact oracles possibly embed private information achieve clear goal win signature schemes adversary tries forge new valid message signature pair able ask signature message choice 
attack called existential forgery chosen message attacks 
similarly encryption adversary chooses messages encrypted 
goal adversary guess encrypted probability significantly better half 
oracles may available adversary kind attack chosen plaintext attacks 
see security notions computation time probabilities major importance unlimited adversary break probability shorter period time adversary guess secret values chance win attack game possibly negligible non zero probability 
security proofs framework consist showing adversary win significant probability reasonable time defined problem broken significant probability reasonable time 
intractable problem reduction quantify security cryptographic protocol 
symmetric asymmetric scenarios security notions unconditionally guaranteed computational power adversary 
security generally relies computational assumption instance existence way functions permutations possibly trapdoor 
way function function easily compute computationally intractable recover pre image 
way permutation bijective way function 
encryption inversion possible recipient trapdoor way permutation way permutation secret information trapdoor helps invert function point 
objects computational assumptions intractability inversion security achieved additional assumptions 
way formally prove fact showing attacker cryptographic protocol sub part algorithm reduction break basic computational assumption 
observational equivalence sequence games 
initially reductionist proofs consisted presenting reduction proving view adversary provided reduction indistinguishable view adversary real attack 
indistinguishability quite technical error prone 
victor shoup suggested prove small changes sequence games game hopping technique ad automated security proofs sequences games plays starting real attack game 
consecutive games look identical close view adversary involve statistical distance computational 
final game adversary clearly chance win 
modifications games seen rewriting rules probability distributions variables involved games 
may consist simple renaming variables perfectly identical distributions 
may introduce differences distributions statistically indistinguishable 
rewriting rule may true computational assumption appears computational indistinguishability 
formal methods games replaced processes perfect primitives modeled function symbols algebra terms 
observational equivalence notion similar indistinguishability expresses processes perfectly indistinguishable adversary 
proof technique typically observational equivalence quite different computational proofs 
formal models exploit absence algebraic relations function symbols order prove equivalence contrast computational setting observational equivalence hypotheses indistinguishability hypotheses specify security properties primitives combined order obtain proof protocol 
related 
seminal abadi rogaway results show soundness dolev yao model respect computational model possible dolev yao provers order prove protocols computational model 
results limitations particular terms allowed cryptographic primitives satisfy strong security properties correspond dolev yao style primitives require restrictions protocols absence key cycles 
frameworks exist formalizing proofs protocols computational model 
backes pfitzmann waidner designed cryptographic library shown soundness respect computational primitives arbitrary active attacks 
backes pfitzmann relate computational formal notions secrecy framework library 
framework computationally sound proof needham schroeder lowe protocol 
canetti introduced notion universal composability 
herzog show dolev yao style symbolic analysis prove security properties protocols framework universal composability restricted class protocols public key encryption cryptographic primitive 
automatic dolev yao verification tool verifying protocols framework 
lincoln mitchell mitchell ramanathan scedrov developed probabilistic polynomial time calculus analysis cryptographic protocols 
datta designed computationally sound logic enables prove computational bruno blanchet david pointcheval security properties logical deduction system 
frameworks prove security properties protocols computational sense relies dolev yao prover automated far know 
laud designed automatic analysis proving secrecy protocols shared key encryption passive adversaries 
extended active adversaries session protocol 
closest 
extend considerably handling primitives variable number sessions evaluating probability attack 
designed type system proving security protocols computational model 
type system handles shared public key encryption unbounded number sessions 
system relies backes pfitzmann waidner library 
type inference algorithm sketched 
barthe formalized generic model random oracle model interactive theorem prover coq proved signature schemes framework 
contrast specialized prover proofs generic interactive theorem provers require lot human effort order build detailed proof theorem prover check 
halevi explains implementing automatic prover sequences games useful suggests ideas direction implement 
prover describe previously restricted way :10.1.1.135.8642
applied classical dolev yao style protocols literature needham schroeder public key protocol 
show proof security cryptographic primitives 
considered asymptotic proofs :10.1.1.135.8642
extended prover providing exact security proofs 
extend proof authentication properties considered secrecy properties :10.1.1.135.8642
show model random oracle 
achievements 
goal fill gap usual techniques computational formal methods direct approach order get best computationally sound technique automatic prover apply :10.1.1.135.8642
precisely adapt notion observational equivalence corresponds indistinguishability games 
aim adapt notion processes processes run time bit strings 
furthermore process calculus probabilistic semantics measure defined distinguishability notion observational equivalence extends perfect indistinguishability distance views adversary 
distance due application transformation purely syntactic 
transformations rewriting rules yield game equivalent equivalent computational assumption 
example define rewriting rule true wayness specific function 
automatic prover tries apply rewriting rules winning event executed original attack game adversary breaks cryptographic protocol automated security proofs sequences games totally disappeared adversary eventually success probability 
upper bound success probability adversary initial game sum gaps 
prover provides manual mode user specify main rewriting steps prover perform 
allows system prove protocols situations automatic proof strategy find proof direct prover specific proof instance proof yields better reduction exact security dealt 
calculus games description calculus section review process calculus defined order model games done computational security proofs :10.1.1.135.8642
calculus carefully designed automatic proof cryptographic protocols easier 
note main addition previous models arrays allow formalize random oracle model authenticity unforgeability cryptographic primitives signatures message authentication codes encryption schemes 
arrays allow full access memory state system replace lists cryptographic proofs 
example case random oracle generally stores input output random oracle list 
calculus stored arrays 
contrarily adopt exact security framework asymptotic :10.1.1.135.8642
cost reductions probability loss precisely determined 
adapt syntax calculus order closer usual syntax cryptographic games 
calculus denote types subsets bitstring bitstring bitstring set bit strings special symbol 
type said fixed length set bit strings certain length 
type said large cardinal large consider collisions elements chosen randomly uniform probability quite keeping track small probability 
information useful strategy prover 
boolean type predefined bool true false true false 
calculus assumes finite set function symbols function symbol comes type declaration 
tm function symbol corresponds function denoted 
tm 
xm computable time tf bounded function length inputs 
xm 
predefined functions infix notation equality test values type returning value type bool boolean returning values type bool 
illustrate example represent games process calculus 
shall see sections example comes bruno blanchet david pointcheval definition security full domain hash signature scheme 
example uses function symbols hash pkgen skgen sk inverse function pk explained detail 
define oracle chooses random seed generates key pair pk sk seed returns public key pk seed pk pkgen sk skgen return pk seed chosen randomly uniform probability type seed construct seed 
type seed fixed length type probabilistic bounded time turing machines choose random numbers uniformly types 
set bit strings seed associated fixed value security parameter 
define signature oracle os takes argument bit string returns signature computed sk hash sk secret key oracle defined os bitstring return sk hash bitstring means type bitstring bitstring 
oracle called times say qs times 
express repetition foreach qs os meaning available qs copies os different value index qs 
furthermore calculus variables defined repeated oracles arrays cell call oracle remember values calls oracles 
array indexed similar lines copies oracle os indexed caller specify exactly copy os wants call calling os specific value obtain formalization oracle foreach qs os bitstring return sk hash note sk array index defined oracle executed 
define test oracle ot takes arguments bit string candidate signature type executes event forge forged signature correct signature signature oracle called test oracle defined follows ot bitstring pk hash find qs suchthat defined event forge tests pk hash verification algorithm 
equality holds executes branch executes branch omitted 
case ends oracle executed 
test pk hash succeeds process automated security proofs sequences games performs array lookup looks index qs defined 
received signing oracle simply oracle 
execute event forge implicitly oracle 
arrays array lookups crucial calculus help model properties hard capture 
add hash oracle similar signing oracle os returns hash message signature foreach ih qh oh ih ih bitstring return hash ih notation array indexes omitted input give prover 
precisely defined foreach 
foreach im nm array indexes 
im abbreviate occurrences 
im array indexes os oh omitted 
signature test oracles sense generation oracle called keys pk sk computed 
define os ot sequential composition 
contrast os ot simultaneously available parallel composition qs qt qs qt processes respectively 
similarly oh composed parallel rest process 
obtain game models security signature scheme random oracle model foreach ih qh oh bitstring return hash seed pk pkgen sk skgen return pk foreach qs os bitstring return sk hash ot bitstring pk hash find qs suchthat defined event forge calculus obviously construct calling oracles 
need explicitly oracles called adversary processes write 
detailed require formedness invariants guarantee definitions oracle simultaneously available bit strings expected type arrays properly cell array assigned execution variables accessed initialized :10.1.1.135.8642
formal semantics calculus 
observational equivalence denote pr probability answer oracle call oracle called start experiment 
bruno blanchet david pointcheval denote pr probability process executes exactly sequence events order oracle called 
definition context represent algorithm tries distinguish context put process 
construct means put parallel process contained possibly hiding oracles defined considering call oracles 
detailed section 
definition observational equivalence 
processes satisfy formedness invariants 
context said acceptable contain events common variables satisfies wellformedness invariants 
say observationally equivalent probability written contexts acceptable run time bit strings pr pr pr pr 
definition formalizes probability algorithm running time distinguishes games 
context allowed access directly variables find 
say context runs time processes time spent trace ignoring time spent 
runtime context bounded 
bound length messages calls returns oracle value arg 
longer messages truncated 
length random numbers created bounded number instructions executed bounded time function evaluation bounded function length arguments 
definition 
say executes event probability contexts acceptable run time pr 
definitions allow perform proofs sequences indistinguishable games 
lemma straightforward lemma 
reflexive symmetric 


executes event probability executes event probability 
context acceptable runs time tc tc 

executes event probability context acceptable runs time tc executes event probability tc 
properties key computing probabilities coming sequence games 
prover start game corresponding automated security proofs sequences games initial attack build sequence observationally equivalent games 
pm gm 
property conclude pm gm 
property bound probability executes event probability gm executes event 
elementary transformations build game previous particular come algorithmic assumption cryptographic primitive 
assumption needs specified observational equivalence transform game prover finds context purely syntactic transformations builds game purely syntactic transformations 
simulator usually defined reductions 
property context typically hides oracles visible adversary context defines adversary algorithmic assumption security assumptions initially form equivalence needs manually prove equivalence formalizes desired security assumption 
design equivalences delicate time effort equivalence reused proofs rely assumption 
instance give equivalence wayness proof signature scheme proofs encryption schemes mentioned section 
similarly definition security signature uf cma says event executed negligible probability 
want prove security protocol signature scheme manual proof equivalence corresponds definition done uf cma long version 
prover automatically establishes certain equivalences gm mentioned 
user give left hand side equivalence right hand side gm obtained prover 
consequence prover general appropriate proving automatically properties priori right hand side prover correspond exactly desired right hand side 
hand prover check security properties right hand side gm finds example event forge executed gm 
gm concludes executes forge probability characterization wayness unforgeability section introduce assumption wayness security notion unforgeability achieve 
trapdoor way permutations cryptographic protocols rely existence trapdoor way permutations 
families permutations easy compute hard invert trapdoor 
bruno blanchet david pointcheval computational model 
family permutations set defined algorithms key generation algorithm kgen split sub algorithms pkgen skgen 
input seed algorithm kgen produces pair pk sk matching public secret keys 
public key pk specifies actual permutation fpk domain evaluation algorithm public key pk value outputs fpk 
inversion algorithm 
element trapdoor sk outputs unique pre image respect fpk properties simply require algorithms efficient 
property intricate claims non existence efficient algorithm wants success probability adversary reasonable time small success commonly defined succ ow pr seed pk sk kgen pk pk eventually denote succ ow maximal success probability adversary get time syntactic rules 
seed large fixed length type pkey skey types public keys secret keys domain permutations respectively 
family trapdoor way permutations defined set function symbols skgen seed skey generates secret keys pkgen seed pkey generates public keys pkey skey pk pk permutation inverse permutation sk pk pkgen sk skgen 
wayness property formalized calculus requiring lr executes event invert probability succ ow presence context runs time lr seed return pkgen pkgen oeq event invert event invert executed adversary public key pkgen image manages find having trapdoor 
order wayness property proofs protocols prover needs general formulation wayness observationally equivalent processes 
define processes equivalent lr executes event invert 
prove long version equivalence ow nk nf succ ow tf nk tf time evaluation time evaluation pkgen 
equivalence function symbols pkgen seed pkey automated security proofs sequences games foreach ik nk seed return pkgen foreach nf oy return pkgen foreach oeq return ox return ow foreach ik nk seed return pkgen foreach nf oy return pkgen foreach oeq defined return return false ox mark return fig 

definition wayness pkey functions associated primed symbols pkgen equal functions associated corresponding unprimed symbol pkgen respectively 
replace pkgen pkgen right hand side just prevent repeated applications transformation keys lead infinite loop 
equivalence consider nk keys pkgen ik single nf antecedents key ik 
oracle ik publishes public key pkgen ik 
second group oracles picks new ik available oracles oy ik returns image ik oeq ik returns true receives ik argument ox ik returns ik 
wayness property guarantees ox ik called adversary little chance finding ik oeq ik returns false 
replace left hand side equivalence right hand side ox ik records called defining ik oeq ik returns false ik defined ox ik called 
left hand side equivalences specify primitives oracles consist single return instruction 
restriction allows model equivalences define cryptographic primitives simplifies considerably transformation processes compared general syntax processes 
order equivalence need recognize processes easily transformed context transform 
easy oracles just need recognize terms occur result oracles 
difficult general processes 
pkgen skgen inverse permutations seed skgen pkgen bruno blanchet david pointcheval pk injective pk pk pk pkey pk pk pk permutation uniformly distributed random number replace pk changing probability distribution 
order enable automatic proof give restricted formulation result foreach ik nk seed return pkgen foreach nf return skgen return foreach ik nk seed return pkgen foreach nf return return pkgen allows perform previous replacement calls skgen random number occurs pkgen skgen random numbers signatures computational model 
signature scheme kgen sign verify defined key generation algorithm kgen split sub algorithms pkgen skgen 
input random seed algorithm kgen produces pair pk sk matching keys 
signing algorithm sign 
message secret key sk sign produces signature 
sake clarity restrict deterministic case 
verification algorithm verify 
signature message public key pk verify tests valid signature respect pk 
consider existential unforgeability adaptive chosen message attack uf cma attacker ask signer sign message choice adaptive way provide signature new message 
answer natural restriction returned message asked signing oracle 
designs signature scheme wants computationally rule existential forgeries adaptive chosen message attacks 
formally automated security proofs sequences games wants success probability adversary reasonable time small succ uf cma pr seed pk sk kgen sign sk pk verify pk denote succ uf cma ns maximal success probability adversary get time ns queries signing oracle maximum length messages queries 
syntactic rules 
seed large fixed length type 
pkey skey signature types public keys secret keys signatures respectively 
signature scheme defined set function symbols skgen seed skey generates secret keys pkgen seed pkey generates public keys sign bitstring skey signature generates signatures verify bitstring pkey signature bool verifies signatures 
signature verification succeeds signatures generated sign bitstring seed verify pkgen sign skgen true previous definition uf cma process lr executes event forge probability succ uf cma ns presence context runs time lr seed pk pkgen sk skgen return pk foreach ns os bitstring return sign sk ot bitstring signature verify pk find ns suchthat defined event forge maximum length clear event forge raised signature accepted verification algorithm signing algorithm called signed message 
examples signature full domain hash signature scheme defined follows pkgen skgen define family trapdoor way permutations 
hash hash function random oracle model 
signature scheme uses functions pkgen skgen key generation functions signing algorithm sign sk sk hash verification algorithm verify pk pk hash 
section explain automatic prover finds known bound succ uf cma signature scheme 
bruno blanchet david pointcheval input prover contains parts 
contains definition security primitives build scheme definition way trapdoor permutations detailed section formalization hash function random oracle model foreach ih nh oh bitstring return hash foreach ih nh oh bitstring find nh suchthat defined return return equivalence expresses replace call hash function random oracle oracle returns fresh random number called new argument previously returned result called argument previous call 
random oracle implemented calculus lookup array arguments hash 
defined hash called call number return result call 
create fresh random number 
indication line instructs prover replace occurrences hash game 
second input file contains initial game process section 
detailed section game corresponds definition security signature scheme 
important need add standard definition security signature scheme hash oracle 
necessary transformation hash random oracle adversary call hash oracle 
adversary access arrays encode values random oracle 
goal bound probability event forge executed game presence context runs time succ uf cma qs th succ uf cma qs th total time spent hash oracle maximum length input prover automatically produces proof game executes event forge probability qh qs succ ow qh qs tf qs qh qs qh maximum length bit string time comparison bit strings length 
evaluating find implies evaluating condition find value indexes lookup array size bit strings length considered time fact efficient algorithms particular case array lookup 
ignore time bit string comparisons obtain usual upper bound qh qs succ ow qh qs tf 
prover outputs sequence games leads proof succinct explanation transformation performed consecutive games sequence 
input output prover prover available www di ens fr blanchet runtime prover automated security proofs sequences games example ms pentium ghz 
prover implemented ocaml contains lines code 
sketch main proof steps 
starting initial game section prover tries apply observational equivalences hypotheses 
succeeds applying security hash function transforms game accordingly replacing left hand side right hand side equivalence 
call hash replaced lookup arguments calls hash 
argument hash arrays returned result result previously returned hash 
pick fresh random number return 
obtained game simplified 
particular argument ot arguments call hash os find ot succeeds branch removed passed signature oracle forgery 
prover tries apply observational equivalence 
transformations fail applying game contains sk expects skgen suggests remove assignments variable sk succeed 
prover performs removal substitutes skgen sk removes assignment sk skgen 
transformation retried 
succeeds leads replacing rj pkgen rj skgen rj rj rj represents random numbers result random oracle 
term pkgen rj computed oracle oy rj computed ox 
generally prover transformation fails may return transformations apply order enable section 
case prover applies suggested transformations retries transformation obtained game simplified 
particular injectivity prover replaces terms form pk pkgen rj rj knowing pk pkgen 
test rj computed oracle oeq 
prover tries apply observational equivalence 
succeeds definition wayness 
transformation leads replacing pkgen rj pkgen rj rj kj mark rj rj find uj suchthat defined kj uj true rj false 
dif ference probability ow nk nf succ ow tf nk qh qs succ ow qh qs tf nk number key pairs considered nf qh qs number antecedents qs qh qs qh runtime context put equivalence 
obtained game simplified 
equational reasoning prover manages show find ot succeeds branch removed 
prover detects forge event executed resulting game desired property proved probability forge executed initial game sum differences probability games sequence comes application wayness 
bruno blanchet david pointcheval encryption schemes proving security protocols prover proving cryptographic schemes 
example prover show basic bellare rogaway construction redundancy hash xor ind cpa manual proof crypto hash apply security hash remove assign binder pk remove assignments pk crypto apply security random seed crypto xor apply security xor times possible success check desired property proved manual indications necessary applied removing assignments pk different results pk computed applying results oracles ox assignments pk removed oracle oy assignments pk removed 
similar manual indications show enhanced variant redundancy hash xor hash hash xor ind cca 
improved treatment equational theory xor believe show hash xor hash ind cca 
new tool automatically prove security cryptographic primitives cryptographic protocols 
usual assumptions expected security notions stated 
specifications quite similar usual definitions bad event shown 
may intricate specified observational equivalence 
anyway done proofs specifications wayness uf cma signatures uf cma message authentication codes ind cpa symmetric stream ciphers ind cpa ind cca public key encryption hash functions random oracle model xor detailed proofs 
protocol scheme specified syntax quite close notations classically cryptography 
eventually prover provides sequence transformations games lead final experiment indistinguishable initial bad event appears 
paths may sequence user allowed interact prover order follow specific sequence 
course prover accept sequence valid 
contrary formal proof techniques failure prover lead attack 
just means prover find appropriate sequence games 
acknowledgments jacques stern initiating collaboration topic anonymous reviewers helpful comments 
partly supported ara 
automated security proofs sequences games 
abadi rogaway 
reconciling views cryptography computational soundness formal encryption 
journal cryptology 

backes laud 
mechanized cryptographically sound type inference checker 
workshop formal computational cryptography fcc july 
appear 

backes pfitzmann 
symmetric encryption simulatable dolev yao style cryptographic library 
csfw 
ieee june 

backes pfitzmann 
relating symbolic cryptographic secrecy 
th ieee symposium security privacy pages 
ieee may 

backes pfitzmann waidner 
composable cryptographic library nested operations 
ccs pages 
acm oct 

backes pfitzmann waidner 
symmetric authentication simulatable cryptographic library 
esorics lncs pages 
springer oct 

barthe 
machine checked formalization generic model random oracle model 
lncs pages 
springer july 

bellare 
practice oriented provable security 
lncs 
springer 

bellare rogaway 
random oracles practical paradigm designing efficient protocols 
ccs pages 
acm press 

bellare rogaway 
exact security digital signatures sign rsa rabin 
eurocrypt lncs pages 
springer 

bellare rogaway 
game playing technique application triple encryption 
cryptology eprint archive 

blanchet 
automatic proof strong secrecy security protocols 
ieee symposium security privacy pages may 

blanchet 
computationally sound mechanized prover security protocols 
cryptology eprint archive report nov 
available eprint iacr org 

blanchet 
computationally sound mechanized prover security protocols 
ieee symposium security privacy pages may 

blanchet pointcheval 
automated security proofs sequences games 
cryptology eprint archive report feb 
available eprint iacr org 

canetti 
universally composable security new paradigm cryptographic protocols 
focs pages 
ieee oct 
updated version available cryptology eprint archive eprint iacr org 

canetti herzog 
universally composable symbolic analysis cryptographic protocols case encryption mutual authentication key exchange 
cryptology eprint archive report 
available eprint iacr org 

cortier warinschi 
computationally sound automated proofs security protocols 
esop lncs pages 
springer apr 

datta derek mitchell shmatikov 
probabilistic polynomial time semantics protocol security logic 
icalp lncs pages 
springer july 
bruno blanchet david pointcheval 
diffie hellman 
new directions cryptography 
ieee transactions information theory november 

dolev yao 
security public key protocols 
ieee transactions information theory 

goldwasser micali 
probabilistic encryption 
journal computer system sciences 

goldwasser micali rivest 
digital signature scheme secure adaptative chosen message attacks 
siam journal computing april 

halevi 
plausible approach computer aided cryptographic proofs 
cryptology eprint archive report june 
available eprint 
iacr org 

lakhnech 
completing picture soundness formal encryption presence active adversaries 
esop lncs pages 
springer apr 

laud 
handling encryption analysis secure information flow 
esop lncs pages 
springer apr 

laud 
symmetric encryption automatic analyses confidentiality active adversaries 
ieee symposium security privacy pages may 

laud 
secrecy types simulatable cryptographic library 
ccs pages 
acm nov 

lincoln mitchell mitchell scedrov 
probabilistic polytime framework protocol analysis 
ccs pages nov 

lincoln mitchell mitchell scedrov 
probabilistic polynomial time equivalence security protocols 
fm lncs pages 
springer sept 

mitchell scedrov 
composition cryptographic protocols probabilistic polynomial time process calculus 
concur lncs pages 
springer sept 

micciancio warinschi 
soundness formal encryption presence active adversaries 
tcc lncs pages 
springer feb 

mitchell ramanathan scedrov 
probabilistic polynomial time calculus analysis cryptographic protocols 
theoretical computer science mar 

naor yung 
universal way hash functions cryptographic applications 
stoc pages 
acm press 

rackoff simon 
non interactive zero knowledge proof knowledge chosen ciphertext attack 
crypto lncs pages 
springer 

ramanathan mitchell scedrov 
probabilistic bisimulation equivalence security analysis network protocols 
fossacs lncs pages 
springer mar 

shoup 
sequences games tool taming complexity security proofs 
cryptology eprint archive 

backes basin pfitzmann waidner 
cryptographically sound theorem proving 
csfw 
ieee july 
appear 


machine checked security proofs cryptographic signature schemes 
esorics lncs pages 
springer sept 
