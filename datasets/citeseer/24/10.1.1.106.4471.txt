satisfiability ryan williams computer science dept carnegie mellon university pittsburgh pa cs emu edu significant progress reasoning constraint processing methods 
areas planning finite model checking current solution techniques handle combinatorial problems variables constraints 
scaling behavior methods appears defy expect worst case complexity analysis 
order bridge gap theory practice propose new framework studying complexity techniques practical problem instances 
particular approach incorporates general structural properties observed practical problem instances formal complexity analysis 
introduce notion backdoors small sets variables capture combinatorics problem instance 
provide empirical results showing existence backdoors real world problems 
series complexity results explain scaling behavior current reasoning constraint methods observed practical problem instances 
backdoors typical case complexity carla gomes dept computer science cornell university ithaca ny gomes cs cornell edu interesting ai formalisms reasoning planning learning shown worst case intractable 
eighties early nineties negative complexity results led extensive search tractable subclasses general formalisms 
unfortunately tractable subclasses restrictive real world applications 
mid nineties saw emergence practical approach computationally hard problems ai fast satisfiability solvers fast constraint reasoning methods 
example planning saw success constraint planners graphplan satplan heuristic search supported part nsf graduate fellowship nsf aladdin center :10.1.1.43.7263
research supported afosr darpa nsf 
bart selman dept computer science cornell university ithaca ny selman cs cornell edu planners :10.1.1.3.2139
somewhat surprisingly practical problem instances methods scale expect formal complexity analysis 
fact current state art sat solvers handle problem instances arise finite model checking planning variables clauses 
success methods appears hinge combination factors practical combinatorial problem instances generally substantial amount hidden tractable sub structure new algorithmic techniques exploit tractable structure randomization constraint learning 
developments suggest standard worst case complexity analysis capture true complexity typical problem instances encountered practical applications 
theoretical computer scientists limitations worst case complexity results explored alternatives average case complexity smoothed analysis 
average case analysis studies computational cost solving problem instances drawn predefined problem distribution 
analysis provide valuable insights demonstrated uniform random instance distributions random sat 
relatively basic distributions obtain average complexity results appear quite far removed instance distributions encounters practice 
fact formally defining distribution real world problem instances generally open problem 
smoothed analysis attempts unify worst case average case suffers limited applicability works algorithms problems defined dense fields simplex algorithm applicability smoothed analysis discrete problem domains unclear 
alternative approach pursue identify special structural properties common known problem instances rigorously show clever algorithms exploit properties 
informal insights special structure currently design example branching variable choice heuristics combinatorial search methods 
common feature techniques understanding different groups variables problem encoding play quite distinct roles 
example highest level distinguish dependent independent variables 
dependent auxiliary variables needed obtain compact problem encodings true combinatorics arises independent variables independent variables encoding planning domain represent various operators applicable state world dependent variables encode consequences selecting particular operator 
plan search technique branches purely independent variables obtain substantial speedups search methods exploit variable dependencies 
powerful intuition design search methods wants select variables simplify problem instance possible variables assigned values 
intuition leads common heuristic branching constrained variable 
terms boolean satisfiability amounts effect focusing tractable substructure problem unit clauses sat structure binary clauses sat structure 
true effectiveness approach arises fact setting constraint variables simplifies higher arity clauses satisfied turn shrink eventually binary unary clauses 
general insights incorporated state ofthe art sat constraint solvers effectiveness demonstrated empirically significant number benchmark problems 
formal underpinning explaining practical success strategies lacking 
introduce formal framework directly inspired techniques rigorous complexity results support effectiveness 
preview results 
introduce notion backdoor variables 
set variables value assignment simplified problem solved poly time algorithm called sub solver 
sub solver captures form poly time simplification procedure current sat csp solvers 
consider notion strong backdoor setting backdoor variables leads poly time solvable subproblem 
set problem variables forms trivial backdoor set interesting practical problem instances possess smaller backdoors strong backdoors 
study backdoors practical problem instances identify backdoors contain fraction total number variables 
example sat encoding logistics planning problem logistics cnf contains backdoor variables total nearly variables 
set backdoor variables problem instance restrict combinatorial search branching backdoor variables search drastically reduced space 
general finding small set backdoor variables problem instance computationally hard problem 
contribution formally show presence small backdoor problem provides concrete computational advantage solving 
analyze scenarios 
consider deterministic table time bounds solving csps various scenarios considered 
upper bound size smallest backdoor number variables problem fixed constant 
empirical results section suggest practical instances backdoor relatively small fraction size log scenario exhaustive search backdoor sets 
show obtains provably better search complexity backdoor contains certain fraction variables 
show randomized search technique effect repeatedly guesses backdoor sets provably outperforms deterministic search 
third scenario consider availability variable selection heuristic provides guidance backdoor set 
strategy reduce search space 
table gives highlevel summary results 
exploiting restart strategies identify polynomially solvable case backdoor contains log variables 
believe final scenario closest behavior current effective sat constraint solvers 
formal analysis suggests novel algorithmic strategies warrant empirical exploration 
hidden structure backbones backdoors approach analysis applies sat csp problems 
sat abbreviation studied boolean satisfiability problem 
csp abbreviation general problem constraint satisfaction 
csp problem characterized set variables respective domains list possible values variable set constraints 
constraint defined subset variables denoting variables simultaneous legal assignments 
constraint defines subset cartesian product simplify notation assume variables domain denote size assignment function variables solution csp complete variable assignment satisfies constraints 
partial assignment defines values subset variables sat special case csp boolean variables constraints form clauses 
clause disjunction literals literal boolean variable negation 
notation denote simplified csp obtained csp setting value variable value constraint involving simplified keeping allowed tuples assigned satisfiability partial assignment 
denote simplified csp obtained setting variables defined sat problem corresponds simplifying formula fixing truth values variables 
goal capture structural properties real world problem instances 
start reviewing concept backbone sat csp problem introduced 
variable called backbone variable solutions csp variable assigned value 
variables called frozen variables 
backbone variables useful studying properties solution space constraint satisfaction problem 
definition backbone backbone unique partial assignment satisfiable 
contrast variable type kind introduce backdoors 
backdoors variable subsets defined respect particular algorithm backdoor variables assigned value problem easy algorithm 
note contrarily backbone different sets backdoor variables 
exposition backdoors define sort algorithms mind 
call sub solvers solve tractable subcases general constraint satisfaction problem 
definition sub solver input csp satisfies rejects input determines correctly unsatisfiable satisfiable returning solution satisfiable efficiency runs polynomial time trivial solvability determine trivially true constraints trivially false contradictory constraint determines variable value determines instance algorithm solves sat instances rejects instances 
important note results show independent particular sub solver results hold satisfying properties 
follows sub solver csp 
consider notion backdoor suitable satisfiable csps 
definition backdoor nonempty subset variables backdoor returns satisfying assignment intuitively backdoor corresponds set variables set correctly sub solver solve remaining problem 
sense backdoor witness satisfiability satisfiability instance sub solver algorithm 
introduce stronger notion backdoor deal satisfiable unsatisfiable inconsistent problem instances 
definition strong backdoor nonempty subset variables strong backdoor returns satisfying assignment concludes unsatisfiability contrast backbones necessarily set certain value strong backdoor sufficient solving problem 
example backdoor sat problem search cost order simply check possible assignments means relatively small obtains large improvement searching full space variable value assignments 
observe independent variables particular kind backdoor 
stated set variables variables may thought defined terms example maximal subset independent variables sat encoding hardware verification problem backdoor unit propagation variables values may directly determined setting independent ones 
key questions concerning backdoors size backdoor practical problem instances 
account cost searching backdoor set obtain computational advantage solving csp 
address key questions 
show practical problem instances surprisingly small backdoors 
subsequent section show account cost searching backdoor provably obtain computational advantage backdoor 
see magnitude improvement course function size backdoor 
size backdoors empirical study size backdoors practical sat instances sat solver satz rand randomized version satz 
satz incorporates powerful variable selection heuristics efficient simplification strategy sub solver 
modified satz rand trace variables selected branching keep track minimum number variables need set satz rand simplification satisfying assignment efficiently 
currently modifying procedure handle unsatisfiable instances find strong backdoors 
observe satisfiable csp backdoor size wc see significantly smaller backdoors arise practice give computational advantage search 
instance backdoor fract 
logistics pipe qg qg table size backdoors practical sat instances 
table summarizes results 
instances variety domains 
instances range fastest current solvers chaff 
non trivial solved previous generation sat solvers tableau 
clearly new solvers better able discover exploit hidden structure small backdoors 
fact see table instances fairly tiny backdoors 
small fraction variables unlock satisfying assignment 
conjecture small backdoors occur real world problem instances 
exploiting backdoors formally analyze increasingly powerful strategies deterministic randomized heuristic branching variable selection 
meant csp instance small fraction backdoor variables respect sub solver 
randomized strategy generally outperforms deterministic high probability number variables 
reflects performance gain practice backtracking sat solvers augmented randomization 
third strategy yields tighter runtime bounds requires assume existence heuristic choosing backdoor variables find case practice 
deterministic strategy deterministic procedure may construed generalization iterative deepening runs possible search trees depth 
assume algorithm access particular sub solver running polynomial time defines backdoor variables arbitrary csp instance 
algorithm csp variables subsets variables perform standard backtrack search just variables assignment results solved sub solver analogous algorithm works finding exploiting strong backdoors csp prove unsatisfiability simply keep track assignments variables result contradiction determined 
say holds strong backdoors unsatisfiable csps modified algorithm 
note procedure uses polynomial time csps constant sized backdoor 
interested case backdoor size exists 
gives simple runtime bound terms theorem implies small backdoors strong backdoors substantial speedup results 
example exposition heuristic branching variable selection see improvement poly time bound 
visual representation deterministic strategy runtime backdoors size considered see 
graph indicates corollary case sat proof omitted corollary boolean formulas backdoor size algorithm solves formula time 
seen previous section practice backdoors quite tiny variables logistics cnf 
results real bearing improved solvability real world csps 
randomized strategy better performance results adding randomization 
speed formally verifies known fact real world solvers augmenting solver randomization dramatically improve performance 
assume sub solver tap runtime poly time computable function bounds backdoor size parameter determined 
idea repeatedly choose random subsets variables larger searching subsets backdoor 
algorithm csp variables repeat times randomly choose subset variables size perform standard backtrack search variables solvable return satisfying assignment 
analogous algorithm works general satisfiable unsatisfiable csps strong backdoors leaf search tree ends reporting unsatisfiability unsatisfiable 
algorithm stated requires priori knowledge may corrected choosing constant running algorithm assuming backdoor size 
fails run assuming backdoor size solution 
theorem backdoor size algorithm finds satisfying assignment probability approaching 
proof 
sized backdoor probability randomly chosen size contains entire backdoor setting probability backtracking re sults finding solution due self reducibility property repeating experiment times gorithm succeeds probability show algorithm runs time 
remains choose minimize expression 
depends directly evaluate natural cases 
constant runtime constant large runtime optimized constant improvement deterministic bound 
constant show runtime minimized resulting time bound 
example case sat holds 
corollary boolean formulas backdoor variables algorithm solves formula time 
corollary function 
see 
satisfiability improved exponential time 
sat size backbone constant fraction number variables runtime alg 
deterministic randomized form vertical axis function top curve gives function deterministic procedure 
bottom curve gives randomized procedure 
note randomized algorithm performs exponentially better exponential improvement deterministic algorithm occur heuristic strategy far considered general systematic randomized search strategies finding exploiting backdoors 
practical combinatorial solvers generally heuristics guide variable selection process 
noted common principle branch variables simplify instance 
effect means heuristics steer variable choice variables backdoor set 
formally analyze heuristic guidance 
restart strategies heuristic search 
incorporating notion variable choice heuristic framework results sharpened 
consider case randomized depth search dfs solver sub solver running instance having backdoor size solver chooses variables branch heuristic success probability choosing backdoor variable point search 
notation dfs denote solver properties 
informally restart strategy simply policy restarts solver running specified amount time solution 
main result gives condition polynomial time restart strategy exists dfs solving csps small backdoors 
theorem size backdoor csp constant dfs restart strategy solves polynomial time 
proof 
probability choosing backdoor variable probability consecutively choose probability choosing correct solution polynomial amount backtracking dfs constant suppose constant restarting solver steps runtime probability run backdoor amount backtracking set correctly 
show inequality holds precisely constant analogous result holds strong backdoors 
turns bound asymptotically tight prove 
variable domain size constant sat coloring 
poly time computable function natural numbers 
corollary csps success probability polynomial time restart strategy 
success probability constant csps logn backdoors solved polynomial time restart strategy dfs 
result best possible terms backdoor size take super polynomial time search solution backdoor variables 
heuristic search runtime exponential exponential drops dramatically decreases compared previous algorithms 
runtime order recall domain size success probability 
formal discovery heavy tails heuristic search 
briefly outline theoretical results connecting heuristic search model described earlier heavy tailed runtime phenomena empirically 
conjectured critically constrained variables cause heavy tailed behavior 
prove small sets backdoor variables lead runtime profiles bounded heavy tails 
analysis achieves result introduces selfsimilar binary tree structure call variable choice tree 
trees recursively model heuristic selection backdoor variables backdoor variables chosen resulting search cost lower 
turns backtracking solvers variable choice heuristics modeled precisely variable choice trees size backdoor instance small 
analysis trees leads theorem heavy tail lower bound backdoor size csp runtime distribution dfs lower bounded pareto levy distribution success probability constant 
formalized idea backdoor variables csp sat instances 
backdoor variables significantly reduce search needed solving csp sat problems 
showed practical instances surprisingly small backdoors 
provided detailed formal analysis demonstrating obtain concrete computational advantage exploiting backdoors 
bacchus kabanza 
temporal logics express search control knowledge planning 
aij 
blum furst :10.1.1.43.7263
fast planning planning graph analysis 
proc 
ijcai 
crawford 
tableau sat solver www informatik de ai satlib gerevini 
planning propositional csp walksat local search 
constraints appear 
chen gomes selman 
formal models heavytailed behavior combinatorial search proc 
cp oj 
culberson gent 
reach hard problems hard tech report apes apes research group 
eiter gottlob voronkov 
complexity expressive power logic programming acm computing surveys 
ii 
geffner 
perspectives artificial intelligence planning proc 
aaai 
gomes selman crato ii 
kautz 
heavy tailed phenomena satisfiability constraint satisfaction problems autom 
reasoning 
gomes selman kautz 
boosting combinatorial search randomization proc 
aaai 
il hoffman nebel 
ff planning system jair 
kautz mcallester selman 
exploiting variable dependency local search proc 
ijcai 
kautz selman 
planning satisfiability proc 
th european conf 

kirkpatrick selman determining computational complexity characteristic phase transitions nature 
moskewicz madigan zhao zhang malik 
chaff engineering efficient sat solver proc 
dac 
cm 
li anbulagan 
heuristics unit propagation satisfiability problems proc 
ijcai 
russell norvig 
artificial intelligence modern approach nd ed prentice hall 
sat benchmarks 
www lri php silva search algorithms satisfiability problems combinatorial switching circuits ph thesis dept eecs michigan 
spielman 
teng 
smoothed analysis simplex algorithm usually takes polynomial time proc 
stoc 
satisfiability 
