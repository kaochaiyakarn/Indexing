solving temporal logic queries ph 
schnoebelen lab 
sp ens de cachan cnrs umr av 
pdt 
wilson cachan cedex france email phs lsv ens cachan fr 
temporal query checking extension temporal model checking asks propositional formulae inserted temporal query temporal formula placeholder resulting formula satisfied model hand 
study problem computing minimal solutions temporal query restricting called valid queries queries guaranteed unique minimal solution 
problem intractable general show deciding uniqueness minimal solution computing done polynomial time 
temporal model checking 
pnueli pioneered temporal logic formal language reasoning reactive systems pnu 
temporal logic allows model checking automatic verification finite state model system satisfies temporal logic specifications cgp bbf 
limitation model checking gives simple answers system study satisfies temporal formula temporal queries 
cha chan proposed temporal logic queries extension model checking inspired database queries 
temporal query temporal formula 
special symbol occurs placeholder query 
propositional formula solution query system satisfies place temporal query evaluation process computing solutions temporal query 
applicable query answering extends model checking powerful versatile tool validating debugging generally understanding formal model system bg 
lab 
inria rh ne alpes montbonnot france 
email samuel inria fr 
research described conducted lsv 
system satisfy temporal formula model checkers provide diagnostic trace showing possible way violating property 
ph 
schnoebelen illustrate example 
assume currently designing system rely model checking verifies satisfies typical temporal specification request stating requests eventually granted 
model checking provide answer system satisfies 
temporal queries lead finer analysis system 
query 
asks conditions inevitably lead 
computing solutions system tell things system satisfies specification satisfied iff request solution 
tell 
example satisfied answering lead discovery reality property system satisfies request free 
dually satisfied query answering lead discovery say solution satisfied need request severe bug design 
refer cha bg motivations examples role temporal queries play modeling validation systems 
minimal solutions 
general evaluating query system lead solutions 
solutions organized fundamental monotonicity property say positive resp 
negative query placeholder occurs resp 
odd number negations 
assume solution positive logical consequence solution 
negative queries implication goes way 
set solutions positive represented minimal elements minimal solutions called maximally strong solutions bg 
practical viewpoint solutions informative cha bg 
earlier example negative query minimal solutions weakest conditions ensure eventual 
unique minimal solutions 
chan proved monotonicity ctl queries introduced notion called valid queries queries unique minimal solution system 
defined ctl special subset contains valid ctl queries proposed special purpose algorithm answering ctl queries 
uniqueness minimal solution desirable feature certainly provides intelligible answers fragment ctl quite restricted 
ctl contain valid queries 
notion valid queries limitation example queries simple ef 
af 
valid 
limitation comes fact valid queries unique minimal solution evaluated system interested solving temporal logic queries queries unique minimal solution evaluated system hand 
query unique minimal solution interested knowing minimal solutions 
prompted bruns godefroid study compute systematic way set minimal solutions query bg 
showed automata theoretic approach model checking adapted provide generic algorithm computing minimal solutions generic sense works temporal logics 
computational complexity viewpoint solution principle costly trying potential solutions 
contribution 
study problem computing set minimal solutions arbitrary temporal queries look feasible solutions 
show problem computationally expensive query huge number minimal solutions simply counting provably hard 
mean problems related temporal query evaluation intractable 
main contribution show deciding query unique minimal solution system computing solution solved efficiently 
efficiently means reduce linear number model checking problems 
methods useful general situations 
unique minimal solution compute minimal solution linear number model checking calls compute second minimal solution quadratic number calls third cubic number additional solutions costs 
provide hardness results showing form increasing costs inescapable 
see result posteriori explanation desirable query minimal solutions answers easier understand informative easier compute 
believe approach advantages chan restricted ctl generally valid queries extends nicely situations query small number minimal solutions 
plan 
recall formal definitions temporal queries solutions section 
study structure set solutions section prove key results provide basis polynomialtime algorithms exhibit section 
hardness results section 
temporal logic queries quickly recall syntax semantics ctl ltl ctl main temporal logics model checking refer reader eme cgp bbf background 
assume reader familiar main complexity classes see pap 
ph 
schnoebelen syntax temporal logics assume 
countable set atomic propositions ctl formulae syntax 
existential path quantifier time temporal modality temporal modality 
standard abbreviations 
ltl fragment ctl path quantifiers forbidden 
ctl fragment ctl modality appear immediately scope path quantifier ctl formulae state formulae depends current state 
state formula write say holds state boolean combinations atomic propositions temporal combinator allowed special case vacuously temporal formulae called propositional formulae ranged 
assuming set atomic propositions propositional formulae syntax semantics 
kripke structure shortly ks tuple 
finite set states initial state total transition relation states labels states finitely propositions 
assume ks run infinite sequence states linked transitions 
qi qi 
form write th state qi th suffix qi qi qi 
observe run 
write set runs start assume total empty 
solving temporal logic queries ctl formulae describe properties runs ks 
write satisfies definition induction structure formula pi def pi def def def def def write say ks satisfies 
semantical equivalences temporal formulae denoted entailments written 
temporal queries tl temporal logic ctl ltl ctl fragment ctl 
tl query tl formula special placeholder symbol may appear place propositional formula allowed 
note may appear 
say query positive resp 
negative appears resp 
odd number negations 

negative 
really abbreviation 

propositional formula write tl formula obtained replacing 
solution query ks propositional formula 
lemmas state fundamental properties sets solutions 
chan stated proved ctl queries cha hold generally 
lemma monotonicity 
ctl query propositional formulae positive entails negative entails 
duality principle linking positive negative queries negative query 
positive query possible compute solutions solutions solutions 
duality justifies policy adopt consider positive queries 
lemma 
kripke structure ctl query iff propositional formulae iff propositional formula lemma shows deciding query admits solution ks reduced model checking question 
ph 
schnoebelen minimal solutions draw lemmas solutions temporal query problem equally informative 
informative solutions minimal ones definition 
minimal solution query ks solution entailed solution 
set solutions closed entailment minimal solutions characterize set solutions 
problem concerned kripke structure temporal query compute set minimal solutions relevant solutions exists important generalization temporal query answering 
considers subset rp called relevant atomic propositions looks relevant solutions solutions propositions rp 
note lemma query relevant solutions iff solutions 
minimal relevant solution minimal relevant solutions 
minimal relevant query may unique minimal solution minimal relevant solutions dually minimal solutions unique minimal relevant solution 
able look relevant solutions greatly improves scope temporal query checking 
going back example minimal solution involves lot specific details system hand 
probably get informative solution request free restrict set important propositions 
rest look basic query answering problem 
reader see results algorithms propose generalize directly relevant solutions suffices restrict set valuations considers valuations rp 
generalization crucial practical applications trivial uninteresting analysis develop 
lattice solutions assume fixed ks states labeled propositions finite set 
pm atomic propositions 
assuming finiteness limitation anyway propositions appearing useful 
valuation mapping assigning truth value atomic proposition 
write set valuations observe solving temporal logic queries state seen carrying valuation denoted vq vq pi def pi 
standard way propositional formula denotes set valuations valuations satisfy write size number valuations satisfy lattice propositional formulae know boolean lattice subsets isomorphic lattice propositional formulae ordered entailment distinguish equivalent propositional formulae 
write lm lattice contains atomic propositions 
fig 

lattice propositional formulae fig 
displays lattice propositional formulae 
exclusive operator denoted shorten notations formulae 
fig 
bold nodes delineate sub lattice propositional formulae entailed 
non equivalent formulae 
huge size lm explained numbers atomic propositions allow valuations non equivalent propositional formulae 
lm sliced levels natural way level collects formulae central level largest containing def ph 
schnoebelen distinct formulae 
temporal query minimal solutions number relevant propositions 
bounding number minimal solutions start showing upper bound number minimal solutions tight 
note practice considering number propositions better parameter number different valuations appear states kripke structure 
explained lemma notation treats valuation propositional formula obvious meaning lemma 
propositional formula valuation 
label state iff 
proof 
obviously state iff equivalence carries structural induction 
proposition 
ctl query ks nodes 
minimal solutions furthermore minimal solution proof 
lemma minimal solution disjunction form vq subset states minimal solution account valuations 
subsets want large number distinct subsets contains subsets picked 
exist simple situations query exponential number minimal solutions 
fig 

sn ks minimal solutions query consider ks sn fig 
states 
states labeled different valuations proposition 
sn query minimal solutions 
proof idea 
write 
valuations labeling 
minimal solutions form ki 
solving temporal logic queries example partly explains difficult compute set minimal solutions arbitrary query arbitrary ks simply listing minimal solutions takes exponential time 
show simply counting minimal solutions intractable see theorem 
polynomial time algorithms temporal queries section exhibit temporal query problems reduced efficiently corresponding model checking problems 
formally problems solved polynomial time algorithm uses model checking underlying temporal logic oracle 
oracle abstracts away specific details model checking algorithms different temporal logics different complexity 
informally say problems solved mc 
practice means solved simple extensions standard model checking algorithms little extra cost 
particular ctl queries problems solved polynomial time 
generally holds temporal logic model checking polynomial time alternation free mu calculus cs extensions ctl kg lst lms pbd 
obviously model checking special case temporal query solving expect better provide efficient query solving temporal logics model checking intractable 

provide fine grained evaluation algorithm say polynomial time obvious linear number oracle calls 
deciding minimality minimality solutions reduced model checking 
requires candidate solutions manageable form theorem 
problem deciding ks query propositional formula minimal solution mc disjunctive normal form obdd proof 
uses algorithm check solution 
check 
minimal solution prop 

enumerate 
vk 
minimal iff vi 
minimality decided invocations model checking algorithm 
ordered binary decision diagrams bry 
standard way efficiently storing handling boolean formulae model checking tools 
ph 
schnoebelen assumption disjunctive normal form obdd permits efficient enumeration decision explain 
computing obdd uses simple dynamic programming techniques see bry 
disjunctive normal form computing bit difficult 
just need check done enumerating assuming soon see large 

arbitrary propositional formula minimality np hard satisfiability easily reduced minimality 
computing unique minimal solutions uniqueness minimal solution reduced model checking 
furthermore unique minimal solution computed efficiently 
theorem 
problem deciding ks query admits unique minimal solution computing solution mc proof 
uses algorithm vq set vq valuations labeling state write fq vq 
set vq fq 
write vq 
unique minimal solution 
solution minimal solution unique 
correctness algorithm easily proved construction infimum solutions solution unique minimal solution 
uniqueness minimal solution decided solution computed invocations model checking algorithm 

theorem contradiction theorem cha validity ctl query shown exptime complete 
ask question existence uniqueness minimal solution query model models cha 
minimal solutions uniqueness ideas theorem adapted situations unique minimal solution 
assume ks temporal query distinct minimal solutions 
fk 
possible tell solving temporal logic queries 
fk form complete set minimal solutions invocations underlying model checking algorithm 
answer negative furthermore possible compute additional fk minimal solution 
algorithm proceeds follows assume minimal solution fi form fi ni vi disjunction ni single valuations assume solution implied fi 
fi 
exists valuation vi ri vi ri vk rk solution 
minimal solutions 
fk form complete set iff choice function ri ri ni fq vk rk solution 
observe nk candidate solutions 
candidate solution fq compute minimal solution entails linear number invocation underlying model checking algorithm 
lists 
vn sets repeats vi vi 
loop finished resulting minimal solution 
algorithm non deterministic obtain depends enumeration started 
summary methods allow computing minimal solution linear number model checking calls second quadratic number third cubic number additional minimal solution costs form increasing cost avoided show section 
counting minimal solutions section saw fixed decide polynomial number model checking calls minimal solutions query ks compute minimal solutions 
degree polynomial grows fixed input reduction polynomial time 
inescapable counting number minimal solutions hard 
formal proof introduce problems decision problem output counting problem numeric output 
sols input ks query integer unary 
answer iff minimal solutions count sols input ks query 
answer number minimal solutions easy obtain valuations fi form 
ph 
schnoebelen theorem hardness temporal query solving 
considering ctl queries 
sols np complete 

count sols complete 
furthermore hardness appears fixed query 
proof 
sols np count sols easy see minimal solution succinctly associated subset set states minimality ctl queries theorem 
hardness sols np proved reducing sat assume sat instance boolean variables form cnf clauses 
associate ks si 
illustrate construction example instance associate ks depicted fig 

si fig 

ks si associated sat instance si kind paths bottom paths variable negation visited top paths literal clause picked 
nodes si labeled symbols blank labels stand valuations nodes carry valuation iff labeled picture proof prop 
exact values valuations elegant proof indicated st phane 
solving temporal logic queries relevant 
consider ctl query solution si entail valuations appearing path minimal solutions form vq path 
solution written minimal iff entailed 
clearly top paths visit dummy bottom path minimal 
claim exists minimal solutions satisfiable 
top path entailed bottom path picks literal negation 
picks valuation valuation satisfies reciprocally satisfiable satisfying valuation gives top path provides solution entailed minimal bottom paths solutions 
solutions si iff satisfiable 
hardness count sols proved reducing sat 
illustrate construction earlier example associate ks depicted fig 

fig 

ks si associated sat instance top path denoted top lists clauses paths provide way enumerating assignments 
xn visiting boolean variable positive literal xi negative xi 
path visits literal immediately visits clauses satisfied literal follow bottom right corner appears 
labels stand valuations consider query 
clearly paths correspond different assignments differ literal nodes entail 
corresponds assignment satisfies entailed top ph 
schnoebelen number minimal solutions number satisfying assignments provides required weakly parsimonious reduction 
contradiction theorem saying hard count number minimal solutions theorem saying easy tell unique 
situation similar sat complete easy tell cnf boolean variables satisfying assignments valid 
studied problem computing set minimal solutions arbitrary temporal queries arbitrary kripke structures 
showed problem intractable general 
turns problem easier asks minimal solutions 
fortiori applies situations unique minimal solution small number 
computing single minimal solution done linear number calls model checking procedure polynomial time ctl queries 
second minimal solution obtained quadratic number calls third solution cubic number advantages chan approach restricted set called valid queries handled 
implement algorithms 
logical step study implement evaluate examples drawn practical case studies 
evaluation tell practice temporal queries small number minimal solutions computing partial sample full set minimal solutions useful understanding validating model hand 
principle limitations algorithm useful chan algorithm provided convincing application examples cha 
acknowledgments anonymous referees prompted develop results gathered section st phane indicated elegant reduction depicted fig 

bbf rard bidoit finkel petit ph 
schnoebelen 
systems software verification 
model checking techniques tools 
springer 
obviously parsimonious reductions telling minimal solution done polynomial time 
solving temporal logic queries bg bruns godefroid 
temporal logic query checking extended 
proc 
th ieee symp 
logic computer science lics boston ma usa june pages 
ieee comp 
soc 
press 
bry bryant 
symbolic boolean manipulation ordered binary decision diagrams 
acm computing surveys 
cgp clarke grumberg peled 
model checking 
mit press 
cha chan 
temporal logic queries 
proc 
th int 
conf 
computer aided verification cav chicago il usa july volume lecture notes computer science pages 
springer 
cs cleaveland steffen 
linear time model checking algorithm alternation free modal mu calculus 
proc 
rd int 
workshop computer aided verification cav aalborg denmark july volume lecture notes computer science pages 
springer 
eme emerson 
temporal modal logic 
van leeuwen editor handbook theoretical computer science vol 
chapter pages 
elsevier science 
kg kupferman grumberg 
buy get free 
journal logic computation 
lms ph 
schnoebelen 
model checking durational kripke structures extended 
proc 
th int 
conf 
foundations software science computation structures fossacs grenoble france apr volume lecture notes computer science pages 
springer 
lst ph 
schnoebelen 
expressivity complexity quantitative branching time temporal logics 
proc 
th latin american symposium theoretical informatics latin del este uruguay apr volume lecture notes computer science pages 
springer 
pap papadimitriou 
computational complexity 
addison wesley 
pbd bhattacharya dasgupta dasgupta chakrabarti 
quantified computation tree logic 
information processing letters 
pnu pnueli 
temporal logic programs 
proc 
th ieee symp 
foundations computer science focs providence ri usa oct nov pages 
