tree dynamic index multi dimensional objects sellis nick roussopoulos christos faloutsos problem indexing multidimensional objects considered 
classification existing methods discussion major issues involved multidimensional data indexing 
second variation guttman trees trees avoids overlapping rectangles intermediate nodes tree introduced 
algorithms searching updating initial packing reorganization structure discussed detail 
provide analytical results indi trees achieve savings disk accesses compared tree search ing files thousands rectangles 
university maryland systems research center 
university maryland institute advanced computer studies umiacs 
research wsa sponsored national science foundation cdr 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference brighton department computer science university maryland college park md 
recognized past existing database management systems dbmss handle efficiently multi dimensional data boxes polygons points multi dimensional space 
multi dimensional data arise applications name important cartography 
maps stored searched electronically answering efficiently geometric queries 
computer aided design cad 
example vlsi design systems need store thousands rectangles representing electronic gates higher level elements 
computer vision robotics 
rule indexing expert database systems 
proposal rules stored geometric entities multi dimensional space defined database 
problem searching applicable rules reduced geometric intersection problem 
database management systems store dimensional data integer real numbers strings considerable interest developed dbmss store multi dimensional data 
sense dbms single means storing accessing kind information required applications complex traditional business applica tions 
underlying structures data models query languages sufficient manipulation complex data 
problem extending current data models languages considered various people past ston 
focus problem deriving efficient access methods multi dimensional objects 
main operations addressed past point queries point space find objects contain region queries region query win dow find objects intersect course operations augmented additional constraints simple dimensional scalar data 
addition operations tions deletions modifications supported dynamic environment 
purpose describe new structure tree 
section surveys existing indexing methods classifies criteria 
sections describe trees algorithms searching updating packing structure 
section presents preliminary analytical results searching performance tree especially compares corresponding performance trees 
conclude section summarizing contributions giving hints research area multi dimensional data indexing structures 

survey section classify briefly discuss known methods handling multi dimensional objects 
main concern storage retrieval rectangles secondary store disk 
handling complex objects circles polygons reduced handling finding minimum bounding rectangle mbr object 
discussion shall examine methods handling multi dimensional points suggest useful ideas applicable rectangles 

methods multi dimensional points common case multi dimensional data studied past case points 
main idea divide space disjoint sub regions usually way sub region contains points 
usually data stored core capacity disk page number data records page hold 
insertions new points may result partitioning region known split 
split performed introducing hyperplanes partition region disjoint sub regions 
attributes split help classify known methods po position splitting hyperplane pre determined cuts region half exactly grid file 
shall call methods 
opposite data points determine position hyperplane trees bent trees 
shall call methods adaptable 
nievergelt distinction dif ferent terminology call fixed methods methods organize embedding space data drawn call adaptable methods methods organize data stored 
split done hyperplane cut trees 
opposite split dimensions hyperplanes cut quad trees fink oct trees 
locality splitting hyperplane splits affected region regions direc tion grid file 
shall call methods grid methods 
opposite restrict splitting hyperplane extend solely inside region split 
methods referred aa methods 
methods usually hierarchical decomposition space ing tree structure 
grid methods multi dimensional array 
usefulness classification fold creates general framework puts known methods map 
second reason allows design new methods choosing position dimensionality locality split suitable application 
table illustrates known methods attri classification 
notice methods binary trees quad trees easily extended secondary storage systems 
reason disk page hold order pointers trees nodes large fanout appropriate trees way nodes usually result expensive page faults 
proceedings th vldb conference brighton table illustration classification 

methods rectangles classification brief dis methods handling rectangles 
main classes methods methods transform rectangles points space higher dimensionality 
example rectangle sides parallel axes characterized coordinates considered point space 
prev ously mentioned methods storing points chosen 
rosenberg rose trees 
hinrichs nievergelt suggested grid file rotation axes 
rotation necessary order avoid non uniform distribution points lead grid file poor performance 
methods space filling space space 
curves map method suitable paged environment suggested orenstein oren 
idea transform dimensional objects line segments called transform 
transformation tries preserve distance points close space close transformed space 
improved distance preserving transformations proposed achieve better clustering nearby points gray codes 
original transform induces ordering points dimensional quad tree uses scan pixels dimensional space 
transformation rectangle set line segments corresponding quadrant rectangle completely covers 
methods divide original space appropriate sub regions overlapping dis joint 
regions disjoint methods points mentioned proceedings th vldb conference brighton decompose space 
complication handled rectangle may intersect splitting hyperplane 
solu tion cut offending rectangle pieces tag pieces indicate belong rectangle 
gun ther suggested relevant scheme general polygon data convex concave 
suggests splitting hyperplanes arbitrary orientation necessarily parallel axes 
proposed overlapping sub regions man trees 
trees extension trees multi dimensional objects points regions 
trees balanced leaf nodes appear level desirable feature guarantee space tion 
trees built dynamic insertion algorithms structure may provide excessive space lap nodes result bad performance 
packing technique pro posed alleviates problem relatively static databases points 
update intensive spatial databases packing applied single insertion 
environment structure described section trees avoids performance degradation caused overlapping regions 
space time comparison approaches interesting problem currently studying 
step section provide analysis tree structures 

trees section introduce tree discuss algorithms searching updating data structure 

description mentioned trees direct exten sion trees dimensions 
data struc ture height balanced tree consists intermediate leaf nodes 
data objects stored leaf nodes intermediate nodes built grouping rectangles lower level 
intermediate node associated rectangle completely encloses rectangles correspond lower level nodes 
shows example set data rectangles corresponding tree built assuming branching factor 
considering performance tree search ing concepts coverage overlap important 
coverage level tree defined total area rectangles asso ciated nodes level 
overlap level tree defined total area con tained nodes 
obviously efficient tree searching demands lap coverage minimized 
minimal coverage reduces amount dead space empty space covered nodes 
minimal overlap critical minimal coverage 
search window falling area overlapping nodes level height tree worst case paths leaf nodes followed 
cl rectangles organized tree tree rectangles iii overlapping nodes slowing search lk page accesses 
example search window shown subtrees rooted nodes searched return qualifying rectangle 
cost operation page access root additional page accesses check rectangles stored clearly hard control overlap dynamic splits trees efficient search degrades may erate search logarithmic linear 
shown zero overlap cover age achievable data points known advance packing tech nique trees search dramatically improved 
shown zero overlap attainable region data objects 
allow partitions split rectangles zero overlap intermediate node entries achieved 
main idea tree structure 
indicates different grouping rectangles shows corresponding tree 
notice rectangle split sub rectangles contained node second data gle lower level overlaps gle decompose collection non overlapping sub rectangles union example bad search window proceedings th vldb conference brighton 

rectangles grouped form tree tree built original rectangle 
term data rectangle denotes rectangle minimum bounding rectangle object opposed rectangles correspond intermediate nodes tree 
avoiding overlap achieved expense space increases height tree 
space increase logarithmically distributed tree indirect increment height offset benefit searching multiple shorter paths 
example consider cost search operation window notice root tree node need accessed saving page accesses 
trees thought extension trees cover non zero area objects points rectangles 
improve ment trees reduced proceedings th vldb conference brighton coverage nodes level neces cover initial space 
compared trees trees exhibit searching performance especially point queries expense extra space 
see section analytical results supporting discus sion 
brief discussion motivate intro duction trees move formally describe structure 
leaf node form oid rect oid object identifier refer object database 
rect describe bounds data objects 
example dimensional space entry rect form ow represents coordinates lower left upper right corner rectangle 
mediate node form pointer lower level node tree rect representation rectangle encloses 
tree properties entry rect intermediate node subtree rooted node pointed contains rectangle covered rect 
exception rectangle leaf node case just overlap rect 
entries pi rect ec intermediate node overlap zero 
root children leaf 
leaves level 
assume maximum number entries fit leaf intermediate node 
notice property satisfied tree tree leaf node contains entries intermediate node contains nodes root 
trees satisfy property 
robinson showed experimental results storage utilization trees remains acceptable levels average tree utilization 
trees achieve better space utilization expense search performance believe degradation minimal price pay search improve ment obtained trees see section 
interesting comment due fact populating nodes possible result decrease height tree expense costly updates 
parameter problem initial packing algorithm populate tree reorganization techniques 
fol lowing discuss algorithms searching updating tree 
section presents pack ing algorithm 

searching searching algorithm similar trees 
idea decompose search space disjoint sub regions descend tree actual data objects leaves 
notice major difference trees sub regions overlap leading expensive searching 
searching algorithm shown 
algorithm search input tree rooted node search window rectangle output data objects overlapping method decompose search space recursively search tree sl 
search intermediate nodes leaf entry rect check rect overlaps search child sfl child node pointed 
search leaf nodes leaf check objects rect return overlap 
insertion searching algorithm inserting new rectangle tree done searching tree adding rectangle leaf nodes difference corresponding algorithm trees input rectangle may added leaf node rea son may broken sub rectangles existing partitions space 
overflowing nodes split splits pro parent children nodes 
updated split parent node may introduce space partition affects children nodes 
similar downwards split robinson introduced trees 
discuss problem subsection context node splitting algo rithms 
illustrates insertion algo rithm 
algorithm insert input tree rooted node input rectangle ir output new tree results tion ir method find ir go add corresponding leaf nodes il 
search intermediate nodes leaf entry rect check rect overlaps ir 
insert child ir child node pointed 
insert leaf nodes leaf add ir new rec tangle inserted entries re organize tree see sec tion 

deletion insertion algorithm deletion rectangle tree done trees locating rectangle deleted removing leaf nodes 
reason rec tangles may removed leaf nodes insertion routine outlined may introduce copies newly inserted rectangle 
shows deletion algorithm 
proceedings th vldb conference brighton algorithm delete input tree rooted node input rectangle ir output new tree results deletion ir method find ir remove corresponding leaf nodes 
dl 

search intermediate nodes leaf entry rect check ir 
delete child ir child node pointed delete leaf nodes leaf remove ir adjust parent rectangle encloses remain ing children rectangles 
deletion algorithm clearly lot deletions storage tion deteriorates significantly 
similar situations trees robinson suggests subtrees periodically re organized achieve better performance 
guttman suggests simi lar procedure utilized nodes emp tied orphaned rectangles re inserted top tree 
brevity give detail algorithm tree re organization 
suggest algorithms plan test near 

node splitting node overflows splitting algorithm needed produce new nodes 
require sub nodes cover mutually dis joint areas search partition vertical horizontal decompose space sub regions 
procedure finding partition similar packing algorithm described detail section 
call procedure partition 
notice contrary tree splitting algorithm downward propagation split may necessary 
example suppose parent node turn parent proceedings th vldb conference brighton node node split lower level nodes split 


ja 
partition line recursive node splitting due property tree requires rectangle subtree rooted node rectangle associated covers completely 
nodes intersected partition split recursively 
exception leaf nodes 
objects leaf nodes split just efficiency reasons rectangles leaf pages account downward splits 
discuss additional optimiza tion tactics increase space efficiency tree regarding splitting nodes 
node splitting algorithm illustrated fig ure 
algorithm input node leaf intermediate output new tree method find partition node split create new nodes needed propagate split upward downward 
find partition partition partition routine pack algorithm see section 
rect rectangle pointer respectively associated node denote sub regions result ing partition 
create pi reg rect nodes resulting split rem si 
sn 
populate new nodes put ni nodes rect rect lies completely recti 
nodes just overlap sub region leaf node put new nodes recursively split children nodes partition 
ph rec kl nodes splitting pk rec rect lies completely 
add nodes corresponding node ni 
sn 
propagate node split upward root create new root children ni 
pr parent node 
replace pr ni 
pr entries invoke node splitting algorithm operations ones needed keep tree valid form 
mentioned significant operation initial packing tree 
especially useful file data rectangles system required build tree top file 
case respect criteria initial set achieved carefully grouping rectangles leaf level 
problem subject section 

packing algorithm section describes partition pack algorithms 
described dimensional space generalization straightforward 
partition divides total space occupied dimensional rectangles line parallel axis cut axis cut 
selection cut criteria nearest neighbors minimal total displacement minimal total space coverage accrued sub regions minimal number rectangle splits 
criteria reduce search reducing coverage dead space 
minimization splits fourth confines height expansion tree 
criteria step find space partitioning groups way locally improves search 
possible criteria computationally exponential algorithm glo minimizes coverage height gear discussion practical locally optimized suboptimal organization tree 
partition uses sweep routine sweeps space fashion parallel axis 
sweep stops ff fill factor rectangles encountered ff capa city node predefined fraction desired loading factor 
suppose sweep performed axis distance origin fill factor axis reached 
sub region contain rectangles coordinate second sub region contain rest rectangles 
sweep line may cut rectangles split smaller rectangles agree disjointness property trees 
algorithm requires rectangles sorted dimension dimension 
complexity order nlogn 
partition algorithm shown 
routine sweep scan rectangles identify points space partitioning possible 
routine similar described prep shown 
algorithm partition ff input set rectangles sub region fill factor ff output node containing rectangles sub region set remaining rec tangles method decompose total space locally optimal terms search performance sub region remaining sub region pal 
partition required total space partitioned contains equal ff rectangles proceedings th vldb conference brighton pa 
pa 
pa 
pa 
decomposition done node storing entries created algorithm returns 
compute lowest values ox oy lowest coordinates rectangles 
sweep dimension cx cut sweep os ff 
cx cost split direction 
sweep dimension cy cut sweep oy ff 
cy cost split direction 
choose partition point select cut gives smallest cx cy divide space distribute rectangles splits 
node stores entries sub region created 
denote set falling second sub region 
return rf 
partition algorithm algorithm sweep axis oxy ff input axis sweeping performed point oxy axis sweep starts fill factor output computed properties sub region cut method sweep oxy compute property ff reached 
find ff rectangles starting oxy pick fj list rectangles sorted input axis 
sw 
evaluate partitions compute total value cost meas property organize rectangles nearest neighbor minimal coverage minimal 
return cost largest coor ff rectangles 
sweep algorithm step sw evaluates partition proceedings th vldb conference brighton criteria mentioned section 
example cri cost total area covered rec tangles returned step criterion cost number input rectangles split sweep line 
pack algorithm basically adapted accept grouping selection criteria discussed earlier section 
fill factor determines packed populated tree 
packed faster search 
database relatively static highly desirable pack tree capacity 
packing algorithm shown 
algorithm pack sjj input set rectangles organized fill factor jj tree output tree method recursively pack entries level tree pl packing needed id equal fj build root tree return 

initialization set 
holds set level rectangles packed 

partition space partition ff partitioning non leaf nodes rectangles split chosen partition recursively propagate split downward necessary propagate changes upward 
append 
continue step 

recursively pack intermediate nodes return pack ffl pack algorithm notice step expensive due recur sive splits see algorithm section 
strong incentive fourth property mentioned section minimal number splits basic cri partitions 
summary packing algorithm attempts set tree search performance 
matter experimental discover mentioned criteria space partitioning best 
preliminary done ing search performance trees 
section briefly presents results 

analysis approach simplifies analysis transform objects points space higher dimensionality 
rectangle aligned axes coordinates uniquely determine coordinates lower left upper right corners 
spaces impossible illus examine segments line space rectangles plane space transform segments points space 
segment uniquely determined coordinates start points 
obtaining formulas results line segments step analysis rec tangles objects higher dimensionality 
applications line segments orenstein oren suggests transform map multi dimensional space space 
rectangle mapped set line seg ments point region queries multi dimensional space directly correspond point region queries space 
point density number segments contain 
analysis assumed sets segments set ni segments size set segments size 
segments set uniformly distributed entire space 
due assumption point space 
allowing size enables analysis account realistic distri butions objects size 
shown cal results stand case sets segments 
give indicative results search performance trees 
show number disk accesses required search tree tree case point query 
la shows disk accesses required searching tree corresponding tree index segments total density 
la shows disk accesses required function large segment density large segments account total number segments nz lo ooo 
lb illustrates number disk accesses function number small segments fixed small segment density 
ac ac en loo small disk accesses size segments point query function dg lo ooo function figures show clearly problem trees handling small segments just lengthy ones 
la large den sity implies long segments 
situations tree may require twice page accesses required rf tree 
notice performance tree immune changes distribution segment sizes 
second set figures figures illustrate number disk accesses needed performing segment query tree 
query segment chosen order small segments 
decision fact segment queries formed isolate segments space zooming 
graphs show trees suffer cases lengthy segments 
performance improvements savings disk page accesses achieved 
course number large segments approaches total number segments trees lose lengthy segments cause lot splits sub segments 
proceedings th vldb conference brighton typical distributions tic 
contrary lengthy segments compared small ones vlsi design 
concludes presentation ical results obtained 
detailed description reader referred 
currently working experimental verification results 
lu cz loa sng segm nta iv disk accesses size segments segment query function di lo ooo function dl 
summary contributions ized follows variation trees trees introduced 
algorithms needed search update pack structure discussed depth 
main advantage trees compared trees improved search performance cially case point queries savings disk accesses 
structure behaves exactly aa tree case data points non zero area objects 
significant sense trees shown exper results robinson obtained efficient indexing point data 
fore single structure tree database system order index kind geometric data 
provide initial analytical results comparing search performance trees 
proceedings th vldb conference brighton results obtained direc tion 
results comparison agree completely intuition trees suffer case large data objects force lot forking search 
trees handle cases easily split large data objects smaller ones 
area includes tasks experimentation simulation verify analytical results 
extension analysis rectangles plane eventually spaces arbi dimensionality 
design experimentation alternative methods partitioning node compact ing tree 
comparison trees methods handling multi dimensional objects 
acknowledgments survey section owes hanan samet 
happy acknowledge help examples book ch 
constructive dis 

bent la bentley multidimensional binary search trees associative searching cacm pp 
sept 
chang fu picture query languages pictorial data base systems ieee computer november 
database structure mani capabilities picture data base management system ieee trans 
pattern analysis machine intelligence pami pp 
july 
faloutsos sellis analysis object oriented spatial access methods 
acm sigmod may 
faloutsos gray codes partial match range queries ieee trans 
software engineering 
cl fink bl oren appear faloutsos sellis object oriented access methods spatial objects algo rithms analysis 
preparation finkel bentley quad trees data structure retrieval composite keys acta informatica pp 

gunther cell tree index geometric data memorandum 
ucb erl univ nia berkeley dec 
guttman trees dynamic index structure spatial searching proc 
acm sigmod pp 
june 
guttman new features rela tional database systems support cad applications phd thesis university california berkeley june 
hinrichs nievergelt grid file data structure support proximity queries spatial objects tech 
report institut fur informa tik eth zurich july 
dimensional binary search trees means speed associative searches design rule verification integrated circuits journal automation fault tolerant computing pp 
july 
nievergelt hinterberger sevcik grid file adapt able symmetric multikey file struc ture acm tods pp 
march 
orenstein spatial query process ing object oriented database system proc 
acm sigmod pp 
may 
ousterhout mayo scott tay lor magic vlsi layout system st design automation conference pp 
june 
prep rose ston ston preparata shamos computational geometry springer verlag new york 
robinson tree search structure large sional dynamic indexes proc 
acm sigmod pp 
lo 
rosenberg geographical data structures compared study data structures supporting region queries ieee trans 
computer aided design pp 
jan 
roussopoulos direct spatial search pictorial databases packed trees proc 
acm sigmod may 
samet quadtrees related hierarchical data structures com puter graphics image processing 
preparation stonebraker rubenstein guttman application data types indices cad data bases tech 
report ucb erl electronics research laboratory university california berkeley january 
stonebraker sellis han son rule indexing implementations database systems proceedings international conference expert database systems april 
proceedings th vldb conference brighton 
