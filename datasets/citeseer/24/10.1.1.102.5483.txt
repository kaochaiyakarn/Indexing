space complexity approximating frequency moments noga alon yossi matias mario szegedy february frequency moments sequence containing mi elements type numbers fk consider space complexity randomized algorithms approximate numbers fk elements sequence stored 
surprisingly turns numbers approximated logarithmic space approximation fk requires space 
applications data bases mentioned 

am sequence elements ai member 

mi aj denote number occurrences sequence define fk particular number distinct elements appearing sequence length sequence repeat rate gini index homogeneity needed order compute surprise index sequence see 
define max mi preliminary version appeared proceedings th annual acm symposium theory computing stoc may 
department mathematics raymond beverly faculty exact sciences tel aviv university tel aviv israel 
email noga math tau ac il 
research supported part usa israel bsf israel science foundation 
part research done visiting bell labs murray hill nj usa 
bell laboratories murray hill nj usa department computer science tel aviv university tel aviv israel 
email matias research bell labs com 
research labs florham park nj usa 
email ms research att com 
moment fk defined sum powers numbers mi th root sum denote quantity 
numbers fk called frequency moments provide useful statistics sequence 
frequency moments data set represent important demographic information data important features context database applications 
indicate degree skew data major consideration parallel database applications 
example degree skew may determine selection algorithms data partitioning discussed dewitt see :10.1.1.119.6066
haas considers sampling algorithms estimating proposes hybrid approach algorithm selected degree skew data measured essentially function 
skew information plays important role applications may beneficial maintain estimates frequency moments notably 
efficiency purposes computation estimates frequency moments relation preferably done updated records relation inserted database 
concrete discussion practical implications framework 
note straightforward maintain exact frequency moments maintaining full histogram data maintaining counter mi data value 
requires memory size cf 

important memory computing maintaining estimates limited 
large memory requirements require storing data structures external memory imply expensive overhead access time update time 
problem computing estimating frequency moments pass memory constraints arises naturally study databases 
known randomized algorithms approximate frequency moments fk limited memory 
simplicity consider problem approximating numbers fixed constant factor say relative error exceed success probability say 
sections consider general case space complexity function relative error error probability 
morris see showed approximate design approximate counter log log log log bits memory 
flajolet martin designed algorithm approximating log bits memory 
analysis assumption explicit families hash functions strong random properties available 
whang considered problem approximating context databases 
obtain tight bounds minimum possible memory required approximate numbers fk 
prove fk approximated randomly log memory bits 
show randomized approximation algo rithm fk requires memory bits randomized approximating algorithm requires space 
surprisingly approximated randomly log memory bits 
addition observe version flajolet martin algorithm approximating implemented analyzed simple linear hash functions surprisingly log log log bounds algorithms estimating respectively tight 
comments concerning space complexity deterministic algorithms approximate frequency moments fk space complexity randomized deter algorithms compute precisely 
rest organized follows 
section describe space efficient ran algorithms approximating frequency moments 
tools applied include known explicit constructions small sample spaces support sequence wise indepen dent uniform binary random variables analysis chebyshev inequality simple application chernoff bound 
section lower bounds techniques communication complexity 
final section contains concluding remarks open problems 
space efficient randomized approximation algorithms section describe space efficient randomized algorithms approximating fre quency moments fk 
note moments computed precisely cally log memory bits simply computing numbers mi precisely 
method space requirement slightly reduced approximating randomly numbers mi computing precise value getting randomized algorithm approximates numbers fk log log memory bits 
show better 
estimating fk basic idea algorithm randomized algorithm described section natural 
trying estimate fk define random variable computed space constraints expected value fk variance relatively small 
desired result deduced chebyshev inequality 
theorem exists randomized algorithm computes sequence 
am members 
pass log log log memory bits number probability deviates fk fk 
proof 
define kn log 
simplify presentation omit floor ceiling signs essential 
assume length sequence known advance comment required modifications case 
algorithm computes random variables 
ys outputs median yi average random variables xij xij independent identically distributed random variables 
variables xij computed sequence way log log memory bits follows 
choose random member ap sequence index chosen randomly uniformly numbers 
suppose ap 

aq number occurrences members sequence ap inclusive define note order compute need maintain log bits representing ap log bits representing number occurrences expected value definition 


mn fk 
estimate variance var bound 


mn 
km 
km 
km mn km km 
km kf obtained inequality holds numbers ab ka need simple inequality fact positive reals 
mn mi 
note sequence 
mn shows tight constant factor 
proof fact put max nmi mk mi mi mi mi inequality fact mi fact definition random variables yi computation var yi var kf kn yi fk chebyshev inequality definition fixed prob yi fk fk var yi kn follows probability single yi deviates fk fk standard estimate chernoff cf example appendix probability variables yi deviate fk fk 
case happen median yi supplies estimate required quantity fk needed 
remains show algorithm implemented case known advance 
case start choose member sequence computation 
process ends update value replace probability update value needed 
general processing elements sequence variable xij value element am arrives replace element probability case replacement update define 
stays increases case am change 
easy check implementation process log log memory bits xij suffice 
completes proof theorem 

case bigger polynomial algorithm approximate number computation xij log log log memory bits 
storing value requires log additional bits changes space log complexity log log log log improved estimation second frequency moment particular interest repeat rate surprise index arise various statistical applications 
theorem approximated fixed positive log log memory bits 
theorem show fact logarithmic number bits suffices case 
theorem exists randomized algorithm computes sequence 
am members pass log log log memory bits number probability deviates 
fixed algorithm implemented performing member sequence constant number arithmetic finite field operations elements log log bits 
proof 
put log 
previous algorithm output algorithm median random variables 
ys average random variables xij xij independent identically distributed random variables 
xij computed sequence way log log memory bits follows 
fix explicit set 
vh vectors length entries wise independent distinct coordinates 
choice 
exactly fraction vectors coordinate number ij 

described sets known orthogonal arrays strength constructed parity check matrices bch codes 
implement construction need irreducible polynomial degree gf smallest power greater difficult find polynomial log space possible compute coordinate vi log space constant number multiplications finite field gf binary inner products vectors length compute choose random vector vp 
chosen uniformly define imi 
note linear function numbers mi computed pass sequence process maintain current value sum keep value bits vp generated log space 
computed log log bits 
sequence terminates define previous proof compute expectation variance random variables pairwise independent imi similarly fact variables wise independent implies follows var chebyshev inequality fixed prob yi var yi standard estimates chernoff imply previous proof probability median numbers yi deviates completing proof 
log 
space complexity reduced large log log log log applying method maintain sum sufficient accuracy 
easiest way maintain approximations negative positive parts sum log log log log bits analysis formula section chebyshev inequality show gives sufficiently high probability required result 
omit details 
comments estimation flajolet martin described randomized algorithm estimating log memory bits analyzed performance assuming may algorithm explicit family hash functions exhibits ideal random properties 
aware existence family hash functions briefly describe slight modification algorithm simple analysis shows version suffices linear hash function 
proposition exists algorithm sequence members computes number log memory bits probability ratio proof 
smallest integer consider members elements finite field gf represented binary vectors length random members chosen uniformly independently 
member ai sequence appears compute zi ai product addition computed field zi represented binary vector length binary vector denote largest rightmost bits put ri zi 
maximum value ri maximum taken elements ai sequence output algorithm note order implement algorithm keep log bits representing irreducible polynomial needed order perform operations log bits representing maintain log log bits representing current maximum ri value 
suppose correct number distinct elements appear sequence estimate probability deviates considerably 
properties random mapping ax maps ai zi need fixed ai zi uniformly distributed probability zi precisely mapping pairwise independent 
fixed distinct ai aj probability zi zj precisely fix element appears sequence wx indicator random variable value iff ax zr wx ranges elements appear sequence linearity expectation expectation wx expectation pairwise independence variance markov inequality cf prob zr zr similarly chebyshev inequality prob zr var zr zr prob zr var zr zr zr 
algorithm outputs maximum zr inequalities show probability ratio smaller needed 
lower bounds section lower bounds space complexity randomized algorithms approximate frequency moments fk comment space required compute moments randomly precisely approximate deterministically 
lower bounds obtained reducing problem appropriate communication complexity problem existing results prove required lower bounds establishing corresponding communication problem 
easiest result illustrates method proof randomized approximation requires linear memory subsection 
presenting simple proof recall basic definitions facts concerning error probabilistic communication complexity function introduced yao 
consider parties unlimited computing power wish compute value boolean function binary vectors length party possesses second possesses perform computation parties allowed send messages random decisions 
communication output correct value probability worst possible 
complexity expected number bits communicated worst case best protocol 
shown yao extended babai frankl simon estimated considering related notion error distributional communication complexity probability measure possible inputs 
parties apply deterministic protocol output correct value pairs set inputs measure exceed 
shown 
denote boolean function called disjointness function iff subsets 
characteristic vectors intersect 
researchers studied communication complexity function 
improving result schnitger proved fixed 
razborov exhibited simple measure inputs function showed measure 
lower bound space complexity estimating follows easily result 
lower bound approximation fk fixed complicated requires extension result razborov 
space complexity approximating proposition randomized algorithm outputs sequence elements 
number probability deviates fixed memory bits 
proof 
algorithm uses memory bits describe simple communication protocol parties possessing respectively compute bits communication 
denote numbers entries respectively 
sequence length consisting members subset characteristic vector arranged arbitrarily followed members subset characteristic vector party knowing runs approximation algorithm members sends content memory second party knowing continues run algorithm approximating rest sequence second party outputs disjoint iff output approximation algorithm smaller outputs 
obvious correct value probability precise value sets disjoint 
desired result follows theorem mentioned 

easy see lower bound holds bigger may consider sequences number occurs times 
method subsection shows linear lower bound holds wish approximate value factor say 
difficult see log log lower bound space complexity randomized approximation algorithm simply final output attain log distinct values positive probability known advance 
log log lower bound space complexity estimating fixed positive 
hand mentioned previous section frequency moments including approximated log log bits 
note lower bound proof need lower bound way probabilistic communication complexity disjointness function protocol described communication party second 
lower bound holds arbitrary communication deduce space lower bound approximation allow algorithms observe sequence order constant number times 
space complexity approximating fk subsection prove 
theorem fixed randomized algorithm outputs input sequence elements 
number zk prob zk fk fk uses memory bits 
prove theorem considering appropriate communication game studying complexity 
analysis game similar razborov requires modifications additional ideas 
proof 
positive integers dis communication game played players 
ps 
define put 

input player pi subset ai cardinality called subset 
player knows subset information 
input sequence 
called disjoint sets ai pairwise disjoint called uniquely intersecting sets ai share unique common element sets ai pairwise disjoint 
objective game distinguish types inputs 
players exchange messages predetermined probabilistic protocol 
protocol player outputs bit 
protocol called correct disjoint input sequence probability bit uniquely intersecting input sequence probability bit 
value output bit input sequence may arbitrary 
length protocol maximum possible input sequences 
expected number bits communication 
order prove theorem prove 
proposition fixed length randomized correct protocol communication problem dis 
simple argument order prove proposition suffices exhibit distribution inputs prove deterministic communication protocol players total communication bits produces output bit errs probability probability computed input distribution 
define distribution input sequences 
follows 
random partition pairwise disjoint sets ij chosen uniformly partitions parameters 
aj random subset cardinality ij 
probability define aj aj probability define aj ij aj useful observe alternative equivalent definition choose random partition aj random subset cardinality ij 
subsets aj contain contain keep input sets discard repeat random choice 
note probability input sequence 
generated dis tribution disjoint precisely probability uniquely intersecting 
note gives disjoint input sequence probability uniquely input sequence probability 

denote random disjoint input sequence 
denote random uniquely intersecting input sequence 
box family xs xi set subsets clearly family tuples subsets standard simple arguments imply set input sequences 
corresponding fixed communication players forms box 
shall see shows lemma suffices establish lower bound average communication complexity deterministic correct protocol game 
note statement lemma probabilities taken distribution defined 
note approach probabilistic analogue common reasoning deriving lower bounds deterministic communication complexity showing large rectangles monochromatic 
lemma exists absolute constant box xs prob 
xs 
xs ct prob prove lemma fix box xs 
recall distribution inputs defined choosing random partition partition aj xj denote conditional probability aj lies xj partition random choice input sequence 
conditional probabilities xj xj defined analogously 
partition called bad satisfies xj xj ct small absolute constant chosen 
partition bad bad bad 
need statements bad partitions 
lemma exists choice constant inequality holds 
set pairwise disjoint subsets conditional probability partition bad ir proof 
note ir known union ij known possibilities partition number subsets ij belong xj smaller ct possible partitions xj ct implying bad 
case conditional probability bound zero assertion lemma holds 
consider case subsets ij xj denote family subsets put ij 

pi denote fraction members contain xi log log binary entropy function 
standard entropy inequality cf pi order determine partition choose elements xi crucial observation choice xi results bad partition pi pi implying pi absolute positive constant denote number elements xi choice results bad partition discussion ct bc implies larger log ct choosing sufficiently small upper bound smaller completing proof lemma 
lemma partition 
xs 
xs ct proof 
definition partition xj xj ct multiplying inequalities definition distribution fact desired result follows 
returning proof lemma indicator random variable value iff bad partition 
similarly indicator random variable value iff bad 
note 
computing expectation partitions prob 
xs 
xs 
xs 
xs ct inequality follows lemma 
follows order prove assertion lemma suffices show 
xs 
xs 
consider fixed choice subsets ir definition partition 
choice union ij known actual element chosen randomly union 
information quantity xr factors corresponding fixed 
factors appear 
factor product xj easy compute follows 
denote number subsets xj contained ij 
xj precisely note choice member probability lies xj exceed lemma probability choice ir conclude 
xs 
xs implying inequality completing proof lemma 
proof proposition 
possible repeat protocol amplify probabilities suffices prove assertion proposition fixed suffices show deterministic protocol length smaller applied inputs generated distribution errs probability 
easy known fixed communication pattern corresponds box inputs 
number communication patterns protocol outputs smaller ct summing assertion lemma boxes corresponding communication patterns conclude probability protocol outputs random input 
times probability outputs random input 
minus 
choosing sufficiently small absolute constant shows case algorithm err probability 
number communication patterns ct number bits communication 
proof theorem 
fix integer 
randomized algorithm approximating frequency moment fk sequence members 
memory bits define simple randomized protocol communication game dis 

inputs players 
player runs algorithm elements set communicates content memory second player 
second player continues run algorithm starting memory configuration received elements set communicates resulting content memory third 
player player number obtains output zk algorithm 
st reports input sequence 
disjoint 
reports uniquely intersecting 
note input sequence disjoint correct value fk st uniquely intersecting correct value fk sk algorithm outputs approximation fk probability protocol dis correct total communication sm 
proposition implies sm showing completes proof 

lower bound proposition holds general protocols way protocols player communicates lower bound space complexity approximating fk holds algorithms may read sequence original order constant number times 
show randomization approximation required estimation fk memory bits 
deterministic algorithms obvious sequence length computed precisely deterministically logarithmic space 
show nonnegative approximation fk say relative error computed deterministically linear number memory bits 
shows randomness crucial approximation algorithms described section 
simple corollary known results concerning deterministic communication complexity equality function 
known results difficult self contained proof communication complexity 
proposition nonnegative integer deterministic algorithm outputs sequence elements 
number fk fk memory bits 
proof 
family subsets cardinality distinct members elements common 
existence follows standard results coding theory proved simple counting argument 
fix deterministic algorithm approximates fk fixed nonnegative 
members sequence length starting members sorted order set members sorted order 
algorithm runs sequence form memory configuration reads elements sequence depends 
pigeonhole principle memory log bits distinct sets content memory reading elements equal content reading elements 
means algorithm give final output sequences 
contradicts assumption values fk sequences differ considerably fk fk 
answer algorithm relative error exceeds sequences 
follows space algorithm log completing proof 
randomized precise computation shown randomness essential algorithms approximating frequency moments fk described section 
observe fact approximation algorithms crucial sense precise computation moments requires linear space allow randomized algorithms 
proposition nonnegative integer randomized algorithm outputs sequence elements 
number fk probability fixed memory bits 
proof 
reduction proof proposition easily works proves assertion main result 
tight lower bounds approximation results section show logarithmic memory suffices approx randomly frequency moments sequence terms constant factor fixed small error probability 
precisely log log bits suffice approximating log bits suffice estimating log log log bits suffice approximating statement follows proof theorem 
difficult show upper bounds tight constant factor shown 
proposition sequence elements 

randomized algorithm approximating additive error probability log memory bits 
ii randomized algorithm approximating probability log log memory bits 
iii randomized algorithm approximating probability log log log memory bits 
proof 
result follows construction proof proposition known fact randomized communication complexity equality function value iff bit numbers log 
run input sequence form notation proof proposition algorithm decide equal 
ii length sequence number final content memory admit log distinct values positive probability giving desired result 
iii required memory log argument mentioned proof part log log argument mentioned proof part ii 
concluding remarks seen surprisingly space efficient randomized algorithms approximating frequency moments space gained trivial algorithms approximation fk 
conjecture space lower bound holds integer non integer 
interesting determine estimate space complexity approximation non integral values space complexity estimating functions numbers mi 
method described section applied cases give nontrivial space savings 
example difficult design randomized algorithm general scheme subsection approximates log mi 
fixed small relative error small fixed error probability mi log log memory bits 
outline algorithm 
log absolute constant algorithm computes random variables 
ys outputs median yi average random variables xij xij independent identically distributed random variables 
variables xij computed sequence way log memory bits follows 
choose random member ap sequence index chosen randomly uniformly numbers 
suppose ap 

put aq define log difficult check expectation log mi 
variance satisfies var log chebyshev inequality implies correctness algorithm subsection 
practice may able obtain estimation algorithms typical data sets efficient worst case performance implied lower bounds 
gibbons algorithm maintaining approximate list popular items approximate counts approximating small memory works frequency distributions practical interest 
acknowledgment colin mallows helpful comments regarding statistics literature pointing 
alon babai itai fast simple randomized parallel algorithm maximal independent set problem algorithms 
alon spencer probabilistic method john wiley sons new york 
babai frankl simon complexity classes communication complexity theory proc 
th ieee focs 
cover thomas elements information theory wiley 
dewitt naughton schneider seshadri practical skew handling parallel joins proc :10.1.1.119.6066
th int conf 
large data bases 
pp 

flajolet approximate counting detailed analysis bit 
flajolet martin probabilistic counting focs 
gibbons matias poosala fast incremental maintenance approximate histograms proc 
rd int conf 
large data bases appear 
gibbons matias practical maintenance algorithms high biased histograms probabilistic filtering technical report bell laboratories murray hill nj dec 
surprise indexes values statistical computation simulation 
probabilistic counting large number events manuscript 
haas naughton seshadri stokes sampling estimation number distinct values attribute proc 
st vldb conference 
schnitger probabilistic communication complexity set nd structure complexity theory conference 
ling sun supplement sampling methods query size estimation database system sigmod record 
morris counting large numbers events small registers cacm 
razborov distributional complexity disjointness proc 
icalp 
appear theoretical computer science 

whang vander zanden taylor linear time probabilistic counting algo rithm database applications acm transactions database systems 
yao complexity questions related distributed computing proc th acm stoc 
yao lower bounds probabilistic arguments proc th ieee focs 

