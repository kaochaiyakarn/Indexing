event notification pattern integrating implicit invocation object orientation dirk riehle union bank switzerland ch rich mail riehle ubs ch managing inter object dependencies object oriented systems complex task 
changes object require dependent objects change accordingly 
making object explicitly inform dependent object state changes object interfaces implementations hampering system evolution maintenance 
problems overcome introducing notion implicit invocation object oriented systems decoupling mechanism objects 
presents event notification pattern pattern smoothly integrate implicit invocation mechanisms object oriented designs 
state changes objects dependencies objects maintenance links objects explicit class objects 
resulting structure highly flexible manage inter object dependencies object oriented systems efficiently 
object orientation acknowledged major architectural style organizational pattern software systems 
numerous projects shown style scales basic large systems 
practice seldom pure form object oriented systems enhance basic paradigm styles solve specific problems 
problems maintenance update dependencies objects 
changes object may affect objects subsequently updated 
shows dependency established maintained intertwining object interfaces hampering system evolution 
done introducing architectural style implicit invocation object oriented systems 
system implicit invocation components objects know explicitly 
communicate announcing events 
objects register events announcing event object leads notification objects registered event 
changed object perspective invocation dependent objects operations implicit gave style name 
decoupling mechanism manage inter object dependencies object oriented systems efficiently 
draws previous implicit invocation experiences sullivan notkin riehle 
presents integration rationale implicit invocation objectoriented systems elaborates event notification pattern 
pattern conceptually similar observer pattern gamma 
different structure lends different implementations overcome disadvantages observer pattern 
particular pattern presents implementation technique parameterized types templates achieve type safe forwarding event notification parameters overcoming problems earlier implementations implicit invocation mechanisms 
event notification observer pattern design implementation wide ranging number software systems example interactive software systems software development environments distributed systems real time monitoring systems 
systems benefits integration different respects 
focusses decoupling object interfaces ease system evolution maintenance 
section discusses implicit invocation style introduced object oriented systems 
presents rationale event notification pattern shows respects differs published theory practice object systems 
page 
observer pattern 
section presents actual event notification pattern 
section discusses related implicit invocation section summarizes presents 
implicit invocation object oriented systems implicit invocation defined architectural style garlan shaw shaw 
system implicit invocation consists components granularity ranging simple objects full fledged reactive processes 
connected implicit invocations operations 
invocations happen behalf events announced components dispatched usually central managing facility components registered events 
mechanisms example software development environments reiss 
formalizations style garlan notkin luckham 

systems architectural style object orientation data abstraction shaw greatly benefit implicit invocation mechanisms 
basically running object oriented system viewed graph interconnected objects 
objects objects delegate 
delegating object means dependent object precisely dependent object state declared interface 
object referenced aliased object may change dependent objects knowing change 
consequence objects get synchronization changed object updated 
changed object inform dependent objects explicit operation invocations changed object interface implementation dependent depending objects 
introduces cyclic dependencies avoided hampers system evolution maintenance sullivan notkin 
dependencies avoided implicit explicit invocations dependent objects operations 
event notification pattern shows integration achieved smoothly 
basic integration rationale object state declared interface 
object state change due mutating operation call 
leads visible state change 
changes described terms formal object model example finite state machines advanced modeling techniques harel coleman booch 
implicit invocation mechanism integrated object oriented system notion event event represents state change particular object 
type event represents different type state change object state model 
object changed announces event corresponding state change triggering event notification causing dependent objects take notice state change 
event notification essentially implicit invocation predefined operations dependent objects 
event notification major coordination mechanism system solely implicit invocation style object oriented systems accompanied explicit invocation mechanism opposite direction object particularly interested receiving event notifications objects making means dependent 
dependent object informed state changes objects 
introduce implicit invocation object oriented systems means managing dependencies objects ensure consistent state 
achieved event notification mechanism takes care dependent objects notified changes objects depend 
subsequently update 
ways event notification mechanisms example distributed systems events may indicate component alive 
major application events object oriented systems dealing concentrates problems maintaining inter object update dependencies chose focus problem 
summary event notification pattern implementations implicit invocation mechanisms example notkin garlan scott 
event notification pattern takes stock implementations elaborates experience 
discussed section rationale object state explicit usual access operations dependent objects query state 
possible state changes explicit state change objects publicly accessible object interface 
dependent objects register state change objects causes notified case event notification triggered state change object owner 
state change objects freely introduced correspond state changes represent possibly underlying formal state model 
dependent object dependencies explicit event stub objects interface represent dependencies class objects 
notations programming languages module interconnection languages software architecture long dependencies explicit imports module component interfaces wirth prieto diaz neighbors shaw 
event stubs extend concept event notification systems 
event stubs linked state change objects objects directly intermediate event link objects 
event link object propagates event notification dependent object 
possible chain event links dependent object event stub special event link 
pattern lets developers decouple dependent objects objects depend lets state dependencies objects explicit class interfaces lets dynamically selectively register dependents state changes lets encapsulate notification process event link objects 
comparison observer pattern event notification pattern similar observer pattern gamma 

structure observer pattern original smalltalk change update mechanism goldberg robson 
dependent objects called observers offer update operation invoked objects depend 
objects called subjects call update observers state change occurs 
observer event notification pattern rationale differ important respects event notification pattern state model making possible state changes dependencies state changes explicit class objects 
vital information visible structure observer pattern buried implementation code 
dependent objects event notification pattern may selectively register certain state changes 
notified particular state change occurs 
dependent objects observer pattern notified state change occurs regardless interested 
noted gamma suggest enhance basic observer pattern selective registration events 
emphasizes importance possibility selectively register certain events 
observer pattern single predefined operation invoked carry event dispatch appropriate operation handle event 
event notification dispatch carried selectively registering state change objects event stubs 
event notification event stopping behavior 
objects selectively register state changes hard event notification mechanism chain responsibility gamma 
observer pattern lets developers provide class default forwarding behavior events chain responsibility implemented easily 
event notification observer pattern similar goals 
depends level abstraction chosen look pattern decide important certain differences 
software design level observer event notification pattern different patterns different design structures 
software architecture level serve similar purposes treated single general pattern 
presentation event notification pattern section focuses software design level just observer pattern gamma 

event notification pattern section presents event notification pattern 
draws implicit invocation mechanisms garlan notkin notkin 
presentation form gamma 

intent manage update dependencies objects introducing event notification mechanism 
state model dependencies thereon explicit class interfaces achieve transparency 
known implicit invocation mechanism 
motivation object delegates object services dependent 
precisely dependent object state defined interface 
ensure consistency respect objects depends 
sufficient dependent object poll object state certain predefined points time 
large number systems including real time systems interactive applications software development environments adequate solution 
adequate solution changed object explicitly invoke operations dependent objects inform change state changed object dependent objects 
problem shows example interactive systems change object state got lead immediate updates user interface 
simple mvc application design krasner pope consist view objects model object 
view objects user interface objects view parts model object contains application data 
consider model object representing spreadsheet 
class interface access operations return contents cell results predefined computations spreadsheet 
data typist enters incoming data model 
model object may partially consistent state raising exceptions cells computation results accessed aren available 
data typist tabular view spreadsheet 
manager interested result computations spreadsheet simple interface viewing results simple data 
third person analyst interested differential changes rows columns spreadsheet compared older spreadsheets 
wish see graphical output canvas 
shows rough software design 
shows graphical notation rectangle represents class arrow represents relationship 
line triangle depicted shows inheritance relationship 
view class view class spreadsheet model class view class software design corresponding views single model object 
unclear dependencies control flow marked question mark 
simple application sufficiently demonstrates relevant problems 
dependent view objects tabular view computed results graphical visualization depend single model object 
dependencies differ data typist wish see spreadsheet manager computed results available analyst changes data occur 
problem solved help event notification pattern 
state model dependencies thereon introduces facilities manage dependencies implicit invocation 
model object explicitly declares state usual access operations state change objects represent possible state changes object state model 
view objects explicitly declare possible dependencies model object event stub objects interface 
view objects third party object links event stubs corresponding state change objects 
spreadsheet object example offers state change object interface represents state changes single spreadsheet cell 
spreadsheet offer state change objects represent result changes computed spreadsheet 
tabular graphical view objects create event stubs link state change object representing cell state change 
result view object may link state change objects representing changes computed results 
state change occurs model object corresponding state change object triggered 
state change object turn triggers event stubs holds call predefined operation owners views 
example tabular graphical view objects notified spreadsheet cell changed 
shows interaction diagram dynamics process 
terminology observer pattern view objects called observers model object called subject 
subject doesn know observers uses event notification mechanism notify changes state 
say event happened object changed state 
usually caused mutating operation call object 
event leads notification dependent objects inform state change 
notification essentially implicit invocation predefined operations dependent objects 
applicability event notification pattern integrate architectural style implicit invocation architectural style data abstraction precisely object orientation 
situations occur object depends number objects notified case state changes objects soon possible polling option 
object wants informed specific state changes objects occuring state change 
notification process due object change state carried anonymously predefined dependent operations implicitly invoked 
observers subjects statically decoupled example stem different libraries subject assumptions observers 
structure shows structure event notification pattern 
observer 

forward 
operation observer indirect invocation implicit invocation subject statechange statechange 
statechange observer operation 
announce 
registered stubs register unregister stub forward class diagram event notification pattern 
subject instance holds state change objects interface forward notification observer event stub 
participants participants shown structure diagram identified subject defines state terms usual access operations state change objects 
statechange represents possible state change subject state model 
offers operations subject trigger event notification 
offers operations register unregister observers event stub objects 
observer declares dependencies objects state event stubs interface 
provides event stubs operation called case invocation 
represents dependency object state model class object 
knows operation owner observer called case invocation 
collaborations subject changes state triggers corresponding state change object 
state change object distributes notification event stubs 
event stub forwards notification owner observer 
interaction diagram shown describes dynamics event notification motivating example 
assume tabular view object changes cell spreadsheet explicit invocation 
spreadsheet triggers state change object representing state change cells 
state change object forwards notification event stubs tabular graphical view objects registered particular event 
event stubs forward notification predefined operation respective owners 
astatechange operation announce 
forward 
forward 
interaction diagram motivating example 
illustrates case changed spreadsheet cell 
consequences event notification pattern lets developers decouple observers subjects preserving vital dependency relationship needed provide immediate feedback maintain system consistency 
particular event notification pattern advantages responsibilities consequences 

static decoupling observer subject 
subject need assume observers 
particular event notification depend specific superclass observer inherit 

explicit modeling state 
explicit modeling subject state access operations state change objects helps clarify class semantics 
possible events explicit state change objects buried implementation 

explicit modeling dependencies 
dependencies objects modeled event stubs object class interface explicit 

derivation state change objects 
number different state change objects fixed derived state model parts modeled formally 

selective registration 
observer selectively registers certain state changes 
test events interested 
observer decides advance notified event 

early dispatch 
dispatching event associated state change implicitly done event stub object calls predefined operation 

event stopping behavior 
observer receives notifications events explicitly registered difficult implement chain responsibility implicit invocation mechanism 
implemented separate protocol 

third party configuration 
observers fully decoupled rely principle event stub objects dependency relationship configured easily third party objects 
implementation issues considered implementing event notification pattern 
issues discussion observer pattern gamma 


reusable statechange classes 
key straightforward implementation event notification pattern design reusable state change event stub classes 
dynamically typed lan guages smalltalk clos doesn pose problems 
done statically typed programming languages overhead long parameterized types class bound operation available see sample code 

abstracting notification protocol 
best introduce general class particular subclass 
general class defines protocol forwarding event notification 
subclasses implement way forwarding carried different ways serving different purposes 
revised structure diagram enhancement shown 
class example implement forwarding process remote procedure call communication facility 
serves notification transparent process boundaries 
observer 

forward 
operation observer indirect invocation implicit invocation forward 
forward 
subject statechange statechange 
statechange announce 
register unregister registered stubs stub forward revised structure diagram showing class specializations inheritance indicated triangle line connecting classes 

chain event links 
runtime event links concatenated chain event links results 
event stub propagates notification observer 
purpose event link chain forward notification single observer proxy different process dispatches event notification set local observers 

guidelines observer subject design 
implemented carefully observers subjects captured infinite change update loop 
observer changing subject receive event notification leading changes subject leading event notifications forth 
design implement observer way reacts notification non mutating operations subject 
consequence subject clearly separate mutating non mutating operations interface 
rule transitive means observers shouldn change objects predecessors subjects notification process possibly consisting stages 

parameterization event notification 
parameterization event notification chosen system need 
difficult task subject define protocol notification process making undue assumptions context 
possible parameterizations stand 
variants coexist possibly state change objects representing state change parameters just subject event identification passed 
state change specific parameters observer retrieve state information subject possibly problematic network context results performance penalties 
parameterization sense observer seldom retrieves data 
data affected state change passed 
fully informs observers outcome state change usually don request information subject 

concurrency 
design issues concurrency covered pattern explicit actual design 
order notifications introduce hidden dependencies see guidelines observer subject design 
observers independent respect notifications received subject 

dependency manager 
relationships event stub state change objects maintained single managing facility state change object got collection event links 
doing memory consumption reduced 

event history 
sense log events announced object observers startup late catch object 
query state may appropriate objects encapsulating large amounts data 
sample code examples 
illustrates parameterless statechange object decoupling simple counter object 
example demonstrates basic relationships structure implementations pattern 
second example demonstrates power parameterized types implement pattern describing actual design motivation section 
lines code show classes counter 
counter maintains possibly increments counter 
serves display counter value screen 
class counter public statechange virtual int value virtual void increase counter private int value class public counter virtual void update private counter counter link direct counter interface 
counter doesn know particular views informs statechange object defined interface 
counter view links counter object 
interfaces implementations classes defined follows class public virtual void forward template class class public public obs void fun obs obs fun fun virtual void forward obs fun private obs void fun class statechange public virtual void register link append link virtual void unregister link remove link virtual void announce iter iter iter forward statechange statechange new list private list class defines general observer independent protocol receive event notification 
subclass parameterized class takes argument type observer 
turns concrete class specialized specific observer class 
concrete object hooked state change instance register operation 
statechange object keeps track objects doesn know observer classes 
code links update operation state change object counter counter counter link new update counter counter counter register link creation process instance consists steps 
template instantiated concrete observer class formal parameter leading concrete class object created 
carried new new object receives observer operation called case event notification 
hooks object establishing link counter object 
decoupling achieved unidirectional knows counter vice versa 
object available public interface third party object taken linked counter knowing 
complex example motivation section considered 
code shows interface spreadsheet class observed different kinds views class spreadsheet public operations changed cell virtual bool int int virtual item int int statechange item int int virtual void enter item int int computable result virtual bool valid virtual item getresult statechange item valid computable result virtual bool valid virtual item getresult statechange item valid operations virtual void run spreadsheet private item cells item result item result spreadsheet offers state change objects observers hook event stubs type statechange item int int notify observers changes cell spreadsheet valid type statechange item notify observers result available valid type statechange item notify observers result available 
classes instantiated template classes statechange statechange defined follows template class arg class statechange public virtual void register arg virtual void unregister arg virtual void announce arg statechange private list arg template class arg class arg class arg class statechange public virtual void register arg arg arg link virtual void unregister arg arg arg link virtual void announce arg arg arg statechange private list arg arg arg parameters arg argn class formal parameters template substituted types objects passed concrete event notification 
types derived state transitions state space spreadsheet class statechange objects represent 
status result changes invalid computed valid corresponding flag switches true variable holding result set computed value 
pragmatic reasons assumed invalid suffices parameterize event notification new result value omitting flag 
corresponding class subclass similar counter example template class arg class public virtual void forward arg template class class arg class public arg public obs void fun arg virtual void forward arg private obs void fun arg corresponding classes observers event link classes hook state change objects spreadsheet 
assuming class interested state changes declared spreadsheet create corresponding event stub objects called valid valid 
initialization code look spreadsheet ss new item int int ss register valid new item result valid ss valid register valid valid new item result valid ss valid register valid registers event stubs state change objects spreadsheet 
possible fully decouple observer subject 
code hooks spreadsheet knowing 
item int int statechange item int int spreadsheet register looks unknown source provides values dimensional matrix 
spreadsheet replaced easily source follows event notification protocol 
announcing cell changed straightforward 
spreadsheet class simply calls announce cells announce forwards call notification parameters registered event links event stubs case forward notification directly observers created 
known uses different implementations pattern reported garlan scott notkin 
pattern framework riehle 
related patterns pattern closely related observer pattern implicit invocation gamma notkin 
conjunction mediator pattern gamma sullivan notkin sullivan integrates mediates independent objects 
related discussed implementation event notification pattern related implicit invocation implementations garlan scott notkin sullivan notkin 
classes objects enhanced event notification mechanism called behavior types sullivan 
model elaborates object oriented runtime model 
dependencies events explicit class interfaces represents connector linking objects class object 
referenced implicit invocation mechanisms statically typed languages rely additional tools code generators macro preprocessors introduce events software modules 
parameterized types avoids need additional tools greatly eased programming efforts 
programs type safe solving typing issues considered unclear notkin 

omg specified event service model corba omg similar pattern 
corba event service specification general leaves open design choices decided pattern advance 
corba model accepts typed untyped events preferred pattern implementation explicitly introduces static typing event notifications 
corba model uses event channels process forward events clients 
forwarding synchronous asynchronous 
event channel distribute event receiver 
event notification pattern uses event links forward events dependent objects 
event links synchronous asynchronous communication 
pattern doesn event links distribute event receivers expects different receivers register directly state change object 
demonstrated implicit invocation object orientation integrated 
shown discussing event notification pattern pattern clear rationale object state model 
rationale possible state changes object dependencies thereon runtime links object dependents explicit class objects 
shown pattern implemented efficiently type safe fashion parameterized types 
overcomes problems earlier implementations implicit invocation mechanisms 
elaborate version sample code section compiled tested obtained author 
interesting note patterns similar rationale observer event notification evolved independently lead different structures 
worthwhile understand explore patterns software cultural phenomenon concrete patterns arising specific background experience 
task spanning different communities relevant resulting integration interesting challenges patterns community undertake 
acknowledgments wish steve kai uwe stefan douglas schmidt wolfgang strunk henning wolf reviewing commenting helping improve 
karl heinz reviewing commenting 
originally pointed guidelines observer subject design section 
bibliography 
sch 

computer supported cooperative software engineering sniff 
see conference proceedings 
booch 

object oriented analysis design applications 
nd edition 
redwood city california benjamin cummings 
coleman hayes bear 

introducing statecharts object oriented design 
ieee transactions software engineering 
coplien schmidt 
eds 

pattern languages program design 
reading massachusetts addison wesley 
gamma helm johnson vlissides 

design patterns elements reusable design 
reading massachusetts addison wesley 
garlan notkin 

formalizing design spaces implicit invocation mechanisms 
lncs vdm conference proceedings 
garlan scott 

adding implicit invocation traditional programming languages 
icse conference proceedings 
garlan shaw 

software architecture 
advances software knowledge engineering volume 
world scientific publishing 
see cmu technical report cmu cs 
pittsburgh pennsylvania carnegie mellon university 
goldberg robson 

smalltalk language 
reading massachusetts addison wesley 
harel naamad pnueli sherman trakhtenbrot 

statemate working environment development complex reactive systems 
ieee transactions software engineering 
krasner pope 

cookbook model view controller user interface paradigm smalltalk 
journal object oriented programming 
luckham augustin vera bryan mann 

specification analysis system architecture rapide 
ieee transactions software engineering 
notkin garlan griswold sullivan 

adding implicit invocation languages approaches 
lncs conference proceedings 
omg 

event service specification 
omg tc document 
prieto diaz neighbors 

module interconnection languages 
journal systems software 
reiss 

connecting tools message passing field environment 
ieee software 
riehle 

pattern language tool construction integration tools materials metaphor 
coplien schmidt 
shaw 

patterns software architecture 
coplien schmidt 
shaw deline klein ross young 

abstractions software architecture tools support 
ieee transactions software engineering 
sullivan 

mediators easing design evolution integrated systems 
ph thesis technical report 
department computer science engineering university washington 
sullivan notkin 

reconciling environment integration software evolution 
acm transactions software engineering methodology 
wirth 

programming modula 
berlin heidelberg springer verlag 

