extending erlang safe mobile code execution lawrie brown dan school computer science australian defence force academy canberra australia computer science laboratory ericsson ab sweden may phone fax email lawrie brown edu au phone fax email dan cslab ericsson se extending erlang safe mobile code execution discusses extensions functional language erlang provide secure execution environment remotely sourced code 
contrast focused securing procedural languages 
language erlang provides high degree inherent run time safety means ort focused providing suitable degree system safety 
main changes needed unforgeable capability access rights control system resources provision hierarchy execution nodes provide custom views resources available impose utilisation limits support remote module loading 
discuss prototype implementations changes evaluate utility impact visibility users language mention progress foundation specify safety policies ltering messages server processes 
extensions functional language erlang secure execution environment mobile code 
supporting safe mobile code area considerable research particular increasing java similar languages see surveys 
focused securing traditional procedural languages derivatives 
considers changes needed secure production functional language erlang 
believe functional language provide signi cant bene ts productivity maintenance large applications bene cial provide bene ts applications requiring remotely sourced code 
believe functional languages avery high degree intrinsic run time safety means changes required provide safe execution environment smaller needed secure procedural language 
discuss results initial prototypes safer erlang investigate assertions 
term mobile code refer code sourced remotely system executed 
code sourced remotely assumed level trust locally sourced code needs executed form constrained sandbox protect local system accidental deliberate inappropriate behaviour 
key assumption local system trusted provides adequate access control mechanisms 
assume appropriate protection internode communications encryption techniques ipsec ssl physical isolation provided 
taxonomy issues related distributed hypermedia applications connolly particular distinguishes run time safety concerned runtime system guarantee program behave source code abort system safety whichis concerned possible control access resources piece executing code 
similar emphasis constraining resource access certifying code identi ed rubin adl tabatabai 
traditionally necessary protection access control mechanisms needed system safety supplied heavyweight processes hardware assisted memory management 
successful history proven means providing safety traditional computing environments 
believe applications rapid context changes loading running code wide range sources varying trust levels mechanisms impose great overhead 
tend restrict portability code sourced 
lightweight protection mechanisms typically rely language features machine provide necessary safe execution environments portable code 
approach safe mobile code may combination sandbox proof carrying code approaches identi ed rubin 
traditional focus safe mobile code execution securing procedural languages run time environment 
best known example development production language 
examples include telescript brown thorn 
languages ort expended provide suitable degree run time safety order system safety provided 
part due ease types forged allowing unconstrained access system 
anumber attacks systems exploited failures run time safety cf dean mcgraw felten oaks yellin 
providing safe mobile code support functional language 
motivated evidence suggests functional language lead signi cant bene ts development large applications providing better conceptual match problem speci cation 
argues conceptually hughes example 
signi cant bene ts reported large telecommunications applications written erlang see armstrong 
addition believe dynamically typed functional language provide high degree intrinsic run time safety changing type interpretation impossible explicit system calls 
noted connolly observes languages objective caml scheme provide high degree run time safety need provide appropriate level system safety 
greatly reduce required support safe mobile code execution languages 
need assume basic run time system correctly enforces type accesses language semantics checking verifying considerably easier 
objective caml closest respects safe erlang system discuss 
whilst objective caml necessary features run time safety system safety relies signed modules created trusted compilation sites 
approach provides appropriate system safety constraining execution environment nodes controlling resource access untrusted imported code unable access resources permitted executes 
erlang discussed authors initially independently decided concentrate language erlang :10.1.1.101.4111:10.1.1.126.9642
erlang dynamically typed single assignment language uses pattern matching variable binding function selection inherent support lightweight concurrent distributed processes error detection recovery mechanisms 
developed ericsson computer science laboratory satisfy requirement language suitable building large soft real time control systems particularly telecommunications systems 
erlang system released open source product freely available download 
erlang system written erlang including compilers debuggers standard libraries just core run time system number low level system calls known builtin functions written distributed transparent processes spawned nodes locally 
erlang node instance run time environment implemented single process threads unix systems 
erlang currently development large telecommunications applications usage increasing 
anticipated applications development increasingly outsourced executed critical systems 
need support applications mobile agents roam number systems 
require mobile code provision appropriate level system safety 
extensions proposed believe provide 
current limitations erlang erlang core language safe execution environment provides number advantages 
instance pure functional language functions manipulate dynamically typed data return value intrinsically safe apart problems excessive utilisation cpu memory 
functions permitted side ects may threaten system safety 
side ects possible erlang function accesses processes sending receiving messages signals viewing process information changing ags 
accesses external resources outside erlang system les network hardware devices open port bif 
accesses permanent data databases managed database 
safer erlang requires controls side ects permitted 
erlang process key concept 
realistic applications involve processes 
process referred process identi er pid node distributed erlang system 
pid processes send messages send signals including killing examine process dictionary operations 
erlang regards external resources devices les executing programs network connections processes albeit certain restrictions way unix regards devices special sort le 
processes called ports referred port number pid access manipulate resource 
consider code excerpt account management server started registers name bank awaits transactions update account balance module 
export start 
start sum start account server register bank self register bank account sum 
process transactions account sum transaction processing loop receive await transaction pid ref amount account update msg received sum amount update sum pid ref send response back account loop recurse nil server msg received 
started balance updated follows 
spawn bank account process initial sum bank pid spawn start 
ref ref unique ref value bank pid self ref send msg server receive await reply server ref new balance reply says updated ok 
standard erlang pid port identi er access processes external resources powerful 
apart legitimately obtaining pid creator bank pid spawn account example creates new process returns pid receiving message receive bank pid ok looking registered name bank pid bank possible obtain list valid pids system processes simply construct arbitrary pid list integers list pid 
features included support debugging services open signi cant safety hole 
valid pid obtained may send messages referenced process ref send signals including killing exit kill inspect process dictionary process info 
mechanism current speci cation erlang language limit usage pid just sending messages example 
limitation current erlang system safety perspective fact erlang system instance run time environment forms single node 
processes privileges access resources le system modules window manager devices managed system 
mechanism partition access system may mediated trusted server process 
current method providing run separate system separate heavyweight process considerable cost system cpu memory resources 
means limit resources utilised processes apart imposing restrictions entire system 
lastly need provide remote module loading mechanism order properly support mobile agents 
whilst erlang currently supports distributed execution remote spawning processes module containing code executed exist remote system default search path 
modules referenced loaded module resolved remote system 
code loading implemented away remote code server sending code secret 
note pid port identi ers globally unique may passed messages nodes whilst maintaining correct referent 
extensions safer erlang order address de ciencies identi ed believe extensions required areas capabilities may impose ner granularity process resource identi ers making unforgeable speci ed set rights speci instance 
nodes form hierarchy erlang system instance runtime environment provide custom context services available restrict code access external resources impose utilisation limits cpu memory 
remote module loading may allow execution code modules sourced system retaining knowledge source system subsequent module sourced system local module library 
capabilities de ne capability globally unique time space unforgeable name speci instance resource list rights operations permitted resource holders capability 
capabilities replace existing unconstrained identi ers nodes ports processes resource may referred di erent capabilities giving owners capabilities di erent rights 
capabilities ensure identi ers forged limit usage operations desired 
created veri ed node manages resource resources migrate 
node speci es domain capability able select appropriate mechanism provide desired level security 
resources referenced reused new process arguments new instance example revocation major issue traditionally capability systems 
usage capabilities invalidated associated resource destroyed 
process dies 
processes may possess invalid capabilities attempt raise invalid capability exception 
capabilities control resource access echoes provide safe resource systems amoeba 
amoeba general operating system heavyweight protection mechanisms isolate processes running arbitrary machine code provide custom contexts 
rely language features machine provide lightweight protection mechanisms lower cost system resource 
capabilities may implemented ways including encrypted hash capabilities cryptographic hash function cf create encrypted check value capability information kept clear 
node creation capability create check hash value 
overhead validating check value minimised local encrypted capabilities checked creation import simply agged say hidden data type tag indicate veri ed 
subsequent capability incurs overhead 
remote capabilities delays due cryptographic overheads swamped network latencies 
node keep key create validate capabilities secret key randomly selected node initialised 
previously created capabilities refer longer extent instances resources previous incarnation node requirement able validate 
approach attacked attempts guess key verifying guess intercepted capability data 
likelihood success depend type hash function care needed selection avoid known aws obvious modes 
password sparse capabilities large random value selected sparsely large address space protect capability node creation maintaining table valid capabilities 
table checked capability capabilities may revoked removal table 
disadvantage approach size table may grow particularly long running server processes user de ned capabilities impossible know 
large tables may take time search careful selection table mechanism reduce minimum 
possible try forge capability success statistically highly improbable attempts detectable abnormally high numbers requests presenting invalid capabilities 
tradeo alternatives trading level security encrypted capabilities space password capabilities 
best alternative depend target environment 
experience prototypes shown important cient execution information needed evaluate guard tests pattern matches locally capability 
information include type node port process value test capabilities refer object 
di erent applications may security tradeo decided support hash password capabilities chosen mechanism node creation need know actual implementation 
chosen capabilities components type nodeid value rights private type type resource referenced 
module node pid port user 
nodeid node creation validity ofthe capability perform operations speci ed resource 
value resource instance referenced capability module node process identi er port identi er erlang term respectively rights list operations permitted resource 
actual rights depend type capability 
process capability include exit link register restrict send 
private opaque term node creation verify validity capability 
cryptographic check value random password value originating node need know 
capability may restricted assuming permits 
results creation new capability referencing resource restricted set rights 
server process example register name restricted capability permitting processes send 

register bank restrict self send register capabilities returned existing node names pids ports create resources 
nodes provided support hierarchy erlang run time system existing erlang node 
provide custom context services available restrict code side ects impose utilisation limits cpu memory 
functionally similar existing erlang nodes additional features 
custom context processes provided having distinct registered names table local names associated capability identi ers advertise services 
names visible nodes 
module alias table maps name executing code name locally loaded module 
module name aliasing mechanism support redirection names safer variants modules provide unique names modules loaded remote systems agents applets 
table consulted map module name external function calls spawns 
capability data information 
keys table necessary create validate unforgeable capabilities node 
restrictions side ects enforced specifying permissible processes execute node open port direct access external resources managed local system 
external process access access processes running erlang systems provide access resources reveal information local system nodes 
database usage access permanent data controlled local database manager 
disabled access resources mediated server processes running local system privileged node trusted enforce appropriate access policy safety 
typically servers advertised registered names table restricted node 
utilisation limits imposed node processes executing node descendent child nodes 
limits imposed cpu usage memory usage max reductions combinations 
general approach creating controlled execution environment follows 
number servers started node suitable privileges provide controlled access resources 
node created side ects disabled 
registered names table preloaded servers loaded modules table pre loaded appropriate local library safe alias names appropriate utilisation limits set 
processes spawned node execute desired mobile code modules appropriately constrained environment 

newnode node rights remote module loading prototypes directly support mobile processes started process may migrate 
new process may spawned remote node 
wehave included extensions ensure subsequent module remotely loaded module sourced originating node resolved local module library 
ensure package multiple modules execute correctly remotely confused local modules may name 
supporting required extension apply bif handler checks originating module local remote proceeds accordingly interpret module requested context querying code server remote node module necessary 
care needed managing acquisition appropriate capability requested module 
issued remote code server receipt request includes valid capability parent module request loading requested module 
prototypes anumber prototypes safer erlang environment di ering goals features supported 
developed dan 
system supports hierarchy subnodes control resource usage support remotely loaded modules encrypted capabilities pids nodes control usage remote module loading 
whilst prototype successfully trial mobile agent application limitations complexity implementation incomplete usage capabilities resource items particular ports fully encrypted capabilities consequent need decrypt information 
uppsala students project design safe mobile agents 
distributed erlang system kqml communication 
safety supported protected secure domains spanning number nodes assumed nodes single domain friendly 
prototype developed brown address perceived de ciencies previous prototypes 
supports hierarchy nodes erlang system provide custom context processes hash password capabilities pids ports nodes constrain values remote module loading 
prototype evolved number versions process re ning clarifying proposed changes 
prototypes implement language extensions glue functions number critical 
substituted modi ed erlang compiler written erlang 
glue routines interact node server processes distinct node erlang system 
glue functions form possibly resolve registered name capability check node manager see operation permitted capabilities rights throw exception key information returned real pid capability perform desired operation user process example exit glue routine look follows exit cpid reason pid node request check cpid exit exit pid reason 
support hierarchy erlang run time system existing erlang node 
node represented node manager process manages state node interacts glue routines manage resource access 
capabilities tuple components identi ed previously ftype nodeid value rights specify type resource capability node managing resource resource instance list access rights permitted resource opaque validation value crypto hash password capability 
support new features provides new check capa op checks supplied capability valid permits requested operation throwing exception 
guard test consult originating node validate capabilities check value 
halt node halt node nodes processes 
capa value create user capability 
mid module create module mid capability named module 
newnode parent name opts creates new node child parent speci ed context options 
restrict capa rights creates new version supplied capability referring resource restricted set rights 
capa capa guard testing supplied capabilities refer resource verifying check value ciency reasons 
explicitly con guring execution environment new features invisible existing user programs 
prototype successfully compiles standard library modules interacting ports require minor systematic changes necessitated protocol currently 
trial demonstration applications 
prototypes demonstrated erlang language successfully extended support safe execution environments minimal visible impact code 
anticipate extensions incorporated erlang run time environment 
remove unavoidable incompatibilities prototypes ensuring safety extensions bypassed 
safe erlang applications mainly concentrated design implementation issues 
couple simple applications successfully implemented prototypes validating basic approach wehave proposed 
otto implemented game number players share common board turn order 
board implemented server enter game player needs send message server containing local protected node server spawn process representing player 
code loading transparent 
local process quite restricted may draw graphics certain window player screen 
able draw graphics screen user vulnerable trojan horse attack process draw new windows asking sensitive information passwords 
contemplating drawing distinctive border windows controlled remote code warn user potential hazard 
second application implemented concerned remote control telephone exchange 
code spawned essential functionality prevent anybody control exchange 
fact system encryption just having authentication mechanism su cient application 
countries encryption restricted mode operation 
custom safety policies extensions described provide mechanisms necessary impose appropriate safety policy enforcing speci policy 
continuing providing appropriate level system safety executing mobile code constrained environment created extensions trusted prevent direct access external resources executing mobile code applying lters messages mobile code server processes mediate access resources 
allows standard servers distinct policies imposed instance 
restricting security problem domain just verifying messages conform desired policy problem considerably tractable approaches proo ng imported code directly example 
cient approaches attempt validate function calls 
safety check function client server messages sketched brown 
describes proposed extensions erlang enhance safe execution remotely sourced code 
changes include provision hierarchy nodes provide custom context restrictions side ects resource limits unforgeable capabilities associated rights modules nodes processes ports user de ned 
extensions needed support remote code loading context 
experimental prototypes evaluate utility extensions described 
mention ongoing safe execution environment foundation imposing custom safety policies ltering messages server processes 
ali reza adl tabatabai geo steven lucco robert wahbe 
cient language independent mobile programs 
sigplan may 
anderson pose wallace 
password capability system 
computer journal 
armstrong 
erlang survey language industrial applications 
th symposium industrial applications prolog tokyo japan oct 
www ericsson se cslab erlang publications ps 
armstrong virding williams 
concurrent programming erlang 
prentice hall nd edition 
www ericsson se erlang sure main news book shtml 
joe armstrong 
development erlang 
proceedings acm sigplan international conference functional programming pages 
acm 
ken arnold james gosling 
java programming language 
addison wesley nd edition 

bellare canetti krawczyk 
keyed hash functions message authentication 
advances cryptology proceedings crypto volume lecture notes computer science pages 
springer verlag 
www research ibm com security keyed md html 
brown 
mobile code security 
auug asia paci world wide web nd joint conference pages sydney australia sept 
auug 
www edu au papers html 
brown 
custom safety policies 
technical note school computer science australian defence force academy canberra australia jun 
www edu au papers ssp html 
brown 
prototype safer erlang 
technical report cs school computer science australian defence force academy canberra australia nov www edu au papers tr html 
dan connolly 
issues development distributed hypermedia applications dec 
www org oop 
dan connolly 
mobile code dec 
www org 
dean felten wallach 
java security hotjava netscape 
proceedings ieee symposium security privacy 
ieee may 
www cs princeton edu sip pub secure html 
brant lal pandey steven 
securing systems external programs 
ieee internet computing nov dec 
john hughes 
functional programming matters 
computer journal 
www cs chalmers se papers ps 
jonsson adapting erlang secure mobile agents 
practical applications intelligent agents multi agents paam london uk apr 
www ericsson se cslab dan reports paam nal paam ps 
krawczyk bellare canetti 
hmac keyed hashing message authentication 
rfc ietf feb 
xavier leroy 
objective caml 
technical report inria 
pauillac inria fr ocaml 
lucco sharp wahbe 
substrate mobile code 
fourth international world wide web conference 
mit dec 
www org pub conferences www papers 
gary mcgraw edward 
java security hostile applets holes 
wiley 



technical report dept computer science uppsala university sweden jan 
www csd uu se ga general safe nae ps gz 
scott oaks 
java security 
reilly 
ousterhout levy welch 
safe tcl security model 
technical report sun microsystems laboratories mountain view ca usa nov 
www com research tcl ps 
rubin daniel jr mobile code security 
ieee internet computing nov dec 
dan 
concurrent functional programming language erlang overview 
workshop multi paradigm logic programming joint intl 
conf 
symposium logic programming bonn 
www ericsson se cslab dan reports web html 
erlang systems 
open source erlang distribution 
www erlang org 
andrew tanenbaum robbert van renesse hans van staveren gregory sharp mullender jack jansen guido van rossum 
amoeba distributed operating system 
communications acm dec 

safety security telescript 
technical report general magic 
cnn com telescript security html 
tommy thorn 
programming languages mobile code 
acm computing surveys sept 

distributed programming erlang 
international symposium parallel symbolic computation sep 
www ericsson se cslab erlang publications dist erlang ps 
yellin 
low level security java 
fourth international world wide web conference 
mit dec 
www org pub conferences www papers html 

