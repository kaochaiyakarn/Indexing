distributed asynchronous collections abstractions publish subscribe interaction patrick th 
eugster rachid guerraoui joe swiss federal institute technology lausanne agilent laboratories scotland edinburgh 
publish subscribe considered important interaction styles explosive market enterprise application integration 
producers publish information software bus consumers subscribe information want receive bus 
decoupling nature interaction publishers subscribers important enterprise computing products emerging commerce telecommunication applications 
claimed object orientation inherently incompatible publish subscribe interaction style 
flawed argument due persistent confusion object orientation modeling discipline specific request reply mechanism promoted corba middleware systems 
describes object oriented abstractions publish subscribe interaction form distributed asynchronous collections dacs 
dacs general capture commonalities various publish subscribe interaction styles flexible allow exploitation differences flavors 
keywords abstraction concurrency distribution asynchrony publish subscribe collection presents distributed asynchronous collections dacs object oriented abstractions expressing different publish subscribe interaction styles qualities service qos 
motivation 
emergence wide area networks importance flexible structured efficient communication mechanisms increasing 
basing complex interaction multiple hosts individual point point communication models burden application developer leads static limited applications 
mobile communications furthermore may simple application spot exact location component moment 
may number entities interested certain information vary entire lifetime system 
constraints visualize partially supported agilent laboratories lombard elisa bertino ed ecoop lncs pp 

springer verlag berlin heidelberg distributed asynchronous collections demand flexible communication models reflecting dynamic nature applications 
publish subscribe interaction style proven ability fill gap 
decoupling parties time space key scalability 
publish subscribe interaction 
classical topic subject publish subscribe involves static classification messages introducing group notions incorporated industrial strength solutions 
publish subscribe frequently push model producers feed software bus information information pushed consumers 
approaches messaging furthermore integrate pull style mechanisms consumers actively poll new information 
term queueing frequently applied referring pull style interaction 
queueing usually expresses semantics means single consumer consume information 
contrast push style interaction information generally pushed consumers 
noticed applications need interaction style require 
bringing variants common denominator emphasis usually put differences 
object oriented publish subscribe sense 
claimed objects really support requirements publish subscribe middleware 
argumentation commonly promoters socalled messaging systems claim objects communicate synchronous method invocations force interacting parties coupled time space 
case argument making attempt unify diverging flavors publish subscribe 
argument fusion object orientation publish subscribe communication style apply current commercial practices distributed object oriented computing mainly derivatives remote procedure call dcom java rmi corba 
convey decoupling publishers subscribers practical objectoriented setting integration object oriented principles messaging go simply wrapping messaging system object oriented api 
publish subscribe abstractions 
capture various interaction styles publish subscribe propose abstraction called distributed asynchronous collection dac 
dac differs conventional collection distributed nature way objects interact representing collection time decoupling interacting parties need time 
space decoupling interacting parties need know 
effort currently integrate messaging existing middleware solutions shown 
eugster guerraoui objects set bag queue dac viewed publish subscribe engine 
fact querying dac objects client expresses interest objects 
words invocation operation dac expresses notion notifications viewed subscription 
terminology adopted observer design pattern dac subject client observer 
abstraction allows unify different publish subscribe styles single framework seen extension conventional collection framework 
show approach allowed mix push pull models semantics different qos 
short publish subscribe interaction styles clearly better application purposes 
simple abstractions publish subscribe interaction called distributed asynchronous collections 
hand dacs allow capture different styles blurring respective advantages 
hand dacs unite styles inside single framework 
roadmap 
remainder organized follows 
section recalls various interaction styles distributed computing motivates need subscription way communicating 
section gives overview dac abstraction 
section gives basic dac api section presents preliminary class implementations 
section show simple example programming dacs 
section discusses performance issues implementation section contrasts efforts related 
section summarizes concludes 
publish subscribe commonalities variations describing dac abstraction overview basics publish subscribe interaction styles 
step publish subscribe communication style compared traditional interaction schemes 
second phase different existing approaches publish subscribe elucidated precisely 
point fact different interaction styles proven certain advantages motivates usefulness unifying inside framework 
publish subscribe perspective publish subscribe paradigm loose communication scheme modeling interaction applications distributed systems 
classic request reply model shared memory communication publish subscribe provides time decoupling interacting parties need time message producers consumers 
shows comparison common communication schemes message passing asynchronous distributed asynchronous collections send may offer asynchronous interaction scheme lacks space decoupling interacting parties need know just request reply communication style 
message passing information producer means locating information consumer information sent request reply interaction model message consumer requires information producer order issue request 
publish subscribe combines time space decoupling information providers consumers remain anonymous 
outlines general applicability communication model appealing 
communication shared memory publish subscribe allows address destinations arity 
basically publish subscribe terminology defines roles subscriber party interested certain information events messages subscribes information signalling wishes receive pieces information event notifications messages manifesting specified characteristics 
leasing special form subscribing duration subscription limited time 
publisher party produces information events messages publisher 
applications participating entities incorporate publishers subscribers allows flexible interaction 
main differences pure push systems participants producers consumers producers supposed orders magnitude higher number consumers 
topics time space arity request reply coupled coupled send decoupled coupled shared memory coupled decoupled publish subscribe decoupled decoupled fig 

different communication models classic publish subscribe interaction model notion topics subjects basically resemble groups 
subscribing topic viewed member group topic abstraction possible build closer coupled communication models top loose ones vice versa proposed instance 
resulting performance second case generally poor 
eugster guerraoui differs group abstraction dynamic nature 
groups usually disjoint sets members group communication replication topics typically overlap participant subscribes just topic 
order classify topics easily great furthermore introduce hierarchy topics 
model topic derived specialized topic called subtopic 
wildcards offers convenient way expressing cross topic requests 
shows example topic subscribing 
subscriber announced interest topics notified events corresponding topics messages mx 
subscriber subscribed topic receives messages related topic message mx 
topic topic fig 

topic subscribing publish subscribe deliver publisher subscriber push pull mixing publish subscribe model action subscribing describes sort registration procedure interested party 
interests events expressed direct interaction 
general distinguish ways interested party interact passive way subscribe choice notifications 
callbacks notified occurrence events 
kind interaction constitutes push model information pushed information bus subscriber 
classic publish subscribe approach enforces applications loosely coupled time 
actively consumer poll new notifications 
task may waste resources adapted asynchronous systems 
fact polling solutions tend expensive scale poorly polling inefficient polling slowly may result delayed responses critical situations 
style called queueing context type interaction refer pull model 
distributed asynchronous collections synchronous pull type interaction blocking interaction 
scenario consumer tries pull information blocked new notification available 
just request reply model variant introduces time coupling rarely common messaging systems 
general push style interaction appropriate certain applications may interested receiving information soon possible precise moments 
situations pull model interest 
delivery semantics reliability issues distributed systems particular considering communication models protocols precise specification semantics delivery crucial issue 
delivery guarantees limited behavior deeper communication layers properties network limiting choice feasible semantics 
hand different applications may demand different semantics 
high throughput low reliability degree tolerable applications prioritize reliability throughput 
reason common messaging systems provide different qualities service order meet demands variety application purposes 
delivery semantics notifications offered existing systems roughly divided groups 
unreliable delivery 
protocols unreliable delivery give guarantees 
semantics applications throughput primary importance loss certain messages fatal application 
reliable delivery 
reliable delivery means message delivered subscriber despite certain failures 
usually failure absence subscriber considered subscriber failed message delivered reliability property considered violated 
persistent storage buffer messages subscriber back line stronger guarantee 
referred certified delivery 
distributed asynchronous collections overview section gives overview approach publish subscribe introducing distributed asynchronous collections key abstractions 
show relationship abstractions publish subscribe communication model 
second step picture detail abstractions allow build different publish subscribe variants inside unified framework 
section understood general adopts notion delivery service 
eugster guerraoui abstractions publish subscribe 
sections give concrete view dacs 
dacs object containers just collection dac abstraction container object represents group objects 
seen means store retrieve manipulate objects form natural group mail folder file directory 
conventional collection dac distributed collection operations invoked various nodes network 
dacs differ fundamentally distributed collections described instance asynchronous essentially distributed dacs seen omnipresent entities 
participating processes act dac local proxy viewed local collection hides distribution dac 
dacs centralized single host order guarantee availability despite certain failures 
collection framework unified architecture representing accessing collections allowing manipulated independently representation 
example smalltalk java contain rich collection frameworks reduce programming effort providing useful data structures algorithms high performance implementations 
collection frameworks instance silicon graphics stl additional libraries :10.1.1.108.7776
shows inheritance graph java collection framework 
asynchronous flavor dacs notion distributed asynchronous collection represents just distributed collection 
fact synchronous invocation distant object involve considerable latency hardly comparable local 
contrast asynchronous interaction enforced collections 
calling operation dac expresses interest notifications 
querying dac objects certain kind instance party interacting dac expresses interest objects 
object eventually pushed dac interested party asynchronously notified 
strong resemblance notion type message passing describes communication model client queries asynchronous object information issuing request 
blocking client pursue processing 
soon reply computed object acting server notifies client 
may query result lazy synchronization wait necessity ignore 
compares paradigms 
programming dacs distributed collections centralized collections remotely accessed rmi 
set implements extends vector distributed asynchronous collections collection stack arraylist list linkedlist interface class cl fig 

collections java excerpt subscriber viewed client 
dac server role scenario publishers effective information suppliers remain anonymous 
calling operation dac caller requests certain information 
main difference futures lies number times information supplied client 
notion single reply passed client dacs time information interesting registered party created sent 
publish subscribe dacs expressing ones interest receiving information certain kind viewed subscribing information kind 
viewing event notifications objects dac seen entity representing related event notifications 
clearly collection set related objects dac seen set related events 
considering classical topic approach publish subscribe dac pictured extension conventional collection representation topic 
possible insert new element dac 
sense publish subscribe inserting object abcl represents exception sense replies may returned 
eugster guerraoui asynchronous invocation publish subscribe dacs invocation invocation client 
object subscriber dac fig 

dacs vs notifications thread dac means publish object topic represented dac 
dac viewed publish subscribe engine 
shows traditional topic publish subscribe scheme 
topic represented attribute message application deal explicitly 
dac bound topic topic implicitly appears protocol message hidden application shown 
encapsulates application message 
existing publish subscribe frameworks introduce specialized message types 
approach frees application programmer burden marshalling unmarshalling data dedicated messages 
context message basically kind object 
java expressed allowing object class java lang object passed message 
message public class message public string topic public string content criteria topic chat argument string topic chat evaluation topic equals chat deliver fig 

traditional topic publish subscribe order java object furthermore implement java io serializable interface contains methods 
distributed asynchronous collections protocol public class message message public string 
public object 
message public class 
criteria topic chat argument string topic chat evaluation equals chat deliver dac interfaces fig 

topic publish subscribe dacs previous section introduced dacs general abstractions publish subscribe 
section presents main interfaces dac realization java 
context limit describing functionalities common dac order show similarity operations conventional centralized collections 
topic subscribing dacs system topic represented dac denoted name chat 
dac constructor requires argument denotes name topic represent see section example 
topics specializations subtopics connecting topic requires name url type format 
typically chat topic called subtopic chat 
root hierarchy represented topic denoted 
top level topics specializations existing ones subtopics root topic 
subscribing topic trigger subscriptions subtopics illustrated 
subscriber subscribes topic chat claims interest subtopics 
receive message message published topic chat 
contrast subscribes chat receive message belongs 
push model adopted dacs subscribing entities register callback object 
callback object implement specific interface notifiable interface shown 
call contains method dac notifies subscriber contains new notification 
second argument enables callback object topics 
eugster guerraoui public interface notifiable public void contains object msg string chat fig 

interface notifiable dac methods fig 

topic publish subscribe dacs publish subscribe deliver publisher subscriber summarizes main methods base dac interface 
sophisticated interfaces derive interface omitted sake brevity 
roughly distinguish synchronous asynchronous methods 
synchronous methods 
dac place collection dac interface inherits standard java util collection interface 
inherited methods denatured adapted denote synchronous 
get 
similarly centralized collection calling method allows retrieve objects 
synchronization introduces weak returns null absence information explained section 
element returned depends nature collection see section details 
implements pull model 
contains 
dac representation collection elements 
method allows query collection presence object 
note object contained dac belongs topic represented dac 
add 
method allows add object collection 
corresponding meaning dac straightforward allows publish message topic represented collection 
asynchronous variant method consist advertising eventual production notifications 
distributed asynchronous collections furthermore combined registration callback object dac poll order obtain new event notifications 
terminology adopted called 
asynchronous methods 
added asynchronous methods express decoupled nature publish subscribe interaction specific dacs 
methods asynchrony expressed additional argument denoting callback object implements notifiable interface 
operations known conventional collections find analogous meaning asynchronous distributed context ongoing research domain cause minor modifications interface 
contains notifiable 
effect instance invoking method check collection contains object revealing certain characteristics manifest interest object eventually pushed collection 
interested party advertises interest providing object implementing notifiable interface notified events 
notifiable 
method offers signature previous method 
difference subscription generated subtopics topic represented dac 
reflects situation 
remove notifiable 
likewise calling methods subscriber trigger removal object contained collection expresses interest notified object matching criteria inserted collection object removed immediately 
expresses message delivered single subscriber 
frequently called contrast implemented asynchronous contains methods message sent 
notifiable 
method similar previous subscription generated subtopics topic represented dac 
clear notifiable 
conventional argument clear method allows erase elements collection asynchronous variant expresses action 
dac classes previous section focused interfaces application dacs order benefit strength publish subscribe abstractions 
depicted earlier framework consists variety dacs spanning formalism say nth occurrence event notified subscriber total number subscribers event delivered subscriber 
eugster guerraoui public interface dac extends java util collection public object get public boolean contains object message public boolean add object message public boolean contains notifiable public boolean notifiable public boolean remove notifiable public boolean notifiable public void clear notifiable 
fig 

interface dac excerpt different semantics guarantees different applications different requirements 
semantics seen different qos 
certain properties dacs reflect interfaces certain semantics appear api 
parameters influence classes implementing interfaces lead variety classes implementing interface 
section presents different properties classes constituting framework 
delivery semantics producer publishes message directly interact subscribers 
exactly message delivered show dacs interface 
parts semantics come light interfaces 
underlying multicast protocols lead different classes implementing interface 
distributed asynchronous set interface instance implemented multiple classes 
offer plain unreliable delivery guarantee reliability 
distinguishing unreliable reliable dacs framework hierarchy roughly split subtrees shown 
duplicates just possible duplicate elements centralized collections possible distributed asynchronous collections message delivered 
fact closely related context 
dac accept duplicates deliver duplicates subscribers 
distributed asynchronous collections simple class instance prevent notification delivered class gives stronger guarantees eliminating duplicate elements 
property orthogonal characteristics dacs 
reason framework contains variant duplicates property shown 
allowing duplicates combining unreliable delivery instance outcome best effort semantics 
return reliable delivery semantics guaranteed 
reliable 
duplicates 
best effort explicit fifo criteria 
ordering 
duplicates 
duplicates 
duplicates 
exactly fifo storage vs delivery order exactly total order fig 

dac framework implicit exactly total order collections characterized way store elements 
sets bags instance rely deterministic order elements 
conversely sequences store elements order explicitly implicitly properties elements 
distributed asynchronous collections notion space replaced notion time 
centralized collections reveal deterministic storage order distributed asynchronous sequence may offer deterministic ordering terms order delivery eugster guerraoui subscribers 
java collection framework instance sorted set sequence characterized ordering elements properties 
seen implicit order 
dacs implicit order global delivery order dac decides 
class instance presents total order delivery 
inversely fifo delivery order seen explicit order order events notified dac publisher 
insertion order different centralized collections insertion order may impact storage order 
queue stack instance chronological insertion order drive storage order extraction order 
position additional argument insertion list instance 
asynchronous collection order insertion corresponds order sending publishing 
obvious inserting element specific position translate delivering message certain moment time relative messages inserting message list translate sending message messages possibly delivered subscribers 
explicit argument order passed inserting new element dac 
extraction order extracting element centralized implementation corresponds pulling messages distributed asynchronous 
case consumers polling dac new messages different policies may applied fifo 
collection behaves queue returning received undelivered message 
fact dac proxy contains buffer received messages inserted 
delivered pulling consumer fifo order 
lifo 
collection acts stack delivers latest received message 
principle messages delivered lifo order buffer consumer 
pull model application choice queues stacks 
class stack queue 
messages may volatile means may dropped immediately delivery 
conversely message stored memory persistent storage 
context deal message storage far 
messages considered volatile dropped soon consumed 
missed messages replayed late subscribers temporarily disconnected participants 
putting dacs distributed asynchronous collections section describe simple example application flexibility distributed asynchronous collections 
shows implement chat sessions simple dacs 
concentrate users alice tom 
chat love chat deep night 
subscribe topic subtopic chat receive messages see 
sake simplicity assume evening tom missing inspiration takes pure subscriber role 
alice hand publishes messages 
shows class represents possible message class application 
alice tom subscribe add msg contains 
contains msg chat fig 

public class implements java io serializable publish deliver publisher subscriber private string sender private string text public string return sender public string return text public string sender string text sender sender text text fig 

event class chat example eugster guerraoui publishing topic making topic publish subscribe topic represented dac seen previously 
order access dac process proxy created 
requires argument denoting name topic bears 
argument action creating proxy indistinguishable creating local collection 
dac instance called henceforth allows access topic chat 
possible directly publish receive messages topic associated dac 
creating event notification topic consists inserting message object dac issuing call add method see section accessible party 
favorable consumers notified automatically new message published waste computation time polling activity 
purpose party interested topic register subscriber 
new chat string alice msg new hi add msg subscribing topic fig 

publishing message order subscribe topic interested party provide callback object implementing notifiable interface 
callback method comprises arguments 
argument represents effective message second argument represents name topic message published 
provides flexibility subscriber object receive messages related topics 
example subscriber may interested ongoing chat sessions 
shows interactions dac shows corresponding code allows tom subscribe 
implementation issues section discusses realization dac implementation including performance measurements 
draw preliminary prototype developed pure java relies udp increasing portability 
class implements notifiable distributed asynchronous collections public void contains object msg string topic system println msg new chat notifiable sub new contains sub inside dacs fig 

topic publish subscribe dacs effective dac class perceived application represents small portion underlying code 
redundant code avoided modular design inheritance 
shows different layers implementation 
layers necessarily correspond java classes represent protocol layers 
application dac network udp ip fig 

layers dac layer 
layer composed classes implementing directly dac interfaces 
lightweight classes delegate general functionality underlying layer 
tasks similar centralized container classes 
mainly take care local management messages furthermore handle subscriptions 
frequent interaction model callback model push model subscribers poll new messages called back incoming messages 
eugster guerraoui case dac applies predefined threading model assigning notifications threads 
network layer 
network layer common functionalities dacs publishing messages forwarding subscription information 
hides remote party involved topics dac layer 
layer maintains form network topology knowledge basically consists immediate neighbors 
udp layer 
entire publish subscribe architecture implemented top udp 
udp non reliable protocol offers looseness required decoupled nature publish subscribe 
java offers classes udp sockets datagrams java net pretty close metal 
performance performance tests prototype hp workstations running hp ux jvm 
normal working day 
implementation uses marshalling unmarshalling procedure built scratch optimized event type java serialization classes usually considered slow 
example message types considered integer 
corresponds basic java int type 
string 
java type string length varying 
class containing attributes represent dates java type date strings java type string 

subtype 
addition attributes furthermore contains integers strings 
measurement scenario subscribers asynchronously receive events topic publisher produced events 
numbers messages considered single run experiment varied measures obtained conveyed average result experiments profile 
shows latency publishing 
example publisher needs publish events type 
include time marshalling events time put events udp socket 
shows global throughput scenario 
takes instance subscriber received events type 
correspond time spent publisher side subscriber side dac 
include time marshalling remote communication unmarshalling 
simple measurements allowed draw preliminary integers strings cdr cdr distributed asynchronous collections fig 

latency integers strings cdr cdr fig 

throughput nb messages nb messages complexity event type heavier impact time takes publisher send events subscriber receive events 
surprising case marshalling time significant inherent cost remote communication 
look surprising integers take longer strings 
implementation converted strings serialization procedure 
measures confirm fact nowadays optimizing marshalling important optimizing remote communication 
related years need large scale event notification mechanisms recognized 
effort invested domain multitude approaches emerged academic industrial eugster guerraoui impulses 
main characteristics related approaches compare distributed asynchronous collections 
event service specifications order integrate publish subscribe communication style existing middleware standards specifications conceived object management group sun 
omg specified corba service publish subscribe oriented communication called corba event service 
specification aimed general preclude sub specifications various implementations match needs specific applications 
general service specified consumer subscribes channel expressing interest receiving events channel 
words filtering events done channel names basically correspond topic names 
consumer subscribes channel supposed receive events put channel 
event channels corba objects current implementations centralized components 
engines manifest strong sensitivity component failure unsuitable critical applications 
java messaging service specification sun 
goal offer unified java api common publish subscribe engines 
certain existing services implement jms knowledge publish subscribe system implemented goal merely support jms api directly 
generic nature required order conform maximum number existing systems appears cumbersome 
applications aware underlying messaging service developers acquainted api 
java distributed event specification explicitly introduces notion event kind 
registration interest indicates kind events interest notification indicates occurrence kind event 
combine notion provide support publish subscribe notification 
inspired linda example container objects shared various suppliers consumers :10.1.1.113.9679
type described set operations read operation get copy object notify operation aimed alerting potential consumer object presence specific object 
combined java distributed event interfaces build publish subscribe communication scheme plays role event channel aimed broadcasting events notifications set subscriber objects 
nature subscription specified clear able subscribe particular operation 
specification describes information bus enables dynamic data exchange javabeans 
components implement minimal interface order plug bus 
member bus distributed asynchronous collections component exchange data structured arrays tables database components 
interestingly adapted collection types available ease transfer collections objects 
standards specifications interesting see implement services comply standards dacs 
note corba event service hierarchical arrangement channels java messaging service introduces explicit message classes require explicit marshalling 
established systems industrial strength solutions involve topic publish subscribe 
tib rendezvous engines 
event channel accept subscriptions specific topics 
consumer receives event notifications belong topic subscribed 
topic defines kind virtual connector objects interest recipients 
producer interested producing event number topics channels explicitly publish event 
event notifications represented records custom event types may defined 
similar approach adopted development tib rendezvous infrastructure 
hierarchical naming model corresponds hierarchical organization entities interest 
just uniform resource locators urls provide way locating accessing internet resources naming scheme provided locate access events interest 
naming scheme proposed wildcards allows subscribe patterns topics 
tib rendezvous provides certain degree fault tolerance usage ip multicast 
event notifications composed set typed data fields including topic 
industrial systems implement api object oriented languages jms specification java 
solutions undergo fundamentally object oriented design offer object oriented layer top messaging system 
collections java smalltalk offer integrated collection frameworks 
span common collection types 
specific collections external libraries 
instance util concurrent package offer elaborate collection types java 
approach distributed collections java 
designed provide advanced series collections java environment default offers limited support data collections algorithms covering main features majority java developers 
extends basic java collections refined types 
notion distributed eugster guerraoui collection describes centralized collection object accessible java rmi 
util concurrent package provides application programmer set collections especially targeted resolving concurrency problems 
contains instance collections alleviate concurrent traversals making time copy array backing collection 
feature synchronization wrappers standard collections possibility specify external read write locks 
contrast dacs avoid single point failure essentially distributed 
exploit distribution asynchronous interaction enforced 
synchronization discussed context util concurrent package issue address dacs topic 
concluding remarks long argued distribution implementation issue known metaphor objects autonomous entities communicating message passing directly represent interacting entities distributed system 
approach conducted legitimate desire provide distribution transparency hiding aspects related distribution traditional centralized constructs 
reuse distributed context centralized program designed implemented distribution mind 
argued distribution transparency myth dangerous 
distributed interactions inherently unreliable introduce significant latency hardly comparable local interaction 
possibility partial failures fundamentally change semantics invocation 
high availability masking partial failures involves distributed protocols usually expensive hard impossible implement presence network failures partitions 
considering alternative approach programmer aware distribution ugly complicated aspects distribution encapsulated inside specific abstractions defined interface 
presents candidate abstraction distributed asynchronous collection 
simple extension known collection abstraction 
dacs add asynchronous distributed flavor traditional collections enable express various forms publish subscribe interaction 
fact systems know unwieldy consider limited set interaction models 
dacs general lightweight publish subscribe abstractions introduced library approach allow express various interaction types qos 
believe object oriented view publish subscribe unique compromise transparency efficiency 
offering modular design aligned different communication semantics enforce ease distributed asynchronous collections missing performance related issues 
currently making dacs various practical examples far complex simple chat example 
objective investing applications stable framework instance extend 
issue translating operations known conventional collections asynchronous distributed context entirely completed certain parts api affected modifications 
explore approaches express content publish subscribe specific algorithms realize efficient matching 
especially challenging mobile environment nodes disconnected objects migrate node 

maffeis 
software bus middleware java platform 
international workshop reliable middleware systems pages october 

arnold sullivan scheifler waldo wollrath 
jini specification 
addison wesley 

birman 
process group approach reliable distributed computing 
communications acm pages december 


briot guerraoui 
hr 
concurrency distribution object oriented programming 
acm computing surveys september 


method object oriented concurrent programming 
communications acm vol 
pages september 



sun microsystems february 


need know middleware mission critical interprocess communication white 
www com 

freeman arnold 
javaspaces principles patterns practice 
addison wesley 

gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 

gelernter 
generative communication linda 
acm transactions programming languages systems pages 

guerraoui 
object oriented distributed programming may 
informatik april 

sharma 
java message service 
sun microsystems october 

hauswirth jazayeri 
component communication model push systems 
esec fse joint th european software engineering conference esec th acm sigsoft international symposium foundations software engineering fse september 

ibm 
smalltalk tutorial 
www com htm 

sun microsystems java platform api specification 
java sun com products jdk 

sun microsystems java collections framework 
java sun com products jdk 
eugster guerraoui 
jul levy hutchinson black 
fine grained mobility emerald system 
acm transactions computer systems pages february 

koenig 
messages vs objects application integration 
distributed computing pages april bci 

lea design open systems java 
second international conference coordination models languages 
gee cs edu dl coord 

lea 
overview package util concurrent release 
gee cs edu dl classes october 

objectspace 
generic collection library 
www objectspace com products 

oki siegel skeen 
information bus architecture extensible distributed systems 
fourteenth acm symposium operating system principles pages december 

omg 
common object request broker architecture specification 
february 

omg 
common object services specification 
december 

microsoft dcom technical overview white 

powell 
group communications 
communications acm pages april 

rosenblum wolf 
design framework internet scale event observation notification 
sixth european software engineering conference acm sigsoft fifth symposium foundations software engineering september 

schmidt 
overcoming drawbacks omg event service 
sigs report magazine june 

skeen 
publish subscribe architecture publish subscribe overview 
www com 

stepanov lee 
standard template library 
silicon graphics october 

sun microsystems java remote method invocation distributed computing java white 
java sun com marketing collateral html 

tibco tib rendezvous white 
www rv tibco com whitepaper html 

waldo wollrath kendall 
note distributed computing 
sun microsystems november 

waldo wollrath kendall 
events rpc distributed system 
sun microsystems laboratories november 

yonezawa honda 
object oriented concurrent programming 
modeling programming object oriented concurrent language abcl pages mit press 
