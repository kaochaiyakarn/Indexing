building time machine efficient recording retrieval high volume network traffic stefan vern paxson holger anja feldmann robin sommer tu nchen icsi lbnl tu nchen tu nchen tu nchen times extraordinarily convenient record entire contents high volume network traffic stream order travel back time inspect activity interesting retrospect 
examples security forensics determining just attacker compromised machine network trouble shooting inspecting precursors fault fault 
describe design implementation time machine efficiently support recording retrieval 
efficiency approach comes leveraging heavy tailed nature network traffic bulk traffic high volume streams comes just connections constructing filter records bytes connection greatly winnow recorded volume retaining small connections full beginnings large connections suffices 
system designed operation gbps environments running commodity hardware 
hold minutes high volume stream ram hours days disk user flexibly configure operation suit site nature 
simulation operational results distinct gbps production environments exploring feasibility efficiency time machine implementation 
system proved useful enabling analysis break sites 
network packet traces particularly headers full contents prove invaluable trouble shooting network problems investigating security incidents 
operational environments sheer volume traffic infeasible capture entire stream retain significant subsets extended amounts time 
course troubleshooting security forensics small proportion traffic turns pertinent 
problem decide configuring traffic monitor context turn relevant retrospectively investigate incidents 
low volume environments routinely bulk record network traffic tools tcpdump 
rising volumes inevitably require filtering 
example lawrence berkeley national laboratory lbnl medium size gbps environment network traffic averages tb day right edge recorded commodity hardware 
site vital record traffic analyzing possible security events retain full volume 
operators resort tcpdump filter terms describing traffic skip omitting recording key services ftp data nfs skipping number specific high volume hosts non tcp traffic 
filter reduces volume recorded traffic total 
higher traffic rates filtering technically problematic 
example munich scientific research network mwn heavily loaded gbps university environment averages tb external traffic day busy hour loads mbps 
level difficult reliably capture full traffic stream simple commodity deployment 
final issue concerns captured data 
cases possible security compromise great importance track attacker assess damage quickly possible 
manually sifting immense archive packet traces extract needle haystack time consuming cumbersome 
develop system uses dynamic packet filtering buffering enable effective large traffic streams 
system allows conveniently travel back time term time machine 
time machine buffers network streams memory disk providing days forensics trouble shooting perspective historic data supporting timely access locate haystack needles 
initial application time machine forensic tool extract detailed past information unusual activities detected 
time machine proved operationally useful enabling diagnosis break gone overlooked lbnl standard bulk recorder static filter missed capturing relevant data 
naturally time machine buffer entire high volume stream 
exploit heavy tailed nature network traffic partition stream effectively static filter small subset high interest versus large remainder low interest 
record small subset discard rest 
key insight network connections quite short small number large connections heavy tail accounting bulk total volume 
forensics troubleshooting applications large connection contains significant information 
put way choice recording connections usenix association internet measurement conference entirety cost missing entirety versus recording beginnings connections entire contents connections generally prefer 
time machine cutoff limit connection buffers bytes traffic 
greatly reduces traffic buffer retaining full context small connections large connections 
simple mechanism highly efficient example lbnl cutoff kb disk storage budget gb retain days site tcp connections gb days udp flows tend heavy tailed 
aware comparable system traffic capture 
commercial bulk available mcafee security forensics appear brute force bulk recording requiring huge amounts disk space 
due black box nature evaluating performance systematic fashion difficult 
approach network intrusion detection prevention systems record packets trigger alerts 
systems buffer start connection short time seconds store permanently session triggers alert 
systems provide long term buffers arbitrary access support retrospective analysis problematic host earlier activity 
bro nids record analyzed packets traffic incident detected 
packet vault system designed bulk record entire traffic streams 
targets lower data rates employ filtering 
organize remainder follows 
briefly summarize time machine design goals 
trace driven simulation explore feasibility approach data reduction environments 
discuss time machine architecture evaluation performance environments 
summarizes 
design goals identified major design goals time machine provide raw packet data 
time machine enable recording retrieval full packets including payload condensed versions summaries just byte streams headers order prevent losing crucial information 
buffer traffic comprehensively 
time machine manage stored traffic time frames multiple days seconds minutes 
restrict capture individual hosts subnetworks keep widespread data possible 
prioritize traffic 
inevitably high volume environments discard traffic quickly 
time machine needs provide means user express different classes traffic resources associated class 
automated resource management 
experience know having manually manage disk space associated high volume packet tracing tedious error prone time 
time machine needs enable user express resources available highlevel terms manage resources automatically 
efficient flexible retrieval 
time machine support timely queries different subsets buffered data flexible efficient manner 
packet capture operation needs priority query processing 
suitable high volume environments commodity hardware 
target large networks heavily loaded gbps networks great benefit design enables time machine run offthe shelf hardware pcs gb ram gb disk space 
feasibility study section explore feasibility achieving design goals outlined leveraging heavy tailed nature traffic exclude data streams 
methodology evaluate memory requirements time machine approximate packet buffer model 
base evaluation connection level logs environments described 
logs capture nature environment relatively low volume compared full packet level data 
previous shown flow data approximate data rate contributed flow assume connection spreads total traffic duration evenly reasonable connections especially large ones 
evaluate packet buffer model discrete time steps enabling capture point volume packet data currently stored buffer volume currently increasing 
simplest simulation arrival new connection increases growth rate connection rate bytes transferred divided duration decreased amount finishes 
add notion keeping data extended period time introducing eviction time parameter te defines long buffer stores connection data 
accordance goals aim value te order days minutes 
internet measurement conference usenix association connection size nersc lbl mwn connection size bytes log log ccdf connection sizes described far model captures bulk recording timeout cutoff 
incorporate idea recording bytes connection adjusting time decrement growth rate due connection longer time connection finishes time exceeds bytes connection size cutoff 
environments drive analysis traces gathered packet monitors deployed internet access links institutions 
institutions transfer large volumes data day networks traffic composition qualitative differences 
mwn munich scientific research network mwn munich germany connects major universities affiliated research institutions internet totaling approximately hosts 
volume transferred gbps internet link tb day 
roughly traffic comes popular ftp mirror hosted universities 
average utilization busy hours mbps 
lbnl lawrence berkeley national laboratory lbnl network california usa comprises hosts users connecting internet gbps link busy hour load mbps 
nersc national energy research scientific computing center administratively part lbnl physically separate uses different internet access link provides computational resources hosts users 
traffic dominated large transfers containing significantly fewer user oriented applications web 
busy hour utilization gbps link mbps 
analysis connection level logs week mwn lbnl nersc 
mwn connection log contains connections monday oct sunday 
logs lbnl nersc consist connections observed week monday feb friday apr respectively 
analysis connection size cutoff step investigate heavy tailed nature traffic environments 
plots empirical complementary volume gb te cut te kb cut te kb cut tue wed thu fri sat sun mon time simulated volume mwn environment cumulative distribution function ccdf number bytes connection environments 
note linear relationship log log scaled plot indicates consistency tail pareto distribution 
important consideration examining plots data connection summaries produced bro nids difference sequence numbers tcp connection syn fin packets 
introduces forms bias 
longrunning connections nids may initial syn final fin reporting size connection 
second connection size exceeds gb sequence number space wrap bro report bottom bits size 
biases tend underestimate heavy tailed nature traffic know significant total traffic volume accounted bro reports lower random sampling traffic 
plot reveals insight efficiently cutoff serve terms reducing volume data time machine store 
cutoff kb corresponding vertical line lbnl nersc mwn connections larger total size 
percentage bytes larger mwn lbnl nersc 
accordingly expect huge benefit cutoff 
methodology described simulated packet buffer models full connection logs 
figures show required memory mwn lbnl nersc respectively different combinations eviction time te cutoff 
deactivated cutoff corresponds bulk recording timeout 
bulk recording clearly shows artifacts time day day week variations cutoff reduces effect accompany cutoff larger timeout spreads variations 
see cutoff kb quite effectively reduces buffered volume lbnl te maximum volume gb just tad higher maximum volume gb bulk recording te 
increased duration data usenix association internet measurement conference volume gb volume gb te cut te kb cut te kb cut mon tue wed thu fri sat sun mon time simulated volume lbnl environment te cut te kb cut te kb cut fri sat sun mon tue wed thu fri time simulated volume nersc environment ity factor 
note volume simulations te stops increase steadily days starting connections evicted buffer model 
nersc mean peak decreases gb gb gb gb 
enormous gain due site large proportion data transfers 
indicated lower fraction bytes larger connections mwn gain cutoff quite large due larger fraction traffic 
reducing cutoff factor reduces maximum memory requirements factor lbnl nersc mwn full factor 
point longer able leverage heavy tail 
figures show cutoff volume spiky 
fact nersc volume required te times te due intermittent bursts 
hand cutoff see significant spikes volumes 
suggests sudden changes buffer growth rate caused high volume connections shifts number connections 
plots indicate cutoff kb buffering days traffic practical 
architecture main functions time machine needs support buffering traffic cutoff ii migrating subset buffered packets disk managing asso user interface capture filter class configuration storage policy query answer storage container user interaction thread tap capture classification 
query processing storage container connection tracking indexing recording thread time machine system architecture ciated storage iii providing flexible retrieval subsets packets iv enabling customization 
multi threaded architecture shown separates user interaction recording ensure packet capture higher priority packet retrieval 
user interface allows user configure recording parameters issue queries query processing unit retrieve subsets recorded packets 
recording thread responsible packet capture storage 
architecture supports customization splitting storage storage containers responsible storing subset packets resources memory disk allocated user interface 
classification unit decides packets assign storage container 
addition classification unit responsible monitoring cutoff help connection tracking component keeps connection statistics 
enable efficient retrieval index packets stored storage containers managed indexing module 
access packets coming network tap managed capture unit 
capture unit receives packets network tap passes classification unit 
connection tracking mechanism checks connection packet belongs exceeded cutoff value 
finds associated storage container stores packet memory indexing process quick access 
migrates disk eventually deletes 
accordingly actual time machine differs connection level simulation model buffers caches evict packets full evicting connections precisely eviction time 
implementation architecture uses libpcap packet capture library user specify kernel level bpf capture filter discard uninteresting traffic early possible 
collect store packet full content capture timestamp 
capture unit passes packet classification routines divide incoming packet stream classes user specified configuration 
class definition includes class name bpf filter iden internet measurement conference usenix association tify packets belong class matching priority storage parameters example class telnet filter tcp port precedence cutoff mem disk defines class telnet matches priority traffic captured bpf filter tcp port 
cutoff mb applied memory buffer mb disk budget gb allocated 
incoming packet look class associated connection connection tracking unit new connection match packet filters 
filter matches assign class highest priority 
filter matches packet discarded 
track connection cutoffs time machine keeps state active connections hash table 
newly arrived packet belongs connection exceeded cutoff limit configured class discarded 
manage entries connection hash table inactivity timeout timeout shorter connections seen packet keeps table growing large scans denial service attacks 
class time machine keeps associated storage container buffer packets belonging class 
storage containers consist ring buffers 
stores packets ram buffer second buffers packets disk 
user configure size buffers class basis 
key motivation maintaining ram buffer addition disk storage enable near real time access part time machine archive 
packets evicted ram buffer moved disk buffer 
structure disk buffer set files 
file grow configurable size typically mb 
file reaches size close create new file 
store packets memory disk libpcap format 
enables easy extraction libpcap traces analysis 
enable quick access packets maintain multiple indexes 
time machine structured internally support number indexes arbitrary set predefined protocol header fields 
example time machine compiled simultaneously support port connection tuple indexes 
index manages list time intervals unique key value observed protocol header field fields packets 
time intervals provide information packets key value available storage container starting timestamp enabling fast retrieval packets 
time time machine stores new packet updates associated index 
packet key header field combination fields index create new entry containing zero length time interval starting timestamp packet 
entry exists update extending time interval timestamp current packet starting new time interval time difference entry existing interval new timestamp exceeds user defined parameter 
parameter trades size index terms number intervals maintain precisely index entry localizes packets interest storage container 
interval entries age migrate memory index structures index files disk doing time corresponding packets storage containers migrate ram disk 
addition user set upper limit size memory index data structure 
final part architecture concerns find packets interest potentially immense archive 
done brute force running tcpdump disk files doing take great deal time deleterious effect time machine performance due contention disk 
address issue query processing unit provides flexible language express queries subsets packets 
query consists logical combination time ranges keys optional bpf filter 
query processor looks appropriate time intervals specified key values indexing structures trimming time range query 
logical keys realized union set intervals keys intersection 
resulting time intervals correspond time ranges queried packets originally arrived 
locate time intervals storage containers binary search 
indexes time intervals limit amount data scanned providing exact matches narrowing suffices greatly reduce search space foregoing exact matches keep indexes smaller 
accordingly step consists scanning packets identified time ranges checking match key additional bpf filter supplied query writing results tcpdump trace file disk 
evaluation evaluate time machine design ran implementation sites discussed 
lbnl classes kb cutoff tcp traffic space budget gb udp gb gb 
evaluate hindsight capabilities determine retention distance back time travel particular moment illustrated 
note retention increases time machine starts disk buffers filled 
usenix association internet measurement conference retention days tcp udp sat mon wed fri sun tue thu local time retention lbnl environment point retention correlates incoming bandwidth class variations due diurnal weekly effects 
new data forces eviction old data shown example retention tcp shortening lower level weekend traffic evicted wed thu 
tcp buffer gb allows retain data days roughly matching predictions lbnl simulations recall volume biases data discussed 
cutoff highly efficient average traffic gets discarded remainder imposing average rate kb maximum rate mb storage system 
weeks operation libpcap reported packets dropped 
note classes configured yield identical retention time 
user may define classes view utility having matching traffic available terms cutoff long keep 
example included class configuration similar example order keep telnet connections longer period time 
operationally time machine enabled diagnosis break lbnl having retained response request investigated days 
time machine data confirmed successful compromise provided additional forensic information terms attacker activities 
time machine possible site afford record full traffic significant length time 
mwn ran preliminary tests time machine evaluated retention capability systematically 
results show traffic gets discarded resulting storage rates mb average maximum 
appears larger volume traffic culprit difference compared lbnl due lesser heavy tailed nature matches results mwn connection level simulation 
environment need aggressively exploit classification cutoff mechanisms appropriately manage large fraction traffic 
fractions discarded traffic lbnl mwn match predictions resulting storage rates reasonable today disk systems demonstrated practice 
connection tracking indexing mechanisms coped characteristics real internet traffic 
evaluated time machine nersc simulations promise results 
summary introduce concept time machine efficient network packet recording retrieval 
time machine buffer days raw high volume traffic commodity hardware 
provides efficient query interface retrieve packets timely fashion automatically manages available storage 
time machine relies simple crucial observation due heavy tailed nature network traffic record connections entirety skip bulk total volume storing customizable cutoff limit bytes connection 
demonstrated effectiveness approach trace driven simulation operational experience actual implementation environments 
cutoff kb increases data availability hours days compared brute force bulk recording 
operational time machine proved valuable enabling diagnosis break standard bulk recording missed 
intend add remote access interface enable real time queries historic network data components network intrusion detection systems 
acknowledgments supported national science foundation sti california technology center grateful 
honeyman packet vault secure storage network data 
proc 
workshop intrusion detection network monitoring april pp 

lawrence berkeley national laboratory 
tcpdump libpcap 
www tcpdump org 
mcafee 
mcafee security forensics 
www 
com products mcafee forensics security htm 
mccanne jacobson bsd packet filter new architecture user level packet capture 
proc 
usenix winter conference january pp 

paxson bro system detecting network intruders real time 
computer networks december 
paxson floyd wide area traffic failure poisson modeling 
ieee acm transactions networking june 
feldmann krishnamurthy willinger methodology studying persistency aspects internet flows 
acm sigcomm computer communication review april 
internet measurement conference usenix association 
