cuckoo hashing pagh brics department computer science aarhus university ny munkegade bldg 
dk denmark 
mail pagh daimi au dk flemming air aalborg sv denmark 
mail ffr dk com simple dictionary worst case constant lookup time theoretical performance classic dynamic perfect hashing scheme dietzfelbinger 
dynamic perfect hashing upper lower bounds 
siam comput 
space usage similar binary search trees words key average 
conceptually simpler previous dynamic dictionaries worst case constant lookup time data structure interesting perfect hashing variant open addressing keys moved back probe sequences 
implementation inspired algorithm weaker hash functions quite practical 
competitive best known dictionaries having average case nontrivial worst case guarantee 
key words data structures dictionaries information retrieval searching hashing experiments partially supported emerging technologies programme eu contract number ist alcom ft 
initiated visiting stanford university 
basic research computer science www brics dk funded danish national research foundation 
done aarhus university 
pagh 
dictionary data structure ubiquitous computer science 
dictionary maintaining set insertion deletion elements referred keys universe membership queries provide access data 
case positive answer dictionary provides piece satellite data associated inserted 
large theory partially surveyed section devoted dictionaries 
common study case keys bit strings word length computer theoretical purposes modeled ram 
section discusses restriction 
usually clear return associated information membership determined 
methods discussed associated information stored hash table 
disregard time space handle associated information concentrate problem maintaining denote 
efficient dictionaries theory practice hashing techniques 
main performance parameters course lookup time update time space 
theory trade simultaneously achieve constant lookup time expected amortized constant update time space constant factor information theoretical minimum log bits 
practice various constant factors crucial applications 
particular lookup time critical parameter 
known achieve performance arbitrarily close optimal sufficiently sparse hash table 
challenge combine speed reasonable space usage 
particular consider schemes words space 
contribution new simple hashing scheme called cuckoo hashing 
description analysis scheme section showing possesses theoretical properties dynamic dictionary dietzfelbinger 
worst case constant lookup time amortized expected constant time updates 
special feature lookup procedure disregarding accesses small hash function description just memory accesses independent done parallel supported hardware 
scheme works space similar binary search trees words key average 
weaker hash functions required analysis cuckoo hashing simple implement 
section describes implementation reports extensive experiments comparisons commonly methods having nontrivial worst case guarantee cuckoo hashing lookup time 
experiment comparing commonly methods modern multi level memory architecture previously described literature 
experiments show cuckoo hashing quite competitive especially dictionary small fit cache 
believe attractive practice worst case guarantee lookups desired 

previous linear space dictionaries hashing described public literature emerged space efficient heuristic fast retrieval information sparse tables 
knuth surveys important classical hashing methods section 
prominent basis experiments section chained hashing separate chaining linear probing double hashing 
judging leading textbooks algorithms knuth selection algorithms agreement current practice implementation general purpose dictionaries 
particular excellent cache usage linear probing prime choice modern architectures 
scheme called way chaining investigated :10.1.1.28.7396
schemes briefly described section 

analysis early hashing schemes early theoretical analysis hashing schemes done assumption hash function values uniformly random independent 
precise analyses average expected worst case behaviors abovementioned schemes see example 
mention just facts disregarding asymptotically vanishing terms 
note figures depend implementation details hold implementations described section 
consider expected number memory probes needed open addressing schemes insert key hash table fraction table occupied keys 
linear probing expected number probes insertion 
coincides expected number probes unsuccessful lookups number probes needed looking key subsequent deletions 
deletion rearranges keys configuration occur deleted key inserted 
double hashing expected cost insertion keys moved coincides number probes needed looking key deleting key 
key inserted hash table rehash expected cost looking unsuccessfully fraction keys deleted markers hash table 
pagh key deleted marker table expected cost unsuccessful lookup probe 
chained hashing hash table size expected length list traversed unsuccessful lookup 
means expected number probes needed insert new key number probes needed subsequently look key note probes pointers counted 
deletion results data structure occur key inserted 
terms number probes implies chained hashing better double hashing better linear probing 
noted space chained hashing larger open addressing schemes 
difference depends relative sizes keys pointers 
longest probe sequence linear probing expected length log 
double hashing longest successful probe sequence expected length log general sublinear bound length unsuccessful searches 
expected maximum chain length chained hashing log log log 
results agree practice randomness assumptions analyses questionable applications 
carter wegman succeeded removing assumptions analysis chained hashing introducing concept universal hash function families 
implemented random function carter wegman universal family chained hashing constant expected time dictionary operation plus amortized expected constant cost resizing table 
certain efficient hash function family siegel linear probing double hashing provably satisfy performance bounds 
siegel hash functions summarized theorem cuckoo hashing 

key rearrangement schemes number open addressing hashing schemes proposed share key feature scheme described keys moved insertions 
main focus schemes reduce average number probes needed finding key nearly full table constant log average exhibited standard open addressing 
done occasionally moving keys forward probe sequences 
algorithm rearrange keys order reduce worst case number probes constant 
necessary condition reuse hash function values keys moved back probe sequence 
backward moves previous rearrangement scheme cuckoo hashing presumably due difficulty moving keys back give fresh random placement 
thing allows obtain worst case efficient lookups deal full hash tables hash tables half full 
shown case exists high probability arrangement allows key hash table probes 
show efficiently maintain arrangement updates key set 
arrangements keys optimal worst case retrieval cost fact considered rivest polynomial time algorithm finding arrangement 
shown updates key set expected number keys need moved achieve new optimal arrangement constant 
analysis requires hash table sufficiently sparse assumes hash function truly random 
suggests dictionary solves small assignment problem insertion deletion 
follows rivest dictionary achieved worst case constant lookup time expected amortized constant update time years algorithm performance randomness assumption published aho lee 
show siegel hash functions suffice analysis 
algorithm rearranging keys simpler efficient suggested rivest 
key rearrangement scheme similarities cuckoo hashing come served hashing low variance search time key feature 
uses greedy strategy moving keys reuse hash function values 

hashing schemes worst case lookup guarantee way chaining alternative chained hashing offers log log maximal lookup time high probability assuming truly random hash functions 
implementation consider represents lists fixed size arrays size log log longer chain needed rehash performed 
achieve linear space usage hash table size log log implying average chain length log log 
scheme worst case guarantee multilevel adaptive hashing 
lookups performed worst case time log log hash function evaluations memory probes comparisons possible parallel 
similar scheme described hash function evaluations memory probes comparisons 
dictionary worst case constant lookup time obtained fredman koml szemer di static support updates 
augmented insertions deletions pagh amortized expected constant time dietzfelbinger 
dietzfelbinger meyer auf der heide improved update performance exhibiting dictionary operations done constant time high probability constant choice 
simpler dictionary properties developed 
space usage words constant factor information theoretical minimum 
dictionary munro offers performance bits cases 

preliminaries assume keys fit exactly single machine word special value reserved signal empty cell hash tables 
double hashing additional special value indicate deleted key 
algorithm uses hash functions universal family 
definition 
family hi hi universal distinct elements 
xk 
yk uniformly random pr hi 
hi xk yk example family functions universal 
implementation purposes needs families succinct memory representations 
standard construction universal family range 
prime max mod mod 
ak 
large compared exists space efficient universal family due siegel constant evaluation time constant small 
theorem siegel 
constant exists universal family uses space initialization time evaluated constant time 
restriction keys single words serious 
longer keys mapped keys words applying random function universal family 
family functions evaluated time linear number input words 
works evaluating function universal family word computing bitwise exclusive function values 
see efficient implementation 
function range log cuckoo hashing probability injective fact constant probability function injective sequence consecutive sets dictionary initial size see 
collision elements occurs 
rehash done expected time amortized expected cost insertion 
way effectively reduce universe size full keys need stored decide membership 
log reduced keys length log 
theorem provides family constant time evaluable universal hash functions functions stored space 

cuckoo hashing cuckoo hashing static dictionary described 
dictionary uses hash tables length hash functions 

key stored cell 
lookup function function lookup return table accesses lookup fact optimal dictionaries linear space special cases see 
idea storing keys places hash functions previously appeared context pram simulation way chaining :10.1.1.28.7396
shown constant tables bit half full picked uniformly random log universal family probability way arranging keys 
discussion section may assume loss generality family constant evaluation time negligible space usage 
suitable arrangement keys shown computable expected linear time reduction sat 
consider simple 
deletion course simple perform constant time counting possible cost shrinking tables sparse 
insertion turns cuckoo approach kicking keys away key nest works 
specifically inserted see cell occupied 
done 
set anyway making previous occupant 
pagh fig 

examples cuckoo hashing insertion 
arrows show possibilities moving keys 
key successfully inserted moving keys table 
key accommodated rehash necessary 
key inserted way forth iteratively see 
may happen process loops shown 
number iterations bounded value specified section 
number iterations reached new hash functions try accommodate key 
notation express values variables swapped code summarizes insertion procedure 
procedure insert lookup return loop times return return loop rehash insert procedure assumes table remains larger cells 
bound known test done find rehash larger tables needed 
resizing tables done amortized expected constant time update usual doubling halving technique see 
hash functions universal means act cuckoo hashing truly random functions set keys processed insertion loop 
lookup call preceding insertion loop ensures robustness key inserted dictionary 
slightly faster implementation obtained known occur 
note insertion procedure biased inserting keys 
seen section leads faster successful lookups due keys 
effect pronounced uses asymmetric scheme larger 
cases insertion time slightly worse completely symmetric implementation 
variant single table hash functions requires keeping track hash function key placed 
consider just symmetric table scheme 

analysis analysis insertion procedure main parts 
exhibit useful characteristics behavior insertion procedure 

derive bound probability insertion procedure uses iterations 

argue procedure uses expected amortized constant time 
behavior insertion procedure simplest behavior insertion procedure occurs visit hash table cell 
case simply runs sequence 
keys repetitions moving key table 
point insertion procedure returns previously visited cell behavior complicated shown 
key xi previously visited cell second time occurring positions sequence put back original cell 
subsequently keys xi 
moved back start insertion assuming maximum number iterations reached 
particular procedure try placing second table 
point appears key xl moved vacant cell previously visited cell assuming maximum number iterations reached 
case procedure terminates 
case rehash performed closed pagh loop keys hashing cells 
means loop run maximum number iterations followed rehash 
lemma 
suppose insertion procedure enter closed loop 
prefix 
xp sequence keys subsequence consecutive keys repetitions starting occurrence key key inserted 
proof 
case insertion procedure returns previously visited cell prefix sequence distinct keys starting 
sequence keys shown 
keys form desired sequence 
se quences 
xj xj 
xp length 
probability bounds consider probability insertion loop runs iterations 
probability course 
analysis iteration number performed mutually exclusive situations 
insertion procedure entered closed loop xl moved previously visited cell 

insertion procedure processed sequence consecutive keys starting newly inserted key 
situation denote number distinct keys 
number ways closed loop formed possible values possible choices cells possible choices keys 
hash functions universal 
means possibility occurs probability summing possible values get probability situation rn derivation follows suggestion sanders improves bound conference version 
second situation sequence distinct keys 
bv key inserted cuckoo hashing fig 

stages insertion key involving movement keys 
xl 
boxes correspond cells tables arcs show possibilities moving keys 
bold arc shows key inserted 
pagh 
possible sequences distinct keys 
sequence choices probability equations hold bounded hash functions chosen universal family 
probability sequence length satisfying probability situation bounded 
concluding analysis restrict attention 
follows expected number iterations insertion loop bounded consider cost rehashing occurs insertion loop runs iterations 
previous section probability happens entering closed loop 
setting log probability rehashing entering closed loop altogether probability insertion causes rehash 
particular insertions performed rehash succeed cause rehash probability 
expected time insertion total expected time trying insert keys 
probability having start new hash functions bounded away total expected time rehash 
insertion expected time rehashing 
cuckoo hashing summing shown expected time insertion bounded constant 
small probability rehashing fact implies variance insertion time constant 

experiments examine practicality cuckoo hashing experimentally compare known hashing methods described section chained hashing separate chaining linear probing double hashing 
consider way chaining :10.1.1.28.7396
methods attempt store key position hash table 
differ way collisions resolved happens keys hash location 
chained hashing 
chained list store keys hashing location 
linear probing 
key stored empty table entry 
lookup key done scanning table empty table entry 
deleting keys may moved back order fill hole lookup sequence see details 
double hashing 
insertion lookup similar linear probing searching position step time second hash function value determine step size 
deletions handled putting deleted marker cell deleted key 
lookups skip deleted cells insertions overwrite 
fourth method way chaining described instances chained hashing 
key inserted hash tables hashes shortest chain 
implementation suggested simply chained list short fixed size array 
longer list needed rehash performed 

previous experimental results 
dictionaries worst case constant lookup time surveyed sect 
leave little improve theoretical point view large constant factors complicated implementation hinder direct practical 
example dynamic perfect hashing scheme upper bound space words 
authors refer practical variant due wenzel uses space comparable binary search trees 
implementation variant leda library described average insertion time larger pagh avl trees times slower insertions chained hashing experimental results listed table show gap factor update performance chained hashing dynamic perfect hashing factor lookups silverstein reports space upper bound dynamic perfect hashing scheme quite pessimistic compared observed run subset dimacs dictionary tests 
goes explore ways improving space time improving observed time space factor roughly 
improved scheme needs times space implementation linear probing achieve similar time operation 
silverstein considers versions data structures packed representations hash tables 
setting dynamic perfect hashing scheme slower linear probing roughly amount space 
experimental classical dictionaries worst case constant lookup time quite limited 
reported chained hashing superior implementation dynamic perfect hashing terms memory usage speed 

data structure design implementation consider positive bit signed integer keys 
data structures robust correctly handle attempts insert element set attempts delete element set 
known occur slightly faster versions insertion procedure 
focus achieving high performance dictionary operations reasonable space usage 
load factor dictionary understand size set relative memory seen speed linear probing double hashing degrades rapidly load factors 
hand schemes improve load factors 
cuckoo hashing works size table larger size set perform comparison load factors 
allow doubling halving table size allow load factor vary focusing especially typical load factor 
cuckoo hashing way chaining chance insertion may fail causing forced rehash 
load factor larger linux pc intel pentium mhz processor 
mhz sun ultra sparc 
chained hashing notion load factor traditionally disregards space chained lists desire equal load factors imply equal memory usage 
cuckoo hashing certain threshold somewhat arbitrarily set opportunity double table size 
experiments slightly decreases average load factor 
apart chained hashing schemes considered common fact analyzed randomness assumptions currently impractical realize 
experience shows simple efficient hash function families yield performance close predicted stronger randomness assumptions 
function family range positive integer odd family contains function ha ax mod div note evaluation done efficiently bit multiplication shift 
choice hash function restricts consider hash tables sizes powers 
random function family chosen rand function appears fine schemes cuckoo hashing 
cuckoo hashing experimented various hash functions cuckoo hashing sensitive choice hash function 
turned exclusive independently chosen functions family fast worked 
explanation phenomenon 
schemes various alternative hash families tried decrease performance 
methods implemented obtain fastest possible implementation scheme 
specific choices details differing chained hashing 
malloc free functions performance bottleneck simple freelist memory allocation scheme 
half allocated memory hash table half list elements 
data structure runs free list elements size doubled 
store element linked list directly hash table 
saves cache slightly improves memory utilization expected sense 
non empty chained list element shorter expect half hash table cells contain linked list load factors considered 
double hashing 
prevent tables deleted cells resulting poor performance unsuccessful lookups keys hash table occupied keys deleted markers 
fraction give tradeoff time insertion unsuccessful lookups 
linear probing 
implementation employed deletion markers 
deletion method described considerably faster far fewer needed 
pagh way chaining 
allow keys bucket 
keep probability forced rehash low hundreds thousands keys results 
larger collections keys allow keys bucket resulting general performance degradation 
cuckoo hashing 
architecture experimented parallelize memory accesses lookups 
evaluate second hash function memory lookup shown unsuccessful 
experiments done variants cuckoo hashing 
particular considered asymmetric cuckoo table twice size second 
results keys residing table giving slightly better average performance successful lookups 
example long sequence alternate insertions deletions load factor elements resided table asymmetric cuckoo opposed cuckoo hashing 
significant slowdown operations 
describe results asymmetric cuckoo differ significantly cuckoo hashing 

setup experiments performed pc running linux kernel version mhz intel pentium iii processor mb memory pc ram 
processor kb level data cache kb level advanced transfer cache 
seen results nicely fit simple model parameterized cost cache expected number probes random locations 
believed significance hardware configurations 
advantage pentium processor timing experiments instruction measure time clock cycles 
gives access precise data behavior algorithms 
case supplies way discarding measurements significantly disturbed interrupts hardware devices process scheduler show small group timings significantly separated timings 
programs compiled gcc compiler version optimization flags march frame pointer functions mem loops rtti 
mentioned earlier global clock cycle counter time operations 
number clock cycles spent exceeds rehash conclude call interrupted disregard result empirically observed operation took clock cycles 
rehash way filtering away time spent interrupts 
tests machine irrelevant user processes disturbances minimal 
machine took cuckoo hashing clock cycles call instruction 
clock cycles subtracted results 

results dictionaries stable size test designed model situation size dictionary changing 
considers sequence mixed operations generated random 
constructed test operation sequences collection high quality random bits publicly available internet 
sequences start insertion distinct random keys followed times operations random unsuccessful lookup random successful lookup random deletion random insertion 
timed operations equilibrium number elements stable 
load factor results appear shows average runs 
linear probing consistently faster double hashing chose sole open addressing scheme plots 
time forced added insertion time 
results large variance runs sets size outside range extreme values deviated average 
large variance sets data structure starts fill level cache 
believe due processes evicting parts data structure cache 
seen time lookups identical schemes long entire data structure fits level cache 
average number random memory accesses probability cache approaching shows 
linear probing average case winner cuckoo hashing way chaining clock cycles 
insertion number random memory accesses dominates picture large sets higher number cache accesses computation cuckoo hashing particular way chaining relatively slow small sets 
cost forced sets way chaining sets elements point better results may obtained larger bucket size 
deletion chained hashing lags large sets due random memory accesses freeing list elements simplicity cuckoo hashing fastest scheme 
suspect slight rise time largest sets test due saturation bus machine runs memory begins swapping 
point mention cache utilization linear probing way chaining depends cache lines considerably larger keys associated information placed pagh clock cycles clock cycles cuckoo way chaining chained hashing linear probing successful lookup log cuckoo way chaining chained hashing linear probing insert log clock cycles clock cycles cuckoo way chaining chained hashing linear probing unsuccessful lookup log cuckoo way chaining chained hashing linear probing delete log fig 

average time operation equilibrium load factor 
gether keys 
case causes number cache misses rise significantly 
schemes discussed deteriorate way 
growing shrinking dictionaries second test concerns cost insertions growing dictionaries deletions shrinking dictionaries 
different due cost 
give fairly complete picture performance data structures general sequences operations 
operation sequence inserts distinct random keys second deletes 
plot shown 
small sets time operation unstable dominated memory allocation overhead minimum table size curves monotone 
sets elements largest deviation averages runs 
disregarding constant minimum amount memory dictionary average load factor insertions schemes chained hashing average load factor 
dur clock cycles cuckoo way chaining chained hashing linear probing insert log cuckoo hashing clock cycles cuckoo way chaining chained hashing linear probing delete log fig 

average time insertion deletion growing shrinking dictionary average load factor 
ing deletions schemes average load factor 
fastest method linear probing followed chained hashing cuckoo hashing 
largely due cost 
dimacs tests access data dictionary rarely random practice 
particular cache helpful random tests example due repeated lookups key deletion short lived keys 
rule thumb time operations similar time data structure cache 
perform actual tests dictionaries realistic data chose representative subset dictionary tests th dimacs implementation challenge 
tests involving string keys preprocessed hashing strings bit integers described section 
preserves high probability access pattern keys 
test recorded average time operation including time preprocessing 
minimum maximum runs tables lists average load factor 
linear probing fastest just faster cuckoo schemes 
number cache misses insertion seen number random memory accesses cache misses critical performance hashing schemes 
precise understanding probe behavior classic schemes suitable randomness assumptions analysis expected time insertions section crude establishing just constant upper bound 
reason calculation give tight bound pessimistic estimate number key moves pagh joyce linear double chained cuckoo cuckoo way fig 

average clock cycles operation load factors dimacs string tests 
smalltalk linear double chained cuckoo cuckoo way fig 

average clock cycles operation load factors dimacs integer tests 
cuckoo hashing needed accommodate new element dictionary 
free cell occupied key dictionary 
pessimistically assume large fraction key moves spent backtracking unsuccessful attempt place new key table 
shows experimentally determined values average number probes insertion various schemes load factors 
disregard reads writes locations known cache cost 
measurements equilibrium insertions deletions tables size truly random hash function values 
believed curve independent table size vanishing terms 
curve linear probing appear number non cached memory accesses depends cache architecture length cache line typically close 
curve cuckoo hashing 
correspondence analysis section 
noted section insertion algorithm cuckoo hashing biased inserting keys 
starting insertion choose start table random number cache misses decreases slightly insertion 
number free cells increases load balance 
means slight increase lookup time 
note insertion checks element inserted cuckoo hashing uses cache misses 
initial lookup exploited get small improvement insertion performance inserting right away cell vacant 
remarked highest possible load factor way chaining log log 
lookup similar insertion chained hashing think number cache misses equal operations 
implementation obtaining free cell freelist may result extra cache reason curve chained hashing differs similar plot knuth 

model section look simple model time takes perform dictionary operation note results explained terms model 
modern computer memory speed bottleneck 
operations investigated hashing methods mainly perform reads writes memory assume cache misses constitute dominant part time needed execute dictionary operation 
pagh cache misses cuckoo way chaining chained hashing double hashing load factor fig 

average number random memory accesses insertion 
leads model time operation 
time parameters model described constant overhead operation 
average number memory accesses 
cache size 
size hash tables 
cost non cache read 
term expected number cache misses operations probability random probe tables results cache note model valid table size smaller cache size size cache size dictionary known 
various hashing schemes load factor read average number memory accesses needed inserting element 
note accesses consecutive elements hash table counted random access accesses cache 
overhead operation cost cache unknown factors estimate 
performing experiments reading writing memory observed time read write location known cache vary dramatically depending state cache 
example cache line new read time considerably higher old contents cache line written old contents moved memory 
reason expect parameter depend slightly particular dictionary cuckoo hashing methods combination dictionary operations 
means parameters dependent methods 
method cuckoo way chained linear average fig 

estimated parameters model insertion 
timings average number cache misses insert observed estimated hashing schemes 
mentioned believe slight rise time largest sets tests caused non cache related factors 
model valid parameters estimated timings results shown table 
seen table cost cache varies slightly method method 
largest deviation average 
clock cycles cuckoo way chaining chained hashing linear probing insert log fig 

model versus observed data 
investigate accuracy model plotted estimated curves insertion observed curves estimating parameters 
seen simple model explains observed values quite nicely 
situation operations similar 
pagh having said admit values estimated schemes accounted 
particular clear true behavior schemes complicated suggested model 

new dictionary worst case constant lookup time 
simple implement average case performance comparable best previous dictionaries 
earlier schemes worst case constant lookup time complicated implement worse average case performance 
challenges remain 
explicit practical hash function family provably scheme 
example advances explicit expander graph construction siegel hash functions practical 
secondly lack precise understanding scheme exhibits low constant factors 
particular curve needs explained 
point investigate tables yields practical dictionaries 
experiments suggest space utilization improved remains seen affect insertion performance 

authors andrei broder peter sanders berthold useful comments discussions cuckoo hashing 

alfred aho david lee 
storing dynamic sparse table 
proceedings rd annual symposium foundations computer science focs pages los alamitos ca 
ieee comput 
soc 
press 

yossi azar andrei broder anna karlin eli upfal 
balanced allocations 
siam comput electronic 

richard brent 
reducing retrieval time scatter storage techniques 
communications acm february 
modification open addressing double hashing reduce average number probes successful search 

andrei broder michael mitzenmacher 
multiple hash functions improve ip lookups 
proceedings infocom 

andrei broder anna karlin 
multilevel adaptive hashing 
proceedings st annual acm siam symposium discrete algorithms soda pages 
acm press new york 

andrej ian munro 
membership constant time space 
siam comput electronic 

lawrence carter mark wegman 
universal classes hash functions 
comput 
system sci 
cuckoo hashing 
martin dietzfelbinger joseph gil yossi matias nicholas pippenger 
polynomial hash functions reliable extended 
proceedings th international colloquium automata languages programming icalp volume lecture notes computer science pages 
springer verlag berlin 

martin dietzfelbinger torben hagerup 
reliable randomized algorithm closest pair problem 
journal algorithms 
doi 

martin dietzfelbinger anna karlin kurt mehlhorn meyer auf der heide hans rohnert robert tarjan 
dynamic perfect hashing upper lower bounds 
siam comput 

martin dietzfelbinger meyer auf der heide 
new universal class hash functions dynamic hashing real time 
proceedings th international colloquium automata languages programming icalp volume lecture notes computer science pages 
springer verlag berlin 

arnold 
indexing rapid random access memory systems 
computers automation 

michael fredman nos koml endre szemer di 
storing sparse table worst case access time 
assoc 
comput 
mach 

gaston gonnet 
handbook algorithms data structures 
addison wesley publishing london 

gaston gonnet ian munro 
efficient ordering hash tables 
siam comput 

richard karp michael luby meyer auf der heide 
efficient pram simulation distributed memory machine 
algorithmica 

michael 
experiments universal hashing 
technical report diku report university copenhagen 

donald knuth 
sorting searching volume art computer programming 
addison wesley publishing reading mass second edition 


fast lookup hash tables direct rehashing 
computer journal may 


scatter storage techniques uniform viewpoint method reducing retrieval times 
computer journal may 

george 
random number cdrom including battery tests randomness 
stat edu pub 

catherine mcgeoch 
fifth dimacs challenge dictionaries 
cs amherst edu ccm challenge dicto 

kurt mehlhorn stefan 
leda 
platform combinatorial geometric computing 
cambridge university press cambridge 

pagh 
cell probe complexity membership perfect hashing 
proceedings rd annual acm symposium theory computing stoc 
acm press new york 

pagh flemming 
cuckoo hashing 
proceedings th european symposium algorithms esa volume lecture notes computer science pages berlin 
springer verlag 
pagh 
pagh flemming 
lossy dictionaries 
proceedings th european symposium algorithms esa volume lecture notes computer science pages berlin 
springer verlag 

ian munro 
come served hashing 
algorithms 

ronald rivest 
optimal arrangement keys hash table 
assoc 
comput 
mach 

peter sanders berthold 
personal communication 

schmidt alan siegel 
aspects universality performance closed hashing extended 
proceedings st annual acm symposium theory computing stoc pages 
acm press new york 

schmidt alan siegel 
analysis closed hashing limited randomness extended 
proceedings nd annual acm symposium theory computing stoc pages new york 
acm press 

alan siegel 
universal classes fast high performance hash functions tradeoff applications 
proceedings th annual symposium foundations computer science focs pages 
ieee comput 
soc 
press los alamitos ca 

craig silverstein 
practical perfect hashing algorithm 
manuscript 

thorup 
strongly universal hashing pretty fast 
proceedings th annual acm siam symposium discrete algorithms soda pages 
acm press new york 

wenzel 
cher ein universum 
diplomarbeit fachbereich informatik universit des saarlandes 
