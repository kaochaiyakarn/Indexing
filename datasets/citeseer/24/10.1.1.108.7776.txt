standard template library alexander stepanov silicon graphics shoreline blvd mt view ca stepanov mti sgi com meng lee hewlett packard laboratories page mill road palo alto ca lee hpl hp com july copyright hewlett packard permission copy modify distribute sell document purpose granted fee provided copyright notice appear copies copyright notice permission notice appear supporting documentation 

structure library 
requirements 
core components 
operators 
pair 
iterators 
input iterators 
output iterators 
forward iterators 
bidirectional iterators 
random access iterators 
iterator tags 
examples iterator tags 
library defined primitives 
iterator operations 
function objects 
base 
arithmetic operations 
comparisons 
logical operations 
allocators 
allocator requirements 
default allocator 
containers 
sequences 
vector 
list 
deque 
associative containers 
set 
multiset 
map 
multimap 
stream iterators 
istream iterator 
ostream iterator 
algorithms 
non mutating sequence operations 

find 
adjacent find 
count 
mismatch 
equal 
search 
mutating sequence operations 
copy 
swap 
transform 
replace 
fill 
generate 
remove 
unique 
reverse 
rotate 
random shuffle 
partitions 
sorting related operations 
sort 
nth element 
binary search 
merge 
set operations sorted structures 
heap operations 
minimum maximum 
lexicographical comparison 
permutation generators 
generalized numeric operations 
accumulate 
inner product 
partial sum 
adjacent difference 
adaptors 
container adaptors 
stack 
queue 
priority queue 
iterator adaptors 
reverse iterators 
insert iterators 
raw storage iterator 
function adaptors 

binders 
adaptors pointers functions 
memory handling 
primitives 
specialized algorithms 
acknowledgments 
bibliography 
standard template library provides set structured generic components seamless way 
special care taken ensure template algorithms data structures library built data structures 
example algorithms regular pointers 
orthogonal design library allows programmers library data structures algorithms library algorithms data structures 
specified semantic complexity requirements guarantee user component library efficiently 
flexibility ensures widespread utility library 
important consideration efficiency 
successful combines expressive power efficiency 
effort spent verify template component library generic implementation performs percentage points efficiency corresponding hand coded routine 
third consideration design develop library structure natural easy grasp firm theoretical foundation 
structure library library contains main kinds components algorithm defines computational procedure 
container manages set memory locations 
iterator provides means algorithm traverse container 
function object encapsulates function object components 
adaptor adapts component provide different interface 
decomposition allows dramatically reduce component space 
example providing search member function kind container provide single version works long basic set requirements satisfied 
description helps clarify structure library 
software components tabulated dimensional array dimension represents different data types int double second dimension represents different containers vector linked list file third dimension represents different algorithms containers searching sorting rotation ifi andk size dimensions different versions code designed 
template functions parameterized data type need versions 
making algorithms different containers need merely versions 
significantly simplifies software design possible components library user defined components flexible way 
user may easily define specialized container class library sort function sort 
user may provide different comparison function sort regular pointer comparison function function object object operator defined comparisons 
user needs iterate container reverse direction iterator adaptor allows 
library extends basic paradigms consistent way easy programmer start library 
example library contains merge template function 
user andb merged done int int int merge user wants merge vector list template classes library put result freshly allocated uninitialized storage done vector employee list employee 
employee allocate size size employee merge raw storage iterator employee employee member functions containers return right types iterators pointer objects allow merge job storage iterator adapter allows algorithms put results directly uninitialized memory calling appropriate copy constructor 
cases useful iterate input output streams way regular data structures 
example want merge data structures store file nice avoid creation auxiliary data structure result storing result directly corresponding file 
library provides iterator iterator template classes library algorithms streams represent homogenous aggregates data 
program reads file integers standard input removes divisible command argument writes result standard output main int argc char argv argc throw usage remove divides integer remove copy istream iterator int cin istream iterator int ostream iterator int cout bind nd modulus int atoi argv done copy reads integers input iterator equal stream iterator constructed constructor arguments 
general algorithms fashion iterators signify input 
remove copy writes integers pass test output stream output iterator bound cout 
predicate remove copy uses function object constructed function object modulus int takes returns binary predicate unary predicate bind nd bind second argument command line argument atoi argv 
negation unary predicate obtained function 
somewhat realistic example filter program takes file randomly shuffles lines 
main int argc char argc throw usage shuffle vector string copy istream iterator string cin istream iterator string inserter random shuffle copy ostream iterator string cout example copy moves lines standard input vector vector preallocated uses insert iterator insert lines vector 
technique allows copying functions usual overwrite mode insert mode 
random shuffle shuffles vector call copies stream 
requirements ensure different components library satisfy basic requirements 
requirements general possible saying class define member function operator say object class defined unspecified operator member global function 
requirements stated terms defined expressions define valid terms types satisfy requirements 
set requirements table specifies initial set valid expressions semantics 
generic algorithm uses requirements written terms valid expressions formal type parameters 
operation required linear time means worse linear time constant time operation satisfies requirement 
cases semantic requirements code 
code intended specification equivalence construct construct necessarily way construct implemented cases code unambiguously optimum implementation 
core components section contains basic template functions classes rest library 
operators avoid redundant definitions operator operator operators operator library provides template class inline bool operator const const return template class inline bool operator const const return template class inline bool operator const const return template class inline bool operator const const return pair library includes templates heterogeneous pairs values 
template class class struct pair second pair const const second template class class inline bool operator const pair const pair return second second template class class inline bool operator const pair const pair return second second library provides matching template function pair simplify construction 
saying example may say iterators return pair int double explicit types return pair types deduced template class class inline pair pair const const return pair iterators generalization pointers allow programmer different data structures containers uniform manner 
able construct template algorithms correctly efficiently different types data structures need formalize just interfaces semantics complexity assumptions iterators 
iterators objects operator returning value class built type called value type iterator 
iterator type equality defined corresponding signed integral type called distance type iterator 
iterators generalization pointers semantics generalization semantics pointers 
assures template function takes iterators works regular pointers 
depending operations defined categories iterators input iterators output iterators forward iterators bidirectional iterators random access iterators 
forward iterators satisfy requirements input output iterators kind specified 
bidirectional iterators satisfy requirements forward iterators forward iterator specified 
random access iterators satisfy requirements bidirectional iterators bidirectional iterator specified 
additional attribute forward bidirectional random access iterators mutable constant depending result behaves constant 
constant iterators satisfy requirements output iterators 
table relations iterator categories random access bidirectional forward just regular pointer array guarantees pointer value pointing past element array iterator type iterator value points past element corresponding container 
values called past values 
values iterator operator defined called 
library assumes past values 
iterators singular values associated container 
example declaration uninitialized assumed input output singular value pointer 
results expressions undefined singular values 
exception assignment non singular value iterator holds singular value 
case singular value overwritten way value 
past values non singular 
called reachable iterator finite sequence applications operator toi ifi andj refer container reachable ori reachable 
library algorithmic templates operate data structures interfaces ranges 
range pair iterators designate computation 
range empty range general range refers elements data structure starting pointed including pointed range valid reachable result application algorithms library invalid ranges undefined 
categories iterators require functions realizable category constant time amortized 
requirement tables iterators complexity column 
sections assume andb values ofx value distance tmp andm identifiers ands lvalues ofx value value typet 
input iterators class built satisfies requirements input iterator value typet expressions valid table input iterator requirements expression return type operational semantics note input iterators imply 
equality guarantee substitution property referential transparency 
algorithms input iterators attempt pass iterator twice 
single pass algorithms 
value typet required assertion note pre post condition 
note destructor assumed 
post convertible equivalence relation 
convertible convertible tot pre 
implies pre 
post orr past 
tmp return tmp lvalue type 
algorithms source input data istream iterator class 
output iterators class built type satisfies requirements output iterator expressions valid table output iterator requirements expression return type operational semantics note valid operator left side assignment statement 
assignment value iterator happens 
algorithms output iterators attempt pass iterator twice 
single pass algorithms 
equality inequality necessarily defined 
algorithms take output iterators destination placing data iterator class insert iterators insert pointers 
particular conditions hold iterator value assigned incremented output iterator valid code sequence second value output iterator may active copy time example valid code sequence 
forward iterators class built satisfies requirements forward iterator expressions valid assertion note pre post condition equivalent note destructor assumed 
result table forward iterator requirements expression return type operational semantics assertion note pre post condition note singular value 
note destructor assumed 
note singular 

post convertible equivalence relation 
convertible table forward iterator requirements expression return type operational semantics post convertible tot pre 
implies ifx mutable valid 
pre 
post orr past 
andr implies tmp return tmp note fact implies true input output iterators removal restrictions number assignments iterator applies output iterators allows multi pass directional algorithms forward iterators 
bidirectional iterators class built type satisfies requirements bidirectional iterator table specifies forward iterators add lines table bidirectional iterator requirements addition forward iterator expression return type operational semantics note bidirectional iterators allow algorithms move iterators backward forward 
assertion note pre post condition pre post 

tmp return tmp assertion note pre post condition random access iterators class built satisfies requirements random access iterator table specifies bidirectional iterators add lines table random access iterator requirements addition bidirectional iterator expression return type operational semantics distance return tmp return tmp return tmp return tmp iterator tags implement algorithms terms iterators necessary infer value type distance type iterator 
enable task required iterator category output iterator expression value type returns expression distance type returns distance 
output iterators expressions required 
examples iterator tags regular pointer types type type help template class inline value type const return template class inline distance type const return want implement function template class bidirectionaliterator assertion note pre post condition distance pre exists thata 
convertible tot convertible total ordering relation convertible total ordering relation opposite 
convertible convertible inline void reverse bidirectionaliterator bidirectionaliterator reverse value type distance type reverse defined template class bidirectionaliterator class class distance void reverse bidirectionaliterator bidirectionaliterator distance distance distance see iterator operations section tmp tmp additional pointer type huge difference huge pointers type long long define template class inline value type const huge return template class inline long long distance type const huge return long long desirable template function find specific category iterator argument function select efficient algorithm compile time 
facilitate library introduces category tag classes compile time tags algorithm selection 
input iterator tag output iterator tag forward iterator tag bidirectional iterator tag random access iterator tag 
iterator expression iterator category defined returns specific category tag describes behavior 
example define pointer types random access iterator category template class inline random access iterator tag iterator category const return random access iterator tag user defined included bidirectional iterator category saying template class inline bidirectional iterator tag iterator category const return bidirectional iterator tag template function evolve defined bidirectional iterators implemented efficiently random access iterators implementation template class bidirectionaliterator inline void evolve bidirectionaliterator bidirectionaliterator evolve iterator category template class bidirectionaliterator void evolve bidirectionaliterator bidirectionaliterator bidirectional iterator tag generic efficient algorithm template class randomaccessiterator void evolve randomaccessiterator randomaccessiterator random access iterator tag efficient generic algorithm library defined primitives simplify task defining iterator category value type distance type user definable iterators library provides predefined classes functions iterator tags struct input iterator tag struct output iterator tag struct forward iterator tag struct bidirectional iterator tag struct random access iterator tag iterator bases template class class distance struct input iterator struct output iterator output iterator template output iterators value type distance type defined 
template class class distance struct forward iterator template class class distance struct bidirectional iterator template class class distance struct random access iterator iterator category template class class distance inline input iterator tag iterator category const input iterator distance return input iterator tag inline output iterator tag iterator category const output iterator return output iterator tag template class class distance inline forward iterator tag iterator category const forward iterator distance return forward iterator tag template class class distance inline bidirectional iterator tag iterator category const bidirectional iterator distance return bidirectional iterator tag template class class distance inline random access iterator tag iterator category const random access iterator distance return random access iterator tag template class inline random access iterator tag iterator category const return random access iterator tag value type iterator template class class distance inline value type const input iterator distance return template class class distance inline value type const forward iterator distance return template class class distance inline value type const bidirectional iterator distance return template class class distance inline value type const random access iterator distance return template class inline value type const return distance type iterator template class class distance inline distance distance type const input iterator distance return distance template class class distance inline distance distance type const forward iterator distance return distance template class class distance inline distance distance type const bidirectional iterator distance return distance template class class distance inline distance distance type const random access iterator distance return distance template class inline distance type const return user wants define bidirectional iterator data structure works large memory model computer done defining class public bidirectional iterator double long code implementing need category value type type 
iterator operations random access iterators provide operators library provides template functions advance distance 
functions random access iterators constant time input forward bidirectional iterators provide linear time implementations advance takes negative random access bidirectional iterators 
advance increments decrements iterator byn distance number times takes get 
template class inputiterator class distance inline void advance inputiterator distance template class inputiterator class distance inline void distance inputiterator inputiterator distance distance argument function storing result returning result distance type deduced built iterator types 
function objects function objects objects operator defined 
important effective library 
places expect pass pointer function algorithmic template interface specified accept object operator defined 
algorithmic templates pointers functions enables arbitrary function objects 
function objects function templates increases expressive power library making resulting code efficient 
example want element addition andb put result transform plus double want negate element ofa transform negate double corresponding functions inline addition negation 
enable adaptors components manipulate function objects take arguments required correspondingly provide typedefs argument type result type function objects take argument argument type second argument type type function objects take arguments 
base classes provided simplify typedefs argument result types template class arg class result struct unary function typedef arg argument type typedef result result type template class arg class arg class result struct binary function typedef arg argument type typedef arg second argument type typedef result result type arithmetic operations library provides basic function object classes arithmetic operators language 
template class struct plus binary function operator const const const return template class struct minus binary function operator const const const return template class struct times binary function operator const const const return template class struct divides binary function operator const const const return template class struct modulus binary function operator const const const return template class struct negate unary function operator const const return comparisons library provides basic function object classes comparison operators language 
template class struct equal binary function bool bool operator const const const return template class struct equal binary function bool bool operator const const const return template class struct greater binary function bool bool operator const const const return template class struct binary function bool bool operator const const const return template class struct greater equal binary function bool bool operator const const const return template class struct equal binary function bool bool operator const const const return logical operations template class struct logical binary function bool bool operator const const const return template class struct logical binary function bool bool operator const const const return template class struct logical unary function bool bool operator const const return allocators common problems portability able encapsulate information memory model 
information includes knowledge pointer types type difference type size objects memory model memory allocation deallocation primitives 
stl addresses problem providing standard set requirements allocators objects encapsulate information 
containers stl parameterized terms allocators 
dramatically simplifies task dealing multiple memory models 
allocator requirements table assume allocator class objects type value type size type pointer ands const 
operations allocators expected amortized constant time 
expression return type value type lvalue oft const const lvalue oft table allocator requirements assertion note pre post condition pointer pointer tot type result values ofx pointer 
expression return type pointer belongs category mutable random access iterators referring tot const pointer belongs category constant random access iterators referring conversion defined pointer pointer 
allocator specialization alloc void constructor destructor alloc void pointer defined 
conversions defined instance alloc pointer alloc void pointer back alloc pointer alloc void pointer 
default allocator table allocator requirements const pointer pointer const type result values const pointer type pointer asx pointer particular sizeof const pointer sizeof pointer 
size type unsigned integral type type represent size largest object memory model 
difference type signed integral type type represent difference pointers memory model 
note destructor assumed 
address pointer address const address const pointer address allocate pointer memory allocated forn objects typet objects constructed allocate may raise appropriate exception 
deallocate result objects area pointed byp destroyed prior call deallocate 
construct void post destroy void value pointed byp destroyed 
init page size size type returned value optimal value initial buffer size type 
assumed returned page size construction time fort andu time takes greater 
max size size type largest positive value ofx difference type template class class allocator public typedef pointer typedef const const pointer assertion note pre post condition typedef typedef const const typedef value type typedef size size type typedef difference type allocator allocator pointer address const pointer const address const pointer allocate size type void deallocate pointer size type init page size size type max size class allocator void public typedef void pointer allocator allocator addition library vendors expected provide allocators supported memory models 
containers containers objects store objects 
control allocation deallocation objects constructors destructors insert erase operations 
table container class containing objects typet andb values ofx identifier andr value ofx 
table container requirements expression return type operational semantics assertion note pre post condition complex ity value type compile time compile time const rence pointer pointer type pointing tox iterator iterator type pointing const iter ator iterator type pointing const pointer tot memory model container iterator iterator category output iterator 
constant iterator iterator category output iterator 
compile time compile time compile time compile time difference type size type signed integral type identical distance type ofx iterator const iterator unsigned integral type size type represent non negative value difference type compile time compile time post size 
constant size 
constant 
linear post linear result post size 
note destructor applied element ofa memory returned 
iterator const iterator iterator const iterator table container requirements expression return type operational semantics convertible size size equal equivalence relation 
note equal defined algorithms section 
linear constant constant linear convertible linear new return size size type size type distance return assertion note pre post condition post linear max size size type size largest possible container 
complex ity constant constant empty convertible size constant convertible lexicographical member returns number elements container 
semantics defined rules constructors inserts erases 
returns iterator referring element container returns iterator past value 
iterator type container belongs bidirectional random access iterator categories container satisfies additional requirements pre defined values oft 
total ordering relation 
lexicographical compare defined algorithms section 
linear convertible linear convertible linear convertible linear swap void swap constant table reversible container requirements addition container expression return type operational semantics reverse erator const rse iterator reverse iterator const reverse iter ator rend reverse iterator const reverse iter ator constant table container requirements expression return type operational semantics assertion note pre post condition reverse iterator iterator value type difference type random access iterator reverse bidirectional iterator iterator value type difference type bidirectional iterator reverse iterator const iterator value type const difference type random access iterator reverse bidirectional iterator const iterator value type const difference type bidirectional iterator complex ity complex ity compile time compile time reverse iterator constant reverse iterator constant sequences sequence kind container organizes finite set objects type strictly linear arrangement 
library provides basic kinds sequence containers vector list deque 
provides container adaptors easy construct data types stacks queues basic sequence kinds kinds sequences user define 
tables sequence class value ofx andj satisfy input iterator requirements valid range value ofx size type valid iterator toa iterator toa valid range ina value ofx value type 
complexities expressions sequence dependent 
table sequence requirements addition container expression return type vector list deque offer programmer different complexity trade offs accordingly vector type sequence default list frequent insertions deletions middle sequence deque data structure choice insertions deletions take place sequence 
iterator iterator types sequences forward iterator category 
assertion note pre post condition post size constructs sequence copies oft 
post size distance andj 
constructs sequence equal range 
insert iterator inserts copy oft 
return value points inserted copy 
insert result copies oft 
insert result inserts copies elements 
erase result erases element pointed 
erase result erases elements range 
table optional sequence operations expression return type operational semantics container front const back const vector list deque vector list deque push front void insert list deque push back void insert vector list deque pop front void erase list deque pop back void erase vector list deque const operations table provided containers take constant time 
vector vector kind sequence supports random access iterators 
addition supports amortized constant time insert erase operations insert erase middle take linear time 
storage management handled automatically hints improve efficiency 
template class template class class allocator allocator class vector public typedefs typedef iterator typedef const iterator typedef allocator pointer pointer typedef allocator typedef allocator const const typedef size type typedef difference type typedef value type typedef reverse iterator typedef const reverse iterator allocation deallocation vector vector size type const value vector const vector allocator template class inputiterator vector inputiterator inputiterator vector vector allocator operator const vector allocator void reserve size type void swap vector allocator accessors table optional sequence operations expression return type operational semantics container iterator const iterator const iterator const iterator const reverse iterator const reverse iterator vector deque reverse iterator rend const reverse iterator rend size type size const size type max size const size type capacity const bool empty const operator size type const operator size type const front const front const back const back const insert erase void push back const iterator insert iterator position const void insert iterator position size type const template class inputiterator void insert iterator position inputiterator inputiterator void pop back void erase iterator position void erase iterator iterator template class class allocator bool operator const vector allocator const vector allocator template class class allocator bool operator const vector allocator const vector allocator iterator random access iterator referring exact type implementation dependent determined 
const iterator constant random access iterator referring const exact type implementation dependent determined allocator 
guaranteed constructor const iterator 
size type unsigned integral type 
exact type implementation dependent determined allocator 
difference type signed integral type 
exact type implementation dependent determined 
constructor template class inputiterator vector inputiterator inputiterator calls copy constructor oft wheren distance iterators forward bidirectional random access categories 
calls copy constructor oft just input iterators impossible determine distance copying 
member returns size allocated storage vector 
member function reserve directive informs vector planned change size manage storage allocation accordingly 
change size sequence takes linear time size sequence 
reallocation happens point current capacity argument reserve 
reserve capacity greater equal argument reserve reallocation happens equal previous value capacity 
reallocation invalidates pointers iterators referring elements sequence 
guaranteed reallocation takes place insertions happen reserve takes place till time size vector reaches size specified 
insert causes reallocation new size greater old capacity 
reallocation happens iterators insertion point remain valid 
inserting single element vector linear distance insertion point vector 
amortized complexity lifetime vector inserting single element constant 
insertion multiple elements vector single call insert member function linear sum number elements plus distance vector 
words faster insert elements middle vector insertion time 
insert template member function storage insertion forward bidirectional random access category 
insert elements inserting middle vectors 
erase invalidates iterators point erase 
destructor oft called number times equal number elements erased assignment operator oft called number times equal number elements vector erased elements 
optimize space allocation specialization provided class vector bool allocator public bit typedefs class public operator bool const operator const bool void flip flips bit typedef bool const typedef iterator typedef const iterator typedef size size type typedef difference type typedef bool value type typedef reverse iterator typedef const reverse iterator allocation deallocation vector vector size type const bool value bool vector const vector bool allocator template class inputiterator vector inputiterator inputiterator vector vector bool allocator operator const vector bool allocator void reserve size type void swap vector bool allocator accessors iterator const iterator const iterator const iterator const reverse iterator const reverse iterator reverse iterator rend const reverse iterator rend size type size const size type max size const size type capacity const bool empty const operator size type const operator size type const front const front const back const back const insert erase void push back const bool iterator insert iterator position const bool bool void insert iterator position size type const bool template class inputiterator void insert iterator position inputiterator inputiterator void pop back void erase iterator position void erase iterator iterator void swap vector bool allocator vector bool allocator bool operator const vector bool allocator const vector bool allocator bool operator const vector bool allocator const vector bool allocator class simulates behavior single bit bool 
implementation expected provide specializations vector bool supported memory models 
list possible specialization 
write template template class class allocator allocator class vector bool allocator 
bool allocator provided 
list kind sequence supports bidirectional iterators allows constant time insert erase operations sequence storage management handled automatically 
vectors deques fast random access list elements supported algorithms need sequential access anyway 
template class template class class allocator allocator class list public typedefs typedef iterator typedef const iterator typedef allocator pointer pointer typedef allocator typedef allocator const const typedef size type typedef difference type typedef value type typedef reverse iterator typedef const reverse iterator allocation deallocation list list size type const value template class inputiterator list inputiterator inputiterator list const list allocator list list allocator operator const list allocator void swap list allocator accessors iterator const iterator const iterator const iterator const reverse iterator const reverse iterator reverse iterator rend const reverse iterator rend bool empty const size type size const size type max size const front const front const back const back const insert erase void push front const void push back const iterator insert iterator position const void insert iterator position size type const template class inputiterator void insert iterator position inputiterator inputiterator void pop front void pop back void erase iterator position void erase iterator iterator special operations list void splice iterator position list allocator void splice iterator position list allocator iterator void splice iterator position list allocator iterator iterator void remove const value template class predicate void remove predicate pred void unique template class void unique binary pred void merge list allocator template class compare void merge list allocator compare comp void reverse void sort template class compare void sort compare comp template class class allocator bool operator const list allocator const list allocator template class class allocator bool operator const list allocator const list allocator iterator bidirectional iterator referring exact type implementation dependent determined 
const iterator constant bidirectional iterator referring exact type implementation dependent determined 
guaranteed constructor iterator 
size type unsigned integral type 
exact type implementation dependent determined allocator 
difference type signed integral type 
exact type implementation dependent determined 
insert affect validity iterators 
insertion single element list takes constant time exactly call copy constructor insertion multiple elements list linear number elements inserted number calls copy constructor exactly equal number elements inserted 
erase invalidates iterators erased elements 
erasing single element constant time operation single call destructor oft 
erasing range list linear time size range number calls destructor typet exactly equal size range 
lists allow fast insertion erasing middle list certain operations provided specifically list provides splice operations destructively move elements list void splice iterator position list allocator inserts contents ofx andx empty 
takes constant time 
result undefined 
void splice iterator position list allocator iterator inserts element pointed list position removes element takes constant time 
valid iterator ofx 
result unchanged void splice iterator position list allocator iterator iterator inserts elements range position removes elements takes constant time takes linear time valid range inx 
result undefined iterator range 
remove erases elements list referred list iterator conditions hold value pred true remove stable relative order elements removed relative order original list 
exactly size applications corresponding predicate done 
unique erases element consecutive group equal elements list 
exactly size applications corresponding binary predicate done 
merge merges argument list list assumed sorted 
merge stable equal elements lists elements list precede elements argument list empty merge 
size comparisons done 
reverse reverses order elements list 
linear time 
sort sorts list compare function object 
stable relative order equal elements preserved 
comparisons done equal size 
deque deque kind sequence vector supports random access iterators 
addition supports constant time insert erase operations insert erase middle take linear time 
vectors storage management handled automatically 
template class template class class allocator allocator class deque public typedefs typedef iterator typedef const iterator typedef allocator pointer pointer typedef allocator typedef allocator const const typedef size type typedef difference type typedef value type typedef reverse iterator typedef const reverse iterator allocation deallocation deque deque size type const value deque const deque allocator template class inputiterator deque inputiterator inputiterator deque deque allocator operator const deque allocator void swap deque allocator accessors iterator const iterator const iterator const iterator const reverse iterator const reverse iterator reverse iterator rend const reverse iterator rend size type size const size type max size const bool empty const operator size type const operator size type const front const front const back const back const insert erase void push front const void push back const iterator insert iterator position const void insert iterator position size type const template class inputiterator void insert iterator position inputiterator inputiterator void pop front void pop back void erase iterator position void erase iterator iterator template class class allocator bool operator const deque allocator const deque allocator template class class allocator bool operator const deque allocator const deque allocator iterator random access iterator referring exact type implementation dependent determined 
const iterator constant random access iterator referring const exact type implementation dependent determined allocator 
guaranteed constructor const iterator 
size type unsigned integral type 
exact type implementation dependent determined allocator 
difference type signed integral type 
exact type implementation dependent determined 
insert middle deque invalidates iterators deque insert deque invalidate iterators deque effect validity deque 
worst case inserting single element deque takes time linear minimum distance insertion point deque distance insertion point deque 
inserting single element deque takes constant time causes single call copy constructor oft 
deque especially optimized pushing popping elements 
erase middle deque invalidates iterators deque 
erase pop deque invalidate iterators erased element 
number calls destructor number elements erased number calls assignment operator equal minimum number elements erased elements number element erased elements 
associative containers associative containers provide ability fast retrieval data keys 
library provides basic kinds associative containers set multiset map 
parameterized key ordering relation compare induces total ordering elements 
addition map associate arbitrary typet 
object type compare called comparison object container 
section talk equality keys mean equivalence relation imposed comparison keys 
andk considered equal comparison comp false comp false 
associative container supports unique keys may contain element key 
supports equal keys set support unique keys multiset support equal keys 
set multiset value type key type 
map multimap equal pair const key 
iterator associative container bidirectional iterator category 
insert affect validity iterators container invalidates iterators erased elements 
table associative container class value uniq value supports unique keys anda eq value ofx supports multiple keys andj satisfy input iterator requirements refer elements type valid range valid iterator toa iterator toa valid range ina value ofx value type andk value ofx key type 
table associative container requirements addition container expression return type assertion note pre post condition complexity key type key compile time key compare compare defaults key type 
compile time value compare binary predicate type askey compare multiset ordering relation pairs induced component key multimap 
constructs empty container comparison object 
constructs empty container comparison object 
compile time constant constant table associative container requirements addition container expression return type constructs empty container inserts elements range comparison object 
comparison object 
key comp key compare returns comparison object constructed 
value comp value compar uniq insert pair iterator bool returns object compare constructed comparison object 
assertion note pre post condition element container key equal key oft 
component returned pair indicates insertion takes place component pair points element key equal key oft 
eq insert iterator returns iterator pointing newly inserted element 
insert iterator element key equal key oft containers unique keys containers equal keys 
returns iterator pointing element key equal key oft 
hint pointing insert start search 
insert result inserts elements range container 
erase size type erases elements container key equal tok 
returns number erased elements 
complexity nlogn general distance linear sorted value comp constant constant logarithmic logarithmic logarithmic general amortized constant ift inserted right 
nlog size distance general linear sorted value comp log size count erase result erases element pointed 
amortized constant fundamental property iterators associative containers iterate containers non descending order keys non descending defined comparison construct 
andj distance positive value comp false associative containers unique keys stronger condition holds set table associative container requirements addition container expression return type erase result erases elements range 
find iterator const iterator value comp true 
set kind associative container supports unique keys contains key value provides fast retrieval keys 
template class key class compare key template class class allocator allocator class set public typedefs returns iterator pointing element key equal tok ora element 
count size type returns number elements key equal tok 
lower bound iterator const iterator upper bound iterator const iterator equal range pair iterator iterator pair const iter ator const iterator returns iterator pointing element key 
typedef key key type typedef key value type typedef allocator key pointer pointer typedef allocator key typedef allocator key const const assertion note pre post condition returns iterator pointing element key greater 
equivalent pair lower bound upper bound 
complexity log size wheren distance 
logarithmic log size count logarithmic logarithmic logarithmic typedef compare key compare typedef compare value compare typedef iterator typedef iterator const iterator typedef size type typedef difference type typedef reverse iterator typedef const reverse iterator allocation deallocation set const compare comp compare template class inputiterator set inputiterator inputiterator const compare comp compare set const set key compare allocator set set key compare allocator operator const set key compare allocator void swap set key compare allocator accessors key compare key comp const value compare value comp const iterator const iterator const reverse iterator const reverse iterator rend const bool empty const size type size const size type max size const insert erase pair iterator bool insert const value type iterator insert iterator position const value type template class inputiterator void insert inputiterator inputiterator void erase iterator position size type erase const key type void erase iterator iterator set operations iterator find const key type const size type count const key type const iterator lower bound const key type const iterator upper bound const key type const pair iterator iterator equal range const key type const template class key class compare class allocator bool operator const set key compare allocator const set key compare allocator template class key class compare class allocator bool operator const set key compare allocator const set key compare allocator iterator constant bidirectional iterator referring const value type 
exact type implementation dependent determined 
const iterator type 
size type unsigned integral type 
exact type implementation dependent determined allocator 
difference type signed integral type 
exact type implementation dependent determined 
multiset multiset kind associative container supports equal keys possibly contains multiple copies key value provides fast retrieval keys 
template class key class compare key template class class allocator allocator class multiset public typedefs typedef key key type typedef key value type typedef allocator key pointer pointer typedef allocator key typedef allocator key const const typedef compare key compare typedef compare value compare typedef iterator typedef iterator const iterator typedef size type typedef difference type typedef reverse iterator typedef const reverse iterator allocation deallocation multiset const compare comp compare template class inputiterator multiset inputiterator inputiterator const compare comp compare multiset const multiset key compare allocator multiset multiset key compare allocator operator const multiset key compare allocator void swap multiset key compare allocator accessors key compare key comp const value compare value comp const iterator const iterator const reverse iterator reverse iterator rend bool empty const size type size const size type max size const insert erase iterator insert const value type iterator insert iterator position const value type template class inputiterator void insert inputiterator inputiterator void erase iterator position size type erase const key type void erase iterator iterator multiset operations iterator find const key type const size type count const key type const iterator lower bound const key type const iterator upper bound const key type const pair iterator iterator equal range const key type const template class key class compare class allocator bool operator const multiset key compare allocator const multiset key compare allocator template class key class compare class allocator bool operator const multiset key compare allocator const multiset key compare allocator iterator constant bidirectional iterator referring const value type 
exact type implementation dependent determined 
const iterator type 
size type unsigned integral type 
exact type implementation dependent determined allocator 
difference type signed integral type 
exact type implementation dependent determined 
map map kind associative container supports unique keys contains key value provides fast retrieval values typet keys 
template class key class class compare key template class class allocator allocator class map public typedefs typedef key key type typedef pair const key value type typedef compare key compare class value compare public binary function value type value type bool friend class map protected compare comp value compare compare comp public bool operator const value type const value type return comp typedef iterator typedef const iterator typedef allocator value type pointer pointer typedef allocator value type typedef allocator value type const const typedef size type typedef difference type typedef reverse iterator typedef const reverse iterator allocation deallocation map const compare comp compare template class inputiterator map inputiterator inputiterator const compare comp compare map const map key compare allocator map map key compare allocator operator const map key compare allocator void swap map key compare allocator accessors key compare key comp const value compare value comp const iterator const iterator const iterator const iterator const reverse iterator const reverse iterator reverse iterator rend const reverse iterator rend bool empty const size type size const size type max size const allocator operator const key type insert erase pair iterator bool insert const value type iterator insert iterator position const value type template class inputiterator void insert inputiterator inputiterator void erase iterator position size type erase const key type void erase iterator iterator map operations iterator find const key type const iterator find const key type const size type count const key type const iterator lower bound const key type const iterator lower bound const key type const iterator upper bound const key type const iterator upper bound const key type const pair iterator iterator equal range const key type pair const iterator const iterator equal range const key type const template class key class class compare class allocator bool operator const map key compare allocator const map key compare allocator template class key class class compare class allocator bool operator const map key compare allocator const map key compare allocator iterator bidirectional iterator referring value type 
exact type implementation dependent determined 
const iterator constant bidirectional iterator referring const value type 
exact type implementation dependent determined allocator 
guaranteed constructor const iterator 
size type unsigned integral type 
exact type implementation dependent determined allocator 
difference type signed integral type 
exact type implementation dependent determined 
addition standard set member functions associative containers map provides allocator operator const key type 
mapm semantically equivalent insert pair second 
multimap multimap kind associative container supports equal keys possibly contains multiple copies key value provides fast retrieval values typet keys 
template class key class class compare key template class class allocator allocator class multimap public typedefs typedef key key type typedef pair const key value type typedef compare key compare class value compare public binary function value type value type bool friend class multimap protected compare comp value compare compare comp public bool operator const value type const value type return comp typedef iterator typedef const iterator typedef allocator value type pointer pointer typedef allocator value type typedef allocator value type const const typedef size type typedef difference type typedef reverse iterator typedef const reverse iterator allocation deallocation multimap const compare comp compare template class inputiterator multimap inputiterator inputiterator const compare comp compare multimap const multimap key compare allocator multimap multimap key compare allocator operator const multimap key compare allocator void swap multimap key compare allocator accessors key compare key comp const value compare value comp const iterator const iterator const iterator const iterator const reverse iterator const reverse iterator reverse iterator rend const reverse iterator rend bool empty const size type size const size type max size const insert erase iterator insert const value type iterator insert iterator position const value type template class inputiterator void insert inputiterator inputiterator void erase iterator position size type erase const key type void erase iterator iterator multimap operations iterator find const key type const iterator find const key type const size type count const key type const iterator lower bound const key type const iterator lower bound const key type const iterator upper bound const key type const iterator upper bound const key type const pair iterator iterator equal range const key type pair const iterator const iterator equal range const key type const template class key class class compare class allocator bool operator const multimap key compare allocator const multimap key compare allocator template class key class class compare class allocator bool operator const multimap key compare allocator const multimap key compare allocator iterator bidirectional iterator referring value type 
exact type implementation dependent determined 
const iterator constant bidirectional iterator referring const value type 
exact type implementation dependent determined allocator 
guaranteed constructor const iterator 
size type unsigned integral type 
exact type implementation dependent determined allocator 
difference type signed integral type 
exact type implementation dependent determined 
stream iterators possible algorithmic templates directly input output streams appropriate iterator template classes provided 
example partial sum copy istream iterator double cin istream iterator double ostream iterator double cout reads file containing floating point numbers prints partial sums 
istream iterator istream iterator reads operator successive elements input stream constructed 
constructed time iterator reads stores value stream reached operator void stream returns false iterator equal stream iterator value 
constructor iterator constructs stream input iterator object legitimate iterator condition 
result stream defined 
iterator value returned 
impossible store things istream iterators 
main peculiarity istream iterators fact operators equality preserving guarantee time new value read 
practical consequence fact istream iterators pass algorithms perfect sense multi pass algorithms appropriate inmemory data structures 
stream iterators equal 
stream iterator equal non stream iterator 
non stream iterators equal constructed stream 
template class class distance class istream iterator public input iterator distance friend bool operator const istream iterator distance const istream iterator distance public istream iterator istream iterator istream istream iterator const istream iterator distance istream iterator const operator const istream iterator distance operator istream iterator distance operator int template class class distance bool operator const istream iterator distance const istream iterator distance ostream iterator ostream iterator writes successive elements output stream constructed 
constructed constructor argument string called delimiter string written stream written 
possible get value output iterator 
output iterator situations result ostream iterator defined template class class ostream iterator public output iterator public ostream iterator ostream ostream iterator ostream const char delimiter ostream iterator const ostream iterator ostream iterator ostream iterator operator const value ostream iterator operator ostream iterator operator ostream iterator operator int algorithms algorithms separated particular implementations data structures parameterized iterator types 
user defined data structures long data structures iterator types satisfying assumptions algorithms 
place copying versions provided certain algorithms 
decision include copying version usually complexity considerations 
cost doing operation dominates cost copy copying version included 
example sort copy included cost sorting significant users followed 
version provided algorithm called algorithm copy 
algorithms take predicates suffix follows suffix copy 
predicate class algorithm expects function object applied result dereferencing corresponding iterator returns value convertible 
words algorithm takes predicate pred argument iterator argument correctly pred 
function assumed apply non constant function dereferenced iterator 
class algorithm expects function object applied result dereferencing corresponding iterators dereferencing iterator typet part signature returns value convertible bool 
words algorithm takes binary pred argument iterator arguments correctly construct binary pred 
takes iterator type argument cases value part signature correctly context binary pred value 
expected pred apply non constant function dereferenced iterators 
description algorithms operators iterator categories defined 
cases semantics tmp advance tmp return tmp ofa distance distance return 
non mutating sequence operations template class inputiterator class function function inputiterator inputiterator function result dereferencing iterator range 
assumed apply non constant function dereferenced iterator applied exactly times 
iff returns result result ignored 
find template class inputiterator class inputiterator find inputiterator inputiterator const value template class inputiterator class predicate inputiterator find inputiterator inputiterator predicate pred find returns iterator range corresponding conditions hold value pred true 
iterator returned 
exactly find value applications corresponding predicate done 
adjacent find template class inputiterator inputiterator adjacent find inputiterator inputiterator template class inputiterator class inputiterator adjacent find inputiterator inputiterator binary pred adjacent find returns andi range corresponding conditions hold binary pred true 
returned 
applications corresponding predicate done 
count template class inputiterator class class size void count inputiterator inputiterator const value size template class inputiterator class predicate class size void count inputiterator inputiterator predicate pred size count adds number iterators range corresponding conditions hold value pred true 
applications corresponding predicate done 
count store result argument returning result size type deduced built iterator types 
mismatch template class inputiterator class inputiterator pair inputiterator inputiterator mismatch inputiterator inputiterator inputiterator template class inputiterator class inputiterator class pair inputiterator inputiterator mismatch inputiterator inputiterator inputiterator binary pred mismatch returns pair iterators iterator range corresponding conditions hold binary pred false 
iterator pair returned 
applications corresponding predicate done 
equal template class inputiterator class inputiterator bool equal inputiterator inputiterator inputiterator template class inputiterator class inputiterator class bool equal inputiterator inputiterator inputiterator binary pred equal returns true iterator range corresponding conditions hold binary pred true 

applications corresponding predicate done 
search template class forwarditerator class forwarditerator forwarditerator search forwarditerator forwarditerator forwarditerator forwarditerator template class forwarditerator class forwarditerator class forwarditerator search forwarditerator forwarditerator forwarditerator forwarditerator binary pred search finds subsequence equal values sequence 
search returns iterator range non negative corresponding conditions hold binary pred true 
iterator returned 
applications corresponding predicate done 
quadratic behavior highly 
mutating sequence operations copy template class inputiterator class outputiterator outputiterator copy inputiterator inputiterator outputiterator result copy copies elements 
non negative result performed copy 
assignments done 
result undefined range 
template class bidirectionaliterator class bidirectionaliterator bidirectionaliterator copy backward bidirectionaliterator bidirectionaliterator bidirectionaliterator result copy backward copies elements range range result result starting proceeding 
range result result 
positive integer result performed copy backward 
exactly assignments done 
result backward undefined range 
swap template class void swap swap exchanges values stored locations 
template class forwarditerator class forwarditerator void iter swap forwarditerator forwarditerator iter swap exchanges values pointed andb 
template class forwarditerator class forwarditerator forwarditerator swap ranges forwarditerator forwarditerator forwarditerator non negative integer swap performed swap 
swap ranges returns 
exactly swaps done 
result swap ranges undefined ranges overlap 
transform template class inputiterator class outputiterator class outputiterator transform inputiterator inputiterator outputiterator result op template class inputiterator class inputiterator class outputiterator class outputiterator transform inputiterator inputiterator inputiterator outputiterator result binary op transform assigns range result result new corresponding value equal result op result result transform 
applications op binary op performed 
op binary op expected side effects result may equal case unary transform case binary transform 
replace template class forwarditerator class void replace forwarditerator forwarditerator const old value const new value template class forwarditerator class predicate class void replace forwarditerator forwarditerator predicate pred const new value replace substitutes elements referred range value corresponding conditions hold old value pred true 
exactly applications corresponding predicate done 
template class inputiterator class outputiterator class outputiterator replace copy inputiterator inputiterator outputiterator result const old value const new value template class iterator class outputiterator class predicate class outputiterator replace copy iterator iterator outputiterator result predicate pred const new value replace copy assigns iterator range result result new value result depending corresponding conditions hold result old value pred result true 
replace copy returns result 
exactly applications corresponding predicate done 
fill template class forwarditerator class void fill forwarditerator forwarditerator const value template class outputiterator class size class outputiterator fill outputiterator size const value fill iterators range fill orn assignments done 
generate template class forwarditerator class generator void generate forwarditerator forwarditerator generator gen template class outputiterator class size class generator outputiterator generate outputiterator size generator gen generate invokes function assigns return value iterators range gen takes arguments generate orn invocations assignments done 
remove template class forwarditerator class forwarditerator remove forwarditerator forwarditerator const value template class forwarditerator class predicate forwarditerator remove forwarditerator forwarditerator predicate pred remove eliminates elements referred iterator range corresponding conditions hold value pred true remove returns resulting range remove stable relative order elements removed relative order original range 
exactly applications corresponding predicate done 
template class inputiterator class outputiterator class outputiterator remove copy inputiterator inputiterator outputiterator result const value template class inputiterator class outputiterator class predicate outputiterator remove copy inputiterator inputiterator outputiterator result predicate pred remove copy copies elements referred range corresponding conditions hold value pred true remove copy returns resulting range 
remove copy stable relative order elements resulting range relative order original range 
applications corresponding predicate done 
unique template class forwarditerator forwarditerator unique forwarditerator forwarditerator template class forwarditerator class forwarditerator unique forwarditerator forwarditerator binary pred unique eliminates element consecutive group equal elements referred iterator range corresponding conditions hold pred true unique returns resulting range 
exactly applications corresponding predicate done 
template class inputiterator class outputiterator outputiterator unique copy inputiterator inputiterator outputiterator result template class inputiterator class outputiterator class outputiterator unique copy inputiterator inputiterator outputiterator result binary pred unique copy copies element consecutive group equal elements referred iterator range corresponding conditions hold pred true unique copy returns resulting range 
applications corresponding predicate done 
reverse template class bidirectionaliterator void reverse bidirectionaliterator bidirectionaliterator non negative integer reverse applies swap pairs iterators 
exactly swaps performed 
template class bidirectionaliterator class outputiterator outputiterator reverse copy bidirectionaliterator bidirectionaliterator outputiterator result reverse copy copies range range result result non negative integer assignment takes place result reverse copy assignments done 
result copy undefined result result overlap 
rotate template class forwarditerator void rotate forwarditerator forwarditerator middle forwarditerator non negative rotate places element middle middle middle valid ranges 
swaps done 
template class forwarditerator class outputiterator outputiterator rotate copy forwarditerator forwarditerator middle forwarditerator outputiterator result rotate copy copies range range result result non negative integer assignment takes place result middle 
rotate copy 
assignments done 
result copy undefined result result overlap 
random shuffle template class randomaccessiterator void random shuffle randomaccessiterator randomaccessiterator template class randomaccessiterator class void random shuffle randomaccessiterator randomaccessiterator rand random shuffle shuffles elements range uniform distribution 
exactly swaps done random shuffle take particular random number generating function object rand rand takes positive argument distance type randomaccessiterator returns randomly chosen value andn 
partitions template class bidirectionaliterator class predicate bidirectionaliterator partition bidirectionaliterator bidirectionaliterator predicate pred partition places elements range elements satisfy 
returns range pred true range pred false 
swaps 
applications predicate done 
template class bidirectionaliterator class predicate bidirectionaliterator stable partition bidirectionaliterator bidirectionaliterator predicate pred stable partition places elements range satisfy pred elements satisfy 
returns range pred true range pred false 
relative order elements groups preserved 
log swaps linear number swaps extra memory 
exactly applications predicate done 
sorting related operations operations section versions takes function object type compare uses 
compare function object returns value convertible bool 
compare comp algorithms assuming ordering relation 
comp satisfies standard axioms total ordering apply non constant function dereferenced iterator 
algorithms take compare version 
comp true defaults true 
sequence sorted respect comparator comp iterator pointing element sequence non negative integer valid iterator pointing element sequence comp false 
descriptions functions deal ordering relationships frequently notion equality describe concepts stability 
equality refer necessarily operator equality relation induced total ordering 
element considered equal 
sort template class randomaccessiterator void sort randomaccessiterator randomaccessiterator template class randomaccessiterator class compare void sort randomaccessiterator randomaccessiterator compare comp sort sorts elements range 
wheren equals comparisons average 
worst case behavior important stable sort partial sort 
template class randomaccessiterator void stable sort randomaccessiterator randomaccessiterator template class randomaccessiterator class compare void stable sort randomaccessiterator randomaccessiterator compare comp stable sort sorts elements range 
stable relative order equal elements preserved 
logn wheren equals comparisons extra memory available 
template class randomaccessiterator void partial sort randomaccessiterator randomaccessiterator middle randomaccessiterator template class randomaccessiterator class compare void partial sort randomaccessiterator randomaccessiterator middle randomaccessiterator compare comp partial sort places middle sorted elements range range middle 
rest elements range middle placed undefined order 
takes approximately log middle comparisons 
template class inputiterator class randomaccessiterator randomaccessiterator partial sort copy inputiterator inputiterator randomaccessiterator result randomaccessiterator result template class inputiterator class randomaccessiterator class compare randomaccessiterator partial sort copy inputiterator inputiterator randomaccessiterator result randomaccessiterator result compare comp partial sort copy places result result sorted elements range result result min result result 
returns result result whichever smaller 
takes approximately log min result result comparisons 
nth element template class randomaccessiterator void nth element randomaccessiterator randomaccessiterator nth randomaccessiterator template class randomaccessiterator class compare void nth element randomaccessiterator randomaccessiterator nth randomaccessiterator compare comp nth element element position pointed nth element position range sorted 
range nth iterator range nth holds false 
linear average 
binary search algorithms section versions binary search 
non random access iterators minimizing number comparisons logarithmic types iterators 
especially appropriate random access iterators algorithms logarithmic number steps data structure 
non random access iterators execute linear number steps 
template class forwarditerator class forwarditerator lower bound forwarditerator forwarditerator const value template class forwarditerator class class compare forwarditerator lower bound forwarditerator forwarditerator const value compare comp lower bound finds position value inserted violating ordering 
lower bound returns range range corresponding conditions hold value value true 
comparisons done 
template class forwarditerator class forwarditerator upper bound forwarditerator forwarditerator const value template class forwarditerator class class compare forwarditerator upper bound forwarditerator forwarditerator const value compare comp upper bound finds position value inserted violating ordering 
upper bound returns iterator range iterator range corresponding conditions hold value comp value false 
comparisons done 
template class forwarditerator class pair forwarditerator forwarditerator equal range forwarditerator forwarditerator const value template class forwarditerator class class compare pair forwarditerator forwarditerator equal range forwarditerator forwarditerator const value compare comp equal range finds largest subrange value inserted iterator 
satisfies corresponding conditions value value comp value false comp value false 
log comparisons done 
template class forwarditerator class bool binary search forwarditerator forwarditerator const value template class forwarditerator class class compare bool binary search forwarditerator forwarditerator const value compare comp binary search returns true iterator range satisfies corresponding conditions value value comp value false comp value false 
comparisons done 
merge template class inputiterator class inputiterator class outputiterator outputiterator merge inputiterator inputiterator inputiterator inputiterator outputiterator result template class inputiterator class inputiterator class outputiterator class compare outputiterator merge inputiterator inputiterator inputiterator inputiterator outputiterator result compare comp merge merges sorted ranges range result result 
merge stable equal elements ranges elements range precede elements second 
merge returns result 
comparisons performed 
result undefined resulting range overlaps original ranges 
template class bidirectionaliterator void inplace merge bidirectionaliterator bidirectionaliterator middle bidirectionaliterator template class bidirectionaliterator class compare void inplace merge bidirectionaliterator bidirectionaliterator middle bidirectionaliterator compare comp inplace merge merges sorted consecutive ranges middle middle putting result merge range 
merge stable equal elements ranges elements range precede elements second 
additional memory available comparisons performed 
additional memory available algorithm nlogn complexity may 
set operations sorted structures section defines basic set operations sorted structures 
multisets containing multiple copies equal elements 
semantics set operations generalized multisets standard way defining union contain maximum number occurrences element intersection contain minimum 
template class inputiterator class inputiterator bool includes inputiterator inputiterator inputiterator inputiterator template class inputiterator class inputiterator class compare bool includes inputiterator inputiterator inputiterator inputiterator compare comp includes element range contained range 
returns false 
comparisons performed 
template class inputiterator class inputiterator class outputiterator outputiterator set union inputiterator inputiterator inputiterator inputiterator outputiterator result template class inputiterator class inputiterator class outputiterator class compare outputiterator set union inputiterator inputiterator inputiterator inputiterator outputiterator result compare comp set union constructs sorted union elements ranges 
returns constructed range set union stable element ranges range copied 
comparisons performed 
result union undefined resulting range overlaps original ranges 
template class inputiterator class inputiterator class outputiterator outputiterator set intersection inputiterator inputiterator inputiterator inputiterator outputiterator result template class inputiterator class inputiterator class outputiterator class compare outputiterator set intersection inputiterator inputiterator inputiterator inputiterator outputiterator result compare comp set intersection constructs sorted intersection elements ranges 
returns constructed range 
set intersection guaranteed stable element ranges range copied 
comparisons performed 
result set intersection undefined resulting range overlaps original ranges 
template class inputiterator class inputiterator class outputiterator outputiterator set difference inputiterator inputiterator inputiterator inputiterator outputiterator result template class inputiterator class inputiterator class outputiterator class compare outputiterator set difference inputiterator inputiterator inputiterator inputiterator outputiterator result compare comp set difference constructs sorted difference elements ranges 
returns constructed range 
comparisons performed 
result set difference undefined resulting range overlaps original ranges 
template class inputiterator class inputiterator class outputiterator outputiterator set symmetric difference inputiterator inputiterator inputiterator inputiterator outputiterator result template class inputiterator class inputiterator class outputiterator class compare outputiterator set symmetric difference inputiterator inputiterator inputiterator inputiterator outputiterator result compare comp set symmetric difference constructs sorted symmetric difference elements ranges 
returns constructed range 
comparisons performed 
result symmetric difference undefined resulting range overlaps original ranges 
heap operations heap particular organization elements range random access iterators 
key properties largest element range may removed heap new element added push heap logn time 
properties heaps useful priority queues heap converts range heap heap turns heap sorted sequence 
template class randomaccessiterator void push heap randomaccessiterator randomaccessiterator template class randomaccessiterator class compare void push heap randomaccessiterator randomaccessiterator compare comp push heap assumes range valid heap properly places value resulting heap 
comparisons performed 
template class randomaccessiterator void pop heap randomaccessiterator randomaccessiterator template class randomaccessiterator class compare void pop heap randomaccessiterator randomaccessiterator compare comp pop heap assumes range valid heap swaps value location value heap 
log comparisons performed 
template class randomaccessiterator void heap randomaccessiterator randomaccessiterator template class randomaccessiterator class compare void heap randomaccessiterator randomaccessiterator compare comp heap constructs heap range 
comparisons performed 
template class randomaccessiterator void sort heap randomaccessiterator randomaccessiterator template class randomaccessiterator class compare void sort heap randomaccessiterator randomaccessiterator compare comp sort heap sorts elements heap 
comparisons performed wheren equal sort heap stable 
minimum maximum template class const min const const template class class compare const min const const compare comp template class const max const const template class class compare const max const const compare comp min returns smaller larger min return argument arguments equal 
template class inputiterator inputiterator max element inputiterator inputiterator template class inputiterator class compare inputiterator max element inputiterator inputiterator compare comp max element returns range iterator range corresponding conditions hold false 
applications corresponding comparisons done 
template class inputiterator inputiterator min element inputiterator inputiterator template class inputiterator class compare inputiterator min element inputiterator inputiterator compare comp min element returns range iterator range corresponding conditions hold false 
applications corresponding comparisons done 
lexicographical comparison template class inputiterator class inputiterator bool lexicographical compare inputiterator inputiterator inputiterator inputiterator template class inputiterator class inputiterator class compare bool lexicographical compare inputiterator inputiterator inputiterator inputiterator compare comp lexicographical compare returns true sequence elements defined range lexicographically sequence elements defined range 
returns false 
min applications corresponding comparison done 
permutation generators template class bidirectionaliterator bool permutation bidirectionaliterator bidirectionaliterator template class bidirectionaliterator class compare bool permutation bidirectionaliterator bidirectionaliterator compare comp permutation takes sequence defined range transforms permutation 
permutation assuming set permutations lexicographically sorted respect operator comp 
permutation exists returns true 
transforms sequence smallest permutation sorted 
swaps performed 
template class bidirectionaliterator bool prev permutation bidirectionaliterator bidirectionaliterator template class bidirectionaliterator class compare bool prev permutation bidirectionaliterator bidirectionaliterator compare comp prev permutation takes sequence defined range transforms previous permutation 
previous permutation assuming set permutations lexicographically sorted respect operator comp 
permutation exists returns true 
transforms sequence largest permutation sorted 
swaps performed 
generalized numeric operations accumulate template class inputiterator class accumulate inputiterator inputiterator init template class inputiterator class class accumulate inputiterator inputiterator init binary op accumulate similar apl reduction operator common lisp reduce function avoids difficulty defining result reduction empty sequence requiring initial value 
accumulation done initializing initial modifying acc binary op acc range order binary op assumed cause side effects 
inner product template class inputiterator class inputiterator class inner product inputiterator inputiterator inputiterator init template class inputiterator class inputiterator class class class inner product inputiterator inputiterator inputiterator init binary op binary op inner product computes result initializing initial modifying acc acc acc binary op acc binary op range range order binary op op assumed cause side effects 
partial sum template class inputiterator class outputiterator outputiterator partial sum inputiterator inputiterator outputiterator result template class inputiterator class outputiterator class outputiterator partial sum inputiterator inputiterator outputiterator result binary op partial sum assigns iterator range result result value correspondingly equal 
result binary op binary op binary op result 
partial sum 
exactly applications op performed binary op expected side effects result may equal 
adjacent difference template class inputiterator class outputiterator outputiterator adjacent difference inputiterator inputiterator outputiterator result template class inputiterator class outputiterator class outputiterator adjacent difference inputiterator inputiterator outputiterator result binary op adjacent difference assigns element referred range result result value correspondingly equal result result op result result result gets value adjacent difference 
exactly applications op performed binary op expected side effects result may equal 
adaptors adaptors template classes provide interface mappings 
example insert iterator provides container output iterator interface 
container adaptors useful provide restricted interfaces containers 
library provides stack queue priority queue adaptors different sequence types 
stack sequence supporting operations back push back pop back instantiate stack 
particular vector list 
template class container class stack friend bool operator const stack container const stack container friend bool operator const stack container const stack container public typedef container value type value type typedef container size type size type protected container public bool empty const return empty size type size const return size value type top return back const value type top const return back void push const value type push back void pop pop back template class container bool operator const stack container const stack container return template class container bool operator const stack container const stack container return example stack vector int integer stack deque char character stack 
queue sequence supporting operations front back push back pop front instantiate queue 
particular list 
template class container class queue friend bool operator const queue container const queue container friend bool operator const queue container const queue container public typedef container value type value type typedef container size type size type protected container public bool empty const return empty size type size const return size value type front return front const value type front const return front value type back return back const value type back const return back void push const value type push back void pop pop front template class container bool operator const queue container const queue container return template class container bool operator const queue container const queue container return priority queue sequence random access iterator supporting push back back queue 
particular vector 
template class container class compare container value type class priority queue public typedef container value type value type typedef container size type size type protected container compare comp public priority queue const compare compare comp template class inputiterator priority queue inputiterator inputiterator const compare compare comp heap comp bool empty const return empty size type size const return size const value type top const return front void push const value type push back push heap comp void pop pop heap comp pop back equality provided iterator adaptors reverse iterators bidirectional random access iterators corresponding reverse iterator adaptors iterate data structure opposite direction 
signatures corresponding iterators 
fundamental relation reverse iterator corresponding iterator established identity reverse iterator 
mapping dictated fact pointer past array valid pointer array 
template class bidirectionaliterator class class class distance class reverse bidirectional iterator public bidirectional iterator distance typedef reverse bidirectional iterator bidirectionaliterator distance self friend bool operator const self const self protected bidirectionaliterator current public reverse bidirectional iterator reverse bidirectional iterator bidirectionaliterator current bidirectionaliterator base return current operator const bidirectionaliterator tmp current return tmp self operator current return self operator int self tmp current return tmp self operator current return self operator int self tmp current return tmp template class bidirectionaliterator class class class distance inline bool operator const reverse bidirectional iterator bidirectionaliterator distance const reverse bidirectional iterator bidirectionaliterator distance return current current template class randomaccessiterator class class class distance class reverse iterator public random access iterator distance typedef reverse iterator randomaccessiterator distance self friend bool operator const self const self friend bool operator const self const self friend distance operator const self const self friend self operator distance const self protected randomaccessiterator current public reverse iterator reverse iterator randomaccessiterator current randomaccessiterator base return current operator const randomaccessiterator tmp current return tmp self operator current return self operator int self tmp current return tmp self operator current return self operator int self tmp current return tmp self operator distance const return self current self operator distance current return self operator distance const return self current self operator distance current return operator distance return template class randomaccessiterator class class class distance inline bool operator const reverse iterator randomaccessiterator distance const reverse iterator randomaccessiterator distance return current current template class randomaccessiterator class class class distance inline bool operator const reverse iterator randomaccessiterator distance const reverse iterator randomaccessiterator distance return current current template class randomaccessiterator class class class distance inline distance operator const reverse iterator randomaccessiterator distance const reverse iterator randomaccessiterator distance return current current template class randomaccessiterator class class class distance inline reverse iterator randomaccessiterator distance operator distance const reverse iterator randomaccessiterator distance return reverse iterator randomaccessiterator distance current insert iterators possible deal insertion way writing array special kind iterator adaptors called insert iterators provided library 
regular iterator classes result causes range copied range starting 
code insert iterator insert corresponding elements container 
device allows copying algorithms library insert mode regular overwrite mode 
insert iterator constructed container possibly iterators pointing insertion takes place container 
insert iterators satisfy requirements output iterators 
operator returns insert iterator 
assignment operator const defined insert iterators allow writing right insert iterator pointing 
words insert iterator cursor pointing container insertion takes place 
back insert iterator inserts elements container front insert iterator inserts elements container insert iterator inserts elements iterator points container 
back inserter front inserter functions making insert iterators container 
template class container class back insert iterator public output iterator protected container container public back insert iterator container container back insert iterator container operator const container value type value container push back value return back insert iterator container operator return back insert iterator container operator return back insert iterator container operator int return template class container back insert iterator container back inserter container return back insert iterator container template class container class front insert iterator public output iterator protected container container public front insert iterator container container front insert iterator container operator const container value type value container push front value return front insert iterator container operator return front insert iterator container operator return front insert iterator container operator int return template class container front insert iterator container front inserter container return front insert iterator container template class container class insert iterator public output iterator protected container container container iterator iter public insert iterator container container iterator container iter insert iterator container operator const container value type value iter container insert iter value iter return insert iterator container operator return insert iterator container operator return insert iterator container operator int return template class container class iterator insert iterator container inserter container iterator return insert iterator container container iterator raw storage iterator raw storage iterator provided enable algorithms store results uninitialized memory 
formal template required outputiterator const defined 
template class outputiterator class class raw storage iterator public output iterator protected outputiterator iter public raw storage iterator outputiterator iter raw storage iterator outputiterator operator return raw storage iterator outputiterator operator const element construct iter element return raw storage iterator outputiterator operator iter return raw storage iterator outputiterator operator int raw storage iterator outputiterator tmp iter return tmp function adaptors function adaptors function object classes argument types result type defined 
take unary binary predicate correspondingly return complements 
binders template class predicate class unary negate public unary function predicate argument type bool protected predicate pred public unary negate const predicate pred bool operator const argument type const return pred template class predicate unary negate predicate const predicate pred return unary negate predicate pred template class predicate class binary negate public binary function predicate argument type predicate second argument type bool protected predicate pred public binary negate const predicate pred bool operator const argument type const second argument type const return pred template class predicate binary negate predicate const predicate pred return binary negate predicate pred st nd take function arguments return function object argument constructed second argument correspondingly bound tox 
template class operation class binder st public unary function operation second argument type operation result type protected operation op operation argument type value public binder st const operation const operation argument type op value result type operator const argument type const return op value template class operation class binder st operation bind st const operation op const return binder st operation op operation argument type template class operation class binder nd public unary function operation argument type operation result type protected operation op operation second argument type value public binder nd const operation const operation second argument type op value result type operator const argument type const return op value template class operation class binder nd operation bind nd const operation op const return binder nd operation op operation second argument type example find bind nd greater int finds integer vector greater find bind st greater int finds integer inv 
adaptors pointers functions allow pointers unary binary functions function adaptors library provides template class arg class result class pointer unary function public unary function arg result protected result ptr arg public pointer unary function result arg ptr result operator arg const return ptr template class arg class result pointer unary function arg result ptr fun result arg return pointer unary function arg result template class arg class arg class result class pointer binary function public binary function arg arg result protected result ptr arg arg public pointer binary function result arg arg ptr result operator arg arg const return ptr template class arg class arg class result pointer binary function arg arg result ptr fun result arg arg return pointer binary function arg arg result example replace bind nd ptr fun strcmp replaces 
compilation systems multiple pointer function types provide additional ptr fun template functions 
memory handling primitives obtain typed pointer uninitialized memory buffer size function defined template class inline allocate size bytes allocated buffer sizeof 
memory model corresponding allocate template function defined argument type distance type pointers memory model 
example compilation system supports huge pointers distance type long template function provided template class inline huge allocate long long huge functions provided template class inline void deallocate buffer template class class inline void construct const value new value template class inline void destroy pointer pointer deallocate frees buffer allocated allocate 
memory model corresponding deallocate construct destroy template functions defined argument type pointer type memory model 
template class pair get temporary buffer template class void return temporary buffer get temporary buffer finds largest buffer greater sizeof returns pair consisting address capacity units sizeof buffer 
return temporary buffer returns buffer allocated temporary buffer 
specialized algorithms iterators formal template parameters algorithms required forwarditerator const defined 
template class forwarditerator void destroy forwarditerator forwarditerator destroy template class inputiterator class forwarditerator forwarditerator uninitialized copy inputiterator inputiterator forwarditerator result construct result return result template class forwarditerator class void uninitialized fill forwarditerator forwarditerator const construct template class forwarditerator class size class forwarditerator uninitialized fill forwarditerator size const construct return acknowledgments people contributed design stl pete becker david jacobson mehdi jazayeri tom andy koenig mackey doug morgan dave musser nathan myers larry bob shaw carl staelin bjarne stroustrup mark parthasarathy mike john wilkes 
library descendant earlier libraries scheme ada designed jointly dave musser 
contributed aspects stl design structure semantic requirements algorithm design complexity analysis performance measurements 
andy koenig responsible explaining underlying machine generic library fit machine 
convinced attempt turn standard proposal 
writing proposal bjarne stroustrup constant supporter giving lot technical advice especially language dependent parts library 
andy bjarne answered literally hundreds urgent messages phone calls form dan mary loomis created environment able concentrate design distractions 
bill responsible starting project supporting tenure lab director 
rick dmitry advice support 
bibliography ellis stroustrup annotated manual addison wesley massachusetts 
kapur musser stepanov language manipulating generic objects proc 
workshop program specification aarhus denmark august lecture notes computer science springer verlag vol 

kapur musser stepanov operators algebraic structures proc 
conference functional programming languages computer architecture new hampshire october 
musser stepanov higher order imperative programming technical report rensselaer polytechnic institute april 
koenig associative arrays proc 
usenix conference san francisco ca june 
koenig manipulators function objects journal vol 
summer 
musser stepanov library generic algorithms ada proc 
acm international conference boston december 
musser stepanov generic programming invited ed issac symbolic algebraic computation proceedings lecture notes computer science springer verlag vol 

musser stepanov ada generic library springer verlag 
musser stepanov algorithm oriented generic libraries software practice experience vol 
july 
stahl ller generic dynamic arrays report october 
strings lists bell labs internal technical memorandum july 
stepanov lee standard template library technical report hpl hewlett packard laboratories april 
stroustrup design evolution addison wesley massachusetts 

