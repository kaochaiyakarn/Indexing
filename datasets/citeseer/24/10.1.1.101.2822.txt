event condition action language xml james bailey alexandra poulovassilis peter wood department computer science university melbourne school computer science information systems college university london 
xml widespread means exchanging storing information web 
event condition action eca rules natural candidate support reactive functionality xml repositories 
chapter discusses eca rules context xml data 
give review related de ne language specifying eca rules xml repositories 
specify rule execution model language describe prototype implementation 
discuss techniques analysing behaviour sets eca rules particular determining triggering activation relationships pairs rules 
conclude discussion directions research xml dominant standard storing exchanging information web 
increasing dynamic applications data warehousing commerce learning rapidly growing need support reactive functionality xml repositories :10.1.1.24.72
event condition action eca rules natural candidate 
eca rules automatically perform actions response events provided stated conditions hold 
conventional data warehouses incremental maintenance views validation cleansing input data streams maintaining audit trails data 
analogy eca rules integrating technology providing kind functionality xml repositories 
potential uses include checking key constraints xml documents performing automatic repairs violations constraints detected 
push type environment automatically broadcasting information subscribers contents relevant documents change 
employed exible means maintaining statistics document site usage behaviour 
main advantages eca rules support functionality opposed implementing directly programming language 
firstly eca rules allow application reactive functionality appear web dynamics levene poulovassilis eds springer de ned managed single rule base encoded diverse programs 
enhances modularity maintainability applications 
secondly eca rules high level declarative syntax amenable powerful analysis optimisation techniques applied functionality expressed directly programming language code 
alternative way implement functionality described xslt transform source xml documents 
xslt process entire document order produce new document concerned detection subsequent processing updates ner granularity 
eca rules allows direct update document xslt requires new result tree generated applying transformations source document 
eca rules settings including active databases ow management network management personalisation publish subscribe technology specifying implementing business processes 
chapter study eca rules context xml data 
review related 
de ne language specifying eca rules xml repositories illustrating language means examples 
specify rule execution model language describe prototype implementation 
discuss techniques analysing behaviour sets eca rules de ned language particular determining triggering activation relationships pairs rules 
conclude discussion directions research 
event condition action rules eca rule general syntax event condition actions event part describes situation interest dictates rule triggered 
events broadly classi ed categories primitive events composite events 
primitive events atomic detectable occurrences database updates insert relation reaching particular time th march 
composite events combinations primitive events speci ed event algebra 
common operators event algebras include disjunction event occurs event occurs event occurs ii sequence event occurs occurs having preceded iii conjunction event occurs occurred order 
implementations eca systems support event algebra rich 
settle able detect just appropriate set primitive events support event operators 
limits range situations reacted rule execution easily optimised analysed 
events associated parameters provide extra information event occurrence 
example active databases parameters known deltas may referenced condition action parts eca rule 
event detectable database deltas occurred change non empty occurred execution action contains information occurrences event time occurred transaction caused occur 
change contains information changes occurrences event database execution action 
example typical active relational database may user de ned relation set delta relations occurred insertion non empty statements relation occurred execution action change insertion contain set new tuples inserted relation execution action occurred deletion non empty delete statements relation occurred execution action change deletion contain set tuples deleted execution action occurred update non empty update statements relation occurred execution action change update contain set pairs old tuple new tuple tuple updated execution action 
event part eca rule occurred change event identi ers occurred change may occur rule condition action parts 
rule said triggered event part non empty 
allowing occurred change appear rule events means syntactic semantic triggering rules supported 
syntactic triggering happens rule event occurred instances event occur 
semantic triggering happens rule event instances event occur changes database 
condition part eca rule determines database particular state 
query database environment semantics database query language sql 
condition may refer state execution event state created execution making deltas 
action part rule describes logic performed condition evaluates true 
usually sequence modi cations applied database expressed syntax updates transaction 
details foundations eca rules active databases descriptions range implemented active database prototypes 
rule execution model rule execution model speci cation run time behaviour system 
particular speci es various components rule executed respect happens multiple rules triggered simultaneously 
rst aspect traditionally handled modes 
coupling mode speci es timing activation part eca rule respect 
possible coupling modes condition part respect event part immediate condition evaluated immediately event detected having occurred current transaction 
deferred condition evaluated transaction operation transaction just transaction commits 
decoupled condition evaluated separate child transaction 
possible coupling modes actions part respect condition part similar immediate action executed immediately condition evaluated condition true 
deferred action performed transaction operation transaction just transaction commits 
decoupled action performed separate child transaction 
di erent types coupling modes may suitable certain categories rules 
example decoupled execution help response time length transactions grow due rule execution potentially concurrency available 
decoupled execution useful situations parent transaction aborts rule execution desired child transaction updating access log regardless authorisation granted 
maintaining views typically done immediately ensure freshness deferred immediate coupling checking integrity constraints immediate constraints violated deferred constraints need satis ed database stable state 
second aspect rule execution policy employed determining rule execute rules previously triggered awaiting execution 
time triggering important factor maintaining rules data structure re ects timing information natural rst rst rst list 
rules triggered precisely time event occurrence information priorities tie breaking assigned unique priority rules higher priority executed earlier 
eca rules object oriented databases due richness object oriented data model eca rules objectoriented databases contain additional features compared eca rules relational databases 
principal di erence availability set primitive event types example events triggered invocation methods creation objects 
way relational databases deltas de ne event contexts 
typical active object oriented database may classes occurred change method invocation detectable event database 
occurred non empty method invoked execution action 
change contain information changes user de ned database objects invocations method action 
important di erence active object oriented databases stems ability specify rules objects 
relationships rules captured properties generalisation specialisation rule classes 
sql standard sql standard speci es syntax execution model eca rules triggers relational databases 
rule event parts may triggered update insert delete operations database 
triggers kinds triggers triggers 
conceptually execute condition action triggering event executed 
execute condition action triggering event executed immediate coupling mode event condition condition action 
conditions evaluated database state action executed multiply triggered rules handled rst list 
rule assigned unique priority 
syntactic triggering supported event parts triggers semantics occurred deltas described 
important aspect rule granularity types granularity supported row level statement level 
statement level rule triggered event execution copy action part placed list pending rules 
row level rule triggered copy actions part placed pending list member change rule condition evaluates true 
single event copies triggered rule actions row level rules 
analysing rule behaviour key recurring themes regarding successful deployment eca rules systems need techniques tools analysing run time behaviour 
multiple eca rules de ned system interactions di cult predict execution rule may cause event triggers rule set rules 
rules may turn trigger rules potential nite cascade rule rings occur 
analysis eca rules active databases studied topic proposed 
key properties set eca rules triggering activation relationships pairs rules information analyse properties termination eca rule set reachability speci rules 
triggering activation relationships pairs rules de ned follows may trigger execution action ri may generate event triggers rj 
may activate rule rj rj condition may false true execution ri action 
rule ri may activate condition may execution action 
triggering graph represents rule vertex directed arc vertex ri vertex rj ri may trigger rj 
acyclicity ofthe triggering graph implies de nite termination rule execution 
triggering graphs deriving rule reachability information 
activation graph represents rules vertices 
case directed arc vertex ri vertex rj ri may activate rj 
acyclicity graph implies de nite termination rule execution 
triggering activation graphs combined method called rule reduction gives precise results triggering activation graphs 
method vertex incoming triggering activation arc removed graph outgoing arcs 
removal vertices repeated vertices 
procedure results vertices removed rule set de nitely terminating 
proposed interpretation analyse eca rules 
approach eca rules executed database representing number real databases 
interpretation approach costly precise technique graph approaches tracks triggering activation relationships rules evolve rule execution 
determining triggering activation relationships eca rules complex semi structured data xml structured databases determining ects rule actions simply matter matching names updated database objects event condition parts eca rules 
associations actions events conditions implicit sophisticated semantic comparisons sets path expressions required 
section discuss techniques determining triggering activation relationships xml eca rules 
eca rules xml semistructured nature xml data gives rise new issues ecting eca rules 
issues principally linked choice appropriate language syntax execution model event granularity relational model granularity data manipulation events straightforward insert delete update events occur relation inserted deleted updated respectively 
xml kind strong typing events longer exists 
specifying granularity data inserted deleted xml document complex path expressions identify locations document necessary 
action granularity relational model ect data manipulation actions straightforward insert delete update action ect tuples single relation 
xml actions manipulate entire sub documents insertion deletion sub documents trigger set di erent events 
analysis events triggered action longer syntax 
choice appropriate action language xml obvious standard xml update language 
compared rules relational databases eca rules xml data di cult analyse due richer types events actions 
rules xml arguably analysis complexity rules objectoriented data 
stems fact object oriented databases may permit arbitrary method calls trigger events determining triggering relationships rules may di cult analysing program written language java 
eca rules xml contrast declarative languages xpath amenable analysis particularly natural syntactic restrictions chapter 
developed language de ning eca rules xml data xpath xquery standards :10.1.1.101.2822
developed techniques analysing triggering activation relationships rules 
language analysis techniques subject rest chapter 
number eca rule languages xml proposed focussed analysing behaviour eca rules discusses extending xml repositories eca rules order support services 
active extensions xslt lorel languages proposed handle insertion deletion update events xml documents currently support insertion deletion events language see section 
discusses speci application approach rule actions methods update repository trigger rules 
de nes active rule language xml 
rule syntax similar syntax triggers sql 
rule execution model di erent 
generally speaking insertions deletions xml data may involve document fragments unbounded size 
adopts execution model top level update decomposed sequence smaller updates depending contents fragment inserted deleted rule execution interleaved execution smaller updates 
contrast language treat top level update atomic rule execution invoked completion toplevel update 
general semantics may produce di erent results top level update question research determine respective suitability di erent applications 
related :10.1.1.24.72
discuss monitoring subscription xyleme xml warehouse supporting subscription web documents 
set monitor simple changes web documents 
monitoring query processor performs complex event detection sends noti cations events trigger engine performs necessary actions including creating new versions xml documents 
focus reactive functionality highly tuned speci application 
proposes extensions xquery language incorporate update operations refer reader review provision update facilities xml manipulation languages :10.1.1.24.72
update operations proposed expressive actions supported eca rule language include renaming replacement operations speci cation updates multiple levels documents 
triggers discussed implementation mechanism deletion operations underlying relational store xml :10.1.1.24.72
provision eca rules logical xml level considered 
eca rule language xml xml repository consists set xml documents 
language eca rules xml repositories take form event condition actions xpath xquery languages specify event condition actions parts rules 
xpath selecting matching fragments xml documents event condition parts 
xquery insertion actions need able construct new xml fragments 
event part eca rule expression form insert delete simple xpath expression de ned section evaluates set nodes 
rule triggered set nodes includes node new xml fragment case insertion deleted fragment case deletion 
system de ned variable delta available condition actions parts rule set instantiations set new deleted nodes returned condition part rule constant true simple xpath expressions connected boolean connectives 
actions part rule sequence actions action expression forms insert insert delete simple xquery expression simple xpath expression constant true xpath quali er see section de nitions terms 
insert action expression speci es set nodes immediately new xml fragment inserted 
fragments speci ed expression ife delta variable xml fragment constructed instantiation delta rule condition evaluates true 
delta thena single fragment constructed 
expression xpath quali er evaluated child insertions form new fragment inserted sibling true insertions form new fragment inserted rst sibling true 
order new fragments inserted non deterministic 
delete action expression speci es set nodes deleted descendant nodes 
may delta variable 
example 
consider xml repository containing metadata learning objects los available web personal metadata users los 
xml document los xml contains information los show information held particular book data web 
annotations appended time user submits review book 
los 
lo type book title data web subject computer science subject creator abiteboul creator creator buneman creator creator suciu creator description relations data xml description publisher kaufmann publisher editions 
editions isbn isbn annotations annotation reviewer teacher education review panel reviewer date date rating rating description book gives comprehensive state art discussion data models query languages 
description annotation annotation reviewer john smith reviewer date date rating rating description great book learn querying semi structured data didn know 
description annotation annotations lo 
los xml document users xml contains information users show information held particular user johnny mnemonic 
users subscribe noti ed latest review submitted books subjects interested information automatically update personal metadata 
users 
user id name johnny mnemonic name profession student profession subjects subject computer science subject subject mathematics subject subject economics subject subjects los 
lo type book title data web isbn isbn latest annotation reviewer john smith reviewer date date rating rating description great book learn querying semi structured data didn know 
description latest annotation lo 
los user 
users mnemonic interested computer science rule replaces current latest review computer science book personal metadata new review book insert document los xml los lo annotations annotation delta subject computer science delete document users xml users user id los lo type book title delta title latest annotation insert latest annotation delta latest annotation document users xml users user id los lo type book title delta title isbn system de ned delta variable bound newly inserted annotation node detected event part rule 
rule condition checks subject book question computer science 
rule action deletes existing latest review book mnemonic metadata inserts new review 
suppose update occurs appending new review data web book insert annotation reviewer neo anderson reviewer date date rating rating description clearly written organised 
describes detail 
description annotation document los xml los lo type book title data web annotations true update triggers rule causing replacement mnemonic personal metadata previous review smith new review submitted anderson 
example 
consider xml repository containing xml document xml contains information share prices stock exchange 
show information held particular share document share xyz 
day info share price recorded periodically speci ed date 
highest lowest prices day month recorded day info month info respectively 
shares 
share name xyz 
day info day month prices price time price price time price price time price prices high high low low day info 
month info month high high low low month info share share name abc 
share 
shares suppose document updated response external events received share price information service 
particular insertion event arrive periodically current price share xyz 
example insertion event ev update inserts new share price share price currently recorded insert price time price document xml shares share name xyz day info day month prices true eca rule checks daily high needs updated response new price insertion share insert document xml shares share day info prices price delta delta high delete delta high insert high delta text high delta 
prices delta variable bound newly inserted price node detected event part rule 
rule condition checks value price node greater value high node day info node 
action deletes existing high node inserts high node value newly inserted price 
insertion event ev trigger rule update daily high share xyz 
eca rule similarly checks monthly high price share needs updated response insertion new daily high price insert document xml shares share day info high delta delta month info month delta month high delete delta month info high insert delta delta month info month delta month true insert action rule copy high node insertion triggered rule inserted rst child corresponding month info node 
event ev trigger rule second action turn trigger rule 
condition evaluate false action executed 
similar eca rules update daily monthly low prices undertaking potentially useful tasks 
simple xpath xquery expressions xpath xquery expressions appearing eca rules restrictions full xpath xquery languages term simple xpath xquery expressions 
represent useful reasonably expressive fragments advantage amenable analysis topic discuss section 
xpath fragment disallows number features full xpath language notably axis child parent self descendant self axes functions document text syntax simple xpath expression grammar denotes string denotes element attribute name document delta 
text expressions enclosed expression called quali ers 
simple xpath expression starts establishing context call document function followed path expression variable delta variable allowed followed optional quali ers optional path expression note quali er comprise simple xpath expression xquery fragment adopt disallows full flwr expressions involving keywords return essentially permitting return part expression 
syntax simple xquery expression grammar na 
expression simple xpath expression de ned element constructor element constructor empty element element sequence element contents case element list attributes attribute list empty name equated attribute value followed attribute list 
attribute value string enclosed expression element contents string element constructor enclosed expression 
enclosed expression xpath expression enclosed braces 
braces indicate evaluated result inserted position element constructor attribute value 
rule execution model describe rule execution model language 
input execution schedule xml repository db 
consists list pairs deltai th action actions part rule ri deltai set instantiations delta variable rule ri ri condition evaluated true 
rules event parts xml document potentially triggered update event document 
disambiguate ect rules require rules event parts insertions document totally ordered rules event parts deletions document 
relative priorities rules speci ed user de ning new rule 
schedule initiates rule execution consists action set instantiations delta variable action applied initial schedule singleton form action delta 
pseudocode expresses update request handled delta head tail changes db db delta rule order increasing priority changes value delta changes db value true downto action delta pseudocode function head returns rst element ofa list function tail returns list minus rst element 
function executes action head schedule 
delta variable update performed just repository db 
delta variable set updates generated substituting occurrences delta member delta 
cardinality updates generated updates performed arbitrary order repository 
guaranteed nite due syntax update language allow nite new xml fragments created fact nite number eca rules 
returns pair changes db db new repository resulting update changes array set newly inserted newly deleted nodes corresponding event part rule particular insertion may triggered event part evaluated repository executed changes intersection result new nodes inserted ifa deletion may triggered event part evaluated repository executed changes intersection result nodes subsequently deleted function evaluates rule condition possible cases delta variable occurs condition condition evaluated member changes subset changes evaluates true determined 
variable delta set subset 
delta non empty thenthe variable value set true set false 
ii delta variable occur condition condition evaluated just variable value set result 
variable delta set changes 
number actions actions part rule actions th action rule loop downto ensures actions rule placed right order schedule 
action action paired rule delta pre xed current schedule action delta rules considered increasing order priority inthe outer loop 
actions higher priority rules red placed schedule front actions lower priority rules 
execution proceeds manner schedule empty 
non termination rule execution possibility development rule analysis techniques important aid design behaved rules 
discuss techniques section 
number observations regarding rule execution model triggering semantic syntactic rule triggered changes empty 
event condition coupling mode condition action coupling modes immediate conditions evaluated immediately see section set rules may triggered action determined 
correct evaluate event parts rules triggered action changes necessarily empty 
limiting evaluation set rules may optimisation 
event true actions rules red result current set updates placed head schedule 
rule conditions evaluated repository state rule triggered sql conditions evaluated database state action executed 
possible simulate behaviour sql rules adding conditions additional quali ers xpath expression part insert delete actions setting condition part rule true 
document level instance level triggering supported eca rule language depending occurrence delta condition action parts rule occurrence delta condition action action executed condition true document level triggering 
delta occurs action possibly condition action executed possible instantiation delta condition true instance level triggering 
prototype implementation proof concept developed prototype system implements language execution model described 
due current immaturity existing xml repository products supporting su ciently expressive update language rst prototype les exploited functionality provided dom standard interacting 
architecture system illustrated 
parser parses checks syntactic validity new rule 
construction parser javacc lexer parser generator www com 
valid rules translated xml form added registration unit rule base xml le 
details rule stored including name priority event condition action parts 
execution engine encapsulates rule processing functionality 
inparticular event dispatcher condition evaluator action scheduler implement aspects rule processing described detail 
components interface wrapper order send receive data underlying xml les 
wrapper interfaces xml les disk 
update query requests upper levels system pass component coordinates 
undertakes open les create copies send queries modi cation actions receive back results 
wrapper performs actions functionality apache xalan api 
wrapper maintains history back versions xml documents document history 
parser eca language execution engine action scheduler condition evaluator event dispatcher wrapper send action execution update manager connection driver xml documents registration unit xml translated rules send condition eval receive results schedule manager execution schedule queue fig 

system architecture user interface rule base interface send event query evaluation 
receive changes set document history rule base rule input rule execution begins request action scheduler update manager execute action currently head schedule 
cases consider current action deletion document update manager adds copy current document document history document 
rules subsequently re result execution current action delta sets containing node ids copy document 
update manager executes deletion places ids nodes deleted set called updates 
current action insertion document update manager rst executes action adds copy new document document history 
rules subsequently re result execution current action delta sets containing node ids updated copy document 
update manager places ids new nodes set called updates 
count kept document history number rule actions currently schedule document 
update manager executes rule action referring decrements count 
count reaches zero back copy canbe removed document history 
execution action update manager control passed event dispatcher 
executes xpath query event part rule may triggered action 
action insertion event parts executed new xml document 
action deletion executed copy prior deletion document history 
event dispatcher determines rule event part returned result set set updates intersect de nes changes set rule 
condition evaluator executes condition part triggered rule creates rule delta set 
places actions rules condition true schedule corresponding delta set 
control transferred action scheduler cycle repeats 
example 
consider xml le example action ev 
initially schedule consists just insert action 
denote current version xml le 
update manager executes insert action creating document version updates set containing id new price node 
version added document history 
event dispatcher evaluates xpath expression rule whichis rules example may triggered action 
determines changes set contains id new price node 
condition evaluator executes condition part rule true single element places actions schedule paired singleton delta set containing id new price node 
action scheduler pops rst delete action schedule 
update manager executes action creating document version updates set containing id deleted high node 
rules triggered update action scheduler pops insert action schedule 
update manager executes action creating document version updates set containing id new high node 
version added document history 
dispatcher evaluates xpath expression rule isthe rules example may triggered action 
determines changes set contains id new high node 
condition evaluator executes condition part rule single element rules scheduled 
schedule empty rule execution terminates 
analysing optimising rule behaviour techniques determining triggering activation relationships rules utilised variety analysing optimising behaviour xml eca rules de ned language plugged existing frameworks eca rule analysis static dynamic approaches reviewed section 
example know pairwise triggering activation relationships rules triggering graph analysis activation graph analysis rule reduction method 
possible triggering activation information interpretation framework precise analysis graph approaches discussed 
information eca rules may triggered current rule action rule execution limit set rule event parts need evaluated execution action 
activation relationships pairs rules dynamically updated rule execution information avoid evaluating rule conditions currently inferred de nitely true false 
determining triggering relationships order determine triggering relationships xml eca rules need able determine action rule may trigger event part rule 
clearly insert actions trigger insert events delete actions trigger delete events 
insertion action form insert rule ri insertion event ev form insert rule rj need know event ev independent action return nodes inserted xquery de nes nodes inserted xpath expression de nes nodes inserted 
possible initial part specify path document ase remainder matches independent ofa 
wenow de ne notions formally de ne pre simple xpath expression expression su xquery type bethe result type determined type inference techniques described 
techniques test xpath expression return nonempty result evaluated documents type rst inferring output type input type checking output type inconsistent type 
returns empty result input type case type satisfy inconsistent type may satisfy xpath expressions independent possible xml documents 
discuss testing independence simple xpath expressions done nding xpath expression corresponds checking containment holds general fragments xpath closed intersection complexity ofthe containment problem various fragments xpath discussed 
event ev independent action pre xes independent type satisfy 
equivalently containing action rule rj containing event ev pre independent type may satisfy similarly insertions deletion action form delete belonging rule ri event ev form delete belonging rule rj wehave may trigger rj ev independent test independence action event case deletions simpler insertion case 
xpath expression 
event ev independent action expressions independent 
example 
consider insertion event ev eca rules example 
detect ev may trigger pre xpath expression event document xml shares share day info prices xpath expression ev document xml shares share name xyz day info day month prices independent fragment price satis es su price 
detect ev trigger rule pre document xml shares share day info high independent ofe 
determining activation relationships order determine activation relationships eca rules need able determine action rule ri may change value condition part rule rj false true may activate rj actions rule ri de nitely leave condition part ri false rule ri self ri may activate 
loss generality assume rule conditions disjunctive normal form form lm lm lm nm li simple xpath expression negation simple xpath expression simple xpath expressions 
table shows transitions truth value condition consisting single simple xpath expression undergo 
rst column shows condition truth value update subsequent columns truth value non independent insertion ni non independent deletion nd ni nd true true true false false true false false case ri rj distinct rules clear table ri activate rj actions ri insertion non independent condition rj 
condition rj simple xpath expression procedure determining non independence insertion condition involves constructing conditions expression quali ers 
objective condition change false true result insertion conditions change false true result insertion 
start set fcg proceed decompose number conditions quali ers adding 
see details decomposition algorithm 
actions rule ri insert determine type consider pre xes su xes condition ci ci setc conditions independent ci pre independent type satisfy action change truth value condition rule rj false true 
equivalently say may activate rule rj pre ci independent type may satisfy case condition part ri simple xpath expression rule self actions deletions subsume deletion action delete need test simple xpath expressions provided additionally operator appearing quali ers known containment decidable 
decidability containment larger fragments xpath shown 
undecidable possible conservative approximations 
example occurrences comparison operators condition part rule analyse operand separately deletion action operand subsumed action infer action condition false 
example 
consider rule example 
detect rst delete action false condition deletes existing high price 
conclude rule self second action insert possibility may insert nodes cause condition remain true 
deeper analysis rule set detect rule fact self 
negations simple xpath expressions 
table shows transitions truth value condition form wherec simple xpath expression undergo 
rst column shows truth value condition update subsequent columns truth value non independent insertion ni non independent deletion nd ni nd true true false true false false true false case rules ri rj distinct clear table ri activate rj actions ri deletion non independent condition rj 
condition rj construct set conditions outlined section 
action rule ri delete query technique outlined section order check independent conditions change truth value false true 
deemed non independent ri may activate rj 
case rule ri activates may leave condition true 
need notion self rule 
condition part ri rule self actions insertions guarantee true insertion 
insertion action rule ri insert condition comprise pre su action guarantees true insertion trees set trees denoted type satis es consequently need stronger concept fact type may satisfy expression section infer output type input type type output type equivalent tree type satis es conclude ri self 
conjunctions 
case condition rule rj form lj lj lj nj tests described previous subsections conditions simple xpath expressions negations simple xpath expressions determine rule ri may turn false true 
ri may condition false true may activate rj 
case suppose condition rule ri form li li li ni possible cases li simple xpath expressions 
case ri self actions deletion subsumes li 
ii li negations simple xpath expressions 
case ri self actions insertion es li 
iii li mixture simple xpath expressions negations thereof 
case ri may self 
disjunctions 
case condition rule rj form lm lm lm nm test conjunctions described rule ri may disjuncts lk lk lk nk false true 
ri may condition false true may activate rj 
case suppose condition rule ri form lm lm lm nm ri self leaves false disjuncts condition 
lj simple xpath expressions ri disjuncts condition case conjunctions ii lj negations simple xpath expressions ri disjuncts condition case ii conjunctions 
cases ri may self 
chapter discussed provision eca rules xml repositories 
reviewed eca rules conventional active databases highlighted main new issues arise context xml data 
described design language eca rules xml described prototype implementation techniques analysing behaviour eca rule sets de ned language 
directions explore accepted standard update language xml 
eca rules supported xml repositories standard eventually emerges parallel issue designing event language match update language 
chapter done context particular update language xml 
shown triggering activation relationships detected particular eca rules 
general ability analyse eca rule sets needs balanced complexity issue needs borne mind developments eca rule languages xml 
explore deeply expressiveness complexity eca language de ned 
example types xml schema constraints enforced repaired rules language 
general section undertake set updates repository 
insert actions may result non determinism order set new fragments inserted common parent constructs specify ordering new fragments respect existing document content 
area extend eca language capture ordering relationships new fragments inserted document 
language supports semantic triggering easy extend support syntactic triggering 
similarly currently assume immediate coupling mode event condition condition action straightforward allow rules full range coupling modes 
practical applicability performance implications extensions area requires detailed investigation 
develop gauge ectiveness rule analysis optimisation techniques 
example incorporating knowledge certain documents repository valid respect de nition dtd xml schema speci cation may useful ways 
firstly knowledge allow simplify xpath expressions eca rules 
secondly help obtain precise type information doing type inference allow precise information triggering activation dependencies inferred 
related issue develop techniques determining set eca safe words execution rules ensures document remains valid respect dtd xml schema 
improve current prototype implementation 
example moment entire back copies documents kept document history 
possible develop techniques analysing rule action parts order determine fragments documents need placed document history order resolve delta variables scheduled rule actions 
clearly important issue evaluate applicability scalability language execution model implementation 
deploying providing reactive functionality distributed rdf repositories educational metadata part ongoing eu funded selene project see www dcs bbk ac uk selene 
selene project investigating technical requirements possible technical solutions self learning networks de ne self learning network selene distributed repository educational metadata describing learning objects collaboratively built wishes existing learning objects construct new learning objects knowledge domain 
selene peer peer topology facilities peers join leave selene 
peer manage part distributed metadata possibly replication peers 
metadata expressed rdf stored xml amenable direct manipulation xml eca rule language 
support networks require techniques reconciliation integration metadata describing heterogeneous distributed learning objects los de nition personalised views distributed metadata resource detection noti cation changes lo metadata descriptions publish subscribe functionality peers publish events detect subscribe events tobe noti ed 
eca rules conventional databases information integration view de nition view maintenance 
proposed providing personalisation publish subscribe functionality 
selene user requirements functionality potentially provided eca rules provide challenging testbed application evaluation extension language implementation including opportunity explore applicability performance variety modes gauge ectiveness analysis optimisation methods 
selene project provide opportunity assess impact moving centralised distributed environment additional challenges network delay network reliability synchronisation rule execution maintaining consistency distributed resource tolerance delays failures challenges event systems environment taken chapters follow section book 
open questions suitable phd research topics example questions raised 
possible masters level projects include 

abiteboul cluet 
rousset 
xyleme project 
computer networks 

abiteboul quass mchugh widom wiener 
lorel query language semistructured data 
vldb journal 

abiteboul vianu yesha 
relational transducers electronic commerce 
jcss 

adi 
push technology personalization event correlation 
proc th int 
conf 
large databases pages 

aiken widom hellerstein 
static analysis techniques predicting behavior active database rules 
acm tods 

bailey poulovassilis 
interpretation framework termination analysis active rules 
proc 
th int 
workshop database programming languages lncs pages scotland 

bailey poulovassilis 
analysis functional active databases 
gray editor functional approaches computing data 
springer verlag 

bailey poulovassilis 
dynamic approach termination analysis active database rules 
proc 
st int 
conf 
computational logic dood stream lncs pages london 

bailey poulovassilis wood 
event condition action language xml 
proc 
www pages hawaii 

bailey poulovassilis wood 
analysis optimisation action rules xml 
computer networks 

ceri paraboschi 
improved rule analysis means triggering activation graphs 
sellis editor rules database systems lncs pages 
springer verlag 

ceri paraboschi 
compile time runtime analysis active behaviors 
ieee transactions knowledge data engineering 

widom 
algebraic approach rule analysis expert database systems 
proceedings th international conference large databases pages santiago chile 

widom 
algebraic approach static analysis active database rules 
acm tods 

michael benedikt fan gabriel kuper 
structural properties xpath fragments 
proc 
th int 
conf 
database theory lncs pages berlin 

braga ceri 
active xquery 
proc 
ieee conference data engineering icde 

ceri paraboschi 
active rules xml new paradigm services 
vldb journal 

ceri paraboschi 
pushing reactive services xml repositories active rules 
proc 
th world wide web conference 

ceri cochrane widom 
practical applications triggers constraints success issues 
proc 
th int 
conf 
large databases pages 

ceri fraternali 
designing database applications objects rules idea methodology 
addison wesley 

ceri fraternali paraboschi 
data driven web site generation data intensive applications 
proc 
th int 
conf 
large databases pages 

chakravarthy 
architectures monitoring techniques active databases evaluation 
data knowledge engineering 

chakravarthy mishra 
snoop expressive event speci cation language active databases 
data knowledge engineering 

cluet 
views large scale xml repository 
proc 
th int 
conf 
large databases pages 


improving re ned triggering graph method active rules termination analysis 
proc 
lncs pages eld 

gehani jagadish shmueli 
composite event speci cation active databases model implementation 
vldb pages 

haruo hosoya benjamin pierce 
xduce typed xml processing language preliminary report 
proc 
webdb int 
workshop web databases pages 

ishikawa ohta 
active web distributed database system commerce 
proc 
web dynamics workshop london 
www dcs bbk ac uk 

urban 
re ned triggering graphs logic approach termination analysis active object oriented database 
proc 
icde pages new orleans 


self learning networks functionality user requirements 
see www dcs bbk ac uk selene reports pdf june 
se project report 

kotz dittrich simon 
active database systems expectations commercial experience 
paton editor active rules database systems pages 
springer verlag 

kulkarni cochrane 
active database features sql 
paton editor active rules database systems pages 
springer verlag 

frank neven thomas schwentick 
xpath containment presence disjunction dtds variables 
proc 
th int 
conf 
database theory lncs pages berlin 

nguyen abiteboul 
monitoring xml data web 
proc 
acm sigmod int 
conf 
management data pages 

paton editor 
active rules database systems 
springer verlag 

pereira fabret llirbat shasha 
cient matching web publish subscribe systems 
proc th int 
conf 
cooperative information systems coopis pages 

tatarinov ives halevy weld 
updating xml 
proc 
acm sigmod int 
conf 
management data pages 

widom ceri 
active database systems 
morgan kaufmann san mateo california 

peter wood 
containment xpath fragments dtd constraints 
proc 
th int 
conf 
database theory lncs pages berlin 

world wide web consortium 
xml path language xpath version 
see www org tr xpath november 
recommendation 

world wide web consortium 
xsl transformations xslt version 
see www org tr xslt november 
recommendation 

world wide web consortium 
xquery xml query language 
see www org tr xquery november 
working draft 

consortium 
xquery xpath formal semantics 
see www org tr query semantics november 
working draft 

world wide web consortium 
document object model dom level core speci cation 
see www org tr dom level core february 
working draft 
