covert messaging tcp timestamps john gi rachel peter richard mit edu massachusetts institute technology 
protocol sending data common class low bandwidth covert channels 
covert channels exist communications systems allow individuals communicate truly 
covert channels seldom due complexity 
protocol practical secure attack adversaries 
implement protocol standard platform linux exploiting channel common communications system tcp timestamps 
covert channel communications channel allows information transferred way violates security policy 
result covert channels important methods censorship resistance 
ective covert channel undetectable adversary provide strong degree privacy 
fact secret communication place parties extremely revealing 
consider prisoners problem rst formulated simmons 
alice bob prison attempting plan escape 
allowed communicate warden watches communications 
warden notices planning escape suspects trying communicate secretly placed solitary con nement 
prisoners problem theoretically interesting provides explanation problem covert channels solve problem increasingly relevant situations 
governments provide restrictions cryptography systems 
situation particularly extreme china isps subject government control electronic systems increasingly subject surveillance parts world attempts integrate carnivore monitoring systems isps shown 
private companies increasingly monitor censor communications 
ective covert channel requires apparently contradictory properties 
plausibility adversary believe possible user covert channel medium covert channel sending covert data 
randomness order channel undetectable bits data sent random high entropy signature encrypted data noticed 
channel adversary close usually due fact serves useful function users sending covert data 
tcp timestamps useful purpose satisfy properties high degree 
tcp ubiquitous protocol world majority internet tra employed timestamp option 
result extremely plausible majority users tcp sending covert data reason 
slow connection low order bits timestamps appear random 
result statistical analysis headers packet ine ective detecting channel 
tcp widely employed users sending covert data react attempts modify tcp packets large scale limit timestamp option performance 
channel broken detected adversary 
situation modeled follows tcp connections network adversary distinguish connections probability greater broken adversary deny service users covert channel allowing service users unmodi ed tcp connections 
adversary power monitor tra network modify tra adversary views network tra see processing packets sender receiver machines 
consider eavesdropper power modify number packets constantly modify packets sent single host 
prisoners analogy constantly changing message passes prisoners occasionally modify messages hopes detecting covert communication 
warden lacks resources modify message sent prisoner time 
warden su ciently suspicious prisoner modify messages just put prisoner solitary done 
notable realize powerful adversary willing capable preventing users timestamp option tcp overwriting low order bits tcp timestamps packet adversary closed channel 
assume adversary unwilling unable annoyed forced 
addition believe channel closed techniques useful providing reliable communication low bandwidth covert channels 
useful realize adversary denies service channel detect covert data sent regardless data modi es 
interesting wehave done deals problem sending message rate bit packet unreliable channel believe particular channel closed done relevant similar channels may identi ed 
related channels identi 
include initial sequence numbers acknowledged sequence numbers windowing bits protocol papers focus nding places covert data potentially sent details send 
implementations exist generally place header elds values incorrect unreasonable outside speci cation 
long adversary looking may ective stand concerted attack ectively security obscurity 
systems withstand statistical analysis 
tcp protocol described rfc security analysis tcp ip certainly rst group people identify possibility tcp ip protocol suite purposes transmitting covert data 
covert channels tcp ip protocol suite craig describes possibility passing covert data ip identi cation eld initial sequence number eld tcp acknowledge sequence number field 
wrote simple proof concept raw socket implementation covert tcp possibility hiding data timestamps discussed 
feel embedding data channels identi ed su cient hide data adversary suspected data tcp stream 
ip checksum covert channels selected hash collision idea internet protocol checksums covert communication discussed 
techniques detecting covert channels possible places hide data tcp stream discussed sequence numbers duplicate packets tcp window size urgent pointer meeting notes uc davis denial service dos project idea timing information covert channels hardware described countermeasures tradeo class covert timing channels generalized timing channels sending covert information described simple timing channels covert channels discussed generally variety papers 
generalized survey information hiding techniques described information hiding survey theoretical issues information hiding considered 
john mchugh provides wealth information analyzing system covert channels covert channel analysis 
subject addressed mainly terms classi ed systems 
sorts channels analyzed covert channels stay 
papers focus prevention covert channels system design detecting exist exploiting 
simmons done great deal research subliminal channels 
rst formulate problem covert communication terms prisoners problem substantial history subliminal communication particular relation compliance salt treaty identi ed covert channel dsa 
design goals goal system covertly send data host host 
important parts goal 
send data 
second covert things adversary detect 
important note goals odds 
order send data things receiving host detect 
order covert eavesdropper detect 
approach problem presuming existence covert channel meets requirements possible 
describe protocol send data 
covert channel meets requirements proposed 
characteristics channel designing covert channel protocol seek identify minimum allow send useful data 
worst case scenario channel bitwise lossy unacknowledged bits sent required pass certain statistical tests 
bitwise lossy mean channel drop reorder individual bits 
unacknowledged mean sender know bits dropped know order bits arrived 
channel send data extremely di cult 
relax restrictions reasonable ways problem clearly tractable 
simplicity assume statistical test bits pass randomness convenient encrypted data 
reasonable prohibitively di cult identify covert channels normally send covert data contain equal distribution ones zeros 
assume bit nonce attached bit delivered arrives nonce intact 
condition su cient channel usable send data met channels network protocols 
reason easy condition meet covert channels network protocols involve embedding bits covert data packet innocuous data 
innocuous data portion thereof serve nonce 
assumptions presume characteristics 
presume adversary detect channel 
lastly presume shared secret exists sender receiver 
rst presumptions justi ed sections respectively 
third presumption justi ed grounds impossible solve problem 
case sender receiver shared secret distinguish receiver adversary 
message sender produce detectable receiver detected manner 
note public key cryptography help key negotiation protocol require sending message receiver detect 
assume su cient implement best ort datagram service provided non covertly protocol 
service packets data delivered high probability 
packets may dropped reordered packet reaches destination bits packet reach destination order bits packet preserved 
level service su cient techniques implement unreliable datagrams understood applications reliability may required 
method implement best ort datagrams channel characteristics 
protocol order send messages channel send bit message block bit channel sending function multiple bits 
way bit data independent bit lost reordered ect sending bits 
choose bit message block keyed hash nonce 
message block size key packet nonce send bit number ht ki mod hash function cryptographic hash function collision free way 
nonce vary time bit send random distribution bits block 
track sent past order know sent bits 
expected number channel bits takes send bits block xl course channel loses bits su cient 
send bit calling number times send bit occupation number bit probability message getting probability bit dropped occupation number probability bounded drop rate su ciently high occupation number assure messages get 
small drop rates occupation number need large probability successful transmit high 
sending bit thesame statistical properties covert channel adversary statistical analysis detect channel 
mentioned assume channel normally random 
bits appear random 
research done nding cryptographic means ciphertexts indistinguishable random distributions easy 
accomplish follows 
derive akey bit keyed hash nonce equation making sure correlate hht ki mod transmitted bit exclusive key bit plaintext message bit mn 
random mn random random characteristic channel preserved 
techniques sender determine bit transmitted 
sender assumes block transmitted achieved occupation number bit message 
order receiver know received block lc bits message checksum rst lc bits 
finding covert channel attempting locate covert channel restrict considerations covert channels network 
time network mechanism pair hosts reasonably communicate 
ways transmit information 
send new packets try look innocuous modify existing packets 
obviously easier maintain covertness modify existing packets 
send new packets need come mechanism generate innocuous looking data 
adversary knew mechanism detect fake innocuous data communication longer covert 
contrast modify packets packets get sent legitimate packets adversary di cult time detecting 
choose modify existing packets 
modify existing packets ways 
modify application data modify protocol headers 
modifying application data requires detailed understanding type data sent wide variety applications 
care taken ensure modi ed data generated legitimate application guess sort applications adversary considers innocuous 
easier general modify protocol headers fewer network protocols existence application protocols 
applications handful network protocols 
furthermore interpretation protocol header elds de ned determine change eld disrupt protocol 
problem remains produce modi ed protocol headers normally produced operating system 
example attempt modify signi cant bit window size eld tcp packets 
bit operating systems tend window sizes multiple 
modi cation produce window sizes multiples adversary detect modifying window size elds 
similarly attempt hide data identi cation eld ip packets 
operating systems normally generate sequential identi cation eld values adversary detect presence covert data discrepancy 
reasons directly modifying packet headers 
observe subtle modi cations operating system handling packets result legitimate presumably harder detect change headers 
particular delay processing packet protocol timestamps cause timestamp change 
detecting delays di cult operating system timing complex depends factors adversary may able measure processes running machine keys pressed keyboard technique sending information di cult detect 
look applying technique tcp create channel properties described 
tcp timestamps covert channel imposing slight delays processing selected tcp packets modify low order bits timestamps 
low tcp timestamp modi ed way provides covert channel described 
low bit ectively random connections 
rest packet subset nonce 
examined individually packets bits delivered reliably 
tcp timestamps purely internal timings host slow connection low bits randomly distributed 
rewriting timestamp varying timing kernel value low bit 
long choose values statistically random distribution indistinguishable unaltered values 
rest tcp headers provides nonce nearly free repetition 
sequence number sent tcp packet chosen randomly number space 
repeat retransmission packet 
repeat acknowledgment number window size elds changed 
elds high order bits timestamp changed 
extremely headers including high order bits timestamp packets 
tcp reliable stream protocol provides stream bytes reliably delivered guaranteeing reliable delivery individual packets 
example small packets go unacknowledged may coalesced single larger packet purpose retransmission 
result bits associated packets dropped packets resent 
bytes acknowledged packets clear packet got complicating question bit delivered 
tcp speci challenges rewriting tcp timestamps presents additional challenges standard implementation protocol section 
timestamps monotonically increasing 
timestamps re ect reasonable progression time 
timestamps rewritten cause nonce rest packet change 
timestamps monotonically increasing 
timestamps re ect actual passing time legitimate system produce earlier timestamps packets 
done observed checking invariant packet larger sequence number stream timestamp greater equal packets stream 
rewriting timestamps honor invariant 
result timestamp needing send bit rewrite 
additionally wemust sure packet timestamp correct timestamp 
timestamps re ect reasonable progression time 
timestamps implementation dependent low order bits random progression higher order bits re ect wall clock time implementations 
adversary presumed know implementation unmodi ed tcp stack aware correct values timestamps 
order send packets modi ed timestamps keep timestamps monotonically increasing streams slowed timestamps packets valid sent 
thought rewriting timestamps delaying packets 
additional challenge increase timestamps cause high order bits timestamp change 
decrease chance nonce repetition include higher order bits timestamp nonce 
incrementing timestamps bits may change nonce change 
nonce changes recompute may increment timestamp 
point low bit timestamp incrementing change nonce 
algorithm seen 
choosing parameters tcp size bits collision expected time assuming sustained packet rate packets second upper bound see collision seconds 
selected checksum multiple power checksum byte aligned consistent standard hash functions 
checksum size bits clearly small results collisions hours 
bit checksum raises time years deem acceptable making amount data block small 
implementation sending messages sender implemented top linux kernel 
current implementation sender minor source modi cation provide hook rewrite timestamps kernel module implement rewrite process track current transmission provide access covert channel messaging applications 
current system provides channel host time generalizing multiple channels di cult 
selected sha hash 
standard hash function believed collision resistant way 
source freely available attractive 
needed put interface sha modify code kernel code receiving application 
basic algorithm packet compute cipher text bit included packet 
timestamp rewritten method described 
simple function implementing rewriting algorithm described section 
algorithm seen pseudocode particularly recursive 
encode packet timestamp incremented proper value sent 
packet ready sent occupation number bit packet increased 
occupation numbers tracked array 
minimum occupation number bit block higher required occupation number block presumed received block begins transmission 
receiving messages receiving process designed portable entirely located 
simpler sender side primary interesting part start lsb timestamp cipher text bit 
increment timestamp high order bits change 
recompute cipher text bit fig 

rewriting timestamps done packet header sha bits bit index plain text bit hash headers key current message block cipher text bit fig 

sender secret key packet timestamp sha index index sha 
return index minimum fig 

pseudocode packet header sha secret key hash headers key bits bit index timestamp cipher text bit plain text bit current message block fig 

receiver packet timestamp sha index sha index fig 

pseudocode determining done block boundaries di erent data blocks 
packets collected receiver libpcap interface berkeley packet filter 
library part standard utility tcpdump ported wide variety platforms 
receiver simple libpcap sha library 
sender tied linux platform probably run libpcap run 
receiver maintains bu er initialized zeroes represents current data block decoded 
packets received receiver computes hash packet headers concatenated shared secret 
xors bit hash low order bit timestamp packet places result bu er place indicated index 
actuality data block contains blocksize bits data 
appended checksum data 
purpose checksum inform receiver received entire valid block output plaintext allocate new block bu er 
receiver calculates hash time receives bit adds bu er 
checksum needs collision resistant probability thatthe receiver believe prematurely valid output having done chance design adversary su ciently low 
evaluation security security protocol violated adversary determine data sending sending data 
things contribute low order bit timestamp plain text bit key bit 
random oracle model hash function sender key bit random number provided packet headers collide 
packet headers collide tcp header elds including sequence number window ags options source port destination port high order bits timestamp odds collision happening remarkably small 
long collisions occur xor plain text bit key bit essentially time pad 
low order bits hash collide approximately packets adversary detect collisions key 
headers collide bit information revealed bits plain text encoded packets 
information gained sender secret key course adversary need determine precisely sending merely fact sending data 
adversary detect assumes hash function way 
channel low order bit timestamp non random mean time packets varies noticeably expected value 
low order bit timestamp generated previously discussed may treated random time pad appear random 
performance sending packets chance bit 
sending packets probability sent bit dropped 
packets may lot single hit elaborate website generate packets especially site images fetched individual get requests 
furthermore transfer megabyte le generate packets 
fairly easy generate packets assure fairly high probability successful transmission data block 
send total bits message take approximately ms sender limited network constraints 
directions designed protocol applicable variety bandwidth lossy covert channels 
protocol provides probabilistic transmission data blocks 
identifying potential covert channels easier working details sending data covertly practically 
protocol gives method sending data newly identi ed cover channels minimal design investment 
implementation protocol tcp timestamps complete con dent major obstacles remaining 
directions directions research involve improvements implementation channel design deals powerful adversaries diverse situations 
useful sender implementation able track possible ack messages data received receiver 
case sender rely probability decide message gotten sending data 
useful develop bidirectional protocol provided reliable data transfer 
theoretically possible implement tcp top covert channel ine cient 
useful develop reliability protocol speci cally type channel 
identify channels resource rich able close 
useful deal key exchange sender receiver may opportunity obtain shared secret 
system currently practical short messages desirable able send data 
lastly protocol designed parties 
interesting design broadcast channel messages published covertly 

christopher 
ip checksum covert channels selected hash collision 
www net papers pdf 

ross anderson fabien petitcolas 
limits steganography 
ieee journal selected areas communications may 

bellovin 
security problems tcp ip protocol suite 
computer communication review april 

christian cachin 
information theoretic model steganography 
david editor information hiding nd international workshop volume lecture notes computer science pages 
springer 
revised version march available cryptology eprint archive report url eprint iacr org 

rd jones 
secure hash algorithm sha 
rfc network working group 
www ietf org rfc rfc txt 

markus kuhn fabian petitcolas ross anderson 
information hiding 
proceedings ieee 

federal bureau investigation programs initiatives carnivore 
www fbi gov hq lab carnivore htm 

james gray iii 
countermeasures tradeo class covert timing channels 

john mchugh 
covert channel analysis 
portland state university 

ira moskowitz allen miller 
simple timing channels 
ieee computer society symposium research security privacy pages 
ieee press may 

moskowitz kang 
covert channels stay 
compass pages 

jon postel 
transmission control protocol 
rfc information sciences institute university southern california admiralty way marina del rey california sep 
www ietf org rfc rfc txt 

craig 
covert channels tcp ip protocol suite 
monday www 
dk issues issue 

simmons 
subliminal channels digital signature algorithm dsa 
editor rd symposium state progress research cryptography pages rome italy february 

simmons 
subliminal channels past 
european trans 
telecommunications pages jul aug 

simmons 
results concerning bandwidth subliminal channels 
ieee selected areas communications pages may 

simmons 
prisoners problem subliminal channel 
crypto pages 
plenum press 

steve mccanne 
libpcap packet capture library 
www tcpdump org 

uc davis denial service dos project meeting notes 
cs ucdavis edu projects denial service meetings html january 
