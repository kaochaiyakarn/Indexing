tree index structure high dimensional data stefan berchtold daniel keim hans peter institute computer science university munich 
munich germany keim kriegel informatik uni propose new method indexing large amounts point spatial data highdimensional space 
analysis shows index structures tree adequate indexing high dimensional data sets 
major problem tree index structures overlap bounding boxes directory increases growing dimension 
avoid problem introduce new organization directory uses split algorithm minimizing overlap additionally utilizes concept 
basic idea overlap minimizing split supernodes keep directory hierarchical possible time avoid splits directory result high overlap 
experiments show high dimensional data tree outperforms known tree tv tree orders magnitude 

applications indexing high dimensional data increasingly important 
multimedia databases example multimedia objects usually mapped feature vectors high dimensional space queries processed database feature vectors fal 
similar approaches taken areas including cad mg molecular biology docking molecules string matching se permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings ot nd vldb conference mumbai bombay india quence alignment examples feature vectors color histograms sh shape descriptors jag mg fourier vectors ww text descriptors kuk applications mapping process yield point objects extended spatial objects high dimensional space mn 
mentioned applications databases large consist millions data objects tens hundreds dimensions 
querying databases essential appropriate indexing techniques provide efficient access high dimensional data 
goal demonstrate limits currently available index structures new index structure considerably improves performance indexing highdimensional data 
approach motivated examination treebased index structures 
major reason treebased index structures index point data extended spatial data tree index structures suited types data 
contrast index structures kdb trees rob grid files nhs variants see sk tree index structures need point transformations store spatial data provide better spatial clustering 
previous indexing high dimensional data done mainly focussing different approaches 
approach observation real data high dimensional space highly correlated clustered data occupy subspace high dimensional space 
algorithms fastmap fl multidimensional scaling kw principal component analysis de factor analysis har take advantage fact transform data objects lower dimensional space indexed traditional multidimensional index structures 
similar approach proposed ss tree wj tree index structure 
uses ellipsoid bounding regions lower dimensional space applying different directory nodes 
second approach observation high dimensional data sets small number dimensions bears information 
tv tree example organizes directory way information needed distinguish data objects stored directory 
leads higher fanout smaller directory resulting better query performance 
high dimensional data sets reducing dimensionality obvious important possibility diminishing dimensionality problem performed possible 
cases data sets resulting reducing dimensionality quite large dimensionality 
remaining dimensions important means efficient indexing method guarantee selectivity dimensions 
unfortunately see section currently available index structures spatial data adequately support effective indexing dimensions 
experiments show performance tree rapidly deteriorating going higher dimensions 
understand reason performance problems carry detailed evaluation overlap bounding boxes directory tree 
experiments show overlap bounding boxes directory rapidly increasing increasing dimensionality 
subsection provide detailed explanation increasing overlap show high overlap tree specific problem general problem indexing high dimensional data 
observations develop improved index structure high dimensional data tree cf 
section 
main idea tree avoid overlap bounding boxes directory new organization directory optimized highdimensional space 
tree avoids splits result high degree overlap directory 
allowing splits introduce high overlaps directory nodes extended usual block size resulting called 
supernodes may large linear scan large problem 
alternative introduce high overlap directory leads fast degeneration filtering selectivity sequential search subnodes necessary additional penalty random page accesses faster sequential read 
concept supernodes similarity idea shelves gn 
contrast supernodes shelves data nodes attached internal nodes order avoid excessive clipping large objects 
additionally shelves organized chains disk pages read sequentially 
implemented tree index structure formed detailed performance evaluation large 
bkss tree consistently better performance tree gut tree srf wide range data sets query types 
rest restrict tree 
performance tree depending dimension real data amounts mbytes randomly generated real data point data extended spatial data 
ex periments show high dimensional data tree outperforms tv tree tree orders mag cf 
section 
dimensionality larger tree times faster tree times faster tv tree 
tree pro vides faster insertion times times faster tree times faster tv tree 

problems tree index structures high dimensional space performance evaluation tree performance deteriorates rapidly going higher dimensions cf 

effects lower fanout higher dimensions explain fact 
trying understand effects lead performance problems performed detailed evaluation important characteristics tree overlap directory increasing rapidly growing dimensionality data 
overlap directory directly corresponds query performance simple point queries multiple paths followed 
overlap directory relatively imprecise term generally accepted definition especially high dimensional case 
provide definitions overlap 
definition overlap intuitively overlap percentage volume covered directory hyperrectangle 
intuitive definition overlap directly correlated query performance processing queries overlap directory nodes results necessity follow multiple paths point queries 
dimension overlap uniformly distributed data dimension weighted overlap real data overlap tree directory nodes depending dimensionality nition ia overlap overlap tree node percentage space covered hyperrectangle 
tree node contains hyperrectangles rn overlap may formally defined overlap ii jr ii uri ii ii amount overlap measured definition la related expected query performance query objects points hyperrectangles distributed uniformly 
accurate definition overlap needs take actual distribution queries account 
impossible determine distribution queries advance distribution data estimation query distribution 
reasonable high dimensional data data queries clustered areas areas virtually empty 
overlap highly populated areas critical overlap areas low population 
second definition overlap overlapping areas weighted number data objects located area 
de ai lb weighted overlap weighted overlap tree node percentage data objects fall overlapping portion space 
formally pipe ri rj ja 
ii ii pip ri 
denotes volume covered 
denotes number data elements contained definition la overlap occurring point space equally contributes overlap data objects fall overlapping area 
query points expected uniformly distributed data space definition la appropriate measure determines expected query performance 
distribution queries corresponds distribution data nonuniform definition lb corresponds expected query performance appropriate 
depending query distribution choose appropriate definition 
far considered overlap portion space covered hyperrectangle 
practice important hyperrectangles overlap certain portion space 
called multi overlap tree node defined sum overlapping volumes multiplied number overlapping hyperrectangles relative volume considered space 
show dimensional example overlap definition la corresponding multi overlap 
weighted overlap weighted shown correspond areas weighted number data objects fall areas 
ii overlap multi overlap dimensional data experimental evaluation overlap tree directories subsection empirically evaluate development overlap tree depending dimensionality 
experiments implementation tree bkss 
data experiments constant size databases uniformly distributed real data 
real data 
fourier vectors searching similarly shaped polygons 
overlap curves show average overlap directory nodes definition 
averaging node overlaps directory levels root level root page may contain hyperrectangles causes high variance overlap root node 
overlap curves trees generated mbytes uniformly distributed point data 
expected uniform distribution overlap weighted overlap definition la lb provide results 
dimensionality larger overlap cf 
increases rapidly approach dimensionality larger 
means point queries higher dimensional data directory node subnodes accessed 
real data cf 
increase overlap remarkable 
weighted overlap increases dimensionality approaches dimensionality larger 
tree tree extended node tree new index structure supporting efficient query processing high dimensional data 
goal support point data extended spatial data tree uses concept overlapping regions 
insight obtained previous section clear avoid overlap directory order improve indexing high dimensional data 
tree avoids overlap possible allowing tree degenerate tree uses extended variable size directory nodes called supernodes 
addition providing directory organization suitable high dimensional data tree uses available main memory efficiently comparison cache 
tree may seen hybrid linear array hierarchical tree directory 
established low dimensions efficient organization directory hierarchical organization 
reason selectivity directory high means point queries number required page accesses directly corresponds height tree 
structure directory node normal directory nodes data nodes structure tree true overlap directory case low dimensionality 
rea high dimensionality linear organization directory efficient 
reason due high overlap directory directory searched anyway 
di searched linearly organized directory needs space may read faster disk block wise reading directory 
medium di efficient organization directory probably partially hierarchical partially linear 
problem dynamically organize tree portions data produce high overlap organized linearly organized hierar overlap dynamically orga hierarchical form 
algorithms tree designed automatically organize directory hierarchical possible resulting efficient hybrid organization directory 
structure tree structure tree 
data nodes tree contain rectilinear minimum bounding rectangles mbrs pointers actual data objects directory nodes contain mbrs pointers sub mbrs cf 

tree consists different types nodes data nodes normal directory nodes 
large directory nodes variable size multiple usual block size 
basic goal supernodes avoid splits directory result inefficient directory structure 
alternative larger node sizes highly overlapping directory nodes require access son nodes search process 
inefficient linearly scanning larger 
note tree completely different tree larger block size tree consists larger nodes necessary 
result structure tree may heterogeneous indicated 
due fact overlap 
comparison hierarchically organized directory linearly organized directory consists concatenation nodes lowest level corresponding hierarchical directory smaller 
dimension internal structure tree changing increasing dimension 
examples trees containing data different dimensionality shown 
expected number size interesting special cases tree directory nodes directory consists large supernode root 
case tree completely hierarchical organization supernodes increases dimension 
generating directory similar tree 
examples block size artificially reduced case may occur low dimensional non overlapping obtain fanout 
due increasing number data 
second case directory tree supernodes height tree corre cally root contains lowest number page accesses necessary point ry level corresponding tree 
performance queries decreasing increasing dimension 
corresponds performance linear supernodes created insertion possibility avoid overlap 
cases creation extension supernodes may avoided choosing overlap minimal split axis cf 
subsection 
fast determination overlap minimal split additional information necessary stored directory nodes cf 

main memory available supernodes kept main memory 
ry scan 
case occur high dimensional highly overlapping data directory completely searched anyway 
cases correspond extremes height tree directory size 
case completely hierarchical organization height size directory basically correspond tree 
root case size directory linearly depends dimension nodes replaced determined priority function depends level type normal node su blocksize 
size nodes 
experience priority function ct type cl 
level size gbytes dimensional data block size kbytes storage utilization data nodes choice practical purposes 
note storage utilization supernodes higher storage utilization normal directory nodes 
normal float size directory mbytes root supernode contrast mbytes completely hierarchical directory 
tory nodes expected storage utilization uniformly distributed data 
size algorithms blocksize expected storage utilization determined average extreme cases assuming certain amount data occupies blocks important algorithm tree insertion algorithm 
insertion algorithm determines structure tree suitable combination maximally filled node 
amount data hierarchical linear structure 
main objective requires blocks minimally filled algorithm avoid splits produce overlap 
algorithm cf 
determines mbr node 
average supernode storing amount insert data object recursively calls insertion algorithm insert data object data requires responding node 
split occurs recursive insert size corresponding mbrs updated 
blocks 
obtain storage utilization large consider case split subnode additional mbr added current node cause overflow node 
case current node calls ably higher 
example storage utilization 
split algorithm cf 
tries find split node topological geometric properties mbrs 
topological geometric proper em io ties mbrs example dead space partitioning extension mbrs heuristics tree bkss split algorithm example topological split step 
topological split results high overlap split algorithm tries find overlap minimal split determined split history cf 
subsection 
subsection show point data exists overlap free various shapes tree split 
partitioning mbrs resulting overlap minimal split may result filled nodes unacceptable leads degeneration tree deteriorates space utilization 
number mbrs partitions threshold different dimensions split algorithm terminates providing split 
int insert obj node new node set mbr sl node follow new son int return value follow choose subtree obj choose son node insert obj return value follow insert obj new son insert obj subtree update mbr follow calc mbr update mrr old son node return value split add mbr new son mbr insert mbr new son node current nods num capacity overflow occurs mbrs sl true topological overlap minimal split successful sl new node new return split split new node new supernode new node mbrs mbrs return supernode return value supernode node follow supernode remove son follow insert son new son return split tree insertion algorithm directory nodes case current node extended supernode twice standard block size 
case occurs existing supernode extended additional block 
obviously supernodes created extended possibility find suitable hierarchical structure directory 
created extended may contiguous space disk sequentially store supernode 
case disk manager perform local reorganization 
created extended main memory local reorganization necessary writing back secondary storage occur frequently 
point data overlap tree directory may occur overlap induced topological split threshold overlap value max overlap 
case overlap minimal split possible sense 
maximum overlap value acceptable basically system constant depends page access time time transfer block disk main memory tt cpu time necessary process block 
maximum overlap value may determined approximately balance reading size blocksize 
max probability access son nodes overlap search 
reading blocks probability max block probability 
estimation correct simple case initially creating supernode 
take effect splits account 
practical purposes equation provides estimation max 
tro tlr 
tro ttr tr cpu ttr max tio ttr cpu realistic system values measured experi ments ms tt 
ms tcp ms resulting max value 
note formula fact probability node main memory increasing due decreasing directory size case ing considered 
constant algorithm min fanout usual minimum fanout value node similar cor responding value index structures 
appro priate value min fanout 
algorithms query tree point range nearest neighbor queries similar algorithms tree minor changes necessary accessing 
delete update operations simple modifications corresponding tree algorithms 
difference occurs case boo split set mbr set mbr outl set mbr set mbr tl mbr rl try topological split resulting sets mbrs tl topological split tl rl tl calc mbr mbr test overlap overlap overlap topological split fails try overlap minimal split overlap minimal split tl test unbalanced nodes tl num mbrs min fanout num mbrs min fanout overlap minimal split fails caller create supernode return false ut flow 
consists blocks converted normal directory node 
consists blocks reduce size block 
update operation seen combination delete insert operation straightforward 
determining overlap minimal split determining overlap minimal split directory node find partitioning mbrs node subsets overlap minimum bounding hyperrectangles sets minimal 
case point data possible find overlap free split general possible guarantee sets balanced cardinality 
definition split mbr 
mbr 
oj tree split algorithm directory nodes mbr 
split si st split called overlap minimal iff mbr minimal overlap free iff si mbr balanced iff iist 
obtaining suitable directory structure interested overlap minimal overlap free splits balanced 
simplification focus splits assume high dimensional uniformly distributed point dam interesting obser vation overlap free split possible dimension mbrs split mbrs span full range values dimension resulting overlap 
lemma uniformly distributed point data split possible iff dimension mbrs node previously split 
formally split overlap free ti de 
mbr split proof contradiction assume dimensions mbr split dimension 
means uniformly distributed data mbrs span full range values corresponding dimensions 
loss generality assume mbr spans full range values dimension assigned 
consequence mbr spans full range dimension extension mbr zero dimension split dimension split axis overlap free mbr mbr 
dimensions mbr split dimension find overlap free split 
assume overlap free split node possible 
means dimension partition mbrs subsets 
contradiction fact dimension mbrs split 
uniform 
experiments results generalize real data spatial data cf 
section 
split tree node example split history ly distributed point data split may assumed middle range dimension overlap free split possible dimension lemma finding overlap free split determine dimension mbrs split previously 
split history provides necessary information particular dimensions mbr split new mbrs created split 
split creates new mbrs split history may represented binary tree called split tree 
leaf node split tree corresponds mbr internal nodes split tree correspond mbrs exist split new mbrs previously 
internal nodes split tree labeled split axis leaf nodes labeled mbr related 
mbrs related leaves left subtree internal node lower values split dimension node mbrs related right subtree 
shows example split history node respective split tree 
process starts single mbr corresponding split tree consists leaf node labeled uniformly distributed data spans full range values dimensions 
split dimension split axis produces new mbrs note disjoint point mbr lower coordinate value dimension points mbr split tree internal node marked dimension leaf nodes 
splitting mbr dimension split axis creates nodes splitting reach situation depicted right tree completely filled mi 
lemma may find overlap free split dimension mbrs split 
obtain information dimensions mbr split traverse split tree root node leaf corresponds example mbr split dimension path root node leaf labeled 
obviously mbrs split tree split dimension split axis root split tree 
general mbrs split tree split dimen sion common split axis root node split tree 
lemma existence overlap free split point data overlap free split exists 
proof split history 
description split tree clear mbrs directory node split dimension common dimension split axis root node split tree 
sd dimension 
able partition mbrs related leaves left subtree root node st mbrs contained 
point belonging st lower value dimension sd points belonging split overlap free 
may argue may exist overlap free split dimension part split history data pages 
true cases low dimensionality probability second split dimension exists part split history mbrs decreasing rapidly increasing dimensionality cf 

dimension split history mbrs resulting overlap newly created directory entries average 
explained follows mbr split split dimension partitions loss generality spans full range values dimension 
dimension probability existence second overlap free split dimension 
splits performed exactly middle 
note resulting split necessarily balanced sorted data space overlap minimal split obtained 
input data example result unbalanced split tree 
dimension point query nearest neighbor query speed tree tree real point data mbytes partition spans half range values split dimension mbrs partitioned respect dimension sl span full range val ues dimensions resulting total overlap 
probability split algorithm arbitrarily chooses split axis coincidentally selects right split axis overlap free split low highdimensional space 
analysis tree shows behavior topological tree split algorithm high dimensional space similar random choice split axis optimizes different criteria 
topological split fails split algorithm tries perform overlap free split 
done determining dimension overlap free split described determining split value partitioning mbrs respect split value 
resulting split unbalanced insert algorithm tree initiates creation extension supernode cf 
subsection 
note overlap minimal split information split history stored directory nodes 
space needed purpose small split history may coded bits 

performance evaluation show practical relevance method performed extensive experimental evaluation tree compared tv tree tree 
experimental results sections computed hp workstation mbytes main memory gbytes secondary storage 
programs implemented templates support different types data objects 
tree tree support different types queries point queries nearest neighbor queries implementation tv tree supports point queries 
original implementation original implementation tv tree lin jagadish faloutsos 
tv tree lin jagadish faloutsos 
test data experiments real point data consisting fourier points high dimensional space spatial data consisting manifolds high dimensional space describing regions real cad objects synthetic data consisting uniformly distributed points high dimensional space 
block size experiments kbyte index structures allowed amount cache 
realistic evaluation large amounts data experiments 
total amount disk space occupied created index structures tv trees trees trees gbyte cpu time inserting data adds weeks cpu time 
expects insertion times increase increasing dimension 
experiments insertion tree faster insertion tv tree tree factor faster tree 
tree reached rate insertions second mbytes index containing dimensional point data 
evaluated tree synthetic databases varying dimensionality 
number data items different dimensions implies size database linearly increasing dimension 
important drawback low dimensions obtain small databases high dimensions databases large 
realistic assume amount data stored database constant 
means number data items needs varied accordingly 
experiment mbyte databases containing uniformly distributed point data 
number data items varied 
shows speed search time point queries tree page accesses dimension cpu time number page accesses versus cpu time real point data mbytes tree 
expected speed increases growing dimension reaching values 
lower dimensions speed higher order magnitude speed 
high speed factors caused fact due high overlap high dimensions tree needs ac cess directory pages 
total query time turned clearly dominated time number page accesses see 
may argue synthetic databases uniformly distributed data realistic high dimensional space real data experiments 
access large fourier databases variable dimensionality containing mbyte fourier data representing shapes polygons 
results experiments cf 
show speed total search time point queries higher dimension speed tree tree point queries mbytes synthetic point data speed uniformly distributed data 
result surprising corresponds higher overlap real data overlap curves cf 

additionally point queries applications high dimensional data nearest neighbor queries important 
compared performance nearest neighbor queries searching nearest neighbors 
nearest neighbor algorithm supported tree tree algorithm 
results comparisons show speed nearest neighbor queries 
nearest neighbor algorithm requires sorting nodes min max distance cpu time needed nearest neighbor queries higher 
number page accesses cpu time tree tree nearest neighbor queries 
shows tree provides consistently better performance tree 
note counting page accesses accesses size counted page accesses 
practical cases supernodes cached due better main memory utilization tree 
practically relevant buffer sizes mbyte mbytes significant change page accesses 
extreme buffer sizes mbytes mbyte speed may decrease 
better cpu times tree may explained fact due overlap tree search large portion directory addition larger tree directory 
shows total search time point queries depending size database 
note logarithmic scale axis development times tree visible identical axis 
shows search times tree consistently orders magnitude faster tree total search time point queries comparison tree tv tree varying database size synthetic point data tree synthetic data 
speed slightly increases database size mbytes mbytes 
expected total search time tree grows logarithmically database size means tree scales large database sizes 
performed comparison tree tv tree tree 
implementation tv tree available authors tv tree managed insert data items slightly higher number data items original 
comparisons able large databases 
results comparisons 
speed tree tv tree ranges small databases 
interesting note dimension speed tree tree real extended spatial data performance tree better performance tv tree smaller 
addition point data examined performance tree extended data objects highdimensional space 
results experiments shown 
extended spatial data objects induce overlap tree speed tree tree lower point data 
achieve speed factor 

propose new indexing method high dimensional data 
investigate effects occur high dimensions show tree index structures behave indexing high dimensional spaces 
introduce formal definitions overlap show correlation overlap directory poor query performance 
propose new index structure tree uses addition concept supernodes new split algorithm minimizing overlap 
supernodes directory nodes extended usual block size order avoid degeneration index 
carry extensive performance evaluation tree compare tree tv tree tree mbytes point spatial data 
experiments show tree outperforms tv tree tree orders magnitude point queries nearest neighbor queries synthetic real data 
high dimensionality may large currently parallel version tree expected provide performance larger data sets time consuming nearest neighbor queries 
develop novel nearest neighbor algorithm high dimensional data adapted tree 
acknowledgment thankful lin faloutsos jag making implementation tv tree avail able 
afs bkss de fal fl gut gn har jag kuk kw agrawal faloutsos swami similarity search sequence databases proc 
th int 
conf 
foundations data organization algorithms evanston ill lecture notes computer science vol 
springer pp 

altschul gish miller myers lipman basic local alignment search tool journal molecular biology vol 
pp 

beckmann kriegel schneider seeger tree robust access method points rectangles proc 
acm sigmod int 
conf 
management data atlantic city nj pp 

dunn everitt mathe taxonomy cambridge university press cambridge ma 
faloutsos barber flickner hafner querying image content journal intelligent information sys tems vol 
pp 

faloutsos lin fast algorithm indexing data mining traditional multimedia da sets proc 
acm sigmod int 
conf 
management data san jose ca pp 

guttman trees dynamic index structure spatial searching proc 
acm sigmod int 
conf 
management data boston ma pp 

gunther spatial indices large extended objects proc 
th int 
conf 
data engineering pp 

harman modern factor analysis univer sity chicago press 
jagadish retrieval technique similar shapes proc 
acm sigmod int 
conf 
management data pp 

kukich techniques automatically words text acm computing surveys vol 
pp 

kruskal wish multidimensional scaling sage publications beverly hills 
lin faloutsos tv tree index structure high dimensional data vldb journal vol 
pp 

mg mg mn nhs rob sh sk srf wj mehrotra gary feature retrieval similar shapes proc 
th int 
conf 
data engineering vienna austria pp 

mehrotra gary feature index similar shape retrieval proc 
rd working conf 
visual database systems pp 

murase nayar object recognition appearance parametric eigenspace method systems computers japan vol 
pp 

nievergelt hinterberger sevcik grid file adaptable symmetric multikey file structure acm trans 
database systems vol 

pp 

roussopoulos kelley vincent nearest neighbor queries proc 
acm sigmod int 
conf 
management dam san jose ca pp 

robinson tree search struc ture large multidimensional dynamic indexes proc 
acm sigmod int 
conf 
man agement data pp 

kuntz ular docking shape descriptors 
journal computational chemistry vol 
pp 

hafner color histogram indexing proc 
int 
conf 
image processing pp 

seeger kriegel buddy tree cient robust access spatial data base systems proc 
th int 
conf 
large data bases brisbane australia pp 

sellis roussopoulos faloutsos tree dynamic multi dimensional objects proc 
th int 
conf 
large data bases brighton england pp 
white jain similarity indexing ss tree proc 
th int 
conf 
data engineer ing new orleans la 
wallace dimen sional aircraft recognition algorithm fourier descriptors computer graphics image processing vol 
pp 

