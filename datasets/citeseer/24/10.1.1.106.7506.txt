secure efficient asynchronous broadcast protocols extended christian cachin klaus kursawe frank victor shoup ibm research zurich research laboratory ch switzerland cca sho zurich ibm com 
broadcast protocols fundamental building block implementing replication fault tolerant distributed systems 
addresses secure service replication asynchronous environment static set servers malicious adversary may corrupt threshold servers controls network 
develop formal model concepts modern cryptography give modular definitions broadcast problems including reliable atomic secure causal broadcast protocols implementing 
reliable broadcast basic primitive known byzantine generals problem providing agreement delivered message 
atomic broadcast imposes additionally total order delivered messages 
randomized atomic broadcast protocol new efficient multi valued asynchronous byzantine agreement primitive external validity condition 
apparently efficient asynchronous atomic broadcast protocol maintaining liveness safety byzantine model appeared previously literature 
secure causal broadcast extends atomic broadcast encryption guarantee causal order delivered messages 
protocols threshold cryptography signatures encryption coin tossing 
broadcast protocols fundamental building block fault tolerant distributed systems 
group servers offer service fault tolerant way state machine replication technique mask failure individual server fraction 
model byzantine faults considered faulty servers may exhibit arbitrary behavior controlled adversary 
supported european ist project ist 
represents view authors 
project partially funded european commission swiss department education science 
frank left ibm reached com 
modular approach building robust broadcast protocols provide reliability servers deliver messages atomicity total order delivered messages secure causality notion ensures dishonest server sees message scheduled system 
important building block new protocol multi valued byzantine agreement external validation focus methods distributing secure trusted services internet goal increasing availability security 
cryptographic operations exploited greater extent previously protocols consider relatively cheap particular compared message latency internet 
timing assumptions purely asynchronous model static set servers probabilistic assumptions message delays 
protocols rely trusted dealer set system additional external constructs failure detectors stability mechanisms 
view standard cryptographic model distributed system byzantine faults 
choices maintain safety service network temporarily disrupted 
model avoids problem having assume synchrony properties fix timeout values network controlled adversary choices difficult justify safety security depend 
despite practical appeal asynchronous model research concentrated developing efficient asynchronous protocols implementing practical systems need consensus byzantine agreement 
developers distributed systems avoid approach result fischer lynch paterson shows consensus reachable protocols priori bounded number steps crash failures :10.1.1.127.6130
implications result 
particular randomized solutions constant expected number asynchronous rounds reach agreement 
employing modern efficient cryptographic techniques resorting random oracle model approach extended practical provably secure protocol cryptographic byzantine agreement maximal possible corruption 
basic broadcast protocols reliable broadcast bracha toueg ensures servers deliver messages variation call consistent broadcast provides agreement delivered messages 
consistent broadcast primitive particularly useful connection verifiability property delivered messages ensures party transfer proof delivery party single flow 
efficient randomized agreement protocols mentioned binary decisions decisions values small sets 
order build distributed secure applications sufficient 
needs agreement values large sets particular ordering multiple messages 
propose new multi valued byzantine agreement protocol external validity condition show implementing atomic broadcast 
external validity ensures decision value acceptable particular application requests agreement corrects drawback earlier agreement protocols multi valued agreement decide illegal values 
protocols digital signatures additional cryptographic techniques 
multi valued byzantine agreement protocol invokes constant expected number binary byzantine agreement sub protocols average achieves cryptographic common coin protocol novel way 
maximal possible corruption third parties expected quadratic message complexity number parties essentially optimal 
atomic broadcast protocol guarantees message honest party delayed arbitrarily adversary soon minimum number honest parties aware message 
protocol invokes multi valued byzantine agreement batch payload messages delivered 
analogous reduction atomic broadcast consensus crash fault model described chandra toueg directly transferred byzantine setting 
define implement variation atomic broadcast called secure causal atomic broadcast 
robust atomic broadcast protocol tolerates byzantine adversary provides secrecy messages moment guaranteed delivered 
client requests trusted service broadcast remain confidential answered service service processes requests causal order 
crucial asynchronous environment applying state machine replication method services involve confidential data 
secure causal atomic broadcast works combining atomic broadcast protocol robust threshold decryption 
notion heuristic protocol proposed reiter birman called secure atomic broadcast introduced term input causality main property 
progress threshold cryptography allows efficient robust protocol security proof random oracle model 
accordance comprehensive survey fault tolerant broadcasts hadzilacos toueg define implement protocols modular way reliable consistent broadcasts byzantine agreement primitives 
leads layered architecture secure causal atomic broadcast atomic broadcast multi valued byzantine agreement broadcast primitives byzantine agreement important presentation broadcast protocols formal model modular protocol architecture number potentially corrupted parties communicate insecure asynchronous network uses concepts modern cryptography 
possible easily integrate formal notions encryption signatures cryptographic tools distributed protocols 
model allows quantitative statements running time complexity protocols essence definition bound number steps taken participants behalf protocol independently network behavior 
view growing importance cryptography secure distributed protocols unified formal model contribution may independent interest 
organization 
lack space important results described extended 
begins brief account formal model definitions binary byzantine agreement consistent broadcast 
presents validated byzantine agreement implementation multi valued case extended atomic broadcast 
details particular formal model detailed definitions proofs discussion related descriptions reliable broadcast secure causal atomic broadcast full version 
model overview formal model system consists collection interactive turing machines statically corrupted adversary modeled arbitrary turing machine 
trusted dealer distributed cryptographic keys initially 
model differs respects models traditionally distributed systems byzantine faults order proof techniques complexity cryptography model computational parties adversary constrained perform feasible polynomial time computations 
necessary formal notions cryptography meaningful way 
assumptions network leave complete control adversary 
protocols extent adversary delivers messages faithfully 
short network adversary 
differences apparent treatment termination concrete conditions imply traditional notion eventual termination 
define termination bounding statistic measuring amount honest uncorrupted parties behalf protocol 
particular communication complexity protocol purpose defined length protocol messages associated protocol instance 
term protocol message messages parties send implement protocol contrast payload messages subject reliable consistent atomic 
broadcasts parties 
specification protocol requires certain things happen condition protocol messages delivered bounding length number protocol messages generated uncorrupted parties ensures protocol terminated condition 
usual cryptography prove security respect polynomial time adversaries 
notion efficient deterministic protocol requires statistic uniformly bounded fixed polynomial independent adversary 
define corresponding notion probabilistically uniformly bounded statistic randomized protocols expected running time protocol derived 
notions closed modular composition protocols trivial randomized protocols 
model uses adversary roles invoke new instances protocol input actions application deliver protocol messages modeling network 
simplicity protocol messages delivered adversary assumed authenticated implementing straightforward model 
byzantine agreement give definition binary byzantine agreement consensus crash fault model needed building atomic broadcast protocols 
provide agreement independent transactions 
byzantine agreement protocol activated adversary delivers input action pi form id propose 
occurs say pi proposes transaction id party terminates byzantine agreement protocol transaction id generating output action form id decide 
case say pi decides transaction id protocol message tag id id 
generated honest party associated agreement protocol id definition byzantine agreement 
protocol solves byzantine agreement satisfies conditions negligible probability validity honest parties activated id propose honest party terminates id decides agreement honest party decides id honest party terminates decides id liveness honest parties activated id associated messages delivered honest parties decided id efficiency id communication complexity id probabilistically uniformly bounded 
cryptographic primitives apart ordinary digital signature schemes collision free hashing pseudo random generators robust non interactive dual threshold signatures threshold public key encryption schemes threshold pseudo random function :10.1.1.134.1633
definitions full version 
term validity condition accordance literature byzantine agreement 
alternatively adopt terminology fault tolerant broadcasts call integrity emphasize general safety condition contrast liveness condition 
broadcast primitives verifiable consistent broadcast multi valued agreement protocol builds top consistent broadcast protocol relaxation byzantine reliable broadcast :10.1.1.12.1697
consistent broadcast provides way distinguished party send message parties parties deliver conflicting messages sender sequence number 
words maintains consistency delivered payloads senders sequence numbers provisions parties deliver payloads 
primitive reiter 
broadcasts parameterized tag id thought identifying broadcast channel augmented identity sender sequence number restrict adversary submit request consistent broadcast tagged id pi sequence number 
consistent broadcast protocol activated adversary delivers input action pj form id broadcast occurs say pj consistently broadcasts tagged id sender pj activated 
parties activated perform explicit open action instance id role receivers occurs implicitly system model wait output tagged id 
party terminates consistent broadcast tagged id generating output action form id deliver 
case say pi consistently delivers tagged id brevity terms broadcast deliver 
definition authenticated consistent broadcast 
protocol authenticated consistent broadcast satisfies conditions negligible probability validity honest party broadcast tagged id honest parties deliver tagged id provided honest parties activated id adversary delivers associated messages 
consistency honest party delivers tagged id honest party delivers tagged id authenticity id senders sequence numbers honest party delivers message tagged id pj honest previously broadcast pj sequence number efficiency id sender sequence number communication complexity instance id uniformly bounded 
provision adversary delivers associated messages quantitative counterpart traditional eventual delivery assumption 
party pi delivered payload message consistent broadcast may want inform party pj 
information useful pj delivered message exploit knowledge deliver payload message maintaining consistency 
call property verifiability consistent broadcast 
informally verifiability pj claims state deliver particular payload message pi send single protocol message pi pj processes deliver immediately 
definition verifiability 
consistent broadcast protocol called verifiable holds negligible probability honest party delivered tagged id produce single protocol message may send parties honest party deliver tagged id receiving provided party done 
call message completes verifiable broadcast 
notion implies polynomial time computable predicate vid receiving party apply arbitrary bit string checking constitutes message completes verifiable broadcast tagged id protocol verifiable authenticated consistent broadcast denoted full version 
inspired echo broadcast reiter threshold signature scheme 
message complexity bit complexity assuming length threshold signature signature share bits 
validated byzantine agreement standard notion validity byzantine agreement implements binary decision requires honest parties propose value agreement value 
particular outcome guaranteed 
obviously ensures agreement value proposed honest party binary case 
generalize multi valued byzantine agreement previous protocols multi valued agreement may fall back default value case decide value honest party proposed 
solve problem introducing external validity condition requires agreement value legal global polynomial time computable predicate known parties determined particular higher level application 
validated byzantine agreement generalizes primitive agreement core set information theoretic model similar purpose related protocol developed ben el yaniv 
definition suppose global polynomial time computable predicate qid known parties determined external application 
party may propose value satisfy qid contains validation information 
agreement domain restricted binary values 
validated byzantine agreement protocol activated message form id propose occurs say pi proposes transaction id assume adversary activates honest parties id 
honest parties propose values satisfy qid 
party terminates validated byzantine agreement protocol generating message form id decide 
case say pi decides transaction id say protocol message tag id generated honest party associated validated byzantine agreement protocol id agreement protocol may invoke sub protocols low level broadcasts byzantine agreement case messages associated protocols associated id messages tags prefix id 
definition validated byzantine agreement 
protocol solves validated byzantine agreement predicate qid satisfies conditions negligible probability external validity honest party terminates id decides qid holds 
agreement honest party decides id honest party terminates decides id liveness honest parties activated id associated messages delivered honest parties decided id integrity parties follow protocol party decides id party proposed id efficiency id communication complexity id probabilistically uniformly bounded 
variation validity condition application may prefer class decision values 
agreement protocol may biased choose preferred class cases values valid 
validated byzantine agreement arguments consist value part separate proof establishes validity single bit call problem binary validated agreement protocol task 
fact need binary validated agreement protocol biased 
purpose detect validation suffices guarantee termination output honest parties know corresponding information outset 
formally binary validated byzantine agreement protocol biased protocol validated byzantine agreement values condition holds biased validity honest parties propose honest party terminates id decides 
describe related protocols multi valued validated byzantine agreement protocol vba described section needs rounds invokes binary agreement sub protocols improved constant expected number rounds resulting protocol described section 
discuss binary case 
protocols binary case easy see binary asynchronous byzantine agreement protocol adapted external validity biased 
example protocol cachin kursawe shoup justify pre votes round valid proof 
logic protocol guarantees decision reached immediately validations seen parties rounds 
furthermore protocol biased modifying coin outputs round 
protocol multi valued case describe protocol vba implements multi valued validated byzantine agreement 
basic idea party proposes value candidate value final result 
party proposal satisfies validation predicate selected sequence binary byzantine agreement protocols value final decision value 
precisely protocol consists steps 
echoing proposal lines party pi broadcasts value proposes parties verifiable authenticated consistent broadcast 
ensures honest parties obtain proposal value particular party sender corrupted 
pi waits received proposals satisfying qid entering agreement loop 
agreement loop lines party chosen fixed permutation 

denote index party selected current round pa called candidate 
party pi carries steps pa 
send vote message parties containing pi received pa proposal including proposal vote lines 

wait vote messages count votes indicating valid proposal pa received directly included vote message lines 

run binary validated byzantine agreement biased determine pa properly broadcast valid proposal 
vote pi received valid proposal pa add protocol message protocol vba party pi tag id validation predicate qid predicate vid vid completes verifiable authenticated broadcast message echo wa tag id qid wa holds receiving message id propose verifiably broadcast message echo tagged id wj wait messages echo wj delivered tag id distinct pj qid wj holds repeat wa send message id vote parties message completes broadcast tag id send message id vote parties uj wait messages id vote uj distinct pj vid uj holds uj propose id binary validated byzantine agreement biased predicate vid wait agreement protocol decide id wa complete verifiable authenticated broadcast tag id deliver id echo wa output id decide wa halt protocol vba multi valued validated byzantine agreement 
completes verifiable broadcast pa proposal validate vote 
pi received vote messages containing vote additional information needed 
agreement decides exit loop lines 
delivering chosen proposal lines pi delivered broadcast selected candidate obtain proposal value returned byzantine agreement 
full protocol shown 
theorem 
protocol biased binary validated byzantine agreement protocol verifiable authenticated consistent broadcast protocol vba provides multi valued validated byzantine agreement 
message complexity protocol vba tn protocol verifiable consistent broadcast binary validated byzantine agreement implemented section 
parties propose longer bits communication complexity case tk assuming length threshold signature signature share bits 
constant fraction corrupted parties values cubic constant round protocol multi valued agreement section protocol improvement protocol previous section guarantees termination constant expected number rounds 
drawback protocol vba adversary knows order parties search acceptable candidate broadcast valid proposal 
third parties guaranteed accepted adversary choose corruptions schedule messages examined early agreement loop 
remedy problem choose randomly protocol making sure parties committed votes candidates 
achieved steps 
round commitment exchanges added agreement loop 
party commit votes cast broadcasting identities parties received valid echo messages authenticated consistent broadcast 
honest parties accept vote messages consistent commitments 
second step determine permutation threshold coin tossing scheme outputs pseudo random value votes committed 
taken steps ensure fraction parties guaranteed accepted distributed randomly causing termination constant expected number rounds 
details protocol described modifications protocol vba 
protocol party pi tag id validation predicate qid modify protocol vba party pi tag id validation predicate qid follows 
initialize distribute shares threshold coin tossing scheme bit outputs system setup 
recall defines pseudorandom function pseudorandom generator section 
include instructions lines protocol vba entering agreement loop wj cj 
cn broadcast message commit tagged id cbc cj wait messages commit cj delivered tag id cbc entries cj generate coin share coin id vba send message id coin parties wait coin messages containing shares coin id vba combine get value id vba choose random permutation pseudorandom generator seed 
modify condition accepting vote messages line inside agreement loop vote pj accepted cj known cj 
involves waiting additional messages commit cj delivered 
protocol multi valued validated byzantine agreement 
theorem 
protocol biased binary validated byzantine agreement protocol verifiable consistent broadcast protocol provides multi valued validated byzantine agreement invokes constant expected number binary byzantine agreement sub protocols 
expected message complexity protocol protocol consistent verifiable broadcast binary validated byzantine agreement implemented section 
parties propose longer bits expected communication complexity case assuming digital signature bits 
term results broadcasting commitments small hidden constant commitments represented bit vectors 
atomic broadcast atomic broadcast guarantees total order messages honest parties deliver messages common tag order 
known protocols atomic broadcast considerably expensive reliable broadcast crash fault model atomic broadcast equivalent consensus solved deterministic protocols 
atomic broadcast protocol builds directly multi valued validated byzantine agreement section 
definition atomic broadcast ensures messages broadcast tag id delivered order honest parties way id interpreted name broadcast channel total order atomic broadcast yields implicit labeling messages 
atomic broadcast activated adversary delivers input message pi form id broadcast occurs say pi atomically broadcasts tag id activation refers broadcast particular payload message broadcast channel id opened request 
party terminates atomic broadcast particular payload generating output message form id deliver 
case say pi atomically delivers tag id distinguish atomic broadcast forms broadcast terms broadcast deliver 
mechanism needed composition atomic broadcast protocols omitted extended 
adversary request broadcast payload message particular party id parties may broadcast message 
atomic broadcast protocols fair payload message scheduled delivered reasonable polynomial number steps broadcast honest party 
adversary may delay sender arbitrarily deliver priori unbounded number messages remaining honest parties provide guarantee honest parties aware definitions validity fairness require honest parties payload delivered reasonable number steps 
reason allowing multiple parties broadcast payload message client application able satisfy precondition external means achieve guaranteed fair delivery way 
fairness interpreted termination condition broadcast particular payload efficiency condition ensures fast termination atomic broadcast differs protocols discussed far protocol particular tag terminate 
merely stalls undelivered payload messages system terminated externally 
define efficiency absolute number protocol messages generated 
measure progress protocol respect number messages delivered honest parties 
particular require number associated protocol messages exceed number delivered payload messages times polynomial factor independent adversary 
say protocol message associated atomic broadcast protocol tag id message generated honest party tagged id tag id 
starting id particular encompasses messages atomic broadcast protocol tag id generated honest parties messages associated basic broadcast byzantine agreement sub protocols invoked atomic broadcast 
fairness efficiency defined number payload messages implicit queues honest parties 
say payload message implicit queue party pi channel id pi broadcast tag id honest party delivered tagged id system queue contains message implicit queue honest party 
say payload message implicit queue honest party pi older pi broadcast message broadcast second 
discussing implicit queues particular points time consider sequence events 
ek operation system event broadcast delivery honest party 
phrase time refers point time just event occurs 
definition atomic broadcast 
protocol atomic broadcast satisfies conditions negligible probability validity honest parties non empty implicit queues channel id provided adversary opens channel id honest parties delivers associated messages 
agreement honest party delivered tagged id honest parties deliver tagged id provided adversary opens channel id honest parties delivers associated messages 
total order suppose honest party pi delivered 
ms tag id distinct honest party pj delivered 
tag id ml integrity id honest party delivers payload message tagged id parties follow protocol previously broadcast party tag id fairness fix particular protocol instance tag id consider system point time set honest parties non empty implicit queues set consisting oldest payload message party denote total number distinct payload messages delivered honest party far 
define random variable follows total number distinct payload messages delivered honest parties point time message delivered honest party occurs 
uniformly bounded 
efficiency particular protocol instance tag id denote communication complexity total number distinct payload messages delivered honest party tag id point time random variable probabilistically uniformly bounded 
protocol atomic broadcast protocol abc atomic broadcast uses secure digital signature scheme proceeds follows 
party maintains fifo queue adelivered payload messages 
messages received broadcast appended queue received 
protocol proceeds asynchronous global rounds round consists steps 
send payload message current queue parties accompanied digital signature queue message 

collect queue messages distinct parties store vector propose validated byzantine agreement 

perform multi valued byzantine agreement validation vector tuples 
wn predicate id abc true distinct tuples string valid signature id queue wj pj 

deciding vector messages deliver union payload messages deterministic order proceed round 
order ensure liveness protocol ways parties move forward round party receives input message stated party empty queue receives queue message party pertaining current round 
messages arrive contain undelivered payload message party sent queue message current round enters round appending payload queue sending queue message parties 
detailed description protocol abc 
fifo queue ordered list values initially empty 
accessed operations append remove append inserts remove removes returns element operation tests element contained party waiting round simultaneously waits broadcast queue message containing line 
receives broadcast request payload appended suitable queue protocol message received party message round append theorem 
protocol multi valued validated byzantine agreement assuming secure signature scheme protocol abc provides atomic broadcast 
protocol abc party pi tag id id abc predicate qid abc 
wn distinct valid signature pj id queue wj initialization fifo queue messages broadcast set delivered messages current round receiving message id broadcast append forever wj wait message id queue wl received pl wl valid signature pl wl compute digital signature id queue send message id queue parties wait messages id queue wj valid signature pj including message pl 
wn propose multi valued validated byzantine agreement id abc predicate qid abc wait validated byzantine agreement protocol decide 
vn id abc vj deterministic order output id deliver remove protocol abc atomic broadcast multi valued validated byzantine agreement 
message complexity protocol abc broadcast payload message dominated number messages multi valued validated byzantine agreement extra overhead atomic broadcast messages 
holds communication complexity proposed values length assuming digital signatures length bits 
protocol section total expected message complexity expected communication complexity atomic broadcast single payload message 
secure causal atomic broadcast secure causal atomic broadcast useful protocol building secure applications state machine replication byzantine setting 
provides atomic broadcast ensures recipients receive sequence messages guarantees payload messages arrive order maintains input causality notion introduced reiter birman 
informally input causality ensures byzantine adversary may ask system deliver payload message depends meaningful way undelivered payload sent honest client 
useful delivering client requests distributed service applications require contents request remain secret system processes 
input causality related standard causal order goes back lamport causality useful safety property distributed systems crash failures defined byzantine model 
input causality achieved sender encrypts message broadcast public key threshold cryptosystem parties share decryption key 
ciphertext broadcast atomic broadcast protocol delivering parties engage additional round recover message ciphertext 
definition implementation secure causal atomic broadcast top atomic broadcast full version 

ben el yaniv interactive consistency constant time manuscript 

ben canetti goldreich asynchronous secure computation proc 
th annual acm symposium theory computing stoc 

berman garay randomized distributed agreement revisited proc 
th international symposium fault tolerant computing ftcs pp 


bracha toueg asynchronous consensus broadcast protocols journal acm vol 
pp 
oct 

cachin kursawe shoup secure efficient asynchronous broadcast protocols cryptology eprint archive report mar 
eprint iacr org 

cachin kursawe shoup random oracles practical asynchronous byzantine agreement cryptography proc 
th acm symposium principles distributed computing podc pp 

full version available cryptology eprint archive report eprint iacr org 

canetti rabin fast asynchronous byzantine agreement optimal resilience proc 
th annual acm symposium theory computing stoc pp 

updated version available www research 
ibm com security 

chandra toueg unreliable failure detectors reliable distributed systems journal acm vol 
pp 


fischer lynch paterson impossibility distributed consensus faulty process journal acm vol 
pp 
apr 

hadzilacos toueg fault tolerant broadcasts related problems distributed systems mullender ed new york acm press addison wesley 
expanded version appears technical report tr department computer science cornell university ithaca ny 

lamport time clocks ordering events distributed system communications acm vol 
pp 
july 

lamport shostak pease byzantine generals problem acm transactions programming languages systems vol 
pp 
july 

naor pinkas reingold distributed pseudo random functions advances cryptology eurocrypt stern ed vol 
lecture notes computer science springer 

perry randomized byzantine agreement ieee transactions software engineering vol 
pp 
june 

rabin randomized byzantine generals proc 
th ieee symposium foundations computer science focs pp 


reiter secure agreement protocols reliable atomic group multicast rampart proc 
nd acm conference computer communications security 

reiter birman securely replicate services acm transactions programming languages systems vol 
pp 
may 

shoup practical threshold signatures advances cryptology euro crypt preneel ed vol 
lecture notes computer science pp 
springer 

shoup gennaro securing threshold cryptosystems chosen ciphertext attack advances cryptology eurocrypt nyberg ed vol 
lecture notes computer science springer 

extending binary byzantine agreement multivalued byzantine agreement information processing letters vol 
pp 

