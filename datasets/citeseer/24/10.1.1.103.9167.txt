originally published proceedings conference domain specific languages santa barbara california october typed common intermediate format zhong shao yale university information usenix association contact 
phone 
fax 
email office usenix org 
www url www usenix org typed common intermediate format application languages ective solving speci software problems 
unfortunately pose great challenges reliable cient implementations 
fact existing application languages slow interpreted poor interoperability general purpose languages 
presents framework building highquality systems environment multiple advanced languages 
key innovation common typed intermediate language named flint model semantics interactions various language speci features 
flint ona predicative variant girard reynolds polymorphic calculus extended rich set primitive types functions 
flint provides common compiler infrastructure quickly adapted generate compilers new general purpose domain speci languages 
single uni ed type system flint serves great platform reasoning crosslanguage 
flint types act glue connect language features complicate interoperability mixed data representations multiple function calling conventions di erent memory management protocols 
addition runtime representations determined flint types languages compiled flint share system wide garbage collector foreign function call interface 
application languages domain speci languages dsls ective solving speci software problems 
unfortunately focus particular domain quick turn zhong shao dept computer science yale university new haven ct shao zhong cs yale edu time unrealistic develop full scale compilers scratch 
fact due lack compiler infrastructures existing application languages interpreted compiled 
result software written application languages generally slow poor interoperability general purpose languages 
interoperability problem course applies advanced type safe languages modular ml haskell 
programming languages generalpurpose domain speci syntax semantics implementation speci cs run special runtime system garbage collector foreign function call interface low level code 
interoperation communication languages nightmare impossible 
proposed object models microsoft com omg corba er partial solution require programs written di erent languages run di erent domains address space 
wallach shown cross domain function calls com factor times slower regular function calls single domain 
unacceptable applications 
problem lack compiler infrastructures serious 
write compiler new language write scratch compile main stream languages 
advanced languages toolow level serve target language 
modern languages support strong typing automatic memory management program exceptions higher order functions closures support 
compilers designed produce code higher level language features 
write compiler write multiple compilation phases customize runtime system including support garbage collection proper signal handling foreign function call interface 
presents new framework building high quality systems environment multiple general purpose application oriented languages 
particularly interested class hot languages languages higher order typed 
broader interpretation higher order include languages objects contain methods functions rst class citizens typed include static dynamic typing 
java hot ml haskell scheme 
application languages designed exploit higher level abstraction program analysis designed hot 
key innovation common typed intermediate language named flint model semantics interactions various features 
flint predicative variant girard reynolds polymorphic lambda calculus extended rich set primitive types functions 
hot languages di erent semantics mathematically rigorous type system 
fact hot features compiled calculus surprising frequently meta language reasoning formal logic semantics 
flint provides common compiler infrastructure quickly adapted generate compilers new general purpose domain speci languages 
single uni ed type system flint serves great platform reasoning crosslanguage 
flint types act glue connect language features complicate interoperability mixed data representations multiple function calling conventions di erent memory management protocols 
addition runtime representations determined flint types languages compiled flint share system wide garbage collector foreign function call interface low level code 
expressive type system flint code serve translated powerful executable content java vm code making hot programs internet ready 
acronym hot coined bob harper widely publicized phil wadler editorial journal functional programming 
flint system developed yale university infrastructure type version sml nj compiler :10.1.1.14.4810
preliminary implementation flint intermediate language incorporated working releases sml nj compiler version january 
resulting compiler handles entire sml plus macqueen tofte higherorder modules 
gives better performance speedup benchmarks involve recursive mutable types older versions sml nj compiler :10.1.1.14.4810
new front ends languages safe haskell java active development 
rest rst basic architecture flint system 
current design typed common intermediate language followed summary main implementation techniques compile intermediate language 
show di erent general purpose languages translated flint nally discuss related conclude 
flint architecture flint system shown organized strongly typed intermediate language named flint 
programs written various source languages rst fed front parsing elaboration type checking pattern match compilation source program translated flint intermediate format 
middle conventional data ow loop optimizations local cross module type specializations calculus contractions reductions produces optimized version flint code 
back compiles flint machine code usual phases representation analysis compile polymorphism safe space closure conversion compile higher order functions register allocation instruction scheduling machine code generation 
compilation stages deliberately independent may di erent ways di erent languages 
runtime system provides support systemwide garbage collection foreign function call interface connections lower level operating sys lexer parser typechecker lexer parser typechecker lexer parser typechecker lexer parser typechecker lexer parser typechecker intel ml safe java haskell dsls flint intermediate language sparc back code generator alpha java vm flint portable common runtime system system libraries bootstrapping garbage collection tem services 
current implementation borrows sml nj runtime system runs major machine platforms 
plan extend support new services dynamic linking bytecode execution 
important emphasize modular nature compiler structure 
flint intermediate language nicely separates front language independent back 
compiler optimizations done middle performed flint flint program transformations flint designed suitable optimizations 
allows flint advanced executable content language just java vm bytecode 
front middle thought source flint compiler back runtime system kind just time compiler virtual machine 
flint designed compiler intermediate language compiling flint incur ciency loss stack java bytecode 
important aspect organization top level structure flint system compilation manager middle optimizer flint code verifier flint interpreter back code generator 
keep flint type system simple currently back handle compilation polymorphism representation analysis higher order functions 
closure conversion 
reason propagate preserve type information back 
fact intend propagate type information assembly machine code guide sophisticated instruction scheduling generate necula lee style proof carrying code 
construct compiler new application language need write new front translates source program flint intermediate code 
language embedded inside general purpose language simply modify front host language support domain speci aspects 
time new primitive operators type constructors added intermediate language support corresponding surface language constructs middle optimizer tailored support corresponding domain speci program analysis transformations 
believe majority domain speci features abstracted set algebraic data types consists set primitive types primitive operators proper rewriting rules axioms 
process modifying intermediate language middle optimizer automated 
typed intermediate format common intermediate languages share compiler infrastructure new idea 
existing compilers gnu gcc stanford suif washington vortex kind shared intermediate format multiple source languages 
addition programming language de facto standard target language long time 
mainly designed conventional imperative languages directly support higher order functions advanced polymorphic type system 
flint designed strongly typed common intermediate format hot languages 
advantages making intermediate language type safe 
rigorous type system reason safety program intermediate language level 
particularly important applications secure mobile java vm code 
second type information possible reason principled interoperability di erent languages 
fact data representations function calling conventions decided uniform type system possible programs di erent surface languages share runtime system garbage collector foreign function call interface 
type information proven invaluable cient compilation statically typed languages ml haskell types useful debugging compilers proving properties programs 
rationale current flint language designed principles strong explicit typing 
ml languages tricky type inference problems 
having explicitly typed intermediate language leaves type inference issues completely front 
simple de ned semantics 
intermediate language simple clean semantically founded order common target language 
expressiveness 
order support multiple hot languages flint type system rich express hot features higher order functions ml polymorphism higher order modules 
pay go ciency 
intermediate language course compiled generate cient code 
furthermore simple rstorder monomorphic functions compiled ciently assembly languages presence polymorphic functions complicate data representations function calling conventions 
optimization ready 
compiler middle performs various kinds optimizations intermediate code 
reason intermediate representation compatible standard program analysis transformations 
intermediate language contain explicit loop recursion construct support sophisticated loop optimizations 
system programming friendly 
intermediate language provide excellent support low level system programming safe type cast dynamic types bit manipulation primitives 
contain subset language features write realtime programs code fragments involve garbage collections 
extensible 
intermediate language easily extended support advanced domain speci language features concurrency objects user de ned datatypes 
summarize want language behaves strongly typed assembly language 
high level express polymorphism higher order functions lowlevel support standard optimizations 
background core language flint predicative variant girard reynolds polymorphic calculus term language written form 
rst give formally de ne core flint language 
standard girard reynolds polymorphic calculus de ned follows kinds types terms calculus contains syntactic classes kinds types terms 
kinds classify types types classify terms 
extra kind hierarchy regulate de ne wellformed types 
simple types functions records integers polymorphic types kind higher order types really type functions kind belong kind higher order type applied type written 
term level addition usual lambda abstraction application support explicit type abstraction type application written 
type abstraction term polymorphic type assuming term type example function type standard polymorphic type considered kind expressions type check yield type 
supports general kind higherorder polymorphism commonly meta language reason formal logic semantics 
fact advanced languages ml haskell embedded calculus 
core language core language flint standard important changes standard polymorphic types treated monomorphic types kind complicates semantics calculus impredicative 
harper morrisett split type hierarchy levels constructor level characterizes monomorphic types type functions type level expresses polymorphic types 
kind classify constructors polymorphic types previous longer belongs kind expressions longer type check predicative variant 
call value term language split levels values denoting simple variables constants 
usual term expressions satisfy new syntactic restrictions standard normal forms 
speci cally function application type application refer values 
standard function application term rewritten call value semantics nested expressions followed actual value application 
new product kind added kind language express sequence type constructors 
product kind possible de ne type functions takes sequence type constructors argument returns sequence result 
useful express parameterized modules higher order functors 
core flint contains syntactic classes kinds constructors types terms values kinds con int types terms values kinds classify constructors types classify terms values 
constructors kind name monotypes 
monotypes generated variables int constructors 
application abstraction constructors correspond function kind 
pairing selection constructors correspond product kind 
types core flint include monotypes closed function spaces polymorphic quanti cation 
denote type corresponding constructor kind 
terms explicitly typed calculus normal form explicit constructor abstraction application forms 
intentionally included primitive constructor int primitive constant show core calculus extended complete languages 
static semantics core flint consists collection rules constructor formation constructor equivalence type formation type equivalence term formation 
term formation rules form kind environment mapping type variables kinds type environment mapping term variables types 
harper morrisett shown type checking predicative calculus decidable furthermore typing rules consistent standard call value operational semantics 
full language order flint simple possible front deal higher level language constructs 
example front ml translate higher order modules core flint calculus type preserving way completely eliminating need module constructs intermediate language 
similarly type classes haskell embedded explicit dictionary passing 
complete flint language contains type term constructs core languages 
flint explicitly typed language adding new type constructors flint involve reconstruction problem 
summarize main features current design letrec construct term level allow declaration mutually recursive functions 
sum type constructor constructor level represent ml concrete datatypes 
manipulating values sum types done set injection functions plus switch projection function 
recursive operator constructor level allow de nitions recursive type constructors list 
term level primitive operators roll unroll converts values recursive types underlying sum types 
primitive exception type exn constructor level pair term level constructs raise raise exception try handle run expression exception raised handler called 
abs constructor constructor level pair primitives pack unpack term level kind type signatures abs pack abs unpack abs source level type represented form abs inside flint internal representation type hidden programmer 
representation types useful pickling values types 
rest flint constructs expressed signature form abs primitives 
signature de nes primitive type constructor constructor level set primitive constants operators term level 
primitive functions satisfy set axioms optimize term level expressions 
current implementation axioms middle optimizer plan automate process 
flint language includes primitives bit integers trapping non trapping words bit characters ascii unicode oating point numbers strings boolean types boxed cells array packed arrays vectors packed vectors mono arrays mono vectors ml immutable records nested continuations control continuations cml suspensions thunks support lazy evaluations 
long term plan add type dynamic form bounded quanti cation support object oriented languages 
type dynamic possible translate dynamically typed languages scheme constructor formation constructor equivalence fn ft int cfn ft 

ft 
type formation type equivalence term formation 



ft 
value int fn app tfn tapp fx ft fx static semantics core flint type int aux info ref internal hash cell datatype tk monotype kind tk seq list sequence kind tk fun function kind tc var index int tyvar de bruijn notation tc prim primitive tc fn list constructor abstraction tc app list constructor application tc seq list sequence tc proj int projection sequence tc fix list int recursive tycon tc abs tycon tc ind memoization node tc env int int suspension lt monotype lt str lty list structure record type lt fct lty lty functor arrow type lt poly list lty polymorphic type lt ind lty lty memoization node lt env lty int int lty suspension withtype hash consed cell hash consed cell lty hash consed cell 
environment representing kinds constructors types flint 
intend extend flint cover interesting representation types 
just new primitive constructors functions structure flint language remains simple small 
implementations challenge implementing flint intermediate language represent constructors types compactly ciently 
type analysis involve operations application normalization equality test 
naive implementation operations lead duplicate copying redundant traversal extremely slow compilation 
techniques optimize representations kinds constructors types see fragment flint de nitions written ml datatype de nitions 
represent type variables de bruijn indices 
de bruijn notations constructors types unique representations 
hash cons kinds constructors types separate hash tables 
kind constructor type lty represented internal hash cell 
cell contains pieces information integer hash code term set auxiliary information aux info 
aux info constructors types maintains attributes ag shows normal form normal form set free type variables 
constructing new type constructor representation involve calculating hash code descendants look hash table done calculate aux info install new hash table 
type reduction lazy nadathur suspension notations represent intermediate result unevaluated type applications 
intuitively type suspension lt env quadruple consisting term indices environment 
rst index indicates embedding level respect variable determined term second index indicates new embedding level 
environment determines bindings type variables 
gives parts de nitions flint kind constructor type lty sml datatype de nitions 
constructor abstraction tc fn polymorphic type lt poly quantify list type variables type variable tc var represented de bruijn index plus integer indicates exact position corresponding list 
suspension terms denoted tc env lt env suspension reduced replaced memoization node tc ind lt ind 
memoization node contains pair reduction result original term original term memoization node creations term directly hash cons ed memoization node requires checking equality saving unnecessary reductions 
combination techniques proven ective 
hash consing memoization common operations equality test testing type normal form nding set free variables done constant time 
suspension terms type application done need basis done result memoized 
preliminary measurements shown heavily applications sml nj compilation manager optimized implementation order magnitude faster compilation time naive implementations 
representing type variables de bruijn indices drawback 
example type manipulation harder program 
simple beta reduction asv requires adjustment type variables occurred free furthermore occurs type abstractions adjusted 
compiling flint flint code compiled steps 
middle performs series conventional control data ow optimizations 
optimizations type preserving resulting flint code type check typing rules 
flint terms normal form cps optimizations apply flint 
apart presence polymorphism higher order functions resulting flint code close low level machine languages 
optimizations back uses exible representation analysis compile polymorphism safe space closure conversion compile higher order functions standard register allocation instruction scheduling machine code generation 
rest section sample important techniques compiler back 
type specialization polymorphic functions expensive monomorphic functions middle compiler performs rounds type specialization decrease degree polymorphism 
basic idea illustrated example int int 
assume function called shown rewrite programs int int 
monomorphic functions 
transformation carried bottom traversal function applied int specialized int rst specialized way 
lambda reduction type specialization ective combined conventional data ow optimizations dead code elimination common subexpression elimination constant folding constant propagation loop invariants 
middle optimizer 
lambda contraction phase place carry domain speci program analysis program optimizations 
representation analysis novel aspect back new exible representation analysis technique compile polymorphic functions functors 
exible representation analysis recursive mutable data objects unboxed representations incurring expensive runtime cost heavily polymorphic code 
contrast coercion approach gallium sml nj support unboxed representations recursive mutable objects approach til handle data objects involves heavy weight runtime type analysis code manipulations :10.1.1.14.4810
closure conversion polymorphism eliminated cient safe space closure conversion algorithm compile higher order functions 
algorithm exploits compile time control data ow information optimize closure representations 
extensive closure sharing allocating closures registers possible closure conversion algorithm gives performance satis es strong safe space complexity rule achieving asymptotic space usage 
translation flint demonstrate power flint language built new front translates en tire sml plus macqueen tofte higher order modules typed common intermediate format 
new front flint middle incorporated released part standard ml new jersey compiler version january 
translation core ml core haskell language flint standard embedding ml features ml datatypes translated flint type constructors 
compilation sml higher order modules flint quite challenge higher order modules involve dependent types general expressed polymorphism 
fortunately ml style higher order modules clean phase distinction property module language completely separate core language 
companion translation macqueen tofte higherorder modules core flint language 
basic idea algorithm notice ml module split type part value part type value part structure includes type value components plus type value parts structure functor components type part functor higher order type function type part arguments result value part functor viewed polymorphic function quanti ed type part arguments functor applications expressed combination type application value application girard reynolds calculus 
detailed algorithm companion 
fact ml style higher order modules embedded flint indication flint expressive power 
currently working translations source languages haskell java safe translating haskell flint di erent translating core sml language 
distinct features haskell type class lazy evaluation 
type class eliminated explicit dictionary passing done type checker front 
lazy evaluation requires flint primitives delay force evaluation explicit 
translating java flint trivial boils kind encodings model java objects 
believe flint su ciently rich intermediate language handle interesting application languages 
building new front completely trivial definitely easier translating building compiler scratch 
consider common intermediate format conventional imperative languages flint plays role modern hot languages 
related common intermediate format active research area past 
existing compilers gnu gcc stanford suif washington vortex kind shared intermediate representations multiple source languages 
addition programming language de facto common intermediate format long time 
course intermediate languages strongly typed support advanced hot languages ml 
example typed intermediate format java 
flint java bytecode statically type checked type system formalized calculus 
java bytecode originally designed java directly support common hot language features higher order functions polymorphic functions 
typed intermediate languages gotten lot attentions ml community lately 
ml compilers gallium sml nj til maintain explicit type information inside intermediate languages :10.1.1.14.4810
flint compiler rst handles entire sml plus macqueen tofte higher order modules 
predicative polymorphic calculus model type theoretic semantics standard ml pioneered harper mitchell 
xml calculus includes dependent types characterize ml module constructs 
harper morrisett proposed predicative variant extended compile ml polymorphism 
harper stone gave new type theoretic account entire sml internal language contain separate module calculus translucent types 
inspired look possibility building typed common intermediate format 
wehave new framework constructing high quality compilers multiple advanced hot languages 
compiling di erent general purpose application languages single typed intermediate format babel problems associated application languages nicely resolved 
example compiler infrastructure building quickly adapted generate compilers new application languages 
languages compiled flint interact static type information 
may share single runtime system system wide garbage collector foreign function call interface 
flint compiler incorporated released sml nj compiler design flint language early stage 
fact important features objects type dynamic supported 
plan gain experience application languages expand evolve flint mature intermediate language 
acknowledgments research sponsored part darpa ito title software evolution hot language technology darpa order 
issued contract 
part nsf career award ccr nsf ccr 
views contained document authors interpreted representing cial policies expressed implied defense advanced research projects agency government 
availability preliminary implementation flint intermediate language released standard ml new jersey sml nj compiler 
sml nj joint lucent princeton yale software source code available anonymous ftp ftp research bell labs com pub detailed information related papers flint www page flint cs yale edu aho sethi ullman 
compilers principles techniques tools 
addison wesley reading ma 
appel 
runtime system 
lisp symbolic computation 
appel 
compiling continuations 
cambridge university press 
blume 
compilation manager sml nj 
part sml nj user guide 
bruce cardelli pierce 
comparing object encodings 
proc 
third workshop foundations object oriented languages july 
de bruijn 
survey project automath 
curry essays combinatory logic lambda calculus formalism pages 
edited seldin hindley academic press 
dean defouw grove litvinov chambers 
vortex optimizing compiler object oriented languages 
proc 
acm sig plan conf 
object oriented programming systems languages applications pages new york october 
acm press 
george guillaume reppy 
portable optimizing backend sml nj compiler 
proceedings international conference compiler construction pages 
springer verlag april 
girard 
interpretation elimination des coupures dans ordre 
phd thesis university paris vii 
gosling joy steele 
java language speci cation 
addison wesley 
group 
common object request broker architecture speci cations corba 
revision object management group omg framingham december 
hall anderson amarasinghe murphy liao bugnion lam 
maximizing multiprocessor performance suif compiler 
ieee computer december 
harper mitchell 
type structure standard ml 
acm trans 
prog 
lang 
syst april 
harper mitchell moggi 
higherorder modules phase distinction 
seventeenth annual acm symp 
principles prog 
languages pages new york jan 
acm press 
harper morrisett 
compiling polymorphism intensional type analysis 
annual acm symp 
principles prog 
languages pages new york jan 
acm press 
harper stone 
type theoretic account standard ml version 
technical report cmu cs school computer science carnegie mellon university pittsburgh pa september 
hudak jones report programming language haskell non strict purely functional language version 
sigplan notices may 

portable interface standard ml new jersey 
technical memorandum bell laboratories murray hill nj january 
leroy 
unboxed objects polymorphic typing 
nineteenth annual acm symp 
principles prog 
languages pages new york jan 
acm press 
longer version available inria tech report 
lindholm yellin 
java virtual machine speci cation 
addison wesley 
macqueen tofte 
semantics higher order functors 
th european symposium programming pages berlin april 
spinger verlag 
milner tofte harper macqueen 
de nition standard ml revised 
mit press cambridge massachusetts 
morrisett 
compiling types 
phd thesis school computer science carnegie mellon university pittsburgh pa december 
tech report cmu cs 
nadathur 
notation lambda terms ii applications 
technical report cs duke university durham nc january 
nadathur wilson 
representation lambda terms suitable operations intensions 
acm conference lisp functional programming pages new york june 
acm press 
necula 
proof carrying code 
fourth annual acm symp 
principles prog 
languages new york jan 
acm press 
nelson editor 
systems programming modula 
prentice hall englewood cli nj 
peyton jones launchbury 
unboxed values rst class citizens non strict functional language 
fifth international conference programming languages computer architecture pages new york august 
acm press 
reppy 
cml higher order concurrent language 
proc 
acm sigplan conf 
prog 
lang 
design implementation pages 
acm press 
reppy 
high performance garbage collector standard ml 
technical memorandum bell laboratories murray hill nj january 
reynolds 
theory type structure 
proceedings colloque sur la programmation lecture notes computer science volume pages 
springer verlag berlin 
rogerson 
inside com microsoft component object model 
microsoft press 
sabry wadler 
re ection call byvalue 
proc 
acm sigplan international programming icfp pages 
acm press june 
shao 
flexible representation analysis 
proc 
acm sigplan international conference functional programming icfp pages 
acm press june 
shao 
typed cross module compilation 
technical report yaleu dcs rr dept computer science yale university new haven ct july 
shao appel 
space cient closure representations 
acm conference lisp functional programming pages new york june 
acm press 
shao appel :10.1.1.14.4810
type compiler standard ml 
proc 
acm sigplan conf 
prog 
lang 
design implementation pages 
acm press 
tarditi morrisett cheng stone harper lee 
til type directed optimizing compiler ml 
proc 
acm sigplan conf 
prog 
lang 
design implementation pages 
acm press 
tarditi 
design implementation code optimizations type directed compiler standard ml 
phd thesis school computer science carnegie mellon university pittsburgh pa december 
tech report cmu cs 
wadler 
editorial hot opportunity 
journal functional programming 
wallach balfanz dean felten 
extensible security architectures java 
technical report cs tr princeton university department computer science princeton nj april 
