checking parallel real time systems linear duration properties zhao dang van hung united nations university international institute software technology box macau email iist unu edu 
major problem checking parallel composition real time systems real time property explosion untimed states time regions 
attack problem bisimulation equivalence property checked minimise system state space 
define equivalence integrated linear duration properties real time automaton networks shared variables 
avoid exhaustive state space exploration define compatibility relation direction simulation relation configurations 
technique develop algorithm checking real time automaton network shared variables linear duration property 
algorithm avoid exhaustive state space exploration significantly applied fischer mutual exclusion protocol 
years verification tools developed timed systems 
verification engines tools reachability analysis timed automata pioneering alur dill 
series techniques developed attack potential state explosions arising control structure region space 
efficient data structures algorithms sought represent manipulate timing constraints clock variables avoid exhaustive state space exploration 
show apply improve techniques class model checking problems real time systems 
linear duration properties kind simple duration calculus formulas system specifications real time automaton networks shared variables real time system models 
checking linear duration properties difficult leave department computer science university china 
email seg edu cn 
partly supported national nsf 
leave institute information technology tu hanoi vietnam 
durations states defined history systems 
problem solved real time automata real time automaton networks single process linear programming technique 
algorithm reducing problem finite set simple linear programming problems 
technique generalised verifying subset timed automata verifying parallel composition real time automata 
technique generalised verifying subset hybrid automata 
timed automata shown problem solved ones mixed integer linear programming techniques complicated 
algorithm developed checking duration bounded reachability asks run automaton start state target state accumulated duration system states satisfies constraint :10.1.1.29.8500
coefficients corresponding state durations restricted non negative integers 
consider problem network real time automata shared variables 
show linear duration property satisfied real time automaton network iff satisfied integer behaviours network 
define called compatibility relation configurations apply technique relation develop modelchecking algorithm real time automaton networks avoid exhaustive state space exploration cases 
apply technique fischer mutual exclusion protocol find technique results significant space reduction 
organised follows 
section real time automaton networks shared variables formally defined 
linear duration properties satisfaction network described section 
basic idea algorithm section 
section devoted verification fischer mutual exclusion protocol algorithm 
section 
real time automaton networks shared variables section give formal definition real time automaton networks shared variables behaviours 
nat denote set nonnegative integers denote set intervals nat 
definition 
real time automaton pair 
conventional automaton 
mapping assigns transition time interval ae ae ae integers ae express delay ae deadline transition state denote value max denoted ae ae empty word considered special transition real time automata 
shared variable fig 

real time automaton network shared variables definition 
real time automaton network shared variables real time automaton network short tuple 

finite set real time automata 
ai ai ai si ei 

vm finite set shared variables 
mapping 
en defined assigns transition automata boolean expression values shared variables 

en nat expresses values shared variables reset transitions transition takes place shared variable domain assigned value 
ranged generated grammar true stands shared variable stands integer constant 
guard evaluated true valuation iff equation appeared value vector xi denote ith element denote vector obtained replacing ith element definition 
real time automaton network 
untimed state dimensional vector local states si state ai 
configuration tuple untimed state dimensional vector nonnegative reals 
value ti expresses long automaton ai staying si valuation shared variables 
transition system real time automaton network described follows 
definition 
real time automaton network configurations 
define 
ei ei transition ai iff si ti 
iff ti configurations write ration iff exists 
configuration transition integer configuration satisfying denote configuration succ case exists 
execution network defined 
em dm dm cm cm initial configuration call timed sequence 
em tm tm behaviour corresponding execution cm final configuration ti dj 
configuration called integer configuration iff ti integer 
execution said integer execution iff ci integer configurations 
linear duration properties real time automaton network defined definition 
linear duration properties simple duration calculus formulas express requirements real time systems 
ldp linear inequality state durations form ci si si predicate untimed states ci real numbers ci called coefficient corresponding si si duration si 

em dm dm cm cm execution duration si system state si behaviour defined si du su untimed state cu su si 
ldp value evaluated denoted calculated ci si ci du csj dj csj sj ci sj untimed state cj definition 
ldp satisfied execution iff satisfied denoted iff satisfied executions example property time automaton stays state longer time stays state expressed ldp atb ata ata atb predicates untimed states ata ata atb atb algorithm properties real time automaton networks section ldp 
observation leading algorithm formulated lemma 
lemma 
execution integer execution lemma network satisfies ldp iff integer behaviours satisfy ldp 
fact check integer executions 
configurations behaviour starting simulated behaviour starting 
integer executions final configurations 
holds need consider right extensions 
order formalise idea introduce compatibility relation configurations follows 
definition 
configurations said compatible denoted iff holds ti ti ti ti si max ae si si max ae si 
local state means compatibility relation transitive reflexive 
lemma 
integer configurations implies arbitrary transition arbitrary integer arbitrary configuration configuration holds lemma means configurations behaviour starting simulated behaviour starting definition 
integer configurations equivalent denoted iff obvious equivalence relation furthermore finite index 
rn reachable integer configuration denote equivalence class containing lemma 
rn finite set 
weighted directed graphs fig 

weighted directed graph weighted directed graph real time automaton network corresponding ldp defined follows 
set nodes rn arc weight da node node iff exist transition configurations da max csd untimed state definition da may da integer csd da 
shows graph network initial node graph node containing initial configuration network 
definition algorithm enumerate successive nodes node configuration lc denote value min ti 
lc longest time network stay reaches configuration definition weighted graph lemma 
lemma 

am cm arbitrary path graph 
denote length dai 
em dm dm execution satisfying ci 

max 
max constant execution satisfying execution satisfying max algorithm lemma checking network satisfies ldp check path graph length greater depth method generate check paths starting initial node graph 
performs back tracking finds conditions holds node path 
new successive node generated 

previously checked path reaches length greater current length 
rue flg append new successive node flg alse delete element back tracking empty return rue paths generated checked flg configuration node max untimed state return alse prefix compatible configuration node return alse delete element back tracking add tuple delete tuples satisfying fig 

algorithm algorithm checking network satisfies ldp 
uses auxiliary variables variable record nodes reached previously checked paths length longest paths reaching 
variable record currently generated path 
algorithm procedure generate new successive node currently generated path returns alse node generated 
generates new node appends variable ranging set configurations flg boolean variable variable real 
currently generated path node 
prefix node 
repeat segment making value large 
ldp violated case 
tuple stored algorithm performs back tracking 
algorithm generates paths circle finite number paths 
algorithm terminates 
body algorithm written pascal language denotes initial node graph 
fischer mutual exclusion protocol case study implemented algorithm previous section language tried program fischer mutual exclusion protocol 
knowledge fischer protocol studied size example scaled increasing number processes protocol 
protocol guarantee mutual exclusion concurrent system consisting number processes clock constraints shared variable 
protocol modelled real time automaton network shared variable ith process identifier modelled real time automaton shown 
ai bi ci csi fig 

real time automaton ith process need verify formally moment process critical section 
requirement formalised linear duration property error error predicate untimed states error iff exist si csi sj csj 
running sparcstation mb primary memory program verified mutual exclusion property fischer protocol cases 

space requirements cases listed table requirements represented term number nodes generated stored algorithm 
seen space requirement nodes table 
space requirements checking fischer protocol algorithm space table 
space requirements checking fischer protocol uppaal case approximately times case run time requirement case minutes 
wellknown verification tool uppaal check fischer protocol processes state space exploration 
performance statistics data table shows adding new process space requirement uppaal rise times original 
similar results reported tool hytech 
algorithm check validity realtime automaton network respect linear duration property linear inequality integrated state durations 
attack state space explosion caused time constraints compatibility relation configurations introduced 
technique reduce space complexity algorithm 
shown cases fischer mutual exclusion protocol technique reduce space complexity significantly 
model simple believe idea applied models timed automata networks timed automata 

alur courcoubetis henzinger 
computing accumulated delays real time systems 
proceedings fifth conference computer aided verification lncs pages 
springer verlag 

alur dill 
automata modelling real time systems 
proc 
icalp lncs 

olivero tripakis yovine 
tool kronos 
hybrid systems iii verification control number lecture notes computer science 
springer verlag 

zhou hoare ravn 
calculus durations 
information processing letter pages 

zhou zhang yang lu li 
linear duration invariants 
research report unu iist box macau july 
published formal techniques real time fault tolerant systems lncs 

li xuan dong dang van hung 
checking linear duration invariants linear programming 
research report unu iist box macau may 
published jaffar roland yap eds concurrency programming networking lncs springer verlag dec pp 


li xuan dong dang van hung zheng tao 
checking hybrid automata linear duration invariants 
research report unu iist box macau june 
asian asian computing science conference december lncs 

francois kim larsen paul pettersson wang yi 
compositional proof real time mutual exclusion protocol 
proceedings tapsoft th international joint conference theory practice software development pages april 

kim larsen fredrik larsson paul pettersson wang yi 
efficient verification real time systems compact data structure state space reduction 
december 
accepted presentation th ieee real time systems symposium 
san francisco california usa 

kim larsen paul pettersson wang yi 
uppaal status developments 
orna grumberg editor proceedings th international conference computer aided verification 
haifa israel lncs pages 
springer verlag june 

henzinger 
ho wong toi 
users guide hytech 
technical report department computer science cornell university 

pham hong thai dang van hung 
checking regular class duration calculus models linear duration invariants 
technical report unu iist box macau july 
th conference mathematics hanoi sep 

yannakakis david lee 
efficient algorithm minimizing real time transition systems 
formal methods system design august 

kesten pnueli sifakis yovine 
integration graphs class decidable hybrid systems 
hybrid system number lncs pages 
