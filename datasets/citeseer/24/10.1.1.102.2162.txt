exact simulation integrate fire models synaptic conductances partement informatique ecole normale sup rieure rue ulm paris cedex france email di ens fr tel fax november computational neuroscience relies heavily simulation large networks neuron models 
essentially simulation strategies approximation method runge kutta spike times binned time step calculating spike times exactly event driven fashion 
large networks computation time best algorithm strategy scales linearly number synapses strategy assets constraints approximation methods applied model inexact exact simulation avoids numerical artefacts limited simple models 
previous focused improving accuracy approximation methods 
extend range models simulated exactly realistic model integrate fire model exponential synaptic conductances 
keywords integrate fire numerical methods spiking neurons eventdriven simulation increasingly large body evidence neurons spike timing matters 
neurons shown produce spike trains accuracy vitro sejnowski property shared large class spiking neuron models 
functional properties vivo neural networks rely precise synchronization neural discharges 
synaptic plasticity depends relative timing presynaptic postsynaptic spikes abbott nelson important functional implications song abbott 
spiking neuron models particular integrate fire model knight variants increasingly popular computational neuroscience gerstner kistler raised problem simulating efficient accurate way 
assuming chemical synapses considered consider electrical gap junctions neurons communicate spikes discrete events 
spiking neuron model describes transformation set input spike trains output spike train 
typically comprises set state variables membrane potential evolution governed set differential equations 
incoming spikes induce discrete changes state variables outgoing spikes triggered threshold condition 
simplest spiking model leaky integrate fire model instantaneous synaptic interactions described state variable membrane potential governed equation dv dt membrane time constant resting potential 
spike coming synapse time induces instantaneous change potential wi wi weight synapse spike triggered reaches threshold vt instantaneously reset vr 
complex models include conductances particular synaptic conductances dv dt wig tij es ij tij time th spike coming synapse es synaptic reversal potential unitary conductance triggered single spike 
simulating model requires store spike times biophysical models usually reformulated form spiking model described set differential equations spikes triggering discrete changes state variables 
example equation exponential conductances exp rewritten dv dt es dg dt spike coming synapse time tij triggers instantaneous change total synaptic conductance wi 
formulation storing spike times necessary transmission delays considered 
transformations kind applied reasonable synaptic models functions cases number state variables grows number synapse types number synapses lytton 
essentially strategies simulate networks spiking models integrating differential equations approximation method euler runge kutta advancing simulation fixed time steps communicating spikes boundaries steps simulating network exactly machine precision event driven way advancing simulation spike spike calculating spike times exactly 
exact mean results derived analytical formulas stored precision floating point representation machine symbolic computation 
exist hybrid strategies independent adaptive time stepping methods lytton hines discuss 
strategies perform similarly terms simulation time show section equivalent 
greatest asset approximation strategy applied model 
definition imprecise 
may relevant sight real neurons noisy numerical error equivalent random noise 
example hansel hansel showed networks spiking neurons fail display synchronization properties implemented naive euler runge kutta algorithm led improve better handling reset see shelley tao 
generally hard predict small errors spike times recurrent networks amplified create numerical artefacts remain irrelevant certainly important issue research purposes 
exact simulation obviously avoids problem results perfectly reproducible applies limited range models essentially models instantaneous interactions del best linear models synaptic currents makino 
purpose extend exact simulation realistic models non instantaneous synaptic conductances 
describe method simulate exactly common spiking model leaky integrate fire model exponential synaptic conductances membrane potential governed differential equation dv dt resp 
total excitatory resp 
inhibitory conductance relative leak conductance excitatory resp 
reversal potential 
conductances described sums spike triggered exponential conductances wi exp tij tij ij synaptic time constant 
constraint method excitatory inhibitory conductances synaptic time constant important limitation significantly advances boundaries exact simulation terms biophysical realism 
section analyze computational costs simulation strategies show large networks simulation time grows linearly number synapses 
describe method simulate exactly integrate fire models exponential conductances 
test settings single neuron spike time dependent plasticity excitatory inputs song random networks excitatory inhibitory neurons brunel conductances currents 
computational complexity network simulations order simplify analysis ignore problem managing transmission delays consider simulations single cpu 
analyze time required simulate second biological time network comprising neurons synapses neuron average firing rate analyzing separately simulation time strategies note algorithm operations second biological time network produces average spikes second needs sent target neurons 
computational cost algorithm linear number synapses 
approximation methods step dt typical approximation algorithm consists phases update state variables neurons updated integration method euler runge kutta neurons going spike identified threshold condition vt propagation spikes propagated targets neurons 
assuming number state variables grow number neurons synapses usually case see lytton cost update phase order step dt second biological time 
component grows complexity neuron models precision simulation 
second biological time average spikes produced neurons 
needs propagated target neurons propagation meaning changing state variables target neurons 
propagation phase consists spike propagations second 
essentially additions weights wi state variables simple operations cost grow complexity models 
summing total computational cost second biological time order update propagation cu dt cp cu cost update cp cost spike propagation typically cu higher cp implementation dependent 
dense networks total dominated propagation phase linear number synapses optimal 
practice phase negligible condition met cp cu dt example average firing rate cortex low hz olshausen field assuming synapses neuron dt ms get dt 
case considering operation update phase heavier propagation phase especially complex models cp cu dominate total computational cost 
appears networks realistic connectivity increases precision smaller dt detrimental efficiency simulation 
way get problem higher order integration methods allowing larger time steps comparable levels precision 
authors hansel shelley tao noticed integrate fire models discontinuity state variables spike time annihilates increase precision associated higher order integration methods second order runge kutta proposed correction reset solves problem 
considering additional cost negligible order correction simulations 
note imposes smoothness constraints models implies higher values cu 
exact simulation exact simulation networks spiking models fits general setting simulation discrete event systems 
implementations typically complicated approximate analogue established specific neural networks see 
ziegler 
describe step typical exact event driven algorithm follows 
determine event neuron going spike 
update state variables neuron 
propagate spike update state variables target neurons 
order determine event needs maintain ordered list events 
list contains time spike neuron 
spike times conditional fact spike received causality implies earliest spike time list valid 
terms data structure list priority queue 
event need extract highest priority item insert modify items queue 
exist data structures algorithms implement operations constant time example calendar queues brown 
similar ring buffers morrison fixed time step schematically events stored calendar queue agenda duration days change 
subdivide computational cost handling event follows updating neuron targets updates cost modulated model complexity updating spike times neurons cost modulated model complexity extracting highest priority event inserting events queue operations depends implementation priority queue 
spikes second biological time computational cost approximately proportional total computational cost second biological time written concisely follows update spike queue cu cs cq cu cost update state variables cs cost calculating time spike cq cost inserting event priority queue 
simulation time linear number synapses optimal 
note operations involved heavier propagation phase approximation methods see previous section multiplicative factor larger 
worst case exact simulation slower approximate simulation constant multiplicative factor outperform cases condition met 
advisable exact simulation possible 
exact simulation engines developed specifically spiking neural networks handle propagation delays complex network structures del martinez considerable effort devoted efficient management event queues lee del event handling algorithms parallelized see 
principle general clock driven simulation engines nest morrison handle exact simulation provided minimum transmission delay larger time step probably efficient dedicated event driven simulation engines may appreciate greater expressivity 
simulate particular neuron model exactly needs provide simulator functions function updates neuron incoming spike function updates neuron outgoing spike reset function gives time spike possibly provided values state variables 
far algorithms developed simple pulse coupled fire models delorme thorpe complex ones instances spike response model makino marian gerstner kistler realistic models synaptic conductances computational neuroscience 
exact calculations model conductances section describe functions required simulate fire model exponential synaptic conductances defined equations 
reformulate model standard spiking neuron model dynamic state variables 
calculate solution couple differential equations initial state 
describe method calculate time spike quick test check spike 
rewriting model start expressing equations spiking model described set autonomous differential equations incoming spikes triggering instantaneous changes state variables 
shall express time units membrane time constant origin time voltage relatively resting potential assume 
rewrite equation follows dv dt es es effective synaptic reversal potential defined es intervals spike es constant 
satisfy dg dt dg dt follows assuming spike es define total synaptic conductance 
rewrite model system differential equations dv dt es dg dt es instantaneously modified spike received 
reset conditions follow simple calculations spike received inhibitory synapse weight note order important es ges spike received excitatory synapse weight reaches threshold vt es ges vr 
reformulated integrate fire model exponential synaptic variable spiking model autonomous system differential equations incoming spikes triggering instantaneous resets 
sum reset conditions single condition signed weights spikes coming inhibitory synapses follows es ges 
solution differential equation equation express function follows dv dg ses exp log ses exp log dg integrating get exp sg exp sg ses es es exp sg dg sg sg dh sg sg dt non normalized incomplete gamma integral 
incomplete gamma integral fast computation algorithms implemented numerical libraries 
algorithm press 
recalling get exp sg sg es sg sg incomplete gamma integral developed power series xn dt gamma integral continued fraction 
appears expressions factorize define 
rewrite es sg sg sg es sg sg exp sg get sg sg sg sg get expression sg exp sg calculate value solution time efficiently 
turns power series converges rapidly continued fraction efficient 
sight may infinite series continuous fraction calculation heavy fact fundamentally different calculating exponential function 
terms necessary achieve accuracy close precision floating point representation 
possible precalculated tables exponential function incomplete gamma integral calculate expression 
linear interpolation obtain exact results 
tested accuracy formula calculated tables linear interpolation exponential function function precisely function sg sg 
results shown table conductances tabulated precision units leak conductance relative accuracy membrane potential order times better second order runge kutta rk method dt ms times better rk dt ms note timesteps lower ms slow simulation cf previous section 
certainly acceptable precalculated tables speed simulation keeping calculations exact 
speed factor computing compared series expansion relative precision 
spike test table situations time spike neuron ignoring incoming spikes time distribution membrane potential cortical networks usually displays approximately gaussian distribution centered far threshold see 

phenomenon appears clearly simulations see section 
describe algorithm quickly test neuron going spike 
assume es vt spike 
dynamics differential system membrane potential reaches threshold vt time completely determined initial condition 
model spikes initial condition initial condition 
minimal potential neuron spikes 
set points defines minimum spiking curve see fig 
neuron spikes state curve 
need calculate curve 
consider trajectory phase space solution starting 
definition solutions starting hit threshold solutions starting 
phase space dimensional trajectories cross 
follows trajectory hits threshold trajectory times conversely 
trajectory precisely minimum spiking curve trajectory tangent threshold vt trajectory hits threshold 
minimal potential solution differential equation dv dg ses dv dg threshold conductance threshold vt es es vt note fig 
solutions travel right left phase space 
spike solution hits threshold negative time minimal conductance spiking 
test trajectory membrane potential trajectory minimal potential need compare time threshold vt calculate value equation sg exp sg neuron spikes vt worst case algorithm takes time updating membrane potential 
cases simple checks es vt sufficient time example time random networks simulated section 
algorithm summed computation spike timing spike test positive need compute timing spike 
done high accuracy newton raphson method 
easily show potential increasing decreasing second derivative negative derivative cancels implies threshold crossings 
spike corresponds crossing increasing part trajectory 
part trajectory concave derive equation newton raphson method converges crossing correct 
iteration newton raphson method need evaluate membrane potential current approximation spike timing 
note evaluation incomplete gamma integral necessary time iterations 
numerical results show method converges quickly case 
shows extremely high accuracy reached just iterations 
considering situations see section simulation results spike timings computed percents events computing spike times expected small impact performance simulation 
summary functions exact simulation section indicated simulator needs functions simulate model exactly recall doing symbolic calculus exact understood orders magnitude accurate approximation methods discuss matter discussion 
sum results describe functions 
state neuron determined variables membrane potential total synaptic conductance effective synaptic reversal potential es 
variables evolve continuously spikes system differential equations 
variable reset spike produced threshold condition vt variables es updated spike received 
update incoming spike spike received signed weight synapse inhibitory time operations executed tl time update 
tl formula 
exp tl note calculation done updating 
es ges 


update outgoing spike spike produced time operations executed tl time update 
vr 
exp tl 
spike timing calculate time spike check algorithm summed fig 
finite neuron going spike spike timing computed newton raphson methods iterations formula guaranteed converge correct value 
simulations models simulated standard desktop pc general event driven simulator called developed olivier freely available www comp leeds ac uk 
code functions discussed available author web page www di ens fr papers nc htm 
give idea typical simulation times give figures coefficients formulas section complexity 
simulations cost cu update membrane potential approximately cu exact series expansion precision cu table precalculated tables cu rk second order runge kutta calculating timing spike cs cu spike test negative occurred time simulations see cs cu cu tables spike test positive 
cost queue insertion cq depends structure network obviously implementation priority queues fairly high network heterogeneous transmission delays 
example random network described software event management cq program spends time managing events delays 
case problem dealing transmission delays approximation method cp cq 
delays homogeneous drastic reduction computation time outgoing spike corresponding events inserted place queue 
single neuron model simulated scenario depicted song abbott fig 
consisting single integrate fire model receiving excitatory inputs synapses exponential conductances spike timing dependent plasticity fig 

synaptic input consists spike trains modeled poisson processes constant rate hz 
parameters integrate fire model mv vt mv vr mv ms synaptic conductances initially distributed uniformly units leak conductance 
synaptic time constant ms reversal potential es mv 
conductances evolve slowly spike time dependent plasticity described song abbott pair presynaptic postsynaptic spikes occurring times triggers synaptic change equal exp exp ms 
synaptic changes combine linearly synaptic conductances lie interval 
learning rule shown produce synaptic competition stabilization firing rates song abbott kempter 
ran model minutes biological time took minutes cpu time 
profiling heaviest operation computation spike timing times slower updating membrane potential 
suggested earlier operation executed rarely time neuron state spike receiving excitatory events 
time spike received time outgoing spike recalculated spike test positive spike algorithm described fig 

analyzed outcome spike test fig model described section 
neuron received spikes inducing spike test 
failed spike test cases meaning spike timing computed times 
computing spike times negligible component simulation time 
half cases quick spike test fig 
top executed 
accuracy minutes biological time distribution weights bimodal concentrated near bounds limiting interval expected fig 

distribution unchanged precalculated tables precision full expression formula 
individually weights slightly different seconds pearson correlation fig 
significantly different minutes fig 

weights flipped side side bimodal distribution 
minutes long time point view neuron corresponds membrane time constants received spikes observed discrepancy due fact model seen dynamical system chaotic unstable 
order test hypothesis tested effect changing initial conditions slightly original algorithm tables 
flipped initial weights ran simulation seed random number generator timings incoming spikes unchanged 
turns seconds weights differ original ones weights computed previously tables pearson correlation vs fig 

minutes weights differed significantly original ones way tables pearson correlation vs fig 
distribution weights remained unchanged fig 

interestingly minutes correlation weights obtained original algorithm precalculated tables unaffected precision tables precisions 
correlation weights obtained different precisions tables equivalent correlation weights obtained original algorithm 
conclude long term outcome simulation sensitive initial conditions increasing precision tables weights converge 
indicates system chaotic implies statistical measures meaningful 
note distribution weights reproduced precalculated tables initial phase simulation seconds individual weights follow original ones faithfully just initial weight modified 
random network model simulated network excitatory inhibitory neurons receiving external excitatory inputs connected randomly fig 
described brunel synaptic conductances currents 
neuron models parameter values model types synapses excitatory reversal potential mv weight units leak conductance inhibitory mv 
transmission delays included model picked random uniform distribution interval ms neuron received excitatory spike trains modeled poisson processes rate hz 
ran simulations lasting different configurations numbers excitatory neurons inhibitory neurons connection probability 
number synapses neuron ranged including external synapses average firing rates ranged hz hz 
sample spike trains produced shown fig 
profiling model analyzed outcome spike test fig 

average spike timing calculated events 
calculation spike timing heaviest operation small influence computational complexity simulation 
cases quick spike test executed 
simulation time spent updating state variables handling event queues 
scaling simulation time wanted check simulation time scales number events handled proportional cf section average firing rate number neurons number synapses neuron time simulation 
fig 
shows configurations simulated relationship simulation time total number events fitted line expected 
discussion shown exact simulation spiking neural networks eventdriven way fact restricted simple pulse coupled integrate fire models 
method simulate integrate fire models exponential synaptic conductances popular model computational neuroscience 
simulation time scales linearly total number events number spike transmissions algorithms integration methods euler runge kutta fact optimal algorithms 
medium sized networks exact simulation may faster approximation methods implementation dependent 
may argued call exact simulation means precise integration methods calculations involve series consider finite number terms spike timings calculated approximately newton raphson method 
principle true calculations really exact case precise floating point representation machine 
relevant distinguish called exact methods approximation methods time steps essential reasons 
error done neglecting tail series order error done euler runge kutta methods 
decreases exponentially number iterations decreases polynomially 
level precision reached method extremely high higher integration methods 
high precision approximations done routinely exponential logarithmic functions computer programs 
newton raphson method calculate spike times converges exponentially 

approximation methods types errors induced fact spike times constrained boundaries time steps 
example order spikes time step lost spikes glued 
cause problems investigating synchronization properties spike timing dependent plasticity 
errors arise exact event driven methods 
important difficulty event driven simulations introduce noise models 
shown vitro response cortical neurons realistic currents injected soma reproducible sejnowski large part noise come synapses input spike trains transmission failures 
reasonable way introduce noise event driven simulation add random input spikes neuron models 
song abbott introduce random failures inserting spike event queue 
important limitation algorithm time constants excitatory inhibitory synapses identical 
acknowledge restrictive significant progress biophysical realism exactly models 
able find analytical expressions membrane potential spike test model reduced differential system variables 
time constants excitatory inhibitory synapses different longer possible 
know definitely tricks 
possible track investigation series expansion solutions differential equations 
mention directions efforts extend range models simulated exactly integrate models soft threshold quadratic ermentrout kopell exponential realistic leaky integrate fire model dimensional fire models account adaptation liu wang resonance richardson 
olivier michael rudolph fruitful discussions 
abbott nelson 
synaptic plasticity taming beast 
nat neurosci suppl 

reliability spike timing general property spiking model neurons 
neural comput 
brown 

calendar queues fast priority queue implementation simulation event set problem 
commun 
acm 
brunel 

dynamics sparsely connected networks excitatory inhibitory spiking neurons 
comput neurosci 


stochastic method predict consequence arbitrary forms spike timing dependent plasticity 
neural comput 
brown chad 
discrete simulation large aggregates neurons 
neurocomputing 
marian reilly 
approaches efficient simulation spiking neural networks 
wspc 
delorme thorpe 
spikenet event driven simulation package modelling large networks spiking neurons 
network 
sejnowski 
efficient method computing synaptic conductances kinetic model receptor binding 
neural comput 
rudolph sejnowski 
fluctuating synaptic conductances recreate vivo activity neocortical neurons 
neuroscience 
ermentrout kopell 
parabolic bursting excitable system coupled slow oscillation 
siam appl math 
hansel van vreeswijk brunel 
spike generation mechanisms determine neuronal response fluctuating inputs 
neurosci 
gerstner kistler 
spiking neuron models 
cambridge university press 

distributed event driven simulation spiking neural networks 
proceedings international icsc ifac symposium neural computation nc pp 

icsc academic press 
hansel meunier 
numerical simulations integrate fire neural networks 
neural comput 
kempter gerstner van hemmen 
intrinsic stabilization output rates spike hebbian learning 
neural comput 
knight 

dynamics encoding population neurons 
gen physiol 


recherches sur excitation des comme une 
physiol gen 
lee 
double queue method numerical method integrate fire neuron networks 
neural netw 
liu wang 
spike frequency adaptation generalized leaky integrate fire model neuron 
comput neurosci 
lytton 

optimizing synaptic conductance calculation network simulations 
neural comput 
lytton hines 
independent variable time step integration individual neurons network simulations 
neural comp 

sejnowski 
reliability spike timing neocortical neurons 
science 
makino 

discrete event neural network simulator general neuron models 
neural comput applic 
marian reilly mackey 
efficient event driven simulation spiking neural networks 
proceedings rd international conference neural networks applications 
del 
efficient event driven simulation large networks spiking neurons dynamical synapses 
neural comput 
morrison 
advancing boundaries high connectivity network simulation distributed computing 
neural comput press 
olshausen field 
close understanding 
neural comp 

press flannery teukolsky vetterling 
numerical recipes art scientific computing 
cambridge university press 
richardson brunel hakim 
subthreshold firing rate resonance 
neurophysiol 

martinez 
event driven framework simulation networks spiking neurons 
proc 
th european symposium artificial neural networks 
shelley tao 
efficient accurate time stepping schemes integrate fire neuronal networks 
comput neurosci 
song abbott 
cortical development remapping spike timing dependent plasticity 
neuron 
song miller abbott 
competitive hebbian learning spike timing dependent synaptic plasticity 
nature neurosci 
smith laurent 
impaired discrimination desynchronization encoding neural assemblies 
nature 
ziegler praehofer kim 
theory modeling simulation 
second edition 
integrating discrete event continuous complex dynamic systems 
academic press 
table figures table accuracy calculation precalculated tables formula second order runge kutta method rk ms 
initial potential picked random uniform distribution normalized potential initial conductance picked uniform distribution 
mean standard deviation calculated iterations 
chose ms ms levels precision tables column conductance units conductance leak time units membrane time constant second column conductance time 
true value calculated series formula incomplete gamma integral relative precision runge kutta method time step ms ms speed indicated number operations second 
individual update operations times faster runge kutta method quasi exact method tables 
computation spike timings 
minimal potential spiking function synaptic conductance see text 
solution hits threshold spike 
vt es 
time goes right left decreases time 
summary spike test algorithm 
number iterations spike timing computation function accuracy 
initial potential picked random uniform distribution normalized potential initial conductance picked uniform distribution chose values high guarantee spiking 
mean variance calculated iterations dashed lines represent mean standard deviation 
accuracy calculated potential axis computed spike time accuracy threshold 
simulation integrate fire model spike time dependent plasticity 
architecture model see details text 
statistics outcome spike test cf fig 
distribution weights minutes simulation 
white precalculated tables black tables precision stripes original algorithm initial weight flipped see text 
black weights obtained seconds precalculated tables vs weights tables 
grey weights obtained seconds tables initial weight flipped vs weights tables weights 
minutes 
simulation random networks excitatory inhibitory neurons 
architecture model see details text 
statistics outcome spike test cf fig 
sample spike trains produced network ms simulation time function total number events spikes transmissions different configurations network 
table table rk ms rk ms accuracy speed hz accuracy speed table 
