order encryption authentication protecting communications secure ssl 
hugo krawczyk 
study question generically compose symmetric encryption authentication building secure channels protection communications insecure networks 
show secure channels protocol designed combination secure encryption chosen plaintext attacks secure mac encrypt authenticate method 
demonstrate showing common methods composing encryption authentication including authenticate encrypt method ssl generically secure 
show example encryption function provides shannon perfect secrecy combined mac function authenticate encrypt method yields totally insecure protocol example finding passwords credit card numbers transmitted protection protocol easy task active attacker 
applies encrypt authenticate method ssh 
positive side show authenticate encrypt method secure encryption method cbc mode underlying secure block cipher stream cipher xor data random pseudorandom pad 
show generic security ssl broken current practical implementations protocol modes encryption safe 
widespread application cryptography internet days implementing secure channel points exchanging information channel 
typical implementations call key exchange protocol establishing shared key parties key authenticate encrypt transmitted information efficient symmetric key algorithms 
popular protocols follow approach ssl tls ipsec ssh 
particular ssl protect myriad passwords credit card numbers sensitive data transmitted web clients servers secure applications 
ipsec standard establishing secure channel ip entities protecting information network layer 
full version 
ee department technion haifa israel 
email hugo ee technion ac il said protocols apply symmetric authentication mac encryption transmitted data 
interestingly popular protocols chosen different way combine authentication encryption 
describe methods message enc symmetric encryption function auth message authentication code denotes concatenation notation secret keys algorithms implicit ssl auth enc transmit ipsec enc auth transmit ssh enc auth transmit 
refer methods authenticate encrypt abbreviated ate encrypt authenticate eta encrypt authenticate respectively 
disparity choices reflects lack consensus cryptography security communities right way apply functions 
right way equally secure 
clearly answer question depends assumptions encryption authentication functions 
protocols usually built cryptographic functions replaceable modules useful form question obtained considering functionalities encryption authentication generic cryptographic primitives defined independent properties 
want properties commonly achieved known efficient methods symmetric encryption authentication expected exist practical realizations functions 
specifically consider generic mac functions secure chosen message attacks generic symmetric encryption functions secure attacks 
security properties common notions model security cryptographic primitives 
particular security authentication function allows mac protocols independently encryption cases integrity protection required secrecy 
encryption chosen plaintext security common property encryption modes designed analyzed 
note stronger property encryption resistance chosen ciphertext attacks property important active attacks prevalent modes symmetric encryption stream ciphers cbc mode underlying block cipher chosen ciphertext secure assuming strong property basic secrecy requirement encryption function exclude standard efficient mechanisms 
just studying ways composing encryption authentication stand composed primitive focus comprehensive question methods provide truly secure communications secrecy integrity embedded protocol runs real adversarial network setting links controlled attacker parties running protocol may corrupted multiple security sessions run simultaneously maliciously interleaved 
results 
canetti krawczyk describe model secure channels encompasses initial exchange key pairs communicating parties resultant shared key application symmetric encryption authentication transmitted data 
requirements secure channels model include protecting data integrity sense simulating ideally authenticated channels secrecy sense plaintext indistinguishability presence network attacker powerful realistic abilities type mentioned 
main result key shared securely applying data encrypt authenticate method achieves secure channels provided encryption function semantically secure plaintext indistinguishable chosen plaintext attack authentication function mac resists chosen message attacks 
provides important answer questions raised proves encrypt authenticate generically secure method implementing secure channels 
results 
complement result authenticate method contrasting results methods 
generic insecurity ate 
show authenticate method ssl generically secure sole assumption encryption function secure chosen plaintext attacks mac secure chosen message attacks 
show example simple encryption function enjoys perfect sense shannon secrecy chosen plaintext attacks combined ate method mac perfect results totally breakable implementation secure channels 
illustrate insecurity resultant scheme show passwords credit card numbers transmitted method easily discovered active attacker modifies information links 
major issue highlight attack authenticity information secrecy 
result particularly unfortunate case ssl protection form sensitive information common uses protocol 
generic insecurity example demonstrate insecurity encrypt authenticate method ssh attack consequences possible 
worth noting obviously insecure uses mac function leaks information data 
attack shows method generically secure assumes stronger mac function secrecy properties commonly practice mac realized pseudorandom family mac tag encrypted 
security ate specific encryption modes 
bring just bad news 
show authenticate encrypt method secure common forms encryption cbc mode underlying secure block cipher stream ciphers xor data random pseudorandom pad 
provide near optimal quantified security analysis methods 
positive results resolve generic weakness authenticate encrypt method ssl show common implementations currently result secure channels protocol 
conjunction results show quite complete picture security lack security methods 
point important secure channels protocol designed combination secure encryption chosen plaintext attacks secure mac encrypt authenticate method 
hand protocols authenticate encrypt method encryption stream cipher cbc modes safe 
note fragility statement simple seemingly innocuous changes encryption function including changes influence secrecy protection provided encryption considered stand primitive fatal security implemented channels 
illustrated example perfect cipher sole simple encoding encryption compromises security transmitted data case cbc encryption join encryption message mac results secure protocol separate encryption elements insecure 
non generically secure method careful changes existing functions new encryption mechanisms mechanisms secure stand functions 
open question 
results demonstrate chosen plaintext security sufficient condition encryption scheme guarantee secure encrypt composition mac secure 
interesting open question find stronger property enjoyed common modes encryption time sufficient ensure security authenticate method combined secure mac 
note looking property significantly weaker chosen ciphertext security achieved symmetric encryption modes results show condition really necessary 
related 
interaction symmetric encryption authentication fundamental issue design cryptographic protocols question received surprisingly little explicit attention cryptographic literature 
contrast year seen significant amount dealing related questions 
mentioned canetti krawczyk establishes security encrypt authenticate method building secure channels 
result extensions basis derive positive results 
particular borrow formalization notion secure channels short outline model section reader referred directly missing details 
independent deals directly ordering generic encryption authentication bellare 
study forms composition focus properties composed function stand composed primitive context application secure channels 
main contribution providing careful quantitative relations reductions different methods security notions related forms composition 
results insufficient general claiming security demonstrating insecurity channels methods protecting data 
example show authenticate encrypt necessarily cca secure turns results lack property reason consider insecure channels method specific non cca example provide secure channels 
demonstrates consideration secure channels requires finer treatment question encryption authentication composition see discussion section 
particular results claimed implied 
related subject received attention construction encryption modes provide integrity addition secrecy 
katz yung suggest mode operation block ciphers provides functional combination analysis independent interest introduce notion unforgeable encryption 
similar notion introduced called integrity ciphertexts int ctxt 
notion see section tool proofs 
bellare study redundancy functions secret keys method adding authentication encryption functions 
show positive negative results type redundancy functions required combination different forms encryption security notions 
results concerning authenticate method stream ciphers cbc modes contribute research direction results provide sufficient necessary conditions redundancy functions viewed mac functions required providing integrity important modes encryption 
particular interest proof secure ate composition uses cbc encryption requires strong underlying mac contradicts common intuition message mac encrypted weaker redundancy functions replace mac 
jutla devised elegant cbc scheme provides integrity little cost traditional cbc method parallel mode encryption integrity guarantee related scheme 
note schemes efficiently implement secure channels provide secrecy authenticity generic schemes encrypt authenticate design analysis advantages due modularity fact encryption authentication components designed analyzed replaced independently 
particular generic schemes allow faster implementations specific ones today combination fast stream ciphers fast mac function encrypt authenticate method result faster mechanism proposed requires block ciphers 
having separate mac encryption allows efficient authentication cases secrecy required 
preliminaries informally outline known notions security mac encryption functions introduce notation 
formal treatment notions 
sketch model secure channels 
secure message authentication 
functions provide way verify integrity information example unauthorized changes communications network shared secret key called mac message authentication codes 
notion mac security definition understood 
outline main ingredients definition 
mac scheme described family deterministic functions domain range 
usually assume domain range fixed size 
key shared parties mac scheme determines specific function family 
specific function compute authentication tag transmitted message tag appended message 
recipient information knows mac key re compute tag received message compare received tag 
security mac scheme defined inability attacker produce forgery generate message transmitted legitimate parties valid authentication tag 
formal definition security provides attacker access mac oracle omac input message outputs authentication tag corresponding message 
oracle uses responses key generated probability distribution keys defined mac scheme 
attacker succeeds interaction oracle able find forgery message previously queried 
quantify security say mac scheme security em attacker works time asks queries omac involving total bits probability em produce forgery 

case mac functions randomized ones may multi valued valid tags message extend definition security follows 
messages queried omac 
xq responses omac 
tq forgery output attacker considered valid xi ti 

consider attacker successful case forgery includes queried message long tag generated oracle message 
technical strengthening definition results 
notion appears due similar reasons 
secure symmetric encryption develop formal definition encryption security subject established treated extensively literature 
summarize informally main aspects security notions symmetric encryption relevant establish notation 
formal precise definitions see mentioned 
encryption scheme triple probabilistic algorithms keygen enc dec keygen defines process resultant probability distribution keys generated enc dec encryption decryption operations usual inverse properties 
simplify notation enc denote encryption operation representing scheme triple 
main notion common definitions security encryption semantic security usually equivalent formulation plaintext indistinguishability 
formulation attacker scheme enc target ciphertext candidate plaintexts enc xi 
encryption scheme indistinguishability property attacker guess right value probability significantly better 
security scheme quantified time invested attacker probability guess correctly 
describes goal attacker ways attack allowed 
common models attack cpa chosen plaintext attack cca chosen ciphertext attack 
attacker access encryption oracle plaintexts receive ciphertexts resulting encryption plaintexts 
second model attacker addition queries encryption oracle ask decryptions arbitrary ciphertexts target ciphertext decryption oracle 
note key responses key target ciphertext described produced 
cases queries oracles generated adaptively attacker function previous responses oracles target ciphertext candidate plaintexts target ciphertext computed chosen attacker 
formulations new parameters enter quantification security number queries number queries case cpa 
finer quantification consider total number bits queries 
customary denote notions encryption security ind cpa ind cca 
extensive treatment notions notation denote element chosen uniform probability set works respectively 
notion strongly related ind cca non malleability ciphertexts directly weaker notion cca security introduced earlier 
note concerned symmetric encryption asymmetric encryption shares aspects important differences particular asymmetric case encryption oracles meaningless encrypt plaintext 
secure channels order claim positive results certain combination encryption authentication provides secure communications need define meant secure communications 
model secure channels introduced canetti krawczyk intended capture standard network security practice communications public networks protected sessions pairs communicating parties session consists stages 
parties run key exchange protocol establishes authenticated secret session key shared parties 
second stage session key symmetric key cryptographic functions protect integrity secrecy transmitted data 
formalism involves definition key exchange protocol implementation session key establishment stage functions snd rcv define actions applied transmitted data protection insecure links 
protocol follows formalism called network channels protocol security defined terms authentication secrecy 
notions defined context communications controlled attacker full control information sent links capability corrupting sessions parties 
refer full version full description adversarial model security definitions 
mention briefly main elements definition concerning functions snd rcv 
function snd represents operations transformations applied message sender order protect adversarial action communication links 
message transmitted party party session established parties function snd applied possibly additional information message identifier 
definition snd typically consists application combination mac symmetric encryption keyed session key 
function rcv describes action receiving decoding verifying incoming messages typically involves verification mac decryption incoming ciphertext 
roughly speaking define authentication achieved protocol message decoded accepted valid receiving party session sent partner session 
modification messages produced attacker communications links including injection replay messages detected rejected recipient formalized emulation ideally authenticated channel 
secrecy formalized tradition semantic security messages exchanged session attacker chooses pair test messages sent attacker goal guess sent 
security obtained attacker guess correctly probability significantly greater 
network channels protocol called secure channels protocol achieves authentication secrecy sense outlined 
focus way functions snd rcv defined achieve secure channels provide authentication secrecy presence attacker 
say combinations eta ate implements secure channels specification snd rcv functions resultant protocol secure channels protocol 
note concerned specific key exchange mechanism assume secure key exchange protocol may assume ideally shared session key 
cuf cpa ciphertext unforgeability addition traditional notions security encryption scheme outlined section notion security call ciphertext unforgeability 
similar notion independently called existential unforgeability encryption integrity ciphertexts int ctxt respectively 
enc symmetric encryption scheme key enc 
set plaintexts defined set ciphertexts note enc deterministic mean run enc outputs 
call set valid ciphertexts key example block cipher strings block length valid ciphertexts basic cbc mode strings multiples block length valid ciphertexts 
assume decryption oracle outputs special invalidity symbol queried invalid ciphertext outputs unique decrypted plaintext 
say encryption scheme ciphertext unforgeable denote cuf cpa infeasible attacker called ciphertext forger access encryption oracle key produce valid ciphertext generated response queries precisely quantify ciphertext unforgeability function eu defined maximal probability success ciphertext forger queries plaintexts totalling bits spends time attack 
stress definition involve access decryption oracle name cuf cpa consistent common notations form represents goal attacker assumed abilities attacker 
main cuf cpa notion proving see section certain conditions ate composition secure implements secure channels 
notion cuf cpa sufficient purposes stronger needed 
example scheme enc allows arbitrary padding ciphertexts length boundary multiple bits cuf cpa ciphertext padded bits change bits result different valid ciphertext 
scheme may perfectly secure context implementing secure channels see schemes type common practice 
order avoid artificial limitation schemes identify secure implementing secure channels relaxation cuf cpa notion sufficient purposes stress necessarily weakest relaxation purpose weakenings cuf cpa notion possible 
polynomial time computable relation pairs ciphertexts computed encryption function enc property implies decrypt plaintext 
say encryption scheme enc cuf cpa valid ciphertext attacker feasibly produce exists ciphertext output encryption oracle 
relation explicitly described refer notion loose ciphertext unforgeability 
instance example scheme allows arbitrary padding ciphertexts defines hold differ padding bits scheme achieve cuf cpa 
note cuf cpa implies cca security loose cuf cpa padding example shows 
pointed see section cca security necessary condition mac encryption combination implement secure channels 
generic composition encryption authentication section study security methods eta ate generic symmetric encryption mac functions assumption encryption ind cpa mac secure chosen message attacks 
focus appropriateness methods provide security transmitted data realistic setting adversarially controlled networks 
words interested methods applied adversarially controlled communication channels achieve goals information secrecy integrity 
see encrypt method generically secure 
known security encrypt authenticate results subsection briefly completeness 
refer reader details 
particular statement theorem notion secure channels introduced sketched section 
theorem 
enc symmetric encryption scheme secure sense ind cpa mac secure mac family method eta enc mac implements secure channels 
terminology section meaning theorem network channels model applies transmitted message composed function eta enc mac snd function secrecy authenticity resultant network channels guaranteed 
precisely proving theorem specify snd function follows 
pair computationally independent keys derived session key 
transmitted message unique message identifier id chosen sequence number 
function snd produces triple id enc mac id 
incoming message rcv function verifies uniqueness message identifier validity mac tag computed checks succeeds decrypted key resultant plaintext accepted valid message 
main contribution showing see subsections generic result theorem hold methods ate keys shared perfect security 
secure channels protocol designed combination secure encryption chosen plaintext attacks secure mac encrypt authenticate method 
note section theorem extended setting method ate assumes stronger property encryption function particular show important cases satisfy added security requirement 

note authentication ciphertext provides plaintext integrity long encryption decryption keys sender receiver respectively 
key synchrony implicit analytical models key mismatch happen practice 
system concerned detecting cases check plaintext redundancy information redundancy exists applications message formats non cryptographic checksums 
redundancy entropy significant key mismatch corrupt redundancy high probability 
authenticate encrypt generically secure show authenticate encrypt method ate enc mac guaranteed secure implementing secure channels function enc ind cpa mac provides message unforgeability chosen message attacks 
discuss shortly result follow shown ate composition viewed encryption scheme necessarily provide ind cca 
reason simple protocols synchronized counter message identifier ssl need transmit value include mac computation verification 
transmitted identifiers encrypted enc needed verifying mac value decryption applied 
demonstrated ind cca necessary condition combination encryption mac functions implement secure channels 
example provided main construction secure channels see theorem mac scheme enjoys regular mac security strengthened notion described section construction guarantees secure channels necessarily cca security 
example mac function property flipping bit authentication tag change validity tag scheme ind cca suffices implementing secure channels 
similar example see multi valued mac theorem 
specific example non cca ate enc mac scheme show example non cca scheme provably provides secure channels 
result say suitability ate enc mac implementing secure channels points fact cca security useful security notion certainly strong fundamental applications secure channels 
want establish insecurity authenticate encrypt channels generic composition need show explicit example successful attack 
provide example 
example encryption scheme ind cpa enjoys perfect secrecy sense shannon combined mac function ate method secrecy composed scheme breaks completely active attack 
encryption function enc start defining encryption scheme enc stream cipher enc encryption function uses random pseudorandom pad xor data 
scheme enc preserves ind cpa security underlying scheme enc 
particular enc perfect secrecy uses perfect time pad encryption enc define enc bit plaintext enc applies encoding bit string obtained representing bit xi 
bits follows 
bit xi pair bits 
bit xi pair bits arbitrary choice encrypting party 
set set encryption function enc applied decrypting enc applies decryption function enc obtain decoded mapping pair pair 
contains pair equals decoding outputs invalidity sign 
attack encryption 
sake presentation assume enc applied transmitted data treat ate case mac applied data encryption 
just append arbitrary bit pad ciphertext discard bit decryption 
case attacker sees transmitted ciphertext enc learn bit follows 
intercepts flips bits sends modified ciphertext destination 
obtain information decryption output valid invalid plaintext learns bit easily seen modified valid 
remember stream cipher encrypt clearly breaks secrecy channel note described attack applied bits plaintext 
question arises realistic assume attacker learns validity invalidity ciphertext 
answer practical applications show observable change behavior ciphertext invalid particular applications return error message case 
point clearer consider protocol transmits passwords uses enc protect passwords network example common uses ssl 
attack applied bits password assume attacker knows placement password field transmitted data follows 
attacked bit password authentication succeed spite change ciphertext 
password authentication fail 
case success failure reported back remote machine learned attacker 
applications password multiple times applications protected ssl attacker learn password bit 
applied sensitive information credit card numbers mistake number usually reported back validity invalidity information learned attack ate enc mac scheme 
consider case interest encryption applied just data mac function computed data 
attack applies 
answer 
mac applied data encoding encryption original bit change ciphertext result decrypted plaintext mac check succeed 
similarly original bit decrypted plaintext mac fail 
attacker needs information mac succeeded 
note sense mac just things worse regardless semantics application failure authentication easier learn attacker returned error messages effects application observed attacker 
discussion learned 
example enc certainly sufficient show method ate insecure encryption function ind cpa secure mac unforgeable note depend specific formalization secure communications reasonable definition security label protocol insecure 
wants claim security ate enc mac particular functions enc mac needs analyze combination stronger specific properties encryption function see section 
interesting issue plausible people encryption scheme enc note scheme appear natural encryption mechanism equally insecure variants may arise practice 
application encoding plaintext encryption times padding purposes particularly common practice public key encryption algorithms 
second encodings type motivated stronger security requirements prevent attacker learning exact length transmitted messages traffic analysis information 
case encoding similar enc variable size codes 
just point note example traffic analysis arises examples attacker lot learn error reporting messages cases information encrypted usually learned analysis packet lengths setting plaintext encoding introduced order improve security combating timing power analysis attacks 
bottom line highly desirable schemes robust generic composition vulnerable seemingly innocuous changes algorithm new secure efficient algorithm mode adopted encrypt authenticate generically secure observation regarding encrypt authenticate method common requirements mac function method guarantee protection secrecy passive eavesdropper 
mac secure forgeries leak information plaintext 
really interesting question method secure avoid obvious weakness secrecy protecting mac implemented pseudorandom function mac tag encrypted mac functions practice believed protect secrecy 
unfortunately attack previous section applies showing generic insecurity method stronger forms mac 
see section authenticate encrypt cbc otp modes section saw authenticate encrypt guarantee secure channels sole assumption encryption function ind cpa mac function perfectly secure 
section prove common modes encryption cbc secure underlying block cipher otp stream ciphers xor data pseudo random pad ate mode implementing secure channels 
see section example seemingly harmless changes transform secure protocol insecure 
sufficient condition security ate start pointing theorem proven security model see section 
theorem 
derived enc ind cpa encryption function mac mac function 
composed function ate enc mac considered encryption scheme loose cuf cpa ate enc mac implements secure channels 
assumptions enc mac functions stated theorem applying function ate enc mac information transmitted adversarially controlled links protects secrecy integrity information 
specifically theorem implies definition function snd network channels model see section 
transmitted message unique message identifier id function snd produces pair id enc mac id keys computationally independent keys derived session key 
incoming message rcv function verifies uniqueness message identifier decrypts key verifies validity decrypted mac tag tests succeed recipient accepts decrypted message valid 
note message identifier maintained synchrony sender receiver ssl need send value network 
hand sent message identifier encrypted 
theorem holds case 
stress theorem holds strict cuf cpa relaxed loose version see section 
theorem fact otp cbc ind cpa prove security ate otp cbc showing case resultant ate scheme cuf cpa 
rest section devoted prove facts 
ate otp otp scheme 
family functions domain range define encryption scheme ot messages length follows 
key encryption scheme description member family otp encryption plaintext performed choosing computing truncated length ciphertext pair 
decryption works obvious way 
set functions domain range chosen random family get perfect secrecy chosen plaintext attacks long repetitions values chosen encryptor encrypting different messages repetition happens probability denote scheme otp 
family pseudorandom functions security achieved computational sense indistinguishability distance pseudorandom family truly random function 
formal exact security treatment mode encryption 
ate otp mac composition 
mac mac family bit outputs key member family 
random function domain range defined 
ate otp mac function acts follows receives input message length ii computes mack iii appends iv outputs otp encryption concatenated message 
theorem establishes cuf cpa security ate otp mac function security em mac 
theorem 
mac mac family resists query attacks ate otp mac cuf cpa theorem implements secure channels 
precisely ciphertext forger ate otp mac runs time success probability eu em parameter otp number queries attack upper bound length query length output forgery constant proof theorem see 
standard techniques show theorem holds otp scheme realized family pseudorandom functions add probability bound distinguishability distance pseudorandom family truly random function 
component eliminated uses non repeating nonces random counter mode stateful pseudorandom generator generate pseudorandom pad 
tightness query resistance necessary 
example mac resist queries valid ciphertext forged ate otp mac 
assume mac allows finding length messages mac tag 
example mac zeros bit message applies secure mac function resultant message 
mac resists zero queries fails queries ask mac message forge message bit flipped 
strategy ciphertext forger ate otp mac find pair messages 
queries gets ciphertext 
outputs forgery obtained xor ing bits easy see decrypts mac 
multi valued mac 
section strengthened regular security definition mac function case function allows different valid authentication tags message 
extended explicitly proof theorem essential ensuring cuf cpa property ate otp mac 
see mac secure single valued mac function define mac mac additional arbitrary bit appended authentication tag 
verification procedure just ignore bit 
easy see case ate otp mac cuf cpa 
examines proof theorem seen ate otp mac achieves loose cuf cpa see section sufficient implementing secure channels care 
dispense strengthened notion mac multi valued macs 
answer 
possible build multi valued function mac satisfies regular mac definition strengthened version ate otp mac insecure building secure channels see 
sufficiency redundancy functions 
bellare investigate question simple redundancy functions combinatorial hash functions applied plaintext encryption suffice providing ciphertext unforgeability 
case ate otp natural assume simple combinatorial property redundancy function suffice 
particular property sufficient considers plaintext integrity output redundancy function encrypted otp scheme 
turns true case ciphertext unforgeability 
show example balanced mac family ate otp mac cuf cpa 
plausible involved combinatorial property involving length messages mac function suffice guarantee ciphertext unforgeability case ate otp 
interesting note authentication tag positioned message defined property sufficient assuming fixed length single valued valid authentication tags 
beware slight changes 
highlight fragility result theorem note proof theorem uses essential way fact encryption applied concatenated message mac tag 
encrypt values separately separate ivs encryption message mac truly random function get cuf cca security 
significantly separate encryption results insecure channels 
method active attacker get learn transmitted messages possibly different message identifiers clearly unwanted secure protocol 
weakness allows actual attacks practical applications particular forms dictionary attacks addition observation shows weakness encrypt method section exhibits insecurity method standard stream cipher encryption mac tag encrypted 
example finding passwords sent telnet protocol protocol run secure channel protected particularly facilitated fact case individual password characters transmitted separately dictionary attack mounted individual characters 
ate cbc cbc scheme 
positive integer family permutations define encryption scheme cbc messages length multiple 
key encryption scheme description member family cbc encryption plaintext performed partitioning blocks 
length choosing called iv computing ciphertext 

decryption works obvious inverse way 
set permutations chosen random denote scheme cbc 
formal exact security treatment mode encryption particular prove ind cpa case pseudorandom family case security depends indistinguishability distance pseudorandom family truly random function 
ate cbc mac composition 
mac mac family bit outputs key member family 
random permutation ate cbc mac function acts follows receives input message length multiple ii computes mack iii appends iv outputs cbc encryption concatenated message note resultant output blocks longer due added block prepended iv 
theorem establishes cuf cpa security ate cbc mac function security em mac 
theorem 
mac secure mac family ate cbc mac cuf cpa theorem implements secure channels 
precisely ciphertext forger ate cbc mac runs time success probability eu em em number plaintexts queried upper bound number blocks queries length blocks forgery output min total number blocks responses queries plus constant proof theorem see 
standard techniques show theorem holds cbc scheme realized family pseudorandom permutations add probability bound distinguishability distance pseudorandom family truly random function 
note case distinguisher gets access oracle computes function oracle computes inverse function need assume family permutations super pseudorandom 
tightness necessity bound em 
expensive term mac security expression theorem value em terms require protection query 
attacker get see mac values wonder strong security mac required 
show contrast ate otp mac case requirement unavoidable 
specifically example mac function mac secure queries yields insecure ate cbc mac scheme 
describe example extension values straightforward 
gk family pseudorandom functions define mac family mac domain gk bit outputs follows mac gk gk gk 
define second mac family mac uses set keys mac key 
input contains bit blocks bi bj bi bj property applying gk half block yields second half block output bi mac value 
output mac easy see defined mac security roughly single queries totally insecure queries output mac provides block format authentication tag trivial 
show yields ate cbc mac scheme ciphertexts queries encryption permutation purely random 
ciphertext forger ate cbc mac proceeds follows 
choose arbitrary block long plaintexts queries 

responses triples mac mac 

output forgery 
simple examination shows valid ciphertext 
consequence lower bound required security mac somewhat surprisingly mac function replaced simple combinatorial hash function enjoying see redundancy functions section 
sufficient query resistant macs suffice query resistance implies 
note modified cbc mode sufficient 
contrast lower bound know term bound theorem necessary far example shows term unavoidable 
may case careful analysis lower factor current analysis possible replace factor slightly involved argument 
non adaptive security mac suffices 
interesting note requirement security mac theorem non adaptive queries 
seen inspecting proof theorem mac forger build non adaptive queries 
beware slight changes 
similarly case ate otp mac proof theorem uses essential way fact encryption done concatenated message mac 
easy build ciphertext forgery attack case encryption plaintext mac tag done separately independently chosen ivs 
acknowledgment yaron scheffer motivating conversations topic forcing find explicit counter example ate method yaron helped simplifying previous example 
mihir bellare interesting conversations highlighting subtleties related subject ran canetti jonathan katz valuable comments earlier drafts 
research supported irwin green detroit chapter career development chair fund promotion research technion 

bellare encryption redundancy provide authenticity advances cryptology eurocrypt proceedings lecture notes computer science vol 
springer verlag pfitzmann ed 

bellare desai rogaway concrete security treatment symmetric encryption analysis des modes operation proceedings th symposium foundations computer science ieee 

bellare desai pointcheval rogaway relations notions security public key encryption schemes advances cryptology crypto proceedings lecture notes computer science vol 
krawczyk ed springer verlag pp 


bellare kilian rogaway security cipher block chaining advances cryptology crypto proceedings lecture notes computer science vol 
desmedt ed springer verlag 
pp 


bellare authenticated encryption relations notions analysis generic composition paradigm advances cryptology asiacrypt proceedings lecture notes computer science vol 
okamoto ed springer verlag 

black halevi krawczyk krovetz rogaway fast secure message authentication advances cryptology crypto proceedings lecture notes computer science vol 
springer verlag wiener ed pp 


bleichenbacher chosen ciphertext attacks protocols rsa encryption standard pkcs advances cryptology crypto proceedings lecture notes computer science vol 
krawczyk ed springer verlag pp 


canetti krawczyk analysis key exchange protocols building secure channels advances cryptology eurocrypt proceedings lecture notes computer science vol 
springer verlag pfitzmann ed pp 

full version cryptology eprint archive eprint iacr org report 

allen tls protocol version request comments 

dolev dwork naor 
non malleable cryptography 
proceedings rd annual acm symposium theory computing pages 

kocher ssl protocol netscape communications nov 
home netscape com eng ssl ssl toc html 
goldreich foundations cryptography fragments book weizmann inst 
science 
www wisdom weizmann ac il oded frag html 
goldwasser micali 
probabilistic encryption journal computer system sciences vol 
pp 


halevi krawczyk public key cryptography password protocols acm transactions information system security vol 
august pp 


jutla encryption modes free message integrity advances cryptology eurocrypt proceedings lecture notes computer science vol 
springer verlag pfitzmann ed 

katz yung unforgeable encryption adaptively secure modes operations fast software encryption 

katz yung complete characterization security notions probabilistic private key encryption proceedings nd annual acm symposium theory computing 

kent atkinson security architecture internet protocol request comments nov 

kent atkinson ip encapsulating security payload esp request comments nov 

krawczyk hashing authentication proceedings crypto lecture notes computer science vol 
desmedt ed springer verlag pp 


krawczyk order encryption authentication protecting communications secure ssl 
full version eprint iacr org 

luby rackoff construct pseudorandom permutations pseudorandom functions siam computing vol number april pp 


naor yung public key cryptosystems provably secure chosen ciphertext attacks 
proceedings nd annual acm symposium theory computing 

rackoff simon non interactive zero knowledge proof knowledge chosen ciphertext attack advances cryptology crypto proceedings lecture notes computer science vol 
feigenbaum ed springer verlag 

rogaway 
bucket hashing application fast message authentication proceedings crypto lecture notes computer science vol 
coppersmith ed springer verlag pp 


rogaway bellare black krovetz mode cryptology eprint archive report 

kivinen ssh transport layer protocol january draft ietf transport txt 
