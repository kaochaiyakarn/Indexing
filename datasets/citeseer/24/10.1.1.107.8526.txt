survey data management peer peer systems alex sung ahmed blanco herman li mohamed ali david school computer science university waterloo peer peer systems attempt provide decentralized infrastructure resource sharing 
particular file sharing initial motivation successful systems 
systems evolve support sharing structured semantically rich data data management issues addressed 
specifically systems need deal data location data integration data querying data consistency issues 
data management complicated systems due volatility scale systems 
survey propose architecture systems focuses data management activities required support sharing structured data 
architecture classify technologies proposed solve data management issues particular systems 
categories subject descriptors computer communication networks network architecture design network topology computer communication networks distributed systems databases database management logical design schema subschema database management systems distributed databases query processing database management heterogeneous databases data translation information storage retrieval systems software distributed systems general terms algorithms design performance reliability additional key words phrases data management data sharing integration peer peer 
peer peer systems massively distributed highly volatile systems sharing large amounts resources 
peers communicate self organizing fault tolerant network topology runs overlay top physical network 
initially developed allow sharing unstructured data proposed systems attempt provide support sharing structured data 
data management issues addressed dealing scale volatility systems include data location peers able refer locate data stored peers 
query processing query system able discover peers contribute relevant data efficiently execute query 
data integration data sources shared system follow different schemas representations peers able access data ideally data representation model data 
data consistency data replicated cached system key issue cs web data management winter pages 
alex sung local query data management api user interface wrapper data management layer query manager sublayer global query update manager network answer cache manager local data semantic remote data source mappings cache peer fig 

peer architecture maintain consistency duplicates 
network survey look techniques proposed address data management issues systems 
approach define architecture identifies major components functionality peer system need implement 
relate component architecture data management issue addressed component classify research done relates component discussed 
assume reader general familiarity traditional database distributed systems literature 
architecture shows architecture peer participating data sharing system 
depending functionality system components architecture may exist may combined may implemented specialized peers 
key aspect proposed architecture separation functionality interface submitting queries data management layer handles query processing metadata information catalogue services network sublayer managing network connectivity 
queries submitted user interface data management api handled data management layer 
queries may refer data stored locally globally system 
query request processed query manager module retrieves semantic mapping information repository system integrates heterogeneous data sources 
semantic mapping repository contains meta information allows query manager identify peers system store data relevant query reformulate original query terms peers understand 
systems may store semantic mapping specialized peers 
case query manager need contact specialized peers transmit query execution 
data cs web data management winter peer peer peer peer survey data management peer peer systems sources system follow schema semantic mapping repository associated query reformulation functionality required 
assuming semantic mapping repository query manager invokes services implemented network sublayer communicate peers involved execution query 
actual execution query varies different implementations 
systems data sent peer query initiated combined peer 
systems provide specialized peers query execution coordination 
case result data returned peers involved execution query may cached locally speed executions similar queries 
cache manager maintains local cache peer 
alternatively caching may occur specialized peers 
query manager responsible executing local portion global query data requested remote peer 
wrapper may hide data query language incompatibilities local data source data management layer 
data updated update manager coordinates execution update peers storing replicas data updated 
network sublayer provides communication services data management layer 
implementation network sublayer dependent type network topology system 
unstructured networks peers typically join point network 
structured networks hand enforce tight control topology message routing 
peers joining system assigned specific locations network required share network responsibility 
document organization starting network sublayer section compares unstructured systems section compares structured systems 
section introduces integration issues systems deal sharing structured data 
discussion section centered different ways define maintain semantic mappings heterogeneous schemas systems 
section focuses query manager module architecture presenting techniques query execution 
section presents data consistency issues cache manager update manager address system supports data duplication 
section concludes survey 

unstructured peer peer systems background unstructured systems refer systems restriction data placement overlay topology 
core feature widely deployed systems file sharing 
systems provide query functionality locate files keyword search 
significant difference unstructured systems traditional client server architecture high availability files network capacity peers 
replicated copies popular files shared peers 
downloading central server mirror sites peers cs web data management winter alex sung table comparison different unstructured systems network structure 
system network structure napster hybrid central cluster approximately servers peers saroiu gnutella pure 
freenet pure 
loose dht structure 
fasttrack kazaa pure supernodes 
edonkey hybrid tens servers world 
peers host server 
bittorrent hybrid central servers called tracker 
file managed different tracker 
download files peers inside network 
obviously total network bandwidth popular file transmissions undoubtedly far greater possible central server provide 
sections focus data management issues unstructured systems 
unstructured systems classified network structure determined files peer indices stored 
issues regarding managing indices terms stored indices updated locate files indices discussed 
furthermore peer selection file identification privacy problems addressed 
lastly discuss user incentives share files query processing power 
existing systems survey popular ones napster napster gnutella gnutella freenet clarke clarke fasttrack fast track kazaa edonkey edonkey bittorrent bittorrent 
specified term gnutella refers gnutella 
kazaa network uses commercial fasttrack protocol 
network structure classify systems groups file peer indices stored pure pure supernodes hybrid 
indices map files peers process queries 
pure architecture peer stores file indices locally peers treated equally 
pure supernodes architecture different peers store indices different supernodes 
hybrid architecture peers store indices central server cluster servers 
classification shown table illustrated 
index management indices stored form metadata defined system 
systems choice data put metadata updated 
general metadata includes information shared file names sizes 
napster server gathers metadata peer 
bandwidth 
number currently shared files 
current number uploads downloads progress 
file name size shared files 
ip address peer 
metadata uploaded time peer cs web data management winter 
query 
peer ip 
file download survey data management peer peer systems file 
flood queries 
peer ip 
flood queries 
file download hybrid pure supernode supernode pure supernodes supernode supernode fig 

network structure unstructured systems 
flood queries 
peer ip cs web data management winter file alex sung connects napster network 
gnutella file indices stored locally depend implementation client program 
details index files match queries local files left undefined gnutella specification 
freenet shared files indices kept locally just gnutella 
files may originally belong peer 
file indexed keyword signed signed subspace key 
details please refer data identifier section 
fasttrack kazaa metadata includes file name file size modified time content hash variable number file descriptors describe file content 
client program launches files shared local folder checked supernode file database order add remove files 
library metadata sent supernode 
opened kazaa client program monitors folder changes 
fasttrack commercial protocol details protocol unknown 
liang finds index information exchange supernodes 
query request supernodes sends query connected supernodes 
supernode supernode connection changes tens minutes liang 
edonkey uses ed link store metadata clients want download particular file 
normal html links start file downloading inside edonkey network 
link contains file name file size file hash 
server maintains database file ids mapped server generated client ids 
server maintains clients malkhi 
metadata bittorrent bt stored torrent files 
torrent files usually available web torrent search engines public newsgroups 
contain information including target file name file size tracker server url size file piece sha hashes pieces 
bt client program reads metadata file sends get message tracker containing file id peer generated peer id ip port number bytes downloaded uploaded left 
number bytes download uploaded left included purely statistical purposes tracker 
tracker keeps track peers downloading file 
way return set random peers sharing certain file request 
bt client exchanges pieces ids connected peers 
information pieces ids available tracker 
process illustrated 
note torrent file contain set file ids 
torrent file user download folder contains set files sub folders 
bt protocol allows downloading set files time identifier 
locating data unstructured systems locating data means finding file pieces 
idea analogous key lookup dhts section 
keyword search 
systems discussed bittorrent support keyword searches 
please refer section query processing section details keyword search queries routed 
cs web data management winter file 
download torrent file survey data management peer peer systems web server tracker server 
request peers 
random set ips update file 
file download file pieces info exchange fig 

downloading file bittorrent network file identifier 
file identifier contains information identify file outside network 
client program reads identifier able download file network 
users share identifier email instant messenger 
approach supported bittorrent edonkey 
bittorrent uses torrent files edonkey uses ed links 
available literature studies popularity ed link providers edonkey 
bittorrent querying ability users need get torrent files web newsgroup 
listed popular torrent sites suprnova org com org com 
site available files october 
top sites went offline december 
data identifier data refers file file pieces 
section focuses client program identifies data order resume downloading file finding right file pieces different peers 
napster user needs download file time user 
downloading multiple sources supported 
download fails user needs select peer download file 
need client program identify integrity file 
gnutella node resume previous incomplete downloads sending resuming message 
possible disconnected node connects network 
file identifier index number supplied peer sharing file 
freenet files identified binary file keys obtained applying bit sha hash function 
types keys 
keyword signed key ksk short descriptive text string chosen user 
string generate public private key pair 
public half file cs web data management winter file alex sung hashed yield data file key 
private half sign data file check integrity retrieved data 
prevents users selecting descriptive string independently personal namespaces enabled signed subspace key ssk 
public namespace descriptive string hashed separately xor ed hashed yield data file key 
user publishes namespace public key descriptive string retrieve files 
third key type content hash key chk updating splitting contents 
derived hashing contents file 
data files encrypted randomly generated encryption key 
user publishes chk decryption key order retrieve files 
chk splitting data files multiple parts optimize storage bandwidth resources 
fasttrack kazaa hashes file hash signature file 
tag identify file download request 
enables kazaa client search specific file automatically issuing new keyword query 
contains bytes bytes calculated md way digest bytes belong fasttrack 
fingerprint file content 
files identical content identical message digest value 
fasttrack adds content identifying bits 
edonkey identifies files md hash value file size 
method allows identifying files content different names 
file piece kb portion file 
part hashed individually md algorithm obtain bit content hash 
hashes combined unique file id 
bittorrent file maps string length multiple 
string subdivided strings length bytes sha hash piece corresponding index 
string stored torrent file 
piece default kb size 
neighbour selection neighbour selection refers user client program chooses peers connect order download files 
main ways manual semi automatic automatic 
neighbour selection process depends important things system provides query ability file id query ability provided user needs choose file peers sharing file return results information provided 
part selection done manually 
globally unique file id available protocol program search peers sharing file periodically background 
part done automatically user involvement 
query file id available list peers files returned query user chooses initial peers download client program search peers 
refers semi automatic type 
manual 
napster client program displays list file names file size bit rate user reported connection speed ping time peer id user cs web data management winter survey data management peer peer systems ity returned results user select 
user availability means peer uploading connection start downloading immediately 
gnutella specifically designed music sharing 
basic information available user just file names size 
information say ping time peer ip shown depends client implementation 
semi automatic 
kazaa client edonkey client return number sources file query result 
user choose file larger initial peer set 
higher availability files popular files peers usually give better downloading performance download multiple sources 
newly connected kazaa node receives list supernodes form parent supernode 
list subset supernodes parent supernodes cache 
kazaa client search new peers sharing current downloading files background minutes 
liang hypothesize kazaa peers mainly criteria workload locality neighbour selection 
workload refers number connections supernode supporting 
file downloads kazaa optimal available content 
users download remote peers complete copies files 
peers incomplete files ignored heckmann 
edonkey client configured periodically search new peers background seconds 
contrast kazaa incomplete files shared 
automatic 
freenet user obtain calculate binary file key retrieve file 
user sends request message local node specifying key hops live value 
hops live refers maximum hop count request dropped 
node receives request look local data store 
data node broadcast request nodes data returned 
freenet anonymous system user idea files peers sharing 
neighbour selection completely done program 
bt client program reads torrent file extracts tracker server address 
contacts tracker server set peers downloading specific file group files folders 
tracker server respond set random peer ips 
default bt client program determines number online peers contact tracker server set random peers 
peers need contact tracker server minute interval 
peers treated disconnected removed peer set maintained tracker server 
peer set selection done server 
peers set exchange file pieces determined client program tit tat strategy discussed section 
privacy compared downloader anonymity content deniability napster gnutella freenet 
refers identifying correlation downloaders 
cs web data management winter alex sung content deniability refers party involved deny knowledge content transmitted 
malkhi studied privacy issues gnutella 
answer questions possible track sending queries sharing files downloading files 
know user connected network 
possible track users interest specific topic geographic location 
users aware sharing files may contain personal data 
outlook email database file 
section compare systems criteria suggested mentioned paragraph 
napster search download status forwarded napster central server 
privacy 
contents transmitted clear text central server downloader deny knowledge content 
gnutella initially designed support privacy 
query messages hop hop routing sender address included query 
identify downloader tcp connection established point download replying query message 
modification gnutella creates centralized network supernodes ultrapeer nodes monitoring large number users possible relatively small number supernodes 
users probabilistically tracked ip address dns name client program version files sharing queries initiated queries answered 
gnutella gnutella downloader anonymity peer identities eventually revealed connection 
knowledge denied gnutella nodes gnutella supernodes 
gnutella party deny content knowledge 
gnutella supernodes intermediate nodes deny knowledge content see hashed values file names downloader 
freenet anonymity protected occasional resetting data source field response messages 
node listed data source imply supplied data 
downloader anonymity node get indication early request message forwarding chain hop live true requester kept private 
stored file encrypted node operator deny knowledge content 
fasttrack kazaa anonymity parties 
kazaa directly returns nodes contain files metadata matches query keywords 
file transfers encrypted deny knowledge content 
edonkey napster anonymity 
file searches text searches 
query string split single words known filenames searched occurrences words heckmann bock 
deny knowledge content 
bittorrent similar kazaa anonymity parties 
tracker server returns set peers downloading requested file 
encrypted 
deny knowledge content cs web data management winter ity 
incentive share survey data management peer peer systems free riding 
problem free riding studied adar huberman 
number files shared gnutella users 
hughes revisited free riding experiments done adar huberman 

showed peers shared files shared fewer files original findings peers share files peers share fewer 
top sharing peers provide query responses top provide 
original findings top peers sending messages responsible top peers provided 
saroiu showed gnutella clients share file clients share files clients share files 
additionally users share files users combined 
saroiu showed napster peers shared shared files 
users reported bandwidth kbps significantly higher bandwidth 
saroiu performed kazaa traffic study university washington campus 
kazaa peers serving requests 
studying kazaa traffic university washington campus gummadi showed top peers peers studied peers contributed query hits 
liang normal peers responsible meta data uploaded 
heckmann showed average edonkey user shares max 
files average size mb max half peers share files 
best knowledge measurement study done freenet 
obvious clear incentive peers share files query processing power 
apart number files share users manipulate client program uploading bandwidth number peers upload number simultaneous upload peer 
sharing query power kazaa internally determines peer supernode 
kazaa tier effectively built relied user incentives 
incentive built bittorrent 
bt widely deployed system incorporates users incentives sharing network bandwidth protocol 
incentive comes tit tat refusal upload algorithm file exchange cohen 
bt algorithms attempt achieve pareto efficiency default downloaders upload top peers give best downloading rate 
unutilized connections optimistically uploaded trial basis see better transfer rates 
change individual better making individual worse called pareto improvement 
allocation resources pareto efficient pareto improvements 
cs web data management winter alex sung evaluation performed seconds 
decision peers un solely download rate evaluated rolling second average 
optimal strategy offer maximum uploading rate 
free riders strongly discouraged get quickly 
thing note users may incentive share file bt network share uploading bandwidth finished downloading 
latest summary beta version release commercial system version time written gaining popularity 
general uses bt idea build incentive system add query function 
means users share files query just traditional unstructured system 
users ips hidden client program interface increase privacy 
commercial product detail known 
shown systems evolving 
index storage location shifted central server normal peers supernodes scalable 
file identifiers globally unique 
neighbour selection moved manual automatic 
sharing incentives injected system 
privacy issues taken account fully addressed 
believe generations unstructured systems supernodes global file ids select neighbours automatically provide anonymity importantly built incentive sharing files network bandwidth query processing power 

structured peer peer systems overview dhts structured systems referred distributed hash tables dhts 
theory hybrid systems maintain kind structure network indicated section classified umbrella structured systems 
focus section systems employ dhts underlying framework 
evolution research dhts motivated poor scaling properties unstructured systems ritter ratnasamy stoica 
key contribution dhts extreme scalability iris 
result dhts exhibit unique properties traditional systems lack 
particular provide perfect recall high precision result proposals enhance functionality dhts 
growing list benefits applicability dhts proposals enhance studied 
attempt better understand fundamental contributions field general taxonomy dhts introduced section 
order truly appreciate strength dht approach important understand differences structured unstructured systems 
precision refers proportion correct results system returns recall refers proportion results returned total results contained system cs web data management winter survey data management peer peer systems fundamental level dhts characterized simply data addressing lookup engines 
traditional file sharing systems example important features encapsulate basic functionality systems data lookup data retrieval 
having realized basic functionality dhts aim optimize data lookup systems implementing virtual overlay network underlying physical network 
dhts involved actual retrieval data support efficient lookups remainder section organized follows section briefly discuss application level issues dhts section presents discussion general architecture dhts section discusses implications virtual overlays part dht approach section presents taxonomy dhts section concludes summary 
application level issues dhts past years tremendous amount research gone creating applications dhts 
dhts applications ranging filesystems karp dabek rowstron druschel kubiatowicz event notification services content distribution castro indirection services stoica cox large scale query processing engines huebsch 
widespread commercial adoption dhts research efforts constrained experimental systems research labs 
underlying problems adoption dht technology lack user incentive limited api flexibility lack user incentive 
dhts provided sufficient user incentive adopt technology 
design decisions dhts caused concerns users 
example uniform distribution data distinct quality dhts worries users karp andersen may prefer keep data private local trusted sources order address concerns need relax design principles order motivate people adopt technology 
overriding issue realizing preferences priorities users 
dht extensions skipnet harvey step direction 
limited api flexibility 
majority research focus dhts optimizing lookup service key map key node 
extensions basic service proposed dabek application flexibility minimal 
dht community realized major hurdle adoption dhts researchers dht community faced issues 
additionally previous dht pro systems mentioned harvey augment provide data retrieval functionality issues related dhts pertaining network overlay discussed section network overlays issues termed content locality path locality discussed section cs web data management winter alex sung advocated participating system dht node adoption technology harder due reluctance participating system reasons indicated section 
dht services opendht deployed researchers general public alike means experimenting systems 
opendht maintained strictly service order encourage interest users want experiment system 
initiatives proposed address issues related adoption dht technology 
major initiative project iris infrastructure resilience internet systems 
iris aims providing general platform internet scale dhts enables creation new types distributed applications 
efforts opendht received huge initiative underway create systems practically realizable order may deployed large scales 
important note virtue network overlays dhts hindered deployment issues plagued networking research initiatives past discussed section 
architecture dhts dhts implement basic components data node addressing hash function routing protocol corresponding overlay structure routing state maintenance protocol 
briefly discuss components data node addressing discussed earlier dht approach employs virtual overlay network important provide addressing hashing data nodes order support lookups overlay 
intuitively na technique uri content data data node ip address node dhts harvey naming schemes 
important note order provide uniform distribution data overlay uris ip addresses provide sufficient flexibility 
result consistent hashing techniques provide uniform hashing values evenly place data overlay 
hash functions may employed generating virtual address mappings data proximity aware locality aware functions sha widely accepted base hash function supports uniformity security supporting data integrity keys 
result hash key maps address data particular node dht 
actual design hash function implementation dependent explored subsequent sections 
routing protocol currently running planetlab testbed service refers ability utilize opendht having install software explicitly join system base hash function defined function basis design hash function cs web data management winter survey data management peer peer systems important task dht lookup process 
lookup involves hashing key data item refer node responsible key 
lookup initiated overlay network locate target node question 
referred routing protocol dht differs implementations closely associated overlay structure 
detailed discussion section suffices say routing protocols attempt provide efficient lookups minimize routing state needs maintained overlay 
routing state maintenance protocol routing protocol requires nodes maintain routing state 
routing information differs routing protocols overlay structures 
implementations require maintenance algorithms order keep routing state date consistent 
contrast routers internet maintain routing databases systems pose greater challenge characterized high node volatility network links 
dhts need support perfect recall routing state consistency key challenge systems 
able maintain consistent routing state face concurrent lookups periods high network volatility 
network overlay issues dhts past years overlay networks ons popular tools network research development 
provide great deal flexibility supporting new tools services 
due inherent ip routing infrastructure importance ons crucial 
network overlays generally regarded tools networking problems birman 
andersen jain classified basic types routing measurement overlays storage lookup overlays random power law overlays 
context systems dhts fall category lookup overlays unstructured systems gnutella employ naturally emerging overlays follow power law random graphs faloutsos 
overlays general lookup overlays particular characteristic set challenges ignored dht implementations 
fundamentally physical links underlying network dhts tradeoff desirable features network network performance security management complexity practical internet routing concerns compatibility nats firewalls 
indicated section research efforts underway expand scale applicability dhts long term challenges need addressed 
challenges dealing performance studied 
jain simulation study compare performance dht implementations augmented different routing topology aware construction heuristics 
study fairly extensive refer pure systems hybrid systems indicated section cs web data management winter alex sung dht space complexity nodes chord log log tapestry base ids log log time complexity hops dimensions pastry base digit ids log log viceroy log koorde degree debruijn log kademlia log log structured superpeers table ii 
computational complexity dht implementations provides classification types performance enhancing heuristics routing heuristics topology aware overlay construction heuristics presents characteristic upper bounds class 
provides suitable framework compare kind performance heuristic 
authors compare popular dht implementations augmented different performance optimizations metrics relative delay penalty link stress show heuristics drastically improve performance dhts making viable option large scale deployment 
dht issues indicated open questions research community currently investigated 
dht taxonomy dht routing overlays proposed years 
gummadi terms routing geometry routing algorithm classify different dht overlays 
routing geometry essentially defines manner neighbours routes arranged 
routing algorithm corresponds routing protocol discussed earlier defined manner hops routes chosen routing geometry 
due wide acceptance dht community taxonomy discussed gummadi 
basic routing geometry 
routing geometries proposed dhts explored today 
general routing geometries exhibit similarities easily classified small representative set routing structures 
claim classification exhaustive point taxonomy provides coverage fundamental done routing geometries dhts 
classification routing geometries discussed help case examples popular implementations proposed class 
overlay level dht implementations exhibit similar space time requirements exception provide tighter bounds malkhi kaashoek karger 
order provide informed discussion different geometries compare degree flexibility 
main criteria neighbour selection flexibility route selection flexibility 
neighbour selection defined amount flexibility cs web data management winter survey data management peer peer systems node choosing neighbours geometry 
high neighbour selection flexibility allow easier augmentation different optimization heuristics routing geometry path locality content locality 
route selection corresponds choice hop neighbours node choose performing routing lookup neighbour selection criterion defined 
regard fault resilience directly correlated route selection flexibility 
low route selection flexibility corresponds poor fault tolerance characteristics routing geometry possibly lower routing state maintenance overhead 
may true cases basic routing geometries may augmented additional capabilities viceroy augmented sequential neighbours 
sake discussion omit modifications 
illustration purposes table ii presents space time complexities popular dht implementations 
tree binary tree structure probably routing geometry proposed dhts prr plaxton 
tree approach leaf nodes tree correspond node identifiers store keys searched 
height tree log number nodes tree 
search proceeds tree doing longest prefix match intermediate nodes target node 
case matching thought correcting bit values left right successive hop tree 
popular dht implementation falls category tapestry zhao 
uses surrogate routing order forward requests node closest digit routing table 
tree structure tapestry slightly different prr plaxton 
tapestry unique identifier associated node root unique spanning tree route messages identifier 
tapestry lookups proceed base spanning tree way root node identifier 
tapestry routing geometry closely associated tree structure classify 
discussions tapestry assumed classified tree routing geometry 
analyzing flexibility tree structure observe flexibility terms neighbour selection 
node system nodes choose neighbour subtree log prefix bits common 
number potential neighbours increases exponentially proceed tree 
total log possible routing tables node note select routing table node 
tree geometry neighbour selection characteristics 
routing done neighbouring sequential neighbour neighbour progress destinations node surrogate routing defined routing closest digit exact match longest prefix cs web data management winter alex sung fig 

example torus dimensional coordinate space 
arrows indicate example path followed lookup 
node sending particular destination 
result tree structure provide flexibility selection routes 
hypercube hypercube routing geometry dimensional cartesian coordinate space essentially resembles torus 
coordinate space partitioned individual set zones node maintains separate zone coordinate space 
number neighbours node may dimensional coordinate space sake discussion consider log 
consider coordinate represent set bits node identifier represented bit string length log 
way hypercube geometry similar tree simply fixes bits hop reach destination 
hypercube bits neighbouring nodes differ exactly bit forwarding node needs modify single bit bit string done order 
consider correction bit string correction applied log nodes correction applied log nodes log 
possible routes nodes provides high route flexibility hypercube routing geometry 
node coordinate space choice neighbours coordinates adjacent coordinate zones coordinate space change 
hypercubes poor neighbour selection flexibility 
example hypercubes content addressable network ratnasamy 
due large route selection flexibility hypercubes resulting high fault tolerance supports lightweight route maintenance protocol incur huge overheads periods high volatility 
example node fails maintenance protocol requires updating nodes immediate neighbours failed node requiring updates nodes network 
ring ring geometry represented dimensional circular identifier space nodes placed different locations circle 
distance nodes circle numeric identifier difference clock cs web data management winter survey data management peer peer systems fig 

example butterfly network courtesy viceroy authors wise circle 
circle dimensional data identifiers represented single decimal digits represented binary bit strings map node closest identifier space decimal digit 
chord implementation employs ring geometry 
specifically chord node maintains information log neighbours ring th neighbour node closest circle 
fingers chord able route node log hops 
analyze structure chord carefully observe node necessarily need maintain node closest neighbour 
fact maintain log lookup bound take node range 
terms route flexibility able select log routing tables node 
provides great deal neighbour selection flexibility 
routing node hop log neighbours progress destination node log nodes 
typically log 
possible routes destination 
ring geometry provides route selection flexibility 
butterfly butterfly geometry essentially resembles traditional butterfly networks extends structure support scalability requirements dhts 
improves existing implementations requires constant space node traditional dhts usually require log space node refer table ii 
viceroy malkhi algorithm uses butterfly geometry support efficient lookups see 
nodes partitioned set levels subsequently connected level form ring successor predecessor pointers 
identifier space mapped range 
lookup viceroy proceeds cs web data management winter alex sung 
example symmetric xor tree kademlia system star node id identifier space fig 

xor topology courtesy kademlia authors stages request climbs connections level node log hops descends levels reaches level containing destination node log hops successively decreasing search space traverses ring geometry sequentially destination node log hops 
technique allows viceroy maintain state size node network 
note rd stage lookup involves sequential search node provide route neighbour selection flexibility 
improved maintaining additional state node indicated earlier attempt compare basic dht implementations discussion 
xor xor approach approach discussed employs symmetric unidirectional topology 
topology allows dht receive lookup queries precisely nodes contained particular node routing table 
allows band exchange routing state possible approaches lookup requests serve routing state messages route maintenance 
kademlia maymounkov mazieres system utilizes topology dht exploit fact node failures system inversely proportional respective saroiu 
xor topology computes distance nodes xor node identifiers 
nodes maintain routing state nodes interval set buckets bucket sorted seen node terms node requests 
successive bucket contains sets nodes away node xor metric 
doing kademlia provides kind neighbour selection capabilities tree approach 
terms route selection xor topology require strict left right bit fixing progress destination nodes 
cs web data management winter survey data management peer peer systems fig 

example debruijn graph courtesy koorde authors arbitrary fixing bits may guarantee preservation bits fixed higher order bits fixed 
hybrid hybrid geometries typically consist multiple instantiations previously discussed basic geometries 
pastry rowstron druschel popular dht implementation uses combination tree ring geometries default order provide proximity properties 
described proximity metric takes account closeness nodes underlying physical network order improve lookup efficiency 
pastry achieves requiring node maintain routing table leaf set neighbourhood set 
routing table analogous tree structure described previously 
acts ring routing pastry 
neighbourhood set maintain locality properties 
analyze corresponding routing geometry pastry find provides degree flexibility terms neighbour selection tree geometry described 
due fact pastry utilizes tree structure step lookup procedure falls back ring routing tree fails 
terms route selection flexibility hybrid structure provide greater selection routes simple tree structured approach routing akin kind route selection flexibility seen kademlia terms preservation fixed bits 
pastry maintains ordered node able hop nodes prefix branches tree preserve bits fixed previously 
general routing protocol routing geometry involved approaches described previously 
extended routing geometry 
continuing discussions previous section briefly discuss extensions basic geometries order improve routing properties previous algorithms 
skipnet skipnet harvey extension ring approach combines cs web data management winter alex sung ring structure idea proposed pugh 
skiplist sorted linked list contains supplementary pointers nodes facilitate large jumps list order reduce search time node list 
idea applied ring structure nodes maintain supplementary pointers circular identifier space 
technique able provide scalability traditional dhts supports locality properties 
specifically skipnet facilitates placement keys scheme allows keys stored locally confined administrative domain content locality 
addition skipnet provides path locality restricting lookups dht domains may contain required key 
technique provides content locality path locality trades fault tolerance underlying ring content uniformly distributed ring 
additionally load balancing issues may arise system 
ganesan discuss similar system imposes hierarchy chord provide locality support service composition 
koorde koorde kaashoek karger extension chord protocol implements debruijn graphs top ring geometry 
illustration debruijn graphs shown 
debruijn graph maintains pointers node graph requiring constant nodes state node ring 
specifically node id represented set binary digits node connected nodes identifiers decimal value node id 
operations regarded simple left shifts additions node id successive shifting bits lookup times log maintained 
consider degree debruijn graph log effective lookup tightly bounded log log log 
koorde able improve scalability properties chord time maintaining amount state node 
worth noting koorde route maintenance protocol identical chord shares fault tolerance capabilities chord 
structured superpeers structured superpeers utilizes ring routing structure augment super peers 
super peers context considered type discussed unstructured context 
fundamentally structured superpeers enhanced higher priority nodes considered reliable higher capacity regular peers network 
super peers maintain additional information order super peers connected separate band ring 
super peer responsible portion original ring associated 
lookups initiated super peer require hops constant time reach destination 
significantly improves lookup time traditional approaches 
improvements come cost additional storage space reduced fault cs web data management winter survey data management peer peer systems fig 

layout structured superpeers structure 
inner ring corresponds ring connecting super peers 
super peer responsible peers outer ring corresponding intervals outer ring sp responsible interval outer ring 
courtesy structured superpeers authors tolerance 
specifically super peer failure akin drastic failure regular peer node failure handled way traditional ring routing algorithms 
dht extensions proposed years attempted highlight prominent area 
coincidence extensions specifically ring geometry 
years dht community begun recognize merits ring approach result focused particular routing structure 
summary structured systems distributed hash tables studied great depth past years 
dhts exhibit extreme scalability properties support tremendous potential applications 
outlined challenges exist dhts systems applications perspective 
years dhts received scrutiny algorithm designers systems builders hellerstein 
result research boundaries widely accepted ring structure best compromise supports properties desire systems 
research dhts definitely path technologies widespread fundamental part massively distributed systems internet 

data integration autonomous nature peers systems potential heterogeneity data schemas share schema information sharing cs web data management winter alex sung university waterloo uw university toronto ut areas area id name description project name desc projects proj id area id name student fname lname status publications pub id title year faculty fname lname rank office author id pub id proj id pub id title forum year researcher res id name author res id proj id role university british columbia ubc 
area name descr project sponsor pubs title venue year author author member member fig 

research project database schemas structured data systems challenging difficult problem 
semantic issues introduced data schemas peers overlap related 
shown section traditional approaches data sharing federated distributed database environments assumptions longer hold systems suffer scalability problems applied systems massive number participants 
furthermore data integration techniques developed systems need consider cope volatile nature peers 
data sharing motivation popular applications support structured data sharing natural evolution functionality offered types systems 
research discussed section relates query manager component architecture semantic mapping repository see 
example illustrate issues data sharing assume system integrates research project data diverse universities example adapted halevy 
system different universities may store data different schemas models xml relations 
shows data schemas universities participating system 
simplicity schemas example assumed follow relational model 
uw may want able access ut research database vice versa 
semantically databases store type data 
uw ut participate common projects information joint projects may appear databases 
assuming uw defined semantic mapping database ut ubc joins system ubc able access ut data creating semantic mapping database uw willingness expose schema may limit mechanisms specify implement semantic mappings 
different systems different assumptions regarding amount schema information peers provide 
general consensus peers able expose portions database wish contribute system 
formally semantic mapping describes relationships terms schemas purpose sharing integrating data madhavan halevy 
techniques systems define semantic cs web data management winter survey data management peer peer systems uw projects proj id ut uw researcher name concat ut faculty fname ut faculty lname uw researcher name concat ut student fname ut student lname fig 

example schema mappings mappings schema mappings data mappings 
techniques section 
schema mappings implemented different schemas different names formalisms represent data 
data mappings semantic differences schemas schema mapping inapplicable 
schema data mappings complement 
schema mappings schema mappings define semantic equivalence relations attributes different schemas 
possible schema mappings example shown 
schema mappings may may reflexive 
transitive 
traditional distributed databases purpose integrating data schema mappings systems provide uniform querying environment hides heterogeneity distribution data sources 
mappings uw ut database completed users uw able specify queries uw schema receive data uw ut databases part query results 
typically schema mappings specified manually approaches automating tasks proposed rahm bernstein 
traditional approaches 
traditional approach data sharing definition mediated schema data sources wiederhold 
mediated schema provides global unified schema data system 
users submit queries terms mediated schema schema mappings mediated schema local schemas allow original query reformulated subqueries executable local schemas xu embley 
data stored mediated schema just metadata mediated schema queried stored data 
wrappers close local sources may need implemented provide translation services mediated schema local query language model local feature incompatible mediated schema ullman 
mediated schemas constructed mediated schemas effectively forming semantic tree schema node mediated parent 
strategies definition schema mappings mediated local schemas include global view gav local view lav global view glav lenzerini 
gav approach mediated schema described local sources 
lav approach local sources described mediated schema 
glav integration mediated local schemas performed gav lav 
cs web data management winter alex sung schema mappings systems 
characteristics systems definition unique global mediated schema impractical 
main issues volatility peers join leave system global mediated schema need modified reflect data un available 
peer autonomy participants may willing share data may interested contributing portion system 
scalability assuming existence global mediated schema key issue allocation schema 
mediated schema centralized hosting site may require substantial investment hardware connectivity 
hosting site single point failure 
mediated schema distributed issue development techniques guarantee integrated view mediated schema 
possibility fully replicate schema potentially imposing unacceptable storage requirements peers 
mediated schema updated coordination peers required increasing complexity system 
due issues systems avoid requirement unified mediated schema 
approaches categorized groups pair mappings peer mediated mappings super peer mediated mappings 
pair mappings simplest approach schema mappings systems implement mappings pairs peers 
example pair mapping mapping defined universities 
uw ut ubc uw 
schema mappings stored site interested accessing peer data 
relying transitivity mappings ubc able access ut data ubc pair mapping definition ut data ubc pair mapping uw uw pair mapping ut 
local relational model lrm follows approach schema integration bernstein 
lrm proposal peer specifies translation rules coordination formulas define data schema relates data schema peer referred acquaintance 
semantic network defined acquaintance links peers 
peer mediated mappings peer mediated mappings peer define schema mapping relates peers 
peer mediated mappings generalization pair mappings 
example uw provide mapping includes data uw ut ubc 
fourth university sfu able access uw ut ubc data accessing uw peer mediated schema 
piazza tatarinov peerdb ng systems follow approach integration 
discussed peerdb create mediated mappings query time 
super peer mediated mappings super peer systems mediated schemas defined super peer level 
super peer peer mediated schemas contain mappings regular peers associated super peer 
schemas super peers called super peer super peer mediated schemas defined implement data sharing peers associated different super peers 
cs web data management winter ubc uw ut map uw map ut survey data management peer peer systems ubc uw ut map uw ut ubc pair mappings peer mediated mappings sfu ubc ual ut qu super peer mediated mappings fig 

schema mapping types example super peer west may provide mediated mapping data sfu ual ubc 
super peer central may provide mediated mapping 
super peer east may provide mediated mapping uw ut qu yu 
uw queries data ut mediated schema 
uw queries data ubc mediated schema super peers super peer peer mediated schema edutella nejdl ser system implements super peer mediated mappings hypercup super peer topology independently approach implement schema mappings systems attempt exploit transitive relationships peer schemas perform data sharing integration halevy 
traditional distributed systems schema mappings form semantic tree systems mappings form semantic graph 
creation maintenance schema mappings 
techniques applicable systems create maintain schema mappings classified groups machine learning techniques common agreement semantic gossiping information retrieval ir approaches 
machine learning techniques typically peers represent data ontologies taxonomies proposed semantic web 
glue doan system applies machine learning techniques semi automatically find semantic mappings 
concept taxonomy focus glue find similar concept taxonomy 
basic idea provide classifiers concepts 
decide similarity concepts data concept classified classifier vice versa 
amount values successfully classified represent similarity system capable identifying attribute name taxonomy related concatenation attributes name name taxonomy 
developers glue assume large user base collaborate define semantic mappings 
glue helps process asking precise questions leverage answers improve accuracy doan 
piazza tatarinov machine learning technique called stacking wolpert attempts reduce errors generalization uw yu cs web data management winter alex sung processes combine different approaches exploit diverse evidence semantic similarity 
knowledge acquired previous semantic matches build collection metadata information 
statistics collected schema elements collection employed schema matchings 
common agreement mapping schema mapping done peers common interest sharing data 
mapping generally done maintained manual non automated fashion privileged expert users 
example system assumption peers wishing share data agree common schema description csd valduriez 
peer schemas specified views csd queries expressed terms local schema csd 
assumes schema mappings maintained data sharing longer desired 
automed poulovassilis definition common agreement mappings done primitive bidirectional transformations defined terms low level data model 
local relational model bernstein proposes coordination formulas specify data peer relates data peers 
coordination formulas manually modified overtime data sharing requirements peers evolve 
piazza tatarinov system assumes peers interested sharing data willing define maintain mappings schemas 
semantic gossiping proposed aberer assumes existence common agreement mappings peers initially constructed skilled experts 
relying transitivity mappings queries propagated nodes direct mapping exist 
query propagation determine semantic agreement semantically unmapped peers 
semantic agreement measured analyzing results queries sent peers 
degree semantic agreement new mappings may created existing mappings may adjusted 
final goal incrementally derive implicit global mapping peers 
ir approaches peerdb ng decide query execution time mappings peer schemas 
peerdb descriptive words associated schema attributes 
queries flooded neighbouring peers ir matching techniques decide matching attributes query exist local schema 
user submitted query attributes confirm proceed execution query remote peer schema attributes match 
decision user registered system route queries matching peers queries refer attributes initial query 
data mappings schema mappings schemas integrated semantically close 
words differences schemas mainly structural attribute values represent information transformed relations redefined views structurally similar relations views possibly mediated schema 
attribute values differ semantically related data mappings option data sharing 
cs web data management winter survey data management peer peer systems data mappings implemented relations attributes mapped 
mapping relations called mapping tables represent expert knowledge kementsietsidis 
tuples mapping tables specify correspondence values relations data mapping defined 
actual tuples mapping tables typically specified domain specialists 
example consider mapping table relating gene data database protein data database kementsietsidis 
assuming data mapping relations values showing mapping table interpreted related value close world semantics related value open world semantics 
interestingly open world semantics equivalent closed world semantics variables allowed values tuples mapping tables shown kementsietsidis 
data mappings schema mappings transitive reflexive 
data mappings define semantic graph peers 
current research data integration systems assume existence semantic mappings peers specify mappings created 
creation semantic mappings probably hardest aspect data sharing process 
expensive process cases requires human intervention 
research related semantic web potential field doan 
hard problem aggravated need collaboration researchers ai database fields 
semantic mappings schema data mappings created research issues arise systems 
example assuming semantic mappings ubc uw example uw ut desirable determine information loss ubc ut information loss identifying weak mappings need improved desirable 
formally peers mappings goal compute mapping composition mapping composition direct mapping equivalent original mappings madhavan halevy 
mapping compositions expressed formulas interesting problem identify minimal composition mapping cover term kementsietsidis data mappings minimal formula sufficient produce mapping composition 
languages formalisms represent manipulate mappings madhavan halevy halevy poulovassilis 
active area research data sharing rule mechanisms triggers enforce integration rules propagate data peers 
rules allow coordinate actions peers data changed inserted deleted retrieved arenas 
semantic differences schemas need considered data propagated rule mechanisms specified 
cs web data management winter alex sung summary schema data mappings data integration methods commonly systems share structured data peers 
schema mappings define structural basic semantic relationships schemas 
data mappings complement schema mappings define associations data values different data sources 
schema data mappings define semantic overlay network transitivity semantic mappings exploited share data peers direct mappings exist 

query processing section look query processing systems sharing files followed systems sharing structured data 
file sharing systems queries routed peers goal locating files 
systems sharing structured data queries expressive 
query processing case follows traditional optimization plan generation execution stages 
query processing file sharing systems systems aim transfer files peers 
early systems napster edonkey centralized indexing server second generation systems distributed approach 
section file sharing systems different characteristics requirements compared systems 
purpose query routing distributed systems locate peers store requested file 
contrast dhts files data items keys file transfer systems generally stay redistributed uniformly system 
furthermore frequently requested files usually replicated peers 
topology systems highly dynamic unstable 
conserve bandwidth maintain scalability propagation routing tables bounded fixed number hops 
schemes large scale stable environments require significant maintenance overhead peers join leave appropriate systems 
queries routed multiple peers overlay network routing scheme 
schemes generalized main categories blind searches informed searches 
blind searches arbitrarily route queries particular peers knowledge query satisfied peers 
schemes simple peers need store metadata related peers 
alternatively informed searches route queries peers known higher probability satisfying queries 
additional knowledge needed route queries peers store considerable amount metadata peers 
blind searches 
schemes store information regarding data placement 
routing done random fashion 
different optimizations achieve implementation simplicity reduced traffic overhead reduced resource utilization reduced query latency scalability 
flooding simplest way route queries 
propagate query large number peers node sends query neighbours 
limit computational network resources node typically flood neighbours cs web data management winter survey data management peer peer systems query 
time live ttl mechanism limit radius flood 
systems gnutella uses flooding 
scheme advantage propagating query large number peers quickly 
scheme limited search radius overload network quickly 
optimize flooding scheme level hierarchical approach peer heterogeneity proposed 
fasttrack extends simple flooding introduces supernodes 
compared regular peers supernodes powerful nodes handle load 
supernodes act proxies regular peers flooding performed supernodes 
kazaa implements fasttrack protocol 
advantages flooding reduced capable peers overwhelmed messages 
scheme scalable simple flooding scale number supernodes grows larger 
reduce network traffic favour scalability random walk technique 
walker query forwarded exactly neighbour time lv 
propagation bounded ttl counter gets decremented match 
reduces traffic generated compared flooding fasttrack 
search latency may increased routes taken longer 
popular files highly replicated filesharing systems highly popular files small number hops 
biased random walk variation takes peer heterogeneity consideration 
randomly choosing peer gia system chawathe chooses peer capable terms network bandwidth 
hop replication creates hierarchy queries propagated highly capable peers capable peers act proxies capable peers 
informed searches 
schemes collect large amount information data placement 
effective routing done reduce number hops required locate data item 
objective increase probability locating data item hop count route increases 
schemes differ metadata collected peers data placements 
order move blind searching informed searching form routing table containing data placement information maintained peer 
query routing protocol aims replace blind flooding gnutella informed routing 
achieve keywords describing files peer offers hashed encoded bloom filter 
bloom filters routing tables exchanged neighbours 
peer received routing table merges keeps propagating 
conserve bandwidth maintain scalability propagation routing tables bounded fixed number hops 
queries forwarded neighbour routing table contains keywords 
neighbours know requested file scheme degenerates blind search 
building bloom filter idea exponentially decaying bloom filter utilized scalable query routing sqr scheme construct probabilistic routing table peer kumar 
property amount information encoded bloom filter cs web data management winter alex sung location file decreases exponentially hop count increases 
query routing begins random walk encodes little information peer hosting data far distance 
query approaches neighbourhood aware peer hosting data search sharply peer 
basic idea queries forwarded peer peer compound routing indices uses different neighbour selection criteria crespo garcia molina 
files categorized topics locations files stored terms topics 
neighbours selected files reachable forwarding query neighbour 
hop count routing indices incorporates hop count information routing indices 
cost function neighbour selection criteria takes number files reachable number hop count consideration 
lastly exponentially aggregated ri stores result applying regular tree cost formula hop count ri 
done combat fact hop count ri contain information certain hop count threshold 
adaptive probabilistic search aps uses walker probabilistic approach route queries roussopoulos 
random walker gia aps uses simultaneous walkers probabilistic forwarding algorithm 
probability forwarding neighbour influenced previous search results 
peer maintains index neighbours file request seen 
query forwarded neighbour highest index value requested file 
index updated follows 
optimistic approach forwarding neighbour selected index value incremented 
query satisfied peer query terminates indices peers left untouched 
query satisfied ttl expires query failed message propagates backwards peers route decrement corresponding indices 
pessimistic approach leaves index intact forwarding peer selected increment index query known satisfied peer 
scheme self learning performs better peers stay system longer 
scheme experience hot spots path gains popularity quickly leads utilization possible paths 
freenet clarke uses steepest ascent hill climbing search locate file 
similar biased random walk 
decision peer forward query depends routing table located peer 
routing table constructed indicate neighbour peer thinks greater chance locating requested file represented globally unique identifier guid 
file located passed backwards query route peers way update routing table 
freenet concerns privacy peers way may replicate file declare file located 
longer peer stays system information gains potential location files 
routing schemes mentioned freenet requires file name known advance 
requested filename converted guid sha hash function forwarded peers 
cs web data management winter survey data management peer peer systems 
random search informed search schemes subsection 
schemes target large scale dynamic file sharing systems 
information neighbours stored variety ways bloom filters routing indices 
types searches aim locate files data items relocated peers 
keyword search queries routed peers random fashion heuristics metadata collected 
query processing data sharing systems traditionally query processing distributed data sharing environments implemented mediation layer decomposes queries global schema sends appropriate sub queries dispersed sources integrating materializing data diverse sources central place warehouse type setting 
approaches successful availability global schema possibility implement central control 
settings largescale environments frequent changes schemas source availability common central component provides schema knowledge coordinates execution queries may bottleneck single point failure 
decentralized query processing techniques suitable systems 
suitability decentralized query processing techniques demonstrated success early file sharing systems napster gnutella dhts 
decentralized query processing implies formulating executing queries different peers probably different characteristics data models 
due rapid evolution applications support richer complex queries highly desirable 
current trends indicate range queries multi attribute queries join queries aggregation queries integrated applications 
section presents previous current research efforts issues query processing data sharing systems 
query processing common data model systems 
systems assume existence common schemas data models apply peers 
queries distributed peers query type specifications required attributes predicates data filters select peers contact 
processing filtering results done incrementally different peers queries distributed 
different earlier efforts combination results normally done client side 
edutella framework edutella loser naumann nejdl wolf peer set wrappers translate query results specifications provided common query exchange language 
query normally split subqueries transferred different peers consulting schema aware indices located super peers 
peers process subqueries return combined results peer initiated query 
distinguishes proposed query shipping functionality pushes query descriptions possibly user defined code peers participating query execution combines results remote peers 
cs web data management winter alex sung query plans potentially modified moving network 
setting peer resolves portions plan receives forwards peers 
introduce notion mutant query plans query plans injected network peers global predefined xml schema 
peer choose mutate incoming query plan ways resolve enclosed resource names location supply data resource directly knows get 
peers reduce plan evaluating sub graph plan substituting results place sub plan 
plan completely evaluated sent back initiator routed peer able continue processing 
query routing indices widely common data model systems 
instance peer local xml search engine enables document searches structure content 
furthermore node maintains additional indices facilitate forwarding queries data providers relevant data 
search engine indexes local data inverted lists map keywords documents 
indices enable processing containment queries 
addition node maintains peer index maps keywords peers 
queries executed local indices peer indices stored querying peer 
peer index query sent directly nodes results 
systems huebsch assume existence common data model inherent property large distributed environments data generated popular software products follow schema allowing data sharing peers 
data assumed horizontally fragmented peers 
system queries distributed dht routing layer 
query processing schema heterogeneous systems 
discussed section common data model predefined schema exist peers apply data integration techniques provide common ground query processing 
basic idea identify content structure similarities peers 
semantic mappings defined specify similarities semantic mapping definitions queries reformulated specific peer 
bernstein bernstein propose local relational model query manager component located peer uses data translation rules semantic dependencies reformulate queries submitted peer match schemas peers 
piazza system halevy storage mappings associate queries suitable data relations description mappings associate query results peer results peers 
description mappings reformulation algorithm produces query expressions equivalent query query answered combining multiple peers mappings reach relevant data 
chatty web system aberer authors propose appending schema mapping quality measures query updating measures query roams network 
schema mapping quality measured syntactic semantic similarity 
syntactic similarity refers extent information lost queries attributes schema exist schema 
semantic cs web data management winter survey data management peer peer systems similarity refers level agreement meaning schemas measured looking transformations query suffers expressed terms schemas 
distinguishes lack reliance existence shared schemas integrated peers 
peerdb system ng queries executed steps step peers selected amount metadata intersection query terms peer schemas second step queries submitted selected peers results sent back query initiator 
users system involved selecting potentially promising peers set peer selected step query execution 
complex query types 
support wider range applications motivate evolution current technologies 
terms query management complex queries need supported architectures 
clear drawback existing traditional dht architectures fact single key queries exact matches supported 
special architectures proposed support complex queries range queries multi attribute queries join queries aggregate queries 
architectures dht methods unstructured network layouts range queries support range queries seen important open research problem networks 
efforts focused trying adapt existing dht architectures support range queries 
major problem efforts face randomizing hash function dht architectures create distributed balance load different peers works range queries 
relation values range hash function applied values 
possible solution hash ranges requires priori dividing total range partitions assigned different peers 
addition size partitions problem 
partition size large peers get easily overloaded 
hand small hops needed locate data 
dht solutions 
techniques propose introducing variations way dhts order support range queries 
techniques basic dht interface discussed section extend insertion lookup operations support ranges 
gupta propose architecture relational data sharing system chord hash method provide approximate answers range queries 
range approach considers set values range consists computes integer values applying independent permutation hash function takes minimum resulting integers identifier range 
lookup performed log hops number peers 
simulation results showed load balance problem large networks 
extend system 
virtual hash space constructed attribute dimensional square bounded lower higher values attribute domain 
space cs web data management winter alex sung partitioned zones zone assigned peer 
peer stores results range queries ranges hash zone owns routing information adjacent zones 
query routed range zone virtual space 
query reaches zone stored results zone checked 
results locally returned 
query forwarded left top neighbours may contain potential results 
extension proposed xu nearby ranges map nearby zones 
subset servers called interval responsible subintervals attribute domain 
node reports current attribute value appropriate interval keeper 
range query issued routed interval propagating waves neighbours intersect query higher interval current node second wave lower interval 
non dht solutions 
dhts suitable exact match queries adapting dhts support range queries creates load balance problems addressed 
research efforts proposed implement range queries type indices 
aspnes shah harvey jones solution proposed skip graphs 
load balance problems inherent type graphs 
load balance problem considered consequence skewed insertions deletions query loads 
solutions proposed load balance problems 
instance propose skip graphs index data track load nodes 
node able determine load neighbours addition minimum maximum load system 
devised algorithm balance load neighbours empty nodes take heavy loaded nodes 
bharambe bharambe introduce mercury system support multi attribute range queries add scheme load balancing 
framework nodes grouped virtual hubs responsible query attribute 
nodes inside hubs arranged rings way similar chord 
random sampling estimate average load nodes find light loaded parts 
multi attribute queries multi attribute queries 
cai cai introduce multi attribute addressable network maan 
system built chord provide multi attribute range queries 
locality preserving hash function map attribute values chord identifier space designed assumption data distribution known 
multi attribute range queries supported single attribute resolution 
authors notice query selectivity breakpoint flooding better scheme 
authors followed rdfpeers system cai frank allows heterogeneity peers schemas peer contains rdf data items described triples subject predicate object 
cs web data management winter survey data management peer peer systems load balance improves test skewed query loads 
join queries need support join queries large scale environments pushed researchers adapt older distributed join algorithms settings 
distributed data peers seen cases set large relational tables fragmented horizontally 
running efficient join queries massively dispersed fragments challenging task 
huebsch hellerstein huebsch describe layer architecture pier system storage dht query processing 
implement equi join algorithms 
design key constructed namespace relation primary key default 
queries multicasted nodes namespaces joined 
join algorithm version symmetric hash join node namespaces finds relevant tuples hashes tuples new namespace 
second algorithm called fetch matches relations hashed join attributes 
node second namespace finds matching tuples namespace dht get operations 
triantafillou pitoura considered multicasting large number peers inefficient 
propose set dedicated peers called range guards monitor partitions join attributes 
join queries sent range guards decide peers contacted execute query 
aggregation ranking queries increasing number peers peer peer network usually increases number answers query 
users usually interested arbitrarily large un ordered answer sets small set best answers 
performing result aggregation ranking user defined scoring function considered environments 
wolf nejdl propose algorithm distributed processing top queries minimum possible data traffic relying super peer hyper cup topology 
algorithm selects participating peers super peers super peer index query initiated 
peers evaluate top queries locally design data layer deliver objects scores super peers turn select incoming objects ones maximum score 
framework assumed global shared schema consistent ranking methods employed peers 
planetp system acuna globally content ranked view shared data maintained 
approach comprised major components gossiping layer support replication shared data structures groups peers text search rank algorithm 
gossiping layer enables peers push change happens replicated data structure peer index randomly selected peer 
peer stops pushing contacted consecutive peers heard 
content ranking scheme vector space model 
query peers ranked relevance queries 
cs web data management winter alex sung estimated number documents carrying query terms maintained global index 
summary 
providing robust query functionality highly dynamic heterogeneous environments challenging 
existing research efforts assume existence common data model build query processing techniques schema data integration layer peers heterogeneity 
research efforts adapt complex query types range queries settings 
query processing evolving direction migrating distributed database techniques distributed query processing optimization data management systems 

data consistency issues overview data consistency issues arise scenario involving data duplication 
peer topeer data management systems exception 
maintaining data consistency prominent scenarios caching replication 
caching done solely purposes improved performance 
cache implies single authoritative source document original web server serving document case web cache 
replication commonly improving availability reliability data 
scenario replicas regarded equally authoritative changes different replicas reconciled 
distributed file systems replication 
section outlines data consistency issues arisen systems 
classical issues briefly discussed order give framework understanding specific challenges 
solutions data consistency issues discussed 
peer architecture issues addressed cache manager update manager see 
classical issues caching 
keeping data consistent long problem areas study 
example operating systems address cache coherency maintaining memory cache disk data 
similarly distributed file systems afs howard coda satyanarayanan nfs sandberg take measures ensure certain level data consistency 
web proxy caches pose problems data consistency 
big problem caching system system ensure user receiving latest copy data 
variants strong weak consistency seen examples choosing entails choosing different tradeoffs depending application 
web proxy cache checks time requests ensuring strong consistency user see stale copy document 
resource intensive approach web proxy cache rely expiry time time live attached page document source 
method resource usage user may receive date copy document 
case trading freshness resource savings 
cs web data management winter survey data management peer peer systems common approach ensure consistency cache invalidation notification done afs coda 
systems clients locally cache copies documents document updated server server sends callback message appropriate clients 
tradeoff increased resource usage eliminating staleness 
replica management 
consider distributed file systems aims maintain consistency replicas documents 
order ensure update conflicts pessimistic approach taken locking 
afs coda consistency relaxed favour performance lower overhead 
systems take optimistic approach allow multiple clients modify file simultaneously 
opens possibility updates overlap 
updates conflict form resolution needs take place 
updates different parts file automatic application specific techniques merge changes 
changes overlap file user manually merge changes conflict resolution interface provided system 
systems afs coda strict consistency traded increased simplicity functionality 
new data consistency issues systems pose new data consistency challenges classical solutions directly apply 
discuss characteristics systems give rise challenges 
characteristics 
peer peer systems fully decentralized potential natural benefits centralized alternatives 
iyer point advantages organic scaling costly infrastructure self organizing structure resilient node failures low overhead participating nodes contrast centralized solutions tend expensive terms infrastructure costs dedicated hardware administrative costs 
benefits decentralization come cost 
context data consistency solutions trade decreased centralization heightened consistency challenges 
specific challenges 
benefits decentralized approach come specific challenges overcome order maintain data consistency 
datta rowstron druschel point challenges summarized table iii 
systems address classical issues update propagation availability face novel challenges 
example maintaining minimum number replicas network face frequent node failures low peer online probability lack global knowledge appears insurmountable task 
cs web data management winter alex sung table iii 
specific challenges implications data consistency challenge implications high churn rate nodes frequently ways maintaining network struc joining leaving failing ture dht lack global knowledge act partial knowledge probabilistic measures low online probability peers offline time relied keep data intact unknown varying node assume connected powerful sensitive individual capacity overlay topology independent hop overlay may large physical physical topology distance aware underlying topology typical distributed systems approaches simply account possibilities assumptions contrary high node availability global knowledge 
system nodes offline norm exception 
replication system take account important characteristics participating peers 
systems typically overlay network order impose interconnection structure dht 
abstracts away underlying network characteristics physically connect peers 
convenient overlay may fail exploit locality properties optimizations evident physical network considered 
furthermore systems aim distribution data uniform random fashion 
fails consider capacities individual nodes 
slow machine connected home network handle nearly load high server connected internet backbone 
data replication involves load distribution important characteristics system topology aware capacity aware 
having framework aspects problem proceed discuss possible solutions 
solutions data consistency issues high churn rate 
dht effective solution problem maintaining lookup capabilities face high churn rate 
underlying dht maintenance algorithms maintain structure overlay network face node joins failures 
approach taken systems oceanstore kubiatowicz past rowstron druschel ivy muthitacharoen cfs dabek squirrel iyer backslash datta waldvogel 
noted dhts effectively deal high churn rate deal lookup level 
dht guarantee key map node face nodes joining failing 
ensuring actual data survives separate problem addressed 
unstructured system data consistency applications far common 
situations infrastructure desired sharing documents nodes moving data create strict structure desired 
peer olap uses unstructured network share cached results peers engaging line analytical pro cs web data management winter survey data management peer peer systems table iv 
data consistency challenges solutions challenge solutions replication solutions caching high churn rate maintain online replicas need maintain estimated global information probability cached data methods store replicas successors chord ring maintain replicas nodes closest dht dht maintain lookup lack global knowledge estimated global information global knowledge rumor spreading issue help optimize cache dht ment necessary low online probability assume peers won rejoin maintain concern replicas set online peers caching peers share cache pull techniques update peers available unknown varying node ignored nodes advertise cache share capacity capacity replica placement choose overlay topology inde capacities ignored dht lo ignored pendent physical properties dht locality ogy properties updating replicas reduc push updates active assume data doesn ing staleness pull updates replica go stale web expiry required store updates node specific ttl conditional gets log entries update replicas dht index modified cessing olap queries 
system peer searching cached result guaranteed locate documents 
possible unstructured networks structured overlays dhts natural approach data consistency applications 
recall dealing applications involving primitives caching replication 
discuss challenges specific 
table iv summarizes information 
replication 
keeping replicas consistent system challenging task 
major challenge maintaining data continuity 
context systems reduces problem maintaining sufficient number replicas order ensure data lost 
waldvogel addresses problem dht takes pair replica number document id key dht 
order perform lookup particular document particular replica number specified 
example lookup replica fails user perform lookup replica 
past rowstron druschel persistent storage utility performs replication closer dht layer 
replicas placed nodes nodeids closest docid underlying pastry dht 
approaches ivy muthitacharoen cfs dabek oceanstore kubiatowicz rely underlying dht provide necessary replication 
case ivy cfs rely dhash dabek dht places replicas successors chord ring node storing document 
primary replica fails cs web data management winter alex sung successor immediately takes 
major problem addressed replication systems issue updating replicas 
distributed file systems cfs provide read access avoids problem 
systems past store immutable data implies data added network modified 
systems sidestep problem updating replicas 
method updating replicas highly dependant mechanism store replicas 
waldvogel updating replicas simply matter updating replica number document name pairs 
oceanstore updates disseminated spanning tree built tapestry dht 
ivy stores updates node log entries 
logs stored data dht node wishes retrieve data apply updates log snapshot 
done datta push pull technique update replicas 
node updates document performs push update nodes storing replicas 
node comes back online wishes update copy replica performs pull contacts nodes storing replica retrieves latest copy 
node capacity ignored deciding place replicas 
system considers node capacity past nodes advertise capacity disk space free network performs intelligent distribution process information 
space limited network choose replicate popular files popular files order balance load 
caching 
dealing churn low online probability system particularly important caching applications goal maintain availability cached data simply cache provide improved performance 
node containing specific document leaves network overhead required move cache neighbouring node greater effort required retrieve specific document original source original web server case web cache 
squirrel iyer takes approach allows option leaving node transfer cache neighbours 
peer olap done attempt maintain cached data departing node 
having lack global knowledge caching application pose significant problem long lookups particular data item performed 
goal performance determining number cached copies document network critical functioning system 
knowing information caching algorithms improved load balancing efficiency purposes global knowledge achieve required 
example squirrel iyer directory scheme maintains list nodes contain cached copy particular document 
dht lookup document resolves node home node stores list cached copies 
list kept fixed length order limit amount redundant caches network 
global knowledge peer olap help lookup procedure locate desired document reasonably achieved unstructured network 
unstructured networks flooding algorithm employed search results cs web data management winter survey data management peer peer systems limited local nodes overlay 
major challenge non caching applications reducing amount stale data returned requestor 
traditional web proxy cache expiry information attached page conjunction conditional gets discussed section 
web caching strategies employ weak consistency semantics reducing staleness 
squirrel iyer uses approach stale copy document detected stale copies effectively removed requests re cached nodes number caches maintained document 
cooperative caching schemes consistency approach hier gd zhu takes idea squirrel step sharing cached objects organizations 
summary systems provide decentralized approach solving classical problems replication caching 
offer advantages traditional centralized approaches organic scaling costly infrastructure fault tolerance 
benefits come cost 
approaches address big challenges maintaining data continuity face nodes frequently joining leaving keeping replicas consistent updates data occur 
problems addressed literature done order take ideas implementation phase 

survey examined data management issues context data sharing systems 
particular identified architecture systems 
architecture peer contains query interface data management layer network sublayer 
identified main issues addressed systems locating data query processing data integration data consistency 
component classified problems solutions addressed current 
summarize main classifications open problems directions 
file sharing systems user satisfaction utmost importance 
systems tradeoff user satisfaction incentive share 
nature systems entails easily abused selfish peers 
existence systems relies contributions individual peers 
striking balance user satisfaction contribution difficult 
believe file sharing systems truly succeed incentive share built system 
characteristics unstructured file sharing systems believe continue successful supernodes global file ids automatic neighbour selection anonymity 
finding model encourages users share open problem area 
problem observed current file sharing systems kazaa high pollution rate liang 
individuals purposely name files different contained file 
open problem area build trust reputation elements system reduce problem 
overlay networks extremely hot area research particularly cs web data management winter alex sung study dhts 
dhts advantages ability scale remains issues need adequately addressed 
dhts overlay network criticized view underlying network 
systems skipnet take step solving problem 
attractive properties dhts come uniform distribution data network 
balancing data locality fast lookup times robustness issue remains addressed 
outstanding issues preventing dhts widely adopted lack user incentive limited api flexibility 
structured overlay dht participating node manage keys potentially data random users system 
overhead buy required single peer left users wary 
issue needs addressed building application flexibility dhts 
application development top dhts limited due lack rich interface 
extending basically key value lookup provided dhts remains open issue area 
heterogeneity systems sharing structured data challenging issue received lot attention 
technologies popular different domains required deal inherent differences way peers represent data 
schema data mappings data integration methods commonly systems share structured data peers 
current trends pushing representing data defined structures allow easier mapping data peers 
creating semantic mappings legacy data remains area requires research attention 
cases semantic mappings exist remains open research problems 
research direction taken database systems compute mapping compositions data sets 
suppose mapping exists peer peer wish compute mapping information loss 
query processing evolved supporting simple file search keywords sophisticated queries operate structured data 
integrating semantic structure mapping techniques distributed query processing systems hot research topic 
query processing research attempts adapt complex query types range queries aggregate queries multiattribute queries settings 
estimating goodness query results remains open issue query processing systems 
assumption users usually interested accurate results hold sophisticated data sharing applications 
applications involving replication caching data consistency issues face specific challenges 
example maintaining minimum number replicas ensure data continuity difficult problem peers frequently joining leaving network 
challenge propagating updates system order maintain replica cache consistency 
research data consistency developing working systems address issues 
particular systems aim provide probabilistic guarantees cs web data management winter survey data management peer peer systems strict consistency 
implementing caching schemes distributed file systems dhts major focus research area 
needs done order take ideas implementation phase 
provided architecture data sharing systems identified major challenges faced component 
data sharing systems hot area research continue challenges adequately addressed 
aberer mauroux hauswirth 
start making sense chatty web approach global semantic agreements 
journal web semantics december 
aberer mauroux hauswirth 
chatty web emergent semantics gossiping 
www proceedings twelfth international conference world wide web 
acm press 
adar huberman 
free riding gnutella 
tech 
rep xerox parc 
august 
andersen 
overlay networks networking top network 
acm computing reviews hot topic essay 
xu 
scalable efficient range queries grid information services 
proceedings ieee international conference computing 
arenas kementsietsidis miller mylopoulos 
project data integration data coordination 
acm sigmod record 
aspnes shah 
skip graphs 
soda proceedings fourteenth annual acm siam symposium discrete algorithms 
society industrial applied mathematics philadelphia pa usa 
bernstein giunchiglia kementsietsidis mylopoulos serafini 
data management peer peer computing vision 
workshop web databases webdb 
bharambe agrawal seshan 
mercury supporting scalable multiattribute range queries 
sigcomm comput 
commun 
rev 
malkhi 
study privacy file sharing networks 
tech 
rep leibniz research center hebrew university jerusalem israel 
birman 
technology challenges virtual overlay networks 
proceedings ieee workshop information assurance security united states military academy 
west point ny usa 
bittorrent 
bittorrent 
www bittorrent com 
cai frank 
rdfpeers scalable distributed rdf repository structured peer peer network 
www proceedings th international conference world wide web 
acm press new york ny usa 
cai frank chen szekely 
maan multi attribute addressable network grid information services 
grid proceedings fourth international workshop grid computing 
ieee computer society washington dc usa 
castro druschel kermarrec nandi rowstron singh 
splitstream high bandwidth content distribution cooperative environments 
proceedings nd international workshop peer peer systems iptps 
berkeley california usa 
chawathe ratnasamy breslau lanham shenker 
making gnutella systems scalable 
sigcomm proceedings conference applications technologies architectures protocols computer communications 
acm press new york ny usa 
cs web data management winter alex sung clarke miller hong sandberg wiley 
protecting free expression online freenet 
ieee internet computing 
clarke sandberg wiley hong 
freenet distributed anonymous information storage retrieval system 
international workshop designing privacy enhancing technologies 
springer verlag new york 
cohen 
incentives build robustness bittorrent 
proceedings st workshop economics peer peer systems 
berkeley california usa 
cox muthitacharoen morris 
serving dns peer peer lookup service 
iptps revised papers international workshop peer peer systems 
springer verlag london uk 
crespo garcia molina 
routing indices peer peer systems 
icdcs proceedings nd international conference distributed computing systems icdcs 
ieee computer society washington dc usa 
acuna martin nguyen 
planetp gossiping build content addressable peer peer information sharing communities 
hpdc proceedings th ieee international symposium high performance distributed computing hpdc 
ieee computer society washington dc usa 
dabek kaashoek karger morris stoica balakrishnan 
building peer peer systems chord distributed lookup service 
hotos proceedings eighth workshop hot topics operating systems 
ieee computer society washington dc usa 
dabek kaashoek karger morris stoica 
wide area cooperative storage cfs 
sosp proceedings eighteenth acm symposium operating systems principles 
acm press new york ny usa 
datta hauswirth aberer 
updates highly unreliable replicated peer peer systems 
icdcs proceedings rd international conference distributed computing systems 
ieee computer society washington dc usa 
feldman garcia martinez 
peer peer privacy anonymity 
unpublished 
doan 
learning live semantic heterogeneity 
dagstuhl seminar machine learning semantic web 
www smi ucd dagstuhl proceedings 
doan madhavan domingos halevy 
learning match ontologies semantic web 
vldb journal 
edonkey 
edonkey overnet 
www edonkey com 
edutella 
edutella project 
edutella jxta org 


www com 
faloutsos faloutsos faloutsos 
power law relationships internet topology 
sigcomm proceedings conference applications technologies architectures protocols computer communication 
acm press new york ny usa 
fasttrack 
fasttrack peer peer technology 
www fasttrack nu 

peer peer technologies protocols 
matrix tcd neo ba fasttrack 
wang jeffery 
processing queries large peerto peer system 
proceedings conference advanced information systems engineering caise 
ganesan gummadi garcia molina 
canon major designing dhts hierarchical structure 
icdcs proceedings th international conference distributed computing systems icdcs 
ieee computer society washington dc usa 
bawa garcia molina 
online balancing range partitioned data applications peer peer systems 
proceedings th international conference large databases vldb 
gnutella 
gnutella 
rfc gnutella sourceforge net 
cs web data management winter survey data management peer peer systems 
usability privacy study kazaa file sharing 
chi proceedings conference human factors computing systems 
acm press 
gummadi gummadi gribble ratnasamy shenker stoica 
impact dht routing geometry resilience proximity 
sigcomm proceedings conference applications technologies architectures protocols computer communications 
acm press 
gummadi dunn saroiu gribble levy zahorjan 
measurement modeling analysis peer peer file sharing workload 
sosp proceedings nineteenth acm symposium operating systems principles 
acm press 
gupta agrawal abbadi 
approximate range selection queries peerto peer systems 
proceedings biennial conference innovative data systems research cidr 
halevy ives suciu tatarinov 
schema mediation peer data management systems proceedings international conference data engineering icde 
halevy ives suciu 
schema mediation large scale semantic data sharing 
vldb journal 
harvey jones 
efficient recovery organizational disconnects skipnet 
proceedings nd international workshop systems 
harvey jones saroiu theimer wolman 
skipnet scalable overlay network practical locality properties 
proc 
th usenix symp 
internet tech 
syst 
usits 
acm press 
heckmann bock 
edonkey protocol 
tech 
rep kom tr multimedia communications lab darmstadt university technology 
december 
heckmann bock steinmetz 
integrated publication information systems information knowledge environments essays dedicated erich neuhold occasion th birthday 
lecture notes computer science vol 

springer verlag gmbh chapter peer peer content distribution network 
hellerstein 
network data independence 
sigmod rec 

howard kazar menees nichols satyanarayanan sidebotham west 
scale performance distributed file system 
acm trans 
comput 
syst 

huebsch hellerstein lanham stoica 
querying internet pier proceedings th int 
conf 
large data bases vldb 
hughes coulson 
free riding gnutella revisited bell tolls 
draft www comp lancs ac uk computing users papers pdf 
iris 
project iris infrastructure resilient internet systems web site net 
iyer rowstron druschel 
squirrel decentralized peer peer web cache 
podc proceedings annual symposium principles distributed computing 
acm press 
jain mahajan wetherall 
study performance potential dht overlays 
proceedings th usenix symposium internet technologies usits march 
kaashoek karger 
koorde simple degree optimal distributed hash table 
proceedings nd international peer peer systems workshop iptps 
california usa 
ng ooi papadias tan 

adaptive peer peer network distributed caching olap results 
sigmod proceedings acm cs web data management winter alex sung sigmod international conference management data 
acm press new york ny usa 
mylopoulos 
distributed rule mechanism multidatabase systems 
springer verlag lncs 
karp ratnasamy rhea shenker 
adoption dhts public dht service 
rd international peer peer systems workshop iptps 
acm press 

kazaa fasttrack file formats 
home nl 

kazaa media desktop 
www kazaa com 
kementsietsidis arenas miller 
managing data mappings project 
proceedings international conference data engineering icde 

kementsietsidis arenas miller 
mapping data peer peer systems semantics algorithmic issues 
sigmod proceedings acm sigmod international conference management data 
acm press 
kubiatowicz bindel chen czerwinski eaton geels gummadi rhea weatherspoon wells zhao 
oceanstore architecture global scale persistent storage 
asplos ix proceedings ninth international conference architectural support programming languages operating systems 
acm press new york ny usa 

protocol specification 
tech 
rep leibniz research center hebrew university jerusalem israel 
kumar xu zegura 
efficient scalable query routing unstructured peer peer networks 
ieee infocom 
lenzerini 
data integration theoretical perspective 
proceedings st symposium principles database systems pods 

liang kumar ross 
understanding kazaa 
cis poly edu ross papers pdf 
liang kumar ross 
kazaa overlay measurement study 
proceedings th ieee annual computer communications workshop 
bonita springs florida 
liang kumar xi ross 
pollution file sharing systems 
cis poly edu ross papers pollution pdf 
loser naumann 
semantic overlay clusters super peer networks 
proceedings st international workshop databases information systems peerto peer computing 
ser siberski wolpers nejdl 
information integration peer peer networks 
proceedings conference advanced information systems caise 

lv cao cohen li shenker 
search replication unstructured peer peer networks 
ics proceedings th international conference supercomputing 
acm press new york ny usa 
waldvogel hurley 
dynamic replica management distributed hash tables 
tech 
rep rz ibm technical report 
madhavan halevy 
composing mappings data sources 
proceedings th vldb conference 
malkhi 
viceroy scalable dynamic emulation butterfly 
proceedings symposium principles distributed computing podc 
acm press 
maymounkov mazieres 
kademlia peer peer information system xor metric 
st international peer peer systems workshop iptps 
acm press 
cs web data management winter survey data management peer peer systems poulovassilis 
defining peer peer data integration view rules 
springer verlag lncs 
muthitacharoen morris gil chen 
ivy read write peer topeer file system 
sigops oper 
syst 
rev si 
cheng kumar savage 
structured superpeers leveraging heterogeneity provide constant time lookup 
proceedings third ieee workshop internet applications 
ieee computer society washington dc usa 
napster 
napster 
www napster com 
nejdl wolf 
edutella networking infrastructure rdf 
proceedings world wide web conference 
nejdl wolf qu decker sintek naeve nilsson palm risch 
edutella networking infrastructure rdf 
www proceedings eleventh international conference world wide web 
acm press new york ny usa 
ng ooi tan zhou 
peerdb system distributed data sharing 
intl 
conf 
data engineering icde 
maier tufte 
distributed query processing catalogs peer peer systems 
proceedings conference innovative data systems research cidr 
plaxton rajaraman richa 
accessing nearby copies replicated objects distributed environment 
spaa proceedings ninth annual acm symposium parallel algorithms architectures 
acm press new york ny usa 
sips 
bittorrent file sharing system measurements analysis 
proceedings th international workshop peer peer systems iptps feb 
pugh 
skip lists probabilistic alternative balanced trees 
commun 
acm 
rahm bernstein 
survey approaches automatic schema matching 
vldb journal 
ratnasamy francis handley karp 
scalable content addressable network 
sigcomm proceedings conference applications technologies architectures protocols computer communications 
acm press 
ritter 
gnutella scale really 
www com jpr doc gnutella html 

query routing gnutella network 
unpublished 
available rfc gnutella sourceforge net src html 
rowstron druschel 
pastry scalable decentralized object location routing large scale peer peer systems 
proceedings th ifip acm int conf 
distributed systems platforms middleware lncs 
acm press 
rowstron druschel 
storage management caching past largescale persistent peer peer storage utility 
sosp proceedings eighteenth acm symposium operating systems principles 
acm press new york ny usa 
gupta agrawal abbadi 
query processing peer peer data sharing systems 
tech 
rep university california santa barbara 
gupta agrawal abbadi 
peer peer framework caching range queries 
icde proceedings th international conference data engineering 
ieee computer society 
unger 
search methods networks survey 
cs innovative internet community systems cs 
sandberg goldberg kleiman walsh lyon 
design implementation sun network filesystem 
proceedings summer usenix conference 
portland usa 
cs web data management winter alex sung saroiu gummadi dunn gribble levy 
analysis internet content delivery systems 
sigops oper 
syst 
rev si 
saroiu gummadi gribble 
measurement study peer peer file sharing systems 
proceedings multimedia computing networking 
satyanarayanan kistler kumar okasaki siegel steere 
coda highly available file system distributed workstation environment 
ieee trans 
comput 

maniatis baker 
peer peer caching schemes address flash crowds 
iptps revised papers international workshop peer peer systems 
springer verlag london uk 
stoica ratnasamy shenker surana zhuang 
internet indirection infrastructure 
iptps revised papers international workshop peer peer systems 
springer verlag london uk 
stoica morris liben nowell karger kaashoek dabek balakrishnan 
chord scalable peer peer lookup protocol internet applications 
sigcomm proceedings conference applications technologies architectures protocols computer communications 
acm press 
tatarinov ives amd halevy suciu dong miklau mork 
piazza peer data management project 
acm sigmod record 
triantafillou pitoura 
unifying framework complex query processing structured peer peer data networks 
proceedings st international workshop databases information systems peer peer computing 
roussopoulos 
adaptive probabilistic search peer peer networks 
proceedings rd international conference peer peer computing 
ieee computer society washington dc usa 
ullman 
information integration logical views 
proceedings th int 
conf 
database theory icdt 
lecture notes computer science pages 
springer verlag 
valduriez 
data management large scale systems 
proceedings th int 
conf 
high performance computing computational sciences 

world wide web consortium semantic web activities 
www org sw 
wiederhold 
mediators architecture information systems 
computer 
wolf nejdl 
progressive distributed top retrieval peer peer networks 
appear st icde wolpert 
stacked generalization 
neural networks 
xu embley 
combining best global view local view data integration 
information systems technologies applications 

zhao huang stribling rhea joseph kubiatowicz 
tapestry resilient global scale overlay service deployment 
ieee journal selected areas communications january january 
zhu hu 
exploiting client caches approach building large web caches 
proceedings international conference parallel processing icpp 
survey data management peer peer systems submitted april st cs web data management winter 
