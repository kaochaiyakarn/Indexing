hierarchical planning coordinated plan execution characters presents application hierarchical transition network htn planning squad military simulation 
hierarchical planner produces collaborative plans squad real time generating type highly coordinated behaviours typical armed combat situations involving trained professionals 
detail extensions htn planning necessary provide real time planning subsequent collaborative plan execution 
full hierarchical planning feasible game context employ planner compilation technique saves memory allocations speeds symbol access 
additionally planner paused resumed making possible impose hard limit computation time single frame 
collaborative plan execution describe synchronization extensions htn framework allowing agents participate plans act parallel sequence single plans 
demonstrate htn planning expressive powerful real time planning framework tightly coupled groups game characters 
non player characters today computer games utilize finite state rule designs react gameplay events 
major game engines provide scripting languages incorporate finite state machine directly source code epic games 
possible produce sophisticated multi step intelligent behaviours methods doing tedious error prone generalize characters new situations 
real time planning suggested alternative produce automatically generated multi step behaviors characters 
individual characters groups ais need ordinate 
state machines planners individuals address issue existing games employ largely ad hoc solutions ai 
ai controller characters upcoming military training simulation 
employs hierarchical task copyright american association artificial intelligence www aaai org 
rights reserved 
peter ian davis mad doc software road suite ma com network htn planner simultaneously plan members police unit 
htn framework allows assign tasks available squad members decomposing selecting multiple possible strategies automatically 
furthermore controller extends htn paradigm specifying synchronization plan execution components allowing squad mates wait complete actions execute actions simultaneously working shared plan 
planner bases decisions common squad level knowledge base includes individual knowledge example squad member see enemy global squad knowledge example squad member assigned 
system includes compiler translates htn domain specification code allowing optimizations speed memory 
introduce method distributed single planning run multiple frames game providing ability cap planning time fixed fraction time spent produce frame 
demonstrates hierarchical real time planning teams artificial characters feasible game context provides succinct global behavior specification engineers designers automatically generate complex coordinated behaviors characters 
related idea planning existed beginnings field artificial intelligence planning algorithms applied commercial interactive games employed strips planner fikes hart nilsson give intelligence enemies person shooter 
academic realm htn planning applied pick strategies unreal tournament bots lee urban munoz avila dini provide overview various planning algorithms apply computer games 
roy previously employed plan recognition provide contextual speech understanding collaborative computer games roy press game htn planning system erol hendler nau shop nau borrowing elements planner compilation techniques nau 
broader context collaborative plans discussed subtype discussed grosz kraus 
hierarchical planning follow shop simple hierarchical ordered planner domain specification implementation means planner plans tasks order accomplished 
similar shop planner planner supports various symbolic numeric computations external function calls 
htn planning task htn planning compound primitive nature 
compound tasks decompose tasks primitive tasks leaves task network directly executed 
planning domain consists methods specify decompose compound tasks operators accomplish primitive tasks axioms prove logical primitives accomplishing tasks 
method branches operators task providing multiple ways accomplishing task 
method branch operator precondition dictating applies current state world 
operators change state world adding deleting 
final plan linear sequence operators accomplishes task sequence exists 
planner performs search decomposing tasks domain methods operators gathering valid bindings logical expressions proceeds 
goals design provide centralized general planning mechanism domain chose shop general logical expression language incorporating logic planning game specific code 
mean time memory spent general logical proofs accompanying bookkeeping allows cleanly separate domain specification planner game code re useable game types 
address performance issues domain compilation interruptible planning discussed 
state world specified collection logical predicates denoted tn head predicate tn constants numbers 
operators methods marked operator method tags respectively contain head predicate contain variables terms denoted question mark 
operator specifies precondition logical expression evaluated current variable bindings current state add delete list ground predicates added deleted world state operator applied 
method consists method branches branch turn constituted precondition list tasks branch decomposes parent task 
provide examples planning domains section 
htn planning applied game sensory system deposits knowledge htn state representation 
example squad members see enemies doors tell enemies restrained dead 
default game runs planner fixed time intervals 
squad members part number plans simultaneously restriction perform plan steps time 
certain events force immediate replanning squad member dying 
planner domain single top level task associated method prioritizes possible sub tasks 
planner plan task method branches adopting shop semantics planner fact fail find plan method branch precondition fulfilled branch fails 
shows specification htn methods accomplishing restraining suspects squad team members 
general method squad restrain finds closest squad member restrained target 
helper method attempts find second squad member close perform complement restrain covering event raised weapon closest squad member perform restrain suitable partner 
predicates directly match knowledge deposited state sensory system 
proven axioms example different 
call term calls external library function measure distance squad member suspect restrain decide squad member close suspect perform autonomous restrain 
assign term assigned result expression variable distance sort clause enforces bindings precondition sorted variable value distance 
simple example helper method directly expands primitive tasks accomplished operators 
shop distinguish internal marked external marked operators 
internal operators effects applied engage squad members action external operators cause squad member perform action game world may result state knowledge changing 
example restraining suspect cause sensory system add restrained fact suspect world state 
reserve operator checks argument marked reserved marks reserved 
prevents subsequent planning run reserving target different purpose purpose repeatedly 
shows domain graph squad planner 
decomposition methods methods operators shown arrows 
planning efficiency time slicing planning general htn planning particular usually implemented recursive search process generating method squad restrain helper squad target precondition restrain complement second closest squad member target sort squad sure different squad member performing restrain different squad squad sure squad member isn orders order squad measure distance retrain target assign call squad target don perform complement far away call task decomposition reserve parties involved reserve squad reserve squad reserve target perform restrain restrain squad target parallel perform complement restrain complement squad target point go restrain done global block squad free parties involved free squad free squad free target second branch precondition fails lonely restrain precondition precondition elements case covered parent task reserve parties involved reserve squad reserve target perform restrain restrain squad target wait till restrain done don free target prematurely global block squad free free squad free target method squad restrain precondition closest squad member target sort find target target enemy enemy target pick squad member squad sure target alive dead target measure distance squad member target assign call squad target autonomously restrain far away call task decomposition know valid restrain situation helper decide perform complement squad restrain helper squad target shop code htn methods autonomous restraining finish action idle cleanup dead cleanup dead team poke dead poke dead helper poke block global block cover target team restrain self cover combat start arrive start orders clear handle orders clear take control goto combat clear callout restrain helper team combat squad clear cover callout restrain restrain complement team tactical play vo arrive point team advance squad advance open combat reserve free cover clear callout arrive point free targets play advancing vo orders clear goto cancel order control cleanup cancel plans control relationships domain methods external internal operators squad domain possible plans 
hard predict limit long planning search take especially setting world changes dynamically realtime game 
way planners efficient highly specific planning problem question 
example limits planner consider small static array typed variables specify world state applicable particular game 
doing limits generalizability planner needs heavily revised function game actual game data structures change scope world state changes development 
furthermore knowledge rules planner embedded game code making harder keep modular general 
full logic representation planning domain world state hand implies level abstraction indirection sacrifices efficiency favour gaining expressive power generality clean separation game code 
allows enforce centralized knowledge representation planner works ensuring decision game easy access full state knowledge decision 
eliminate problem efficiency introduced decision adopt strategies domain compilation time slicing planning process 
domain compilation part planner compilation technique introduced planner nau compiles domain problem unique instance planner solves exactly problem specified 
problem state highly dynamic making impossible compile code domain static optimized compilation 
introducing domain compilation lets turn dynamic arrays static fixed size arrays allows replace arbitrary names variables predicates enumerations possible pre allocate structures needed game avoid memory fragmentation allocation overhead planning 
domain compilation goes long way making single planning step efficient prevent recursion generation complex plans 
long planning session performed single frame produces computation time spike frame unacceptable game 
eliminate problem implemented time slicing htn planner allows pause planning process time resume 
way planning spread multiple frames guarantee planner take allocated time frame finishing planning frames characters responsible game events 
able pause planning time produce logical bindings generators produce binding time eliminating recursion produce nested bindings 
addition outer planning loop drives search process recursively looking appropriate methods operators solve current problem saves stack 
stack frame consists 
current method operator tried 
case method method branch tried 
generator current operator method branch precondition 
current list tasks solved 
flag indicating current method branch branches tried method flag true 
planner exceeded allocated time frame begins unwinding current recursion 
frame continues planning re saved stack frames level recursion arriving back place left search 
plan execution standard htn planning specifies little plan execution notion primitive tasks carried agent sequence specified plan 
shop adds distinction internal external operators stops 
scenario discussed real time execution plans involving characters requires specification execution semantics blocking actions synchronization handling action failures character deaths 
execution semantics game actions may take time 
executing action mark squad member busy 
assume squad members busy exactly action time 
actions may mark squad members busy despite time execute 
example voice overs may play actions executed 
mark squad member busy parameterized voice overs plans play actions may require waiting voice completion squad member start advancing area clear completed 
squad member marked busy actions involving squad member blocked including actions mark squad member busy 
restrain method example free operator squad execute squad member bound variable finished restrain action 
actions involving actors freely execute example second squad member performs restrain complement performing restrain 
planner continuously produces plans plan execution squad members involved plans time 
action mark squad member busy executed plan execution proceeds action plan 
execution loop guarantees actions executed immediately meaning world state changes actions finish new plans produced 
plan consisting actions engage actors executed completely frame interleaving plans 
guaranteeing immediate execution actions provides atomicity operator groups double reserve restraining example making sure possible plan reserve target current plan reserved squad member 
synchronization facilities plan execution semantics covered far actions different actors carried parallel general plan execution proceeds despite character carrying action 
interpreting plans way allows parallelism necessary team action provide way actor wait plan execution halt actor finishes action 
support synchronization introduce special internal operators block takes actors arguments marks busy second finishes current action 
global block waits execution plan appears actor specified argument finishes current action 
plans continue executing 
finish action forcefully finishes actors current action waiting finish normally 
example shows block free operators executed actor bound squad finishes restrain action 
operator left target freed immediately squad member freed restrain finishes second freed complement finishes 
block operator especially useful making squad member wait example wait command voice finish acting order 
finish action allows interruption actions finish guarding suspect action game 
world state updating mentioned updating world state planning complicated plan execution planning 
planning operator effects immediate effects completely specified operator description 
execution operators take time execute may fail achieve effects effects may internal planning system sensing game world 
introduce way distinction effects external operators predicates change marked change operator starts executing operator stops executing external plan execution 
example restrain operator begins executing adds predicate restraining squad target world state plans restrain find current 
action finishes operator removes predicate 
planning operator adds predicate restrained target world state signal effect application 
execution 
sensory system start perceiving target restrained restrain completes add predicate 
restrain fails say enemies appear fought predicate added planner may find similar plan perform restrain 
squad behaviors sketched htn squad planning execution system described implement complex team behaviours game 
squad members pair perform autonomous restraining suspects investigative actions 
ordered clear room proceed pairs alternatingly advancing area announced clear needed calling doors proceed fighting potential continuing 
logic gracefully handles death squad members allowing asymmetric clear behaviours continue complete 
shown application htn planning generating behaviours small teams computer games 
plain htn framework provides basis discussed necessary perform compile time optimization planner achieve suitable performance modern real time video game 
importantly detailed execution framework htn plans handles plans actors addressing issues parallelism synchronization time sensitivity sensed operator effects 
framework currently handles failed plans limited cases case described battle interrupts restrain plan handle general operator sub plan failure 
step adding plan failure handling collect preconditions step plan tree check step executed preconditions hold 
action fails reason system re plan 
graceful failure modes may possible re planning failed subtrees 
intend add functionality near 
dini van lent carpenter iyer 
building robust planning execution virtual worlds 
proceedings conference artificial intelligence entertainment 
epic games 

unreal engine 
www com html technology ue shtml 
erol hendler nau 
htn planning complexity expressivity 
proceedings american association artificial intelligence 
fikes hart nilsson 
learning executing generalized robot plans 
artificial intelligence 
roy 
speaking understanding situated speech computer role playing games 
proceedings artificial intelligence digital entertainment 
roy press 
situated language understanding filtering perceived affordances 
cognitive science 
grosz kraus 
collaborative plans complex group action 
artificial intelligence 
lee urban munoz avila 
hierarchical plan representations encoding strategic game ai 
proceedings conference artificial intelligence entertainment 
nau 
general approach synthesize problem specific planners 
technical report university maryland 
cs tr umiacs tr 
nau au murdock wu 
shop htn planning system 
journal artificial intelligence research 

agent architecture considerations realtime planning games 
proceedings conference artificial intelligence entertainment 
