formal method development agent systems holcombe dept computer science city college street thessaloniki greece tel 
fax 
city academic gr dept computer science university sheffield regent court portobello street sheffield dp uk holcombe dcs shef ac uk formal method development agent systems advances testing verification software formal specifications system built reached point ideas applied powerful way design agent systems 
software engineering research highlighted number important issues importance type modelling technique careful design model enable powerful testing techniques automated verification behavioural properties system need provide mechanism translating formal models executable software simple transparent way 
chapter presents detailed comprehensive account ways modern software engineering research applied construction effective reliable agent software systems 
specifically intend show simple agents motivated biology modelled machines 
modelling facilitate verification testing agent model appropriate strategies model checking testing developed machine method 
addition modular construction agent models feasible machines provided communicating features allow simple models interact 
agent encapsulated computer system situated environment capable flexible autonomous action environment order meet design objectives jennings 
fundamental concepts associated dynamic reactive system agent situated reacting environment holcombe environment precisely ill specified completely unknown involves identifying important aspects environment way may change accordance activities agent agent responding environmental changes changing basic parameters possibly affecting environment 
ways agent reacts undergoes internal changes produces outputs affect environment 
agents highly dynamic systems concerned essential factors set appropriate environmental stimuli inputs set internal states agent rule relates determines agent state change particular input arrives agent particular state 
challenges emerge intelligent agent engineering develop agent models agent implementations correct 
holcombe criteria correctness initial agent model match requirements agent model satisfy necessary properties order meet design objectives implementation pass tests constructed complete functional test generation method 
criteria closely related stages agent system development modelling verification testing 
agent oriented software engineering aims manage inherent complexity software systems wooldridge ciancarini evidence suggest methodology proposed leads correct systems 
decades strong debate formal methods achieve goal 
academics practitioners adopted extreme positions formal methods young 
apparent truth lies need formal methods software engineering general clarke wing specific cases proving applicability formal methods agent development shall see section 
software system specification centred models data types functional relational models spivey vdm jones axiomatic ones obj futatsugi 
led considerable advances software design lack ability express dynamics system 
transforming implicit formal description effective working system straightforward 
formal methods finite state machines wulf petri nets reisig capture essential feature change fail describe system completely little internal data data affected operation state transition diagram 
methods statecharts harel capture requirements dynamic behaviour modelling data informal respect clarity semantics 
far little attention paid formal methods facilitate crucial stages correct system development modelling verification testing 
chapter introduce formal method machines closely suits needs agent development time intuitive practical 
formal methods agent systems agent oriented engineering attempts formal methods focusing different aspects agent systems development 
formalise prs procedural reasoning system variant bdi architecture rao georgeff order understand architecture better way able move implementation refinement specification able develop proof theories architecture 
trying capture dynamics agent system rosenschein viewed agent situated automaton generates mapping inputs outputs mediated internal state 
brazier 
developed desire framework focuses specification dynamics reasoning acting behaviour multi agent systems 
attempt verify properties agent models true done model checking multi agent systems re existing technology tools benerecetti rao georgeff 
implementation agent systems focused program generation reactive systems formal transformation process 
wider approach taken fisher wooldridge utilise concurrent metatem order formally specify multi agent systems directly execute specification verifying important temporal properties system 
formal approach extensions uml accommodate distinctive requirements agents auml proposed odell 
chapter intend show simple agents motivated biology modelled machines 
modelling facilitate verification testing agent model appropriate strategies model checking testing developed machine method 
addition modular construction agent models feasible provided communicating features allow simple models interact 
tools developed machines briefly order demonstrate practicality approach 
machine definition machine general computational machine introduced eilenberg extended holcombe resembles finite state machine fsm significant differences memory attached machine transitions labeled simple inputs functions operate inputs memory values 
differences allow machines expressive flexible fsm 
machine models pushdown automata turing machines low level little specification real systems 
machines employ diagrammatic approach modelling control extending expressive power fsm 
capable modelling data control system 
data held memory attached machine 
transitions states performed application functions written formal notation model processing data 
functions receive input symbols memory values produce output modifying memory values fig 
machine depending current state control current values memory consumes input symbol input stream determines state new memory state output symbol part output stream 
formal definition deterministic stream machine holcombe tuple xm input output finite alphabet respectively finite set states possibly infinite set called memory type machine xm finite set partial functions map input memory state output new memory state state partial function state function type denotes state 
described state transition diagram initial state memory respectively 
machines core method integrated formal methodology developing correct systems 
memory input stream output stream fig 

example machine functions operating inputs memory si states 
general formal functions condition machine integrates control data processing allowing described separately 
machine formal method forms basis specification modelling language great potential value software engineers 
intuitive time formal descriptions data types functions written known mathematical notation 
machines extended adding new features original model hierarchical decomposition communication described 
features particularly interesting agent systems 
formal agent modelling biological processes behave agents example colony ants 
research behaviour order solve interesting problems dorigo di caro 
important task ants find food carry nest 
accomplished searching food random pheromone trails ants left return back nest deneubourg 
moving ant avoid obstacles 
food ant leave pheromone trail travelling back nest implicitly communicating ants destination source food may 
nest ant drops food 
clearly reactive agent receives inputs environment acts inputs state agent reactive agents fairly easily modelled fsm straightforward way specifying states inputs percepts state transitions fig 
fsm lacks ability model non trivial data structures 
complex tasks imagine actions agents determined values stored memory 
example agent may know position remember position food source position obstacles building map environment order task eventually efficient 
fsm variants brooks rosenschein agents complicated number states increases combinatorial fashion possible values memory structure 
machines facilitate modelling agents demand remembering reactiveness 
fig shows model ant searches food remembers food positions order set goals 
behaviour obstacle avoidance omitted simplicity 
move food looking food pheromone trail obstacle nest pheromone food pheromone pheromone nest space pheromone lifting food obstacle obstacle nest space space food space space moving freely obstacle fig 
finite state machine modelling ant behaviour move food find nest move nest lift food ignore food nest drop food move nest food got lost stay nest move find nest going back nest find food fig 

machine models ant lift food moving freely formally definition machines requires elements tuple 
input set consists percept coordinate perceived space nest food coord coord food basic type coord type integer coord set outputs defined set messages moving freely moving nest dropping food states agents nest moving freely food going back nest looking food 
state moving freely applies agent specific goal searches random food source 
state going back nest applies agent carrying food item way back nest 
state looking food applies agent goal remembers food previous explorations terrain 
memory consists elements agent carries current position agent sequence positions food exploration food coord coord seq coord coord move indicates food carried 
initial memory initial states respectively nil nest assumed nest position 
state partial function depicted state diagram fig 
type set functions form function name input tuple memory tuple output memory tuple condition 
example function definitions lift food lifting food food find food fpx food food food fpx food drop food nest food dropping food find nest nest nest verification agent models having designed model agent desirable verify corresponds requirements circumstances existence agent modelled way required properties true model 
model checking formal verification technique determines properties system satisfied model 
model checker takes model property inputs outputs claim property true counterexample falsifying property 
order model checking efficient way express model kind state machine ccs agent petri net csp agent common properties check occur eventually occur 
temporal logic model checking clarke property expressed formula certain temporal logic 
verification accomplished efficient breadth search procedure views transition system model logic determines specifications satisfied model 
approach simple completely automated major problem state explosion 
handled extent model checking variant symbolic model checking mcmillan 
model checking proved efficient formal verification techniques theorem proving burch 
hand model checking formal opposed simulation may reveal inconsistencies misconceptions model guarantee completeness model respect requirements 
bearing mind usual definition model labelled state transition graph called kripke structure kripke model checking utilises algorithms temporal logic formula verifies properties hold model 
kripke structure tuple non empty set states binary relation shows states related states prop truth assignment function shows propositions true state prop set atomic propositions 
temporal logic formulae ctl formulae constructed operators combined path quantifiers meaning paths meaning exists path 
basic ctl operators emerson halpern time requires property holds state eventually requires property hold state path requires property hold state path requires property hold path property holds release dual operator logic extended accommodate past properties agent system fml fisher wooldridge 
having constructed model agent machine possible apply existing model checking techniques verify properties 
require transformation model resembles kripke structure 
process exists called exhaustive refinement machine fsm results model ctl formula may applied 
exhaustive refinement suffers major disadvantages loss expressiveness machine possesses combinatorial explosion 
memory structure attached machine 
equivalent fsm resulting process refinement memory implicitly contained states 
impossible verify certain properties true memory instances states original machine model information lost refinement process 
properties contained model memory play role model checking respect properties 
exhaustive refinement may result possibly infinite state space properties included equivalent fsm making model checking impossible 
order apply model checking machines temporal logic extended memory quantifier operators mx memory instances mx exist memory instances basic temporal operators ctl form expressions suitable checking properties agent model 
resulting logic verify model expressed machine requirements prove certain properties implicitly reside memory machine true 
example agent task carry food nest example fig model checking verify eventually food dropped nest formula ag mx indicates element memory tuple 
formula states states machine true ant hold food exists path state eventually ant hold food 
example formula mx mx exists path ant eventually holds food previous states ant holds 
useful property checked nil ant holds food list empty 
new syntax semantics facilitate model checking machines ways expressiveness suited machine model effective reduction state space selective refinement original model 
complete testing agents previous section focused modelling agent verification models specified respect requirements 
having ensured model correct need ensure implementation correct time respect model 
achieved testing important assumption testing complete 
guarantee correctness implementation certain tests performed results correspond model specified 
holcombe testing method generalisation chow chow fsm testing 
proved testing method finds faults implementation holcombe 
method works assumptions specification implementation system represented machines machine corresponding specification machine corresponding implementation type 
assuming method requires machine satisfies design test conditions associated automaton minimal 
associated automaton machine conversion machine fsm treating elements input symbols 
design test conditions states type machines complete respect memory output distinguishable 
processing function called complete respect memory dom type called complete respect memory basic function able process memory values complete respect type called output distinguishable different processing functions produce different outputs memory input pair 
complete additional input symbols may introduced processing functions complete holcombe 
fig machine illustrates model ant looks food random follows pheromone trail find food nest 
input set space nest pheromone food 
machine satisfies design test conditions associated automaton minimal 
ignore food ignore space nest stay nest move nest moving freely food move nest ignore food move food lift food ignore nest lift food move food follow trail move food ignore nest fig 

machine satisfies design test conditions move ignore space requirements met method may employed produce test set associated automaton difference number states associated fsms 
test set consists processing functions associated automaton formula characterisation set state cover 
informally characterisation set set processing functions distinct states machine distinguishable 
state cover set processing functions states reachable 
sets agent machine fig stay nest move move food nest move move move food move food lift food derived test set model implementation considered fsm number states move move move food move move move move food move ignore nest move move food move lift food nest move move food lift food nest move food lift food nest move food lift food ignore space nest fundamental test function defined recursively converts sequences sequences inputs machine 
xm deterministic stream machine complete respect function tq called test function respect defined recursively holcombe tq empty input symbol tq tq path qn qn starting mn dom mn final memory value computed machine path input sequence tq tq test set containing sequences inputs ant machine space space pheromone space space space pheromone space nest space pheromone space food nest space pheromone food nest pheromone food nest pheromone food space nest test set produced proved find faults agent implementation 
testing process performed automatically checking output sequences produced implementation identical ones expected agent model 
agents aggregation behaviours agents modelled stand possibly complex machine shown previous section 
agent viewed set simpler components model various different behaviours agent 
fits principles complex agent systems decomposition abstraction organisation jennings 
approach reactive agents described subsumption architecture brooks behaviours communicate order result situated agent desired robust performance 
similarly 
developed method agents defined steps identifying elementary behaviours implied task identifying relationship elementary behaviours identifying organisational behaviours system 
methodology building communicating machines existing stand machine developed modelling split separate activities modelling machine components description communication components 
approach advantages developer need model communicating system scratch re existing models consider modelling communication separate distinct activities existing tools stand communicating machines 
discuss 
certain approaches building communicating system require brand new conceptualisation development system 
approach major drawback re existing models verified tested correctness 
agent systems components agent systems required 
desirable approach conceptualise system set independent smaller models need communicate 
need worry individual components model checking techniques testing applied appropriately linking components 
lead disciplined development methodology implies distinct largely independent development activities building models employing communication 
means existing languages tools modelling model checking testing useful extended support larger communicating systems 
theoretical approaches communicating machines proposed cowling barnard 
section describe focuses practical development communicating systems subsumes 
approach functions machine annotated read input communicating stream standard input stream 
functions may write communicating input stream machine 
normal output functions affected 
annotation solid circle port solid box port indicate input read component output directed component respectively 
example function fig accepts input model writes output model 
multiple communications channel single machine may exist 
example simple form communication ants 
assume ant responsible notify ant position food source 
order achieve communication machines modified illustrated fig 
function lift food machine model ant lift food ant food function find food machine model ant find food inx ant fpx food food food fpx food fpx function find food ant may modified accordingly write message port needed 
standard input stream channel receiving message machine port port standard output stream channel sending message fig 

example communicating machine component 
approach practical sense designer separately model components agent describe way components communicate 
allows disciplined development situated agents 
practically shall see components re systems thing needs changed communication part 
ant move nest drop food going back nest move nest ant find food move nest food moving freely lift food fig 

ant machine sends message food position ant machine utilizing communicating port 
communicating machines model collective foraging behaviour colony honey bees fully compatible rules foraging honey bees vries include specifications travelling nest source searching source collecting nectar source travelling back nest ant ant move transmitting information source dancing returning bee reaction bee nest dancing nest mate 
foraging bee modelled set independent behaviours constitute components agent 
fig shows behaviours foraging bee modeled simple machines input set memory tuple machine different memory inputs percepts functions 
states functions purpose named differently show modularity approach 
assumed bee perceives empty space fly space hive nest source nectar source amount nectar nectar bees foraging bees receiving bees understands lost orientation lost 
behaviour machine model traveling nest source space source bee pos source pos source searching source space source bee pos source pos flying collecting nectar source nectar nectar amount carrying traveling back nest nest space nest pos hive transmitting information source dancing space nest source bee pos source pos nest reacting information transmitting dancing space lost source pos status source pos flying freely fly source away source keep flying search flying fly back find source keep flying detect source fly back collect nectar carrying hive dancing nest fly flying ignore dance transfer nectar detect hive fly fly fly source nectar source carrying nectar hive find source nest keep fly loose source info get info dance fly flying source fig 

behaviours foraging bee modeled separately machine components 
memory machine holds information bee source nest positions bee pos source pos nest pos amount nectar carried nectar amount status employed unemployed 
example consider machine modelling dancing behaviour 
functions defined follows dancing bee pos source pos dancing bee pos source pos fly space bee pos source pos flying bee pos source pos fly nest bee pos source pos flying bee pos source pos find source source bee pos source pos source pos source pos keep fly space bee pos source pos keep flying bee pos source pos bee pos bee pos source pos set positions 
bee position calculated external function machine 
fig shows detail communication achieved directly various honey bees employed foraging bee sends source position foraging bee dancing behaviour dancing bee pos source pos reacting source pos bee pos source pos unemployed foraging bee reads source position function get info dance inx dancing source pos unemployed nil getting source info employed source pos 
foraging bee currently employed just ignores message ignore dance inx dancing source pos employed source pos ignoring source info employed source pos 
communication takes place foraging bee transfers amount nectar carrying receiving bee waiting hive 
reacting dancing nest dancing fly fly find source nest keep fly fly flying ignore dance dancing dancing loose source info get info dance fly flying source reacting behaviour foraging employed bee behaviour foraging unemployed bee fig 

example communicating behaviours employed bee sends information source position unemployed bee 
separate behaviours put communicating machine model 
fig shows complete foraging bee system component machines communicate channels 
machine works separately concurrently asynchronous manner 
machine read inputs communication channel standard input tape 
machine send message communication channel act input functions component 
shows extra component perception system bee provides percepts various behaviours 
addition machines modelled example machine builds environment map positions obstacles nest food items 
information held memory machine efficiently move environment model pro active behaviour agent 
modelling agent incremental providing components advance level intelligent behaviour 
foraging bee detect space detect nest detect bee space source space source traveling nest source searching source collecting nectar source transferring detect source got lost nest space detect nectar traveling back nest space nest source dancing space lost reacting dancing 
communicating machine modelling agent bee aggregation behaviours system works follows employed bee accepts inputs environment cause transitions machine components model individual behaviours 
having source collecting nectar appropriate transitions performed source environment machines bee returns hive sight foraging bee performs dancing shown earlier transmits information source position 
unemployed bee accepts input communication port changes status employed 
perceive inputs environment travels source 
process may repeated 
parallel bees asynchronous manner 
approach practical sense developer separately model components agent describe way components behaviours communicate 
components re systems thing needs changed communication part 
example behaviour avoiding obstacles component biology inspired agent foraging bees ants 
major advantage methodology lends modular model checking testing strategies machines individually tested components communication tested separately existing methodologies mentioned earlier 
multi agent models modelling multi agent systems requires consideration means communicating agents order coordinate tasks cooperate modelling artificial environments agents act imposes need exchanging messages agents environment 
example number ants modelled machines need interact environment contains seeds food items modeled 
ants may instances model class communicate environment order achieve desired behaviour lift heavy seed far abilities single agent fig 
behaviours omitted sake exposition 
ant capable lifting food item strength possesses bigger weight food item 
case cooperation ants necessary achieved communication ants food item machine 
method fig 
previous section describe communicating machines serve purpose 
ant walk nest carrying food lift food ant find nest nest food store find nest free walk continue free walk attempt lift find food free walk moving freely seed ground force applied force applied put force released lift lighter heavier put lift force applied force released force released lifted fig 

ants model cooperating lifting task communication environment addition may require agents resemble common set behaviours extra individual behaviours determine task characterise individuality 
example colony foraging bees bees responsible collecting nectar source ability inform location source dance foraging bee bees responsible storing nectar hive seely buhrman 
ability fly receive nectar situations modelled machines long way define classes models instances classes inherit generic behaviours chain hierarchy 
fig demonstrates multi agent system models colony honey bees environment various components source nest 
happens coordination achieved agent scheduling decomposition large task smaller tasks manageable individual agents 
ready components may complete multi agent system discussed 
components bear incompatibility rest agents communication interaction protocols may required 
easily imagine act synthetic glue agents modelling example kqml parsers finin contract net protocol davis smith 
nest receiving bee collecting nectar bee nectar detect space detect nest detect bee environment space nest source nectar foraging bee employed space source space source nest space space nest source space lost detect source got lost detect nectar traveling nest source searching source collecting nectar source transfer traveling back nest dancing reacting dancing lost source pos source foraging bee unemployed reacting dancing fig 

model honey bees multi agent system interaction environment 
tools machines modelling mathematical notation implies certain degree freedom especially far definition functions concerned 
order approach practical suitable development tools machines standard notation devised semantics fully defined 
aim notation machine definition language interchange language developers share models written different purposes fig 
avoid complex mathematical notation language symbols completely defined ascii code 
model developed consists model component machine coding referring possible communication component 
briefly model list definitions corresponding tuple 
language provides syntax built types integers booleans sets sequences bags operations types arithmetic boolean set operations definition new types definition functions conditions applicable 
machine model coding model check development tool syntax analyser completeness checking algorithms fig 

system development 
model checking parser tool testing parser tool compiler parser tool functions take parameter tuples input symbol memory value return new parameter tuples output new memory value 
function may applicable conditions unconditionally 
variables denoted 
informative combination operator describe operations memory values 
full syntax semantics 
example list presents part code agent model described earlier fig model ant 
type coord 
type position coord coord 
basic types food 
input space nest union food 
memory carrying ant position food positions 
init memory nil 
init state nest 
states nest food moving freely going back nest looking food 
fun lift food belongs food belongs lifting food 
fun find food fpx food belongs food belongs food food fpx 
fun drop food nest food dropping food 
fun find nest nest nest 
transition nest ignore food nest 
transition nest move moving freely 
transition moving freely lift food food 

order incorporate semantics communicating machines syntax provides annotation model instance name instance model name init state instance initial state 
init memory instance initial memory tuple 
communication model name function name reads model name function name writes message model name expression memory input output tuple 
example list represents communication part ant agent model ant instance ant 
communication ant find food reads ant 
model ant instance ant 
communication ant lift food writes ant input 
language orthogonal primitive structures combined ways mark supplies users freedom non positioning language strongly typed performs type checking set checking function checking exception handling close mathematical notation 
discussion demonstrated formal methods specifically machines core method intelligent agent engineering process 
firstly argued machines better suited requirements agent systems simple automata far modelling concerned 
memory structure functions provide better mapping requirements agent model proved essential simple automata fail provide finite model 
secondly relation machines fsm gives opportunity exploit existing techniques verification testing 
verification achieved variant temporal logic adopted machines utilised model checking agents verify certain desired properties hold agent model 
testing refers agent implementation complete sense variant method automatically generate possible test cases agent 
thirdly methodology building complex agent systems aggregation behaviours multi agent systems discussed 
communicating machines demonstrated powerful extension machines facilitate modelling large scale systems loss ability model checking testing individual component 
notation machine practical 
machine definition language provides appropriate syntax semantics order formal method practical sense complex mathematical definitions written simple text general notation standard model variety tools modular accommodate component communicating machine model development disciplined modelling components communication regarded separate developing activities 
currently forms basis development various tools automatic translations programming languages prolog java transformations formal notations 
various tools animators test case generators model checkers interchange language 
extended accommodate certain object oriented features machine modelling cardinality communication multi agent system 
required developing tools building examples agent systems carrying testing verification described 
machine method fully grounded theory computation fully general applicable type computational task 
paradigm machine convenient comes implementing models imperative programming language 
fact translation automatic 
existence powerful testing method described lays foundation method potentially critical applications 
model checking developments lead situation key issues agent software engineering guarantee agent system constructed exhibit desired emergent behaviour solved substantial progress goal achieved 


reactive systems developing formal specification transformations 
proceedings th international workshop database expert systems applications dexa pp cowling holcombe 

communicating stream machines systems machines 
journal universal computer science barnard 

design methodology communicating machines 
journal information software technology benerecetti giunchiglia serafini 

model checking algorithm multiagent systems 
muller singh rao eds 
intelligent agents lnai volume 
pp 
springer verlag brazier dunin keplicz jennings treur 

formal specification multi agent systems real world case 
proceedings international conference multi agent systems icmas pp 
mit press brooks 

robust layered control system mobile robot 
ieee journal robotics automation brooks 

intelligence reason 
mylopoulos reiter eds 
pp 

proceedings th international joint conference artificial intelligence morgan kaufmann burch clarke mcmillan dill hwang 

symbolic model checking states information computation chow 

testing software design modeled finite state machines 
ieee transactions software engineering clarke wing 

formal methods state art directions acm computing surveys clarke emerson sistla 

automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems benhamou 

agent oriented design soccer robot team 
proceedings nd international conference multi agent systems cowling 

structured way channels communication machines systems 
formal aspects computing davis smith 

negotiation metaphor distributed problem solving 
artificial intelligence deneubourg aron goss pasteels 

self organizing exploratory pattern ant 
journal insect behavior dorigo di caro 

ant colony optimization meta heuristic 
corne dorigo glover eds new ideas optimization pp 
mcgraw hill eilenberg 

automata machines languages 
vol 
academic press 


model checking finite state machines extended memory refinement 
antoniou eds 
pp 
advances signal processing computer technologies world scientific engineering society press 

model checking safety critical systems specified 
matematica informatica bucharest emerson halpern 
revisited branching time versus linear time journal acm ferber 

reactive distributed artificial intelligence principles applications 
foundations distributed artificial intelligence pp 
john wiley sons finin labrou mayfield 

kqml agent communication language 
bradshaw ed 
software agents pp 

aaai press fisher wooldridge 

formal specification verification multi agent systems 
international journal cooperating information systems futatsugi goguen jouannaud meseguer 

principles obj 
reid ed 
proceedings twelfth acm symposium principles programming languages pp 
association computing machinery holcombe 

computational models collective foraging th international workshop information processing cells tissues belgium harel 

statecharts visual approach complex systems 
science computer programming holcombe 

machines basis dynamic system specification 
software engineering journal holcombe 

correct systems building business process solution 
springer verlag london inverno kinny luck wooldridge 

formal specification dmars 
singh rao wooldridge eds 
intelligent agents iv lnai volume pp 
springer verlag holcombe 

specification testing generalised machines presentation case study 
software testing verification reliability jennings 

agent software engineering 
artificial intelligence jennings 

agent approach building complex software systems 
communications acm jones 

systematic software development vdm nd ed 
prentice hall 

design language tool machines specification 
eds 
advances informatics pp 
world scientific publishing 

automatic translation machines prolog 
technical report tr cs dept computer science city liberal studies 

user manual version 
technical report tr cs dept computer science city liberal studies 

compiler transforms machines specification technical report tr cs dept computer science city liberal studies 

modular modelling large scale systems communicating machines manolopoulos eds 
proceedings th conference informatics pp publishing kripke 

semantical analysis modal logic normal modal propositional calculi 
zeitschrift fur mathematische logik und grundlagen mathematik mcmillan 

symbolic model checking 
kluwer academic publishers odell parunak bauer 

extending uml agents 
proceedings agent oriented information systems workshop th national conference artificial intelligence rao georgeff 

bdi agents theory practice 
proceedings international conference multi agent systems icmas pp rao georgeff 

model theoretic approach verification situated reasoning systems 
bajcsy ed 
proceedings thirteenth international joint conference artificial intelligence ijcai pp 
morgan kaufmann reisig 

petri nets 
eatcs monographs theoretical computer science springer verlag rosenschein 

situated view representation control 
artificial intelligence pp buhrman 

group decision making swarms honey bees 
behavioral ecology sociobiology spivey 

notation manual 
prentice hall vries de 

modelling collective foraging means individual behaviour rules honey bees 
behavioral ecology sociobiology 
wooldridge ciancarini 

agent oriented software engineering state art 
appear handbook software engineering knowledge engineering world scientific publishing wulf shaw hilfinger 

fundamental structures computer science 
addison wesley young 

formal methods versus software engineering conflict 
proceedings fourth testing analysis verification symposium pp 

