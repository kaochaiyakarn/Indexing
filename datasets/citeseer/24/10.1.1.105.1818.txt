abstractions mobile computation luca cardelli microsoft research 
discuss difficulties caused mobile computing mobile computation wide area networks 
propose unified framework overcoming difficulties 
internet world wide web provide computational infrastructure spans planet 
appealing imagine writing programs exploit global infrastructure 
unfortunately web violates familiar assumptions behavior distributed systems demands novel specialized programming techniques 
particular phenomena remain largely hidden local area network architectures readily observable web virtual locations 
presence potential attackers barriers mutually administrative domains 
program aware move communicate different domains 
existence separate administrative domains induces notion virtual locations virtual distance locations 
physical locations 
planet size structure speed light tangible 
example procedure call requires second independently improvements networking technology 
absolute lower bound latency induces notion physical locations physical distance locations 
bandwidth fluctuations 
global network susceptible unpredictable congestion partitioning result fluctuations temporary interruptions bandwidth 
mobile devices may perceive bandwidth changes consequence physical movement 
programs need able observe react fluctuations 
features may interact 
example bandwidth fluctuations may related physical location different patterns day night network utilization virtual location authentication encryption domain boundaries 
virtual physical locations related need coincide 
addition phenomenon unobservable web failures 
web practical upper bound communication delays 
particular failures indistinguishable long delays un wednesday april pm detectable 
failure recovery indistinguishable intermittent connectivity 
furthermore delays implicitly failures frequent unpredictable 
phenomena determine set observables web events states principle detected 
observables turn influence basic building blocks computation 
moving local area networks wide area networks set observables changes computational model programming constructs kind programs write 
question program web reduces question program new set observables provided web 
general technique emerged cope observables characteristic wide area network web 
mobile computation notion running programs need forever tied single network node 
mobile computation deal original ways phenomena described virtual locations 
adequate trust mechanisms mobile computations cross barriers move virtual locations 
barriers designed impede access code allowed cross access local resources impediment barriers 
physical locations 
mobile computations move physical locations turning remote calls local calls avoiding latency limit 
bandwidth fluctuations 
mobile computations react bandwidth fluctuations moving better placed location transferring code establishes customized protocol connection 
failures 
mobile computations run away anticipated failures move presumed failures 
mobile computation strongly related hardware advances computations move implicitly carried portable devices 
sense avoid issues raised mobile computation avant software technique existing hardware reality 
discuss mobile computation entirely informal level formal accounts framework 
section describe basic characteristics existing computational infrastructure difficulties overcome effectively 
section review existing ways modeling distribution mobility 
section introduce model ambient calculus attempts capture fundamental features distribution mobility simple framework 
section discuss applications model programming issues including detailed example programming challenge 
wednesday april pm mental images comparing contrasting mental images abstracted views distributed computation 
differences mental images derive need new approaches global computation 
local area networks mental image corresponds standard quickly obsolete model computation local area networks 
workstations pcs started replacing mainframes local networks invented connect autonomous computers purpose resource sharing 
typical local area network consists collection computers power couple hardware generations network links bandwidth latency 
environment completely uniform specialized machines may operate servers engineering workstations specialized subnetworks may offer optimized services 
large structure lan depicted uniform network nodes computers links connections mental image administrative domain mental image local area network main property network predictability 
communication delays bounded processor response times estimated 
link process failures detected time outs pinging nodes 
important property local area networks usually administered times protected attack 
network administrators task keeping network running protect 
picture boundary line represents administrative domain flames represent protection provided firewall 
protection necessary local area networks rarely completely disconnected usually slower links outside world administrators nervous 
wednesday april pm architecture local area networks different older highly centralized mainframe architecture 
difference difficulties implied resulted emergence novel distributed computing techniques remote procedure call client server architecture distributed object oriented programming 
combined aim effect techniques programming application environment stable uniform mainframes 
particular network topology carefully hidden computers considered lying logical step apart 
computers considered immobile example usually preserve network address physically moved 
relatively static environment notion mobility gradually acquired prominence variety forms 
control mobility rpc remote procedure call rmi remote method invocation mechanisms notion thread control moves principle machine back 
data mobility achieved rpc rmi linearizing transporting reconstructing data machines 
link mobility ability transmit points network channels remote object proxies 
object mobility ability move objects different servers example load balancing purposes 
remote execution computations shipped execution server early version code mobility proposed extension rpc 
years distributed computing endowed greater mobility properties easier network programming 
techniques object request brokers emerged location objects providing certain services 
code mobility emerged tcl scripting languages control network applications 
agent mobility pioneered telescript aimed uniform wide area network services 
closure mobility mobility active connected entities investigated obliq :10.1.1.17.6050
due time local area network techniques smoothly gradually evolved deployment wide area networks explicitly attempted cor ba effort 
suddenly particular wide area network came radically changed fundamental assumptions distributed computing pace progress web 
wide area networks global computing evolved span decades form internet 
emergence web peculiar characteristics internet exposed way anybody verify just mouse clicks 
clarity simplicity refer web primary global information infrastructure certainly 
remember notions global address space global file system popular times extensions mainframe architecture wide area networks 
obvious feature web forms global computational resource global mainframe extension 
web wednesday april pm support global updatable file system supports global addressing mechanism guarantee integrity addressing 
web single reliable component single failure point definitely centralized mainframe science fiction novels shut attacking single brain fact web mainframe big concern successfully tackled distributed computing lans 
fact web behave lan 
proposals emerged lines extending lan concepts global environment turning internet distributed address space distributed file system 
global environment stability properties lan achieved introducing redundancy reliability replication quality service scalability management different levels 
things evolved direction way web came 
web definition unreliable unpredictable unmanageable designed lan guarantees service 
mental image wide area network example web main problem web just big lan modulo issues scale know deal 
ways web big lan describe shortly 
fundamental reason lan web centrally administered 
dynamic 
single faulty routing configuration file spread internet july causing disappearance large number internet domains 
case vulnerable brain collection internet routers 
wednesday april pm collection countless independent administrative domains widely different mutually 
represented mental image 
picture computers differ greatly power availability network links differ greatly capacity reliability 
large physical distances visible effects time zones 
architecture wide area network fundamentally different local area network 
prominently network topology dynamic non trivial 
computers intrinsically mobile require different addressing physically moved administrative boundaries 
techniques mobility important essential 
example mobile java applets provided disciplined mechanism running code able allowed systematically penetrate people firewalls 
countless projects emerged years aim supporting mobile computation wide areas consolidated 
point architectural goal devise techniques managing computation unreliable collection far computers 
full picture 
network links nodes widely dispersed unreliable liable stay put discuss 
mobile computing different global computing paradigm evolving independently web 
connecting lans world way extending reach lan move individual computers gadgets lan dynamically 
discussed main characteristics web point mobile computation 
meant mobile computation fixed possibly network 
interesting picture emerges components network move 
field mobile computing 
today laptops personal organizers routinely move entire networks go mobile ibm personal area network 
existing examples kind mobility include smart card entering network computer slot active badge entering room wireless pda laptop entering building mobile phone entering phone cell 
draw picture similar mental image mobile devices moving confines single lan 
notion dynamic lan fairly minor extension basic lan concepts presents conceptual problems wireless lans common 
interesting picture emerges think mobile gadgets wan administrative boundaries multiple access pathways interact complex ways anybody travels laptop knows 
mental image focuses domains united states european union enclosed political boundary regulates movement people computers 
political boundary private companies public agencies may regulate flow people devices doors 
atlantic see third wednesday april pm domain representing air france flight travelling san francisco paris 
af active mobile computational environment full people working laptops possibly connecting internet 
mention hundreds computers control airplane communicate varying stream ground stations 
sfo abstracting bit people computation devices see hierarchy boundaries enforce controls require permissions crossing 
required cross political boundaries tickets required airplanes special required enter exit 
agencies nsa 
mobile boundaries cross boundaries similarly need permissions mobile environment af needs permission enter airspace 
hand entity allowed boundary fairly free roam confines boundary boundary needs crossed 
general mobility nsa af mental image mobile computing eu cdg described different notions mobility 
mobile computation virtual mobility mobile software 
second mobile computing physical mobility mobile hardware 
fields today disconnected dominated software community second dominated hardware community 
borders virtual physical mobility fuzzy eventually treat kinds mobility uniform way 
examples different forms mobility interact 
example virtual mobility achieved physical means 
consider software agent laptop 
agent move propagating network move physically transported laptop location 
case agent may undergo security checks bytecode verification crosses administrative domains 
second case agent may undergo security checks virus detection laptop physically allowed inside new administrative domain 
need completely separate security infrastructures wednesday april pm cases find common principle 
plausible security policy domain physical barrier building door provide security guarantees virtual barrier firewall 
second example physical mobility achieved virtual means 
software exists allows remote control computer bringing screen remote computer local screen 
providers software may claim just moving computer physically access local data 
remote computer network connection equivalent wire remote location remote network locally accessible 
example remote control phone line connect home high bandwidth internet connection available having high bandwidth internet connection brought home 
side coin mobile disconnected intermittently connected 
barring networks intermittent connectivity caused physical movement example wireless user moves form cage 
interestingly intermittent connectivity may caused virtual movement example agent moves administrative domain allow communication 
case really failure infrastructure cases lack connectivity may fact desirable security feature 
assume intermittent connectivity caused equivalently physical virtual means essential feature mobility 
prepared see increased interactions virtual physical mobility develop frameworks discuss manipulate interactions 
barriers action distance unifying difficulty mobile computing mobile computation proliferation barriers problems involved crossing 
central difficulty implies regard barriers fundamental features computational models 
contrary usual trend 
access barriers arisen times history computing main tasks computer science away additional level indirection 
example physical memory boundaries circumvented virtual memory address space boundaries circumvented network proxies firewall boundaries circumvented secure tunnels agent sandboxing 
unfortunately barriers purely technological possible completely away 
crossing administrative barriers performed explicit bureaucratic operations exhibiting equipment removal passes export 
administrative barriers constitute fundamental change way compute 
review historical scenarios barriers unrealizable computing 
wednesday april pm early days internet computer talk computer knowing ip number 
forget flat ip addressing transparent routing routers firewalls effectively hide certain ip addresses view unreachable direct means 
early days programming languages people envisioned universal address space programs live share data possibly world wide possibly strong typing guarantee integrity pointers 
forget universal addressing pointers allowed machines lan network proxies generally disallowed firewalls 
similarly forget transparent distributed object systems network objects kept hidden certain domains reaching require effort 
early days mobile agents people envisioned agents moving freely network behalf owners 
forget kind free roaming 
sites trust agents allow 
agents trust sites execute fairly want visit 
general forget notion action distance computing idea resources available transparently time matter far away 
get notion movement communication step step activities visibly multiple steps involved hidden collapsed rendered atomic 
action distance paradigm prevalent lans reason lans different wans assumption hold 
wan big lan discussed wan exhibits different set observables lan 
emulate lan top wan restoring familiar set observables familiar set programming techniques 
possible go program internet just program lan 
turn wan lan hide new observables wan introduces reveal observables wan hides 
tasks ranges difficult intolerable impossible 
referring classification achieve 
hiding virtual locations 
devise security infrastructure navigation multiple administrative domains painless transparent legitimate 
great deal cryptographic technology available impossibility results lurking corners 
example far clear principle guarantee integrity mobile computations hostile unfair servers 
solved lan having computers physical supervision 
wednesday april pm hiding physical locations 
hide speed light techniques caching replication may help fool processes attempt perform long distance real time control interaction 
principle delays uniform programs behave differently different places 
ultimately achieved slowing entire infrastructure embedding maximal propagation delay communications 
second surface grow dramatically web extended satellite communication orbital stations away 
hiding bandwidth fluctuations 
possible introduce service guarantees networking infrastructure eliminate bandwidth fluctuations reduce certain thresholds 
overload situations effect turning network congestion access failures brings point 
revealing failures 
failures observable lan 
run fundamental trouble 
basic result distributed systems states achieve distributed consensus agreeing nodes failed system consisting collection asynchronous processes 
web system assumption relative speed processors may overloaded temporarily disconnected speed communication network may congested partitioned order arrival messages number processes involved computation 
circumstances impossible detect failure processors network nodes links consensus algorithm delayed indefinitely 
common partial solutions unsolvable problem dictate degree synchrony failure detection 
solutions lan apply wans simply individual users may arbitrarily decide turn processors warning take unreachable places 
partial solutions involve multiple round broadcast probabilistic algorithms expensive wan terms communication load subject light speed delays 
difficult talk failure processors invisible hidden firewalls take part computations 
techniques developed deal asynchrony operating systems lans successfully applied wan web full generality 
web inherently asynchronous system impossibility result applies full force 
summary task may unsolvable mobile code case non zero amount bureaucracy required task solvable full introducing unacceptable delays task solved way reduces task unsolvable principle probabilistic solutions run tasks 
wan postulates summarize section collection postulates capture main properties reality interested modeling wednesday april pm separate locations exist 
different locations different properties people programs want move 
barriers mobility preserve certain properties certain locations 
people programs need cross barriers 
point postulates stress mobility barrier crossing inevitable requirements current computing infrastructure 
observables characteristic wide area networks implications distinct virtual locations observed existence distinct administrative domains produced inevitable existence attackers 
distinct virtual locations preclude execution actions domains require security model 
distinct physical locations observed large distances inevitable latency limit speed light 
distinct physical locations preclude instantaneous action distance require mobility model 
bandwidth fluctuations including hidden failures observed inevitable exercise free network users terms communication movement 
bandwidth fluctuations preclude reliance response time require asynchronous communication model 
modeling mobility section dedicated showing reality mobile computation wan fall familiar categories 
need invent new paradigm model help understanding eventually advantage reality 
web distributed system worth reviewing existing literature models distributed systems see 
readers interested experienced models concurrency may skip ahead section 
formalisms concurrency distribution security calculus variations prominent model concurrency starting point 
notion processes communicating channels ability create new channels exchange channels channels 
spend time discussing basic assumptions calculus concurrent formalisms satisfy particular needs 
wednesday april pm static connectivity early paradigms concurrency actors allowed highly dynamic systems 
main formalized descriptions concurrency began considering static connectivity 
case petri nets hoare communicating sequential processes csp milner calculus communicating systems ccs 
ccs particular set communication channels processes available change execution 
versions csp occam set processes change 
models insufficient modeling mobility general sense 
best characterize situation mental image form mobility mobility data communication channels 
dynamic connectivity calculus extension ccs channels transmitted channels process dynamically acquire new channels 
channel transmission called channel mobility powerful extension basic communication model 
transmission channel channel gives recipient ability communicate channel 
best think channel point transmitted 
consider channel point transmitted domain boundary channel crosses boundary 
transmitted point remains functional provides dynamically established connection sides boundary 
kind connection firewalls typically forbid opening arbitrary network connections allowing network object proxy requests allowed checks 
new channel crosses firewall seen implicit firewall tunnel establishment trusted tunnels involves simply passing channel firewall loose control security 
firewall watch communication traffic channel crosses act intermediary forwarder messages outside inside domain 
channel point seen passing firewall decide allow communication channel create forwarder 
channel firewall really handled channels connected filter 
ability communicate channel depends possessing point channel point channel got 
point sent firewall ability effectively communicate channel depends attitude firewall 
approach provide framework processes exist multiple disjoint locations location process influences ability communicate processes 
dynamic connectivity achieved movement movement guarantee continued connectivity 
wednesday april pm distribution calculus inherent notion distribution 
processes exist single contiguous location default built notion distinct locations effects processes 
interaction processes achieved global shared names channel names process assumed process 
incidentally distributed implementation original calculus ccs quite hard requiring form distributed consensus 
various proposals emerged calculus suitable distributed implementation extend location awareness 
asynchronous calculus obtained simple weakening calculus synchronization primitives 
asynchronous messages simplify requirements distributed synchronization localize management communication decisions 
join calculus approaches problem channel particular process provides single place synchronization resolved 
formalization linda process calculi techniques distributed versions linda multiple distributed tuple spaces local synchronization manager 
approach restrict communication happen single location communication locally managed 
particular interaction shared location shared names 
remote communication modeled combination mobility local communication 
locality locality mean distribution awareness process notion location occupies absolute relative sense 
growing body literature concentrating idea adding discrete locations process calculus considering failure locations 
notion locations sufficient locations really place 
presence failures observe certain locations failed deduce locations truly different places failed time 
distributed join calculus example adds notion named locations notion distributed failure locations form tree subtrees migrate part tree subject different failure patterns 
failure approach aims model traditional distributed environments traditional algorithms tolerate node failures 
internet node failure irrelevant compared inability reach nodes 
web servers fail forever frequently disappear sight network node overload come back 
come back different place example web site changes internet service provider 
inability reach web site implies certain path unavailable implies failure site global unreachability 
sense perceived node failure simply associated wednesday april pm node property network property changes time 
approach notion locality induced failures need cross barriers 
barriers produce non trivial dynamic topology locations 
locations observably distinct takes effort move locations may absent distinguishable locations 
failure represented weak realistic sense forever unreachable 
mobility different senses people talk process mobility try distinguish 
calculus channel mobile sense transmitted channel 
imagine process having mass channels springs connecting processes 
springs added removed communication process mass pulled different directions 
set channels process influences location change channels causes process change location 
particularly clear process single active channel time single spring strongly influence process location 
analogy channel mobility interpreted causing process mobility 
desired notion process mobility tied idea crossing domain barriers 
discrete kind mobility process inside domain 
representing kind mobility adding removing channels immediate 
example calculus channel crosses barrier communicated process meant represent barrier clear sense process crossed barrier 
fact channel may cross disjoint domain barriers process exist domains 
calculus process span domains rule start 
notion process mobility tied notion nested domains 
remains seen simple hierarchies ones emphasized mental images capture complex relationships administrative domains 
notion domain nesting natural difficult represent adequately process calculi calculus flat sets processes 
direct form process mobility proposed process may move transmitted channel process 
mechanism basic calculus called higher order calculi certainly form process mobility kind mobile agent systems alive agents transmitted communication channels 

fact formally reduced best ignored discussion 
wednesday april pm couple details raise concern having domain boundaries 
transmitting process firewall channel relies existence channel crosses firewall 
separately model establishment firewall tunnels 
second process connections move maintain side firewall 
answer arbitrary channels penetrate firewall existence single channel 
answer necessarily channels break 
firewall acts filter analyze processes passing communication capabilities may considerably complex analyzing simple messages 
third transmitting process channel copy move operation 
prevents original process continuing prevents transmitted process replicated 
idea process moved lost 
approach mobility represented passing channels channels passing processes channels 
represented processes jumping boundaries 
identity moving process preserved process crosses boundary disappears previous location 
security possible extend concurrent calculus cryptographic primitives spi calculus extension calculus :10.1.1.1.5724
fundamental progress direction 
approach security tied cryptographic primitives ability inability cross barriers conferred capabilities 
mechanisms required handle boundaries need cryptographic extensions arise immediately 
example boundary enclosing piece text seen encryption text sense capability needed cross boundary read text 
unexpected similarity firewall surrounding major encryption piece data barrier security mechanisms vastly different scales 
formalisms reactivity important part interacting computing web able react bandwidth fluctuations real time 
talk subject preferring concentrate computational observables discussed 
just note vast literature real time reactive systems relevant context see web related area carried applications 
wednesday april pm ambients sufficiently discussed design constraints deficiencies existing solutions ready explain proposal detail 
want capture way notions locality mobility ability cross barriers 
focus mobile computational ambients places computation happens mobile 
overview briefly ambient sense going word place delimited boundary computation happens 
ambient name collection local processes collection 
ambients move ambients subject capabilities associated ambient names 
ambient names unforgeable fact basic security property 
detail ambient main characteristics 
ambient bounded place computation happens 
want move computations easily able determine parts move 
boundary determines inside outside ambient determines moves 
examples ambients sense web page bounded file virtual address space bounded addressing range unix file system bounded physical volume single data object bounded self laptop bounded case data ports 
non examples threads boundary reachable difficult determine logically related collections objects 
see boundary implies flexible addressing scheme denote entities boundary examples symbolic links urls uniform resource locators remote procedure call proxies 
flexible addressing enables facilitates mobility 
course cause problems addressing links broken 
ambients nested ambients forming tree structure 
discussed administrative domains organized hierarchically 
mobility represented navigation hierarchy ambients 
example want move running application home application removed enclosing ambient inserted different enclosing home ambient 
ambient collection local running processes 
local process ambient contained ambient 
top level local processes direct control ambient particular instruct ambient move 
contrast local processes direct control parent ambient helps wednesday april pm guaranteeing integrity parent 
ambient moves subcomponents 
activity single local process may causing movement parent influence location activity local processes 
example move laptop reconnect different network threads address spaces file systems move accordingly automatically cope new surrounding 
agent mobility special case ambient mobility agents usually single threaded 
ambients agents automatically carry collection private data move 
ambient name 
name ambient control access entry exit communication 
realistic situation true name ambient guarded closely specific capabilities name handed 
examples usually liberal handling names sake simplicity 
developed studying formal calculus ambients 
stay away formalism essential features ambient calculus conveyed fairly precise metaphors 
metaphor partially outlined consider foreign travel scenario 
country border guards seen example static ambient 
local officers privileged processes govern movement border communication border 
entry exit capabilities moderate mobility border 
officers may decide may join new officers 
example mobile ambient may consider tourist traveling country 
tourist travels transported mobile ambient train airplane 
tourist checked entry exit 
tourist may country withholding exit capability careful killed 
hand tourist may allowed local officer function may act spy sending encrypted messages disabling subsystems 
section discuss metaphor easy describe intuitive graphical presentation 
corresponds faithfully full formal ambient calculus 
folder calculus mobility office style metaphor represent ambient folder 
folder confines contents inside outside folder 
folder name written folder tag 
folders naturally nested moved place place 
wednesday april pm computational aspect calculus represented assuming folders active 
addition folders may contain cause folder move moved folder 
describe reductions atomic computation steps arise folder calculus 
reduction happen top level computation say desktop inside folder 
folder hierarchy active level caveats noted 
enter reduction reduction causes folder enter folder 
left arrow folder labeled contains gremlin ready execute instruction meaning surrounding folder enter folder labeled continue 
partial occlusion meant indicate instruction execute activated 
collection may contained represented letter similarly folder labeled happens exist near folder near means surrounding folder desktop 
enter reduction situation operation execute resulting configuration right arrow 
result operation folder folder gremlin executed instruction ready continue instruction consumed 
unchanged 
reduction happen conditions left arrow satisfied 
executes sibling folder labeled operation remains blocked sibling folder labeled appears nearby 
folder may appear example moves near cause move near 
reductions simultaneously enabled case chosen nondeterministically 
example distinct folders labeled near wednesday april pm folder label contents case enter 
gremlin part trying execute operation case exactly succeed 
gremlin trying execute operation folder labeled near case folder enter exit reduction second reduction essentially inverse previous nested folders siblings 
left arrow folder labeled contains gremlin ready execute instruction meaning surrounding folder exit parent labeled continue parent folder fact labeled situation operation execute resulting configuration right arrow 
result operation folder sibling folder gremlin executed instruction ready continue instruction consumed 
unchanged 
operation executes parent folder labeled operation remains blocked parent folder labeled materializes 
parent may example cause move inside folder labeled point execute 
reductions may enabled time 
example gremlin trying execute operation folder labeled folder exit enter open reduction third reduction discard folder keeping contents 
picture helpful imagine folder surrounding entities left arrow open followed gremlin folder 
gremlin ready execute instruction open meaning nearby folder labeled opened continue folder labeled happens exist nearby 
situation operation open execute resulting configuration right arrow 
result operation folder discarded contents spilled place folder 
instruction open consumed gremlin ready continue exit reduction wednesday april pm open open reduction operation open blocked folders labeled nearby 
ones may opened 
copy reduction fourth reduction replicate folders contents 
left arrow copy machine ready copies folder gremlin collection folders 
imagine original firmly placed cover copy machine compressed folders operate move copy blurred 
soon copy copy free execute 
copy machine produce new copy contents needs push copy button 
copy machine operate indefinitely 
right arrow configuration left plus fresh copy think copies demand needed continuously produced 
name creation handling names delicate fundamental part calculus 
fortunately understood comes directly calculus 
name creation implicit operation sense reductions associated 
represented creation rubber stamp name stamp folder labels 
number folders stamped rubber stamp 
copy reduction rubber stamp give name give authenticity folder 
components notion need stretch office metaphor bit fit intended semantics 
wednesday april pm microscopic scale rubber stamp slight imperfections tell rubber stamp stamp particular folder 
particular name chosen rubber stamp irrelevant really important relationship rubber stamp folders stamped 
humans read names microscopic imperfection keep names associated rubber stamps folder labels 
free change names time long done consistently rubber stamp related folders uses name rubber stamp 
consistent renaming considered reduction simple considered basic equivalence configurations folders expressing fact superficial names really important 
metaphor copy machine copy contained folder including rubber stamps 
started rubber stamps having different names eventually multiple rubber stamps carrying name 
authenticity assume copy machines copy rubber stamps perfectly microscopic level rubber stamp replicated different set microscopic imperfections generated 
rubber stamps unforgeable assumption 
reasons rubber stamps carrying name really different rubber stamps 
preserve authenticity want rubber stamps folders stamp get confused 
visual representation collect folders stamped rubber stamp occurrences name dashed boundary way tell graphically folders authenticated rubber stamp different rubber stamps name 
dashed border flexible boundary move fairly freely just bookkeeping device 
main invariants dashed border placed 
connected original rubber stamp 
second enclose folders stamped particular stamp occurrences name gremlin code folder moves away dashed boundary may enlarged 
third dashed boundaries rubber stamps name intersect need shall systematically rename rubber stamps related names confusion 
dashed boundaries rubber stamps different names freely intersect 
allowed forbidden wednesday april pm allowable nest dashed boundaries rubber stamps name occurrence name refer closest enclosing rubber stamp standard block scoping style 
leaves syntax bottom syntax inactive gremlin represented empty border 
inactive gremlin reductions 
inactive gremlin inactive simply discarded omitted 
example multiple inactive collapsed inactive gremlin folder containing inactive gremlin usually represented empty folder 
programs folder calculus built foundations assembling collections folders rubber stamps copy machines possibly placing inside folders 
theoretical power mobility moving final reduction pause consider operations introduced far 
operations purely combinatorial introduce notion parameter passing message exchange 
deal purely mobility communication computation familiar kind 
computationally complete turing machines encoded fairly direct way see 
informally possible see analogy enter reduction increment exit reduction decrement open reduction test copy reduction iteration 
ingredients performing arithmetic fact possible represent numbers towers nested folders appropriate operations 
data structures records trees represented easily nested folders folder names represent pointers data structures 
storage cells represented folders contents change response interactions folders case folder name represents address cell 
wednesday april pm summary mobility part folder calculus full power computationally complete language 
principle graphical scripting language office desktop metaphor 
folder calculus communication mobility computationally complete paradigm 
want talk communication direct way example may want exchange names folders visit 
representing communication existing set mobility primitives theoretically possible clumsy 
task introduce communication primitives invalidate principles described section spoil folder metaphor 
primitives introduce probably simplest imaginable 
particular conflict notion strict folder containment duplicate mobility functionality 
read reduction introducing new entity sit inside folder message 
remain office metaphor imagine writing messages throw away post notes attached inside folders 
gremlin write name folder note attach note current folder folder gremlin 
output operation represented graphically message written note 
shall discuss shortly particular messages folder calculus 
generally may imagine writing kind data message view note seen nameless data file kept folder 
output conversely gremlin grab note attached current folder read message discard note proceed knowledge message 
input operation represented graphically process occurrences variable written waiting note message bound input read reduction interaction input output operations equivalently message notes input operations 
situation input output read reduction execute resulting configuration right arrow simply residual gremlin read wednesday april pm note appears left arrow discarded consumed reading appear right 
note needs persist replicated copy machine 
input operation blocks available messages 
input operations may contend message obtain able proceed 
output operation blocks asynchronous simply drops message current folder continuation 
inputs outputs usually happen folder reduction allows happen desktop 
folder identity input output important anybody talk anybody style chat room 
practice different folders dedicated different kinds conversation assumptions said heard folder 
idea gives rise type system folder calculus 
messages capabilities imagine kinds messages written post notes 
focus messages capabilities allow reader message perform privileged actions 
kinds capabilities different contexts naming capabilities navigation capabilities 
naming capabilities simply ambient names messages 
name seen capability construct rubber stamp folder named seen main navigation capabilities implicitly 
operations open distinct operations followed continuation fact special cases single operation navigation capability continuation navigation 
name capability enter ambient named capability exit ambient named open capability open ambient named navigation capabilities extracted naming capabilities meaning knowing implies ability construct example knowing imply knowing navigation capabilities composed navigation paths 
example open path capability written single message read input variable executed entirety assuming course path followed 
useful empty navigation path written effect continues wednesday april pm read reduction example artificial example uses folder reductions 
single dashed line multiple rubber stamps order nesting dashed lines matter 
remove rubber stamps longer needed 
open enter open open copy reader encouraged follow reductions comparing definitions 
read exit wednesday april pm example adobe distiller adobe distiller program converts files postscript format files adobe acrobat format 
program set automatically files placed special location 
particular user drops postscript file inbox folder file converted acrobat format dropped nearby folder 
describes behavior 
distiller folder contains inbox folders mentioned initially empty 
input folder contains file user wants convert form message 
input folder contains gremlin moves input folder inbox 
imagine piece gremlin code generated automatically result user dragging input folder inbox folder 
distiller inbox input open input output ps distiller 
inbox distill inbox 
inbox contains program necessary format conversion drop result 
input folder arriving inbox opened reveal postscript file done copy machine left 
file read done copy machine right 
result read output folder created contain result 
inside output folder file distilled external operation distill left output 
output folder moved folder 
noted program represents highly concurrent behavior reduction semantics folder calculus 
multiple files dropped inbox processed concurrently 
opening input folders reading contents done producer consumer style 
distilling process may executing output folder traveling 
representing behavior ordinary concurrent language entirely trivial able express cumbersome locking synchronization instructions 
wednesday april pm example synchronous output useful know message read somebody proceeding 
synchronous output output operation continuation triggered output message read 
synchronous output expressible folder calculus assume calculus extended allow exchange pairs values extension fact encoded calculus 
synchronous output need define matching input operation 
new operations depicted additional striped borders figures 
synchronous output message obtained creating fresh name outputting asynchronously pair waiting appearance folder named proceeding 
corresponding input operation variable obtained expecting input pair creating empty folder named triggers synchronous output continuation continuing normal input process starts running assume somebody read message security open folder calculus built features allow represent security encryption situations directly extending calculus ad hoc primitives encryption decryption 
section discuss number examples simple security protocols 
clear mean security folder calculus 
security problems arise level software system just cryptographic level 
set security primitives system written primitives ask system attached low level attacking weaknesses implementation primitives high level attaching weaknesses primitives 
efforts underway study security high level abstractions low level attacks concerned high level attacks :10.1.1.17.6050
assume attacker disposal primitives folder calculus 
wednesday april pm kind attack malicious party mount honest folders interacting trusted server trusted network 
example perfectly trusted server folder gives away name killed attacker performing open authentication example home folder willing folder willing open folders recognized having originally come home 
opening folder implies conferring top level execution privilege privilege just anybody 
particular home gremlin execution privilege wants leave home wants come back home execution privilege enjoyed 
mechanism home folder uses recognize gremlin pass authentication token 
passes generated left hand side copy machine produces fresh configurations consisting new rubber stamp single message pass stamped rubber stamp single open capability name rubber stamp 
home open traveling gremlin right hand side 
inputs pass reading message variable eventually uses pass label folder 
gremlin form folder takes short walk outside comes back 
exposes folder named opened corresponding open capability left 
gremlin continue execution top level home example may read pass leave 
scope pass restricted locally generated rubber stamp capability open risk opening foreign folder 
underlying security assumptions 
accidentally maliciously create pass matches guaranteed practice arbitrarily high probability 
assumption steal name traveling gremlin 
hard impossible guarantee general particularly gremlin visits hostile location gremlin low level mechanisms abstraction level folder calculus 
gremlin visits trusted locations trusted networks ones preserve abstractions folder calculus interaction cause gremlin deprived pass 
wednesday april pm home 
home nonces nonce token ensure freshness message 
example nonce represented fresh name folder sends nonce folder nonce paired message sent back 
folder checks nonce returned sent achieved creating empty folder named returned nonce trying open folder original nonce 
test successful knows message fresh generated creation nonce msg public names attacker disrupt protocol destroying message folders transit 
worse attacker inject nonce msg folders containing misleading information damaging code 
established shared keys avoid problems exchanging opening messages encrypted keys discussed shortly 
open msg nonce open attacker impersonate creating folders names intercept messages 
names principals normally closely guarded secrets impersonation happen 
contrast capabilities freely act entering folder cause damage folder enters malicious 
shared keys name shared key long kept secret shared certain parties 
shared key reused multiple times encrypt stream messages 
message encrypted key represented folder contains message label call folder envelope message 
knowledge capability open required open folder read message 
continue authentication example traveling gremlin carry shared key generated inside home folder send messages back home inside envelopes 
home folder decrypt messages shared key 
shared key unique particular gremlin effect authenticating source messages 
open nonce msg wednesday april pm open classical distributed protocols shared keys assume distributed unspecified covert means separately ordinary communication public channels 
principals assumed established shared keys interacting 
key distribution problems left separate problem 
framework includes mobility aspects key distribution modeled explicitly 
example key shared distant principals generate key location move apart 
courier folder transport key principal trusted network principals key communicate untrusted network 
textual syntax generation fresh shared key encryption plaintext inside envelope decryption opening envelope reading contents far relying visual syntax going need textual syntax writing examples 
table summarizes folder calculus visual syntax introduces corresponding textual syntax 
correspondence textual syntax visual syntax possible freely mix desired nesting inside 
correspondence textual visual syntax range ambient process expressions range message expressions 
shown table creation new name written greek letter nu binds name scope ambient written ambient name brackets denote ambient boundary contents ambient 
wednesday april pm textual syntax processes visual syntax comments new name scope folder ambient name contents action followed processes parallel 
visually contiguously placed 
inactive process omitted 
replication output 
input followed 
grouping 
wednesday april pm open textual syntax folder calculus fact full syntax ambient calculus previously 
folder calculus metaphor quite exact syntax semantics formal ambient calculus completely explained metaphor 
example adobe distiller textual representation example section 
ideas wide area languages ambient calculus minimal formalism designed theoretical study 
final goal program internet certainly going need elaborate convenient formal calculus 
basic constructs ambient calculus represent understanding fundamental properties mobile computation wide area networks 
aim find programming constructs semantically compatible principles ambient calculus consequently wide area networks 
principles include wan soundness wide area network language adopt primitives entail action distance continued connectivity security bypasses wan completeness wide area network language able express behavior web surfers mobile agents users 
related languages messages name entry capability exit capability open capability empty path capabilities concatenation paths distiller inbox open input output distill inbox 
input ps distiller 
inbox software systems explored exploring notions mobility wide area computation 
wednesday april pm obliq :10.1.1.17.6050
obliq language attacks problems remote execution mobility distributed computing 
designed context local area networks 
scope obliq works quite really suitable computation mobility web just distributed paradigms developed pre web days 
telescript 
ambient model partially inspired telescript dual 
telescript agents move places stay put 
ambients move processes confined ambients 
telescript agent little ambient contains suitcase data 
nesting places allowed telescript 
java 
java provides working paradigm mobile computation huge amount available expected infrastructure base ambitious mobility efforts 
original java mobility model mobility code mobility data active computations 
data mobility achieved java rmi extension computation mobility threads live objects problematic 
linda 
linda coordination language multiple processes interact common space called tuple space dropping picking tokens asynchronously 
distributed versions linda exist multiple tuple spaces allow remote operations 
dialect linda allows nested tuple spaces mobility tuple spaces 
join calculus language implementation distributed join calculus 
plain join calculus introduced original elegant synchronization mechanism procedure invocation may triggered join multiple partial invocations originating different processes 
distributed join calculus extends join calculus explicit hierarchy locations 
mentioned nature calculus distributed implementation relatively easy 
migration locations allowed hierarchy 
behavior system failure model investigated 
webl language specializes fetching processing web pages 
uses service combinators retrieve streams data unreliable servers uses sophisticated pattern matching sublanguage analyzing structured highly variable data reassembling 
wide area languages full blown language library propose important general flavor language library 
section discuss programming constructs directly inspired ambient calculus usually standard programming environments 
remaining sections show de wednesday april pm tailed example involving constructs speculate specific wide area application hopefully better written wide area language 
ambients programming abstraction basic abstraction mobile computational ambients 
ambient calculus brings abstraction extreme representing terms ambients fine grain 
practice useful programming abstraction ambients medium large grained entities 
ambient contents include standard programming subsystems modules classes objects threads 
sense ambients simply wrappers ordinary software subsystems purpose rendering subsystems mobile 
ambient library include mechanisms creating empty ambients adding threads objects allowing threads communicate ambients course allowing ambients move 
notice ability smoothly move collection running threads current software infrastructures 
sense ambients novel non trivial addition collection programming abstractions 
names vs pointers way ambient name 
matter organize hierarchies ambients way manipulate resulting structure ambient names 
names detached corresponding ambients may possess name having immediate access ambient name 
names pointers providing access structures symbolic pointers file names urls memory addresses 
file names pointers need denote structure denote ambient corresponding name may change time 
pointers denote ambient broken dangling pointers illegal file names blocked suitable ambient available 
course feel nervous possibility blocking tries name 
hand blocked computation unblocked providing appropriate ambient modeling dynamic linking installation plug ins 
ambient language pointer data structure resource outside ambient behave name 
necessary allow ambients move freely restrained immobile ties 
locations ambients model physical virtual locations 
physical locations mobile airplanes immobile buildings 
similarly virtual locations mobile agents immobile mainframe computers 
mobility distinctions reflected semantics ambients added refinement basic model embedded type systems restrict mobility certain ambients 
wednesday april pm migration transportation ambient completely self contained moved time running computations 
ambient encloses application running application moved need restart reinitialize 
practice application ties local window system local file system ties ambient names 
moving applications old window system ambient say unavailable eventually new window system ambient available 
application smoothly move reconnect bindings new local environment 
care needed restart state say refresh application window minor adjustment compared hard connections existed application environment 
communication basic communication primitives ambient calculus asynchronous model support global consensus failure detection 
properties preserved higher level communication primitives may added basic model intended semantics communication wide area networks preserved 
ambient calculus directly supports local communication ambient 
remote communication example rpc interpreted mobile output packets transport deposit messages remote locations wait local input come back 
originator rpc call may block answer come back proceeding style synchronous call 
interpretation outgoing incoming packets may get stuck arbitrary amount time get lost 
may indication communication failed invoking process may block forever receiving communication exception 
arbitrary delays indistinguishable failures 
note time mechanism easily implemented placing remote invocation parallel activity waits certain time invocation completed cause happen 
examples derived communication mechanisms include parent child communication communication siblings aided common parent 
appear quite useful need included convenient language 
data structures basic data structures booleans integers encoded terms ambients encodings practical 
basic types taken primitive usual 
ambients directly express hierarchies surprising easily represent structured data types 
example record structure form ln en represented open accessor 
ln en open accessor wednesday april pm name address record record fields li ei represented record ambient 
values ei placed outputs waiting accessor ambient go inside read 
ambient semantics bit richer minimum required data structures 
example normally want allow fields record take leave 
possibilities supported ambient semantics intriguing probably worth trouble ability concatenate records opening inside new record 
prudent build ordinary data structures relying possibilities provided ambient semantics 
ambients need data structures mobile 
address data structure proper ambient name sense provide blocking behavior access needed 
recursion behaviors naturally defined recursively 
convenient recursion construct form example rec representing recursively defined process occurrence denotes generally introduce mutually recursive definitions done discussing resources 
ambient calculus embeds essentially iteration construct terms theoretical power sufficient encode recursion 
programming construct inconvenient hard implement flavor unbounded generation 
programming practice removed favor recursion facilities 
synchronization synchronization primitives needed coordinate activities multiple processes ambient 
ambient calculus easy represent basic synchronization constructs mutexes release release mutex called acquire open acquire mutex called open instruction blocks mutex released consumes mutex 
useful technique synchronize change name ambient 
process may wait ambient change name name process may perform change trigger process 
name change represented ambient calculus way atomic respect arbitrary actions particularly movement performed processes 
proper solution require processes ambient synchronize mutex movement name change 
bit laborious convenient introduce name change primitive atomic reduction wednesday april pm static dynamic binding wide area systems outside control single administrator maintenance rely entirely static configurations 
programming language terms rely completely static binding variables 
needs change static binding usually change recompile program restart 
easily restart internet large system deployed 
form dynamic binding necessary 
names ambient calculus represent unusual combination static dynamic binding 
formally names obey classical rules static scoping including consistent renaming capture avoidance block nesting 
navigation primitives behave dynamically binding name ambient right name 
connection name ambient name fully dynamic dynamic linking 
basic ambient calculus definitional facilities clearly needed building large scale systems medium scale examples 
going need definitional facilities static dynamic binding corresponding underlying semantic features 
statically bound definitions represented fairly normal constructions 
process producing definition written xn xn scope standard expansion semantics scope 
call value parameter passing assuming vn fully evaluated messages vn xn vn dynamically bound definitions routine closely tied ambient semantics discuss 
resources mobile agent paradigm sites differ collection resources provide visiting agents 
agents bind dynamically resources enter ambient 
similarly natural think ambient providing collection local resources seen forming interface namespace environment method suite ambient 
introduce mechanism local resource definitions compatible general ambient semantics easily explained terms primitives section 
resource definitions may occur top level ambient form def xn bind resource xn ambient note name bound definition bound binder sufficiently global level 
way different resources named provided different wednesday april pm ambients resource relative ambient 
typical resource local window system library 
resource invoked follows ambient defined vn xn vn suffix indicates definition ambient invoked 
general path may place case definition resource retrieved ambient obtained path invocation executed 
words effect vn transport invocation vn path invoke target ambient 
expressed rules transport invocation step vn vn vn vn example expression def def 
producing invocation def def 
definition invocation resources encoded pure ambient calculus way resources automatically acquire ambient flavor 
particular ambient definition invocation invocation blocks definition available designated place 
ambient multiple definitions invocation may 
ambient containing definitions opened definitions definitions parent 
modularization ambient includes collection local definitions seen module class 
precisely seen module class inactive active generated seen module instance object 
action performing open ambient seen importing module inheriting class ambient definitions ambient 
regard notation module oriented style invocation module object oriented style delegation object seen modules components ambients interesting unusual properties 
wednesday april pm ambients class modules sense choose run time particular instance module 
second ambients support dynamic linking missing subsystems added running system simply placing right spot 
third ambients support dynamic reconfiguration 
module class systems identity individual modules lost immediately static dynamic linking 
ambients maintain identity run time 
consequence system composed ambients reconfigured dynamically replacing ambient 
blocking semantics ambient interactions allows system smoothly suspend configuration transition 
hierarchical nature ambients allows modular reconfiguration entire subsystem just individual modules 
dynamic reconfiguration particularly valuable long running widely deployed systems easily stopped example telephone switches certainly accident thinking internet led property 
ambients seen proper software components paradigm advocated software engineering components replaceable mobile 
security ambient security capabilities notion security checks performed ambient boundaries processes free execute need cross boundary 
capability model security opposed cryptography model access control model 
models 
case access control obtained ambients implement rpc invocations cross boundaries authenticate time 
cryptographic model obtained interpreting encryption keys ambient names assumption unforgeable 
encryption wrapping content ambient name decryption obtained entering opening ambient appropriate capability decryption key 
summary believe sufficiently illustrated ambient semantics naturally induces unusual programming constructs suited wide area computation 
combination mobility security communication dynamic binding issues widely explored language design level certainly unifying semantic paradigm 
hope unifying foundation facilitate design new languages 
example public transportation show example program written ambient notation 
additional constructs introduced previous section 
wednesday april pm example emphasizes mobility aspects ambients fact ambient may transported place having know exact route followed 
passenger train example needs know destination station need concerned intermediate stations train may may 
example train stations represented ambients course particular ambients move 
trains represented ambients train originating trains originating 
passengers represented ambients joe nancy 
joe wants go changing trains nancy wants go way 
joe defining parametric process instantiated trains going different stations different speeds 
parameters origin station destination station tag train displays tag train displays time train takes travel origin destination 
train moving assumes train originates inside moving rec 
wait 
moving 

wait 


wait 
moving 

wait 

definition train begins creation new name moving intermittently name train 
train moving passengers allowed dis embark achieved keeping moving secret name 
train begins ambient name moving contains single recursive thread train back forth stations 
initially train declares train waits time passengers enter exit 
moving passengers longer dis embark 
exits origin station travels enters destination station declares train passengers dis embark wait time station 
wednesday april pm nancy train moving goes back way repeats process 
configuration stations trains 
create fresh names stations train tags 
construct ambients stations containing appropriately instantiated train 
train train train code passengers 
joe itinerary enter wait enter train exit wait train exit exit 
time joe waiting exit train blocked waiting train acquire appropriate tag 
train change tags intermediate stations affect joe waiting exit particular station 
station reached train assumes right tag joe attempt exit 
guarantee succeed 
example joe may fallen asleep may rush joe manage exit train time 
case joe keeps back forth stations able exit right station 
joe joe 




code nancy similar goes direction 
timing trains nancy meet joe platform 
nancy nancy 




joe nancy active ambients transported ambients 
move initiative times move context moves 
note trains assume names stopped station 
joe nancy care train travel need know correct train tag itinerary wednesday april pm serial number train carries 
having multiple ambients name simplifies matters 
definitions put activated obtain real time simulation system stations trains passengers 
partial trace looks nancy moved nancy moved joe moved joe moved joe moved nancy moved joe moved nancy moved nancy moved nancy moved joe moved joe moved challenge conference reviewing system conclude outline ambitious wide area application 
application described fit simple minded web technology complex flow active code stateful information different sites essential requirement disconnected operation 
application fits agent paradigm involves traversal multiple administrative domains security confidentiality requirements 
meant example application programmed wide area language challenge language demonstrate usability 
hope language ambients similar notions cope kind situation 
description problem problem consists managing virtual program committee meeting conference 
basic architecture suggested comments richard connors experience organizing program committee meetings webbased reviewing software developed ecoop conferences 
scenario occurrence principals involved shown boldface 
announcement conference announced electronic submission form signed conference chair publicized 
wednesday april pm submission author fetches submission form checks signature conference chair activates form 
activated form actively guides reviewing process 
author fills instance form attaches 
form checks required fields left blank electronically signs signature key provided author encrypts attached finds way program chair 
program chair collects submissions forms gives decryption key decrypt attached papers verify signatures authors 
communications signed encrypted omit details 
assignment program chair assigns submissions committee members instructing submission form generate review forms assigned member 
review forms incorporate time signed program chair find way appropriate committee members 
review committee member reviewer may decide review directly send reviewer 
review form keeps tracks chain reviewers find way back completed refused reviewer check 
eventually review filled 
form performs various consistency checks verifying assigned scores range required fields left blank 
finds way back program chair 
report generation review forms reach program chair report forms 
various report forms merge incrementally form single report form accumulates scores reviews 
program chair monitors report form 
reviews agreement program chair declares form accepted report form rejected review form 
conflict resolution reports disagreement program chair declares form unresolved review form 
unresolved review form circulates reviewers program chair accumulating comments program chair declares accepted rejected 
notification report form accepted rejected finds way back author minus confidential comments appropriate 
final versions reaches author accepted report form spawns final submission form 
due time author attaches final version signs copyright wednesday april pm release notice 
completed final submissions form finds way back program chair 
proceedings final submission forms reaching program chair merge proceedings 
program chair checks final versions arrived sorts conference schedule attaches preface lets proceedings find way conference chair 
publication conference chair files copyright release forms signs proceedings posts public sites 
comments critical features characterize application particularly suited experimenting wide area languages 
requirement application interactions happen absence connectivity 
virtual committee meetings occur span month reviewing weeks discussion 
highly committee members continuously near main workstation workstation span time 
progress interrupted temporary absence member 
furthermore progress interrupted absence connectivity member reviews commonly done airplanes doctors waiting rooms lines post office cafe laptop personal organizer easily carried environments continuous connectivity far easy achieve 
contrasted current web review systems require reviewers sit connected workstation filling review forms 
second form filling requires semantic checking best done form filled 
active forms required line operation 
contrasted filling line web review forms require practice preparing reviews line ascii typing pasting laboriously line forms order obtain semantic checking 
alternatively review simply mailed ascii program chair considerable burden performing parsing semantic checking 
third unattended operations highly desirable program chair 
program chair may go vacation assignment phase come back find report forms merged active forms 
fourth system handle multiple administrative domains 
committee members intentionally selected belong widely diverse dispersed institutions protected firewalls 
respect situation different classical office workflow local area network shares fundamental features 
wednesday april pm fifth forms active 
relieves various principals tedious error prone task collecting checking collating pieces information distributing correct sets principals 
summary example interactions various parts system happen wide area network 
people involved may physically moving interaction 
move may transport warning active parts system 
times active parts system move initiative find route appropriate principals 
global computational infrastructure evolved fundamental ways standard notions sequential concurrent distributed computational models 
mobile ambients capture structure properties wide area networks mobile computing mobile computation 
ambient calculus formalizes notions simply 
supports reasoning mobility security intuitive presentation terms folder calculus 
basis envision new programming methodologies libraries languages global computation 
acknowledgments ideas originated heated atmosphere silicon valley web explosion annealed cool reflective environment cambridge uk 
am deeply indebted people locations particularly andrew gordon coauthor related papers 
addition mart abadi dric fournet comments suggestions drafts 
abadi fournet gonthier secure implementation channel abstractions :10.1.1.17.6050
proc 
thirteenth annual ieee symposium logic computer science 
abadi gordon calculus cryptographic protocols spi calculus :10.1.1.1.5724
proc 
fourth acm conference computer communications security 
agha actors model concurrent computing distributed systems mit press 
amadio asynchronous model locality failure process mobility 
proc 
ordination lecture notes computer science springer verlag 

bharat cardelli migratory applications proc 
acm symposium user interface software technology 


berry foundations esterel 
appear proof language interaction essays honour robin milner plotkin stirling tofte eds 
mit press 
berry boudol chemical machine 
theoretical computer science wednesday april pm 
boudol asynchrony calculus 
technical report inria sophia antipolis 
bracha toueg asynchronous consensus broadcast protocols 
acm 

brauer ed net theory applications proc 
advanced course general net theory processes systems hamburg 
lecture notes computer science 
springer verlag 

cardelli language distributed scope :10.1.1.17.6050
computing systems 
mit press 

cardelli davies 
service combinators web computing 
proc 
usenix conference domain specific languages santa barbara 

cardelli gordon mobile ambients foundations software science computational structures maurice nivat ed lecture notes computer science springer 

cardelli gordon types mobile ambients 
appear 
carriero gelernter linda context 
communications acm 
carriero gelernter zuck bauhaus linda object models languages concurrent systems ciancarini nierstrasz yonezawa ed lecture notes computer science springer verlag 

chandra toueg unreliable failure detectors asynchronous systems 
acm symposium principles distributed computing 

de nicola 
ferrari pugliese locality linda programming explicit localities 
proc 
tapsoft 
lecture notes computer science springer verlag 

fischer lynch paterson impossibility distributed consensus faulty process 
acm 

fournet gonthier reflexive cham join calculus 
proc 
rd annual acm symposium principles programming languages 

fournet gonthier 
vy calculus mobile agents 
proc 
th international conference concurrency theory concur 

fournet join calculus language documentation user guide pauillac inria fr join 
gosling joy steele java language specification 
addison wesley 

hoare communicating sequential processes 
communications acm 

honda tokoro object calculus asynchronous communication 
proc 
ecoop lecture notes computer science springer verlag 
inmos occam programming manual 
prentice hall 

kistler marais 
webl programming language web 
computer networks isdn systems 
elsevier 
milner calculus communicating systems 
lecture notes computer science 
springer verlag 

milner functions processes 
mathematical structures computer science 
wednesday april pm 
milner parrow walker calculus mobile processes parts 
information computation 
morris lambda calculus models programming languages 
ph thesis mit dec 
palamidessi comparing expressive power synchronous asynchronous pi calculus 
proc 
th acm symposium principles programming languages 

sander tschudin mobile cryptography icsi technical report november 
proc 
ieee symposium security privacy spring appear 
sangiorgi calculus higher order calculus back proc 
tapsoft lecture notes computer science springer verlag 

stamos gifford remote evaluation 
acm transactions programming languages systems 

stein lieberman ungar 
shared view sharing treaty orlando 
object oriented concepts applications databases kim eds 
addison wesley 
white mobile agents 
software agents bradshaw ed 
aaai press mit press 

wednesday april pm 
