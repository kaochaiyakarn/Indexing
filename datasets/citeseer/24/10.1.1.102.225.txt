binpac yacc writing application protocol parsers pang google new york ny usa google com robin sommer international computer science institute berkeley ca usa robin icir org key step semantic analysis network traffic parse traffic stream high level protocols contains 
process transforms raw bytes structured typed semantically meaningful data fields provide high level representation traffic 
constructing protocol parsers hand tedious error prone affair due complexity sheer number application protocols 
presents binpac declarative language compiler designed simplify task constructing robust efficient semantic analyzers complex network protocols 
discuss design binpac language range issues generating efficient parsers high level specifications 
binpac build protocol parsers bro network intrusion detection system replacing existing analyzers handcrafted supplementing operation analyzers new protocols 
bro powerful scripting language express application level analysis network traffic high level terms concise expressive 
binpac part open source bro distribution 
categories subject descriptors network protocols applications general terms languages keywords parser generator protocol 
network measurement studies involve analyzing network traffic application layer terms 
example studying web traffic parse headers extract information message length content type caching behavior :10.1.1.60.2372
done author princeton university 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
imc october rio de janeiro brazil 
copyright acm 
vern paxson international computer science institute lawrence berkeley national laboratory berkeley ca usa vern icir org larry peterson princeton university princeton nj usa llp cs princeton edu similarly studies email traffic peer peer applications online gaming internet attacks require understanding application level traffic semantics 
tedious error prone prohibitively time consuming build application level analysis tools scratch due complexity dealing low level traffic data 
significantly simplify process leverage common platform various kinds application level traffic analysis 
key element platform application protocol parsers translate packet streams high level representations traffic top measurement scripts manipulate semantically meaningful data elements content types email senders recipients raw ip packets 
application protocol parsers useful network measurements form important components network monitoring tools tcpdump ethereal real time network intrusion detection systems snort bro smart firewalls application layer proxies 
building application protocol parsers appear straightforward glance specification corresponding protocol 
practice writing efficient robust parser surprisingly difficult number reasons 
today protocols complex 
example analyzing predominant protocol deal pipelined requests chunked data transfers mime multipart bodies 
core protocol common protocol remote file access individual request types distinct syntax 
second simpler protocols tedious error prone manually write code parse structure code handle thousands connections real time cope traffic large networks protocol specifications seldom comprehensive ignore corner cases parser handle robustly occur real world traffic 
potentially adversarial environments attacker may deliberately craft ambiguous non conforming traffic 
furthermore severe vulnerabilities discovered existing protocol parsers including enabled worm propagate deployments security product worldwide tens minutes demonstrates difficult comprehensively accommodate non conforming input hand written code 
care writing protocol analyzer requires unfortunate existing analyzers generally reusable operation usually tightly coupled specific application environments 
instance major opensource network intrusion detection systems snort bro provide analyzers exhibiting different features shortcomings 
ethereal contains huge collection protocol parsers difficult reuse bro due quite different interfaces data structures 
inside single software product low level code generally inlined factored modules 
example ethereal version source code contains instances incrementing decrementing hard coded numeric constant vast majority adjusting pointer length stepping buffer 
instance incorrect constant course result incorrect parsing protocol detectable compile time wrong numeric constant type checks 
believe major reason difficulties significant lack abstraction 
programming language community writes parsers manually 
tools yacc antlr support declarative programming expresses syntax language interest highlevel meta grammar associated semantics 
parser generator translates specification low level code automatically 
propose similar abstractions application layer network protocols 
doing users building analyzers concentrate high level protocol semantics time achieving correctness robustness efficiency reusability 
observe existing parser generation tools suitable parsing network protocols 
common idioms network protocols data fields preceded actual length adjacent easily expressed contextfree grammar 
furthermore analyzing protocols need correlate directions single connection syntax depends semantics byte stream direction 
parsers generated tools process input pull mode concurrently parse multiple incomplete input streams 
improve situation designed implemented binpac declarative language compiler simplify task building protocol analyzers 
users specify parsers defining message formats dependencies message fields additional computations perform printing ascii records triggering analysis parsing different message elements 
compiler translates declarations parsers 
binpac takes care common tedious errorprone low level tasks byte order handling fragment reassembly incremental input boundary checking support debugging 
binpac facilitates protocol parser reuse supporting separation different components analyzers 
readily plug remove part protocol analyzer modifying 
separation allows protocol specifications reused different analysis tasks simplifies task protocol extension example adding removing nfs rpc parser 
goal ensure generated parsers efficient carefully hand written ones handle large traffic volumes 
main strategy leverage data dependency analysis tailor generated parser analysis requirements compilation time 
example binpac identifies appropriate units buffering incomplete input data layout specified user 
demonstrate power approach binpac build protocol parsers bro nids including dns cifs smb dce rpc sun rpc 
emphasize binpac tied significant way bro 
having written protocol analyzers manually past experience binpac greatly eases process 
envision binpac specifications compile analyzers alternative execution models particular directly custom hardware intermediate code sketched 
rest organized follows 
related section 
section discuss specific characteristics application protocols compared languages targeted traditional parser generators 
section describes binpac language specifying protocols user associates semantic protocol analysis description 
section discusses process generating parser binpac specification including handling incremental input performing robust error detection recovery 
section presents experiences binpac develop protocol parsers bro nids compare performance manually written ones 
summarize directions section 
related considerable previous addressed facets describing data protocol layouts declarative languages 
various interface description languages describing service interface specific protocols 
instance external data representation standard xdr defines way describe procedure parameters return values remote procedure call rpc protocol 
xdr compiler generates underlying code marshal data raw bytes 
targeting wider range protocols asn language describing syntax communication protocols including set encoding schemes 
binpac languages dictate underlying data representation focus specific type protocol binpac tries describe data layout wide range existing designed protocols span variety formats styles 
augmented bnf protocol standards specify protocol syntax 
goal provide concise incomplete way define protocol complete protocol specification generate parser 
addition targets ascii protocols 
people designed languages writing network protocol implementations including protocol parsing processing logic 
abbott proposed language designing implementing new network protocols 
language writing modular implementations networking protocols tcp 
experimented implementing tcp ip network stack ml 
efforts differ binpac goal build system implementations analyzers protocols 
target protocols network transport layers wide range application protocols 
rich body formal verification design protocols generally asynchronous process systems 
verification frameworks focus protocol behavior details protocol syntax 
related binpac efforts description existing protocol syntax 
mccann chandra introduced language helps programmers handle binary data structures network packets types 
designed implemented gapa frame application protocol analyzers 
protocol specification language gapal augmented bnf supports ascii binary protocols 
protocol specification gapal includes protocol syntax analysis state logic 
gapa binpac target application level traffic analysis general designed different sets goals take quite different approaches 
gapa targets traffic analysis individual hosts uses interpreted type safe language 
binpac compiler hand generates parsers intended process traffic higher volume network gateways 
second gapa self contained system handles protocol parsing traffic analysis 
binpac hand focuses parser generation designed building block construction parsers separate traffic analysis systems bro 
network protocols number languages describing data formats general 
scripting language support describing parsing binary data 
developed pads language describing ad hoc data formats 
pads approach data layout description similar binpac number ways parameterized types 
hand designed general purpose parsing network protocols lacks abstractions features particular processing communication traffic generated parsers handle input streams simultaneously 
related pads fisher described calculus reasoning properties features data description languages general 
calculus discover subtle bugs prove type correctness pads guide design language features 
hand written application layer protocol parsers important part network analysis tools 
packet monitors tcpdump ethereal display protocol information 
provides visualization editing packet traces 
nids snort bro network flight recorder analyze protocol communications detect malicious behavior 
protocol parsers components smart firewalls application layer proxies 

characteristics applica tion protocols section examine characteristics network protocols differ significantly sorts languages targeted traditional parser generators 
discuss terms syntax grammar input model robustness 
syntax grammar issues terms syntax grammar application layer protocols broadly categorized classes binary protocols human readable ascii protocols 
messages binary protocols dns cifs consist necessarily fixed number data fields 
fields directly map set basic data types integers strings 
clear text ascii protocols hand typically restrict payload human readable request reply structure printable ascii characters 
protocols smtp primarily line requests replies separated carriage return line feed cr lf tuples syntax usually specified grammar production rules protocol standards 
types protocols appear exhibit quite distinct language characteristics fact find underlying commonality binary ascii protocols treat styles uniform fashion declarative binpac specifications develop 
hand critical differences grammars network protocols binary ascii programming languages variable length arrays 
common pattern protocol syntax field indicate length array 
length field delimits length subsequent necessarily contiguous byte sequence content length field indicate number complex elements case dns question answer arrays 
conceptual variant variable length arrays padding filling field additional bytes reach specific length 
long length field constant width theoretically possible describe arrays padding context free grammar 
doing cumbersome leads complex grammars 
selecting grammar production rules 
binary ascii protocols multiple data fields select interpretation subsequent element range options 
example dns uses type field differentiate various kinds resource records 
uses multiple header fields determine message body consecutive byte sequence sequence byte chunks multipart entities 
selector comes opposite flow connection syntax sun rpc reply depends program procedure fields corresponding rpc call 
general selector easily expressed grammar parameterizing non terminal symbols limited form contextsensitive grammar describe section hard specify selector context free grammar 
encoding 
binary protocols record fields directly correspond values 
crucial consider correct byte encoding parsing fields 
example integers encoded big endian little endian byte order 
similarly string characters may single byte ascii encoding byte unicode representation 
complicate problem byte order need fixed protocol 
example field dce rpc header explicitly indicates byte order subsequent integers encoded 
cifs similar field gives character encoding strings fact apply strings certain ones ascii similarly cifs integers byte order 
handling data encoding tedious error prone task writing parser manually hardly expressible means lalr grammar 
concurrent input fundamental difference protocol parser parser input model 
protocol parser parse connections simultaneously connection flows opposite directions parallel 
example persistent connections request needs associated correct reply 
similarly syntax sun rpc reply depends program procedure fields corresponding rpc call 
parsers generated yacc lex process input pull fashion 
input incomplete parser blocks waiting input 
thread handle input stream time 
handle flows simultaneously spawning thread class conn public binpac public virtual functions defined 
virtual void bool orig const char const char virtual void bool orig int gap length virtual void bool orig interface binpac generated parser 
parsers process input incrementally comes partially scanning parsing incomplete input resuming analysis left invoked 
robustness parsing errors inevitable processing network traffic 
errors caused irregularity real world traffic data protocol deviations corrupted contents incomplete input due packet drops capturing network traffic asymmetric routing direction connection captured routing changes cold start connection underway monitor begins operation 
compilers protocol parsers simply complain processing robustly detect recover errors 
particularly important consider presence adversaries attacker specially craft traffic lead protocol parser error condition 

language previous section examined grammatical characteristics network protocols 
section describes design binpac language compiler specifically tailored address properties 
assume parser generated binpac language receives data lower level protocol tcp analyzer interface outlined 
binpac language build parsers tcp ip packets detailed description tcp analyzer manage states tcp connections invoke corresponding application analyzers scope 
just assume existence lower level analyzers focus application level parsers discussion 
description binpac data model section corresponding production rules bnf grammars 
section discuss state holding section add custom computation section separation concerns provide reusability 
discussion refer examples figures show specifications dns parsers binpac respectively 
illustrate features binpac language 
note parser shown complete simplified fully featured built bro evaluate bodies escape sequences uris 
takes significant additional add incorporated easily processing raw extracted uri additional function call 
due space limitations show excerpt dns parser includes technically difficult element parsing protocol compression domain names 
string comparisons prefix fact simplified presentation 
language text example header embeds code 
binpac keywords reflecting optional attributes start 
keywords starting context element macros instantiated parsing 
examples highlight binpac keywords elementary types introduced bold slant fonts 
table summarizes binpac language constructs 
data model binpac data model provides integral composite types allow describe basic patterns protocol data layout parameterized types pass information grammar elements derivative data fields store intermediate computation results 
discuss turn 
integral composite types binpac type describes data layout consecutive segment bytes resulting data structure parsing 
type empty represents zero length input 
elementary types int int int represent bit integers respectively unsigned counterparts uint 
specification shows string type represented constant string line regular expression line generic specific length length line running till data line 
elementary integer string types map naturally counterparts case string define simple class denote string 
results stored accessed exception 
allow string chunked handle potentially long byte sequences bodies chunked attribute line 
chunked string buffered 
attribute may define computation chunk process byte sequence streaming fashion 
instance compute md checksum body may add follows assuming compute md maintains intermediate results chunks body chunked length context flow content length context flow compute md chunk external types including bool int user defined ones declared extern type computation types parameters appear types data fields protocol messages 
users define composite types record sequential collection fields different types case union language sense different types array sequence single type elements 
binpac generates class user defined type data fields mapped class members parse function process segment bytes extract various data fields layout specification 
compare record case types context free grammar production rules see clear correspondence concatenation symbols maps record type multiple production rules symbol map case type 
difference mapping 
case type corresponds set production rules zero look ahead 
production rule selected explicit indexing expression computed data fields type parameters line language construct brief explanation section example header 
copy code generated header file fig 
code 
copy code generated source file member 
declarations private class members connection flow analyzer declare parser module members context fig 
connection define connection object fig 
declare flow names flows connection fig 
flow define flow object fig 
datagram declare datagram flow unit type fig 
declare byte stream flow unit type fig 
enum define enum type fig 
type 
define binpac type fig 
record record type fig 
case case type representing alternation case field types fig 
default default case fig 
type array type fig 
re string matching regular expression fig 
arbitrary content byte string fig 
extern type declare external type fig 
function define function fig 
refine add type attribute binpac type fig 
type input parse type input default input fig 
define byte order type enclosed types specified fig 
check check predicate condition raise exception condition evaluates false fig 
chunked buffer contents deliver chunk chunk specified fig 
source data type visible member variable fig 
evaluate field condition true fig 
length 
length source data 
fig 
define derivative types fig 
length source data line fig 
computation chunk defined chunked requires introduce artificial data dependency length source data till input fig 
transient create copy array condition element input satisfied fig 

allows production rule selection external information spirit similar predicated parsing introduced antlr 
hand zero look ahead restriction simplifies parser construction time poses little limitation range protocols specified binpac 
believe design protocols coincidence syntax patterns require lookahead 
protocol data generated processed programs usually organized way simplifies traditionally hand written implementation 
array defined recursive production rules find common idiom protocol syntax justifies separate abstraction 
binpac length array specified expression containing data fields definition dns message lines 
array defined length terminate condition indicates array 
condition specified attribute conditional expression 
expression computed input data element input headers line parsed element element chunks line 
type parameters examples dns parsers show type parameters type body line allow pass information types resorting keeping external state 
powerful feature significantly simplify syntax specification 
table summary binpac language constructs 
type ndr format record note field names taken dce rpc spec 
uint uint reserved padding ndr xf type dce rpc message record raise exception rpc version rpc vers uint check rpc vers rpc vers minor uint ptype uint pfc flags uint data representation packed ndr format 
packed ndr specifying dynamic byte order 
byte orders binary protocols binpac allows user specify byte order attribute 
shows specification dynamic byte order dce rpc bottom user specifies byte order taken ndr field defined earlier 
cases want propagate byte order specification type hierarchy types 
conceptually pass byte order types parameter see section practice byte order parameter required discuss definition derivative fields ndr section 
analyzer members context connection conn flow flow enum unknown delivery mode content length chunked regular expression patterns type token re type ws re extern type extern type header embedded header code class public headers headers delivery mode unknown delivery mode int headers length header headers name content length delivery mode content length content length int value name transfer encoding prefix value chunked delivery mode chunked delivery mode int content length connection flow connection conn bro conn flow true flow false flow flow orig bool pdu orig connection types type pdu orig bool case orig true request request false reply reply type request record request msg message type reply record reply msg message type record method token ws anonymous field name uri re ws version version bro gen req bool bro event request context connection bro conn method uri version vers str type record version version ws status re ws reason bro gen resp bool bro event reply context connection bro conn version vers str int status reason type version record vers str re type message record headers headers body body headers type headers header input length type header record name token ws value bro gen hdr bool bro event header context connection bro conn context flow orig name value type body case delivery mode content length body chunked length content length chunked chunks chunks default type chunks record chunks chunk element chunk length headers headers type chunk record len line data chunked length chunk length opt crlf case chunk length empty default crlf chunk length int int len line hexadecimal parser binpac bro event generation complete mime escape sequence processing 
universally binary protocols 
adding parameter type tedious clutter specification 
solve problem designate implicit type parameter passed referenced types redefined referenced type 
binpac compiler traverses type graph find types require byte order specification adds byte order parameters parse functions 
added support ascii vs unicode binpac conceptually similar support byte order 
derivative fields useful add user defined derivative fields type definition keep intermediate computation results see definition chunk chunk length line process parsing results dns label lines 
derivative fields specified 
attributes 
derivative field may take forms 
derivative field defined expression form id expression example 
second evaluated mapping type piece computed input form id type input expression 
input expression evaluates sequence bytes passed parse function type input data 
fields allow extend parsing consecutive non overlapping pieces original input data 
instance computed input data reassembly fragments fragmented dce rpc message body base decoded email body dns name pointer defined section shown lines 
dns example dns label sequence bytes name pointer pointing dns name specific offset message source data 
case define field redirect input pointed location parsing dns name add attribute type dns message record header dns header question dns question header answer dns rr header authority dns rr header additional dns rr header type dns header record 
type dns question msg dns message record dns name msg uint uint generate bro event dns request query bro gen request bool bro event dns request context connection bro conn msg header msg header qr request type dns rr msg dns message record rr name dns name msg rr type uint rr class uint rr ttl uint rr uint rr dns msg rr type rr class length rr bro gen reply bool bro event dns reply context connection bro conn msg header rr type rr type bro gen ns reply bool bro event dns ns reply rr type type dns msg dns message rr type uint rr class uint case rr type type uint check rr class class type ns dns name msg omitted type ptr type mx 
default unknown dns message input visible variable 
derivative members evaluated parsing accessed way record case fields generated class 
order derivative fields non derivative ones evaluated depends data dependency fields order undefined fields depend 
note lack ordering deliberate keeps door open parallelization 
hand binpac provides attributes users introduce artificial dependency edges fields case user wants ensure certain ordering evaluation fields 
derivative fields insert custom computation event generation bro nids parsing process discussed section 
state management point explored various issues describing syntax byte segment 
model state continuous communication binpac introduces notions flow connection 
flow represents sequence messages state maintain messages 
connection represents pair flows state flows 
note connections tcp udp connections way communication sessions 
example dce rpc connection may correspond tcp connection port udp session windows messenger port cifs named pipe dce rpc tunnel cifs protocol 
shown example line declaration connection consists definitions flow types flow 
refers flow connection originator responder refers flow opposite direction 
types connections flows parameterized 
abridged dns parser binpac 
dns name sequence dns labels type dns name msg dns message record labels dns label msg element label contains byte string name pointer type dns label msg dns message record length uint data case label type label length length ptr lo uint lower bit offset label type uint length bool length label type label pointer 
ptr offset uint length ptr lo label type ptr dns name msg msg ptr offset label type flow dns flow datagram dns message connection returns byte segment starting offset function const offset int const omitted dns pointer loop detection offset offset length return const return const offset loss generality assume flow consists sequence messages binpac type 
flow consists messages different types encapsulate types case type 
message type specified flow term flow unit type 
specifying flow unit type specify input data arrive flow may arrive datagrams containing exactly message byte stream boundary data delivery necessarily align message boundaries bytes guaranteed arrive order 
input delivery modes specified keywords datagram respectively see examples dns parsers lines respectively 
connection flow state type parameterization allows types share information message scenarios keep state flow level 
instance dce rpc parser needs remember interface connection bound requests replies parsed accordingly 
shows sun rpc parser keeps connection table maps session id call parameters reply arrives parser find corresponding call parameters looking reply message session id table 
connection flow state specified embedded code corresponding access functions defined binpac types 
abstraction state important aspect abstraction expose data dependencies protocol flows represent flows delivery mode flow indicate underlying transport protocol tcp udp 
example dns flow takes input datagrams tcp udp case tcp additional thin layer dns tcp protocol delimits dns message tcp byte stream 
connection rpc conn bro conn member typedef std map uint rpc call rpc rpc call table returns call corresponding xid 
returns null 
function xid uint rpc call rpc const iterator call table find xid call table return return second function xid uint call rpc call void call table find xid call table call table xid call type rpc call msg rpc message record 
register rpc call xid void context connection msg xid type rpc reply msg rpc message record 
find corresponding rpc call 
call rpc call context connection msg xid sun rpc connection state 
analysis enable better parallelization hardware realization 
main challenge abstracting state lies understanding data structures hash tables fifo queues stacks commonly protocol parsers providing ways 
context parameter types access connection flow state corresponding connection flow type parse functions function parameters 
connection flow accessed multiple types propagate implicit parameters relevant types just byte order flag 
generally state maintained granularity connection flow multi connection session level 
aggregate parameters members implicit context parameter 
members context parameter declared analyzer name binpac specification line 
member values instantiated clause flow unit definition line 
integrating custom computation yacc grammar embed user defined computation syntax tree generation form code segments parser executes reducing rules 
binpac takes slightly different approach integrating custom computation parsing 
computation generating event bro nids embedded adding derivative fields discussed section 
definition type header shows lines bro event header generated calling external function bro event header definition derivative field bro gen hdr 
function invoked parsing data fields depends name value header 
note sorts links tie binpac specification bro system 
refine header process header bool context flow bro event header name value separating bro event generation protocol syntax specification refine 
separation concerns separation concerns term software engineering describes process breaking program distinct features overlap functionality little possible case binpac want separate definition protocol syntax specifications additional computation bro event generation parsing results separation allows reuse protocol definitions multiple purposes different systems 
reason may want separate specification sub protocols rpc nfs underlying protocol rpc 
binpac supports simple powerful syntactic primitive allow separate expression different concerns parsing vs analysis lower level protocol vs higher level ones separated descriptions semantically equivalent unified 
language includes refine primitive appending new type attributes usually additional derivative fields existing types 
example generation header event example lines separated protocol syntax specification shows 
separation allows place related distinct definitions different binpac source files 
similar refine primitive allows insertion new case fields case type definition nfs params new case rpc params facilitating syntactical separation closely related protocols 
note support separation concerns binpac complete ways 
easily change set parameters type function limit extension protocol analyzers cases area exploration 
second binpac enforce separation concerns easier describe things separately describing 
rely binpac users practicing discipline separating concerns better code maintenance reuse 

parser generation main considerations parser generation handling incremental input flows detecting recovering errors 
examine turn 
incremental input approach handle incremental input parsing process fully incremental parse function ready buffer unprocessed bytes elementary type level return resume invocation 
parsing state composite type record kept indexing variable pointing member parsed buffer storing unprocessed raw data 
incremental parsing elementary type granularity expensive boundary checks adjacent fields longer combined 
unnecessary protocols encountered 
protocols designed easy processing natural unit buffering 
binary protocols dce rpc length header field denotes total message length 
ascii protocols usually line type dce rpc header record frag length uint length pdu type dce rpc pdu record header dce rpc header byte long header 
length header frag length specifying buffering length type 
smtp alternate length denoted line units 
parsing boundaries require support incremental parsing carry larger granularity reduced overhead 
binpac provides attributes length specify buffering units 
triggers line buffering length gives message length bytes 
length usually points corresponding length field header generally take expression compute length 
binpac compiler performs data dependency analysis find initial number bytes buffer length expression computed case dce rpc message bytes 
generated code buffer message steps initial bytes computing message length buffer full length parsing remaining fields 
error detection recovery protocol parsers robustly detect recover various kinds errors 
errors caused irregularity real world traffic data including small syntax deviations standard incorrect length fields corrupted contents payloads completely different protocol running standard port parsed protocol 
errors result incomplete input due packet drops capturing network traffic 
cases parser know specific state dialog sees flow inside data transfer 
errors may arise incorrect binpac specifications missing cases trying access unparsed case field due adversarial manipulation discussed earlier 
parsers generated binpac compiler detect errors various aspects discuss 
error detected code throws run time exception caught recovery 
error detection efficient boundary checking 
conceptually boundary checking scanning stays input buffer need take place evaluating elementary integer character type field types composed elementary types 
easy generate boundary checking code way generated code quite inefficient 
binpac compiler tries minimize number boundary checks 
basic idea generating boundary checking code record field check recursively generate checking field 
combine check 
way compiler determine furthest field boundary checking performed point parsing 
binpac incremental analysis depends existence attributes 
viewing record definitions tree types path root type leaf contain non leaf node 
handling dropped packets 
capturing network traffic packet drops avoided 
caused high traffic volume kernel scheduling issues artifacts monitoring environment 
drops lead content gaps application level data processed protocol parsers 
facing content gaps parsers unable extract data current message may know message starts 
particular common case content gap located inside byte sequence known length 
example entity body content gap handled creating uncertainty subsequent protocol elements 
byte sequence defined chunked binpac specification passed potential function referenced expressions generated parser simply skip gap 
defined sequence function called specially marked gap chunk take note fact 
mechanism allows handle content gaps protocols majority data contained long byte sequences 
hand written protocol parsers bro handle content gaps similar way individual basis chunked byte string abstraction binpac allows handled universally protocols 
general trickier handle content gaps fully fall byte sequence known size 
discuss section 
run time type safety 
access parsing results provided binpac parsers typed interfaces 
leaves aspects type safety enforce run time multiple case fields case type generated code ensures case selected parsing accessed throws run time exception access array elements boundary checked 
hand note binpac guarantee complete safety allows arbitrary embedded code control 
user defined error detection user may define error checking check attribute 
example may check data protocol signature bytes cifs smb message sure traffic data reflects protocol 
error recovery currently errors handled simple model flow processing function catches exception logs error discards unfinished message unprocessed data initializes resume chunk data 
potential problem approach protocols message aligned payload chunk 
plan add support re discovering message boundaries cases 
having mechanism help improve parsing performance skip large semantically uninteresting messages re align input stream 

experiences binpac add protocol parsers cifs smb dce rpc including point mapping protocol bro traffic analysis engine 
compare binpac hand complexity cifs parser cover entire protocol commonly seen message types 
protocol hand written binpac loc cpu time seconds throughput loc cpu time seconds throughput mbps mbps dns mbps mbps written protocol parsers rewrote parsers dns sun rpc evaluated binpac 
provide comparison terms code size performance binpac handwritten parsers 
table shows binpac parsers dns code sizes roughly hand written parsers measured lines code holds source file sizes respectively 
note protocols semantic analysis comprises half binpac specification purposes reuse specifications significantly smaller shown 
test performance parsers collected hour trace dns traffic lawrence berkeley national laboratory network gateway 
subset trace spans packets gb data 
dns subset spans packets mb 
drop rate reported tcpdump recording trace table shows cpu time required type analysis giving minimum maximum times measured runs ghz xeon system running freebsd gb system ram 
show throughput bits sec packets sec observing packet basis dns analysis expensive analysis packets simply entity data transfers requiring little 
numbers disabled bro script level analysis protocols timings reflect computation necessary parser generate bro events corresponding application activity including tcp ip processing tcp flow reassembly processing events 
specifically parser generates event request line method url version event parameters response line response number reason phrase header name value request response request reply message length body 
dns parser generates event request reply answer reply 
generated events allow essential analysis dns data bodies exported events 
see binpac parser performs significantly better hand written 
gain came tuning specification adding transient attribute header fields instructs binpac create copy corresponding 
transient strings visible parsing function type non transient ones copied accessed parsing 
applied tuning dns specification result allocates dynamic objects copies strings hand written 
believe tuning prove straightforward 
hand written binpac parsers handle content gaps skipping gaps data bodies common large traces 
worth noting hand written case content gap skipping crafted table performance 
case applied limited scope bodies smtp mail bodies 
binpac parsers gap skipping automatically handled string type chunked attribute 
note developing dns parser significant bugs hand written parser processing 
related incorrect field widths non portable byte ordering manipulations provide direct examples benefit terms correctness specifying analyzers high level declarative fashion 

summary direc tions presents binpac declarative language generating parsers application layer network protocols high level specifications 
parsers crucial component network analysis tools coding manually tedious timeconsuming error prone task demonstrated numerous severe vulnerabilities programs past 
binpac reflects different paradigm building protocol parsers abstracting syntax high level meta grammar associated semantics 
parser generator translates specification low level code automatically 
providing abstraction programmer concentrate high level protocol aspects time achieve correctness robustness efficiency reusability code 
spirit approach similar embodied yacc writing parsers programming languages elements network analysis problem domain require significantly different underlying mechanisms 
critical differences syntax grammar network protocols context free languages 
addition processing network traffic requires fundamentally different approach terms handling input ability incrementally parse concurrent input streams 
domain specific binpac language addresses issues set network specific features parameterized types variable byte ordering automatic generation boundary checking hybrid approach buffering incremental parsing handling concurrent input 
binpac supports binary ascii protocols build parsers dns sun rpc rpc cifs dce rpc including endpoint mapper 
integrated bro nids replacing existing manually written ones 
evaluation shows binpac specifications size handcoded ones protocol description independent user analysis semantics comprising half specification 
parser runs faster handcrafted replaces equal memory consumption confident dns likewise soon exhibit performance equal replaces 
binpac open source ships part bro distribution 
specifying protocols binpac envision exploiting power areas 
wish explore reusability binpac generated parsers integrating additional network tools 
second intend add backends binpac generate parsers different execution models 
proposed specifically aim build highly parallel parsers custom hardware 

acknowledgments supported part nsf awards cns sti itr ani nsf fellowship programme german academic exchange service daad 
john anonymous reviewers numerous valuable comments 

abbott peterson 
language approach protocol implementation 
ieee acm transactions networking 
arlitt krishnamurthy mogul 
predicting short transfer latency tcp trace validation 
proceedings internet measurement conference imc october 
syntax notation asn 
iso iec 
back 
specification scripting language binary data 
acm sigplan sigsoft conference generative programming component engineering pages london uk 
springer verlag 
harper lee 
network protocol stack standard ml 
higher order symbolic computation 
blumer 
generating service specification connection management protocol 
pages 
wang joshi guo 
generic application level protocol analyzer language 
submission 
common internet file system 
www org tech activities cifs cifs tr final pdf 
crocker 
rfc augmented bnf syntax specifications 
dce remote procedure call 
www org toc htm 

www monkey org 
ethereal network analyzer 
www ethereal com 
feldmann maggs sundaram 
methodology estimating interdomain web traffic demand 
proceedings internet measurement conference imc october 
fielding gettys mogul frystyk masinter leach berners lee 
rfc hypertext transfer protocol june 
fisher gruber 
pads domain specific language processing ad hoc data 
proceedings acm sigplan conference programming language design implementation pldi pages new york ny usa 
acm press 
fisher walker 
data description languages 
proceedings th acm sigplan sigact symposium principles programming languages popl pages new york ny usa 
acm press 
handley paxson 
network intrusion detection evasion traffic normalization protocol semantics 
proceedings usenix security symposium 
holzmann 
model checker spin 
ieee trans 
softw 
eng 
jacobson leres mccanne 
tcpdump 
ftp ftp ee lbl gov libpcap tar johnson 
yacc compiler compiler 
computer science technical report bell laboratories murray hill new jersey july 
jung sit 
empirical study spam traffic dns black lists 
proceedings internet measurement conference imc italy october 
kohler kaashoek montgomery 
readable tcp protocol language 
proceedings acm sigcomm conference pages cambridge ma august 

network dump data editor 
sourceforge net 

design implementation framework packet trace manipulation 
june 
kumar paxson weaver 
exploiting underlying structure detailed reconstruction internet scale event 
proceedings internet measurement conference imc october 
mccann chandra 
packet types specifications network protocol messages 
proceedings acm sigcomm conference pages 
mockapetris 
domain names implementation specification section november 
rfc 
nfr security 
www nfr com 
pang barford paxson peterson 
characteristics internet background radiation 
proceedings internet measurement conference imc october 
parr quong 
antlr predicated ll parser generator 
software practice experience july 
paxson 
bro system detecting network intruders real time 
proceedings usenix security symposium san antonio tx january 
paxson lockwood pang sommer weaver 
rethinking hardware support network analysis intrusion prevention 
proceedings workshop hot topics security vancouver canada july 
core protocol 
forge novell com modules project 

insertion evasion denial service network intrusion detection 
technical report secure networks january 

snort lightweight intrusion detection networks 
proceedings usenix lisa 
snort network intrusion detection system 
www snort org 
saroiu gummadi dunn gribble levy 
analysis internet content delivery systems 
proceedings fifth symposium operating systems design implementation osdi december 
shannon moore 
spread witty worm 
www caida org analysis security witty 
srinivasan 
rfc rpc remote procedure call protocol specification 
srinivasan 
rfc xdr external data representation standard 
ethereal ospf protocol buffer overflow vulnerability 
www com intelligence vulnerabilities display php id 
snort tcp stream reassembly integer overflow exploit 
www com exploits bp ps html 
symantec multiple firewall response processing stack overflow 
www com html research advisories ad html 
tcpdump isakmp packet delete payload buffer overflow 
iss net 
separation concerns 
en wikipedia org wiki separation concerns 
wong mccune wang 
study mass mailing worms 
proceedings acm workshop rapid worm pages new york ny usa 
acm press 
