programming internet telephony services jonathan rosenberg jonathan henning schulzrinne bell laboratories columbia university columbia university bell labs com cs columbia edu hgs cs columbia edu march internet telephony enables wealth new service possibilities 
traditional telephony services call forwarding transfer number services enhanced interaction email web directory services 
additional media types video interactive chat added 
challenges providing services effectively program 
programming services requires decisions regarding code executes interfaces protocols deliver services level control code 
consider problem detail 
develop requirements programming internet telephony services show solutions required geared service creation trusted users administrators geared service creation untrusted users consumers 
review existing techniques service programmability internet telephone network extract best components 
result common gateway interface cgi allows trusted users develop services call processing language cpl allows untrusted users develop services 
internet telephony enables wealth new service possibilities 
traditional telephony services call forwarding transfer number services enhanced adding integration email web presence instant messaging directory services 
users calls redirected web pages streaming media tools record voicemail instant messages place call waiting notifications call logs reported email 
ip telephony offer improved speech quality advanced speech audio codecs 
communications encompass just voice video shared applications virtual reality 
powerful user interfaces allow services easily accessible 
gateways public switched telephone network pstn allow services extend traditional phones cellular phones pagers 
wide range services possible critical provide means services rapidly conceived developed deployed 
necessary add new network elements new service necessary reinvent interfaces existing elements new service 
addition possible third parties create new services easily 
third parties mean individuals organizations ones build routers hubs switches servers implement service 
separation allows users flexibility purchase different services different providers 
consider problem detail 
services ultimately realized internet telephony signaling protocols discuss section 
discuss section design decisions development programming mechanism argue solutions required 
propose solution service creation trusted users common gateway interface cgi section service creation untrusted users call processing language cpl section 
summarize section highlight open issues 
signaling protocol strong connection programming ip telephony services protocols deliver services 
number different protocols needed delivery ip telephony services 
include transport protocols real time transport protocol rtp carry voice ip networks qos enabling protocols resource reservation protocol rsvp differentiated services provide low delay loss voice transport directory access protocols user location policy 
importantly includes signaling protocols 
signaling protocols setup teardown call carry information required call progress media codecs addresses locate user called negotiate capabilities invoke services hold mute transfer 
protocols ultimately provide services understanding key programming services 
protocols currently signaling ip telephony services 
media gateway control protocol session initiation protocol sip 
developed international telecommunications union itu 
originally conceived multimedia conferencing lan extended cover internet telephony 
provides call control conferencing functions call management capabilities negotiation supplementary services 
control protocol allowing central coordinator monitor events ip phones gateways instruct send media specific addresses 
sip developed internet engineering task force ietf protocol engineered lightweight distributed call control capabilities negotiation 
detailed comparison sip 
chose sip platform programming telephony services 
clean request response model amenable simple programming 
textual formatting simple header structure easy text processing languages perl textual interfaces cgi see section developing services 
sip ability fully distributed fashion avoiding routing loops maintaining consistent behavior servers helps avoiding feature interactions programming services 
detailed description sip 
briefly give example sip call setup illustrative purposes 
typical sip transaction depicted 
caller known user agent client creates invite request user sip joe com 
request forwarded local sip proxy server 
proxy looks com dns obtains ip address server handling sip requests domain 
proxies request server 
redirect server com knows user joe user currently logged user university edu 
redirect server com know static configuration database entry dynamic binding set user sip register message 
server redirects proxy try address 
local proxy looks university edu dns obtains ip address sip server 
request 
university server consults local database indicates user university edu known locally smith cs university edu 
main university server proxies request computer science server 
server knows ip address user currently logged proxies request 
user accepts call response returned proxy chain caller 
caller acknowledges receipt response shown media flow directly parties 
request response user agent client local sip proxy programming sip services com sip proxy university edu sip operation sip redirect server user agent server smith cs university edu location service university edu sip proxy cs university edu key programming internet telephony services sip add logic guides behavior elements system 
sip proxy server logic dictate requests packet formatted responses processed 
example simple service call forwarding time day require logic sip server obtain time call setup arrives proxy request destination 
general logic direct server actions sorts inputs time day caller call subject session types call urgency media composition data obtained web pages data obtained directories 
logic may instruct server generate new requests responses 
logic added user agents system software 
user agents usually owned users network service providers providing logic different problem 
breadth platforms security implications trust models substantially different 
reason consider network servers remainder 
approaches programming services advocated implemented user agent server uas 
basic model providing logic sip services shown 
shows sip server augmented service logic program responsible creating services 
interface exists 
requests responses arrive server passes information service logic 
service logic decisions information information gathers different resources passes instructions back server 
server executes instructions 
order define details model number issues resolved 
logic reside 
requests responses logic execute 
service logic sip server function programming interface requests responses model programming sip services restrictions resources available program 
information sip messages provided program 
level control program server execution 
solution issues 
particular solution issues depends level trust server program 
level trust low may consumer defined logic specific structured information passed server program narrowly defined set controls exposed program server 
restricts set services defined provides greater level security 
server sure program perform malicious operations cause server crash 
trusted users administrators privileged users corporate environment trust levels higher greater flexibility warranted 
program location service logic reside servers special computers separate servers 
case protocol needed interface server service logic 
special purpose protocol form remote procedure call rpc 
distributed computing platforms corba dcom 
allows location service logic independent interface 
service logic server resident interface simple api 
placing logic external server numerous advantages 
increases security 
malicious buggy code crashes effect server physically separated 
multiple computers executing logic single server 
provides load balancing improves scalability 
hand executing service logic server simplifies interface 
network issues loss delay encryption ignored 
execution time logic improved necessary traverse network 
program invocation times services require service logic consulted event message received 
large class services require logic executed initial invite message received 
subsequent message processing rules follow standard procedures defined protocol 
furthermore calls won require services 
sip server behave normally consult service logic point 
necessary means specify point service logic executed 
execution points defined administratively set policy controlled dynamically service logic 
related issue service logic persistent 
service logic runs separate process remain active duration call persistent 
mandate asynchronous interface logic server 
introduces cleanup issues 
protocol server errors may cause service logic process particular call remain active long call 
means cleanup needed destroy old processes 
advantage service logic pass control instructions back server time depending server execute service logic specific events 
enables numerous services click dial service defined impossible support 
alternative service logic executed synchronously 
server receives message begins execution service logic 
logic passes control information back server ceases execution 
easily accomplished having service logic executed function call server 
service logic executed separate process terminate control information passed back server 
resource restrictions service logic access large number resources 
internet includes name services domain name system dns web pages directories mail servers media servers qos controls policy repositories presence systems instant messaging services name 
logic access resources networks telephone network 
ability query number databases example allow migration services internet 
breadth resources comes wide range failure modes 
likelihood bugs malicious actions unusual untested scenarios increases 
right operating point indicated depends level trust server logic 
user defined services access resources need restricted 
administrator defined services flexible 
interface server need pass information sip transaction including message information call states service logic 
information range abbreviated verbose 
abbreviated case message types invite ack bye requests response code responses current state passed 
verbose case entire message passed copy server state 
right operating point depends level trust desired amount flexibility 
verbosity lends flexibility increases complexity possibility error 
information passed service logic back server 
information control data instructing server 
range simple list uri proxy complex entire message sent 
existing models concept separating service logic server certainly new 
idea heart intelligent network key component telephone network 
arose need separating services telephone switches enabling rapid development new services 
call setup message arrives telephone switch switch contacts separate device service control point scp receive instructions call progress 
standards define basic call state model define controls scp switch 
model contains basic states call events cause model move states 
switch configured number decision points dps state changes switch ask input scp 
dp reached current call state relevant information reported scp 
scp decision 
exercises control switch instructing proceed particular state 
scp instruct switch arm disarm dps remainder call 
concept separating service logic servers exists web 
web servers separate generation content services detailed protocol handling cgi java servlets active server pages asp server side javascript 
case cgi generation content response performed separate process 
web server receives request spawns separate process execute script 
standard output script process connected handle server standard input 
means script process reads standard input writes standard output data comes goes server 
server sets number environment variables spawning process 
variables pass information request details user information script 
body request written standard input script 
script writes response sent standard terminates 
server reads output sends web browser 
sip cgi concluded section mechanisms needed complete service programming solution flexible general purpose trusted users primarily targeted administrators simpler restricted targeted untrusted users consumers 
web cgi flexible mechanism creating dynamic content 
possesses characteristics language independence cgi works perl tcl languages 
provides maximum flexibility 
exposes headers cgi exposes content headers request cgi application environment variables 
application sees fit ignore doesn care 
encoding sip messages similar encoding messages environment variable approach directly applied sip 
creation responses cgi advantageous control aspects response including headers response codes reason phrases addition content 
sip need level flexibility services defined largely headers responses 
access resources cgi script general purpose program existing api access desired network service 
properties cgi ideal starting point service creation ip telephony context 
interface server service logic flexible enabling entire packets sent back forth set network services accessible service logic unlimited 
similarity sip cgi application internet telephony straightforward 
usage cgi internet telephony service creation number advantages component reuse cgi allows easy reading environment variables parsing generation header fields 
sip reuses basic syntax tools immediately applicable sip cgi 
familiar environment web programmers familiar cgi 
ease extensibility cgi interface language easy extend reapply protocols sip 
sections discuss sip cgi detail 
basic operation traditional cgi sip cgi script invoked sip request arrives server 
server passes body message script standard input sets environment variables containing information message headers user information server configuration 
script performs processing generates data written standard output script 
data read server script terminates 
cgi output script need response send 
script instruct server proxy request create entirely new request 
fact script instruct server generate multiple messages 
accomplished message multiplexing rules sip place messages script output 
important difference sip cgi cgi persistence model 
cgi request arrives script executes response generated script terminates 
server generates response transaction complete 
sip script cause requests 
means server eventually receive responses requests responses passed script processing 
implication generating output script persist continue interacting server process subsequent responses 
option keep script process active duration transaction 
departs substantially cgi model 
processing message script passes state token called script cookie server sip cgi meta header meta header directive passed script server inside sip message 
meta headers removed server forwarding requests 
script re executed point server passes cookie back environment variables 
token opaque server contain script 
essence execution script procedure call particular procedure dependent semantic cookie 
services require cgi script executed message received 
example call forward unconditional service requires special logic executed invite received 
responses invite processed rules sip specification 
avoid needless execution scripts cases script capable instructing server re executed subsequent messages arrive 
feature similar event dps implemented means sip cgi meta header 
meta header contains description conditions script executed applicable call 
addition requests creating new requests generating response script instruct server forward response previously received upstream caller 
response received stored server transaction complete 
server associates unique identifier response 
script executed identifier response triggered execution passed script environment variables 
script store identifiers script cookie recalled time 
script re executed time arrival response script instruct server return response previously received 
server placing special message script output 
message contains identifier response request uri field message 
addition controlling messages get sent script control headers messages 
default sip server fill headers requests forwarded responses generated responses rules sip specification 
behavior acceptable script need specify headers messages outputs 
script optionally instruct server place specific header message replace header message new delete header message 
script controls body message copied updated removed 
details operation sip cgi 
example sip cgi operation assume request received triggering execution sip cgi script invite sip astronomer lab university edu sip sip udp university edu subject io orbit sip physicist university edu sip astronomer university edu call id cseq invite contact sip smith university edu script outputs cgi proxy request sip jacobs physics university edu sip contact subject earth rotation sip ringing cgi script cookie asd sip script output contains short messages separated blank lines 
instructs server proxy received request jacobs physics university edu 
contact header value instructs server remove contact header request 
subject header instructs server replace subject header request specified 
server perform operations generate request invite sip jacobs physics university edu sip sip udp lab university edu sip udp university edu subject earth rotation sip physicist university edu sip astronomer university edu call id cseq invite second message script output instructs server generate ringing response caller 
server fill required header fields send response sip ringing sip udp university edu sip physicist university edu sip astronomer university edu call id cseq invite message script output instructs server set script cookie string meaning script 
time script invoked response request arrives cookie passed back script environment variable 
header processing rules provide script flexibility choosing level control 
simple script server handle header processing 
complex script completely manage server processing generating headers 
call processing language sip cgi ideal tool service creation trusted users flexible service creation untrusted users consumers 
developed new scripting language called call processing language cpl untrusted users define services 
cpl scripts uploaded users network servers logic read verified service instantiated instantly 
section overview requirements language fashion describe design discuss primitive constructs 
language requirements cpl scripts generated untrusted parties run service provider platform requirements imposed language verifiability service provider able verify automatically user described service formed successfully executed server 
needs able verify time script submitted discovering execution lead user able receive calls 
course possible guarantee successful execution submission time unexpected network failures example cause service unsuccessful server confirm able willing carry parts specified service 
completion possible determine submission time service specified cpl completely executed finite amount time 
implies language services specified turing complete particular certain constructs generalized looping calls external services timeouts 
constructs guaranteeing completion undecidable problem 
safety execution service description able represent unsafe actions modifying users data examining arbitrary files server 
furthermore possible interfere operation server large amounts cpu time memory storage network bandwidth resources 
standardized representation customers service providers may software different vendors important service descriptions compatible different tools 
desirable language readable humans machines 
facilitates automatic authoring tools allows hand authoring advanced users 
sip cgi details messages exposed script select information control available cpl support language provides set number commands allow access information control server 
commands sip independent define services sufficiently high level 
means cpl portable different signaling protocols servers 
language design requirements chose follow service creation models design language represents services decision graph 
individual nodes decision graph primitives language 
specific decisions actions taken course specifying service 
decisions actions arranged directed acyclic graph dag defines service 
control begins single root node node outputs depending result choice action taken node 
node outputs lead tree actions decisions 
possible outputs node left unspecified 
means server take normal default action take current call state absence cpl script 
similarly parameters conditions actions left unspecified default values 
example graph simple caller forward redirect service shown 
call string switch field match example com location url sip jones example com location url sip jones voicemail 
example com merge clear example cpl decision graph proxy timeout redirect busy timeout representation services directed acyclic graph implicitly guarantees cpl safe execution requirements 
flow control moves downward decision tree conclude decision tree formed service eventually reach leaf node terminate 
failure guarantee resources service finite proportional length longest branch tree worst case 
means safety cpl checked searching cycles graph represents computing maximum depth tree 
ensure bounds running time action restricted amount time requires execution 
means actions interface external resources database queries timeouts 
removed generalized programming constructs looping recursion variables 
decided represent decision graphs extended markup language xml scripting language 
xml similar flavor html contains tags describe data document 
considered usage traditional scripting languages perl tcl python portable programming languages java application specific languages sieve email filtering 
chose xml important features 
xml documents perfect representing structured data particular tree structures optional links 
exactly structure needed representing dags define call services 
addition xml contains specific keywords able define precise set keywords representing control primitives information accesses 
xml useful allows syntax semantics script verified xml validation document type definition dtd 
xml readable humans machines satisfying design goal cpl xml choice easily extended 
tag attribute name explicitly specified parser immediately determine support requested features decide support 
furthermore xml built mechanisms additions new tags attributes come namespaces specified head document 
xml means perfect 
tends verbose requiring relatively long programs simple services 
addition xml programming language syntax inclusion certain language features variable assignment awkward 
limited flexibility advantage disadvantage application 
mapping cpl xml straightforward 
enclosing xml tag named call contains entire cpl script indicating point execution begins 
nodes outputs represented xml tags parameters represented xml tag attributes 
node tags typically contain output tags vice versa representing descent decision tree 
convergence outputs point single node represented links 
language primitives broad classes language primitives cpl switch nodes represent decisions script 
secondly location nodes indicate locations users directly 
signaling actions core language control behavior underlying signaling protocol 
non signaling actions allow non call actions taken 
discuss types primitives turn 
switch nodes switch nodes allow cpl script decisions determine actions perform 
types decisions exist 
type decisions depend parameters original call triggered script sender recipient types media involved total bandwidth required forth 
sort decisions global state independent call current example current date time falls range 
location nodes location nodes specify locations subsequent signaling actions contact 
locations specified ways directly literal urls indirectly 
indirect lookup allows server retrieve list locations contact external source example database server sip registrar associated cpl server 
cpl script set locations specified implicit global variable 
location nodes modify implicit variable adding set clearing set adding new values 
signaling actions signaling actions form core cpl control broad behavior underlying signaling protocol 
basic signaling actions proxy redirect response 
proxy powerful causes cpl server forward call currently specified location set waits responses 
server automatically picks best response 
best response success call picked script terminates call setup complete 
output node busy failure indicated subsequent nodes pointed output executed 
redirect response simpler actions 
immediately terminate execution script actions imply call server done handling call 
redirect sends redirection request current set locations response allows server send failure condition reject call 
non signaling actions non signaling actions allow script record events notify user 
instance record stored log server allowing user categorize calls receive 
alternately action send electronic mail instant message user event occurs allows script warn users failure conditions malfunctioning script prevent receiving phone calls alternatively alert incoming calls position reached telephone 
xml easily extended adding additional primitives additional parameters existing primitives simple harm backward compatibility 
number example cpl scripts appendix details cpl 
internet telephony point point voice transport internet 
potential combining best traditional telephony services internet applications 
enable new classes services don exist network today 
flexibility introduces new challenges 
services programmed 
existing tools programming internet services leveraged internet telephony 
investigated problem perspectives programming services trusted user administrator untrusted user consumer 
requirements quite different flexibility paramount case security 
recognition developed sip common gateway interface cgi programming services case call processing language cpl 
sip cgi successful web cgi model affords flexibility cgi 
cpl xml language verified automatically provide security 
number open issues remain 
sip cgi number drawbacks working resolve 
script run machine server 
second sip cgi scripts easily provide asynchronous directives server 
looking modifications sip cgi rectify problems 
call processing language definition choosing right set primitives complex issue 
cgi cpl feature interaction issues require study 
identified investigation needed 
means transporting sip cgi cpl developed allowing users upload scripts servers 
issues authenticity privacy paramount 
initial proposal sip register messages purpose 
sip cgi implemented part sip server implementations lucent bell laboratories columbia university cpl integrated implementations 
schulzrinne re engineering telephone system proc 
ieee singapore international conference networks singapore apr 
schulzrinne casner frederick jacobson rtp transport protocol real time applications request comments proposed standard internet engineering task force jan 
braden ed zhang berson herzog jamin resource reservation protocol rsvp version functional specification request comments proposed standard internet engineering task force sept 
blake black carlson davies wang weiss architecture differentiated services internet draft internet engineering task force oct 
progress 
international telecommunication union visual telephone systems equipment local area networks provide non guaranteed quality service recommendation telecommunication standardization sector itu geneva switzerland may 
elliott huitema pickett media gateway control protocol internet draft internet engineering task force feb 
progress 
handley schulzrinne schooler rosenberg sip session initiation protocol request comments proposed standard internet engineering task force mar 
schulzrinne rosenberg comparison sip internet telephony proc 
international workshop network operating system support digital audio video dav cambridge england july 
schulzrinne rosenberg signaling internet telephony international conference network protocols icnp austin texas oct 
schulzrinne rosenberg session initiation protocol providing advanced telephony services internet bell labs technical journal vol 
pp 
october december 
schulzrinne rosenberg internet telephony architecture protocols ietf perspective computer networks isdn systems vol 
pp 
feb 
pint profile sip sdp protocol ip access telephone call services internet draft internet engineering task force nov 
progress 
kaplan shah intelligent network standards 
new york mcgraw hill 
robinson www common gateway interface version internet draft internet engineering task force dec 
progress 
rosenberg schulzrinne common gateway interface sip internet draft internet engineering task force nov 
progress 
bray paoli sperberg mcqueen extensible markup language xml recommendation rec xml world wide web consortium feb 
available www org tr rec xml 
wall christiansen schwartz programming perl 
sebastopol california reilly nd ed 
ousterhout tcl tk toolkit 
reading massachusetts addison wesley 
lutz programming python 
sebastopol california reilly 
sieve mail filtering language internet draft internet engineering task force mar 
progress 
schulzrinne cpl language user control internet telephony services internet draft internet engineering task force mar 
progress 
schulzrinne transporting user control information sip register payloads internet draft internet engineering task force mar 
progress 
example cgi script call forwarding perl script providing call forwarding service shown 
script berkeley db database file maps associative array 
request arrives causing script invoked script looks user field obtains forwarding location database 
call location match database error returned 
script commented explain operation 
example cpl scripts show example cpl scripts 
examples illustrate types services envisioned cpl nature descriptions 
call redirect unconditional shows simple script unconditionally redirects calls particular address 
call forward busy answer script attempts ring call standard location recipient available forwards call voicemail server 
script starts providing location jones example com inherited proxy request 
proxy request return indication busy 
busy branch provides location voice mail server branch refers link 
illustrates xml linking possibilities 
usr bin perl store list users db file berkeley database 
db file subroutine gets invoked error condition 
takes status code sip numerical response code reason phrase arguments prints line standard 
line cgi action returning error response sub fail status reason print sip status reason exit define associative array called addresses bind database file addresses db 
means addresses sip user example com contains forwarding address user example com tie addresses db file addresses db fail address database failure retrieve field sip request environment variable 
env wasn defined return error caller 
defined fail missing recipient obtain forwarding address database destination addresses forwarding address return error caller 
defined destination fail user forward call cgi proxy request cgi action instruct server execute script transaction print cgi proxy request destination sip print cgi addresses close db file perl script call forwarding call location url sip smith phone example com redirect location call call redirect unconditional script call proxy call jones location url sip jones example com proxy timeout busy forward voicemail busy location url sip jones voicemail example com merge clear id voicemail proxy location busy answer jump voicemail link forward voicemail link ref voicemail proxy location call call forward busy answer script allows nodes link repeat parts script 
roughly equivalent named goto 
time day routing illustrates condition non call related criterion time day 
switch element acts language switch statement set time values element 
elements follow proxy element server simply takes default action specified signaling protocol terminates 
call time switch week contact user registered locations time day lookup source registration success proxy success lookup time rest time forward call voicemail location url sip jones voicemail example com proxy location time switch call time day routing script 
