arxiv cs cs lo may practical reasoning expressive description logics ian horrocks department computer science university manchester horrocks cs man ac uk ulrike sattler theoretical computer science rwth aachen sattler informatik rwth aachen de stephan tobies theoretical computer science rwth aachen tobies informatik rwth aachen de description logics dls family knowledge representation formalisms mainly characterised constructors build complex concepts roles atomic ones 
expressive role constructors important applications computationally problematical 
algorithm decides satisfiability dl alc extended transitive inverse roles role hierarchies qualifying number restrictions 
early experiments indicate algorithm suited implementation 
additionally show alc extended just transitive inverse roles pspace 
investigate limits decidability family dls 
motivation description logics dls known family knowledge representation formalisms 
notion concepts unary predicates classes roles binary relations mainly characterised constructors allow complex concepts roles built atomic ones 
sound complete algorithms interesting inference problems subsumption satisfiability concepts known wide variety dls ss sat dl cdl 
appeared proceedings th international conference logic programming automated reasoning lpar number lecture notes artificial intelligence pages 
springer verlag september 
specific application expressivity dl sufficient describe relevant properties objects application domain 
example transitive roles ancestor inverse roles successor predecessor play important le adequate representation complex aggregated objects hs reasoning conceptual data models cln 
reasoning respect cyclic definitions crucial applying dls reasoning database schemata cdl 
relevant inference problems extensions dls allow transitive inverse roles known decidable dl appropriate inference algorithms described dm high degree nondeterminism appears prohibit realistic applications 
mainly due fact algorithms handle just transitive roles transitive closure roles 
shown sat restricting dl transitive roles lead lower complexity transitive roles combined role hierarchies allow algorithms behave quite realistic applications hor 
remained show true inverse roles qualifying number restrictions 
extends understanding issues directions 
firstly algorithm decides satisfiability alc ss seen notational variant multi modal logic km extended transitive inverse roles role hierarchies qualifying number restrictions concepts form haschild female allow description objects restricting number objects type related certain role 
algorithm checking satisfiability subsumption respect general concept inclusion axioms cyclic definitions axioms internalised 
absence transitive closure leads lower degree non determinism experiments indicate algorithm suited implementation 
secondly show alc extended transitive inverse roles pspace 
algorithm prove surprising result introduces enhanced blocking technique 
general blocking ensure termination algorithm cases stuck loop 
enhanced blocking technique allows cases detected earlier provide useful efficiency gains implementations expressive dls 
investigate limits decidability family dls showing relaxing constraints placed kinds roles allowed number restrictions leads undecidability inference problems 
due lack space selected proofs 
full details please refer hst hst 
preliminaries section syntax semantics various dls investigated subsequent sections 
includes definition inference problems concept subsumption satisfiability problems respect terminologies interrelated 
logics discuss extension known dl alc ss include transitively closed primitive roles sat call logic due relationship proposition multi modal logic sch 
basic dl extended variety ways see overview 
definition set concept names set role names transitive role names set si roles 
set si concepts smallest set concept name concept concepts si role concepts 
avoid considering roles define function inv roles inv role name inv define function trans returns true iff transitive role 
precisely trans true iff inv 
shi obtained si allowing additionally set role inclusion axioms form roles inverse 
set role inclusion axioms inv inv called role hierarchy transitive reflexive closure inv inv 
shiq obtained shi allowing additionally qualifying number restrictions concepts form simple possibly inverse role non negative integer 
role called simple iff transitive transitive sub roles 
shin restriction shiq qualifying number restrictions may form 
case omit symbol write 
interpretation consists set called domain valuation maps concept subset role subset concepts roles nonnegative integers properties satisfied denotes cardinality set interpretation satisfies role hierarchy iff denote fact say model logic previously called cumbersome adding letters represent additional features 
construct name syntax semantics atomic concept universal concept atomic role transitive role conjunction disjunction negation exists restriction value restriction implies role hierarchy inverse role number restrictions qualifying number restrictions nr nr nr nr syntax semantics si family dls concept called satisfiable respect role hierarchy iff interpretation 
interpretation called model concept subsumes concept written iff holds model interpretation individual called instance concept iff dls considered closed negation subsumption un satisfiability role hierarchies reduced iff unsatisfiable unsatisfiable iff concept name baa sch bbn internalisation terminological axioms introduced technique reduces reasoning respect possibly cyclic terminology satisfiability concepts 
hor saw role hierarchies reduction 
presence inverse roles reduction slightly modified 
definition terminology finite set general concept inclusion axioms 
cn dn ci di arbitrary shiq concepts 
interpretation said model iff di holds ci di satisfiable respect iff model 
subsumes respect iff model lemma shows general concept inclusion axioms internalised universal role transitive super role roles occurring respective inverses 
lemma terminology set role inclusion axioms shiq concepts ct ci di ci di 
transitive role occur set ru inv occurs 
satisfiable iff ct ct satisfiable subsumes respect iff ct ct unsatisfiable proof lemma similar ones sch baa 
importantly shown shiq concept satisfiable respect terminology role hierarchy connected model reachable role path possibly involving inverse roles easy consequences semantics definition theorem satisfiability subsumption shiq concepts resp 
shi concepts terminologies role hierarchies polynomially reducible un satisfiability shiq concepts resp 
shi concepts role hierarchies 
reasoning si logics section tableaux algorithms decides satisfiability shiq concepts shiq reasoning problems see theorem second decides satisfiability subsumption pspace 
please note shin shiq longer finite model property example concept transitive super role satisfiable models infinite domain 
concept requires existence infinite path element path satisfies elements satisfy 
path collapse cycle return element element satisfy return subsequent element path node satisfy 
correctness algorithms presenting proved showing create tableau concept iff satisfiable 
ease construction assume concepts negation normal form nnf negation occurs front concept names 
shiq concept easily transformed equivalent nnf pushing negations inwards denote nnf concept nnf define clos smallest set concepts contains closed subconcepts 
please note size clos linearly bounded size definition shiq concept nnf role hierarchy rd set roles occurring inverses 
tableau iff set individuals clos maps individual set concepts rd maps role set pairs individuals individual 
furthermore clos rd holds 





trans 
iff inv 



placeholder define 
tableaux si concepts defined analogously satisfy properties due absence role hierarchy identity 
due close relationship models tableaux lemma easily proved induction 
consequence algorithm constructs possible tableau input concept decision procedure satisfiability concepts 
lemma shiq concept resp 
si concept satisfiable role hierarchy iff tableau reasoning shiq give algorithm shiq concept decides existence tableaux implicitly assume arbitrary fixed role hierarchy tableaux algorithm works finite completion tree tree nodes correspond individuals tableau node labelled set shiq concepts employs blocking technique hs guarantee termination path contains pairs successive nodes pair wise identical label connecting edges identical labels path second pair longer expanded said blocked 
blocked paths construct infinite tableau 
identical labels sure copies pair descendants substituted second pair nodes respective descendants 
definition completion tree shiq concept tree node tree labelled set clos edge labelled set possibly inverse roles occurring clos explicit inequalities nodes tree recorded binary relation implicitly assumed symmetric 
completion tree node called successor node iff successor node called neighbour iff successor inv successor predecessors ancestors defined usual 
node blocked iff directly indirectly blocked 
node directly blocked iff ancestors blocked ancestors 
successor successor 


case say blocks blocking technique involves pairs nodes called pair wise blocking 
node indirectly blocked iff ancestors blocked successor node condition avoids wasted expansions application rule 
node said contain clash iff concept role neighbours yn yi yi yj completion tree called clash free iff nodes contains clash called complete iff expansion rules applicable 
shiq concept algorithm starts completion tree consisting single node 
applies expansion rules stopping clash occurs answers satisfiable rule 
indirectly blocked 
rule 
indirectly blocked 
rule 
blocked 
neighbour create new node rule 
indirectly blocked 
neighbour rule 
indirectly blocked 
trans 
neighbour choose rule 
indirectly blocked 
neighbour rule 
blocked 
neighbours 
yn yi yi yj create new nodes 
yn yi yi yi yj rule 
indirectly blocked 
neighbours ancestor 

ancestor inv 

set complete tableaux expansion rules shiq iff completion rules applied way yield complete clash free completion tree 
soundness completeness tableaux algorithm immediate consequence lemmas 
lemma shiq concept 

tableaux algorithm terminates started 
expansion rules applied yield complete clash free completion tree tableau 

tableau expansion rules applied yield complete clash free completion tree 
proof appendix 
discuss intuition expansion rules correspondence constructors shiq 
roughly speaking completion tree partial description model individuals correspond nodes interpretation roles taken edge labels 
completion tree tree yield correct interpretation transitive roles interpretation transitive roles built transitive closure relations induced corresponding edge labels 
rules standard tableaux rules alc propositional modal logic km 
rule standard rule alc propositional modal logic extended deal role hierarchies follows 
assume situation satisfies precondition rule neighbour trans 
successor due transitivity successor successor satisfy ensured adding rules dealing qualifying number restrictions similarly rules 
concept rule generates successors yn yi prevent rule new nodes sets yi yj conversely neighbours labelled rule chooses merges edges connecting definition clash takes care situation relation impossible merge neighbours choose rule ensures neighbours labelled rule unsatisfiability concepts go undetected 
relation prevent infinite sequences rule applications contradicting number restrictions form labelling edges sets roles allows single node successor comparable respect theorem immediate consequence lemma theorem 
theorem tableaux algorithm decision procedure satisfiability subsumption shiq concepts respect terminologies 
considerations employ simpler view correspondence completion trees models need bother path construction mentioned 
pspace algorithm si obtain worst case optimal algorithm si shiq algorithm modified follows 
si allow qualifying number restrictions choose rule omitted 
absence may assume concepts appearing labels nnf smaller set subconcepts denoted sub absence role hierarchies edge labels restricted roles sets roles 
due absence number restrictions logic finite model property blocking longer need involve pairs nodes identical labels nodes originally identical labels 
obtain pspace algorithm employ refined blocking strategy identity condition similarity condition 
achieved second label node 
describe motivate blocking technique detailed proofs extension result sin hst 
establishing pspace result si straightforward glance 
problem presence inverse roles lead constraints propagating upwards tree 
compatible standard trace technique ss keeps single path memory time constraints propagating upwards tree may influence paths visited discarded memory 
possibilities overcome problem guessing constraints propagate upwards reset restart extension trace technique described section 
unfortunately problem 
apply techniques necessary establish polynomial bound length paths completion tree 
easily established logics alc allow transitive roles 
alc transitive roles bound due fact node block node sufficient 
presence inverse roles sophisticated blocking technique establish polynomial bound 
definition completion tree si concept tree node tree labelled sets sub edge labelled possibly inverse role occurring sub 
neighbours successors predecessors defined definition absence role hierarchies identity node blocked iff blocked ancestor ancestor predecessor inv inv inv inv 
node said contain clash iff 
completion tree expansion rules applicable called complete 
rule 

rule 

rule 

successor 
predecessor 
rule 
trans 
succ 

predecessor 
rule 
blocked rule applicable ancestors 
neighbour create new node tableaux expansion rules si si concept algorithm starts completion tree consisting single node 
applies expansion rules stopping clash occurs answers satisfiable iff completion rules applied way yield complete clash free completion tree 
shiq correctness algorithm proved showing si concept satisfiable iff tableau proving lemma see hst 
theorem tableaux algorithm decision procedure satisfiability subsumption si concepts 
blocking plays major le proof theorem especially complexity considerations discuss detail 
blocking guarantees termination algorithm 
dls alc termination mainly due fact expansion rules add new concepts strictly smaller concept triggered application 
longer true rule introduces new concepts size triggering concept 
ensure termination nodes labelled subset label ancestor blocked 
rules applied topdown successors generated rules applicable labels inner nodes touched subset blocking sufficient node blocked ancestor sufficient possible give polynomial bound length paths 
si dynamic blocking introduced hs blocks established basis established broken dynamically 
blocks established basis label equality value restrictions constrain predecessors successors 
unfortunately may lead completion trees exponentially long paths exponentially possibilities label sets path 
due non deterministic rule exponentially sets may occur 
non determinism problematical disjunctions need completely decomposed yield subset blocking situation 
optimal si algorithm additional label introduced enable sort subset blocking independent non determinism 
intuitively restriction non decomposed concepts satisfy contains boolean decompositions concepts imposed value restrictions descendants 
blocked concepts eventually decomposed 
order substitute constraints predecessors strong taken care second blocking condition 
consider path xn edges labelled trans kind path length longest concept labels decrease 
rules applied xi inv xi inv xi xi ci ci xi triggered generation xi 
limits number different labels guarantees blocking polynomial number steps 
lemma paths completion tree concept length sub 
slight modification expansion rules yields pspace algorithm 
modification necessary original algorithm keep completion tree memory needs exponential space length paths polynomially bounded 
original algorithm may forget branches restrictions pushed upwards tree necessary revisit paths considered 
reset restart mechanism solves problem follows rule applied node predecessor case rules delete successors completion tree reset 
necessary restart generation successors possible implement algorithm depth manner facilitates re space 
modification affect proof soundness completeness algorithm course re prove termination hst relied fact removed nodes completion tree 
summing get theorem modified algorithm pspace decision procedure satisfiability subsumption si concepts 
undecidability unrestricted shin earlier dls combine hierarchy transitive non transitive roles form number restrictions hs hst shin allows simple roles restrictions roles transitive transitive 
justification limitation partly grounds doubtful semantics transitive functional roles partly simplify decision procedures 
section show allowing arbitrary roles shin number restrictions leads undecidability 
convenience denote shin arbitrary roles number restrictions shin undecidability proof uses reduction domino problem ber adapted bs 
problem asks set domino types exists tiling grid point grid covered exactly domino types adjacent dominoes compatible respect predefined criteria 
definition domino system consists non empty set domino types 
dn sets horizontally vertically matching pairs problem determine exists tiling grid point grid covered domino type horizontally vertically adjacent pairs domino types respectively mapping problem reduced satisfiability shin concepts undecidability domino problem implies undecidability satisfiability shin concepts 
ensuring point associated exactly domino type point neighbours satisfy compatibility conditions induced simple logics concepts cdi domino types di value restrictions boolean connectives applying conditions grid simple logic shin deal arbitrary axioms 
crucial difficulty representing grid horizontal vertical roles particular forcing coincidence successors 
accomplished shin alternating pattern horizontal visualisation grid role hierarchy 
roles vertical roles disjoint primitive concepts identify points grid different combinations successors 
coincidence successors enforced number restrictions transitive super roles possible combinations roles 
visualisation resulting grid suitable role hierarchy shown ij transitive roles 
alternation roles grid means transitive super roles sij connects point points points 
number restriction form sij enforce necessary coincidence successors 
complete specification grid axioms 
remains add axioms encode local compatibility conditions described bs assert subsumed disjunction domino types enforce placement tile point grid 
concept satisfiable various axioms internalised described lemma iff compatible tiling grid 
discussion new dl system implemented shiq algorithm described section 
pending completion project existing fact system hor modified deal inverse roles shiq blocking strategy giving dl equivalent shi extended functional roles hs refer dl shif modified fact system fact 
fact conduct initial experiments terminology representing fragments database schemata inter schema assertions data warehousing application cdl slightly simplified version proposed encoding generate shif terminologies 
fact able classify terminology contains concepts axioms mhz pentium cpu time 
contrast eliminating inverse roles embedding technique cdr gives fact terminology additional axioms fact unable classify hours cpu time 
extension embedding technique eliminate number restrictions dl requires target logic supports transitive closure roles converse pdl 
larger number axioms embedding introduce tractable reasoning performed resulting terminology 
aware algorithm converse pdl employ called cut rule dm application introduces considerable additional non determinism 
inevitable lead degradation empirical tractability 
far complexity concerned successful extending pspace result si sin hst 
currently working extension result combining techniques tob 
baa baader 
augmenting concept languages transitive closure roles alternative terminological cycles 
proc 
ijcai 
baader buchheit hollunder 
cardinality restrictions concepts 
artificial intelligence 
bbn baader 
nebel nutt smolka 
expressivity feature logics negation functional uncertainty sort equations 
logic language information 
ber berger 
undecidability problem 
mem 
amer 
math 
soc 
bs baader sattler 
number restrictions complex roles description logics 
proc 
kr pages 
cdl calvanese de giacomo lenzerini 
decidability query containment constraints 
proc 
th acm sigact sigmod sigart sym 
principles database systems pods pages 
cdl calvanese de giacomo lenzerini nardi rosati 
source integration data warehousing 
proc 
dexa 
ieee computer society press 
cdl calvanese de giacomo lenzerini 
reasoning expressive description logics fixpoints automata infinite trees 
proc 
th int 
joint 
conf 
artificial intelligence ijcai 
cdr calvanese de giacomo rosati 
note encoding inverse roles functional restrictions alc knowledge bases 
proc 
dl 
cln diego calvanese maurizio lenzerini daniele nardi 
unified framework class representation formalisms 
proc 
kr pages 
kaufmann los altos 
dl de giacomo lenzerini 
aggregate foundations description logics tuples sets 
proc 
ijcai 
dl de giacomo lenzerini 
tbox abox reasoning expressive description logics 
proc 
kr pages 
kaufmann los altos 
donini lenzerini nardi nutt 
complexity concept languages 
proc 
kr boston ma usa 
donini lenzerini nardi schaerf 
reasoning description logics 
brewka editor foundation knowledge representation 
csli publication cambridge university press 
dm de giacomo massacci 
combining deduction model checking tableaux algorithms converse pdl 
information computation 
appear 
hollunder nutt schmidt 
subsumption algorithms concept description languages 
ecai pitman publishing london 
hor horrocks 
expressive description logic fact fiction 
proc 
kr pages 
hs horrocks sattler 
description logic transitive inverse roles role hierarchies 
logic computation 
appear 
hst horrocks sattler tobies 
pspace algorithm deciding alci satisfiability 
technical report theoretical computer science rwth aachen 
see www lti informatik de forschung papers html 
hst horrocks sattler tobies 
description logic transitive converse roles role hierarchies qualifying number restrictions 
report theoretical computer science rwth aachen germany 
sat sattler 
concept language extended different kinds transitive roles 

deutsche ki lnai 
springer verlag 
sch schild 
correspondence theory terminological logics preliminary report 
proc 
ijcai pages sydney 
ss schmidt schau smolka 
attributive concept descriptions complements 
artificial intelligence 
tob tobies 
pspace algorithm graded modal logic 
proc 
cade lncs 
springer 
appendix appendix proof lemma repeated easier 
lemma 
shiq concept 

termination tableaux algorithm terminates started 
soundness expansion rules applied yield complete clash free completion tree tableau 

completeness tableau expansion rules applied yield complete clash free completion tree 
termination clos rd nmax maximum occurs concept form clos 
termination consequence properties expansion rules expansion rules remove nodes tree concepts node labels 
edge labels changed rule expands sets case node labelled edge blocked block broken 
successor node result application rule rule node concept trigger generation successors 
rule successor generated concept set rule neighbour 
rule 
yn generated rule yi yj holds implies neighbours 
rule merges nodes application rule sets neighbour inherits inequalities clos contains total concepts degree tree bounded nmax 
nodes labelled non empty subsets clos edges subsets rd mk different possible labellings pair nodes edge 
path length mk pair wise blocking condition nodes directly blocked furthermore node generated distance root node remains distance paths shortened 
path nodes blocked longer paths length mn 
soundness complete clash free completion tree 
path 
path sequence pairs nodes form xn define tail xn tail xn xn xn denote path 
set paths defined inductively follows root node paths path paths node successor tail blocked paths node successor tail blocks paths 
please note due construction paths paths blocked blocked iff indirectly blocked 
furthermore holds 
define tableau paths tail successor tail inv successor tail 
claim tableau respect show satisfies properties definition 

property holds clash free properties hold tail blocked complete 
property assume 
successor tail rule applicable 

inv successor tail tail indirectly blocked rule applicable 
property assume 
define tail 
neighbour rule applicable 
possibilities successor blocked 
blocked node predecessor possibilities form tail form tail predecessor predecessor implies blocks predecessor due construction paths 
definition blocking condition implies due pair wise blocking condition 
cases 
property assume trans 
successor tail rule applicable 
follows 
inv successor tail tail neighbour indirectly blocked implies tail 
property assume 
successor tail choose rule applicable 

inv successor tail tail indirectly blocked choose rule applicable 
assume property violated 
show implies tail contradiction clash freeness completeness define tail 
due assumption distinguish cases contains paths form 
claim function tail injective assume paths tail tail form form 
blocked contradicting 
blocked block implies contradiction 
tail injective holds tail 
tail successor 
implies contains path form 
obviously may contain path 
previous case tail injective function set tail successor tail 
show holds prove existence neighbour tail 
supplied tail 
distinguish cases blocked 
implies inv successor tail contains successors tail construction 
implies blocked inv successor definition pairwise blocking implies inv successor node 
tail contains successors tail construction neighbour 
property assume 
completeness implies exist individuals yn yi tail yi 
claim individuals path qi qi qi qi qj obviously implies yi possibilities yi successor yi blocked qi yi yi path desired properties 
yi successor yi blocked node qi path desired properties 
yi may block necessary include yi explicitly path distinct 
inv successor yi 
may yi 
implies form tail yi 
desired properties obviously distinct paths qj 
property satisfied due symmetric definition property satisfied due definition successor takes account role hierarchy 
completeness tableau tableau guide application non deterministic rules 
inductively define function mapping individuals tree neighbour implies claim completion tree function satisfies 
rule applicable rule applicable way yields completion tree extension satisfy 
completion tree function satisfies 
consider various rules 
rule 
implies due property definition rule applied violating 
rule 
tableau property definition implies 
rule add concept holds 
rule tableau property definition implies element 
application rule generates new variable 
set yields function satisfies modified tree 
rule due 
tableau property definition implies rule applied violating 
rule trans neighbour due 
tableau property definition implies rule applied violating 
choose rule neighbour due 
tableau property definition implies 
choose rule add appropriate concept holds 
rule 
tableau property definition implies individuals tn ti ti ti tj rule generates new nodes 
yn 
setting yn tn obtains function satisfies modified tree 
rule 
tableau property definition implies rule applicable implies neighbours 
yn yi 
nodes yn hold 
hold chosen ancestor rule applied violating 
claim yield completeness tableaux algorithm 
initial completion tree consisting single node give function satisfies setting exists tableau 
rule applicable applied way maintains algorithm terminates sequence rule applications terminate 
properties imply tree generated clash free possibilities clash easy see hold contain node property definition violated 
contain node neighbours 
yn yi yi yj yi yj implies yi yj contradiction property definition 

