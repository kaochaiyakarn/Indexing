advanced computing systems association originally published proceedings freenix track usenix annual technical conference monterey california usa june managing traffic altq cho sony computer science laboratories tokyo usenix association rights reserved rights individual papers remain author author employer 
permission granted noncommercial reproduction educational research purposes 
copyright notice included reproduced 
usenix acknowledges trademarks 
information usenix association phone fax email office usenix org www www usenix org altq package traffic management 
altq includes queueing framework advanced queueing disciplines cbq red wfq rio 
altq supports rsvp diffserv 
altq configured variety ways research operation 
requires understanding technologies set things correctly 
summarize design trade offs available technologies limitations applied typical network settings 
queueing basics essentially traffic management scheme involves queue management 
large number queueing disciplines proposed date order meet contradictory requirements fairness protection performance bounds ease implementation administration 
queueing components illustrates queueing related functional blocks router 
functional block needed build certain service required services 
fact routers currently functional blocks 
packets arrive interface router ingress interface forwarded interface egress interface 
router functional blocks ingress interface police incoming packets main functional blocks reside egress interface 
function block described 
classifier packet classifiers categorizes packets content portion packet header 
addresses port numbers 
packets matching specified rule classified processing 
managing traffic altq cho sony computer science laboratories tokyo japan csl sony jp meters traffic meters measure properties traffic stream bandwidth packet counts 
measured characteristics stored flow state functions 
markers packet markers set particular value portion packet header 
written values priority congestion information application type types information 
discard packets traffic stream order limit queue length implicit congestion notification 
queues queues finite buffers store backlogged packets 
queueing discipline multiple queues different traffic classes 
schedulers schedulers select packet transmit backlogged packets queue 
shapers shapers delay packets traffic stream order limit peak rate stream 
shaper usually finite size buffer packets may discarded sufficient buffer space hold delayed packets 
queueing discipline general defined set functional blocks egress interface usually consists specific queue structure scheduling mechanism dropper mechanism 
functional blocks described conceptual wide variety combinations possible 
queueing disciplines bandwidth allocation important goals queueing discipline 
fair preferential bandwidth allocation achieved appropriate queueing discipline 
mechanism isolates misbehaving flow protects traffic 
ingress interface egress interface classifier meter dropper marker forwarding important goal control delay jitter critical emerging real time applications 
possible bound delay jitter flow reserving necessary network resources 
admission control required decide requested resources allocated 
needed regulate rate reserved flow means shaping 
incoming rate reserved rate avoid delay caused flow traffic 
leaky bucket simple shaper mechanism finite buffer size 
popular shaper mechanism token bucket allows small bursts configurable burst size 
token bucket accommodate traffic streams bursty characteristics suitable current internet traffic 
goal queueing discipline congestion avoidance 
tcp considers packet loss sign congestion 
router notify tcp congestion implicitly intentionally dropping packet 
list describes representative queueing disciplines 
fifo simplest possible queueing discipline fifo single queue simple drop tail dropper 
pq pq priority queueing multiple queues associated different priorities 
queue higher priority served 
priority queueing simplest form preferential queueing 
low priority traffic easily mechanism regulate high priority traffic 
wfq wfq weighted fair queueing discipline assigns independent queue flow 
wfq provide fair bandwidth allocation times congestion protects flow flows 
weight assigned queue give different proportion network capacity 
stochastic fairness queueing approximation wfq 
wfq difficult implement large number queues required classifier queues dropper marker queueing architecture scheduler shaper number flows increases 
hash function map flow fixed set queues possible different flows mapped queue 
cbq cbq class queueing achieves partitioning sharing link bandwidth hierarchically structured classes :10.1.1.126.7522
class queue assigned share bandwidth 
cbq non conserving regulate bandwidth class 
child class configured borrow bandwidth parent class long excess bandwidth available 
red red random early detection dropper mechanism exercises packet dropping stochastically average queue length 
red avoids traffic synchronization tcps lose packets time 
red tcps keep queue length short 
red fair sense packets dropped flows probability proportional buffer occupation 
red require flow state considered scalable suitable backbone routers 
issues queueing large number mechanisms available traffic management single mechanism satisfies wide range requirements 
important appropriate mechanisms suitable purpose 
addition mechanism quite different effects depending 
example wfq best effort traffic provide fair bandwidth allocation 
certain portion link capacity reserved configuring weight classifier wfq 
delay bounded adding token bucket traffic source 
furthermore easy combine different mechanisms coherent manner different mechanisms independently developed meet requirements specific applications 
issues designing queueing disciplines described 
overhead functional blocks located packet forwarding path adds overhead forwarding performance 
queueing discipline require simple operations forward packet order scale highspeed network 
preferable easily implemented hardware 
flow definition flow unit classifier identifies packets traffic stream 
flow micro flow single tcp session type aggregated flow 
packets belonging micro flow placed queue order avoid packet reordering 
tcp transport mechanisms handle order packets frequent order packets considerably damage transport performance 
classifier design design efficient classifier area active research 
scalable algorithm required number filters number active flows increases 
efficient handling wild card filters difficult needs find best match multiple fields 
classifiers required queueing firewall layer forwarding traffic monitoring 
classifiers designed shared components 
identify traffic types port numbers classifier needs check transport header tcp udp 
port classification possible packet fragmented encrypted 
ip fragments decrease path mtu discovery encrypted packets common widespread secure shells ipsec 
required states queueing discipline needs keep state traffic class 
size state total number states great impact scalability queueing discipline 
believed flow queueing preferable small network edge backbone aggregated flow queueing possible backbone network 
related issue long flow state maintained 
queueing discipline keep states flows packets queue 
hand discipline need information longer period enforce longer term rule 
fairness fairness important property handle best effort traffic 
different definitions fairness different targets fairness defined 
local fairness router necessarily lead global fairness 
network traffic dynamic constantly changing static fairness necessarily lead fairness larger time scale 
non conserving queues conserving discipline idle packet awaiting service 
non conserving discipline hand delay packets queue considered form shaper 
non conserving queue complex implement able limit peak rate reduce provide tighter performance bounds 
statistical guarantee performance guarantee deterministic statistic 
general deterministic guarantee requires larger fraction resources reserved statistical guarantee 
practice deterministic guarantee difficult implement computer communication involves mechanisms tight bounds 
traffic management people arguing need qos control bandwidth cheap abundant 
traffic management choice qos non qos wide rage spectrum 
example extreme single packet precisely controlled router 
extreme packets transferred flow control 
approaches expensive realize manage practical importance 
properly provisioned network queue management considered precaution case congestion 
works protective measure misbehaving flows misconfiguration 
effect active queue management visible properly provisioned network 
virtually shift starting point congestion effect similar increasing link capacity 
traffic management needs balance controlling provisioning level different levels 
important find balance point cost effective administratively easy manage 
time scale traffic management traffic management consists diverse set mechanisms policies 
traffic management includes ing capacity planning flow control packet scheduling factors 
cover different time scales complement 
time scale queueing packet transmission time 
queueing effective manage short bursts packets 
flow control turn manages rate flow larger time scale 
important role endto flow control keep size packet bursts small manageable queueing 
large capacity managing bursts packet level time scale 
contrary widening gap link speed bursts larger larger managing traffic important especially bandwidth gap points 
controlling bottleneck link typically bottleneck points entries wan connections source packet loss delay 
queue management effective points 
congestion caused small number bulk data sessions web images ftp isolating sessions types traffic significantly improve network performance 
serves protective measure 
hand red substantially improve performance cooperative tcp sessions 
network administrators trying keep link utilization high possible 
queueing theory tells system performance drastically drops link utilization close 
phenomenon queue longer able absorb fluctuations packet arrivals 
ideally link capacity provisioned average link utilization certain point say 
difficulty deploying queue management queueing manages outgoing traffic beneficiaries side link 
queueing appropriate managing incoming traffic queue empty exit bottleneck 
order manage incoming traffic queue management placed wan link organizations control 
queueing delay network engineers tend focus forwarding performance 
packets forwarded second long takes forward single packet 
forwarding overhead packet transmission time throughput reaches wire speed pipeline effect 
cutting overhead improves delay effect queue empty 
hand queueing delay waiting time queue orders magnitude larger forwarding delay 
implies bottleneck high table queueing overhead comparison fifo red wfq cbq cbq red usec speed forwarding improve delay delay comes queueing delay 
pay closer attention queueing delay throughput reaches wire speed 
impact link speed important understand effects overheads queueing related link speed 
illustrate issues involved plots packet transmission time queueing delay varying link speed log log scale 
min delay packet delay show required time transmit packet wire speed packet size bytes bytes respectively 
minimum time required forward packet store forward method 
worst delay shows worst case queueing delay queue full assuming maximum queue length default value bsd unix packets byte long 
hand table shows packet overhead different queueing disciplines measured mhz machine 
packet overhead queueing independent link speed 
simplistic analysis queueing overhead negligible packet overhead min delay acceptable overhead packet delay 
overhead cbq usec 
negligible mbps acceptable gbps 
overhead red usec 
negligible mbps 
hand delay requirement application independent link speed 
interactive telnet session needs latency msec preferential scheduling required link speed mbps 
voice stream needs latency msec preferential scheduling required link speed mbps 
performance factors analysis simplistic illustrates effects link speed queueing 
summary queueing significant overhead commonly link speed 
preferential scheduling improves interactive response slow link improves real time traffic medium speed link 
building services far looked behavior single router 
service quality obtained con time sec sec ms ms msec usec usec usec worst delay packet delay min delay router behaviors communication path 
example traffic stream user user controlled way average rate mbps peak rate mbps packet delay msec 
useful services network properly configured consistent way 
order guarantee service quality necessary configure routers path control incoming traffic routers 
diffserv working group ietf trying establish framework various types differentiated services 
diffserv model network supports common set services called ds domain 
ds domain built way incoming packets boundary 
incoming packets classified measured marked user contract 
boundary actions called traffic conditioning 
inside ds domain internal routers called ds interior nodes perform preferential packet scheduling packet header field ds field marked boundary 
traffic management mechanisms simpler closed network police incoming traffic network boundary 
example simple priority queueing discipline provide premium service amount incoming premium traffic limited small fraction capacity 
hand current ip networks follow closed network model firm assumption incoming telnet delay limit kernel timer cbq voice delay limit red ethernet link speed bps queueing link speed traffic 
altq altq framework freebsd introduces variety queueing disciplines 
altq provides platform traffic management related research 
altq active queue management available operational experience 
design basic design altq quite simple queueing interface designed switch set queueing disciplines shown 
implement altq fields added struct 
added fields discipline type common state field pointer discipline specific state pointers discipline specific enqueue dequeue functions 
implementation policy altq minimal changes existing code 
current kernel queueing abstraction implement various types queueing disciplines 
result parts kernel code assume fifo queueing structure 
especially problematic drivers directly structure snd structure 
drivers modified easy modify existing drivers 
took approach allows modified drivers unmodified drivers coexist modify drivers need incrementally add supported drivers 
enqueue snd dequeue ip output output start altq enqueue alternative discipline altq dequeue alternative discipline alternate queueing architecture queueing operations altq queueing disciplines common set queue operations 
parts kernel code manipulate queue queueing operations enqueue dequeue peek flush 
drivers modified operations refer structure 
enqueue operation responsible queueing packet functions classifier dropper required enqueue packet 
dequeue operation returns packet send 
main role dequeue operation packet scheduling 
peek operation similar dequeue operation remove packet queue 
peek operation driver see buffer space dma descriptors packet 
altq prepend operation prepending packet sense discipline multiple queues 
driver peek dequeue policy necessary 
flush operation empty queue non conserving queues emptied dequeue loop 
discipline operations queueing disciplines controlled ioctl system calls queueing device dev cbq 
altq defined character device queueing discipline defined minor device altq 
common operations handle queueing disciplines attach detach enable disable 
attach operation sets queueing discipline specified interface 
interface queueing discipline attached time 
attached discipline activated enable operation performed 
alternative queueing disabled closed system falls back original fifo queueing 
operations queueing discipline usually needs discipline specific settings done discipline specific 
altq altq implements queueing disciplines including cbq wfq red ecn rio 
managing operational network cbq appropriate discipline 
cbq flexible meet wide range requirements implementation stable tested 
cbq implementation integrates red red enabled cbq class 
detailed mechanism cbq 
implementation issues altq different link speeds 
issues described 
effect timer resolution shapers usually realized timers resolution shaper limited kernel timer resolution 
kernel timer resolution msec unix systems 
implies traffic bursty packet transmission time link kernel timer resolution 
mbps ethernet byte packet takes msec packets sent timer interval 
mbps problematic packets sent timer interval 
desirable higher resolution kernel timer 
current pcs little overhead timer resolution increased factor 
cbq employs elaborate scheme limit bandwidth constraints timer resolution 
cbq overlimit class suspended state 
suspended class resumed transmission complete interrupts relies timeout case class resumed interrupts 
cbq limits number back packets variable maxburst 
worst case scenario resuming done timeouts bandwidth class limited timer resolution maxburst 
default value maxburst value selected achieve mbps ethernet default timer resolution 
link capacity 
desirable higher timer resolution msec resolution achieves mbps 
note timer resolution affects non conserving disciplines 
conserving disciplines need timers packets sent transmission complete interrupts 
difference network cards cards generate interrupts time packet transmitted generate interrupts buffer empty 
generally believed smart network card reduce interrupts alleviate cpu burden 
queueing discipline finer grained control frequent interrupts trade cpu control cpu load 
interesting report cbq works better old ne card interrupts lot small buffers 
device buffers similar trade setting buffer size network card 
delay concern slow link large buffers network cards adversely affect queueing 
example network card kbps link kb buffer buffer hold second worth packets 
device buffer effect inserting fifo queue beneath queueing discipline 
problem invisible fifo apparent preferential scheduling 
transmission buffer size set minimum amount required fill link 
easy automatically detect appropriate buffer size drivers set excessive buffer size 
availability public release altq freebsd source code additional information www csl sony jp person software html 
related dummynet dummynet popular mechanism available freebsd limit bandwidth 
dummynet originally designed emulate link varying bandwidth delay realized set level shapers level shaper enforces bandwidth limit second level shaper enforces specified delay 
dummynet advantages altq 
dummynet implemented solely ip layer device independent modification necessary drivers 
dummynet set software shapers dummynet input path output path 
addition classifier dummynet integrated firewall mechanism freebsd configured part firewall rules 
dummynet works ethernet bridging mechanism 
hand disadvantages 
shaper mechanism realized solely kernel timer shaper resolution limited kernel timer resolution described section 
altq shares limitation altq take advantage transmission complete interrupts 
dummynet currently mechanism packet scheduling active buffer management 
dummynet mechanism bypasses normal ip forwarding path 
summary dummynet simple bandwidth limiting moderate ethernet class link speed easy configure 
great demands bandwidth control fall category 
linux traffic control linux traffic control tc framework version 
implemented queueing disciplines include pq cbq red 
linux tc similar altq number ways 
linux tc framework switch queueing disciplines defines set queue operations 
minor difference queue operations linux tc defines prepend peek 
linux tc employs dequeue policy altq employs peek dequeue policy 
architectural differences come kernel architecture 
linux network device layer sk buff rich fields 
linux common network device layer handles link type specific processing acts upper half driver 
queueing done device layer tc requires changes layer 
bsd unix common code path network layer network device drivers 
operations performed struct 
result altq support scattered output start 
note altq bpf ethernet bridging need supporting code device drivers 
linux supported common network device layer 
linux sk buff fields information packet 
classifier easily access network layer transport layer information 
hand mbuf bsd unix carries information packet 
design enforcing network stack layering classifier needs extract information packet parsing headers 
architectural differences illustrate difference design philosophy 
network code bsd unix successful minimalist approach 
bsd unix need redesign current abstraction 
abstracted network device extensions easier keep drivers simpler 
possible extensions interface level sub interfaces virtual interfaces multi link 
various optimizations possible packet information tagged mbuf 
increasing demands expectations network traffic management 
variety technologies available single mechanism satisfies wide range requirements 
important understand advantages limitations different mechanisms 
important understand system bottleneck different link speeds 
network ranging slow modem high speed fiber system bottleneck shifts place 
requirements hardware system configuration change 
behaviors single queueing disciplines understood interaction different mechanisms especially operational settings needs study experience 
hope altq gain experience field 
blake black carlson davies wang weiss 
architecture differentiated services 
rfc internet engineering task force december 
braden clark crowcroft davie deering estrin floyd jacobson partridge peterson shenker ramakrishnan wroclawski zhang 
recommendations queue management congestion avoidance internet 
rfc internet engineering task force april 
cho 
framework alternate queueing traffic management pc unix routers 
usenix annual technical conference pages june 
alan demers srinivasan keshav scott shenker 
analysis simulation fair queueing algorithm 
proceedings sigcomm symposium pages austin texas september 
floyd jacobson 
traffic phase effects packet switched gateways 
computer review april 
sally floyd van jacobson 
random early detection gateways congestion avoidance 
ieee acm transaction networking august 
available www 
aciri org floyd papers html 
sally floyd van jacobson :10.1.1.126.7522
link sharing resource management models packet networks 
ieee acm transactions networking august 
available www aciri 
org floyd papers html 
srinivasan keshav 
efficient implementation fair queueing 
internetworking research experience september 
rizzo dummynet simple approach evaluation network protocols 
computer review april 
available www iet unipi luigi 
mckenney 
stochastic fairness queueing 
proceedings infocom san francisco california june 
john nagle 
packet switches infinite storage 
ieee trans 
comm april 
ian ghosh jon crowcroft van jacobson sally floyd 
implementing real time packet forwarding policies streams 
proceedings usenix pages new orleans louisiana january 
