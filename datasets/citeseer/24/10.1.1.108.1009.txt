stored procedures distributed xml databases chen phillip gibbons nath irp tr july information document provided connection intel products 
license express implied intellectual property rights granted document 
provided intel terms conditions sale products intel assumes liability whatsoever intel express implied warranty relating sale intel products including liability warranties relating fitness particular purpose infringement patent copyright intellectual property right 
intel products intended medical life saving life sustaining applications 
intel may changes specifications product descriptions time notice 
copyright intel names brands may claimed property 
stored procedures distributed xml databases chen phillip gibbons nath carnegie mellon university intel research pittsburgh cs cmu edu phillip gibbons intel com studies investigated standard xml query languages distributed xml databases 
applications require functionality goes far standard query facility requiring application specific aggregates predicates states 
studies stored procedure mechanism provide extensibility distributed environments 
major challenge achieve ease programming efficient distributed execution arbitrary application provided code 
propose novel solution consists components 
common data patterns stored function component supports automatic distribution application code ease programming 
specialized data patterns stored query component allows application developers guide distribution code hiding details physical locations network communications 
experimental results house cluster node worldwide deployment demonstrate dramatic performance benefits solution 

xml widely variety applications web services wide area sensor databases 
nature applications large xml repositories distributed number physical machines 
studies demonstrated support standard xml query languages xpath environments 
applications require query functionality goes far current xml query standards 
example data analysis applications require aggregation functions supported standards computing histograms variances 
oceanography database containing images measurements sensors monitoring highly desirable aggregation function combine images cameras overlapping views single highest resolution panoramic image 
furthermore applications searching xml database may require special purpose predicates may tree minimum bounding rect angles bloom filters prune unnecessary branches fast searches 
minimum bounding rectangles bloom filters application specific states maintained data updates 
order support rich application specific aggregates predicates states investigates stored procedure mechanism xml databases extends standard xml query facility application provided code 

design goals challenges primary design goals extension mechanism 
sufficient expressive power application code arbitrary data items xml document perform arbitrary combinations computations data items 
simplest case data analysis example application code list numeric values attribute number selected xml elements 
complex cases applications may complex data types images combine values multiple attributes separate computation results application specific states bloom filters 
second extension mechanism support efficient distributed execution application code 
distributed execution performs piece computation close relevant data items stored distributed database 
potentially efficient centralized execution reasons exploits concurrency distributed system ii saves network bandwidth intermediate results tend smaller raw inputs 
note external function mechanism xquery solve problem function invoked remotely computation executed centralized fashion 
third goal ease programming minimize effort application developers 
ideally developers need write code core application functions 
stored procedure mechanism hide details physical locations document fragments network communications xml parsing bloom filter pre computed bit vector contains bit patterns representing existing keys 
search key filtered generated bit pattern exist bit vector 
unnecessary core application functions 
example compute histograms application developers burdened details list numeric inputs 
complete solution achieve goals 
achieving goal easy challenging achieve single design 
way provide sufficient expressive power extract relevant data items xml document perform computation centralized way ask application code maintain states bloom filters outside database 
difficult developers integrate outside states query processing 
understand imagine bloom filters computed represent keys subtrees certain height xml document stored outside database employ pruning unnecessary branches developers write code break search query steps selecting roots subtrees bloom filters stored checking search key bloom filters outside database searching qualified subtrees 
scheme violates ease programming 
distributed execution numeric aggregation functions mainly sql aggregates studied literature 
approach implement aggregation function set accessor functions automatically distribute accessor functions 
clear distribute application code may access combine arbitrary data items application specific states 
huge number possible data patterns difficult impossible define accessor function programming interface 
may argue application developers implement aspects distributed execution code 
approach requires developers learn physical locations document fragments manage network communications violating ease programming 

solution observe number possible data patterns huge equally important patterns occur frequently 
example common pattern combine values single attribute numeric value image key number xml elements generate result histogram panoramic image bloom filter 
strategy provide higher level automation frequent patterns infrequent patterns ask developers guide distribution code hiding details physical locations network communications 
discuss security issue running application provided code 
achieved implementation java programming language application provided code provides finegrained permission control 
please see section description generic distributed xml database 
solution consists components 
stored function component provides simple java programming interface extends xpath function call syntax implementing invoking application code 
automatically distributes executes application code frequent patterns data 
second stored query component allows developers associate xpath queries xml elements 
queries may invoke application code stored function invocations allowing developers guide distribution code logical hierarchy xml document hiding unnecessary details 
stored queries may time long running 
application specific states implemented results long running stored queries kept inside distributed xml database computed attributes 
computed attributes just common attributes realizing easy integration application specific states query processing 

contributions contributions fold 
study stored procedure mechanism distributed xml database environments support rich application specific query functionality 
second propose novel solution achieves distributed execution ease programming expressive power time 
solution consists techniques stored function stored query 
demonstrate achieve goals different data patterns 
third optimize network cost stored functions caching available 
prove proposed algorithm achieves total cost twice optimal cost 
implemented solution distributed xml database developed applications including infrastructure monitor machine worldwide deployment planetlab 
experimental results controlled experiments real world applications demonstrate dramatic performance benefits solution 
rest describe generic model query processing distributed xml databases section 
components solution extending model sections 
optimize network cost stored functions caching available section 
demonstrate usefulness performance solution set application examples section 
discuss related section conclude section 
generic distributed xml dbms show techniques general variety distributed xml databases tied particular design section describe generic distributed xml database techniques apply 
generic distributed xml database xml document distributed number host machines host holding fragment document 
nested structure xml document defines tree 
fragment contains specially marked dummy elements called boundary elements indicate true element typically descendants tree reside different host 
mechanism provided routing xml query subquery host storing xml element 
process xml query query routed host storing element relevant query answer host called host 
query evaluated host local fragment account boundary elements 
particular evaluating query requires visiting element corresponding boundary element subquery formed sent host storing routing mechanism 
host receiving subquery performs local query evaluation process returns results back host 
subquery results incorporated host answer answer returned 
generality generic model places restrictions number size shape document fragments fragments arbitrary heterogeneous mix 
addition data may changing response update queries 
techniques correctly scenarios hiding messy details application developer location transparency 
concreteness focus enhancing xpath query language 
incorporate schemes irisnet distributed query processing 
irisnet distributed xml database designed wide area sensor applications 
supports features generic model 
xml document stored irisnet distributed number physical machines 
irisnet annotates xml elements special attributes status id status attribute mark boundary elements id attribute related irisnet routing scheme 
id attribute uniquely identifies element siblings element uniquely identified sequence id attributes path document root 
irisnet employs dns routing scheme maps unique id sequence xml element domain name ip address machine containing element 
irisnet supports xpath queries 
host query machine containing common ancestor lca element query 
stored function section propose stored function technique component solution 
api application programming interface section 
pointer constructs idrefs may provide additional semantic links 
irisnet determines lca element looking query prefix purely element names id values 
exist query routed root fragment 
user query interface invoke stored function myclass xpath arg arg 
xpath query selects set values perform computation 
variable number arguments may required stored function parameters 
application programmers implement methods stored function class myclass string init type val string args convert value xpath output intermediate format 
string compute string string args perform computation set intermediate values merging single intermediate value 
string final string string args generate final query result intermediate value 
xpath selects attributes type string xpath selects nodes type node 
full picture application developers implement init compute final user query invoking stored function myclass xpath arg arg xpath val init arg arg args final compute compute compute query result output final init init init init init dbms automatically distributes execution methods relevant hosts 
stored function api illustrate api supports number frequent data patterns examples section 
describe dbms automatically distributes executes stored function section 

stored function api shown user query invoking stored function employs syntax built function call xpath 
colon separated function name specifies java class method major name implementation 
xpath expression called input xpath expression selects set values xml document apply stored function computation 
variable number arguments may required stored function parameters 
arguments typically constants xpath expressions returning single string value 
shown application developers implement java methods stored function init compute final enable decomposition stored function computation series calls methods 
output value input xpath ex myclass histogram xpath boundary boundary 
xpath selects set numeric values compute histogram 
class myclass args specifies histogram bucket boundaries 
string histogram init string val string args determine bucket value selected xpath create intermediate histogram count set bucket counts set 
string histogram compute string string args merge multiple intermediate histograms summing counts corresponding buckets 
string histogram final string string args generate query result final intermediate histogram 

implementation histogram aggregate pression init method called generate intermediate value 
intermediate values merged compute method single intermediate value left converted query result final method 
args array contains values arguments query 
shown dbms automatically performs decomposition distributes execution methods relevant hosts data located definition java methods generalizes accessor function approach decomposing numeric aggregation functions sum count 
input xpath expression select attributes supports numeric values select xml nodes type parameter init method string node 
supports frequent data patterns combine multiple lists data computation described section 

supporting frequent data patterns stored function api subsection describe api supports frequent data patterns 
patterns fall categories 
conceptually computation may single list data sum may process multiple lists data group 
subsection describes rest patterns fall category 

computing single list values lot applications require ability perform computation single list values selected xpath attribute query 
example numeric aggregation functions sum histogram variance perform computation single list numeric values 
oceanography ap stored functions median difficult decompose application developers implement local method performs centralized computation 
builtin groupby xpath groupby attribute aggregate aggregate attribute xpath selects set nodes contain groupby attribute aggregate attribute 
function groups nodes groupby attribute 
group nodes computes aggregate aggregate attribute values 
class builtin args groupby attribute name args aggregate name args aggregate attribute name 
string groupby init node node string args extract groupby attribute aggregate attribute node invoke init method specified aggregate function label return value groupby value form intermediate value 
string groupby compute string string args examine groups merge groups groupby value group contains multiple aggregate intermediate values call compute method aggregate function obtain single aggregate intermediate value 
string groupby final string string args group call aggregate final method obtain final result group 

implementation simple group plication described section panoramic image computed single set images 
data pattern easily supported stored function api 
example show implementation histogram aggregate 
note input xpath query attribute selection query init method uses string type parameter 
text strings arbitrary data structures encoded string interface able handle complex inputs images 

combining multiple attributes xml element multiple attributes xml element conceptually related computation 
example database city node contains population attribute area attribute 
may want perform computation city population densities derived 
stored function api support pattern follows 
input xpath query selects interesting city elements 
init method uses node type parameter 
city element init extracts population area city compute derived value population density 
compute final able perform required computation derived values 

simple group group frequently features relational databases 
observe requirements group support distributed infrastructure monitoring application named 
collects date user resource usage data hundreds machines 
stores data distributed xml database support flexible analysis xpath queries 
asks ability group data individual users compute aggregates group 
direct support group xpath standard 
shows example implementation simple group facility stored function api 
assuming stored function implementation sum query computes total cpu usage user builtin groupby host user uid sum simple group facility uses single group attribute performs single aggregate function 
please refer full complete facility take multiple group attributes perform multiple aggregations 
idea implementation wrapping method calls aggregate function annotating intermediate values aggregate function group attribute 
way groupby computation automatically decomposed distributed dbms 
note group implementation generic sense parameters query generic 
built stored function application directly group facility 

computing multiple aggregates time administrators want compute multiple aggregates total cpu usage maximal memory usage set hosts time 
naive approach issue separate stored function invocation aggregate 
approach uses set xml nodes multiple times performing lot duplicate operations 
desirable compute aggregates single query 
easily supported stored function api 
example query follows builtin multi host sum max implementation similar group implementation 
init compute final methods wrappers corresponding methods aggregate functions 
difference group intermediate value keeps track intermediate value group multi intermediate value contains intermediate value aggregate function subset selected xml nodes 
example query intermediate value contains total maximal subset hosts 
compute calls sum compute max compute combine 
aggregate function final calls final method obtain final result 

automatically distributed execution stored function invocation dbms automatically distributes execution init compute final methods relevant hosts data located 
query result document fragment results evaluating xpath local xml fragment init compute init compute final final compute dbms distributes execution stored function hosts data located local values selected data item boundary element remote query remote query myclass myclass arg 
arg 
evaluating stored function host 
automatically distributed execution myclass xpath arg 
data selected input xpath query basic idea achieve efficient distributed execution call accessor methods evaluation input xpath query 
shown stored function invocation sent host input xpath query dbms employs standard query processing facility evaluate input xpath query local xml fragment 
shown results querying local fragment consist major parts selected local input data items squares ii boundary elements triangles indicating remote xml fragments may contain additional required data items 
dbms composes remote subquery boundary element 
shown shaded triangles 
differences remote subquery original stored function invocation 
function name appended special suffix indicate intermediate value returned 
second sub input xpath query remote fragment 
note obtained standard distributed query facility 
dbms sends subqueries compiled stored function code stored known location web directory 
dbms loads code wellknown location host stored invocation subquery host 
remote fragments 
selected local data item dbms calls init method 
multiple data items calls compute method merge multiple intermediate values 
intermediate results remote subqueries received dbms calls compute method merge local result remote results final intermediate value calls final method obtain query result 
receiving subquery stored function invocation non host dbms performs operations final method invoked 
summary stored function api developers need worry parsing xml documents dealing network communications knowing document currently fragmented 
dbms automatically distributes execution stored functions data located performance 
scheme works regardless fragmentation xml document physical machines 

stored query section propose stored query technique consists demand stored queries longrunning stored queries 
purpose support arbitrary combination data items xml document 
purpose support application specific states 
combining parts application developers express arbitrary data patterns 

demand stored query shown application developers define stored query inserting stored query sub node xml element 
stored query name unique xml element 
query string xpath query cases stored function invocation 
shows invoke demand stored query 
foo element dbms retrieves stored query string 
executes specified query context subtree rooted parent xml element 
query string stored function invocation demand stored query performs application specific computation inside subtree rooted parent xml element 
input xpath stored function may demand stored query invocation words demand stored query higher xml hierarchy may process results demand stored queries defined lower xml hierarchy 
supports arbitrary combination data items xml document extreme case developers customize computation xml node demand stored query 

long running stored query application developers define long running stored query way demand stored query foo foo bar add stored query node foo stored query foo stored query foo stored query name bar query xpath foo subtree type demand long running mode polling triggered long running period xxx ms long running foo application developers insert stored query node foo foo stored query name bar invoke demand stored query 
query stored function call application developers explicitly control running code logical xml hierarchy 
application developers long running queries maintain application specific states dbms maintains result long running query computed attribute common attributes 
stored query interface shown 
additional attributes stored query definition 
query polling mode triggered mode 
query polling mode dbms runs query periodically regardless relevant update 
query triggered mode dbms recomputes query relevant xml attribute updated 
shown result long running query stored computed attribute database name stored query name 
computed attribute exactly way common attribute 
application developers implement application specific state result long running stored query 
stored query defined common ancestor node relevant data items state computed 
computed attribute queries application specific state implemented way easily integrated query processing 

supporting arbitrary data patterns combining stored function stored query solution supports arbitrary data patterns may access combine arbitrary data items application specific states 
application specific states implemented computed attributes exactly way common attributes 
demand stored queries invoke stored functions give application developers power express arbitrary computation data items xml document 
stored query invokes stored function associates application code logical xml node 
dbms execute application final method host xml node located 
application developers guide distributed execution code stored queries 
stored query technique achieves saving lot efforts developers 
developers simply write queries specify invoke code application specific states computed 
need worry maintenance states unnecessary details physical locations xml fragments network communications 

changes dbms stored queries evaluate invocation demand stored query dbms recognizes stored query keyword 
keyword dbms modifies query selection subtrees rooted parent elements containing stored queries 
runs modified query 
returned subtree extracts runs stored query context subtree 
dbms handles correctly cases stored query invocations predicates 
note keyword approach important allows dbms identify stored query invocation analyzing query 
way dbms break query parts contain stored query invocations reuse standard query processing facility possible 
accessing results long running stored queries require changes dbms 
computed attribute exactly common attribute automatically updated 
maintaining computed attributes requires dbms support continuous queries 
continuous query implementations discussed context number systems including tapestry niagaracq telegraph cacq 
implemented similar continuous query mechanism dbms 
polling triggered continuous queries supported 
polling continuous query runs periodically incurs fixed amount overhead 
may delay period reflect update query result 
triggered continuous query detects rare update immediately incurs large overhead frequent updates 
suitable infrequent bursty updates 
implement third mode periodically triggered mode 
mode continuous query produces result period tolerates bursty updates 
period activity query triggered update providing fast detection infrequent changes 
execution strategy caching distributed execution caching subtree centralized execution cache hit tolerance time centralized execution tolerance time passed number queries time including query distributed execution centralized execution cache hit naive algorithm assuming perfect knowledge abbreviation cost queries queries optimal worst case naive algorithm time tolerance time passed number distributed executions previous time distributed execution centralized execution cache hit proposed algorithm assuming knowledge nc nc nc queries queries queries typical query patterns algorithm query cost find algorithm choosing strategy execute incoming query total query cost minimized 
optimization problem 
optimization caching 
optimization caching time distributed xml dbms may provide caching capabilities improve query performance 
example iris net cache full xml elements selected common xpath query extensions host hope answer queries directly cached data 
exploit caching slightly modify previous scheme executing stored functions 
shown host system strategies 
strategy distributed execution scheme cache data second strategy execute input xpath query cache selected xml elements locally execute stored function centralized manner 
third strategy focus host techniques section applied host processing subquery 
irisnet caches full xml elements intermediate values sent back host cached utilize existing cached data stale 
cached data may stale updates 
user query may specify tolerance time limit staleness cached data 
dbms time stamp cached data caching time 
satisfy tolerance requirement dbms uses cached data time stamp query tolerance time 
dbms choose strategies incoming query 
simplicity shall focus improving network cost 
assume stored function invocation centralized strategy costs times distributed strategy 
assume cost cache hit 
assume user queries tolerance time optimization problem shown 
optimization problem straightforward solve perfect knowledge 
shows naive algorithm 
shows worst case algorithm 
queries algorithm decides centralized execution query 
similarly query time executed centralized manner 
queries cache hits 
total cost achieve cost performing distributed execution query centralized execution second query 
solve optimization problem propose algorithm 
algorithm require knowledge 
requires dbms keep statistics value determined 
typical query patterns shown 
algorithm chooses distributed execution queries chooses centralized execution query followed period time queries cache hits 
pattern repeats 
possible pattern number queries analyze performance algorithm 
theorem 
algorithm guarantees total cost twice optimal cost 
proof 
consider query pattern 
denote regions containing series queries followed single query nc region denote period time nc region region 
consider nc region containing queries single query 
cost region algorithm ensures subsequent queries may occur period time note region region previous region region 
algorithm cost handle queries 
ratio cost algorithm optimal cost algorithm costs regions total cost twice optimal cost 
basically means input xpath query previous query uses centralized execution 
note stored function optional parameters different 
country non usa region usa west usa mid site host user mit cmu user planetlab usa usa east cmu cmu user harvard cmu 
xml hierarchy 
application examples user implemented stored function stored query support irisnet 
implementations follow descriptions section 
provide built stored functions numeric aggregation functions defined xpath standard histogram groupby multi stored functions described section 
stored functions implemented stored function api 
describe application examples real world application called person finder application 

real world infrastructure monitor distributed infrastructure monitor deployed planetlab 
planetlab open globally distributed testbed planetary scale network services 
currently monitors hosts distributed sites spanning continents north america south america europe asia australia 
service supports efficient queries individual aggregate statistics cpu load average available bandwidth hosts monitored 
service running months 
shown uses xml hierarchy corresponds geographical hierarchy machines planetlab 
host represented xml element subtree root 
leaf element subtree host machine single user contains user id user resource usage statistics machine 
host irisnet maintains xml fragment containing corresponding xml subtree runs set monitoring tools periodically collect update statistics 
additional xml fragments deployed construct upper level xml hierarchy get complete picture resource usage infrastructure administrators want compute multiple aggregates statistics average memory usage maximum cpu load set hosts 
administrators want know average resource usage user asking ability group data individual users compute aggregates group 
please refer full real world example 
omit example related experiments space constraints 
fragments replicated fault tolerance purpose 
machine univ campus building floor room brute force search app room bob pruning bloom filters building level app building app filter bob room bob 
database architecture implementations person finder service described section implemented stored functions multi groupby satisfy requirements respectively 
note stored functions generic support data patterns applications demonstrates flexibility stored procedure mechanism 

person finder person finder application xml database stores names people room university 
names continuously updated sensors cameras recognizing people 
shown xml document levels university campus building floor room 
room element contains attribute contains names people room 
person finder service implemented ways shown 
implementation performs brute force search database checking attribute room name 
stored function automatically executed distributed fashion 
second implementation uses long running stored queries maintain bloom filter building represents names rooms building search query application specific predicate check name may exist building prune unnecessary branches answer 
experiments section show second approach achieves dramatically better performance approach 

performance study section perform comparative performance studies various techniques proposed including stored function stored query groupby multi stored functions 
please refer full results including results caching optimization 
approach compare performance application techniques performance hash functions hash names bits bloom filter 
continuous queries compute bloom filters triggered mode 
techniques 
way want demonstrate performance benefit achievable techniques effectiveness techniques 
experimental results controlled experiments real world experiments applications discussed section 
highlight findings section 

controlled experiments perform controlled experiments person finder application 
campuses university buildings campus floors building rooms floor average names room 
distribute database homogeneous cluster ghz pentium machines running redhat linux connected mbps local area network 
xml fragments machines shown 
root machine owns university element 
middle machine owns campus building elements campuses 
leaf machine owns floor room elements campus 
experiments issue queries time mhz pentium iii machine 
measure query response time machine number bytes sent server machines result point reported average measurements 

distributed execution stored functions order study benefit distributed execution supported stored function mechanism compare performance computing aggregate function different approaches 
approach implements aggregate init compute final programming interface stored function 
aggregate computation automatically executed distributed fashion 
second approach extracts input values database performs centralized execution aggregation function models common behavior numeric aggregates sum avg combining multiple input values single output value similar size 
experiments room element database contains dummy attribute aggregations attribute 
order size input values meaningful parameter change choose compute bit bit binary dummy attributes database update dummy attribute string size experiment 
report response time communication cost approaches varying length input value byte bytes 
input value size increases communication cost number bytes sent recorded log file statistics collection module implemented irisnet 
implemented approach alternative local method java programming interface equivalent implementation outside xml database system runs root machine 
response time second centralized distributed input value size byte number bytes sent centralized distributed input value size byte response time second centralized distributed kbps mbps mbps mbps network bandwidth response time second centralized distributed computation time input ms response time varying communication cost response time varying response time varying input value size varying input value size network bandwidth computation time centralized approach increases dramatically noting log scale axis incurring large response time increases 
contrast distributed execution suffers minor performance degradations 
centralized execution requires input values transfered distributed execution transfers intermediate results 
varies network bandwidth points order capture large range possible network bandwidth conditions real 
true nominal network bandwidth mbps 
mbps network change irisnet network communication code send packet times effective bandwidth seen application true bandwidth 
similarly send packet times mbps kbps networks 
admittedly may accurate tcp ip layers see mbps bandwidth protocol packets 
expect experimental results reflect similar trends 
shown network bandwidth decreases performance gap distributed execution centralized execution increases dramatically 
network bandwidth mbps lower quite wide area network distributed execution achieves speedups centralized approach 
studies performance computation intensive aggregation functions 
model function insert time consuming loop aggregation function loop executed input value distributed centralized approaches 
vary total number loop iterations loop takes ms ms ms ms respectively models increasingly computationally intensive aggregation functions 
shown distributed execution achieves speedups computation time ms input 
distributed execution takes advantage concurrency distributed database uses machines centralized approach performs computation single machine 

distributed vs centralized execution response time sec brute force search prune stored queries university campus building mixed lca level 
pruning vs brute force search 
stored queries subsection study performance benefit stored queries 
compare performance brute force search approach bloom filter pruning approach requires long running stored queries maintain bloom filters 
mhz pentium iii machine generating background update requests model movements people 
model person stays room time uniformly distributed second seconds moves room 
mak ing move person go room floor building different buildings campus different campuses probabilities respectively 
controls average number update requests sent leaf machine set min person stays room random period time second minutes move 
compares performance different implementations 
measure response times queries look person entire university particular campus particular building 
mixed workload composed university level queries campus level queries building level queries 
scope university campus building query usually guess choose name query find person times 
university level queries look non existing name times 
shown bloom filter approach achieves dramatically better performance brute avg 
response time sec average parallel multi site region country global query scope aggregate net 
traffic kb average parallel multi site region country global query scope response time network traffic 
calling multiple aggregates force approach queries involving campus university level elements demonstrating viability stored query technique 
building level results quite close pruning effective smaller search scope additional stored procedure overhead offsets limited benefit pruning 

performance workload consists different classes queries depending query scopes 
global queries ask information planetlab hosts total hosts 
country queries ask hosts total hosts usa 
region queries randomly pick regions usa east usa mid usa west refer hosts hosts region region 
site queries ask information hosts hosts site randomly chosen site usa 
planetlab shared infrastructure experiments report run experiments sharing infrastructure 
control types machines network connections loads hosts 
experiments experienced behaviors real internet thing predictable unpredictability latency bandwidth paths taken 
cope unpredictability ran experiment hour day run issued query times 
response times reported averages measurements 
report aggregate network traffic total traffic created queries subqueries corresponding responses hosts involved 

calling multiple aggregates multi shows performance computing simple aggregate average computing different aggregates average sum max min parallel queries computing aggregates single multi query 
parallel queries queries issued time response time time required receive responses 
note irisnet query processing module single threaded parallel queries processed sequentially machine 
avg 
response time sec centralized distributed site region country query scope global aggregate net 
traffic kb centralized distributed site region country query scope global response time network traffic 
grouping performance figures see average query response time small considering number geographic distribution planetlab hosts 
exists distributed tool sophia collect information planetlab hosts 
sophia takes order minutes query planetlab nodes 
contrast executes query seconds 
response time network overhead multi operation close simple aggregation dramatically better parallel query approach 
multi operation avoids overhead sending multiple queries sub queries packet header generic metadata responses 
avoids redundant selection set elements 

simple groupby performance shows performance computing user cpu usage hosts 
set query scopes 
compare performance different approaches 
approach uses groupby stored function 
approach aggregations executed distributed fashion 
second approach extracts user cpu usage data single machine performs computation centralized way 
see distributed groupby technique outperforms centralized approach terms response times network traffic 
centralized approach need gather large amount data perform grouping operation locally 

summary performance study performance study demonstrates stored function technique significantly improves application performance response time network overhead providing automatic distributed execution application code ii long running stored query enables applicationspecific states bloom filters pruning search provide significant performance benefit iii techniques different different queries executed parallel multiple machines parallel queries faster issuing queries 
scalable shown running machines worldwide months 

related distributed xml databases 
suciu efficient query evaluation algorithms xml documents different sites connected links 
deshpande proposed distributed xpath query evaluation techniques transparent physical xml fragments 
abiteboul studied query evaluation replication decisions distributed dynamic xml documents including calls web services 
studies focus standard xml query facilities stored procedure mechanism distributed environment support rich application specific functionality 
distributed execution 
distributed execution numeric aggregation functions mainly sql aggregates studied literature 
approach implement aggregate set accessor functions automatically distribute accessor functions 
stored function technique leverages approach extends support computation multiple lists data items 
stored query technique supports distributed execution arbitrary data patterns 
stored queries 
stonebraker proposed allow database fields contain collection query commands relational environments 
proposal aims support clean definitions objects unpredictable composition simulate special semantics constructs purpose stored query technique different 
technique aims allow application developers express computation arbitrary data patterns 
previous proposal support long running queries long running queries integrate application specific states query processing 
xml query standards 
xquery xslt working drafts support external functions leaving exact binding mechanisms implementations 
stored function technique considered kind external function support 
query standards mainly target centralized performing full computation local remote machine focus providing distributed execution stored procedures improves query performance 

effective solution incorporating application provided code distributed xml databases realize application specific aggregates predicates states 
application examples performance study demonstrated viability dramatic performance benefits solution 
example application implemented solution outperforms existing tools order magnitude terms network overhead average response times 
implemented solution particular system irisnet supports xpath believe applicable distributed xml databases xml query languages 
hope stored procedure mechanism enable stimulate large number distributed xml applications require rich application specific query functionality 
distributed syslog 
www intel iris net 
abiteboul manolescu milo 
dynamic xml documents distribution replication 
sigmod 
bancilhon briggs khoshafian valduriez 
fad powerful simple database language 
vldb 
bloom 
space time trade offs hash coding allowable errors 
communications acm 
chen dewitt tian wang 
niagaracq scalable continuous query system internet databases 
sigmod 
chen gibbons nath 
stored procedures distributed xml databases 
technical report intel research pittsburgh 
chun 
planetlab researcher administrator berkeley intel research net bnc personal communication november 
deshpande nath gibbons seshan 
cache query wide area sensor databases 
sig mod 
guttman 
trees dynamic index structure spatial searching 
sigmod 
stanley haller 
applying video sensor networks environmental monitoring 
ieee pervasive computing 
irisnet internet scale resource intensive sensor network service 
www intel iris net 
madden franklin hellerstein hong 
tag tiny aggregation service ad hoc sensor networks 
osdi 
madden shah hellerstein raman 
continuously adaptive continuous queries streams 
sigmod 
peterson anderson culler roscoe 
blueprint introducing disruptive technology internet 
hotnets 
planetlab 
www planet lab org 
stonebraker anton hanson 
extending database system procedures 
tods 
suciu 
distributed query evaluation semistructured data 
tods 
terry goldberg nichols oki 
continuous queries append databases 
sigmod 
world wide web consortium 
www org 
peterson roscoe 
sophia information plane networked systems 
hotnets ii 
