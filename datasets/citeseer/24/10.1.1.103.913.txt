learning assumptions compositional verification jamieson giannakopoulou corina department computer science university massachusetts amherst ma usa cs umass edu riacs kestrel technology llc nasa ames research center moffett field ca usa email arc nasa gov 
compositional verification promising approach addressing state explosion problem associated model checking 
compositional technique advocates proving properties system checking properties components assume guarantee style 
application technique difficult involves non trivial human input 
presents novel framework performing assume guarantee reasoning incremental fully automated fashion 
check component property approach generates assumptions environment needs satisfy property hold 
assumptions discharged rest system 
assumptions computed learning algorithm 
initially approximate gradually precise means counterexamples obtained model checking component environment alternately 
iterative process may stage conclude property true false system 
implemented approach tool applied nasa system 
motivated ongoing project nasa ames research center application model checking verification autonomous software 
autonomous software involves complex concurrent behaviors reacting external stimuli human intervention 
extensive verification prerequisite deployment missions involve autonomy 
formal description system required property model checking automatically determines property satisfied system 
limitation approach referred state explosion problem needs store explored system states memory impossible realistic systems :10.1.1.111.7245:10.1.1.111.7245
author grateful support received riacs undertake research participating summer student research program nasa ames research center 
jamieson giannakopoulou corina compositional verification presents promising way addressing state explosion 
advocates divide conquer approach properties system decomposed properties components component satisfies respective property entire system 
components model checked separately 
case components satisfy properties specific contexts called environments 
rise assume guarantee style reasoning 
assume guarantee reasoning checks component guarantees property part system satisfies assumption intuitively characterizes contexts component expected operate correctly 
complete proof shown remaining components system environment satisfy frameworks proposed support style reasoning 
practical impact limited require non trivial human input defining assumptions strong eliminate false violations reflect remaining system appropriately 
contrast presents novel framework performing reasoning incremental fully automatic fashion 
approach iterates process gradually learning assumptions 
learning process queries component counterexamples obtained model checking environment alternately 
iteration may conclude required property satisfied violated system analyzed 
process guaranteed terminate fact converges assumption necessary sufficient property hold specific system 
approach implemented labeled transition systems analyzer applied analysis executive module experimental mars rover developed nasa ames 
currently process implementing java pathfinder jpf 
fact approach relies standard features model checkers fairly straightforward add tool 
remainder organized follows 
provide background section followed high level description framework propose section 
algorithms implement framework section 
discuss applicability approach practice extensions considering section 
section describes experience applying approach executive mars rover 
section presents related section concludes 
background presentation approach techniques modeling checking concurrent programs implemented tool 
supports compositional reachability analysis cra software system architecture general hierarchical structure 
cra incrementally computes abstracts behavior composite components input input send ack output send output ack learning assumptions compositional verification output input output input send send output fig 

example ltss fig 

order property fig 

lts output behavior immediate children hierarchy 
flexibility provides selecting component hierarchy analysis abstraction ideal experimenting approach 
labeled transition systems ltss 
tool uses ltss model behavior communicating components concurrent system 
ltss semantics operators typical process algebra style 
note goal define process algebra 
act universal set observable actions denote local action unobservable component environment 
denote special error state models fact safety violation occurred associated system 
require error state outgoing transitions 
formally lts tuple finite non empty set states act set observable actions called alphabet transition relation initial state denote lts act lts non deterministic contains transitions deterministic 
consider simple communication channel consists components ltss shown fig 

note initial state ltss state 
input lts receives input action input occurs sends output lts action send 
data sent output produces output action output acknowledges finished action ack 
point ltss return initial states process repeated 
traces 
trace lts sequence observable actions perform starting initial state 
example input input send traces input lts fig 

set traces called language denoted 
act denote trace obtained removing occurrences actions 
ack jamieson giannakopoulou corina parallel composition 
say transits action denoted special case 
parallel composition operator commutative associative operator combines behavior components synchronizing actions common alphabets interleaving remaining actions 
example parallel composition input output components fig 
actions send ack synchronized 
formally ltss 

lts defined follows observable action note symmetric rules implied fact operator commutative properties 
call deterministic lts contains states safety lts 
safety property specified safety lts language defines set acceptable behaviors lts satisfies denoted 
checking property error lts denoted perr created traps possible violations state 
formally error lts property perr perr perr note error lts complete meaning state error state outgoing transitions action alphabet 
example order property shown fig 
captures desired behavior communication channel shown fig 

property comprises states transitions denoted solid arrows 
expresses fact inputs outputs come matched pairs input preceding output 
dashed arrows illustrate transitions error state added property obtain error lts 
detect violations property component parallel composition perr computed 
proved violates state reachable perr 
example state reachable input output conclude input output order 
assume guarantee reasoning 
assume guarantee paradigm formula triple component property assumption environment 
formula true part system satisfying system guarantee learning assumptions compositional verification particularly flexible performing assume guarantee reasoning 
assumptions properties defined safety ltss fact safety lts assumption property 
assumption module composed playing role abstraction environment 
property checked turned composed check assume guarantee formula safety ltss computes perr checks state reachable composition 
violated satisfied 
deterministic finite state automata dfas safety ltss 
components framework learning algorithm produces dfas framework uses safety ltss 
dfa tuple defined deterministic ltss set accepting states 
dfa string denote state reading starting state string said accepted dfa language accepted denoted set 
dfas returned learning algorithm context complete minimal prefix closed automaton prefix closed prefix 
dfas contain single non accepting state 
easily transformed safety ltss removing non accepting state corresponds state error lts transitions lead 
framework incremental compositional verification consider case system components 
mentioned previous section formula true part system satisfying system guarantee property simplest compositional proof rule shows true hold true true 
proof strategy expressed inference rule follows step step true true note rule symmetric components support circularity 
despite simplicity experience applying compositional verification applications shown useful rule context checking safety properties 
compositional rule justified assumption lts states transformed safety lts determinization 
jamieson giannakopoulou corina assumption generation counterexample strengthen assumption assumption model checking counterexample weaken assumption step true step true false true false analysis fig 

incremental compositional verification iteration true false counterexample reflect behavior 
additionally appropriate assumption rule needs strong satisfy step 
developing assumption non trivial process 
obtain appropriate assumptions framework applies compositional rule iterative fashion illustrated fig 

iteration assumption ai provided knowledge system results previous iteration 
steps compositional rule applied 
step applied check guarantees environments satisfy ai 
result false means assumption weak ai restrict environment satisfied 
assumption needs strengthened corresponds removing behaviors help counterexample produced step 
context assumption ai component exhibit violating behavior reflected counterexample 
step returns true means ai strong property satisfied 
complete proof step applied discharge ai 
step returns true compositional rule guarantees holds 
returns false analysis required identify violated ai stronger necessary 
analysis counterexample returned step 
ai strong weakened behaviors added iteration 
result weakening behavior counterexample represents allowed assumption ai 
new assumption may course weak entire process repeated 
implement iterative incremental process fully automated way framework uses learning algorithm assumption generation model checker application steps compositional rule 
learning algorithm described detail section 
learning assumptions compositional verification loop update queries closed add sa closed update queries construct candidate dfa conjecture correct return add witnesses counterexample algorithms algorithm fig :10.1.1.111.7245

algorithm learning algorithm approach developed angluin improved rivest schapire 
refer improved version name original algorithm 
learns unknown regular language produces dfa accepts 
unknown regular language alphabet 
order learn needs interact minimally adequate teacher called teacher 
teacher able correctly answer types questions 
type membership query consisting string answer true false 
second type question conjecture candidate dfa language algorithm believes identical answer true teacher returns counterexample string symmetric difference higher level creates table incrementally records strings belong making membership queries teacher 
various stages decides conjecture 
constructs candidate automaton information contained table asks teacher conjecture correct 
algorithm terminates 
uses counterexample returned teacher extend table strings witness differences detailed presentation algorithm line numbers refer illustration fig 

builds observation table set prefixes suffixes respectively addition function mapping true false operator defined follows 
sets event sequences pq pq represents concatenation event sequences initially sets line represents empty jamieson giannakopoulou corina string 
subsequently updates function making membership queries mapping string line 
checks observation table closed sae closed sa added elements line 
sa added needs updated line 
lines repeated closed 
observation table closed candidate dfa constructed line states initial state alphabet alphabet unknown language set consists states true 
transition relation defined sae 
guaranteed exist closed 
dfa conjecture teacher line 
conjecture correct returns correct line receives counterexample teacher 
counterexample analyzed find suffix witnesses difference adding cause conjectured automaton reflect difference line 
added iterates entire process looping line 
characteristics 
guaranteed terminate minimal automaton unknown language closed observation table candidate dfa constructs smallest sense dfa consistent function states characteristic particularly attractive framework 
conjectures strictly increase size conjecture smaller incorrect conjectures smaller states incorrect conjectures 
number membership queries kn log size alphabet number states minimal dfa length longest counterexample returned conjecture 
learning assume guarantee reasoning assume system property needs satisfied system 
context compositional rule section learning algorithm called guess assumption rule prove disprove assumption rule guaranteed return conclusive results weakest assumption aw satisfies assumption aw describes exactly traces procedure finding scope described 
dfa consistent function true 
learning assumptions compositional verification simulated perr lead state 
language aw assumption contains traces abstracted prevent violating formally aw environment component true true aw 
framework learns traces aw iterative process described section 
process terminates soon compositional verification returns conclusive results weakest assumption aw computed 
learn aw need provide teacher able answer different kinds questions asks 
approach uses model checking implement teacher 
membership queries 
answer membership query 
teacher simulates query clarity presentation reduce simulations model checking implemented efficiently directly simulations 
string teacher builds 
teacher model checks true returned means aw violate context teacher returns true 
answer membership query false 
conjectures 
due fact case language aw learned prefix closed conjectures returned prefix closed 
framework transforms conjectures safety ltss see section constitute intermediate assumptions ai 
framework priority guide conjecture strong step compositional rule return true 
accomplished resulting conjecture may strong case framework guides conjecture weak step return conclusive results system satisfies way teacher implemented reflects approach oracles counterexample analysis answer conjectures follows 
oracle performs step fig 
checks ai hold model checker returns counterexample teacher informs conjecture ai correct provides witness fact 
ai holds teacher forwards ai oracle 
oracle performs step fig 
checking true ai result model checking true teacher returns true 
framework terminates verification compositional rule proved 
model checking returns counterexample teacher performs analysis determine underlying reason see section fig 

counterexample analysis performed teacher way similar answering membership queries 
counterexample returned oracle 
teacher computes ac checks ac true means ai strong violate context jamieson giannakopoulou corina table 
mapping true output false ack true output false send true output ack false output output false output send false ack send send ack output send table 
mapping ack true true output false false send true false ack true true output false false send true false output ack false false output output false false output send false false send ack false false send output true true send send true true send output ack send ack output send ack send output send ack send ack output send fig 

fig 

fig 

fig 

returned counterexample conjecture ai 
model checker returns false counterexample means violated 
generate counterexample true framework composes way similar parallel composition ltss 
common actions synchronized interleaving instance remaining actions selected 
example components input output shown fig 
property order shown fig 
check true input output order approach 
alphabet assumptions compositional rule input order output send output ack 
described iteration updates observation table produces candidate assumption table closed 
closed table obtained shown table associated assumption shown fig 

teacher answers conjecture invoking oracle checks input order oracle returns false counterexample learning assumptions compositional verification input send ack input describes trace input leads state 
teacher returns counterexample send ack uses queries update observation table closed 
table shown table assumption shown fig 
constructed conjectured teacher 
time oracle reports input order true meaning assumption weak 
teacher calls oracle determine true output true algorithm reports true input output order holds 
example involve weakening assumptions produced assumption sufficient compositional proof 
case 
example substitute output output illustrated fig 
allows multiple send actions occur producing output 
verification process identical previous case oracle invoked teacher conjecture 
oracle returns true output false counterexample send send output teacher analyzes counterexample determines context trace input violate order 
trace returned weaken conjectured assumption 
process involves iterations assumptions fig 
fig 
produced 
weakest assumption aw oracles report true framework reports true input output order holds 
discussion correctness theorem 
components property algorithm implemented framework terminates returns true holds false 
proof 
prove theorem argue correctness approach fact terminates 
correctness teacher framework uses steps compositional rule answer conjectures 
returns true steps return true correctness guaranteed compositional rule 
framework reports error detects trace simulated violates property implies violates termination iteration algorithm returns true false terminates continues providing counterexample 
correctness guaranteed keeps receiving counterexamples eventually iteration produce aw 
iteration step return true definition aw 
teacher apply step return true terminate counterexample 
counterexample represents trace contained aw 
discussed section aw necessary sufficient analysis counterexample return false algorithm terminate 
jamieson giannakopoulou corina practical considerations context languages queried prefix closed 
technique applies purely safety properties finite prefix trace satisfies property satisfy property 
string membership query returns false know extension answer false 
improve efficiency algorithm reducing cost membership queries answered teacher 
example observation table shown table entry output false 
teacher return false queries output ack output send output output invoking model checker 
framework membership queries conjectures counterexample analysis involve model checking performed fly 
assumptions steps increasing size grow larger size aw 
experience designed systems interfaces components small 
assumptions expected significantly smaller environment represent compositional rules 
needs maintain observation table table need kept memory model checking performed 
note framework provides time approach compositional verification 
memory sufficient reach termination intermediate assumptions generated may useful approximating requirements component places environment satisfy certain properties 
extensions generalization 
approach context components 
assume system consists components mn 
simplest way generalize approach group components higher level components apply compositional rules discussed 
possibility handle general case computing composition components directly 
algorithm provides way checking true compositional way 
consists component algorithm applied recursively step 
interesting direction particular membership queries concentrate single component time 
need investigate meaningful approach practice 
computing weakest assumption 
learn weakest possible assumption aw prevent component violating property assumption generated knowing component interacts 
place assume guarantee framework oracle teacher tries determine assumption generated strong 
oracle replaced conformance checker example method designed expose learning assumptions compositional verification table 
results rover example iteration ai states transitions result oracle weak oracle weak oracle weak oracle weak oracle false difference specification implementation 
produce set sequences guaranteed expose error conjectured assumption exists 
sequence intermediate assumptions conjectured teacher approximate refined longer runs 
discussed approximate assumptions useful 
experience implemented assume guarantee framework described tool experimented approach analysis design level model executive subsystem mars rover developed nasa ames 
executive multi threaded system receives plans planner executes plan language semantics 
framework check property refers subsystem executive consisting components main coordinating component named executive component responsible monitoring state conditions named 
property states specific variable shared executive executive reads value variable read value executive clears 
set executive 
experiment conducted pentium iii mhz gb memory running redhat linux sun java sdk version 
check property directly composing modules property required searching states transitions 
table shows results framework example 
ai column gives number states assumptions generated 
table shows number states transitions explored analysis assumption 
iterations oracle determined learned assumptions weak 
iteration learned assumption weak oracle returned counterexample 
simulated counterexample led error state 
analysis concluded property hold 
largest state space involved application approach explored oracle iteration consisted states transitions 
approximately order magnitude smaller state space explored checking property directly 
jamieson giannakopoulou corina hand approach took seconds compared seconds checking property directly 
due iterative learning assumptions 
believe potential benefits approach terms memory outweigh time overhead may incur 
experimental course preliminary planning carry larger case studies validate approach 
related way addressing design verification large systems natural decomposition components 
formal techniques support component design gaining prominence see example 
order reason formally components isolation form assumption implicit explicit interaction interference environment 
sound complete reasoning systems assume guarantee reasoning see example mental challenge obtain appropriate assumption :10.1.1.111.7245
challenge find automated techniques support style reasoning 
thread modular reasoning underlying calvin tool start direction 
framework temporal logic alternating time temporal logic atl proposed specification verification open systems automated support symbolic model checking procedures 
mocha toolkit provides support modular verification components requirement specifications atl 
previous algorithm automatically generating weakest possible assumption component satisfy required property 
motivation different ability generate weakest assumption automate assume guarantee reasoning 
algorithm compute partial results meaning assumption obtained computation runs memory 
may happen state space component large 
approach generates assumptions incrementally may terminate aw computed 
runs memory reaching conclusive results intermediate assumptions may give indication developer requirements component places environment 
problem generating assumption component similar problem generating component interfaces deal intermediate state explosion cra 
approaches defined automatically abstracting component environment obtain interfaces 
approaches address issue incrementally refining interfaces needed carrying assume guarantee proof 
learning context model checking investigated different goal 
algorithm generate model software system fed model checker 
conformance checker determines model accurately describes system 
learning assumptions compositional verification theoretical frameworks sound complete assume guarantee reasoning existed decades practical impact limited involve non trivial human interaction 
novel approach performing reasoning fully automatic fashion 
approach uses learning algorithm generate refine assumptions queries counterexamples iterative process 
process guaranteed terminate return true property holds system counterexample 
memory sufficient reach termination intermediate assumptions generated may useful approximating requirements component places environment satisfy certain properties 
advantage approach generality 
relies standard features model checkers easily introduced tool 
example currently process implementing jpf analysis java code 
architecture framework modular components easily substituted efficient ones 
evaluate useful approach practice planning extensive application real systems 
early experiments provide strong evidence favor line research 
plan investigate number topics including learning algorithm efficient context different algorithms appropriate generating assumptions benefit querying component environment time implementing powerful compositional rules 
interesting challenge extend types properties framework handle include liveness fairness timed properties 
acknowledgments authors alex help algorithm willem visser help jpf su anonymous referees useful comments 

alur henzinger kupferman 
alternating time temporal logic 
compositionality significant difference international symposium 

alur henzinger mang qadeer rajamani 
mocha modularity model checking 
proc 
th int 
conf 
computer aided verification pages june july 

angluin 
learning regular sets queries counterexamples 
information computation nov 

cheung kramer 
context constraints compositional reachability analysis 
acm transactions software engineering methodology oct 
jamieson giannakopoulou corina 
cheung kramer 
checking safety properties compositional reachability analysis 
acm transactions software engineering methodology jan 

chow 
testing software design modeled finite state machines 
ieee transactions software engineering se may 

clarke long mcmillan 
compositional model checking 
proc 
th symp 
logic computer science pages june 

clarke grumberg peled 
model checking 
mit press 

de alfaro henzinger 
interface automata 
proc 
th european software engineering conf 
held jointly th acm sigsoft symp 
foundations software engineering pages sept 

de alfaro henzinger 
interface theories component design 
proc 
st int 
workshop embedded software pages oct 

dean boddy 
analysis time dependent planning 
proc 
th national conf 
artificial intelligence pages aug 

flanagan freund qadeer 
thread modular verification sharedmemory programs 
proc 
th european symp 
programming pages apr 

giannakopoulou kramer cheung 
behaviour analysis distributed systems approach 
automated software engineering july 

giannakopoulou barringer 
assumption generation software component verification 
proc 
th ieee int 
conf 
automated software engineering sept 

peled yannakakis 
adaptive model checking 
proc 
th int 
conf 
tools algorithms construction analysis systems pages apr 

grumberg long 
model checking modular verification 
proc 
nd int 
conf 
concurrency theory pages aug 

henzinger qadeer rajamani 
assume guarantee methodology case studies 
proc 
th int 
conf 
computer aided verification pages june july 

jones 
specification design parallel programs 
mason editor information processing proc 
ifip th world congress pages 
ifip north holland 



compositional state space generation lotos programs 
proc 
rd int 
workshop tools algorithms construction analysis systems pages apr 

magee kramer 
concurrency state models java programs 
john wiley sons 

pnueli 
transition global modular temporal reasoning programs 
apt editor logic models concurrent systems volume pages new york 
springer verlag 

rivest schapire 
inference finite automata homing sequences 
information computation apr 

visser havelund brat 
park 
model checking programs 
proc 
th ieee int 
conf 
automated software engineering sept 

xu de roever 
rely guarantee method verifying shared variable concurrent programs 
formal aspects computing 
