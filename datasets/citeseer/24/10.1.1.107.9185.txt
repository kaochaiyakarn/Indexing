puppeteer component adaptation mobile computing eyal de lara dan wallach willy zwaenepoel department electrical computer engineering department computer science rice university puppeteer system adapting component applications mobile environments 
puppeteer takes advantage exported interfaces applications structured nature documents manipulate perform adaptation modifying applications 
system structured modular fashion allowing easy addition new applications adaptation policies 
initial prototype focuses adaptation limited bandwidth 
runs windows nt includes support variety adaptation policies microsoft powerpoint internet explorer 
demonstrate puppeteer support complex policies modification application little overhead 
best knowledge previous implementations adaptations nature relied modifying application 
need application adaptation mobile wireless environments established 
hand mobile environments characterized low unstable resource availability 
hand mobile users want access remote data applications desktop machines 
unfortunately desktop applications require rich stable resource environment 
perform poorly mobile clients require adaptation provide acceptable levels service 
approaches adaptation proposed taxonomies adaptation possible 
focus types adaptation policies adaptation implemented 
adaptation policies grouped types data control 
data adaptations transform application data 
instance transform images document lower resolution format 
control adaptations modify application control flow behavior 
instance control adaptation cause application returns control user entire document loaded return control soon page loaded 
adaptation implemented recognize spectrum possibilities extremes system application adaptation :10.1.1.12.448
system adaptation system performs adaptation interposing application data changes application 
application adaptation application changed system unaware adaptation 
application adaptation allows data control adaptation system adaptation limited data adaptation 
system adaptation require modification applications provides centralized control allowing system adapt applications systemwide policy 
novel approach adaptation call component adaptation 
enables application specific control data adaptation policies requiring modifications application 
exposed apis componentbased applications structured nature documents manipulate implement application specific control adaptation policies 
component adaptation attempts bring benefits application adaptation implement application specific policies modifying applications 
adaptation done system component adaptation retains advantage providing centralized locus control adaptation multiple applications 
component adaptation enables policies adapt repeated subsetting versioning 
subsetting policy creates new virtual document consisting subset components original document slide presentation 
versioning policy chooses multiple instantiations component instances image different resolution 
adaptation policies application exposed api extend subset replace version client application dmi data puppeteer proxy low bw link puppeteer server high bw link system architecture 
data server component load additional slides presentation replace image higher fidelity 
iterative improvement key advantages component adaptation system adaptation 
approach tries strike middle ground system application adaptation application aware adaptation :10.1.1.121.328
system provides common adaptation facilities serves centralized locus control adaptation applications 
applications modified implement control adaptations perform calls adaptation api provided system 
component adaptation similarities application aware adaptation approaches delegate common adaptation tasks system 
approaches differ control adaptation policies implemented 
component adaptation applications expose interfaces system invoking interfaces perform adaptation 
precise opposite occurs application aware adaptation applications modified call system adaptation api 
component adaptation enables third parties add new adaptation policies application released application aware adaptation requires application designer foresee necessary adaptations time application written 
component adaptation nature restricted component applications exported apis 
certainly limitation observe desirable candidate applications adaptation component including microsoft office suite internet explorer netscape navigator kde office suite star office 
recognizing advantages component oriented software construction independent adaptation foresee increasing number applications developed components exported apis 
traditionally associated windows platform com dcom technology component technologies common unix world push component technologies led gnome kde projects 
example open source productivity suite powerful scripting capabilities 
released version popular cross platform productivity suite implements sophisticated object model allows scripting third party applications corba interface 
fundamental question component adaptation extent support adaptation mechanisms customized application approach achieve performance 
furthermore wish understand scalability component adaptation 
clearly system needs drivers application wishes support 
concept scalable terms number applications supports effort involved writing additional driver small 
address questions built system call puppeteer 
describes design puppeteer system implementation windows nt experience implementation adapt applications low bandwidths microsoft power point presentation graphics system powerpoint internet explorer web browser 
demonstrate puppeteer easily efficiently support number desirable policies 
rest organized follows 
section presents design puppeteer system 
section introduces prototype implementation applications evaluate 
section describes experimental platform 
section describes documents experiments 
section presents experimental results 
section discusses related 
section presents 
design shows tier puppeteer system architecture 
consists application adapted puppeteer client proxy puppeteer server proxy data server 
application data server completely unmodified 
puppeteer client proxy server proxy perform adaptation 
puppeteer client proxy charge executing policies adapt applications 
puppeteer server proxy responsible parsing documents exposing structure transcoding components requested client proxy 
puppeteer server proxy assumed strong connectivity data server 
common scenario executes machine data server 
data servers arbitrary repositories data web servers file servers databases 
application requirements puppeteer adapt application uncover component structure documents appli client proxy export driver tracking driver policies kernel decoder server proxy kernel import driver internal puppeteer architecture 
coder cation provides api enables puppeteer view modify data application operates 
refer feature data manipulation interface dmi 
additionally puppeteer benefit greatly ability track user actions 
demonstrate puppeteer implements adaptation requirements met 
puppeteer architecture puppeteer architecture consists types modules kernel driver transcoder policy see 
kernel appears client server puppeteer proxy 
driver supports adaptation particular component type 
driver particular component type may call driver component type component type included component type 
top driver hierarchy sits driver particular application component type 
drivers may execute client server puppeteer proxies may transcoders implement specific transformations component types 
policies specify particular adaptation strategies execute client puppeteer proxy 
kernel kernel component independent module implements puppeteer protocol 
kernel runs client server proxies enables transfer document components 
kernel knowledge specifics documents transmitted 
operates format neutral description documents refer puppeteer intermediate format pif 
pif consists skeleton components set related data items 
skeleton captures structure data application 
skeleton form tree root document children pages slides elements document 
skeleton multi level data structure components level contain sub components 
skeleton component independent components skeleton component specific 
component component specific properties slide title image size related data items contain component native data 
adapting document kernel communicates skeleton server client proxy 
enables application policies request subset components specify transcoding filters apply component data 
improve performance kernel batches requests multiple components single message supports asynchronous requests 
drivers component type adapts puppeteer requires import export driver 
implement complex policies tracking driver necessary 
import drivers parse documents extracting component structure converting applicationspecific file formats pif 
common case application file format parsable human readable xml sufficient documentation write parser puppeteer parse file directly uncover structure data 
results performance enables clients server run different platforms running puppeteer client proxy windows nt running puppeteer server proxy linux 
application exposes dmi opaque file format puppeteer runs instance application server uses dmi uncover structure data sense application parser 
configuration allows high degree flexibility porting applications puppeteer straightforward puppeteer need understand application file format 
creates overhead server proxy requires client server run environment application cases amounts running operating system servers clients 
parsing server documents choose data fetch display executing script dynamic mechanisms 
import drivers dynamic content run puppeteer client proxy rely intercept mechanism traces requests 
regardless skeleton built statically server proxy dynamically client proxy changes skeleton reflected kernel ends maintain consistent view skeleton 
export drivers un parse pif update application dmi interfaces exposed application 
minimal export driver support inserting new components running application 
tracking drivers necessary complex policies 
tracking driver tracks components viewed user intercepts load save requests 
tracking drivers implemented polling event registration mechanisms 
transcoders puppeteer extensive transcoding perform transformations component data 
transcoders include conventional ones compression reducing image resolution 
novel transcoding mechanism enable loading subsets components 
element pif skeleton number associated data items things encode component specific format relationship component children 
load subset children node necessary modify data items associated parent node reflect fact loading children 
effect transcoding parent node data items create new temporary component consists subset children original component 
policies policies modules run client proxy control fetching components 
policies traverse skeleton choosing components fetch fidelity 
puppeteer provides support types policies general purpose policies independent component type adapted prefetching component specific policies knowledge component drive adaptation fetch page 
typical policies choose components available bandwidth user specified preferences fetch text 
policies track user fetch powerpoint slide currently user focus prefetch subsequent slides presentation react way user moves document user skips pages policy drop components fetching focus available bandwidth fetching components visible user 
regardless decision fetch component general purpose policy actual data transfer performed kernel relieving policy intricacies communication 
adaptation process adaptation process puppeteer divided roughly stages parsing document uncover structure data fetching initially selected components specific fidelity levels supplying application policy specifies updating application newly fetched data 
user opens static document kernel puppeteer server proxy instantiates import driver appropriate document type 
import driver parses document extracts skeleton data generates pif 
kernel transfers document skeleton puppeteer client proxy 
policies running client proxy ask kernel fetch initial set components specified fidelity 
set components supplied application return open call 
application believing finished loading document returns control user 
puppeteer knows fraction document loaded 
policies client proxy decide components version components fetch 
instruct kernel client proxy uses dmi feed newly fetched components application 
prototype powerpoint initial applications prototype 
widely popular applications comply requirements dmi parsable file formats tracking mechanism section 
furthermore powerpoint radically different 
supporting accurately design interfaces puppeteer kernel component specific aspects system 
discuss design drivers transcoders policies implemented adapt applications 
table shows code line counts various modules 
drivers import drivers powerpoint supports native file formats traditional binary format ole archives new xml format 
choose base powerpoint import drivers xml representation contains roughly informa module code lines kernel ppt import driver export driver track driver transcoders policies total import driver export driver track driver transcoders policies total table code line counts kernel powerpoint ppt modules tion binary format human readable nature xml easier parse manipulate document 
implemented import drivers component types powerpoint slide images sound embedded objects 
html straightforward parse javascript allowed documents structure change dynamically 
import driver intercepts url requests allowing dynamically add new images components web page skeleton see section 
implemented import drivers component types images 
export drivers powerpoint component object model com object linking embedding ole standards 
interfaces provide reasonably documented traditionally extend functionality third party applications 
powerpoint provide excellent access compose modify internal data structures 
support policies implemented powerpoint export drivers includes support opening closing presentations inserting slides images embedded objects 
export driver includes support navigating url reloading individual components page 
update object export driver instructs reload url associated object 
powerpoint supports cut paste interface update presentation 
paste new components active powerpoint presentation active powerpoint export driver creates new powerpoint presentation helper consists new components 
update process stages 
stage driver instructs powerpoint load helper 
stage component helper driver copies clipboard active deletes earlier version component active 
tracking drivers powerpoint event notification mechanism primitive encompasses just handful large granularity events opening closing documents making inadequate tracking behavior user 
powerpoint tracking driver relies polling dmi determine slide currently displayed 
tracking driver uses rich event mechanism allows third party applications register call back functions wide range events 
driver uses interface detect user types url presses back forward buttons clicks link moves mouse image 
events instruct kernel open new html document policies drive image fetching fidelity refinement refine image currently pointed mouse 
transcoders policies transcoders slide selector 
creates virtual presentation consisting specific slides 
ole selector 
creates new file contains subset selected embedded ole objects power point stores embedded ole objects single file 
progressive jpeg 
converts gif jpeg images progressive jpeg back jpeg 
gzip compressor 
compresses text binary data gzip 
policies section presents sample adaptation policies illustrate power component adaptation 
policies difficult implement system adaptation affect data application control flow 
adaptation policies best knowledge implemented modifying application 
puppeteer implemented external apis 
demonstrated section policies result significant benefit limited bandwidth conditions 
powerpoint slide 
fetch components slide highest fidelity return control user 
fetch rest presentation background 
powerpoint prefetch text 
fetch slides leave images embedded objects 
monitor user fetch images embedded objects slide focus 
incremental rendering 
convert gif jpeg images html page progressive jpeg 
load image returning control user 
progressively higher fidelity image pointed mouse 
adding new functionality adapt new application puppeteer need implement drivers policies transcoders new component type currently supported puppeteer 
example enable ms word need add drivers word component type reuse drivers transcoders image embedded object component types implemented powerpoint see table 
effort adding new applications new policies limited modular design puppeteer lack standard event models file formats requires new drivers written 
designing standard interfaces part ongoing research 
experimental environment experimental platform consists pentium iii mhz machines running windows nt communicate third pc running dummynet network simulator :10.1.1.57.2969
setup allows control bandwidth client server emulate various network technologies 
application different bandwidths application network bound cpu bound 
experiments access data stored apache web server 
experiments measure latency loading documents native application apache process running server 
puppeteer experiments apache server puppeteer server proxy run machine 
data sets select set powerpoint documents experiments collection microsoft office documents characterized earlier 
full collection includes documents downloaded web sites sizes ranging kb mb 
obtain html documents re executing traces web client accesses collected characterized cunha 
traces include accesses user groups period months november may 
traces unique urls corresponding web sites 
url able access pages disappeared corrupted download html file images referenced 
download documents linked pages 
manner acquire html files images comprising mb data downloaded sites 
documents range size bytes kb including images 
data sets large transmitting low bandwidth takes prohibitively long 
run experiments just powerpoint documents html documents 
subsets longest experiment requires minutes powerpoint minutes html 
completeness run test full sets document types high bandwidth network verifying selected documents full document sets produce similar results 
powerpoint experiments select documents sorting documents larger kb buckets sizes increasing powers 
randomly select documents bucket 
largest bucket consisting documents sizes greater mb documents 
experimental set members 
experiments select html documents downloaded set sorting documents larger kb buckets sizes increasing powers 
randomly select documents bucket 
largest bucket consisting documents sizes greater kb documents 
experimental set members 
experimental results fundamental question want answer section overhead pay doing adaptation outside application opposed modifying application 
answer question definitive way need modify original applications add adaptation behavior achieve puppeteer compare resulting performance performance applications running puppeteer 
possible access source code applications 
experiments measure various factors contributing puppeteer overhead 
overhead consists elements time initial cost continuing cost 
time initial cost consists cpu time parse document extract pif network time transmit skeleton additional control information 
continuing costs come overhead various dmi commands control application 
assume costs network transmission transcoding rendering application data similar implementations 
remainder section organized follows 
measure time initial adaptation costs puppeteer 
second measure continuing adaptation costs 
examples policies significantly reduce user perceived latency 
initial adaptation costs determine time initial costs compare latency loading powerpoint html documents entirety native application ppt native native application puppeteer support ppt full full 
configuration puppeteer loads document skeleton components highest fidelity 
policy represents worst possible case incurs overhead parsing document obtain pif benefit adaptation 
figures show percentage overhead ppt full full ppt native native variety document sizes bandwidths 
puppeteer overhead powerpoint documents varies large documents kb sec small documents mb sec html documents large documents kb sec 
small document mb sec 
results show large documents transmitted medium slow speed networks adaptation normally initial adaptation costs puppeteer small compared total document loading time 
plots data breakdown powerpoint html documents 
divide data application data puppeteer overhead decompose data transmitted fetch skeleton skeleton data transmitted request components control 
data confirms results figures 
puppeteer data overhead significant document size increases 
data overhead varies powerpoint documents large documents small documents html documents large documents small docu overhead document size kb mb sec mb sec kb sec percentage overhead ppt full ppt native various document sizes bandwidths 
overhead document size kb mb sec kb sec kb sec percentage overhead full native various document sizes bandwidths 
network usage ppt document size kb skeleton control application data breakdowns loading powerpoint html documents 
cost ms component single additional operation avg stdev avg stdev slide ppt stage stage image synthetic dmi table continuing adaptation costs powerpoint ppt slides images 
table shows cost executing ole calls append powerpoint slides upgrade fidelity images ments 
continuing adaptation costs continuing costs adapting dmi clearly dependent application policy 
purpose give comprehensive analysis adaptation costs show small compared network rendering times inherent application 
perform experiments loading pasting newly fetched slides powerpoint presentation replacing images html page higher fidelity versions 
prevent network effects affecting measurements sure data locally client load application 
determine powerpoint dmi overhead measuring time powerpoint export driver spends loading new slides stage cutting pasting stage described section 
expect application approach adaptation perform stage need perform stage 
determine dmi overhead upgrading images different ways dmi uses dmi update images synthetic approximates application adaptation approach 
synthetic measures time load render previously generated pages contain high fidelity images 
synthetic perfect imitation application adaptation requires re load parse html portion page application approach dispense 
avoid problem pages html content small total page size html parsing rendering costs minimal 
table shows results experiments 
policy shows cost updating single component slide image additional cost incurred extra component updated simultaneously 
powerpoint table shows time spent stage stage 
table shows times dmi synthetic implementations 
powerpoint results show time spent cutting pasting stage small compared time spent loading slides stage application carry 
time spent updating application stage stage small compared network time 
example average network time load slide kb sec network milliseconds standard deviation milliseconds average time updating application single slide milliseconds standard deviation milliseconds 
results show dmi implementation comes synthetic 
image update times small compared average network time 
instance average time load image kb sec network milliseconds standard deviation milliseconds compared updating application takes average milliseconds standard deviation milliseconds 
results suggest cost dmi calls adaptation small time takes add upgrade component spent transferring data network loading application 
factors expected similar implement adaptation outside inside application 
adaptation policies conclude section presenting results user perceive puppeteer adaptation policies implemented far see section 
results provide indication circumstances adaptations profitable 
powerpoint fetch slide text experiment measure latency power point adaptation policy loads slide titles slides powerpoint presentation returns control user loads remaining slides background 
results adaptation policy addition fetches text powerpoint document returning control 
adaptations user perceived latency reduced compared application policy loading entire document returning control user 
results experiments appear labels ppt slide ppt slide text respectively figures kb sec mb sec mb sec network links 
shows data trans latency sec ppt native ppt slide ppt slide text document size kb load latency powerpoint documents kb sec 
shown latencies native powerpoint ppt native puppeteer runs loading just components slide ppt slide loading addition text slides ppt slide text 
latency sec ppt native ppt slide ppt slide text document size kb load latency powerpoint documents mb sec 
latency sec ppt native ppt slide ppt slide text document size kb load latency powerpoint documents mb sec 
size return control kb ppt native ppt slide ppt slide text document size kb data transfered load powerpoint documents 
scenarios 
document figures contain vertically aligned points representing latency data measurements system configurations native powerpoint ppt native puppeteer loading components slide titles slides ppt slide puppeteer loading addition text remaining slides ppt slide text 
expect reduced network traffic improve latency slower kb sec mb sec networks 
savings mb sec network come surprise 
puppeteer achieves savings kb sec mb sec networks reducing network traffic transmission times mb sec small account savings 
savings result reducing parsing rendering time 
average ppt slide achieves latency reductions documents larger mb kb sec mb sec mb sec networks respectively 
data shows large documents possible return control user loading just small fraction total document data documents larger mb 
comparing data points ppt slide text ppt slide see latency moved slightly 
latency significantly lower ppt native achieving savings average documents larger mb kb sec mb sec mb sec networks respectively 
increase amount data transfered especially documents larger mb small amounting extra data sent slide 
results consistent earlier findings text accounts latency sec native document size kb load latency html documents kb sec 
shown latencies native native puppeteer runs load bytes transcoded images load transcoded images text 
latency sec native document size kb load latency html documents kb sec 
latency sec native document size kb load latency html documents mb sec 
size return control kb native document size kb data transfered load html documents 
small fraction total data large power point documents 
results suggest text fetched situations lazy fetching components appropriate larger image ole embedded objects appear documents 
interesting characteristic figures large variation user perceived latency high network speeds versus alignment data points straight lines network speed decreases 
high variability high network speeds results experiment cpu bound 
conditions latency dependent time takes powerpoint parse render presentation 
powerpoint time dependent size presentation function number components slides images embedded objects presentation 
jpeg compression experiment explore lossy jpeg compression progressive jpeg technology reduce user perceived latency html pages 
goal reduce time required display page lowering fidelity page elements 
prototype converts run time gif jpeg images embedded html document progressive jpeg format independent jpeg group libraries 
transfer th resulting image bytes 
client convert low fidelity progressive jpeg back normal jpeg format supply browser useful property progressive image format progressive jpeg prefix file image results complete albeit lower quality rendering image 
prefix increases length approaches full image file image quality approaches maximum 
comprised image highest fidelity 
prototype images greater user specified size threshold 
results reported reflect threshold size kb cheaper simply transmit image run transcoder 
figures show latency loading html documents kb sec kb sec mb sec networks 
shows data transfered load documents 
figures show latencies native native puppeteer runs load bytes transcoded images load transcoded images text 
shows mb sec networks transcoding detrimental performance 
contrast kb sec kb sec networks puppeteer achieves average reduction latency documents larger kb kb sec kb sec respectively 
closer examination reveals roughly documents see latency reduction 
remaining documents seeing little improvement transcoding composed html text little image content 
reduce latency documents add gzip text compression prototype 
run shows image text transcoding puppeteer achieves average reductions latency documents larger kb kb sec kb sec respectively 
transcoding time takes execution time 
puppeteer overlaps image transcoding data transmission effect execution time diminishes network speed decreases 
powerpoint notice figures low bandwidths data points tend fall straight line higher bandwidths data points dispersed 
reason powerpoint high bandwidths experiment cpu bound governed time takes parse render page 
parsing rendering time depends content types html document 
related gone supporting mobile clients creating programming models incorporate adaptation design application :10.1.1.12.448
project closely relates puppeteer odyssey splits responsibility adap tation application system :10.1.1.57.2969:10.1.1.121.328
puppeteer takes similar approach pushing common adaptation tasks system infrastructure leaving application specific aspect adaptation application drivers 
main difference systems lays puppeteer existing run time interfaces adapt existing applications odyssey requires applications modified 
visual proxies offspring odyssey implements application specific adaptation policies modifying application interposition server application 
technique enables adaptations possible puppeteer requires complicated application drivers 
dynamic documents system uses instrumentation mosaic web browser tcl scripts set policies individual html documents 
puppeteer uses external interfaces provided application dynamic documents uses internal script interpreter browser 
design measured effectiveness puppeteer system adapting componentbased applications mobile environments 
puppeteer implements adaptation exposed apis component applications enabling applicationspecific adaptation policies requiring modifications application 
described architecture puppeteer implementation 
architecture allows modular addition new applications component types transcoders policies 
demonstrated complex policies traditionally require significant application modifications implemented easily efficiently puppeteer 
puppeteer reliance application specific drivers provide tailored adaptation raises question porting new application system 
experience time consuming part porting application building import driver builds pif document parsing application specific file format 
necessary import export drivers export drivers considerably easier implement implementing policies proved surprisingly simple 
fact policies required lines code 
respect standard file formats current trend xml formats promise 
requirement components dependencies explicit 
effort required build export drivers modest developing set standard apis suitable adaptation including facilities data manipulation event registration 
gnome 
www gnome org 
independent jpeg group 
www ijg org 
kde 
www kde org 

kde org 

www com 
andersen basal curtis srinivasan balakrishnan 
system support bandwidth management content adaptation internet applications 
proceedings th symposium operating systems design implementation san diego ca 
bagrodia wesley chu leonard kleinrock gerald popek 
vision issues architecture nomadic computing 
ieee personal communications december 

inside ole 
microsoft press 
david chappell 
understanding activex ole 
microsoft press 
carlos cunha azer bestavros mark crovella 
characteristics www client traces 
technical report tr boston university april 
eyal de lara dan wallach willy zwaenepoel 
opportunities bandwidth adaptation microsoft office documents 
proceedings fourth usenix windows symposium seattle washington august 
dan duchamp 
issues wireless mobile computing 
proceedings third workshop workstation operating systems pages key florida april 
forman zahorjan 
challenges mobile computing 
ieee computer pages april 
fox gribble brewer amir 
adapting network client variability demand dynamic distillation 
sigplan notices september 
fox gribble chawathe brewer 
adapting network client variation infrastructural proxies lessons perspectives 
ieee personal communications august 
gardner 
beginner guide 
com howto shtml 
anthony joseph alan joshua tauber david gifford frans kaashoek 
rover toolkit mobile information access 
proceedings th acm symposium operating systems principles sosp pages copper mountain resort colorado december 
anthony joseph joshua tauber frans kaashoek 
building reliable mobile aware applications rover toolkit 
proceedings nd acm international conference mobile computing net working mobicom new york november 
frans kaashoek tom joshua tauber 
dynamic documents mobile wireless access www 
proceedings workshop mobile computing systems applications wmcsa pages santa cruz california december 
ieee computer society 
randy katz :10.1.1.12.448
adaptation mobility wireless information systems 
ieee personal communications 
james kistler satyanarayanan :10.1.1.12.448
disconnected operation coda file system 
acm transactions computer systems february 
microsoft redmond washington 
microsoft office drawing file format 
msdn online msdn microsoft com 
microsoft redmond washington 
microsoft powerpoint file format 
msdn online msdn microsoft com 
microsoft redmond washington 
microsoft office html 
msdn online msdn microsoft com 
microsoft press 
microsoft office visual basic programmer guide 
lily maria ebling satyanarayanan :10.1.1.121.328
exploiting weak connectivity mobile file access 
proceedings th acm symposium operating systems principles copper mountain resort colorado december 
noble satyanarayanan 
research status report adaptation mobile data access 
sigmod record volume december 
brian noble satyanarayanan narayanan james eric jason flinn kevin walker :10.1.1.57.2969:10.1.1.121.328
agile application aware adaptation mobility 
operating systems review acm december 
jeff 

www acme com software 
rizzo :10.1.1.57.2969
dummynet simple approach evaluation network protocols 
acm computer communication review january 
scott roberts 
programming microsoft internet explorer 
microsoft press 
satyanarayanan 
hot topics mobile computing 
ieee computer september 
satyanarayanan 
fundamental challenges mobile computing 
fifteenth acm symposium principles distributed computing philadelphia pennsylvania may 
satyanarayanan flinn walker 
visual proxy exploiting os customizations application source code 
operating systems review july 
