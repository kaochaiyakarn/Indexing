bigtable distributed storage system structured data fay chang jeffrey dean sanjay ghemawat wilson hsieh deborah wallach mike burrows tushar chandra andrew fikes robert gruber bigtable distributed storage system managing structured data designed scale large size petabytes data thousands commodity servers 
projects google store data bigtable including web indexing google earth google finance 
applications place different demands bigtable terms data size urls web pages satellite imagery latency requirements backend bulk processing real time data serving 
despite varied demands bigtable successfully provided flexible high performance solution google products 
describe simple data model provided bigtable gives clients dynamic control data layout format describe design implementation bigtable 
half years designed implemented deployed distributed storage system managing structured data google called bigtable 
bigtable designed reliably scale petabytes data thousands machines 
bigtable achieved goals wide applicability scalability high performance high availability 
bigtable google products projects including google analytics google finance orkut personalized search google earth 
products bigtable variety demanding workloads range throughput oriented batch processing jobs latency sensitive serving data users 
bigtable clusters products span wide range configurations handful thousands servers store terabytes data 
ways bigtable resembles database shares implementation strategies databases 
parallel databases main memory databases fay jeff sanjay kerr tushar fikes gruber google com google achieved scalability high performance bigtable provides different interface systems 
bigtable support full relational data model provides clients simple data model supports dynamic control data layout format allows clients reason locality properties data represented underlying storage 
data indexed row column names arbitrary strings 
bigtable treats data uninterpreted strings clients serialize various forms structured semi structured data strings 
clients control locality data careful choices schemas 
bigtable schema parameters clients dynamically control serve data memory disk 
section describes data model detail section provides overview client api 
section briefly describes underlying google infrastructure bigtable depends 
section describes fundamentals bigtable implementation section describes refinements improve bigtable performance 
section provides measurements bigtable performance 
describe examples bigtable google section discuss lessons learned designing supporting bigtable section 
section describes related section presents 
data model bigtable sparse distributed persistent multidimensional sorted map 
map indexed row key column key timestamp value map uninterpreted array bytes 
row string column string time int string usenix association osdi th usenix symposium operating systems design implementation com cnn www contents html 
html 
html anchor com cnn anchor look ca cnn com slice example table stores web pages 
row name reversed url 
contents column family contains page contents anchor column family contains text anchors page 
cnn home page referenced sports illustrated look home pages row contains columns named anchor com anchor look ca 
anchor cell version contents column versions timestamps 
settled data model examining variety potential uses bigtable system 
concrete example drove design decisions suppose want keep copy large collection web pages related information different projects call particular table 
urls row keys various aspects web pages column names store contents web pages contents column timestamps fetched illustrated 
rows row keys table arbitrary strings currently kb size bytes typical size users 
read write data single row key atomic regardless number different columns read written row design decision easier clients reason system behavior presence concurrent updates row 
bigtable maintains data lexicographic order row key 
row range table dynamically partitioned 
row range called tablet unit distribution load balancing 
result reads short row ranges efficient typically require communication small number machines 
clients exploit property selecting row keys get locality data accesses 
example pages domain grouped contiguous rows reversing hostname components urls 
example store data maps google com index html key com google maps index html 
storing pages domain near host domain analyses efficient 
column families column keys grouped sets called column families form basic unit access control 
data stored column family usually type compress data column family 
column family created data stored column key family family created column key family 
intent number distinct column families table small hundreds families rarely change operation 
contrast table may unbounded number columns 
column key named syntax family qualifier 
column family names printable qualifiers may arbitrary strings 
example column family language stores language web page written 
column key language family stores web page language id useful column family table anchor column key family represents single anchor shown 
qualifier name referring site cell contents link text 
access control disk memory accounting performed column family level 
example controls allow manage different types applications add new base data read base data create derived column families allowed view existing data possibly view existing families privacy reasons 
timestamps cell bigtable contain multiple versions data versions indexed timestamp 
bigtable timestamps bit integers 
assigned bigtable case represent real time microseconds explicitly assigned client osdi th usenix symposium operating systems design implementation usenix association open table table bigtable web write new anchor delete old anchor com cnn www set anchor www span org cnn delete anchor www abc com operation op apply op writing bigtable 
applications 
applications need avoid collisions generate unique timestamps 
different versions cell stored decreasing timestamp order versions read 
management versioned data onerous support column family settings tell bigtable garbage collect cell versions automatically 
client specify versions cell kept new versions kept keep values written days 
example set timestamps crawled pages stored contents column times page versions crawled 
garbage collection mechanism described lets keep versions page 
api bigtable api provides functions creating deleting tables column families 
provides functions changing cluster table column family metadata access control rights 
client applications write delete values bigtable look values individual rows iterate subset data table 
shows code uses abstraction perform series updates 
irrelevant details elided keep example short 
call apply performs atomic mutation adds anchor www cnn com deletes different anchor 
shows code uses scanner abstraction iterate anchors particular row 
clients iterate multiple column families mechanisms limiting rows columns timestamps produced scan 
example restrict scan produce anchors columns match regular expression anchor cnn com produce anchors timestamps fall days current time 
scanner scanner stream stream scanner anchor stream scanner lookup com cnn www stream done stream printf lld scanner stream stream stream value reading bigtable 
bigtable supports features allow user manipulate data complex ways 
bigtable supports single row transactions perform atomic read modify write sequences data stored single row key 
bigtable currently support general transactions row keys provides interface batching writes row keys clients 
second bigtable allows cells integer counters 
bigtable supports execution client supplied scripts address spaces servers 
scripts written language developed google processing data called 
moment api allow client scripts write back bigtable allow various forms data transformation filtering arbitrary expressions summarization variety operators 
bigtable framework running large scale parallel computations developed google 
written set wrappers allow bigtable input source output target jobs 
building blocks bigtable built pieces google infrastructure 
bigtable uses distributed google file system gfs store log data files 
bigtable cluster typically operates shared pool machines run wide variety distributed applications bigtable processes share machines processes applications 
bigtable depends cluster management system scheduling jobs managing resources shared machines dealing machine failures monitoring machine status 
google file format internally store bigtable data 
provides persistent ordered immutable map keys values keys values arbitrary byte strings 
operations provided look value associated specified usenix association osdi th usenix symposium operating systems design implementation key iterate key value pairs specified key range 
internally contains sequence blocks typically block kb size configurable 
block index stored locate blocks index loaded memory opened 
lookup performed single disk seek find appropriate block performing binary search memory index reading appropriate block disk 
optionally completely mapped memory allows perform lookups scans touching disk 
bigtable relies highly available persistent distributed lock service called chubby 
chubby service consists active replicas elected master actively serve requests 
service live majority replicas running communicate 
chubby uses paxos algorithm keep replicas consistent face failure 
chubby provides namespace consists directories small files 
directory file lock reads writes file atomic 
chubby client library provides consistent caching chubby files 
chubby client maintains session chubby service 
client session expires unable renew session lease lease expiration time 
client session expires loses locks open handles 
chubby clients register callbacks chubby files directories notification changes session expiration 
bigtable uses chubby variety tasks ensure active master time store bootstrap location bigtable data see section discover tablet servers finalize tablet server deaths see section store bigtable schema information column family information table store access control lists 
chubby unavailable extended period time bigtable unavailable 
measured effect bigtable clusters spanning chubby instances 
average percentage bigtable server hours data stored bigtable available due chubby unavailability caused chubby outages network issues 
percentage single cluster affected chubby unavailability 
implementation bigtable implementation major components library linked client master server tablet servers 
tablet servers dynamically added removed cluster accomodate changes workloads 
master responsible assigning tablets tablet servers detecting addition expiration tablet servers balancing tablet server load garbage collection files gfs 
addition handles schema changes table column family creations 
tablet server manages set tablets typically tablets tablet server 
tablet server handles read write requests tablets loaded splits tablets grown large 
single master distributed storage systems client data move master clients communicate directly tablet servers reads writes 
bigtable clients rely master tablet location information clients communicate master 
result master lightly loaded practice 
bigtable cluster stores number tables 
table consists set tablets tablet contains data associated row range 
initially table consists just tablet 
table grows automatically split multiple tablets approximately mb size default 
tablet location level hierarchy analogous tree store tablet location information 
chubby file root tablet st metadata tablet 
metadata tablets 
tablet location hierarchy 


level file stored chubby contains location root tablet 
root tablet contains location tablets special metadata table 
metadata tablet contains location set user tablets 
root tablet just tablet metadata table treated specially split ensure tablet location hierarchy levels 
metadata table stores location tablet row key encoding tablet table osdi th usenix symposium operating systems design implementation usenix association 
identifier row 
metadata row stores approximately kb data memory 
modest limit mb metadata tablets level location scheme sufficient address tablets bytes mb tablets 
client library caches tablet locations 
client know location tablet discovers cached location information incorrect recursively moves tablet location hierarchy 
client cache empty location algorithm requires network round trips including read chubby 
client cache stale location algorithm take round trips stale cache entries discovered misses assuming metadata tablets move frequently 
tablet locations stored memory gfs accesses required reduce cost common case having client library prefetch tablet locations reads metadata tablet reads metadata table 
store secondary information metadata table including log events pertaining tablet server begins serving 
information helpful debugging performance analysis 
tablet assignment tablet assigned tablet server time 
master keeps track set live tablet servers current assignment tablets tablet servers including tablets unassigned 
tablet unassigned tablet server sufficient room tablet available master assigns tablet sending tablet load request tablet server 
bigtable uses chubby keep track tablet servers 
tablet server starts creates acquires exclusive lock uniquely named file specific chubby directory 
master monitors directory servers directory discover tablet servers 
tablet server stops serving tablets loses exclusive lock due network partition caused server lose chubby session 
chubby provides efficient mechanism allows tablet server check holds lock incurring network traffic 
tablet server attempt reacquire exclusive lock file long file exists 
file longer exists tablet server able serve kills 
tablet server terminates cluster management system removing tablet server machine cluster attempts release lock master reassign tablets quickly 
master responsible detecting tablet server longer serving tablets reassigning tablets soon possible 
detect tablet server longer serving tablets master periodically asks tablet server status lock 
tablet server reports lost lock master unable reach server attempts master attempts acquire exclusive lock server file 
master able acquire lock chubby live tablet server dead having trouble reaching chubby master ensures tablet server serve deleting server file 
server file deleted master move tablets previously assigned server set unassigned tablets 
ensure bigtable cluster vulnerable networking issues master chubby master kills chubby session expires 
described master failures change assignment tablets tablet servers 
master started cluster management system needs discover current tablet assignments change 
master executes steps startup 
master grabs unique master lock chubby prevents concurrent master instantiations 
master scans servers directory chubby find live servers 
master communicates live tablet server discover tablets assigned server 
master scans metadata table learn set tablets 
scan encounters tablet assigned master adds tablet set unassigned tablets tablet eligible tablet assignment 
complication scan metadata table happen metadata tablets assigned 
starting scan step master adds root tablet set unassigned tablets assignment root tablet discovered step 
addition ensures root tablet assigned 
root tablet contains names metadata tablets master knows scanned root tablet 
set existing tablets changes table created deleted existing tablets merged form larger tablet existing tablet split smaller tablets 
master able keep track changes initiates 
tablet splits treated specially initiated tablet server 
tablet server commits split recording information new tablet metadata table 
split committed notifies master 
case split notification lost usenix association osdi th usenix symposium operating systems design implementation tablet server master died master detects new tablet asks tablet server load tablet split 
tablet server notify master split tablet entry finds metadata table specify portion tablet master asked load 
tablet serving persistent state tablet stored gfs illustrated 
updates committed commit log stores redo records 
updates committed ones stored memory sorted buffer called older updates stored sequence 
recover tablet tablet server memory gfs tablet log write op read op files tablet representation reads metadata metadata table 
metadata contains list comprise tablet set redo points pointers commit logs may contain data tablet 
server reads indices memory reconstructs applying updates committed redo points 
write operation arrives tablet server server checks formed sender authorized perform mutation 
authorization performed reading list permitted writers chubby file hit chubby client cache 
valid mutation written commit log 
group commit improve throughput lots small mutations 
write committed contents inserted 
read operation arrives tablet server similarly checked formedness proper authorization 
valid read operation executed merged view sequence 
lexicographically sorted data structures merged view formed efficiently 
incoming read write operations continue tablets split merged 
write operations execute size increases 
size reaches threshold frozen new created frozen converted written gfs 
minor compaction process goals shrinks memory usage tablet server reduces amount data read commit log recovery server dies 
incoming read write operations continue occur 
minor compaction creates new 
behavior continued unchecked read operations need merge updates arbitrary number 
bound number files periodically executing merging compaction background 
merging compaction reads contents writes new 
input discarded soon compaction finished 
merging compaction rewrites exactly called major compaction 
produced non major contain special deletion entries suppress deleted data older live 
major compaction hand produces contains deletion information deleted data 
bigtable cycles tablets regularly applies major 
major allow bigtable reclaim resources deleted data allow ensure deleted data disappears system timely fashion important services store sensitive data 
refinements implementation described previous section required number refinements achieve high performance availability reliability required users 
section describes portions implementation detail order highlight refinements 
locality groups clients group multiple column families locality group 
separate generated locality group tablet 
segregating column families typically accessed separate locality groups enables efficient reads 
example page metadata language checksums locality group contents page different group ap osdi th usenix symposium operating systems design implementation usenix association plication wants read metadata need read page contents 
addition useful tuning parameters specified locality group basis 
example locality group declared memory 
memory locality groups loaded lazily memory tablet server 
loaded column families belong locality groups read accessing disk 
feature useful small pieces data accessed frequently internally location column family metadata table 
compression clients control locality group compressed compression format 
user specified compression format applied block size controllable locality group specific tuning parameter 
lose space compressing block separately benefit small portions read decompressing entire file 
clients pass custom compression scheme 
pass uses bentley mcilroy scheme compresses long common strings large window 
second pass uses fast compression algorithm looks repetitions small kb window data 
compression passes fast encode mb decode mb modern machines 
emphasized speed space reduction choosing compression algorithms pass compression scheme surprisingly 
example compression scheme store web page contents 
experiment stored large number documents compressed locality group 
purposes experiment limited version document storing versions available 
scheme achieved reduction space 
better typical gzip reductions html pages way rows laid pages single host stored close 
allows bentley mcilroy algorithm identify large amounts shared boilerplate pages host 
applications just choose row names similar data ends clustered achieve compression ratios 
compression ratios get better store multiple versions value bigtable 
caching read performance improve read performance tablet servers levels caching 
scan cache higher level cache caches key value pairs returned interface tablet server code 
block cache lower level cache caches blocks read gfs 
scan cache useful applications tend read data repeatedly 
block cache useful applications tend read data close data read sequential reads random reads different columns locality group hot row 
bloom filters described section read operation read state tablet 
memory may doing disk accesses 
reduce number accesses allowing clients specify bloom filters created particular locality group 
bloom filter allows ask contain data specified row column pair 
certain applications small amount tablet server memory storing bloom filters drastically reduces number disk seeks required read operations 
bloom filters implies lookups non existent rows columns need touch disk 
commit log implementation kept commit log tablet separate log file large number files written concurrently gfs 
depending underlying file system implementation gfs server writes cause large number disk seeks write different physical log files 
addition having separate log files tablet reduces effectiveness group commit optimization groups tend smaller 
fix issues append mutations single commit log tablet server mutations different tablets physical log file 
log provides significant performance benefits normal operation complicates recovery 
tablet server dies tablets served moved large number tablet servers server typically loads small number original server tablets 
recover state tablet new tablet server needs reapply mutations tablet commit log written original tablet server 
mutations tablets usenix association osdi th usenix symposium operating systems design implementation physical log file 
approach new tablet server read full commit log file apply just entries needed tablets needs recover 
scheme machines assigned single tablet failed tablet server log file read times server 
avoid duplicating log reads sorting commit log entries order keys table row name log sequence number sorted output mutations particular tablet contiguous read efficiently disk seek followed sequential read 
parallelize sorting partition log file mb segments sort segment parallel different tablet servers 
sorting process coordinated master initiated tablet server indicates needs recover mutations commit log file 
writing commit logs gfs causes performance variety reasons gfs server machine involved write crashes network paths traversed reach particular set gfs servers suffering network congestion heavily loaded 
protect mutations gfs latency spikes tablet server log writing threads writing log file threads actively time 
writes active log file performing poorly log file writing switched thread mutations commit log queue written newly active log writing thread 
log entries contain sequence numbers allow recovery process elide duplicated entries resulting log switching process 
speeding tablet recovery master moves tablet tablet server source tablet server minor compaction tablet 
compaction reduces recovery time reducing amount state tablet server commit log 
finishing compaction tablet server stops serving tablet 
tablet tablet server usually fast minor compaction eliminate remaining state tablet server log arrived minor compaction performed 
second minor compaction complete tablet loaded tablet server requiring recovery log entries 
exploiting immutability caches various parts bigtable system simplified fact generate immutable 
example need synchronization accesses file system reading 
result concurrency control rows implemented efficiently 
mutable data structure accessed reads writes 
reduce contention reads row copy write allow reads writes proceed parallel 
immutable problem permanently removing deleted data transformed garbage collecting obsolete 
tablet registered metadata table 
master removes obsolete mark sweep garbage collection set metadata table contains set roots 
immutability enables split tablets quickly 
generating new set child tablet child tablets share parent tablet 
performance evaluation set bigtable cluster tablet servers measure performance scalability bigtable varied 
tablet servers configured gb memory write gfs cell consisting machines gb ide hard drives 
client machines generated bigtable load tests 
number clients tablet servers ensure clients bottleneck 
machine dual core opteron ghz chips physical memory hold working set running processes single gigabit ethernet link 
machines arranged level tree shaped switched network approximately gbps aggregate bandwidth available root 
machines hosting facility round trip time pair machines millisecond 
tablet servers master test clients gfs servers ran set machines 
machine ran gfs server 
machines ran tablet server client process processes jobs pool time experiments 
distinct number bigtable row keys involved test 
chosen benchmark read wrote approximately gb data tablet server 
sequential write benchmark row keys names 
space row keys partitioned equal sized ranges 
ranges assigned clients central scheduler osdi th usenix symposium operating systems design implementation usenix association tablet servers experiment random reads random reads mem random writes sequential reads sequential writes scans number tablet servers values read written second scans random reads mem random writes sequential reads sequential writes random reads number byte values read written second 
table shows rate tablet server graph shows aggregate rate 
signed available range client soon client finished processing previous range assigned 
dynamic assignment helped mitigate effects performance variations caused processes running client machines 
wrote single string row key 
string generated randomly 
addition strings different row key distinct cross row compression possible 
random write benchmark similar row key hashed modulo immediately writing write load spread roughly uniformly entire row space entire duration benchmark 
sequential read benchmark generated row keys exactly way sequential write benchmark writing row key read string stored row key written earlier invocation sequential write benchmark 
similarly random read benchmark shadowed operation random write benchmark 
scan benchmark similar sequential read benchmark uses support provided bigtable api scanning values row range 
scan reduces number rpcs executed benchmark single rpc fetches large sequence values tablet server 
random reads mem benchmark similar random read benchmark locality group contains benchmark data marked memory reads satisfied tablet server memory requiring gfs read 
just benchmark reduced amount data tablet server gb mb fit comfortably memory available tablet server 
shows views performance benchmarks reading writing byte values bigtable 
table shows number operations second tablet server graph shows aggregate number operations second 
single tablet server performance consider performance just tablet server 
random reads slower operations order magnitude 
random read involves transfer kb block network gfs tablet server single byte value 
tablet server executes approximately reads second translates approximately mb data read gfs 
bandwidth saturate tablet server cpus overheads networking stack parsing bigtable code saturate network links system 
bigtable applications type access pattern reduce block size smaller value typically kb 
random reads memory faster byte read satisfied tablet server local memory fetching large kb block gfs 
random sequential writes perform better random reads tablet server appends incoming writes single commit log uses group commit stream writes efficiently gfs 
significant difference performance random writes sequential writes cases writes tablet server recorded commit log 
sequential reads perform better random reads kb block fetched gfs stored block cache serve read requests 
scans faster tablet server return large number values response single client rpc rpc overhead amortized large number values 
scaling aggregate throughput increases dramatically factor increase number tablet servers system 
example usenix association osdi th usenix symposium operating systems design implementation tablet servers clusters 



table distribution number tablet servers bigtable clusters 
performance random reads memory increases factor number tablet server increases factor 
behavior occurs bottleneck performance benchmark individual tablet server cpu 
performance increase linearly 
benchmarks significant drop server throughput going tablet servers 
drop caused imbalance load multiple server configurations due processes contending cpu network 
load balancing algorithm attempts deal imbalance perfect job main reasons rebalancing throttled reduce number tablet movements tablet unavailable short time typically second moved load generated benchmarks shifts benchmark progresses 
random read benchmark shows worst scaling increase aggregate throughput factor fold increase number servers 
behavior occurs explained transfer large kb block network byte read 
transfer saturates various shared gigabit links network result server throughput drops significantly increase number machines 
real applications august non test bigtable clusters running various google machine clusters combined total tablet servers 
table shows rough distribution tablet servers cluster 
clusters development purposes idle significant periods 
group busy clusters total tablet servers saw aggregate volume requests second incoming rpc traffic mb outgoing rpc traffic gb table provides data tables currently 
tables store data served users store data batch processing tables range widely total size average cell size percentage data served memory complexity table schema 
rest section briefly describe product teams bigtable 
google analytics google analytics analytics google com service helps webmasters analyze traffic patterns web sites 
provides aggregate statistics number unique visitors day page views url day site tracking reports percentage users purchase earlier viewed specific page 
enable service webmasters embed small javascript program web pages 
program invoked page visited 
records various information request google analytics user identifier information page fetched 
google analytics summarizes data available webmasters 
briefly describe tables google analytics 
raw click table tb maintains row user session 
row name tuple containing website name time session created 
schema ensures sessions visit web site contiguous sorted chronologically 
table compresses original size 
summary table tb contains various predefined summaries website 
table generated raw click table periodically scheduled jobs 
job extracts session data raw click table 
system throughput limited throughput gfs 
table compresses original size 
google earth google operates collection services provide users access high resolution satellite imagery world surface web google maps interface maps google com google earth earth google com custom client software 
products allow users navigate world surface pan view annotate satellite imagery different levels resolution 
system uses table preprocess data different set tables serving client data 
preprocessing pipeline uses table store raw imagery 
preprocessing imagery cleaned consolidated final serving data 
table contains approximately terabytes data served disk 
images efficiently compressed bigtable compression disabled 
osdi th usenix symposium operating systems design implementation usenix association project table size compression cells column locality tb ratio billions families groups memory sensitive 
crawl crawl google analytics google analytics google base google earth google earth orkut personalized search table characteristics tables production 
table size measured compression cells indicate approximate sizes 
compression ratio tables compression disabled 
row imagery table corresponds single geographic segment 
rows named ensure adjacent geographic segments stored near 
table contains column family keep track sources data segment 
column family large number columns essentially raw data image 
segment built images column family sparse 
preprocessing pipeline relies heavily bigtable transform data 
system processes mb sec data tablet server jobs 
serving system uses table index data stored gfs 
table relatively small gb serve tens thousands queries second low latency 
result table hosted hundreds tablet servers contains inmemory column families 
personalized search personalized search www google com psearch opt service records user queries clicks variety google properties web search images news 
users browse search histories revisit old queries clicks ask personalized search results historical google usage patterns 
personalized search stores user data bigtable 
user unique userid assigned row named userid 
user actions stored table 
separate column family reserved type action example column family stores web queries 
data element uses bigtable timestamp time corresponding user action occurred 
personalized search generates user profiles bigtable 
user profiles personalize live search results 
personalized search data replicated bigtable clusters increase availability reduce latency due distance clients 
personalized search team originally built client side replication mechanism top bigtable ensured eventual consistency replicas 
current system uses replication subsystem built servers 
design personalized search storage system allows groups add new user information columns system google properties need store user configuration options settings 
sharing table groups resulted unusually large number column families 
help support sharing added simple quota mechanism bigtable limit storage consumption particular client shared tables mechanism provides isolation various product groups system user information storage 
lessons process designing implementing maintaining supporting bigtable gained useful experience learned interesting lessons 
lesson learned large distributed systems vulnerable types failures just standard network partitions fail failures assumed distributed protocols 
example seen problems due causes memory network corruption large clock skew hung machines extended asymmetric network partitions bugs systems chubby example overflow gfs quotas planned unplanned hardware maintenance 
gained experience problems addressed changing various protocols 
example added checksumming rpc mechanism 
handled usenix association osdi th usenix symposium operating systems design implementation problems removing assumptions part system part 
example stopped assuming chubby operation return fixed set errors 
lesson learned important delay adding new features clear new features 
example initially planned support general purpose transactions api 
immediate implement 
real applications running bigtable able examine actual needs discovered applications require single row transactions 
people requested distributed transactions important maintaining secondary indices plan add specialized mechanism satisfy need 
new mechanism general distributed transactions efficient especially updates span hundreds rows interact better scheme optimistic cross data center replication 
practical lesson learned supporting bigtable importance proper system level monitoring monitoring bigtable client processes bigtable 
example extended rpc system sample rpcs keeps detailed trace important actions done behalf rpc 
feature allowed detect fix problems lock contention tablet data structures slow writes gfs committing bigtable mutations stuck accesses metadata table metadata tablets unavailable 
example useful monitoring bigtable cluster registered chubby 
allows track clusters discover big see versions software running traffic receiving problems unexpectedly large latencies 
important lesson learned value simple designs 
size system lines non test code fact code evolves time unexpected ways code design clarity immense help code maintenance debugging 
example tablet server membership protocol 
protocol simple master periodically issued leases tablet servers tablet servers killed lease expired 
unfortunately protocol reduced availability significantly presence network problems sensitive master recovery time 
redesigned protocol times protocol performed 
resulting protocol complex depended behavior chubby features seldom exercised applications 
discovered spending inordinate amount time debugging obscure corner cases bigtable code chubby code 
eventually protocol moved newer simpler protocol depends solely widely chubby features 
related project components overlap ways chubby gfs bigtable provides distributed agreement locking distributed chunk storage distributed tree storage 
case overlap appears component targeted somewhat lower level corresponding google service 
project goal provide infrastructure building higher level services file systems databases goal bigtable directly support client applications wish store data 
projects tackled problem providing distributed storage higher level services wide area networks internet scale includes distributed hash tables began projects chord tapestry pastry 
systems address concerns arise bigtable highly variable bandwidth untrusted participants frequent reconfiguration decentralized control byzantine fault tolerance bigtable goals 
terms distributed data storage model provide application developers believe key value pair model provided distributed trees distributed hash tables limiting 
key value pairs useful building block building block provides developers 
model chose richer simple key value pairs supports sparse semi structured data 
simple lends efficient flat file representation transparent locality groups allow users tune important behaviors system 
database vendors developed parallel databases store large volumes data 
oracle real application cluster database uses shared disks store data bigtable uses gfs distributed lock manager bigtable uses chubby 
ibm db parallel edition shared architecture similar bigtable 
db server responsible subset rows table stores local relational database 
products provide complete relational model transactions 
osdi th usenix symposium operating systems design implementation usenix association bigtable locality groups realize similar compression disk read performance benefits observed systems organize data disk column row storage including store commercial products sybase iq kdb storage layer monetdb 
system vertical horizontal data flat files achieves data compression ratios database 
locality groups support level optimizations described ailamaki 
manner bigtable uses store updates tablets analogous way log structured merge tree stores updates index data 
systems sorted data buffered memory written disk reads merge data memory disk 
store bigtable share characteristics systems shared architecture different data structures writes storing long lived data mechanism moving data form 
systems differ significantly api store behaves relational database bigtable provides lower level read write interface designed support thousands operations second server 
store read optimized relational dbms bigtable provides performance read intensive write intensive applications 
bigtable load balancer solve kinds load memory balancing problems faced shared databases 
problem somewhat simpler consider possibility multiple copies data possibly alternate forms due views indices user tell data belongs memory data stay disk trying determine dynamically complex queries execute optimize 
described bigtable distributed system storing structured data google 
bigtable clusters production april spent roughly person years design implementation date 
august projects bigtable 
users performance high availability provided bigtable implementation scale capacity clusters simply adding machines system resource demands change time 
unusual interface bigtable interesting question difficult users adapt 
new users uncertain best bigtable interface particularly accustomed relational databases support general purpose transactions 
fact google products successfully bigtable demonstrates design works practice 
process implementing additional bigtable features support secondary indices infrastructure building cross data center replicated multiple master replicas 
begun deploying bigtable service product groups individual groups need maintain clusters 
service clusters scale need deal resource sharing issues bigtable 
significant advantages building storage solution google 
gotten substantial amount flexibility designing data model bigtable 
addition control bigtable implementation google infrastructure bigtable depends means remove bottlenecks inefficiencies arise 
anonymous reviewers david nagle shepherd brad calder feedback 
bigtable system benefited greatly feedback users google 
addition people contributions bigtable dan sameer chen bill mike epstein goguen robert jeremy josh hyman alex joanna kulik alberto lerner sherry mike maloney eduardo pinheiro kathy frank yellin arthur 
abadi madden ferreira integrating compression execution database systems 
proc 
sigmod 
ailamaki dewitt hill sk weaving relations cache performance 
vldb journal pp 

banga druschel mogul resource containers new facility resource management server systems 
proc 
rd osdi feb pp 

baru goyal hsiao padmanabhan copeland usenix association osdi th usenix symposium operating systems design implementation wilson db parallel edition 
ibm systems journal 
bowman chun culler karlin peterson roscoe operating system support planetary scale network services 
proc 
st nsdi mar pp 

bentley mcilroy data compression long common strings 
data compression conference pp 

bloom space time trade offs hash coding allowable errors 
cacm 
burrows chubby lock service distributed systems 
proc 
th osdi nov 
chandra paxos live engineering perspective 
proc 
podc 
comer ubiquitous tree 
computing surveys june 
copeland alexander keller data placement bubba 
proc 
sigmod pp 

dean ghemawat simplified data processing large clusters 
proc 
th osdi dec pp 

dewitt katz olken shapiro stonebraker wood implementation techniques main memory database systems 
proc 
sigmod june pp 

dewitt gray parallel database systems high performance database systems 
cacm june 
french size fits database architectures dss 
proc 
sigmod may pp 

gawlick varieties concurrency control ims vs fast path 
database engineering bulletin 
ghemawat gobioff leung 
google file system 
proc 
th acm sosp dec pp 

gray notes database operating systems 
operating systems advanced course vol 
lecture notes computer science 
springer verlag 
greer fourth generation language 
proc 
sigmod pp 

hagmann reimplementing cedar file system logging group commit 
proc 
th sosp dec pp 

hartman ousterhout zebra striped network file system 
proc 
th sosp asheville nc pp 

kx com 
kx com products database php 
product page 
lamport part time parliament 
acm tocs 
maccormick murphy najork thekkath zhou abstractions foundation storage infrastructure 
proc 
th osdi dec pp 

mccarthy recursive functions symbolic expressions computation machine 
cacm apr 
neil cheng gawlick neil log structured merge tree lsm tree 
acta inf 

oracle com 
www oracle com technology products database clustering index html 
product page 
pike dorward quin lan interpreting data parallel analysis 
scientific programming journal 
ratnasamy francis handley karp shenker scalable content addressable network 
proc 
sigcomm aug pp 

rowstron druschel pastry scalable distributed object location routing largescale peer peer systems 
proc 
middleware nov pp 

com 
com products htm 
product page 
stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications 
proc 
sigcomm aug pp 

stonebraker case shared 
database engineering bulletin mar 
stonebraker abadi chen cherniack ferreira lau lin madden neil neil tran zdonik store dbms 
proc 
vldb aug pp 

stonebraker aoki devine litwin olson mariposa new architecture distributed data 
proc 
tenth icde ieee computer society pp 

sybase com 
www sybase com products 
product page 
zhao kubiatowicz joseph tapestry infrastructure fault tolerant wide area location routing 
tech 
rep ucb csd cs division uc berkeley apr 
nes monetdb dbms cpu cache 
ieee data eng 
bull 

osdi th usenix symposium operating systems design implementation usenix association 
