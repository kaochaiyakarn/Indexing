essence strategic programming ralf mmel draft october eelco visser joost visser free university amsterdam netherlands ralf cs vu nl university utrecht netherlands visser cs uu nl sig amsterdam netherlands joost visser software nl 
strategic programming generic programming strategies 
strategy generic data processing action traverse heterogeneous data structures mixing uniform type specific behaviour 
strategic programming gains full control application basic actions notably full traversal control 
combinator style traversal schemes defined actual traversals obtained passing problem specific ingredients parameters suitable schemes 
prime application domain strategic programming program transformation analysis 
provide language independent definition generalises existing incarnations idiom term rewriting functional programming object oriented programming 
keywords generic programming strategic programming traversal strategy language design program transformation program analysis need traversal control various areas programming control application basic data processing actions needed 
data meant sense typed data terms documents asts object structures 
control classified follows order applying basic actions ii side conditions enabling basic actions iii propagation effects caused actions iv traversal compound input data 
control crucial example program transformation order guarantee correctness termination transformations 
control sense ordering ii side conditions iii effects reasonably understood just think structured programming design contract monadic style programming 
challenge arises iv traversal control interaction iii 
established programming paradigms provide little support effectively separate traversal control basic actions 
contend just lack expressiveness lack general design method traversal functionality 
common practice implement traversals options function descends terms representing regular expressions perform simplifications equations 
remainder program encodes descent 
introduce introduce recurse compound regular expressions fig 

tangling traversal control basic computation haskell program rely built normalisation strategy traversal basic computations compromise primary typed representation data 
option common practice rule programming algebraic term rewriting expert systems state machines 
programmer supplies set computation rules relies system built evaluation strategy leftmost innermost applying relevant parts input data 
approach breaks extra precautions required enforce termination restriction scope side conditions involving extra data 
programmers adhering option encode traversal functionality computation rules 
option common practice standard functional programming 
programmer encodes traversals families mutually recursive functions equations 
approach traversal strategy heavily entangled basic actions illustrated fig 

virtually said basic visitor technique standard object oriented programming 
problem approach size entangled traversal code proportional number constructors regardless specific problem 
tangling repeated new piece traversal functionality 
instructive example transformation system goto elimination cobol consists dozens components traversing cobol syntax constructors 
clearly option scale 
option suggests operate untyped representation type basically untyped environment prolog 
approach suffers lack valuable static checks available typed data programming languages 
sophistication option restrict employment untyped representation just generic traversal functionality typed environment 
normally implies data frequently needs converted representation type 
generic functionality untyped 
systematically explain generic programming idiom strategic programming 
idiom dramatically improves options 
strategic programming obtains complete traversal control application basic actions opposed tangling basic actions traversal control case resorting artificial representation type case 
fact control patterns traversal heterogeneous data structures say traversal schemes programmer definable abstractions 
result traversal schemes problem specific ingredients reused modules 
previous strategic programming different paradigms term rewriting functional programming objectoriented programming :10.1.1.35.1581
knowledge material assumed 
generalise incarnations 
sec 
explain strategic method strategic expressiveness needed 
sec 
characterise strategies principle notion underlying strategic programming 
sec 
provide set basic combinators constructing strategies 
sec 
sketch strategic programming library capturing common traversal schemes 
sec 
review existing incarnations strategic programming light generalised characterisation 
sec 
related discussed 
sec 
assessment strategic programming including pointers strategic programming environments applications 
sec 
concluded 
strategic traversal basic actions traversal control key idea underlying strategic programming separation problem specific ingredients traversal functionality basic actions reusable traversal schemes traversal control 
order enable definition traversal schemes incarnation strategic programming provides primitives layer traversal cater generic access immediate components heterogeneous data structures 
assume compound data say terms objects xml elements decomposed immediate components 
layer combinator operate immediate components 
typical layer traversal combinators apply argument strategy immediate components preserving shape datum 
apply argument strategy fit component preserving shape datum 
fitness derived success failure behaviour argument strategy 
reduce similar intermediate results processing immediate components reduced binary operation 
select similar successfully processed immediate component returned result 
anticipating scheme recursion layer traversal completed deep traversal different ways plain recursion 
specific layer combinators derived recursive completions illustrated fig 

names combinators differ sp literature 
terms favoured 
illustrate layer traversal combinators process immediate components process leftmost argument strategy succeeds 
shaded vs black nodes represent failure vs success processing 
illustrate recursive completions layer combinators 
upper completes full top sal short 
lower completes single hit bottom traversal short 
fig 

strategic traversal layer combinators expressiveness complemented method strategic programming idiom encompasses expressiveness method designing implementing traversal functionality 
strategic expressiveness basically strategies class citizens recursive traversal schemes composed kinds ways primitive layer traversal combinators 
expressiveness hard easy achieve depending targeted programming paradigm required strength typing convenience programmer 
strategic method summarised steps implementation piece strategic traversal functionality 
identification reusable traversal scheme 
definition problem specific ingredients 
synthesis traversal parameter passing 
normally reusable traversal schemes completely generic actions anticipated parameters 
problem specific ingredients traversal type specific actions generic actions type specific branches 
actions meant describe data interesting types processed encountered course traversal 
strategic method general way difficult 
method decomposition simply overlooked 
variation points traversal strategic method enables encourages programmer reflect variation points traversal control piece traversal functionality context 
separation basic actions traversal control heart strategic programming easy alter design traversal 
variation points traversal control transformation vs query top vs bottom traversal depth vs breadth traversal left right traversal vice versa single vs nested cascaded traversal local choice vs cut vs full backtracking optimised variations traversal schemes full vs hit vs cut vs path traversal fixpoint failure vs fixpoint equality test traversal accumulation binding type specific vs generic problem specific ingredients 
experienced variation points actual applications strategic programming reported :10.1.1.35.1581
addition general purpose traversal schemes ample opportunity domain specific schemes name analyses language processing 
generic programming idiom addressed variation points 
includes adaptive programming mainly paths object graphs 
strategic example refactor tangled functionality fig adhere strategic style 
phase separate basic rewrite steps simplification 
term rewrite step suggest functionality takes form rewrite rules sense term rewriting 
haskell extracted simplification rules represented follows type constructor order express simplification rule triggers 
need traversal scheme iterates simplification rules tree 
simple example attempt beginner favourites read full top tangled haskell function fig 
reconstructed strategic style passing definition assumes full traversal data processor required succeeds 
adapt rewrite step recover potential failure cf 

definition perfectly modular faithful reconstruction original tangled code shortcoming obvious 
definition enforce exhaustive application applies argument input datum immediate components traversed 
variation eliminates problem performs simplifications traversal scheme 
scheme operates bottom loops fixpoint reached 
example appropriate context opposite situation possible example cause nonterminating strategy due nature rewrite step 
notion strategy strategic programming programming strategies 
depending incarnation strategic programming certain programming paradigm strategies correspond pure functions impure functions objects 
strategies statically typed dynamically typed 
provide notion strategy bound particular programming language paradigm want include unnecessary requirements 
definition strategies data processing actions characteristics genericity strategies generic sense applicable data type say sort class 
specificity generic strategies provide access actual data structures means type specific operations 
composability means express compound conditional iterated strategy application 
traversal strategies enable generic traversal immediate components heterogeneous data structures 
partiality application strategy datum may fail recovery failure feasible 
class strategies class citizens sense named passed arguments contend synergy strategic programming gone characteristics 
notion strategy serves purposes 
firstly corresponds requirement specification strategic programming programming language paradigm 
secondly useful chart assess generic programming approaches 
adaptive programming conception traversal centred layer traversal immediate components paths object structures 
normally adaptive traversal strategies class citizens implementations admit potential :10.1.1.18.9759
note term strategy related terms tactics tacticals contexts generic programming 
usually sort control associated means cater generic access components heterogeneous data structures 
rewriting strategies represented higher order functions lcf theorem prover describe proof tactics tacticals 
programmable evaluation strategies term rewriting 
strategies sense target synthesis parallel functional programs 
term strategy starts traversal strategies la stratego :10.1.1.35.1581
obviously calculi tend overlap extent omnipresent concepts sequential composition choice 
basic strategy combinators strategic programming require combinator style supports class status strategies 
strategy notion significantly concrete prescribing set combinators supported incarnation strategic programming 
fig 
specifies set 
suggest semi formal reading fig 

particular semantic sketch leaves open blend expressiveness offered host paradigm eventual incarnation 
term rewriting setting semantics strategies formally defined special attention static typing paid :10.1.1.35.1581
fact 
term rewriting provides model strategic programming 
actual incarnations strategic programming may include combinators 
identified combinators necessarily primitives specific incarnation defined terms expressiveness 
explain combinators 
standard combinators nullary strategy succeeds datum returns input change 
strategy fails datum indicated output sequence combinator applies argument strategies succession 
left biased combinator attempts application argument strategy 
application fails second argument attempted 
recursion iteration combinator 
assume definition new named combinators involve recursion 
layer traversal definitions combinators formalise intuitions fig 

push argument strategy level input datum process immediate components just leftmost argument strategy succeeds 
dedicated notation differentiate indivisible data compound data 
note preserve shape input datum constructor reappears result 
say kind strategies type preserving perform transformation 
exist similar combinators type unifying type scheme combinators perform query analysis fixed result type regardless input datum type 
illustrate definition recursive traversal schemes terms layer combinators define full top traversal terms recursive definition means applies argument strategy root incoming datum cf 
applies immediate components datum lifting type specific actions fig 
distinguish type specific actions vs generic actions called strategies 
means mediate categories 
obviously generic action applied datum type ado 
application overloaded type specific generic actions accordingly 
notably type specific action applied generic context explicit lifting combinator implicit lifting 
lifting needed basic ingredients strategic program type specific actions eventually need applied components different sorts course traversal 
combinator type dispatch construct new strategy generic default type specific action strategy behaves data input type dispatches combinators identity strategy failure strategy meaning sequential composition left biased choice immediate components immediate component type dispatch identities unit zero skip nested type dispatch 
notation data data constructors data failure type specific actions strategies 
application application big step semantics type handled type datum indivisible data compound data 
fig 

specification guideline set basic strategy combinators incarnation strategic programming needs perform explicit lifting favour implicit lifting thought implicit lifting problematic regarding static checking 
illustrate explicit lifting adding applications strategic haskell snippet sec 
variations generic default 
case feasible 
generic defaults sensible 
example consider recursive descent generic default meant happen type basic action type datum fit 
strategic programming library power small set basic combinators best demonstrated examples 
fig 
shows list combinators defined terms basic ones 
control patterns involve traversal control remaining combinators define different traversal schemes 
fig 

defined strategy combinators non traversal control combinator manipulates success value argument strategy recovers failure necessary 
control pattern useful enforced action succeeds 
incoming datum returned normally fail 
combinator serves fixpoint computation applies argument strategy repeatedly fails 
control pattern useful definition traversal schemes traversal involves exhaustive application actions 
traversal schemes combinators model full top bottom traversal respectively 
apply argument strategy root incoming datum immediate non immediate components 
combinators variations apply argument strategy component succeeds 
combinator attempts application argument strategy components branches stops branch application succeeds 
combinator searches complete path compound datum argument strategy succeeds levels 
combinators implement leftmost inner evaluation strategy second efficient 
combinators take argument strategies form path traversal sense adaptive programming 
combinator searches component successfully processed argument nested inside component second argument succeeds 
combinator searches path argument holds node path eventually second argument holds 
generality cases ruled argument strategies succeed node 
incarnations strategic programming strategic programming idiom just theoretical artifact 
realized programming paradigms applied construction numerous tools 
best worked incarnations term rewriting stratego language functional programming haskell object oriented programming java :10.1.1.35.1581
furthermore strategic programming logic programming prolog context language processing toolbox imperative programming context grammar deployment kit 
incarnations 
want specify general strategic programming 
want compare incarnations higher level abstraction 
obligations start listing obligations incarnation process inventory embarking integration strategies relevant paradigm language analyse existing approaches separate basic actions traversal control paradigm 
assess contribution strategic programming able paradigm 
identify available language specific expressiveness implement strategies 
semantics notion strategy mapped host paradigm 
necessitates identification corresponding abstraction form strategies 
instantiate subsidiary notions type specific action datum component partiality cf 
fig 

mapping implementation guideline set basic strategy combinators recall fig 

hosting programming idioms native host paradigm remain available programmer strategies 
instance object oriented programming strategies blend semantics side effects 
functional strategies value semantics allow monadic effects strict lazy depending host language 
typing strongly typed setting favoured strategic polymorphism poses challenge 
necessitates second order polymorphism goes parametric polymorphism ad hoc polymorphism 
liberal typing stratego terms formed sorted signature strategy combinators subject weaker checks arity checking 
sample incarnation demonstrate incarnation process prolog 
arbitrary example allows compact discussion 
intention exemplify number issues naturally show incarnation 
start inventory 
prolog heavily problems involve traversal nontrivial term formats language prototyping 
traversal functionality typically implemented tangled fashion 
higher order predicates list processing folklore traversal schemes 
separation logic control advocated kowalski seminal algorithm logic control achieved traversal control 
motivated strategies prolog 
fact mapping strategy semantics prolog language straightforward 
indication fig 
implement combinator needed strategic reconstruction function fig 

model type specific actions strategies prolog predicates 
higher order predicates 
quite natural define combinators directly prolog conjunction disjunction 
data flow wired just shared variables literals model multiple clauses predicate cut cf 
faithfully encode left biased choice 
assume implicit lifting approach combinators omitted 
addition higher order facilities prolog incarnation crucially relies univ operator term destruction construction cf map 
univ operator allows implement layer traversal ado heterogeneous list processing 
hand approach precludes typing predicates layer traversal 
functionality merely uses layer traversal combinators typed 
comparison fig 
compare strategic programming paradigms instantiation relevant concepts 
incarnations exhibit different tradeoffs excessive discuss observations 
focus stratego language devoted strategic programming idiom discuss incarnations qualify strategic programming general purpose generic programming 
stratego dsl program transformation design stratego prime issue effectively support development program transformation systems 
stratego viewed domain specific language dsl 
domain specific constructs integrated hygienic symbol generation scoped dynamic rewrite rules foreign language interface 
dsl character reflected specific optimisations designated run time term representation apply goal immediate subterms xs map xs ys ys 
map goal list map 
map xs ys call map xs ys 
recover failure goal try call 
try 
perform full top traversal full td call full td 
encode rewrite step simplifications alt epsilon exp opt exp 
opt plus exp star exp 
perform simplifications traversal simplify full td try fig 

strategic programming prolog allows sharing constant time equality test hidden transportation comments layout 
strategies general purpose languages incarnations functional objectoriented programming paradigms fit strategic programming haskell java 
economic approach strategic constructs 
respective principal form class citizens model strategies functions haskell objects java varying models possible 
strategic programming programmer supplied datatypes classes easily enabled generative tool support 
haskell model strongly typed strategic polymorphism combination second order polymorphism type classes 
model clearly suggests language extension strategic programming original expressiveness captured simple welldefined combinators 
java model allows traversal object structures graphs opposed terms incarnations 
convenient context certain program analyses operate intermediate formats control flow graphs 
java model allows mutable objects traversal 
typing model necessitates casting owing limitations java language 
problem remedied generics java 
non strategic programming strategic programming idiom emerged numerous approaches contain ingredients 
various concepts enable extent separation traversal concept paradigm datum immediate component basic action strategy strategy application strategy combinators type dispatch types term rewriting sorted term functional programming term algebraic datatype subterm subterm rewrite rule term rewriting strategy dedicated operator strategy definitions implicit liberal checks signature partiality built host idioms dsl extensions type specific function strategically polymorphic function function application higher order functions type safe cast rank types constrained monadic effect monadic effects oo programming object structure referenced object class specific visit method generic visitor object visit method invocation visitor classes rtti dynamic binding subtype polymorphism logic programming basically untyped term subterm order predicate term representing goal call imperative programming data structure term api subterm api sense function specific term type term specific strategy type function strategy interpretation ordinary functions implicit cast initially untyped exceptions backtracking graphs side effects meta logical features fig 

overview incarnations paradigm liberal checks term api designated result null side effects control basic actions 
previous analysed related technical context certain programming paradigms :10.1.1.28.4289
restrict related approaches special interest light language independent definition strategic programming 
levels traversal control discussion related centred traversal control 
propose levels measure sophistication traversal control different styles generic programming level entangled traversal level fixed traversal schemes level composable traversal strategies level class strategies layer traversal 
list level borderline level hosts non generic programming 
reserve level implicit traversal sense built normalisation strategy innermost 
recall approach usually degrades level traversal basic computations soon amount traversal control needed 
place related approaches levels 
particular adaptive programming ends level 
level relatives strategic programming idiom 
level generalised folds functional programming provide orthogonal example fixed traversal scheme 
note approach immediately enable generic term traversal define basic computation traversal fold algebra type specific data structure hand 
problem solved idea updatable primitive fold algebras 
provides adaptiveness programming traversal schemes 
similar ideas integrated term rewriting cf 
traversal functions 
visitors object oriented programming programmed way default traversal behaviour customised inheritance 
summarise fixed traversal schemes define traversals customisation function composition nesting 
strategic programming traversal schemes programmable 
level level require capabilities compose generic traversals general way 
traversal strategies adaptive programming correspond descriptions paths object graphs composed predicates anchor nodes nodes intermediate nodes nodes edges 
notion completely generic traversal scheme 
traversal control limited bias paths due absence layer traversal primitives 
functional programming supports traversal data type induction type structure 
polytypic functions gain generic access components compound terms viewing term types sums products 
polytypic functions customised type specific cases 
refinements place polytypic cases 
problem resolved allowing postponed customisation polytypic functions 
approach polytypic functions class citizens 
relate strategic programming general aspect oriented programming aop largely unrelated levels traversal control 
quoted state adaptive programming instance aspect oriented programming 
strategic programming qualifies instance aspect oriented programming similar reasons 
general aop aims separation concerns allowing features cross cut system primary modularisation factored 
sp primary modularisation data structure signature class graph xml schema concern longer entangled data structures traversal behaviour 
compare strategic setup general purpose aspect oriented languages aspectj differences worth mentioning 
aspects language employ name property pointcut designators pinpoint execution flow aspect code activated 
aspects defined applied base functionality unaware aspects 
contrast strategy combinators parameterised building blocks functionality activated composition 
prominent models xml document processing live level 
xslt example explicitly regulate descend components template rule xsl apply templates select comment processing instruction text just recurse children indicating special mode 
general select children switch different modes 
templates la xslt class citizens fixed model regulates collection templates organise traversal document 
assessment strategic programming discuss benefits strategic programming complemented characterisation strategic programming environments brief list typical applications 
benefits strategic programming strategic method enables concise traversal code separation basic actions traversal control reuse basic actions traversal schemes resistance change 
benefits deserve closer look conciseness programming heterogeneous data structures strategic programming radically concise non generic programming 
due generic access specific data structures strategic programmer need repeatedly implement type behaviour conceptually generic 
separation concerns strategy combinators allow implement conceptually separable concerns distinct abstractions entangled single code fragment 
strategies support separation basic actions traversal control ordering applicability conditions effects 
concerns understood reasoned developed tested maintained separately 
reuse strategies enable reuse levels 
application single concern problem specific basic action needs implemented 
applications strategies reused capture generic behaviour sense general purpose traversal schemes domain specific generic algorithms 
adaptiveness strategies concern implemented explicit types data constructors relevant 
result changes data structures say signatures algebraic data type definitions class hierarchies unduly affect implementation concern 
isolation changes diminishes resistance change software systems maintainable 
benefits simple language independent characterisation firm foundations strategic programming suggest notion strategy forms piece reusable language design knowledge 
note adaptive programming place 
call adaptiveness presumably called structure ap 
turns considered harmful ap 
problem traversal strategies go surprising paths especially object model changes 
call robustness issue 
complement demeter declarative strategies domain specific language dsl proposed express recursive traversals lower explicit level 
traversal dsl sacrifices compactness adaptiveness order gain control propagation computation results prevent unexpected traversal paths due specification traversals 
specification problem differently perceived sp context 
application context programming transformation analysis mainly expect genericity sense conciseness strategic programming adaptiveness ap sense reduced extent 
strategic programmer usually aware language syntax dealing surprises expected 
languages change dramatically ordinary object models 
se rule unexpected hits traversal situation different compared arbitrary object models 
strategic programming environments strategic programming general purpose generic programming implementation traversal functionality recurring theme 
complex traversed data structures numbers types constructors components traversal functionality needed substantial benefits expect strategic application development 
motivates typical application domains strategic programming language processing document processing program transformation analysis 
domains crucial plain strategic programming embedded programming environment architectural facilities see fig 
converters needed derive datatypes native strategic programming incarnation external definitions data structures context free grammars sdf grammars case xml schemas xml dtds :10.1.1.28.6239
interfaces needed integrate external components parsing unparsing external representations sources documents storage formats aterm format case 
strategic components interact external components application efficient interchange format aterms 
application development takes advantage library provides reusable traversal schemes functionality xml processing aterm interchange themes language processing rewriting functional object oriented incarnations supported corresponding programming environments stratego xt 
software bundles documentation related research papers freely available locations www stratego language org www cs vu nl www org library themes import application strategic components import strategic datatypes components conversion parsing unparsing repository fig 

sketch strategic programming environment sdf grammars xml schemas sources documents aterms applications strategic programming applied range applications discussed :10.1.1.35.1581
briefly explain typical applications transformation system domain specific optimisation programs domain numeric programming described 
implemented stratego making xt bundle tools program transformation includes packages parsing pretty printing 
program refactoring java chosen running example illustrate generic functional programming 
refactoring theme generalised sense language parametric framework specified 
higher strong typing provided haskell incarnation proved valuable framework development 
program understanding tool described reconstructs cobol control flow 
architecture implementation 
reconstructed strategic programming language independent manner clearly identify essence contribution benefits 
strategic programming successfully number paradigms 
applications idiom cover wide range clearly illustrate benefits strategic method 

indications issue optimisation deserves typed optimisation traversals techniques fusion principles traversal strategies addressed extent 
strategic programming elaborated cover generic datatype changing transformations needed example context xml format evolution 
notion type indexed datatypes useful context :10.1.1.1.6342
interaction strategies constraint programming needs investigated 
precise relation strategic programming attribute grammars analysed 
precision types strongly typed setting improved success failure behaviour strategies regarding differentiated types traversal scheme parameters express different kinds control 
idiom strategic programming taken shape years research academic institutions involved people authors 
bas inventor layer traversal primitives 
benaissa andrew tolmach contributed stratego design 
tobias kuipers contributed design 
xt bundle relies important contributions de jonge 
due otto martin arne de bruijn eelco patricia johann dick kieburtz applications stratego xt contributions 
dave clarke jan heering jan karl lieberherr discussions subject feedback initial version 

haveraaen visser 
framework transformation programs 
technical report uu cs institute information computing sciences utrecht university 

kirchner kirchner 
controlling rewriting rewriting 
meseguer 

brand klint 
term rewriting traversal functions 
technical report sen cwi july 

brand sellink verhoef 
generation components software renovation factories context free grammars 
baxter quilici verhoef editors proceedings fourth working conference reverse engineering pages 

brand jong klint olivier 
efficient annotated terms 
software practice experience mar 

visser 
rewriting strategies instruction selection 
tison editor rewriting techniques applications rta volume lncs pages copenhagen denmark july 
springer verlag 

clarke generic haskell specifically 
gibbons jeuring editors proc 
ifip tc working conference generic programming 
kluwer academic publishers 
appear 

clavel eker lincoln meseguer 
principles maude 
meseguer 

deursen visser 
building program understanding tools visitor combinators 
proceedings th int 
workshop program comprehension iwpc 
ieee computer society 

visser 
class rules generic traversal 
technical report universiteit utrecht uu cs 

filman editors 
special issue aspect oriented programming 
communications acm oct 

gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 

heering hendriks klint rekers 
syntax definition formalism sdf manual 
sigplan notices 

hinze jeuring type indexed data types 
proc 
sixth international conference mathematics program construction mpc volume lncs pages 
springer verlag 

jeuring jansson 
polytypic programming 
launchbury meijer sheard editors nd int 
school advanced functional programming wa usa aug volume lncs pages 
springer verlag berlin 

johann visser 
warm fusion stratego case study generation program transformation systems 
annals mathematics artificial intelligence 

johann visser 
fusing logic control local transformations example optimization 
gramlich lucas editors electronic notes theoretical computer science volume 
elsevier science publishers 

jonge visser visser 
xt bundle program transformation tools 
van den brand parigot editors entcs volume 
elsevier science publishers 

kiczales hilsdale hugunin kersten palm griswold 
overview aspectj 
ecoop pages 

kiczales lamping aspect oriented programming 
proceedings ecoop number lncs 
springer verlag 

mmel verhoef 
grammar deployment kit 
van den brand mmel editors second workshop language descriptions tools applications grenoble france volume entcs 
elsevier science publishers apr 

kowalski 
algorithm logic control 
communications acm july 

mmel 
sketch polymorphic symphony 
gramlich lucas editors proc 
international workshop reduction strategies rewriting programming wrs entcs 
elsevier science publishers july 
appear 

mmel 
generic refactoring 
proc 
third acm sigplan workshop rule programming rule pittsburgh usa oct 
acm press 
pages 

mmel 
typed generic traversal term rewriting strategies 
pages appear journal logic algebraic programming published cwi technical report sen august 

mmel 
format evolution 
proc 
th international conference reverse engineering information systems volume books pages 


mmel 
language processing 
brand parigot editors proc 
volume entcs 
elsevier science apr 

mmel visser 
design patterns functional strategic programming 
proc 
third acm sigplan workshop rule programming rule pittsburgh usa oct 
acm press 
pages 

mmel visser 
strategic polymorphism requires just combinators 
ifl implementation functional languages sept 
pages 

mmel visser 
typed combinators generic traversal 
krishnamurthi ramakrishnan editors proc 
padl portland usa volume lncs 
springer verlag jan 

mmel visser 
dealing large bananas 
jeuring editor proc 
technical report universiteit utrecht pages july 

lieberherr 
adaptive object oriented software demeter method propagation patterns 
pws publishing boston 

lieberherr 
connections demeter adaptive programming aspect oriented programming 
retrieved fromhttp www ccs neu edu home lieber 

visser 
specification rewriting strategies 
sellink editor nd international workshop theory practice algebraic specifications asf sdf electronic workshops computing berlin november 
springer verlag 

meijer fokkinga paterson 
functional programming bananas lenses envelopes barbed wire 
proc 
fpca volume lncs 
springer verlag 

meseguer editor 
proceedings st international workshop rewriting logic applications asilomar pacific grove ca usa volume entcs sept 

orleans lieberherr 
dj dynamic adaptive programming java 
reflection meta level architectures separation crosscutting concerns kyoto japan september 
springer verlag 
pages 

wand 
language specifying recursive traversals object structures 
acm sigplan conference object oriented programming systems languages applications oopsla pages 

paulson 
higher order implementation rewriting 
science computer programming aug 

trinder hammond 
loidl peyton jones 
algorithm strategy parallelism 
journal functional programming jan 

visser 
language independent traversals program transformation 
jeuring editor workshop generic programming ponte de lima portugal july 
technical report uu cs universiteit utrecht 

visser 
scoped dynamic rewrite rules 
van den brand verma editors electronic notes theoretical computer science volume 
elsevier science publishers 

visser 
survey strategies program transformation systems 
gramlich lucas editors electronic notes theoretical computer science volume 
elsevier science publishers 

visser 
visitor combination traversal control 
acm sigplan notices oopsla conference proceedings nov 

visser 
benaissa tolmach 
building program optimizers rewriting strategies 
proceedings third acm sigplan international conference functional programming icfp pages 
acm press september 


configurable transformations high quality automatic program improvement 
case study 
master thesis utrecht university netherlands february 

xsl transformations xslt version nov 
www org tr xslt 
