re ections standard ml david macqueen bell laboratories murray hill nj 
standard ml number new programming languages developed seen suitable vehicles serious systems applications programming 
ers excellent ratio expressiveness language complexity provides competitive ciency 
type module system standard ml manages combine safety security robustness exibility dynamically typed languages lisp 
developed scienti foundation major language 
review strengths weaknesses standard ml describe learned design implementation language 
goal programming language design maximize expressiveness minimizing conceptual complexity constraint language cient implementation 
language suitable large scale serious programming implementing software users robust maintainable provide security facilities organizing large programs 
desiderata guided design standard ml 
presents personal views language design lessons learned design implementation standard ml 
eld programming language design matures essential scienti approach come play 
history ml provides example theoretical insights practical programming requirements successfully synthesized 
rst section summarizes strengths standard ml 
proceed remarks process language design general design standard ml particular 
comes review particular lessons learned experience implementing standard ml 
section illustrates continuing language research activity associated ml describing number experimental language extensions 
orts seen exploring options generation ml languages 
discuss relation ml object oriented programming nish projections development standard ml successors 
review history ml topic covered appendix de nition standard ml robin milner turing award interview 
assume familiarity ml refer reader john volume overview language larry paulson book extensive 
shorter name ml may refer standard ml particular generic family ml languages context 
standard ml works enumeration major strengths standard ml view user language 
surprisingly points parallel mentioned appel critique 
high level programming model 
high level model programming cient reliable automating suppressing low level details memory management data 
standard ml programming model functional programming paradigm derives lambda calculus 
safety 
ml type system memory management system exception facilities combine guarantee buggy ml programs crash fail due corruption computational state inappropriate manipulation data 
possible program fail ml exception raised handled 
interactive system returns top level stand program terminates program abnormally 
course possible ml program produce wrong result bug fail terminate 
security robustness 
static type checking detects errors compile time 
error detection enhanced pattern matching helps ensure coverage cases compiler statically detect report incomplete matches exception mechanism provides type secure disciplined way deal potential runtime exceptions 
result unexpected runtime errors largely avoided dealt appropriately 
expressiveness conciseness 
ability treat functions rst class values higher order functions express wide range control structures pattern matching concise analysis data availability imperative constructs provide great expressive power simple uniform conceptual framework 
combination state higher order functions powerful cause di culties specifying reasoning programs object oriented programming 
flexible strong typing 
ml type system simple uniform exible sound 
exibility parametric polymorphism 
new types de ned match precisely requirements problem data abstraction hiding data representations supported 
automatic inference general type schemes streamlines interactive programming 
type checking provides security detecting statically large fraction common mistakes 
valuable aspect type system provides language designing expressing data representations program interfaces automatically enforces proper type checking 
type constructor applied types restriction types treated equally 
user de ned types treated primitive types 
modularity 
ml module system organic extension underlying polymorphic type system 
provides separation interface speci cation implementation supports abstraction parameterization 
facilities ective structuring large programs de ning generic reusable software components 
ciency 
highly optimizing compilers ml applications produce code speed competitive corresponding programs written lower level languages asc space ciency tends signi cantly worse low level languages cost automatic memory management uniform simple type system intensive memory advancing compiler technology reducing overhead 
multiple modes usage 
original incarnation metalanguage lcf system ml played itwas program proof tactics tacticals automate theorem proving command language interactive lcf system 
systems hol ml serves underlying implementation language system lcf implemented lisp 
roles separated particular possible ml compiler traditional batch style generate binary object les linked create stand application 
stand applications incorporate runtime system independent ofthe compiler interactive system 
ml attributes support modes usage type inference simpli es interactive command language characteristics mentioned suit role symbolic metalanguage module type systems support large scale systems implementation 
comments language design methodology principled scienti language design guided parallel orts insights coming perspectives semantics implementation pragmatics language practice 
ideally design language consist iterations involving development semantics experimental implementation application experiments 
iteration feedback perspectives adjust design decisions previous iteration 
writing formal semantic de nition clearly provides strong discipline encourages simplicity clarity language design 
ideally development formal de nition backed investigation metatheory language type soundness theorems principal typing theorems formally specify reason programs language language 
unfortunately state program logics currently weak designing language tractable logic impractically severe constraint advocates pure functional logic languages may disagree point languages limited practical impact far 
developing prototype implementation language forces consider cost language features interactions terms implementation complexity favors simpli cation 
implementation perspective designers consider consequences decisions execution speed 
new language design may require new compilation technology risky progress hindered new languages overly constrained known compilation techniques 
language obviously central consideration design novel features included easy fully understand utility 
excellent way gaining experience new language designed implement language 
works general purpose languages may impractical special purpose languages suitable language implementations implementing awk awk 
pragmatic perspective tends lead designers add features language enhance perceived expressive power convenience danger excessive complexity especially interaction di erent features carefully considered 
hardest tasks language design judging left language feature constituency 
di cult critical problem judge expressiveness complexity tradeo feature 
especially tricky particular feature programming may involve high mental overhead programmers feature semantic description relatively straightforward rst class continuations 
case standard ml robin milner leadership guaranteed semantic perspective emphasized especially earlier stages language design 
case standard ml new member existing family languages lcf ml cardelli ml hope meant body pragmatic implementation experience draw 
design standard ml bene ted iterations feed back early implementation usage experience number minor design problems surfaced fairly early implementation orts relevant parts design frozen syntactic ambiguity nested matches 
nal piece advice concrete syntax design 
quite di cult carry language design concrete syntax testing implementation pragmatic aspects design progress remembered syntax primary structure language endless time ort wasted premature arguments concrete syntax 
course design simple provisional version concrete syntax 
language design entered nal stages re nement syntax stabilized serious concrete syntax design ensuring concrete syntax faithfully represent semantics language 
provisional concrete syntax discarded expert grammars parsing proven taste assigned task designing nal syntax 
architecture blend engineering best left committee 
syntax design beware temptation language palatable potential users having masquerade inappropriate syntax familiar language giving functional language fortran syntax 
hand quite appropriate borrow linguistic tradition language design pascal family languages similar pascal style syntax properly re ecting semantic similarities 
experience sml implementations standard ml years steadily improving capabilities 
de nition standard published years ago followed commentary standard ml substantial body research publications relating standard ml type module systems implementation optimization techniques 
accumulated considerable application experience including implementation compilers interpreters large number systems designed support theorem proving veri cation speci cation software hardware hol isabelle lego alf chalmers jape oxford lambda prolog cmu bell labs concurrency workbench 
implement large computer aided design system hardware case speci cation tools design ml meta software 
standard ml widely teaching programming various levels tool teaching research programming language theory applied logic formal methods 
accumulated experience generally validated design language 
type module system provide extremely valuable organizational discipline safety net systems implemented ml particularly easy modify maintain 
language supports implementation large systems facilities support separate compilation evolving 
experience suggests standard ml right size 
language simple possible simpler paraphrase einstein 
way judging see typical programmer conversant language uses facilities typical nontrivial application 
standard ml meets test 
see number ways language simpli ed loss expressiveness 
ml prototyping language 
general fallacious impression dynamically typed languages lisp appropriate prototyping easy modify lisp programs 
reason impression false serious prototypes large complex programs changes representation data part prototype long errorprone labor intensive process trace consequences changes dynamically typed language 
contrast experience standard ml new jersey compiler lines ml code radical changes fundamental data representations interfaces ect dozens modules compiler working day 
personal experience kinds changes correspondingly large lisp program lead weeks debugging careful disciplined style programming 
syntax contentious subject subjective aesthetic aspect syntax design 
concrete syntax standard ml received share criticism shall add claim reasonably successful proposed substantially better style syntax 
rationale standard ml syntax ml language lambda calculus conventional lambda calculus notation large scale programming substantial amount syntactic sugar required 
landin proposed sugared version lambda calculus called iswim formed basis original lcf ml dialect 
iswim syntax fairly light weight suited small scale interactive programming 
felt large scale programming readability important relative convenience writing code standard ml somewhat heavier syntax partly inspired algol pascal syntactic tradition 
moved language underlying lambda calculus compromise lambda calculus algol style notation workable entirely comfortable 
syntax uenced local pop tradition edinburgh turn iswim cpl linguistic heritage 
syntax reasonably light indicated roughly comparing total number keywords special signs ml corresponding numbers languages standard ml scheme haskell pascal modula ada common lisp features standard ml syntax viewed mistakes 
list problems discussed greater length 
parsing nested matches nested case expressions fn expressions exception handlers ambiguous 
ambiguity similar nested statement ambiguity common source errors especially novice programmers experienced sml programmers learn nested matches 
easily xed adding terminator probably expressions 
handle keyword attach exception handler expression di cult determine textual scope handler large expression 
corrected having initial keyword say try modula delineating scope handler yielding expression form try expression handle match 
danger confusing variable constructor identi ers 
common form bug constructor name variable pattern match silently matching 
obvious solution lexically distinguish constructors done haskell 
solution force discard dubious capability implicitly coerce constructors values 
lexically scoped directives ill advised legacy pop 
complicate parsing module system directives exported structures speci ed signatures idea add feature 
solution assign single precedence members lexically distinguished set symbols xed set distinguished operators special precedences 
syntax parameter patterns clausal function declarations complex necessary simpli ed 
correcting problems eliminate substantive complaints syntax standard ml leaving look feel language essentially unchanged 
fairly common question programmers coming ml lisp background ml support form macros 
caml dialect ml provided form macros done founded objections macros especially statically typed language 
macros admission syntax language incomplete inadequate principled disciplined approach enriching language semantics logic 
semantics macros normally de ned terms expansion base syntax static analysis checking insensitive existence macros original program generate messages type error messages di cult relate code written 
number features standard ml cause di culties language elegant 
solutions problems subject continuing research 
equality types add complexity especially interaction modules appear justi ed utility 
treatment equality properties equality kinds generalized sophisticated probably better simplify language eliminating 
see comments problems equality types cause library design 
overloading inconvenient interactions polymorphism noted dilute type information available di erent ways 
problem overloading treated ad hoc manner standard ml 
special identi ers mainly arithmetic relational operators overloaded conventional manner base environment basis called de nition standard ml user de ned overloading supported 
hand idea permit user de ned overloading standard ml new jersey derived syntax forms expressions essentially macros accurately type error messages 
complexities interaction overloading module system 
principle violated current treatment base environment special privileged constructed declaration facilities available standard ml programmer incorporation certain operators int 
language simpli ed cost slight inconvenience eliminating overloading 
open declaration various drawbacks 
complicates certain kinds static analysis ml programs determining dependency graph set modules knowing priori order modules de ned task relevant utility provided separate compilation system 
open declaration adds considerable complexity implementation module system especially versions supporting higher order modules 
tempting eliminate open declaration language currently way import datatype component module 
interaction polymorphism imperative features handled elegant device weak imperative type variables see section 
main problem treatment weak types tend propagate excessively infect types functions principle normal polymorphic types 
re nement checking algorithm may reduce inconvenient ect cost making type checking mysterious ought 
truly satisfactory solution problem may possible framework current standard ml type system design successor language useful theoretical progress 
de nition standard ml speci es initial basis standard environment initial basis parsimonious signi cantly extended implementations 
unfortunately extensions coordinated di erent ml implementations incompatible standard environments standard ml new jersey poly ml ml provide substring function di erent 
library devised dave berry edinburgh provide commonality implementations ml community faces di cult process convergence common definition standard environment basis portability ml compilers 
designing standard environment time consuming di cult job depends core language design programming experience 
retrospect failure provide adequate standard environment major problem de nition 
design aws fairly minor materially degrade utility language 
main limitations standard ml automatic memory management uniform high level view data automatic memory management polymorphism entail 
memory management system involves space overheads multiple heap spaces copy garbage collector data representation cient level language programmer detailed control data representations 
garbage collectors involve latency pauses computation inconvenient applications may unacceptable applications real time constraints 
ml shares limitations garbage collected languages lisp scheme compiler technology improves ml type system provide better opportunities optimizing data representations 
fact ml values immutable exploited various ways memory management 
regard latency low latency concurrent garbage collectors implemented showing problem overcome 
experiments extensions de nition standard ml provides solid stable foundation language number signi cant experimental extensions ml studied designed implemented 
testament exibility basic language extensions implemented essentially library modules adding new syntactic constructs language 
library modules may require magic form new implementation primitives magic externally visible 
hand extensions rst class continuations concurrency features built profound ect semantics language require considerable formal de nition 
discussion biased standard ml new jersey basis experimentation open nature 
control constructs basic control constructs ml consist function application recursion case analysis exception transmission 
powerful control construct extensively studied exploited context call value functional languages rst class continuations 
turned possible de ne typed version rst class continuations cient dynamic representation continuations available sml new jersey compiler continuation passing style cps representation ml code 
visible change required support rst class continuations addition type constructor cont associated functions callcc call current continuation capturing continuation throw invoking continuation 
class continuations powerful dangerous construct 
represent functional version go statement imperative languages misused produce higher order versions spaghetti code extremely di cult understand 
main bene wizard tool implementing higher level disciplined control constructs 
case standard ml new jersey implement concurrency libraries notably concurrent ml described volume ml threads 
libraries depend signal handling module implementation preemptive scheduling interface signal handling module ectively expressed terms continuations 
concurrency libraries support multiple threads running single address space single multiple processors 
distributed computing standard ml pursued cornell facile group ecrc edinburgh represents step dealing di cult problems asynchronous communication transmission ml values address spaces multicomputer 
modules basic module system described de nition strictly rst order 
form functors abstracting structure expression respect structures depended respect functors 
long term goal design provide truly higher order module system structures functors treated similarly 
semantic problems involved generalization largely solved higherorder version module system implemented part current release standard ml new jersey 
opportunities exploit higher order functors arise frequently new facilities increase symmetry expressive power module system 
implementation higher order functors required new techniques representations developed opened additional possibilities exploit generalized mechanisms subject ongoing research 
aiming new level polymorphism higher order module system allowing parameterize respect unknown signature 
extension module system investigation support type abbreviations signatures 
ml programmers noted usefulness abbreviations interaction type abbreviations sharing constraints problematical 
dealing sharing constraints presence type abbreviations complete generality involves solving special form second order uni cation problem 
general problem second order undecidable may case specialized form undecidable 
clear cases practical interest uni cation problem trivial su ce restrict problem limited form second order uni cation tractable 
metaprogramming separate compilation concept exploring turning compiler inside 
mean externalizing various internal compiler representations processes available ml applications 
facilities externalized far include symbols environments static dynamic syntax trees object code set compilation functions parsing elaborating translating lambda intermediate representation code generation execution 
interfaces support separate compilation interactive system applications need manipulate execute ml code 
currently missing element externalized interfaces type dynamic expect add versions 
type dynamic applications metaprogramming distributed programming supporting persistence data 
amusing possibility metaprogramming facilities unhappy current concrete syntax easily de ne syntax provide alternate parser support 
ml interfaces static environments rich highly structured 
generative declarations resulting sharing relations separate compilation ml fairly sophisticated 
library developed gene rollins cmu able determine dependencies set ml source les minimize recompilation changes 
system implemented metaprogramming interfaces particularly environments compilation interface available compiler 
miscellaneous experiments features investigated experimentally implemented patterns vector literals patterns 
patterns allow alternative patterns single match fn nil nil vector literals patterns easier construct destruct vectors putting par lists 
elaborate extension pattern matching investigated aitken reppy 
simplest level extension supports symbolic names constants place constants patterns 
supports kind pattern macro de ned structures speci ed signatures abstracted functors 
proposal implemented semantics fully developed 
couple intriguing potentially useful variations datatype de nitions suggested 
notion existential datatypes described idea extensible datatypes generalizes existing type exn 
laufer odersky implemented version existential datatypes implementing extensible datatypes mainly matter adding appropriate declaration syntax 
idea extensible datatype declares datatype separately data constructors unlimited number constructors introduced constructor declarations 
analogous way exception constructors declared 
example datatype data constructors declared separately con int int con real real datatype foo con foo foo fun int 
real 
foo case exception constructors constructors scope may appear pattern match type 
extensible datatypes unboundedly extensible tagged unions type dynamic nite tagged union types tags 
extensible datatypes perform functions type dynamic 
ml object oriented programming common question days ml object oriented language object oriented programming ml 
usual answer depends means object oriented 
higher order language state ml function closure rudimentary form object 
model sophisticated objects records functions sharing common elements closure environments corresponding instance variables 
useful analogy viewing structures objects functors classes 
object oriented programming means data abstraction information hiding argued ml supports goals straightforwardly elegantly conventional object oriented languages addition provides better mechanisms parameterization higher order functions parametric polymorphism functors 
inheritance 
uses inheritance covered simpler notion subtyping 
subtyping standard ml approximated classical variant record techniques signature matching provides version subtyping level modules 
consequently algorithms involving simple uses subtyping naturally expressed standard ml investigations extensions ml type system record subtyping polymorphism row variables reasonable assume versions ml successors provide extension :10.1.1.116.1298:10.1.1.44.6387
really serious applications inheritance involving method specialization delegation easy approximate directly ml see 
advanced features object oriented programming languages proven semantically complex deal evidence programmers di culty coping 
claim enhancements record subtyping row variables standard ml provides structuring abstraction mechanisms expressive inheritance considerably complex semantic pragmatic perspective 
claims regarding relative expressiveness di cult require extensive empirical investigations comparative programming case studies 
record variants approximation subtyping strengthened adding extensible datatypes 
see extensive coverage semantics type theory object oriented pro gramming languages 
ml experimentation extensions standard ml described section probably taper year 
considerable progress base technologies code generation optimization garbage collection runtime system 
active topics investigation include representation specialization data ow analysis low level architecture dependent optimizations oating point performance 
continuing task development generic libraries tools support ml programming 
existing set tools standard ml new jersey fairly extensive including pro ler debugger ml yacc separate compilation system concurrent ml exene window interface library tools needed 
facilities required enable implementations mix ml foreign code ml application development tools interact gracefully conventional software tools 
new text books published support teaching ml documentation ml implementations programming tools increase quality quantity 
longer term discussions begun research program leading design successor standard ml 
hypothetical language known ml millenium completely new design upward compatible standard ml representing step evolution family remaining faithful essence ml 
language call value lambda calculus augmented imperative features providing uniform static type system probably strati ed predicative standard ml 
type system gracefully accommodate polymorphism mutable may include form subtyping record polymorphism row variables 
standard ml met design goals 
provides safety security structuring tools large scale programming 
relatively high expressiveness complexity ratio right size programmers tend language 
proven implementable possible generate competitive code ml programs 
negative side relatively minor design problems noted language probably shows history necessary distinction core ml module system 
ml continues subject intensive research promises advances leading new hopes improved languages ml family 

alfred aho brian kernighan peter weinberger 
awk programming language 
addison wesley reading massachusetts 
suggested dana scott 

william aitken john reppy 
value constructors symbolic constants standard ml 
technical report tr dept computer science cornell univ june 

andrew appel 
critique standard ml 
journal functional programming 
press 

andrew appel david macqueen 
standard ml new jersey 
martin wirsing editor third int symp 
prog 
lang 
implementation logic programming pages new york august 
springer verlag 

barron buxton hartley nixon strachey 
main features cpl computer journal 

dave berry 
lessons design standard ml library 
journal functional programming 
press 

burstall collins 
programming pop 
edinburgh university press 

rod burstall 
computer assisted proof mathematics lego proof system 
proc 
institute applied math 
conf 
revolution mathematics caused computing 

caml manual version 
projet inria ens march 

luca cardelli 
semantics multiple inheritance 
information computation 

rance cleaveland 
concurrency workbench 
volume 

rance cleaveland joachim parrow bernhard ste en 
concurrency workbench semantics tool veri cation concurrent systems 
acm toplas january 

eric cooper gregory morrisett 
adding threads standard ml 
technical report cmu cs school computer science carnegie mellon university pittsburgh pa december 

robert cooper cli ord 
distributed programming asynchronous ordered channels distributed ml 
peter lee editor proc 
acm sigplan workshop ml applications pages june 

pierre 
extensions sml module system 
rapport de stage november 

bruce duba robert harper david macqueen 
typing rst class continuations ml 
journal functional programming 
press 

karen 
interview robin milner 
comm 
acm january 

alessandro mishra prasad 
facile symmetric integration concurrent functional programming 
international journal parallel programming april 

gordon milner morris andc wadsworth 
metalanguage interactive proof lcf 
proc 
th acm symp 
principles programming languages newyork 
acm press 

gunter gunter macqueen 
interpretation compute ml equality kinds 
information computation 
press 

gunter mitchell 
theoretical aspects object types semantics language design 
mit press 

gunter remy 
proof theoretic assessment type errors 
unpublished 

robert harper mark lillibridge 
explicit polymorphism cps conversion 
proc 
th acm symp 
principles programming languages 

john mitchell ramesh viswanathan 
standard ml weak polymorphism imperative constructs 
ftp ftp pub weak poly dvi theory stanford edu 

lorenz james larus 
concurrent copying garbage collector languages distinguish im mutable data 
acm symp 
principles practice programming 

landin 
programming languages 
communications acm 

konstantin laufer martin odersky 
extension ml rst class types 
peter lee editor proc 
acm sigplan workshop ml applications pages june 

xavier leroy 
unboxed objects polymorphic typing 
nineteenth annual acm symp 
principles prog 
languages pages new york january 
acm press 

xavier leroy 
polymorphism name continuations 
proc 
th acm symp 
principles programming languages 

xavier leroy michel mauny 
dynamics ml 
hughes editor functional programming languages computer architecture th acm conference lncs pages 
springer verlag 
appear journal functional programming 

david macqueen 
dependent types express modular structure 
proc 
th acm symp 
principles programming languages pages 

luigi mancini 
technique subclassing implementation exploiting polymorphic procedures 
software practice experience april 

david matthews 
distributed concurrent implementation standard ml 
technical report ecs lfcs laboratory foundations computer science edinburgh university august 

robin milner mads tofte 
commentary standard ml 
mit press cambridge massachusetts 

robin milner mads tofte robert harper 
de nition standard ml mit press cambridge ma 

john mitchell robert harper 
essence ml 
proc 
th acm symp 
principles prog 
languages pages new york 
acm press 

john 
high level language standard ml 
volume 

laurence paulson 
ml working programmer 
cambridge university press cambridge 

lawrence paulson tobias nipkow 
isabelle tutorial user manual 
technical report technical report university cambridge computer laboratory january 

john reppy 
concurrent ml design application semantics 
volume 

eugene rollins 
selective recompilation system 
robert harper editor third international workshop standard ml september 

konrad slind 
hol just ugly rumor 
proc 
int 
workshop hol theorem proving system applications 

mads tofte 
principle signatures higher order program modules 
proc 
th acm symp 
principles programming languages pages 

mitchell wand 
type inference record concatenations multiple inheritance 
proc 
symp 
logic computer science pages 
ieee june 

andrew wright 
polymorphism imperative languages imperative types 
ftp public languages tr dvi ps titan cs rice edu 
article processed lat macro package llncs style 
