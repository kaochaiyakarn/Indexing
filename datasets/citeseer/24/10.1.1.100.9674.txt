monads functional programming philip wadler university glasgow 
department computing science university qq scotland wadler dcs glasgow ac uk 
monads structure functional programs described 
monads provide convenient framework simulating ects languages global state exception handling output non determinism 
case studies looked detail monads ease modi cation simple evaluator monads act basis datatype arrays subject place update monads build parsers 
shall pure impure 
functional programming community divides camps 
pure languages miranda haskell lambda calculus pure simple 
impure languages standard ml augment lambda calculus number possible ects assignment exceptions continuations 
pure languages easier reason may bene lazy evaluation impure languages er ciency bene ts possible compact mode expression 
theoretical computing science notably areas type theory category theory suggested new approaches may integrate bene ts pure impure schools 
notes describe monads integrate impure ects pure functional languages 
concept monad arises category theory applied moggi structure denotational semantics programming languages :10.1.1.26.2787
technique applied structure functional programs :10.1.1.33.5381
applications monads illustrated case studies 
section introduces monads showing structure simple evaluator easy modify 
section describes laws satis ed appears jeuring meijer editors advanced functional programming proceedings spring school may springer verlag lecture notes computer science 
previous version note appeared broy editor program design calculi proceedings marktoberdorf summer school july august 
errata xed august dan friedman pointing 
miranda trademark research software limited 
monads 
section shows monads provide new solution old problem providing updatable state pure functional languages 
section applies monads problem building recursive descent parsers interest right provides paradigm sequencing alternation central concepts computing 
doubtful structuring methods discovered insight orded category theory 
discovered easily expressed things categorical 
knowledge category theory required read notes 
examples haskell knowledge required 
required passing familiarity basics pure impure functional programming general background see :10.1.1.100.9674
languages refered haskell miranda standard ml scheme 
evaluating monads pure functional languages advantage ow data explicit 
disadvantage painfully explicit 
program pure functional language written set equations 
explicit data ow ensures value expression depends free variables 
substitution equals equals valid making programs especially easy reason 
explicit data ow ensures order computation irrelevant making programs susceptible lazy evaluation 
regard modularity explicit data ow blessing curse 
hand ultimate modularity 
data data rendered manifest accessible providing maximum exibility 
hand nadir modularity 
essence algorithm buried plumbing required carry data point creation point 
say pure functional language 
add error handling need modify recursive call check handle errors appropriately 
impure language exceptions restructuring needed 
add count operations performed need modify recursive call pass appropriately 
impure language global variable incremented restructuring needed 
add execution trace need modify recursive call pass traces appropriately 
impure language performed output side ect restructuring needed 
monad 
notes show monads structure evaluator changes mentioned simple 
case required rede ne monad local changes 
programming style exibility provided various features impure languages 
may apply corresponding impure feature 
eliminate tension exibility orded explicit data brevity orded implicit plumbing ameliorate extent 
technique applies just evaluators wide range functional programs 
number years glasgow involved constructing compiler functional language haskell 
compiler written haskell uses structuring technique described 
describes monads program tens lines long experience program orders magnitude larger 
basic evaluator simple terms consider variations mimic exceptions state output 
analyse commonalities concept monad 
variations ts monadic framework 
variation zero basic evaluator evaluator acts terms purposes illustration taken excessively simple 
data term con int div term term term constant con integer quotient div terms 
basic evaluator simplicity 
eval term int eval con eval div eval eval function eval takes term integer 
term constant constant 
term quotient subterms evaluated quotient computed 
denote integer division 
provide running examples 
answer error term answer div div con con con error div con con computing eval answer yields value basic evaluator incorporate error handling result eval error unde ned 
variation exceptions say desired add error checking second example returns sensible error message 
impure language easily achieved exceptions 
pure language exception handling may introducing type represent computations may raise exception 
data ma raise exception return type exception string value type ma form raise exception return wherea value type type variable ma ranging values type return 
word di erence data type declarations 
data declaration introduces new data type case new constructors values type case raise return type declaration introduces new name existing type case exception name string 
straightforward tedious adapt evaluator representation 
eval term int eval con return eval div case eval raise raise return case eval raise raise return raise divide zero return call evaluator form result checked exception raised re raised value returned processed 
applying new evaluator answer yields return applying error yields raise divide zero 
variation state forgetting errors moment say desired count number divisions performed evaluation 
impure language easily achieved state 
set variable zero initially increment time division occurs 
pure language state may introducing type represent computations act state 
type ma state 
state type state int avalue type mais function accepts initial state returns computed value paired nal state 
straightforward tedious adapt evaluator representation 
eval term mint eval con eval div eval eval call evaluator old state passed new state extracted result passed appropriately 
computing eval answer yields initial state answer nal state indicating divisions performed 
variation output say desired display trace execution 
impure language easily done inserting output commands appropriate points 
pure language output may introducing type represent computations generate output 
type ma output type output string avalue type output generated paired value computed 
straightforward tedious adapt evaluator representation 
eval term mint eval con line con eval div eval eval line div line term int output line eval call evaluator outputs collected assembled form output enclosing call 
function line generates line output 
convert terms integers strings concatenates strings represents string consisting newline 
computing eval answer returns pair string eval con eval con eval div con con eval con eval div div con con con represents trace computation 
discussion far may appear programs impure languages easier modify pure languages 
reverse true 
say desired modify previous program display execution trace reverse order eval div div con con con eval con eval div con con eval con eval con simplicity achieve pure program just replace term term line div line div easy modify impure program achieve ect 
problem output occurs side ect computation desires display result computing term displaying output generated computation 
achieved variety require substantial modi cation impure program 
monadic evaluator variations interpreter similar structure abstracted yield notion monad 
variation introduced type computations 
respectively represented computations raise exceptions act state generate output 
reader guessed stands monad 
original evaluator type term int variation type took form term mint 
general function type replaced function type mb 
read function accepts argument type returns result type possible additional ect captured ect may act state generate output raise exception 
sort operations required type examination examples reveals 
need way computation returns value 
unit ma second need way apply function type computation type ma write order argument comes function 
ma 
mb mb monad triple unit 
consisting type constructor operations polymorphic types 
operations satisfy laws section 
write expressions form expressions variable 
form lambda expression scope bound variable expression read follows perform computation bind resulting value perform computation types provide useful guide 
type see expression type ma variable type expression type mb lambda expression type mb expression type mb 
analogous expression impure language reading perform computation bind resulting value perform computation return value 
types say distinguish values computations expression type variable type expression type expression type analogy explains choice order arguments 
argument appear function computation performed computation evaluator easily rewritten terms abstractions 
eval term int eval con unit eval div eval eval unit word precedence lambda abstraction binds tightly application binds tightly equation equivalent 
eval div eval 
eval 
unit type term int indicates evaluator takes term performs computation yielding integer 
compute con just return compute div rst compute result compute result return new evaluator little complex original basic evaluator exible 
variations simply changing de nitions unit making local modi cations 
longer necessary re write entire evaluator achieve simple changes 
variation zero revisited basic evaluator simplest monad computation di erent value 
type ma unit ia unit 
ma 
mb mb ka called identity monad identity function types unit identity function just application 
unit monadic evaluator section simplifying yields basic evaluator section variation revisited exceptions exception monad computation may raise exception return avalue 
data ma raise exception return type exception string unit ma unit return 
ma 
mb mb case raise raise return ka raise exception ma raise raise call unit simply returns value call examines result computation exception re raised function applied value returned 
just identity monad function application exception monad may considered form strict function application 
raises exception add error handling monadic evaluator take monad 
just replace unit raise divide zero unit commensurate change required impure language 
expect evaluator equivalent exceptions section 
particular unfolding de nitions unit section simplifying yields evaluator section 
variation revisited state state monad computation accepts initial state returns value paired nal state 
type ma state 
state type state int unit ma unit 
ma 
mb mb mx kay tick tick call unit returns computation accept initial state returns value nal state returns leaves state unchanged 
call performs computation initial state yielding value intermediate state performs computation ka state yielding value nal state call tick increments state returns empty value type written 
impure language operation tick represented function type 
spurious argument required delay ect function applied output guess function purpose lies side ect 
contrast tick type spurious argument appearance explicitly indicates sort ect may occur 
add execution counts monadic evaluator take monad 
just replace unit tick 
unit equivalent fresh variable appear indicates value bound lambda expression 
commensurate change required impure language 
simplifying yields evaluator state section 
variation revisited output output monad computation consists output generated paired value returned 
type ma output type output string unit ma unit 
ma 
mb mb ka output call unit returns output paired call extracts output value computation extracts output value computation ka returns output formed concatenating paired value call returns computation output empty value 
add execution traces monadic evaluator take monad 
clause con replace unit line con 
unit clause div replace unit line div 
unit commensurate change required impure language 
simplifying yields evaluator output section 
get output reverse order required change de nition replacing commensurate change required pure program simpler change required impure program 
think di erence pure impure versions impure version displays output computes pure version display entire computation completes 
fact pure language lazy output displayed incremental fashion computation occurs 
furthermore happen order output reversed di cult arrange impure language 
easiest way arrange may lazy evaluation 
monad laws operations monad satisfy laws 
left unit 
compute value bind result compute result value substituted variable unit right unit 
compute bind result return result unit associative 
compute bind result compute bind result compute order parentheses computation irrelevant 

scope variable includes left excludes right law appear free binary operation left right unit associative 
monad di ers monoid right operand involves binding operation 
demonstrate addition associative 
consider variant addition division 
data term con int add term term eval term mint eval con unit eval add eval eval unit show add add add add compute result 
simplify left term eval add add def eval eval eval add unit def eval eval eval eval unit unit associative eval eval eval unit unit left unit eval eval eval unit simplify right term similarly eval add add eval eval eval unit result follows associativity addition 
proof trivial monad laws impossible 
proof works monad exception state output 
assumes code modi ed proof modi ed 
section modi ed program adding calls tick 
case associativity holds demonstrated law tick 

tick holds long tick action state section modi ed program adding calls line 
case addition longer associative sense changing parentheses change trace computations yield value 
example note monad ne operations 
map 

mb map unit join ma join map operation simply applies function result yielded computation 
compute map rst compute bind result return fa 
join operation trickier 
computation yields computation 
compute join rst compute binds result behaves computation join mind double layer computation run mill single layer computation 
see section lists form monad monad map applies function element concatenates list lists 
id identity function id function composition formulate number laws 
map id id map map map map unit unit map join join map map join unit id join map unit id join map join join join join map proof simple consequence de nitions map join monad laws 
monads de ned terms unit terms unit join map 
monad laws replaced rst laws 
de nes eighth law monad laws follow 
de nitions equivalent 
state arrays play central role computing closely match current architectures 
programs array lookups array updates asx operations popular array implemented single indexed fetch instruction array single indexed store 
easy add arrays functional language easy provide cient array lookup 
provide cient array update hand question long history 
monads provide new answer old question 
question long history desirable base programs array update 
ort gone developing algorithms architectures arrays sidestep debate simply assume answer 
important di erence way monads previous section way monads 
previous section showed monads help existing language features ectively section shows monads help de ne new language features 
change programming language required implementation provide new data type part standard prelude 
monads manipulate state internal program techniques manipulate state perform input output communicate programming languages 
glasgow implementation haskell uses design monads provide input output interlanguage working imperative programming language 
design adopted version haskell standard 
arrays arr type arrays indexes type ix yielding values type val 
key operations type newarray val arr index ix arr val update ix val arr arr call newarray returns array set call index returns value index array call update returns array index value remainder identical behaviour operations speci ed laws index newarray index update index update index practice operations complex needs way specify index bounds instance 
su ces explicate main points 
cient way implement update operation overwrite speci ed entry array pure functional language safe pointers array extant update operation performed 
array satisfying property called single threaded schmidt 
consider building interpreter simple imperative language 
syntax language represented data types 
data term var id con int add term term data comm asgn id term seq comm comm term comm comm data prog prog comm term id tex type identi ers 
term variable constant sum terms command assignment sequence commands conditional program consists command followed term 
current state execution modelled indexes identi ers corresponding values integers 
interpreter 
type state arr type ix id type val int eval term state int eval var index eval con eval add eval eval exec comm state state exec asgn update eval exec seq cd exec eval elab prog int elab prog ct eval newarray closely resembles denotational semantics 
evaluator terms takes term state returns integer 
evaluation variable implemented indexing state 
executor commands takes command initial state returns nal state 
assignment implemented updating state 
elaborator programs takes program returns integer 
executes command initial state identi ers map evaluates expression resulting state returns value 
state interpreter single threaded moment execution pointer state safe update state place 
order update operation evaluate new value placing array 
array may contain closure contains pointer array violating single threading property 
semantic terms says update strict arguments 
anumber researchers proposed analyses determine functional program uses array ina single threaded manner intent incorporating analysis optimising compiler 
analyses interpretation 
success area analyses tend 
analyses practicable may 
optimising update ect program time space usage order magnitude 
programmer assured optimisation occur order know program run adequately fast available space 
may better programmer indicate explicitly array single threaded leave optimising compiler 
number researchers indicating array single threaded 
techniques type systems 
area promising complexities type systems remain formidable 
section presents way indicating explicitly intention array single threaded 
naturally monads 
advantage method works existing type systems idea data type 
array transformers monad array transformers simply monad state transformers state taken array 
de nitions unit 
type ma state 
state type state arr unit ma unit 
ma 
mb mb mx kay previously state integer additional operation tick acting state 
state array additional operations corresponding array creation indexing update 
block val ma 
block newarray fetch ix fetch index assign ix val assign update call block creates new array locations initialised applies monad initial state yield value nal state deallocates array returns returns value index current state leaves state unchanged 
call assign returns empty value updates state index contains value little thought shows operations single threaded 
operation duplicate array may follows rst fetch index array andthen return pair consisting value pointer array 
terms fetch strict array index value located index assign strict array index value assigned 
di ers previous section order interpreter single threaded necessary update strict value 
section shall see strictness removed spurious sequencing introduced evaluation terms 
section spurious sequencing removed strictness reintroduced 
data type supporting operations unit block fetch 
operation block plays central role result type 
block way write program output type 
making data type guarantees single threading preserved safe implement assignment place update 
data abstraction essential purpose 
write programs assign assign violate single threading property 
interpreter may rewritten follows 
eval term mint eval var fetch eval con unit eval add eval eval unit exec comm exec asgn eval assign exec seq cd 

unit exec eval elab prog int elab prog ct block 
eval unit types show term returns integer may access modify state execution term returns may access modify state 
fact evaluation accesses state alters consider shortly re ned system allows indicate 
data type guarantees safe perform updates place special analysis technique required 
easy see monad interpreter derived original de nitions earlier proof equivalence straightforward 
rewritten interpreter slightly longer previous version slightly easier read 
instance execution seq cd read compute execution compute execution return 
compare previous version property appears left 
drawback program introduces sequencing 
evaluation add read compute evaluation result compute evaluation result return unfortunate imposes spurious ordering evaluation original program 
order matter eval depends state change 
remedy augment monad state transformers second monad state readers 
array readers recall monad array transformers takes initial array returns avalue nal array 
type ma state 
state type state arr corresponding monad array readers takes array returns value 
array returned assumed identical original array 
type state unit unit 

mx kax fetch ix val fetch index call unit ignores state returns call performs computation state yielding value performs computation ka state unit discards state duplicates 
call fetch returns value state index clearly computations read state subset computations may read write state 
way coerce computation monad monad coerce ma coerce mx call coerce performs computation initial state yielding returns paired state function coerce enjoys number mathematical properties discussed shortly 
operations maintain single threading suitably implemented 
de nitions coerce strict intermediate value guarantees coerce performed state computation mx reduce contains extant pointers state pair returned 
pointer extant state updated 
monad commutative satis es law scope includes right left law appear free similarly 
commutative monad order computation matter 
state reader monad commutative state monad 
spurious order imposed computations state reader monad 
particular call may safely implemented ka computed parallel 
nal result strict instance annotations grip processor de ned follows 
mx kax par par seq ab calls par spark parallel computations call seq waits reduce non bottom value returning operations may data types supporting operations unit unit block assign fetch 
abstraction guarantees single threading assign may implemented place update 
interpreter may rewritten 
eval term int eval var fetch eval con unit eval add eval eval unit exec comm exec asgn coerce eval assign exec seq cd 

unit exec coerce eval elab prog int elab prog ct block 
coerce eval unit di ers previous version eval written terms calls coerce surround calls eval functions 
new types clear eval depends state alter exec may depend alter state 
excessive sequencing previous version eliminated 
evaluation add subexpressions may order concurrently 
monad morphism monad monad function preserves monad structure unit unit hm happens wishes combination monads achieve purpose monad morphisms play role converting monad :10.1.1.33.5381
particular coerce monad morphism follows immediately versions interpreter equivalent 
functional language may provide place array update old problem 
section new solution consisting data types operations 
change programming language required provide implementation types part standard prelude 
discovery simple solution comes considering plethora elaborate solutions proposed 
di expressing solution continuation passing style subsequently proposed hudak 
hudak solution inspired monad solution monad solution appears small advantages 
solution discovered ago 
possible reason data types involve higher order functions essential way 
usual axiomatisation arrays involves rst order functions occur search data type higher order functions 
monads led discovery solution count point favour 
parsers parsers great success story theoretical computing 
bnf formalism provides concise precise way describe syntax programming language 
mathematical tests determine bnf grammar ambiguous vacuous 
transformations produce equivalent parse 
compiler compilers turn high level speci cation grammar cient program 
section shows monads provide simple framework constructing recursive descent parsers 
interest right basic structures parsing sequencing alternation fundamental computing 
provides demonstration monads model backtracking non determinism 
lists representation parsers depends lists 
lists ubiquitous functional programming surprising managed get far barely mentioning 
appeared disguise strings simply lists characters 
review notation 
write type list elements type cons 
type int 
strings lists characters string char equivalent monad just abbreviation 
lists form monad 
unit unit 


ka call unit simply forms unit list containing call applies element list appends resulting lists 
monads encapsulate ects lists form monad lists correspond ect 
ect correspond choice 
think computation type ering choice values element list 
monadic equivalent function type function type 
ers choice results argument corresponds relation 
operation unit corresponds identity relation associates argument 
ka 
hb corresponds relational composition list comprehension notation provides convenient way manipulating lists 
behaviour analogous set comprehensions order signi cant 
example sqr list list comprehension notation translates neatly monad operations 
unit unit expression variables generally patterns expressions evaluate lists 
connections comprehensions monads described length :10.1.1.33.5381
representing parsers parsers represented way similar state transformers 
type ma state state type state string parser type takes state representing string parsed returns list containing value type parsed string state representing remaining string parsed 
list represents alternative possible parses input state empty parse element parse elements di erent possible parses 
consider simple parser arithmetic expressions returns tree type considered previously 
data term con int div term term say wehave parser terms 
examples 
term term con term con term term term div div con con con parser unambiguous input list possible parses mx empty exactly item 
instance term unambiguous 
ambiguous parser may return list alternative parsings 
parsing item basic parser returns rst item input fails input exhausted 
item item item examples 
clearly item unambiguous 
sequencing item item monad form parsers monad require operations unit 
unit ma 
ma 
mb mb mx kay parser unit accepts input yields parse value paired remaining input parser takes input parser applied input yielding paired remaining input parser ka applied input yielding parse value paired nal remaining output unit corresponds empty parser consumes input corresponds sequencing parsers 
items may parsed follows 
char char item item unit examples 
monad nad parse succeeds items list 
monad laws express empty parser identity sequencing sequencing associative 
unit unit 
unambiguous ka unambiguous unambiguous 
alternation parsers may combined alternation 
zero ma zero ma 
ma 
ma mx nx parser zero takes input fails 
parser takes input yields parses applied input parses applied input parser parses items input 
string item unit item item unit examples 
monad mo nad yields alternative parses showing alternation yield ambiguous parsers 
parser fails identity alternation alternation associative 
zero zero furthermore zero zero distributes zero zero zero zero case distributes rightward representing alternative parses ordered list unordered bag ha hold 
unambiguous parser yields list length order irrelevant law holds side unambiguous implies sides 
filtering parser may ltered combining predicate 
ma 
bool ma pa unit zero parser predicate values parser applies parser yield value holds succeeds value fails 
note ltering written terms previously de ned operators need refer directly state 
obvious predicates 
parsers 
letter letter item digit int digit item unit ord ord rst succeeds input item letter second succeeds digit 
second converts digit corresponding value ord char int convert character ascii code 
assuming higher precedence allow parentheses dropped second de nition 
parser literal recognises single speci ed character 
lit char lit item parser lit succeeds input begins character fails 
lit monad lit parse previous laws follows ltering preserves zero distributes alternation 
zero zero unambiguous parser iteration single parser may iterated yielding list parsed values 
iterate ma 
iterate iterate unit unit parser parser iterate applies parser sequence zero times returning list values parsed 
list alternative parses longest parse returned rst 
example 
iterate digit way 
number mint number digit iterate digit unit takes list digits returns corresponding number 
example 
number supplies possible parses parses digits parses single digit 
number de ned contain digit parse zero digits 
example shows natural design iterator yield longest possible parse 
section describes way toachieve 
biased choice alternation written yields parses yielded followed parses yielded purposes sensible choose parses parses 
called biased choice 
ma 
ma 
ma mx mx nx biased choice written yields parses fails yield parse case yields parses iteration rewritten biased choice 
reiterate ma 
reiterate reiterate unit unit di erence replace yielding list possible parses longest rst yields longest possible parse 
previous example revisited 
reiterate digit follows number taken rewritten reiterate 
number mint number digit reiterate digit unit example reveals little ambiguous parsers may search space possibilities 
nd ways items string zero times 
reiterate ny ma ma ny combines alternation biased choice reiterate 
possible parses parse applied entire input consumed 
example somewhat similar technique nd ways breaking dollar quarters 
unambiguous reiterate unambiguous 
unambiguous parsers sequencing distributes right biased choice ka ha unambiguous 
alternation sequencing distribute left biased choice unambiguous parsers 
parser terms possible write parser terms alluded 
grammar fully terms expressed bnf 
term number term term translates directly notation follows 
note notation bnf speci es exactly construct returned value 
term term number unit con lit term lit term lit unit div equivalent fresh variable appear indicates value bound lambda expression interest 
examples parser appeared earlier 
parser written alternation unambiguous just written biased choice 
true parsers section 
left recursion parser works fully terms 
allow terms operator associate left 
usual way express grammar bnf follows 
term term factor factor factor number term translates notation follows 
term term term lit factor unit div factor factor factor number unit con lit term lit unit problem factor attempt apply term results nite loop 
problem rst step term apply term leading nite regress 
called left recursion problem 
di culty recursive descent parsers functional 
solution rewrite grammar term equivalent form 
term factor term term factor term unit usual unit denotes empty parser 
translates directly notation 
term term factor term term term term lit factor term div unit term parses remainder term takes argument corresponding term parsed far 
desired ect 
term div div con con con term div con div con con general left recursive de nition rewritten 
closure closure ma 
ma closure ka ka 
closure unit ma ma ma 
improving laziness typically program represented function list characters input list characters output 
lazy evaluation usually input need read rst part output list produced 
line behavior essential purposes 
general unreasonable expect behaviour parser general known input successfully parsed read 
certain special cases may hope better 
consider applying reiterate string instance case parse fail regardless remainder string expect parse yielded list parsed value 
lazy evaluation expect able generate output corresponding rst digit remaining input read 
happens parser reads entire input output generated 
necessary way encode parser reiterate succeeds 
input match yield value empty list 
provided function guarantee 
guarantee ma 
ma mx fst head snd head tail fst snd head reiterate guarantee added 
reiterate ma 
reiterate guarantee reiterate unit unit ensures reiterate recursive calls return list answer 
result behaviour lazy evaluation improved 
preceding explanation highly operational worth noting denotational semantics provides useful alternative approach 
denote program terminate 
verify old de nition new de nition reiterate digit 
reiterate digit 
input begins character remainder input unknown old de nition known output new de nition known output yields parse value list begins character 
parsers bene judicious guarantee particular iterate modi ed reiterate 
seen monads provide useful framework structuring recursive descent parsers 
empty parser sequencing correspond directly unit andthe monads laws re ect sequencing associative empty parser unit 
failing parser alternation correspond zero satisfy laws re ecting alternation associative failing parser unit sequencing distributes alternation 
sequencing alternation fundamental just parsers computing 
monads capture sequencing reasonable ask captures sequencing alternation 
may zero laws provide structure 
experiments needed 
hopeful indication slight variation parser monad yields plausible model dijkstra guarded command language 

abramsky hankin interpretation declarative languages ellis horwood 

bloss update analysis cient implementation functional aggregates 
th symposium functional programming languages computer architecture acm london september 

bird wadler functional programming 
prentice hall 

hudak peyton jones wadler editors report programming language haskell version 
technical report yale university glasgow university august 


girard linear logic 
theoretical computer science 

guzman hudak single threaded polymorphic lambda calculus 
ieee symposium logic computer science philadelphia june 

hudak semantic model counting abstraction detailed summary 
acm conference lisp functional programming pp 
cambridge massachusetts august 

hudak continuation mutable data types tohave state 
technical report yaleu dcs rr department computer science yale university july 

king wadler combining monads 
glasgow workshop functional programming ayr july 
workshops computing series springer verlag appear 

mac lane categories working mathematician springer verlag 

milner tofte harper de nition standard ml 
mit press 

paulson ml working programmer 
cambridge university press 

moggi computational lambda calculus monads 
symposium logic computer science asilomar california ieee june 
longer version available technical report university 

moggi view programming 
course notes university edinburgh 

peyton jones wadler imperative functional programming 
th symposium principles programming languages charleston south carolina acm january 

plotkin call name call value calculus 
theoretical computer science 

rees clinger eds revised report algorithmic language scheme 
acm sigplan notices 

schmidt detecting global variables denotational speci cations 
acm trans 
programming languages systems 

swarup reddy ireland assignments applicative languages 
conference programming languages computer architecture cambridge massachusetts lncs springer verlag august 

turner overview miranda 
turner editor research topics functional programming 
addison wesley 

wadler comprehending monads 
conference lisp functional programming nice france acm june 

linear logic 
conference partial evaluation semantics program manipulation pepm connecticut acm june 

wadler essence functional programming invited talk 
th symposium principles programming languages albuquerque new mexico acm january 
