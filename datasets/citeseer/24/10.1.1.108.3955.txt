codesurfer platform analyzing executables balakrishnan radu thomas reps tim teitelbaum comp 
sci 
dept university wisconsin reps cs wisc edu radu tt com 
codesurfer prototype system analyzing executables 
uses static analysis algorithm called value set analysis vsa recover intermediate representations similar compiler creates program written high level language 
major challenge building analysis tool executables providing useful information operations involving memory 
difficult symbol table debugging information absent untrusted 
codesurfer overcomes challenges provide analyst powerful flexible platform investigating properties behaviors potentially malicious code cots components plugins mobile code worms virus infected code codesurfer gui ii codesurfer scripting language provides access intermediate representations codesurfer builds executable iii path inspector tool uses sophisticated pattern matching engine answer questions flow execution program 
years growing need tools analyze executables 
computer security issues provide motivation ensure third party applications perform malicious operations context important analysts able decipher behavior worms virus infected code 
static analysis provides techniques help problems obstacles overcome potentially malicious programs symbol table debugging information entirely absent relied 
instructions perform memory operations explicit memory addresses indirect addressing complicates task understanding behavior code 
proposed algorithms statically analyzing executables :10.1.1.20.4418:10.1.1.147.495
existing tools assume presence symbol table debugging information ignore instructions memory operands altogether assume instruction memory operands read part memory 
solutions satisfactory terms understanding executable works 
balakrishnan reps developed static analysis algorithm called value set analysis vsa supported air force afrl rome contracts onr contracts nsf ccr 
recover information contents memory locations manipulated executable 
combining vsa facilities provided idapro codesurfer toolkits created codesurfer prototype tool browsing inspecting analyzing executables 
executable codesurfer recovers intermediate representation similar created compiler program written high level language 
document emphasize facilities codesurfer provide analyst powerful flexible platform investigating properties behaviors executable 
codesurfer works actual executable code run machine automatically takes account platform specific aspects code positions offsets variables run time stack activation records 
key ability security exploits depend platform specific features structure activation records 
sense codesurfer higher fidelity tool tools analyze source code 
codesurfer codesurfer outcome joint project univ wisconsin codesurfer idapro disassembly toolkit codesurfer system toolkit building program analysis inspection tools 
fig 
shows various components codesurfer 
section sketches components combined codesurfer 
binary ida pro parse binary build cfgs initial estimate code vs data procedures call sites malloc sites connector value set analysis value added ida pro codesurfer build sdg browse fleshed cfgs fleshed call graph killed may killed variables cfg nodes points sets reports violations security analyzers decompiler binary rewriter user scripts fig 
organization codesurfer 
executable disassembled idapro 
addition disassembly listing control flow graphs idapro provides access information procedure boundaries calls library functions identified algorithm called fast library identification recognition technology statically known memory addresses offsets 
idapro provides access internal resources api allows users create plug ins executed idapro 
created plug idapro called connector creates data structures represent information obtained idapro 
idapro connector combination able cre ate data structures dynamically linked libraries link data structures represent program 
infrastructure permits program analysis carried including analysis code library functions called 
data structures connector implemented static analysis algorithm called value set analysis vsa 
vsa assume presence symbol table debugging information 
step set data objects called locs locations determined static memory addresses offsets provided idapro 
vsa combined numeric pointer analysis algorithm determines approximation set numeric values addresses loc holds program point 
set addresses numeric values referred value set 
key feature vsa tracks integer valued address valued quantities simultaneously 
crucial analyzing executables numeric values addresses indistinguishable executable 
note idapro identify targets indirect jumps indirect calls call graph control flow graphs constructs complete 
information computed vsa augment call graph control flow graphs fly account indirect jumps indirect calls 
fact relationship vsa preliminary irs created idapro similar relationship points analysis algorithm compiler preliminary irs created compiler front 
cases preliminary irs fleshed course analysis 
vsa completes value sets locs program point determine point sets killed possibly killed emitted format suitable input codesurfer 
codesurfer takes information builds collection irs consisting syntax trees control flow graphs cfgs call graph system dependence graph sdg 
sdg consists set program dependence graphs pdgs procedure program 
vertex pdg corresponds construct program statement instruction call procedure actual parameter call formal parameter procedure 
edges correspond data control dependences vertices 
pdgs connected interprocedural edges represent control dependences procedure calls entries data dependences actual parameters formal parameters return values 
dependence graphs invaluable applications highlight chains dependent instructions may widely scattered program 
example instruction useful know data dependence predecessors instructions write locations read instruction control dependence predecessors control points may affect instruction gets executed 
similarly may useful vsa need debugging symbol table information principle possible extend vsa information 
know instruction data dependence successors instructions read locations written instruction control dependence successors instructions execution depends decision control point 
codesurfer facilities described sect 
executable input codesurfer builds collection irs 
addition building irs codesurfer checks executable conforms standard compilation model runtime stack maintained activation records ars pushed stack procedure entry popped stack procedure exit procedure modify return address stack program instructions occupy fixed area memory self modifying separate program data 
confirmed executable conforms model ir possibly incorrect 
example call graph incorrect procedure modifies return address stack 
consequently codesurfer issues error reports finds violations standard compilation model 
analyst go reports determine false alarms real violations 
codesurfer gui supports browsing surfing sdg variety operations making queries sdg slicing chopping 
gui allows user navigate assembly code dependences manner analogous navigating world wide web 
codesurfer api provides programmatic interface operations lower level information individual nodes edges program sdg call graph control flow graph node sets killed possibly killed locs 
writing programs traverse codesurfer irs implement additional program analyses api extend codesurfer capabilities 
codesurfer conjunction path inspector tool uses sophisticated pattern matching engine answer questions flow execution program 
path inspector checks sequencing properties events program context security analysis example answer questions possible program bypass authentication routine indicates program may contain trapdoor 
path inspector questions posed questions existence problematic event sequences checking query problematic path exists displayed path explorer tool 
lists program points may occur problematic path 
items backward slice program respect set program points set program points affect computations performed forward slice respect set program points affected computations performed members 
program chop set source program points set target program points shows affect points 
chopping key operation information flow analysis 
linked disassembly analyst navigate point path corresponding assembly code element 
addition path inspector allows analyst step forward backward path simultaneously stepping assembly code 
code stepping operations similar single stepping operations traditional debugger 

balakrishnan reps analyzing memory accesses executables 
comp 
construct pages 

cifuentes 
interprocedural data flow recovery high level language code assembly 
technical report univ queensland 

cifuentes simon 
assembly high level language translation 
int 
conf 
softw 
maint pages 

codesurfer www com products codesurfer 

debray muth 
alias analysis executable code 
princ 
prog 
lang pages 

ferrante ottenstein warren 
program dependence graph optimization 
trans 
prog 
lang 
syst 

fast library identification recognition technology sa nv li ge belgium www com htm 

horwitz reps binkley 
interprocedural slicing dependence graphs 
trans 
prog 
lang 
syst january 

idapro disassembler www com 

mycroft 
type decompilation 
european symp 
programming 

reps 
precise interprocedural chopping 

softw 
eng 

rival 
interpretation certification assembly code 
int 
conf 
model checking abs 
int 
