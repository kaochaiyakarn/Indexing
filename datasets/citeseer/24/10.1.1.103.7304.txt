study efficient mining algorithms frequent patterns data streams study efficient mining algorithms frequent patterns data streams student hua fu li advisor dr suh yin lee dissertation submitted department computer science college computer science national tung university partial fulfillment requirements degree doctor philosophy computer science june taiwan republic china dsm fi mfi transsw mfi timesw mfi transsw mfi timesw dsm plw dsm fi top mfc append mfc dynamic mfc append ii study efficient mining algorithms frequent patterns data streams student hua fu li advisor dr suh yin lee department computer science national tung university online mining data streams important data mining problem broad applications 
difficult problem streaming data possess specific characteristics unknown unbounded length possibly fast arrival rate inability backtrack previously arrived transactions lack system control order data arrives 
various objectives data stream mining mining frequent patterns data streams focus knowledge discovery 
dissertation design core technologies mining frequent patterns changes data streams investigated 
mining frequent itemsets data streams landmark window propose dsm fi data stream mining frequent itemsets algorithm find set frequent itemsets entire history data streams 
effective projection method proposed algorithm extract essential information incoming transaction data streams 
data structure prefix tree constructed store data summary 
dsm fi utilizes top pattern selection approach find complete set frequent itemsets 
experiments show dsm fi outperforms bts buffer trie state art iii single pass algorithm order magnitude discovering set frequent itemsets landmark window data streams 
mining frequent itemsets data streams sliding window efficient bit vector algorithms proposed 
kinds sliding windows transaction sensitive sliding window time sensitive sliding window discussed 
mfi transsw mining frequent itemsets transaction sensitive sliding window developed mine set frequent itemsets data streams transaction sensitive sliding window 
single pass algorithm called mfi timesw mining frequent itemsets time sensitive sliding window mfi transsw algorithm dynamic encoding method proposed mine set frequent itemsets time sensitive sliding window 
effective bit sequence representation items proposed algorithms reduce time memory needed slide windows 
experiments show proposed algorithms attain highly accurate mining results run significantly faster consume memory existing algorithms mining frequent itemsets data streams 
mining changes items data streams propose pass algorithms called mfc append mining frequency changes append data streams mfc dynamic mining frequency changes dynamic data streams mine set frequent frequency changed items frequency changed items stable frequency changed items continuous append dynamic data streams respectively 
new summary data structure called change sketch developed compute frequency changes data streams fast possible 
theoretical analysis experimental results show algorithms meet major performance requirements single pass bounded space requirement real time computing mining data streams 
iv mining path traversal patterns web click streams important web usage mining web user profiling 
important proposed single pass algorithms called dsm plw data stream mining path traversal patterns landmark window dsm tkp data stream mining top path traversal patterns discover path traversal patterns web click streams user defined minimum support constraint 
experiments real data show algorithms successfully mine maximal sequences linear scalability 
comprehensive experiments conducted assess performance proposed algorithms 
empirical results show algorithms outperform state art algorithms respect various mining parameters datasets different characteristics 
scale experiments verify algorithms successfully mine frequent patterns linear scalability 
vi table contents english iii vi list figures ix chapter 
background 
research objectives contributions 
organization thesis 
chapter online mining frequent itemsets data streams 

problem definition proposed algorithm dsm fi 
construction maintenance summary data structure 
pruning infrequent information sfi forest 
determining frequent itemsets current sfi forest 
theoretical analysis 
maximum estimated support error analysis 
space requirement analysis 
performance evaluation 
scalability study dsm fi algorithm 
comparison bts algorithm 

chapter online mining frequent itemsets stream sliding windows 

problem definition mining frequent itemsets transsw 
proposed algorithm mfi transsw 
bit sequence representation 
mfi transsw algorithm 
window initialization phase 
window sliding phase 
frequent itemsets generation phase 
problem definition mining frequent itemsets timesw 
proposed algorithm mfi timesw 
time unit list bit sequences items 
mfi timesw algorithm 
window initialization phase 
window sliding phase 
frequent itemsets generation phase 
performance evaluation 
experiments mfi transsw algorithm 
experiments mfi timesw algorithm 

chapter online mining changes items data streams 
vii 
related 
problem definition mining changes items data streams 
online mining changes items distributed 
new summary data structure change sketch 
mfc append algorithm 
space analysis change sketch 
online mining changes items distributed 
performance evaluation 
synthetic data generation 
experimental results 

chapter online mining path traversal patterns web click streams 

problem definition online mining path traversal patterns 
proposed algorithm dsm plw 
construction memory summary data structure 
pruning mechanism summary data structure 
determination path traversal patterns sp forest 
performance evaluation 
experimental results synthetic data 
experimental results real data 

chapter online mining top path traversal patterns web click streams 

problem definition 
proposed algorithm dsm tkp 
effective construction summary data structure 
effective pruning summary data structure 
determination top path traversal patterns 
performance evaluation 

chapter 

summary mining frequent itemsets data streams 
summary mining frequent itemsets stream sliding windows summary mining changes items data streams summary mining path traversal patterns web click streams summary mining top path traversal patterns publication list 
vita 
viii list figures 
typical processing model data streams 

algorithm sfi forest construction 

subroutines sfi forest construction algorithm 

sfi forest construction processing transaction 

sfi forest construction processing second transaction abe 

sfi forest construction processing window wj 

sfi forest pruning infrequent items 

algorithm 

resource requirements dsm fi algorithm ibm synthetic datasets execution time memory usage 

comparison dsm fi bts execution time memory usage 

transaction sensitive sliding window time sensitive sliding window 

example transaction data stream frequent itemsets consecutive 

bit sequences items window initialization phase transsw 

bit sequences items sliding transsw transsw 

algorithm mfi transsw 

steps frequent itemsets generation transsw 

example transaction data stream frequent itemsets time sensitive sliding windows 

bit sequences items window initialization phase timesw 

bit sequences items sliding timesw timesw 

algorithm mfi timesw 

steps frequent itemsets generation mfi timesw timesw 

memory usages window initialization phases algorithms stream mfi transsw 

memory usages window sliding phases algorithms stream mfi transsw 
ix 
memory usages frequent itemset generation phases algorithms stream mfi transsw 

processing time window initialization phases algorithms stream mfi transsw different window sizes 

processing time including window sliding time pattern generation time algorithms stream mfi transsw window size transactions 

memory usages mfi timesw algorithm different phases 

processing time mfi timesw algorithm different phases 

processing model distributed data streams 

examples 

notations conventions proposed algorithms 

algorithm mfc append 

algorithm mfc dynamic 

experiments synthetic data transactions mfc append 
left recall proportion frequent change patterns reported 
right precision proportion output frequency change patterns frequent 

experiments synthetic data transactions mfc append 
left recall 
right precision 

experiments synthetic data transactions mfc append 
left recall 
right precision 

experiments synthetic data transactions mfc dynamic 
left recall 
right precision 

process online mining path traversal patterns web click streams 

algorithm sp forest construction 

subroutines sp forest construction algorithm 

sp forest processing maximal forward 

sp forest processing second maximal forward abe 

sp forest processing maximal forward 

sp forest pruning infrequent 

algorithm mining 

performance comparisons total execution time various minimum support thresholds 

performance comparisons memory usage various minimum support thresholds 

accuracy mining results 

linear scalability streaming data size 

memory usage dsm plw bms webview bms webview various minimum support thresholds 

execution time dsm plw bms webview bms webview various minimum support thresholds 

algorithm tkp forest construction 

tkp forest construction processing maximal forward abcde 

tkp forest construction processing second maximal forward acd 

algorithm tkp forest pruning 

example tkp forest 

execution time memory usage dsm tkp bms webview bms webview various values 
xi chapter background data mining referred knowledge discovery databases recognized process extracting non trivial implicit previously unknown potentially useful information knowledge large amounts data 
typical data mining tasks include association mining sequential pattern mining classification clustering 
tasks help finding interesting patterns regularities data 
traditional data mining techniques assume targeting databases disk resident fit main memory 
due complexity mining tasks data mining algorithms require scanning data times 
database knowledge discovery communities focused new model data processing data arrive form continuous streams 
referred data streams streaming data 
new data model addresses data explosion new perspectives 
arrival data streams volume data capability store 
example network traffic information router extremely important impossible record 
second data streams processing requires real time constraint 
generally need process data timely prohibits data secondary storage 
example detecting network intrusion real time necessary condition prevent damage 
new model captured large class important applications current world discovering patterns sensor data generated sensor networks analyzing transactional behaviors transaction flows retail chains mining user traversal behaviors web record click streams protecting network securities timely finding terrorist activities monitoring call records telecommunications analyzing stock business data :10.1.1.106.9846
order facilitate discussions introduce streaming data model detail 
data streams assume data elements arrive order 
amount data huge held main memory disks 
means new data element arrives processed quickly 
general period data element staying main memory quite short 
data element removed main memory available accessed 
words look data 
data mining streaming data brings new challenges 
challenge perform data mining tasks data streams 
existing data mining algorithms require scanning datasets multiple times apriori algorithm association rule mining means clustering decision tree construction 
new data model limits look data scan 
relatively small memory compared large amount streaming data results fact store concise summary partial data data stream 
getting precise results data streams commonly impossible difficult 
challenge design efficient algorithms get approximate results high accuracy confidence 
second challenge understand changes data streams 
data streams bring new useful information explore knowledge underlying distribution changed continuous data streams 
example find products retail chains popular certain regions relatively unpopular quite long time 
perform data mining tasks discover new knowledge mine changes data streams stream mining challenging 
research objectives contributions research objective dissertation investigate efficient scalable algorithms mining frequent itemsets path traversal patterns changes items continuous data streams 
research issue dissertation online mining frequent itemset data streams 
propose dsm fi data stream mining frequent itemsets algorithm find set frequent itemsets entire history data streams 
effective projection method proposed algorithm extract essential information incoming transaction data streams 
summary data structure prefix tree constructed 
dsm fi utilizes top pattern selection approach find complete set frequent itemsets 
experiments show dsm fi outperforms bts buffer trie state art single pass algorithm order magnitude discovering set frequent itemsets landmark window data streams 
mining frequent itemsets data streams sliding window propose online algorithm called mfi transsw mining frequent itemsets transaction sensitive sliding window mine set frequent itemsets streaming data transaction sensitive sliding window 
single pass algorithm called mfi timesw mining frequent itemsets time sensitive sliding window proposed mfi transsw algorithm proposed mine set frequent itemsets time sensitive sliding window 
effective bit sequence representation items proposed algorithms reduce time memory needed slide windows 
experiments show proposed algorithms attain highly accurate mining results run significantly faster consume memory existing algorithms mining frequent itemsets data streams 
second research issue thesis change mining data streams 
define new problem online mining changes items data streams propose pass algorithm called mfc append mining frequency changes append data streams mine set frequent frequency changed items frequency changed items stable frequency changed items continuous append data streams 
furthermore single pass algorithm called mfc dynamic mining frequency changes dynamic data streams mfc append proposed mine changes dynamic data streams 
new summary data structure called change sketch developed compute frequency changes data streams fast possible 
theoretical analysis experimental results show algorithms meet major performance requirements single pass bounded space requirement real time computing mining streaming data 
third issue online mining path traversal patterns web click streams 
proposed single pass algorithm called dsm plw data stream mining path traversal patterns landmark window discover path traversal patterns web click streams user defined minimum support constraint 
proposed online algorithm called dsm tkp data stream mining top path traversal patterns mine set top path traversal patterns user specified minimum support threshold 
experiments real click streams show algorithms successfully mine maximal sequences linear scalability 
proposed algorithms verified experiments mining continuous streams various characteristics 
experiments comprising comprehensive comparisons proposed algorithms outperforms related algorithms show excellent linear scalability respect size streaming data 
organization thesis rest dissertation organized follows 
chapter describe efficient pass algorithms mining frequent itemsets maximal frequent itemsets landmark window data streams 
efficient single pass algorithms mining frequent itemsets stream sliding windows delineated chapter 
chapter addresses problem mining changes items append dynamic data streams 
efficient algorithms mining path traversal patterns user specified minimum support constraint web click streams introduced chapter 
problem mining top path traversal patterns discussed chapter 
chapter 
chapter online mining frequent itemsets data streams years database knowledge discovery communities focused new data model data arrive form continuous streams 
referred data streams streaming data 
data streams possess computational characteristics unknown unbounded length possibly fast arrival rate inability backtrack previously arrived data elements sequential pass data permitted lack system control order data arrive 
applications generate data streams real time sensor data generated sensor networks transaction flows retail chains web record click streams web applications performance measurement network monitoring traffic management call records telecommunications 
online mining data streams differs traditional mining static datasets aspects 
data element streaming data examined 
second memory usage mining data streams bounded new data elements continuously generated stream 
third data element stream processed fast possible 
fourth analytical results generated online mining algorithms instantly available requested users 
frequency errors outputs generated online algorithms small possible 
online processing model data streams shown 
described continuous nature streaming data essential online algorithms require scan data streams knowledge discovery 
unbounded characteristic impossible store data main memory secondary storage 
motivates design summary data structure small footprints support time continuous queries streaming data 
words pass algorithms mining data streams sacrifice exactness analytical results allowing tolerable counting errors 
traditional multiple pass techniques studied mining static datasets feasible mine patterns streaming data 
data streams buffer 
typical processing model data streams frequent itemsets mining important research issues data mining 
problem frequent itemsets mining static datasets streaming data introduced agrawal described follows 
set literals called items 
database db set transactions transaction contains set items 
size database db total number transactions db denoted db 
set items referred itemset 
itemset items denoted xl 
support itemset number transactions db containing itemset subset denoted sup 
itemset frequent sup minsup db minsup user specified minimum support threshold range 
consequently database db user defined minimum support threshold minsup problem mining synopsis memory stream mining processor approximate results frequent itemsets static datasets find set itemsets support minsup db 
focus problem mining frequent itemsets entire history data streams 
previous studies contributed efficient mining frequent itemsets streaming data 
stream processing model research mining frequent itemsets data streams divided categories landmark windows sliding windows damped windows described briefly follows 
landmark windows model knowledge discovery performed values specific timestamp called landmark time 
sliding windows model knowledge discovery performed fixed number generated data elements target data mining 
damped windows model sliding windows important previous ones 
manku developed single pass algorithms sticky sampling lossy counting mine frequent items landmark window :10.1.1.19.8594
manku motwani proposed single pass algorithm bts buffer trie lossy counting mine set frequent itemsets fi streaming data :10.1.1.19.8594
chang lee proposed bts algorithm mining frequent itemsets sliding windows model 
chang lee developed algorithm called mining frequent itemsets streaming data transaction weight decreasing age 
words older transactions contribute itemset frequencies kind damped windows model 
teng proposed regression algorithm called ftp ds find frequent itemsets multiple data streams sliding window 
lin proposed incremental mining algorithm find set frequent itemsets time sensitive sliding window 
proposed frequent pattern tree abbreviated fp tree algorithm called fp stream mine frequent itemsets multiple time granularities novel tilted time windows technique :10.1.1.3.2424:10.1.1.14.2327
yu discussed issues false negative false positive mining frequent itemsets high speed transactional data streams 
jin agrawal proposed algorithm called core frequent itemset mining data streams 
chi proposed algorithm called moment find frequent closed itemsets fci data streams 
summary data structure called cet moment algorithm maintain information closed frequent itemsets 
focus chapter frequent mining data streams landmark window mainly address issue comparison bts algorithm proposed manku motwani :10.1.1.19.8594
describe bts algorithm detail 
bts algorithm estimated parameters minimum support threshold maximum support error threshold 
incoming data stream conceptually divided buckets width transactions current length stream denoted transactions 
bts algorithm composed steps 
step bts repeatedly reads batch buckets main memory 
second step decomposes transaction current bucket set itemsets stores itemsets summary data structure contains set entries form freq itemset freq approximate frequency itemset maximum possible error freq 
itemset extracted incoming transaction bts performs operations maintain summary data structure counts occurrences current batch updates value freq itemset exists structure second bts creates new entry freq itemset occur estimated frequency freq batch greater equal batch value maximal possible error set batch batch denotes total number transactions current batch 
bound space requirement bts algorithm deletes updated entry freq batch 
bts outputs entries ei ei freq user requests list itemsets minimum support threshold support error threshold 
motivation proposed develop method utilizes space effective summary data structures reduce cost mining frequent itemsets data streams 
efficient single pass algorithm referred data stream mining frequent itemsets abbreviated dsm fi proposed improve efficiency frequent itemset mining data streams 
new summary data structure called summary frequent itemset forest abbreviated sfi forest developed online incremental maintaining essential information set frequent itemsets data streams generated far 
proposed algorithm dsm fi important features single pass streaming data counting support significant itemsets extended prefix tree compact pattern representation summary data structure effective efficient search determination mechanism frequent itemsets 
frequency error guarantees provided dsm fi algorithm bts algorithm 
error guarantees stated follows 
itemsets true support exceeds output 
second itemsets true support output 
estimated supports itemsets true support comprehensive experiments show algorithm efficient sparse dense data scalable continuous data streams 
furthermore dsm fi algorithm outperforms bts state art single pass algorithm order magnitude discovering set frequent itemsets entire history data streams 
remainder chapter organized follows 
section defines problem single pass mining frequent itemsets landmark window data streams 
proposed dsm fi algorithm described section 
extended prefix tree summary data structure sfi forest introduced maintain essential information set frequent itemsets stream generated far 
theoretical analysis experiments section 
conclude chapter section 
problem definition estimation mechanism bts algorithm propose new single pass algorithm improve efficiency mining frequent itemsets entire history data streams user specified minimum support threshold maximum support error threshold 
im set literals called items 
itemset nonempty set items 
itemset denoted xl itemset items 
transaction consists unique transaction identifier tid set items denoted tid xq xi basic window consists transactions 
basic windows labeled window identifier wid starting 
definition data stream ds wn infinite sequence basic windows window identifier latest basic window 
current length ds written ds cl wn 
windows arrive order implicitly arrival time explicitly timestamp may seen 
mining frequent itemsets landmark windows data streams mine set frequent itemsets transactions specified window identifier called landmark current window identifier note value landmark set 
ensure completeness frequent itemsets data streams necessary store information related frequent itemsets information related infrequent ones 
information currently infrequent itemsets stored information lost 
itemsets frequent impossible correct support relationship itemsets 
data stream mining algorithms sacrifice exactness analytical results allowing tolerable support errors unrealistic store streaming data limited main memory 
define types support itemset divide itemsets embedded stream categories frequent itemsets significant itemsets infrequent itemsets 
definition true support itemset denoted number transactions data stream containing itemset subset 
estimated support itemset denoted esup estimated true support stored summary data structure esup 
definition current length cl data stream respect itemset stored summary data structure denoted cl wj wj wn wj basic window window identifier stored current summary data structure containing itemset window identifier current window 
definition itemset frequent cl itemset significant cl cl itemset infrequent cl 
definition frequent itemset maximal subset frequent itemsets generated far 
data stream ds bn user defined minimum support threshold range user specified maximum support error threshold range problem mining frequent itemsets landmark windows data streams find set frequent itemsets single scan data stream 
proposed algorithm dsm fi proposed dsm fi data stream mining frequent itemsets algorithm consists steps 
read basic window transactions buffer main memory sort items transaction lexicographical order step 
construct maintain memory summary data structure step 
prune infrequent information summary data structure step 
find frequent itemsets summary data structure step 
steps performed sequence new incoming basic window 
step performed basic window processed 
step usually performed periodically needed 
reading basic window transactions buffer straightforward shall henceforth focus steps devise algorithms effective construction maintenance summary data structure efficient determination frequent itemsets 
construction maintenance summary data structure section describe algorithm constructs maintains memory summary data structure called sfi forest summary frequent itemset forest 
definition summary frequent itemset forest sfi forest summary data structure defined follows 

sfi forest consists frequent item list fi list set summary frequent itemset trees sfi trees item prefixes denoted item prefix sfi trees 

node item prefix sfi tree consists fields item id item id esup item id window id item id node link 
field item id item identifier inserting item 
second field item id esup registers number transactions represented portion path reaching node item id value third field item id window id assigned new node window identifier current window 
final field item id node link links node node item id sfi tree null 

entry fi list consists fields item id item id esup item id window id item id head link 
item id registers item identifier entry represents item id esup records number transactions containing item carrying item id value item id window id assigned new entry window identifier current window item id head link points root node item id sfi tree 
note entry item id fi list item prefix root node item id sfi tree 

item prefix sfi tree specific opposite frequent item list ofi list respect item prefix denoted item prefix ofi list 
item prefix ofi list composed fields item id item id esup item id window id item id head link 
item prefix ofi list operates fi list field head link links node item id item prefix sfi tree 
note item prefix ofi list fi list worst case fi list denotes total number entries fi list 
outlines sfi forest construction proposed dsm fi algorithm 
dsm fi algorithm reads transaction current window bn 
dsm fi projects transaction sub transactions inserts sub transactions sfi forest 
details projection described follows 
transaction items xm current window projected inserting item prefix sub transactions sfi forest 
words transaction xm converted sub transactions xm xm xm xm xm 
sub transactions called item prefix transactions item sub transaction item prefix original transaction step called transaction projection denoted tp xi xm xi xm projecting cost transaction length constructing summary data structure sfi forest 
recall decomposing cost transaction items bts algorithm constructing summary data structure 
general constructing cost summary data structure algorithm extremely bts algorithm 
performing transaction projection incoming transaction dsm fi algorithm inserts fi list removes current window main memory 
items item prefix transactions inserted item prefixes sfi trees branches estimated support corresponding item prefixes ofi lists updated 
itemset shares prefix itemset sfi tree new itemset share prefix branch representing itemset 
addition estimated support counter associated node tree 
counter updated item prefix transaction causes insertion new branch 
shows subroutines sfi forest construction maintenance 
example 
wj window landmark identifier contains transactions abe df cef cef items data stream 
sfi forest respect transactions abe constructed dsm fi algorithm described follows 
note node form id id esup id wid composed fields item id estimated support window id example indicates basic window wj current basic window wn item appeared twice 
algorithm sfi forest construction input data stream ds bn landmark user specified minimum support threshold maximum support error threshold 
output sfi forest generated far 
fi list initialize fi list empty foreach window bj foreach transaction xm bj current window identifier foreach item xi maintenance fi list xi fi list create new entry form xi head link fi list entry form item id item id esup window id head link entry exists fi list xi esup xi esup call tp increment estimated support item id xi project transaction item prefix xi constructing xi sfi tree call sfi forest pruning sfi forest step dsm fi algorithm 
algorithm sfi forest construction subroutine tp step dsm fi algorithm construct maintain sfi forest input transaction xm current window id output xi sfi tree foreach item xi sfi tree maintenance xi xi sfi tree xm original incoming transaction xi item prefix transaction item prefix xi subroutine sfi tree maintenance step dsm fi algorithm input item prefix transaction xm current window id xi sfi tree output modified xi sfi tree foreach item xl xl xi ofi list xi ofi list maintenance create new entry form xl head link xi ofi list item id head link entry form item id item id esup item id window id entry exists xi ofi list xl esup xl esup endfor increment estimated support item id xl foreach item xi xi sfi tree maintenance sfi tree child node item id item id xi item id esup esup increment estimated support create new node form xi node link initialize estimated support new node link parent link sfi tree node link linked nodes item id node link structure 
subroutine sfi forest pruning step dsm fi algorithm prune infrequent information sfi forest input sfi forest user specified maximum support error threshold current window identifier output sfi forest contains set significant frequent itemsets 
foreach entry xi fi list fi list xi esup xi cl xi infrequent item delete xi sfi tree delete entry xi fi list delete xi xj ofi list exists xj ofi list delete nodes item id xi sfi trees node link structures merge fragmented sub trees simple way reinsert join remainder sub trees sfi tree fi list 
subroutines sfi forest construction algorithm ofi list sfi tree ofi list sfi tree ofi list sfi tree ofi list sfi tree 
sfi forest construction processing transaction fi list sfi tree ofi list ofi list sfi tree ofi list sfi tree sfi tree ofi list sfi tree ofi list sfi tree ofi list 
sfi forest construction processing second transaction abe transaction dsm fi algorithm reads transaction calls transaction projection 
dsm fi inserts item prefix transactions cdf df fi list sfi tree ofi list sfi tree ofi list sfi tree ofi list sfi tree ofi list respectively 
result shown 
steps head links item prefix ofi list omitted concise presentation 
second transaction abe dsm fi algorithm reads second transaction calls transaction projection abe 
dsm fi inserts item prefix transactions abe fi list sfi tree ofi list sfi tree ofi list sfi tree ofi list respectively 
result shown 
processing transactions window wj sfi forest generated far shown 
pruning infrequent information sfi forest apriori principle frequent itemsets construct candidate itemsets 
set candidate itemsets containing infrequent items stored summary data structure pruned 
pruning usually performed periodically needed 
maximum support error threshold range user defined minimum support threshold range 
space pruning method dsm fi item supersets deleted sfi forest esup cl entry esup window id head link fi list esup cl regarded infrequent item 
case operations performed sequence 
dsm fi deletes ofi list sfi tree infrequent entry fi list 
second dsm fi removes infrequent item ofi lists traversing fi list 
third dsm fi deletes infrequent item sfi trees reconstructs sfi trees 
pruning infrequent items sfi forest sfi forest contains set frequent itemsets significant itemsets data stream generated far 
fi list sfi tree ofi list ofi list sfi tree ofi list sfi tree ofi list sfi tree ofi list sfi tree ofi list sfi tree 
sfi forest construction processing window wj fi list sfi tree ofi list ofi list ofi list ofi list ofi list sfi tree sfi tree sfi tree sfi tree 
sfi forest pruning infrequent items example maximum support error threshold 
itemset infrequent esup cl note cl 
computing current window wj step dsm fi prune infrequent items current sfi forest 
time dsm fi deletes sfi tree ofi list item fi list item infrequent item esup 
dsm fi updates ofi list reconstructs sfi tree ofi list sfi tree contains infrequent item result shown 
step dsm fi determine set frequent itemsets sfi forest constructed far 
step performed current results data stream requested 
note number candidate itemsets performance bottleneck apriori frequent itemset mining algorithms :10.1.1.3.2424:10.1.1.40.6757
dsm fi algorithm avoid performance problem 
dsm fi generate frequent itemsets immediately combining frequent items fi list frequent items corresponding ofi list 
determining frequent itemsets current sfi forest sfi forest containing frequent items data stream generated far constructed derive frequent itemsets traversing sfi forest apriori principle 
propose efficient mechanism called top frequent itemset selection shown mining frequent itemsets 
especially useful mining long frequent itemsets 
method described follows 
assume frequent items ek current fi list item ei associated ei ofi list size ei ofi list denoted ei ofi list 
note items oj ei ofi list denoted ei ei ei oj respectively value equals ei ofi list 
entry ei current fi list dsm fi algorithm generates maximal candidate itemset items ei ei oj combining item prefix ei frequent items ei ofi list 
dsm fi uses scheme count estimated support 
start specific frequent item ei ol estimated support smallest traverse paths containing ei ol node links ei sfi tree count estimated support candidate ei ei oj 
estimated support candidate greater equal ei cl frequent itemset 
subsets frequent itemset frequent itemsets apriori principle 
complete set frequent itemsets stored ei sfi tree generated enumeration combinations subsets frequent itemset ei ei oj 
hand estimated support candidate itemset threshold ei cl frequent itemset 
need mechanism test subsets itemset candidate itemsets 
frequent itemsets generated combining item ei frequent items ei ofi list 
note itemset decomposed itemsets 
decompose candidate itemset itemset time scheme described count estimated support candidate itemset 
maximal frequent itemsets maintained temporal mfi list called list efficient generation set frequent itemsets 
list obtained frequent itemsets generated efficiently enumerating set maximal frequent itemsets current list candidate generation support counting 
note user request just find set maximal frequent itemsets far dsm fi algorithm output maximal frequent itemsets efficiently scanning list 
example 
minimum support threshold 
itemset frequent esup cl note cl case 
online mining steps dsm fi algorithm described follows 
dsm fi starts frequent itemset mining scheme frequent item left right 
moment item frequent itemset estimated support items ofi list cl cl 
dsm fi stores maximal frequent itemset list 
dsm fi starts second entry frequent itemset mining 
dsm fi generates candidate maximal itemset cef traverses sfi tree count estimated support 
result candidate cef maximal frequent itemset estimated support subset frequent itemsets list 
dsm fi stores maximal frequent itemset cef list 
dsm fi starts third entry generates candidate maximal itemset df 
dsm fi stores itemset df list traversing sfi tree df frequent itemset subset maximal frequent itemsets stored list 
fourth entry dsm fi algorithm generates frequent itemset directly ofi list empty 
dsm fi store list subset generated maximal frequent itemset cef 
fifth entry dsm fi generates frequent itemset ef directly 
frequent itemset ef subset maximal frequent itemset cef stored list 
dsm fi algorithm store list 
algorithm input current sfi forest current window identifier minimum support threshold maximum support error threshold 
output set frequent itemsets 
list list temporary list store set maximal frequent itemsets foreach entry current fi list construct maximal candidate itemset size ofi list count esup traversing sfi tree esup cl list subset patterns list add list remove subsets list frequent itemset enumerate itemsets size finds set frequent itemsets respect entry 
algorithm processing entries fi list list generated dsm fi algorithm contains set current maximal frequent cef df 
set frequent itemsets generated enumerating set cef df 
consequently set frequent itemsets cef ce cf ef df 
theoretical analysis section discuss upper bound estimated support error frequent itemsets generated dsm fi algorithm space upper bound prefix tree summary data structure 
maximum estimated support error analysis section discuss maximum estimated support error frequent itemsets generated dsm fi algorithm 
wid window id itemset stored current sfi forest 
assume window contains transactions 
maximum support error threshold 
current window id incoming stream wid 
theorem maximum estimated support error guarantee frequent itemsets generated proposed algorithm 
theorem esup wid proof prove induction 
base case wid esup 
esup wid induction step consider itemset form esup wid gets deleted wid 
itemset inserted sfi forest wid processed 
itemset window id wid fi list possibly deleted late time esup wid wid deletion occurred wid wid furthermore esup estimated true support itemset inserted 
follows true support window containing current window esup wid esup wid result dsm fi generates false negative 
algorithm false positive algorithm answers produced dsm fi guarantees bts algorithm itemsets true frequency exceeds output :10.1.1.19.8594
false negatives 
itemsets true frequency output 
estimated frequencies true frequencies desired error dose increase linearly value window id modify line algorithm esup esup 
dsm fi algorithm false negative algorithm 
note false positive approach returns set itemsets includes frequent itemsets infrequent itemsets 
false negative algorithm returns set itemsets include infrequent itemsets misses frequent itemsets 
space requirement analysis section discuss space upper bound single pass algorithm constructing summary data structure prefix tree structure 
theorem 
prefix tree summary data structure nodes storing set frequent itemsets data streams frequent items 
proof number frequent items itemsets data stream generated far 
number potential frequent itemsets regarding item regarding items regarding items regarding items apriori heuristic 
prefix tree summary data structure itemset represented path appearance support maintained node path 
nodes level nodes second level nodes th level nodes th level 
totally nodes prefix tree summary data structure 
consequently space upper bound prefix tree summary data structure 
construction cost summary data structure dsm fi algorithm extremely bts algorithm theoretically worst case space complexities frequent items 
performance evaluation experiments performed ghz ibm mb program written microsoft visual 
evaluate performance algorithm dsm fi conduct empirical studies synthetic datasets 
section report scalability study algorithm dsm fi 
section compare memory execution time requested dsm fi bts algorithm 
parameters synthetic data generated ibm synthetic data generator described follows :10.1.1.40.6757
ibm synthetic dataset 
synthetic dataset average transaction size items average size maximal frequent itemset items 
sparse dataset 
second dataset average transaction size average size maximal frequent itemset set respectively 
dense dataset 
synthetic datasets transactions 
items drawn universe distinct items 
experiments synthetic data stream broken basic windows size transactions simulating continuous characteristic streaming data 
total windows experiments 
scalability study dsm fi algorithm experiment examine primary factors execution time memory usage discover frequent itemsets data stream environment bounded online time advances 
execution time grows smoothly dataset size increases 
default value minimum support threshold 
memory usage synthetic datasets stable time progresses indicating scalability feasibility algorithm dsm fi 
notice synthetic data stream divided basic windows 
ec io im ec number incoming transactions linear scalability dsm fi algorithm usage mb memory space requirement dsm fi algorithm windows basic incoming 
resource requirements dsm fi algorithm ibm synthetic datasets execution time memory usage im sec 
dsm fi incoming transactions execution time compared dsm fi bts bts usage mb dsm fi bts memory space requirement compared dsm fi bts 
comparison dsm fi bts execution time memory usage incoming basic windows comparison bts algorithm experiment examine execution time memory usage dsm fi bts dataset 
see execution time incurred dsm fi quite steady bts 
experiment shows dsm fi performs efficiently bts algorithm 
memory usage dsm fi stable extremely bts 
shows dsm fi algorithm suitable mining frequent itemsets large scale data streams 
chapter proposed new single pass algorithm called dsm fi data stream mining frequent itemsets mines set frequent itemsets landmark model data streams 
dsm fi algorithm new memory summary data structure called sfi forest summary frequent itemset forest constructed storing frequent significant itemsets streaming data generated far 
efficient frequent itemset search mechanism called top frequent itemset selection developed find set frequent itemsets current sfi forest 
experiments tested synthetic data streams show dsm fi efficient sparse dense datasets demonstrates linear scalability long data streams 
dsm fi outperforms known single pass algorithm bts mining frequent itemsets entire history streaming data 
chapter online mining frequent itemsets stream sliding windows previous studies contributed efficient mining frequent items frequent itemsets fi streaming data 
stream processing model research mining frequent itemsets data streams divided categories landmark windows sliding windows damped windows described briefly follows 
landmark window model knowledge discovery performed values specific timestamp called landmark 
sliding window model knowledge discovery performed fixed number generated data elements target data mining 
types sliding widow transaction sensitive sliding window transsw time sensitive sliding window timesw mining data streams 
basic processing unit window sliding type expired transaction basic unit window sliding second type time unit minute hour 
sliding windows shown 
damped window model sliding windows important previous ones 
transsw mining frequent itemsets latest transactions timesw mining frequent itemsets latest time units 
transaction sensitive sliding window time sensitive sliding window manku motwani developed single pass algorithms sticky sampling lossy counting mine frequent items offline data streams landmark window :10.1.1.19.8594
manku motwani proposed bts buffer trie algorithm lossy counting mining set frequent itemsets offline data streams 
jin agrawal proposed algorithm called core frequent itemset mining online data streams 
yu discussed issues false negative false positive mining frequent itemsets high speed offline transactional data streams 
chang lee proposed bts algorithm called stream mining frequent itemsets online data streams transaction sensitive sliding windows model 
teng proposed regression algorithm called ftp ds find temporal patterns frequent inter transaction itemsets multiple online data streams time sensitive sliding window 
teng proposed resource aware algorithm called ram ds mine temporal patterns multiple online data streams time sensitive sliding window 
lin proposed incremental mining algorithm find set frequent itemsets offline data streams time sensitive sliding window 
chi proposed transaction sensitive sliding window algorithm called moment find frequent closed itemsets fci online data streams transaction sensitive sliding window 
summary data structure called cet moment algorithm maintain information closed frequent itemsets 
chang lee developed damped window algorithm called mining frequent itemsets online streaming data transaction weight decreasing age 
words older transactions contribute itemset frequencies kind damped windows model 
proposed frequent pattern tree abbreviated fp tree algorithm called fp stream mine frequent itemsets multiple time granularities novel tilted time windows technique :10.1.1.3.2424:10.1.1.14.2327
fp stream focuses offline data streams 
target chapter frequent itemsets mining online data streams transaction sensitive sliding window 
efficient algorithm called mfi transsw mining frequent itemsets transaction sensitive sliding windows proposed mine frequent itemsets online data streams transaction sensitive sliding window 
experiments show mfi transsw algorithm attain highly accurate mining results run significant faster consume memory stream algorithm mining frequent itemsets data streams 
second purpose chapter mine frequent itemsets online data streams time sensitive sliding window 
mfi transsw algorithm called mfi timesw mining frequent itemsets time sensitive sliding windows developed mining frequent itemsets online data streams time sensitive sliding window 
remainder chapter organized follows 
problem frequent itemsets mining transaction sensitive sliding window defined section 
algorithm mfi transsw proposed section 
experiments mfi transsw algorithm discussed section 
issue mining time sensitive sliding window defined algorithm mfi timesw proposed section section respectively 
conclude chapter section 
problem definition mining frequent itemsets transsw im set items 
transaction tid xn xi set items called size transaction tid unique identifier transaction 
itemset non empty set items 
itemset size called itemset 
transaction data stream tds tn continuous sequence transactions tid latest incoming transaction tn 
transaction sensitive sliding window transsw transaction data stream window slides forward transaction 
window slide fixed number transactions called size window 
current transaction sensitive sliding window tn tn tn window id current transsw 
support itemset transsw denoted sup transsw number transactions transsw containing subset 
itemset called frequent itemset fi sup transsw user defined minimum support threshold mst range 
value called frequent threshold transsw ft transsw 
transaction sensitive sliding window transsw mst problem online mining frequent itemsets transaction data streams mine set frequent itemsets scan transsw 
transaction data stream fis transsw fis transsw acd bce abce ac bc ce bce transaction data stream formed transactions arriving series bc ce bce 
example transaction data stream frequent itemsets consecutive example transactions transaction data stream acd bce abce transactions items 
size sliding window user defined minimum support threshold 
transaction data stream consists transaction sensitive sliding windows transsw transsw window transsw contains transactions second window transsw contains transactions 
example shown 
frequent itemsets transsw ac bc ce bce frequent itemsets transsw bc ce bce 
instance find itemsets ac frequent itemsets transsw frequent ones transsw 
proposed algorithm mfi transsw section proposed efficient single pass algorithm called mfi transsw mining frequent itemsets transaction sensitive sliding window mine set frequent itemsets data streams transaction sensitive sliding window 
effective bit sequence representation items proposed algorithm reduce time memory needed slide windows 
bit sequence representation proposed mfi transsw algorithm item current transaction sensitive sliding window transsw bit sequence bits denoted bit constructed 
item th transaction current transsw th bit bit set set 
process called bit sequence transform 
example sliding window transsw consists transactions acd bce abce transsw consists transactions bce abce 
item appears st rd transactions transsw bit sequence bit 
similarly bit bit bit bit 
mfi transsw algorithm mfi transsw algorithm consists phases window initialization phase window sliding phase frequent itemsets generation phase 
window initialization phase phase activated number transactions generated far transaction data stream equal user predefined sliding window size phase item new incoming transaction transformed bit sequence representation 
instance sliding window transsw contains transactions 
bit sequences items transsw window initialization phase shown 
window id transactions bit sequences items transsw transsw acd bce abce bce abce bit bit bit bit bit bit bit bit bit bit 
bit sequences items window initialization phase transsw tid items bit sequences current transsw acd bit bit bit bce bit bit bit bit bit abce bit bit bit bit bit 
bit sequences items sliding transsw transsw window sliding phase phase activated sliding window transsw full 
new incoming transaction appended sliding window oldest transaction removed window 
removing oldest information efficient method proposed algorithm 
bit sequence representation mfi transsw algorithm uses bitwise left shift operation remove aged transaction set items current sliding window 
sliding window effective pruning method called item prune improve memory usage 
pruning approach item current transaction sensitive sliding window dropped sup transsw 
example fourth transaction processed transaction removed current window bitwise left shift set items 
bit modified 
similarly bit bit bit bit 
new transaction processed bit sequence transform 
result shown 
note item dropped bit sup transsw 
algorithm mfi transsw input tds transaction data stream user defined minimum support threshold range user specified sliding window size 
output set frequent itemsets fi output 
transsw null transsw consists transactions repeat incoming transaction ti transsw transsw full bitwise shift bit sequences items transsw item ti bit sequence transform bit sequence bit transsw sup drop transsw frequent itemsets generation phase 
phase performed fi frequent itemsets fik null cik fik requested users 
bitwise find supports cik candidate ck cik fi output sup ck transsw fik ck cik sup ck transsw 
algorithm mfi transsw transactions transsw bce abce bit sequences transsw bit bit bit bit fi transsw sup bit bit bit ci sw fi transsw sup bc bit bit bit bit ce bit bit bc bit bc bit ce bit ce ci transsw fi transsw sup bce bit bc bit bit ce bce bit bce 
steps frequent itemsets generation transsw frequent itemsets generation phase phase performed date set frequent itemsets requested 
phase mfi transsw algorithm uses level wise method generate set candidate itemsets cik candidate itemsets items pre known frequent itemsets fik frequent itemsets items apriori property step called candidate itemset generation apriori property :10.1.1.40.6757
proposed algorithm uses bitwise operation compute support number bit candidates order find frequent itemsets fik 
candidate generation testing process stops new candidates items cik generated 
mfi transsw algorithm shown 
instance consider bit sequences transsw minimum downward closure property pattern frequent sub patterns frequent 
support threshold 
itemset frequent sup transsw 
discuss step frequent itemset mining transsw 
generated patterns shown 
mfi transsw algorithm generates candidate itemsets bc ce combining frequent itemsets bit sup bit sup bit sup 
itemset infrequent itemset bit sup 
candidates frequent itemsets bitwise operations count supports candidates 
bit bc support candidate itemset bc sup bc 
similarity sup sup ce 
second mfi transsw generates candidate itemset bce apriori property uses bitwise operation count sup bce bit bc bit bit ce 
new candidates generated generation test process stops 
frequent itemsets bc ce bce generated mfi transsw algorithm transsw 
process shown 
problem definition mining frequent itemsets timesw im set items 
itemset non empty set items 
itemset size called itemset 
transaction data stream tds tn continuous sequence transactions transaction identifier latest incoming transaction tn 
transaction tid itemset identifier time unit tid identifier transaction 
time sensitive sliding window timesw transaction data stream window slides forward time unit tu 
time unit tui consists variable number tui transactions tui called size time unit 
current time sensitive sliding window time units tun tun tun id time unit current timesw latest time unit tun 
window slide fixed number time units 
value tun tun tun called size time sensitive sliding window denoted timesw 
support itemset timesw denoted sup timesw number transactions timesw containing subset 
itemset called frequent itemset fi sup timesw timesw user defined minimum support threshold mst range 
value timesw called frequent threshold timesw ft timesw 
time sensitive sliding window timesw mst problem online mining frequent itemsets transaction data streams mine set frequent itemsets scan timesw 
example size time sensitive sliding window user defined minimum support threshold 
records transactions arrive stream successive windows timesw timesw 
window timesw contains transactions frequent threshold ft 
second window timesw contains transactions ft 
frequent itemsets timesw bc ce frequent itemsets timesw ac ae ce 
transaction data stream fis timesw fis timesw tu tu bce tu bce tu acd tu abce tu abce tu ace tu bcde tu cde ac bc ce bce ac ae ce 
example transaction data stream frequent itemsets time sensitive sliding windows proposed algorithm mfi timesw mfi transsw algorithm time sensitive sliding window algorithm mfi timesw mining frequent itemsets time sensitive sliding window proposed section 
timesw time unit list bit sequences items mining frequent itemsets time sensitive sliding window time unit list tu list developed mfi timesw algorithm 
tu list consists list time unit entries time unit entry records size time unit tu list tun tun tun 
bit sequence transform process mfi timesw algorithm described follows 
item current time sensitive stream sliding window bit sequence bits denoted bit timesw constructed 
item th transaction th bit bit timesw set set 
timesw example sliding window timesw consists transactions tu tu bce tu bce tu acd tu abce tu abce tu ace second window timesw consists transactions tu acd tu abce tu abce tu ace tu bce tu cde 
item appears fourth fifth sixth seventh transactions timesw bit sequence bit timesw 
similarly bit timesw bit timesw bit timesw bit timesw 
sliding time unit timesw set bit sequences items changed bit timesw bit timesw bit timesw bit timesw bit timesw 
mfi timesw algorithm mfi timesw algorithm composed phases window initialization phase phase window sliding phase phase frequent itemsets generation phase phase 
window initialization phase window initialization phase mfi timesw algorithm activated number time units generated far transaction data stream equal user predefined time sensitive sliding window size time units 
phase item new incoming transaction transformed bit sequence representation bit timesw example sliding window timesw contains transactions 
bit sequence transform items timesw shown 
window sliding phase window sliding phase mfi timesw algorithm activated sliding window timesw full timesw contains time units 
new time unit tun appended time sensitive sliding window oldest time unit tun removed window 
removing oldest information efficient method proposed algorithm 
bit sequence representation mfi timesw algorithm uses bitwise left shift operation remove aged time unit current time sensitive sliding window 
aged time unit tun contains transactions mfi timesw performs times bitwise left shift operation current sliding window 
sliding window effective pruning method called item prune improve memory usage 
pruning approach item current time sensitive sliding window dropped sup timesw 
example processing fourth time unit consists transactions tu bcde tu cde time unit tu consists transactions removed current timesw bitwise left shift operation set items 
bit timesw changes 
similarly bit timesw changes bit timesw changes bit timesw changes bit timesw changes 
new time unit tu processed bit sequence transform 
bit timesw changes bit timesw changes bit timesw changes bit timesw changes bit timesw changes 
result shown 
frequent itemsets generation phase frequent itemsets generation phase mfi timesw algorithm performed requested users 
phase mfi timesw uses method mfi transsw algorithm generate set candidate itemsets cik candidate itemsets items frequent itemsets fik frequent itemsets items 
proposed algorithm uses bitwise operation compute support number bit candidates order find frequent itemsets fik 
candidate generation testing process stops new candidates items cik generated 
mfi timesw algorithm shown 
example consider bit sequences timesw minimum support threshold 
itemset frequent timesw sup timesw 
discuss steps frequent itemsets generation timesw 
generated frequent itemsets shown 
tid items bit sequences items timesw bit bit bce bit bit bit bce bit bit bit acd bit bit bit bit bit abce bit bit bit bit bit abce bit bit bit bit bit ace bit bit bit bit bit 
bit sequences items window initialization phase timesw 
bit sequences items sliding timesw timesw mfi timesw algorithm generates candidate itemsets ab ac ae bc ce combining frequent itemsets 
itemset infrequent itemset bit timesw sup timesw 
candidates frequent itemsets bitwise operations count supports number candidates 
support itemset ab bit ab timesw 
similarity sup ac timesw sup ae timesw sup bc timesw sup timesw sup ce timesw 
frequent itemsets ac bc ce 
algorithm mfi timesw input tds transaction data stream tu list time unit list user defined minimum support threshold range user specified sliding window size time units 
window id transactions bit sequences items timesw tu tu bce tu bce tu acd tu abce tu abce tu ace timesw tu acd tu abce tu abce tu ace tu bcde tu cde bit bit bit bit bit bit bit bit bit bit output set frequent itemsets fi output 
timesw null timesw consists time units repeat id current time unit new time unit tun tds timesw full tun times bitwise shift operation bit sequences items timesw transaction ti tun item ti bit sequence transform bit sequence bit timesw sup drop timesw frequent itemsets generation phase 
phase performed requested users 
fi frequent itemsets fik null cik fik bitwise find supports cik candidate ck cik sup ck timesw timesw fik ck cik sup ck timesw timesw fi output 
algorithm mfi timesw candidate itemsets ace bce generated mfi timesw apriori property 
bitwise operation count supports ace bce respectively itemset bce frequent itemset 
new candidates generated candidate generation testing process stops 
consequently frequent itemsets ac bc ce bce generated mfi timesw algorithm timesw 
process shown 
transactions timesw bce bce acd abce abce ace bit sequences timesw bit bit bit bit bit fi timesw ft bit bit bit bit ci timesw fi timesw sup ab bit bit ac bit bit ae bit bit bc bit bit bit bit ce bit bit ac bit ac bc bit bc bit ce bit ce ci timesw fi timesw sup bce bit bc bit bce bit bce bit ce 
steps frequent itemsets generation mfi timesw timesw performance evaluation section report experimental results proposed algorithm mfi transsw 
programs implemented microsoft visual version performed ghz pentium pc machine mb memory running windows 
testing frequent itemsets mining sliding windows generate online data streams ibm synthetic data generator proposed agrawal srikant 
synthetic data stream denoted size transactions average transaction size items average maximal frequent itemset size items 
sup experiments transactions looked sequence simulate environment online data stream 
experiments mfi transsw algorithm section compare results mining stream algorithm mfi transsw algorithm 
experiments memory usage shown figures processing times shown figures 
minimum support threshold size sliding window set respectively 
shown experiments mfi transsw significantly outperforms stream memory consumption cpu cost 
shows memory usage window initialization phase 
shown mfi transsw algorithm requires mb window initialization phase memory requirement stream increases linearly mb mb 
shows memory usage window sliding phase 
phase memory requirement mfi transsw approximately mb stream mb mb 
gives memory usage frequent itemsets generation phase 
phase memory requirement mfi transsw mb mb 
shown figures mfi transsw algorithm outperforms stream memory consumption 
shows processing time window initialization phase different window sizes transactions transactions 
shows total time window sliding time pattern mining time transactions various window sizes transactions transactions 
shown figures mfi transsw algorithm outperforms stream processing time consumption 
mfi transsw stream mb usage memory 
memory usages window initialization phases algorithms stream mfi transsw size window transactions incoming memory usage mb stream mfi transsw 
memory usages window sliding phases algorithms stream mfi transsw nd rd th th th th th th th incoming sliding windows st memory usage mb stream mfi transsw 
memory usages frequent itemset generation phases algorithms stream mfi transsw nd rd th th th th th th th incoming sliding window st time sec 
stream mfi transsw 
processing time window initialization phases algorithms stream mfi transsw different window sizes size window time sec 

processing time including window sliding time pattern generation time algorithms stream mfi transsw window size transactions mfi transsw stream transactions incoming usage mb phases phases memory tu tu tu tu tu tu tu tu tu tu 
memory usages mfi timesw algorithm different phases incoming time units window size time sec 
phases phases 
processing time mfi timesw algorithm different phases tu tu tu tu tu tu tu tu tu incoming time units tu experiments mfi timesw algorithm proposed mfi timesw algorithm single pass approach mining frequent itemsets online data streams time sensitive sliding window report experimental results mfi timesw section 
experiments memory usage proposed algorithm mfi timesw shown processing time algorithm shown 
minimum support threshold set 
order simulate time sensitive sliding window online data streams size time sensitive sliding window set tu tu tu tu tu tu tu tu tu tu 
note transactions equals transactions 
shows memory usage phases window initialization phase window sliding phase phases window initialization phase window sliding phase frequent itemsets generation phase mfi timesw algorithm 
shown memory usage mfi timesw increased linearly window size increased 
shows processing time phases window initialization phase window sliding phase phases window initialization phase window sliding phase frequent itemsets generation phase mfi timesw algorithm 
shown processing time phases mfi timesw increased linearly window size increased 
chapter proposed efficient pass algorithms called mfi transsw mfi timesw mining frequent itemsets online data streams transaction sensitive sliding window time sensitive sliding window respectively 
experiments show proposed algorithms attain highly accurate mining results run significant faster consume memory existing algorithms mining frequent itemsets online data streams 
chapter online mining changes items data streams data streams gaining prominence growing number emerging applications advanced analysis mining data streams increasingly important 
studies mining data streams ask essential question distinct features mining data streams compared mining kinds data 
online mining changes data streams core issues 
chapter propose new interesting research problem propose efficient algorithms problem 
motivation problem online mining changes items distributed data streams comes context online transaction flows large organizations 
companies generate millions records day 
example google handles millions searches produces call records consists thousands branch stores records transactions single day 
computation model distributed data streams data stream processor memory summary data structure major components distributed data streaming environment 
streams questions sequences transaction data composed records form store id timestamp transaction id items 
words transaction record purchasing log generated customer specific time store 
transaction flows sent server interested finding frequent frequency changes items pairs data streams purchased customers period time 
note buffer mechanism optionally set temporary storage transactions transaction data streams 
chapter study problem online mining frequent frequency changes items pairs continuous high volume open ended data streams 
types frequency change defined frequent changed item fci short frequent changed item short stable frequent changed item short 
new summary data structure called change sketch developed store essential information pairs data streams 
mfc append mining frequency changes append data streams algorithm proposed find changes append data streams 
mfc dynamic algorithm mfc append developed find changes dynamic data streams 
best space bound achieve size union data streams size working bucket frequent changed items mining 
proposed algorithms take log time worst case process new data element amortized time data element 
remainder chapter organized follows 
review related section formulate problem section 
algorithms mfc append mfc dynamic described section 
performance evaluation section 
conclude section 
data streams buffer 
processing model distributed data streams synopsis memory stream mining processor approximate results related change mining static datasets studied years 
ganti proposed framework quantify deviation induced models decision tree classifiers clusters frequent itemsets large datasets 
quantitative measure amount required transform model 
dong proposed algorithm find emerging patterns patterns characterize changes dataset 
liu proposed method discover changes new data respect old data old decision tree models generate exact changes occurred user 
studies focused effects data changes data mining models algorithms chapter focused problem measuring understanding changes data directly measuring effects data mining models 
problem definition mining changes items data streams im set literals called data items items short 
data stream infinite sequence data items items arrive order may seen 
referred item stream 
item stream model focus performance issues workspace required main memory measured function input union size data streams time process incoming data item streams 
chapter assume data arrives unordered form value appear multiple times streaming data 
termed unordered cash register unordered aggregated model :10.1.1.106.9846
streaming data items various domains arrive particular order pre processing 
definition 
data stream called append data stream ads short updates deletions 
data stream called dynamic data stream dds short removal addition data items 
definition 
parallel item streams pi qj time varying data rates pi qj 
frequency data item item stream time period number items occurs denoted frequency 
size total number data items far definition 
changed support data item difference frequency data streams divided total data items observed denoted 
definition 
changed rate data item number frequency vibration divided total time points observed denoted time point basic unit time system collects data second minute 
frequency vibration ratio frequency change exceeds user specified threshold rate 
research assume rate simplicity frequency vibration frequency change positive negative vice versa 
definition 
data item called frequent frequency changed item short mcs mcs user defined minimum changed support threshold range 
sub frequent frequency changed item short ase mcs ase user defined approximate support error threshold range mcs 
infrequent frequency changed item short ase 
definition 
data item time period called frequency changed item short changed rate changed support greater equal user defined minimum changed rate shot ase respectively 
stable frequency changed item short changed rate user specified maximal changed rate short mcs real number range 
example time points starting time point current time point assume 
data item items 
goal chapter find changes items pairs data streams ads dds 
frequency difference increasing time timepoints 
examples online mining changes items distributed section new summary data structure called change sketch developed maintain essential information set embedded data streams 
deterministic single pass algorithm mfc append mining frequency changes append data streams proposed find changes items pairs data streams 
proposed algorithm uses space size union estimated data streams size working bucket 
new summary data structure change sketch proposed memory summary data structure change sketch list entries form count wid rate data item streams count integer representing estimated support value wid assigned new entry window identifier current window rate number frequency vibration item item stored current change sketch count ase id wid window size ase 
note parameter ase acronym user specified approximate support error threshold 
operations maintain change sketch update change entry count wid rate change sketch mfc append increases count computing frequency changes current window 
updated entry takes place frequency vibration rate increased 
changed support updated entry user specified minimum changed support threshold mcs entry deleted current change sketch 
new change item change sketch changed support larger equal threshold ase id wid new entry form id created current change sketch 
mfc append algorithm algorithm mfc append uses notations conventions illustrated 
framework mining changes items data streams streaming data divided fixed sized buckets bi bn bn latest bucket bucket identifier oldest 
note bucket contains items 
bucket length bi bj denoted tn timepoints smallest unit time group buckets far streams tn timepoint oldest 
form bucket bi ti items ti timepoint items appeared stream identifier 
window id ti denoted wi number buckets arrived ti ti wi number items size wi denoted wi 
size buckets arrived equals wk wk wn described goal find set time period tk tk tn pair input data streams divided sequences basic windows bp bp bpi bpi bpi wm bq bq wm 
notation wi denotes buckets data stream id arrived timepoint ti current bucket id denoted note 
example buckets window buckets bp bp stream buckets bq bq bq stream batch buckets timepoints stream stream batch buckets bp bp bp bp bp bp qi increasing time 
notations conventions proposed algorithms current timepoint data elements seen algorithm description mfc append shown 
parameters mfc append algorithm mcs ase mcs acronym minimum changed support threshold ase acronym approximate error support threshold acronym maximum changed rate acronym minimum changed rate 
moment list estimated changed supports changed rates generated proposed algorithm 
approximate answers list guarantees 
items changed support exceed mcs output false negative 
second items changed support ase mcs output 
third estimated changed supports true changed supports ase items changed rate exceed mcr mcr output respectively 
algorithm mfc append input continuous append data streams pn qn time varying data rate user defined approximate support error threshold ase window size ase user defined minimum changed support threshold mcs user specified maximum changed rate user specified minimum changed rate 
output list 
change sketch repeat bucket data streams item wi bi change sketch count wid rate item wi bi change sketch count wid rate change sketch count wid rate count mcs wid item frequent frequency change pattern change sketch count ase wi preserve change sketch remove change sketch wi change symbol positive frequency negative negative positive rate 
algorithm mfc append maintenance process change sketch described follows 
window identifier current window initially change sketch empty 
item current window item stream mfc append checks change sketch see entry id exists 
entry exists current change sketch frequency count increased 
new entry form created current change sketch 
processing items wk stream mfc append computes items wk stream maintain changed information change sketch 
computation checks change sketch see entry exists change sketch 
search succeeds proposed algorithm updates entry id decreasing frequency count 
new entry form created current change sketch 
updated entry take place frequency vibration rate increased zero 
order bound memory usage mining changes items data streams pruning mechanism change sketch proposed 
technique deletes entries change sketch mfc append computes working window window id 
trade accuracy outputs memory requirement change sketch 
pruning described follows 
entry form count wi rate deleted count ase id wid 
pruning mfc append computes working windows window id wk data streams way described 
user requests results set embedded data streams mfc append algorithm outputs entries count mcs id wid rate id wid rate id wid respectively scan current change sketch 
space analysis change sketch section prove mfc append algorithm uses space denotes current length estimated data streams ase size working bucket 
theorem space requirement mfc append algorithm 
proof id current window id id size working bucket 
ci denote number items change sketch window id id 
size working bucket get constraints ici km id 
claim ci id 
prove inequality induction claim true prove inequality directly 
assume inequality true prove assumption implies true add inequality instances inequality ici ci ci ci jm cj jcj cj jm 
jc jc jcj jcj jm ci jm rearrangement get ci jm inequality complete induction 
change sketch log id log 
easily simplified ci inequality get change sketch note ase space effectively log 
set ase small requires time log 
occurs items total time log 
online mining changes items distributed section mfc append algorithm called mfc dynamic mining frequency changes dynamic data streams proposed mine set dynamic data streams 
note data stream called dynamic data stream dds short removal addition data items 
effective encoding method proposed algorithm distinguish inserted items deleted items described follows 
item inserted item mfc dynamic encodes positive item denotes deleted items encoded negative item denotes processing encoding mfc append algorithm find set dynamic data streams 
presents description mfc dynamic algorithm 
interpretation mfc dynamic space usage guarantee similar theorem follows 
claim 
deletions item occurs frequency deleted frequency frequency deleted frequency item needed drop 
claim 
item change sketch count ase id wid 
theorem 
space requirement mfc dynamic algorithm 
proof pruning rule items frequency larger updated windows age pruned 
items survived window gives track 
know inequality performance evaluation synthetic data generation upper bound number items keeping log result follows directly 
experiments mfc append generated datasets transactions single item searched frequent frequency changes varying zipf parameter uniform highly skewed ase 
order evaluate algorithm mfc dynamic generation approach synthetic data 
generated data consists parts sequence insertions distributed uniformly small range sequence insertions drawn zipf distribution varying parameter sequence deletions distributed uniformly range starting sequence 
examine mfc dynamic fourth dataset transactions single item zipf parameter ase 
algorithm mfc dynamic input dynamic data streams cn dn time varying data rate minimum change support threshold mcs approximation support error threshold ase maximum change rate threshold minimum change rate threshold 
output list change patterns qi qj dynamic data streams 
dynamic encode items mfc append mcs ase procedure dynamic encode items bucket wci stream bucket stream item inserted item endfor set positive item set negative item 
algorithm mfc dynamic experimental results experimental testing results shown threshold mcs ase mcs 
computed recall precision mfc append results shown 
see mfc append algorithm excellent precision recall synthetic data transactions recall decreases parameter ase increases precision increases ase decreases 
important observation zipf parameters affect recall precision mfc append 
see mfc append precision recall synthetic data transactions 
see mfc append precision recall synthetic data transactions 
ec ll recall synthetic data zipf parameter rec io precision synthetic data zipf parameter 
experiments synthetic data transactions mfc append 
left recall proportion frequent change patterns reported 
right precision proportion output frequency change patterns frequent recall synthetic data zipf parameter 
experiments synthetic data transactions mfc append 
left recall 
right precision ca ll recall synthetic data zipf parameter 
experiments synthetic data transactions mfc append 
left recall 
right precision re re cision precision synthetic data zipf parameter precision synthetic data zipf parameter ca ll recall synthetic data 
experiments synthetic data transactions mfc dynamic 
left recall 
right precision see mfc dynamic similar experimental results algorithm mfc append 
recall increases ase decreases precision decreases ase increases various zipf parameters influence recall precision mfc dynamic 
zipf parameter chapter propose single pass algorithms called mfc append mfc dynamic mining frequent frequency changed items frequency changed items stable frequency changed items continuous append dynamic data streams respectively 
new summary data structure called change sketch developed store essential changed patterns data streams 
space complexity change sketch proposed algorithms take log time worst case compute newly arrived item amortized time item 
experimental re precision synthetic data zipf parameter results show algorithms linear scalability high accuracy analytical outputs 
chapter online mining path traversal patterns web click streams mining path traversal patterns important research issues web usage mining 
problem mining path traversal patterns large static web click dataset multiple pass algorithms fs full scan ss selective scan proposed chen 
multiple pass algorithms fs ss feasible mine set path traversal patterns streaming web click sequence environment 
chapter modified path traversal pattern mining problem proposed chen new research problem web usage mining 
cooley srivastava surveyed major technical advances research problems web data mining 
general web data mining divided categories web structure mining web content mining web usage mining 
goal web structure mining generate structural summary web site web page 
goal web content mining describe automatic search information resource available online discover web data content 
web usage mining process automatic discovery user navigation patterns web server logs 
section brief review web user navigation pattern mining described follows 
chen defined problem mining path traversal patterns large web log dataset 
algorithms fs full scan ss selective scan proposed 
algorithms level level methods apriori approach discover maximal sequences static web click dataset :10.1.1.40.6757
fs ss mine path traversal patterns static web log dataset efficiently feasible mining streaming web click sequences 
fs ss algorithms need scan dataset twice 
spiliopoulou proposed navigation pattern discovery miner called wum web utilization miner proposed algorithm building aggregating tree static web logs 
wum mines web access patterns mint mining language 
borges levene proposed model hypertext captures user navigation behavior patterns 
set user navigation sessions modeled hpg hypertext probabilistic grammar set strings generated higher probability correspond navigation trials preferred users 
pei proposed wap tree web access pattern tree store frequent web page sequences user navigation behaviors proposed efficient pattern growth wap mine algorithm mine web access patterns wap tree 
wap mine pass algorithm 
shan li proposed pass algorithm fast walk mine web traversal walks 
web traversal walk structural sequence forward backward traversal paths 
fast walk algorithm extended prefix tree structure constructed main memory web logs frequent web traversal walks generated memory tree structure efficiently 
suggested hypotheses help improve retention web site proposed decision trees web user behaviour analysis 
decision tree package showed reasonable computational performance accuracy 
xing shen proposed efficient algorithms uam user access matrix pnt preferred navigation tree concepts selection time preference mining user preferred navigation patterns 
considering web site topology uam algorithm obtain user preferred access paths page page transition statistics users behaviours 
pnt similar wap tree 
node pnt records support frequency time user visiting node route preference represents users prefer visiting node previous nodes 
web prefetching prediction requests important applications web usage mining 
chen proposed popularity ppm prediction partial match model web prefetching 
popularity mode uses grades grades rank url access patterns builds patterns predictor tree aid web prefetching 
popularity ppm uses popular urls root nodes space optimizations completed tree removing non root nodes nodes accessed 
schechter introduced path profiles describing request behavior proposed algorithm creating path profiles efficiently 
association rule sequential pattern mining algorithms common mining web visitors behaviours :10.1.1.127.3113
agrawal srikant proposed known apriori property nonempty subsets frequent itemset frequent developed multiple pass algorithms property mining frequent itemsets candidate generation testing approaches :10.1.1.40.6757
han proposed prefix tree structure fp tree frequent pattern tree pass pattern growth algorithm fp growth discover set frequent itemsets generating candidate itemsets :10.1.1.3.2424
za ane proposed data structure called cats tree compressed arranged transaction sequence tree extension fp tree discover set frequent itemsets 
cats tree prefix tree structure contains elements fp tree including header item links pei proposed pass pattern growth algorithm prefixspan prefix projected sequential pattern mining mine sequential patterns 
prefixspan finds frequent sequences length sequential patterns scanning sequence database 
database projected smaller datasets frequent sequences 
set sequential patterns recursively growing subsequence fragments projected database 
prefixspan discovers sequential patterns efficiently cost disk high due creation processing projected sub databases 
pass algorithm prefixspan practical mining streaming data 
lin lee proposed memory indexing algorithm memory indexing sequential pattern mining fast discovery sequential patterns 
reads data sequences memory pass memory store sequences 
discovers sequential patterns recursive find index technique 
single pass algorithm feasible mining patterns streaming data 
incremental mining algorithm data stream continuous sequence data elements 
chapter efficient single pass algorithm called dsm plw data stream mining path traversal patterns landmark window proposed mine set path traversal patterns landmark window online continuous stream web click sequences 
purpose mining patterns landmark window data streams discover patterns entire history data streams 
effective memory summary data structure called sp forest summary path traversal pattern forest proposed storing essential information frequent sequences stream far 
set maximal sequences path traversal patterns determined sp forest depth search mining mechanism called mining maximal sequence mining 
best knowledge study online single pass mining path traversal patterns streaming web click sequences 
remainder chapter organized follows 
problem defined section 
section describe proposed algorithm dsm plw 
theoretical analysis performance results section 
conclude chapter section 
problem definition online mining path traversal patterns infinite sequence web clicks web click wc consists web user identifier uid web page accessed user wc uid 
environment segment web click stream arrived timestamp ti divided set web click sequences click sequences short 
example fragment stream ti arrived timestamp ti divided click sequences abcde user identifiers web users accessed users 
web click sequence cs consists sequence forward backward accessed web user 
backward means revisiting previously visited user 
maximal forward mfr forward path backward 
click sequence backward divided maximal forward 
example click sequence divided abc ae second backward click sequence 
map problem mining path traversal patterns finding frequent occurring consecutive sequences called sequences rss maximal forward 
estimated support esup sequence rs denoted rs esup number maximal forward stream containing rs substring 
sequence rs called frequent sequence rs esup user defined minimum support threshold range current length stream number maximal forward far 
sequence sn called super sequence sequence rk exists si rj frequent sequence called maximal frequent sequence abbreviated maximal sequence context chapter substring frequent sequences 
consequently problem online single pass mining path traversal patterns landmark window web click sequence streams mine maximal sequences scan continuous stream maximal forward value minimum support threshold 
web click streams buffer click streams maximal forward generator buffer web click sequence generator click sequence streams mrf generator maximal forward streams memory summary data structure single pass path traversal patterns mining algorithms approximate path traversal patterns 
process online mining path traversal patterns web click streams proposed algorithm dsm plw process mining path traversal patterns web click streams shown 
algorithm dsm plw data stream mining path traversal patterns landmark window composed steps 
read basic window consists fixed sized maximal forward buffer main memory step 
construct memory summary data structure processing incoming basic window step 
prune maintain summary data structure step 
find set path traversal patterns current summary data structure step 
steps performed sequence new basic window 
steps usually performed periodically needed 
step straightforward shall henceforth focus steps devise algorithms effective construction maintenance summary data structure efficient determination set path traversal patterns 
construction memory summary data structure section new memory summary data structure called sp forest summary path traversal pattern forest proposed store essential information path traversal patterns incoming basic window efficient algorithm proposed construct summary data structure 
running example illustrate 
definition summary path traversal pattern forest abbreviated sp forest prefix tree summary data structure defined 

sp forest consists list frequent denoted fr list rk ri esup set path traversal pattern tree abbreviated path tree ri denoted ri path tree 
node ri path tree consists fields fr id esup mfr id node link fr id identifier incoming forward esup registers number maximal forward represented portion path reaching node fr id value mfr id assigned new node identifier current maximal forward node link links node node id sp forest null id 

entry ri fr list consists fields fr id esup mfr id head link fr id registers forward identifier entry represents esup records number maximal forward stream far containing identifier fr id mfr id assigned new entry identifier current maximal forward head link pointer pointing root node fr id path tree 
gives sp forest construction algorithm 
dsm plw algorithm reads maximal forward rj rm buffer maintains sp forest mfr projection 
maintenance process described follows 
rj rj exists current fr list estimated support rj esup increased 
new entry form rj rj created fr list 
note notation rj indicates head link rj current mfr identifier 
projected suffix maximal forward denoted rs order 
step called maximal forward projection denoted mfr projection rj rm rj rm example maximal forward projected suffix maximal forward cdef def ef 
note cost maximal forward projection 
rs prefix ri inserted respective ri path tree branches 
rs mfr shares prefix mfr path tree new mfr share prefix branch representing mfr 
addition estimated support counter associated node path tree 
counter updated suffix maximal forward causes insertion new branch 
shows subroutines sp forest construction maintenance 
algorithm sp forest construction input stream maximal forward mfr mfr user defined minimum support threshold 
output sp forest far 

fr list initialize fr list empty 
foreach rk identifier current mfr 
foreach rj 
rj fr list 
create new entry form rj rj fr list 

rj esup rj esup 

call mfr projection rj 


call sp pruning sp forest 
algorithm sp forest construction subroutine mfr projection input maximal forward rj rm 
output rj path tree 
foreach rj 
call path tree maintenance rj rj path tree 
subroutine path tree maintenance input suffix maximal forward rj rm rj path tree identifier current maximal forward output modified rj path tree 
foreach rl rj 
rl path tree child node id fr id rl fr id 
esup esup 

create new node form xl rl path tree 

subroutine sp pruning input sp forest user defined minimum support threshold range identifier current maximal forward output sp forest containing set path traversal patterns 

foreach entry rj fr list 
rj esup 
delete rj path tree 
delete rj fr list 
delete sub trees node fr id rl path tree 

traversing node links sp forest 
subroutines sp forest construction algorithm fr list path tree sp forest path tree path tree path tree path tree 
sp forest processing maximal forward fr list path tree sp forest path tree path tree path tree path tree path tree 
sp forest processing second maximal forward abe fr list path tree path tree sp forest path tree path tree path tree path tree 
sp forest processing maximal forward example maximal forward stream web click sequences abe cef cef df web 
sp forest respect abe constructed dsm plw algorithm shown respectively 
note dotted line arrows node links link node node fr id current sp forest 
steps demonstrated node links omitted concise presentation 
dsm plw algorithm reads maximal forward buffer projects suffix maximal forward cdef def ef 
algorithm inserts cdef def ef empty trees path tree path tree path tree path tree path tree respectively 
step results single path path tree root root root root root 
projected result shown 
dsm plw inserts result mfr projection abe abe path tree path tree path tree respectively 
abe leads path common prefix root root 
results single path path tree root 
dsm plw algorithm inserts sp forest 
time new node created path path tree changed root 
processing second maximal forward abe result shown 
processing maximal forward sp forest 
pruning mechanism summary data structure apriori principle frequent construct candidate rss sequences pass :10.1.1.40.6757
set candidates containing infrequent stored sp forest pruned 
pruning usually performed periodically needed 
user defined minimum support threshold range length web click sequence stream maximal forward 
pruning mechanism sp forest sequence super sequences deleted sp forest esup entry form fr id esup mfr id fr id fr list fr id esup mfr id regarded infrequent 
operations sequence 
dsm plw deletes fr id path tree 
second deletes id fr id fr list 
dsm plw deletes infrequent id fr id suffix paths path trees node links 
pruning infrequent sp forest sp forest contains set frequent path traversal patterns stream far 
example user specified minimum support threshold 
sequence called infrequent esup 
time esup infrequent searching current fr list 
order maintain frequent patterns sp forest dsm plw deletes path tree suffix paths path tree fr list 
result shown 
step dsm plw algorithm determine set path traversal patterns sp forest constructed far 
step performed analytical results stream requested 
fr list path tree path tree sp forest path tree path tree 
sp forest pruning infrequent path tree determination path traversal patterns sp forest assume frequent rk current fr list 
minimum support threshold range current length stream entry ri fr list dsm plw traverses ri path tree find sequences prefix ri estimated support greater depth search dfs manner 
dsm plw stores maximal sequences temporal list list 
dsm plw outputs set path traversal patterns stored temporal list 
gives path traversal pattern mining algorithm called mining maximal sequence mining 
example example illustrates mining path traversal patterns current sp forest shown 
minimum support 
mining algorithm starts path traversal pattern mining scheme fp list generates frequent sequence acd dfs 
mining adds acd list acd substring patterns stored current list 
second entry mining algorithm finds frequent sequences cd cef 
cef added list 
cd substring generated maximal sequence acd 
third entry frequent sequence df generated mining stored list 
fourth entry frequent sequence ef generated maximal sequence 
ef substring cef 
entry frequent sequence obtained maximal sequence 
substring cef 
list contains set maximal sequences path traversal patterns acd cef df 
algorithm mining input sp forest constructed far current length maximal forward user defined minimum support threshold range 
output temporal list maximal sequences list 
list 
foreach entry ri current fr list 
depth search find esup sequence prefix ri ri path tree 
esup substring frequent sequences stored list 
add list 


list 
output patterns form list 
performance evaluation 
algorithm mining evaluate performance dsm plw algorithm experiments performed 
experiments carried synthetic web traversal path data generator proposed chen 
experiments traversal tree constructed mimic web site structure starting position root node tree 
traversal tree composed internal nodes leaf nodes 
traversal path consists nodes accessed web user 
size traversal path picked poisson distribution mean equal average size paths 
node root node traversal path generated probabilistically traversal tree follows 
edge connecting internal node assigned weight 
weight corresponds probability edge accessed web user 
weight parent node assigned generally number child nodes 
probability traveling child node pi determined exponential distribution unit mean 
probability normalized sum weights child nodes equal 
path arrives leaf node move parent node backward default probability internal node aggregate probability 
detail generation synthetic traversal paths 
synthetic data streams size paths studied 
means height traversal tree average size paths 
means number paths 
traversal tree obtained height tree fanout internal node 
root node consists child nodes 
number internal nodes number leaf nodes 
experiments click sequences datasets looked sequence simulate environment data stream 
experiments performed ghz pentium processor megabytes main memory running microsoft windows 
addition programs written microsoft visual 
experimental results synthetic data evaluated effect various minimum support threshold synthetic data streams having typical value paths 
plot total execution time taken algorithm minimum support threshold ranging 
shows decreasing leads increase running time 
shows decreasing leads increase memory usage 
memory usage shown memory requirement steps dsm plw algorithm total memory requirement dsm plw algorithm steps 
measure relative accuracy dsm plw algorithm average support error ase proposed 
shows average support error mining results proposed algorithm respect fs algorithm performed synthetic streaming data varying user specified minimum support threshold generally average support error increases value increases 
assess scalability algorithm scale experiments conducted 
shows execution time dsm plw increases linearly streaming data size increases ranging 
different minimum support thresholds yield similar consistent results 
result shown exhibits linearity scale 
total execution time sec 

performance comparisons total execution time various minimum support thresholds minimum support threshold total memory usage mb mining mining minimum support threshold memory usage mb mining total mining threshold support minimum 
performance comparisons memory usage various minimum support thresholds ase 
accuracy mining results minimum support threshold total execution time sec 

linear scalability streaming data size number paths total memory usage mb total emory sage bms webview minimum support thresholds memory usage bms webview bms webview minimum support thresholds memory usage bms webview 
memory usage dsm plw bms webview bms webview various minimum support thresholds total execution tim ec 
total execution time sec 
bms webview minimum support thresholds execution time bms webview bms webview minimum support thresholds execution time bms webview 
execution time dsm plw bms webview bms webview various minimum support thresholds experimental results real data real click stream datasets bms webview bms webview contain months worth click stream data commerce web sites evaluate performance dsm plw algorithm 
real data provided blue martini software available kdd cup home page 
bms webview dataset consists items transactions 
maximum transaction size bms webview distinct items average transaction size items 
bms webview dataset consists distinct items transactions 
maximum transaction size bms webview items average transaction size items 
note item regarded transaction regarded maximal forward experiments 
experiments major factors memory execution time examined online single pass mining path traversal patterns streaming web click sequences bounded online time advances 
shown memory usage dsm plw algorithm relatively insensitive minimum support thresholds 
support decreases memory consumption dsm plw increases stably indicating feasibility proposed algorithm 
execution time dsm plw grows smoothly support decreases real datasets 
experiments show dsm plw algorithm practical scheme mine set path traversal patterns real data 
chapter new interesting research problem web usage mining online single pass mining path traversal patterns streaming web click sequences 
new single pass algorithm called dsm plw data stream mining path traversal patterns landmark window developed discover set path traversal patterns entire history continuous stream web click sequences 
proposed dsm plw algorithm effective memory summary data structure called sp forest summary path traversal pattern forest developed maintain essential information maximal sequences stream far 
set maximal sequences path traversal patterns determined sp forest depth search mechanism called mining maximal sequence mining 
experimental results show dsm plw meet performance requirements data stream mining single pass bounded space real time 
chapter online mining top path traversal patterns web click streams chapter study problem mining top path traversal patterns web click streams 
framework dsm plw algorithm discussed chapter requires user specified minimum support threshold minsup mines path traversal patterns estimated support values higher minimum support threshold 
unfortunately setting minimum support threshold quite tricky leads problem may hinder popular 
value minimum support threshold small pattern mining algorithm may lead generation thousands patterns big may generate patterns answers 
difficult predict patterns mined user defined minimum support threshold top pattern mining proposed 
top pattern mining algorithm itemset loop proposed fu 
itemset loop algorithm mines frequent itemsets lengths shorter user defined value loopback top pattern mining algorithms fp tree structure uses estimated mechanism itemset loop 
experiments show loopback outperform itemset loop 
tfp algorithm fp tree algorithm mines top closed frequent itemsets lengths longer user specified value min 
tsp algorithm mine top closed sequential patterns lengths user defined minimum length mined patterns min 
proposed single pass algorithm mine top elements data streams 
top elements top items 
chapter propose efficient single pass algorithm called dsm tkp data stream mining top path traversal patterns mine top path traversal patterns web click streams 
effective summary data structure called tkp forest top path forest efficient structure pruning mechanism called kp pruning proposed overcome data stream mining issues bounded space requirement approximation 
knowledge dsm tkp single pass algorithm mining top path traversal pattern streaming click data 
remainder chapter organized follows 
problem definition introduced section 
section describe design proposed algorithm mining top path traversal patterns web click sequence streams 
discuss experiments section 
conclude section 
problem definition continuous steam web clicks web click wc consists web user identifier uid web page accessed user wc uid 
environment segment web click stream arrived timestamp ti divided set web click sequences click sequences short 
example fragment stream ti arrived timestamp ti divided click sequences abcde identifiers web users accessed users 
web click sequence cs consists sequence forward backward accessed web user 
backward means revisiting previously visited user 
maximal forward mfr forward path backward 
click sequence divided maximal forward cs mfr mfr 
example click sequence divided abc ae 
map problem mining top path traversal patterns problem finding top occurring consecutive sequences called sequences rss maximal forward 
support sequence rs denoted sup rs number maximal forward stream containing rs substring 
sequence called maximal substring sequences 
maximal sequence called path traversal pattern 
sequence rs top maximal sequence exists maximal sequences support higher rs 
chapter task mine top maximal sequences scan continuous stream web clicks value 
proposed algorithm dsm tkp proposed algorithm dsm tkp data stream mining top path traversal patterns composed steps 
read maximal forward buffer main memory step 
construct memory summary data structure step 
prune maintain summary data structure step 
find path traversal patterns summary data structure far step 
steps performed sequence new maximal forward 
steps usually performed periodically needed 
step straightforward shall henceforth focus steps devise algorithms effective construction maintenance summary data structure efficient determination path traversal patterns 
effective construction summary data structure section describe algorithm constructs memory summary data structure called top path forest 
definition top path forest abbreviated tkp forest prefix tree summary data structure defined 

tkp forest consists list abbreviated kr list rk set local path traversal pattern trees abbreviated lp trees denoted ri lp tree ri root node ri lp tree 

node ri lp tree consists fields fid esup mfr id node link fid identifier incoming maximal forward esup registers number maximal forward represented path reaching node fid value mfr id assigned new node identifier current maximal forward node link links node node fid lp tree null 

entry kr list consists fields fid esup mfr id head link fid registers identifier entry represents esup records number maximal forward containing carrying id mfr id assigned new entry identifier current maximal forward head link pointer points root node fid lp tree 
construction algorithm tkp forest shown 
scenario tkp forest construction described follows 
dsm tkp reads maximal forward mfr rm buffer projects mfr sub maximal forward abbreviated sub inserts sub tkp forest branches 
note number maximal forward 
projection incoming maximal forward described follows 
maximal forward mfr rm converted sub rm rm rm 
sequences called suffix maximal forward abbreviated rs sequence suffix original maximal forward 
projection step called maximal forward projection denoted mfr projection mfr mfr mfr ri mfr rm mfr ri mfr rm cost projection 
performing mfr projection dsm tkp algorithm inserts mfr kr list removes buffer main memory 
set rs inserted ri lp trees branches 
mfr shares prefix mfr lp tree new mfr share prefix branch representing mfr 
estimated support counter associated node tree 
counter updated rs mfr causes insertion new branch 
step called rs mfr insertion 
example 
maximal forward abcde acd cef cef df stream 
tkp forest respect abcde acd constructed dsm tkp algorithm shown respectively 
algorithm tkp forest construction input continuous stream maximal forward mfr mfr user specified value output tkp forest generated far 
kr list initialize kr list empty foreach xm foreach xj xj kr list create new entry form xj head link kr list entry exists kr list xj esup xj esup call mfr projection call rs mfr insertion call tkp forest pruning tkp forest step dsm tkp algorithm prune maintain summary data structure 
algorithm tkp forest construction kr list lp tree lp tree lp tree lp tree lp tree 
tkp forest construction processing maximal forward abcde kr list lp tee lp tee lp tee lp tee lp tee 
tkp forest construction processing second maximal forward acd effective pruning summary data structure tkp forest pruning mechanism dsm tkp performed number kr list greater value pruning mechanism dsm tkp algorithm shown 
step dsm tkp algorithm determine top path traversal patterns current tkp forest 
step performed analytical results stream requested 
subroutine tkp forest pruning tkp forest sort rk kr list reorder estimated support decreasing order rk sup sup sup rk find reordered kr list estimated support th largest kr list foreach ri kr list kl esup ri esup ri esup endfor foreach rj kr list kl kl delete rj current kr list delete rj lp tree endfor 
algorithm tkp forest pruning kr list lp tree lp tree lp tree lp tree 
example tkp forest lp tree determination top path traversal patterns assume rk current kr list 
entry ri kr list dsm tkp algorithm traverses ri lp tree find estimated support sequence prefix ri depth search dfs manner 
dsm tkp stores sequences temporal list candidate maximal sequences path traversal patterns support decreasing order 
dsm tkp outputs maximal sequences temporal list 
example top path traversal patterns acd cef df th largest estimated support reordered kr list 
performance evaluation experiments performed ghz pentium processor megabytes main memory running microsoft windows 
addition programs written microsoft visual 
real click stream datasets bms webview bms webview contain months worth click stream data commerce web sites evaluate performance dsm tkp algorithm 
real data provided blue martini software available kdd cup home page 
bms webview dataset consists items transactions 
maximum transaction size bms webview distinct items average transaction size items 
bms webview dataset consists distinct items transactions 
maximum transaction size bms webview items average transaction size items 
evaluate effect various values bms webview bms webview 
plots total execution time taken algorithm values ranging 
shows decreasing leads decrease running time 
shows decreasing leads decrease memory usages dsm tkp bms webview bms webview respectively 
chapter proposed online single pass algorithm dsm tkp mining top maximal sequences infinite sequence web click sequences 
effective summary data structure tkp forest developed store essential information set top path traversal patterns web click stream far 
efficient pruning mechanism tkp forest guarantee upper bound summary data structure predictable 
experiments show dsm tkp efficient exhibits scalability 
ecu tio tim ec 
em ag value bms webview bms webview execution time various values bms webview bms webview value memory usage various values 
execution time memory usage dsm tkp bms webview bms webview various values chapter chapter summaries works 
possible works discussed 
mining frequent itemsets data streams study problems involving landmark window base mining frequent itemsets sliding window base mining frequent itemsets 
mining path traversal patterns web click streams focus single pass mining path traversal patterns online mining top path traversal patterns minimum support threshold 
mining changes items data streams pass mining algorithms proposed 
proposed algorithms verified experiments mining continuous streams various characteristics 
experiments comprising comprehensive comparisons proposed algorithms outperforms related algorithms show excellent linear scalability respect size streaming data 
summary mining frequent itemsets data streams mining frequent itemsets entire history data streams propose efficient single pass algorithm called dsm fi data stream mining frequent itemsets discover set frequent itemsets data streams 
effective projection scheme developed extract essential information frequent itemsets data streams 
experiments show dsm fi outperforms bts state art single pass algorithm order magnitude discovering set frequent itemsets data streams landmark window :10.1.1.19.8594
summary mining frequent itemsets stream sliding windows mining frequent itemsets data streams transaction sensitive sliding window develop efficient pass algorithm called mfi transsw mining frequent itemsets transaction sensitive sliding window bit vectors mine set frequent itemsets latest transactions 
experiments show mfi transsw outperforms stream discovering set frequent itemsets data streams transaction sensitive sliding window 
mining frequent itemsets data streams time sensitive sliding window proposed pass algorithm called mfi timesw mining frequent itemsets time sensitive sliding window mfi transsw mine set frequent itemsets latest time units 
experiments show mfi timesw id efficient exhibits scalability 
summary mining changes items data streams define new interesting research problem mining changes items data streams data mining 
mining append data streams propose single pass algorithm called mfc append mining frequency changes append data streams find set changes items append data streams 
new summary data structure called change sketch developed store essential changed patterns data streams 
space complexity change sketch 
mining dynamic data streams pass algorithm called mfc dynamic mining frequency changes dynamic data streams developed mine changes items dynamic data stream 
proposed algorithms take log time worst case compute newly arrived item amortized time item 
summary mining path traversal patterns web click streams mining path traversal patterns web click streams propose single pass algorithm called dsm plw data stream mining path traversal patterns landmark window discover set path traversal patterns streaming maximal forward 
comprehensive experiments demonstrate dsm plw efficient exhibits scalability 
summary mining top path traversal patterns define new interesting research problem mining top path traversal patterns web click streams propose pass algorithm called dsm tkp data stream mining top path traversal patterns mining top path traversal patterns user defined minimum support threshold 
efficient pruning mechanism proposed summary data structure guarantee upper bound summary data structure predictable 
experiments show dsm tkp efficient exhibits scalability 
mining capabilities proposed algorithms interesting extensions frequent pattern mining change mining listed 
resource aware mining frequent patterns data streams 
resource cpu memory space energy precious stream mining environment 
processing data streams arrive rapid speed huge amount 
resources proposed algorithms mining frequent itemsets changes important research issue 
online mining sequential patterns data streams sliding window 
online mining sequential patterns data streams complicated mining frequent itemset 
challenges mining sequential patterns data streams define meaning sequential patterns stream environment define model sliding window mining sequential patterns data streams design efficient single pass algorithm mining set sequential patterns data streams 
online mining high utility itemsets data streams sliding window 
mining itemsets correlations important applications applications people interested finding set items useful measure utility 
frequent itemsets reflect impact factor frequency presence absence item 
frequent itemsets may contribute small portion profit infrequent itemsets may contribute large portion profit 
utility mining useful wide range practical application 
challenges mining high utility itemsets data streams define model sliding window mining high utility itemsets data streams define meaning high utility itemsets stream environment design efficient pass algorithm discovering set high utility itemsets data streams sliding window 
aggarwal han wang yu framework clustering evolving data streams proc 
vldb pp 
agrawal imielinski swami 
mining association rules sets items large databases proc 
sigmod pp 

agrawal srikant fast algorithms mining association rules proc :10.1.1.40.6757
vldb pp 

alon gibbons matias szegedy tracking join self join sizes limited storage proc 
pods pp 

alon matias szegedy space complexity approximating frequency moments proc 
stoc pp 

babcock babu datar motwani widom models issues data stream systems proc 
pods pp 
babcock olston distributed top monitoring proc 
acm sigmod pp 

babu widom continuous queries data streams sigmod record 
borges levene data mining user navigation patterns proc 
webkdd pp 

chang lee 
finding frequent itemsets adaptively online data streams proc 
acm sigkdd pp 

chang lee 
sliding window method finding frequent itemsets online data streams journal information science engineering 
chen farach colton finding frequent items data streams proc 
icalp pp 


chen 
park yu efficient data mining path traversal patterns ieee tkde 
chen dong han wah wang multi dimensional regression analysis time series data streams proc 
vldb pp 

chen zhang popularity prediction model web prefetching ieee computer 
cheung za ane incremental mining frequent patterns candidate generation support constraint proc 
ideas pp 
cheung 
fu mining association rules support threshold item constraints ieee tkde pp 
chi wang yu muntz 
moment maintaining closed frequent itemsets stream sliding window proc 
icdm pp 

cooley mobasher srivastava web mining information pattern discovery world wide web proc 
pp 

cormode muthukrishnan hot tracking frequent items dynamically acm trans 
database syst 

datar indyk motwani maintaining stream statistics sliding windows proc 
soda pp 

demaine pez ortiz munro frequent estimation internet packet streams limited space proc 
esa pp 

domingos hulten mining high speed data streams proc 
acm sigkdd pp 

dong han lakshmanan pei wang yu online mining changes data streams research problems preliminary results proc 
acm sigmod 
dong li efficient mining emerging patterns discovering trends differences proc 
acm sigkdd pp 

fang shivakumar garcia molina ullman computing iceberg queries efficiently proc 
vldb pp 

feigenbaum kannan strauss viswanathan approximate difference algorithm massive data streams extended proc 
ieee focs pp 


fu 
kwong tang mining interesting itemsets proc 
ismis 
ganti gehrke ramakrishnan framework measuring changes data characteristics proc 
pods pp 

ganti gehrke ramakrishnan mining data streams block evolution sigkdd explorations pp 

han pei yan yu :10.1.1.14.2327
mining frequent patterns data streams multiple time granularities data mining generation challenges directions aaai mit kargupta joshi sivakumar yesha eds 
gibbons matias synopsis data structures massive data sets proc 
soda pp 

ozsu issues data stream management sigmod record 
guha mishra motwani callaghan clustering data streams proc 
focs pp 

han pei yin mao mining frequent patterns candidate generation frequent pattern tree approach data mining knowledge discovery :10.1.1.3.2424
hellerstein haas wang online aggregation proc 
acm sigmod pp 

henzinger raghavan rajagopalan computing data streams technical report digital systems research center may 
hulten spencer domingos mining time changing data streams proc 
acm sigkdd pp 

jin agrawal 
algorithm core frequent itemset mining streaming data 
proc 
ieee icdm 
karp shenker simple algorithm finding elements sets bags acm tods 

li 
lee single pass algorithms mining frequency change patterns limited space evolving append dynamic transaction data streams proc eee 

li 
ho 
shan 
lee efficient maintenance mining frequent itemsets online data streams sliding window proc 
ieee smc 

li 
lee 
shan efficient algorithm mining frequent itemsets entire history data streams proc 


li 
lee 
shan online mining maximal frequent structures continuous landmark melody streams pattern recognition letters august pp 


li 
lee 
shan mining streams path traversal patterns proc 
www pp 


li 
lee 
shan online mining maximal frequent itemsets data streams proc 
ride 

li 
lee 
shan dsm tkp mining top path traversal patterns web click streams proc 
wi 

li 
lee 
shan dsm plw single pass mining path traversal patterns streaming web click sequences computer networks special issue web dynamics accepted appear 

li 
lee 
shan online mining changes items continuous append dynamic data streams journal universal computer science special issue knowledge discovery data streams pp 


lin 
lee fast discovery sequential patterns memory indexing database partitioning journal information sciences engineering 
lin chiu wu chen mining frequent itemsets data streams time sensitive sliding window proc 
siam sdm 
liu hsu 
han xia mining changes real life applications proc 
pp 

manku motwani :10.1.1.19.8594
approximate frequency counts data streams proc 
vldb pp 

agrawal abbadi efficient computation frequent top elements data streams proc 
icdt pp 

callaghan mishra meyerson guha motwani streaming data algorithms high quality clustering proc 
icde pp 

decision trees web log mining intelligent data analysis 
pei han asl zhu mining access patterns efficiently web logs proc 
pakdd pp 

pei han asl wang pinto chen dayal 
hsu mining sequential patterns pattern growth prefixspan approach ieee trans 
knowl 
data eng 

schechter krishnan smith path profiles predict requests computer networks 

shan 
li fast discovery structure navigation patterns web user traversals proc 
spie dmkd pp 

spiliopoulou winkler data miner analyzing navigational behaviour web users proc 
pp 

srivastava cooley deshpande 
tan web usage mining discovery applications usage patterns web data sigkdd explorations 
teng 
chen yu 
regression temporal pattern mining scheme data streams proc 
vldb pp 


teng 
chen yu 
wavelet resource aware mining explore temporal support count granularities data streams proc siam sdm 
yan han tsp mining top closed sequential patterns proc 
icdm pp 

wang han lu tfp efficient algorithm mining top frequent closed itemsets ieee tkde pp 

xing shen efficient data mining web navigation patterns information software technology 

yu chong lu zhou 
false positive false negative mining frequent itemsets high speed transactional data streams proc 
vldb pp 

zheng kohavi mason real world performance association rule algorithms proc 
acm sigkdd pp 
zhu shasha statstream statistical monitoring thousands data streams real time proc vldb pp 

www ecn purdue edu kddcup publication list journal papers 
hua fu li suh yin lee man kwan shan dsm plw single pass mining path traversal patterns streaming web click sequences computer networks special issue web dynamics volume issue july pp 

sci 
hua fu li suh yin lee man kwan shan online mining changes items continuous append dynamic data streams journal universal computer science special issue knowledge discovery data streams volume pp 

sci 
hua fu li suh yin lee man kwan shan online mining maximal frequent structures continuous landmark melody streams pattern recognition letters volume issue august pp 
sci 
hua fu li man kwan shan suh yin lee dsm fi efficient algorithm mining frequent itemsets data streams knowledge information systems international journal revision 
sci ei 
hua fu li man kwan shan suh yin lee dsm tkp mining top path traversal patterns web click streams preparation 

hua fu li man kwan shan suh yin lee efficient maintenance mining frequent itemsets stream sliding windows preparation 

hua fu li man kwan shan suh yin lee online mining frequent query trees data streams preparation 

hua fu li man kwan shan suh yin lee mining detecting changes user centered music query streams preparation 
conference papers 
hua fu li chin chuan ho man kwan shan suh yin lee efficient maintenance mining frequent itemsets stream sliding windows proc 
ieee international conference systems man cybernetic ieee smc taipei taiwan october 
ei 
hua fu li man kwan shan suh yin lee detecting changes user centered music query streams proc 
ieee international conference multimedia expo icme toronto ontario canada july 
ei 
hua fu li chin chuan ho man kwan shan suh yin lee online mining music query streams proc 
ieee international conference multimedia expo icme toronto ontario canada july 
ei 
hua fu li man kwan shan suh yin lee online mining frequent query trees data streams proc 
th world wide web conference www edinburgh scotland may 
ei poster 
hua fu li suh yin lee man kwan shan dsm tkp mining top path traversal patterns web click streams proc 
ieee wic acm international conference web intelligence wi france september 
ei 
hua fu li suh yin lee man kwan shan online mining maximal frequent itemsets data streams proc 
th ieee international workshop research issues data engineering ride tokyo japan april 
ei 
hua fu li suh yin lee man kwan shan mining maximal frequent data streams proc 
international computer symposium ics taipei taiwan december 
best award 
hua fu li suh yin lee man kwan shan efficient algorithm mining frequent itemsets entire history data streams proc 
international workshop knowledge discovery data streams held conjunction th european conference machine learning ecml th european conference principals practice knowledge discovery databases pkdd pisa italy september 

hua fu li suh yin lee man kwan shan mining streams path traversal patterns proc 
th world wide web conference www new york may 
ei 
hua fu li suh yin lee man kwan shan mining frequent closed structures streaming melody sequences proc 
ieee international conference multimedia expo icme taipei taiwan ei 
hua fu li suh yin lee single pass algorithms mining frequency change patterns limited space evolving append dynamic transaction data streams proc 
ieee international conference technology commerce service eee taipei taiwan 

man kwan shan hua fu li fast discovery structure navigation patterns web user traversals proc 
spie conference data mining knowledge discovery theory tools technology iv orlando florida usa 
ei 
hua fu li man kwan shan pnp mining profile navigational patterns proc 
spie conference data mining knowledge discovery theory tools technology iv orlando florida usa 
ei 
hua fu li man kwan shan mining non simple traversal paths web access logs proc 
workshop internet distributed systems taiwan 
vita hua fu li born february taiwan republic china 
received bs degree computer science engineering institute technology ms degree computer science national university respectively 
currently working ph degree national tung university 
coauthored advisor dr suh yin lee works received ics international computer symposium best award 
research interests include data mining data stream management multimedia information systems bioinformatics 

