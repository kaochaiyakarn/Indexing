september proceedings trim size exact algorithms planted motif challenge problems rajasekaran chun hsi huang dept computer science engineering univ connecticut ct usa mail huang engr edu problem identifying meaningful patterns motifs biological data studied extensively due paramount importance 
versions problem identified literature 
problems planted motif problem 
instances problem posed challenge 
numerous algorithms proposed literature address challenge 
algorithms fall category approximation algorithms 
algorithms planted motif problem find correct answer 
algorithms simple ideas fundamentally different ones employed literature 
believe techniques introduce find independent applications 

motif search important problem biology 
problem general requires finding short patterns interest voluminous data 
variants motif search problem identified literature 
focus problems defined 
problem planted motif search pms input sequences length 
input integers 
problem find motif sequence length 
input sequence contains variant variants interest sequences hamming distance numerous papers written past topic motif search pms 
examples include bailey elkan lawrence tompa algorithms employ local search techniques gibbs sampling expectation optimization algorithms may output planted motif 
refer algorithms approximation algorithms 
algorithms output correct answer referred exact algorithms 
algorithms proposed pms authors pevzner sze buhler tompa algorithm pevzner sze finding cliques graph algorithm buhler tompa employs random projections 
supported part nsf ccr itr 
september proceedings trim size algorithms experimentally demonstrated perform 
approximation algorithms 
algorithms pms categorized depending basic approach employed profile algorithms pattern algorithms see price algorithms predict starting positions occurrences motif sequence 
hand pattern algorithms predict motif sequence residues 
pattern algorithms known 
examples include projection mitra due price pevzner starts random seed strings performs local searches starting seeds 
examples profile algorithms consensus meme include performance profile algorithms specified measure called performance coefficient 
performance coefficient gives indication positions motif occurrences predicted correctly 
challenge problem algorithms performance coefficients respectively 
run times algorithms instance respectively seconds 
profile algorithm approximate exact 
likewise algorithm may exact approximate 
algorithms exact known exhaustive enumeration algorithms literature 
exact algorithms known 
see blanchette sinha tompa tompa van pointed buhler tompa algorithms impractical sizes involved challenge problem 
exceptions algorithm mitra algorithm pattern exact 
solves example instance minutes mb memory algorithm algorithm uses pairwise similarity information 
new pruning technique enables mitra efficient 
mitra uses mismatch tree data structure splits space possible patterns disjoint subspaces start prefix 

new results pattern exact algorithms planted motif prob lem 
run time basic algorithm 
algorithms literature exploring neighborhood possible patterns 
algorithm uses basic approach 
addition existing algorithms subset ideas sampling local search pairwise similarity scoring statistically randomly selecting potential candidates expectation maximization random projections 
hand ideas fundamentally different ones literature 
believe techniques find independent applications 
ideas propose simple 
implemented algorithms measured performances 
best knowledge mitra best performing september proceedings trim size exact algorithm literature 
remarkably algorithms general faster mitra 
example instance algorithms takes seconds comparison mitra takes minutes 
pointed price instance difficult instance 
algorithm takes nearly time instance 
example algorithm takes second instance mitra takes minute compared mitra algorithm simple fundamentally different concepts 
arrays 
mitra uses mismatch tree data structure 
complexity analysis done mitra 
noteworthy profile algorithms consensus gibbs dna meme take time instance algorithms fall approximate category may output correct answer 
pattern algorithms projection multi profiler take time approximate success rates close 
instances pms difficult solve reported pevzner sze tompa example instances difficult algorithms pevzner sze tompa reasons difficulty instances expected spurious solutions motifs planted 
algorithms exact report motifs 
example algorithms solve instance easily seconds 

algorithms section straight forward algorithms 
algorithm steps input sequences 
length sequence 
form possible mers sequences 
total number mers 
call collection mers collection mers mer 
generate patterns hamming distance 
number patterns total number patterns generated 
call collection mers 
note contains desired output pattern assuming occur input sequences pair mers compute hamming distance 
output mer neighbor mer hamming distance input sequences 
run time algorithm 
occurs input sequences algorithm run time second algorithm considers possible mer time checks mer correct motif possible mers 
mer 
check follows 
compute hamming distance 
note collection possible mers input sequences 
september proceedings trim size result check occurs input sequence hamming distance 
identify motifs interest total 
get lemma 
lemma 
solve planted motif problem time 
different algorithm sorting 
sorting algorithm planted motif search pms takes form 
algorithm pms generate possible mers input sequences 
collection mers 
generate mers hamming distance 
collection mers corresponding 
total number patterns 
sort mers 
sorted list corresponding 
merge output generated step mer occurs theorem results 
theorem 
problem solved time word length computer 
run time achievable 

improved algorithms section techniques improving performance algorithm pms 
algorithm buhler tompa random projections 
motif interest mer 
collection mers input sequences 
project mers randomly chosen positions appropriate value 
typical value buhler tompa 
words mer generate mer subsequence corresponding random positions chosen 
random positions mers 
think mer generated integer 
group mers integer values 
hash mers mer mer hash value 
hashed group threshold number mers chance mer equal mer group 
threshold buhler tompa 
collect mers pass threshold processed arrive final answer different algorithm processing potential mers 
mer 
check follows 
compute hamming distance know correct answer 
september proceedings trim size testing takes time 
corollary get lemma lemma 
lemma 
residues positions determine time 
improvement lemma improve theorem follows 
note occurs input sequence substring occurs input sequence 
particular mers occurs input sequence hamming distance 
collection mers formed mers mers input sequence hamming distance 
addition input sequence position mer occurs starting mer occurs starting mer occurs starting 
get mer putting mers occur starting possibly motifs length positions starting motifs input sequences hamming distance 
assume motif length starts position input sequence residues residues obtain mer motifs obvious way 
mer potentially correct motif 
note obtain potential motifs length suffices process input sequences manner described 
ready describe improved algorithm 
phases algorithm 
phase identify mers appropriate value occur input sequences hamming distance 
collect potential mers described phase 
second phase check mer collected phase correct answer 
output correct answers 
observe algorithm pms case look motif occurs input sequence hamming distance 
second observation large spurious hits 
suggested value largest integer pms run exceeding computers core memory reasonable amount time 
details phases 
phase algorithm pms solve planted motif problem input sequences hamming distance modified pms 
set motifs 
september proceedings trim size input sequences 
arbitrary input sequence chosen randomly 
find occurrences motifs hamming distance 
done follows form mers keeping track starting position find mers hamming distance 
collection mers sort merge occurrences interest 
length 
position list motifs hamming distance starting position mer occurs starting position member 
member characters characters get mer appending residues 
hamming distance retained candidate correct motif 
gather candidates check candidates correct motifs 
details 
phase ii mer starting position 
residues residues form mer appending residues 
hamming distance add list candidates 
check correct motif time 
node candidate motifs 
time needed process get candidate motifs 
arrive theorem 
theorem 
problem solved time ber potential mers collected phase word length computer 
run time 
num alternative algorithm 
modify algorithm follows 
find collection mers input sequence hamming september proceedings trim size distance 
version pick sequence find candidate motifs arising alternative find candidate motifs sequence get intersection sets 
set candidates 
output 

improvements devised techniques improve performance pms 
example improvements enables handle large values 
motif interest integer 
refer half second half 
know occurs input sequence 
arbitrary input sequence 
occurrence hamming distance start position clearly hamming distance hamming distance 
note input sequence occurs hamming distance occurs hamming distance 
result sequences occurs hamming distance occurs hamming distance 
developed algorithm called pms observation 
details omitted due space constraints 

experimental details section provide details implementing algorithms results implementation 
implemented pms pms 
prior works 
input sequences generated randomly 
motif generated random 
occurrences sequences starting positions generated random 
algorithms tested biological data supplied blanchette 
saving memory way pms described form possible mers input sequences generate relevant neighbors mers sort merge identify generated mer sequences 
modify algorithm follows reduce memory 
algorithm pms generate possible mers input sequence collection mers 
generate mers hamming distance 
sort collection mers sorted collection 
september proceedings trim size generate possible mers input sequence 
collection mers 
generate mers hamming distance 
collection mers 
sort mers 
sorted list 
merge keep intersection 
set 
motif interest 

implementation pms represent mer sequence integers 
mer repre sented integers integer corresponding sequence successive residues 
need bits residue 
sequence residues represented integer usual way 
example associate case represented integer 
instance size integer machine interest bits mer stored integer 

implementation pms pms identify collection mers input sequences 
input sequences chosen arbitrarily 
position list mers occur hamming distance starting keep lexicographically sorted order 
basic operations perform check entry form candidate motif length 
search done binary search 
time sec 
time sec 
time sec 
september proceedings trim size different versions mitra reported eskin pevzner mitra count mitra graph 
provide run times eskin pevzner purpose comparisons 
instance mitra count mitra graph take minute 
hand algorithm takes second instance 
instance mitra count mitra graph take minute minutes respectively 
instance algorithm takes seconds 
instance mitra count takes minutes mitra graph takes minutes 
algorithm takes seconds 

cases experimental data shown previous section deal memory needs pms pms exceed core memory size machine 
employed pentium ghz machine core memory gb 
developing algorithms cases 
estimates indicate solvable minutes solvable hours 
pms employed estimate instances solved seconds instances solved minutes cases solvable employing core techniques 

extensions planted motif problem defined pevzner sze example requires discovering motif occurs input sequence hamming distance 
problem conceived 
variants section 
problem 
input sequences length 
problem identify motif length 
input sequence substring length hamming distance substring 
problem 
input sequences length 
problem find motifs length 
motif output occurs input sequences hamming distance 
fraction specified part input 
variant considered buhler tompa value 
developed algorithms variants details omitted due space constraints 

exact algorithms planted motif problem 
algorithms general faster mitra best known prior exact algorithm 
algorithms simple different ideas 
techniques september proceedings trim size introduce independent interest 
development efficient parallel algorithms planted motif problem interesting open problem 
believe techniques introduced yield superior results combined existing techniques 
plan explore possibility 
blanchette supplying biological data experiment determining transcription factor binding sites 

bailey elkan 
unsupervised learning multiple motifs biopolymers expectation maximization 
machine learning pp 


blanchette 
algorithms phylogenetic 
proc 
fifth annual international conference computational molecular biology 

blanchette tompa 
exact algorithm identify motifs sequences multiple species 
proc 
eighth international conference intelligent systems molecular biology pp 


ukkonen 
predicting gene regulatory elements silico genomic scale 
genome research pp 


buhler tompa 
finding motifs random projections 
proc 
fifth annual international conference computational molecular biology recomb april 

eskin pevzner 
finding composite regulatory patterns dna sequences 
bioinformatics pp 


hertz stormo 
identifying dna protein patterns statistically significant alignments multiple sequences 
bioinformatics pp 


horowitz sahni rajasekaran 
computer algorithms freeman press 

pevzner 
finding motifs zone 
bioinformatics pp 


lawrence altschul boguski liu neuwald 
detecting subtle sequence signals gibbs sampling strategy multiple alignment 
science pp 


pevzner 
sze 
combinatorial approaches finding subtle signals dna sequences 
proc 
eighth international conference intelligent systems molecular biology pp 


price pevzner 
finding subtle motifs branching sample strings 
bioinformatics pp 


rajasekaran 
huang schiller 
exact algorithms motif search 
proc 
asia pacific bioinformatics conference 

tompa 
algorithm finding novel gapped motifs dna sequences 
proc 
second international conference computational molecular biology recomb pp 


sinha tompa 
statistical method finding transcription factor binding sites 
proc 
eighth international conference intelligent systems molecular biology pp 



methods discovering novel motifs nucleic acid sequences 
computer applications biosciences pp 


tompa 
exact method finding short motifs sequences application september proceedings trim size binding site problem 
proc 
seventh international conference intelligent systems molecular biology pp 


van andre vides 
extracting regulatory sites upstream region yeast genes computational analysis oligonucleotide frequencies 
journal molecular biology pp 


