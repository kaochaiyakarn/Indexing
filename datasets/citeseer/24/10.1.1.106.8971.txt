abstraction satisfiability solving presburger arithmetic daniel jo ouaknine ofer computer science department carnegie mellon university forbes ave pittsburgh pa usa ouaknine cs cmu edu faculty industrial engineering technion haifa israel technion ac il 
new abstraction framework deciding satisfiability quantifier free presburger arithmetic formulas 
presburger formula algorithm invokes sat solver produce proofs unsatisfiability approximations 
proofs turn generate abstractions inputs theorem prover 
sat encodings approximations obtained instantiating variables formula finite domains 
satisfying integer assignments provided theorem prover selectively increase domain sizes generate fresh sat encodings 
efficiency approach derives ability sat solvers extract small unsatisfiable cores leading small abstracted formulas 
experimental results suggest algorithm considerably efficient directly invoking theorem prover original formula 
decision procedures arithmetic integers applications formal verification 
instance quantifier free fragment presburger arithmetic infinite state model checking symbolic timing verification rtl datapath analysis 
unfortunately satisfiability problem quantifier free presburger arithmetic known np complete 
consequently efficient techniques tools solving problems valuable 
abstraction algorithm satisfiability solving quantifier free presburger formulas qfp formulas short 
research supported semiconductor research src contract tj national science foundation nsf 
ccr ccr office naval research onr naval research laboratory nrl contract 
army research office aro contract 
daad 
daniel jo ouaknine ofer presburger arithmetic order theory linear arithmetic nonnegative integers 
shown decidable best known decision algorithms complexity exponential size formula 
applications quantifier free fragment presburger arithmetic suffices 
algorithm propose receives input qfp formula attempts satisfy small range integers boolean encoding formula interaction sat solver 
case boolean formula unsatisfiable sat solver able supply proof fact form small unsatisfiable core 
turn pinpoint linear arithmetic constraints original qfp formula satisfied bounded domain 
likewise small set linear constraints represents abstraction original qfp formula constraints satisfied non negative integers original formula unsatisfiable 
advantage operation generally easier solve abstracted formula original 
existing decision procedures presburger arithmetic 
abstracted formula may satisfiable case increase size bounded integer domain accommodate satisfying integer assignment supplied decision procedure 
repeat process original formula shown satisfiable unsatisfiable 
note domain integers infinite termination guaranteed provided inner presburger decision procedure complete 
implementation algorithm uses sat solvers zchaff commercial constraint solving package cplex 
experimental results include random formulas industrial benchmarks suggest algorithm considerably efficient directly invoking inner cplex presburger decision procedure 
related 
currently exist number algorithms tools solving qfp discuss section 
refer reader excellent surveys detailed presentation matter :10.1.1.13.4366
single technique dominate ganesh report ilp methods perform best contexts 
best knowledge existing tools sort abstractions just described 
mcmillan related technique accelerate model checking algorithms finite kripke structures 
precisely invoke bounded model checker decide state variables visible order generate abstraction iteration model checking 
approach differs theirs respects infinite domain presburger decision procedure model checker seek eliminate constraints variables 
ken mcmillan providing proof generating sat solver 
abstraction satisfiability solving presburger arithmetic henzinger theorem prover refute counterexamples generated predicate abstraction software verification 
counterexample shown spurious proof mined new predicates predicate abstraction 
similar spirit approach differs significantly domain application techniques 
framework bears certain similarities automated abstraction refinement 
example sat solver derive abstraction sufficient refute counterexample model checking 
successive abstractions obtain cumulative state variables visible point subsequently re hidden 
contrast approach generates fresh abstraction time 
preliminaries boolean satisfiability recalling known facts concerning propositional boolean formulas boolean satisfiability 

boolean variables 
literal bi negation 
boolean clause disjunction zero literals convention empty clause equivalent false 
boolean formula free variables 
bn 
possible manufacture boolean formula cnf free variables 
bn bn 
bn fresh boolean variables cnf conjunctive normal form cnf cnf bj bj boolean clause cnf satisfiable iff satisfiable precisely bn 
bn cnf equivalent number variables size cnf linear size 
linear time algorithms computing cnf known see instance 
sat solver algorithm determines boolean formula cnf satisfiable 
affirmative case sat solver produce satisfying assignment 
hand unsatisfiable sat solver required produce proof unsatisfiability 
proof turns yields unsatisfiable core unsatisfiable subset clauses 
practice sat solvers tend generate small unsatisfiable cores 
sat solvers experiments zchaff 
presburger arithmetic presburger arithmetic defined order theory structure denotes set non negative integers 
focus quantifier free fragment presburger arithmetic 
daniel jo ouaknine ofer precisely 
variables ranging non negative integers 
linear constraint expression form aixi ai integer constants ai comparison operator 
quantifier free presburger formula henceforth qfp formulas boolean combinations linear constraints definition 
collection qfp formulas defined inductively follows linear constraint qfp formula qfp formulas 

note integer variable easily represented presburger arithmetic non negative variables 
equally straightforward encode boolean variables equalities form constraints form conjoined outermost level 
interested satisfaction problem qfp formulas qfp formula assignment non negative integers variables evaluates true 
ganesh comprehensive survey decision procedures satisfiability solving qfp formulas 
abstraction algorithm describe section conjunction decision procedure desirable procedure generate satisfying integer assignments 
briefly describe paragraphs commercial package cplex sat solver zchaff achieve 
put succinctly decision procedure iteratively refines boolean encodings qfp formula satisfying assignments zchaff inconsistent linear arithmetic 
technique known lazy explication axioms originally proposed authors tools ics cvc math sat :10.1.1.13.4366:10.1.1.57.6367
cplex uses integer linear programming techniques particular simplex algorithm decide conjunction linear arithmetic constraints satisfiable 
conjunction satisfiable cplex generates satisfying integer assignment 
cplex qfp solver implemented follows 
qfp formula extract boolean skeleton bool simply replacing linear constraint fresh boolean variable 
invoke zchaff determine bool satisfiable 
possibly satisfiable terminate 
take satisfying assignment say provided zchaff form corresponding conjunction linear constraints submit cplex 
cplex able find satisfying experimented tool lp solve encountered difficulties certain formulas lp solve appears unsound 
abstraction satisfiability solving presburger arithmetic assignment conjunction linear constraints assignment satisfies done 
augment boolean formula bool blocking clause ruling boolean assignment produced earlier zchaff 
repeat procedure new boolean formula satisfiability established refuted 
remainder refer implementation algorithm pressolver 

existing qfp solvers mention omega tool converts qfp formula disjunctive normal form applies extension fourier motzkin linear programming algorithm disjunct ii automata tool iii previously mentioned ilp tools lp solve ics cvc :10.1.1.36.9420
abstraction framework conjunction decision procedures intend carry number experiments near 
far worked commercial package cplex mainly high reliability completeness integers efficiency 
ics cvc complete integers unsuitable purposes implementors inform planning release complete versions tools near 
abstraction presburger satisfiability solving main contribution sat algorithm generates increasingly precise abstractions qfp formulas 
abstractions obtained eliminating linear constraints qfp formulas conservative manner 
choice constraints eliminate guided iterative interaction sat solver 
qfp formula 
view linear constraints occurring atomic propositions convert satisfaction equivalent qfp formula cnf invoking procedure described section 
note may require fresh boolean variables discussed modeled new constrained integer variables 
remainder section assume loss generality qfp formula cnf 
write cj cj presburger clause 
presburger clause disjunction linear constraints 

xn collection variables appearing 
suppose function size assigns variable xi positive integer size xi 
intuitively size xi denotes maximum fact omega tool handles full order theory presburger arithmetic just quantifier free fragment 
note ilp fact focused ilp see useful presence unbounded variables 
daniel jo ouaknine ofer number bits allowed binary representation xi put way size xi implicitly represents constraint xi size xi stand formula cj jj xi size xi jj set indices variables appear cj 
encode equivalent boolean formula bool follows 
variable xi appearing cj allocate size xi boolean variables bits allowed binary representation xi 
linear constraints cj encoded boolean formulas boolean variables 
note encoding uses exact arbitrary precision bit vector arithmetic 
bsize cnf bool denote cnf representation boolean formula ensuring process newly introduced auxiliary boolean variables fresh 
write size size cbe size size cbe stands cnf boolean encoding 
main points qfp formula size satisfiable iff boolean formula cbe size satisfiable satisfying assignment size satisfying assignment 
observe bsize conjunction boolean clauses cbe size cnf write cbe size ak 
note straightforward building cbe size maintain table recording clause ak cbe size origin orig ak cj 
possible presburger clauses yield common boolean clause ak orig ak records 
clear orig ak cj satisfying integer assignment yields corresponding satisfying boolean assignment ak 
come crux abstraction algorithm solving qfp formulas call asap abstraction satisfiability algorithm presburger 
asap takes input qfp formula cnf free variables 
xn outputs satisfying assignment non negative integers variables declares unsatisfiable 
asap repeatedly invokes subroutines sat solver presburger arithmetic decision procedure pressolver cplex zchaff 
asap attempts satisfy constrained version integer variables allowed range bounded domain 
achieved encoding constrained qfp formula boolean formula input 
satisfiable assignment clearly satisfiable integer witness easily extracted satisfying boolean assignment produced 
returns unsatisfiable core turn pinpoint subset clauses unsatisfiable chosen bounded domain 
conjunction abstraction satisfiability solving presburger arithmetic clauses clearly conservative abstraction unsatisfiable 
run pressolver abstracted qfp formula 
satisfiable increase size bounded domain accommodate satisfying assignment supplied pressolver repeat process 
continue conclusive judgment satisfiability obtained 
section presents experimental evidence suggests asap considerably efficient pressolver 
asap described pseudocode 
algorithm asap input qfp formula cnf free variables 
xn output satisfying assignment unsat size xi repeat forever run cbe size cbe size satisfiable return corresponding satisfying assignment size ak unsatisfiable core cbe size orig ak run pressolver unsatisfiable return unsat 
vn satisfying assignment size xi max log vi size xi fig 

asap abstraction presburger satisfiability solving algorithm theorem 
algorithm asap described correct terminates 
proof 
examine issue correctness 
observe constrained qfp formula contains subset clauses 
unsatisfiable 
hand suppose asap terminates assignment non negative integers variables 
satisfying assignment size instance size 
satisfying assignment size automatically satisfying assignment satisfying assignment required 
claim execution asap see identical instances qfp formula 
conjunction subset clauses finitely possible instantiations immediately entails termination algorithm 
daniel jo ouaknine ofer remains establish claim 
suppose contrary identical instances observed execution asap 
time unsatisfiable core ak cbe size obtained function size subsequently increased size accommodate satisfying integer assignment 
words orig ak size evaluates true 
size denotes qfp formula conjoined linear constraints form xi size iterations encounter second unsatisfiable core cbe size orig 
writing cj orig evaluates true satisfying assignment size size iteration repeat loop increases pointwise function size conclude size size size evaluates true boolean assignment bit variables prescribed size corresponding integer assignment immediately get evaluates true satisfiable contradicting earlier hypothesis 

record observations concerning asap ilp solver pressolver offers option generating satisfying integer assignments minimize linear objective function 
xn 
case hand desirable satisfying assignments compact possible precisely ideally minimize number new bits required representation 
simple linear function approximates requirement 
xn xi fact function pressolver uses 
note minimizing number bits subsequently leads easier queries sat solver minimization requirement additional burden ilp presburger solver 
note inner presburger decision procedure pressolver generates satisfying integer assignments theorem proving tools 
pure decision procedure asap simply requiring iteration function size increased arguments 
examination proof termination reveals number iterations main loop algorithm bounded number different subsets clauses original presburger formula quantity exponential size 
fact guarantee polynomial number iterations invoking fact admits solution admits solution variable assigned value represented polynomially bits 
iteration main loop increases number bits polynomially iterations required reach bound 
note sat solver invoked time worst case time complexity asap remains exponential 
abstraction satisfiability solving presburger arithmetic implementation experimental results implemented tool asap verification system implemented moscow ml dialect standard ml 
implementing asap pressolver decision procedure qfp formulas proof generating sat solver 
outputs proof set resolution steps 
set original introduced resolution clauses appear proof constitute unsatisfiable core 
asap interacts pressolver file interface 
total running time asap cumulative time spent generating input pressolver running pressolver analyzing output 
performed experimental evaluation investigate pres solver asap achieve significant speed directly pressolver input formula 
benchmark sets qfp formulas cnf randomly generated formulas formulas generated real world software verification problems 
experiments performed linux workstation amd athlon ghz dual processor cpu gb ram 
asap pressolver single threaded 
results random benchmarks ran asap pressolver set randomly generated formulas timeout seconds 
formulas included unsatisfiable satisfiable instances 
generated formulas recursively follows node randomly select boolean operator relational operator 
case relation generate linear constraint randomly selecting coefficients variables constant term range 
number variables fixed number linear constraints vary allowing generate constrained formulas reasonable likelihood unsatisfiable 
depth nesting boolean operators formula bounded eventually forcing selection relational operator 
compares formula total run time asap run time pressolver 
plot coordinate point time taken asap coordinate time taken pressolver 
plot diagonal line points diagonal correspond benchmarks asap outperforms pressolver points correspond benchmarks asap outperformed 
results show asap outperforms pressolver benchmarks completing benchmarks minute pressolver times benchmarks 
larger benchmarks pressolver terminates notice asap performs order magnitude better speed factor benchmarks 
pressolver outperforms asap smaller formulas asap completes seconds daniel jo ouaknine ofer reason pressolver superior performance simply original formulas fairly small clauses asap extra overhead comparatively costly 
total time pressolver sec 
timeout total time asap sec 
fig 

comparing asap pressolver random benchmarks 
timeout seconds 
note log scale axes 
investigated maximum size abstracted formula measured terms number cnf clauses compares original formula 
done computing ratio number clauses number clauses 
smallest ratio original formulas clauses largest abstraction contains just 
largest ratio clauses original formula largest abstraction 
reduction main reason speed ups achieved directly pressolver 
results software verification benchmarks report second set experiments performed formulas generated software verification 
suite formulas generated project checking format string vulnerabilities 
benchmarks include formulas satisfiable unsatisfiable extension qfp www cs wisc edu abstraction satisfiability solving presburger arithmetic uninterpreted functions 
uninterpreted functions eliminated ackermann technique asap pressolver run resulting qfp formula 
generated qfp formula arbitrary boolean combination linear constraints 
number variables formulas ranges number linear constraints ranges total number clauses ranges 
pressolver unable solve formulas timeout hour 
hand asap able complete benchmark timeout 
table shows results running asap benchmarks 
give total time taken asap time taken pressolver abstractions generated asap summed invocations pressolver 
notice benchmarks time taken pressolver bottleneck asap accounting total time benchmarks 
asap takes order minutes solve formula 
took seconds occasion remaining time spent generating encodings parsing output pressolver 
abstractions generated asap fairly compact 
column table shows ratio number clauses largest abstraction generated asap number clauses original formula 
see ratio roughly percent 
compactness abstraction main reason asap able solve formulas pressolver unable complete 
note number iterations taken asap ranged 
novel abstraction approach satisfiability solving quantifier free presburger formulas 
experimental results random formulas industrial benchmarks indicate embedding theorem prover qfp formulas framework achieve significant speed ups directly prover input formula 
experiment number presburger solvers particular ics cvc 
tools incomplete integers suitable purposes implementors inform new releases remedy look forward 
research direction investigate methodology applied higher order 
logics theories possibly different domains bit vectors real numbers acknowledgments vinod jha providing benchmark formulas 
daniel jo ouaknine ofer benchmark asap time max 
ratio pressolver time total time clauses sec 
sec 
clauses xs xs xs xs xs xs xs xs xs xs xs xs xs xs table 
asap results benchmarks 
indicates asap timed hour 
pressolver timed instances 
ackermann 
solvable cases decision problem 
north holland 
amon borriello hu liu 
symbolic timing verification timing diagrams presburger formulas 
proceedings dac pages 
bertoli cimatti sebastiani 
sat approach solving formulas boolean linear mathematical propositions 
proceedings cade pages 
barrett dill stump 
checking satisfiability order formulas incremental translation sat 
proceedings cav volume pages 
springer lncs 
barth 
logic constraint programming 
kluwer 
ganesh dill 
online proof producing decision procedure mixed integer linear arithmetic 
proceedings tacas volume pages 
springer lncs 

bounds positive integral solutions linear diophantine equations 
proceedings american mathematical society 
drechsler 
rtl datapath verification integer linear programming 
proceedings vlsi design pages 
abstraction satisfiability solving presburger arithmetic gerber pugh 
symbolic model checking infinite state systems presburger arithmetic 
proceedings cav volume pages 
springer lncs 
clarke veith wang 
automated abstraction refinement model checking large state spaces sat conflict analysis 
fmcad pages 
cvc 
verify stanford edu cvc 
de moura rue :10.1.1.13.4366
lazy theorem proving bounded model checking infinite domains 
proceedings cade pages 
flanagan joshi ou saxe 
theorem proving lazy proof explication 
proceedings cav volume pages 
ganesh dill 
deciding presburger arithmetic model checking comparisons methods 
proceedings fmcad volume pages 
springer lncs 
henzinger majumdar 
lazy abstraction 
proceedings popl pages 
acm 
ics 
www com 
ilog cplex 
www ilog com products cplex 
green bundy 
comparison decision procedures presburger arithmetic 
research division informatics 
university edinburgh 
kannan monma 
computational complexity integer programming problems 
optimisation operations research volume lecture notes economics mathematical systems pages 
springer verlag 
kurshan 
computer aided verification coordinating processes 
princeton university press 
lp solve 
www org math lp solve 
math sat 
dit unitn mathsat html 
mcmillan 
automatic abstraction counterexamples 
proceedings tacas volume pages 
springer lncs 
moscow ml 
www dina dk sestoft html 
papadimitriou 
complexity integer programming 
journal acm 
plaisted greenbaum 
structure preserving clause form translation 
journal symbolic computation 
pre burger 
ber die vollst eines systems der zahlen die addition als operation 
comptes rendus du premier congr des math des pays slaves 
pugh :10.1.1.36.9420
omega test fast practical integer programming algorithm dependence analysis 
supercomputing pages 
shostak 
practical decision procedure arithmetic function symbols 
journal acm 

www cs cmu edu 
wolper 
automata theoretic approach presburger arithmetic constraints 
proceedings sas volume pages 
springer lncs 
zchaff 
www ee princeton edu chaff zchaff php 
zhang malik 
extracting small unsatisfiable cores unsatisfiable boolean formulas 
proceedings sat 
