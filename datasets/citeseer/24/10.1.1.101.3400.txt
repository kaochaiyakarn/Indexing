new approach scalable linda systems swarms menezes florida tech computer sciences university blvd melbourne florida usa cs fit edu natural forming multi agent systems aka swarms ability grow enormous sizes requiring agents oversee entire system 
success systems comes fact agents simple interaction environment neighboring agents local nature 
look abstractions field swarms study applicability context coordination systems 
particular focus problematic issue scalability linda systems 

past years coordination models particular tuplespace models linda proven quite successful tackling intricacies medium large scale open systems 
currently tuple space model incorporated commercial middleware platforms 
coordination community aware linda systems may scale due amount information transmitted entities involved model 
number actors increases communication overhead prohibitive 
reasons somewhat poor scalability linda systems may fact design systems inherit ideas early linda systems :10.1.1.113.9679
implementations focused parallel computing open large scale computing 
trying communication abstraction advocated linda context large scale distributed systems faced easy solve scalability issue communication overhead 
natural forming multi agent systems swarms bees flies schools fish packs wolves notorious organization coordination ability grow enormous sizes ant colonies known span thousands miles contain millions ants 
activities simple rules easily implemented computer programs 
interaction translates computer science terms local communications 
abstractions taken areas extensively areas optimization np hard problems permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sac melbourne florida usa copyright acm 
robert tolksdorf freie universit berlin institut informatik informationssysteme berlin germany research robert tolksdorf de implementation network routing algorithms normally yield simple efficient solutions :10.1.1.26.1865
investigates swarm intelligence techniques observations context tuple space systems particular linda coordination system 
goal look scalability problem study improve current scenario techniques adapted models originating biological collective organisms ant colonies 

scalability linda systems scalability today sine qua non efficient distributed systems 
uncommon distributed systems large number active entities 
fact foresee increase number active entities consequently increase communication systems 
trend easily say scalability main challenges distributed systems 
scalability studied topic context tuple space systems linda 
theoretical works tend formalize concept tuple spaces formalism way show data distributed 
instance gr argue scalability achieved organizing tuples servers structure tuples 
generally implementations mechanism hash codes associated tuples hash code decide physical location tuples 
practical arena rowstron works attempting linda systems scalable 
approach idea configuring tuple spaces hierarchically classifying spaces local global 
rowstron views tuple spaces indivisible entities argue tuples objects stored tuple spaces focus distribution 
easily argue granularity rowstron systems coarse real world large scale systems 
drawback approaches ones concept data oriented 
assume improved scalability depends solely way data distributed search tuple performed 
better scalability achieved techniques process dubious reliability long run 
additionally data oriented techniques show tolerance changes environment server failures addition new servers fly name 
order linda systems data oriented techniques need augmented concepts help minimize communication overhead 
uses solutions swarm systems deal scalability linda systems 
distributing linda process distributed tuple spaces widely discussed coordination community 
literature linda systems describes plethora approaches distributing tuple spaces 
major strategies distinguished evaluated requirements large scale distribution 
centralization simple client server distribution strategy specific server machine operates complete tuple space tspaces 
accessed clients arbitrarily located network 
centralized tuple space server advantage easy implementation basically attaches network interface non distributed tuple space 
carries disadvantages centralization services 
tuplespace server bottleneck high load induced large number active clients single point failure entire system fair resources available network 
partitioning tuple spaces strategy data common characteristics located set tuple space servers 
requests characteristics routed machine 
simple partitioning 
locating tuples parity lead unbalanced partitions carefully chosen hashing function tuples better 
partitioning advantage providing distributed management tuple space including concurrent execution operations partitions slightly relaxes problems centralized solutions 
include centralization certain sets tuple 
partitioning scheme handles reconfigurations poorly 
automatic adaption hashing function induced distributed reorganization tuple spaces content complex costly 
full replication places complete consistent copies tuple spaces machines different locations 
addition data replicated nodes search data performed locally machine removal data replicated 
full replication distributes load data searches inherently offers support fault tolerance 
communication costs keeping replicas consistent participating nodes high requires locking protocols equivalents multiple local searches may lead decision remove piece data 
intermediate replication proposed early linda 
schema bases grid nodes formed logical intersecting busses 
node part exactly 
emitted data replicated nodes searches performed 
intersects provides complete view tuple space 
introducing simulated nodes number nodes change dynamically retaining virtual grid 
intermediate replication schema allows concurrent replications searches data respectively 
removal data requires consistent update nodes respective 
intermediate replication partial solution large scale linda systems 
introducing concurrency carries scalability problems keeping replicas consistent 
approaches usable modification implementation large scale distributed linda system intermediate replication schema offer flexibility 
fact general schema conceptually captures centralized approach single size fully replication case single size participating nodes 
approaches described scale implementation large scale linda 
long term solutions problem long due need explored 
swarmlinda 

concepts swarmlinda past years new models originating biology swarms ant colonies studied field computer science :10.1.1.26.1865
current interest lies abstractions technique meta heuristic finding feasible solutions np hard problems 
models actors workers sacrifice individual goals benefit society 
time actors birds fish ants termites act extremely decentralized explicit global central control 
carried making purely local decisions actions require small computations 
characteristics allow systems scale large sizes ant colonies involve millions individual ants perform highly complex tasks building ant hill 
called swarm intelligence provides interesting opportunity rethink scalability coordination media tuple spaces 
apply principles radical new approach implementing large scale distributed coordination platform call swarmlinda 
example principles alternative data oriented schemes simply consist system templates modeled ants search food matching tuples 
understand world linda servers dimensional space ants search food leaving trails successful matches 
ant optimization trails world shortest tuple producer consumer paths 
paths exploited optimize system performance queries sets replicas template ant goes directly expects match 
technically accounts single message interchange directly producing consuming sites 
nature ant optimization ensures changes structure distributed application terms tuple generation consumption dynamically discovered 
secondly searching food template ants local decisions moving server examining local tuple store global state established mechanism 
principles abstractions swarmlinda consider principles observed naturally occurring swarm systems simplicity natural swarm individuals simple creatures perform simple tasks 
deep reasoning implement small set simple rules 
execution rules society leads emergence complex behavior 
active entities swarmlinda obey principle low complexity small terms resource usage 
dynamism natural swarms operate dynamically changing environment adapt 
open distributed system configuration running applications services changes time 
tuple location doesn necessarily mean similar tuples exist location 
search heuristic tuples fixed dynamically adapt changes 
locality natural swarm individuals observe direct neighborhood take decisions local view 
key scalability swarmlinda active entity perform local searches inquire direct neighbors 
needs understand swarmlinda organized order respect principles just described 
standard linda systems idea ants food 
swarmlinda needs concepts linda world individuals active entities able observe neighborhood move environment change state environment located 
environment context individuals observe 
state characteristic environment observed changed individuals 
necessarily fixed mapping abstractions concepts common linda implementations 
environment state somewhat fixed individuals may represent different linda entities depending algorithm question 

algorithms swarmlinda having described general concepts swarmlinda focus bringing life defining concrete environment state individuals rules apply 
describe algorithms useful 
taken abstraction natural multi agent systems especially formed ants 
algorithms core swarmlinda abstraction swarm intelligence context linda 
general algorithms fairly independent able implemented requiring algorithms exist system 
searching tuples algorithm normally ants find food 
ants look food proximity ant hill 
food brought ant hill trail left ants know food 
ants know way back ant hill short memory steps took ant hill distinctive scent tracked ants 
tuple space context view tuples food 
locations tuples stored seen terrain templates seen ants wander locations search tuples 
ant hill process executed operation 
active individuals template ants environment consists tuple space servers state composed tuples stored scent different kinds template indicate likelihood matches template available location 
volatile disappear slowly time 
ant follow rules 
step spreads scent process server connected server neighborhood 
distinctive scent tracked ants way back ant hill 

check matching tuple current location 
match return origin location leave scent template matched step 
able find way back short memory tracking distinctive scent process described 
match check direct neighborhood 

current location fit template randomly choose direction grid servers look tuple 

scent indicates direction step matching scent move step scent start 
pointed want guarantee adaptability swarm linda 
additionally want maintain non determinism searching tuples 
way guarantee properties adding small random factor range scent 
enables new paths necessarily path strongest scent discovered 

activity ant limited ensure seek tuples produced 
unsuccessful step match ant stops search probability 
factor increased unsuccessful step 
increases time 
ant decides searching takes actions sleep time continue 
pure limitation activity 
ant reached area matching tuples produced long time ant hard time get location 
sleeping allow system change get state tuples location 
die time original location search started 
materialize random location continue search tuples 
lead ant find match lead optimal trail original location tuple distant place 
trail randomly chosen location tuple marked template ants operate region help find optimal trails origins tuples 
sum method acceptable resort 
action taken depends age ant 
ant times tries 
decides 
result emergence application specific paths tuple producers consumers 
volatile strong time paths dynamically adapt changes system consumers producers join leave move system 
compare approach standard mechanism find distributed tuples hashing 
tuples normally searched hash function takes template input generate location tuple output 
hashing definitely fast unfortunately adaptive 
determinism exist hash functions forces tuples template placed location matter size system causing bottleneck problems tuples matching template demand system 
swarmlinda tuples matching template tend stay necessarily true cases 
tuples produced locations far tuples remain separate create clusters system 
minimizes creation bottlenecks tuples certain template required processes 
search start various locations tuples tend retrieved closest cluster source search 
problem hashing approaches fault tolerant tuple hashed location location expected working 
point view swarm tech niques failures just change environment 
ants trying search food food supply suddenly destroyed 
distribution mechanism historically tuples distributed various static mechanisms described section 
swarmlinda partitioning tuple space dynamic concept brood sorting ants 
ants able sort different kinds things keep ant hill food eggs ant hill normally sorted type 
grouped type place kept separate things 
importantly ants process spite amount type scalable 
individuals operate tuple ants contrast algorithm previous section 
environment unchanged remains network servers 
state set tuples stored far 
swarmlinda implementation may brood sorting process tuple distribution 
see tuples grouped template lead formation clusters tuples 
process tuples food ant active process representing primitive 
execution primitive start visiting servers 

observe kind tuples template match servers storing 
process limited memory doesn remember information entire grid servers guarantees decision process local information 

store tuple server nearby servers store tuples matching template 
decision considers small random factor 

nearby servers contain similar tuples randomly choose random factor drop continue carry tuple step server 
order guarantee steps certain condition satisfied 
process able store tuple eventually 
time process decides store tuple random factor tend 
increases chance storing tuple step 
likelihood store tuple calculated stochastically kinds objects memory objects memory kind carried likelihood store tuple high 
power approach shows compared partitioning scheme described section 
similar case searching tuples partitioning primarily hash function decide tuple placed 
standard technique far able cope failures changes application behavior 
approach described subsection able improve availability system having count costly techniques replication data 
ant approach described assumptions behavior applications pre defined distribution schema special scenarios implemented deal failures server 
scalability improved 
swarmlinda servers added point ants sure servers explored storing tuples 
fact improves scalability limitation memory ant tuples 
forces decision local information 
practice may account having process having communicate servers neighborhood 
dealing openness ability system deal changes great asset 
instance open linda systems need tuples specific formats templates change greatly overtime swarm systems adaptive rapidly respond changes environment 
ants instance move ant hill location find danger 
tuple ants individuals 
environment terrain servers state 
ants find ant hill particular scent unique ant hill 
scent keeps ants ant hill 
swarmlinda want tuples matching template kept described section want fixed location 
want dynamically adapt changes 
function sc templates tuples 
relation scent defines similarity scent 
template te tuple tu match sc te sc tu 
new tuple ant carries tuple tu emits sc tu origin 
new template ant carries template te emits sc te origin 

template ants remain position move 

tuple ants sense environment scent similar sc tu 
template 

strength detected scent plus small random factor tuple ant decides move direction stay causes tuples stay closer similar tuples needed produced number primitives executed consists migrating server 
effect distribution mechanism explained section 
tuple stored scent left previous primitives considered deciding drop tuple current server keep walking terrain servers searching place drop tuple 
balancing tuple template movement preceding algorithms identified template ants individuals move perform continued search 
section describe intermediate approach ants tuples templates 
consider application node consumes lot tuples generated nodes 
trails producers consumer programming tuple ant algorithm section sense consumer start template ants seek producers 
system history known consumer path tuple ants started template ants consumer remain stationary basically wait matching tuple ant appear 
consumer starts producer calculation results reasonable start template ants producers reach result 
algorithm lead dynamic balance active passive ants takes account current producer consumer configuration system 
algorithm individuals tuple template ants 
environment terrain servers 
state location includes scent indicates location visited successfully ants attraction outsider 
successful means visiting ant match location 
call visitor scent 
second scent producer consumer scent ranges 
positive values indicate matches took place visiting template ant retrieved tuple location showing location producer information 
scent negative indicates visiting tuple ants matched template location location consumer tuples 
tuple template ants follow algorithms section find matching templates resp 
tuples 
tuple ant finds match bit producer consumer scent location 
template ant finds matching tuple adds bit scent location 
kinds ants leave bit visitor scent case success 
new ant born tuple depending kind operation requested 
new tuple ant emits bit producer consumer scent location birth template ant 
ants behave different ways active move search algorithms passive remain origin 
fate new ant depends current state location born 
state distinguishes producing consuming locations location attractive visitors 
table shows new ants behave characteristics producer consumer attraction passive tuple ant active passive tuple ant passive active template ant passive template ant outsider active tuple ant passive template ant passive tuple ant active template ant producer visited ants need send tuple ants 
template ants passive visitors satisfy active establish global balance 
ratio passive active adjusted 
attractive consumer template ants remain passive 
tuple ants active argument global balance 
producer visited ants send tuples ants find matches 
template ants remain passive 
consumer visited ants send active template ants find matches generate passive tuple ants attract active template ants improve chance attraction 
algorithm compared intermediate replication scheme described section 
leads broadcast template search matching tuple 
leads replication tuple local lists waiting tuples searched 
resemble idea having tuple ants template ants go seek matches 
intermediate replication usually static 
swarmlinda algorithm balance tuple template ants highly dynamic adapts current behavior running applications 

describes approaches implementation swarmlinda 
demonstrates organized behavior swarmlinda implemented simple rules mimic naturally forming multi agents systems 
claim swarm abstractions implementation swarmlinda simple improve scalability adaptability 
algorithms provide excellent alternative standard approaches various linda implementations 
algorithms follow principles observed swarm systems simplicity dynamism locality 

robert 
linda distributed memory multiprocessors 
phd thesis yale university department computer science 
technical report 
eric bonabeau florian sylvain gu rin dominique snyers pascale kuntz guy theraulaz 
routing telecommunications networks ant agents 
francisco garijo editors proceedings nd international workshop intelligent agents telecommunication applications volume lnai pages berlin july 
springer 
dorigo theraulaz 
swarm intelligence natural artificial systems 
oxford press 
nicholas carriero david gelernter 
net linda kernel 
acm transactions computer systems 
leonardi zambonelli 
strategies protocols highly parallel linda servers 
software practice experience 
dorigo maniezzo colorni :10.1.1.26.1865
ant system optimization colony cooperating agents 
ieee transactions systems man cybernetics part cybernetics 
david gelernter :10.1.1.113.9679
generative communication linda 
acm transactions programming languages systems 
menezes robert tolksdorf alan wood 
coordination scalability 
andrea omicini franco zambonelli matthias klusch robert tolksdorf editors coordination internet agents models technologies applications chapter pages 
springer verlag 
isbn 
gr scalability tuple spaces 
proceedings symposium applied computing pages 
acm march 
parunak 
go ant engineering principles natural multi agent systems 
annals operations research 
mitchel resnick 
termites traffic jams 
mit press 
rowstron 
ordination language geographically distributed agents 
world wide web 
robert tolksdorf 
laura service coordination language 
science computer programming special issue coordination models languages applications 
wyckoff lehman ford 
spaces 
ibm systems journal 
