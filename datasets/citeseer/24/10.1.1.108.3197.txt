taxonomy xml schema languages formal language theory makoto murata ibm tokyo research lab international university japan email trl ibm jp lee ucla csd email cs ucla edu murali mani ucla csd email mani cs ucla edu basis regular tree languages formal framework xml schema languages 
framework helps describe compare implement schema languages 
main results follows classes tree languages local single type restrained competition regular document validation algorithms classes classification comparison schema languages dtd xml schema dsd xduce relax core trex 
keywords schema xml tree automaton regular tree grammar validation formal language expressive power taxonomy makoto murata lee murali mani xml meta language creating markup languages 
represent particular type information create language designing inventory names elements attributes 
names utilized application programs dedicated type information 
schema description inventory schema specifies permissible names elements attributes specifies permissible structures values elements attributes 
advantages creating schema follows schema precisely describes permissible xml documents computer programs determine xml document permitted schema schema creating application programs generating code skeletons example 
schemas play important role development xml applications 
languages writing schemas call schema languages proposed past 
languages dtd concerned xml documents general handle elements attributes 
languages concerned particular type information may represented xml primary constructs information elements attributes constructs specific type information 
rdf schema example schema language 
primary constructs rdf information resources properties statements rdf schema concerned resources properties statements elements attributes 
limit concern schema languages xml documents general elements attributes specifically consider dtd bps xml schema dsd kms relax core mur trex cla 
schema languages dedicated particular types information rdf er useful particular applications outside scope 
believe providing formal framework crucial understanding various aspects schema languages facilitating efficient implementations schema languages 
regular tree grammar theory tak cdg formally capture schemas schema languages document validation 
regular tree grammars researchers representing schemas queries xml mainstream area see oasis oa vianu vv particular xml query ccf tree grammars :10.1.1.133.1841
contributions follows 
differentiate terms xml schema xml schema 
refers general term schema xml model refers particular kind xml schema language proposed 

define subclasses regular tree grammars corresponding languages describe schemas precisely 
show algorithms validation documents schemas subclasses consider characteristics algorithms tree model vs event model 
regular tree grammars validation algorithms detailed analysis comparison xml schema proposals type systems xml schema proposal expressive proposal subclass captured properly includes captured remainder organized follows 
section consider related works survey papers xml schema languages 
section introduce regular tree languages grammars introduce restricted classes 
section introduce validation algorithms classes consider characteristics 
section basis observations evaluate different xml schema language proposals 
concluding remarks thoughts research directions discussed section 
related schema languages xml appeared jel lc attempt compare classify xml schema proposals various perspectives 
approaches large mathematical precise description comparison schema language proposals straightforward 
hand establishes formal framework regular tree grammars compares schema language proposals 
shin advocated tree automata structured documents researchers regular tree grammars tree automata xml see oasis oa vianu vv :10.1.1.133.1841
best knowledge papers regular tree grammars classify compare schema language proposals 
furthermore introduce subclasses regular tree grammars collection validation algorithms dedicated subclasses 
xml schema formal description called msl mathematical model xml schema 
tailored xml schema unable capture schema languages 
framework tailored particular schema language 
result schema languages captured fine details schema language 
tree grammars section mechanism describing permissible trees study tree grammars 
class tree extreme markup languages grammars called regular introduce restricted classes called local single type 
readers wonder contextfree string grammars 
context free string grammars hu represent sets strings 
successful parsing strings grammars provides derivation trees 
scenario appropriate programming languages natural languages programs natural language text strings trees 
hand start tags tags xml document collectively represent tree 
traditional context free string grammars originally designed describe permissible strings inappropriate describing permissible trees 
regular tree grammars languages borrow definitions regular tree languages tree automata cdg allow trees infinite arity allow node number subordinate nodes allow right hand side production rule regular expression non terminals 
definition 
regular tree grammar regular tree grammar rtg tuple finite set non terminals finite set terminals set start symbols subset finite set production rules form ar regular expression left hand side aris right hand side content model production rule 
example 
grammar regular tree grammar 
left hand side right hand side content model production rule doc doc para para para para respectively 
doc para para pcdata doc para pcdata doc doc doc para para para para pcdata para pcdata pcdata pcdata represent text value node pcdata convenience 
loss generality assume production rules non terminal left hand side terminal right hand side time 
regular tree grammar contains production rules merge single production rule 
assume non terminal start taxonomy xml schema languages formal language theory symbol occurs content model production rule words non terminals useless 
define regular tree grammar generates set trees terminals 
define interpretations 
definition 
interpretation interpretation tree regular tree grammar mapping node non terminal denoted root start symbol root root node subordinates exists production rule terminal label 
matches ready define generation trees regular tree grammars regular tree languages 
definition 
generation tree generated regular tree grammar interpretation example 
instance tree generated interpretation shown 
definition 
regular tree language regular tree language set trees generated regular tree grammar 
local tree grammars languages define competition non terminals validation difficult 
introduce restricted class called local prohibiting competition non terminals tak 
class roughly corresponds dtd 
definition 
competing non terminals different non terminals said competing production rule left hand side production rule left hand side production rules share terminal right hand side 
example 
consider regular tree grammar book author son article author daughter book author son daughter book article book book author author author son son son article article author author author daughter daughter daughter author author compete production rule author author share ter extreme markup languages makoto murata lee murali mani instance tree generated interpretation 
unique labels represent nodes instance tree 
author right hand side 
competing non terminal pairs grammar 
definition 
local tree grammar language local tree grammar ltg regular tree grammar competing non terminals 
tree language local tree language generated local tree grammar 
example 
example local author author compete 
example 
grammar local tree grammar book author son pcdata book author son pcdata book book book author author author son son son pcdata pcdata pcdata observe local tree grammars extended contextfree string grammars look similar 
describes sets trees describes sets strings 
parse tree set local tree language 
single type tree grammars languages introduce restricted class called single type prohibiting competition non terminals single content model 
class roughly corresponds xml schema 
definition 
single type tree grammar language type tree grammar regular tree grammar production rule non terminals content model compete start symbols compete 
tree language single type tree language generated single type tree grammar 
example 
grammar shown example single type 
observe non terminals para para compete occur content model production rule doc 
example 
consider example 
grammar single type tree grammar production rules non terminal content models competing non terminals content models 
restrained competition tree grammars languages introduce restricted class called restrained competition 
key idea content models restraining competition non terminals 
definition 
restraining content model competition competing non terminals sequences non terminals generate 
definition 
restrained competition tree grammar language restrained competition tree grammar regular tree grammar production rule content model competition non terminals occurring content model start symbols compete 
tree language restrained competition tree language generated restrained competition tree grammar 
example 
grammar restrained competition tree grammar 
non terminals para para compete occur content model production rule doc 
content model para para competition para para extreme markup languages para may occur non terminal para may occur non non terminal 
example 
grammar restrained competition tree grammar 
observe content model para para restrain competition non terminals para para 
example suppose para para match content model 
doc para para pcdata doc para pcdata doc doc doc para para para para pcdata para para pcdata pcdata pcdata summary examples example grammars demonstrates classes tree grammars 
table shows class example belongs 
regular restrained competition single type local expressiveness closure having introduced classes grammars languages consider expressiveness closure 
interested reader referred lmm proofs 
consider expressiveness practical examples 
terminal local tree grammar provides single content model elements terminal 
example title elements may subordinate section chapter author elements permissible subordinate children 
single type tree grammar tight restriction allow paragraph paragraphs section different content models 
restrained competition tree grammar lifts restriction 
regular tree languages captured restrained competition tree grammars aware practical examples 
theoretical observations expressiveness 
regular tree grammars strictly expressive restrained competition tree grammars 
regular tree grammars rewritten tree grammars 
restrained competition tree grammars strictly expressive single type tree grammars 
taxonomy xml schema languages formal language theory restrained competition tree grammars rewritten single type tree grammars 
single type tree grammars strictly expressive local tree grammars 
single type tree grammars rewritten local tree grammars 
observations closure 
class languages said closed union intersection languages class union intersection difference languages belongs class 
class regular tree languages closed union intersection difference 
class local tree languages closed intersection closed union difference 
class single type tree languages closed intersection closed union difference 
class restrained competition languages closed intersection closed union difference 
document validation section consider algorithms document validation 
grammar tree algorithms determine tree generated grammar construct interpretations tree 
algorithms variations tree automata 
algorithms require tree model 
tree model vs event model programs handling xml documents including validation typically tree model event model 
tree model xml parser creates tree memory 
application programs access tree memory api dom wha traverse tree number times 
event model xml parser create tree memory merely raise events start tags tags 
application programs notified events api sax meg 
words application programs visit leave elements document depth manner 
application program visits element document visit element 
models fine small documents tree model performance problems significantly large documents 
dtd validation variations validation local tree grammars 
dtds correspond local tree grammars validation years 
remember local tree grammar competing non terminals see definition 
element uniquely determine nonterminal terminal element 
validation local tree grammars easily built extreme markup languages makoto murata lee murali mani event model 
suppose xml processor encountered start tag element document 
easily determine non terminal start tag 
suppose xml processors encountered tag child elements start tags elements encountered xml parser assume know non terminals assigned examine matches content model unique production rule idea effected algorithm 
algorithm validation local tree grammars 
element start tag encountered determine terminal say search production rule grammar 
guaranteed production rule 

element tag encountered sequence non terminals assigned children element compared sequence match report document invalid halt 
observe algorithm determines document generated grammar constructs interpretation document 
document interpretation local tree grammar constructed interpretation interpretation input document 
extend algorithm single type tree grammars restrained competition tree grammars 
extension quite simple straightforward 
remember single type tree grammar allow competing non terminals single content model see definition 
element uniquely determine non terminal terminal element non terminal parent element 
furthermore single type tree grammar allow competing start symbols uniquely determine non terminal terminal root element 
change behavior start tag events 
algorithm validation single type tree grammars 

element start tag encountered determine terminal say root start tag represents root element search production rule grammar start symbol 
guaranteed production rule 
report document invalid halt 
non root start tag represents non root element encountered start tag parent element determined non terminal content model say parent element 
search production rule occurs 
guaranteed production rule 
report document invalid halt 

element algorithm 
consider restrained competition tree grammars 
remember content model restrained competition tree grammar allow competing non terminals follow sequence non terminals see definition 
element uniquely determine non terminal terminal element non terminals parent element elder sibling elements 
change behavior start tag events non root elements 
algorithm validation restrained competition tree grammars 

element start tag encountered determine terminal say root algorithm 
non root start tag represents non root element encountered start tag parent element elder sibling elements 
determined non terminal content model say parent element determined non terminals say elder sibling elements 
search production rule allows follow guaranteed production rule 
report document invalid halt 

element algorithm 
observe document extended algorithms construct interpretation document 
document interpretation single type restrained competition tree grammar 
variations tree automata study algorithms applicable arbitrary regular tree grammars consider tree automata 
validation trees tree regular grammars considered execution tree automata 
automata regular tree grammars studied past cdg 
top tree automata bottom tree automata begins root node assigns states elements handling superior elements begins leaf nodes assigns states elements handling subordinate elements 
deterministic tree automata non deterministic tree automata assigns state element extreme markup languages assigns number states element 
result types tree automata deterministic top non deterministic top deterministic bottom non deterministic bottom 
known non deterministic top deterministic bottom non deterministic bottom tree automata equally expressive 
words regular tree language accepted non deterministic topdown automata 
thing applies deterministic bottom non deterministic bottom tree automata 
hand deterministic top tree automata equally expressive 
words regular tree language accepted deterministic top tree automaton 
algorithms similar deterministic topdown automata 
deterministic top tree automata assign state element examining element examine parent element state assigned 
restriction deterministic topdown tree automata useless xml 
hand algorithms examine element assigning non terminal state 
call semi deterministic top 
approach validation deterministic bottom tree automata 
regular tree grammar create deterministic bottom tree automaton 
done introducing state subset set non terminals grammar constructing transition function states 
execution constructed deterministic bottom tree automata straightforward biggest advantage approach 
consider approach reasons 
creation deterministic bottom tree automata easy scope 
second straightforward implementation lead poor error message 
deterministic tree automata nondeterministic ones algorithms subsection 
non deterministic algorithms regular tree grammars section show algorithms regular tree grammars 
non deterministic tree automata 
algorithm simulates non deterministic top tree automata 
implemented event model requires tree model 
algorithms algorithm create string automata content models 
algorithm effected simple recursive procedure validate 
content model sequence ele taxonomy xml schema languages formal language theory ments validate compares sequence content model reports success failure 
algorithm validate 
input content model sequence elements 
output success failure 
switch statement case null string empty sequence procedure succeeds 
fails 
case non terminal procedure fails 
identify production rules ar terminal production rules recursively invoke validate children 
invocations succeeds procedure succeeds 
fails 
case invoke validate invoke invocations succeeds procedure succeeds 
fails 
case invoke validate invoke validate invocations succeed procedure succeeds 
fails 
case procedure succeeds 
invoke validate invoke validate invocations succeed procedure succeeds 
fails 
algorithm non deterministic top validation regular tree grammars 

root element 
start symbol invoke algorithm validate root element 
invocations succeeds document valid 
invalid 
algorithm require understanding formal language theory 
hand approach significant disadvantages 
algorithm may cause exhaustive search 
second algorithm leads poor error message 
invalid document algorithm tries possibilities turn 
fail algorithm tell possibilities closest success report required change 
observe algorithm provides interpretation document ensure inter extreme markup languages makoto murata lee murali mani 
fact interpretation may exist tree 
example suppose xml document doc para doc validated grammar example 
non terminals para para assigned element para 
algorithm merely returns possible interpretations 
second algorithm simulates non deterministic bottom tree automata 
significant extension algorithm biggest difference set non terminals single non terminal assigned element 
extension advanced algorithms built top event model 
algorithm validation regular tree grammars 
element start tag encountered identify production rules terminal tag 
note production rule may 

element tag encountered encountered tags children element 
create non terminal sequences choosing non terminal assigned concatenating chosen non terminals 
created non terminal sequences match content model ar nonterminals element 
created nonterminals match content model element report document invalid halt 
element root element validation succeeds non terminals assigned root element start symbol 
algorithm provide unique interpretation document 
interpretation possible algorithm returns 
summary algorithms properties table shows various algorithms described section compare respect tree automaton simulate model event model tree model algorithm requires 
algorithms class tree automaton algorithms semi deterministic topdown algorithm non deterministic topdown model algorithm requires event model tree model applicable deterministic bottom applicable algorithm non deterministic bottomup event model evaluating different xml schema language proposals section compare representative xml schema language proposals dtd dsd xml schema xduce re lax core trex 
focus mathematical properties schema languages framework mention features ease possible 
capture schema proposals regular tree grammars 
purpose slightly modify definition production rules 
allow production rules terminals form regular expression impose restriction non terminals described production rules safely expanded regular expressions non terminals 
example disallowed 
note production rule causes non regular string languages 
relationship expressive power various grammar classes previous section helps compare different xml schema proposals see 
dtd dtd defined bps local tree grammar 
enforced distinguishing terminals nonterminals 
element type declarations dtds production rules element types xml terminals non terminals 
content models required deterministic see appendix bps 
attribute list declarations dtds associate attributes terminals 
example consider dtd element doc para element para pcdata captured local tree grammar shown doc para pcdata doc para pcdata doc doc doc para para para pcdata pcdata pcdata dsd main features dsd kms non terminals content expressions specify unordered content context patterns specify structures structures values specifying relationships points idref attributes 
framework capture features structure specification values points idref attributes 
consider structural specification dsd dsd impose constraint production rules express regular tree grammar dsd 
extreme markup languages example author publisher author perfectly valid content model dsd author author competing non terminals 
parsing dsd uses greedy technique backtracking operator 
dsd accept regular tree languages 
example consider sequence author elements matches author second matches author 
greedy evaluation dsd tries author elements try author second 
consider element definitions dsd 
example element definition dsd form id book title name title converted grammar notation book title title expression 
expression equivalent 
context patterns dsd represent conditions paths root may element definitions 
framework directly capture context patterns 
mur author shows pair regular tree grammar regular path expression locating nodes rewritten single regular tree grammar 
rewriting allows context patterns captured framework 
xml schema xml schema represents single type tree grammar 
xml schema complicated mechanisms expressive viewpoint formal language theory 
furthermore ka argued mechanisms xml schema confusing avoided 
main features xml schema complex type definitions anonymous type definitions group definitions subtyping extension restriction substitution groups type definitions integrity constraints key unique constraints 
features described framework illustrated 

complex type definition defines production rule terminals 
instance xsd complextype name book xsd sequence xsd element name title type xsd string minoccurs maxoccurs xsd element name author type xsd string minoccurs maxoccurs unbounded xsd element name publisher type xsd string minoccurs maxoccurs taxonomy xml schema languages formal language theory xsd sequence xsd complextype converted production rules book title author publisher title title pcdata author author pcdata publisher publisher pcdata 

group definition defines non terminal production rule terminal 
example fal section shown xsd group name xsd sequence xsd element name shipto type xsd element name type xsd sequence xsd group group definition equivalent production grammar rules shipto shipto shipto 

object oriented programming xml schema borrows concepts sub typing 
achieved extension restriction 
example derived types extension slightly modified fal section 
xsd complextype name address xsd sequence xsd element name name type xsd string xsd element name street type xsd string xsd element name city type xsd string xsd sequence xsd complextype xsd complextype name xsd xsd extension base address xsd sequence xsd element name postcode type xsd string xsd sequence xsd extension xsd xsd complextype type definitions address equivalent production rules address name street city name street city postcode production rules name street city postcode 
suppose element declaration xsd element name shipto type address equivalent production rules shipto shipto address shipto shipto 
note production rule shipto shipto automatically inserted true object oriented programming paradigm 
considered extreme markup languages makoto murata lee murali mani side effect formal language theory 
xml schema provides attribute called block prevent sideeffects 
example address defined block automatically insert rule 
xml schema provides attribute called final prevents derived types extension restriction 
example address defined final derive type called 

xml schema provides mechanism called xsi type allows satisfy constraints restrained competition tree grammar 
example legal rules xml schema 
xr title title author title author publisher book book book book book book grammar restrained competition tree grammar 
checking document validity properties single type tree grammar maintained requiring document mention explicitly type 
example valid node instance tree book xsi type 
noted xml schema equivalent regular tree grammar xml schema define type book title author author author author author author 

substitution group definition previously known equivalence classes converted equivalent grammar definition follows 
example consider substitution group definition fal section modify slightly easy explanation element name type ipo comment element name type ipo comment converted grammar rules ipo comment ipo comment ipo comment customer comment non terminals 
substitution groups require production rule form ipo comment ipo comment derived xduce xduce provides type definitions equivalent regular tree grammars 
key features xduce type constructors define regular expression types derived types subtyping 
type definition xduce produces tree converted framework production rule terminal 
consider example type addrbook addrbook person written addrbook addrbook person 
type definition produce tree written production rule terminal 
example type represents production rule 
note xduce writes type rules right linear form content model definition equivalent regular string language 
xduce provides mechanism called reflexive transitive relation terminals example consider subtag declaration subtag convert relation grammar consider production rules right hand side 
rules 
subtag declaration adds additional rules relax core regular tree grammar expressed relax core mur 
main features relax core clear differentiation 
convert relax core framework consider tag elements tag elements specify role attribute 
case value name attribute tag element considered value role attribute 

corresponding tag element defines production rule terminal 
example consider slightly modified mur 
role section label section ref label occurs tag name section converted production rule section section 
defines production rule terminal 
example consider mentioned mur extreme markup languages label ref label para converted para relax core allows 
requires recursion ensures grammar remains regular 

relax core allows multiple share label 
example specify relax core label ref label para label ref label converted production rules para 
relax core allows multiple share label follows 
example role label ref label role label ref label role label ref label tag name converted production rules ax ar ay ar bz 

consider tag elements specify role attribute 
effect adds additional level indirection rule specification 
convert grammar representation need collapse role attributes 
clear example mur 
tag name val role val integer attribute name type required true enumeration value integer attribute tag role val integer label val ref label tag name val role val string taxonomy xml schema languages formal language theory attribute name type required true enumeration value string attribute tag role val string label val ref label converted production rules val val val val val represents val type string val represents val type integer 
trex trex cla quite similar relax core 
major differences trex relax core content models containing attributes elements interleaving shuffling regular expressions wild cards names handling namespaces 
differences syntactical 
differences highly important new validation techniques 
lack space consider issue 
trex supports notion non terminals define 
relax core trex distinguish non terminals produce trees non terminals produce list trees 
example consider trex pattern grammar start ref name start define name element name ref name card element define define name inline choice element name bold ref name inline element element name italic ref name inline element choice define grammar extreme markup languages makoto murata lee murali mani non terminal produces tree inline non terminal produces list trees 
trex pattern represented framework follows card bold bold inline italic italic inline inline bold italic implementations subsection describe status implementations xml schema languages 

dtd membership checking dtds widely implemented 
implementations event model algorithm 
xduce type assignment implemented designers xduce tree model 
implementation similar algorithm 
dsd type assignment dsd similar xduce 
tree model variation algorithm 
backtracking thorough perform exhaustive search 

xml schema schema validity assessment defined xml schema part similar algorithm 
best knowledge implementations follow model 
xml schema validator tree model 
xml schema processor implementation combined sax parser dom parser 
combined event model parser support key unique 
xerces java parser implementation event model support key unique 
amp xml document editors tree model 
editing documents controlled schemas xml schema 

relax core implementations relax core available www xml gr jp relax 
different algorithms type assignment membership checking 
program tree model 
simulates top non deterministic automata backtracking 
backtracking may require exhaustive search 
relax verifier program event model 
performs membership checking perform type assignment 
program algorithm 
expressive power different regular tree grammars regular tree grammars relax core xduce trex restrained competition tree grammars single type tree grammars xml schema local tree grammars dtd extreme markup languages relax verifier java program event model 
algorithm combines algorithm top algorithm bottom 
element visited possible non terminals element computed algorithm possible non terminal may 
algorithm program determines possible non terminals allowed subordinate elements 
advantages combining algorithms appropriate error messages error recovery 
java class generator 
relax module generates java classes represent xml documents permitted module 
java classes receive xml documents dom trees perform type assignment 
type assignment uses top non deterministic automata limited backtracking 

trex implementation trex available 
key feature algorithm efficiency error message 

trex implementation james clark implementation considered combination algorithms advanced uses derivatives regular expressions construct tree automata lazily 
furthermore algorithm efficiently support interleave attribute element content models 
compare xml schema language proposals studied classes tree languages local restrained competition regular 
class regular expressive closed boolean operations classes weaker closed union difference operations 
validation algorithms classes 
shown class captured dtd dsd xml schema xduce relax core trex respectively 
surprisingly viewpoint formal language theory xml schema powerful relax core trex 
xml schema capture class single type closed union difference 
hand relax core trex capture class regular closed boolean operations 
class regular may provide interpretation document 
argue multiple interpretations problematic class regular avoided reason 
oasis started relax ng cm unifies relax core trex 
relax ng inherits advantages languages simple powerful solid language 
taxonomy xml schema languages formal language theory bibliography brown fuchs robie wadler 
msl 
model xml schema th int world wide web conf hong kong may 
bps bray paoli sperberg mcqueen eds 
extensible markup language xml nd edition recommendation oct 
www org tr 
cla clark 
trex tree regular expressions xml 
www com trex 
cdg comon dauchet gilleron tison 
tree automata techniques applications 
www grappa univ lille fr tata 
cm clark murata eds 
relax ng tutorial oasis working draft jun 
www oasis open org committees relax ng tutorial html 
fal fallside eds 
xml schema part primer recommendation may 
www org tr xmlschema 
hu hopcroft ullman 
automata theory language computation 
addison wesley 
hosoya vouillon pierce 
regular expression types xml 
int conf 
functional programming icfp montreal canada sep 
jel 
xml schema specification context feb 
www net context html 
ka 
xml schema simple xml com www xml com pub html 
kms klarlund moller 
dsd schema language xml 
acm sigsoft workshop formal methods software practice portland aug 
lc lee chu 
comparative analysis xml schema languages 
acm sigmod record sep 
lmm lee mani murata 
reasoning xml schema languages formal language theory 
technical report ibm almaden research center rj log nov 
www cs ucla edu 
meg 
sax simple api xml may 
www com sax index html 
mur murata 
relax regular language description xml aug 
www xml gr jp relax 
mur murata 
extended path expressions xml acm pods santa barbara ca may 
tak takahashi 
generalizations regular sets study context free languages 
information control jan 
thompson beech maloney mendelsohn eds 
xml schema part structures recommendation may 
www org tr xmlschema 
ccf don chamberlin james clark daniela florescu jonathan robie sim stefanescu eds 
xquery extreme markup languages makoto murata lee murali mani xml query language working draft june 
www org tr xquery 
oa oasis 
sgml xml forest hedge automata theory web page may 
xml org hedge automata html 
vv vianu :10.1.1.133.1841
web odyssey codd xml 
acm pods santa barbara ca may 
wha wood le byrne champion isaacs jacobs nicol robie wilson eds 
document object model dom level specification recommendation sep 
www org tr wd dom level 
biography murata makoto family researcher working document processing 
lee ph candidate database systems focus xml 
murali mani ph candidate database systems focus xml 
partially supported nsf 
extreme markup languages 
