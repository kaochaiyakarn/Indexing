anthill framework development agent peer peer systems babao glu hein meling alberto montresor technical report ublcs november revised september department computer science university bologna zamboni bologna italy university bologna department computer science research technical reports available postscript format anonymous ftp cs unibo pub tr ublcs www url www cs unibo 
plain text abstracts organized year available 
local authors reached mail address name cs unibo 
questions comments addressed admin cs unibo 
titles ublcs technical report series formalization analysis prototyping mobile code systems ph thesis mascolo 
nature inspired search techniques combinatorial optimization problems ph thesis rossi 
desktop interfaces internet users efficiency usability issues ph thesis january 
expert system evaluation multiple sclerosis february 
probabilistic information flow process algebra aldini april revised september 
architecting software systems process algebras bernardo ciancarini july 
non determinism probabilistic timed systems general distributions aldini july 
anthill framework development agent peer peer systems babaoglu meling montresor november revised september 
timed join calculus laneve february 
process algebraic approach analysis probabilistic non interference aldini gorrieri march 
quality service resources optimization wireless networks mobile hosts ph thesis march 
specification analysis stochastic real time systems ph thesis march 
qos adaptive middleware services ph thesis march 
semantic web formal mathematics ph thesis schena march 
revisiting interactive markov chains june 
user untraceability generation internet proposal august 
adaptive resilient self organizing peer peer systems montresor meling babaoglu september 
self organizing self repairing resilient large scale distributed systems montresor babaoglu meling september 
messor load balancing swarm autonomous agents montresor meling babaoglu september 
anthill framework development agent peer peer systems babao glu hein meling alberto montresor technical report ublcs november revised september peer peer systems characterized decentralized control large scale extreme dynamism operating environment 
seen instances complex adaptive systems cas typically biological social sciences 
describe anthill framework support design implementation evaluation applications ideas multi agent evolutionary programming borrowed cas 
anthill system consists dynamic network peer nodes societies adaptive agents travel network interacting nodes cooperating agents order solve complex problems 
anthill construct different classes services exhibit resilience adaptation self organization properties 
describe preliminary experiences anthill implementing file sharing application 
department computer science university bologna zamboni bologna italy email babaoglu montresor cs unibo department telematics norwegian university science technology heim norway email meling item ntnu informally peer peer systems distributed systems concept resource sharing direct exchange peer nodes nodes having role responsibility 
exchanged resources include content popular file sharing applications storage capacity cpu cycles computational storage grid systems :10.1.1.110.5867
distributed computing intended synonymous computing long term invented initial desire subverted advent client server computing popularized world wide web 
modern term distributed computing intended pioneers differs important aspects 
applications reach harness outer edges internet consequently involve scales previously 
second definition excludes form centralized structure requiring control completely decentralized 
importantly environments applications deployed exhibit extreme dynamism structure content load 
topology system typically changes rapidly due nodes voluntarily coming going due involuntary events crashes partitions 
load system may shift rapidly region example certain files hot file sharing system computing needs node suddenly increase grid computing system 
traditional techniques building distributed applications satisfactory dealing scale dynamism characterize modern systems 
example certain filesharing applications rely flooding style communication severely limiting scalability 
systems require manual intervention configuration tuning environment changes 
argue satisfying needs application development requires paradigm shift includes adaptation resilience self organization primary concerns 
suggest complex adaptive systems cas commonly explain behavior certain biological social systems basis programming paradigm applications 
cas framework system consists large number relatively simple autonomous computing units agents 
cas typically exhibit called emergent behavior behavior agents taken individually may easily understood behavior system simple explanation 
words interactions agents spite simplicity give rise richer complex patterns generated single agents viewed isolation 
examples cas include multicellular organisms social insect colonies living ecosystems 
perspective cas offer attractive properties including total lack centralized control 
furthermore emergent behavior cas highly adaptive changing environmental conditions unforeseen scenarios resilient deviant behavior failures self organizing desirable global configurations 
importantly global properties obtained explicitly programming individual agents 
order pursue ideas developing anthill novel framework application development ideas multi agent systems mas evolutionary programming borrowed cas 
goals anthill provide environment simplifies design deployment systems paradigms provide testbed studying experimenting cas systems order understand properties evaluate performance 
anthill uses terminology derived ant colony metaphor 
anthill distributed system composed network interconnected nests 
nest peer entity sharing computational storage resources 
nests handle requests originated local users generating ants autonomous agents travel nest network trying satisfy request 
ants observe environment perform simple local computations leading actions observations 
actions ant may modify environment ant location environment 
anthill emergent behavior manifests swarm intelligence collection simple ants limited individual capabilities achieves intelligent collective behavior 
ublcs anthill model multi agent paradigm promoted anthill particularly suited applications deployed highly dynamic environments subject incomplete imprecise information 
artificial ant colonies mimic real ant colonies natural instances mas known capable solve complex optimization problems including arising communication networks 
anthill api supports application development deployment provision set services offered nests storage management communication topology management ant scheduling 
developers build applications simply defining structure system designing appropriate ant algorithms anthill api solving application problem 
services provided anthill free developer considering low level details communication security scheduling strategies 
anthill includes simulation environment aid developers analyze evaluate behavior systems prior deployment 
simulation parameters structure network ant algorithms deployed characteristics workload system defined xml files providing flexible configuration mechanism 
toolkits mas simulation anthill uses single ant implementation simulation runtime environments avoiding cost re implementing ant algorithms deploying 
important feature obtained careful design anthill api providing distinct implementations simulation deployment 
addition adaptation properties derived multi agent structure anthill pushes analogy natural systems enabling developers evolve ant algorithms better adapt certain tasks 
accomplished evolutionary computing techniques genetic algorithms simulation environment 
set parameters define behavior ant algorithm considered genetic code system automatically evolves ant populations successive generations improve appropriate fitness measure 
order test ideas regarding cas anthill build simple file sharing application called gnutant 
doubt building top anthill simplified implementation 
importantly resulting system exhibits adaptiveness respect variety conditions continues improve performance time goes despite starting state total ignorance 
gnutant interest combines best characteristics popular file sharing systems gnutella freenet 
anthill model section description anthill model provided 
basic elements composing model defined details prototype implementations model postponed section 
anthill system composed self organizing overlay network interconnected nests illustrated 
nest middleware layer capable performing computations hosting resources 
machine connected internet running anthill act nest 
network characterized absence fixed structure nests come go discover top communication substrate 
nest interacts local instances applications provides set services 
applications provide interface user network services distributed nature collaboration nests 
example application may file sharing application service distributed indexing service file sharing application locate files 
applications performs requests listens replies local nest 
requests replies constitute interface applications services 
example scientific document sharing network request query particular set keywords reply contain set urls documents containing keywords 
nest receives request local application appropriate service handling ublcs resource storage resource storage resource storage resource storage 
overview nest network 
resource storage resource storage anthill model request selected set available services 
services implemented ants autonomous agents capable travel nest network 
response request ants generated assigned particular task 
exploring network ants interact nests visit order accomplish goal 
anthill specify services nest provide impose particular format requests replies 
provision services interpretation requests delegated ants 
set available services dynamic new services may installed user 
nest illustrates architecture nest composed logical modules ant scheduler communication layer resource managers 
ant scheduler module multiplexes nest file manager url manager routing storage task manager network file sharing service grid service ant scheduler communication layer 
architecture nest 
nest ublcs public interface nest void request request request listener void factory void nid void nid 
nest interface 
anthill model computation resource visiting ants 
responsible enforcing nest security providing sandbox ants order limit resources available ants prohibit ants performing potentially dangerous actions local file access 
communication layer responsible discovery new nests network topology management ant movement nests 
network node unique identifier 
order communicate remote node identifier known 
set nests known node called neighbors node 
note concept neighborhood involve distance metrics metrics application dependent appropriately selected developers 
collection neighbor sets defines nest network highly dynamic 
example communication layer may discover new neighbor may forget known nest considered unreachable 
discovery removal processes may mediated ants performed directly communication layer 
case ants may report new remote nodes visited may fail move neighbor communication problem 
case exact implementation discovery removal depends underlying communication substrate discussed section 
nests offer resources visiting ants resource managers 
example resources files file sharing system cpu cycles computational grid respective resource managers disk storage manager task scheduler 
resource manager associated set policies managing inherently limited resource 
example lru policy may discard items managed file manager space needed new files 
service installed nest associated set resource manager modules 
example nest provides distinct services file sharing service distributed index file retrieval routing storage ants making routing decisions file manager maintaining shared files url manager maintain distributed index computational grid application task manager executes tasks assigned 
details nest interface shown 
contains methods may invoked application interact nest 
main method interface request perform new requests register listener replies 
furthermore interface provides methods nest administration addition removal neighbors registration new services 
ants ants generated nests response user requests ant tries satisfy request generated 
ant move nest nest fulfills task task requires may return back originating nest 
ants satisfy task time live ttl parameter terminated 
moving ant carries state may contain request results ant specific data 
ant algorithm may transmitted ant state destination nest know appropriate code transfer mechanisms avoid download algorithm ublcs network ant reply communication layer ant scheduler run application request nest nest implementation reply move ant implementation 
anthill interaction model 
evolutionary framework resource storage update new version algorithm available 
ants communicate directly communicate indirectly leaving information related service implementing appropriate resource manager visited nests 
example ant implementing distributed lookup service may leave routing information helps subsequent ants direct region network contains searched key 
form indirect communication real ants known stigmergy 
behavior ant determined current state interaction resource managers algorithm may non deterministic 
example ant may probabilistically decide follow believed best route accomplishing task choose explore alternative regions network 
ants implement ant interface shown 
run method contains ant algorithm executed nest visited ant trip 
set actions available ants limited included interface shown 
actions ants allowed move nests access local resource managers obtain identifiers local nest neighbors augment list neighbor nests notify nest reply request originated nest 
gives structural overview interactions various anthill components 
addition building application nest interface reply listener developer implement set ant algorithms facilitating services needed particular application 
evolutionary framework anthill exploit nature metaphor evolutionary techniques improving various characteristics system 
particular genetic algorithms tuning ant algorithms system 
anthill system composition operating environment collective behavior ants algorithms parameterized various ways 
operating environment describes limiting factors disk capacities connectivity degree join leave frequency nodes typical parameter ant algorithm exploration probability allow ant deterministically follow best path resource non deterministically select neighbors current nest adding degree randomness exploration 
ublcs anthill framework genetic algorithms specify optimization criteria constraints parameters operating environment ant algorithms 
typical optimization criterion minimization total path length traversed ants reducing imposed network load constrained connectivity degree leave frequency threshold percentage ants succeed 
optimization problems involve parameters constraints solvable traditional techniques need genetic algorithms 
currently extending anthill simulation environment include optimization criteria definitions allow automatic selection parameters fitness function specific application 
addition line genetic techniques investigating genetic techniques applied run time 
example order satisfy request nest launch ants characterized different set parameters rate local fitness criterion 
subsequent requests delegated ants derived genetically deemed fittest previous requests 
nests steal algorithms parameters visiting ants crossover mutation techniques generating new ants 
interesting note line evolutionary selection mechanism viewed system task tune ants original application 
anthill framework section discuss characteristics runtime simulation environments 
distinct implementations anthill model real network deployment evaluation purposes respectively 
toolkits multi agent simulation anthill uses single ant implementation simulation real network environments avoiding cost re implementing ant algorithms deploying promoting rapid deployment prototype ant algorithms internet 
runtime environment prototype runtime environment distributed implementation anthill model currently development 
prototype written java jxta open source project promoted sun microsystems 
jxta aims establishing network programming platform systems identifying small set basic facilities necessary support applications providing building blocks higher level functions 
interested java version jxta implementations bindings different programming languages 
interoperability different implementations guaranteed xml low level formatting systems messages exchanged jxta peers 
benefits basing implementation jxta 
example jxta provides possibility different transport layers communication including tcp ip capable handling firewall nat related problems 
spare implementation low level details 
furthermore may exploit complex security architecture developed jxta 
jxta middleware composed layers 
bottom jxta core deals low level functions peer establishment peer discovery communication management routing 
jxta services built top core deal higher level concepts indexing searching file sharing 
services useful jxta applications build high level applications chat auction persistent storage 
runtime environment anthill designed jxta service exploits facilities offered jxta core provide infrastructure construction ant distributed applications 
implements nest interface providing methods performing generic requests anthill applications 
nest implementation includes ant scheduler capable multiplexing java virtual machine multiple visiting ants 
security ublcs anthill framework model java execution ants confined controlled environment sandbox limiting interactions local nest included interface 
number disk memory resource managers provided enabling ant algorithms pre installed classes visited nests 
possible ants specialized resource storages 
communication layer fundamental primitives offered jxta core pipes peer groups advertisements 
pipes communication channels sending receiving messages communication layer move ants nests 
peer group collection cooperating peers providing common set services speaking set protocols 
peers may participate groups time offering services 
anthill general peer group constituted peers executing nest service peer groups constituted set nests accept execute particular ant algorithm 
owners peer nodes able decide kind services machines going offer accepting rejecting installation new ant algorithms 
features java virtual machine implementing simple class loader capable downloading code unknown ants remote sites cache local disks avoid repeated downloads 
advertisements xml structured documents describe publish existence resource peer peer group service 
advertisements jxta discovery protocol locate services 
anthill advertise peer groups nests offering particular service 
simulation environment evaluate ant algorithms anthill includes simulation environment behavior particular ant implementation may simulated assessed 
simulating different applications require developing appropriate ant algorithms corresponding request generator characterizing user interactions application 
simulation study called experiment specified xml defining collection component classes set parameters component initialization 
example component classes specified include simulated nest network request generator ant algorithm simulated 
initialization parameters include duration simulation network size failure probability number requests generated type capacity resource managers ants 
flexible configuration mechanism enable developers build experiments run time assembling collection pre defined customized component classes simplifying process evaluating ant algorithms 
current implementation network simulated inside single java virtual machine 
network specified total number nests number neighbors associated nest 
initially required number nests generated set neighbors nest selected randomly set nests 
network dynamic new nests may join network runtime existing nests may crash voluntarily leave network pre defined join leave probabilities 
furthermore topology network may evolve simulation due ants exploring network leaving information remote nests 
simulated nests clearly distinct simpler ones runtime environment 
important note ant algorithms totally independent nest implementation continue environments changes 
communication layer local interactions remote communication ants moving nest simply transferred scheduling queue destination nest 
ant schedulers simulated nests controlled centralized scheduler uses provided request generator create requests round robin fashion invokes ants run method 
resource managers implemented simple data structures maximum capacity associated replacement policies 
simulation proceeds executing sequence generated requests nest network monitoring performance parameters number request initiated satisfied ant moves performed network generated traffic simulation environment enables pro ublcs user insert start download search reply shared folder network application logic layer insert request search request reply nest network layer 
gnutant application overview 
file sharing gnutant evaluate different experiments obtain average figures collected statistics 
monitoring network traffic performed packet level ant level measuring number ants sent various nests system 
addition single machine simulator investigating distribute simulated nest network cluster java virtual machines remedy problems scaling simulation environment millions nodes 
scalability problems simulation environment due relatively large memory footprint required nest implementation 
file sharing gnutant section preliminary experience anthill build file sharing application called gnutant 
order facilitate file searches gnutant builds distributed file index scattered nest network task store urls shared files routing information needed navigate index 
index constructed runtime gnutant ants travel network collecting information new existing files insert information index 
gnutant file associated meta data comprising set textual keywords unique file identifier 
keywords gnutant organize distributed index routing may provided user inserted file obtained automatically filename 
file identifier composed file size cryptographic digest computed file content enables comparison files equality 
different urls replicas file file identifier 
exploit property order provide faster file downloads requesting disjoint fragments file multiple locations 
gives overview gnutant application 
users interact gnutant copying files sharing local folder issuing search queries listening replies selecting files download remote sites 
application logic layer detects new file shared folder insert request issued local nest order advertise presence file nests network 
search queries users issued search requests 
receiving request nest generate appropriate ants handle 
ublcs file sharing gnutant insertion request file contains file identifier url collection keywords search request simply specifies collection keywords 
say file satisfies search request set associated keywords contains keywords included search request 
shown nest includes resource managers file storage managing files shared folder url storage containing urls files routing storage ants may access modify order routing decisions improve routing ants respectively 
url routing storages network constitute distributed file index 
gnutant ant algorithms section briefly ant algorithms implement gnutant 
additional details companion 
gnutant ants generated response user requests travel network trying satisfy 
distinct types ant algorithms specialized different task 
type specialized advertising existence files insertion urls distributed index new file available shared folder user placed download 
type specialized file searches generated response user queries 
exploits information left routing storages ants trying determine shortest path files matching user query 
reaching ttl ant return originator nest backtracking path 
return trip ant update distributed index routing storages reflect findings 
type reduce response times searches 
generated nest locates file 
returns immediately originator nest may continue exploration find files satisfying query 
advertise file generated keyword associated inserted file 
similarly generated keywords contained search request 
ants carries entire query string 
ants try satisfy request concurrently exploring different regions nest network routed independently associated keyword 
gnutant routing routing decisions specialized routing storage provided gnutant selecting nest visit network exploration 
routing storage concept hashed keyword routing similar routing technique freenet 
routing storages associate hash value keyword set nests believed store urls files associated corresponding textual keyword 
visiting nest ants inspect routing storages associated keyword 
exact match ant selects nest set corresponding matching hashed keyword nest associated closest hashed keyword selected 
hash value keyword computed secure hash algorithm sha obtain bit value 
mapping textual string space bit string space enables compare hashed keywords determine closeness 
furthermore hashing keywords helps disperse load evenly routing storages due uniformity property sha 
basing routing storages raw textual keywords result highly unbalanced load keywords tend highly clustered textual string space 
notion closeness hashed keywords fundamental gnutant routing scheme 
allows nests biased certain portion hashed keyword space 
nest listed routing storage particular keyword tend receive requests keywords similar 
nests specialized storing urls files having similar hashed keywords forwarding request result nest gaining url requested file 
clustering property improve search performance time routing storages evolve knowledge enabling ants quickly find relevant region nest network 
ublcs successful search requests preliminary simulation results number search requests 
search success rate 
file sharing gnutant section evaluation preliminary results gnutant application obtained anthill simulation environment 
order render simulation realistic collected set query strings monitoring gnutella network 
obtained query strings names files inserted nest network priori running simulation 
potentially queries satisfied 
furthermore routing storages initialized randomly generated sha keys causing ants move randomly 
simulation run static node nest network fan degree 
insertion phase search requests issued statistics behavior system collected 
search requests simulation generated geometric distribution selecting queries set gnutella query strings 
distribution enable bias search requests certain portion available documents popular search requests selected frequently 
ttl parameter search ants fixed hops 
capacity routing file url storages set entries respectively 
resource storages lru replacement policy 
number search hits sampled th request simulation repeated times order obtain average values 
simulation results shown figures 
shows success rate search requests search requests correspond upper curves lower curve available documents 
fan degree curves curve degree 
shows number hops necessary reply successful search request 
expected figures confirm performance system improves time total number performed requests increase content distributed index evolves 
furthermore see figures system converges success rate searches approximately hops average search depth 
ublcs hit hit hit number hops related number search requests 
number hops reply 
hop hop hop related original file sharing applications flurry projects different application domains come 
include persistent storage services distributed lookup services distributed computing applications :10.1.1.110.5867
importance distributed computing model recognized industry leading standardization infrastructure efforts including jxta peer peer working group 
anthill differs industrial initiatives main goal support scientific investigation properties systems providing simulation testbed prototyping tuning algorithms 
hand exploiting rich facilities offered jxta basis runtime implementation anthill 
anthill simulation environment extent compared agent simulators swarm mass 
swarm general purpose software package simulating distributed artificial worlds 
provides general architecture problems arise wide variety disciplines particularly suitable problems involving large number autonomous entities living environment 
mass agent simulator developed aim accurately measuring influence different multi agent coordination strategies unpredictable environment 
anthill differs systems focused simulation support deployment real network environment 
gnutant compared existing file sharing systems 
gnutella queries text strings transmitted broadcasting node receiving query forwards neighbors 
broadcasting gnutella prone serious scalability problems avoid exponential growth number messages exchanged strict limits imposed ttl messages number neighbors known node 
unfortunately limits restrict reach gnutella query number matching replies 
gnutant inherits free search capability gnutella relying inefficient broadcasting techniques 
freenet file associated key obtained hashing file name 
search requests contain single key representing desired file 
requests broadcast routed network information gathered previous requests 
freenet routing closeness keys node unable satisfy request locally forwarded node believed store files keys closest requested key 
main limitation freenet queries limited files known names 
gnutant ublcs adopts routing technique similar freenet adds possibility performing free search queries associating files keywords 
despite fact gnutant designed file sharing underlying mechanism implement generic distributed lookup services chord :10.1.1.142.752
lookup services probabilistic guarantee existing name value associations returned performing lookup 
ant implementation distributed lookup service provides ad hoc replication key value associations uniform replication provided chord 
drawback uniform replication highly dynamic systems requires fairly complex rearrangement replicas 
ad hoc replication advantage popular lookups return quickly drawback unpopular index data may lost due lack storage space peers 
anthill framework supporting new approach building applications mas paradigm societies autonomous agents cooperate order accomplish tasks assigned 
anthill project early development stages 
far implemented prototypes simulation runtime environments develop gnutant set ant algorithms file sharing application 
simulation environment flexible configuration mechanism valuable supporting design gnutant 
tuned gnutant deployed modification runtime environment simply substituting simulated resources managers real implementations 
way improve simulation environment augmenting interface graphical visualization properties simulated ant algorithms 
plan anthill evaluate properties existing algorithms persistent storage services distributed lookup services :10.1.1.110.5867
implementing ants mimic behavior freenet purpose comparison gnutant studying reliability availability performance hash routing may improved 
plan exploit evolutionary programming techniques improve performance resulting algorithms 
anderson 
seti home 
oram editor peer peer harnessing benefits disruptive technology chapter 
reilly mar 
bonabeau dorigo theraulaz 
swarm intelligence natural artificial systems 
oxford university press 
caro dorigo 
antnet distributed stigmergetic control communications networks 
journal artificial intelligence research 
dabek building peer peer systems chord distributed lookup service 
proc 
th workshop hot topics operating systems hotos schloss germany may 
ieee computer society 

la reconstruction du nid les coordinations chez sp 

lesser regis 
multi agent system simulation framework 
proc 
th imacs world congress scientific computation applied mathematics simulation lausanne switzerland aug 
project jxta 
www jxta org 
ublcs kan gnutella 
oram editor peer peer harnessing benefits disruptive technology chapter 
reilly mar 
kubiatowicz oceanstore architecture global scale persistent storage 
proc 
th international conference architectural support programming languages operating systems cambridge ma nov 
langley 
freenet 
oram editor peer peer harnessing benefits disruptive technology chapter 
reilly mar 
minar burkhart langton 
swarm simulation system toolkit building multi agent simulations 
technical report swarm development group june 
www swarm org 
mitchell 
genetic algorithms 
mit press apr 
montresor 
babao glu meling 
gnutant free text searching peer peer systems 
technical report ublcs dept computer science university bologna may 
peer peer working group :10.1.1.140.3129
www org 
ratnasamy scalable content addressable network :10.1.1.142.752
proc 
acm sig comm san diego ca 
rowstron druschel :10.1.1.110.5867
storage management caching past large scale persistent peer peer storage utility 
proc 
th acm symp 
operating systems principles canada nov 

listening napster 
oram editor peer peer harnessing benefits disruptive technology chapter 
reilly mar 
weiss 
multiagent systems modern approach distributed artificial intelligence 
mit press 
ublcs 
