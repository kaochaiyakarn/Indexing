rule ontology policies hybrid approach control agents pervasive environments jeffrey bradshaw kagal rebecca montanari dipartimento di elettronica informatica sistemistica universit di bologna viale bologna italy deis unibo florida institute human machine cognition street fl usa mit csail street boston ma usa csail mit edu 
policies increasingly controlling behavior complex multi agent systems 
policies allows administrators regulate agent behavior changing source code requiring consent cooperation agents governed 
policy control encounter difficulties applied agents act pervasive environments characterized frequent unpredictable changes 
cases specify policies priori handle operative run time situation require continuous adjustments allow agents behave contextually appropriate manner 
address issues policy approaches governing agents pervasive environments specify policies way context semantically rich 
approaches research ontology approach relies heavily expressive features description logic dl languages rule approach encodes policies logic programming lp rules 
aim analyze emerging directions specification semantically rich context policies highlighting advantages drawbacks 
analysis describe hybrid approach exploits expressive capabilities dl lp approaches 

multi agent paradigm offers promising software engineering approach development applications complex environments 
ability operate autonomously constant human supervision agents perform tasks impractical impossible traditional software techniques 
autonomy unchecked potential causing severe damage agents poorly designed buggy malicious 
explicit policies help dynamically regulating behavior agents maintaining adequate level security predictability responsiveness human control 
policies provide dynamic bounds agent permitted function autonomously limit possibility unwanted events occurring operations 
changing policies agent behavior continuously adjusted accommodate variations externally imposed constraints environmental conditions modifying agent code requiring cooperation agents governed 
policies primarily exploited govern complex distributed systems traditional computing environments rely relatively fixed set resources users services 
internet ubiquitous researchers started investigate develop adequate policy techniques controlling agent behavior pervasive environments 
dynamicity unpredictability heterogeneity pervasive environments complicate design policy languages techniques agent control 
resources pre determined interacting agents known priori agents roam different network localities different resource visibility availability depending location context dependent information local security policies resource state 
setting agents need provided semantically clear interoperable description context execute need acquire reason negotiate policies rule behavior new context decide adhere 
addition policies controlling agent behavior specified handle operative run time situation may require high rate dynamic continuous adjustments allow agents act execution context suitable way accommodate context changes 
address issues policy approaches pervasive environments starting emerge share common design principles :10.1.1.12.7910
significant design concept guides approaches contextual information driving policy specifications 
context prime quality pervasive environments explicitly appear policy specifications 
fact pervasive scenarios impossible know identities roles agents interact request services advance 
defining identity role policies administrators may easily define conditions making resources available allowing denying agents resource visibility access context operating conditions 
important design principle adoption semantically rich representations policy definition 
semantically rich representations permit structure properties elements pervasive system management operations policies described high level abstraction enabling policy conflict detection 
research efforts area semantically rich context approaches policy representation follow possible directions 
ontology approaches rely largely expressive features description logic languages owl classify contexts policies enabling deductive inferences static policy conflict resolution performed 
contrast rule approaches take perspective logic programming encode rules clear logic way 
rule approach facilitates straightforward mapping policies lower level enforcement mechanisms concise understandable syntax 
scope analyze emerging directions specification semantically rich context policies highlighting advantages drawbacks 
analysis describe hybrid approach exploits expressive capabilities approaches 
hand rely ontology approach enable policy classification comparison static conflict resolution 
hand able reap benefits rule approach enabling efficient enforcement policies defined dynamically determined values 
structure follows 
section outlines fundamental requirements policy languages enable specification semantic context policies 
section analyzes relevant known approaches semantic policy representation kaos rei deal aforementioned requirements 
comparison allows discuss section possible direction integration ontology rule policy approaches order exploit full advantages 
section 
novel requirements semantic context policies control agent behavior pervasive scenarios raises novel requirements design policy languages policy run time environments 
pervasive scenarios users behalf agents act typically move environment determining continuous variations physical position execution context including set entities resources may able interact 
users access network various devices laptops pdas mobile phones exhibit different capabilities terms resources computational abilities 
possible exactly predict interactions entity may involved kind resources may wish access policy control rely precise knowledge subjects events actions need governed 
deal environmental characteristics research efforts propose adopt semantically rich representations express policy domain knowledge 
adoption semantic web languages specify manage policies pervasive computing scenarios brings advantages 
fact semantically rich representations ensure common understanding previously unknown entities capabilities current execution context actions permitted obliged perform 
modeling policies high level abstraction simplifies description improves analyzability system 
semantic web languages enable expressive querying automated reasoning policy representation 
emerging direction suggests order deal dynamic context changes typical pervasive applications may advantageous build policies directly context conditions consider context primary element specification policies 
context complex notion definitions 
consider context information useful characterize state activity entity location characteristics useful information world entity operates date time 
pervasive environments client users typically unknown context operating conditions frequently change unpredictably specification context policies traditional subject role ones allows control behavior entities having foresee possible interactions entity may entities resources 
adoption semantic context policy approach control pervasive systems requires definition policy model precisely identify basic types policies required control agents specify express represent context related policies semantically expressive form enforce 
focus particularly specification enforcement issues 
extent consider basic requirements semantic policy language ability model represent contexts agents operate policies associated high level abstraction 
ability define actions permitted forbidden resources specific contexts authorizations permission prohibition policies ability define actions performed resources specific contexts obligations 
aim provide general survey state art context policy representation carefully analyze relevant semantic policy approaches deal specification semantic context policies 
kaos followed rei originally designed governing agent behavior represent respectively significant examples ontology rule policy languages 
analysis derive suggestions design hybrid policy approach 

semantic approaches context policy specification illustrate expressive capabilities considered policy frameworks kaos rei consider usage scenario usual 
consider case traveler alice waiting airport flight leave 
airport equipped hot spots providing travelers wireless connectivity portable devices laptops pda mobile phones 
airline companies may provide additional services resources travelers possibility print documents stored devices public printers placed various areas airport 
waiting board users may wish share files users exploiting wireless connectivity available airport 
wait couple hours plane leave alice starts documents laptop 
may wish access printer available waiting area boarding gate print documents needs 
addition likes jazz music exchange music files travelers waiting airport hall 
activities need regulated appropriate policies 
particular policies governing adequate access services resource sharing may apply 
policies running policy example rest 
policy users currently located owner policy device authorized access shared files stored owner device 
policy may instantiated enforced alice share music files colocated travelers secure way depending current context conditions 
policy travelers flying sky team group currently located airport area including gate authorized access printer 
policy may enforced provider printing service offered travelers flying sky team alliance areas airport 
enforcement authorization ensure travelers having proper rights enabled access service 
furthermore default behavior system states explicitly permitted prohibited policy prevents unauthorized travelers accessing service 
sections analyze kaos subsequently rei showing deal specification previously described policies 
kaos kaos framework provides policy domain management services agent distributed computing platforms 
deployed wide variety multi agent distributed computing applications 
kaos policy services allow specification management conflict resolution enforcement policies agent domains 
powerful graphical user interface allows non specialists specify analyze complex policies having master complexity owl 
kaos adopts ontology approach semantic policy specification 
fact policies mainly represented owl ontologies 
kaos policy ontologies distinguish authorizations obligations 
kaos policy constrains actions agent allowed obliged perform context 
particular policy controls defined action subject target context conditions defined property restrictions action type 
shows example kaos authorization represents policy previously described 
property define class actor belong policy satisfied 
owl class rdf id owl intersectionof rdf parsetype collection owl class rdf action owl restriction owl onproperty rdf resource action owl allvaluesfrom rdf resource owl restriction owl restriction owl onproperty rdf resource action owl allvaluesfrom rdf resource printer owl restriction owl intersectionof owl class policy rdf id policy controls rdf resource policy rdf resource ontology policy policy policy owl class rdf id rdfs subclassof rdf resource ontology customer rdfs subclassof owl restriction owl onproperty rdf resource ontology firm owl allvaluesfrom rdf resource ontology owl restriction rdfs subclassof fig 

kaos policy examples 
kaos context conditions constrain policy may specified definition appropriate classes defined property restrictions 
particular main properties properties subproperties characterize action context 
sub properties defined kaos ontology instance ones defining actor time target resource action may created domain specific ontologies 
shows definition class represents individuals flying belonging sky team alliance 
class defined subclass customer class having affiliation property restricted sky team 
examples show kaos ontological approach policy specification exploits owl description logic features describe specify policies context conditions 
fact contexts related policies expressed ontologies 
kaos able classify reason domain policy specification basing ontological subsumption detect policy conflicts statically policy definition time 
pure owl approach encounters difficulties regard definition kinds policies specifically requiring definition variables 
instance relying purely owl define policies filesharing policy defines constraints property values refer statically unknown values policy owner location 
examples include policies contain parametric constraints assigned value deployment run time 
reason kaos developers introduced role value maps owl extensions implementing java theorem prover kaos 
adoption role value maps description logic concept constructors originally introduced kl system allows kaos specify constraints property values expressed owl terms define policy sets groups policies share common definition instantiated different parameters 
proposed extensions effectively add sufficient expressive flexibility kaos represent policies discussed 
non experienced users may difficulties writing understanding policies help graphical user interface 
rei rei policy framework permits specify analyze reason declarative policies defined norms behavior 
rei adopts rule approach specify semantic policies 
rei policies restrict domain actions entity perform resources environment allowing policies developed contextually constrained deontic concepts right prohibition obligation 
version rei rei defined entirely order logic logical specifications introducing domain knowledge 
current version rei rei analyze adopts owl lite specify policies reason domain knowledge expressed rdf owl 
policy basically consists list rules context define policy domain 
rules expressed owl properties policy 
particular policy property associate deontic object policy directly policy granting 
shows rei policy specification policy 
order specify context conditions constraints defined 
constraint may simple boolean boolean combination pair simple constraints defines set actors set actions fulfill certain property 
simple constraint shown modeled triple consisting subject predicate object defines value property entity pattern typical logical languages prolog 
constraint associated policy different levels 
possibility impose constraint definition deontic object means deontic constraint property shown 
case constraint expressed actor action controlled generic environmental states time day 
additional constraints imposed granting specification entity granting deontic object granting generic environmental states 
possible express set constraints directly policy definition policy context property 
constraints generically defined conditions attributes entities policy domain 
policy policy rdf id policy actor rdf resource requester policy rdf resource perm policy policy policy policy rdf id 
policy policy constraint rdf id constraint subject rdf resource ontology user constraint predicate rdf resource ontology location constraint object rdf resource user location constraint constraint rdf id constraint subject rdf resource requester constraint predicate rdf resource ontology location constraint object rdf resource user location constraint constraint rdf id constraint colocated constraint rdf resource constraint second rdf resource constraint deontic permission rdf id perm deontic actor rdf resource requester deontic action rdf resource ontology deontic constraint rdf resource constraint colocated deontic permission fig 

rei policy examples 
rei uses owl lite specification policies domain specific knowledge 
represented owl lite rei allows definition variables placeholders prolog 
fact shown definition constraints follows typical pattern rule programming languages prolog defining variable required value variable constraint satisfied 
way rei overcomes major limitations owl language generally description logics 
inability define variables 
example shown rei allows developers express policy stating user allowed access shared files user located area pure owl allow definition concept 
rei rule approach enables definition policies refer dynamically determined value providing greater expressiveness flexibility policy specification 
hand choice expressing rei rules similarly declarative logic programs prevents exploiting full potential owl language 
fact rei rules knowledge treated separately owl ontology knowledge due different syntactical form 
owl inference essentially considered oracle rei policy engine treats inferences owl axioms virtual fact base 
rei rules exploited reasoning process infers new owl existing ontologies means rei engine able reason domain specific knowledge policy specification 
main consequence limitation rei policy statements classified means ontological reasoning 
order classify policies variables rules need instantiated reduces constraint satisfiability problem 
consider example previously described policy 
kaos rei allow policy disclosure process retrieves policies controlling specific type action 
user willing printer try access see rei engine answered regard particular access 
reason rei statically detect conflicts kaos discover respect particular situation 

hybrid approach semantic policy specification 
management context related policies demanding task requires appropriate description context subsequent policies 
analysis current approaches semantic context policy specification outlined main research directions move opposite sides 
side purely ontology approach exploits description logic owl describe contexts associated policies high level abstraction form allows classification comparison 
feature essential instance order detect conflicts policies enforced granting interoperability entities belonging different domains adopt different policies 
fact means preliminary analysis policy holding different domains required behaviors domain compared needed avoiding cost failures due conflicts arising enforcement phase 
interesting application ontology approach lies possibility exploiting policy description facilitate negotiation policy disclosure 
entity may wish interact potentially untrusted entities negotiating policy disclosure may help interacting parties effort reaching agreement mutual behavior imposing heavy limitations privacy 
side rule approach relies features logic programming languages prolog enable evaluation reasoning concrete context policy instances 
fact enforcement point view policy rules considered instructions executed provided activating conditions contexts evaluated true 
perspective suggests contexts related policies expressed clear concise expressive way facilitate evaluation enactment similarly code programming language needs compiled interpreted 
example language allow definition policies dynamically determined constraints including run time variables crucial expressive feature programming languages offer 
kaos rei represent intermediate approaches opposite approaches previously described 
kaos originally description logic provided owl language features current features aim overcoming intrinsic limitations owl description logic language inability allow variable reasoning 
rei version strongly oriented declarative logic programming approach moved prolog syntax owl encoding permits ontological reasoning domain knowledge policy rules mainly solve extensibility problem rei 
claim policy framework pervasive computing systems able provide support context modeling evaluating different levels granularity flexibility 
particular suggest possibility integrated approach exploits description logic dl logic programming lp 
higher level granularity abstraction dl exploited classify contexts related policies allowing static conflict resolution favoring gradual policy disclosure interacting parties 
operational level lp encode rules clear expressive fashion may facilitate enforcement 
consider instance policy 
policy described description logic definition ontological concepts location context location enabling classification comparison static conflict detection policies related concepts 
side logic programming encode rule effectively enforces policy user located place user user allowed access user shared files 
illustrate example policy framework benefit hybrid approach policy specification 
suppose bob waiting check airport wishes share music files travelers airport 
order waste battery avoid random approach just tries access users devices share files knowing advance access permitted denied 
extent attempting send receive files portable device asks users disclose public access control policies 
suppose policy force active alice laptop 
receiving bob request policy disclosure retrieves sends policies controls file sharing action type policy 
point bob statically check conflicts alice policy policies controlling type action file sharing 
instance bob enforced policy control file sharing include location context deduce conflict policy alice worth noting policy disclosure conflict detection enabled ontology definition policies 
hand bob tries access alice shared files access control policy enforced basis rule definition evaluating current value variables alice bob current location 
note due dynamic nature policy evaluation access time may possible bob allowed access alice files current location 
preliminary policy disclosure phase bob able decide agrees adhere policy imposes conditions user location 
instance bob waiting check desk knows location change hour long queue may decide choose user impose condition location 
worth stating integrated approach described require establishment semantic inferential correspondence dl lp 
complex issue may addressed demonstrated instance 
example approach described represent valid guideline viable integration process 
authors idea hand enable build rules top ontologies enable rule knowledge base access dl ontological definitions vocabulary primitives hand enable build ontologies rules enable ontological definitions supplemented rules imported dl rules 
note rei taken approach latest version allows specify policy rules policy domain ontologies 
kaos means appropriate extensions owl language aiming supplementing ontological specification policies rules 
particular authors propose mapping dl lp consideration appropriate restrictions logics considered restricted sets order logic 
final consideration believe way interoperation rules ontologies explored achieve powerful flexible expressive means specification policies 

specification semantically rich context policies regulate agent behavior pervasive environments complex task requires appropriate representations describe context information relevant policy specification policies 
analysis current approaches semantically rich context policy specification described main research directions moving middle opposite sides ontology oriented approach description logic features rule oriented approach logic programming 
proposes hybrid approach policy specification allows better handling highly dynamic uncertain heterogeneous conditions typical pervasive environments agents operate 
analyzed problem issues solved developing hybrid policy approach 
investigation needed conduct formal thorough analyses existing proposed systems order understand strengths weaknesses propose basis new research development 
direction stimulating ideas results come investigation existing proposals describes attempt combine order logic rule languages specify semantic web services ontologies individual web services 

jennings agent approach building complex software systems communications acm pp 


bradshaw 
ed 
software agents 
cambridge ma aaai press mit press 

bradshaw jung kulkarni dimensions adjustable autonomy mixed initiative interaction 
klusch weiss ed computational autonomy springer verlag berlin germany 

kagal policy approach governing autonomous behavior distributed environments 
dissertation submitted faculty graduate school university maryland degree doctor philosophy baltimore county usa 

bradshaw montanari suri semantic web languages policy representation reasoning comparison kaos rei ponder proc 
second international semantic web conference iswc lncs vol 

springer verlag berlin pp 
sanibel island florida usa october 

kagal finin joshi policy language pervasive computing environment proc 
ieee fourth international workshop policy policy 
lake como italy pp 
ieee computer society press june 

van harmelen owl web ontology language recommendation february www org tr owl ref 

montanari bradshaw context security management multi agent systems published proc 
second ieee symposium multi agent security survivability ieee press philadelphia usa august 

bradshaw suri hayes burstein carvalho johnson kulkarni van 

representation reasoning daml policy domain services kaos 
proceedings autonomous agents multi agent systems conference aamas 
july melbourne australia 
new york ny acm press pp 

kaos policy management semantic web services 
ieee intelligent systems 

moreau bradshaw bunch johnson kulkarni suri behavioural specification grid services kaos policy language proc 
cluster computing grid 
cardiff uk may 

schmidt subsumption kl undecidable proc 
intl conference principles knowledge representation reasoning kr morgan kaufmann los altos 

kagal rei policy language centric project hp labs technical report hpl 

damianou ponder policy specification language proc 
nd int workshop policies distributed systems networks lncs springer verlag pp 


grosof horrocks volz decker description logic programs combining logic programs description logic proc 
www may budapest hungary 

battle semantic web service language version 
www daml org services 

bradshaw tate dalton 

applying kaos services ensure policy compliance semantic web services workflow composition enactment 
mcilraith plexousakis van harmelen eds semantic web iswc proceedings third international semantic web conference hiroshima japan november lncs berlin springer pp 

