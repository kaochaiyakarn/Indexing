nasa contractor report icase report str simple efficient algorithm tree packing scott leutenegger jeffrey mario lopez nasa contract 
nas february institute computer applications science engineering nasa langley research center hampton va operated universities space research association national aeronautics space administration langley research center hampton virginia str simple efficient algorithm tree packing scott leutenegger jeffrey mario lopez mathematics computer science department university denver denver cs du 
edu results extensive comparison study tree packing including new easy implement 
algorithms evaluated synthetic actual data various application domains including vlsi design gis tiger computational fluid dynamics 
studies consider various degrees buffering query performance 
experimental results indicate algorithms best types data 
general new algorithm requires fewer disk accesses best previously proposed algorithm point region queries uniformly distributed mildly skewed point region data approximately highly skewed point region data 
leutenegger lopez supported part colorado advance software institute number tt 
leutenegger additionally supported part national aeronautics space administration nasa contract nas visiting institute computer applications science engineering nasa langley research center hampton va trees common indexing technique spatial data widely spatial multi dimensional databases 
storing bounding boxes arbitrary geometric objects points polygons complex objects trees determine objects intersect query region 
typical applications include computer aided design geographic information systems computer vision robotics multi keyed indexing databases temporal scientific databases 
trees dynamic structures sense contents modified reconstructing entire tree guttman provides efficient routines insertion deletion objects 
unfortunately building tree inserting object time specified guttman disadvantages high load time sub optimal space utilization important poor tree structure requiring retrieval unduly large number nodes order satisfy query 
dynamic improve quality tree competitive regard query time con pared loading algorithms allowed preprocess data stored 
preprocessing particularly reasonable applications data 
fairly static change available priori done properly results trees nearly space utilization improved query times due fact fewer nodes need accessed query 
packing algorithms proposed roussopoulos kan el faloutsos 
kamel faloutsos propose packing algorithm hilbert curve ordering con pare nearest proposed roussopoulos 
simpler implement cases results better trees point queries 
due smaller perimeter bounding rectangles internal nodes algorithm significantly outperforms region queries 
consequently hilbert packing algorithm usually preferred choice region queries remaining competitive point queries 
propose new packing algorithm sort tile recursive simple im compare hilbert nearest packing algorithms wide range data 
buffer sizes 
addition area 
perimeter metrics provide experimental evidence real implementations utilizing lru buffer vlsi design gis computational fluid dynamics synthetic data sets 
know considered wide range data 
set sample tree 
input rectangles shown solid 
types effect packing performance 
real databases portion tree buffered main memory 
buffering portions tree significantly affect performance shown 
consequently studies utilize buffer described section 
rest organized follows 
section provide background information trees describe packing algorithms considered 
section experimental methodology 
section contains results fl om experiments section concludes 
overview tree packing algorithms section provide brief overview tree describe packing algorithms trees including nearest hilbert sort tile recursive str new packing algorithm proposing 
detailed knowledge nearest hilbert packing useful required understanding remainder 
readers interested detailed descriptions refer 
trees deletions arbitrary minimum bounding rectangle smallest upright rectangle encloses object 
trees generalize easily dimensions higher notational simplicity review dimensional case 
node tree stores maximum entries 
entry consists rectangle pointer nodes leaf level bounding box actual object pointed internal nodes minimum bounding rectangle mbr rectangles stored subtree pointed note path tree corresponds sequence nested rectangles contains actual data 
object 
note rectangles level may overlap tree created fl om particular set objects means unique 
illustrates level tree maximum rectangles fit node 
assume levels numbered root leaf level 
rectangles represented small dark boxes 
rectangles grouped leaf level nodes numbered 
mbr enclosing leaf node smallest box fully contains rectangles node 
mbrs leaf nodes rectangles stored nodes higher level tree 
example leaf nodes placed node level 
mbr node nodes purposely drawn slightly larger needed clarity 
root node contains level nodes 
perform query rectangles intersect query region retrieved examined regardless stored internal node leaf node 
retrieval accomplished simple recursive procedure starts root node may follow paths tree 
node processed retrieving rectangles stored node intersect node internal node subtrees corresponding retrieved rectangles searched recursively 
node leaf node retrieved rectangles data objects simply reported 
illustration consider query example 
examining root node nodes level node node 
fairly structured guttman 
algorithms section 
attempt numberof query 
forthe 
packing algorithms 
rectangles tree node hold rectangles 
general process similar building tree collection keys creating leaf level creating successively higher level root node ted 
general algorithm 
preprocess data 
file rectangles ordered hi consecutive groups rectangles group intended placed leaf level node 
note group may contain fewer rectangles 

load groups rectangles pages output mbr page number leaf level page temporary file 
page child pointers nodes higher level 

recursively pack mbrs nodes level proceeding upwards root node created 
differ rectangles ordered level 
nearest nx coordinate 
details assume coordinate rectangle center 
rectangles packed nodes groups size ordering 
hilbert sort hs algorithm proposed 
algorithm orders rectangles hilbert fractal space filling curve 
center points rectangles sorted distance fi om origin measured hilbert curve 
determines order rectangles placed nodes tree 
kamel faloutsos provide details handle integer coordinates extended arbitrary floating point values described 
floating point numbers usually stored sign signed exponent mantissa may may normalized 
exponent determines starting position mantissa relative binary point floating point represented size exp nent sizeof mantissa bits 
example bit float numbers native sun sparc architecture bits required 
conceptual representation 
coordinates stored form 
numbers viewed representation dear method integers applied 
briefly describe processing dimensional data set 
consider grid size pon ent sizeof mantissa 
hilbert curve grid produce packing order rectangles 
bit coordinates point determine quadrant contains 
successive bits determine successively smaller con tain point 
center points need compared bits coordinate examined determined points lies different sense rotation tables described accomplish task 
information gathered decide point closer origin hilbert curve 
conceptually process computes bit positions time discrimination possible 
practice store compute bit values hypothetical grid 
sort tile recursive str consider data set hyper rectangles 
hyper rectangle defined intervals form ai bi locus points th coordinate falls inside th interval str best described recursively providing base case 
case handled regular trees 
accordingly consider set rectangles plane 
basic idea tile data space vertical slices slice contains rectangles pack roughly nodes 
assume coordinates center points rectangles 
determine number leaf level pages 
sort rectangles coordinate partition vertical slices 
slice consists run consecutive rectangles sorted list 
note slice may contain fewer rectangles 
sort rectangles slice coordinate pack nodes grouping runs length rectangles node second node 
case simple generalization approach described 
sort hyper rectangles coordinate center 
divide input set slabs slab consists run consecutive hyper rectangles sorted list 
slab processed recursively remaining coordinates treated dimensional data set 
aid visualizing result packing algorithms consider leaf level nodes obtained long beach tiger data set assuming rectangles fit node 
figures show resultant leaf level mbr data set algorithms 
note vertical slices str packing algorithm 
experimental methodology section describe experimental methodology 
goal provide solid experimental comparison algorithms actual tree implementations wide range data real world synthetic data sets 
intend provide insight trees perform part typical database system supports spatial queries 
order taken consideration 
primary numberof 
metric get 
lru buffer management routine 
slightly better buffer management routine may arguably pin root number tree levels lru scheme remaining nodes tree 
shown gain pinning unusual circumstances level near root just fits buffer pool case pinned 
lru nodes regardless level simplify parameter space experiments 
accurately assess impact buffer size implement buffer manager raw disk partition 
node pushed buffer node immediately written disk false buffered operating system virtual memory manager 
easily vary actual buffer size reconfiguring os hardware 
data sets larger previous studies smaller data 
sets near term applications 
data set size affects tree performance ways increases depth tree decreases percentage data set fit buffer 
trees fan consideration significant second 
experimental parameters interest percentage data set buffered 
experiments small data sets approximately rectangles consider small buffer sizes 
obtain type results obtained larger data sets buffers great savings experimental time 
smaller data sets experiments took months utilizing sun sparc workstations 
experiments build tree specific packing algorithm considered 
experiment exact data 
set algorithms 
query data set queries 
attempt collecting confidence intervals smoothing curves 
err side caution advise differences percent considered significant 
uniform data unit square point unit square square square 
coordinates region queries respectively 
coordinate larger set coordinate 
uniformly distributed data region query return roughly data highly skewed data vlsi cfd data sets described variance amount output large query covers unit square may return data 
secondary comparison metric sum area perimeter mbrs tree nodes 
measures indicators number nodes accessed query misleading buffering considered 
include measures additional information area perimeter metrics tree summed nodes levels leaf level 
argue leaf level metric interest non leaf level nodes buffered 
applicability general setting dependent representative data sets 
non trivial question 
address issue considering different types real data synthetic data 
particular consider data sets 
gis data set representative geographic information systems chose long beach data tiger system bureau census 
data set contains line segments extensively past studies 
vlsi consider cif data set rectangles provided bell labs design chip 
data interesting input rectangle distribution highly skewed location size 
example largest rectangle roughly times larger smallest 
similarly regions chip covered rectangles covered rectangles 
cfd primary motivations apply techniques scientific data sets obtained computational fluid dynamics 
consider dimensional problem 
system equations model air flows aero space vehicles 
data 
sets cross section boeing wing flaps landing configuration mach 
points nodes nodes little change data plot dataset nodes 
data set nodes whichis points 
note majority 
dataset wing 
highly skewed 
larger phs tiger www 
cs 
du 
edu mu tid html 

synthetic uniformly distributed data 
sets created containing squares 
squares fully contained unit square 
square lower left corner uniformly distributed unit square 
area square uniformly distributed times average area 
value average area square determined density data set density equals sum areas squares data 
set 
specifically equal number squares data set nd equal density 
average area 
square equals square actual area chosen uniformly times average area 
upper right corner chosen give desired area exceeds bounds unit square case coordinate exceeds set 
considered data 
densities results point data 
results densities 
section results experimental methodology 
results point region queries synthetic gis tiger vlsi cfd data sets 
results obtained trees rectangles node range buffers sizes examined 
curves nx algorithm included figures nx algorithm competitive requiring times disk accesses str algorithm experiments point queries point data 
complete include nx results tables section 
synthetic data data size tree pages buffer buffer table percent tree held buffer consider synthetic data 
consider buffer sizes pages 
table show percent tree fits buffer different sizes data sets 
column rectangles second number tree pages including leaf assuming rectangles page third percent tree buffer pages hold fourth percent buffer pages hold 
consider data 
size buffer pages entire tree fits buffer 
figures plot number disk accesses versus data 
set size thousands rectangles tbr point queries buffer size pages respectively 
top curves data density expected sum areas input rectangles equals bottom curves density point data 
legends figures show ordering lines top bottom 
solid lines str dashed lines hs 
buffer size hs requires disk accesses str point data disk access region data density 
buffer size hs requires disk access str point data disk access region data density 
note rectangle data set entire tree fits comparison particularly meaningful 
plot number disk accesses versus data 
set size thousands rectangles region queries data space buffer pages 
plot buffer pages similar 
point data bottom curves hs requires disk access str 
region data density top curves requires disk access str 
note query region size increases difference str hs smaller str requires fewer disk accesses 
result surprising data needs retrieved naive search afford 
point data region data density data 
size str hs nx hs str nx str str hs nx hs str nx str point queries region queries query region data region queries query region data table number disk accesses synthetic data carrying argument extreme query regions encloses input data 
search needs performed rtree packing schemes exhibit performance leaves need examined 
exhaustive results tables buffer sizes pages respectively 
column number data items thousands second fourth number disk accesses satisfy query stir hs nx point data fifth sixth columns ratio hs nx relative str point data columns region data 
density 
note nx competitive point queries point data expected difference str hs diminishes query size increases 
area 
perimeter information data sets table 
include sun area perimeter mbrs leaf level mbrs tree 
second fourth data 
set str hs nx respectively fifth seventh data set 
str algorithm produces area 
perimeter hs algorithm data sets nx algorithm produces slightly total area 
point data leaf level area 
note size density data str hs nx hs str nx str str hs nx hs str nx str point queries region queries query region data region queries query region data table number disk accesses synthetic data nx algorithm larger perimeters algorithms accounting poor performance oll regions queries 
gis tiger data results long beach county tiger data set 
plot number disk accesses versus buffer size point queries 
data set requires leaf level nodes leaf area 
total area leaf perimeter total perimeter leaf area total area leaf perimeter total perimeter point data str hs nx str hs nx region data density table synthetic data areas perimeters st ns nx point queries region queries query region region queries query region hs str nx str data data table number disk accesses long beach data point region queries different buffer sizes str hs nx leaf area total area leaf perimeter total perimeter table tiger long beach data areas perimeters index nodes total pages 
buffer size holds rtree 
hs algorithm requires disk accesses str 
relative difference increases buffer size decreases 
region queries sizes space algorithms similar hs requiring disk accesses 
table number disk accesses ratio relative str point region queries 
area perimeter information table 
str algorithm produces significantly smaller areas hs nx slightly smaller perimeters hs 
buffer size hs nx hs str nx str point queries region queries query region data region queries query data table number disk accesses vlsi data buffer size varied point region queries vlsi vlsi data set consists approximately rectangles vary considerably size location 
seen hs str perform hs performs slightly better point region queries regardless buffer size 
table detailed results tot point region queries buffer size varied 
hs algorithm performs slightly better str point queries factor practically region queries 
nx algorithm significantly worse point region queries 
table area perimeter information consistent experimental results 
computation fluid dynamics experiments section restricted point region queries area 
bounded box 
allowed range entire data 
set large variance number nodes accessed remaining area extremely sparse 
note str hs nx leaf area total area leaf perimeter total perimeter table vlsi data areas perimeters region considered highly skewed 
point queries lower eft corner region queries uniformly distributed reduced space 
region query size reduced fit reduced space 
upper right corner region queries obtained adding lower left corner coordinates truncating needed 
area roughly corresponds data region experiments 
plot number disk accesses required point queries str hs 
table results experiments table area perimeter information node data set 
data 
set requires leaf level nodes index nodes total pages 
buffer size holds rtree 
seen point queries str algorithm requires significantly fewer disk accesses hs especially small buffer sizes 
region queries hs str perform similarly 
nx requires significantly accesses 
algorithms studied heuristics provide guarantees 
surprising best data sets 
studying performance algorithms different types data 
gain insight specific performs 
considered general classes data uniformly distributed point region data 
synthetic mildly skewed line segment data tiger highly skewed terms location size region data vlsi highly skewed terms location point data cfd 
consider uniformly distributed data 
type data hs algorithm requires disk accesses str algorithm point region queries 
nx algorithm performs str point queries point data worse point queries table number disk queries buffer size hs nx hs str nx str point queries region queries query region queries query region area region area accesses cfd node data buffer size varied point region str hs nx leaf area total area leaf perimeter total perimeter table io cfd node data set areas perimeters region data region queries 
previously pointed ignoring dimension nx algorithm packs long skinny rectangles see resulting large perimeter nodes poor performance region queries 
types data nx algorithm compete drop subsequent discussion 
consider mildly skewed tiger data 
set 
hs algorithm requires disk accesses str point region queries 
expected difference noticeable smaller buffer sizes 
highly skewed data firm difficult draw 
vlsi region data performed faster str point queries roughly region queries 
cfd point data 
situation reversed required disk access str point queries roughly region queries 
summary single algorithm best cases 
clear nx algorithm competitive str hs depends situation hand 
appears str outperforms hs mildly skewed uniform data 
highly skewed data choosing packing algorithm toss str hs particularly region queries 
expected importance choosing packing diminished query size buffer size increase 
developing new algorithm works types data challenge pursued 
plan continue search better packing algorithm investigate dynamic tree variants str packing algorithm extend results parallel shared platform 
ken sevcik useful discussions preliminary version 
dimitri providing cfd data sets 
beckmann kriegel schneider seeger tree efficient robust access method points rectangles proc 
acm sigmod may 
dan dias simple analysis lru buffer replacement policy relationship buffer warm transient proc 
ieee data engineering 
chazelle filtering search new approach query answering siam comput vol 

faloutsos roseman fractals secondary key retrieval proc 
eighth symposium princi ples database systems pods march 
guttman trees dynamic index structure spatial searching proc 
acm sigmod 
kamel ci packing trees proc 
nd international conference information knowledge management arlington va november 
kamel faloutsos hilbert tree improved tree fra proc 
international conference large databases vldb 
leutenegger lopez effect buffering performance trees university denver technical report number submitted publication 
lopez sahni efficient net extraction restricted orientation designs appear ieee transactions cad 
advancing front delaunay triangulation algorithm designed robustness journal computational physics vol 

rosenberg snyder time space optimality trees acm database systems vol 
march 
roussopoulos direct spatial search pictorial databases packed trees proc 
acm sigmod may 
sellis roussopoulos faloutsos tree dynamic index multidimensional ob jects proc 
th international conference large databases vldb september 
leaf bounding rectangles long beach data nx leaf bounding rectangles long beach data hs ih leaf bounding rectangles long beach data str 
normal ascii full data node data set oo data center node data set hs density 
str density hs density str ty data size thousands disk accesses vs data size point queries synthetic data buffer size 
hs density 
str density hs density 
str density data size thousands disk accesses vs data size point queries synthetic data buffer size hs density str density hs density str density data size thousands disk accesses vs data size region queries synthetic data buffer size hs str 
buffer size disk accesses vs buffer size point queries long beach tiger data oo 
hs 
str str 
hs 
str hs point str point buffer size disk accesses vs buffer size point region queries vlsi data 
buffer size str hs 
disk accesses vs buffer size point queries cfd data form approved report documentation page average sources gathering information information burden washington directorate reports jefferson davis highway suite arlington va ce management budget project washington dc 

agency leave blank 
report date 
report type dates covered 
title str simple efficient algorithm tree packing 
author scott leutenegger jeffrey mario lopez 
performing organization name address es february contractor report institute computer applications science engineering mail nasa langley research center hampton va 
sponsoring monitoring agency name address es national aeronautics space administration langley research center hampton va 
supplementary notes langley technical monitor dennis bushnell final report 
appear international conference data engineering 

distribution availability statement unclassified unlimited subject 
category 
maximum words 
funding numbers nas wu 
performing organization report number icase report 
sponsoring monitoring agency report number nasa cr icase report 
distribution code results extensive comparison study tree packing algorithms including new easy implement algorithm 
algorithms evaluated synthetic actual data various application domains including vlsi design gis tiger computational fluid dynamics 
ore studies consider impact various degrees buffering query performance 
experimental results algorithms best types data 
general new algorithm requires previously proposed algorithm point region queries uniformly distributed mildly skewed point region data approximately highly skewed point region data 

subject terms tree database spatial data scientific data 
security classification report unclassified 
security classification page unclassified 
number pages 
price code 
security classification 
limitation standard form rev prescribed ansi std 

