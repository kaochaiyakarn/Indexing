monitorability service level agreements application service provision james department computer science university college london place london uk wc bt cs ucl ac uk jason information security group royal holloway university london egham surrey uk tw ex jason rhul ac uk service level agreements slas mitigate risks service provision scenario associating financial penalties service behaviour 
slas useless provisions unilaterally ignored party incurring liability 
avoid necessary ensure party conformance obligations monitored parties 
introduce technique analysing systems slas determine degree monitorability possible 
apply technique identify monitorable system slas governing timeliness role application service provision asp scenario 
system contains slas best mutually monitorable implying requirement reconciliation monitoring data parties need constrain parties report honestly accommodating unavoidable measurement error 
describe design fair constraint precision accuracy reported measurements approximate monitorability statistical hypothesis test 

commercial electronic service provision scenario client service assumes certain financial risks associated quality service 
undertaking receive service client possibly assistance provider certain assumptions performance service particular long service continue available extent permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
copyright acm xxxxx xx xx xx 
allan nottingham clinical research limited nottingham science technology park nottingham uk ng rh uk wolfgang emmerich department computer science university college london place london uk wc bt emmerich cs ucl ac uk service behave advertised service provider 
assumptions financial implications 
client need invest integrating service assumption service provided long investment justify expense 
service advertised value client sustained poor level quality imply cost client 
service level agreements slas part contracts mechanism controlling risks 
associating financial penalties poor service performance early termination service client may improved chance receiving compensation event 
view slas means establish liability party pay penalty party raises number requirements way slas written 
parties generally wish pay penalties circumstances contest provisions sla 
original intent parties respect service provision properly captured sla contest successfully override original intent sla failed mitigate actual risk identified written 
refer capacity sla withstand contests sla 
number requirements slas may derived requirement including precise understandable issue addressed proposing sla languages defined object oriented meta modelling formalism precise familiar technical users 
consider requirement slas monitorable 
monitorability implies parties oversee behaviour service relevant sla behalf parties trust 
ability impossible party assert sla violated provisions may ignored service provider 
monitorability sla may achieved means 
sla may place conditions events intrinsically observable parties 
alternatively event may constrained provided technical solution devised render monitorable trustworthy manner 
solutions possibly include monitoring software executing trusted computing platforms tamper proof hardware 
restrict approach offer approach analysis systems slas determine monitorability constraints 
monitorability sla classified monitorable party mutually monitorable parties third party trusted parties sla observe relevant events arbitrate dispute 
systems slas similar categorisation monitorability monitorable member sla perspective party system 
apply analysis method electronic service scenario shown 
common scenario supported numerous middleware technologies including rpc ee dcom net web services client submits request service provider 
request conveyed network operated internet service provider isp 
arrival service performs processing may involve interaction real world example causing parcel dispatched mail possibly manipulation information stored client behalf 
response produced sent client network 
scenario includes roles client isp service provider 
common constraint client wish associate penalty timeliness receipt response relative dispatch request 
demonstrate combinations slas capable insuring constraint system monitorable 
show level monitorability possible slas involving networks administered multiple isps prove higher level possible 
discuss effect level monitorability sla requirements handling measurement error uncertainty sla 
case slas monitorable best case electronic service scenario parties need negotiate basis calculation violations 
protect agreement negotiation concern actual behaviour system 
parties constrained evidence behaviour system measured pre agreed degree accuracy 
design constraint non trivial fair parties fundamentally monitorable true value event known certainty 
constraint designed approximately monitored statistical methods 
describe solution design constraints means may approximately monitored comparing un trusted log measurements presumed error characteristics trusted log known error characteristics 
theory applied design slang language electronic service slas briefly describe compare previous area 
remainder structured follows section motivate concept monitorability 
describe general model systems slas classification 
example application service provision 
describe instantiation model scenario 
describe depth search algorithm perform analysis models slas results analysis asp scenario 
provide short generalisation results scenarios multiple isps 
section describe design approximate monitorability constraint reporting accuracy appropriate slas mutually monitorable better 
section discuss related section summarise 

monitorability party electronic service scenario scenario described depicted running example subject analysis 
client point view number things go wrong scenario 
consider case having submitted request response received client reasonable interval time 
client complains service provider timely response received 
provider claims request received produces log requests evidence supporting claim directs client complain isp responsible conveying request service 
isp insists request reached service provider produces log supporting claim 
client trust 
isp electronic service provider delivered easily fabricated evidence concerning event delivery request service provider interface client incapable independently monitoring 
assume reasons client chooses mistrust service provider requests enter service level agreement 
client seeks mitigate costs service fails perform expected receiving penalty provider give provider poor performance 
client perceives problem service lack availability due erratic maintenance regime part provider 
provider commits provide availability lifetime contract sla forms part 
period contract client uses service frequently frequently responses generated requests 
termination agreement client seeks compensation provider refuses pay 
provider argues service unavailable requests responses received times service available 
accumulating microscopic intervals numerous failed requests delivered service admittedly unavailable amount lifetime contract provider need pay 
second example client entered agreement possibly implicitly defined terms events client directly observe passing service available unavailable state vice versa 
client observe events take word service provider respect availability service pursue compensation little support original sla 
examples highlight aspects monitorability important requirement slas 
cases client concerned event fundamentally observe example delivery request service second transition service availability states 
cases motivation event observe delivery response client failed occur expected 
client complained event stronger argument party convince falsity concerning event question complain 
examples highlight importance making slas respect monitorable events possible 
additional level complexity introduced potential parties offer certain slas 
example unsafe service provider offer guarantees performance service client interface network 
events monitorable client monitorable service provider client potentially exploit provider 
observed performance interface depend performance network control service provider 
electronic service provider unwilling undertake pay penalties performance network inadequate 
considerations kind particular scenario beg question system slas possible guarantee particular requirement slas safe monitorable 
sections develop mathematical model scenarios describe may refined permuted answer question provide insights particular scenario 
continue running example application service provision provide analysis monitorability systems slas scenario 
modelling systems slas assume parties participate form interaction comprising sequence actions performed participants 
examples include electronic service provision resource provisioning virtual organisations particular parties may certain expectations execution particular actions 
example party may specify requirement ac dispatch send respond process interaction model application service provision showing actions associated events tions executed certain amount time case service provisioning 
participant may agree pay penalties party requirements met 
definition 
interaction entities belonging set participants modelled sequence actions action associated actor party may perform action 
depicts interaction model electronic service scenario 
interactions real world database elided 
formally model expressed follows party scenario client isp service provider 
client occasionally takes action invoke service dispatching requests network 
isp conveys requests network eventually delivering server operated service provider 
having received request server performs service injects result back network 
isp responsible delivery result client 
actions dispatch send process respond responsibility allocated follows dispatch send process respond definition 
action may give rise number events pairs actions 
events modelled scenario depend requirements interest parties 
restrict analysis application service provision systems slas governing timeliness service provision 
define events corresponding completion events scenario relation actions dispatch send process respond 
events chosen service provision deemed request fully submitted response fully received 
easy see simple model meets requirement event result action 
monitorability analysis supported notion particular events visible subset parties interaction definition 
event set respondents parties may observe event 
assumed 
events model occur network interfaces define respondents event follows 
clearly event visible actor responsible action causes 
require means model requirements events definition 
events may attributes 
set observations may defined attributes proposition pertaining subset events observations considered logical predicates concerning values attributes observed events 
latency constraints slas potentially place restrictions timing events may state occurrence time attribute events define observations capture requirements parties constraints may wish include slas 
specifically wish express client requirement occurs interval denote observation occurs specific size interval concern 
constraint potentially achieved constraining relative times events occurring intuition time taken complete request acceptable times taken complete part request acceptable 
total set observations concerned 
mapping observations events attributes observations defined obvious case naming observations 
clearly observations predicates scenario truth values observations potentially related 
asp case state hold hold relationships 
definition 
observations related entailment relation interpreted stating true observations true 
conveniently describe relationships observations minimal dependency mapping may defined entailment relationship 
say entails observation say minimal minimal 
scenario dependency mapping may enumerated follows definition 
party may impose certain requirements execution sequence actions 
requirements modelled associating party observation wish hold pair client latency requirement fundamental requirement addressed analysis 

definition 
party provide sla insure requirement 
sla states party requirement receive compensation requirement met 
slas modelled pair set slas particular scenario represents requirement 
example offer sla matching requirement 
combination parties guarantees possible example offer sla form 
having established definitions slas observability events model may define levels monitorability possible model 
parties may able observe event may event reported party trust 
suggest conservative restriction party trusted report event financial interest event 
state party financial interest event provide receive sla insures observation event pertinent 
interest arises desire client receive penalty payments desire provider avoid paying 
definition 
say party may reliably report event sla sla party 
set parties scenario may reliably report event denoted provided party may reliably report event party may choose trust definition 
party may choose trust party report event reliably report party event define set participants trusts report event definition 
say party may monitor event exists party monitor event independently trusts monitor event 
recursively define generic mapping parties subset monitor event may define set parties monitor event note set parties may trusted depends set slas issued 
scenario choose trust report events monitor directly offer receive slas related events 
definition 
sla party monitor sla monitor events 
example monitor sla related observation party able monitor order determine arrival departure times request 
issues offers slas possible monitorable directly observe choose trust report offers slas pertinent hand monitor trust report similarly directly monitorable monitored reason 
monitorability sla particularly desirable party client provider sla party know penalties paid 
fair scenario desirable parties able monitor sla party cheat party aware 
definition 
say sla mutually monitorable monitor sla 
supposing offered offered 
mutually monitorable trusted report ideally sla monitorable third party trusted client provider report honestly 
third party trusted relied arbitrate disputes client provider 
definition 
exists third party say sla parties trust monitor sla 
supposing offered offered 
providing trusted preceding example intuitively wrong slas offered parties attempt insure behaviour actions perform 
avoid introduce notion guarantees subsequently characterise safe slas rely guarantees provider capable subordinate guarantees acquired 
definition 
party may actions able guarantee observation holds 
guarantees modelled requirements pair able monitor events pertinent observation 
perform actions cause subset events pertinent observation exist 
recalling observations predicates attributes events clear guarantee observation holds meet conditions defined observation 
causing pertinent events vary values attributes events causing observation hold 
determine done party able determine values attributes pertinent events 
general party capacity guarantee observations may depend events monitorable party slas offered scenario 
example isp service provider guarantee observations regardless slas offered 
isp control time taken deliver request server received network 
note isp performs action causes monitor directly 
service provider controls time taken perform processing server received response 
isp controls time taken deliver response received network 
guarantees included model 
definition 
sla safe issue guarantee obtain sla second party conditions satisfied observations set observations depends 
guarantee obtain sla second party 
sla safe issue provider may liable pay penalties requirements met due actions parties receive penalties appropriately negotiated obviate risk 
case sla unsafe issue provider may pay penalties due actions parties receiving compensation 
having defined motivated set characteristics individual slas may describe systems slas follows definition 
system slas may characterised point view party contained satisfactory requirements party met 
system satisfactory satisfactory parties contains 
definition 
system slas safe point view party slas party issues safe issue 
system slas safe safe parties 
definition 
system slas monitorable point view party slas issued received party monitorable party 
system slas monitorable monitorable parties 
definition 
system slas slas contains 
may desirable analysis rule types system slas definition 
system slas may characterised redundant exists satisfactory safe 
definition 
system slas may characterised reciprocal contains slas 
words parties exchange slas respect observation 
monitorability analysis particular system slas may characterised described previous section depending degree satisfaction safety monitorability afforded parties possible redundancy reciprocity slas 
searches systems slas particular requirements possible keeping model constant varying set slas 
example ask scenario sets slas safe satisfactory monitorable 
identify sets slas possessing specific set characteristics defined previous section principle generate combinations slas classify accept reject systems slas classification 
maximum number possible slas scenario 
number combinations slas potentially large number suggesting intelligent strategy identifying useful combinations slas needed 
depth search appropriate technique finding sets slas 
propose algorithm generating testing sets slas pseudo code procedure depth return depth procedure depth tentative tried result filter tentative generate tentative tried result result union depth union tentative tried tried tried union accept tentative result result union tentative tried tried minus return result procedure generate tentative tried result tentative tried result result union procedure accept tentative return true procedure filter tentative return algorithm generate possible combinations slas 
note algorithm maintains tentative set slas may added result pass test defined accept 
generate attempts generate candidate slas add set filtered filter depth recursively called investigate resulting tentative set 
set slas tried maintained avoid repeatedly trying add slas different order 
potential efficiency benefits approach rely redefining heuristic operation filter focus search algorithm 
accept may redefined narrow selection criteria sets slas example accept sets slas minimum level monitorability 
possible rewrite filter uses tentative set identify requirements satisfied sla safe satisfactory eliminates defers consideration slas potential contribute requirements 
dependency relationship guide 
filter may remove slas extension set accept reject tentative set supersets case accept rejects redundant reciprocal sets 
note current form algorithm efficient method generating testing possible combinations slas 
worst case particular scenario set criteria systems slas meet criteria 
general algorithm complexity 
desirable prove formally algorithm terminates generates possible combinations slas scenario 
desirable able prove particular reimplementation accept filter algorithm finds sets sla characteristics acceptable criteria defined accept 
find slas self evident accept return true tentative set added result 
slas asp scenario example scenario distinct sets slas possible 
interested sets properties safety satisfaction non redundancy non reciprocity sets client issues slas non client monitorability 
interested sets combinations properties 
sets discovered depth search algorithm described previous sections 
permit sufficient narrowing search space render approach feasible number sets determined analytically 
analytical solutions total number satisfactory sets total number sets total number non client sets 
number satisfactory sets determined considering slas offered client satisfy sat safe non red non rec non client mon arb sets considered solutions table results monitorability analysis asp scenario performance depth search algorithm requirement insure minimum dependency set case includes observations 
total possible slas may offered scenario 
interested offer guarantees client may offer sla observation 
determine total number satisfactory sets slas determining combinations slas result satisfaction client requirement multiplying number number combinations slas concerned 
combinations slas may offered client 
truth table inspection combinations reveals satisfactory 
total number satisfactory slas java implementation truth table analysis satisfaction available online 
number non reciprocal slas determined straightforwardly 
possible sla reciprocal sla appear making pairs appear 
non reciprocal sets slas 
may wish restriction client offer sla 
reduce space search employed java implementation depth search algorithm discover non redundant sets slas minimal levels monitorability 
note non redundant sets slas definition safe satisfactory 
non redundancy non reciprocity non client constraints effect considerably limiting size search space employing depth search 
redundant reciprocal set set containing client sla improved addition slas 
summary experiments analytical results shown table 
java implementation available open source licence inspection modification 
significant result analysis exactly arrangements sets slas monitored parties 
true permit client offer slas 
scenario system slas safe satis factory issue slas supported guarantees contributing requirements 
parties financially involved contractual situation party trusted report events occur remote party 
monitoring possible directly slas adjacent parties mutually monitored contracts scenario meets requirement 
consists contracts 
isp guarantees service perform correctly interface client 
capable guaranteeing request reaches server timely fashion response back time 
fully guarantee round trip time service isp obtain guarantee service provider service complete time 
arrangement arbitrated obvious applying search algorithm 
parties scenario involved contracts satisfy requirement financially independent third party observe interaction 
scenario monitorable system slas highly significant result 
system contracts requires isp offer guarantees received quality electronic service interface client effectively forcing isp act re seller application services business model adhered practice today 
service constraints required interface client interface service 
guarantees required places form constraints service interface need tighter accommodate delay network whilst guaranteeing requirements client interface 
achieve monitorable qos guarantees asp type sla language need 
need separate language describe network qos example 
isps offer asp slas 
multiple isps results previous section may generalised scenarios including multiple isps clients distributed network 
clearly sequence slas established client service sla adjacent parties serving client service provider 
situation shown 
original service embedded network 
provide service 
monitorability possible asp slas chains isps regarding isps encapsulating service service providers ii si 
clients may embedded network 
exchange requests responses linked network 
multiple networks linked provide path client cn 
clearly system slas monitorable provided situation analysed previous section 
system provided clients embedded network ii 
seen considering fact exchanging requests responses behaving exactly service embedded network 
indicated dashed box re identifies 
provided sla insuring timeliness responses mutual interface possible offer sla client embedded network 
clearly sla mutually monitorable need concern events occurring parties mutual interface 
argument applies inductively number network links possible provide chain monitorable slas insure timeliness requirements client cn 
general clients may embedded network provided path original service exists slas network boundary 
analysis establishes multiple isps involved delivering service systems slas exist monitorable 
established scenario achieved parties 

reconciliation error fair administration slas requires accurate data concerning behaviour services 
important case data provided party inherently trustworthy reporting monitored 
occurs sla monitorable 
case client provider service agree reconciled account service performance base calculation violations penalties 
parties third party rely party fully establish validity account service performance technical means 
principle agreed account need bear resemblance real behaviour service providing parties agree 
event disagreement parties honest parties concerned real behaviour system wish able argue counterpart neglected responsibilities 
necessary include slas obligation parties report behaviour service accurately 
inevitable presence error uncertainty measurement physical system raises problems face requirement 
obligation formulated permit tolerable degree error reporting time penalising higher levels error whilst respecting right client vary utilisation service parties conceal details monitoring solutions 
second conformance constraint checked true performance system determined total certainty 
sections formulate constraint explain statistical hypothesis test tell degree confidence constraint violated 
complete confidence result possible introduce term approximately monitorable refer type constraint 
describing constraint give advice parameter values may chosen parties may confident meet obligations assuming understand error characteristics monitoring process 
constraint chosen requires parties provide minimal information concerning error characteristics implication implementation monitoring solutions 
investigate degree fraud possible assuming party perfect knowledge error characteristics need reveal information 
accuracy constraint constraint chosen designed restrict probability reported measurement lies outside specified interval true value 
log consists sequence measurements xi event values 
constraint guarantees reported values pr xi specified error margin specified confidence measurement 
true value event unknown 
party required report accurately guaranteed sla assume probability measurement log accurate pr xi measurement erroneous falls outside error interval centered true value 
wish limit number erroneous values log 
true value measurement known referred accuracy constraint basis defining accuracy 
denote number erroneous measurements particular log 
wish prohibit reporting logs containing large numbers erroneous values 
assuming party reports honestly monitoring system error characteristics probability log size containing erroneous measurements binomial distribution pr particular size log choice sla parameters determine upper bound parameter specified sla 
words wish bound likelihood log contains erroneous values 
constraint chosen log formulation constraint analogous statistical hypothesis test test statistic null hypothesis log honest 
equivalent type error rate test probability honest log rejected dishonest constraint 
approximate monitorability possible determine certainty party conformed constraint described previous section determining number erroneous values requires true values events known known certainty 
contract monitorable parties contract able obtain trusted measurements events pertinent contract 
parties possible approximately monitor untrusted party conformance accuracy constraint comparing untrusted log produce measurements xi trusted log measurements yi obtained possibly help trusted third parties 
approximate monitoring accuracy constraint achieved statistical hypothesis test 
null hypothesis untrusted party produced honest log 
alternative hypothesis untrusted party cheating failed conform accuracy constraint 
contractor honest contractor unable unwilling conform accuracy constraint 
wish detect erroneous values 
possible compare xi compare yi 
yi trusted assume characteristics error distribution understood 
particular assume measurements accurate required accuracy constraint 
absolute difference logs greater probability xi lies true value related confidence yi lies error interval true value worst case test statistic chosen hypothesis test number cases xi yi 
large values favour 
similar formulation constraint matter comparing statistic threshold value pr true order determine need sampling distribution true 
binomial distribution pr xi yi true sampling distribution pr problem find expression terms determined exactly error distribution party known practice assume null hypothesis distributions parties conform parameters accuracy constraints 
best possible upper bound chebychev inequality states random variable ar pr null hypothesis pr xi untrusted party agreed error log obey rule pr xi assume null hypothesis untrusted party honest better obtain upper bound assume pr xi equating parameters constraint chebychev inequality obtain resulting worst case relationship standard deviation error distributions parameters constraint consider xi yi 
assumptions 
xi yi 
variance trusted log known 
assumption measurements unbiased reasonable systematic bias part party easily detected rectified logs administered represent clear intent party deceive peer 
occasionally parties may suffer similar biases may overlooked 
problematic point view obtaining agreement parties may rectified selected 
second assumption reflects fact trusted log obtained measurement process error characteristics known degree 
assumed measurement process gives results conforming accuracy constraint untrusted log 
known may assume 
worst case null hypothesis variance untrusted log variance xi yi ar xi yi introducing constant may state assumptions form xi yi ar xi yi chebychev pr xi yi original relationship holds pr xi yi pr xi yi equating parameters cancelling terms rc pr xi yi rc rc determined values substituting rc binomial distribution 
choosing parameter values assuming party knows standard deviation error process wishes guarantee measure honestly agreed value related agreed value confidence required value required 
highly conservative 
party understands details error distribution may able accept tighter bound party may negotiate values true probability pt erroneous value chebychev bound 
case party able insert purposeful erroneous value proportion pt total size log note client ability issue service requests controls size log 
choice sla parameters behaviour impossible prevent 
negotiating tighter bounds reduce degree cheating possible regardless true distribution error measurement process party 
accuracy measurement guaranteed may regarded discriminating point competitive market services governed slas 
example measurement confidence type error rate log size tolerate differences party log trusted log unspecified distribution conforming accuracy constraint 
measurement regime untrusted party fact perfect pr xi party may confident introducing purposeful errors log prior reconciliation parties 

related theoretical contributions developed support ongoing development language asp slas slang 
slang specifically designed describing slas scenarios depicted 
result analysis section incorporated slang assumption client service provider technically adjacent observing events service interface 
slang incorporates number different types constraints including timeliness reliability mutually monitorable 
semantics state events referred sla purpose varying application constraints monitorable parties 
semantics slang describe need reconciliation evidence parties incorporates accuracy constraint developed section 
slang described precise meta modelling techniques derived mda toolset 
specification machine readable may derive editor consistency checker language 
specification related tools available open source project inspection reuse 
description particular design constraints language subject publication 
slang competes number current prior efforts design language asp slas service offerings notable ws agreement 
best knowledge previous language explicitly addresses need monitorability provides constraints discussion measurement error design language related documentation 
languages cited require permit extension define metrics potential address issues 
management error performance measurement analysis benchmarking important related topic covered prior 
concepts related monitorability touched previous area policy management 
conventional policy languages define rights obligations may attach managers 
rights obligations scoped management domains containing policy objects manager sees management domains 
assuming management domains correctly modelled monitorability policy objects point view managers execute policy may ensured parse time languages ponder 
execution obligation policy usually responsibility manager applies 
may manager trusted requirement check obligation fulfilled 
provides algorithm determining obligations conforming model fulfilled assumes relevant events visible 
provides logic accountable managers may prove obligation fulfilled log actions 
notion observability actions introduced constrain model 
accountability relies universally trusted logging system available manager domain 
clear implemented monitor negative obligations 
best knowledge done checking policies monitorability conservative trust assumptions similar adopted 
highly influential apparent relation accuracy lamport clock synchronisation 
accuracy constraint discussed preceding sections require parties synchronise clocks order measure timing mutually observable events 
constraint requires measurement accurate respect true time means parties achieve relevant 
lamport described algorithm bounded error synchronising distributed clocks 
may potentially helpful situations example scenario parties sla technically adjacent share synchronisation information constraints primarily concerned relative absolute timings 
measuring time events high global accuracy difficult may require specialist equipment example gps receiver synchronisation approach may preferable 
necessary determine interacts trust assumptions sec asp example synchronisation protocols employed allow party maliciously alter clock sla 

summary provided significant contributions theory underlying slas motivated model analy sis technique reasoning monitorability systems slas 
second instantiated model perform analysis important example client server computation place network owned third parties 
case network owned single provider trusted monitoring provided technical solution tamper proof monitors demonstrated latency constraints highest level monitorability possible slas mutually monitorable described single configuration holds isp offers client sla client interface network service provider offers sla isp service provider interface network 
extremely significant result implies qos achieved slas internet major change required business model isps currently operate 
alternatively possible suggest criticality research embedding trusted monitoring solutions network service provision infrastructure 
considered support slas mutually monitorable better 
case parties agree behaviour service prior determining penalties paid relation particular sla 
observed naive constraint parties report service behaviour honestly impractical due inevitable presence error measurement constraint honest party recourse agreement fail met 
designed reporting constraint described limit number errors log contain size stated confidence parties measurements agreed type error rate test 
showed constraint approximately monitored statistical hypothesis test comparing log measurement test second log known error characteristics 
naturally approximate monitorability fails detect degree cheating quantified 

implementation tools monitorability analysis 
sourceforge net monitorability html 
slang language tools 
sourceforge net 
bettini 
obligation monitoring policy management 
third international workshop policies distributed systems networks policy 
ieee computer society 
corin dekker den 
audit logic 
sixth ieee international workshop policies distributed systems networks policy 
ieee computer society 
damianou dulay lupu sloman 
ponder policy specification language 
policy workshop policies distributed systems franco assistance developing material 
networks number lecture notes computer science pages 
springer verlag 
global grid forum 
web services agreement specification ws agreement version 
international business machines ibm web service level agreement language specification january 
jain 
art computer systems performance analysis 
john wiley sons 
lamport 
time clocks ordering events distributed system 
communications acm volume 
acm press july 
emmerich 
precise service level agreements 
th international conference software engineering icse edinburgh uk may 
ieee press 
emmerich 
specifications meta models 
icse workshop global integrated model gamma pages 
acm press june 
sloman 
policy driven management distributed systems 
journal network systems management volume 
plenum press 

service offerings xml web services management applications 
phd thesis ottawa carleton institute electrical computer engineering 
wikipedia 
chebychev inequality 
en 
wikipedia org wiki chebyshev inequality 
