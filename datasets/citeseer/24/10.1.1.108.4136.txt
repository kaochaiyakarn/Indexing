distributed top monitoring brian babcock chris olston stanford university babcock olston cs stanford edu querying analysis data streams topic interest motivated applications fields networking web usage analysis sensor instrumentation telecommunications 
applications involve monitoring answers continuous queries data streams produced physically distributed locations previous approaches require streams transmitted single location centralized processing 
unfortunately continual transmission large number rapid data streams central location impractical expensive 
study useful class queries continuously report largest values obtained distributed data streams top monitoring queries particular interest reduce overhead incurred running types monitoring queries 
show transmitting entire data streams unnecessary support queries alternative approach reduces communication significantly 
approach arithmetic constraints maintained remote stream sources ensure provided top answer remains valid userspecified error tolerance 
distributed communication necessary occasion constraints violated show empirically extensive simulation real world data approach reduces communication cost order magnitude compared alternatives offer error guarantees 
attention focused online monitoring applications continuous queries operate near real time data streams call records sensor readings web usage logs network packet traces ccc 
data streams originate multiple remote sources transmitted central processing system monitoring takes place 
nature online monitoring applications streaming data rates may exceed capacity monitoring infrastructure data collection points transmission lines processing center terms storage communication processing resources bbd ccc 
fortunately online monitoring tasks require attention focused atypical behavior environment monitored habitual behavior ignored 
tasks necessary examine small subset data detail data safely disregarded 
purposes applications specific behaviors interest monitor detail characterized numeric values item frequencies exceptionally large small relative majority data 
example consider important problem monitoring computer networks detect distributed denial service ddos attacks 
network hosts engaging certain malevolent behaviors ddos attacks may issue unusually large number domain name service dns lookup requests multiple distributed dns servers single possibly spoofed ip address cmu 
recipient authors supported stanford graduate fellowships 
ddos attacks targeted particular host private network internet service provider isp typically characterized large incoming traffic volume spread isp border routers directed single host 
normal operation volume streaming data generated single dns server high speed network router large guard ddos attacks may necessary monitor large number making aggregate volume streaming data enormous prohibitively expensive capture transmit process 
crucial avoid degrading normal service necessary perform detailed monitoring traffic associated potentially suspicious behavior unusually fast rate dns lookups large volume traffic directed single host ability identify behavior low cost monitoring infrastructure crucial 
example consider wireless sensor networks diverse application scenarios proposed including moving object tracking 
large vehicles tracked seismic acoustic sensors scattered region land tracking algorithms probabilistic models need query sensors highest vibration acoustic amplitude readings 
power consumption significant concern miniature sensors severely limited batteries may impractical replace 
radio usage dominant factor determining battery life mbc pk important identify sensors high readings little communication possible restrict subsequent detailed monitoring querying sensors 
examples applications behaviors interest characterized exceptionally large small numeric values include online monitoring telephone call record statistics auction bidding patterns cluster load characteristics web usage statistics 
distributed top monitoring application scenarios described detailed monitoring necessary subset data having corresponding numeric attributes values largest parameter 
transmission storage processing burdens monitoring infrastructure reduced limiting scope detailed monitoring accordingly 
realize performance benefits reduced scope monitoring low cost mechanism needed continually identifying top data values distributed data set task refer distributed top monitoring 
appear data values different nodes change independently effective top monitoring requires continual transmission data updates single location data combined compared 
fortunately cheaper alternative exists 
algorithm distributed top monitoring performs little communication continuously providing high quality answers 
applications requiring accuracy algorithm provides exact top set times 
online monitoring applications approximate answers suffice bbd ccc algorithm able reduce costs providing approximation top set guaranteed accurate pre specified error tolerance 
error tolerance adjusted dynamically needed permissive error tolerances incurring lower costs monitoring infrastructure 
describing approach section detailed example scenario section define problem distributed top monitoring formally section 
running example refer example scenario represents typical application top monitoring 
serve motivate approach validate distributed top monitoring algorithm 
example application consider monitoring requests distributed set mirrored web servers 
organizers soccer world cup world largest sporting events maintained popular web site accessed times april july represents average accesses minute 
web site served public servers identical copies web content distributed geographic locations world 
cisco distributed director route user requests locations network latencies 
details aj 
application continuous monitoring queries administrators world cub web site liked posed monitoring query 
web documents currently popular servers 
monitoring query 
local cluster web servers geographic locations server cluster lowest current load 
monitoring query identifies popular documents aggregating hit count information web servers 
query provide near real time feedback web site designers allowing adapt site content hyperlink structure response observed usage patterns adjusting headlines reordering text adding additional links popular articles furthermore effects changes web site observable shortly afterward achieving tight closed loop interaction immediate feedback 
monitoring query continuously reports currently loaded server local cluster near real time distribute load evenly servers local cluster 
queries example scenario timeliness query answers clearly important consideration 
online monitoring assuming performed efficiently preferable retrospective offline analysis scenario 
define problem online top monitoring formally 
formal problem definition consider distributed online monitoring environment nodes central coordinator node monitor nodes nm 
collectively monitor nodes monitor set logical data objects associated numeric real values vn 
values logical data objects seen individual node 
updates values arrive incrementally time sequence oi nj tuples may arrive arbitrary order 
meaning tuple oi nj monitor node nj detects change may positive negative value object oi 
tuple oi nj seen monitor node nj node nl data stream model termed distributed cash register model extend terminology 
monitor node nj data values representing nj view data stream vi oi nj 
logical data value object oi materialized node defined vi vi symbols introduced listed table convenience 
illustrate notation applying monitoring queries world cup example scenario 
scenario web servers function monitor nodes 
monitoring query logical data object web document logical data value interest document number times document requested 
page request jth server ith object web document represented tuple oi nj monitoring query logical data object web server cluster representing server current load set logical data objects set monitor nodes nm 
minimizing total load maximizing load measure load number hits minutes resolution messages parameterized partial data values constraints monitor node top monitoring detailed monitoring top set adjustment factors 


current top set parameterized partial data values constraints coordinator node 

parameterized partial data values constraints monitor node monitor node distributed top monitoring architecture 
detailed monitoring current top set page request jth server corresponds tuple nj nj followed minutes canceling tuple nj nj page request falls outside sliding window current activity 
coordinator responsible tracking top logical data objects bounded error tolerance 
precisely coordinator node maintain continuously report set logical data objects size called approximate top set considered valid ot os vt vs user specified approximation parameter 
coordinator continuously report exact top set 
non zero values corresponding degree error permitted reported top set 
goal distributed top monitoring provide coordinator approximate top set valid times minimizing cost monitoring infrastructure 
purposes cost measured number messages exchanged nodes 
discussed expect applications purpose continually identifying top objects low cost restrict scope detailed monitoring downloading packet traces routers obtaining acoustic waveforms sensors monitoring objective form ranked list top objects may useful monitoring query detailed monitoring coordinator track approximations logical data values objects currently top set information perform approximate top ranking lower cost tracking values 
illustrates distributed monitoring architecture 
details pertain top monitoring algorithm described 
overview approach approach compute maintain coordinator initially valid top set coordinator install arithmetic constraints monitor node partial data values maintained ensure continuing validity updates occur monitor nodes track changes partial data values ensuring arithmetic constraints remains satisfied 
long arithmetic constraints hold nodes communication necessary guarantee current top set remains valid 
hand constraints violated distributed process involving coordinator monitor nodes called resolution initiated determine current top set valid alter appropriate 
afterward top set changed coordinator installs new arithmetic constraints monitor nodes ensure continuing validity new top set action taken new constraints violated 
arithmetic constraints maintained monitor node nj continually verify partial data values vt objects ot current top set larger partial data values vs objects os ensuring local top set matches top set clearly local top set matches valid 
course general case local top set node matches global logical data values distributed evenly partial values monitor nodes 
associate partial data value vi numeric adjustment factor added vi constraints evaluated monitor nodes 
conceptually purpose adjustment factors redistribute data values evenly monitor nodes largest adjusted partial data values monitor node correspond current top set maintained coordinator 
ensure correctness maintain invariant adjustment factors data object oi sum zero effect adjustments shift distribution partial values purpose local constraint checking aggregate value vi remains unchanged 
adjustment factors assigned coordinator resolution long constraints monitor node hold adjusted partial data values continuing validity current top set zero error guaranteed 
may useful think constraints parameterized adjustment factors illustrated 
constraint violated resolution performed determine current top set valid possibly select new top set altering constraints 
resolution coordinator assigns new adjustment factors way ensures parameterized constraints satisfied adjustment factors object sum zero 
general flexibility way adjustment factors assigned meeting requirements 
choice adjustment factors dominant factor determining cost maintain valid approximate top set coordinator determines frequency resolution take place 
propose alternative policies assigning adjustment factors coordinator evaluate resulting cost extensive simulation real world data 
show appropriate policies assigning adjustment factors distributed top monitoring algorithm achieves reduction cost order magnitude compared replicating partial data values continually coordinator 
exact answers required controlled degree error acceptable approach extended straightforward manner perform approximate top monitoring lower cost 
idea remains initial approximate top set valid user specified approximation parameter stored coordinator arithmetic constraints installed monitor nodes ensure adjusted partial data values objects remain greater objects permit degree error top set associate additional adjustment factors coordinator node retaining invariant adjustment factors object oi sum zero introduce additional stipulation pair objects ot os 
appropriate policies assigning adjustment factors approximate top monitoring approach achieves significant reduction cost compared alternative approach provides error guarantee maintaining coordinator approximate replicas partial data values 
outline remainder structured follows 
section situate research context related 
section provide detailed description algorithm distributed topk monitoring propose policies assigning adjustment factors 
results experimental comparisons adjustment factor assignment policies comparisons algorithm alternatives section 
summarize section 
related similar aware covers time top queries remote sources bgm fln contrast continuous online monitoring top answers change time 
bruno bgm focuses providing exact answers time top queries fagin fln considers exact answers approximate answers relative error guarantees 
time query algorithms suitable online monitoring include mechanisms detecting changes top set 
monitoring simulated repeatedly executing time query algorithm queries executed vain answer remains unchanged 
bgm fln focuses dealing sources limited query capabilities result algorithms perform large number serial remote lookups incurring heavy communication costs potentially high latencies obtain query answers wide area environment 
bgm fln techniques reducing communication cost rely knowing upper bounds remote data values realistic application scenarios consider section 
combining ranked lists web focuses combining relative orderings multiple lists perform numeric aggregation values multiple data sources 
furthermore consider communication costs retrieve data focus time queries online monitoring 
networking community focused online distributed monitoring network activity 
example algorithms proposed dr detect sum set numeric values distributed sources exceeds user supplied threshold value 
aware area focuses top monitoring 
top monitoring single data stream studied gm mm give approaches finding frequent items data streams specialization top problem 
gm mm considers single data streams distributed data streams concentrates reducing memory requirements communication costs 
focus typical theoretical research data stream computation generally concentrates space usage distributed communication 
exceptions include gt gt addresses top monitoring problem 
top monitoring thought incremental view maintenance problem 
view maintenance including maintaining aggregation views yi maintaining top views yyy focus minimizing communication cost remote data sources 
aware maintaining approximate views 
online monitoring techniques involve distributed constraints previous distributed constraint checking bbc gw considers insertions deletions sets updates numeric data values 
approaches maintaining distributed constraints presence changing numeric values proposed bgm ss yam 
protocols require direct communication sources may impractical applications focus top monitoring designed minimize costs incurred resolution top set central coordinator 
approach top monitoring minimizes communication enforcing sets carefully chosen constraints encapsulate knowledge state distributed system 
regard techniques reminiscent kinetic data structures bgh knowledge programming 
kinetic data structures designed monitoring relationships continuously moving objects steady velocities applicable problem study 
approach reasoning knowledge implicit opposed explicitly knowledge approach taken 
algorithm distributed top monitoring describe algorithm distributed top monitoring 
recall section engaged top monitoring coordinator node maintains approximate top set valid 
addition maintaining top set coordinator maintains numeric adjustment factors labeled corresponding pair object oi node nj times satisfy adjustment factor invariants invariant object oi corresponding adjustment factors sum zero 
invariant pairs ot os 
adjustment factors initially set zero 
outset coordinator initializes approximate top set running efficient algorithm time top queries threshold algorithm fln 
approximate top set initialized coordinator selects new values adjustment factors reallocation subroutine described section sends monitor node nj message containing new adjustment factors corresponding nj 
receiving message nj creates set constraints adjustment factor parameters detect potential invalidations due changes local data 
specifically pair ot os objects node nj creates constraint specifying arithmetic condition regarding adjusted partial values objects nj vt vs long monitor node local arithmetic constraint holds adjustment factor invariant holds pair ot os vt vs applying invariant expression simplifies vt vs approximate top set guaranteed remain valid definition section 
hand local constraints violated may invalid depending current partial data values nodes 
local constraints violated distributed process called resolution initiated determine current approximate top set valid rectify situation 
resolution described 
checking constraints explicitly time partial data value updated node need track smallest adjusted partial data value top set adding value largest adjusted partial data value tracking performed efficiently heap data structures 
resolution symbol meaning number objects track top set user specified approximation parameter universe data objects oi data object central coordinator node nj monitor node vi logical value object oi vi partial data value oi node nj adjustment factor partial value vi current approximate top set set objects participating resolution set nodes participating resolution bj border value node nj table meaning selected symbols 
resolution proceeds phases initiated local constraints violated monitor node nf 
letf set objects partial values nf involved violated constraints 
contains objects plus objects simplify exposition section unrealistic assumption resolution process instantaneous constraint violations occur resolution 
appendix describe algorithm handles constraint violations may occur resolution underway show assumption necessary functioning correctness algorithm 
phase resolution nf sends message coordinator containing list violated local constraints current partial data values objects resolution set 
message nf sends border value bf defined smaller minimum adjusted partial data value objects current top set maximum adjusted partial data value objects resolution set bf min min ot vt max os vs second phase coordinator node attempts complete resolution involving nodes nf determine resolution performed successfully nf coordinator attempts rule case invalid local state current top set adjustment factors data received nf pair objects ot os said invalidate current approximate top set condition vt vs met pair objects 
violated constraint nf represents potential invalidation approximate top set needs dealt 
coordinator considers pair ot os constraint violated performs validation test vt vs test succeeds adjustment factor invariants met algorithm guarantee case discussed constraints reported violated phase resolution remain satisfied true vt vs pair ot os invalidate coordinator applies validation test pairs objects involved violated constraints attempt rule invalidations 
coordinator able rule potential invalidations way leaves approximate top set unchanged performs final procedure called reallocation assign new adjustment factors corresponding objects nodes nf 
adjustment factors selected way parameterized arithmetic constraints adjusted partial data values violating adjustment factor invariants 
reallocation described section 
coordinator finishes resolution sending message nf notifying new adjustment factors serve new parameters arithmetic constraints remain unchanged 
coordinator unable rule invalidations examining partial data values nf phase third phase resolution required 
third phase coordinator contacts monitor nodes nf node nj coordinator requests current partial data values vi objects oi resolution set border value bj min vt vs defined node nf 
coordinator receives responses nodes gathered partial data values objects resolution set monitor nodes 
coordinator combines partial data values compute current logical data values objects sorts form new approximate top set different 
clearly new approximate top set guaranteed valid assuming previous top set valid prior constraint violations initiated resolution violations occurred 
coordinator performs reallocation described section modifying adjustment factors monitor nodes new arithmetic constraints defined terms new top set satisfied 
coordinator sends messages monitor nodes notifying new approximate top set causing create new constraints new adjustment factors 
summary resolution algorithm phases third phase occur phase node constraints failed nf sends message coordinator containing list failed constraints subset current partial data values special border value computes partial data values 
phase coordinator determines invalidations ruled information nodes nf 
coordinator performs reallocation update adjustment factors pertaining nodes reestablish arithmetic constraints notifies nf new adjustment factors 
case top set remains unchanged resolution terminates 
hand coordinator unable rule invalidations phase third phase required 
phase coordinator requests relevant partial data values nodes computes new top set defining new set constraints performs reallocation nodes establish new adjustment factors serve parameters constraints notifies monitor nodes potentially new approximate top set new adjustment factors 
consider communication cost incurred resolution process 
recall purposes cost measured number messages exchanged 
demonstrate empirically section messages tend large 
phases required just messages exchanged 
phases required total messages necessary perform complete resolution 
approach communication required performed part resolution cost incurred certain period time measured summing cost incurred round resolution performed 
ready describe adjustment factor reallocation subroutine crucial component resolution algorithm 
adjustment factor reallocation reallocation adjustment factors performed initial top set computed round resolution phase phase 
focus subroutine adjustment factors resolution process assigning new adjustment factors outset initial top set computed straightforward variation thereof 
describe generic properties requirements reallocation subroutine introduce algorithm performing reallocation 
proceeding introduce notation simplify presentation 
reallocation subroutine invoked phase resolution new top set computed coordinator may may differ original set reallocation invoked phase top altered 
cases refer new top set may different 
define set participating nodes reallocation performed phase resolution nf monitor node initiated resolution 
reallocation performed phase resolution nm 
input subroutine adjustment factor reallocation consists new top set resolution set border values bj nodes nj partial data values vi objects oi nodes nj adjustment factors corresponding partial data values special adjustment factors corresponding coordinator node 
output new set adjustment factors objects oi rand nodes nj adjustment factor reallocation subroutine considered correct correctness criterion new adjustment factors selected subroutine satisfy invariants stated 
correctness criterion new constraints defined adjustment factor parameters satisfied assuming partial values updated resolution 
recall arithmetic constraints defined respect top set specifically constraint defined pair objects ot os monitor node nj parameterized verifies arithmetic condition vt vs definition correctness appropriate ensures convergence property discussed appendix algorithm description multiple reallocation algorithms possible due fact mentioned earlier flexibility way adjustment factors set maintaining invariants guaranteeing arithmetic constraints 
fact choice adjustment factors represents primary factor determining communication cost incurred subsequent rounds resolution poor choices adjustment factors tend result short periods resolution rounds incur high communication cost maintain valid approximate top set 
flexibility adjustment factors captured notion call object leeway 
conceptually leeway object oi resolution set represents amount slack arithmetic constraints numeric gap sides inequality involving partial values vi participating nodes 
informally algorithm follows 
step assign adjustment factors way constraints tight constraint exactly met equality sides slack 
object oi total leeway computed divided portions corresponding node nj nand proportional numeric allocation parameter fj 
portion fj oi leeway corresponding node nj added adjustment factor increasing slack relevant constraints case oi top object 
proof correctness guarantees leeway applied non top objects slack constraint remains positive 
allocation object leeway adjustment factors different nodes governed set allocation parameters fm required satisfy restrictions fj fj fj fj section propose heuristics selecting allocation parameters resolution evaluate empirically 
heuristics designed achieve low cost minimizing likelihood parameterized constraint violated near 
presenting heuristics experiments specify reallocation algorithm precisely 
detailed proofs algorithm meets correctness criteria provided appendix notational convenience introduce definitions extend notation partial data values border values coordinator node defining vi max oi 
define object oi vi nj vi whichwe call oi participating sum 
similar notation refer sum border values set nodes participating resolution bn nj bj 
algorithm reallocate 
inputs bj vi fj output 
object resolution set oi compute leeway vi bn oi vi bn 
object resolution set oi monitor node nj participating resolution assign bj vi fj oi experiments bj vi fj constructed simulator performed experiments measure message size section determine heuristics setting allocation parameters section evaluate performance algorithm various top monitoring problems section 
experiments data sets total monitoring queries described 
data sets queries data set experiments consists portion server logs world cup web site described section aj 
monitoring queries data set monitoring queries section monitor popular web pages server load respectively 
web page popularity measured total number page requests received web document far current day server load estimated counting number page requests received minutes servers geographic location 
monitoring query hour time slice server log data consisting page requests distributed servers active period serving distinct files 
monitoring query minute sliding window page requests time slice 
third monitoring query experiments second data set consisting packet trace capturing hour worth wide area network tcp traffic lawrence berkeley laboratory rest world fp consisting packets 
trace collected single node purposes treat collected distributed fashion monitor nodes 
monitoring query 
destination host receives tcp packets 
minute sliding window packet counts query 
goal selecting monitoring queries experiments choose ones realistic diverse 
queries cover distinct data sets queries sliding windows monitoring query represents example important special case values split monitor nodes monitor node exactly non zero partial data value full data value vi vi vi 
monitoring query monitored single loaded server queries 
message size experiment measures size messages exchanged monitor nodes coordinator resolution dominated number partial data values adjustment factors transmitted 
maximum message size governed size resolution set 
types events cause local arithmetic constraints violated triggering resolution partial value object current approximate top set increase partial value object current approximate top set decrease 
case size resolution set objects involved violated constraints plus current approximate top set results modest message sizes expect fairly small applications 
second case size resolution set potentially larger 
substantial decrease partial data value object current top set cause adjusted partial data value large number adjusted partial data values monitor node violating constraints simultaneously resulting large resolution set 
simulations events appear rare occasionally occur 
keep size messages exchanged top monitoring low possible modified algorithm introducing alternative resolution procedure change partial data value result violation local arithmetic constraints 
purposes set 
alternative procedure described appendix generates extra messages number monitor nodes addition ones generated ordinary resolution procedure see section 
messages generally smaller 
experimental results reported count overhead additional messages required alternative procedure reducing message sizes part communication cost 
report message sizes measured monitoring query 
partial data values monitoring query strictly non decreasing query resolution occur due values non top objects overtaking values top objects messages contained exactly entries 
monitoring queries employ sliding windows partial data values increase decrease potentially resulting larger messages resolution 
largest message exchanged experiments monitoring query contained entries 
larger messages occasionally occur monitoring query 
average number entries message remained small ranging depending choice parameters running algorithm 
message contained entries fewer messages contained entries 
conclude procedure reducing message size messages tend small cost metric total number messages exchanged 
leeway allocation policies recall section reallocation algorithm parameterized allocation parameters fm specify fraction leeway allocated adjustment factors node nj participating resolution 
considered heuristics selecting allocation parameters general policy setting allocation parameter pertaining coordinator distributing remaining fraction allocation parameters fm monitor nodes 
investigated aspects general policy value assigned 
remaining divided fm 
large value increases likelihood resolution limited phases phase coordinator attempts avoid third phase applying available leeway local adjustment factors adjustment factors monitor node constraint violated 
phases require messages compared phase number messages exchanged average round resolution small 
hand large value implies small fm values amount leeway allocated adjustment factors monitor nodes reallocation time resolution performed small 
parameterized constraints little slack result period time constraint violations tend short leading frequent rounds resolution 
choice offers tradeoff frequent constraint violations average cheap resolution large infrequent constraint violations average expensive resolution small 
propose evaluate heuristics second aspect general policy set aside remaining divided fm 
heuristic called allocation divides remaining leeway evenly monitor nodes participating resolution nodes 
allocation appropriate effective method predicting data update patterns available 
second heuristic proportional allocation set fm adaptively assigning fj proportion data update rates observed node fj information transmitted coordinator inside resolution request messages 
idea proportional allocation provide leeway nodes experience higher volume data updates hope reducing frequency constraint violations resolution requests 
figures show results experiments monitoring queries value assigned axis allocation heuristics fm plotted different curves 
graph shows measurements different error tolerance values larger value permits moderate amount error respect data queried 
verified results values plotted improve readability 
axis shows total communication cost 
cases value assigned turns largest factor determining cost 
results suggest relatively small balance achieved tradeoff frequent cheap resolution large frequent expensive resolution small moderate value 
hand large important factor turns reducing frequency resolution best results achieved setting 
propose simple heuristic selecting set small large 
cutoff point effect allocation parameter policies monitoring query 
coordinator allocation parameter proportional proportional total communication cost effect allocation parameter policies monitoring query 
coordinator allocation parameter total communication cost proportional proportional effect allocation parameter policies monitoring query 
coordinator allocation parameter total communication cost proportional proportional small large values comes roughly largest data value data set 
supported results section additional experimental results monitoring queries due space considerations 
estimate largest value purpose obtained easily top monitoring underway 
setting choice heuristic setting remaining allocation parameters fm appear significant impact communication cost compared impact 
proportional allocation method performed somewhat better small values method performed better large values 
employ proportional allocation small allocation large cutoff point small large values setting 
comparison alternative best knowledge previous addressing distributed top monitoring previous time top queries appropriate setting discussed section 
compared approach obvious approach coordinator maintains cached copy partial data value 
monitor nodes required refresh cache sending message coordinator local master copy deviates remotely cached copy amount exceeding error tolerance number monitor nodes 
modulo communication delays coordinator times able supply approximate top set valid maintaining sorted list approximate logical data values estimated cached partial values 
approach amounts transmitting entire data update stream monitor node coordinator node 
point refer approach caching compared algorithm caching simulator algorithms assumes communication computation latencies small compared rate data values change 
algorithm heuristic suggested section setting choosing proportional allocation fm 
figures show results monitoring queries respectively 
graph approximation parameter plotted axis 
axis shows total cost logarithmic scale 
general communication cost decreases increases minor exception communication cost algorithm unexpectedly slightly higher cost 
reason anomaly fewer resolution messages particular monitoring query data set happened expensive third phase resolution necessary higher percentage time compared 
cases algorithm achieves significant reduction cost compared caching order magnitude 
benefit algorithm caching pronounced small medium values approximation parameter grows large cost algorithms small 
summary studied problem online top monitoring distributed nodes user specified error tolerance 
particular focused case values interest monitoring virtual materialized indirectly form partial values spread multiple monitor nodes updates take place 
naive method continually reporting top logical values replicate partial values central coordinator node combined compared refresh replicas needed meet error tolerance supplied user 
alternative approach requires little communication nodes summarized follows comparison caching strategy monitoring query 
epsilon caching algorithm total communication cost comparison caching strategy monitoring query 
epsilon total communication cost caching algorithm comparison caching strategy monitoring query 
epsilon total communication cost caching algorithm coordinator computes initial top set querying monitor nodes installs arithmetic constraints monitor nodes ensure continuing accuracy initial top set error tolerance 
constraint monitor node violated node notifies coordinator 
receiving notification constraint violation coordinator determines top set accurate selects new necessary installs new constraints subset monitor nodes 
action taken constraint violation occurs 
extensive simulation real world data sets demonstrated approach achieves order magnitude lower cost naive approach error tolerance 
motivated online stream analysis applications focus anomalous behavior need perform detailed analysis small portions streams identified exceptionally large data values item frequencies 
efficient top monitoring techniques scope detailed analysis limited just relevant data achieving significant reduction cost monitor anomalous behavior 
acknowledgments advisors rajeev motwani jennifer widom support guidance 
aj arlitt jin 
world cup web site access logs august 
available www acm org sigcomm ita 
aj arlitt jin 
workload characterization world cup web site 
technical report hpl hewlett packard september 
bbc bernstein clarke 
fast maintenance semantic integrity assertions redundant aggregate data 
proceedings sixth international conference large data bases pages montreal canada october 
bbd babcock babu datar motwani widom 
models issues data stream systems 
proceedings acm sigact sigmod sigart symposium principles database systems pages madison wisconsin june 
bgh guibas hershberger 
data structures mobile data 
proceedings eighth annual acm siam symposium discrete algorithms soda pages new orleans louisiana january 
bgm barbara garcia molina 
demarcation protocol technique maintaining linear arithmetic constraints distributed database systems 
proceedings international conference extending database technology pages vienna austria march 
bgm bruno gravano marian 
evaluating top queries web accessible databases 
proceedings eighteenth international conference data engineering san jose california february 
ccc carney cetintemel cherniack convey lee stonebraker tatbul zdonik 
monitoring streams new class data management applications 
proceedings th international conference large data bases hong kong china august 
charikar chen farach colton 
finding frequent items data streams 
proceedings ninth international colloquium automata languages programming icalp malaga spain july 
chen dewitt tian wang 
niagaracq scalable continuous query system internet databases 
proceedings acm sigmod international conference management data pages dallas texas may 
cmu denial service attacks nameservers 
incident note cmu software engineering institute cert coordination center april 
www cert org incident notes html 
dwork kumar naor sivakumar 
rank aggregation methods web 
proceedings tenth international world wide web conference pages hong kong china may 
dr raz 
efficient reactive monitoring 
proceedings twentieth annual joint conference ieee computer communications societies infocom anchorage alaska april 
estrin girod pottie srivastava 
instrumenting world wireless sensor networks 
proceedings international conference acoustics speech signal processing icassp salt lake city utah may 
fagin halpern moses vardi 
knowledge programs 
proceedings fourteenth annual acm symposium principles distributed computing pages ottawa canada august 
fagin kumar sivakumar 
comparing top lists 
proceedings eighth annual acm siam symposium discrete algorithms soda appear baltimore maryland january 
fln fagin lotem naor 
optimal aggregation algorithms middleware 
proceedings twentieth acm sigact sigmod sigart symposium principles database systems pages santa barbara california may 
fp floyd paxson 
wide area traffic failure poisson modeling 
ieee acm transactions networking june 
gilbert kotidis muthukrishnan strauss 
surfing wavelets streams summaries approximate aggregate queries 
proceedings eighth international conference large data bases pages rome italy september 
gm gibbons matias 
new sampling summary statistics improving approximate query answers 
proceedings acm sigmod international conference management data pages seattle washington june 
gt gibbons 
estimating simple functions union data streams 
proceedings thirteenth acm symposium parallel algorithms architectures spaa crete island greece july 
gt gibbons 
distributed streams algorithms sliding windows 
proceedings fourteenth acm symposium parallel algorithms architectures spaa manitoba august 
gw gupta widom 
local verification global integrity constraints distributed databases 
proceedings acm sigmod international conference management data pages washington may 
householder weaver 
managing threat denial ofservice attacks 
technical report cmu software engineering institute cert coordination center october 
www cert org archive pdf managing dos pdf 

maintaining global integrity constraints distributed databases 
constraints 
li wong hu 
detection classification tracking targets 
ieee signal processing magazine march 
mbc min cho sinha shih wang chandrakasan 
low power wireless sensor networks 
proceedings fourteenth international conference vlsi design bangalore india january 
madden hellerstein shah raman 
continuously adaptive continuous queries streams 
proceedings acm sigmod international conference management data madison wisconsin june 
mm manku motwani 
approximate frequency counts data streams 
proceedings eighth international conference large databases pages hong kong china august 
motwani widom arasu babcock babu datar manku olston rosenstein varma 
query processing resource management approximation data stream management system 
proceedings biennial conference innovative data systems research cidr january 
olston jiang widom 
adaptive filters continuous queries distributed data streams 
technical report stanford university computer science department 
stanford edu pub 
ov ozsu valduriez 
principles distributed database systems second edition 
prentice hall 
pk pottie kaiser 
wireless integrated network sensors 
communications acm may 
cochrane pirahesh 
incremental maintenance aggregate functions 
proceedings eighth international conference large data bases hong kong china august 
ss silberschatz 
data value partitioning virtual messages 
proceedings ninth acm sigact sigmod sigart symposium principles database systems pages nashville tennessee april 
yam yamashita 
dynamic replica control fairly assigned variation data weak consistency loosely coupled distributed systems 
proceedings second international conference distributed computing systems pages vienna austria july 
yyy yi yu yang xia chen 
efficient maintenance materialized top views 
proceedings nineteenth international conference data engineering appear bangalore india march 
convergence consistency realistic environment communication computation involve delays course reallocation process instantaneous 
consequence fact additional constraint violations occur resolution ones reported initially single monitor node phase 
handle case coordinator serializes resolution requests monitor nodes delaying handling subsequent requests resolution current request completed 
addition coordinator maintains epoch number increments time alters top set 
coordinator includes new epoch number message sent monitor node phase resolution notifying new top set 
monitor nodes store current epoch number include resolution request sent coordinator coordinator simply ignores requests previous epochs 
epoch coordinator receives nearly simultaneous resolution requests may turn local constraints remain unsatisfied top set updated resolution messages pertaining constraint violations ignored new top set generated epoch number incremented 
receiving new top set monitor node finds constraints remain violated sends new resolution message new epoch number 
way constraint violations eventually resolved 
scheme enables resolution algorithm function face multiple concurrent constraint violations 
top set may valid violations waiting resolved inevitable consequence approach delay remote updates delaying updates appropriate setting 
algorithm achieves desirable convergence property updates partial data values occur resolution additional pending resolution requests remain unhandled resolution completed arithmetic constraints satisfied top set valid 
property consequence correctness criteria reallocation subroutine described section second consequence fact resolution instantaneous addition necessarily valid respect current data top set may represent consistent view monitor nodes 
phenomenon occurs partial data values different nodes read slightly different times 
course mechanisms exist obtaining transactional consistency distributed environment ov feel inappropriate setting 
commonly held exact transactional consistency practical desirable majority online monitoring applications due additional communication state required necessary protocols incurring extra complexity overhead delays 
online monitoring applications generally focus trends data tend prefer simplicity efficient resource usage answer timeliness exact consistency 
assume coordinator accesses data single source values accessed represent consistent view source 
simple mechanisms ensure property 
algorithm correctness prove reallocation algorithm algorithm correct proving correctness criteria stated section holds turn 
assume adjustment factor invariants section hold values input reallocation algorithm 
appendix refer values input reallocation algorithm opposed current values monitor nodes 
recall assume coordinator accesses data values source values represent consistent snapshot source 
denote new approximate top set identified assume reliable communication channels messages delivered communication delays bounded node ni sends multiple messages node nj received order sent 
coordinator node resolution denote old approximate top set effect prior resolution 
proceeding state prove lemmas 
lemma 
vt vs ot os proof 
consider cases monitor nodes participated resolution nm coordinator node selects objects resolution set largest participating sums vi new approximate top set hand set participating nodes consists nodes nf coordinator node verified vt vs vt vs objects ot os recall case lemma 
ou argmin oi vi vu vt ot proof 
cases ou ou case know ou applying lemma complete proof 
case give proof contradiction 
suppose exists object ox vx vu definition ou supposition imply vx vi oi objects ox call oy shown vx vy objects ox oy contradicts lemma 
consequently ox exist vt vu objects ot lemma 
ot os proof 
lemma construction values section write vt vs show ot ou argmin oi vi applying adjustment factor invariant fundamental property resolution algorithm definitions section obtain vu 
construction border values bj nodes nj section bj vu summing nodes nj nand applying adjustment factor invariant arrive bn vu vt 
fact combined definition ot section demonstrates 
correctness criterion prove new adjustment factors respect adjustment factor invariants 
invariant define oi 
easy show adjustment factor invariant continues hold algorithm alter nj bj vi fj nj bn vi nj bn vi vi bn nj vi vi nj nj nj invariant construction definition section ot os know construction 
os invariant holds values follows lemma fact 
correctness criterion criterion assume partial values updated resolution values accessed reallocation algorithm identical ones maintained monitor nodes resolution 
assumption partial values updated resolution facts algorithm additional assumptions 
vt vs nodes nj nand ot os 
constraints involving objects os resolution set reported violated phase assume partial values updated resolution began 

vt vs nodes nj nand ot os 
constraints involving nodes participating resolution reported violated phase assume partial values updated resolution began 

nm 
coordinator modifies approximate top set involving monitor nodes resolution 
theorem 
new adjustment factor output algorithm oi rand nj 
case vt vs monitor nodes nj ot os proof 
consider arbitrary monitor node nj 
want show arithmetic constraint vt vs ot os satisfied 
cases nj nj case case ot algorithm sets bj vt fj lemma fact fj obtain vt bj 
construction border value bj section assumption obtain bj vs os vt vs ot os consider constraints involving objects os algorithm assigns vt bj fj vs bj fj fact vt vs follows lemma states case assumption case arise approximate top set remains unchanged 
stating arithmetic constraints nj hold stating hold know assumption true 
reducing message sizes give details alternative resolution procedure invoked constraints violated 
recall section purpose alternative procedure reduce size messages transmitted resolution 
suppose monitor node nj receives update tuple oi nj decreases partial data value object oi current approximate top set result update cj arithmetic constraints violated 
cj sending ordinary resolution message affected monitor node nj sends special message includes key object oi value changed amount change number violated constraints cj 
time nj increments adjustment parameter effect canceling update returning sum vi previous state constraints violated 
receiving special type resolution message coordinator node sends messages monitor nodes nj determine constraints violated arrival hypothetical update tuple oi nj monitor node nj responds number violated constraints cj 
coordinator node selects monitor node reported fewest number violated constraints subtracts adjustment parameter sends node message informing new value adjustment parameter 
new value cause constraints violated node node initiates ordinary resolution process handle constraint violations 
alternative resolution process effectively transfers original update tuple oi nj monitor node nj monitor node handle update smallest sized resolution set 
size messages sent ordinary resolution proportional size resolution set alternative resolution process reduces size messages sent resolution adds additional overhead messages required identify monitor node experiments chose minimum number violated constraints alternative resolution procedure invoked 
alternative choices threshold offer tradeoff message size number messages 
updates cause large number constraints violated infrequent case choice threshold particularly large impact system performance 

