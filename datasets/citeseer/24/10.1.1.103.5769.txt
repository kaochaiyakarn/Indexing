modular verification software components chaki edmund clarke alex carnegie mellon university chaki emc cs cmu edu new methodology automatic verification programs finite state machine specifications 
approach compositional naturally enabling decompose verification large software systems subproblems manageable complexity 
decomposition reflects modularity software design 
weak simulation notion conformance program specification 
refine paradigm tool magic extracts finite model source code predicate abstraction theorem proving 
subsequently simulation checked reduction boolean satisfiability 
magic able interface publicly available theorem provers sat solvers 
report experimental results procedures linux kernel openssl toolkit 
state machines recognized repeatedly cardinal point software development process fact variants state machines proposed virtually software engineering methodologies including notably statecharts uml 
sustained success state machines software engineering derives fact state machines provide concise mathematical theory intuitive semantics system behavior naturally allows visualization hierarchy abstraction 
traditionally state machines mainly design phase software life cycle intended guide constrain implementation test phase research supported nrl onr 
nsf 
ccr ccr ccr army aro 
daad austrian science fund project nz inf eu research training network games graduate student fellowships microsoft nsf 
opinions findings recommendations expressed material authors necessarily reflect views nsf united states government 
jha univ wisconsin jha cs wisc edu helmut veith tu vienna veith dbai tuwien ac may reused documentation purposes 
cases assertion state machine safely abstracts existing implementation kept implicit informal 
rise internet technologies significance state machines increased 
particular security protocols communication protocols naturally specified terms state machines 
similar applications state machines safety critical domains including medicine aerospace 
dramatic change focus relatively monolithic systems highly distributed heterogeneous systems development cycles interdependent calls new specification methodologies example august ibm microsoft bea announced publication specifications ws coordination ws specification bpel ws collectively describe reliably define create connect multiple business processes web services environment 
foresee state machines contracts describing software capabilities 
cases protocol specification distributed computation observe state machines longer just tools internal increasingly introduced public domain 
describe tool magic modular analysis programs capable verifying state machine precisely labeled transition system safe abstraction procedure procedure turn may invoke procedures specified terms state machines 
approach number tangible benefits utility 
capability magic verify formally correctness state machine specifications closes evident gap software development methodologies notably security related system features 
envision tools ideas magic assist contracting process third party software providers 
compositionality 
magic verification early development cycle specifica tions plugged missing system components 
compositionality evidently fosters concurrent development independent groups developers 
complexity 
state space explosion remains bottleneck automated verification tools 
due compositionality size individual system parts verified magic remains manageable demonstrated experiments 
verification process magic reduced computing simulation relation finite state systems provide highly efficient algorithms 
flexibility 
internally magic uses theorem provers sat solvers 
open design magic facilitates easy integration new improved tools quickly developing area 
consequently believe magic tools potential indispensable software engineering process 
rest section describe technical contributions 
labeled transition systems specification mechanism 
literature variants state machines investigated purely state formalisms kripke structures model specify systems 
magic framework employ labeled transition systems lts similar kripke structures fact state transitions labeled actions 
theoretical point view presence actions increase expressive power lts 
experience natural designers software engineers express desired behavior systems combination states actions 
example fact lock acquired released expressed naturally lock unlock actions 
absence actions natural alternative introduce new variable indicating status lock update accordingly 
lts approach certainly intuitive allows simpler theory easier specification process 
simple example lts shown left part 
formal definition section 
magic framework actions denote externally visible behaviors system analyzed acquiring lock 
actions atomic distinguished simply names 
presence action indicates certain behavior achieved subprocedure implementation 
shall analyze procedural language model termination procedure return procedure special class actions called return actions 
return action associated unique return value 
return values integers void 
actions return actions called basic actions 
ltss motivated concurrency 
process algebras ccs csp calculus widely reason formally message passing concurrent systems 
formalisms actions crucial modeling sending receiving messages channels 
process algebras lead naturally ltss 
currently analyze sequential programs believe ltss facilitate smooth transition concurrent message passing programs 
procedure abstractions 
goal magic verify implementation system safely abstracted specification 
magic verifies individual procedures respective lts 
implementation possible handle group procedures tree call graph single inlining simplicity speak single procedures 
describes simple case procedure proc corresponding lts 
proc running example 
lock return mspec return int proc return return spec state machine code analysed lock 
example mspec proc 
practice happens single procedures perform quite different tasks certain settings parameters 
approach phenomenon accounted allowing multiple ltss represent single procedure 
selection ltss achieved guards formulas describe conditions procedure parameters certain lts applicable 
gives rise notion procedure abstraction pa formally pa procedure proc tuple declaration proc appears header file 
finite list 
gn mn gi guard formula ranging parameters proc mi lts single initial state 
procedure abstraction expresses proc conforms lts chosen li precisely proc conforms li corresponding guard gi evaluates true actual arguments passed proc 
require guard formulas gi mutually exclusive choice li unambiguous 
goal magic prove user defined pa proc valid 
role pas process twofold 
target pa describe desired behavior procedure proc 

assist verification process employ valid pas called assumption pas library routines proc 
pas seen assumptions verification process 
consequently methodology yields scalable compositional approach verifying large software systems 
illustrates depicting call graph implementation verification steps note due compositionality particular order steps required 
loss generality assume target pa contains guard lts mspec 
achieve result full generality described algorithm iterated guard mspec 
bar call graph foo verification steps verify foo pa verify bar pa baz verify baz pa library target pa routines assumption pa 
compositional verification 
algorithms tool description 
magic tool follows known verify refine paradigm step model creation 
extract lts proc assumed pas guard 
magic model computed control flow graph cfg program combination abstraction method called predicate abstraction 
decide properties equivalence predicates theorem provers 
details step described section 
step verification 
check mspec safely abstracts 
case verification successfully terminates extract diagnostic feedback perform step 
magic verification step amounts checking simulation relation holds mspec cf 
section 
reduce simulation satisfiability certain boolean formula deferring solution highly efficient sat procedures 
details step described section 
step refinement 
diagnostic feedback determine reason failure safe abstraction property 
cause bug proc done 
property fails sufficiently precise model proc 
case return step compute improved 
current stage development magic performs steps automatically third step manually guided 
input magic consists set preprocessed ansi files representing proc ii set specification files containing textual descriptions mspec predicates predicate abstraction 
textual descriptions ltss extended version fsp notation magee kramer 
example lts shown described textually follows lock return return 
schematic explains software architecture magic 
model creation handled stage ii program 
stage input files parsed control flow graph cfg program constructed 
simplifications resulting cfg simple statements side effect free expressions 
relevant predicates control location computed cfg annotated 
stage ii extracted annotated cfg assumed pas predicates 
described process requires theorem provers 
magic interact public domain theorem provers viz 
simplify cvc ics 
verification performed stage iii 
mentioned simulation reduced boolean satisfiability 
magic interface publicly available sat solvers viz 
chaff sato 
efficient sat solver implementation leverages specific nature sat formulas arise stage deliver better performance public domain solvers 
magic generate diagnostic feedback support automatic model files spec files annotated cfg lts descriptions assumed pas predicates guard chaff sato implementation lts specification lts sat solvers stage stage ii stage iii simplify cvc ics decision procedures refinement 
consider significant area research 
related 
years advances verification methodology computing power promoted renewed interest software verification 
resulting systems notably bandera java pathfinder esc java slam blast mc increasingly able handle industrial software 
mentioned systems focus java deal java verification quite different object orientation garbage collection logical memory model require specific analysis methods 
verification tools mc stands meta compilation distinguished place amounts form pattern matching source code surprisingly results scanning relatively simple errors large amounts code 
slam blast closely related tools technical flavor akin 
slam primarily optimized analyse device drivers going included windows development cycle 
contrast slam uses symbolic algorithms blast onthe fly reachability analysis tool 
magic tool uses lts specification formalism simulation notion conformance 
choice reflects area security currently primary application domain 
mc mentioned tools variations model checking require abstraction methods alleviate state explosion problem notably data abstraction general predicate abstraction 
abstraction method slam blast closest 
due compositionality afford invest computing power computing abstractions able improve cartesian abstraction 
generally believe 
architecture magic 
implementation diagnostic feedback form compositionality provided magic unique existing software verification systems 
virtually systems abstraction interface theorem provers various purposes 
software architecture magic designed facilitate integration various theorem provers 
addition magic tool area attempts transfer enormous success sat procedures hardware verification software 
transition systems simulation labeled transition system lts tuple act finite non empty set states ii set initial states iii act set actions iv act transition relation 
assume distinguished state outgoing transitions addition assume presence distinguished action set act denote 
referred transition denoted reachable zero transitions denote relation defined follows iff exist conformance simulation 
context lts simulation natural notion conformance specification lts implementation lts 
simulation notion conformance specification lts program 
compared conformance notions trace containment simulation additional advantage computationally expensive check 
technical variants simulation choose weak simulation allows limited form asynchrony ltss step specification lts may simulate multiple steps implementation 
feature weak simulation crucial approach step mspec typically corresponds multiple steps 
weak simulation 
act act ltss 
relation called weak simulation iff exists ii implies actions act exists say lts weakly simulates denoted exists weak simulation relation rest convention terms simulation simulates mean weak simulation weakly simulates respectively 
algorithm computing weak simulation 
existence simulation relation checked efficiently reducing problem instance boolean satisfiability 
interestingly sat instances produced method belong restricted class sat formulas known weakly negated horn formulas 
contrast general sat known polynomial time algorithm satisfiability weakly negated horn formulas solved linear time 
part magic implemented online linear time algorithm 
magic interface public domain general sat solvers chaff sato 
model creation mspec spec act spec tspec assumption pas pa 
pak 
section show extract proc assumption pas guard predicates 
extraction relies principles state models state execution proc consequently state composed control component data component 
control components intuitively represent values program counter formally obtained cfg proc 
data components representations memory state proc 
representations obtained predicate abstraction 
transitions states derived transitions control flow graph account assumption pas predicate abstraction 
process involves reasoning expressions require theorem prover 
rest section describe steps detail 
control flow graph 
cfg proc finite graph describing flow control proc 
nodes cfg called control locations intuitively correspond values program counter edges denote transfer control 
ordinary code contains nested procedure calls expressions side effects similar constructs difficult construct precise cfgs 
order alleviate problem tool performs set natural simplifications proc constructing cfg 
simplified procedure body contain normal assignments call assignments foo branches 

gotos returns return 
left hand side assignments variable single address dereference 
note resulting program loop statements substituted statements 
assume variable unique scope procedure terminates statements 
preprocessing steps complicated omitted 
cfg example proc shown 
return lock true false final cfg return expanded cfg return return return return 
cfg expanded cfg 
control locations 
simplification definition control locations straightforward normal assignment call assignment goto return statement gives rise control location unique successor 
contrast branch yields control location exactly successors 
assume control location cfg associated conditions statements available 
addition introduce unique final control location unique successor return control locations 
depending statement control location referring speak normal assignment locations branch locations formally denotes set control locations proc 
expanding control flow graph 
cfg simplest reasonable finite model proc 
verification purposes cfg imprecise models control flow ignores data memory 
hand computationally unfeasible model memory explicitly 
show incorporate memory state information cfg 
consider set properties control location 
properties described expressions similar branching conditions 
data properties true false control location corresponds possible states model corresponding particular valuation properties considered 
intuitively construction lts proceeds stepwise 
construct cfg 

construct expanded cfg mexp sexp exp act spec texp follows control location include states sexp state combination control location valuation considered properties 
consider edge cfg 
correspond states sexp 
consequently may correspond transitions texp 
included transitions consistent memory state information 
theorem prover determine transitions admissible 
rule transitions admissibility disproved theorem prover 

mexp precise model proc cfg 
model behavior library routines called proc 
achieve incorporate assumption pas mexp 
step requires theorem prover 
lts obtained incorporating assumption pas 
sections describe step process detail section explain step 
predicate abstraction predicate abstraction approach model abstractly state system set logical predicates 
predicate abstraction techniques model memory state 
aim verify programs natural express properties pure side effect free boolean expressions 
assumed scope variable unique definition unambiguous 
shall expressions way quantifier free order formulas 
conceptual proximity logical connectives equivalents 
order describe memory states fix certain set 
pk expressions call predicates 
note float string constants predicates current stage implementation 
concrete memory state predicate say satisfies iff evaluates true nonzero numerical value execution proc memory state valuation vector 
vk boolean values vi expresses boolean value pi 
denotes set valuations set memory states 
intuitively concrete memory state modeled 
vk satisfies pi iff vi true 
valuation typically models concrete memory states 
set characterized formula called concretization expresses truth falsity involved properties natural way valuation 
vk concretization defined vi vi equal pi vi true equal pi vi false 
describes property captured valuation memory states modeled satisfy 
example example contains single predicate valuations true false 
true false 
true models concrete memory states variable equal false models concrete memory states variable equal 
state space mexp 
combine control flow graph predicate abstraction obtain state space sexp mexp 
state mexp pair models execution states proc control location memory state modeled section show compute transitions states sexp section show extend mexp incorporate specification pas 
need give details theorem provers 
application theorem provers theorem provers reason expressions 
expressions may involve integer boolean arithmetic importantly pointer arithmetic logic involved quite complicated certainly undecidable 
important approach theorem prover conservatively assume logical relationships theorem prover prove 
section describe principles usage theorem provers give intuition approach 
logical intricacies involved including example uninterpreted function symbols model heap handled tool exceed scope omitted 
construction transition relation necessary determine expressions mutually exclusive 
theorem prover compute meta predicate properties false provably mutually exclusive 
true indicates theorem prover prove mutually exclusive mutually exclusive proving mutual exclusiveness capabilities theorem prover 
meta predicate crucial role definition transition relation 
see definition ensures abstraction safe 
illustrate important example expression normal assignment define weakest precondition respect way denote wp 
intuitively wp expression denotes weakest assumption true execution order true execution wp computed follows assignment statement wp obtained replacing occurrences 
assignment statement form take account aliasing possibilities 
example expression wp 
follows famous negative solution hilbert tenth problem checking equivalence expressions undecidable simple integer arithmetic restrict range variables bit question computationally hard 
asgn set normal assignments relation update asgn denotes normal assignments affect valuations defined follows 
update wp asgn intuitively update means proc memory state modeled assignment statement executed need admit possibility memory state abstracted reached 
transition relation texp ready define transition relation texp sexp act spec sexp mexp 
consider states mexp 
seen state models concrete states proc control component data component modeled denote concrete states modeled respectively 
concrete transition include transition texp 
approach guarantees mexp sound model proc 
rest section describes procedure decide include transition texp 
case distinction type final location outgoing transitions different types consider type separately 
goto 
unique successor control location include texp 
change control state program flow keep data state unaltered 
normal assignment 
assignment statement unique successor control location valuation update include texp 
control state change control flow program allow data state change disproved theorem prover 
branch 
recall cfg branch successors 
branching condition true false successors include texp 
include texp 
allow successor control state provably impossible keep data state unchanged 
return 
return expression return location root unique successor location note final location 
return actions return value described action possibly equal value returned include texp 
return action include texp 
call assignment 
incorporate specification pas stage include transitions originating call assignment locations 
transitions explained section 
initial states 
initial states states consistent guard 
set states initial location cfg 
example expanded cfg example shown 
valuations states corresponding control location actual cfg 
corresponding control locations states mexp color marked letter 
addition state corresponding valuation marked written 
inlining specification pas section show conclude construction incorporating assumption pas mexp 
recall purpose step model calls proc library routines 
intuitively achieved inline copies appropriate ltss call assignment locations respective successors cfg 
obtained mexp adding new states transitions consider state call assignment unique successor cfg 
lib 
call assignment statement assume proc function pointer deal special case 

gn pn guard lts list assumption pa lib 

guard obtained gi replacing parameter lib corresponding argument passed proceed move guard 

pi si acti ti 
state si introduce new state simp 
states represent inlined states pi 

add transition 
transition connects call location state initial inlined state 

transition ti different add transition 

transition ti return action true add 

transition ti return action true add 
lib function pointer repeat construction described possible target lib listed user 
example assumption lts lock shown top 
obtained incorporating lts lock mexp shown bottom 
corresponding states mexp colored identically 
similarly states lts lock corresponding inlined states identical colors 
clear simulated mspec 
lock inlined states lock inlined states lock return return assumption lts lock return return return return implementation lts 
lts lock 
enhancements implementation issues describe enhancements described basic framework implemented magic omitted keep presentation simple 
making predicate abstraction efficient 
set valuations exponential number predicates magic uses theorem prover group predicates mutually exclusive 
predicate group true time number possible valuations group equal size group 
reduces size state space dramatically 
example suppose predicates originally formed groups predicates 
number possible valuations reduces sixteen 
assumed fixed set predicates discussion magic allows different sets predicates 
predicates useful abstracted control locations indiscriminately inefficient 
similar method blast 
automatic predicate discovery 
effectiveness predicate abstraction relies critically set predicates 
model extraction process described requires predicates supplied externally 
directed magic try discover suitable sets predicates 
discuss full details predicate discovery process 
experiments magic manages automatically discover predicate sets correctly prove disprove simulation property 
interfacing theorem provers 
explained construction efficient theorem provers 
integrated magic various publicly available theorem provers 
cases simplify cvc ics version software available command line arguments 
run separate processes interface standard inputs outputs 
cases software available libraries defined apis link directly magic 
cases cache results avoid redundant calls theorem prover 
case studies experiments guided general goals wanted assure correctness tool experimenting examples correct outcome known 
second wanted evaluate relative performances various publicly available software theorem provers sat solvers integrated sys tem 
third wished validate usefulness tool handling large real life examples 
regression tests 
goals achieved suite regression tests small size 
tests derived actual linux kernel code 
describes source test briefly 
loc indicates number post processed lines name procedure analysed italics description 
modified procedure means source code changed longer safely abstracted specification lts 
library procedure belongs brackets procedure name 
regression loc description lock pthread mutex lock pthread unlock pthread mutex unlock pthread socket socket socket sock alloc sock alloc socket sys send sys send socket sock sendmsg sock sendmsg socket lock modified pthread mutex lock unlock modified pthread mutex unlock sock alloc modified sock alloc sock sendmsg modified sock sendmsg 
descriptions regression tests 
verifying openssl 
achieve third goal opted openssl open source implementation publicly available ssl specification 
protocol client typically web browser server establish secure socket connection malicious network public symmetric key cryptography 
critical component protocol handshake 
verified openssl implementation server side handshake conforms specification 
implementation encapsulated single procedure lines constructed target lts mspec manually reading ssl specification 
lts states transitions 
total predicates pas library routines supplied externally 
carried experiments 
done correct target lts 
second done modified target lts size correct implementation longer simulated 
repeated identical experiments client side implementation 
encapsulated single procedure lines 
target lts states transitions 
total predicates pas library routines supplied externally 
time construct implementation lts ms sock sendmsg sock alloc unlock lock sock sendmsg sys send sock alloc socket unlock lock regression test 
time construct 
simplify ics cvc regression test results 
experiments done ghz amd athlon machine gb ram running redhat linux 
summarizes performance results various theorem provers obtained regression suite 
axis drawn log scale shows time needed construct milliseconds clear indicator performance theorem prover 
similarly summarizes performance results various sat solvers obtained regression suite 
axis indicates time milliseconds needed check simulation step sat solver 
openssl results 
case openssl server experiments fact correct specification lts safely abstracts openssl implementation proved tool seconds mb memory 
tool successfully verified modified specification lts safely implementation seconds mb memory 
client experiments corresponding figures seconds mb seconds mb 
owing compositionality verify validity assumption pas experiments 
comparison theorem provers sat tools 
closer look bar graphs reveal consistent trends 
purposes tool theorem provers arranged decreasing order efficiency follows simplify ics cvc 
theorem provers comparable efficiency clearly superior 
second sat solvers arranged decreasing order efficiency time check simulation ms sock sendmsg sock alloc unlock lock sock sendmsg sys send sock alloc socket unlock lock regression test 
time check simulation 
horn chaff sato follows horn chaff sato 
external solvers chaff easily best matching implementation 
sato easily distinguishable 
difference performance general sat solvers solver implemented prominent larger openssl example 
time required checking simulation openssl server experiment openssl client experiment seconds seconds respectively solver 
comparison figures chaff seconds seconds respectively 
negative results 
reported figures obtained user supplied predicates 
repeated experiments automatically discovered predicates higher execution times observed 
reason automatic predicate discovery process yields predicates necessary 
leads larger number states greater execution times 
believe improving predicate discovery technique area research 
enormous potential extending basic framework implemented magic 
list notable areas research generation diagnostic feedback automatic model refinement ii abstraction techniques precise modeling heap iii extending magic infrastructure oo languages java iv handling concurrency automatic predicate discovery 
bandera 
www cis ksu edu santos bandera 
blast 
www cad eecs berkeley edu blast 
business process execution language web services 
www oasis open org cover bpel ws html 
esc java 
www research compaq com src esc 
java pathfinder 
ase arc nasa gov visser jpf 
openssl 
www openssl org 
slam 
research microsoft com slam 
ssl specification 
wp netscape com eng ssl 
unified modeling language 
www uml org 
ausiello italiano 
line algorithms polynomially solvable satisfiability problems 
journal logic programming january 
ball majumdar millstein rajamani 
automatic predicate abstraction programs 
sigplan conference programming language design implementation pages 
ball podelski rajamani 
boolean cartesian abstraction model checking programs 
lecture notes computer science 
ball rajamani 
automatically validating temporal safety properties interfaces 
lecture notes computer science 
biere cimatti clarke zhu 
symbolic model checking bdds 
lecture notes computer science 
clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages system toplas april 
clarke grumberg jha lu veith 
counterexample guided abstraction refinement 
computer aided verification pages 
clarke grumberg long 
model checking abstraction 
acm transactions programming languages system toplas september 
clarke grumberg peled 
model checking 
mit press 
das dill park 
experience predicate abstraction 
computer aided verification pages 
dowling gallier 
linear time algorithms testing satisfiability propositional horn formula 
journal logic programming 
dwyer hatcliff laubach pasareanu zheng visser 
tool supported program abstraction finite state verification 
international conference software engineering pages 
ieee computer society 
engler chelf chou hallem 
checking system rules system specific programmer written compiler extensions 
symposium operating systems design implementation 

owre shankar 
ics integrated solver 
computer aided verification 
hallem chelf xie engler 
system language building system specific static analyses 
sigplan conference programming language design implementation 
harel 
statecharts visual formalism complex systems 
science computer programming june 
havelund 
model checking java programs java pathfinder 
international journal software tools technology transfer 
henzinger majumdar 
lazy abstraction 
symposium principles programming languages pages 
hoare 
communicating sequential processes 
communications acm cacm august 

application specific higher order logic theorem proving 
mantel editors proc 
verification workshop verify pages july 
magee kramer 
concurrency state models java programs 
wiley 
marques silva sakallah 
grasp new search algorithm satisfiability 
ieee acm international conference computer aided design november 

hilbert tenth problem 
mit press 
milner 
communication concurrency 
prentice hall 
milner 
communicating mobile systems calculus 
cambridge university press 
moskewicz madigan zhao zhang malik 
chaff engineering efficient sat solver 
design automation conference june 
nelson 
techniques program verification 
phd thesis stanford university 
graf saidi 
construction state graphs pvs 
grumberg editor computer aided verification volume pages 
springer verlag 
shukla 
uniform approaches verification finite state systems 
phd thesis suny albany 
stump barrett dill 
cvc cooperating validity checker 
conference computer aided verification 
zhang 
sato efficient propositional prover 
conference automated deduction 
