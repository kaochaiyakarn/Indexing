software practice experience softw 
pract 
exper prepared speauth cls version open graph visualization system applications software engineering emden gansner stephen north labs research shannon laboratory park avenue florham park nj usa summary describe package practical tools libraries manipulating graphs drawings 
design aimed facilitating combination package components tools includes stream event interfaces graph operations high quality static dynamic layout algorithms ability handle sizable graphs 
conclude description applications package variety software engineering tools 
copyright john wiley sons key words graph visualization software engineering open systems graphs appropriate models problems arise computer science applications 
graph drawings useful way depicting models graph visualization applications design analysis communication networks linked documents static dynamic structure programs 
need tools display manipulate graphs 
graph manipulation visualization focused high level interactive editors low level graph libraries usefulness established 
middle approach offered filters read process input stream produce output stream 
filters proven useful areas text processing program compilation digital signal processing 
serve computational model scripting functional languages suited tasks focus symbolic language computation automation repetitive tasks 
manual interactive editors fall short area 
describes toolkit graph filtering rendering tools 
toolkit filters equal footing interactive tools 
assumed programs graphical user interface gui 
important situations language programmable tools invaluable alternative interactive tools controlled manually 
principle fundamental issue library design modularity favors layering gui features basic data structures 
practice systems designed way 
example base graph objects may refer callback functions types defined large complex gui client library 
occurrence probably matter implementation convenience intractable design flaw details big difference practice tools created 
ccc received april copyright john wiley sons revised may gansner north libraries layout tools graphical tools graph filters table toolkit components attributed graph data structures incremental layout library dot hierarchical layout symmetric layout dotty programmable interactive graph editor related interactive front ends grappa compatible graph package java montage generic activex diagram container tcl tk graph editor incremental layout gpr generic graph filter decomposes graphs strongly connected components computes node colors initial seeds adjusts edges improve aspect ratio hierarchical layouts creating common set graph filters requires sharing graph data 
proposals standard graph file language widely accepted 
challenge find common graph model fits broad range algorithms programs 
key decisions include typing encoding attributes support multi graphs hybrid graphs having directed undirected edges subgraphs higher order objects hyperedges compound edges edge ports syntactic semantic constraints 
systems need dynamic graph editing addition static graph descriptions 
programmers seek generality efficiency ease implementation 
difficult achieve consensus graph model underlie common file language 
ideas mind created toolkit libraries programs creating filtering displaying interacting graphs 
toolkit contains base libraries handling attributed graphs collection graph layout algorithms platform dependent frontends complement file stream graph processors 
main components table discussing related describes various components system detail providing rationale design toolkit 
discusses wide range software engineering tools toolkit 
related rowe graph editor grab interactive system described literature 
exemplified generation systems hard wired layout display algorithms limited programming interfaces 
lacked degree extensibility reusability developed systems proved generic graph editor important software engineering tool 
tichy edge system notable object oriented graph copyright john wiley sons softw 
pract 
exper prepared speauth cls open graph visualization system editor toolkit described literature employ flexible graph data language inter tool communication 
editor customized object level 
characterizes second generation systems 
pioneered key design concepts graph visualization tools refined practical re usable software component fully demonstrate significance ideas 
graphed tom sawyer software graph editor toolkit introduced engineered second generation systems apis enable addition new layout algorithms customization create task specific tools 
led flexible systems integrated generic graphics interprocess communication toolkits tcl tk case graphed successor graphlet win ole java tom sawyer toolkit 
da vinci user interface component hardwired hierarchical layout algorithm including advanced features collapsing subgraphs nodes incremental layout 
uses tcl tk extension language external program defines task application specific semantics 
focus tools defining powerful extendible graph editor somewhat creating general framework construction stream oriented tools 
note libraries prototyping implementing graph algorithms 
mehlhorn leda data structure library graph class main components 
knuth project designed experiments programming combinatorial algorithms 
leda deal issues inter tool communication 
link written berry dean goldberg shannon interactive graph environment scheme tk 
intended application teaching exploring discrete mathematics 
rich set programming primitives libraries includes support hypergraphs 
link built layout algorithms easy see external layout servers tied 
automatic layout application software visualization limited 
libraries toolkit contains libraries low level tool construction 
supports reading writing manipulating graph abstractions allowing performance critical code 
layered top realizes framework displaying incrementally changing graphs 
share common graph specification language 
file language embodies common attributed graph data language graph manipulation tools 
embedding tool specific data command syntax graph descriptions difficult write compatible graph filters 
delegating graph file graph tools syntactically compatible default 
language conventionally known dot format best known application 
engineering decisions earlier experience dag layout program 
dag defines custom layout specification language observed commands simply define graph objects attributes exceptions describe actions sets objects 
dot language provides syntax defining named anonymous graphs nodes edges plus ability attach string valued name attribute pairs graph components 
sets objects modeled subgraphs 
copyright john wiley sons softw 
pract 
exper prepared speauth cls gansner north sample graph files exhibited 
digraph node node node node graph er node shape box course institute student node shape ellipse node label name name name name code grade number node shape diamond style filled color name course code course course label len institute label len institute name institute label len student label len student grade student name student number student label len course label len label relation diagram 
sample files dot format user specify tool arguments options setting certain attributes graph files command line options 
default behavior tools simply pass attributes explicitly operated 
cooperating tools communicate oblivious intermediate filters 
example indicate subgraph nodes constrained rank level leveled graph write subgraph rank abcd tools deal rank assignments need search process subgraphs tools ignore subgraph 
reliance attributes specify command options requires bit cooperation tools avoid attribute name conflicts 
practice seen conflicts central tools functions usually orthogonal written small group programmers close cooperation 
copyright john wiley sons softw 
pract 
exper prepared speauth cls open graph visualization system decision language design favor convenience safety 
graph language intuitive forgiving syntax users edit graphs text editors write generator scripts easily 
attributes strings data types 
early project experimented automatically converting external attribute native representation runtime complications reliance pointers responsibility programmers perform data conversions 
programming model library incorporates external graph model reasonable extend application programming library graphs 
effective library needed expressive simple provide regularity function names types maintain orthogonality operations give programmer ability write highly efficient code necessary 
resulting library provides memory representation graphs described dot graphs nodes edges string valued attributes 
graph components created explicitly read file 
library provides basic set operations graphs asking nodes graph traversing edges node 
possible single function provide properties applicable component types graphs edges nodes 
order programmer tune algorithm library provides efficient access attribute values fine grained control memory sets objects 
described detail 
table ii lists primitives 
contains application specific data 
external files information contained string valued attributes 
implement algorithms efficiently helpful attributes stored memory native format including character strings booleans integer floating point numbers arrays records 
provides flexible efficient unsafe mechanism allows applications attach number records graph object 
records programmer assigned names usually corresponding data type 
way finding named records way locking unique pointer object record 
design allows layering libraries allows programs operate attributes native format directly function calls procedures performance critical 
implementation involves set maintenance graphs node subgraph sets nodes edge sets containing graph subgraph 
relies vo set operations 
supports hashed ordered sets uses ordered sets 
hashing appropriate working large graphs enabled specifically 
sets indexed external identifier usually node name object id assigned sequentially order creation 
feature important creating tools process graphs scrambling contents 
employs interface disciplines exemplified sfio allow application tailor functions runtime 
disciplines allow programmer control memory management file channel interface object id allocator object event callbacks interface generator demonstrates approach similar problem 
copyright john wiley sons softw 
pract 
exper prepared speauth cls gansner north table ii 
primitives types agraph graph subgraph node edge kind strict directed resource discipline attribute symbol table entry objects agraph void get container graph char void get name string void obj get internal id int void obj get object type graphs subgraphs agraph char name kind disc create int agraph destroy agraph void file file access agraph agraph void chan disc int agraph void file int agraph agraph find size agraph agraph char name int bind subgraph agraph agraph agraph search subgraphs agraph agraph agraph move subgraph tree nodes agraph char name int create node agraph id int agraph int bind subgraph agraph search nodes int agraph destroy int agraph char newname int int int outedges edges char name int bind edge agraph int bind subgraph int agraph destroy get endpoints search edges int agraph graph int flag linearize edge sets string attributes agraph int kind char name char value bind attribute agraph int kind attr search attributes char void obj char name int void obj char name char value records void agraph void obj char name unsigned int size create record void obj char name int move front find int agraph void obj char name remove callbacks agraph install callback functions void agraph disc remove void agraph void obj disc int invoke super method copyright john wiley sons softw 
pract 
exper prepared speauth cls open graph visualization system event callbacks powerful mechanism allows independently designed modules communicate graph events 
example display module rely callbacks update layouts modules update graphs primitives 
style programming employed described section 
dynamic layout managers dynamic layout needed program wishes handle graph changes incrementally 
happens interactive graph editing visualizing dynamic graph data browsing subsets large graphs incremental navigation 
support dynamic layout managers defined new interface called 
architecturally interface layered 
layout manager provides line layout service specific class diagrams 
example program maintains hierarchical layouts incrementally libraries created orthogonal force directed layouts 
layout manager communicates external agent typically graphical interface means client function calls resulting layout event callbacks 
available function calls symmetrically callback events open close dynamic layout insert modify delete object control event delivery event delivery control permits batching events event queues 
sequence input events may queued requesting callback events update graph diagram display 
capability essential loading importing external diagrams atomically allows interactive control 
shows animation sequence layout manager reflecting sequence node edge insertions 
retrospect supports primarily stream graph tools efficient memory operations 
features clearly represent attempts engineer language features lacks modern languages 
examples inheritance polymorphism object initialization finalization 
ongoing aimed capturing model object oriented compiled language 
grappa described section java implementation graph template library lee lumsdaine siek partly addresses problem cleanly managing typed attributes necessitated multiple libraries 
areas contemplated improvements include typed file attributes 
example intrinsic support arrays records remove burden application code 
higher order objects 
higher order objects subgraphs 
considered directed hyperedges order object insertion subgraphs stored 
natural notation hyperedges compound edges reasonable 
programming require trading type safety copyright john wiley sons softw 
pract 
exper prepared speauth cls gansner north 
example animation sequence number interface functions 
example type safe functions create search modify delete binary edges require individual functions pair endpoint types 
line operations 
graph files static 
experiments dynamic layouts modified parser line line added new commands synchronization communication streams clients servers 
semantic constraints 
range simple syntactic constraints nodes subgraph color red degree sophisticated tests subgraph planar 
consequent problem incorporate executable code graph descriptions partially solved new copyright john wiley sons softw 
pract 
exper prepared speauth cls open graph visualization system language platforms mobile networked code allow downloading runtime 
layout tools graph layout tools cornerstone system 
main layout tools dot directed graphs undirected graphs 
stream oriented programs read graphs compute layouts write graphs layouts graphics language postscript gif attributed graphs objects associated layout coordinates 
layout programs operate stream tools layout servers interactive interfaces 
primary goal layout tools provide diagrams reasonable size graphs scale large graphs 
criterion drawings acceptable ones human manual drawing editor 
reasonable size means larger fits single screen printed page readable labels means nodes 
graphs larger additional interaction layout techniques needed cope visual complexity 
dot hierarchical layouts directed graphs 
successor dag incorporates general approach warfield sugiyama sub heuristics new 
dot layouts provides assortment shapes styles colors appropriate software engineering diagrams 
example drawing data structure graphs dot format nodes nested box lists ports connecting pointers boxes represent record fields 
dot incorporates algorithm drawing graphs clusters recursive node set partitions 
clusters nesting level drawn nonoverlapping rectangles 
intended applications diagrams hierarchical structures nested source code modules 
shows dot layout graph 
layout finite state machine shows distributed program drawn clustered graph 
tasks involving undirected graphs entity relationship database schema graph layouts emphasize path distance symmetry better hierarchical layouts 
force directed placement applied successfully problem 
undirected graph embedder uses virtual physical model kamada kawai closely akin layout multidimensional scaling 
compatible dot extent accepting input files command line options 
user interface tool dotty described section switch changing path name layout server 
interface components primary interactive tool dotty browser display graph layouts incorporate user interfaces external programs 
dotty controlled wysiwyg interface text procedural interface 
stand tool dotty similar operation systems treating pictures graphs structured objects 
grab edge graphed graphlet da vinci known examples 
tools dotty provides menu pointer driven graph operations 
procedural interface convenient algorithmic operations 
simple example merge graphs 
procedural interface allows re programming graphical copyright john wiley sons softw 
pract 
exper prepared speauth cls gansner north digraph size main shape box comment main parse weight parse execute main init style dotted main cleanup execute string init string edge color red main printf style bold label times string label node shape box style filled color blue execute compare init string main parse execute compare times printf cleanup 
sample graph description layout interface script language level 
turned decision 
example left mouse button bound function highlights edges attached node mouse pointer 
underlying programming language primitives start external processes establish interprocess communication channels 
enables dotty copyright john wiley sons softw 
pract 
exper prepared speauth cls lr ss ss open graph visualization system lr lr ss lr lr ss lr lr 
dot drawing finite state machine lr gryphon parker condor home ek src cc gcc cpp ksh cpp home ek src ksh gcc cc home ek src internal cc gcc cpp ksh cpp ksh gcc home ek src cc ksh ksh gcc ksh home ek sun display ksh home ek src lex gcc cc cpp home ek dev src ksh gcc cc cpp home ek dev src exec 
dot drawing communication distributed program ksh gcc cc home ek src exec cpp lr home ek src parse operate front processes 
context graphs represent state information maintained back process user actions bound functions translate graph operations corresponding state change requests sent back 
dotty application written graphical editor 
programs written scripting language called semantic level conventional scripting languages visual basic unix shell tcl tk 
string variables automatic runtime conversion arithmetic associative arrays hierarchical namespaces organizing code data functions arguments local variables 
standard environment includes function libraries working files processes collection common graphical widgets scroll bars dialog boxes file selection widgets 
similar programming systems runs variety popular window systems 
small library code specifically supporting graph editors 
dotty constructed operating processes dot 
runs dot graph layouts 
programs communicate pipes shown process hierarchy indicated graph rectangles files drawn ellipses pipes sockets shown circles 
disadvantage design function provided different applications 
example dot dotty need render nodes dotty different language running different environment dot drivers 
opens hole incompatibility dot renderer dotty copyright john wiley sons softw 
pract 
exper prepared speauth cls gansner north code name course number student institute grade 
layout name name hand dotty shares virtues best alternative scripting languages 
example tcl tk python perl portable hides low level details fonts color maps 
wrote dotty scripting languages graphics toolkits widespread 
tcl tk portable supported active community created extension packages graphics networking 
combines graph tools tcl 
specifically binds functions tcl commands internal functions rendering graphs tk 
essentially dotty tcl base graph editor customized loading scripts extensions 
dot linked library communication handled graph string attributes 
introduced graphics drivers gif html image maps tool set 
interesting application facility 
cgi script written lines code display graphs remote web pages 
image maps provide way employing graph nodes user interface web navigation 
support dynamic layouts new user interface toolkit written tcl tk 
renderer specifically bound tk devices pad 
tcl script writer control interactions events relate base graphs dynamic graph layouts canvas objects 
provides considerable flexibility script authors 
details 
created specifically prototype distributed network management systems monet project incorporates written john lucent copyright john wiley sons softw 
pract 
exper prepared speauth cls open graph visualization system 
dotty session interesting notion distributed namespaces graph objects shared graph editors running separate host computers 
grappa grappa graph package written java 
created provide graphical interaction graphs web browsers integrated java packages 
shows example grappa display 
grappa classes graph representation presentation communication layout services dot language parser 
grappa extendible sense classes defined naturally sub classes grappa object classes 
grappa share code rest system adheres model file language including dot conventions graphical symbols attributes fits graph processing tools 
grappa user api interfaces engineered java applet performance serious problem current platforms downloading graphs hundreds objects 
example typical high personal computer workstation downloading initializing display telecommunications network nodes copyright john wiley sons softw 
pract 
exper prepared speauth cls gansner north 
grappa session edges takes seconds wall clock time 
overhead initializing tens thousands java objects thought bottleneck 
montage encouraged success applying graph drawings user interfaces software engineering documentation considered integrate graph tools applications microsoft windows 
run ms windows native graphics toolkits communicate document editors word 
simple operations placing static graph layout document intuitive 
ms windows interactive graphical programs communicate protocol called activex called object linking embedding ole descended cut paste facility 
protocol supports embedding graphical clients inside containers servers defining object types messages handle program activation graphical events persistence studying needed build activex layer programs decided write new front ms windows building native graphics inter application communication toolkits 
front named acts client top level frame allows dynamic layout manager control placement embedded objects may frames nodes may activex applications edges graph layouts 
montage written gordon berkeley 
copyright john wiley sons softw 
pract 
exper prepared speauth cls open graph visualization system supports application toolbars way external programs access graph objects 
visual basic programs eventually fill role scripts play dotty 
shows sample session montage graph records sites visited links traversed web browser 
clicking node user causes browser go corresponding site 

montage internet explorer session graph filters toolkit provides collection functions manipulating analyzing graphs filters providing algebra operators graph objects 
view main design features toolkit 
having variety flexible filters available user construct applications high level scripting language simply combining general purpose filters 
describe interesting filters 
gpr gpr graph filter modeled unix awk sed utilities :10.1.1.44.9066
input graph gpr selects subgraph generates output graph function subgraph input graph 
copyright john wiley sons softw 
pract 
exper prepared speauth cls gansner north selection iterating nodes edges testing fixed predicate 
predicates command line arguments 
gives gpr interface convenient graph transforming commands scripts 
convenience command line option select input graph 
gpr predicate evaluator regular expression matches arithmetic computation 
fowler provides features 
primitive values expressions may constants strings numbers graph object attributes listed table iii 
pseudo attributes built functions refer local syntactic properties graph object names degrees 
useful properties immediately available string attribute interface 
gpr step generates output graph input graph selected subgraph operands 
permitted operations add induced edges selection update attributes nodes edges selection contract selected subgraph node contract paths input graph edges replace selection transitive reduction operations convenient pre processing graphs gpr layout 
examples may clarify gpr usage 
double weight blue edges gpr color blue weight weight perform path compression simplifying data control flow graphs gpr indegree outdegree find transitive reduction graph gpr applying transitive reduction plausible way attack complexity large dense graphs layouts hard read 
argument applying algorithm filter removing edges implied transitively paths change reachability acyclic graphs transitive reduction unique 
interesting find evidence prove disprove effective reduction specific tasks involving large graphs 
shows effect running algorithm module dependency graph 
graph nodes reduced edges 
drawings size cleaner provides better view graph structure 
gpr design favors convenience operations flexibility 
give gpr power language utilities awk perl changed embody language programmer set sequence composition filtering operations 
promising direction development 
complementary approach suggested tarjan path expressions depth search framework certain common graph algorithms succinctly defined 
approach attacking complexity large graphs decompose smaller graphs 
situations decomposition strongly connected components copyright john wiley sons softw 
pract 
exper prepared speauth cls closure profile coder spill intset cps hoist contract coder cg eta expand list batch opt convert open graph visualization system intmap stream mc lambda profile list sort cps pathnames closure reorder prim join translate prof cg dynamic access equal unboxed spill expand contract hoist sort interact interp index intset eta batch siblings access dynamic stamps lambda intmap symbol env stream modules variables symbol interact types misc fixity env prim siblings join translate interp opt convert reorder prof tuples vector equal types linkage vector stamps ascii instantiate typecheck overload unify signs overload unify modules typecheck misc variables fixity instantiate linkage gpr applied module dependency graph tuples ascii signs normalize normalize index pathnames initial overloads loader initial cleanup assembly unsafe math dummy core overloads loader assembly unsafe math scc helpful 
filter reads graph stream breaking input graph list scc reduced graph nodes correspond scc original graph induced edge set 
example 
part shows original graph part shows graph consisting strongly connected components 
certain applications smaller graph exhibits essential copyright john wiley sons softw 
pract 
exper prepared speauth cls unboxed mc inline cleanup dummy core inline gansner north structure original 
nodes edges table iii 
pseudo attributes name string indegree number outdegree number tail string head string number number number number graph layouts graphical attributes node color shape encode relationships represented graph edges usually determine geometric position 
example drawing call graph profiled program color encode time spent function 
color get information layout encoding additional variables 
appropriate choice graphical styles reinforce primary edge relation desirable redundant encodings may ease graphical tasks cf 
earnshaw 
situations course color simply graphical designs interesting appealing 
necessarily bad caution needed unnecessary complexity conflict accurate informative visualization 
assist application color graph visualization stream tool assigns node colors 
expects input graphs nodes assigned colors 
seed values applies breadth search push colors edges applying initially uncolored nodes 
colors blend flows meet 
technique combine visual reinforcement edge relations encoding relationship choice seed colors 
ramp color saturation smoothly levels layered graph 
way applying colors emphasizes level assignment 
example output shown 
diagram family software projects showing interdependencies 
major family divisions architecture software configuration management databases visualization represented nodes bottom graph color 
nodes interconnect graph colors blend giving visual clue monochrome application fits family divisions 
filter adjusts directed graph improve layout aspect ratio 
graph leaves disconnected nodes layout produced dot generally wide tall 
adjusts graph improve layout compaction 
particular attempts copyright john wiley sons softw 
pract 
exper prepared speauth cls trap breakpoint assembly open graph visualization system list formatter cdb break target event thread symbol memory displayed mc frame mc frame root interp scope interp target architecture wire rd expression event frame 
strongly connected component analysis copyright john wiley sons softw 
pract 
exper prepared speauth cls wr mutex gansner north past sbcs rcs pax ship svr ifs sccs reiser cpp vi file system ansi cpp bourne sh ksh emacs ksh ksh proto build stdio ifs sfio ml eke daf ksh peggy pegasus pml yacc imx ttu pg malloc exene ml cql svr malloc testtube xray configuration mgt architecture software process cia design archaeology advanced software technology incl cia 
applied graph software packages app grab dag cron dia dot yeast dot clusters dotty stagger leaf nodes disconnected nodes inducing invisible edges 
experiences reliance simple concise interfaces extendible architecture promotes rapid development new applications integrating existing external components graph system 
prototypes built day refined incrementally 
range programs projects graph filtering visualization components tends validate flexibility system architecture usefulness individual tools 
domain software engineering parts toolkit create tools specification testing distribution reverse engineering software process management 
toolkit projects network planning engineering security web page analysis 
section describe detail applications built graph analysis visualization components 
structure repositories framework proven powerful structure repository 
basic idea class structured documents program source code language web pages html create model key structural entities attributes relations 
builds document analyzer parses collection documents belonging class generates repository capturing modeled components associations 
copyright john wiley sons softw 
pract 
exper prepared speauth cls marvel provence mosaic open graph visualization system repository built user filter repository create derived views display views perform queries interesting structures views 
views tabular form take advantage duality relation graph provide directed graph views 
graph presentation greatly helps understanding relationships entities 
addition graph active part user interface convenient mechanism navigation querying 
relation graph duality arises querying filtering views 
desired filtering best posed graph manipulation 
example simplify view may want see transitive reduction graph removing relations derived transitive closure 
conversely repository modeling program may desire construct transitive closure uses relation starting program entry point 
occurring closure considered dead code 
framework implemented applied settings described 
document class construct model class essentially entity relationship database schema write analyzer extracts required information document 
toolkit provides core facilities graph manipulation display instances framework 
create visualization subsystem tailored document class user provides schema graphical attributes fonts colors shapes nodes edges corresponding entities relationships schema appearance actions graphical interface 
instance compiler takes specifications generates complete visualization environment software engineering graphs ubiquitous data representation computer science surprisingly software engineering 
occur software development requirements specifications testing maintenance 
specify system structure semantics provide graphical view source code structure relations describe processes human machine compose building execution software 
form basis models object oriented analysis design methodologies cf 
uml 
components toolkit tools supporting aspects software engineering 
tools remained research prototypes production systems handling hundreds files hundreds thousands lines code 
reverse engineering reverse engineering task discovering structure semantics program implementation artifacts 
typically artifacts include program source supporting documentation 
rely original system designers implementors unusual unavailable forgotten design coding decisions 
approach task analyze source code certain language constructs variables functions files form program determine relations user supplies certain database information instance compiler generates query facilities 
copyright john wiley sons softw 
pract 
exper prepared speauth cls gansner north pool pool count pool alloc pool free void pool purge block pool pool pool size pool pool const pool pool operator pool pool grow pool head block pool free block pool head block pool size block pool count block pool operator const block pool block pool expand block pool block pool block pool block pool const block pool block pool block pool size pool element header block header block pool sz block pool cnt pool 
reachability graph pool element header block header constructs function call data access dependency 
information deduce higher level program structure discern program works 
programs libraries written acacia system provides support type analysis 
acacia instance repository framework described 
blends special purpose parser semantics analyzer produce repository parts toolkit tailored graphs program entities 
user employ explore program structure graphs looking type dependencies include file hierarchy case class inheritance graph 
typical graph view acacia shown representing entities reachable class 
certain graph analyses common important acacia provides builtin tools performing 
include forward reverse reachability analysis determining subsystem dependencies unnecessary include file detection 
exploring software system wants know set components collection components depends example order decompose system subsystems libraries 
particular information necessary order extract subsystem separate inclusion 
alternatively may need learn components affected changing component 
functions provided acacia semantics transitive closure operators program graph 
common problem legacy programs accumulation unnecessary include files 
usually arise code structure altered re evaluating include files required 
occur programmers naively adding include directives compilation succeeds 
problem exacerbated requires copyright john wiley sons softw 
pract 
exper prepared speauth cls size open graph visualization system complete prototypes functions 
uncommon percent include files unused 
unnecessary include files complicate reverse engineering increase number components relations imply associations exist inclusion 
problem affect software build process 
initial phases compilation especially preprocessing lexical analysis predominate removal unneeded include files decreases build time 
environments rely nested include files gain dramatic 
acacia provides necessary graph analyses partition set include files categories 
include file necessary compilation unused incidental immediate contents necessary includes directly indirectly necessary include file 
acacia instantiation structure repository framework 
built java korn shell scripting language programming system languages debugging looking bug analyzing dynamic behavior code helpful see trace function calls place execution 
facility provided xray 
instruments code executes gather trace log combines data static information derived acacia 
execution trace animated function call graph view 
basic graph edges indicate function calls 
color edge indicates currently active functions call stack plus frequently particular function call 
spectrum highlights edges traversed execution 
system highlights edges heavy activity determined user supplied threshold indicating points greatly benefit analysis optimization 
tool effective uncovering inefficiencies exposing bugs variety programs 
specification graphs play role software development process requirements specification phases 
example occurs telephone switching equipment 
switching community advantageous describe interaction switching components formal methods 
provides high level model system analyzed verified analysis 
way specifying system semantics language lotos provides process algebra event sequences 
assist software engineers unfamiliar formal techniques prototype programming environment constructed subset lotos language 
system description written lotos corresponds collection finite state machines 
structure repository environment presents text view graph view 
provides natural familiar representation engineer system act 
addition provide view system simulation current state component highlighted 
interestingly environment written www research att com ciao debugger builds extensively high level toolkit approach advocated integrated dotty display linked data structures program information 
copyright john wiley sons softw 
pract 
exper prepared speauth cls gansner north sml exene graphics library relying graph toolkit layout graph algorithmic support 
closed architecture greatly restricted mixing implementation languages 
process auxiliary main stream software development various activities supporting development process 
activities graphs modeling processes provide unifying theme 
toolkit develop tools model activities 
software process set tasks partially ordered time completed part development software system 
tasks include main development stream analysis design coding testing involve related activities documentation staffing business case analyses 
tasks may involve multiple subgroups organization may involve humans machines 
software process reflects chosen development methodology 
system modeling analyzing software processes 
software process represented partially ordered set user interface naturally corresponding attributed graph 
user interact graph adding annotations nodes edges describe process log progress 
annotations limited text include multimedia information video showing task accomplished executable actions 
user specify static dynamic constraints node edge attributes 
machine process level useful tool monitor system process execution multiple machines real time 
provided tool displays relevant processes host machines system resources 
displaying graph uses nodes represent processes open files plus special interprocess communication mechanism pipes sockets 
resources restricted single machine clustered 
logging mechanism specially instrumented code gather data traces system calls directly 
system debugging purposes generate log played back analyzed line 
areas applications toolkit come unexpected sources 
ship system managing distribution possibly mutually dependent software components components change time 
client site maintains record versions site 
new version software available ship determines effective way deliver software client depending software changed transport mechanism uucp rcp ftp deliver 
typically involves sending collection incremental updates 
managing software versions contained ship data base simplified tool 
presents collection systems versions files directory hierarchy node color indicating current status package version vis vis integration database 
user browse data base structure exposing hiding directory detail 
clicking file node brings view file contents viewing method file type 
parts toolkit plus readily available software tools built couple lines code hour 
copyright john wiley sons softw 
pract 
exper prepared speauth cls open graph visualization system network planning applications increasingly rely web browser interfaces 
advantage database operations analysis performed central server provides consistency reliability security basic user interface functions performed locally ensure interactive response 
key architectural problem application specific data exchanged clients servers 
shows typical display network design application created stream graph tools 
initial html page application asks users enter network endpoints form receipt server invokes network analysis utility max flow algorithm network stored server 
result displayed graphically html page 
context clear back graph processors run cgi programs stream 
explore alternative grappa relatively heavyweight clients application display user interface programmed concise tcl tk script 
script interpreted browser tcl tk plug installed separately 
graph displayed hard wired script 
computing environment plug interface starts times faster grappa networks shown 
lightweight scripts possible tcl tk environment provides built graphics features hand elaborate features pan zoom multiple views editable graphs need better data structures substantially code 
summary lightweight gui scripts valuable role class library better foundation sophisticated user interfaces 
graphing internet growth internet web pages provided new graphs analyzed displayed 
graphs arise various contexts 
internet service provider obvious graph representing network network traffic 
graphs representing connections url 
graphs useful restructuring web sites facilitate user access important pages example providing direct links remove little pages 
problem associated rapid expansion web coupled newness technology dynamic nature web constant churn web pages 
web users visit page day return day page may entirely rewritten redesigned 
system tracking types changes 
system instance structure repository time html language 
capture evolution web site system uses analyses site different times constructs view representing differences repositories presents graph reflecting changes 
manner user quickly spot additions deletions modifications url links 
embodiment system relies analysis component supplies textual structural changes 
user concerned static structure collection web pages applied single repository difference repositories 
availability described uses toolkit applied focusing mainly local environment 
package freely available web copyright john wiley sons softw 
pract 
exper prepared speauth cls gansner north 
network design application tcl tk www research att com sw tools graphviz 
tools mentioned athttp www research att com sw tools 
surveyed design set compatible graph processing tools toolkit application software engineering 
tools include filters interactive programs easily combined 
provide users assortment implements manipulating graphs new ones introduced easily 
particular toolkit emphasis filters allows tasks handled combining toolkit components scripting language 
copyright john wiley sons softw 
pract 
exper prepared speauth cls open graph visualization system inter tool communication relies graph data language implemented common programming environments 
endowed tool set flexibility independence specific language system platform 
experience applications clear progress processing visualizing graphs networks interesting problems remain 
standpoint algorithm engineering relevant problems algorithms best filters attacking complexity large graphs 
higher order graph objects accommodated compromising convenience efficiency 
sort interactive systems best prototyping programs combine graphs geometric computation graphics external tools 
system described synthesis people 
particular authors yih chen koutsofios john phong vo labs research john lucent crucial input time ideas software 

kernighan pike unix programming environment prentice hall englewood cliffs 

tichy edge extendible graph editor software experience 

himsolt graphlet system proc 
symp 
graph drawing gd volume lecture notes computer science berlin pp 

springer verlag 

rowe davis meyer spirakis browser directed graphs software practice experience 

himsolt graphed interactive graph editor proc 
stacs volume lecture notes computer science berlin pp 

springer verlag 
www uni passau de himsolt graphed graphed 

madden madden powers himsolt portable graph layout editing brandenburg ed proc 
symp 
graph drawing gd volume lecture notes computer science berlin september pp 

springer verlag 

frohlich werner demonstration interactive graph visualization system da vinci tamassia tollis eds proc 
symp 
graph drawing gd volume lecture notes computer science berlin september pp 

springer verlag 

mehlhorn leda platform combinatorial geometric computing comm 
acm 

knuth stanford addison wesley reading mass 

berry dean goldberg shannon graph drawing manipulation link proc 
symp 
graph drawing gd september 

easy tool integrating scripting languages proc 
th usenix tcl tk workshop pp 



vo general efficient container data type library proc 
summer usenix conf 

korn 
vo sfio safe fast string file io proc 
summer usenix conf pp 


lie quan lee jeremy siek andrew lumsdaine generic graph component library proc 
oopsla 
appear 

gansner koutsofios north 
vo technique drawing directed graphs ieee trans 
software engineering 
copyright john wiley sons softw 
pract 
exper prepared speauth cls gansner north 
gansner north 
vo dag program draws directed graphs software practice experience 

warfield crossing theory hierarchy mapping ieee transactions systems man cybernetics smc 

automatic display graphs computer aided decision analysis ieee transactions systems man cybernetics smc 

sugiyama toda methods visual understanding hierarchical systems ieee transactions systems man cybernetics smc 

north drawing ranked digraphs recursive clusters proc 
alcom international workshop paris graph drawing topological graph algorithms 
ftp pub papers gd tex wilma cs brown edu 

kamada kawai algorithm drawing general undirected graphs information processing letters 

kruskal designing network diagrams proceedings general conference social graphics washington july pp 

department census 
bell laboratories technical report 

koutsofios dobkin view editor technical pictures graphics interface calgary alberta pp 


ousterhout tcl tk toolkit reilly associates 

bederson hollan perlin meyer bacon furnas advances pad zoomable graphics widget visual languages computing 

north tcl extension dynamic graphs proc 
th usenix tcl tk workshop pp 


wagner goodman monet optical networking 

lee grappa graph package java proc 
symp 
graph drawing gd september 

inside ole microsoft press edition 

aho kernighan weinberger awk programming language addison wesley reading mass 

mcmahon sed non interactive text editor unix programmer manual th edition volume bell telephone laboratories murray hill new jersey 

fowler korn 
vo libraries file system architecture krishnamurthy ed practical reusable unix software john wiley sons new york chapter pp 


aho hopcroft ullman design analysis computer algorithms addison wesley reading mass 

tarjan unified approach path problems acm 

maceachren maps guilford press new york 

bertin graphics graphic information processing de gruyter berlin 


chen fowler koutsofios wallach ciao graphical navigator software document repositories proc 
intl 
conf 
software maintenance october pp 


rumbaugh jacobson booch unified modeling language manual addison wesley 


chen gansner koutsofios data model supporting reachability analysis dead code detection proc 
th euro 
software engineering conf 
esec september pp 



vo 
chen incl tool analyze include files summer usenix conference june pp 


korn 
chen koutsofios reverse engineering java applets technical report tr laboratories 


chen koutsofios rosenblum connections krishnamurthy ed practical reusable unix software john wiley sons new york chapter pp 


korn abstraction visualization graphical debuggers ph thesis department computer science princeton university princeton nj 

lessons basic lotos proc 
th intl 
conf 
software engineering may pp 


milner tofte harper definition standard ml revised mit press cambridge mass 
copyright john wiley sons softw 
pract 
exper prepared speauth cls open graph visualization system 
gansner reppy multi threaded higher order user interface toolkit bass dewan eds user interface software john wiley sons new york pp 


koutsofios cohen interactive multimedia process visualization environment proc 
th euro 
software engineering conf 
esec september pp 


krishnamurthy provence process visualization enactment environment proc 
th european software engineering conf esec september pp 


fowler korn koutsofios north connections krishnamurthy ed practical reusable unix software john wiley sons new york chapter pp 


fowler configuration management krishnamurthy ed practical reusable unix software john wiley sons new york chapter pp 


koutsofios north connections krishnamurthy ed practical reusable unix software john wiley sons new york chapter pp 



chen koutsofios website visualization tracking system proc 
webnet october 

douglis 
chen ball koutsofios querying navigating changes web repositories computer networks isdn systems 
copyright john wiley sons softw 
pract 
exper prepared speauth cls 
