arxiv cs cs ni nov cdn content distribution network gang peng department computer science state university new york stony brook stony brook ny 
cs sunysb edu february internet evolves operates largely central coordination lack critically important rapid growth evolution internet 
lack management turn difficult guarantee proper performance deal systematically performance problems 
available network bandwidth server capacity continue overwhelmed internet utilization accelerating growth bandwidth intensive content 
result internet service quality perceived customers largely unpredictable unsatisfactory 
content distribution network cdn effective approach improve internet service quality 
cdn replicates content place origin replica servers scattered internet serves request replica server close request originates 
give overview cdn 
critical issues involved designing implementing effective cdn survey approaches proposed literature address problems 
example cdn described show real commercial cdn operates 
scheme provides fast service location peer peer systems special type cdn infrastructure support 
conclude brief projection cdn 
past years internet serious changes transact business 
businesses performance web connections direct impact profitability 
time load content key internet sites improved constantly years web content access latency range seconds times threshold believed represent natural human reading scanning speeds 
think constant improvement bandwidth internet infrastructure example availability high speed mile connection subscribers internet backbone fibers increasing capacity various servers reduce eliminate access delay problem eventually 
reality quite opposite 
improvements users suffer significant access delays 
technical report tr experimental computer systems lab stony brook university 
poor internet service quality typically represented long content delivery delay primarily due phenomena 
lack management internet 
fact internet evolves operates largely central supervision critically important rapid growth change absence administration turn difficult guarantee proper performance deal systematically performance problems 
second load internet richness content continue soar increase available network bandwidth server capacity continue overwhelmed 
facts elevate delay accessing content internet access latency unpredictable 
emergence new forms internet content media streams internet performance problem worse fluctuation irregularity access delay serious impact quality streaming content customer perceives gcr 
basic approach address performance problem move content places origin servers places edge internet 
serving content local replica server typically better performance lower access latency higher transfer rate origin server multiple replica servers servicing requests costs data communications network 
cdn takes precisely approach 
concrete cdn replicates selective set content replica servers sends requests replicated content replica server 
place replica servers distribute content copies replica servers route requests proper replica server having desired content key challenges designing effective cdn major topics discuss 
rest organized section gives overview cdn including general cdn architecture issues addressed constructing capable cdn 
section describe issues involved replica placement cdn compare representative strategies 
proceed section discusses problems need solve request routing survey effective approaches proposed literature resolve 
section describes commercial cdn works section presents request routing scheme fast service location large scale peer peer systems 
conclude section brief projection cdn 
overview cdn distributes contents origin server replica servers close clients 
replica servers cdn store selective set content requests set content served cdn hit ratio approach 
fact implies cdn short access delay consume network bandwidth 
addition cdns offer compelling benefits content providers including popular web sites gcr 
cdn serve multiple content providers shared resources offer economies scale allow cdn dynamically adjust content placement request routing capacity provisioning respond demand network conditions gcr cdd 
fact objects cacheable replicable include dynamic objects read access personalized objects requests cdn indispensable 
clients replica servers request routing system distribution system accounting system origin servers billing organization system architecture components cdn general architecture cdn general architecture cdn system shown 
consists components client replica servers origin server billing organization request routing system distribution system accounting system 
relationships components represented numbered lines described follows 
origin server delegates uri name space document objects distributed delivered cdn request routing system 

origin server publishes content distributed delivered cdn distribution system 

distribution system moves content replica servers 
addition system interacts request routing system feedback assist replica server selection process client requests 

client requests documents perceives origin 
due uri name space delegation request directed request routing system 

request routing system routes request suitable replica server cdn 

selected replica server delivers requested content client 
additionally replica server sends accounting information delivered content accounting system 

accounting system aggregates accounting information statistics content detail records origin server billing organization 
statistics feedback request routing system 

billing organization uses content detail records settle parties involved content distribution delivery process 
distribution system dominating approaches distribute content replica servers internet broadcast satellite 
internet distribution content simpler 
approach cdn establishes maintains distribution tree overlay network existing internet infrastructure disseminates content origin server replica servers tree overlay 
establish maintain distribution overlay tree major technical concern 
approach suffer unpredictability problematic performance internet 
akamai technologies networks model 
data satellite broadcast potential remarkable cost savings provides high quality predictable performance path sending critical content real time streaming media 
content distribution schemes utilize data satellite broadcast 
replica placement replica placement deals replicas object network place 
problem divided issues replica server placement object replica placement 
replica server placement deals problem placing replica servers internet 
object replica placement replica server place particular object replica web page 
intuitively replica servers placed manner closer clients reducing latency bandwidth consumption 
object replicas placed load replica servers cdn trying balance load replica servers ar 
theoretical approaches proposed model replica server placement problem 
models variations center placement problem 
due computational complexity algorithms heuristics developed 
suboptimal algorithms take account existing information cdn workload pattern network topology 
provide sufficient solutions computation cost 
object replica placement studied web caching system 
kpr kd show cooperation caching nodes improve performance significantly 
object replica placement issue cdn krr discussed simple cost model evaluated heuristic approaches proposed improved heuristic exploiting coordination replica servers 
essence similar idea 
request routing system request routing system select suitable replica server holds copy requested content direct incoming requests server 
proximity client selected replica server replica server load major criteria choose proper replica server 
server location question choose suitable replica server cdn service request involves issues determine distance requesting client server 
hop counts roundtrip times metrics measure distance 
ping traceroute common tools obtain parameters 
metrics sufficient accurate indicate proximity clients replica servers account network traffic situation highly variable 
determine load replica server 
techniques widely determine server load server push client probe 
technique replica servers propagate load information agents 
second approach agents probe status servers interest periodically 
trade frequencies probing accurate measurement traffic incurred probing 
request routing techniques guide clients particular server set replica servers 
general classified categories 
client multiplexing scheme client proxy server close client receives addresses set candidate replica servers chooses send request 
generally scheme imposes additional overhead sending set candidate replica servers client requesting content 
due lack information client may choose server high load result overloading servers larger access latency 
redirection simplest probably efficient means redirecting requests 
scheme requests content way origin server point server re directs browser new url protocol level 
origin server server cluster point responsible redirecting requests bottleneck quite error prone 
dns indirection scheme uses domain name system dns modifications return ip address set replica servers dns server queried client 
choosing server may depend location client 
technique transparent client 
quality server selection improved account server performance 
commercial cdns akamai approach 
anycasting essentially request routing cdn viewed application locating nearby copies replicated internet servers 
techniques anycasting developed server location request routing cdn 
scheme anycast address domain name ip anycast address url content define group servers provide service 
client desiring communicate servers sends packets anycast address destination address field 
packet routed anycast aware routers servers identified anycast address 
anycast aware routing integrated existing internet routing infrastructure providing request routing service cdns 
addition scheme potential scale growth internet 
peer peer routing peer peer systems widely deployed internet disseminate content 
participant nodes peer peer system generally belong different affiliations constitute ad hoc network 
network constantly changing nodes complete global information time network 
problem routing requests efficiently distributed manner incurring high overhead propagating routing information major research concern 
server placement section survey approaches server placement described literature contributions inadequacies 
issue decide internet place servers store replicates objects 
goal minimize metrics average content access latency perceived clients network bandwidth consumption transferring replicated documents servers clients 
correlated sense optimizing metric generally lead minimization 
theoretical approaches server placement problem modeled center placement problem 
center placement problem defined follows placement number centers consider metric minimizing maximum distance node nearest center 
problem known minimum center problem jjj 
problem similar minimum center problem facility location problem total cost terms building facilities servicing clients constrain 
theoretical approach solve center placement problem graph theory hierarchically separated trees hst jjj bar 
define notations describe hst minimum center approaches 
notations adopt notations section network represented graph set nodes set links 
denote number nodes denote number centers place graph 
denote distance nodes graph dg omit deduced context 
hst hst algorithm consists phases 
phase graph recursively partitioned follows 
node arbitrarily selected current parent partition complete graph nodes random radius node form new child partition 
value radius child partition factor smaller diameter parent partition 
process recurs partition node partition 
obtains tree partitions root node entire network leaf nodes individual nodes network 
second phase virtual node assigned partitions level 
virtual node parent partition parent virtual nodes child partitions 
length links virtual node children half partition diameter 
virtual nodes form tree 
gives example generating hst tree algorithm described graph 
links graph length 
randomization partition radius done probability short link cut partitioning decreases exponentially climbs tree 
nodes close partitioned lower tree 
advantage characteristics resulting hst tree greedy algorithm devised find number centers needed maximum center node distance bounded node root partition tree ni children node partition tree example generating hst list partitions sorted decreasing order partition diameter times 
hl denotes partition head list diam hl diameter 
shows greedy algorithm hst tree 
nr diam hl hl hl nh algorithm pushes centers tree discovers partition diameter number partitions minimum number centers required satisfy performance metric 
select actual centers simply needs set virtual nodes partitions centers 
example set get partition running greedy algorithm 
result shows need ensure distance single node closest server greater deploy servers located node set respectively 
hst greedy placement algorithm tell number centers needed satisfy performance metric determine placement budget centers 
example place centers simply needs change line algorithm 
obviously performance metric may longer satisfied certain number 
minimum center minimum center problem np complete gj 
willing tolerate inaccuracies factor maximum distance node nearest center worse twice maximum optimal case problem solvable follows 
graph edges arranged non decreasing order edge cost em gi ei ei ei 
square graph graph containing edge path hops edges pseudo edges exist independent set graph subset edge independent set set nodes hops apart define maximal independent set independent set nodes hop away nodes outline minimum center algorithm shown follows 
construct 

compute mi 
find smallest mi say 
mj set center 
basic observation cost optimal solution center problem cost ei smallest index gi dominating set size true set center nodes dominating set gi dominating set size choosing set centers guarantees distance node nearest center bounded ei 
second observation star topology gi transfers clique full mesh maximal independent set size implies exists set stars cost edge bounded ei smaller larger solution minimum center problem stars 
note approximation yield unique solution 
approximation minimum center algorithm determine number centers needed satisfy performance metric picking index ek 
maximum distance node nearest center gk number centers needed mk 
heuristic solutions theoretical solutions described computationally expensive consider characteristics network workload 
difficult apply practice rge may suitable real cdn systems 
heuristic suboptimal algorithms proposed leverage existing information cdns load pattern network topology krs jjr rge offer adequate solution lower computation complexity 
greedy algorithm greedy algorithm proposed krishnan krs cache location problem 
qiu adapted algorithm server placement problem cdn 
basic idea greedy algorithm follows 
suppose needs choose servers potential sites 
chooses site time 
iteration evaluates potential sites individually determine suitability hosting server 
computes cost associated site assumption accesses clients converge site picks site yields lowest cost bandwidth consumption 
second iteration searches second site conjunction site picked yields lowest cost 
general computing cost algorithm assumes clients direct dominating set set nodes neighbor accesses nearest server reached lowest cost 
iteration continues servers chosen 
jamin jjr discussed general algorithm backtracking greedy algorithm 
differs basic follows iteration backtracking greedy algorithm checks possible combinations achievable removing placed servers replacing new servers 
basic greedy algorithm backtracking greedy algorithm 
evaluating relative performance greedy replica placement strategy optimal ones qiu extracted client locations workload traces msnbc nasa kennedy reduced number locations scale thousands clustering clients topologically close 
utilized types network topologies simulating network random graph deriving real topology bgp routing table 
experimental configuration greedy algorithm performs remarkably factor compared computationally expensive optimal solution computation needed magnitudes 
greedy algorithm relatively insensitive imperfect input data 
unfortunately greedy placement requires knowledge client locations network pairwise inter node distances 
information cases may available 
topology informed placement strategy topology informed placement strategy called transit node discussed jamin jjr 
works follows 
assuming nodes highest outdegrees reach nodes smaller latency place servers candidate hosts descending order outdegrees 
called transit node heuristic assumption nodes core internet transit points highest outdegrees 
due lack detailed network topology uses autonomous systems topologies node represents single node link corresponds level bgp peering 
improved topology informed placement strategy proposed rge 
leverage router level internet topology level topology 
strategy lan associated router potential site place server site 
experiments strategies network topology extracted internet set client locations derived web site trace log 
result shows transit node heuristic perform greedy placement router level topology information results better performance achieved exploiting topology knowledge 
performance improvement diminishes increasing number servers explored performance tens servers 
practice due capacity limit single site cdn may consist servers akamai deploys servers countries aka 
best knowledge problem optimizing placement large number servers internet explored 
outdegree node number nodes connected 
reactive gathering exp ring broadcast multicast request service server location techniques routing layer anycast proactive gathering application layer routing table polling network probing route probing hop count probing triangulation server location techniques steps operations involved servicing request cdn locating suitable server holding replicates requested object name server location redirecting request selected server called request routing 
totally distributed request routing system anycasting request forwarded directly proper servers anycast aware routers operations combined 
section investigate issues explore known anycasting schemes depth 
special type cdn infrastructure support peer peer systems shed spotlight academic industry 
discuss request routing problem systems subsection 
server location number possible ways locate nearby suitable server internetwork environment summarized gs 
choice server location strategy server location information gathered reaction client requests nearby servers multicast scheme information gathered proactively 
choice support provided routing layer 
support reduce gathering costs practical difficulties implementing widespread router changes consider techniques gather server location information application layer 
compare cost polling routing table gathering information network probes 
reactive vs proactive gathering broadcast multicast typical reactive approaches locate suitable servers 
boggs bog proposed expanding ring broadcast mechanism iteratively enlarges concentric rings broadcasting host 
approaches considered various forms multicast routing 
multicast group joined instances particular type server choose server responds quickly group multicast message 
time client wants locate server providing particular service message multicasted entire group servers approach wastes precious network bandwidth 
contrast proactive scheme agents routers dedicated applications gather network server information sending probe messages candidate servers collect load information dispatched servers maintain server location load database 
clients request service locate proper server providing desired service sending query agents 
way unnecessary message transmission avoided 
routing layer vs application layer partridge pmm proposed anycasting mechanism particularly ip layer attempts deliver request nearby server 
anycasting appealing avoid burdening links repeated requests gather server distance information 
downside ip anycasting assumes servers provide equal service handle server quality differences programming policy constraints routers 
contrast ip anycasting application level location service include server quality selection criterion handful nearby servers selected database 
additional practical advantage application level service implemented routing support albeit higher network cost 
main disadvantage building server location database application level doing requires periodic updating 
routing layer location database constructed incrementally monitoring routing update traffic group join leave requests 
approaches proposed aim enjoy benefits 
wood wcs built application level location service constructs server location database monitoring routing layer traffic 
fei proposed application level anycasting mechanism provide server location service 
system load server changes significantly server pushes changed status agents triggers updating database cut updating operation cost 
polling routing table vs network probing polling routing tables build connectivity graph measurement beacon server retrieving local routing table determining hop path retrieving routing table router reach destination 
extend algorithm discover routes servers iterating servers care retrieve routing table retrieved 
network probing approach measurement servers responsible explore route replica servers probing servers 
client asks measurement servers list nearby replica servers measurement server explores route back client adds information connectivity database 
searches databases servers near client 
request routing request routing schemes proposed far fall categories client multiplexing dns indirection redirection anycasting peer peer routing 
discuss remaining part subsection subsections 
client multiplexing approach client web browser proxy server obtains addresses set physical replica servers chooses send request 
main mechanisms belong category 
partridge pmm specifies single server selected response anycast request servers anycast group equally usable 
dns server service provider returns ip addresses servers holding replica object 
client dns resolver chooses server 
decide resolver may issue probes servers choose response times probes may collect reports clients performance past accesses servers 
approach bhattacharjee beck moore bm 
advantage extra communication added critical path request processing 
shortcomings 
approach relies clients customized dns resolver 
resolver relies client performance reports client browser proxy software modified 
second dns infrastructure relies heavily dns response caching cope load 
replica server sets changed frequently danger resolvers stale replica server sets 
time reducing caching time may incur dns queries frequently just moves stability bottleneck dns infrastructure provided clients adopt approach 
second approach relies java applets perform replica server selection client 
url object points java applet embeds knowledge current replica server set procedure replica server selection 
approach requires changes clients 
previous approach involves extra tcp communication download applet 
third approach proposed bbm propagates information replica server sets headers 
requires changes web servers clients proxy servers case process extra headers 
clients modified implement replica server selection 
dns indirection domain name server implementations allow web site dns server map host domain name set ip addresses choose client query factors query origin load replica servers 
difference dns client multiplexing choosing replica server occurs web site dns infrastructure client dns resolver 
unfortunately dns response caching clients complicates changing replica server sets controlling request distribution replica servers 
time reducing lifetime cached dns responses may shift performance bottleneck dns infrastructure 
general dns system designed append database existing mappings host name ip address rarely changes 
redirection protocols allow web server respond client request special message tells client re submit request server 
mechanism build special web server accepts client requests chooses replica servers redirects clients servers 
commercially cisco distributed director cis web challenger implemented functionality 
advantage level redirection replication managed fine granularity individual web pages mechanisms postulate entire web site granule 
disadvantage mechanism quite heavyweight 
introduce extra message round trip request processing round trip done uses expensive tcp protocol transport layer 
anycasting group member anycast packet sender group member anycast packet illustration ip anycast anycast groups internal external sender popular unpopular anycast group classification edge domain defined pmm anycasting provides stateless best effort delivery anycast packet host preferably host serves anycast address 
anycasting schemes proposed literature far classified classes ip anycasting application level anycasting 
ip anycasting ip anycasting proposed partridge pmm 
service assumes ip address assigned set hosts ip router routing table path host closest router 
different ip routers paths different hosts ip address 
illustrates ip anycasting 
traditional approach routes ip anycast addresses unicast routing protocols design decision ip anycast unscalable 
anycast group topology may hierarchical comply unicast topology routing anycast packets unicast routing protocols requires advertising global anycast address separately 
requirement causes routing tables grow proportionally number global anycast groups entire internet scale 
kw proposed framework scalable global ip anycast gia 
framework scales capturing special characteristics anycast service inter domain routing protocol generates types routes default inexpensive routes consume bandwidth storage space enhanced shortest path routes customized beneficiary domain interests 
shows anycast group classification edge domain 
closest defined routing system measure distance 
routing internal anycast groups gia uses unicast intra domain routing protocol distance vector algorithm rip link state algorithm ospf 
approach stays scalable number internal group controllable domain 
route unpopular anycast group gia uses default route 
default route determined unicast prefix home domain part anycast address consume bandwidth generated need storage space routing tables 
router receives anycast packet addressed unpopular anycast group forwards packet group member home domain 
popular anycast groups gia generates shortest path routes forwards packet address popular anycast group shortest path route 
ip anycast suitable request routing service location limitations part ip address space allocated anycast address 
anycast addresses requires router support 
selection server anycast packet sent entirely network option user selection input 
consistent stateless nature ip destination determined packet basis 
application level anycasting network layer able effectively determine shortest path suited ip anycasting service selects closest server shortest path metric hop count 
hand application layer approach better suited handling variety metrics server throughput 
survey typical systems field call content routing network 
fei observed shortcomings ip anycast proposed framework application level anycasting service 
design service consists set anycast resolvers performs anycast domain names adn ip address mapping 
clients interact anycast resolvers generating anycast query 
resolver processes query replies anycast response 
key feature system presence metric database associated anycast resolver containing performance data replica servers 
performance data selection server group user specified performance criteria 
estimates server performance manageable overhead combining server pushes client probes 
deploying system requires changes servers clients prohibitively costly considering possibly huge number servers clients 
adjie winoto proposed intentional naming system ins designed resource discovery service location system dynamic mobile networks devices computers 
ins applications may services clients services provide functionality data clients request access 
intentional name resolvers form application level overlay network exchange services descriptions construct local cache advertisements route client requests appropriate services 
ins uses simple language attributes values names enable service specified precisely 
addition ins implements late binding mechanism integrates name resolution message routing client server server server content content layer routing enabling clients continue communicating nodes name address mappings change session progress 
ins designed provide global reachability information attribute naming scalable hierarchical namespace provided url 
ins late binding message packet contains name expensive content distribution 
gc designed framework content routing support internet 
replica servers viewed offering alternate routes access content client requests depicted 
network integrated content routing provides support core internet distribute maintain information content reachability 
performed routers extended support naming 
designed name routing protocol performs routing name structure similar bgp 
bgp distance vector routing algorithm path information routing advertisement contains path content routers content server 
internet name resolution protocol developed perform efficient lookup distributed integrated name routing system 
clients desire content initiate content request contacting local content router 
content router maintains set name hop mappings just ip router maps address prefixes hops 
request arrives desired name looked name routing table hop chosen information associated known routes 
content router forwards request content router way request proceeds best content server shown routing information kept name typically just path content routers content server may augmented load information metrics directly measured content router 
request reaches content router adjacent best content server router sends back response message containing address preferred server 
response sent back path content routers 
response appears intermediate content routers select alternate routes retry name lookup 
fashion client requests routed best path desired content 
provides anycast capability content level 
peer peer systems peer peer systems build information retrieval network members relying dedicated infrastructure traditional cdns 
result peer peer systems fault tolerant common cdns 
peer peer systems suitable example com 
cr client cr cr server server server internet name resolution protocol content producers individuals may able access afford common cdns commercial ones 
ian clarke designed freenet distributed adaptive peer peer system enables storage retrieval data maintaining anonymity readers authors 
freenet operates peer peer system nodes request file store retrieve service immediate neighbors location independent naming key 
requests forwarded hop way similar ip routing limited hops live unique random id number avoid loops routing 
node data store allow network access dynamic routing table keys associated node addresses 
file keys generated hash functions 
file random public private key pair serve namespace called signed subspace key ssk keyword signed key ksk generated short descriptive text 
user publishes descriptive string subspace public key keeps private key secret ones add files subspace 
content hash key useful updating splitting files old version file remains temporarily available new version added system 
solutions proposed search keys including insertion indirect files users pointer real files public key compilations users 
file key known user ask node retrieve file 
node check data store routing table forward request neighboring node copy file 
requests propagate steepest ascent hill climbing search backtracking file request times 
similar search performed insert new files 
similar keys located success returned hops live reached collisions 
essentially trend form nodes experts similar keys located node caching brings copies file closer requester 
system starts running storage files replaced 
system achieves security enforcing anonymous requesters senders employing cryptographic protocol add new nodes system 
freenet assign responsibility documents specific servers lookups take form searches cached copies 
allows freenet provide degree anonymity prevents guaranteeing retrieval existing documents providing low bounds retrieval costs 
ion stoica chord protocol designed map key node distributed peer peer network size composition change intermittently 
chord proposed meet challenges faced large scale peer peer network load balance decentralization scalability availability flexible naming 
chord protocol employs successor successor successor identifier circle consisting nodes 
example key located node key node key node 
consistent hashing function acquire bit identifiers node key respectively 
identifiers ordered identifier circle modulo range logn number nodes network keys may assigned nodes successor node technique shown 
consistent hashing designed nodes enter leave network minimal disruption 
proven node responsible keys total number keys 
node maintains routing table entries called finger table 
th entry table node contains identity node succeeds identifier circle successor node looks node holding key searches finger table node id immediately precedes asks node knows id closest repeating process learns nodes ids closer closer eventually node finds node holding logn steps 
chord designed ease additions withdrawals nodes main idea achieving find new predecessor successor nodes identifier circle addition withdrawal nodes network 
multiple nodes join fail stabilizing routine executed chord order remap keys nodes integrity identifier circle maintained 
word chord features simplicity provable correctness provable performance face concurrent node arrivals departures 
chord needs specific mechanism heal partitioned rings security mechanism tackle safety issues malicious buggy set participants may incorrect view chord ring 
anonymity participant taken account chord 
example cdn akamai akamai aka successful commercial cdns hosts popular websites yahoo monster com websites big companies ibm 
july akamai deployed replica servers countries 
replica servers store replication content websites akamai hosts 
achieve network diversity proximity users replica servers sit data centers points presence pops major internet communication carriers 
akamai built dns network 
akamai dns network ensures fast delivery requested content resolving host name url requested content ip address akamai replica server deliver desired content user quickly 
white papers published papers describe conjectures major processes involved operation akamai direct internet traffic akamai server network direct requests suitable akamai replica servers 
tool tags embedded web objects delivery akamai network transforming urls akamai resource locators 
contain number fields aid content delivery process 
format described example 
typical embedded object url www foo com gif transformed arl serial type serial net db www foo com gif serial number identifies virtual bucket content group objects served set akamai replica servers 
akamai domain ensures requests content travel directly user akamai network completely avoiding object origin site 
type field aids interpreting arl 
provider code uniquely identifies akamai customer 
object data guarantee object freshness 
depending type field contains object expiration time string uniquely identifies particular version object md hash value object content 
case object modified object data field changes arl changes 
field absolute url akamai replica servers retrieve object content provider origin site time object requested 
akamai dns system user requests directed akamai network server domain field set akamai net arl 
akamai dns system chooses akamai replica server deliver content user quickly resolve akamai net server name server ip address 
conventional dns name resolution resolution relies server name source address dns query current network condition replica servers status 
akamai dns system implemented level hierarchy dns servers april high level akamai net servers low level akamai net servers 
server responsible directing dns query receives server close requesting client 
servers perform final resolution server name ip address directing client akamai replica server optimally located serve client requests 
akamai continuously monitors network condition status replica servers respond network events matter seconds 
browser request arl server name akamai net example contacts local dns server asking resolve server name 
absence cached response local dns server resolves server name iterative dns queries 
contacts net root server responds list akamai servers 
local dns server contacts servers receives list servers close 
contacts servers returns ip address optimal replica server request 
eventually local dns server returns ip address requesting browser fetches content server 
akamai dns system enables caching dns responses just conventional dns name resolution avoid request incurring delay levels dns queries 
time live ttl dns responses set way balance benefits caching chief goal akamai dns system keeping client server mapping date current network condition replica servers status 
responses obtained root net servers vary network conditions ttl days 
responses returned servers network map recomputed minutes responses ttl minutes 
servers generate name resolution maps updated seconds ttl responses servers set seconds 
iridium fast content location service large scale peerto peer systems related routing protocols services peer peer systems roughly classified categories number nodes performing routing operation 
category relies central node servicing routing requests system 
napster nap aud instances 
obviously centralized structure scale large system error prone 
significant structure system routing structure easily censored 
suspension napster shows defect 
peer peer systems choose small set superpeers supernodes consensus service routing requests system replying central node routing 
kazaa fasttrack kaz edonkey take approach 
gnutella gnu slightly structured network routing requests delivers requests expanding search incurs enormous amount search traffic 
fast content location generally explicit concern systems 
tapestry chord pastry rd constitute peerto peer system completely distributed structure node participates routing procedure 
distribute routing information node 
node maintains information logn nodes request requires logn overlay hops complete 
systems achieve excellent scalability cost large lookup latency 
issue worse practice overlay hop take long time especially physical path source sink hop congested 
improves tapestry issue lookup messages selected supernodes high bandwidth fast access wide area network 
take logn overlay hops finish request 
total number nodes system 
address large lookup latency issue tapestry proposed system iridium constructs routing fabric consisting set supernodes 
system divided multiple partitions consisting supernode set regular nodes 
consistent hashing routing fabric takes constant time find partition stores key requested service request 
routing system iridium scales routing operations conducted distributed manner 
system structure essentially iridium provides distributed computation hash function mapping keys nodes responsible constant time 
uses consistent hashing properties 
high probability hash function balances load 
high probability th node joins leaves network fraction keys moved different location 
consistent hash function assigns node key bit identifier base hash function sha sha 
node identifier chosen hashing node ip address key identifier calculated hashing key 
term key refer original key identifier 
similarly term node refer node identifier hash function 
types nodes iridium supernode regular node 
regular nodes store keys 
keys assigned consistent hashing follows identifiers ordered identifier circle modulo key assigned regular node identifier equal follows identifier space 
regular node called successor node key supernodes store node identifiers assigned consistent hashing 
node assigned supernode identifier equal follows supernode identifier space 
supernode called associated supernode node correspondingly call regular nodes associated supernode bound set denoted 
supernode performs functionality regular nodes 
enhance reliability key stored successor node regular nodes follow key successor node immediately 
regular nodes call key successor node set 
similarly node assigned associated supernode supernodes follow node associated supernode immediately 
name supernodes node associated supernode set 
tunable system parameters 
supposing total number nodes system denote number supernodes average number nodes supernode stores equal 
node looking key randomly selects supernode say associated supernode set send query asking location key supernode checks supernode clockwise closest supernode key identifier space forwards query supernode say supernode looks regular nodes bound set holding randomly chooses say deliver query 
finding desired key result sent back eventually total key lookup involves constant number hops 
example node looks key sends query associated supernode 
supernode sends query supernode identifier circle consisting nodes 
node regular nodes node supernodes 
regular node assigned supernode 
key assigned node key node key node key node 
clockwise closest supernode key identifier space 
supernode query regular node successor node key stores key 
eventually node sends result node back requesting node 
system maintenance node joins node wants join peer peer system needs find associated supernode 
flooding broadcasting request looking supernode topological neighbors 
gets location supernode queries supernode associated supernode set 
registers associated supernode set sending information supernodes including identifier address 
supernode selection number nodes system exceeds certain threshold routing core consisting supernodes overloaded need select new supernodes regular nodes shed workload 
determine supernode bound set choose supernode candidate 
supernode loaded having largest bound set 
select supernode candidate bound set 
account computation resources including memory cpu average time choosing candidate 
time complexity selecting candidate search bound set linearly supernode hold regular nodes 
optimized constant time supernode keeps bound set sorted 
new supernode selected previous associated supernode migrates regular nodes closest successor supernode new supernode newly selected supernode 
operation propagate existence new supernode supernodes 
simplest way broadcasting requires messages supernode birth 
optimized lazy update 
supernode needs lookup keys held certain regular nodes bound set new supernode queries old associated supernode new supernode 
forwarding query new supernode old associated supernode new supernode sends back response including information new supernode requesting supernode information new supernode delivered interested supernodes gradually 
node leaves iridium handles node leaving death supernodes regular nodes different ways 
normally regular node updates identifier address stored associated supernode set explicitly sending message associated supernode set periodically attaching information query messages 
supernode simply cache information constructing bound set 
regular node leaves notifies associated supernode set exit supernodes update bound set 
needs migrate keys stores successor node 
regular node dies associated supernode set detect death timeout corresponding regular node information 
sophisticated handle leaving supernodes information need migrated updated supernode leaves dies compared case regular node leaving 
basically supernode leaves migrate bound set living successor supernode 
tell regular nodes add successor supernode associated supernode set keep size set constant 
avoid possible high instant traffic due operation regular node bound set leaving supernode waits random short period executing operation 
supernode dies nodes notice event right moment 
straightforward approach help living nodes detect death supernode supernode broadcasts identifier address nodes periodically 
obviously incur traffic internet 
reason take lazy update approach help detect death supernode avoid unnecessary message transmission 
approach works follows 
supernode dies living supernodes know death forward requests key held bound set dead supernode dead supernode alive 
requests eventually timeout result living supernodes forwarding requests find supernode update supernode information accordingly 
approach regular nodes bound set dead supernode update associated supernode sets 
send requests dead supernode usual detect death associated supernode timeout 
aware death previous associated supernode add successor supernode associated supernode sets 
approach broadcasting information supernodes avoided need send information supernode nodes interested 
issues reliability regular node dies keys held node lose 
similarly supernode dies lose information bound set supernode 
result information losing query disrupted 
guarantee success queries replicate information needed forwarding queries 
concrete key replicated regular nodes 
queries key equally shared regular nodes holding key 
similarly regular node associated supernodes supernodes probability forward query regular node 
determine values achieving appropriate trade reliability scalability simulation study necessary 
scalability tapestry node participates routing operation iridium routing taken limited set supernodes 
result iridium may scale tapestry 
possible reason space supernode limited 
approximation supposing chosen node information needs bytes bytes ip address identifier supernode needs kb store bound set information supernodes 
amount resource negligible practice 
issue possibly prevent iridium scaling practice amount extra traffic supernodes may incur includes messages routing maintenance system 
answer question need perform extensive simulation study different functions 
hand regular routing load reduced heavily helping scalability 
summary summary iridium designed provide fast content location service large scale peer peer systems 
design shows routing taken set supernodes leveraging consistent hashing lookup done constant time 
need perform extensive simulation experiments study scalability reliability iridium various setups scenarios 
summary increasing internet content distribution caching replication techniques receiving attention 
effective approaches alleviate congestion internet internet responsive 
unique features cdn renders appreciable benefits content providers popular web sites 
report studied core challenging issues involved designing building efficient cdns especially content distribution request routing problems 
scheme fast service location peer peer systems proposed 
nowadays new forms internet content services video demand requires intensive bandwidth predictable data transmission delay emerging 
number content providers turning cdns better service customers growing rapidly 
facts open new issues design architecture cdns support streaming content real time events scalability built security mechanism forth 
research issues undergoing believe successful solutions problems generation cdns fly 
aka akamai technologies distributed infrastructure business real benefits measurable returns 
ar amit aggarwal michael rabinovich 
performance dynamic replication schemes internet hosting service 
technical report hpl labs october 
aud 
www com 
william adjie winoto elliot schwartz hari balakrishnan jeremy lilley 
design implementation intentional naming system 
proceedings th acm symposium operating system principals december 
bar yair bartal 
probabilistic approximation metric space algorithmic applications 
th annual ieee symposium foundations computer science october 
bhattacharjee ammar zegura fei 
application layer anycasting 
proceedings ieee infocom 
bbm baum sturm 
enhancing web infrastructure caching replication 
ieee internet computing pages mar apr 
bm beck terry moore 
internet distributed storage infrastructure project architecture internet content channels 
proceedings rd international www caching workshop manchester uk june 
bog david boggs 
internet broadcasting 
ph thesis available technical report csl xerox palo alto research center october 
cdd cdd content distribution delivery 
www com 
cis cisco systems 
white 
www cisco com warp public dd wp htm 
ian clarke oskar sandberg brandon wiley theodore hong 
freenet distributed anonymous information storage retrieval system 
workshop design issues anonymity unobservability pages 
day cain tomlinson 
model content internetworking 
internet draft march 
edonkey 
www edonkey com 
fei bhattacharjee ellen zegura mostafa ammar 
novel server selection technique improving response time replicated service 
proceedings ieee infocom san francisco california usa march 
gc mark david cheriton 
architecture content routing support internet 
proceedings rd usenix symposium internet technologies systems usits san francisco ca usa march 
gcr gadde jeff chase michael rabinovich 
web caching content distribution view interior 
proceedings th international web caching content delivery workshop lisbon portugal may 
green cain tomlinson thomas 
cdn peering architectural overview 
internet draft november 
gj michael garey david johnson 
computers intractability 
ny ny freeman 
gnu 
www com 
gs james michael schwartz 
locating nearby copies replicated internet servers 
proceedings acm sigcomm pages cambridge ma august 
jjj sugih jamin cheng jin jin danny raz yuval shavitt lixia zhang 
placement internet instrumentation 
proceedings ieee infocom conference pages tel aviv israel march 
jjr sugih jamin cheng jin anthony danny raz yuval shavitt 
mirror placement internet 
proceedings ieee infocom conference anchorage alaska usa april 
kaz kazaa 
www kazaa com 
kd dahlin 
coordinated placement replacement large scale distributed caches 
proceedings ieee workshop internet applications june 
david karger eric lehman tom leighton levine daniel lewin rina panigrahy 
consistent hashing random trees distributed caching protocols relieving hot spots world wide web 
acm symposium theory computing pages may 
kpr plaxton rajaraman 
placement algorithms hierarchical cooperative caching 
proceedings th acm siam soda 
krr jussi james roberts keith ross 
object replication strategies content distribution network 
proceedings sixth international workshop web caching content distribution boston massachusetts june 
krs krishnan danny raz yuval shavitt 
cache location problem 
ieee acm transactions networking 
kw dina john wroclawski 
framework scalable global ip anycast gia 
proceedings acm sigcomm pages stockholm sweden august 
nap napster 
www napster com 
pmm craig partridge trevor walter 
host anycasting service 
ietf rfc november 
lili qiu venkata padmanabhan geoffrey voelker 
placement web server replicas 
proceedings ieee infocom conference anchorage alaska usa april 
rd antony rowstron peter druschel 
pastry scalable decentralized object location routing large scale peer peer systems 
lecture notes computer science 
sylvia ratnasamy paul francis mark handley richard karp scott shenker 
scalable content addressable network 
proceedings acm sigcomm 
rge ramesh govindan deborah estrin 
topology informed internet replica placement 
proceedings sixth international workshop web caching content distribution boston massachusetts june 
sha fips 
secure hash standard 
department commerce nist national technical information service 
stoica morris karger balakrishnan 
chord scalable peer peer lookup service internet applications 
proceedings acm sigcomm san diego ca september 
vijay vazirani 
approximation methods 
springer verlag 
wcs david wood sean coleman michael schwartz 
system discovering network characteristics problems 
proceedings usenix winder conference pages january 

www com 
networks 
www com product chad yoshikawa brent chun paul amin vahdat thomas anderson david culler 
smart clients build scalable services 
proceedings usenix annual technical conference anaheim california usa january 
zhao duan huang joseph kubiatowicz 
landmark routing overlay networks 
zhao kubiatowicz joseph 
tapestry infrastructure fault tolerant wide area location routing 
technical report ucb csd uc berkeley april 

