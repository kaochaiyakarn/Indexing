baldwin eds 
proc 
ppig pages roles beacons play comprehension novice expert programmers martha crosby department information computer sciences university hawaii usa crosby hawaii edu jean scholtz visualization usability group nist usa jean scholtz nist gov susan wiedenbeck college information science technology drexel university usa susan wiedenbeck drexel edu keywords pop ii novice expert pop ii program comprehension pop iii search pop iii procedural object 
research progressively refined methods investigating beacon features surface features computer programs serve keys facilitate program comprehension determine programmers different experience levels understand typical simple program 
study beacons novice programmers different experienced programmers 
novices discriminate little areas program beacons 
experienced programmers tend concentrate important areas program rely beacons 
comprehension computer programs absorbs considerable amount programmer time effort 
programmers developing software need involved process program comprehension order find errors 
instance programmers need understand previously written code 
furthermore maintenance tasks necessitate programmers understand programs may written programmers 
learning new computer languages algorithms programmers comprehension process comprehend example programs 
understanding comprehension process necessary order design tools aid programmers effort 
theory program comprehension discussed brooks involves stereotypical segments code beacons 
beacons related role expressiveness program green petre notation conventions program help convey meaning 
cook shown beacons programming encompass just code fragments 
meaningful procedure variable names aid program comprehension 
possibly comments program structure involved process comprehension 
plausible definition beacon typical indicator programs functionality 
brooks maintained comprehension top process presence beacons allows programmer hypothesis function program 
wiedenbeck showed relationship programmer expertise comprehension programs recognition beacons 
wiedenbeck scholtz examined relationship presence beacon program comprehension 
concept th workshop psychology programming interest group brunel university june www ppig org crosby scholtz wiedenbeck ii beacons typical indicators program function subsequently appeared software engineering literature partial explanation professional programmers facility code recognition comprehension von mayrhauser vans 
beacons studies mentioned obtained expert intuition 
needed way identify beacons information programmers really 
measurements taken elicit programmers comprehension processes discriminate beacon non beacon entities 
recognition beacon structures factor programmer expertise 
basically novice programmers recognise beacon structures advanced programmers 
studies described concern identification beacons programmers different levels expertise 
shneiderman discussed ways study program comprehension 
typical methodologies recognition timing 
studies uses different methods assessing programmers consider indicative function program 
experiments build progressively refined method investigate identification beacon features 
experiment asked programmers rate lines code indicative program function 
second experiment measured response time response correctness programmers asked determine program line code represent 
capture data refined level wished different precise methodology 
third experiment eye tracking precisely determine programmers viewed long fixated type program statement 
eye tracking investigate reading comprehension studies reported literature 
research investigates reading natural language text variety results indicate eye movement data successfully investigate cognitive strategies viewing programs 
eye movements studies way exploring participants focus attention rayner reid ehrlich rayner 
position duration eye fixations show areas subject considers important 
types large eye motions tracking vergence movements saccadic movements 
tracking consists head movements vergence movements allow eyes converge fixation point saccadic movements changes fixation point 
saccadic movements particularly position duration eye fixation variables reading models gould schaffer 
assumptions link eye fixation data comprehension process 
immediacy assumption reader tries interpret piece text soon possible 
second eye mind assumption poses eye stays fixated word long takes process word comprehension involves information previously encountered 
just carpenter devised reading model duration word fixation 
suggest readers able pace rate acquire information matches internal comprehension process 
readers text appropriate reading level average gaze length words 
additional studies carpenter just carpenter support view readers pause words require processing 
subject differences areas reading 
eye movements demonstrate expert novice students view mathematical graphs differently 
experts focus meaningful part graph novices attend equally parts graph 
immediacy eye mind assumptions differ models bouma bouma propose internal buffer 
crosby showed programs read differently prose complex material programs support immediacy eye mind assumptions 
results studies suggest eye tracking indicate portions program considered important facilitate understanding program comprehension 
ppig brunel university www ppig org crosby scholtz wiedenbeck iii experiment programmers university nebraska lincoln university nebraska computer science department participated experiment 
students classified novice programmers intermediate programmers advanced programmers 
novice programmers selected computer science cs students completed just completing second term computer science ii 
intermediate programmers selected cs students junior senior undergraduate level 
addition computer science ii students completed course algorithms 
completed courses required significant programming assembly language programming languages unix programming operating systems 
advanced programming group comprised graduate cs students cs faculty 
members group chosen high experience programming professionally part research 
members group taught programming 
materials consisted listings different programs administered groups programmers university nebraska human computer interaction hci laboratory university nebraska lincoln 
lines code programmers typical binary search program 
lines code augmented mnemonic versions lines shown lines 
programmers packet materials contained lines code binary search program random order 
code augmented mnemonic lines lines code greatest common divisor program 
programmers asked rank point scale particular line code came binary search program 
rating scales ranged participants judged line code received score 
participants judged line code received score 
results line id line contents function var atype integer integer var integer div mid high low div mid high mid low binary search code basis experiment 
anova rating data showed expertise significant 
newman specific comparison test showed intermediate group participants significantly different advanced group participants 
novice programmers interacted groups 
results significant respect lines rated 
newman test specific means showed line significantly different lines 
line indicative binary search algorithm lines indicative algorithm 
recall function header assignment variable non mnemonic version resetting limits 
fact lines rated higher show effect mnemonic names comprehension 
interaction lines levels expertise significant 
results suggest novices discriminate lines intermediate advanced programmers 
greatest difference means groups programmers 
anova showed lines significant respect levels expertise 
lines mean rating advanced subjects lower mean rating intermediates 
lines non mnemonic versions resetting limits search calculating new mid value ppig brunel university www ppig org crosby scholtz wiedenbeck iv search 
possible explanation advanced group lower rating programmers realisation lines code written appear types programs 
calculation midpoint value situation integer mean values required 
advanced programmers having exposed wider variety programs algorithms tend discriminating intermediates 
novice programmers able discriminate different lines novice programmers grouped advanced programmers line intermediate programmers line 
lines program header variable declaration closely agreed indicative case case 
specific comparison analysis student newman test showed significant difference ratings lines intermediate novice programmers 
mean rating advanced programmers line significantly lower rest lines 
binary search program expertise lines rated contributed comprehension measure 
means close groups composition groups varied interaction effect 
unexpectedly novice programmers agreed intermediate programmers advanced programmers 
mean ratings lines statistically significant advanced subjects 
appears experienced programmers unable distinguish lines code indicative appearing certain type program advanced programmers distinctions 
study exploratory results suggest advanced programmers different beacons facilitate program comprehension programmers experience 
experiment designed test possibility 
experiment programmers university nebraska lincoln portland state university participated experiment 
fifteen subjects intermediate programmers fifteen advanced programmers 
intermediate programmers selected cs students junior senior undergraduate level 
advanced programming group comprised graduate cs students cs faculty 
programming background groups participants experiment 
novice programmers experiment appear able reliably recognise beacons 
experiment lines code binary search program subjects computer monitor 
lines code depth search shell sort 
personal computer lines code record reaction time response 
program lines random order sorted response times sorted responses making file participant 
half experiments conducted hci laboratory portland state half run hci laboratory university nebraska lincoln 
participants lines code binary search depth search shell sort 
asked press key indicate program produced line code 
answer response time recorded line code 
results order compare results experiment experiment analysis done data binary search algorithm 
independent variables expertise line number dependent variables response correctness response time 
response classified incorrect programmer answered depth search shell sort binary search 
percentage correct responses significantly different groups programmers 
lines code belonging binary search program intermediates responses correct advanced groups responses correct 
mean reaction time advanced group significantly lower intermediates 

mean reaction time significantly different lines code 
percentage correct responses differed significantly lines 
intermediate programmers able determine ppig brunel university www ppig org crosby scholtz wiedenbeck lines came binary search program advanced programmers significantly slower doing 
correctness measure intermediates differed different lines code 
comparison response correctness lines showed lines containing heading function value return significantly different lines 
corresponds results experiment 
lines highest ratings rating heading line statistically significant 
shows mean response time line expertise 
anova correctness response dependent variable showed expertise statistically significant responses 
case advanced group completed task time 
correct responses incorrect responses 
line factor subjects incorrect responses subjects giving correct response case statistically significant 
interestingly advanced programmers scored identifying having come binary search program experiment advanced programmers gave mean rating line 
possibly programmers experiment easier decision structured choice 
intermediate advanced programmers may familiar binary search program lines beacons 
intermediate advanced programmers displayed ability terms percentage correct responses 
advanced programmers able accomplish significantly time regardless line code 
lines indicative binary search program judged correctness heading return value 
results agree experiment lines highest ratings 
response time sec 
experiment advanced intermediate lines mean response time line experience group 
nineteen programmers randomly selected university hawaii computer science program 
experiment novice experience group low consisted students semester programming experience 
advanced group high consisted cs faculty members students advanced undergraduate graduate classes 
participants years programming experience 
experiment conducted eye tracking laboratory university hawaii 
equipment consisted asl eye movement monitor controlled host computer 
eye ppig brunel university www ppig org crosby scholtz wiedenbeck vi monitoring system digital output samples eye position pupil size times second 
host computer prepare scenes subject experiments scenes subject control sequencing experiment collect data experiment examine analyse data collected experiments 
slightly complex implementation binary search program selected lines matched experiments 
comprehension tests experiment 
pre test asked general questions concept binary search post test asked general specific questions algorithm worked 
addition participant completed fill blanks test presentation algorithm 
participants tested individually 
took pre test 
binary search program 
participants instructed read algorithm comprehension try remember 
participants finished reading algorithm satisfaction algorithm removed participants comprehension posttest test 
dependent variables number fixations fixation times 
number fixations fixation times highly correlated 
reporting analysis number fixations results fixation times highly correlated 
examined total number fixations participants 
clusters fixations partitioned areas concentration classes shows partitions 
partitions contained different amounts types information classified categories comments comparisons complex statements simple statements key words 
interested programmers categories beacons combined categories program converted percent account participants different viewing times 
areas offered different information type knowledge elicited program 
comments indicate program purpose statements comparisons interrelations indispensable detailed comprehension 
comparison areas deceptive 
seemingly easy understand hard recall direction comparison operator 
complex statements provide greatest amount information 
simple assignments statements moderately complex essential comprehension program provide necessary contextual information 
key words predictable provide information considered important area program 
categories related statements experiment experiment 
comments corresponded word binary search included text key words related simple assignments comparisons complex statements 
subdivision algorithm text areas 
ppig brunel university www ppig org crosby scholtz wiedenbeck vii results fixations character kw low exp high exp simple complex percentage fixations areas programmer experience 
experiment program areas viewed differently depending participants experience 
category largest number fixations comments 
largest area 
fixations increase length needed adjust different lengths category address question 
adjusted number fixations dividing number tokens words symbols category 
expected complex statement category beacons 
illustrates complex statements influential category high experience group 
variant binary search experiment unusual 
particular complex boolean assignment left right distinguishes version common implementations 
high experience group general knowledge variations algorithm 
hypothesised complex material attention receive high experience high comprehension groups 
test conjecture analysed number fixations area left right 
results confirmed hypothesis average fixation duration statistically significant experience comprehension 
keywords predictable surprising attract attention 
viewing comparisons yielded significant differences experience groups 
discussion binary search example typical program familiar computer science subjects variations understanding automatic 
recognise similar salient features program 
finding suggests beacons may eye experiment showed intermediate advanced subjects identified meaningful beacons novices 
experiment indicated intermediate advanced programmers recognise lines belonged binary search advanced subjects performed task faster 
experiment advanced programmers complex ppig brunel university www ppig org compare comments crosby scholtz wiedenbeck viii statements beacons novices little distinction different classes program statements 
prior studies suggested experience level key factor processing information programs experiments confirm results 
certainly programmers understand algorithm rely part text facilitate understanding 
studies provided detail programmers really beacons put focus attention 
analysis revealed experienced programmers complex statements fixated longest beacons 
high comprehension participants fixated proportionally longer comparisons 
key words simple statements appear beacons participants understood program 
programmers experienced understand material view information selectively focus complex parts information 
experiments show experienced programmers portions code differ amount information extracted 
research suggests primary types beacons appear programs comment beacons lines code contain mnemonic hint program functionality complex beacons contain key focal line program 
results experiments suggest comment beacons indicative program functionality processed quickly experienced programmers 
complex comparison beacons consume considerably comprehension time indicative program functionality 
aids comprehension address complex comparison type statements 
question intend address research inclusion line comments concerning complex comparison statements affect time comprehend statements 
results research suggest mnemonic names speed comprehension time 
time element comprehension intend address element sequence see order programmers tend examine portions code 
programmers adhere brook method hypothesis hypothesis refinement sequence portions code examined determining factor hypothesis generation 
research summative deals total pattern performance programmers different experience groups 
studies need examine process selecting beacons 
individual differences recognition reaction time eye tracking invaluable finding beacons selected 
research crosby suggests wide variety viewing strategies subjects read programs 
strategies allow users beacons advantage 
studies address question 
area research may implications computer interface designers 
user views screen area complex material algorithm cursory way information absorbed 
information particularly useful wealth information needs simultaneously screen 
applications built detect highlight critical unattended areas 
redundancy additional help alternate readings offered information sufficiently digested 
author supported onr 
darpa 
third author supported national science foundation program information robotics intelligent systems 
bouma visual interference recognition initial final letters words 
vision research bouma 
control eye saccade reading 
vision research ppig brunel university www ppig org crosby scholtz wiedenbeck ix brooks theory comprehension computer programs 
international journal man machine studies 
carpenter 
lexical access error recovery reading model eye fixations 
journal verbal learning verbal behavior 
crosby 
subject differences reading computer algorithms 
designing human computer interfaces knowledge systems salvendy smith eds elsevier science amsterdam 
crosby 
read algorithms 
case study 
ieee computer 

eye movements visual perception 
oxford clarendon 
ehrlich rayner 
contextual effects word perception eye movements reading 
journal verbal learning verbal behavior 
cook 
investigation procedure variable names beacons program comprehension 
tech report 
corvallis oregon state university computer science department 
gould schaffer eye movement pattern scanning numeric displays perceptual motor skills 
green petre 

usability analysis visual programming environments cognitive dimensions framework 
journal visual languages computing just carpenter 
inference processes reading reflections eye fixations 
senders fisher eds eye movements higher psychological functions hillsdale erlbaum 
just carpenter 
theory reading eye fixation comprehension 
psychological review 
rayner 
eye movements reading information processing 
psychological bulletin 
reid 
reading eye movements comprehension processes 
bouma eds processing visible language plenum press new york 
shneiderman 
software psychology 
cambridge ma 

von mayrhauser vans 

identification dynamic comprehension processes large scale maintenance 
ieee transactions software engineering 
von mayrhauser vans 

program comprehension software maintenance evolution 
computer 

eye fixation study time factors comparing experts novices reading interpreting mathematical graphs 
dissertation ohio state university 
wiedenbeck 
beacons computer program comprehension 
international journal man machine studies 
wiedenbeck 

novice expert differences programming skills 
international journal man machine studies 
wiedenbeck scholtz 
beacons knowledge structure program comprehension 
salvendy smith eds designing human computer interfaces knowledge systems 
elsevier amsterdam netherlands 
ppig brunel university www ppig org 
