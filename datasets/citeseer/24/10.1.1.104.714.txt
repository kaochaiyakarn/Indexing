efficient substructure discovery large semi structured data asai kenji abe hiroshi sakamoto arikawa rapid progress network storage technologies huge amount electronic data web pages xml data available intra internet 
electronic data heterogeneous collection ill structured data rigid structures called semi structured data 
increasing demands automatic methods extracting useful information particularly discovering rules patterns large collections semi structured data semi structured data mining 
model semi structured data patterns labeled ordered trees study problem discovering frequent tree patterns minsup support collection semi structured data 
efficient pattern mining algorithm freqt discovering frequent tree patterns large collection labeled ordered trees 
previous algorithms finding tree patterns basically adopted straightforward generate test strategy 
contrast algorithm freqt incremental algorithm simultaneously constructs set frequent patterns occurrences level level 
purpose devise efficient enumeration technique ordered trees generalizing itemset enumeration tree bayardo 
key method notion rightmost expansion technique grow tree attaching new nodes rightmost branch tree 
furthermore show sufficient maintain occurrences department kyushu university japan mail asai kyushu ac jp presto jst japan mail kyushu ac jp 
data tree pattern tree set labels rightmost leaf efficiently implement incremental computation frequency 
combining techniques show algorithm scales linearly total size maximal tree patterns contained input collection slightly depending size longest pattern 
developed pruning technique speeds search 
experiments real world datasets show algorithm runs efficiently real life datasets wide range parameters 
related works small number researches done data mining semistructured data studies semi structured databases :10.1.1.45.8397
related researches study frequent tree discovery :10.1.1.36.2485
wang liu considered mining collections paths ordered trees apriori style technique 
developed straightforward generate test algorithm discovering ordered trees similar setting 
dehaspe developed mining algorithm order models graph structures 
tree special case graph structures apply frequent tree discovery 
difference setting trees unordered matching necessarily case 
enumeration technique powerful drawback generating patterns 
study graph mining :10.1.1.36.2485
studies association rule discovery closely related ones :10.1.1.3.2424
discovery long itemsets bayardo proposed efficient enumeration technique set enumeration tree generating itemsets repetition overcome inefficiency itemset lattice enumeration apriori 
sese morishita combined merge counting technique set enumeration tree cope discovery low frequency thresholds 
cope problems long patterns low frequency common say web mining extend techniques mining ordered trees 
zaki independently proposed efficient algorithms frequent pattern discovery problem ordered trees 
adopted efficient enumeration technique essentially rightmost expansion special string representation ordered trees 
combining enumeration technique depth search vertical decomposition trees efficient algorithm achieves linear scaleup data size 
organization rest organized follows 
section prepare basic notions definitions 
section algorithm solving frequent pattern discovery problem labeled ordered trees techniques rightmost expansion incremental occurrence update 
section run experiments real datasets evaluate proposed mining algorithm 
section conclude 
preliminaries section introduce basic notions definitions semi structured data data mining problems 
labeled ordered trees models semi structured databases patterns xml oem model adopt class labeled ordered trees defined follows :10.1.1.45.8397
set denotes cardinality 
finite alphabet labels correspond attributes semi structured data tags tagged texts 
labeled ordered tree ordered tree short tuple satisfying properties 
tree root say parent child mapping called labeling function assigns label node binary relation represents sibling relation ordered tree children parent iff elder brother definition ordered tree ranked node arbitrary children regardless label 
follows ordered tree refer respectively vt lt clear context 
labeled ordered tree 
size defined number nodes vt length path defined number nodes 
path node say ancestor descendant th parent denoted unique ancestor length path length exactly 
definition parent depth denoted depth defined length path xd root node depth length longest path root leaf fig 
show examples labeled ordered trees say alphabet circle number say upper right corner indicates node symbol appearing circle indicates label 
see nodes trees numbered consecutively preorder 
introduce canonical representation labeled ordered trees follows 
labeled ordered tree size said normal form set nodes vt elements vt numbered preorder traversal instance trees previous example fig 
normal form 
lemma useful 
lemma 
labeled ordered tree nodes 
normal form root rightmost leaf vk matching trees ordered trees alphabet called pattern tree data tree text tree respectively 
furthermore assume order tree normal form nodes 
call tree pattern tree pattern short denote tk sets patterns define set patterns tk 
define notion matching functions follows 
function vt vd nodes nodes called matching function satisfies conditions vt preserves parent relation iff ed 
preserves sibling relation iff 
preserves labels lt ld 
pattern tree matches data tree ort occurs exists matching function total occurrence list otal vd nodes nodes map root occurrence node root vd root maps 
note otal representation mapping assuming normal form 
pattern define occ root matching function set root occurrences frequency support pattern denoted defined fraction number distinct root occurrences total number nodes occ 
positive number pattern frequent 
example consider previous example fig 

matching function say pattern nodes data tree nodes indicated set arrows nodes total root occurrences corresponding otal root respectively 
furthermore root occurrences total occurrences distinct matching functions 
support occ 
otal natural candidate notion occurrences pattern drawback define number interval 
algorithm freqt input set labels data tree minimum support 
output set frequent patterns 
compute set frequent patterns set rmo rightmost occurrences scanning 
fk ck expand trees fk set fk 
pattern ck followings compute fk fk 

return fk 

algorithm discovering frequent ordered tree patterns problem statement state data mining problem called frequent pattern discovery problem generalization frequent itemset discovery problem association rule mining follows 
frequent pattern discovery problem set labels data tree positive number called minimum support minsup short find frequent ordered trees 
frequent pattern discovery problem simple apply real world problems 
efficient problem base algorithms complicated data mining problems frequent pattern discovery problem document count input collections trees optimal pattern discovery problem goal find patterns optimize statistic measure information entropy data set 
assume standard leftmost child representation ordered trees node represented pair pointers child child sibling node label parent pointer parent 
mining algorithms section efficient algorithm solving frequent pattern discovery problem ordered trees scales linearly total size maximal frequent patterns 
fig 
algorithm freqt discovering frequent ordered tree patterns frequency minimum support ina search graph ordered trees 
expansion tree 
rightmost expansion ordered trees data tree basic design algorithm adopted levelwise search strategy search space similar enumeration tree 
pass freqt simply creates set patterns stores occurrences rmo traversing data tree subsequent pass freqt incrementally computes set ck candidate patterns set rightmost occurrence lists trees ck simultaneously sets fk computed stage rightmost expansion rightmost occurrence technique sub procedure expand trees 
repeating process frequent patterns generated algorithm computes frequent patterns rest section describe details 
efficient enumeration ordered trees subsection enumeration technique generating ordered trees normal form duplicates incrementally expanding smaller larger 
algorithm generalization itemset enumeration technique called set enumeration tree 
rightmost expansion 
basic idea enumeration algorithm illustrated fig 

search starting set trees consisting single nodes enumeration algorithm expands ordered tree size attaching new node node rightmost branch tree yield larger tree size integer alphabet 
pattern rml rightmost leaf normal form definition rml rightmost branch unique path starting root rml 
rightmost expansion pattern obtained expanding node rightmost branch attaching new rightmost child precisely defined follows 
nonnegative integer depth rml lbe label 
expansion labeled ordered tree normal form obtained attaching new node node rightmost child label see fig 

rightmost expansion ordered tree expansion integer label say predecessor successor pattern maximal rightmost expansion maximal short successor 
lemma 
ifs pattern rightmost expansion pattern 
furthermore pattern exists unique pattern rightmost expansion proof 
rightmost expansion trivially new node vk attached node rightmost branch node preorder traversal shows ordered tree normal form nodes 
hand suppose obtained pattern attaching node rightmost leaf 
see removing attached leaf way build predecessor choice rml unique predecessor unique 
enumeration graph directed acyclic graph node ordered tree node edge node iff successor single node trees assumed successor empty tree size 
lemma enumeration graph tree root 
enumerate trees traversing breadth depth manner 
updating occurrence lists key algorithm efficiently store information matching pattern data tree recording full information algorithm maintains partial information called rightmost occurrences defined follows 
rightmost occurrences 
integer 
pattern vt vd matching function rightmost occurrence node rmo ofd rightmost leaf maps 
define rmo rmo matching function set rightmost occurrences example consider data tree fig 

pattern tree rightmost occurrences root occurrences easily computed parents give inductive characterization rightmost occurrences 
node positive integer define th head denoted head follows head child algorithm update rmo rmo 
set empty list check null 

element rmo leftmost child 

check skip go step duplicate detection 
sibling st parent set check 
null ld append sibling 
return 

incremental algorithm updating rightmost occurrence list expansion pattern head sibling st parent leftmost oldest node lemma 
pattern occuring data tree vs vd matching function lett expansion vt vd extension holds 
matching function iff satisfies th head right younger siblings head 
ld 
define binary relation head vd head ld vd vd 
set 
set binary relation define set images 
lemma follows lemma 
lemma 
expansion pattern rmo head rmo holds 
algorithm update rmo 
lemma algorithm update rmo fig 
exactly generates elements rmo expansion pattern duplicates rightmost occurrence list rmo 
algorithm computes elements head rmo correctness algorithm immediate lemma 
straightforward implementation lemma scans nodes computed list elements rmo may contain duplicates 
avoid problem introduce duplicate detection technique follows 
holds algorithm checks value check equivalent th parent rmo scanning siblings 
answer skips current element rmo goes element rmo 
algorithm update variable check 
experiments section see duplicate detection technique greatly improves efficiency algorithm freqt 
show correctness algorithm update rmo 
set sequence binary relation said monotonic ai aj ai aj holds pair sequence function assume 
follows rmo means list rightmost occurrences set 
lemma 
algorithm update rmo duplicate detection technique enumerates nodes rightmost occurrence list repetition conditions satisfied elements rmo ordered preorder pattern ii algorithm scans nodes rmo order rmo 
proof 
prove lemma showing sequence rmo nodes preserves monotonicity particular relation vd th preorder relation stage th preorder sequence sequence nodes recursively defined follows sequence nodes ordered preorder cd cd vd vd function returns input vd sequence children node occurs order sibling relation th preorder relation defined follows iff occurs front equals th preorder sequence vd 
definition assertion sequence nodes monotonic equivalent assertion subsequence relation easy prove implies 
suppose rmo monotonic th preorder relation pattern depth rml sequence rmo statement 
algorithm update rmo skips manipulation duplicate occurrences rmo duplicate detection technique 
output rmo algorithm input rmo monotonic expansion depth rml holds time 
shown rmo computed algorithm monotonic pattern depth rml lemma 
algorithm expand trees rmo 

tree followings depth rightmost leaf compute expansion update rmo rmo 
return 
algorithm computing set rightmost expansions rightmost occurrence lists 
analysis algorithm go back computation candidate set ck 
fig 
algorithm expand trees computes set corresponding set rightmost occurrence lists 
set implemented hash table tree list rightmost occurrences show correctness algorithm freqt fig 

theorem 
label set data tree minimum support 
algorithm freqt correctly computes frequent patterns duplicates 
running time algorithm bounded bl maximum size frequent patterns maximum branching factor sum lengths rightmost occurrences lists frequent patterns 
furthermore freqt generates klm patterns computation sum sizes maximal frequent patterns straightforward extension apriori tree patterns may generate exponentially patterns pruning node skip edge skip subsection describe improvements freqt 
node skip 
pruning technique skips useless nodes infrequent labels information 
suppose pattern label lis frequent obviously label appear frequent pattern skip call update rmo rmo pattern infrequent label 
edge skip 
pruning technique removes useless edges infrequent pairs labels information 
similarly node skip observe pair labels infrequent pattern pair appear frequent pattern skip call update rmo rmo pair infrequent label node rml th parent rightmost leaf example consider data tree fig 
size assume minimum support 
value implies frequent pattern requires nodes number minimum root occurrences 
fig 
show patterns generated freqt computation 
algorithm computes set frequent patterns stage traversing data tree records rightmost occurrences rmo 
stage calling expand trees rmo gives candidate set set rml occurrence lists rmo 
fig 
see predecessor attaching new leaf label label rightmost occurrence list root occurrence lists frequent 
hand patterns frequency discarded 
repeating processes stage algorithm terminates stage returns answer 
experimental results section experimental results real life datasets evaluate performance robustness algorithm range datasets parameters 
task considered substructure discovery html xml pages discover set frequent substructures patterns large document tree generated collection web pages gathered internet 
goals experiments running time scales size data trees value minimum thresholds ii performance comparison versions algorithm equipped speed methods described section 
implementation experimental setup implemented prototype system tree mining algorithm freqt described section fig 
java sun jdk jit dom library standard api document trees xml html data 
experiments run pc pentium iii mhz megabytes main memory running linux 
omitted omitted 
enumeration tree patterns data tree fig 
minsup 
pair attached arrow pattern pattern indicates tha expansion white pattern represents frequent pattern shadowed pattern represents infrequent pattern 
pattern number attached represents frequency 
experiments implemented compared algorithms 
follows parameters denote data size number nodes minimum support 
freqt duplicate detection version uses explicit duplicate check duplicate detection technique 
freqt implementation freqt algorithm fig 
duplicate detection technique section 
runtime sec number nodes data tree scalability size data tree 
runtime sec runtime number frequent patterns stage running time number frequent patterns 

running time freqt algorithm freqt node edge skip version freqt node skip edge skip techniques section duplicate detection 
data prepared datasets mb mb collecting web pages search engines web databases 
dataset collection web pages online bibliographic archive dataset mixture web pages major web search engine sites listed :10.1.1.42.3821
datasets consisted hundreds html pages 
collecting pages datasets parsed create dom trees attributevalue pairs dom tree converted set nodes follows 
node attribute value pair attr create node tree consisting root child labeled attr val resp 
attach node trees pairs subtree lexicographic order attribute value pairs 
preprocessing data trees unique tags nodes unique tags 
scalability experiment studied scalability algorithm freqt fig 
showed running time freqt data size data tree increased kb mb html page size 
total number discovered maximal frequent patterns data size number rightmost occurrences scanned linearly increases nodes nodes data size increased 
result running time scales linearly size data tree slightly linear 
probably comes average length sibling lists may citeseer nj nec com number frequent patterns runtime sec slowly increase grows 
freqt duplicate detection freqt freqt node edge skip comparison algorithms minimum support 
comparison algorithms secondly show performance comparison algorithms different update technique rightmost occurrence lists freqt duplicate detection freqt freqt node edge skip 
fig 
shows running time data minimum support decreased 
largest value patterns frequent algorithms coincide 
smaller values freqt times faster slowest algorithm freqt duplicate detection freqt node edge skip times faster freqt instance running times algorithms order sec sec sec respectively 
running time tree statistics stages third experiment studied behavior algorithm freqt detail number frequent patterns quite large 
fig 
shows running time freqt subset mb total number discovered frequent patterns stage proceeds 
association rule mining reported number frequent patterns peak stage decreases 
interesting fig 
running time number frequent patterns peak middle stages 
special optimization strategy may required tree mining 
examples discovered patterns fig 
show examples frequent patterns html format discovered freqt algorithm html pages data nodes minimum support 
inspection data observe algorithm correctly captured repeated substructure bibliographic entries size hit freq href font color text font size hit freq text text cite font color green text font text text br br font color text text text font 
examples discovered frequent patterns html link header entry body entry text corresponds fixed label correct text stand title article text text texts text text title citation color codes stand dark gray light gray respectively 
trees sizes nodes appeared times times nodes data tree 
studied data mining problem semi structured data modeling semi structured data labeled ordered trees 
efficient algorithm finding frequent ordered tree patterns collection semistructured data scales linearly total size maximal patterns 
run experiments real life web data evaluate proposed algorithms 
experiment web data algorithm useful extract regular substructures large collection web pages may applications information extraction web query modification semi structured database languages 
deal realistic applications need expand algorithm deal complex components attributes texts semi structured data 
extension graph structures order models 
studies computational complexity learning tree structured patterns may give insights mining complex structures 
heuristic approaches algorithm cupid computing score represents similarity labeled trees promising 
acknowledgments authors morishita satoru miyano akihiro yamamoto takeda shinohara valuable comments 
express sincere heikki mannila ukkonen direct attention area 
bibliography abiteboul buneman suciu data web morgan kaufmann 
abiteboul quass mchugh widom wiener lorel query language semistructured data intl :10.1.1.45.8397
digital libraries pp 

agrawal srikant fast algorithms mining rules proc 
th vldb pp 

agrawal mannila srikant toivonen verkamo fast discovery association rules advances knowledge discovery data mining chapter aaai press mit press 
aho hopcroft ullman data structures algorithms addison wesley 
efficient learning semi structured data queries proc 
th international conference algorithmic learning theory alt lnai pp 

arikawa efficient discovery optimal word association patterns large text databases new generation computing pp 

shinohara learning unions tree patterns queries theoretical computer science pp 

asai abe sakamoto arikawa efficient substructure discovery large semi structured data department informatics kyushu univ doi technical report doi tr oct 
ftp ftp kyushu ac jp pub tr ps gz bayardo jr efficiently mining long patterns databases proc 
sigmod pp 

dehaspe toivonen king finding frequent substructures chemical compounds proc 
kdd pp 

fukuda morimoto morishita data mining dimensional optimized association rules proc 
sigmod pp 

han pei yin mining frequent patterns candidate generation proc 
sigmod acm pp 

inokuchi washio motoda apriori algorithm mining frequent substructures graph data proc 
pkdd lnai pp 

kushmerick wrapper induction efficiency expressiveness artificial intelligence vol pp :10.1.1.42.3821

madhavan bernstein rahm generic schema matching cupid proc 
th vldb conference pp 

mannila meek global partial orders sequential data proc 
kdd pp 

motoda washio arai graph induction general graph structured data proc 
ds pp 

takahashi ueda discovery frequent tree structured patterns semistructured web documents proc 
pakdd pp 

morishita classification regression proc 
ds lnai pp 

taniguchi sakamoto arikawa mining semi structured data path expressions proc 
th int conf 
discovery science lnai pp 

appear sese morishita proc 
second workshop data mining pp 

japanese markup language xml second edition recommendation october 
www org tr rec xml wang shapiro shasha zhang 
chang automated discovery active motifs multiple rna structures proc 
kdd pp 

wang liu schema discovery semistructured data proc 
kdd pp 

zaki efficiently mining frequent trees forest computer science department rensselaer institute pri tr 
www cs rpi edu zaki ps tr ps gz 
