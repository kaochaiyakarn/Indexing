communications acm dec page collaborative filtering weave information tapestry 
david goldberg david nichols brian oki douglas terry tapestry experimental mail system developed xerox palo alto research center predicated belief information filtering effective humans involved filtering process 
tapestry designed support content filtering collaborative filtering entails people collaborating help perform filtering recording reactions documents read 
reactions called annotations accessed people filters 
tapestry intended handle incoming stream electronic documents serves mail filter repository components indexer document store annotation store little box remailer reader browser 
tapestry client server architecture various components tapestry query language described 
copyright association computing machinery tapestry experimental mail system developed xerox palo alto research center 
motivation tapestry comes increasing electronic mail resulting users huge stream incoming documents 
way handle large volumes mail provide mailing lists enabling users subscribe lists interest 
illustrated set documents interest particular user rarely map neatly existing lists 
better solution user specify filter scans lists selecting interesting documents matter list 
mail systems support filtering document contents 
basic tenet tapestry effective filtering done involving humans filtering process 
addition content filtering tapestry system designed built support collaborative filtering 
collaborative filtering simply means people collaborate help perform filtering recording reactions documents read 
reactions may document particularly interesting particularly uninteresting 
reactions generally called annotations accessed filters 
application annotations support moderated newsgroups 
currently moderated groups single moderator selects subset messages posted moderated group 
annotations group moderators 
see newsgroup moderated say smith simply filter articles smith endorsed annotation 
implicit feedback users user sent reply document utilized filtering process 
example suppose receive interesting documents netnews newsgroup comp unix wizards mail don know write search expression characterizes don time read 
know smith jones brien read comp unix wizards newsgroup material reply interesting documents 
tapestry allows filter documents replied smith jones brien 
collaborative filtering novel involves relationship documents message reply document annotations 
current filtering systems tapestry filters computed simply examining document arrives require potentially repeatedly issuing queries entire database previously received documents 
document arrives human say smith may read document decide interesting 
time replies annotates want filter trigger send original document 
tapestry mail system designed handle incoming stream electronic documents 
electronic mail example stream newswire stories netnews articles 
tapestry mechanism filtering mail repository mail sent past 
tapestry unifies ad hoc queries repository filtering incoming data 
typical scenario tapestry system usage follows 
user decides mail filtering area interest 
find documents topic user issues ad hoc query searching keyword filtering 
returns documents 
user eventually discovers searching documents containing information filtering documents containing filtering received endorsements works better 
having tested search installed query filter new documents satisfying filter delivered user mailbox 
reprinted permission 
additional copying prohibited 
information integrity communications acm dec page collaborative filtering weave information tapestry 
architecture shows flow documents major architectural components tapestry 
components indexer 
reads documents external sources electronic mail netnews newswires adds document store 
indexer responsible parsing documents set indexed fields referenced queries 
document store 
provides long term storage tapestry documents 
maintains indexes stored documents queries document database efficiently executed 
document store append 
annotation store 
provides storage annotations associated documents 
annotation store append 

repeatedly runs batch user provided queries set documents 
documents matching query placed little box query owner 
little box 
queues documents interest particular user 
user little box documents deposited removed user document reader 
remailer 
periodically sends contents user little box user electronic mail 
intended users wish access tapestry current mail reader 

applies personalized classification user documents documents user little box 
function automatically prioritize categorize documents 
reader browser 
provides user interface accessing tapestry services 
includes facilities tasks adding deleting editing filters retrieving new documents displaying documents organizing documents folders supplying annotations running ad hoc queries 
tapestry uses client server model 
styles interaction server envisioned 
preferred mode interaction reader browser provides users easy access full range filtering annotation functions 
users want able tapestry browser access tapestry services conventional mail reader having remailer daemon send documents match user filters user electronic mail 
users send mail documents tapestry server invoke operations adding filters adding annotations running ad hoc queries 
tapestry architecture flexible location client server split 
illustrates possible division 
tapestry architecture follows naturally goal providing collaborative filtering 
example support filters involving relationships documents document store 
order users communicate ratings documents annotations provided 
subsections provide detailed rationale architectural components 
document annotation stores ideally tapestry store save documents forever 
decreasing price disk storage increasingly practical 
explained section filter queries documents seen filter query language immutable 
means document arrives document store modified 
tapestry documents conveniently stored newer technologies write read worm disks 
annotations stored separately documents links connecting annotation associated document 
natural combine documents annotations single store annotations document appended additional fields 
reasons done 
annotations document arrive document appending annotations additional fields violate immutability requirement 
second annotations complex objects annotations simply stored separate records pointers back document annotate 
issue complex annotations arises tapestry query language see subsection entitled annotations 
tapestry users want binary sieve accept reject document 
example user want assign priorities messages giving messages announce meetings higher priority messages announce promotions 
handy able change priorities 
example arrival message containing update meeting reprinted permission 
additional copying prohibited 
information integrity communications acm dec page collaborative filtering weave information tapestry 
announcing new meeting room cause previous announcement lower priority probably deleted may contain details repeated updating message 
support classification documents tapestry provides functions 
fitting architecture completely straightforward 
simplest run user server documents arrive 
potentially serious drawback 
filtering incoming documents computationally intensive task 
imagine tapestry system hundreds users dozens filter queries running document stream tens documents minute 
running directly incoming document stream put critical performance path 
avoid tapestry architecture performs filtering steps 
level filtering performed filter queries binary accept reject document 
accepted documents user placed user little box 
second level filtering done functions run contents little box 
big box global tapestry database little box messages allow copied workstation 
allows user mail reading program browser provide complex functions supported server 
browsers tapestry architecture supports browsers combine functions mail reader traditional document browser 
corresponding role mail reader browser supply new mail functionality 
server supports delivering results filter queries new mail little box leaving client remove results 
browsers periodically run documents little box record document identifiers delete little box 
ad hoc queries way get documents browser 
ad hoc queries server query language filter queries may return documents previously browser 
traditional mail systems mail reader obtains stores copy message 
messages sent large mailing list stored times 
tapestry provides immutable document store tapestry browsers need keep document identifier pointer 
user deletes message browser document exists recovered ad hoc query 
users browser able issue queries involve document fields private fields 
private fields store information document read folders 
browser store private fields document fields making easily available ad hoc queries 
documents appear immutable filter queries private fields mutable private fields referenced ad hoc queries filter queries 
tapestry query language tql key part tapestry filtering documents filters specified queries 
choosing language filter queries written important design decisions 
obvious choice sql widely standard query language relational databases 
adopting tapestry query language additional advantage simplifying implementation tapestry implemented top commercial database supports sql 
rejected sql query language reasons 
serious mismatch relational model tapestry model documents 
set fields document extensible sql schemes fixed set fields 
sql directly support sets document fields set valued 
examples field mail messages newsgroups field netnews articles 
second wanted easy users type ad hoc filter queries thought amount boiler plate sql difficult tapestry language known tql tapestry query language 
subsections describe tql informally examples 
tql easier sql expect users tql directly issue queries browser predefined possibly parameterized queries 
basic examples tql query boolean expression 
selects documents satisfy expression 
set allowable tql expressions similar statements order predicate calculus 
combine atomic formulas boolean operators free variables quantified exists forall 
predicate calculus tql supports sets 
simplest tapestry queries atomic formulas involve relational operators wildcard matching operators 
example reprinted permission 
additional copying prohibited 
information integrity communications acm dec page collaborative filtering weave information tapestry 
subject tapestry meeting selects exactly documents messages subject field subject tapestry meeting 
tql queries fields documents field field name document field 
field type 
common fields types listed table 
correspond fields mail messages newsgroup articles 
exception words set words occurring body document 
complex tql queries built combining atomic formulas boolean operators query sender smith date april subject tapestry 
query selects messages smith sent april subject field included word tapestry 
sql symbol wildcard symbol matches number characters 
major difference tql predicate calculus tql support sets 
simple example tapestry query set valued fields atomic formula joe tom matches documents fields include joe tom possibly 
sets involve operations query joe bill asks field containing joe name containing bill 
table 
common fields types set strings date date sender string cc set strings subject string newsgroups set strings reply set documents words set strings quantified variables needed collaborative queries 
example exists ml ml sender joe ml reply selects documents joe replied 
user filter queries queries user 
example tql query terry baseball words returns messages selected terry baseball query contain word 
annotations design tql far follows naturally decision query language match form electronic documents mail messages netnews articles 
straightforward decide handle annotations 
explained previous subsection entitled document annotation stores annotations stored fields document annotate 
preclude tql treating additional document fields natural representation annotations priority 
notation priority access priority document serving map separate name space annotations 
similarly folders document belongs set valued field folders 
things smoothly complex annotations support collaborative filtering 
consider trying implement voting additional document fields 
vote annotation field vote set votes structure voter value vote 
query messages reprinted permission 
additional copying prohibited 
information integrity communications acm dec page collaborative filtering weave information tapestry 
voted weiser expressed set vote member owner weiser require extending set notation previous section 
way query written tql type vote owner weiser msg introducing annotation object field msg links document kind queries support collaborative filters simpler 
mentioned earlier collaborative queries exists 
preceding query implicit exists written exists type vote owner weiser msg cost introducing separate annotation objects simple queries documents priority slightly complex type priority value msg major design goals tapestry support collaborative filtering felt design separate annotation objects preferable 
filter queries heart tapestry server executes users filter queries 
straightforward method implementing filter query periodically execute say hour 
approach problem returning old messages matched query time ran done suppress messages 
serious problem periodic execution exhibit unpredictable behavior 
consider query select documents sent reply 
document added database matches query 
reply document arrives document replied longer matches query 
particular document arrive database reply arrived document returned system simply ran filter query hour hour see returned system ran hour half hour document match 
raises general question reasonable semantics filter query executes repeatedly 
words guarantees provided users set documents returned filter query 
users need understand implementation system order know results expect result filter query 
semantics independent system operates internally chooses perform various operations executing queries 
users filter query see result data 
implies semantics filter queries time independent 
continuous semantics tapestry gives filter queries continuous semantics defined follows results filter query set data returned query executed instant time 
system guarantees show user document selected query time 
system may implement behavior number ways collecting results presenting user periodically actual set results eventually seen user defined time dependent 
rewriting preceding symbols denote set documents returned execution query database existed time result running time query executed continuous semantics returns equal filter queries qualitatively different time queries 
consider user wants see documents receive replies 
obvious formulation select documents sent reply executed filter query return document user document replies arrives 
undoubtedly user intended 
problem lie continuous semantics user imprecise reprinted permission 
additional copying prohibited 
information integrity communications acm dec page collaborative filtering weave information tapestry 
specification filter query 
finding documents receive reply require waiting forever practice short wait return approximation messages replied quickly 
precise query select documents weeks old sent reply 
illustrates point queries sense executed time basis suitable filter queries repeatedly executed 
implementation continuous semantics realized practical system 
certainly running query instant time possible possible practical 
remainder section gives overview techniques providing continuous semantics effective efficient manner 
earlier gives full details done 
key providing efficient continuous semantics observation query result set nondecreasing time simple technique periodically executing query returning new results yields continuous semantics 
query said monotone 
frequency monotone query executed simply affects size batch results collective set results 
tapestry implements filter queries continuous semantics stages 
query rewritten monotone query returns documents currently matching original query matched time past 
rewritten query tapestry previously evaluated time time tapestry implement continuous semantics returning user stands set difference 
general sets contain documents returned user 
computing inefficient return large sets documents cancel computed 
tapestry second stage monotone query rewritten incremental query sup quickly compute approximation summarize discussion far filter query submitted tapestry rewritten monotone query rewritten incremental sup 
incremental query tapestry 
repeatedly runs incremental query queues selected documents delivery users records time query run waits period time repeats process recorded times parameters incremental queries 
algorithm shown 
explain tapestry allow documents deleted uses append document store 
runs discrete times documents removed different users receive different results filter depending filter ran relative document deletion 
violation continuous semantics 
examples couple example give flavor query transformations 
consider query show messages sent joe expressed tql sender joe query monotone set messages sent joe strictly nondecreasing time 
query simply needs converted incremental form 
recall incremental query sup return messages began matching original times preceding example incremental query considers messages arrived time range sender joe ts ts equal ts field timestamp added tapestry message arrives document store 
complicated example consider query show bug reports weeks old answered 
tql written ts weeks exists reply query monotone may select message message weeks old selecting message reply arrives 
tapestry converts monotone query ts weeks exists reply ts ts weeks reprinted permission 
additional copying prohibited 
information integrity communications acm dec page collaborative filtering weave information tapestry 
monotone query slightly different meaning original query consistent continuous semantics 
specifically says show bug reports answered weeks 
incremental version query considers messages weeks old time ts weeks ts weeks ts weeks equal exists reply ts ts weeks time practice query simplified bit removing ts weeks clause 
current system system embodies architecture previous section architecture currently small number researchers 
subsections describe implementation various components current tapestry system 
database manager tapestry stores documents annotations filter queries commercial relational database management system provided sybase 
information messages stored set relational tables 
single table suffice information fit cleanly relational model 
particular single collection attributes apply messages attributes set recipients newsgroups message set valued 
information common messages set valued stored table entry message 
information varies message message stored auxiliary table 
message may occupy rows table 
similarly set valued attributes stored special table value set occupies single row 
annotations messages extensible set attributes stored tables 
stated earlier principal motivations design tql hide complex database schema tapestry users 
indexer indexing program responsible understanding document format extracting attributes document storing database 
logically separate indexing program exists type document added tapestry system 
example format netnews articles mail messages different articles appearing new york times 
fortunately indexer part tapestry system sensitive format document 
new sources documents added simply writing new indexing programs 
netnews indexer takes header fields message translates tapestry message fields 
addition words body message added set valued tapestry field named words 
words list common english words added word stemmed eliminate inflected forms ran indexed run 
proximity frequency information kept words body 
writing indexing subset netnews comp subtree keeping mb data time 
days worth data messages 
sybase tables indexes occupy additional mb storage 
tql sql translator tql query executed tapestry database converted sql query language sybase database manager 
tapestry system compiles translates tql query equivalent sql query 
ad hoc queries translation done directly query provided tapestry user 
filter queries tql statement converted bounding monotone query described preceding section filter queries translated sql 
sql query filter maintained sybase database stored procedure 
stored procedure efficient ad hoc query query optimization overhead amortized executions query 
information messages annotations distributed tables tapestry database sql equivalent tql queries involves database join operations tables 
sql queries quite complicated 
shows sample tql query resulting sql query 
studies shown query optimizer provided suitable database indexes produce query plans allow complex queries run efficiently 
particular execution cost incremental query produced proportional number messages added database query ran reprinted permission 
additional copying prohibited 
information integrity communications acm dec page collaborative filtering weave information tapestry 
dependent size database 
see continuous queries details 
remailer messages selected user filter queries queued delivery user 
queues constitute users little boxes stored tapestry database 
eventually plan build tapestry clients access queues directly including tapestry browser 
built agent periodically retrieves messages selected user send message user electronic mail 
message modified include extra header field indicates filter selected messages 
input permits user understand message selected provides valuable feedback debugging refining filter query 
mail readers having tapestry server send selected messages users electronically eliminated need build special clients 
important advantage users continue favorite mail readers manage private mail tapestry documents selected filter queries 
believe ideal means interacting tapestry service allowed quickly filtering capabilities 
tapestry clients andrew messages reader developed carnegie mellon university 
modern mail readers provides nice user interface reading messages moving mail folders 
supports flames language allows users write simple form automatically move messages matching predicate rule folder 
particular users write flames rules identify process messages sent tapestry service selected certain filter query 
experiment different type function added prioritizing queries cedar mail reader developed xerox parc called walnut 
users supply set queries applied incoming messages 
flames rule queries look special header field indicating message tapestry service 
query assigns numerical priority messages match query 
message matches queries assigned maximum priorities 
walnut display messages folder various orders including priority order 
allows users quickly see high priority messages ignore low priority ones 
date experience prioritizing queries quite positive 
convinced value having classify organize messages selected filter queries 
name common queries involve names mail senders receivers 
problems names 
person usually multiple electronic names 
second name chance unique highly qualified works goal making easy type ad hoc query 
subsection presents design implemented dealing naming 
second problem easiest solve 
official tql query language names fully qualified 
users normally enter queries browser 
browser offer expand command takes shorthand expands fully qualified 
saves typing serves verify name expanded expected 
problem difficult mapping names people 
suppose simplify problem assuming person referenced query uniquely named internet name form name site name site form part part 
problem names sites aliases mapping 
words person specified unambiguously difficult find documents involving person aliases 
solution involves creating canonical form name fully qualified internet name program converts names canonical form 
field mail originating parc perfect job 
names heuristics 
exists executing query sender weiser expensive perform steps examining sender field document comparing canonical form weiser time incremental query executed 
reprinted permission 
additional copying prohibited 
information integrity communications acm dec page collaborative filtering weave information tapestry 
raw names documents processed arrive tapestry 
names simply replaced canonical forms done imperfect want easy update translations error discovered solution documents arrive tapestry raw name document seen run added table contains raw name canonical name pairs 
query sender weiser parc xerox converted sender names names weiser parc xerox advantage having level indirection easily compensate incorrect heuristics changing entries names table 
summary tapestry experimental system designed receive filter file browse electronic documents arrive continuous stream 
class documents includes email tapestry intended replacement current email systems 
novelty tapestry lies support collaborative filtering 
users encouraged annotate documents annotations filtering 
envision types readers various classes documents 
eager readers read documents class order get immediate access 
casual readers wait eager readers annotate read documents reviews 
experience netnews suggests lack readers willing eager annotators 
tapestry user installs filter uses annotations documents matching filter returned soon document receives specified annotations 
tapestry filters thought running continuously 
primary technical innovation tapestry efficient algorithm implementing filter queries predictable semantics 
works falls categories 
need accumulate user experience tapestry better analyze design works practice 
second tapestry design article missing important pieces 
pieces security integration private mail public information netnews widely accepted strong security scheme 
missing piece browser 
done detailed design browser 
integration different information streams provided tapestry may enable interesting new browser techniques 
meant criticism sql 
tapestry filter queries specialized general sql queries written boiler plate 
unfortunate side effect destroying append semantics way problem 

ansi database language sql 
apr dis 

denning electronic junk 
commun 
acm mar 

gifford baldwin berlin lucassen architecture large scale information systems 
proceedings tenth symposium operating systems principles orcas island wash dec pp 


kent terry orr browsing electronic mail experiences interfacing mail system dbms 
proceedings fourteenth international conference large databases vldb los angeles calif aug pp 


lutz mafia active mail filter agent intelligent document processing support 
multi user interfaces applications gibbs stuart eds north holland pp 


malone turbak cohen intelligent information sharing systems 
commun 
acm may 

unread mail 
want read 
proceedings ifip wg working conference computer document services nottingham england may pp 


pollock rule message filtering system 
acm trans 

inf 
syst 
july 
reprinted permission 
additional copying prohibited 
information integrity communications acm dec page collaborative filtering weave information tapestry 

rosenberg borenstein overview andrew message system 
proceedings sigcomm workshop frontiers computer communications technology stowe vt aug pp 


smith unix connection 
byte may 

sybase 
transact sql user guide 
sybase oct 

terry steps better mail system 
message handling systems application layer communication protocols eds north holland pp 


terry goldberg nichols oki continuous queries append databases proceedings acm symposium management data san diego june pp 

cr categories subject descriptors information storage retrieval information search retrieval query formulation retrieval models information storage retrieval communications applications electronic mail general terms design documentation additional key words phrases information filtering tapestry reprinted permission 
additional copying prohibited 
information integrity 
