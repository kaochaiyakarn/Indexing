electronic notes theoretical computer science url www elsevier nl locate entcs volume html pages cumulative computing chen department mathematics computer science university leicester leicester le rh uk concept resource cumulation model various forms computation 
space called cumulator simply represented tuple consisting founded partial order monoid volume function 
volume function introduced simplify reasoning limit points topological properties 
specification command set 
typical phenomena concurrency reactiveness safety liveness fairness real time branching time naturally arise model 
order support programming theory introduce specification language incorporates sequentiality nondeterminism simple parallelism negation general recursions 
new fixpoint technique model general recursions 
language applied case study csp special model cumulative computing combination resource alphabet termination trace refusal 
laws cumulative computing valid csp generalization csp timed csp achieved simply combining real time 
loops bodies may take zero time modeled satisfactorily 
aspects computing modeled cumulation resources 
example bubble sorting algorithm takes steps terminate cost resource consumed algorithm 
real time computing time kind resource process consumes non negative amount time 
computation may produce resources 
example reactive process generates increasingly longer sequence intermediate states called trace 
think resources generally 
sequential program successfully terminates steps program result terminates steps 
nonterminating program email yc mcs le ac uk published elsevier science chen different terminating program 
treat termination resource nonterminating program consumes infinite resource termination terminating program consumes zero resource 
resource cumulation measured 
example length measure trace reactive process 
cumulation said infinite measure infinite 
infinite cumulation conceptual abstraction approximation resource exhaustion 
set possible resource forms cumulator 
specification statement observables computation alternatively set 
observable cumulative related resource 
observable aspects computation cumulative 
example temperature physical system resource state change time 
observable cumulative depends nature level abstraction 
example number instructions executed cpu indicates cost program corresponds cumulator 
intend model process debugging execution reversed number instructions denotes point execution 
mean debugging process consumes resources back tracking takes time typical cumulative resource 
concept resource cumulation model various forms computation 
simple specification language called cumulative computing introduced 
primitive commands constant specifications program compositions functions specifications 
notion resources new computer science 
example resource place petri net represents local state 
operating systems availability resources represented semaphores 
aspects resources static resource ownership studied logic 
focus cumulation dynamics resources 
sense approach closer studies dynamic behaviours real time reactive processes 
typical computational models intend study 
formalism resembles domain theory aspects volume function new 
introduced simplify reasoning limit points topological properties 
communicating sequential processes csp language incorporates reactiveness sequentiality deadlocks livelocks parallelism general recursions 
failures divergences model popular semantic model csp 
hoare model predicative semantics number special variables denote observation trace termination waiting refusal set events 
variables fact related resources typed 
timed csp generalization untimed csp 
cumulative computing obtain timed csp simply combining untimed csp real chen time 
example cumulator termination replaced cumulator real time 
section notion cumulator formalized cumulator constructors introduced 
section specification commands algebraic laws studied 
techniques applied case studies csp timed csp section 
resource cumulator formalized tuple 
definition tuple cumulator founded partial order closed non empty glb ii chop operation monotonic associative exists iii monoid satisfies iv volume function monotonic strict 
note chop operation may partial function case correspondence partial order hold 
partial order monoid studied mathematics widely applied computer science 
unusual part definition volume function 
volume function measures amount resource cumulation 
additional information reason dynamics resource cumulation 
example resource exhausted volume reaches infinity 
example comparison speeds different synchronize reactive process running clock simply require volume length process equals time shown clock 
example cumulator id represents relative cumulation real time max id represents absolute cumulation real time 
ii cumulator clock id integer clock 
iii cumulator trace represents trace reactive process set sequences including infinite ones events order holds iff prefix denotes concatenation sequences 
infinite sequence denotes length si denotes th element sequence 
restriction trace set trace including elements merge set traces interleavings traces chen iv cumulator string max represents strings finite sequence characters alphabet holds iff lexical order 
max identifies greater string lexical order 
denotes length string length empty string 
example jeff chen sanders 
cumulator optimization min represents optimization process 
assume 
variable denote argument function 

vi cumulator termin true false true represents termination nontermination 
denote termination resource consumption false denote nontermination resource exhaustion 
true false 
vii cumulator set card represents power set set assume cardinality card finite set number elements 
infinite set card 
cumulator set represents power set set subsets ordered set containment concatenation set intersection volume number elements set card 
cumulator normal infinite cumulation extended implies normal 
composite constructed simple ones 

definition cartesian product cartesian product defined max example cartesian product cumulator clock clock pair independent clocks run freely speeds 
definition restriction restricted cumulator cumulator 
assume example restricted cumulator clock clock represents pair clocks runs faster second 
finitely restricted cumulator cumulator restricted set finite 
chen definition finite restriction finite restriction cumulator defined fin 
example integer counter finitely restricted clock counter fin clock 
ii semaphore protected non negative integer variable accessible operations wait signal initialization 
number wait operations executed bounded initial value plus number signal operations executed 
semaphore corresponds restricted cumulator counter counter 
counter second counter count numbers executed wait signal operations respectively denotes initial value semaphore 
kinds fairness literature 
require fair distribution resources competing consumers resource kept expense resource exhaustion 
definition fair product fair product defined 
example fair product clock clock pair clocks running fairly 
stops finite steps 
definition synchronous product synchronous product defined example synchronous product clock clock pair synchronized clocks running speed 
cumulation resource may priority cumulation resource 
definition priority product priority product defined max denotes 
example cumulator surname firstname represents name list names primarily ordered surnames names 
assume surname firstname string 
example chen sanders jeff order combined cumulator 
chen applications resources bounded 
example system may fail terminate timeout 
definition overflow overflow cumulator set limit points defined 
example overflow cumulator represents realtime process timeout limit 
ii overflow cumulator optimization represents optimization process accuracy criterion 
cumulation resource may depend availability resource 
definition control product control product defined max 
example control product optimization represents real time optimization process terminated timeout limit reached 
specification cumulative computing normal cumulator 
specification called command cumulative computing subset 
table lists basic imperative commands 
chen chaos magic termination finite nontermination infinite ii skip zero cumulation sequential composition nondeterministic choice set union parallel composition set intersection negation set complement partition recursion partitioned fixpoint commands cumulative computing form boolean complete lattice set containment refinement order 
top bottom lub glb complement respectively 
allow universal lub universal closed complete lattice 
termination nontermination complements 
skip ii singleton set zero cumulation 
sequential composition commands pointwise concatenation 
concatenation operator associative sequential composition 
skip ii unit sequential composition 
sequential interactions extreme commands shown table left top 
nondeterministic choice corresponds set union 
simplest form chen parallelism corresponds set intersection exhibits common behaviours agreed commands 
discuss advanced forms parallel compositions section 
nondeterministic choice parallel composition idempotent commutative distributive 
sequential composition distributes nondeterministic choice parallel composition 
negation useful specifying assumptions 
satisfies de morgan laws laws complement boolean complete lattice 
important composition partition combines terminating nonterminating partitions satisfy simple powerful laws define recursions 
law law general recursion normally written equation called recursive argument called recursion 
fixpoint recursion denoted short 
example cumulator trace recursion specifies process generates infinite sequence modeling general recursions subtle 
unbounded nondeterminism allowed recursion guarantee unique fixpoint 
fixpoints determine fixpoint consistent programmer intuition time convenient semantic studies 
tarski fixpoint theorem standard technique determine fixpoint monotonic function complete lattice founded partial order function known fixpoint 
commands cumulative computing ordered various founded partial orders 
fixpoint regard refinement order weakest chaotic fixpoint denoted 
fixpoint regard reverse refinement order strongest fixpoint 
may orders determine fixpoints 
various orders proposed past 
applicable circumstances universally applicable 
founded partial order 
note just preorder want uniquely pinpoint fixpoints tarski theorem 
calculation tarski fixpoint starts bottom order 
corresponding function empty chen loop immediately reaches fixpoint 
empty loop terminates semantics contain terminating cumulation example trace semantics fixpoint chaos undesirable inequality right hand side allows empty trace left hand side 
inequality suggests behaviour nonterminating process altered followed process generates event 
counterintuitive interpretation result incorrect semantic assumption empty loop 
conclude 
hand empty loop executable program generates outputs 
semantics empty 
summary required order satisfy founded partial order bottom order program compositions monotonic 
unfortunately proved order exist 
new technique called partitioned fixpoint theorem basic property 
theorem monotonic function distributive command fixpoint example strongest fixpoint recursion partitioned fixpoint calculated follows 
empty loop determined special case ii ordinal 
useful specification commands derived basic ones 
ii zero repetition repetition times infinite repetition general repetition rely guarantee specification temporal operator possibility temporal operator repetition repeats command times sequentially 
zero chen repetition skip 
infinite repetition represents nonterminating loop 
note equals fixpoint satisfies general repetition nondeterministic choice time repetitions subset 
general repetitions monotonic regard refinement order 
conventions denote special repetitions assume 
pointwise sum sets defined pointwise product defined 
sequential composition nondeterministic choice parallel composition general repetition operators merged 
law partitions reason repetition terminating nonterminating behaviors separate 
laws essential properties repetitions 
law ii ii rely guarantee specification general form logical implication 
computation satisfies rely guarantee condition iff satisfied guaranteed 
corresponds rely guarantee specifications tla unity satisfies laws law iff temporal operator specifies liveness property computation eventually behaves command temporal operator specifies safety property computation behaves command standard logical axioms reflexivity idempotence algebraic laws respectively 
law commands support rely guarantee style reasoning emphasis imperative parallel programming 
case study csp timed csp section try model csp processes special commands cumulative computing 
basic csp language consider syntax chen skip pa skip nonterminating process represents deadlock 
generates empty trace events refuses events alphabet 
process skip terminates successfully generates empty trace events 
command pa denotes alphabetical restriction process requires process generate traces events alphabet satisfy restriction command pa magic indicates occurrence inconsistency 
sequential composition processes 
process skip performs single event termination waits event occur 
process equivalent sequential composition skip event hiding reduces alphabet events observable 
denotes external choice processes 
nondeterministic choice disjunction 
fair interleaving composition terminates terminate 
trace composition interleaving traces processes agree set refused events 
parallel composition terminates processes terminate 
trace alphabet trace 
composition refuses event refused failures divergences semantics popular semantics csp 
model csp commands cumulative computing identify resources involved represent appropriate 
set events consider 
finite set observable events called alphabet process formalized cumulator alpha fin set chop operator set union 
allows expand alphabet process 
example alphabet sequential composition processes union alphabets 
process carries information alphabet parallel composition longer needs alphabets parameters 
helps clarify difference command skip alphabetical restriction alphabet nondeterministically arbitrary deterministic set 
failures divergences model allows finite traces represented restricted cumulator trace fin trace 
trace csp process downwards closed 
trace prefix possible trace process 
reflects assumption event occurs waits indefinitely 
set events refused waiting process called refusal cumulator refusal set 
refusal process downwards closed sense refusal subset refusal 
cumulation trace chen priority cumulation refusal 
represented priority product trace refusal 
termination resource cumulator termin 
nonterminating process consumes infinite resource termin 
process terminates example due deadlock trace refusal kept unchanged 
achieved control product termin trace refusal 
sequential composition processes may refuse events refused process process terminate example due deadlock cumulation trace refusal blocked definition control product composition refuses events refused process process terminates second process performed new event priority product forces composition refuse events refused second process process terminates second started waits indefinitely performing events composition refuses events refused second process 
note csp terminating process ready accept new event start process refusal arbitrary 
note refusal second process downwards closed 
means case priority product requires composition refuse events commonly refused processes events events refused second process 
cumulator csp denoted variable combination alphabet termination trace refusal denoted variables alf ok tr ref respectively 
process perform events allowed alphabet satisfy tr alf tr 
refusal set subset alphabet ref alf 
composite cumulator csp obtained csp alpha termin trace refusal tr alf tr ref alf 
csp process set csp 
convenience may represent set predicate variable type tuple alternatively predicate alf ok tr ref variables alf ok tr ref definitions sequential composition recursion csp cumulative computing 
commands defined table cf 

chen skip ok tr ref alf ok tr ref alf skip tr ref alf ok tr ref alf skip pa alf alf alf ok ok tr tr alf ref ref alf ok tr alf alf alf ok ok ok tr tr tr ref ref ref alf alf alf ok ok ok tr alf tr tr alf tr ref ref ref semantic model simple interesting differences failures divergences semantics 
example alphabet longer separate parameter variable type cumulator 
divergences represented nontermination chaos 
infeasible specifications allowed 
formal program derivation refinement order supported 
significant difference lies modeling recursion 
partitioned fixpoint weakest fixpoint 
number generalizations csp possible 
example original csp allows finite sequences finite nondeterminism 
restrictions removed cumulator trace directly 
note cumulator allowing infinite traces satisfy additional restriction ok tr consistency trace termination 
partitions easily define reason infinite chen traces general model cumulative computing 
timed csp non trivial generalization untimed csp 
termination absolute time termination represented 
cumulator termin replaced cumulator absolute time 
untimed csp failure pair trace refusal 
process refuses perform events refusal performing trace events 
timed failures model timed failure pair timed trace timed refusal 
process may perform trace events refusing events refusal set 
model timed csp need replace trace refusal timed trace timed refusal respectively 
time domain 
timed trace finite trace time stamped events non decreasing time points fin trace xi xi refusal token cartesian product finite time half open interval set events 
events token refused continuously interval token 
timed refusal finite set refusal tokens fin set cumulator timed csp combination alphabet termination timed trace timed refusal alpha ttr alf ttr alf alf alphabet denotes absolute time termination ttr timed trace timed refusal 
commands timed csp cumulative specifications 
example command wait delayed form skip 
ready terminate successfully specified time 
sequential composition recursion cumulative computing 
alphabetical restriction pa untimed csp 
convenience convention alf chen skip ttr ttr wait ttr skip ttr skip ttr alf alf ttr ttr ttr alf alf alf max ttr ttr ttr alf alf alf max ttr alf ttr ttr alf ttr empty loop body may take zero time caused subtle problem timed csp 
original presentation timed csp semantics problem circumvented requiring loop body constant delay 
models assume delay guarantee valid semantics recursion requires simple syntactic check avoid empty loops 
certainly satisfactory semantic point view 
fortunately solved problem technique partitioned fixpoint 
solution coincides traditional model loop guarded body loop constant delay 
recursion timed csp valid semantics chen cumulation command 
law reason infinite processes 
example recursion skip command nontermination 
cumulation simply represented tuple 
volume function aimed simplify specifications 
transforms potentially complex domain range real numbers 
applications range real numbers rich reasoning limit points continuity density topological properties 
particularly focus common features computational models importantly study typical phenomena concurrency reactiveness safety liveness fairness real time branching time naturally arise simple semantic model may contribute programming theory 
apply theory specific computational model need identify resources involved 
resource modeled cumulator 
finding right cumulator normally difficult 
various examples provided 
experience required combine appropriate constructors 
subtly different constructors introduced 
differences reflect essential distinctions computational models 
specification simply predicate cumulator set 
cumulator discrete finite formalism complete sense equality specifications recursions established just laws predicate calculus 
recursions manual calculation required 
denotational semantics blamed scaling real programming languages 
example domain theoretic semantics language occam bsp complicated provide little insight reasoning 
model cumulative computing proposed provide higher level concepts formalism fill gap low level domain construction real programming models 
case study csp timed csp posed substantial challenge 
failures divergences model includes alphabet events information termination trace events refusal set events 
links resource cumulation obvious 
particular priority product relation trace refusal subtle control product protects trace refusal deadlock 
composite cumulator csp determined csp special model cumulative computing laws inherited 
importantly generalization csp timed csp simply replacement individual 
minimizes effort linking combining computational models 
chen arose thesis 
author grateful supervisor sanders various discussions comments suggestions 
author gratefully acknowledge wide ranging comments anonymous referees 
chandy misra parallel program design foundation addison wesley 
chen formal methods global synchrony ph thesis oxford university computing laboratory 
chen fixpoint theory non monotonic parallelism th annual conference european association computer science logic csl lncs pp 
full version appear tcs 
chen sanders logic global synchrony th international conference concurrency theory lncs pp 

davies schneider brief history timed csp theoretical computer science pp 

dijkstra cooperating sequential processes university eindhoven netherlands 
francez fairness springer verlag 
girard linear logic theoretical computer science pp 

hoare communicating sequential processes prentice hall 
hoare unifying theories programming prentice hall 
lamport temporal logic actions acm programming languages systems pp 

mislove roscoe schneider fixed points completeness theoretical computer science pp 

hearn resource interpretations bunched implications calculus 
girard editor th conference typed lambda calculi applications lncs pp 

peterson petri net theory modelling systems prentice hall 
reed roscoe timed model communicating sequential processes theoretical computer science pp 

chen roscoe theory practice concurrency prentice hall 
tarski lattice theoretical fixpoint theorem applications pacific journal mathematics pp 

valiant bridging model parallel computation communications acm pp 


