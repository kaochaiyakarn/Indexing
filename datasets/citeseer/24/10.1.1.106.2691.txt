finding similar files large file system udi manber tr october department computer science appear winter usenix technical conference finding similar files large file system udi manber department computer science university arizona tucson az udi cs arizona edu tool called sif finding similar files large file system 
files considered similar significant number common pieces different 
example file may contained possibly changes file file may reorganization file 
run ning time finding groups similar files little similarity order mb gb hour 
amount similarity customized parameters determined user post processing stage fast 
sif quickly identify similar files query file preprocessed index 
application sif file management information collecting remove duplicates program reuse file synchronization data compression plagiarism detection 

goal identify files came source contain parts came source 
say files similar contain significant number common substrings small 
find common substrings rule chance requiring detect similarity significant parts files different 
files need similar size file may contained possibly changes 
user able indicate amount similarity sought type similarity files different sizes may ruled 
similar files may different versions program different programs containing similar procedure different drafts article supported part nsf presidential young investigator award dcr matching funds nsf ccr ccr advanced research projects agency contract number dabt 
part done author visiting university washington 
information contained necessarily reflect position policy government sponsors research 
official endorsement inferred 
problem computing similarity files studied extensively pro grams unix diff developed solve 
diff pairwise comparisons say files require comparisons months cpu time assuming second comparison 
order magnitude improvement comparison time approach slow 
new approach problem call approximate finger prints 
approximate fingerprints provide compact representation file high probability fingerprints similar files similar necessarily equal fingerprints non similar files different 
sif works different modes 
mode finds groups similar files large file system gives rough indication similarity 
running time essentially linear total size files sif large file systems 
second mode compares file preprocessed approximate index files determines quickly seconds files mb files similar file 
cases similarity detected similar portions constitute little size smaller file 
foresee applications sif 
obvious help file management 
tested file systems groups similar files different kinds 
common ones dif ferent versions articles programs including temporary files permanent generated owner file system obtained network case harder discover contain similar information 
information gave interesting view file system similarity seemingly unrelated directories obtained oth 
system administrators find uses sif saving space determining version program stored detecting unauthorized copying 
plan sif developing general internet resource discovery tools 
identifying similar files abound internet ftp space improve searching facilities keeping search giving users browse 
sif part global compression scheme group similar files compressed 
important application file synchronization users keep files machines home portable 
sif professors detect cheating homework assignments relatively easy beat wants put effort publishers detect plagiarism politicians detect copies essentially form letter receive 
notion similarity completely syntactic 
effort understand contents files 
files containing similar information different words considered similar 
approach different approach taken information retrieval literature applied discover semantic similarities 
sense extends approximate string matching see example agrep wm wm matching strings large texts match parts large texts parts large texts large scale 
major differ ence solve version problem 
different approach identifying similarity source code taken baker ba defined source codes similar obtained changing parameter names 
baker called similarity checking parameterized patern matching algorithms identify similar source sort linear time routine required expect dominate running time compare gb files 
codes 
differences codes allowed 
interesting combine approaches 

approximate fingerprints idea computing checksums detect equal files contexts 
addition duplicate detection dialog searcher dream come true mi 
unix sum program outputs bit checksum approximate size file 
information commonly ensure files received untouched 
similar notion fingerprinting file suggested rabin ra way protect file unauthorized modifications 
idea essentially function maps size string number reasonably random way hashing secret key 
change file produce different fingerprint high probability 
rabin suggested bit numbers lead extremely low probabilities false positives 
designed special function provable security properties 
fingerprints checksums exact equality testing 
goal identify similar files 
want able detect files similar similarity covers little con tent 
course user able indicate similarity sought 
basic idea fingerprints small parts file fingerprints just 
fixed parts file middle insertion deletion file parts completely different 
need able synchronize equal parts different files knowing apriori files parts involved 
techniques effective natural language texts source codes types texts appear practice 
achieve kind synchronization described call anchors 
anchor simply string characters fixed set anchors 
idea achieve synchronization extracting text strings start anchors 
files contain identical piece piece con tains anchor string anchor identical files 
example suppose string anchor 
search file occurrences 
may find word character appears 
scan text fixed number characters say starting compute check sum characters 
call checksum fingerprint 
fingerprint generated files contain characters matter located 
course may appear file may appear places modified case common fingerprints 
trick anchors choose span files reasonably uniform fashion 
devised different ways anchors 
analyzing text different files selecting fixed set representative strings quite common common 
string example 
set anchors scan files want compare search occurrences anchors 
fortunately reasonably quickly multiple pattern matching algorithm part agrep wm 
elaborate method anchor selection second method simpler 
second method computes fingerprints essentially possible substrings certain length chooses subset fingerprints values 
equal substrings generate fingerprints matter text synchronization need 
note simply divide text groups bytes fingerprints single insertion file shift cause groups fingerprints different 
need consider byte substrings including overlaps 
efficient method com pute fingerprints 
denote text string 
tn 
fingerprint byte substring 
mod constants 
best way evaluate polynomial coefficients rule 


mod want compute need add coefficient remove mod compute table possible values mod byte values 
computing fingerprints proportional number characters size fingerprint 
deciding fingerprints select done ways simplest bits equal 
approximately fingerprint characters selected 
prime number 
selected fingerprints significant bits equal values shifted storing save space 
number files large may need larger fingerprints select minimize number equal fingerprints chance 
second method easier anchors sense universal 
selected truly random 
relieves user task adjusting anchors text 
method anchors optimized wall street journal articles may medical articles computer programs 
anchors language may language 
hand users may want ability fine tune anchors 
example hashing chance case string blanks selected 
corresponding fingerprint may appear times file hardly representative file 
holds non representative strings 
encountered problem string underline symbols turned selected 
change hash function changing little control results 
precaution take bidding overlaps fingerprints 
words fingerprint identified text shifted 
way example underline symbols form fingerprint text contains underline symbols generate duplicate fingerprints 
methods susceptible bad fingerprints strings representative 
worst example encountered fingerprints contained headers postscript files 
headers large similar ubiquitous unrelated postscript files especially small ones look similar 
best solution case identify postscript file file opened disregard headers 
discuss handling special files section 
methods perfect 
having spurious fingerprints major problem long representative fingerprints 
typically probability string bytes appearing unrelated files quite low 
require shared fingerprints quite assured filtering noise 
sufficient number fingerprints common files evidence files similar way 

finding similar files file mode file call query file compared large set files collection fingerprints denote fingers maintained large file 
fingerprint associate file came 
maintaining names files associating fingerprint number corresponding file 
thing generate set query fingers fingerprints query file 
look fingers compare fingerprints query fingers 
searching set basic data structure problems ways handle common techniques hashing tree structures 
case sort sets intersect 
simple solution multi pattern matching just effective 
store fingerprints fingers obtained providing structure putting fingerprint file number line 
agrep search file fingers query fingers set patterns 
output search list common fingerprints query fingers fingers 
long set fingers megabytes search effective 
plan provide options large indexes 
list files containing fingerprints common query file output percentage common fingerprints default 
fingerprint percentage number gives rough estimate similarity files 
precisely gives indication query file contained file 
interesting note ratio greater 
number common fingerprints fingers query fingers higher total number fingerprints query fingers 
reason fingerprints may appear counted 
provide bit checksums files allow exact comparisons 
compute checksums fingerprints store file sizes bytes extra safety infor mation output list files 
compute checksum query file determine files exactly equal 
process normally takes seconds 

comparing comparing files files complicated 
turns providing way view output major difficulties 
output set sets hypergraph similarity relation ships elements 
hypergraphs hard view see harel ha 
discuss approach extension paradigm quite intuitive view 
experimented complicated approaches mention briefly 
input problem directory directories traverse recursively checking files threshold number indicating similar want files 
stage identical preprocessing described previous section 
files scanned fingerprints recorded fingerprint file fingers names checksums sizes files recorded file 
useful stage separate files types text binary compressed fact happened time tested sif 
query file edited version call papers matched similarity file happened contain unintentionally slightly different versions call papers saved different times mail messages file 
course kind information useful 
program essence hs files different types compared 
current implementation types text files non text files 
fingers sort fingerprints collate fingerprint associated file list file numbers sharing 
value fingerprint important discarded 
example shown 
removing fingerprints appear file reduces size fingers significantly file system factor easier 
list sets sort lexicographically sets appear meaning files share fingerprint replace copies copy counter 
shows output step denote sorted fingers 
sets large counters sets share significant number fingerprints definitely part output exactly typical partial output sets file numbers share common fingerprints 
lines file numbers share common fingerprints sorting collating 
number bold counter number fingerprints shared group file numbers 
organize output turns difficult problem 
dealing sets sets result complicated scenarios possible 
similarity relation defined transitive 
possible file similar file similar file similarity 
similar similar similar share common fingerprints recall allow similarity correspond little files 
share fingerprints common significant share fingerprints share fingerprints share fingerprints 
user really want see combinations 
version sif file file appears sorted fingers considered separately 
sets lines containing file collected 
done sets constructed associating corresponding set numbers file 
denote sets counters file appears sum corresponding computed 
sum percentage total number fingerprints file threshold file considered similar file 
output consists similar files file similarity file size file 
easy point skip files size differ substantially file user wants see files fall rules specified user example files suffix may considered similar 
way reduce size output losing significant information eliminate duplicate sets 
example files similar list files appear times 
similarity percentages may different instance computed percentages differences usually minor 
reduce output set files output 
example partial output shown 
groups files similar 
minimum similarity udi xyz abc foo udi bar udi uuu xxx foobar indicates file compared 
number percentage similarity file 
numbers indicate file sizes 
file names actual output 
example group similar files output sif 
second version sif include option list interesting similar files set considered interesting members set sufficient number common fingerprints set subset larger interesting set 
problem generating interesting sets turns np complete devised algorithm hope reasonably practice 

experience performance expected sif performs random tests 
example took file containing program size random substitutions repetition size changing file leaving significant chunks unchanged 
ran sif mode setting threshold low 
ran experiment times 
time sif right file files mb 
similarity sif reported ranged averaging 
average run ning time test user system time seconds counting course time took originally build index 
experiments run dec workstation running ultrix 
real question performance real data 
tried sif file systems 
run ning time computing fingerprints seconds mb order mb gb hour 
takes longer files directories small 
sorting fingerprints takes third half time sorting linear time algorithm takes longer large number finger prints tried mb generated fingerprints 
rest algorithm takes time 
run file system uncompressed text files mb 
took seconds user system time generate fingerprints determine files non text files seconds sort fingerprints seconds perform rest computation second depends similarity parameter changing take just second literally 
test performed large collection frequently asked questions faq files extracted automatically news groups 
example faqs archived different names misc quotes misc quotations sources turned 
collection files worst case 
obtained alex system ca large collection readme files taken thousands ftp sites internet 
total size mb puts average size low 
groups equal files groups similar files similarity threshold set 
cases impossible tell files similar looking names ccs yorku ca pub doc tmp read ee utah edu rfc read similar 
challenging experiment distribution mb mb ascii files 
groups equal files groups similar files similarity threshold groups threshold 
experiments described exception faq files method list fre quent anchors allow high precision 
average fingerprint generated bytes text 
space required hold fingerprints tool currently total space 
better encoding fingerprints reduced 

extending sif areas 
adapting fingerprint generation file types 
men tioned postscript files headers excluded generating fingerprints 
relatively easy postscript files headers easily recognized 
example removing matting statements files troff tex files 
types difficult problems 
notable types handle executables compressed files 
types sensitive change 
adding statement program change addresses executable 
compressed files translate strings dictionary indices lempel ziv compression change dictionary change indices 
challenge find invariants generate fingerprints accordingly ignoring addresses alto gether exploring relationships dictionary indices 
second area allowing different treatments small large files 
currently treat files equally 
noble idea effective 
figured shared fingerprints needed strong evidence similarity exact number depends file type 
seek similarity file needs fingerprints 
current setting easily changed sif generates fingerprints sif marginally effective files 
hand file mb generate fingerprints 
adjust number fingerprints size file may lose ability determine small file contained large file needed 
adjusting number fingerprints easy methods anchor selection decreasing number anchors method increasing value second method 
third area providing convenient facilities comparing directories 
current tools comparing directories system program rely file names checksums 
files match exactly list equal 
comparing directories content done essentially tools need allow filenames similarity measure 
fourth area customizing output generation 
difficult problem provide users flexible means extract similarity seek 
attach large number options sif popular unix solution provide hooks external filter routines ones essence hs 
general 
problem finding interesting similar files defined section intriguing practical theoretical point view 
vincent cate supplying readme files collected alex 
richard sug hashing select anchors 
gregg townsend wrote filter collects faq files 
ba ca baker theory parameterized patern matching algorithms applications th annual acm symposium theory computing san diego ca may pp 

bowman danzig manber schwartz scalable internet resource discovery research problems approaches university colorado technical report cu cs october submitted publication 
cate alex global filesystem proceedings usenix file systems workshop pp 
may 
ha hs mi ra wm wm harel visual formalisms communications acm may pp 

hardy schwartz essence resource discovery system semantic file indexing usenix winter technical conference san diego january pp 

miller detecting duplicates searcher dream come true online july pp 

rabin fingerprinting random polynomials center research computing technology harvard university report tr 
wu manber agrep fast approximate pattern matching tool usenix winter technical conference san francisco january pp 

wu manber fast text searching allowing errors communications acm october pp 

