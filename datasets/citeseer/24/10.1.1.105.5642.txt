arxiv cs cs ds jun eurographics chalmers 
guest editors volume number implementation complexity watershed markers algorithm computed minimal cost forest petr center vienna austria www contact address mario rainer gmbh campus brunn am austria www com watershed algorithm belongs classical algorithms mathematical morphology 
lotufo published principle watershed computation means image transform ift computes shortest path forest markers 
algorithm described case image detailed discussion computation memory demands real datasets 
ift cleverly solves problem plateaus gives precise results thin objects segmented obvious algorithm datasets mind minimizing higher memory consumption case loosing low asymptotical time complexity real computation speed 
main goal implementation ift algorithm priority queue buckets careful tuning implementation reach minimal memory consumption possible 
presents possible modifications methods implementation ift algorithm 
implementations keep time complexity standard priority queue buckets best minimizes costly memory allocation needs memory typical medical imaging datasets 
memory saving reached ift algorithm simplification stores elements temporary structures elements simpler need memory 
best modification allows segmentation large medical datasets voxels bits voxel currently available pc workstations 

idea application watersheds ws grey scale image segmentation simple 
aim find objects borders 
object borders loci highest gradient image gradient image taken input height field topographical image step step immersed water 
process immersion water forms catchment basins correspond ideal case objects 
creation catchment basins begins local minima gradient image 
catchment basins meet touch dam built prevent join 
dams form watershed lines correspond object boundaries 
watershed algorithms starting local minima suffer oversegmentation applied images noise mentioned sonka region growing better watershed markers creation catchment basins eurographics association blackwell publishers 
published blackwell publishers cowley road oxford ox jf uk main street ma usa 
begins markers number objects 
interesting algorithm computation watersheds markers means image transform ift priority queue proposed lotufo falcao detailed implementation issues 
advantage algorithm higher resolution correctly segment blobs connected pixel thick region 
tuning implementation priority queue buckets reach minimal memory consumption possible keeping speed standard priority queue buckets aim 
best algorithm variants needs third memory typical case medical imaging datasets 
structure 
section describes implementation watershed markers minimal cost forest basic terms section ift algorithm proposed lotufo falcao section describes modifications ift algorithm section datasets worst average case analysis algorithms 
follow section 
definitions notations volumetric dataset size voxels 
dataset taken undirected graph node set size xyz arc set size xy yz defined connectivity neighboring voxels 
weight arc neighboring voxels value stored voxel node nonnegative integer arc weight watershed algorithm defined 
note formulation arc weight gives simple approximation complete gradient known common sense works correctly algorithm 
maximal arc weight dataset 
shortest path forest problem finds graph node shortest path connecting nearest root node 
case watersheds markers root nodes defined user markers types marker objects marker background 
path length measured path cost defined follows path cost path node node defined pair values lexicographic order 
component higher priority maximum arc weight second component distance path nearest node lower path cost 
precisely path vn vn vi path cost components defined follows vi vi min 
lotufo falcao second component reflects flooding process water reaches plateau relief 
shortest path cost nodes defined smallest lexicographic cost paths detection shortest path cost nodes results detection nearest marker node labeling voxel part object background 
lotufo falcao describe physical meaning frame topological relief image follows arc weight height wall nodes shortestpath cost minimal height water coming points merges 
second component lexicographic cost allows partition medial line plateau order en queueing markers priority queue important determines order processing markers shape size resulting labeled area 
markers defined place acquire areas little larger pixel plateaus 
theoretical efficient known algorithm shortest path forest problem dijkstra algorithm efficiently implemented means priority queue 
runs time plus time required perform queue operations 
arc weights real numbers binary comparisons heap implementation best possible time dijkstra algorithm nlogn described ahuja arc weights integers moderate size true case medical datasets special algorithms exist differ implementation priority queue running typical time nc dial implementation buckets best known time level radix heaps ahuja combine radix heaps fibonacci heaps 
values valid path cost defined sum weights path 
definition watershed algorithm described section results time complexity details section 
memory complexities algorithms dijkstra dial algorithms implemented hashing time deterministic level radix heaps ahuja level radix heaps memory consumption ahuja mentioned 

ift algorithm lotufo falcao lotufo falcao implemented watershed algorithm image transform ift 
accent necessity priority queue fifo restriction correct handling plateaus 
algorithm cost path nearest marker input marker image result watershed partitioning lag differentiates labeled nodes non processed temporarily labeled nodes 
ift algorithm works follows 
initialization nodes flag temp non marker nodes infinity marker nodes enqueue 
propagation flag done neighbor flag temp max max dequeue enqueue algorithm partitions graph nodes sets permanently done temporarily temp labeled 
eurographics association blackwell publishers 
implementation watershed markers minimal cost forest iteration step selects temporarily labeled node minimum cost priority queue node scanned 
node processed permanently labeled 
algorithm terminates nodes permanently labeled queue empty 
path cost non decreasing function important property algorithm node permanent path cost final optimal path cost 
important property second component path cost need stored fifo priority queue keeps second component intrinsically sorted 
initialization phase nodes labeled temporary line markers assigned cost line nodes infinity line 
markers entered priority queue 
queue insertion sequence markers type background ones important 
hand order insertions markers different type queue important processing done fifo order come marker wins larger region 
separate input lists object background markers algorithm starts width en queueing object markers 
propagation step node minimal path cost removed queue marked permanent lines 
temporarily labeled neighbors tested path cost permanent node smaller temporary cost associated node line ca temporary cost label updated 
node queue removed line cb node enqueued priority new path cost line cc 
better understanding role distance component discussed greater detail algorithm processes nodes lowest path cost highest flooding water proceeds 
means processing level path cost nodes lower path cost processed 
true distance component nodes lower distance processed nodes distance exist queue 
precisely nodes distance exist current path cost level means queue implemented buckets current bucket 
processed node water level means path cost equal possibilities neighboring node 
path cost updated path node expensive 
true survives unchanged test line false 
path cost updated max cheaper go node test line true path cost increases arc weight new distance path cost value remains plateau remains unchanged new distance computed 
eurographics association blackwell publishers 
cases priority queue updated fifo restriction handles correctly insertion new node stored nodes 
case new node inserted node path cost equal 
stored nodes cost higher distance 
case handles plateaus neighboring nodes reinserted cost unchanged distance incremented 
nodes stored queue path cost associated possible values distance distance equal node waiting processing level distance equal neighboring node processed current level 
newly processed nodes successively inserted nodes values 
implementation buckets cases represent inserting nodes appropriate bucket 
principle buckets explained section 
implementation ift algorithm falcao lotufo discuss implementation algorithm detail 
noted application buckets implementation priority queue similar dial buckets maximal arc weight wmax input grey scale volume known maximal absolute difference voxel values max neighboring voxels 
called maxdiff text upper bounded maximal value store able dataset 
maximal store able value called dataset precision cp bit representation numbers dataset 
proposed spare line cb ift algorithm simplifies data structure priority queue implementation results elements stored priority queue multiple entries voxel appear queue 
possible methods implementation ift algorithm discussed section 
ift algorithm falcao lotufo follows ideas proposed dial uses buckets priority queue implementation overcome logarithmic time complexity heap approaches handling temporary labeled nodes identified bottleneck algorithm 
bucket stores temporarily labeled nodes distance labels equal fall certain range approaches 
nodes buckets stored double linked lists nodes array pointers size equal number buckets points 
dial implementation requires nc buckets worst case maximal cost 
ahuja proved graph maximum cost step network maximal arc length buckets necessary maintain temporarily stored labels circular queue 
algorithm uses maximum path path cost implementation watershed markers minimal cost forest circular queue needed number buckets upper bounded precision cp dataset 
text variants algorithm implementation discussed results measurements time memory consumption applied real medical datasets shown 
different modifications algorithm different levels simplification data structures necessary implementation change memory complexity algorithm average worst cases 
algorithms tested order know implementations minimal average memory consumption keeping time complexity 
tested algorithm modifications complete ift algorithm dequeuing fixed volume queue section ii complete ift algorithm dequeuing dynamical queue section iii ift algorithm dequeuing entries higher path cost queue section iv modification dequeuing stores costs queue section improvement modification iv saves space necessary queue implementation section 
subsections variants algorithm modifications explained 

common algorithm specific data structures designed data structures algorithm modifications aim achieving constant time complexity queue modification 
constant time complexity valid queue operations searching nonempty bucket operation complexity 
data structures common implementations input dataset volume scalar values size stored precision cp bit number representation 
dataset arcs described section fixed arrays pointers beginnings ends buckets 
arrays indices range maxdiff maximal absolute difference neighboring values dataset 
upper bound number precision cp dataset maxdiff cp cp directly higher index sections maximal value available temporary volume flags bit value distinguishes temp done status node volume 
flags stored separate bit volume position bit byte value resulting volume labels bit label object background distinguished 
implementation specific data structures differ modifications ift follows buckets elements implemented fixed volume dynamically double linked lists single linked lists lists stored structures called bricks described section temporary node costs fixed volume part dynamically allocated bucket element node positions stored implicitly position fixed volume explicitly set coordinates stored 
overview sizes stored values concentrated table algorithm column headers represent size structure numbers elements fixed size static data structures maximal size dynamic structures table entries represent amount data stored element structures 
better understanding memory demands algorithms tables show representation amounts bits bytes different levels substitution conversion account lines table 
details discussed explanations algorithm modifications sections illustrated figures 
proposed data structures handle bit datasets maximal sizes voxels 
upper limit storage temporary label position bit element 
hand real limits algorithms amount ram typical nowadays workstation largest possible dataset sizes presently available clinical praxis voxels selected data structures form restrictive part algorithm implementation 

complete ift dequeuing fixed volume queue complete ift algorithm published lotufo falcao described section 
achieve time complexity priority queue buckets implemented double linked list stored preallocated fixed volume size equal size dataset see voxels stored bucket 
version uses operations described section 
arrays pointers ends bucket fifos constant time en queue searching minimal element done 
double linked list necessary constant time de queue node bucket queue complete list stored volume size size dataset constant time test constant time location neighbors dir 
list element entry current temporary cost achieve constant time details see line tables 
eurographics association blackwell publishers 
implementation watershed markers minimal cost forest number elements arrays fixed size dynamic size size temp temp result temp algorithm ptr cost flag ptr label cost label position ptr index complete ift fix volume complete ift dynam 
ii ift dynam 
iii ift max test dynam 
iv ift max test bricks size element bits size element bytes table memory necessary algorithms number elements array input dataset :10.1.1.24.5928
horizontal line separates upper part lower part size temporary volume 
position iii computed indirectly values pointers 
index pointer sizes approximated bricks bytes ptr indices brick elements data structures complete ift algorithm dequeuing fixed volume queue time operation test sequentially searches array buckets non empty bucket 
complete search performed run algorithm 

complete ift dequeuing dynamical queue ii average case algorithm number elements simultaneously stored queue place reserved fixed volume entries feature discussed detail section 
reduce extremely high fixed memory consumption dynamical version priority queue proposed 
queue stored dynamically allocated list element list contains value temporary cost pointers linking list details see second line tables 
direct access elements queue needed fixed volume eurographics association blackwell publishers 
data structures complete ift algorithm dequeuing dynamical queue ii pointers elements list queue necessary 
voxel stored queue array reserved resulting labels reused temporary labels way complete algorithm 
set operations complexities equal fixed volume version previous section 

ift algorithm dequeuing iii lotufo falcao described possible simplification proposed algorithm 
propose omit dequeuing nodes higher temporary cost priority queue node cost replacing operation line cb complete ift algorithm 
modification simplify queue data structure operation dequeue need implemented 
uniqueness nodes queue lost node voxel cases implementation watershed markers minimal cost forest algorithm maximal memory consumption terms fixed temp fixed result dynamic temp complete ift ptr cost flag label complete ift ii ptr flag label cost ptr ift dequeue iii ptr flag label cost label ptr ift max iv ptr flag label label pos ptr ift bricks ptr flag label label pos ptr table memory necessary algorithms worst case data type pieces 
underlined label pos stored underlined label occupy byte 
fractional constant ptr ind computed brick size elements algorithm maximal memory consumption terms fixed temp fixed result dynamic temp complete ift complete ift ii ift dequeue iii ift max iv ift bricks table table substitution data type representation sizes line table 
underlined numbers arise sharing space label pos allocation byte dynamical structures label storage indices bytes stored times queue 
different temporary costs labels exist node moment 
results repeated storage temporary cost temporary label queue queue entry 
multiple occurrences nodes queue common modifications described sections 
preserve constant time operation dir comparison max test line ift algorithm direct location neighbors queue necessary 
demand violates presumption proposed lotufo falcao dequeue operation completely removed precisely operation removed speed algorithm simultaneously lost element queue searched volume current minimal temporary costs necessary needs memory continuously updated 
direct access node neighbors achieved handling volume pointers elements queue previous algorithm ii section 
operation dequeue simplified move pointer element lower value physical removal previously pointed element update current minimal cost case fixed volume temporary costs 
ind summarize memory demands see third line tables pointer queue element needed elements removed queue queue implemented single linked list multiple entries node exist queue double entry example 
store current cost label queue multiple times node 
fixed part data structure pointer fixed volume pointers saved similar ii 
disadvantage maximum queue length simultaneously increases modifications ii 
illustration data structures see 

ift dequeuing max test iv save memory fixed volume pointers modification ift algorithm dequeuing elements proposed dequeuing omitted maximum test line 
simply nodes label position stored new values temporary path cost appropriate bucket priority queue bucket implemented single linked list 
cost stored queue information intrinsic bucket index bucket bucket pointer arrays details see fourth line table 
fifo returns dequeues elements lowest cost algorithm eurographics association blackwell publishers 
implementation watershed markers minimal cost forest data structures ift algorithm dequeuing iii ignores multiple entries setting flag done modified algorithm gives exactly results discussed variants iii 
take note reverse direction pointing queue elements volume position double entry example 
volume contains resulting label label flag temporary label position stored dynamically allocated queue elements 
data structures ift algorithm dynamical queue dequeuing max test iv disadvantage maximum elements queue 
exact number elements queue times higher section elements higher path cost stored queue 
half memory pointers dynamical implementation fifo list details see fourth line tables column dynamic temp 
eurographics association blackwell publishers 

ift dequeuing max test bricks data structures ift algorithm dequeuing max test bricks save memory pointers dynamical list iv allocation memory larger amounts proposed called bricks see bucket contains brick entries point voxel 
brick pointer brick local indices free position elements queue part stored brick marked 
bit indices allow brick size number node entries stored brick max elements 
common memory allocation scheme multiples bytes pragma pack vc may prefer entries bytes indices pointer brick bytes 
details see fifth line tables column dynamic temp 
save memory allocation times empty brick management collects empty bricks separate empty brick stack 

tests studies computational memory complexity exist shortest path forest problem general case ahuja real road networks zhan study related large medical volumetric datasets shortest path cost function sum maximum path see sections 
modifications ift watershed algorithm discussed segmentation large medical datasets mind 
section discusses estimations asymptotic computational memory complexities 
real case measurements medical imaging datasets follow 
properties typical volumetric medical datasets characterized section 
memory computational analysis worst average case algorithm follow implementation watershed markers minimal cost forest dataset number arc costs arc node size nodes arcs max mean ratio sections 
results tests summarized section 

datasets type dataset size precision stored values important algorithm implementation determines memory demands temporary data structures representation stored costs data structures priority queue discussed section 
implementation ift algorithm tested tuned datasets volumes acquired computer tomography ct magnetic resonance imaging mri 
size data volumes inter slice resolution varies number slices varies 
characteristics medical datasets tests maximal mean standard deviation arcs listed table 
datasets ordered number nodes 
example images shown 
practical maximal size dataset algorithm handle operation memory pc time limited gb slices omit swapping occurs memory 
proposed data structures allow datasets slices bit label bits left position 
higher dataset sizes label value cause increase memory complexity label allocate separate byte 
noted section precision cp bit datasets gives upper bound maximal difference means fixed size bucket pointer array pairs bucket pointers maximal difference values dataset directly available computed additional computational cost 
roughly approximated array bucket pointers occupies mb memory amount memory comparison memory demands algorithm practical terms 
zhan draws attention different types graphs different tasks classified arc node ratio parameter directly implies complexity algorithm 
zhan warns measurements performance table characteristics medical datasets study shortest path algorithms done artificial networks arc node ratio real road network graphs achieve value approximately 
arc node ratio equal volumetric graph nodes belong inner voxels neighbors arc processed 
arc node ratio medical datasets tests listed column table 
real road networks fastest algorithms dijkstra algorithm implemented appropriate buckets 
volumetric datasets equal arc node ratio deduced concentration implementation dijkstra algorithm buckets choice 

worst case analysis modifications algorithm time complexity differ constant factor average maximal running times maximal memory complexity 
stated section path cost watershed algorithm computed ift defined maximal arc weight path 
classical shortest path forest algorithms discussed ahuja zhan different definition path cost sum arc weights path 
classical variants need runs queue worst case reach time complexity multiplicative term ift ws lotufo needs complete run time complexity simplified 
worst case memory complexity algorithm modifications varies algorithm variants dequeuing complete ift fixed volume complete ift dynamical queue ii fixed size supporting data structures fixed maximal size queue 
memory consumption 
variants dequeuing ift dequeuing iii ift dequeuing max test iv ift dequeuing max test bricks fixed size supporting data structures eurographics association blackwell publishers 
implementation watershed markers minimal cost forest examples datasets tests 
top row shows windowed view input datasets bottom row segmented structures 
numbers table 
datasets courtesy gmbh austria elements dequeued maximal size queue 
memory consumption 
table shows maximal worst case memory sizes tested algorithms multiples substitutions conversions 
maximal sizes reached special case input markers set chessboard pattern cause planning arcs simultaneously queue 
real situations dynamical part depends real queue length smaller testing algorithms comparison maximal number elements algorithms handle amount memory complete ift algorithm performed see column table 
instance variant bricks handle elements stored queue length 
comparison premise queues filled similarly variants true storage strategies differ 
possible see lotufo falcao idea data structures simplification omitting dequeuing medical datasets precisely better way implementation known authors 
omitting dequeue operation survival maximum test allow arcs stored queue han eurographics association blackwell publishers 
max memory relative alg fixed part dynamical len diff part ii iii iv table table conversion bytes 
column shows maximal amount elements processed memory complete ift algorithm queue fixed volume 
algorithm ii percents iii percents amount memory table 
save memory volume pointers direct access queue elements max test omitted slow algorithm 
implementation watershed markers minimal cost forest ds alg fix temp dynam dynamic elements sum memory mem vol max elems filling mem max mb mb mb mb mb mb mb max ii iii iv ii iii iv ii iii iv table measurements memory consumption medical datasets 
values measurements datasets number fit memory implementation omitted queue length algorithm complete lines ii iv 
average case complexity analysis medical datasets volumetric medical datasets tested measured 
tests designed verify derived time memory complexities average filling queue modification average brick fill check suitability selected brick size 
cases maxdiff value directly available dataset 
test bed implementation algorithms done means general container library tests showed memory consumption algorithms iv high medical datasets dynamical space management consumes processor power times slower test implementation 
preliminary tests variant carefully implemented specifically designed data structures 
computational times measured implementation ift algorithm collected medical datasets column table 
linear time complexity numbers obvious 
memory consumption measured variants 
mentioned section extreme situation maxi mum memory consumption maximum elements simultaneously stored queue reached practically impossible real cases volumetric datasets manually set markers 
real situation user puts markers volume starts algorithm memory consumption modifications ii needs complete ift 
bold column table shows relative queue fill reached tests varies variants ii variant 
comparison values column table shows variant handle cases large reserve amount memory variant iii 
interesting comparison memory usage algorithm modifications concentrated second bold column table 
possible see algorithm variant stores arcs queue performs comparisons previously stored costs needs memory complete implementation fixed volume 
best implemented modification 
amount elements queue memory depend substantially segmented structure eurographics association blackwell publishers 
implementation watershed markers minimal cost forest markers character dataset 
small homogeneous structures homogeneous background need lower amount elements simultaneously queue dataset elements exact correlation parameters average queue fill 
topic research 
test designed find average brick fill bricks selected size elements 
version bricks largest amount bricks case buckets contain brick element rest full 
situation changes memory demands amount ones percent large datasets omitted tests 
results tests collected table 
brick fill typically means brick size relatively optimal size brick chosen correctly 
ds number average comput elems bricks brick size time table tests brick filling datasets study continuing table algorithm 
number bricks equal amount memory bricks kb 
column shows time final note exact mentioned memory compiler handling dynamical memory compiler documentation called maintenance cost taken consideration 

summary tests results complete ift algorithm implemented fixed volume served comparison algorithms 
uses fixed amount memory number voxels dataset 
dynamical version complete algorithm ii uses memory 
spite fact algorithm replaces elements queue just stores node queue saved amount memory substantial 
handling dynamical variables results slower computational times times slower test bed implementation 
omitting node replacing line cb proposed lotufo falcao iii implementation saves memory ii omitting dequeuing causes multiple node entries queue entries need relatively large amount memory storage 
variant needs average case memory 
eurographics association blackwell publishers 
better max test simplification iv saves fixed part temporary memory pointers queue elements omitting comparison line 
saved memory nearly multiple entries nodes higher cost 
average memory consumption memory 
significantly times better worst case best implementation average case real medical datasets second max test simplification bricks 
saves fixed part temporary memory better memory allocation larger amounts handle maximal queue length amount memory average case needs memory 

presents variations image transform ift algorithm implemented aim performing segmentation watershed markers large medical datasets limited amount operational memory 
optimization memory consumption performed best algorithm variant needs average case memory complete ift algorithm implemented lotufo falcao 
best implementation variant allows segmentation datasets sizes voxels memory currently available medical workstations pc technology allows segmentation significantly smaller datasets sizes voxels 
interesting area finding correlations dataset parameters table number character input markers maximal queue length 
correlation exists prediction memory consumption segmentation algorithm 
modification arc weights direction tested basis presumption sampling distance direction higher absolute difference higher flow slice may preferred jumping neighboring slice 
interesting area application hierarchical techniques speeding watershed algorithm user interaction 
combination watersheds tested complete results watersheds markers watershed 
combination promising results 
algorithm validated clinical praxis 
acknowledgments done research center vienna austria www partly funded austrian government research program 
datasets tests courtesy gmbh austria www com 
implementation watershed markers minimal cost forest 
lotufo falcao ordered queue optimality watershed approaches mathematical morphology applications image signal processing vincent eds kluwer academic publishers may 

sonka boyle image processing analysis machine vision 
published pws publishing brooks cole pacific grove ca ed 

dijkstra note problems connection graphs mathematik pp 

cited zhan 
ahuja mehlhorn orlin tarjan faster algorithms shortest path problem journal acm pp 


dial algorithm shortest path forest topological ordering communications acm pp 

cited zhan 
ahuja magnanti orlin network flows theory algorithms applications 
prentice hall 
cited zhan 
documentation microsoft visual version msdn library visual studio release 

zhan fastest shortest path algorithms real road networks data structures procedures journal geographic information decision analysis pp :10.1.1.24.5928

eurographics association blackwell publishers 
