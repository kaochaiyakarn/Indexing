appears proc 
th nat conf 
artificial intelligence 
csp look back techniques solve real world sat instances roberto bayardo jr university texas austin department computer sciences austin tx usa bayardo cs utexas edu www cs utexas edu users bayardo report performance enhanced version davis putnam dp proof procedure propositional satisfiability sat large instances derived realworld problems planning scheduling circuit diagnosis synthesis 
results show incorporating csp lookback techniques especially relatively new technique relevance bounded learning renders easy problems dp reach 
frequently dp systematic algorithm perform better stochastic sat algorithms gsat wsat 
recommend techniques included options implementations dp just systematic algorithms general constraint satisfaction problem 
cnf propositional satisfiability sat specific kind constraint satisfaction problem csp little application popular csp look back techniques sat algorithms 
previous bayardo schrag demonstrated look back enhanced version tableau algorithm sat instances crawford auton solve easily instances look back exceptionally hard orders magnitude harder instances surface characteristics 
instances artificially generated 
demonstrate practical utility csp look back techniques look algorithm related tableau solve large sat instances derived real world problems planning scheduling circuit diagnosis synthesis 
kautz selman tableau inadequate solve planning derived instances resorted stochastic algorithm wsat known walk sat selman results show look back enhancements recourse unnecessary 
usual framework backtrack search systematic solution finite constraint satisfaction problem csp techniques intended improve efficiency divided classes look ahead techniques exploit information remaining search space look back techniques exploit information search taken place 
class includes variable ordering heuristics value ordering heuristics dynamic consistency enforce copyright american association artificial intelligence www aaai org 
rights reserved 
robert schrag information extraction transport north lynn street suite arlington va usa schrag iet com www iet com users schrag ment schemes forward checking 
class includes schemes backjumping known intelligent backtracking learning known nogood constraint recording 
csp algorithms techniques classes popular instance common combination techniques forward checking conflict directed backjumping ordering heuristic preferring variables smallest domains 
sat specific kind csp variable ranges values true false 
sat popular systematic algorithms variants davis putnam procedure dp davis 
csp terms dp equivalent backtrack search forward checking ordering heuristic favoring unit variables 
effective modern implementations tableau crawford auton posit freeman highly optimized include carefully selected variable ordering heuristics 
implementations published descriptions include look back enhancements describe 
systematic global search algorithms traverse search space systematically ensure part goes unexplored 
complete running time solution exists find solution exists report 
alternative systematic algorithms sat stochastic local search algorithms wsat gsat selman 
stochastic algorithms explore search space randomly making local perturbations working assignment memory 
incomplete guaranteed find solution exists report solution exists find 
stochastic algorithms outperform systematic ones dramatically satisfiable instances phase transition region random problem spaces random sat selman 
instances region average difficult widely differing algorithms come frequently benchmarks sat algorithm performance 
time widely recognized different underlying structures sat instances expect arise naturally real world problems interest 
stochastic algorithms outperform systematic algorithms tableau real world problems 
sat encoded planning problems described kautz selman infeasible tableau hours solved easily wsat minutes 
look back enhanced version dp competitive wsat identifying feasible plans instances 
furthermore look back enhanced dp proves nonexistence shorter plans minutes instances tableau solve hours task impossible wsat incompleteness 
innovative kautz selman pushing envelope feasibility planning problems lays foundation look back enhanced dp slips neatly key component planning system state art 
definitions propositional logic variable ranges domain true false assignment mapping values variables 
literal occurrence variable negation positive literal satisfied variable assigned true negative literal satisfied assigned false 
clause simple disjunction literals 
clause satisfied literals satisfied 
unit clause contains exactly variable binary clause contains exactly 
empty clause signals contradiction seen interpretation choose literals true 
conjunctive normal formula cnf conjunction clauses 
cnf satisfied clauses satisfied 
cnf represent assignment notationally set literals satisfied 
nogood partial assignment satisfy cnf 
clause encodes nogood call nogood encoding clause reason 
resolution operation combining input clauses mentioning literal negation respectively deriving implied clause mentions literals 
example resolves produce basic algorithm description davis putnam proof procedure dp represented pseudo code 
classically stated sat decision problem frequently interested exhibiting satisfying truth assignment empty initial top level entry recursive call value procedure dp 
dp unit propagate return exit select branch variable dp dp return cnf truth assignment modified calls name unit propagate 
contains contra diction failure backtracking necessary 
clauses simplified away current assignment satisfies cnf 
select branch variable heuristic function returning variable value developing search tree 
truth value works failure 
unit propagate exists simplify unit propagate adds single literal unit clause literal set simplifies cnf removing clauses lambda occurs shortening clauses occurs resolution 
modern variants dp including posit tableau incorporate highly optimized unit propagators sophisticated branch variable selection heuristics 
branch variable selection heuristic implementation inspired heuristics posit tableau somewhat simpler reduce implementation burdens 
details branch variable selection follows 
binary clauses select branch variable random 
assign variable appearing binary clause score neg pos neg pos pos neg numbers occurrences binary clauses respectively 
gather variables best score candidate set 
candidates remove variables random exactly 
candidate return branch variable 
candidate re scored follows 
candidate compute pos neg number variables valued unit propagate making assignment respectively 
unit propagation lead contradiction immediately return branch variable pursue assignment variable led contradiction 
score function 
candidate scored finding contradiction select branch variable random candidates best newly computed score 
cases contradiction noted truth value assigned branch variable selected random 
applied described additional heuristics substantially improve performance instances 
incorporating cbj learning pseudo code version dp performs naive backtracking mediated recursive function stack 
conflict directed backjumping cbj prosser backs stack non sequential manner skipping stack frames possible efficiency sake 
mechanics involve examining assignments unit propagate just assignments dp branch variables complicated dp pseudo code represent 
forego cbj pseudo code short 
implement cbj having unit propagate maintain pointer clause input cnf serves reason excluding particular assignment consideration 
instance part current assignment input clause reason excluding assignment contradiction derived know variable truth values excluded 
cbj constructs working reason failure resolving respective reasons backs assigned variable suppose assignment variable 
excluded reason create new working reason resolving back assigned variable install reason excluding change current assignment include proceed dp 
extending example suppose detecting failure complementary reason assigned resolution gives working reason cbj backs assignment 
excluded suppose reason resolution yields new working reason cbj keeps backing 
excluded branch variable reason excluding replaces current assignment dp continues 
learning schemes maintain derived reasons longer cbj discard soon longer denoting value excluded 
unrestricted learning records derived reason exactly clause underlying instance allowing remainder search 
overhead unrestricted learning high apply restricted learning schemes defined bayardo miranker 
learning order retains indefinitely derived reasons containing fewer variables 
instance reason maintained second order size bounded learning longer reasons 
relevance bounded learning order maintains reason contains variables assignments changed reason derived 
example suppose performing second order learning derive reason variables assigned order appear 
reason maintained secondorder relevance bounded learning long remains assigned soon re assigned un assigned backup reason discarded 
test suites separate test suites compare performance look back enhanced dp algorithms performance reported instances sat encoded planning instances kautz selman selected circuit diagnosis planning instances dimacs challenge directory associated sat competition planning scheduling cir synthesis instances beijing sat competition table 
kautz selman planning instances 
instance vars clauses sat type log gp planning log gp planning log dir planning log dir planning log dir planning log un planning log un planning bw dir planning bw dir planning selected sat encoding planning instances constructed kautz selman hardest instances available listed table 
log instances correspond planning problems logistics bw instances blocks worlds real worlds hard 
gp instances graphplan encodings dir instances direct encodings state logistics instances linear blocks world un instances unsatisfiable graphplan encodings demonstrate infeasibility shorter plans 
see cited details 
table 
dimacs instances 
instance vars clauses sat type ssa diagnosis bf diagnosis hanoi planning hanoi planning dimacs suite looked van gelder tsuji ssa single stuck bf bridge fault circuit diagnosis instances selman tower hanoi planning instances linear encoding 
brevity report hardest algorithms investigated single stuck bridge fault instances shown table 
report instances beijing suite shown table 
planning instances blocks linear encodings 
scheduling instances encode sadeh benchmarks described crawford baker 
circuit synthesis instances bit contributed bart selman 
experimental methodology algorithms coded fewer lines including header files blank lines comments 
implementation flexible different look back techniques degrees installed setting various com 
available ftp ftp research att com dist ai logistics tar satplan data tar 
available ftp dimacs rutgers edu pub challenge satisfiability 

available www cirl edu crawford beijing 

source code available www cs utexas edu users bayardo 
table 
beijing instances 
instance vars clauses sat type scheduling scheduling en scheduling en scheduling ew scheduling ew scheduling blocks planning planning blocks planning synthesis synthesis synthesis synthesis synthesis synthesis synthesis pile time run time parameters 
optimize implementation extensively 
believe investing attention regard lines suggested freeman improve performance factor 
freeman sophisticated branch variable selection heuristics instance preprocessing techniques improve performance 
experiment variants dp algorithm 
version applying look back enhancements denoted applying cbj applying relevance bounded learning order relsat applying size bounded learning order size sat 
learn orders higher learn orders resulted high overhead generally useful lower learn orders little effect 
care taken experimenting real world instances number instances available experimentation limited 
experiment allow performance results limited instance space generalize similar instances 
runtime variance algorithms solving instance extremely high insignificant differences value variable ordering policies instance satisfiable 
kautz selman address issue averaging wsat runtime multiple runs 
take approach run algorithms times instance different random number seed run ensure different execution patterns 
order deal runs take inordinate amount time cutoff time imposed minutes noted algorithm report failure 
report percentage instances algorithm failed solve cutoff time 
report mean cpu time required run mean variable assignments run averaged successful runs 
experiments performed sparc workstations 
kautz selman reported running times mhz sgi challenge 
normalize running times theirs instances solved selected set instances compared mean flips second reported wsat concluding machine times faster sparc experimental results follow take liberty reporting run times normalized sparc cpu seconds 
normalizing run times reported kautz selman tableau repeat experiments machine newest available version tableau back available www cirl uoregon edu crawford tar 
version tableau incorporates backjumping scheme similar better optimized 
back incorporates runtimes reported algorithm single run instance 
experimental results table displays performance data relsat wsat back kautz selman planning instances 
cutoff time minutes instance bw dir minutes 
times wsat reported kautz selman normalized sparc cpu seconds 
relsat outperformed wsat instances 
exception wsat clearly superior instance log dir caused relsat reach cutoff times 
instance bw dir caused relsat reach cutoff times outperformed wsat minutes averaging minutes relsat cutoff 
difficult draw solid performance back times reported single run determine relsat effective back instances relsat reached cutoff back required substantially minutes solve 
includes log gp log un instances 
table 
performance relsat kautz selman planning instances 
instance relsat fail wsat back log gp log gp log dir log dir log dir hours log un log un hours bw dir bw dir hours table displays performance data dp variants dimacs instance bf hardest bridge fault instances 
freeman reports posit requires hours sparc solve instance back solve seconds 
table displays information dimacs instance 
easily repeat experiments kautz selman machines due need hand tune multiple input parameters wsat 
table 
performance dimacs bridge fault instance bf 
algorithm run time fail relsat relsat table 
performance dimacs single stuck instance ssa 
algorithm run time fail relsat relsat ssa hardest single stuck instances 
freeman reports posit require seconds solve instance back solve seconds 
instances unsatisfiable 
unable solve instance minutes runs 
adding cbj resulted bridge fault instance solved runs single stuck instance caused failures 
learning algorithms performed extremely bridge fault instance 
single stuck instance relevance bounded learning resulted significant speedup 
fourth order size bounded learning restricting size search space third order size bounded learning performed due higher overhead 
table 
performance dimacs planning instance hanoi 
algorithm run time fail relsat relsat dimacs instances hanoi hanoi appear contain deep local minima satisfiable knowledge solved stochastic algorithms 
back solves hanoi seconds unable solve hanoi hours 
aware sat algorithm reported solved hanoi 
results dp variants hanoi appear table 
appears faster relsat mean run time skewed fact successfully solved instance runs 
relsat successful nearly runs relsat 
ran set dp variants hanoi 
variant 
freeman reports posit exhibits high run time variability ssa variance quantified 
successfully solved instance relsat attempts 
average runtime successful runs minutes 
dp variants performed relatively beijing instances 
general trend far illustrated look back applied better performance lower probability reaching cutoff 
able solve instances suite significant difficulty relsat exception bit circuit instances solved dp variants 
interestingly instances trivial wsat 
bit circuit instances trivial fraction second mean solution time exception unsatisfiable representative 
instance solvable algorithms minutes 
disabling cutoff relsat determined unsatisfiable hours 
relsat solved scheduling instances success rate 
instances en resulted failure rates respectively 
repeating experiments instances minute cutoff reduced failure rate respectively 
crawford baker reported isamp simple randomized algorithm solved types instances effectively wsat tableau 
implementation isamp solved instances order magnitude quickly relsat success rate 
find isamp capable solving instances considered 
beijing planning instances relsat relsat blocks easy solving success seconds average respectively 
instance easy relsat relsat achieving success time seconds respectively 
blocks instance difficult 
failure rate relsat relsat average cpu seconds seconds respectively 
mean times close cutoff expect increasing cutoff time significantly reduce failure rate scheduling instances 
discussion look back enhancements clearly dp capable algorithm 
instances tested selected difficulty learning cbj critical performance 
suspect dramatic performance improvements resulting incorporation look back fact due synergy lookahead look back techniques applied 
variable selection heuristics attempt seek constrained areas search space realize inevitable failures quickly possible 
learning schemes recording derived clauses create constrained search sub spaces variable selection heuristic exploit 
size bounded learning effective instances relatively short nogoods derived deep inference 
relevance bounded learning effective sub problems corresponding current dp assignment property 
findings indicate real world instances contain subproblems short easily derived nogoods 
phase transition instances random sat tend short nogoods schrag crawford require deep inference derive look back enhanced dp provides little advantage bayardo schrag 
noted test instances infeasible look back enhanced dp easy trivial wsat 
look back dp magic bullet look back techniques result universally superior performance just look ahead techniques included tableau posit 
best algorithms stochastic systematic bound instances sufficient size complexity adversarial structure 
combining techniques look ahead look back give better performance broad range problems 
researchers attempted exploit distinct advantages systematic stochastic search hybrid global local search algorithms 
ginsberg mcallester partial order dynamic backtracking incorporates form relevance bounded learning scheme relaxes restrictions changing past variable assignments shown perform better tableau random problem space structure 
evaluated hybrid algorithm interleaved dp local search execution instances dimacs suite showing frequently outperformed capable non hybrid dp implementations 
look back enhanced dp effective solving dimacs instances instances ginsberg mcallester bayardo schrag required see techniques complementary look back 
similarities experimental results study previous study randomly generated exceptionally hard instances bayardo schrag speculate random problem space may contain instances better reflect computational difficulties arising real world instances random spaces random sat 
described csp look back enhancements dp demonstrated significant advantages 
feel performance warrants included options dp implementations commonly 
dp larger system planning scheduling circuit processing knowledge representation higher order theorem proving hybrid systematic stochastic sat algorithm 
theoretical comparison methods restricting learning overhead appears bayardo miranker 
look back enhanced dp probably replace dp sat algorithm dp new evaluation look back enhancements 
look back enhanced dp standard algorithm dp styles sat algorithm compared 
bayardo miranker 
complexity analysis space bounded learning algorithms constraint satisfaction problem 
proc 
th nat conf 
artificial intelligence 
bayardo schrag 
csp look back techniques solve exceptionally hard sat instances 
proc 
second int conf 
principles practice constraint programming lecture notes computer science springer 
crawford auton 
experimental results crossover point random sat 
artificial intelligence 
crawford baker 
experimental results application satisfiability algorithms scheduling problems 
proc 
twelfth nat conf 
artificial intelligence 
davis logemann loveland 
machine program theorem proving cacm 
freeman 
improvements propositional satisfiability search algorithms 
ph dissertation pennsylvania dept computer information science 
frost dechter 
dead driven learning 
proc 
twelfth nat conf 
artificial intelligence 
ginsberg mcallester 
gsat dynamic backtracking principles knowledge representation reasoning proceedings fourth int conf 
kautz selman 
pushing envelope planning propositional logic stochastic search 
proc 
th nat conf 
artificial intelligence 

detecting logical inconsistencies 
proc 
fourth int symposium artificial intelligence mathematics 
prosser 
hybrid algorithms constraint satisfaction problem 
computational intelligence 
schrag crawford implicates prime implicates random sat 
artificial intelligence 
selman kautz cohen 
noise strategies local search 
proc 
twelfth nat conf 
artificial intelligence 
selman levesque mitchell 
new method solving hard satisfiability problems proc 
tenth nat conf 
artificial intelligence 
stallman 
sussman 
forward reasoning dependency directed backtracking system computer aided circuit analysis 
artificial intelligence 
