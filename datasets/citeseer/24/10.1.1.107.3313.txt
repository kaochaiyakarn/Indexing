versus np problem stephen cook 
statement problem versus np problem determine language accepted nondeterministic algorithm polynomial time accepted deterministic algorithm polynomial time 
define problem precisely necessary give formal model computer 
standard computer model computability theory turing machine introduced alan turing 
model introduced physical computers built continues accepted proper computer model purpose defining notion computable function 
informally class class decision problems solvable algorithm number steps bounded fixed polynomial length input 
turing concerned efficiency machines concern simulate arbitrary algorithms sufficient time 
turns turing machines generally simulate efficient computer models example machines equipped tapes unbounded random access memory squaring cubing computation time 
robust class equivalent definitions large class computer models 
follow standard practice define class terms turing machines 
formally elements class languages 
finite alphabet finite nonempty set elements set finite strings 
language subset turing machine associated input alphabet 
string computation associated input 
notions turing machine computation defined formally appendix 
say accepts computation terminates accepting state 
note fails accept computation ends rejecting state computation fails terminate 
language accepted denoted associated alphabet defined accepts 
denote tm number steps computation input see appendix 
computation halts tm 
denote tm worst case run time tm max tm set strings length say runs polynomial time exists tm stephen cook define class languages turing machine runs polynomial time 
notation np stands nondeterministic polynomial time originally np defined terms nondeterministic machines machines possible move configuration 
customary give equivalent definition notion checking relation simply binary relation finite alphabets 
associate relation language lr defined lr symbol 
say polynomial time iff lr define class np languages condition language np iff polynomial time checking relation denote lengths respectively 
problem statement 
np 
easy see answer independent size alphabet assume strings alphabet fixed size efficiently coded strings binary alphabet 
problem open possible np case general case 
trivial show np language define polynomial time checking relation simple examples decimal notation code natural numbers set perfect squares newton method efficiently approximate square roots 
set composite numbers np denoting decimal notation natural number associated polynomial time checking relation 
shown fact set composite numbers answering longstanding open question 

history importance importance vs np question stems successful theories np completeness complexity cryptography potentially practical consequences constructive proof np 
theory np completeness roots computability theory originated turing church del 
computability precursors classes np classes decidable 
computably enumerable languages respectively 
say language 
semi decidable iff turing machine say versus np problem decidable iff turing machine satisfies condition halts input strings equivalent definition brings analogy np iff computable checking relation yr 
notation denote string describing turing machine define halting problem hp follows hp turing machine halts input 
turing simple diagonal argument show hp decidable 
hand hard show hp central importance computability theory notion reducibility turing defined roughly follows language turing reducible language iff oracle turing machine accepts allowed membership queries form correctly answered oracle 
restricted notion reducibility introduced defined follows 
definition 
suppose li language 
iff total computable function 
easy see decidable decidable 
fact provides important tool showing undecidability example hp undecidable 
notion np complete notion computability theory definition 
language complete iff language easy show hp complete 
turns natural undecidable languages fact complete 
transitive show language complete suffices show hp notion polynomial time computation introduced edmonds part early development computational complexity theory earlier von neumann distinguished polynomial time exponential time algorithms 
edmonds called polynomialtime algorithms algorithms linked tractable algorithms 
standard complexity theory identify polynomial time feasible digress discuss point 
course literally true polynomial time algorithm feasibly executed small inputs example computer program requiring steps executed input small 
defensible statement see feasibility thesis 
natural problem feasible algorithm iff polynomial time algorithm 
examples natural problems feasible polynomial time algorithms abound integer arithmetic linear algebra network flow linear programming graph problems connectivity shortest path minimum spanning tree bipartite matching hand deep results robertson seymour provide potential source counterexamples thesis stephen cook prove minor closed family graphs recognized polynomial time fact time algorithms supplied method huge constants feasible 
potential counterexample removed finding feasible algorithm 
example feasible recognition algorithm known class planar graphs currently known class graphs embeddable cycles linked 
examples minor closed families 
course words natural feasible thesis explained generally consider class parameter natural set graphs embeddable surface genus 
mention concerns related direction thesis 
comes randomized algorithms 
discuss section possibility source random bits greatly reduce recognition time required language 
note clear truly random source exists nature 
second concern comes quantum computers 
computer model incorporates idea superposition states quantum mechanics allows potential exponential speed computations turing machines 
example shor shown quantum computer algorithm able factor integers polynomial time polynomial time integer factoring algorithm known turing machines :10.1.1.144.6148
physicists far unable build quantum computer handle half dozen bits threat feasibility thesis hypothetical 
returning historical treatment complexity theory author introduced notion np completeness polynomial time analog completeness reduction polynomial time analog turing reducibility reducibility 
main results natural problems including satisfiability sat defined subgraph isomorphism np complete 
year karp completeness results show natural problems np complete forcefully demonstrating importance subject 
karp introduced standard notation np redefined np completeness polynomial time analog reducibility definition standard 
levin independently cook karp defined notion universal search problem similar np complete problem gave examples including satisfiability 
standard definitions concerning np completeness close analogs definitions 
definition 
suppose li language 
reducible iff polynomial time computable function 
definition 
language np complete iff np language np 
proposition easy prove part uses transitivity part follows part 
proposition 

np complete np np complete 
versus np problem np complete np 
notice parts close analogs computability theory 
analog part simply complete undecidable 
part basic method showing new problems np complete part explains probably waste time looking polynomial time algorithm np complete problem 
practice member np expressed decision problem corresponding language understood mean set strings coding instances decision problem standard coding methods 
problem satisfiability propositional formula determine satisfiable 
show np define polynomial time checking relation holds iff codes propositional formula codes truth assignment variables true 
problem shown np complete essentially showing polynomial time turing machine recognizes checking relation np language polynomial time algorithm takes input string produces propositional formula fx describing computation input variables representing unknown string fx satisfiable iff accepts input important special case satisfiability sat shown np complete 
instances sat restricted formulas conjunctive normal form literals clause 
example formula instance sat truth assignment satisfies formula rue alse 
hundreds np complete problems identified including set positive integers decimal notation target subset summing graph problems graph hamiltonian cycle 
clique consisting half vertices 
vertices colored colors distinct colors adjacent vertices 
problems give rise scheduling routing problems industrial importance 
book provides excellent subject np complete problems listed appendix 
associated decision problem np search problem string find string satisfying checking relation problem determine instance problem 
said certificate case np complete problem easy see search problem efficiently reduced corresponding decision problem 
fact np associated search problem np problem polynomial time algorithm 
example algorithm decision problem satisfiability find truth assignment satisfying satisfiable formula variable turn setting true false whichever case keeps satisfiable 
set complements np languages denoted conp 
complement np complete language thought np np conp 
set taut tautologies propositional formulas true assignments standard example conp complete language 
conjecture np conp stephen cook equivalent assertion formal proof system suitably defined tautologies short polynomial bounded proofs tautologies 
fact motivated development rich theory propositional proof complexity goals prove superpolynomial lower bounds lengths proofs standard propositional proof systems 
interesting examples np problems known np complete 
example graph isomorphism problem undirected graphs determine isomorphic 
example set composite numbers 
mentioned section set np checking relation known 
search problem associated checking relation equivalent problem integer factoring thought solvable polynomial time 
fact efficient factoring algorithm break rsa public key encryption scheme commonly allow presumably secure financial transactions internet :10.1.1.40.5588
np decision problem complexity equivalent integer factoring 
integer smallest prime divisor log queries binary search 
easy see complement np certificate showing complete prime decomposition example problem np np complete 
computational complexity theory plays important role modern cryptography 
security internet including financial transactions depends complexity theoretic assumptions difficulty integer factoring breaking des data encryption standard 
np assumptions false 
specifically algorithm solving sat steps factor digit numbers minutes 
practical algorithm solving np complete problem showing np devastating consequences cryptography practical consequences positive nature just efficient solutions np hard problems important industry 
example transform mathematics allowing computer find formal proof theorem proof reasonable length formal proofs easily recognized polynomial time 
theorems may include cmi prize problems 
formal proofs may initially intelligible humans problem finding intelligible proofs reduced finding recognition algorithm intelligible proofs 
similar remarks apply diverse creative human endeavors designing airplane wings creating physical theories composing music 
question case extent efficient algorithm recognizing result 
fundamental problem artificial intelligence solution aided np solver allowing easy testing recognition theories 
np may happen np problem susceptible polynomial time algorithm works inputs 
render cryptography impossible bring benefits world np 
motivates levin theory average case completeness versus np problem np question replaced question np problem reasonable probability distribution inputs solved polynomial time average 
smale lists vs np question problem mathematical problems century 
smale interested classical version question version expressed terms field complex numbers 
turing machines replaced machine model capable doing exact arithmetic zero tests arbitrary complex numbers 
vs np question replaced question related hilbert polynomial time algorithm set multivariate polynomials determines common zero 
see development complexity theory setting 
books papadimitriou sipser provide introductions mainstream complexity theory :10.1.1.32.420

conjecture attempts prove complexity theorists believe np 
partly explained potentially consequences np mentioned better reasons 
explain considering possibilities turn np np 
suppose np consider prove 
obvious way exhibit polynomial time algorithm sat known np complete problems false proofs form 
standard toolkit available devising polynomial time algorithms including greedy method dynamic programming reduction linear programming subjects course algorithms typical undergraduate computer science 
importance industry vast number programmers engineers attempted find efficient algorithms np complete problems past years success 
similar strong motivation breaking cryptographic schemes assume np security 
course possible nonconstructive argument robertson seymour proofs mentioned earlier conjunction feasibility thesis show np yielding feasible algorithm standard np complete problems 
best proven upper bound algorithm solving sat approximately number variables input formula 
suppose hand np consider prove 
general methods tried diagonalization reduction boolean circuit lower bounds 
method diagonalization reduction successfully computability theory prove host problems undecidable halting problem 
successfully complexity theory prove super exponential lower bounds hard decidable problems 
example presburger arithmetic order theory integers addition decidable theory fischer rabin proved turing machine deciding theory cn steps worst case :10.1.1.16.9759
general lower bounds diagonalization reduction relativize stephen cook continue apply setting problem instance solving turing machine membership queries arbitrary oracle set shown oracle set relative np suggesting diagonalization reduction separate classes 
results complexity theory mentioned 
interesting note relative generic oracle np 
boolean circuit finite acyclic graph non input node gate labelled boolean connective typically 
input nodes labeled variables xn assignment variable circuit computes bit value gate including output gate obvious way 
hard see language polynomial size family boolean circuits bn bn inputs bit string length applied input nodes bn output bit bn iff case say bn computes prove np suffices prove super polynomial lower bound size family boolean circuits solving specific np complete problem sat 
back shannon proved boolean functions boolean circuit computing requires gates 
unfortunately counting argument gives clue prove lower bounds problems np 
exponential lower bounds np problems proved restricted circuit models including monotone circuits bounded depth circuits unbounded fan gates see 
attempts find super linear lower bounds unrestricted boolean circuits explicitly boolean functions met total failure best lower bound proved far 
razborov rudich explain failure pointing methods far classified natural proofs natural proofs general circuit lower bounds doomed failure assuming certain complexity theoretic conjecture asserting strong pseudorandom number generators exist 
generators constructed assuming hardness integer factorization infer surprising result natural proof general circuit lower bound give rise efficient factoring algorithm currently known 
failure complexity theory prove interesting lower bounds general model computation pervasive failure prove np 
consistent knowledge satisfiability polynomial time algorithm linear time algorithm turing machine 
applies problems mentioned karp original 
complexity class separations know exist prove 
example consider sequence complexity class inclusions logspace np pspace simple diagonal argument shows proper subset prove particular adjacent inclusion proper 
example linear size class languages computed family bn boolean circuits size 
known np subset linear size kannan proved languages polynomial hierarchy generalization versus np problem np linear size 
np polynomial hierarchy collapses proposition 
linear size np 
proposition interpreted method proving np usual belief hypothesis false 
fundamental question complexity theory source random bits speed substantially recognition languages provided willing accept small probability error 
class bpp consists languages recognized randomized polynomial time algorithm exponentially small error probability input 
course bpp known inclusion proper 
set prime numbers bpp known reason thinking bpp randomized algorithms successfully executed deterministic pseudo random number generator source random bits 
indirect intriguing connection questions bpp np 
class languages recognizable exponential time class languages turing machine tm cn 
assertion language requires exponential circuit complexity 
assertion circuit family bn computing sufficiently large bn gates 
proposition 
bpp np 
implication lovely theorem impagliazzo wigderson second intriguing observation strengthens proposition 
fact concludes np weaker assumption language computed boolean circuit family bn bn fewer gates maximum needed compute boolean function 
consensus hypothesis true 
point proposition particular relative pspace complete oracle assertion holds bpp np 
construction needed prove np giving small circuits languages constructions successfully example showing ip interactive polynomial time contains 
constructions key technique represent boolean functions multivariate polynomials finite fields 
appendix definition turing machine turing machine consists finite state control finite program attached read write head moving infinite tape 
tape divided squares capable storing symbol finite alphabet includes blank symbol machine specified input alphabet subset including blank symbol step computation state specified finite set possible states 
initially finite input string written adjacent squares tape squares blank contain head scans left symbol input string stephen cook initial state 
step state head scanning tape square containing tape symbol action performed depends pair specified machine transition function program 
action consists printing symbol scanned square moving head left right square assuming new state 
formally turing machine tuple finite nonempty sets 
state set contains special states 
transition function satisfies 
interpretation state scanning symbol new state symbol printed tape head moves left right square depending 
assume sets disjoint 
configuration string empty string interpretation configuration state xy tape head scanning left symbol configurations holds xs nonempty 
xs empty 

bs empty 
configuration halting 
note non halting configuration unique configuration computation input unique sequence configurations empty ci ci ci computation sequence infinite ends halting configuration 
computation finite number steps number configurations number steps infinite 
say accepts iff computation finite final configuration contains state 
acknowledgments avi wigderson hugh helpful suggestions improving earlier version 
agrawal saxena primes ann 
math 

alon boppana monotone circuit complexity boolean functions combinatorica 
baker gill solovay 
np question siam journal computing 
blum shub smale complexity real computation springer verlag new york 
blum impagliazzo generic oracles oracle classes proceedings th annual symposium foundations computer science chandra ed ieee computer society press los angeles 
versus np problem boppana sipser complexity finite functions handbook theoretical computer science volume algorithms complexity van leeuwen ed elsevier mit press cambridge ma 
cormen leiserson rivest stein algorithms nd edition mcgraw hill new york 
intrinsic computational difficulty functions proceedings international congress logic methodology philosophy science bar ed elsevier north holland amsterdam 
cook complexity theorem proving procedures conference record third annual acm symposium theory computing acm new york 
cook computational complexity higher type functions proceedings international congress mathematicians kyoto japan springer verlag berlin 
cook impagliazzo tight relationship generic oracles type complexity theory information computation 
cook relative efficiency propositional proof systems symbolic logic 
edmonds minimum partition matroid independent subsets res 
nat 
bur 
standards sect 

fischer rabin super exponential complexity presburger arithmetic complexity computation ams providence ri :10.1.1.16.9759
garey johnson computers intractability guide theory np completeness freeman san francisco 
goldreich foundations cryptography volume cambridge university press cambridge uk 
hastad optimal lower bounds small depth circuits randomness computation advances computing research jai press greenwich ct 
impagliazzo personal view average case complexity th ieee annual conference structure complexity theory ieee computer society press washington dc 
impagliazzo wigderson bpp requires exponential circuits xor lemma acm symposium theory computing stoc acm new york 
kannan circuit size lower bounds non reducibility sparse sets information control 
karp reducibility combinatorial problems complexity computer computations miller thatcher eds plenum press new york 
bounded arithmetic propositional logic complexity theory cambridge university press cambridge 
levin universal search problems russian 
english translation trakhtenbrot survey russian approaches brute force search algorithms annals history computing 
levin average case complete problems siam computing 
papadimitriou computational complexity addison wesley reading ma :10.1.1.32.420
razborov lower bounds monotone complexity boolean functions soviet math 
dokl 

razborov rudich natural proofs journal computer system sciences 
rivest shamir adleman method obtaining digital signatures public key cryptosystems comm :10.1.1.40.5588
acm 
robertson seymour graph minors xiii journal combinatorial theory 
shamir ip pspace 
shannon synthesis terminal switching circuits bell system technical journal 
shor polynomial time algorithms prime factorization discrete logarithms quantum computer siam computing :10.1.1.144.6148
sipser theory computation pws publ boston 
stephen cook smale mathematical problems century math 

smolensky algebraic methods theory lower bounds boolean circuit complexity acm symposium theory computing stoc acm new york 
solovay strassen fast monte carlo test primality siam journal computing 
turing computable numbers application proc 
london math 
soc 

von neumann certain zero sum person game equivalent optimal assignment problem contributions theory games ii kahn tucker eds 
princeton univ press princeton nj 
