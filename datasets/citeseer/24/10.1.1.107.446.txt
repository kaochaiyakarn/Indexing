messor load balancing swarm autonomous agents alberto montresor hein meling babao glu technical report ublcs september department computer science university bologna zamboni bologna italy university bologna department computer science research technical reports available postscript format anonymous ftp cs unibo pub tr ublcs www url www cs unibo 
plain text abstracts organized year available 
local authors reached mail address name cs unibo 
questions comments addressed admin cs unibo 
titles ublcs technical report series formalization analysis prototyping mobile code systems ph thesis mascolo 
nature inspired search techniques combinatorial optimization problems ph thesis rossi 
desktop interfaces internet users efficiency usability issues ph thesis january 
expert system evaluation multiple sclerosis february 
probabilistic information flow process algebra aldini april revised september 
architecting software systems process algebras bernardo ciancarini july 
non determinism probabilistic timed systems general distributions aldini july 
anthill framework development agent peer peer systems babaoglu meling montresor november revised september 
timed join calculus laneve february 
process algebraic approach analysis probabilistic non interference aldini gorrieri march 
quality service resources optimization wireless networks mobile hosts ph thesis march 
specification analysis stochastic real time systems ph thesis march 
qos adaptive middleware services ph thesis march 
semantic web formal mathematics ph thesis schena march 
revisiting interactive markov chains june 
user untraceability generation internet proposal august 
adaptive resilient self organizing peer peer systems montresor meling babaoglu september 
self organizing self repairing resilient large scale distributed systems montresor babaoglu meling september 
messor load balancing swarm autonomous agents montresor meling babaoglu september 
messor load balancing swarm autonomous agents alberto montresor hein meling babao glu technical report ublcs september peer peer systems characterized decentralized control large scale extreme dynamism environment 
developing applications cope characteristics requires paradigm shift puts adaptation resilience self organization primary concerns 
complex adaptive systems cas commonly explain behavior biological social systems appropriate response requirements 
order pursue ideas presents messor decentralized load balancing algorithm techniques multi agent systems drawn cas 
novel grid computing system designed messor algorithm allowing arbitrary users initiate computational tasks 
department computer science university bologna zamboni bologna italy email montresor babaoglu cs unibo department telematics norwegian university science technology heim norway email meling item ntnu informally peer peer systems distributed systems concept resource sharing direct exchange peer nodes nodes having role equal responsibility 
exchanged resources include content popular file sharing applications storage capacity cpu cycles computational storage grid systems :10.1.1.110.5867
distributed computing intended synonymous computing long term invented initial desire subverted advent client server computing popularized world wide web 
modern term distributed computing intended pioneers differ important aspects 
applications reach harness outer edges internet consequently involve scales previously 
second definition excludes form centralized structure requiring control completely decentralized 
importantly environments applications deployed exhibit extreme dynamism structure load 
topology system typically changes rapidly due nodes voluntarily coming going due involuntary events crashes partitions 
load system may shift rapidly region example certain files hot file sharing system computing needs node suddenly increase distributed computing system 
order deal scale dynamism characterize systems paradigm shift required includes self organization adaptation resilience fundamental properties 
believe complex adaptive systems cas commonly explain behavior certain biological social systems basis new programming paradigm applications 
cas framework system consists large number relatively simple autonomous computing units agents 
cas typically exhibit called emergent behavior agents taken individually may easily understood behavior system simple explanation 
words interactions agents spite simplicity give rise richer complex patterns generated single agents isolation 
instance cas drawn nature consider ant colony 
species ants particular belonging messor species known group objects environment dead piles clean nests 
observing behavior mislead thinking cleanup operation coordinated leader ants 
resnick describes artificial ant colony exhibiting behavior simulated environment 
resnick artificial ant follows simple rules wanders randomly encounters object ii carrying object drops object continues wander randomly iii carrying object picks object continues wander 
despite simplicity colony ants able group objects large clusters independent initial distribution 
renders cas particularly attractive perspective fact global properties adaptation self organization resilience achieved explicitly embedding individual agents 
example rules specific initial conditions unforeseen scenarios variations environment presence failures 
large colonies global behavior surprisingly adaptive resilient 
order pursue ideas developed anthill novel framework application development ideas multi agent systems evolutionary programming borrowed cas 
goals anthill provide environment simplifies design deployment systems paradigms provide testbed studying experimenting cas systems order understand properties evaluate performance 
anthill system composed collection interconnected nests 
nest peer entity storage computational resources available swarms ants autonomous agents travel network trying satisfy user requests 
life ants interact services provided visited nests ublcs anthill storage management ant scheduling 
details design implementation anthill companion 
having developed prototype anthill process testing viability ideas regarding cas developing common applications file sharing grid computing anthill 
application called messor 
messor grid computing system aimed supporting concurrent execution highly parallel time intensive computations workload may decomposed large number independent jobs 
computational power offered network anthill nests exploited messor assigning set jobs comprising computation dispersed set nests 
determine balance load computing nodes messor algorithm inspired behavior artificial ant described messor ants drop objects carrying having randomly encountering object concentrations 
colonies messor ants try disperse objects specifically jobs uniformly environment clustering piles 
computations profitably supported messor 
example seti home project enormous amount radio signals registered radio telescopes subdivided large number data sets independently analyzed search evidence extra terrestrial intelligence distributed net umbrella distributed computing projects including cryptography challenges brute force attacks performed subdividing key spaces independent portions project effort designed help scientists find treatment toxin performing screening analysis large sets molecules 
projects master slave architecture master node enabled generate assign new jobs 
slave machines relegated role mere executors sense peer peer philosophy 
messor completely decentralized allowing node system generate new jobs submit network 
application designed way may interesting groups entities want share resources order exploit resulting computing power cost effectively 
rest organized follows 
section gives brief overview anthill framework 
section provide informal system model specification messor followed architecture description details messor load balancing algorithm 
section preliminary simulation results section concludes 
anthill anthill uses terminology derived ant colony metaphor 
anthill system composed self organizing overlay network interconnected nests illustrated 
nest middleware layer capable hosting resources performing computations 
network characterized absence fixed structure nests come go discover top communication substrate 
nests interact local instances applications provide set services 
applications interface user network services distributed nature collaboration nests 
example application may file sharing system service distributed indexing service file sharing application locate files 
application performs requests listens replies local nest 
requests replies constitute interface applications services 
nest receives request local application appropriate service handling request selected set available services 
set dynamic new services may installed user 
services implemented means ants autonomous agents able travel nest network 
response request ants generated assigned particular task 
ants may explore network interact nests visit order accomplish goal 
anthill specify services nest provide impose particular format requests 
provision services interpretation requests delegated ants 
ublcs resources nests resources resources resources resources overview nest network 
resources file manager url manager routing table job manager load storage network file sharing service grid service ant scheduler communication layer architecture nest 
nest anthill illustrates architecture nest composed logical modules ant scheduler communication layer resource managers 
ant scheduler module multiplexes nest computation resource visiting ants 
responsible enforcing nest security providing sandbox ants order limit resources available ants prohibit ants performing potentially dangerous actions local file access 
communication layer responsible network topology neighbor management ant movement nests 
network node unique identifier 
order communicate remote node identifier known 
set remote nests known node called neighbors node 
note concept neighborhood involve distance metrics metrics application dependent appropriately chosen developers 
collection neighbor sets defines nest network highly dynamic 
example communication layer may discover new neighbor may forget known neighbor considered unreachable 
discovery removal processes may mediated ants performed directly communication layer 
case ants may report new remote nodes visited may fail move neighbor communication problem 
case exact implementation discovery removal depends underlying communication substrate 
nests offer resources visiting ants resource managers 
example resources files file sharing system cpu cycles computational grid respective resource managers disk storage manager job scheduler 
resource managers typically enforce set policies managing inherently limited resource 
example lru policy may discard items managed file manager space needed new files 
service installed nest associated set resource managers 
example nest provides distinct services file sharing service distributed index file retrieval routing table ants making routing decisions file manager maintaining shared files url manager contains distributed index computational grid service job manager executes jobs assigned 
ants ants generated nests response user requests ant tries satisfy request generated 
ant move nest nest fulfills task task requires may return back originating nest 
ants satisfy task time live ttl parameter terminated 
moving ant carries state may contain request results ant specific data 
ant algorithm contained run method invoked visited nest 
ant code may transmitted ant state needed appropriate code caching mechanisms avoid download ublcs load balancing messor algorithm update new versions available 
ants communicate directly communicate indirectly leaving information related service implementing appropriate resource manager visited nests 
example ant implementing distributed lookup service may leave routing information helps subsequent ants direct region network contains searched key 
form indirect communication real ants known stigmergy 
behavior ant determined current state interaction resource managers algorithm may non deterministic 
example ant may probabilistically decide follow believed best route accomplishing task choose explore alternative regions network 
anthill framework java prototype anthill runtime environment developed jxta open source project promoted sun microsystems 
jxta aimed establishing programming platform systems identifying small set basic facilities necessary support applications providing building blocks higher level services 
benefits basing implementation jxta 
example jxta allows different transport layers communication including tcp ip deals issues related firewalls nat 
addition runtime environment anthill includes simulation environment help developers analyze evaluate behavior systems 
simulating different applications require developing appropriate ant algorithms corresponding request generator characterizing user interactions application 
simulation study specified xml defining collection component classes set parameters component initialization 
example component classes specified include simulated nest network request generator ant algorithm simulated 
initialization parameters include duration simulation network size failure probability number requests generated type capacity resource managers ants 
flexible configuration mechanism enable developers build simulations assembling collection pre defined customized component classes simplifying process evaluating ant algorithms 
toolkits multi agent simulation anthill uses single ant implementation simulation actual run time environments avoiding cost reimplementing ant algorithms deploying 
important feature achieved careful design anthill api providing distinct implementations simulation deployment 
load balancing messor section messor application services relies 
messor aimed supporting concurrent execution highly parallel time intensive computations workload decomposed large number independent jobs 
system model messor specification messor nests may fail halting prematurely execute algorithm 
halted nests may subsequently perform recovery action lose information stored volatile memory regain access data maintained stable storage 
say nests crashed halts perform recovery action 
say nest correct crashed 
nests system may communicate directly underlying communication layer 
communication nests may disrupted presence partitionings subdivide network set disjoint partitions 
ublcs result upload download nest request router network ant scheduler communication layer messor application layer job request start download result upload messor service layer load storage job manager job download load balancing messor job upload 
architecture node supporting messor result repository job queue nests belonging partition may communicate reliably nests distinct partitions communicate 
partitionings may temporary due subsequent repairs 
messor system composed collection interconnected anthill nests configured run messor software 
nest submit jobs nest network job composed input data algorithm computed data 
jobs scheduled executed nest job resides invoking job algorithm 
say job completed associated algorithm executed completion 
completed job outputs result data obtained job computation 
nest messor offers simple api users enabling submit new jobs computed collecting results jobs computed 
originator nest job nest job submitted 
submitted jobs may remain originator may transferred nests order exploit unused computational power 
job completed result sent back originator 
user notified job result result stored locally case user may periodically poll nest obtain collected results 
messor guarantees jobs submitted correct originator eventually completed results delivered originator 
property may satisfied simply letting correct originator compute jobs messor attempts disperse load uniformly cooperating nodes 
messor architecture architecture node supporting messor application shown 
messor nodes composed main layers messor application layer responsible interacting local user accepting requests collecting computed results behalf furthermore responsible keeping track job assignments order re insert system jobs assigned nodes may crashed 
messor service layer responsible job execution load balancing 
application layer receives jobs user delivers job requests request router contained nest 
module analyze request routes appropriate service installed nest 
case messor job requests delivered messor service layer 
order achieve goals application layer maintains database jobs originated local user status respect computation 
status may corresponds ublcs load balancing messor computed results available identifier nest job assigned 
results computed remote nests downloaded application layer outside ant communication mechanism offered nests efficiency reasons 
lease mechanism keep track operational nodes order identify crashed nodes re insert jobs assigned 
service layer exploits ant communication scheduling facilities provided nests 
main resource managers employed load storage contains information estimated load remote nests job manager responsible executing jobs assigned local nest 
load storage implementation memory main data structure maintained visiting ants utilization explained section 
job manager maintains database jobs computed local nest implemented queue acts scheduler selects job queue executes 
computed job manager responsible uploading result application layer job originator 
jobs inserted job queue messor service layer received local request request router downloading nests 
download process triggered messor ants responsible load balancing actual download performed band mediation ants 
messor ant algorithm interesting component messor ant algorithm 
order understand basic idea messor consider variation artificial ant algorithm described ant carrying object wanders randomly encounters object picks ii ant carrying object ant drops having randomly encountering objects 
colonies ants try disperse objects uniformly environment clustering piles 
algorithm messor ants inspired rules described 
environment messor ants live network nests 
objects pick drop correspond actual jobs existing nest network 
life time messor ant may assume different states 
state ant wanders network finds overloaded nest point ant records identifier nest switch state 
state ant wanders looking underloaded nest 
nest ant requests local job manager transfer jobs overloaded nest underloaded switches back state process repeats 
transfer process performed direct downloading nests avoid carrying potentially large amounts data representing jobs node wandering searching underloaded nodes 
load nest defined number jobs currently job queue nest alternatively information potential computing power needed perform jobs available load nest may defined information 
concepts overloaded underloaded nests relative average load nests visited ant 
definition enable ants decisions job transfers nests unbalanced loads basis local information global knowledge 
walks performed completely random 
wandering ants collect information load visited nests 
information stored load storage component nest subsequent ants drive phases step ant randomly selects node visit believed overloaded underloaded search min 
way ants move faster regions network interested 
avoid system biased subset nests believed underloaded ants may occasionally exploration probability select nest uniform distribution enabling exploration entire network 
messor algorithm shown 
state ant represented set ublcs integer state max queue visits new queue integer method max max state min method min min state max mng method run view mng view view mng view state max elseif state min method state list view list list state view list dev state visits visits add mng view view move 
pseudo code description algorithm load balancing messor variables listed preamble 
current state vs ant stored variable state 
circular queue visits contains nest identifiers load information visited nests information update load information stored load storages 
variables contain load identifier nest maximum minimum load visited 
ant reaches nest run method executed 
parameter passed run proxy object ants communicate nest 
action run obtain local job manager load storage variables initialized method shown simply substituting load value identifier nest maximum minimum load 
method run invokes methods depending current state 
step method decide keep traveling network searching nodes higher loads switch state 
ant explore network ratio maximum minimum load values stored ant state reaches target value represented 
furthermore ant probability keep searching target ratio reached providing way ants continue search overloaded nests 
ant decides keep searching method invoked 
method selects nest moves invoking method move 
selection nest depends ant decides explore network completely random direct region network expected overloaded 
decision tossing coin probability 
decision explore nest selected normal distribution nests contained local load storage believed overloaded 
moving nest ant updates local load storage current content visits updates visits variable load value identifier current nest 
method similar difference ant decides switch state case balancing operation mediated involved job manager started variables re initialized 
ublcs performance evaluation performance evaluation 
load distribution iterations 
section preliminary results messor obtained anthill simulator 
details companion :10.1.1.107.446
illustrate load balancing process performed messor evolves time 
results obtained network idle nests initially connected form ring visualization reasons 
initially jobs generated single node 
different histograms depict load observed nests axis iterations algorithm 
iteration set ants perform single step executes run method moves nest 
iteration node limited job transfers nodes 
illustrate iterations required transfer jobs nodes network iterations load perfectly balanced 
iterations spent exploring neighborhood ring network 
iterations new connections created transfer jobs remote parts network 
discussion argued techniques borrowed cas form basis new paradigm building systems adaptive resilient self organizing 
prove viability idea anthill load balancing algorithm exhibit properties 
messor ants adapt behavior load conditions wandering randomly load uniformly balanced moving rapidly regions network highly unbalanced loads exist 
system resilient failures jobs assigned crashed nodes simply re inserted network nest generated 
messor self organizing new nests may join network computing power rapidly exploited carry computation soon ants discover nest start assign jobs transferred nests 
may compared existing architectures distributed computing 
distributed computing projects master slave paradigm wellknown centralized master responsible supplying slave machines jobs 
kind approach called hybrid seti home distributed net capable take advantage huge amount computing resources available internet design centralized 
messor node network capable producing new jobs introduce network computation 
messor may compared called grid computing projects globus legion :10.1.1.25.8254
goals messor simplistic projects ublcs complex architectures capable organize computations memory storage computing requirements jobs relationships jobs 
messor interesting projects presents completely decentralized architecture 
agent cloning approach facilitate load balancing matchmaking agents advertise capabilities underloaded agents 
allows overloaded agents find underloaded may clone migrate 
matchmaking agents inappropriate grid computing systems impose certain degree centralization 
systems exist achieving dynamic load distribution particular process migration systems mosix sprite mach lsf 
apply cas approach problem employ centralized load balancing algorithm making unsuitable deployment grid computing applications 
mosix system decentralized probabilistic load balancing algorithm similar adopted messor 
mosix requires prior knowledge distributed messor self configuring system 
mosix kernel level process migration system unsuitable heterogenous environments 
anthill share goals project diet decentralised information ecosystem technologies aimed development robust adaptable scalable software platform multi agent systems applied information processing 
conclude highlighting fact messor prototype 
important features needed distributed computing systems implemented 
example considered issues related security apart enclosing visiting ants limit set actions performed 
mechanisms authenticate users keep account number jobs submitted computed nests needed mechanisms may prove useful defense denial service attacks 
important believe lacks messor algorithm novelty resides way load system balanced 
sense preliminary results obtained messor simulations interesting 
studies needed improve understanding behavior messor ants 
particular interested obtaining evaluation number ants needed manage network 
plan implement mechanism bound number ants system simultaneously adding module nest kills ants excess creates new ants nest visited 
module adaptive behavior increasing number ants load highly unbalanced 
anderson 
seti home 
oram editor peer peer harnessing benefits disruptive technology chapter 
reilly mar 
project 
www chem ox uk 

babao glu meling montresor 
anthill framework development agent peer peer systems 
proc 
th int 
conf 
distributed computing systems vienna austria july 
barak 
distributed load balancing policy multicomputer 
software practice experience sept 
bonabeau dorigo theraulaz 
swarm intelligence natural artificial systems 
oxford university press 

distributed implementation swan peer peer lookup system mobile agents 
proc 
st workshop agent peer peer systems bologna italy july 
ublcs chapin grimshaw 
legion resource management system 
proc 
th workshop job scheduling strategies parallel processing apr 
distributed net home page 
www distributed net 
foster kesselman :10.1.1.25.8254
globus metacomputing infrastructure toolkit 
international journal supercomputer applications 
foster kesselman editors 
grid blueprint computing infrastructure 
morgan kaufmann 

la reconstruction du nid les coordinations chez sp 

project jxta 
www jxta org 
kan gnutella 
oram editor peer peer harnessing benefits disruptive technology chapter 
reilly mar 
kubiatowicz oceanstore architecture global scale persistent storage 
proc 
th international conference architectural support programming languages operating systems cambridge ma nov 
langley 
freenet 
oram editor peer peer harnessing benefits disruptive technology chapter 
reilly mar 
marrow koubarakis agents decentralised information ecosystems diet approach :10.1.1.107.446
schroeder editors proc 
symposium information electronic commerce aisb pages university york united kingdom march 
douglis wheeler zhou 
process migration 
acm computing surveys sept 
minar burkhart langton 
swarm simulation system toolkit building multi agent simulations 
technical report swarm development group june 
www swarm org 
mitchell 
genetic algorithms 
mit press apr 
montresor 
babao glu meling 
gnutant free text searching peer peer systems 
technical report ublcs dept computer science university bologna may 
montresor meling :10.1.1.107.446
babao glu 
messor load balancing swarm autonomous agents 
technical report ublcs dept computer science university bologna may 
preparation 
resnick 
termites traffic jams explorations massively parallel 
mit press 
rowstron druschel 
storage management caching past large scale persistent peer peer storage utility 
proc 
th acm symp 
operating systems principles canada nov 
russo 
design implementation framework agent peer peer systems 
master thesis university bologna july 
shehory sycara chalasani jha 
agent cloning approach agent mobility resource allocation 
ieee communications magazine july 

listening napster 
oram editor peer peer harnessing benefits disruptive technology chapter 
reilly mar 
weiss 
multiagent systems modern approach distributed artificial intelligence 
mit press 
ublcs 
