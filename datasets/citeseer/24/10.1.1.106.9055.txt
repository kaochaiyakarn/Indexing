types safe locking static race detection java martin abadi microsoft research university california santa cruz cormac flanagan university california santa cruz stephen freund williams college article presents static race detection analysis multithreaded shared memory programs focusing java programming language 
analysis type system captures common synchronization patterns 
supports classes internal synchronization classes require client side synchronization thread local classes 
order demonstrate effectiveness type system implemented checker applied lines hand annotated java code 
number race conditions standard java libraries test programs 
checker required fewer additional type annotations lines code 
article describes improvements facilitate checking larger programs algorithm annotation inference user interface clarifies warnings generated checker 
extensions enabled checker identifying race conditions large scale software systems lines code 
categories subject descriptors logics meanings programs specifying verifying reasoning programs software engineering software program verification reliability programming languages language classifications concurrent distributed parallel languages programming languages formal definitions theory semantics syntax martin abadi started compaq partly supported national science foundation ccr ccr faculty research funds granted university california santa cruz 
cormac flanagan started compaq partly supported faculty research funds granted university california santa cruz national science foundation ccr 
stephen freund started compaq partly supported faculty research funds granted williams college national science foundation ccr ccr 
author addresses abadi flanagan department computer science university california santa cruz santa cruz ca email abadi cormac cs ucsc edu freund department computer science williams college ma email freund cs 
williams edu 
permission digital hard copies part personal classroom granted fee provided copies distributed profit direct commercial advantage copies show notice page initial screen display full citation 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists component works requires prior specific permission fee 
permissions may requested publications dept acm broadway new york ny usa fax permissions acm org 
acm acm transactions programming languages systems vol 
march pages 
abadi general terms languages verification reliability additional key words phrases concurrent programs race conditions type system type inference 
race conditions common insidious errors multithreaded programs 
race condition occurs threads manipulate shared data structure simultaneously synchronization 
race conditions benign affect program correctness cases race conditions result program crashes incorrect results unintended program behavior 
race conditions avoided careful programming discipline protecting data structure lock acquiring lock manipulating data structure birrell 
lock held thread time adherence lock synchronization discipline ensures race free program 
current programming tools provide little support synchronization discipline 
easy write program inadvertently neglects perform crucial synchronization operations 
synchronization errors detected traditional compile time checks 
furthermore resulting race conditions scheduler dependent difficult catch runtime testing techniques 
single synchronization error correct program may yield race condition cause takes weeks identify savage 
article investigates static analysis system detecting race conditions java programs 
analysis supports lock synchronization discipline associating lock shared field verifying appropriate lock held shared field accessed read updated 
express reasoning checks performed analysis extension java type system 
start presenting initial type system suffices verify example programs core subset java free race conditions 
order accommodate larger realistic multithreaded programs extend initial type system number additional features 
features include classes parameterized locks allow fields class protected lock external class notion objects local particular thread safely accessible synchronization mechanisms escaping type system places proves restrictive particular race condition considered benign 
order evaluate utility resulting type system implemented typechecker tested variety java programs totaling lines code 
programs include standard java input output package java io interpreter web scripting language webl mobile ambient calculus implementation 
acm transactions programming languages systems vol 
march 
types safe locking static race detection java checking programs type system requires adding type annotations 
typically fewer annotations required lines code 
annotations inserted response feedback checker 
annotation process proceeded rate roughly lines code programmer hour 
process discovered number race conditions programs checked including race condition class java util vector java io package webl implementation 
far complete type system proved sufficiently expressive accommodate majority synchronization patterns programs 
despite successes annotation cost initial checker prevented adoption large scale software development projects particularly sizable code base exists 
second half article extends race condition checker key features annotation inference algorithm automatically computes annotations user interface reduces burden inspecting warnings generated checker 
annotation inference enabled analyze programs lines code user interface helped identifying race conditions programs 
presentation results proceeds follows 
section introduces small concurrent subset java provide formal description type system 
section describes initial type system plus extensions classes parameterized locks thread local classes 
section describes prototype implementation including escape mechanisms 
section discusses experiences checking java programs 
section turn attention issues scale extensions check large programs annotation inference algorithm user interface 
section describes experiences applying tools large examples 
relate projects section conclude section 
appendix contains formal definition type system proofs 
article preliminary form conferences workshops flanagan abadi flanagan abadi flanagan freund flanagan freund 
focused lambda calculi object calculi java relied type constructions considered example existential types 
treated deadlocks race conditions common multithreaded programming 

multithreaded subset java section introduces small multithreaded subset java 
language derived classicjava flatt sequential subset java adopt type structure semantics classicjava 
acm transactions programming languages systems vol 
march 
abadi syntax informal semantics fig 

grammar 
syntax shown 
program sequence class declarations initial expression starting point program execution 
class declaration associates class name body consists super class sequence field declarations sequence method declarations 
self variable implicitly bound field method declarations 
field declaration includes initializer expression optional final modifier modifier field updated initialization 
opt grammars denote empty string 
field initializer may integer null variable 
method declaration consists method name return type number types arguments expression method body 
types include class types integers 
class types include class names introduced program predefined class object serves root class hierarchy 
expressions include typical ones object allocation field read update method invocation variable binding 
supports multithreaded programs including operation fork 
acm transactions programming languages systems vol 
march 
types safe locking static race detection java fig 

multithreaded bank account program 
evaluate object includes nullary method run 
fork operation spawns new thread calls run method 
evaluation performed effect result method call 
locks provided thread synchronization object associated lock states locked unlocked initially unlocked 
expression synchronized evaluated manner similar java synchronized statement subexpression evaluated yield object lock acquired subexpression evaluated lock released 
result returned result synchronized expression 
evaluating current thread said hold lock 
thread attempts acquire lock blocks lock released 
newly forked thread inherit locks held parent thread 
example programs extended language integer operations additional control structures conditional loop statements permit fields initialized freshly created objects 
adding extensions formal language introduce major technical challenges 
abbreviate occur free 
enclose expressions parentheses braces add semicolons clarity 
notation 
en xn denote parallel capture free substitution ei free occurrences xi simpler java number respects 
example includes arrays complex object initialization java 
deal full java language starting section 
acm transactions programming languages systems vol 
march 
abadi locks races multithreaded programs prone race conditions illustrated program allocates new bank account deposits account parallel 
program contains race condition threads may attempt manipulate field balance simultaneously 
particular suppose executions deposit interleaved follows thread thread int temp balance int temp balance temp temp temp temp balance temp balance temp final value balance reflects deposits account 
behavior intended 
race condition leads incorrect results 
fix error protecting field balance lock account object accessing balance lock held class account int balance int deposit int synchronized balance balance modified account implementation race free 
behave correctly multiple deposits account concurrently 

types races practice race conditions commonly avoided lock synchronization discipline example section 
type system supports programming discipline 
order enforce lock synchronization type system requires field associated lock held field read updated 
purpose type system associates lock field declaration tracks set locks held program point 
rely programmer aid verification process providing small number additional type annotations 
type annotation guarded acm transactions programming languages systems vol 
march 
types safe locking static race detection java field declaration states lock protects field type system verifies thread accesses field thread holds field lock 
type annotation requires 
ln method declaration states locks 
ln held method entry 
type system verifies locks held call site method uses assumption checking method body race free 
essence effect system jouvelot gifford determine statically locks held 
extend syntax field method declarations include type annotations 
field final opt fn guarded opt meth mn arg requires ls ls lock set lock expression refer extended language 
ensure field consistently protected particular lock irrespective assignments performed program type system requires lock expression guarded clause final expression value change program execution 
final expression simply immutable variable 
considering full java language section generalize set final expressions 
type system requires lock expressions requires clause final similar reasons 
field method types include final expressions type system supports specialized notion dependent types 
previous article flanagan abadi explored alternative approach avoids dependent types uses singleton types types single element enable tracking locks 
singleton types hidden necessary existential types 
example object type contains lock singleton lock type hide singleton type singleton type approach syntactically cumbersome requires introducing names lock name lock second name corresponding singleton type type 
singleton type approach easily support flexible subtyping relations needed object oriented languages 
example suppose subtype addition lock type contains second lock type 
hiding singleton types standard rules existential types yield desired subtyping relation limitations singleton type approach chose adopt specialized dependent types 
core type system set rules reasoning judgment ls acm transactions programming languages systems vol 
march 
abadi program checked included judgment order provide information class declarations program environment provides types free variables expression ls set final expressions describe locks held expression evaluated inferred type type rules track set locks held program point 
type rules straightforward similar classicjava 
complete set judgments rules proof soundness rules contained appendix 
briefly explain crucial rules 
rule exp sync synchronized checks final expression class type checks extended lock set includes lock held evaluated 
exp sync final ls ls synchronized judgment final hypotheses means final expression type rule exp ref guarded fn checks typed expression class type field fn type guarded lock held 
exp ref guarded ls final opt fn guarded ls ls fn judgment final opt fn guarded hypotheses means declares inherits field fn type guarded self variable provides means field refer containing object 
source syntax self bindings implicit 
order support renaming avoid name collisions judgment self binding explicit construct note apart implicitly bound field method declarations source language variable regular variable 
particular rewrite rule different variable name clarity follow java convention self variable 
order ensure protecting lock held suffices establish denotes lock expression current lock set 
general proving denote lock may undecidable 
rely conservative approximation 
attempt define approximation may simply check syntactically identical 
requiring syntactic identity restrictive cases 
particular occurrences lock expression refer acm transactions programming languages systems vol 
march 
types safe locking static race detection java object dereferenced 
account aliasing rule replaces occurrences accordingly antecedent ls ensures current lock set 
conservative approximation sufficient programs inspected 
similar aliasing situation arises section introduce types contain lock expressions 
order accommodate extension include appropriate substitutions types give type field read 
antecedent ensures formed type 
rule exp assign fn ensures appropriate lock held field updated 
exp assign ls fn guarded ls ls ls fn rule exp invoke method invocation ensures locks requires clause method declaration held call site method 
exp invoke ls mn sj requires ls ls sj ls ls ls mn judgment 
mn 
sn yn requires ls hypotheses means method expected form self variable provides means method refer containing object 
judgment ls ls simply expresses set inclusion lock sets 
rule exp fork fork checks refers object run method exp fork ls run requires ls fork int fork expression evaluates dummy result zero type int 
race free bank accounts 
type system verify synchronized bank account implementation race free adding type annotation expresses field balance guarded 
locks acm transactions programming languages systems vol 
march 
abadi fig 

bank account implementation client side locking 
required invoke method omit requires clause done deposit 
class declaration replaces corresponding class account int balance guarded int deposit int synchronized balance balance alternative implementation bank account may rely clients perform necessary synchronization operations shown 
example method signature int deposit int requires declares object lock acquired calls deposit 
necessary lock held call site program typed race free 
external locks type system previous section verify absence race conditions number interesting examples 
larger programs frequently additional synchronization patterns captured system 
order accommodate programs section extends type system classes parameterized locks section extends type system thread local classes 
type system previous section field object protected object field object 
cases allow external lock protect field 
example fields linked list protected lock external list 
acm transactions programming languages systems vol 
march 
types safe locking static race detection java accommodate programming pattern extend allow classes parameterized external locks defn class cn garg body class declaration garg ghost ghost declaration cn object class type class declaration contains possibly empty sequence formal parameters ghost variables 
ghost variables type system verify program race free appear type annotations regular code 
particular preserve compatibility existing java compilers affect run time program behavior 
class type consists class name cn parameterized sequence final expressions 
number type expressions match formal parameters class 
checking parameterized classes handled substitution 
class cn ghost 
ghost tn xn body formed class declaration final expressions 
ln appropriate types 
tn type cn 
ln valid instantiated class type associated instantiated class declaration class cn 
ln 
ln xn body methods parameterized similar fashion find parameterized methods necessary programs studied 
external locks 
example external locks consider dictionary implementation 
dictionary maps keys values 
implementation dictionary represented object contains linked list nodes node contains key value pointer 
may wish protect entire dictionary including linked list lock dictionary 
purpose class node parameterized enclosing dictionary fields node guarded dictionary lock method node requires dictionary lock held entry 
method dictionary acquires dictionary lock proceeds appropriate manipulation linked list 
fields linked list protected dictionary lock type system verifies program typed race free 
thread local classes large multithreaded programs typically include sections code operate data shared multiple threads 
example single thread concurrent web server may need access information particular request 
objects fashion require synchronization need locks guarding fields 
accommodate situation introduce concept thread local classes 
extend grammar allow optional thread local modifier class declarations defn thread local opt class cn garg body acm transactions programming languages systems vol 
march 
abadi fig 

synchronized dictionary 
modify typing rules fields thread local classes non final unguarded fields 
example thread local class appears 
class crawler defines concurrent web crawler forks new threads process pages stored shared queue 
instances class parses text page order find links shared threads 
declared thread local class contains unguarded fields 
simple form escape analysis enforce single threaded thread local objects 
type thread shared provided thread local class type 
type system ensure thread local objects accessible thread shared objects 
thread shared class declaration thread shared superclass contain shareable fields 
field shareable thread shared type final protected lock 
typing rule fork ensures new thread starts calling run method thread shared class 
rules thread shared types fork appear appendix interestingly type system permits thread local class superclass 
design permits maintain object root class hierarchy java 
permits thread local object viewed instance thread shared class shared threads 
sharing cause problem object downcast back thread local type thread created 
downcast unguarded fields subclass visible thread 
eliminate possibility type system forbids downcasts thread shared type thread local type 
particular restriction applies implicit downcasts occur dynamic dispatch 
avoid acm transactions programming languages systems vol 
march 
types safe locking static race detection java fig 

concurrent web crawler thread local enumeration class 
implicit downcasts type system requires thread local class override methods declared thread shared superclass 
context full java language restriction applies explicit cast operations 
contain operations 
consequence preventing downcasts thread local objects stored collection classes 
problem gj bracha java javasoft support parametric polymorphism 
alternatively replace static requirements dynamic checks compiler insert code track allocating thread object dynamically check thread shared thread local downcasts performed appropriate thread 
acm transactions programming languages systems vol 
march 
abadi 
rccjava checker fig 

excerpt java util vector 
extended type system full java language gosling implemented resulting system 
race condition checker rccjava extends type system outlined section accommodate additional features java including arrays interfaces constructors static fields methods 
addition extended notion final expressions include field read fn final expression fn final field 
additional type information required rccjava embedded java comments order preserve compatibility existing java tools compilers 
specifically comments start character treated type annotations rccjava 
see example 
specify lock guarding elements array introduced elems guarded annotation 
rccjava tool built top existing java front includes scanner parser typechecker 
extensions race detection relatively straightforward add existing code base required approximately lines new code 
major additions maintaining lock set typechecking implementing syntactic equality substitution syntax trees incorporating classes parameterized locks 
important goal design rccjava provide cost effective way detect race conditions statically 
important minimize number annotations required number false alarms produced 
order attain goal rccjava relaxes formal type system ways infers default annotations unannotated code 
features described 
escape mechanisms rccjava checker provides mechanisms escaping type system proves restrictive 
simplest escape mechanism warn annotation turns certain kinds warnings particular line acm transactions programming languages systems vol 
march 
code types safe locking static race detection java warn race annotation commonly particular race condition considered benign 
rccjava may configured command line flag ignore errors particular kind 
example warn thread local override flag turns restrictions thread local class override method thread shared superclass 
experience shown overrides exist large programs typically sources race conditions 
flag suppresses errors false alarms 
holds annotation asserts particular lock held program point holds annotation puts lock set remainder current statement block 
warn annotations rccjava may configured global assumptions locks held 
instance run command line flag constructor holds lock rccjava assumes lock held constructors 
object typically initialized object constructor synchronization 
initialization pattern sound provided object initialized escape creating thread constructor exits 
violations assumption eliminates large number spurious warnings 
believe command line flag replaced sound escape analysis choi rinard significant reduction expressiveness system 
default annotations originally designed infer type information rccjava construct default annotations unannotated classes fields 
heuristics compute default annotations class annotations synchronized methods default class java lang object subclass java lang thread 
unguarded instance fields thread shared classes guarded 
unguarded static fields guarded class object class belong 
guarded annotation permitted class declaration applies fields class 
heuristics guaranteed produce correct annotations experience shown save significant amount time acm transactions programming languages systems vol 
march 
abadi table programs analyzed rccjava programmer program kloc time hrs annotations races java util hashtable java util vector java io webl table ii 
number rccjava annotations added program annotations kloc guarded class param thread program requires arg local shared warn holds total java util hashtable java util vector java io webl annotating large programs 
roughly classes test programs described treated correctly heuristics 

evaluation rccjava order test effectiveness rccjava static race detection tool checking multithreaded java programs 
test cases include representative single classes java util hashtable java util vector larger programs including java io java input output package version javasoft implementation mobile ambient calculus cardelli interpreter run time environment webl language automating web tasks kistler marais 
programs variety synchronization patterns easily captured rccjava annotations 
command line flags warn thread local override constructor holds lock tests see section 
flags may cause rccjava potential race conditions significantly reduce number false alarms reported provide effective way deal existing programs written type system mind 
table summarizes experience checking programs 
shows number annotations time required annotate program number race conditions program 
time includes time spent programmer inserting annotations time run tool 
added annotations programs tool reported warnings race conditions listed column 
table ii breaks annotation count different categories annotations normalized frequency appear lines code 
large programs fewer annotations required acm transactions programming languages systems vol 
march 
types safe locking static race detection java lines 
annotations clustered small number classes directly manipulate thread shared data 
majority classes typically required annotations 
evidence pattern reflected statistics single class examples higher annotation frequencies larger programs 
hashtable high occurrence annotations concerning class parameters arguments contains linked list similar 
interestingly restructuring hashtable declare linked list inner class scope protecting lock reduces number annotations 
discovered problematic race conditions example programs programs tested relatively mature 
race conditions java io fixed jdk version 
benign race conditions test cases counted table race conditions benign affect program correctness 
examples include unsynchronized increments global performance counters resulting race conditions cause resulting count substantially incorrect patterns double checked initialization schmidt harrison 
contains excerpt java util vector illustrates typical race condition caught experiments 
suppose threads manipulating shared vector thread calls elem elem method may read acquiring lock vector object 
thread may call sets call resets array length 
array bounds exception triggered thread enters binary version reads array old value 
declaring versions synchronized removes race condition 
sun essentially adopted solution jdk version response bug report original publication results flanagan freund 

houdini rcc turn attention checking significantly larger programs 
programs burden manually inserting type annotations understanding error messages significant 
section introduces houdini rcc contributions annotation inference practice reliance programmer supplied annotations restricted application rccjava small medium sized kloc programs task writing annotations tolerable 
achieve practical analysis large programs developed system rccjava houdini framework flanagan 
user interface processing understanding rccjava output labor intensive particularly large programs potential race conditions 
facilitate process developed simple effective user interface acm transactions programming languages systems vol 
march 
abadi describes potential race conditions 
interface clusters race conditions probable cause related race conditions dealt single unit 
addition user interface describes reasoning annotation inference system programmer identify cause warning 
rest section covers items detail section describes experience houdini rcc catch race conditions large test programs 
annotation inference houdini rcc infers annotations algorithm 
generate candidate annotation set repeat invoke rccjava refute annotations remove refuted annotations quiescence simplicity algorithm due reuse rccjava reason correctness particular annotations 
step algorithm generate finite set candidates annotations 
candidate annotation conjectured property locking discipline program 
class candidate annotation set includes annotation thread local instances class local particular thread 
addition houdini rcc conjectures field guarded number different candidate locks 
candidate locks include final field declared class superclass 
extend typing rules permit field declarations prefixed multiple guarded annotations 
similarly houdini rcc conjectures candidate locks held entry routine 
houdini rcc conjecture requires clauses methods called java run time systems lock held methods include main entry point program run entry point particular thread 
houdini rcc conjecture type parameter annotations 
candidate annotations course incorrect 
identify incorrect annotations houdini algorithm invokes rccjava annotated program 
invocation rccjava invocation produces warnings violations annotations 
houdini rcc interprets warnings identifying incorrect annotation guesses candidate set 
sense invocation rccjava effect refuting number candidate annotations annotations removed program 
removing annotation may cause annotations invalid check refute cycle iterates fixed point reached 
point incorrect annotations removed program 
set remaining annotations correct subset candidate set fact unique maximal set flanagan 
acm transactions programming languages systems vol 
march 
types safe locking static race detection java fig 

houdini rcc candidate annotations account 
underlined annotations refuted houdini rcc algorithm 
illustrate annotation inference process small example program includes account class 
program candidate annotations conjectured houdini rcc shown 
candidate annotations refuted houdini rcc algorithm underlined 
new class add subclass java lang thread 
invoking start method add object causes object run method executed object thread 
add main method spawns new threads add balance account object 
houdini rcc algorithm performs iterations loop iteration rccjava refutes annotations 
annotation thread local class add refuted instance class instance superclass java lang thread 
object class accessed threads parent thread started 
addition rccjava sees run method calls deposit locks held refutes requires annotations deposit 
iteration rccjava sees thread shared class add contains account rccjava refutes annotation thread local account 
addition rccjava refutes annotation requires update called deposit lock held 
third iteration rccjava refutes annotation guarded field balance accessed update lock held 
fourth iteration annotations refuted remaining annotations correct quiescence reached 
acm transactions programming languages systems vol 
march 
abadi rccjava checker invoked time annotated program determine set warnings reported user 
example final run produces warnings indicating program free race conditions 
hand race condition particular field houdini rcc refute conjectured guarding locks field 
final run rccjava produce warning lock guarding field 
extensions basic houdini rcc algorithm detect race conditions unannotated programs produces false alarms 
section describes extensions houdini rcc help eliminate false alarms 
read data inference 
constant fields read safely multiple threads synchronization 
ideally fields declared final case rccjava warn unsynchronized accesses 
experiments houdini rcc indicated large number shared constant fields declared final programmer oversight initialization patterns violate restrictions final fields 
avoid false alarms cases extended rccjava allow field annotated annotation readonly 
annotation behaves java final annotation readonly rccjava annotation inferred houdini rcc preliminary pass 
readonly fields constant values included set candidate locks class increasing set candidate annotations conjectured houdini rcc 
main lock inference 
static fields accessible threads rccjava requires static field protected lock 
number programs examined exhibited common pattern static field accessed exclusively main thread synchronization 
accommodate programming pattern extended rccjava notion main lock lock implicitly held main thread 
infer annotations regarding main lock extended houdini rcc guesses annotation requires method annotation guarded field 
refutation loop houdini rcc determines fields accessed exclusively main thread avoiding false alarms fields 
user interface turn attention programmer identify defects feedback houdini rcc 
houdini rcc interface interface houdini esc java flanagan leino generates output input program acm transactions programming languages systems vol 
march 
types safe locking static race detection java fig 

version account contains race condition balance 
collection html pages containing source code view java file analyzed contains information valid invalid candidate annotations guessed houdini rcc root html page listing warnings produced final call rccjava warning message contains hyperlink source view code location offending program line 
example process finding errors tool consider broken version account class shown 
note synchronization code deposit missing potential race condition field balance 
program houdini rcc generates warning java field balance guarded thread shared class clicking warning open source code view line account class see 
source code view displays candidate annotations guessed houdini rcc 
refuted annotation underlined valid annotation darkened 
case annotations refuted described contains valid annotations 
houdini rcc inserts warning messages source code view 
situation programmer may wonder annotation guarded lock inferred field balance 
identifying cause rccjava warnings boils answering questions 
facilitate process refuted annotation hyperlink line code refuting annotation 
shows candidate annotations guarded lock field balance refuted 
clicking refuted annotation brings programmer access field balance line rccjava believes lock lock held 
determine lock held line programmer click refuted annotation requires lock line 
hyperlink brings programmer line required synchronization statement missing 
surprisingly experience indicates presenting refuted annotations causes thereof important aspect user interface 
acm transactions programming languages systems vol 
march 
abadi fig 

screen shot showing houdini rcc user interface class 
overlaid arrows indicate hyperlinks pointing 
running houdini rcc correct version account produces warnings yields source code view shown inferred annotations appear bold 
clustering warnings 
experiments noticed cases houdini rcc incorrectly characterize thread local class thread shared conservative approximations introduced analysis 
unfortunately cases houdini rcc subsequently characterizes thread shared classes reachable transitively produces spurious warnings regarding race conditions accesses fields classes 
reduce problem extended user interface group single cluster warnings caused directly indirectly characterized thread shared 
programmer deal warnings cluster single unit 
example programmer verifies thread local easily ignore entire cluster warnings 

evaluation houdini rcc evaluated houdini rcc test programs sizes range lines half lines code 
programs include webl described section 
include jbb java spec benchmark models server application standard performance acm transactions programming languages systems vol 
march 
types safe locking static race detection java fig 

screen shot showing houdini rcc user interface account class 
table iii 
number warnings produced rccjava various versions houdini rcc warnings kloc warn basic thread local constructor read main program kloc rccjava houdini rcc override holds lock lock webl jbb tlc jigsaw orange red average evaluation tlc multi threaded model checker tla specification language yu jigsaw web server written java world wide web consortium orange red large proprietary compaq systems 
table iii shows results running rccjava annotations various versions houdini rcc programs 
table shows size unannotated program number warnings reported running rccjava program 
column labeled basic houdini rcc corresponds running houdini rcc original form section 
remaining columns show number warnings reported houdini rcc acm transactions programming languages systems vol 
march 
abadi table iv 
statistics houdini rcc flags enabled races program kloc annotations kloc candidate valid time min warnings kloc total number clusters clusters examined webl jbb tlc jigsaw orange red various extensions turned 
extensions flags warn thread local override constructor holds lock described section inference modifications read main lock described section 
note additions houdini rcc cumulative columns example constructor holds lock column reflects basic houdini rcc run warn thread local override constructor holds lock extensions 
columns normalized show number warnings reported lines code 
excluding method override warnings reduced number warnings roughly factor test programs 
read field inference decreased number warnings factor 
extensions consistent effectiveness programs significantly reduced number warnings produced houdini rcc 
table iv shows detailed statistics running houdini rcc extensions described 
table clear houdini rcc infers nontrivial number annotations 
general guesses roughly candidate annotations lines code roughly annotations valid 
system ran time proportional size program processing approximately lines minute mhz alpha workstation 
optimized tool performance architectural improvements significantly speed system 
instance houdini rcc heavy temporary files reading writing files accounts sizable fraction run time 
examples clustering algorithm successful grouping related warnings 
representative situation appears jigsaw 
program object gathers prints statistics program runs 
object accesses fields number different objects directly multiple levels accessor methods acquiring necessary locks fields 
clustering algorithm identified class implementation common source potential race conditions 
race conditions deemed benign debugging code intentionally designed read data manner 
column table iv reflects race conditions identified studying warnings reported houdini rcc 
acm transactions programming languages systems vol 
march 
types safe locking static race detection java examined cluster larger examples column shows number real race conditions number warning clusters examined 
example race conditions webl examining clusters 
race conditions include mistakenly considered benign webl annotated hand slight table 

related number tools developed detecting race conditions statically dynamically 
review 
tools developed initial publication results 
sterling static race detection system ansi programs 
supports lock synchronization discipline annotations similar 
uses different analysis mechanism works tracing execution paths program fails trace paths loops recursive function calls may detect certain race conditions 
addition assumes verify annotations introduced programmer 
soundness issues prevented practical tool 
catch race conditions programs including windows library 
extended static checker java esc java tool static detection software defects leino flanagan detlefs 
uses underlying automatic theorem prover reason program behavior verify absence certain kinds errors null dereferences array bounds errors 
esc java supports multithreaded programming annotations similar guarded requires clauses verifies appropriate lock held guarded field accessed 
may permit race conditions unguarded fields verify unguarded fields occur thread local classes 
esc java complex powerful tool capable detecting kinds errors rccjava lightweight tool tuned specifically detecting race conditions 
aiken gay investigate static race detection context spmd programs 
synchronization programs performed barriers locks system need track locks held program point association locks fields protect 
system successfully number spmd programs 
eraser tool detecting race conditions deadlocks dynamically savage statically 
approach advantage applicable unannotated programs may fail detect certain errors insufficient test coverage 
eraser algorithm extended handle features constructors common objectoriented programming languages von praun gross 
approach combined dynamic analysis global static analysis improve precision performance choi 
acm transactions programming languages systems vol 
march 
abadi boyapati rinard defined type system notion object ownership 
system allows single class declaration yield thread local thread shared instances 
tracking thread locality object basis manner promising alternative notion thread local classes article forbid class yield thread local thread shared instances 
system boyapati rinard synchronization expressed object level field level 
extended analysis identify deadlocks boyapati partial ordering lock names manipulated program flanagan abadi 
grossman developed type system preventing race conditions cyclone statically safe variant adapting approach 
differences class languages cyclone cause system differ ways 
significantly grossman permits functions polymorphic locks guarding parameters function 
interesting approach bacon developed guava extension java language form monitor capable sharing object state race free manner 
extended verify atomicity flanagan qadeer flanagan 
race conditions yield valuable indications unintended interference threads atomicity guarantees absence interference 
particular method atomic program execution equivalent serial execution actions method executed contiguously interleaved actions threads 
atomic methods amenable sequential reasoning significantly simplifies subsequent formal informal correctness arguments 
vault deline hndrich system checking resource management protocols mainly focused sequential programs 
capabilities vault encoded combination singleton types existential types flanagan abadi 
vault reason protocols involving mutual exclusion locks currently multithreaded execution model 
variety approaches developed race condition deadlock prevention include model checking corbett dataflow analysis dwyer clarke type systems process calculi kobayashi kobayashi 
number formal calculi java literature 
include attempts model entire java language drossopoulou eisenbach syme nipkow von oheimb smaller systems designed study specific features extensions igarashi 
chose classicjava calculus flatt krishnamurthi felleisen flatt starting point study 
suggested language extensions supporting java classes parameterized types odersky wadler bracha agesen myers cartwright steele 
acm transactions programming languages systems vol 
march 
types safe locking static race detection java uses different notion parameterization classes parameterized values specifically lock expressions 
apart distinction class parameterization approach closely follows gj bracha information class parameters preserved run time 
requires annotations rccjava similar effects jouvelot gifford lucassen gifford nielson 
analysis performed houdini rcc includes basic form effect reconstruction tofte talpin talpin jouvelot houdini rcc interface provides explanation certain effects inferred 
houdini rcc algorithm viewed interpretation cousot cousot state space powerset lattice candidate annotations rccjava compute transition relation 
houdini rcc may seen variant predicate abstraction graf saidi candidate annotation corresponds predicate 
houdini algorithm finds largest conjunction predicates holds reachable states 
houdini rcc infers thread local annotations classes instances shared threads 
escape analysis problem choi blanchet lzle whaley rinard aldrich primarily focused optimizing synchronization operations 
intended application houdini rcc includes interface provides explanations 

type systems proven remarkably effective preventing errors sequential programs 
adapt type analysis techniques multithreaded programs focus particular race conditions common source errors multithreaded programs 
comparison traditional testing dynamic analysis techniques eraser savage main benefit type analysis limited test coverage concerns dynamic approaches 
particular core type system provably sound practice unsound useful extensions core system 
dependent types key feature type system type field includes protecting lock 
dependent type systems undecidable require checking semantic equality expressions cardelli 
type system approximates semantic equality syntactic equality modulo substitution approximation yields decidable type system substantially reducing expressiveness practice 
type system supports dependent parameterized classes significantly extend expressiveness 
extensions type system help reduce number false alarms 
example escape analysis permit safe initialization object thread shared remove acm transactions programming languages systems vol 
march 
abadi need implementation unsound assumption objects shared fully constructed 
similarly unique pointer analysis statically guarantee soundness change ghost parameters object type 
extensions result complex type system complex type annotations 
providing type annotations dominant obstacle wider adoption 
experimental results houdini rcc promising limited houdini rcc inability infer ghost parameters 
believe developing cost effective type system race freedom requires type inference algorithm infers ghost parameters 
general type inference problem np complete tackling problem reduction propositional satisfiability flanagan freund 
appendix syntax semantics type system thread local classes appendix soundness proof system appendix extend type system thread local classes discuss modifications soundness proof needed thread local classes appendices divide formal development manner simplicity presentation believe thread local classes semantics type system useful starting point analysis problems require dependent types parameterized classes 
formal definition syntax grammar 
order support substitution operational semantics set values extended include addresses described 
set expressions extended include construct sync indicates lock acquired evaluated 
addresses sync construct appear source programs 
grammar defines class instantiations instantiations parameterized classes 
semantics specify operational semantics machine 
machine evaluates program stepping sequence states 
state consists components object store sequence expressions thread 
result program result initial thread appear sequence thread expressions 
new threads added sequence 
denote concatenation sequences 
objects kept object store maps addresses objects 
object components map db field names values lock state db acm transactions programming languages systems vol 
march 
types safe locking static race detection java fig 

grammar 
class object 
field map db list fn 
fn vn denote empty field map 
lock state unlocked locked denoted respectively 
program evaluation begins state empty store single thread 
evaluation proceeds evaluation rules terminates threads reduced values 
denote store agrees addresses mapped store fn denotes store agrees addresses mapped object updated field fn contains value reduction rules straightforward 
rely auxiliary judgments 
rule red new uses auxiliary judgment initial db determine initial field map db newly allocated object 
rule method dispatch uses auxiliary judgment dispatch meth determine correct method call 
judgment inst ci states class acm transactions programming languages systems vol 
march 
abadi fig 

semantics 
acm transactions programming languages systems vol 
march 
types safe locking static race detection java declaration ci formed class appearing program judgment meaning initial db db initialized fields object class dispatch meth meth resolved method inst ci ci instantiated class auxiliary judgments defined follows initial db init empty object initial dispatch meth lookup inst class extends 
meth 
dispatch meth inst ci inst class cn ghost ti body inst class cn li body init object initial db inst class extends field meth final opt ti fni vi guarded li opt initial db fn 
vm lookup super inst class extends 
meth dispatch meth meth mn arg requires ls ti arg ni requires lsi ei mn dispatch meth rule red fork fork creates new thread evaluate run returns dummy result fork expression 
rule red sync evaluates expression synchronized acquiring lock yields expression sync new expression denotes lock acquired evaluated 
evaluates value rule red sync releases lock returns value say expression critical section sync evaluation context expression semantics formalize notion race condition 
expression accesses fn fn fn state conflicting accesses fn thread sequence contains toplevel expressions access fn accesses write 
program race condition evaluation may yield state conflicting accesses 
words program defn race condition conflicting accesses 
type system define number predicates type system informally 
predicates similar predicates previous article flatt acm transactions programming languages systems vol 
march 
abadi refer reader precise formulation 
predicate meaning class declared twice cycles class hierarchy class contains fields name declared inherited method name appears class overriding methods return type parameter types requires set method overridden typing environment maps variables types addresses classes ghost variables types arg garg define type system judgments 
judgment meaning program yields type defn defn formed class declaration formed typing environment formed type subtype meth meth formed method field field formed field field class declares inherits field self variable meth class declares inherits meth self variable final final expression type ls ls formed lock set ls appears ls ls ls lock set ls contained ls ls expression type formed state environment formed store environment ls db formed object class address typing rules judgments 
prog defn defn defn class ti ghost ti xi garg cn garg field 
class cn garg extends field 
meth acm transactions programming languages systems vol 
march 
env empty types safe locking static race detection java env dom ghost opt type class cn ghost ti body final li ti cn subtype refl field field final fn guarded field env address dom type object object subtype class cn class cn ghost ti extends 
li xi field cn appear class cn ghost ti extends 
field 
li xi field final final var ghost opt final ls ls empty ls exp sub ls ls ls add ls final ls exp int ls integers ls int final field final fn final addr final type int int meth meth method ls arg ls mn arg requires ls meth cn appear class cn ghost ti extends 
meth 
li meth ls ls elem ls ls ls final null final null exp null ls ls null ls ls final sub final final ls subset ls ls ls ls ls ls exp var ls ls acm transactions programming languages systems vol 
march 
abadi exp address ls ls exp new ls ls new exp ref guarded ls final opt fn guarded ls ls fn exp assign ls fn guarded ls ls ls fn exp ls ls ls exp sync final ls ls synchronized state ti ti db val object object object soundness exp ref unguarded ls final opt fn ls fn exp invoke ls mn sj requires ls ls sj ls ls ls mn exp fork ls run requires ls fork int exp sync final ls ls sync store dom 
pn pi 
mi ci 
cn pn pi pi ci val subclass inst class extends field meth 
ti fni 
vi ti db db fn 
vn section prove typed programs thread local classes race conditions 
preliminary lemmas routine structure derived directly previous similar systems flatt 
primarily focus novel aspects including lock sets dependent types handled 
start presenting lemma states typed expression deduction yields expression type acm transactions programming languages systems vol 
march 
types safe locking static race detection java application exp sub 
lemma enables establish number properties subexpressions typed expression typed 
lemma 
suppose exists deduction concludes ls deduction contains concludes ls application rule exp sub type proof 
induction derivation ls lemma context subexpression 
suppose deduction concludes ls deduction contains position corresponding hole concludes ls ls ls ls ls ls critical section proof 
proof routine induction structure show representative case fn 
ls fn lemma indicates ls fn application exp sub step derivation 
suppose exp ref guarded conclude ls fn antecedent ls induction hypothesis ls ls ls 
critical section case exp ref unguarded similar 
note subexpression typed original lock set extended locks critical section 
lemma 
suppose deduction concludes ls deduction contains position corresponding hole concludes ls ls ls ls ls ls critical section addition ends application rule exp sub 
proof 
simple application lemmas 
lemma shows subexpression may replaced different subexpression type provided value 
value may appear type lock set ls system supports dependent types contain values 
lemma context replacement 
suppose deduction concluding ls contains deduction concluding ls position corresponding hole value ls ls proof 
induction structure lemma shows judgments formal system preserved capture free variable substitution 
place holder right hand side judgment type system 
lemma substitution 
ls acm transactions programming languages systems vol 
march 
abadi 
ls ls final final proof 
proof simultaneous induction parts lemma 
details proof part expression typing judgments 
particular show ls ls ls induction derivation ls consider representative cases exp sub applied rule case ls induction hypothesis ls apply exp sub conclude ls exp ref guarded expression fn 
ls final opt fn guarded ls may assume renaming bound variable necessary 
induction hypothesis ls final opt fn guarded ls second line simplifies final opt fn guarded addition may transform lines ls conditions apply rule exp ref guarded conclude ls exp expression 
ls ls 
know variable different formed environment 
induction hypothesis ls ls acm transactions programming languages systems vol 
march 
types safe locking static race detection java distinct free 

may conclude ls rule exp 
similar lemma substitute values ghost variables 
lemma ghost substitution 
final ghost ghost ghost ls ls ghost final final proof 
proof simultaneous induction parts 
show conditions environment strengthened additional variable declarations 
lemma environment strengthening 
ghost opt ls ls final final proof 
simultaneous induction parts lemma 
previous lemmas sufficient prove fields methods class names instantiations formed 
showing class names appearing typing derivations formed 
lemma class name instantiation 
ls proof 
deduce ls rule exp address formed environments contain valid class names 
deduce ls rule exp sub ls 
proceed show induction deduction ls cases subtype refl hypothesis rule subtype class case cn class cn ghost ti xi extends 
li xi inductive hypothesis indicates cn final li ti know definition cn formed implies ghost ti xi requirement acm transactions programming languages systems vol 
march 
abadi rule class 
assuming appear renaming necessary may apply lemma obtain ghost ti xi replacing xi li lemma gives lemma field method instantiation 
ls field field meth meth 
proof 
consider fields 
handle methods similar fashion 
field cn appear class cn ghost ti xi 
field 
field li xi field ls cn rule exp sub lemma indicates cn final li ti know declaration cn formed requires ghost ti xi cn field assuming appear renaming necessary may apply lemma rename obtain ghost ti xi cn field replacing xi li cn field leaves field replacing show types assigned addresses supertypes allocated type corresponding heap objects 
lemma inferred exact types 
ls exists db proof 
lemma indicates exists ls derivable rule exp sub 
ls derivable rule exp address addition concluded object type db furthermore rule lock set empty rules exp address exp sub allow conclude value stored object appropriate type 
lemma object fields typed 

fn final opt fn guarded opt acm transactions programming languages systems vol 
march 
types safe locking static race detection java proof 
proof straightforward induction subtyping deduction conclude final opt fn guarded opt lemma lock set strengthening 
ls ls ls ls proof 
induction derivation ls subject reduction lemmas states types preserved reduction steps 
note prove program free race conditions allow conclude states reached typed state typed 
lemma type subject reduction 
proof 
proceed case analysis rule conclude cases assume thread reduced ek en en ei change sufficient show tk follows ek tk 
proving guarantees state 
red case ek lemma implies deduction ls application rule exp sub ls possible rule conclude statement exp 
ls ls third statements lemma establishes ls formed environment appear appear formed lock set ls ls ls 
ls tk follows lemma 
red read case ek fn 
fn mp cp lemma implies derivation ek tk includes derivation concludes ls fn rule rule exp sub 
proceed show ls shall allow establish tk lemma 
consider possible rule derive ls fn exp ref guarded ls final opt tv fn guarded tv may apply lemmas conclude implies ls lemma 
acm transactions programming languages systems vol 
march 
abadi exp ref unguarded case similar previous 
red invoke case ek mn vi xi db dispatch mn si xi requires ls 
lemma implies deduction ls mn application rule exp sub ls possible rule conclude statement exp invoke 
ls mn sj requires ls ls sj ls ls method resolution line identifies method signature possibly different implementation dynamically dispatched version mn 
predicate ensures signatures match 
deduction dispatch mn ti xi requires ls deduce mn sj requires ls dynamically resolved method 
may lemma show mn sj requires ls 
ls sj ls formal parameters appear ls substituting values gives ls vi xi may lemma conclude ls vi xi tk follows lemma 
red sync case ek synchronized sync 
previous cases determine derivation yields ls synchronized ends rule exp sub ls rule exp sync meaning final ls statements allow conclude ls sync rule exp sync 
tk follows lemma 
examine red fork separately 
assume thread reduced ek fork ek en en run ei change sufficient show ek tk follows tk run te te 
lemma conclude ls fork derivable rule exp sub 
rule exp fork means int exists class ls run requires lemma implies tk 
lemma run case red new similar previous cases construct new environment containing new object address order apply state lemma shows new environment sufficient deduce threads typed post state 
acm transactions programming languages systems vol 
march 
types safe locking static race detection java cases similar 
turn attention relationship lock sets critical sections 
introduce new judgment ls cs indicate ls contains locks critical section 
words ls cs sync lock set ls 
property stated lemma 
ls cs cs exp contain sync cs cs sync ls cs ls ls cs sync cs sync ls cs contain sync ls cs extend notion formed critical sections states judgment cs set ls ls disjoint union ls ls 
cs cs state lsi cs ti ls ls 
lsn ls 

cp cs lemma 
critical section ls cs ls 
proof 
proof straightforward induction derivation ls cs order conclude program state formed critical sections cs state rule requires distinct set locks held thread 
property preserved reduction steps typed states lemma mutual exclusion subject reduction 
cs cs proof 
proof case analysis reduction rule cases straightforward red sync red sync 
case cs know lsi cs ei ls ls 
lsn ls 

assume reduction cq happens thread en red sync case ek synchronized 
cp sync 
cp 
lsk cs ls ls ls 
cq may conclude cs rule cs state 
red sync case ek sync 
cp 
cp 
lsk cs ls ls ls 
cq may conclude cs rule cs state 
proving typed program state conflicting accesses state conditions object accessed 
acm transactions programming languages systems vol 
march 
abadi particular show field accessed thread thread critical section lock protecting field 
lemma field access 
suppose accesses fn 
fn guarded critical section final fn proof 
examine cases starting case fn 
lemma know derivation ls fn ends application rule exp sub ls critical section note form 
cn pn environment type store 
means ls contains addresses 
possible rules deducing ls fn exp ref guarded case ls fn guarded ls 
critical section exp ref unguarded case ls final opt fn lemma indicates final opt fn 
derived final field fn declared final 
case fn may follow reasoning similar case exp ref guarded conclude fn guarded critical section field accessed appropriate lock held different threads hold lock time formed program states conflicting accesses 
lemma conflicting accesses 
cs conflicting accesses 
proof 
suppose rule state requires ei ti rule cs state requires ls ls 
lsn lsi cs ei thread ei 
suppose conflicting accesses fn 
exist distinct ek access field fn accesses write 
lemma cases holds fn guarded ek critical sections lemma indicates ls lsk 
contradicts assumption ls ls 
lsn 
words sets locks held thread disjoint contradiction exists 
ek exist 
final fn case access fn write fn final field 
ek conflicting accesses fn 
acm transactions programming languages systems vol 
march 
types safe locking static race detection java extend previous lemma cover states reachable execution typed program 
theorem race freedom 
race condition 
proof 
defn concluded rule prog requires sufficient derive rule state 
induction execution sequence lemma may conclude clearly cs holds cs follows lemma induction execution steps lemma conflicting accesses 
argument holds reached execution race condition 
thread local classes section extends type system appendix thread local classes appendix sketches corresponding extension correctness proof 
syntax extend grammar include optional thread local modifier class declarations instantiations semantics defn thread local opt class cn garg body ci thread local opt class body extend class instantiation thread local classes straightforward manner 
inst ci inst local thread local class cn ghost ti body inst thread local class cn li body semantic rules appendix match class instantiations form class 
extended match instantiations form thread local class 

example rule lookup extended follows dispatch meth lookup inst thread local opt class extends 
meth 
dispatch meth acm transactions programming languages systems vol 
march 
abadi type system judgments added system judgment meaning shared values type shared threads field shared field shared type guarded lock final field local field guarding lock meth meth override method thread shared super class type rules judgments modified type rules earlier judgments 
rules subscripted names class replace earlier rules base name class 
shared class shared inst class body shared field shared object shared object shared shared field field final opt fn guarded opt field shared field shared defn class ti shared garg ghost ti xi garg cn garg shared field shared 
class cn garg extends field 
meth meth override ok 
mn 
requires 
ls mn arg requires ls exp fork ls shared run requires ls fork int int shared int shared field local local field final opt fn local local class ti shared garg ghost ti xi garg cn garg field local 
thread local class cn garg extends field 
meth shared exp assign unguarded ls fn ls ls fn acm transactions programming languages systems vol 
march 
types safe locking static race detection java typing rules appendix match class declarations instantiations extended match thread local declarations instantiations 
rules category subtype class cn thread local class cn ghost ti extends 
li xi type local thread local class cn ghost ti body final li ti cn soundness thread local classes soundness proof appendix extended thread local classes 
repeat details give brief informal overview main technical issues involved extension 
primary challenge ensure threads access thread local part object fields accessed synchronization 
require thread allocates thread local object access thread local fields 
threads may access shared part object subsumption allows treated thread shared object 
typing rules prevent thread thread shared object thread local subtype ensuring type sharing permit threads access thread local part object 
case thread local thread shared data stored object occur similar systems grossman simpler proof strategy suffices systems 
change rule state substantial ways order preserve necessary invariants 
type thread separate environment ei ei derived environment constructed store 
words ei ti ti construct ei partition store disjoint sets addresses 
ln set li contains objects treated thread local thread set contains thread shared objects 
require judgment li ei holds judgment defined rule tl env tl env dom dom ei li 
ei dom li 
ei closest ancestor shared type li ei acm transactions programming languages systems vol 
march 
abadi object treated local thread assigned specific type possible allocated type object assigned specific shared type possible 
thread unable access thread local parts objects assigned shared types 
essence specific types allows show thread reads store value obtained consistent ei thread updates store resulting store consistent 
sets addresses li disjoint extend lemma prove threads conflicting accesses fields declared classes 
order ensure property closed reduction require li closed thread local field access 
hypotheses capture requirement thread fp ti 
ei ei shared li li 
stored thread local field li fp ti set addresses occurring expression ti 
new rule state follows state ei ti ti 
disjoint li ei fp ti 
ei ei shared li li 
stored thread local field li lemmas race freedom theorem theorem extended cover thread local classes new invariant 
acknowledgments john mitchell scott stoller comments earlier draft article hannes marais mike burrows mark lillibridge useful discussions andrew gordon paul hankin permission adapt macros inference rules 
rustan leino developed houdini architecture esc java cormac flanagan yuan yu helped apply houdini rcc tlc source code 
agesen freund mitchell 
adding type parameterization java language 
proceedings acm conference object oriented programming systems languages applications 

aiken gay 
barrier inference 
proceedings acm symposium principles programming languages 

aldrich chambers sirer eggers 
static analyses eliminating unnecessary synchronization java programs 
proceedings static analysis symposium fil eds 
lecture notes computer science vol 

springer verlag 
acm transactions programming languages systems vol 
march 
types safe locking static race detection java nielson nielson 
type behaviour reconstruction higherorder concurrent programs 
functional prog 

bacon strom 
guava dialect java data races 
proceedings acm conference object oriented programming systems languages applications 

birrell 
programming threads 
research report digital equipment systems research center 
blanchet 
escape analysis object oriented languages 
application java 
proceedings acm conference object oriented programming systems languages applications 

lzle 
removing unnecessary synchronization java 
proceedings acm conference object oriented programming systems languages applications 

boyapati lee rinard 
type system preventing data races deadlocks java programs 
proceedings acm conference object oriented programming systems languages applications 

boyapati rinard 
parameterized type system race free java programs 
proceedings acm conference object oriented programming systems languages applications 

bracha odersky stoutamire wadler 
making safe past adding genericity java programming language 
proceedings acm conference object oriented programming systems languages applications 

cardelli 
typechecking dependent types subtypes 
lecture notes computer science foundations logic functional programming 
springer verlag new york 
cardelli 
mobile ambient synchronization 
tech 
rep digital systems research center palo alto ca 
cartwright steele jr 
compatible genericity run time types java programming language 
proceedings acm conference object oriented programming systems languages applications 

clarke avrunin 
empirical comparison static concurrency analysis techniques 
tech 
rep department computer science university massachusetts amherst 
choi gupta serrano sreedhar midkiff 
escape analysis java 
proceedings acm conference object oriented programming systems languages applications 

choi lee callahan sarkar 
efficient precise datarace detection multithreaded object oriented programs 
proceedings acm conference programming language design implementation 

corbett 
evaluating deadlock detection methods concurrent software 
ieee trans 
softw 
eng 

cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
proceedings acm symposium principles programming languages 

deline hndrich 
enforcing high level protocols low level software 
proceedings acm conference programming language design implementation 

detlefs leino nelson saxe 
extended static checking 
research report compaq systems research center 
drossopoulou eisenbach 
java type safe probably 
european conference object oriented programming 

dwyer clarke 
data flow analysis verifying properties concurrent programs 
tech 
rep department computer science university massachusetts amherst 
goubault 
detecting deadlocks concurrent systems 
proceedings international conference concurrency theory sangiorgi de simone eds 
lecture notes computer science vol 

springer verlag 
acm transactions programming languages systems vol 
march 
abadi flanagan abadi 
object types races 
proceedings international conference concurrency theory baeten eds 
lecture notes computer science vol 

springer verlag 
flanagan abadi 
types safe locking 
proceedings european symposium programming swierstra ed 
lecture notes computer science vol 

springer verlag 
flanagan freund 
type race detection java 
proceedings acm conference programming language design implementation 

flanagan freund 
detecting race conditions large programs 
proceedings acm workshop program analysis software tools engineering 

flanagan freund 
type inference races 
proceedings static analysis symposium 

flanagan freund qadeer 
exploiting purity atomicity 
proceedings acm international symposium software testing analysis 

flanagan joshi leino 
annotation inference modular checkers 
information processing letters 
flanagan leino 
houdini annotation assistant esc java 
formal methods europe oliveira zave eds 
lecture notes computer science vol 

springer verlag 
flanagan leino lillibridge nelson saxe stata 
extended static checking java 
proceedings acm conference programming language design implementation 

flanagan qadeer 
type effect system atomicity 
proceedings acm conference programming language design implementation 

flanagan qadeer 
types atomicity 
proceedings acm workshop types language design implementation 

flatt krishnamurthi felleisen 
classes mixins 
proceedings acm symposium principles programming languages 

gosling joy steele 
java language specification 
addison wesley 
graf saidi 
construction state graphs pvs 
proceedings ieee conference computer aided verification 

grossman 
type safe multithreading cyclone 
proceedings acm workshop types language design implementation 

igarashi pierce wadler 
featherweight java minimal core calculus java gj 
acm trans 
prog 
lang 
syst 

javasoft 

java developers kit version 
available java sun com 
javasoft 

java developer kit version 
available java sun com 
jouvelot gifford 
algebraic reconstruction types effects 
proceedings acm symposium principles programming languages 

kistler marais 
webl programming language web 
proceedings international world wide web conference 
computer networks isdn systems vol 

elsevier 
kobayashi 
partially deadlock free typed process calculus 
acm trans 
prog 
lang 
syst 

kobayashi saito 
implicitly typed deadlock free process calculus 
proceedings international conference concurrency theory palamidessi ed 
lecture notes computer science vol 

springer verlag 
leino saxe stata 
checking java programs guarded commands 
tech 
rep compaq systems research center palo alto ca 
lucassen gifford 
polymorphic effect systems 
proceedings acm conference lisp functional programming 

myers bank liskov 
parameterized types java 
proceedings acm symposium principles programming languages 

nielson 
annotated type effect systems 
acm comput 
surv 

invited position statement symposium models programming languages computation 
acm transactions programming languages systems vol 
march 
types safe locking static race detection java nipkow von oheimb 
type safe definitely 
proceedings acm symposium principles programming languages 

odersky wadler 
pizza java translating theory practice 
proceedings acm symposium principles programming languages 

rinard 
pointer escape analysis multithreaded programs 
proceedings symposium principles practice parallel programming 

savage burrows nelson sobalvarro anderson 
eraser dynamic data race detector multi threaded programs 
acm transactions computer systems 
schmidt harrison 
double checked locking optimization pattern efficiently initializing accessing thread safe objects 
pattern languages program design martin buschmann riehle eds 
addison wesley 
standard performance evaluation 

spec jbb 
available www spec org osg jbb 
sterling 
static data race analysis tool 
usenix winter technical conference 

syme 
proving java type soundness 
tech 
rep university cambridge computer laboratory technical report 
talpin 
jouvelot 
polymorphic type region effect inference 
funct 
prog 

tofte talpin 

implementation typed call value lambda calculus stack regions 
proceedings acm symposium principles programming languages 

tofte talpin 

region memory management 
information computation 
von praun gross 
object race detection 
proceedings acm conference object oriented programming systems languages applications 

whaley rinard 
compositional pointer escape analysis java programs 
proceedings acm conference object oriented programming systems languages applications 

world wide web consortium 

jigsaw 
available www org 

verifying safety properties concurrent java programs valued logic 
proceedings acm symposium principles programming languages 

yu lamport 
model checking tla specifications 
correct hardware design verification methods pierre eds 
lecture notes computer science vol 

springer verlag 
received october revised january accepted january acm transactions programming languages systems vol 
march 
