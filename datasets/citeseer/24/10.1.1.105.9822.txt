ninja architecture robust internet scale systems services steven gribble matt welsh rob von behren eric brewer david culler czerwinski gummadi hill joseph katz mao ross zhao computer science division university california berkeley ca usa ninja project seeks enable broad innovation robust scalable distributed internet services permit emerging class extremely heterogeneous devices seamlessly access services 
architecture consists basic elements bases powerful workstation cluster environments software platform simpli es scalable service construction units devices users access services active proxies transformational elements unit service speci adaptation paths abstraction units services active proxies composed 
elsevier science rights reserved 
keywords distributed systems scalable services pervasive computing thin clients ninja architecture 
computer networks emerging internet landscape populated rich services immense scale ered diverse spectrum clients 
presents exciting opportunities innovation kinds services created presents tremendous design engineering challenges 
traditional suite information stores commerce sites network services search engines combined novel ways provide new services aggregate transform sources corresponding author 
address department computer science engineering university washington hall seattle wa usa 
tel 
mail address gribble cs washington edu gribble 
see front matter elsevier science rights reserved 
pii www elsevier com locate information 
addition services presenting multitude forms match particular capabilities pcs pdas devices adaptation diversity raises new notions service composition content transformation 
new services may utilized millions users 
opportunity innovation vast delivery lies deep engineering challenge successful service may need scale huge levels load short period continuously available 
ninja project seeks address goals enabling broad innovation service design easily constructing scalable robust services distributed service architecture deals huge throughput demands availability requirements generic fashion facilitating service composition 
gribble computer networks distributed service architecture tackles problem ease authoring scalable robust services levels 
network architecture level structure imposed internet partitioning tiers scalable service platforms transformational intermediaries devices services devices facilitate state management consistency operating presence failures 
deep processing power persistent storage provided service platform clusters fast dedicated networks soft state functional transformations provided close devices 
service rendered path crossing tiers 
paths natural unit adaptation optimization management 
language level services written type safe language java reduce errors facilitate composition de ned interfaces 
code mobility harnessed dynamically upload services platform 
system level platform provides set interfaces dictates programming discipline yields ciently pipelined services robust excessive load replicated achieve high absolute throughput tolerant node failures 
services describe service discovery service scale composed programmatically yield new services 
structure careful design platform simpli es task authoring services inherit approach scalability availability fault tolerance data consistency persistence platform 
section overview entire ninja platform architecture basic terms concepts 
section develops core service platform called base including programming model services execution vehicle approach scalable persistent state 
section describes characteristics emerging devices called units fundamentally rely infrastructure 
section describes role function transformational intermediaries called active proxies 
section lays foundation service composition showing services describe locate services wide area 
section illustrates services composed platform tiers path concept 
section puts concepts distinct services 
remaining sections discuss related directions 

overview ninja architecture fig 
provide high level illustration ninja architecture decomposing basic elements bases rich environments engineered support scalable robust services units numerous heterogeneous devices wish support active proxies transformational elements device service speci adaptation paths abstraction compose elements 
motivate explore turn 

building robust services bases de ne service software embedded internet infrastructure exports typed programmatic interface provides strong operational guarantees high availability 
task building maintaining services extremely challenging depended essential properties scalability availability fault tolerance data consistency persistence face potentially growing tra demands 
unfortunately currently lack suitable reusable building blocks design methodologies service construction 
address challenge part constraining execution environment services mandate core service run engineered cluster workstations call base 
clusters natural platform building internet services cluster node represents independent failure boundary means replication computation data provide fault tolerance 
cluster permits incremental scalability nodes added increase capacity 
coupled high performance system area networks clusters deliver excellent performance relatively low cost 
modern cluster networks achieve greater gb throughput ls latency 
designing software run clusters workstations known di cult :10.1.1.1.2034
simplify task authoring new services constructed cluster software platform called vspace allows service authors concentrate application speci functionality details related scalability fault tolerance composability 
services authored run vspace platform inherit essential service properties platform greatly reducing size complexity service code 
vspace supports dynamic uploading new services trusted untrusted third parties believe open infrastructure important property necessary sustain distributed innovation led current success internet 
authors construct services locally upload services bases externally maintained 

device diversity units active proxies bases spectrum network attached client devices growing diversity scale 
addition gribble computer networks path internet active active proxy fig 

ninja platform architecture 
architecture consists bases services running clusters workstations active proxies stateless soft state intermediaries units services units heterogeneous devices sensors paths composition chain units proxies services bases 
pcs laptops familiar class pdas mobile devices networks resource constrained tiny devices sensors actuators attached internet 
large family client devices call units may limited connectivity low intermittent bandwidth poor computational abilities may able handle small set data formats network protocols 
believe large number units attached network reaching scales hundreds millions eventually billions devices 
units nature typically useful supporting infrastructure 
assume units easily lost broken implying state manage replicated durable environment service running base provide vast amount highly available durable storage 
inexpensive small units may computational ability handle rich set data types growing set protocols deployed internet implying units rely surrogates adapt content protocols behalf 
units mobile may experience regular periods disconnected operation 
gribble computer networks bases assist weakly connected units consistency management data shared units 
similarly unit disconnected service running base act unit surrogate responding requests information service persistent data store 

adaptation growing number devices internet access capabilities presents unique set problems designers internet services 
demand continuous access content increasing access services demanded new environments automobiles kiosks airplane seats new devices web phones 
constructing service easily securely diversity contexts devices daunting huge variation computational power network connectivity interface capabilities devices 
additionally weak computational ability small devices pagers pdas prevents cryptographic protocols ssl access secure services 
today internet diversity client capabilities simply means services inaccessible clients standard home pcs ce workstations 
forcing services adapt content access protocols abilities current devices place transformational intermediaries called active proxies devices services shield 
active proxy transform data types process called distillation adapt protocols converting ssl connection expensive shared key encrypted channel cpu constrained devices adapt value content removing sensitive information content displayed untrusted access point 
examples active proxies include wireless network gateways caching proxies transformational proxies 
devices may migrate new geographic administrative domain process may need new active proxy 

composition services constructing set isolated vertical services handle xed set devices architecture supports dynamic composition horizontal services path adaptation path 
path ow typed data multiple services wide area including interposition transformational operators adapt data form expected service device path 
essential feature services enable path composition programmatic access services export typed programmatically accessible interfaces opposed untyped unstructured user interfaces common services today 
paths established dynamically path creation infrastructure perform data ow optimization examining di erent potential paths deciding particular 
course examination weigh costs various paths choose path optimizes quality service resource consumption metric 
allowing optimization process continue lifetime path infrastructure adapts path changing characteristics execution environment 
example network link overloaded data owing path ow may redirected di erent channel improve quality service 
necessary step forming path able locate services place path 
ninja architecture includes service discovery service sds allows human users programs locate appropriate services wide area service attribute queries 
services publish descriptions sds instances running local base 
instances organized hierarchical structure matching administrative structure network 
summary information known services exchanged hierarchy searches similarly propagate hierarchy matching information 

bases scalable platforms internet services constructed software platform runs cluster workstation bases help alleviate challenges scalable high performance service construction 
platform consists programming model substrate geared obtaining high concurrency execution environment vspace provides facilities service component replication load balancing fault tolerance 
addition provide services cluster scalable storage platform distributed data structures exposes coherent image persistent data physical nodes cluster 
describe elements turn 

programming model substrate high concurrency services popular internet services able handle high throughput reaching tens thousands requests second extreme case 
service remain robust extreme load gracefully handle temporary bursts ered load exceeds capacity service 
call process achieving robustness conditioning service 
necessary su cient step conditioning selecting appropriate programming model concurrency strategy allows service author service execution environment observe manage constrained resources threads client tasks 
programming model imposes particular abstraction services illustrated fig 

request wide area client service processes request sequence logically distinct stages separated high variable latency operation 
example web server stages reading parsing request browser retrieving requested le le system returning formatted response browser 
impose constraint data sharing stages done pass value semantics example exchange messages containing data shared 
constraint gribble computer networks fig 

splitting service stages 
programming model views service sequence stages separated high variable latency operations 
stages share data value semantics example exchanging messages 
acts decouple stages allowing isolated physically separated address spaces physical machine boundaries 
separated stages programming model ers design patterns authors service infrastructure apply compose condition stages fig 
wrap 
wrap pattern places queue front stage assigns number threads stage order process tasks arrive queue 
queue conditions stage load excess absorbed stage threads bu ered queue 
queue serves expose scheduling admission control mechanisms stage queue apparent code stage decide order process tasks choose drop tasks case excessive long lasting overload 
threads dedicated stage applying wrap pattern allows stage execute independently stages 
pipeline 
pipeline pattern takes wrapped stage splits pipelined wrapped stages 
pipelining decouples stage allows functional parallelism processors cluster nodes 
pipelining permits optimizations having single thread repeatedly execute code processing tasks queue increasing instruction locality 
combine 
combine pattern logical inverse pipeline pattern 
previ gribble computer networks fig 

design patterns 
design patterns wrap pipeline combine replicate applied stages service condition load failures limited bottleneck resources 
ously independent wrapped stages combine operator fuses code stages single wrapped stage 
combine permits resource sharing fate sharing previously independent stages 
replicate 
wrapped stage replicate pattern duplicates stage number independent processors cluster nodes 
replication eliminate bottlenecks replicating stage resources applied bottleneck augmented hopefully increasing throughput stage 
replication duplicates stage functionality multiple failure boundaries introducing potential fault tolerance 
implemented programming library simple service authors service execution environment apply patterns pieces code 
network communication disk provided library built nonblocking asynchronous eventdriven style programming 
event driven style nicely matches task driven composition stages permits note scale point handle thousands concurrent tasks network connections disk interactions 

java substrate implementation ninja base architecture extensive java programming language provides strong typing platform independence code mobility automatic memory management 
language properties greatly bene cial engineering robust internet services eliminating common sources bugs 
java provides exibility terms service de multiple architectures 
optimizing java compilers including open jit ibm jit compiler 
implementing base platform java important challenges 
rst lack nonblocking mechanisms java core libraries 
overcame implementing nonblocking library native code wrappers existing system calls example nonblocking sockets select 
second providing cient access specialized interfaces user level network interfaces cluster system area network 
native code interface provided java ill suited interfaces require fast access hardware resources pinned bu ers outside java heap 
developed extension java environment jaguar performs compile time specialization java bytecode perform low level operations directly maintaining type safety portability 
jaguar implement java interface cluster network interface obtains ls round trip latency mbit bandwidth myrinet system area network 
equivalent performance accessed order magnitude greater possible java native code interface 
jaguar implement fast object serialization memory mapped le access 

vspace execution platform vspace execution environment scalable internet services operates cluster workstations see fig 

vspace services constructed programming model described previous section services constructed graph workers consists xed size thread pool incoming event queue set methods implement worker logic 
vspace service described formal service de nition precisely speci es set workers service code resource requirements 
act service publication resolves intra service dependencies ectively freezes code particular version service 
allows entire service treated versioned immutable entity ready deployment composition services 
modi cations service code result new version service ect previously published versions 
workers correspond directly stages described previous section 
workers communicate asynchronously pushing typed messages workers queues 
worker instances workers di erent types pipelined executing parallel multiple cpus physical nodes cluster 
vspace uses replicate design pattern instantiate copies workers multiple cluster nodes worker instance called clone uses code base shares global persistent state distributed data structure described 
set worker clones gribble computer networks fig 

software architecture base 
base consists cluster nodes run vspace execution environment 
services implemented graph workers communicate typed task dispatch mechanism 
vspace load balances tasks workers information cluster load monitor 
workers replicated nodes scalability availability share global state consistent scalable storage platform distributed data structures dds 
type called clone group 
vspace automatically spawns destroys clones response observed system load workers queue lengths worker execution times determine current load 
scalability fault tolerance obtained replicating clones multiple physical resources nodes cluster providing mechanism failure detection clone restart 
worker may send outgoing tasks named clone group case outgoing tasks load balanced clones group 
optionally sender may specify particular clone destination task 
locality optimization allow result previous task dispatch return original sender 

distributed data structures distributed data structure dds storage layer designed run cluster workstations scale required internet service workloads 
dds previously mentioned service properties high throughput high concurrency availability incremental scalability strict consistency data provides narrow data structure interface 
service authors see dds conventional data gribble computer networks structure hash table tree log 
interface dds platform hides mechanisms access partition replicate scale recover data dds illustrated fig 

dds greatly simpli es service construction hiding complexity robustly managing scalable persistent state partitioned replicated cluster 
implemented distributed hash table example dds 
operations elements inside distributed hash table atomic operation completes entirely 
hash table copy equivalence data elements hash table replicated multiple hash table nodes bricks workers hash table see single logical data item 
phase commit keep replicas coherent 
implemented transactions multiple elements opera tions believe atomic consistency provided current distributed hash table strong support large class interesting services 
demonstrate scalability fault tolerance distributed hash table run number performance analyses large cluster workstations uc berkeley millennium cluster consisting twelve mhz pentium cpus smps mb gb physical memory gb hard drives connected gigabit switched ethernet 
fig 
demonstrates linear scaling throughput distributed hash table number brick nodes serving data increased note experiment data resident physical memory cache brick nodes forcing read disk request 
fig 

high level view dds 
dds self managing data repository running cluster workstations 
service instances cluster see consistent image dds result wan client communicate service instance 
fig 

throughput scalability 
benchmark shows linear scaling throughput function number bricks serving distributed hash table note axis logarithmic scales 
added bricks dds increased number workers dds throughput saturated 
fig 
show read throughput node distributed hash table fault deliberately induced node failed node undergoes recovery 
gure shows read throughput hash table degrades rds initial throughput nodes crashes quickly resumes full throughput crashed node completes recovery 
experimented scaling capacity distributed hash table creating populating single hash table tb data spread cpus disks 
tb hash table took populate achieving write throughput mb mb disk 
disk write performance seek limited random keys inserted hash table experiment 
dds implementation exposed queues events described section implement cient internal task scheduling 
exposing queues dds code possible dds brick peek queue incoming requests schedule resource availability 
example incoming read requests data bu er cache scheduled requiring disk access 
technique leads higher throughput head line blocking reduced 
event queues possible reorder disk accesses greater locality perform prefetching similar optimizations database storage managers 
gribble computer networks fig 

availability recovery 
benchmark shows read throughput node hash table deliberate single node fault induced recovery performed 

units space units extremely diverse large variations cpu memory storage capabilities communication bandwidths latencies user interfaces 
section brie circumscribe space describing representative set units 
focus particularly interesting new class units networked sensors constrained terms capabilities resources 
pcs laptops examples extremely capable units liberal amounts cpu memory resources persistent storage sophisticated display capabilities 
laptops capable dealing mobility disconnected operation low bandwidth unreliable communication wireless networks 
pdas represent class device limited computation displays user interfaces persistent storage 
cell phones currently distinct pdas limited computational abilities essentially continuously connected network 
strong trend convergence pda cell phone capabilities yielding class units minimal graphical user interface storage programmability pda continuous connectivity cell phone 
limited form units consider networked sensors actuators 
devices extremely limited computational gribble computer networks resources storage capabilities human interface 
addition limited communication bandwidth communication extremely expensive devices power critical resource communication consume signi cant power 
example networked sensors developed device called mote contains microcontroller radio photo light sensors 
device slightly larger quarter placed environment carried individual reports information collected sensors services analysis 
report experiences device 

characteristics networked sensors characteristics networked sensors require design methodology focused extreme ciency terms computation power 
example networked sensor assembled mote includes mel mhz microcontroller sram kb ash memory rf radio kbps throughput light temperature sensor leds visual feedback information fig 

somewhat surprisingly programming model designed tiny devices similar high throughput services vspace model sake power computational ciency throughput load conditioning 
power precious resource devices communication expensive operation fig 

tinyos mote 
mote includes mhz microcontroller software driven radio application coordinates neighboring motes discover ad hoc sensor network routing topology 
terms power consumption 
ability put hardware components standby state save signi cant amounts power 
maximize opportunity putting device cpu standby developed eventdriven software architecture operating systems applications 
presence blocking operations limit system ability switch low power mode especially hardware polling complete blocking operation 
contrast event driven system processing occur response hardware events 
allows processor enter standby mode events computation needs done hardware event occurs 
observed network sensors able handle signi cant amounts concurrency 
sensors typically centric capable supporting multiple simultaneous ows information 
flows local sensor interaction cpu physical sensor devices radio communication may span multiple sensors sensor network 
example networked sensors may cooperate propagate data central collection point 
case microcontroller interaction sensors overlapped operation radio execution networking protocols 
exacerbate situation microcontrollers cpu directly interact radio compared pcs typically dedicated nics service communications device introducing real time constraints 
address challenges developed tinyos operating environment networked sensors 
tinyos component architecture hardware software component exports interface contains set commands accepts set events res fig 

internally software component statically allocated storage frame 
handling command component emit tasks tinyos scheduler execute 
tasks similar vspace workers share state component created sharing state passing typed fig 

tinyos software component 
tinyos software component accepts emits commands events 
commands ow higher level layers lower levels events ow lower level layers higher levels 
java objects 
general purpose threads tinyos tasks execute completion atomic respect 
tinyos includes level scheduling mechanism allows events preempt low priority tasks 
real time constraints servicing radio met high priority events critical operations gathering data temperature sensor serviced remaining low priority cpu time 
tinyos component model scheduler greatly simpli es composition multiple components sensor 
demonstrate built application motes self assemble ad hoc network communicate routing information statically con gured active proxy node 
routing discovery application particular operating system tuned hardware composed tinyos components 
components composed cad tool represents commands events cad symbols structural vhdl exported cad tool 
vhdl compile time assemble system image downloaded device ash memory 
particu gribble computer networks interesting feature devices ability wirelessly reprogram sending system images sensor network 

active proxies active proxies ninja architecture serve purpose performing impedance matching client devices services adapting data access protocols devices services needs 
active proxies execute environment local devices active proxies perform context aware optimizations transformations behalf devices 
believe active proxies bring essential properties ninja architecture dynamic service adaptation secure access information fusion multiple devices 
describe turn 

dynamic service adaptation ninja architecture active proxies assume responsibility mitigating heterogeneity units translating network protocols data formats clients services 
network protocol level active proxies communicate clients protocols specially designed low computation low power poorly connected devices 
important common service communication protocols java rmi ninja rpc jini assume clients connected computationally powerful 
similarly active proxies help establish connections clients services performing complicated tasks associated cryptographic handshakes 
additionally active proxies distill service content format suitable small devices 
content presentation tailored small screen layouts image resolution bit depth reduced limited display network capabilities devices :10.1.1.1.2034
example html representation content rendered wml wap enabled phone custom application format voice 
active proxies may perform ltering gribble computer networks application level selectively dropping mpeg frames video stream protocol level delaying compressing data increase actual perceived throughput knowledge network conditions device currently experiencing 

secure service access diverse clients current security models infrastructure services assume user access device software running trusted intercept send private information 
unfortunately case access points including public kiosks 
subverted kiosk able record keystrokes typed passwords monitor network tra extract personal information account numbers mailing addresses perform active attacks hijacking connections network transmission encrypted 
avoid attacks trusted active proxies perform context aware transformations data arrives kiosk reduce content value 
proxies introduce alternative authentication mechanisms time passwords users need divulge passwords personal information untrusted infrastructure 
section describe detail example framework functionality 
pdas problematic generally power constrained computationally limited devices little memory poor networking capabilities 
perform ssl handshake phase device palm pilot requires latency imposes intolerable delay connection setup particularly undesirable network connectivity intermittent 
ssl implementation uses elliptic curve cryptography feasible palm pilot internet services support option 
active proxies adapt security requirements services capabilities device 
trusted active proxies units power computation cient security protocols communicating services standard protocols 

multiple device fusion addition enabling basic access active proxies combine capabilities devices 
useful content security adaptation 
example limited gui pda supplemented richer larger display public kiosk placing application kiosk displaying entering sensitive personal information pda 
entering form data pen interface tedious best cumbersome number pads devices cellular telephones 
active proxies split trust pda public terminal fusing devices provide logical channel secure access service 
device fusion done active proxy aware context devices serves example context aware adaptation 

service location wide area service discovery service sds serves important complementary roles provides mechanism services announce presence infrastructure provides mechanism human users programs locate announced services wide area 
designing sds focused providing fully secure semantically rich service location system successfully scale wide area 
sds scalable faulttolerant secure information repository providing clients directory style access available services 
services describe local sds instances descriptions published aggregated wide area hierarchy clients query hierarchy sds instances order locate services 
addition serving location mechanism sds plays important role helping clients determine trustworthiness services vice versa 
role critical open environment opportunities misuse fraudulent services misbehaving clients 
address security concerns sds controls set agents ability discover services allowing access control hide existence services addition disallowing access located service 
globally distributed wide area service sds challenges faced services operate solely inside base 
global sds service robust network partitions component failures address potential bandwidth limitations remote sds entities arrange individual sds instance components hierarchy distribute query workload implying queries routed hierarchy 

design sds system see fig 
composed main components clients services sds servers 
clients want discover services running network 
sds servers solicit information services ful ll client queries 
provide scalability number services volume client requests sds servers organized hierarchical structure 
services requests associated sds servers server domain network extent covers 
propagate information potentially heterogeneous service architectures gribble computer networks announce listen model data propagation 
servers cache data contained periodic multicast messages 
component failures tolerated course normal operation removing need separate recovery procedure recovery enabled simply listening channel announcements 
provide exibility simplicity service query mechanism sds uses xml encode service descriptions queries 
xml allows encoding arbitrary structures hierarchical named values supports validating service descriptions de ned schemas document type de nitions 
mechanism gives sds servers functionality validate select service descriptions allowing evolution existing service description schemas 
sds servers responsible sending authenticated messages known global sds multicast channel including announcing multicast addresses service announcements rate announcements repeated contact information certi cate authority capability manager 
channel measurement periodicity estimation algorithm determines optimal send rate messages produce desired trade update latency bandwidth utilization 
server spawn child server order hand portion load 
parents monitor child servers heartbeat packets restart crashed child fig 

components berkeley sds 
dashed lines correspond periodic multicast communication components solid lines correspond time transport connections 
gribble computer networks server 
servers keep cache announcement service descriptions restarted server restores data listening channel 
provide authentication privacy access control sds servers certi cate authority ca capability manager cm secure communication protocols 
ca trusted source provides proof binding principal public encryption keys form certi cate 
cm manages individual access control lists acls behalf authenticated service 
communication sds components utilize appropriate security measures minimizing performance penalty 
sds server announcements need authentication signed including embedded timestamp 
service providers encrypt description broadcasts symmetric key accompanies message data block encrypted server public key 
allows caching symmetric key common case simple recovery symmetric key failure recovery 
communication servers clients relies separate authenticated transport channel 
client queries sds server authenticated channel pass xml service template access rights form capabilities 
server uses internal xml database called nd services accessible client satisfy query returns client 
order services known service providers listen global multicast channel routinely determine current responsible sds server 
providers periodically broadcast service descriptions multicast channel address broadcast rate de ned server announcement messages 
providers responsible contacting capability manager de ning access control information services 

wide area operation sds wide area hierarchy designed scale query volume number available services adapting changes underlying entities 
primary goal allow queries clients reach services sds servers 
approach servers dynamically arrange multi level hierarchy summary information propagated parent servers queries partitioned forwarded relevant servers 
actual organization hierarchy dependent criteria administrative domains network topology 
believe mechanism support existence multiple hierarchies actual usage policy 
individual servers choose participate hierarchy keeping multiple routing tables hierarchy 
prevent upper level servers hierarchy overwhelmed update query tra sds architecture lters information propagates upward 
particular information summarized way allows queries determine branch contains potential matches 
accomplish lossy aggregation hash summarization information summarized unique mapping data values 
complicating procedure sds subset query model matching documents identi ed partial list service characteristics 
solution hash limited number tag subsets subset containing single tag cross product tags 
limits computation required summarization 
address issue storage space summarizations bloom lters 
bloom lters collapse hashed summarizations table accepting greater possibility false positives return storage requirements 
summary sds servers dynamically organize potentially multiple hierarchies data partitioning query routing 
server uses multiple hash functions various subsets tags service announcements uses results set bits bit vector 
servers internal nodes hierarchy combine bit vectors children servers associates result branch parent node 
receiving query server checks bit vector match failing checks children vectors determine branch forward query 
server resolves query vector multiply hashing checking matching bits set bit vector 
missing bit guarantees true match signal false positive true hit 
distribution data wide area exposes trade consistency performance 
strict consistency di cult achieve face frequent updates wide area constraints network bandwidth transmission latency greater possibility network partitions 
sds system provides loose consistency guarantees service location information wide area 

performance measured performance single sds server intel pentium ii mhz mb ram running linux blackdown jdk jit compiler 
results table 
table shows primary sources latency authenticated transport connections capability checking java security library 
expect components decrease signi cantly result ongoing research 
furthermore xml query processing shown scale logarithmically size data set 
performance numbers estimate single sds server theshelf components handle user community clients sending queries rate query minute client 
table secure query latency breakdown description latency ms query encryption client side query decryption server side authenticated transport overhead query xml processing capability checking query result encryption server side query result decryption client side query unaccounted overhead total secure xml query gribble computer networks 
paths composition services widearea primary goal paths facilitate composition services 
useful infrastructure attempt automate parts path creation process possible 
design automatic path creation apc facility automates task nding paths system components creating network connections components ne tuning performance data ow handling error conditions 
possible apc facility protects users failure individual path components communication links 
ideal situation provide illusion user accessing single robust service providing composed functionality 
apc facility handles large numbers concurrent users designed path construction algorithms scale number components increases number possible paths may grow exponentially components added 
path comprises sequence operators perform computations data connectors provide protocol translations operators 
connector channel operators pass application data units adus 
connector hides potential di erences network protocols operators allows communicate long output data type downstream operator matches input data type upstream operator 
connector characterized speci transport protocol 
operators perform computation data owing path 
operators strongly typed clear de nition input accept outputs produce 
operators various attributes supported communication protocols computational requirements required external data remote database 
addition operators associated cost metrics describe run time performance operator optimization path creation 
type attributes operator combined form xml description operator 
descriptions gribble computer networks determine combinations operators valid path 
ninja architecture provides classes operators long lived dynamically created 
long lived operators standard ninja services support data persistence fault tolerance properties previously discussed services 
registered located service discovery service sds 
dynamically created operators light weight short lived transformation elements created apc facility required 
operators run active proxies soft state simply restarted active proxy fails 
reliability long lived dynamic operators helps guarantee path reconstructed failure occurs safeguard loss data path failure occurred 
applications paths provide mechanisms guaranteed order data delivery required 

example path motivating example consider map service provides driving directions response user speci ed address 
example illustrates composition operators service shows active proxies selected path creation process perform protocol data format translations clients services 
allow access audio driving direction service cell phone apc facility create path follows 
user initiates call cellular phone 
user speaks address wishes get driving directions 
rtp audio connector send audio rst operator path 

speech text operator running active proxy convert spoken audio structured text grammar speci cally chosen context address input 
structured text emitted operator passed tcp reliable connector map service 

map service running base receives address returns structured text representing driving directions speci ed address 
directions passed tcp reliable connector operator path 

text speech translator running active proxy speech text operator transforms textual driving directions audio 
rtp audio connector send audio user cell phone 

user hears driving directions spoken phone 

path construction create ninja path user provides apc facility speci cation endpoints required path partially ordered list operators included path acceptable range costs path terms latency computation memory requirements 
information construct optimal path user speci requirements 
path construction process consists steps 
shown fig 
path construction process continuous feedback optimization 
details step described 
step logical path creation 
logical path consists ordered sequence operators fig 

path construction process 
path execution iterative process optimization 
ninja apc facility guarantees availability fault tolerance constructed path rebuilding physical logical path 
joined connectors 
logical path creation apc facility searches xml descriptions operators nd valid sequences perform computation requested user 
result logical path creation list possible operator sequences 
note operators may commutative image format transcoders example space possible logical paths large 
small number logical paths considered initially 
step physical path creation 
physical path mapping particular logical path physical nodes execute operators 
nodes long lived operators chosen known services provide desired functionality located sds 
nodes operators chosen computational capabilities node cost node path 
apc facility constructs physical path logical path nding lowest cost nodes meet user requirements 
step path instantiation execution 
nodes path selected apc facility starts required dynamic operators sets appropriate connectors various operators 
nodes path set data ow started 
addition control channel reporting error conditions performance information established operator nodes apc facility 
lifetime path apc facility actively monitors operator nodes sure functional 
operator nodes report problems apc facility neighboring nodes path path repaired necessary 
apc facility monitors performance path data ow new conditions original path suboptimal 
control path exception handling controlling parameters path components monitoring analyzing path performance needs independent data paths highly robust 
step path tear 
path longer needed user informs apc facility removed 
apc facility gribble computer networks stops data ow removes connectors shuts dynamic operators 
performance optimization apc facility may cache commonly logical physical paths reuse time 

apc implementation evaluation developed initial prototype apc facility supports long lived dynamic operators 
addition special class dynamic operators wrap existing services 
allows apc system older services communicate directly connectors 
operator output input connector speaks speci transport protocol 
connectors implement common java interface 
interact previous subsequent operators operator chain operator invokes read write methods interface receive input data send output data 
tcp udp rtp connectors supported current prototype 
current implementation encompasses full range path creation described previously 
logical paths created searching xml descriptions available operators nd smallest number operators perform desired data ow 
physical path selected placing operators loaded nodes network 
machine failures automatically detected apc service running operators restarted nodes 
fault detection achieved time heartbeat beacon catching exception reading writing data failed machine 
prototype presently exploit possibilities performance tuning dynamic reconstruction paths 

example services having completed description ninja architecture section describe number interesting applications gribble computer networks built top 
applications demonstrate capability ninja architecture facilitate simple construction robust scalable services accessible diversity devices 
illustrates opportunity architecture provides widespread innovation services devices 

ninja jukebox ninja jukebox early application built architecture demonstrates platform key features 
jukebox allows community users build distributed repository digital music provides collaborative ltering mechanism users music preferences 
cluster nodes harnessed rip mp les local cd rom drives act servers streaming mp clients 
node acts music directory maintains soft state index songs published cluster node jukebox client application contacts directory obtain list songs streams mp directly appropriate node 
ninja jukebox multispace early design prototype base service platform 
multispace nodes running jvm communicate extensible variant java remote method invocation 
component jukebox application exports interface invoked internally cluster externally jukebox client application 
provides support strong authentication encryption control access jukebox service 
song jukebox associated acl authorizing particular set users listen 
constructing application set strongly typed distributed components greatly simpli ed service construction facilitated evolution new components added service needed 
example service evolution addition jukebox query engine allows users search music jukebox musical similarity songs 
user provides query song set parameters search number results return query engine returns songs jukebox sound similar query song 
search nearest neighbor search multidimensional space features previously extracted song 
query engine runs multispace platform jukebox user interface integrated jukebox client 

active proxy framework accessing services untrusted devices general service implemented active proxy framework provides secure multi modal access internet services units 
consider case users accessing stock trading accounts public access terminals 
relying terminal protect secure information users direct private sensitive information portfolio values account numbers personal pda rich gui capabilities public terminal initiate requests display generic stock information stock price uctuations historical graphs 
users initiate trading operations untrusted public terminals con rm trusted portable devices 
network connections users pdas provided environment kiosks infrared network connections devices example directly initiating connection wireless data enabled pda 
proxy implemented collection vspace workers functionality security adaptation service adaptation device fusion 
combining generic content security transformation functions service speci rules proxy architecture decouples device capabilities service requirements simpli es addition new devices services 
service uses xml standard data representation vspace worker transforms requests untrusted access device xml representation 
worker provides access control ltering requests possibly injecting secure information request example worker may convert time password provided user untrusted terminal password supplied service accessed 
third worker transforms request generic xml representation protocol necessary access service 
example service web worker convert xml html form submitted service web server 
worker receives content returned service transforms back xml 
fourth worker performs sequence ltering operations data order remove sensitive information revealed untrusted device 
nal worker transform ltered xml protocol data format needed render content untrusted terminal 
nal xml transformation driven device speci xsl style sheets 
framework currently allows access online stock trading services currently adding access html mail service 
adding support new service merely requires authoring script convert service content xml representation 
example service consists half dozen scripts approximately lines 
rendering content di erent client formats requires authoring appropriate xsl style sheets 
example stock gribble computer networks services consist half dozen style sheets device format ranging lines length 
fig 
shows output yahoo contest service rendered wml wap browser running trusted palm pilot 
example device trusted sensitive information number owned shares removed proxy 
fig 
show output trading service rendered html untrusted web browsing kiosk note particular sensitive information account numbers number purchased shares removed 

electronic mail killer apps early internet today number fig 

wml pda 
wml holdings page customized pda display 
fig 

security ltered html 
stock holdings ltered display public kiosk 
gribble computer networks fig 

architecture 
users mail access growing exponentially 
time users expecting complex functionality embedded multimedia anytime access 
trends implications requirements modern mail servers 
hotmail active users ered just mb worth storage user servers handle petabytes data 
goal project build scalable feature rich mail service top ninja 
built act general mail infrastructure applications services provide speci functionality depicted fig 

loose coupling separate components allows exibility extensibility traditional mail servers 
core module handles storage operations saving retrieving messages pushing noti cation mail events updating message metadata performing simple user message metadata searches 
message metadata represents mutable attributes record ags current folder 
access modules support speci communication methods users including smtp module pushing messages pop html modules user message access 
modules separate worker running cluster scalability achieved running multiple clones worker 
decomposing system set workers natural programming model typed task dispatching allowed components easily composed 
created event mechanism allowed extension modules register service receive noti cations particular events occur mail receipt 
allowed diverse services built instant messaging noti er new mail 

ongoing controversy access rights proprietary instant messaging networks aol aim network 
companies tried compose services existing networks owners proprietary networks attempted prevent composition diminishes perceived market penetration 
built service called instant messaging gateway provides protocol translation popular instant messaging protocols icq aol aim conventional mail voice messaging cellular telephones 
obviates controversy bridging previously proprietary networks instant messaging internetwork 
runs vspace base acts middleman messaging protocols routing translating messages networks fig 

addition protocol translation transform content messages 
built web allows compose alta vista natural language translation service service perform language translation english french protocol translation 
spanish speaking icq user send message english speaking aim user providing language protocol translations 
users take advantage unmodi ed commercial client application software order software constructed mobile devices palm pilots 
software interacts service active proxy 
proxy presents simple text messaging protocol palm pilot interacts sophisticated aim icq 
user service may reached number di erent addresses potentially networks communicate keep large table bindings users current transport addresses networks 
distributed hash table dds purpose 

related number projects share aspects ninja vision seamlessly interconnecting devices internet services 
related generally characterized addressing speci aspects problem space supporting scalable services embedding intelligence network ninja vertical approach building general purpose internet services platform 
number related projects domain extremely large spanning operating systems programming languages networks embedded systems distributed computing platforms limit discussion projects taken particularly complementary approach ninja system design 
flexible middleware systems support distributed computing heterogeneous resources directly related ninja goal tying internet services diverse small gribble computer networks fig 

messaging proxy 
messaging proxy service composed language translation instant message protocol translation workers base 
allows unmodi ed instant messaging clients speak di erent protocols communicate perform natural language translation text messages 
devices 
corba dcom provide platform independent object network communication systems designed tightly coupled distributed applications directly support composition aggregation components 
jini takes java centric view exploiting bytecode mobility deliver stub code implements private communication protocol client service stubs export programming model remote method invocation rmi 
jini literature describes holistic distributed computing model ninja system developed mainly workgroup provide security scalability wide area 
java middleware system intends scale wide area integrate pki nonstandard messaging layer 
system addresses service scalability faulttolerance access impoverished devices run java communication protocol 
goals ninja base environment re ected various application servers including ibm websphere bea weblogic 
systems strive simplify construction scalable fault tolerant internet services generally requiring applications constructed set java components interface enterprise java beans ejb 
ejb components expected stateless manage state persistence 
ejb components usually interact gribble computer networks database achieve 
vspace di ers application servers mainly event driven programming style facilitates high concurrency dds layer persistence 
ninja base environment inspired earlier tacc sns cluster internet service platforms :10.1.1.1.2034
harnessing intelligence network transform aggregate data services investigated projects 
active networks allow code injected network routers deploy new network protocols implement tra shaping perform packet ltering 
important distinction projects ninja active proxies level data processing occurs active networks operate transport packet level active proxies operate higher level application semantics 
active proxies solely intended implement protocols perform packet level operations perform service composition aggregation soft state transformations html ltering demonstrated security proxy 
mobile agents focused supporting distributed arti cial intelligence active proxies share systems level concerns code mobility naming security coordination 
projects transcoding adapt service content better suit small devices 
additionally number projects attempted develop universal interfaces large classes devices including wap protocol stack 
assuming single standard adopted devices ninja architecture allows multiple standards bridged active proxies transformational intermediaries 
additional technologies explore interesting examples units 
example java rings smart cards allow minimal computation communication storage user interfaces 
pc devices sized pcs single chip mobile computationally powerful devices lack user interface 
additionally believe universal plug play jini devices easily integrated ninja architecture 

discussion directions ninja succeeds enabling connectivity internet services arbitrarily small devices range new research directions arise 
ninja goal moving intelligence network infrastructure opening infrastructure allow push new components raises questions management security service composition 
rst important concern manage resources highly dynamic decentralized network active proxies 
operators allowed consume arbitrary amounts network bandwidth cpu memory restrictions site basis operator may consume aggregate resources active proxies 
malicious operators launch distributed denial service attacks particular bases network 
vein infrastructure prevent abuses content delivery mechanisms unsolicited advertising spam reports people receiving unwanted advertisements text paging 
ninja problem worse better technology adopted wide scale infrastructure remain closed 
new business models emerge world ubiquitous network services 
today model funding websites advertising revenue inappropriate services capture bits 
subscription models possible alternatives 
case retaining user privacy important concern data payments ow infrastructure 
envision new service marketplace individual operators entire vertically integrated services available subscription basis 
interesting model computational economy active proxies services user agents participate automated marketplace commodities cpu cycles memory bandwidth 
service authors earn revenue making service available active proxies earn revenue hosting services behalf users 
apart business implications computational economies implement resource management load balancing quality service contracts 
accessing powerful internet services small devices raises new challenges user interface design 
ideally service device integration seamless 
failures occur user may need way inspect control path network components producing fault 
exerting control network active proxies device limited text pager di cult best 
currently networked devices bound particular service example primarily making phone calls 
ninja vision realized devices versatile choices varied 
users need way select services control user pro le services 
largest challenge face automatically composing service components meet needs particular devices 
expressing transformation caching aggregation properties ninja operator type system simple potentially allows operators automatically chained path 
types expressive capture relevant semantics operator 
example english french translation operator may take type english text input french text output imply translation operator output je ne pas cette 
apart strict type matching operator selection depends consideration operator quality performance cost 
automatic path creation problem balancing user requirements system demands resource availability 
performing operation ciently decentralized manner suggests avenues research 
gribble computer networks 
ninja architecture represents important rst step opening scalable robust adaptive internet services 
opening infrastructure ninja hopes reclaim distributed innovation responsible unprecedented success widespread adoption internet form world wide web 
today web service landscape envisioned ninja active services extremely diverse mobile devices 
described essential elements open architecture robust service environments clusters workstations bases diverse devices units adaptive intermediaries isolate services units active proxies abstraction composition elements paths 
addition describing design implementation components innovative services exploit capabilities ered open infrastructure 
supported part defense advanced research project agency dabt national science foundation ri eia 
support provided intel ericsson philips sun microsystems ibm nortel networks compaq 
america online aol instant messaging aim network 
aim aol com 
amir mccanne katz active service framework application real time multimedia transcoding proceedings acm sigcomm october pp 

anderson culler patterson case networks workstations ieee micro 

bea systems bea weblogic application servers 
www bea com products weblogic 
bloom space time tradeo hash coding allowable errors commun 
acm 
gribble computer networks brooks mazer miller proxy servers stream transducers proceedings fourth international world wide web conference december 
geweke culler implementation analysis virtual interface architecture proceedings sc november 
elliptic curve cryptography palm vii 
www com press dec htm december 
chawathe brewer system support scalable fault tolerant internet services proceedings ifip international conference distributed systems platforms open distributed processing middleware lake district uk september 
czerwinski zhao hodes joseph katz architecture secure service discovery service proceedings mobicom acm seattle wa august 
dallas semiconductor designs java ring 
www ibutton com store html 

online trading service 
www com january 
uc berkeley cs division millennium project home page 
millennium berkeley edu 
inside distributed com microsoft press redmond wa 
fox gribble chawathe brewer gauthier cluster scalable network services proceedings th acm symposium operating systems principles st malo france october :10.1.1.1.2034
fox gribble security move indirect authentication kerberos proceedings second international conference wireless networking mobile computing mobicom ny november 
fox gribble brewer amir adapting network client variability demand dynamic distillation procedings seventh international conference architectural support programming languages operating systems asplos vii cambridge ma october 
goldberg gribble wagner brewer ninja jukebox proceedings second usenix symposium internet technologies systems boulder usa october 
gosling joy steele java language speci cation addison wesley reading ma 
gribble brewer hellerstein culler scalable distributed data structures internet service construction proceedings fourth usenix symposium operating system design implementation osdi san diego ca usa october 
gribble welsh brewer culler multispace evolutionary platform infrastructural services proceedings usenix annual technical conference monterey ca usa june 
hewlett packard universal language services 
www speak net 
hill ross culler joseph security architecture post pc world 
available www cs berkeley edu papers ps 
ibm ibm websphere application server 
www ibm com software 
infoworld boeing put net air 
www infoworld com articles hn xml xml april 
infoworld cars take streets wireless connections link road net 
www infoworld com articles hn xml xml march 
takeuchi komatsu nakatani design implementation evaluation optimizations just time compiler proceedings acm java grande conference june 
jennings sycara wooldridge roadmap agent research development autonomous agents multi agent systems 
enhanced services world wide web mobile wan environment technical report university helsinki cs department april 
matsuoka ogawa kimura takagi re ective java jit compiler proceedings oopsla workshop re ective programming java 
titech ac jp 
miller eric drexler markets computation open systems huberman ed ecology computation elsevier amsterdam 
myrinet gigabit second local area network ieee micro february 
pc world communications april 
www com article html 
sato dele gate server march 
wall etl go jp delegate 
mazer brooks pan browser support annotations meta information world wide web proceedings fifth international world wide web conference www may 
schilit bickmore device independent access world wide web proceedings sixth international world wide web conference www santa clara ca april 
sun microsystems enterprise java beans technology 
java sun com products ejb 
sun microsystems java remote method invocation distributed computing java 
java sun com 
sun microsystems jini connection technology 
www sun com jini 
object management group omg common object request broker architecture 
www corba org 
virtual interface architecture organization virtual interface architecture speci cation version december 
www org 
von behren czerwinski joseph brewer kubiatowicz design high performance clustered distributed mail system proceedings international workshop scalable web services toronto canada august 
waldo jini architecture overview 
available java sun com products jini whitepapers 
wap forum wireless application protocol wap forum 
www org 
welsh hill von behren woo querying large collections music similarity 
technical report ucb csd berkeley computer science division november 
welsh culler jaguar enabling cient communication java concurrency practice experience java high performance network gribble computer networks computing special issue 
www cs berkeley edu papers jaguar journal ps gz 
wetherall guttag tennenhouse ants toolkit building dynamically deploying network protocols proceedings ieee san francisco ca april 
yahoo finance yahoo finance investment challenge 
contest nance yahoo com 
ka ping yee mediator service 
www com 
bruce dan duchamp general purpose proxy ltering mechanism applied mobile environment proceedings third annual acm ieee conference mobile computing networking mobicom acm new york usa 
zhao joseph lightweight database internet applications may 
www cs berkeley edu publications saint pdf 
