objects databases decade michael carey ibm almaden research center harry road san jose ca carey almaden ibm com decade ago connection objects databases new explored number di erent ways community 
driven perception managing traditional business data largely solved problem projects investigating ideas adding data types relational databases building extensible database systems objectoriented database systems toolkits constructing special purpose database systems 
addition underway computer science research community extending programming languages database inspired features transactions 
take look eld decade ago terms database support objects vice versa 
look research projects commercial database products 
share vision biases objects databases identify anumber research challenges remain addressed order ultimately achieve vision 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings nd vldb conference mumbai bombay india david dewitt computer sciences department university wisconsin madison madison wi dewitt cs wisc edu years ago database eld verge interesting confusing new era era objects databases 
rest computer science term object meant di erent things different people database community 
addition multiple ways object oriented technology impact database systems internally externally explorations newly underway time 
going grouped rough areas 
extended relational database systems 
persistent programming languages 
object oriented database systems 
database system toolkits components research extended relational database systems progress years bear signi cant fruit ston 
persistent programming languages underway time programming languages community applying ideas object oriented languages just object oriented database systems brand new idea having just born cope quite sure 
database system toolkits component architectures including exodus project care just begun 
wishing gain deeper perspective eld time provides interesting reasonably accurate snapshot objects databases 
decade things clearer view 
areas produced interesting stream research results speci page areas 
fact anticipate distant real survivor remaining list survivor course bene ted successes mistakes 
goal take informal look headed unbiased opinion course 
caution reader intended scholarly incomplete 
refer interested readers resources ston kim aswell proceedings conference series vldb sigmod information topics results touch 
remainder organized follows 
section reviews state objects databases decade ago examining various ways technologies combined 
section looks today looking di erent combinations terms research accomplishments commercial database systems standards 
section views objects databases heading researchers help eld get 
section concludes 
objects databases just explained world objects databases exciting confusing place 
traditional database researchers extending favorite data model relational incorporate new complex types data 
programming language researchers adding persistence permanent data storage favorite programming languages object oriented languages rapidly gaining favor 
researchers proposing radical approaches accommodating data management needs new applications camp believed combining key features objectoriented programming languages database management systems yield new generation ts database systems 
camp felt right answer toolkit aid system developers building domain speci database management systems camp saw objects important contributing technology toolkit 
extended relational database systems rst approach proposed moving databases realm traditional business applications evolutionary approach open type system relational database system allow addition new user de ned data types adts 
de ne new adt user required de ning representation writing functions external programming language 
type registered database system making system aware size available functions included functions provided functions input output instances new adt 
registered system adt just built type de ning type attribute relation 
adt functions queries dynamically loaded needed runtime 
approach pioneered adt ingres effort uc berkeley early ong 
mid postgres project began follow ingres initially laying approach providing query optimizers information properties adts functions ston 
goal postgres provide support storing querying complex objects 
postgres project advocated somewhat radical procedure data type approach ston rejected pointer spaghetti felt characterized systems supported inter object object oriented database systems 
precomputation query rewriting techniques held possible approaches avoiding overheads cause problems procedure centered proposal 
persistent programming languages di erent approach addressing needs complex data intensive applications advocated programming language community take type system programming model objectoriented programming language smalltalk clos clu trellis owl clu descendent add features data persistent program executions atomic 
argument applications just need manage permanent data happy imperative programming model language type system available constructing complex persistent data structures particular applications bene signi cantly losing impedance mismatch arises boundary programming language type system meets relational database type system 
survey state area decade ago objects entering persistent language scene 
respects third manifesto darwen date combination rediscovery elaboration approach 
page area involved addressing number problems orthogonality type persistent persistence models persistence reachability versus persistence allocation binding namespace management persistent roots type systems type safety alternative implementation techniques supporting transparent navigation maintenance garbage collection persistent data structures 
object oriented database systems radical approach addressing perceived needs non traditional database applications particularly engineering applications emerged time database community combine features modern database system object oriented programming language yielding object oriented database oodb system 
early oodb projects laid foundation area gemstone cope smalltalk andr clu language orion bane clos 
major motivation reduce eliminate impedance mismatch cited discussion persistent programming language 
distinguished object oriented databases persistent languages focus support queries indexing navigation focus addressing version management needs engineering applications 
decade earlier early days relational database systems single clearly de ned data model relations sets tuples simple attributes 
similarly competing relational query languages emerged early quel sql 
early days oodb systems di erent agreement details data model underlying language type system query model language version management features provided systems 
general agreement oodb community right direction support engineering applications quite bit commonality approaches viewed appropriate altitude 
emerging oodb revolution spawned aspects systems including data model details query languages indexing techniques query optimization processing techniques system architectures user interfaces pretty aspect database systems readily imagine 
database system toolkits components major approach proposed time belief type dbms able meet functionality performance requirements broad range generation applications 
camp advocated di erent approach provide dbms extended level extensible dbms set kernel facilities plus tools aid developers rapidly building domain appropriate dbms 
members camp envisioned database systems specialized application domains documents managed document oriented database systems geographic data managed geographic information systems 
domain appropriate dbmss number fundamental di erences di erent query languages di erent access methods di erent storage organizations di erent transaction mechanisms 
key projects representing approach exodus project care genesis project project 
exo dus provided storage manager objects care provided persistent programming language writing new access methods query operators provided query optimizer generator generating optimizer domain appropriate query language rule language speci cation 
genesis provided set composable storage indexing primitives database system compiler assembling appropriate storage manager speci cation 
provided complex object storage manager novel multi layered transaction domain appropriate data model query layer built layering modeled rss rds separation system important project started time ibm starburst project 
starburst classi ed partly component dbms support new storage indexing components major goal classi ed extended relational dbms centered relational model terms query language sql models query optimization execution 
key goals starburst develop clean architectural model facilitate storage indexing related extensions explored rule approach extensible query processing subsystem 
page summary clear database research community various competing approaches leveraging objectoriented ideas database world believers 
commercial world part years 
relational database system technology nally maturing terms commercial products relational systems nally starting adopted serious enterprise scale applications 
extended relational persistent programming language database toolkit products oodb companies logic gemstone fame fame ontos attempting market re ne rst product offerings 
years panels database research conferences debated virtues objects argued utilized packaged database world 
objects databases fast forward today roughly years initial object explosion database eld 
di erent approaches considered back died 
appear wounded 
cropped 
approaches appear healthy growing 
view nutshell follows 
approaches database system toolkits persistent programming languages generated anumber interesting results 
approaches essentially proven dead ends practical commercial sense 

approaches object oriented database systems led research results academic community product offerings small startup companies 
approach failed live original commercial expectations 

new approach generating object wrappers relational databases emerged commercial database scene 
approach appears important building object oriented client side applications 

approaches extended relational database systems renamed 
object relational database systems called appear emerge ultimate winner terms providing objects mainstream enterprise database applications 
section look closely points 
brie touch related developments corba ole java middleware appeared scene past years 
casualties mentioned casualties past decade ironically reason database toolkit approach 
toolkits genesis essentially fallen aware serious ongoing area 
reason expertise ended required ended bit exible awkward incomplete certain dimensions database system design space 
reason object oriented database systems managed provide extensibility proven worthwhile builders domain oriented data management facilities simply start scratch toolkit simplify process 
illustrate problems look brie exodus experiences 
exodus provided client server storage manager handling object storage persistent variant simplify management objects construction new access methods query operations rule query optimizer generator simplify development cient query processors 
number research projects plus startup know exo dus storage manager 
common problem wanted exodus implement object servers exodus storage manager client server architecture tended get way introducing unwanted level indirection systems care 
projects programming language serious database implementors preferred control low level details bu ering concurrency recovery application oriented programmers level collections queries 
exodus query optimizer generator general ine cient hard left predicates logical query rewrites implementor applied full function language sql 
put exodus test characterized object relational page data model extra query language excess designed mid way exodus project care 
long story short way building system declare exodus having succeeded regard 
luckily news exodus project managed produce number interesting research products including system design implementation performance studies direct relevance object oriented object relational database systems steady stream rst rate graduate students 
characterized persistent programming language area casualties decade long object wars 
toolkits area research active academia 
characterization stems fact commercial implementation properly characterized pure persistent programming language 
bad news balanced news persistent languages signi cant impact navigational programming interfaces object oriented database products 
addition results area topics persistence models pointer swizzling schemes garbage collection schemes persistent data directly transferable objectoriented databases 
bad news subsection discuss transfer target object oriented database eld expanded commercially rate way founders contributors expected 
object oriented database systems tremendous amount happened objectoriented database area past decade 
early milestone helped focus research general prescription developed collection leading database system language researchers constitutes object oriented database system 
agreed systems support complex objects object identity encapsulation inheritance substitutability late binding computationally complete methods extensible type system persistence secondary storage management concurrency control recovery ad hoc queries 
optionally choose support multiple versus single inheritance static versus dynamic type checking distribution long transactions version management 
open individual choice programming paradigm language choice obviously exact details type system degree type system templates degree uniformity purity object model 
research energy expended object oriented database area interesting results produced 
variety data model issues examined including basic object models support composite objects schema evolution 
quite object oriented query language proposals appeared anumber papers query processing issues languages handling path expressions nesting 
schemes designed indexing object oriented databases addressing issues efcient handling path expressions updates paths queries portions class hierarchy 
pointer join methods complex object assembly schemes studied queries large object bases 
alternative client server architectures proposed studied including schemes transactional data caching client server crash recovery algorithms designed data shipping environments common objectoriented database systems 
series oodb benchmarks published characterize performance systems 
anumber version con guration management models proposed implemented 
systems side signi cant systems followed ground breaking prototypes important systems included objectstore ode signi cant degrees oodb research impact 
numerous commercial oodb products available market today current players oodb marketplace include gemstone objectivity objectstore ontos poet 
addition consortium oodb product vendors banded leadership rick cattell sunsoft early formed object database management group odmg 
group worked draft oodb standards object data language odl object query language oql programming interface manipulating querying object databases 
latest version speci cation called odmg release published earlier year 
research companies plus draft standard possibly wrong 
things 
despite decade hard nearly impossible gain complete agreement having object oriented database systems 
today di erences oodb products terms details programming interfaces implementation twists query support 
odmg standard form approximately page years vendors truly support standard divided pieces corresponding chapters standard vendors choosing support piece piece 
example aware vendor supports object query portion standard oql 
second object oriented database products quite bit relational database products respects provides view facility fact prerequisite research area un nished opinion 
schema evolution painful oodb world oodb products rely schema application compilation cycle 
coupling oodb application programming language tends tight single language commonly systems intents purposes 
addition robustness scalability fault tolerance oodb products match relational database products 
problems application development tools client server computing environments evolved 
tools area obviously fewer user tools application development objectoriented database world 
tools widely today application development relational world 
pc applications talking odbc relational servers architecture database applications dramatically reduced number programmers writing lower level database code embedded sql 
turn diminished impact impedance mismatch led dominant computing environment thin clients fat servers opposite design point objectoriented database systems 
response oodb system vendors developed odbc solutions exploit objectoriented features underlying database systems 
partly result aforementioned problems commercial oodb market grown quite bit slowly expected 
expected consumers oodb technology cad system vendors slower expected move away relying les store data 
commercial database world large enterprises barely nished embracing relational technology anxious undertake major paradigm shift 
object relational database systems parallel explosion objectoriented database system area extended relational database systems matured 
products available today vendors ca ingres ibm illustra 
fact time systems adopted attractive data model query language features oodb world trend doubt continue 
path object relational database systems extended relational database systems known ston followed document di erent set leading database researchers comm response oodb manifesto cited earlier 
main tenets called third generation database systems provide support richer object structures rules subsume second generation relational dbmss open subsystems tools multidatabase middleware products 
laid set detailed propositions third generation database systems provide rich type system inheritance functions encapsulation optional unique ids rules triggers highlevel query interface stored virtual collections updatable views separation data model performance features accessibility multiple languages layered persistence oriented language bindings sql support query shipping client server interface 
object relational systems di er objectoriented database systems ways 
start relational model query language sql build 
terms object features current early 
products provide support types objects adts la section row types composite types 
adts user de ned base types discussed earlier 
role enable set built types dbms extended new data types text image audio video time series point line polygon 
enable dbms manage new kinds facts entities enterprise database intended model employee resume photograph addition name salary 
row types direct natural extension type system tuples 
possible rows tables enjoy object properties named types functions methods 
addition base type attributes row objects permitted contain valued attributes 
model wise typed row ref dept treated recommend interested readers kim explains object oriented relational database technologies combined perspective founder 
page avor base type 
supported multivalued attributes attributes values sets bags arrays lists base type elements 
lastly inheritance supported enable natural variations row types captured schema persons students employees common 
topmost level object relational database schema collection named relations 
objects relations supported oodb systems 
sql extensions object queries include features path expressions method function invocation syntax support nested sets clause 
oodb systems past decade seen research results prototypes database systems 
build relational database technology basic foundation existed 
required system extensions explored contexts postgres project uc berkeley extra excess ort exodus project wisconsin starburst project ibm almaden current paradise project wisconsin 
dimensions object query support object relational systems able bene directly oodb area 
mentioned vendors ering products degrees functionality ibm db cs system supports user de ned base types functions rules large objects ca ingres system rst commercial system er features 
support user de ned base types provide support row objects inheritance including view support fact 
illustra currently complete product object relational market supports features form 
addition server products vendors starting market adt type extension packages managing data types image text illustra ibm database predict add packages primary early driver acceptance object relational database technology 
object relational database systems today su er extent problem plagues oodb systems di erences notice object relational database systems ended adopting pointer spaghetti approach worked avoid advocated studied care 
interesting note foundation row type extensions predates initial object revolution years having laid part orts ship gem 
vendor vendor 
sql standards effort working hard standardize features included adt concept time amended include support row objects 
oodb marketplace major database vendors pushing direction concerned standards 
major vendors ibm currently provides signi cant object relational features working implementing extensions informix purchased illustra promising customers merged universal server product late oracle promising version substantial object support similar 
object oriented client wrappers addition approaches actively studied decade ago approach gaining favor commercial world object wrappers relational databases support development object oriented client side applications working legacy databases 
number vendors er products today including persistence software hp 
products language speci generate smalltalk classes act proxies data underlying database permitting programmers interact data natural way programming tools 
come tools aid developers de ning constructing objects underlying database rely key oid mappings maintain correspondences programming objects database data 
attractiveness wrapper approach enables object oriented applications written today enterprise data making object oriented design methodology available implementing business objects 
disadvantages 
products tend weak query side requiring ad hoc queries posed sql underlying relational schema creates paradigm mismatch application programming querying 
force design paradigm choices comes representing business logic utilize underlying database system triggers procedures constraints enforce data integrity code business rules procedures outside dbms smalltalk client side 
need decision unfortunate reality 
page related developments moving lies ahead mention number related developments object area impact database world 
technologies corba ole java attracting industry attention 
trend growing importance database middleware 
discuss technologies brie 
corba standards developed object management group omg confused odmg focused solving problems arise developing large distributed object oriented applications 
biggest success de ning standards interoperable object rpc mechanism addition developed useful standards services registering locating named resources distributed environment 
expect corba continue important respects 
addition omg attempted de ne number factorable object services including persistence service collection service indexing service transaction service 
predict omg fail years database research able separate majority services indexing transactions collections queries manner capable providing approaching reasonable performance 
advocate corba ne grain access database data making database object corba object 
approaches perform poorly ultimately fail 
corba stick coarse grained object rpc related support services opinion 
set de facto object standards microsoft interfaces ole underlying object model com distributed com microsoft answer corba 
source goes saying standards ignored 
ole key technology build manage desktop data world major vendors working integrate ole support database engines tools clear support ole com adts important 
looming horizon microsoft ole db ers approach separating query optimization execution world data lives addition databases 
comment ole db section 
obviously discussion object trends complete touching java sweeping computer industry past year 
java safe subset standard machine independent representation executable java programs 
java designed enable safety checks shipping java code applets internet possible reasonable reason current java 
impact database systems 
mention java section certain potential impacts clear example java ideal language writing adts executed server side client side database world 
trend importance growing market database middleware products products provide uniform interface multiple backend database systems 
client side best example today undoubtedly microsoft access product provides relational query access backend dbms speaks odbc permits queries draw data multiple backends 
example server side ibm product provides full function relational dbms engine facilities accessing variety database products plus cost distributed query optimizer 
early object relational ering area called available middleware version system 
middleware query products number relational products available lie expected fastest growing segments database market 
objects databases began looking past wehave seen 
hold objects databases 
section share vision regard 
predicting di cult cheat describing commercial database products look done right way 
latency research prototypes robust products order years job easier 
describing vision decade database products discuss challenges researchers face helping eld get 
database solution year look 
envision large enterprises bene ts families products er 
integrated solution predict object relational database systems mature delivering scalably robustly object oriented database systems promising deliver 
object relational servers provide full support object oriented page adts including inheritance adts ability implement number programming languages 
provide full object oriented support row types extended sql features area integrated sql important features including object oriented views authorization triggers constraints sql standard day sql sql 
support middle tier desktop applications servers high function object oriented caching client front ends provide development environment object model describe database levels querying navigational programming 
methods able run cached data client server depending likewise queries fragments thereof 
true triggers referential integrity constraints types constraints business rules year speci ed implemented just sql methods written sql imperative object oriented language choice simply run sense run 
leave object oriented databases know love today 
probably remain niche solutions embedded solution packages problems areas engineering design telecommunications line trading web page management serving applications demand level highperformance moderate databases heavyweight object relational solution address ectively 
niche may shrink time especially object relational vendors er lite versions products 
object oriented client wrappers leave 
rst step client side direction sketched 
server object relational data model object mapping job map object relational concepts java smalltalk object oriented language choice 
tightly integrated engine sense assist early client side enforcement business rules execution business logic 
cache data updates sophisticated order cooperatively process queries 
research challenges believes view world certainly number problems remain solved order get year 
areas need ing include server functionality algorithm improvements integrated clients parallelization provisions legacy data access 
addition world database standards need ll certain holes order realize full potential vision 
brie explain open problems areas 
server functionality performance object relational servers continue evolve today sql relational servers early servers 
research needed object query processing believe need draw fully large body sql query processing world relational databases order yield industrial strength solutions year 
initial object relational benchmarking consulting client little year ago clear room improvement today systems 
applied research needed complete task object sql best possible way 
drawn oql similar languages properly extending sql support views updates constraints triggers remains done 
object relational servers draw done object oriented database world topics path indices object clustering 
adt side important open problem support extensible access methods talked early days object revolution ideal solution sight 
industrial strength support new data types demand solutions problem 
client integration mentioned solution year include highly integrated client component 
surface component mappings programming interfaces needed serve objects programs smalltalk java languages fully integrated object query support addition navigation 
open problems area include querying cache plus database intelligent way just cache shipping objects client systems today 
cached objects come base tables views caching programming interface available correctly face updates 
updates benchmarking performed rst author employed university wisconsin madison 
hoping publish benchmark design 
page client side trigger appropriate triggers timely consistent manner client server boundary performance boundary separating disjoint worlds 
true enforcement constraints types 
methods execute properly side client server java help 
solutions problems obvious interfaces servers provide today potential solution servers provide various cooperation hooks exploited high function client tools 
parallelization place research needed parallelism 
parallel database systems today successfully parallelize query execution relational queries 
object relational queries 
little done area large enterprises need parallel database systems important ultimate success object relational database systems 
extent relational query processing technology extended object queries true parallel execution techniques 
potentially sticky issues await arising fact important adts image video audio gis data types involve expensive operations parallelized load imbalances large execution times queries types plague large enterprises 
parallelizing adt operations interesting data types cpu perspectives open problem providing framework easier 
issues currently explored image gis data types context paradise project wisconsin dewi 
legacy data sources fond hope databases someday achieve world domination recognize solutions requiring world data moved database system universally accepted 
result important area research providing access legacy data sources older database systems relational pre relational kinds systems document image management systems 
middleware solution believe promising approach solving problem place distributed object relational query engine initial thoughts di culties associated parallelizing object relational dbms see www cs wisc edu dewitt dewitt html ps 
users disparate data sources goal data look stored centralized object relational database system 
approach data available common query interface nice client side tools expect object relational database systems support 
result layer architecture clients top wide variety data sources bottom including object relational dbmss relational dbmss pre relational dbmss ims various non database data sources middle providing glue object relational middleware query engine 
research issues related approach legacy data access include distributed query optimization mix object relational relational data sources ective handling semistructured data structured documents web pages query semantics query processing data sources yield relevance ranked results 
approach legacy data explored garlic project ibm almaden research center care semi structured data focus tsimmis project stanford garc 
microsoft ole db addressing problem space de ning protocol query processor talking non database data sources 
standards area standards sql moving direction outlined drawing oql inspiration areas 
concerned certain important areas standards currently addressed expect see area 
key example area adts particularly adts de ned external programming languages 
process queries involving adts object relational query processor aware information properties type operations selectivity estimates function costs ston 
object relational database systems bring opportunity third party vendors provide libraries adts row types address certain problem domains providing special purpose data managers business providing extensions object relational systems 
situation today supports user de ned data types interface de ning registering types fortunately sql addressing 
unfortunately di er page ent provisions additional information needed query optimization sql addressing aspect adt registration process 
ultimate success third party data type market depend emergence suitable standards area 
related area see eventual standard access method interface vendors providers appropriate index structures data types specialize 
areas standards bene cial year 
area client server interfaces 
nice cooperative client server interface alluded de ned standard way enabling multiple providers competition area requiring database vendor provide full top solutions 
mentioned previous subsection standardizing interface query tools accessing non database sources bene cial 
necessary success wouldn nice someday fresh new query language standard legacy design quirks sql simply left supported forever 
taken look albeit biased 
area objects databases period 
explained believe approaches fared better tried predict commercially 
believe verge era object relational database systems enterprise ultimate success due past community doing areas including extensibility object data models query languages persistent languages object mapping approaches survive believe results prove tohave lasting impact shape highly integrated client server object relational database solutions year 
encourage goal attempted identify key research challenges believe lie ahead takeover successful years 
objects databases appears bright left 
joel richardson eugene shekita authors vldb care led ing invited write 
wish superb university wisconsin students sta faculty colleagues pleasure working projects related topic 
wewould industrial colleagues especially ibm almaden ibm santa teresa interesting discussions related issues 
wewould nelson ibm reading providing helpful feedback earlier draft 
andr andrews harris combining language database advances object oriented development environment proc 
acm oopsla conference orlando fl oct 
atkinson buneman types persistence database programming languages acm computing surveys june 
atkinson object oriented database system manifesto proc 
st dood conf kyoto japan 
bane banerjee data model issues object oriented applications acm trans 
info 
sys 
jan 
batory genesis project develop extensible database management system 
data access masses ole db proc 
acm sigmod conference montreal canada june 
care carey dewitt richardson shekita object file management inthe exodus extensible database system proc 
th vldb conf kyoto japan aug 
care carey exodus extensible dbms 
care carey dewitt data model query language exodus proc 
acm sigmod conference chicago il june 
care carey persistent applications proc 
acm sigmod conf minneapolis mn may 
care carey heterogeneous multimedia information systems garlic approach proc 
ieee ride workshop taipei taiwan march 
cattell ed object database standard odmg release morgan kaufman publishers 
page comm committee advanced dbms function third generation database system manifesto sigmod record july 
cope copeland maier making smalltalk database system proc 
acm sigmod conference boston ma june 
darwen date third manifesto sigmod record march 
paul schek storage system complex objects 
dewi dewitt kabra luo patel yu client server paradise proc 
th vldb conference santiago chile sept 
dittrich dayal eds proc 
st int 
workshop object oriented database systems paci grove ca sept 
garc garcia molina tsimmis approach mediation data models languages proc 
nd int 
workshop generation info 
technologies systems israel june 
kim kim object oriented database systems promises reality proc 
th vldb conference dublin ireland august 
kim kim ed modern database systems object model interoperability acm press 
maier development object oriented dbms proc 
acm oopsla conference portland oct 
ong ong fogg stonebraker implementation data abstraction relational database system ingres sigmod record march 
schwarz extensibility starburst database system 
ship shipman functional data model data language acm trans 
database sys 
march 
ston stonebraker inclusion new types relational data base systems proc 
nd ieee data eng 
conf los angeles ca feb 
ston stonebraker object management postgres procedures 
ston stonebraker readings database systems nd edition morgan kaufmann publishers 
ston stonebraker object relational dbmss great wave morgan kaufmann publishers 
carlo zaniolo database language gem proc 
acm sigmod conference san jose ca may 
zdonik maier readings object oriented database systems morgan kaufmann publishers 
page 
