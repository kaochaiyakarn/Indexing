user friendly functional programming web mashups mashmaker web tool easy normal user create web mashups browsing needing type plan advance want 
web browser mashmaker allows users create mashups browsing writing code allows users bookmark interesting things find forming new widgets reusable fragments 
spreadsheet mashmaker mixes program data allows ad hoc unstructured editing programs mashmaker modern functional programming language non side effecting expressions higher order functions lazy evaluation 
mashmaker programs manipulated textually interactive tree representation program values produces 
order cope unusual domain mashmaker contains number deviations normal function languages 
notable order allow programmer write programs data data stored single tree evaluation expression takes place specific point tree functions scope 
categories subject descriptors language classifications high level languages information systems applications information browsers general terms languages human factors design management keywords web user browser 
lots interest called sites web sites combine information processing visualizations web sites provide information user easily obtain manually browsing base web sites separately 
sites com uses map google maps visualize houses available rent craigslist org 
examples include com combines various sources information weather bid nearby com finds items sold nearby sites ebay com craigslist org com combines permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
icfp october freiburg germany 
copyright acm 
rob david gay intel research berkeley avenue suite berkeley ca robert david gay intel com com slashdot org com combines wikipedia org google maps provide information physical locations 
time writing com lists known sites number growing rapidly 
large number sites existence usefully created 
example far authors aware existing site answer questions houses craigslist lots restaurants nearby minute commute google maps 
events upcoming clash things google calendar 
recipes cost bought ingredients 
weekly expenditure bank america goes companies donate money political parties don 
best route town allows visit highly rated shops sell suggested christmas presents appropriate friends 
reasonable assume number useful questions users ask huge 
new web sites containing new information appear web day number possible ways combining huge particularly considers affect combining different web sites answer question 
time writing lists web sites published apis intended mashups millions web sites scraping 
site able answer single question fixed set source web sites number sites needed impractical programmers create users find 
obvious solution generic sites allow users easily combine information multiple web sites answer wide range questions 
groups built generic creation sites see section 
describe mashmaker tool easy create mashups users ranging na expert 
site exist merely goes underscore points having large number sites hard find site answer specific question 
design mashmaker guided number principles support goal program browse creation mashups viewed extension normal web browsing habits 
direct manipulation users able directly data interested having think concepts programs 
surprise local changes produce local effects 
pay go unskilled users able gain benefit little effort skilled users able powerful things 
code sharing mashups elements create mashups shared users 
mashmaker combination custom functional programming language web user interface 
believe mashups excellent application domain programming language 
web sites modeled functions form parameters structured results 
result majority mashups combine side effect free queries list manipulation making excellent application domain functional programming language 
addition functional languages mashmaker draws inspiration spreadsheets web browsers file systems 
time shown metaphors normal users able productively result successful 
explain section tools influenced design mashmaker ways support principles outlined 
language interface heart mashmaker functional programming language 
simplified grammar language 
mashmaker significant differences previous functional languages 
differences stem fact mashmaker language designed accessed spreadsheet style user interface textual program 
spreadsheet mashmaker stores value computed single central data structure case tree 
intermediate values get thrown away 
tree contains intermediate value computed way producing final result 
values computed internally function visible expanding function call 
mashmaker concept scope local variable 
expression evaluated specific location data tree variable refer fields current location 
similar spreadsheet cell relative current location temporary values stored directly data 
language conventional features dynamically typed function arguments bound name order evaluation lazy functions class values 
describe mashmaker language detail section 
novel features mashmaker just core language way expose language user interface 
particular mashmaker tree view shows value current expression evaluates 
node tree contains internal back subexpression defined node 
practical fact mashmaker language considers evaluation logical position data tree 
section 
value constant file empty directory extension 
xn closure body env result selector subnode key property name unnamed child expression constant empty directory extension 
xn lambda function application current context link node global extension path new subnode children inside property path variable inside property inside parent scope 
vn stack parent dir values 
simplified grammar mashmaker core language mashmaker allows operations map fold filter applied direct manipulation data section 
mashmaker automatically suggests functions user apply data functions users applied similar data 
allows skilled users create mashups simply clicking suggestions having programming having think websites connect section 
mashmaker user interface allows users write expressions simplified form 
form allows users avoid quoting constants automatically infers arguments lambda expressions section 
data live meaning functions automatically recompute values response changing data section 
mashmaker bundles functions associated metadata form widgets reusable fragments section 
users interact mashmaker number different levels making useful complete beginner skilled programmer section 
interesting interesting novel contributions propose functional language creation web mashups 

craigslist apartment listing imported mashmaker propose changes standard functional paradigm order languages suitable domain 
particular model tree extension expression evaluated respect location data tree 
demonstrate approach practical creation mashmaker opinion truly general purpose creation tool usable normal users 
mashmaker currently undergoing closed beta test program plan open general public soon 

mashmaker design section sketch design mashmaker system explain draws inspiration file systems spreadsheets web browsers 
illustrative example mashmaker quite different functional languages helpful set scene walk actual session current version mashmaker tool 

alice planning rent apartment navigates normal web browser craigslist com look apartments listed 
alice looks apartments listed craigslist know 
particular know apartments restaurants nearby 
craigslist alice realizes needs mashmaker 

alice clicks add mashmaker button web browser bookmark bar launch mashmaker view craigslist housing web page mashmaker 
mashmaker starts ajax web application alice web browser hosted central mashmaker webserver 
right hand window shows web page alice looking left hand side shows tree representation web site 
case node craigslist query child node apartment 
apartment nodes set property nodes expressing properties apartment price number bedrooms 
terms truly general purpose usable normal hard define formally disagree statement 

google maps visualization apartment 
joining craigslist 
mashmaker notices craigslist apartments things users previously displayed maps provides button top window allowing alice add map apartment 
alice clicks button get map apartment 

alice see restaurant reviews near apartment disappointed see mashmaker provided button automatically 
need teach mashmaker connection 

alice navigates searches food arbitrary address 
result query appears clicks add mashmaker query page mashmaker 
resulting node called food nearby contains nodes restaurants near specified address 

alice craigslist mashmaker scratch space connected 
alice copies node apartments expands form panel reveal form defining query changes address field form address address property enclosing apartment 
displays restaurants near apartment 
filtering apartments lambda expression node 
apartment food nearby property showing restaurants near apartment 

alice created food nearby node mash maker learns property users want define craigslist apartments 
user views craigslist apartment mashmaker provide food nearby button allow users add property 

currently food nearby shows restaurants near apartment alice interested highly rated restaurants near apartment 
mashmaker knows previous users applied filter operation listings suggests alice apply filter operation 
alice clicks button types distance rating condition 
alice alternatively interactive user interface compose query 
alice renames result filter restaurants walking distance 
corresponds map operation section 
lambda expression despite absence lambda symbol explicit arguments section 

new property dependent existence food nearby property suggested mashmaker craigslist apartments lack property 
thinking property useful users searching apartments craigslist alice decides bundle new property properties depends new widget 
clicks bookmark new widget tells mashmaker properties property depends considered arguments internal widget 
case address argument food nearby internal 
user browses craigslist apartment restaurants walking distance may suggested 

allow get view quality apartment offer alice adds number additional properties commute time crime level average income uses calculator widget define scoring metric combining features 
sorts data metric 
section shows functional program editing session created 
learning file systems file system mashmaker presents data tree 
nodes tree immutable 
underlying implementation uses sharing avoid duplicating data users encouraged think data tree 
file system node content file subnodes directory 
content arbitrary type example text number expression image url 
subnode property explicit name child name 
assumed children represent things roughly equivalent type types properties vary correspond names 
mashmaker tree view shows text summary node 
node named property summary preceded property name 
summary simple file node text summary content text text node 
summary directory node user configurable combination summaries properties default summary property 
mashmaker right hand pane shows visualization selected node 
node file visual representation file data 
cases computed representation data tree example map graph table 
node content url url shown 
similarly text images visualizations shown panel 
shows notation tree values mashmaker underlying language 
write denote empty directory denote directory results extending directory new subnode subnode child property name subnode property 
underlying language purely functional dependencies nodes explicit preserving principle surprise 
convenience write 
kn vn abbreviation 
kn vn 
illustrate way notation works notation value shown see section see 
food nearby 
craigslist housing url 
title rare jordan park listing food nearby title thai food title 
google map 
somewhat unusually programming language entirely keeping file system mashmaker allows identifier names contain spaces 
mashmaker data representation heavily influenced xml particular idea distinguishing properties children taken xml 
key differences xml mashmaker allows properties arbitrary subtrees just simple text mashmaker nodes tag names 
believe representation simpler users understand xml close xml easy encode 
learning spreadsheets key principles mashmaker users create mashups direct manipulation data writing program 
support goal taken inspiration spreadsheets 
spreadsheets achieved remarkable success allowing normal users write relatively complicated programs 
key features allowed spreadsheets avoidance unnecessary separation program data working 
conventional programming language programmer writes program isolation argument data 
write function imagine arguments give 
contrast spreadsheet avoids separation allowing programmer apply operations directly specific piece data copying operation data 
mashmaker borrows key features spreadsheets program data mixed central workspace 
data stored explicitly workspace 
local variables 
expression evaluated specific location refers data relative current location 
map fold described direct manipulation data functions 
text entered user assumed constant proceeded 
expressions re evaluate automatically response changing arguments originally plan xml data model eventually decided simplified model easier users 
systems issue 
particular determine web site changed avoid querying web site 
topic discuss 
tree view left side mashmaker window shows value user current program evaluates 
node defined node meaning user specified expression defining value result node meaning part result evaluating parent defined node 
user interface result nodes green ball icon defined nodes icon corresponding function defines 
defined node contains internal expression defines allowing user easily edit expression 
expression evaluated referring values nodes near tree 
just spreadsheet allows user edit formula formula bar avoids displaying formula normal display mashmaker allows user edit form arguments defined node form panel pops top right hand side user clicks icon 
advanced users mashmaker allows user turn formula bar displays current expression textually mashmaker underlying functional language 
map fold appealing feature spreadsheets way allow user map single expression collection objects simply writing formula cell copying expression data rows 
approach allows user easily see expression evaluated data element 
mashmaker takes similar approach 
user adds new property node similarly defined properties automatically created sibling nodes 
example section user added google map apartment map automatically added apartments 
expressions defining expression user uses form panel change arguments change arguments replicas 
spreadsheet mashmaker user easily look specific application expression data see directly evaluates 
similarly spreadsheets provide easy way users fold operation collection objects 
fold infamous functional programming community difficult function beginners remember argument order difficulty thinking exactly function folded collection data 
users little difficulty performing fold operations spreadsheet 
spreadsheet user fold function data simply map write expression refers cell read final value bottom 
example mashmaker allows users write fold operations built prev property refer previous sibling 
previous sibling prev returns value user defined init property empty value defined 
mashmaker spreadsheet syntax distinguishing constants expressions user interface 
default text entered user assumed string constant proceeded 
chose default partly users familiar partly avoid need users learn expressions edit form arguments 
feature part textual representation mashmaker language simply part user interface 
learning web browsers guiding principle mashmaker program browse meaning creating feel normal web browsing process 
web browser successful user interface modern times 
simple interface allows users find information perform sophisticated queries merely sequence links occasionally typing data forms 
mashmaker follows model possible 
user looking particular node mashmaker automatically suggest additional functions want apply providing buttons top view pane 
clicking buttons insert new node defining expression extracts data data available food nearby finds address argument existing address property 
expectation users mashmaker keyboard expand widget pane 
explore data entirely clicking mashmaker suggestions 
effect mashmaker extends web browsing experience adding new links users follow 
suggestions mashmaker derived observations functions users previously applied similar looking data code sharing principle 
example section user added node craigslist apartment defining expression food nearby address address food mashmaker automatically suggest adding node definition craigslist apartments 
behavior mashmaker borrows web browsers bookmarks 
user web browser bookmarks remember interesting pages share interesting page friends 
equivalent behavior mashmaker user defined widgets 
create user defined widget user navigates interesting result remember share friends clicks bookmark new widget 
mashmaker prompt user select nodes result depends considered arguments considered internal function 
non expert users typically opt default nodes result depends internal causing entire bookmarked just user bookmarked normal web page 
approach allows users experiment function real data abstracting function 
importantly allows users browse looking interesting necessarily having think advance going create function 
create function intention think doing bookmarking interesting discovery writing function 
multi level designed mashmaker intention usable complete novice expert programmer pay go principle 
particular anticipate users mashmaker levels level requires little skill user allows user powerful things 
basic users unfold widget panel 
explore data purely clicking add mashmaker browser clicking suggestion buttons add enhancements data 
basic users bookmark things find default bookmark settings section 
basic users see tree left information need visible view pane right 

normal users occasionally expand widget panel edit form parameters 
changes flow suggestions users 

skilled users connect new sites previously connected copy paste simple expressions refer properties 

semi expert users semi automated creation tools written create widgets new web sites 

expert users write complex expressions directly mash maker core language 

teach mashmaker understand content new websites uploading hand written xml description current state interactive tool 
expect category contain order magnitude fewer people previous category 
number highly skilled users may small presence essential import web sites write functions skilled users 

mashmaker language previous sections explained general model mashmaker works mental model presents user 
section describe detail functional programming language heart mashmaker particular concept directories tree extension section 
core syntax gives grammar expressions mashmaker core language 
grammar deals simplified version full mashmaker language 
particular omit expression forms special built functions prev 
values described section 
value constant file value arbitrary type directory property child subnodes lambda expression 
directory empty smaller directory extended additional subnode legal directory contain multiple properties name able look value 
mashmaker dynamically typed common lisp family languages course spreadsheets 
dynamic type error occurs erroneous node text summary view pane explain went wrong 
expression evaluated respect location data tree 
location represented stack parent values directory 
expression looks variable lookup relative current location 
innermost directory value location known context 
expressions take forms literal constant empty directory extension adds new subnode required evaluate directory extension path says new subnode appear 
expression evaluated refer properties directory evaluates 
discuss extensions detail section 
note normal list concatenation add new elements directory 
convenience write 
qn en abbreviation 
qn en 
lambda expression 
xn defines closure value arguments names 
xn body expression return value computed evaluating directory selecting property called mashmaker identifies function arguments label order 
syntactic convenience omit final part lambda expression meaning result entire value property 
function application applies evaluate function evaluate directory properties matching names arguments writing allows expression refer directly current location directory value 
path looks property relative current location 
default properties current context matched form allows search parent locations 
tree extensions key new construct mashmaker language tree extension construct key connection core mash maker language mashmaker user interface denotes action adding new computed nodes data tree 
construct base current tree path position user inserted new node expression define new node 
path include wildcard symbol meaning rest path applied children 
fact way add new subnode just child node 
wishes add subnode child node add 
simple expression user created interactively example section 
houses craigslist housing area houses map google maps address address food nearby food houses food nearby food address houses food nearby filter food nearby distance rating distance rating see user took craigslist housing extended add new defined node called map inside apartment 
value map computed address property apartment 
user added additional top level node called food nearby defined food nearby food nearby nodes apartment 
user interface defined nodes contains internal program subexpression defines allowing user easily edit function arguments 
user example defined global function food nearby address food nearby food address food nearby filter food nearby distance rating distance rating food nearby see function created copying food nearby food nearby properties scratch space data tree recording fact address external input noting food nearby result value 
semantics gives big step operational semantics strict evaluation mashmaker expressions 
real semantics mashmaker lazy strict semantics allows easily language constructs tree extension distraction lazy evaluation 
discuss lazy evaluation section 
evaluation relation form location expression evaluated 
stack parent values directory value 
innermost parent value known context 
write denote location context top rest location 
expression evaluated value evaluates location rules easy follow const empty values extend new adds new subnode directory 
new node evaluated context includes previous properties properties added directory subsequently 
extend empty extend extend skip add extension child nodes 
extend skip skips property nodes extend extends child node recursively extends 
extend prop extend prop extend named property 
extend prop matches property extends 
extend prop skips non matching property 
lam builds closure current location environment 
app applies evaluated closure body evaluated directory new context built extending closure environment properties match closure arguments 
closure body evaluated context property selected result 
simply grabs current context value 
var field parent follow path current location 
lazy evaluation haskell peyton jones mashmaker expressions evaluated lazily 
current consensus programming language community lazy evaluation wrong evaluation model conventional programming languages peyton jones 
bookkeeping overhead lazy app const empty extend new extend extend prop 
xn extend empty extend skip extend prop lam 
xn 
xn var evaluation programs run slowly complex evaluation behavior performance hard predict programmers battle space leaks due long chains lazy thunks 
mashmaker conventional programming language 
believe unusual application domain mash maker works lazy evaluation highly appropriate 
particular case web mashups bookkeeping cost remembering evaluate tiny compared massive cost fetching scraping web site necessary small number expressions unneeded bookkeeping cost paid back 
fetching web site cheap important minimize number queries remote server avoid overwhelming server section 
typical programs relatively small amounts data directly user space leaks far problem 
web sites essentially lazy 
example search google return results page produces results lazily presses buttons 
mashmaker lazy evaluation works largely expect 
value node evaluated demanded evaluation node user attempts view graphical interface 
lambda expressions user interface mashmaker user interface somewhat unusual treatment lambda expressions 
syntax underlying core language fairly conventional lambda expressions explicitly 
xn 
xn field 
operational semantics strict mashmaker evaluation parent marked arguments explicitly listed user interface attempts hide users possible 
mashmaker dynamically typed widget metadata function includes flag argument saying closure 
argument closure forms ui interprets text entered argument little differently arguments 
text entered assumed body lambda expression variables expression bound current location assumed lambda arguments 
advanced users tell alternative text handling noticing icon argument text box 
live data data mashmaker live meaning may change time react changes parts data tree 
tree result web query tree update time source web site changes mashmaker language designed handle changing data 
particular mashmaker overlays extensions generated data section modifying place extensions automatically applied new versions underlying data 
mashmaker extension construct automatically adds new properties children node properties apply new children added tree 
throttling important practical issue dealt creates need avoid placing load web sites supplying data 
agreement web site provider specify maximum load polling web site fixed frequency waiting user asks refresh 
explicit agreement placing load server cause owners block system ip address 
result necessary mashmaker throttle rate requests external web sites 
rate primary issues determines performance needs requests slow order avoid sending requests rapidly 
performance restriction motivated mashmaker lazy evaluation section number tricks discussed minimize number requests need external web servers 
websites turn bad limitation mashmaker tools information web sites mashups break underlying websites change 
website changes structure data produces changes html current longer understands mashups depend data longer function correctly 
long term hope problem severe websites increasingly publish semantic information defined data formats 
generally mashmaker intended mission critical applications data integrity essential 
focus applications important able produce interesting data certain data correct 

evaluating usability peyton jones 
evaluate usability mashmaker cognitive dimensions notations cds framework blackwell 
cds provide vocabulary enumerates concepts important users engaged programming tasks 
evaluation cognitive dimensions subjective substitute thorough user testing concepts shown time important human problem solving important consider designing usable interface 
list cognitive dimensions evaluate mashmaker dimensions abstraction gradient mashmaker number different levels abstraction allowing users ranging complete beginner experienced programmer section 
consistency new widgets created mechanism creating simple expressions 
mashmaker done simple mechanism applying widgets setting form parameters 
error proneness normal spreadsheets mashmaker automatically ensures user adds property set children defining expression identical children 
hidden dependencies role expressiveness node selected dependent source nodes automatically highlighted clear dependency 
premature commitment users decide advance looking wander looking useful 
find bookmark new function widget need decide advance going 
progressive evaluation requirement program sense complete order user look result 
similarly spreadsheet evaluations fail abstraction gradient minimum maximum levels abstraction 
fragments encapsulated 
consistency language learnt rest inferred 
error proneness design notation induce hidden dependencies careless mistakes 
dependency overtly indicated directions 
indication perceptual symbolic 
programmers decisions premature commitment information need 
progressive partially complete program exe evaluation obtain feedback am doing role reader see component expressiveness program relates 
viscosity effort required perform single change 
visibility part code simultaneously vis ible assuming large display possible compare parts side side 
code dispersed possible know order read 

cognitive dimensions taken peyton jones affect behavior non dependent parts program 
viscosity mashmaker support user defined functions automatic synchronization property definitions multiple children general preference linking data copying easy widespread changes 
visibility conventional programming languages mashmaker program data programmer easily see effects evaluating expressions 
mashmaker allow view multiple forms multiple view panels window mashmaker allow view data store multiple browser windows allowing put arbitrary information side side 
analysis personal experiences mashmaker believe design fundamentally sound 
order demonstrate objectively need perform proper user study intend near 

related section explain mashmaker relates previous creation user programming general 
prior described basic mashmaker tool database angle garofalakis 
creation tools mashups increasingly hot topic efforts simplify creation 
relative mashmaker previous tools generally fall groups easy create limited family mashups relatively difficult create wide range mashups 
google easy users create mashups involving maps 
com easy users create graph mashups multiple data tables 
tools easy excellent producing mashups specific type general purpose mashmaker 
yahoo pipes powerful tool allows users process data rss feeds 
time writing small set operations available pipes flexible mashmaker tool extended give equivalent expressive power 
key difference pipes mashmaker mashmaker pipes presents program explicit graphical dataflow graph mixing data browsed 
wong hong takes pipeline approach similar apple data web site routed sequence pipeline stages configurable produce data different type 
yahoo pipes program separated data graph embedded data spreadsheet 
mashmaker automatically suggest operations apply data 
mashmaker suggestions type data similar behavior previous users 
similar requires user familiar complex concepts html regular expressions 
lieberman augments web pages additional links obtain additional information items web page 
mashmaker automatically suggestions learn example things users data 
mashmaker limited adding additional hyperlinks web pages perform bulk data processing tasks 
google editor org ning com javascript dataflow architecture lim lucas web scripting language powerful tools creating mashups require user write code 
com com com apple allow users write small graphical web widgets lay screen 
com additionally allows users connect widgets output widget input widget complex tasks require considerable programmer skill 
schraefel internet allow users extract parts multiple web sites composite able perform complex processing sites extract collections data 
mashmaker uses spreadsheet metaphor 
uses standard flat dimensional spreadsheet connect web sites 
user defines values web site input cells produce results output cells clipped web page 
mashmaker uses flat dimensional grid tree 
prevents writing mashups produce nested data producing list restaurants apartments 
maps google com research microsoft com pipes yahoo com www apple com www com products www apple com leonard represents data xml tree mashmaker programming done imperative scripts functional overlays 
database community cai franklin looked data integration get transform various data sources suitable structure combined queries 
user programming tools mashmaker bears similarity number user programming tools creating web mashups programmable structured documents psds takeichi hu liu allow extend standard xml document embedding elements tree computed elements 
expression defining xml node refer nodes xpath expressions process nodes arbitrary haskell functions 
mashmaker psds functional language case haskell evaluated lazily 
mashmaker psds deal static xml documents live data 
psds include expressions directly document overlaying changes top generated data way automatically re applied add additional properties live data changes model section 
edwards programming tool allows look program results evaluation 
node data tree corresponds execution single program line specific data annotated value produced 
function calls expanded subtrees function definitions contain example arguments programmer adjust interactively see program behave 
mashmaker allows programmers easily see program behave applied particular arguments 
mashmaker interface program centric data centric meaning data layered top program overlaying program top data 
mashmaker function creation system influenced peyton jones 
extending microsoft excel support user defined functions 
mashmaker allow define new function selecting result cell graphical interface specify cells arguments 
mashmaker suggestion system influenced google suggest mash maker suggests operations appropriate data hand 
google suggest mashmaker learns behavior users 
generally mashmaker draws past programming example cypher lieberman previous programming approaches beginners pausch 

mashmaker tool allows users easily create web mashups 
mashmaker core functional language contains number deviations standard functional paradigm 
ideas popular tools file systems spreadsheets web browsers produced tool believe suited task creation 
project interesting programming language research project approaches application domain programming languages historically seen solution process fitting language labs google com suggest domain produced language differences previous functional languages 
implemented mashmaker ajax web application currently available organization part closed beta program 
plan publically available near 
long term success mashmaker judged extent real users adopt scale benefit able obtain 
information mashmaker access public beta opens please go url berkeley intel research net mashmaker mashmaker html acknowledgments benefited input people 
particular go minos garofalakis eric ian smith 
alan blackwell carol britton anna louise cox thomas green corin gurr maria martin nehaniv marian petre chris chris roe allan wong richard young 
cognitive dimensions notations design tools cognitive technology 
ct proceedings th international conference cognitive technology pages london uk 
springer verlag 
isbn 
cai xin luna dong alon halevy jing michelle liu jayant madhavan 
personal information management 
sig mod proceedings acm sigmod international conference management data pages new york ny usa 
acm press 
isbn 
doi doi acm org 

allen cypher daniel david henry lieberman david brad myers alan editors 
watch programming demonstration 
mit press cambridge ma usa 
isbn 
jonathan edwards 
uncovering simplicity programming 
oopsla proceedings th annual acm sigplan conference object oriented programming systems languages applications pages new york ny usa 
acm press 
isbn 
doi doi acm org 
robert minos garofalakis 
mashmaker mashups masses demo 
proceedings acm sigmod international conference management data sigmod 
alexander henry lieberman 
goal oriented web browser 
chi proceedings sigchi conference human factors computing systems pages new york ny usa 
acm press 
isbn 
doi doi acm org 

michael franklin alan halevy david maier 
databases new abstraction information management 
sigmod record 
jun kasper tanaka 
clip connect clone combining application elements build custom interfaces information access 
uist proceedings th annual acm symposium user interface software technology pages new york ny usa 
acm press 
isbn 
doi doi acm org 
hu shin cheng mu takeichi 
programmable editor developing structured documents bidirectional transformations 
pepm proceedings acm sigplan symposium partial evaluation semantics program manipulation pages new york ny usa 
acm press 
isbn 
doi doi acm org 
caitlin randy pausch 
lowering barriers programming taxonomy programming environments languages novice programmers 
acm comput 
surv 
issn 
doi doi acm org 
thomas leonard 
tree sheets structured documents 
phd thesis university southampton 
henry lieberman 
wish command programming example 
morgan kaufmann publishers san francisco ca usa 
isbn 
seung chan slim lim peter lucas 
step large scale reuse web 
oopsla companion st acm sig plan conference object oriented programming systems languages applications pages new york ny usa 
acm press 
isbn 
doi doi acm org 

liu hu takeichi 
environment maintaining computation dependency xml documents 
proceedings acm symposium document engineering pages new york ny usa 
acm press 
isbn 
doi doi acm org 
david lin xu bodik doug 
mining helping navigate api jungle 
pldi proceedings acm sigplan conference programming language design implementation pages new york ny usa 
acm press 
isbn 
doi doi acm org 

simon peyton jones 
wearing hair shirt retrospective haskell invited talk 
acm sigplan principles programming languages popl 
simon peyton jones editor 
haskell language libraries revised report 
cambridge university press may 
simon peyton jones alan blackwell margaret burnett 
user centred approach functions excel 
icfp proceedings eighth acm sigplan international conference functional programming pages new york ny usa 
acm press 
isbn 
doi doi acm org 
jeff danny salim 
web scripting language poster 
th international world wide web conference 
schraefel daniel zhu david 
hunter gatherer web page collection making 
chi chi extended abstracts human factors computing systems pages new york ny usa 
acm press 
isbn 
doi doi acm org 
michael 
spiders screen 
press 
atsushi 
internet automating web browsing tasks demonstration 
uist proceedings th annual acm symposium user interface software technology pages new york ny usa 
acm press 
isbn 
doi doi acm org 
takeichi hu hayashi shin cheng mu nakano 
programmable structured documents 
japan society software science technology 
jeffrey wong jason hong 
user programming web 
chi chi extended abstracts human factors computing systems pages new york ny usa 
acm press 
isbn 
doi doi acm org 

