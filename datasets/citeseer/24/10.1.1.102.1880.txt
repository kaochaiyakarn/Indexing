trading security service oriented architecture garret swart benjamin aziz simon foley john herbert ibm almaden research center harry road san jose ca usa ibm com department computing imperial college london sw az uk doc ic ac uk department computer science university college cork cork ireland herbert cs ucc 
service oriented architectures provide simple flexible model computing system graph services making requests providing results 
define formal model service oriented architecture define metrics performance availability various security properties 
metrics serve basis expressing business requirements 
trade offs possible define set cost metrics uniform currency measure cost meeting requirement 
model property metrics cost metrics generate constraint satisfaction problem objective function set minimize aggregate system cost 
written constraints defined realistic requirements opl generate system configurations minimize cost optimally trading business requirements 
computing systems designed meet security performance availability economic requirements 
requirements simultaneously attainable maximum degree 
order get close possible meeting requirements trade offs individual requirements 
order trade offs sensible way find system configuration best meets goals need model system evaluated quickly determine system meeting requirements uniform cost model manage trade offs different requirements 
formal techniques define precise model service oriented architecture flexible simple computing model underlies web service standards popular data processing integration applications 
argue model close reality systems interesting 
formally define various properties model correspond important properties real systems 
properties define optimize different aspects data security server throughput service availability network bandwidth 
claim formal definitions properties sensible ones interesting capture important aspects system 
encode model properties optimization programming language opl application combination mathematical constraint programming techniques part opl implementation brought bear problem produce set optimal assignments logical components physical resources 
facilities opl write system model defines data constraints 
model instantiated represent computing system falls model 
instantiated model solved opl find optimal configuration resources meets requirements 
separation model instantiation solution technique allow systems systems administrators degree operations research 
show results model applied realistic system 
novel aspects include simultaneous modelling important system metrics definition cost model allows multiple business goals defined terms metrics played 
careful definition quantifiable security properties correspond properties security experts attempt optimize 
security thought binary property security metrics allows greater flexibility configuration process 
modelling service oriented architecture section define components model information user system provide component information optimizer needs produce specify configuration system 
section describe information define properties system meet planning needs system administrators 
uml class diagram showing relationship components shown 
service 
fundamental system component service oriented architecture course service 
define service entity perform set operations behalf callers defined set data 
example hertz may offer car rental booking service allows clients book cars 
avis may offer distinct service provides access cars 
may run travel agency offers services allow clients book cars hertz avis 
form distinct services 
denote set services modelled set named service 
specify load generated invocation service server running service define function loadu defines expected load units caused single invocation service 
loadu service service interface service deployable unit routing rule service dependency server subnet fig 

uml diagram service oriented model service interface 
service implements certain protocol language facilitate communication 
call protocol interface service 
facilitate interoperability services may implement interfaces 
web services infrastructure interface may specified wsdl object identified url 
corba infrastructure interface may specified idl file identified 
formally represent set implements function represents relationship service interface services implement 
implements service service dependencies 
services may composed services 
service assume set services service implementation determined expected number invocations subsidiary services invocation entry service 
determined code inspection measurement 
service binding done dynamically data collected long term behaviour particular installation 
subsidiary service may number layered service implementations 
simplicity assume cycles service implementation dependency directed graph 
information refers direct dependency call function representing information dependency 
dependency service service information estimate complete dependency matrix number calls generated directly indirectly single call service service 
estimate complete dependency matrix computing transitive closure dependency matrix 
complete graph measured preference estimate 
approach gprof estimating call graph values 
dependency service service client service 
define distinguished client service function invoke externally accessible services 
client service correct mix requests match expected calls system clients 
client service special attempt model internal behaviour allocate resources 
distinguished client service gives single row dependency matrix concentrate defines expected call load expecting service 
calls client service think counts client row dependency matrix representing number calls indicated services external clients unit time 
formally client simply distinguished element service 
client service addition service may availability requirement defines minimum probability service providing needed service distinguished client service 
define requirement function specifies minimum probability service allocated resources perform function 
availability requirement particular service function may value 
service note function dependency information generate complete service availability function section 
deployable unit 
separate service typically deployable server independently 
developer administrator typically build configure set services deployable unit installed machines 
developer may decide services need collocated process machine maintain efficiency reduce development time 
services combined deployable unit model dependencies services load dependencies rolled services invoked externally 
form deployable unit takes depends system 
ee deployable unit represented war web application archive linux deployable unit take form rpm file 
war rpm file contain generic service implementation deployable unit contains information configure implementation take role particular service data accessing services may need contact 
formally deployable units just set deployable function deploys represent composition deployable unit constituent services 
deploys service deployable server 
server entity services executed 
servers referred directly applications applications services automatically mapped servers deployed 
servers typically hardware components servers constructed logically virtual machine technology 
server specified failure probability 
specifies minimum long term probability server available providing full execution service 
section compute probability service available providing service 
specify server availability function server associated server rate perform load units expressed time units client counts dependency load unit loadu 
specify execution rate server function server resources servers assigned configuration system deployable units 
deployable unit may consume resources server assigned 
single deployable unit may deployed different servers simultaneously case load component services divided servers ratio resources assigned server deployable unit 
define number load units unit time allocated deployable unit server deployable server functions defined far function defined administrator output optimization process 
specifies services server run amount server resources assigned deployable unit 
section develop constraints ensure allocation resources deployable units satisfies system requirements 
resulting allocation overload server constraint hold serv server serv serv deployable subnet 
subnet represents portion network containing set servers 
servers subnet communicate cheaply servers different subnets protected router filtering firewalls 
formally subnet just set subnet function subnet assigns servers subnets 
subnet server subnet subnet routing rule 
filtering take place subnets represented set allowable service interfaces messages may pass subnets 
typically routing rule assigned router firewall ensure required communication passed required communication safe 
allocation deployable units servers configuration optimization process produces set subnet rules 
formally set filter rules function rules pairs subnets subset allowable service interfaces messages allowed pass subnet 
rules subnet subnet properties service oriented system measure usefulness model system properties model defined correspond properties original system 
section interesting system properties defined model argue relevance 
service availability requirement 
service availability requirement probability service responds request clients 
service clients may include distinguished client service arbitrary services service 
service available addition service available service dependencies available 
assuming availability request service independent constraint define function depends administrator provided dependency function 
service dependency informally says service available constituents available clients need 
constraints solved starting services called distinguished client service 
service nonzero value function 
value factored determine availability requirements services calls 
process repeated service availability requirements derived services 
expected process causes lower level services higher availability requirements 
availability throughput 
define execution throughput availability constraints simultaneously service properly configured probability service meeting throughput requirements large availability requirement 
acceptable configuration assign resources deployable unit large probability services part deployable unit getting execution resources perform function 
assign resources way exceed capacity server 
express fact server may allocated predicate serv server deployable serv serv specifies servers sum load units allocated deployable total load units provided server 
form predicate insists needed throughput provided required probability consider subset server set represents set servers available moment time 
subset server defined probability exactly servers available 
assuming availability server independent probability serv serv server serv serv probability exactly set servers available probability server available times probability server available 
subset expression represents number load units servers assigned deployable unit deployable 
compute function serv serv set adequate capacity classed available number load units allocated unit sufficient performing required load unit time services making compute unit service deploy dependency client loadu sum services part deployable unit number invocations service unit time multiplied number load units consumed invocation 
gives load units required unit time units allocation units server resources assigned deployable 
availability deployable unit configuration sum subsets server load units allocated deployable unit sufficient meet execution requirements services part deployable unit probability server configuration exists 
define 
server deployable unit probability larger maximum service availability requirement services deployable unit deployable max deploy allocation resources meets availability throughput requirements 
security distance 
important security considerations taken account building service infrastructure router firewall configuration 
services considerable skill attention making sure service ready withstand arrows hackers services nominally secure best accessible outside users 
services store sensitive data best practices dictate locked away levels firewall 
simple way rating network service security minimum number subnet hops needed get attacker target service 
step shortest path represents subnet traversed presumably order reach target service 
example web application infrastructures service network divided successively deeper subnets illustrated content subnet ui subnet business logic subnet database subnet san subnet 
deeper level provides lower level abstraction fine grain access checking secure authentication 
accessing successive subnet requires hacking different set systems typically different set techniques 
configuring routing rules important allow communication subnets needed services running subnets need internet snmp ssh ftp content proxy subnet network operations center subnet user interface subnet iiop soap business logic subnet oracle net fig 

typical subnet structure database subnet iscsi san subnet direct communication time want insist certain services run servers deeply hidden clients large security distance service attacker 
network subnet distance simplification security restrictions contemplate reasonable start mirrors current best practices 
constraint existence rules allowing needed communication stated service dependency serv serv server deploys serv deploys serv interface rules subnet serv subnet serv states pairs services communicate servers assigned run services interface services communicate rules set router connects subnets 
rule security distance services denote defined recurrence 
define predicate connected determines direct communications link services servers assigned services subnet 
connected serv serv server deploys serv deploys serv subnet serv subnet serv define security distance recurrence 
connected dependency min connected service security distance computed way constraints insist sensitive service large distance client subnet 
restrict optimizer doing silly running database service network order take advantage lightly loaded servers 
data risk 
security metric aggregate risk having data different customers device defined 
example storage service provider may decide store data single commercial bank storage unit accept level risk making assignment adding airline data storage unit may increase risk assignment small amount adding competitive bank unit may raise risk considerably 
service oriented context similar measure data risk defined quantifies risk placing deployable units server subnet 
risk depends assurance level trust server subnet ability keep data separate risk associated information accessed dependent services 
metric opl implementation described separate opl model described 
network bandwidth 
network bandwidth system important consideration system design 
internal switching inside subnet generally implemented high performance switching equipment optimized network performance 
communication subnets performed routers optimized security implementing hundreds complex filtering rules 
limiting load expensive routers important consideration 
help express constraints optimizer objective functions dealing bandwidth define new traffic function 
value traffic sn sn interface reports number invocations unit time interface may travel subnets 
subnets equal function gives amount intra subnet traffic interface 
function define constraints minimize usage network traffic 
define function computes set subnets executing service serv service deploys serv subnet serv function define traffic function traffic sn sn dependency client dependency service implements sn sn seen sums pairs services second service implements interface services run subnets 
pair look expected number service invocations type requested unit time 
expected number invocations client service times number invocations directly 
optimizing service oriented system previous sections seen describe service oriented system define properties constraints service oriented system look optimizing service oriented system 
mathematical programming optimization driven objective function 
difference objective function constraint constraint hold order solution objective function merely optimized solutions meeting constraints 
constraints constraint satisfaction problem objective function 
useful objective functions include minimizing cost system 
case objective function may number servers allocated deployable unit 
maximize serv server deployable serv maximizing security service 
addition setting minimum security distance constraints administrator may looking maximize minimum security distance attacker subnet set services 
priority set services protected want maximize min maximizing capacity system 
load services may grow unexpectedly administrator may wish build system existing hardware base respond quickly unexpected spikes demand spreading extra capacity evenly service deployments 
compute percentage capacity allocated service attempt maximize minimum level capacity deployable units maximizing server min deployable minimizing number routing rules 
routing rules consume resources router having rules cause router overloaded usually causing operators ill remove rules 
organization routers edge minimizing objective function important max sn sn subnet rules sn sn interface objective functions defined 
list just meant illustrative 
implementation experience test usefulness approach wanted apply model realistic test case 
test case defined configuration consisting services deployable units different service interfaces deployed servers different server classes running subnets 
availability servers varied nines availability nines 
service availability requirements top level services varied nines 
derived service availabilities deeper services went nines deeper services constrained needing security distance client 
set objective function maximize minimum level capacity deployable units 
services designed model modern multi tier web system consisting client accessible static content reverse web proxy services inner tier application services providing application ui control page generation 
ui services built tier business logic services 
service layers business logic services available proxy layer ui layer 
business logic services turn build set file database services turn built set virtual disk services implemented storage area network 
considerable tuning search procedure needed order configurations tested progress solution progressed reasonable rate 
point opl able find acceptable solutions running minutes single ghz processor 
finding optimal solutions nontrivial objective functions elusive entire solution space searched hours sample problem 
uses performance adequate example configuring enterprise data center new application application service provider new customer 
uses online reconfiguration device failure configuring dynamic grid computer performance adequate 
note numerical instability availability computations currently limits number servers server class 
result indicates approach solving configuration problems promising remains done show practical 
related modelling approach quality service prediction standard fare queuing theory focus generally difficult measure response time measure leave analysis complexity 
typical server graph queuing theory carries dependency graph 
attempts model quality service properties distributed systems context service grid fewer properties optimized 
current service grids focused mechanism configuration optimization configurations 
closely related done area provisioning storage storage network 
data storage services closely related fact think data access special case service provisioning happens services allow data access 
done area includes innovative done hp configuring storage systems 
authors storage management 
related lies network provisioning resources needed provide required quality service reserved advance 
model dynamic load static load model 
examples include 
subset service provisioning problem considered addressed constraint satisfaction problem simple big guns constraint satisfaction necessary solution 
system hp provides tools describing deploying configurations 
plans approach producing model complex system reasoning model 
applied technique problem configuring service oriented architecture 
shown compute properties resulting network properties drive automatic optimization network meet set requirements defined properties 
necessary step research experiment configuring real systems verify promised gains achievable 
determine constraints missing model allow production flawed configurations 
area extension development new types security measures 
security distance metric refined allowing routing rule separate breakage cost unit cost 
attacker search lowest cost path inner systems 
addition rules arranged partial order represent rules implicitly broken rule 
model fact successful attack system attack similar systems additional cost 
define availability service having available resources perform function 
definition mean service resources long contiguous interval time perform function 
example highly available server short mtbf incredibly small mttr may provide high availability definition unacceptable performance real situations 
define service availability probability request successfully processed doesn easily match definition availability server necessarily time 
authors anonymous referees helpful comments 
authors acknowledge support provided boole institute research informatics included 

graham kessler mckusick gprof call graph execution profiler 
thomas ed proceedings sigplan symposium compiler construction 
volume sigplan notices boston ma usa acm press 
rpm package manager www rpm org 

elizabeth simon cooper handbook process algebra 
edn 
reilly 
aziz foley herbert swart configuring storage area networks mandatory security 
farkas samarati eds proceedings th ifip annual conference data applications security catalonia spain kluwer 
ali rana walker approach qos adaptation service oriented grids 
concurrency computation practice experience 
alvarez borowsky go romer becker golding merchant veitch wilkes minerva automated resource provisioning tool large scale storage systems 
acm transactions computer systems 
anderson hobbs keeton spence veitch running circles storage administration 
long ed proceedings fast conference file storage technologies monterey california usa usenix 
lain murray configuration automatic ignition distributed applications 
proceedings hp university association th workshop university geneva switzerland www org papers overview may pdf 

ward sullivan wilkes automatic storage area network design 
long ed proceedings fast conference file storage technologies monterey california usa usenix 
swart storage management constraint satisfaction 
proceedings workshop immediate applications constraint programming cork ireland 
balter boyer architecting configuring distributed applications 
proceedings ifip international conference distributed systems platforms open distributed processing 
volume lecture notes computer science lake district uk springer verlag 
chen nahrstedt overview quality service routing generation high speed networks problems solutions 
ieee network magazine 
martn az cort dur automating procurement web services 
orlowska weerawarana papazoglou yang eds proceedings st international conference service oriented computing 
volume lecture notes computer science trento italy springer verlag 
