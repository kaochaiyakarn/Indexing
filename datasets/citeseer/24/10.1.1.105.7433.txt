appear proc 
th int 
conf 
knowledge representation reasoning kr 
adapting golog composition semantic web services sheila mcilraith knowledge systems laboratory department computer science stanford university stanford ca sam ksl stanford edu motivated problem automatically composing network accessible services world wide web proposes approach building agent technology notion generic procedures customizing user constraint 
argue augmented version logic programming language golog provides natural formalism automatically composing services semantic web 
adapt extend golog language enable programs generic customizable usable context web 
propose logical criteria generic procedures define knowledge self sufficient physically 
support information gathering combined search propose middle ground golog interpreter operates assumption reasonable persistence certain information 
contributions realized augmentation congolog interpreter combines online execution information providing web services offline simulation web services determine sequence web services subsequent execution 
implemented system currently interacting services web 
important trends emerging world wide web www 
proliferation called web services self contained web accessible programs devices 
familiar examples web services include information gathering services map service yahoo com world altering services service amazon com 
second www trend tran cao son computer science department new mexico state university po box msc cs las cruces nm usa cs nmsu edu emergence called semantic web 
contrast today web designed primarily human interpretation semantic web vision web unambiguously computer interpretable :10.1.1.11.6264
realized marking web content properties relations reasonably expressive markup language defined semantics 
daml oil description logic semantic web markup language language 
interest confluence web services semantic web 
early outlined semantic markup describing capabilities web services initially order logic predecessor daml oil :10.1.1.21.61
effort evolved coalition researchers bbn cmu nokia sri stanford yale developing daml oil ontology web services called daml 
metaphors proved useful developing markup including viewing web services functions inputs outputs alternatively primitive complex actions knowledge preconditions knowledge effects 
daml complete versions ontology released public scrutiny 
return daml 
provision effectively knowledge representation properties capabilities web services enables automation tasks outlined :10.1.1.21.61
focus task automated web service composition wsc set web services description task goal achieved travel arrangements kr conference trip find composition services achieves task 
disregarding network issues wsc conceived software synthesis problem planning plan execution problem depending represent services 
case application domain distinctive features require support tailoring 
identify address features 
appear proc 
th int 
conf 
knowledge representation reasoning kr 
conceive wsc planning execution task actions services may complex actions 
related show compile service representations operators embody possible evolutions complex action order treat complex actions primitive action plan operators 
planning task wsc distinguished planning incomplete information 
sequenced information gathering services may required execution world altering services 
imagine making travel plans web 
actions services software programs input output parameters program act knowledge preconditions knowledge effects planning context 
software programs side effects world purchase commodity modeled non knowledge effects 
service preconditions regularly limited knowledge preconditions 
information gathering services aka sensors don fail network issues aside 
exogenous events affect things sensed 
persistence knowledge temporal extent associated contrast stock prices price shirt gap affects sequencing services 
services provide multiple outputs subset selected act input subsequent service consider picking flights 
services perform similar functions wsc choose services sharing effects 
plans compositions services short plan search space short broad 
wsc tasks may may described terms goal state 
instances described set loosely coupled goals constraints 
plans may satisfy wsc task 
user input user constraints key pruning space plans choosing multitude available flights distinguishing desirable plans 
unique features wsc serve drive 
realizing wsc simply planning argue number activities user may wish perform semantic www networked service environment viewed customizations reusable high level generic procedures 
example approximately generic procedure travel plans procedure easily described 
difficult task person computer travel plans 
problem lies complexity procedure selecting services options meet individual constraints preferences 
vision construct reusable high level generic procedures archive sharable daml generic procedures ontologies multiple users access 
user select task specific generic procedure ontology submit agent execution 
agent automatically customize procedure respect user personal group inherited constraints current state world available services generate execute sequence requests web services perform task 
realize vision adapting extending logic programming language golog :10.1.1.54.7045
adaptations extensions described sections follow designed address desiderata wsc task 
generic want build class programs sufficiently generic meet needs variety different users 
programs high degree nondeterminism embody variability desired different users 
customizable want programs easily customizable individual users 
usable want programs usable different agents different priori knowledge 
consequence need ensure program accesses knowledge needs certain knowledge stipulated prerequisite executing program 
similarly program ensures actions ible 
programs knowledge physically self sufficient 
adapting golog golog high level logic programming language developed university toronto specification execution complex actions dynamical domains :10.1.1.16.8725:10.1.1.16.8725:10.1.1.54.7045
built top situation calculus order logical language reasoning action change 
golog originally developed operate considering sensing aka actions 
web applications rely version golog built top situation calculus knowledge sensing actions henceforth refer simply situation calculus 
situation calculus state world described functions relations fluents relativized situation deal sensing actions special knowledge fluent argument situation introduced 
informally holds agent situation believes function maps situation action new situation 
situation simply history primitive actions performed initial distinguished situation situation calculus theory comprises sets axioms see details domain independent foundational axioms situ ation calculus accessibility axioms stage impose conditions appear proc 
th int 
conf 
knowledge representation reasoning kr 
successor state axioms domain fluent action precondition axioms action domain serve define axioms describing initial situation including axioms unique names axioms actions domain closure axioms actions golog builds top situation calculus providing set extralogical constructs assembling primitive actions defined situation calculus complex actions collectively comprise program constructs include 
primitive actions sequences tests nondeterministic choice actions nondeterministic choice arguments nondeterministic iteration endif conditionals endwhile loops note conditional loop constructs defined terms constructs 
endif endwhile constructs write programs language domain theory endif 
domain theory golog program program execution find sequence actions denotes golog program starting execution legally terminate situation abbreviates customizing golog programs section extend golog enable individuals customize golog program specifying personal constraints 
introduce new distinguished fluent situation calculus called action desirable situation contrast action physically possible situation restrict cases action exe requiring action constrains reflexive symmetric transitive euclidean initial situation 
see pg 

necessary require 
search space actions realizing golog program 
set fluents action referred noted 
individual specifies personal constraints semantic web markup language 
constraints expressed situation calculus necessary conditions action desirable form personal constraints situation calculus formulae example buy airline ticket origin destination ing time locations greater hours 
included similarly specified dates home constraint away dates 
includes exploiting successor state axioms domain closure axioms actions define action follows 
repeated regression rewriting successor state axioms constraints relativized rewrite expression successor state axioms fluents determine having computed include addition computing set fluents modify computational semantics dialect golog 
henceforth includes appear proc 
th int 
conf 
knowledge representation reasoning kr 
particular adopt computational semantics golog 
see details 
predicates define semantics 
intended say program situation may legally execute step situation program remain ing 
legally terminate situation require change definition incorporate particular replaced 
intended say program may encode compactly simply defining replacing 
approach advan 
elaboration tolerant 
individual customized may simply added existing situation calculus axiomatization 
individual constraints change affected fluents may elaborated simple local rewrite 
easily implemented augmentation existing golog interpreters 
reduces search space terminating situations pruning situations 
computational advantages approaches determining preferred sequences actions 
approach related approach qualification problem proposed lin reiter 
types customizing constraints address soft certain temporal constraints 
address constraints 
adding order construct previous subsection described way customize golog programs incorporating user constraints 
order golog programs customizable generic nondeterminism enable variety different choice points incorporate user constraints 
golog nondeterministic choice actions construct nondeterministic choice arguments construct provide nondeterminism golog programs 
contrast sequence construct provides flexibility overly constraining 
consider program construct dictates performed situation resulting performing true program fail 
imagine precondition dictates user credit card limit 
true agent executing program flexibility perform sequence actions reduce credit card balance order achieve precondition having program fail 
sequence construct provide flexibility 
enable insertion actions sequence actions purposes achieving preconditions define new construct called order designated connective informally perform sequence action true 
false construct dictates golog search sequence actions achieves achieved plan ner searches sequence actions achieve goal restrict primitive action 
definition easily extended order complex actions defined simplify endwhile easy see loop eventually achieve precondition achieved 
extend computational semantics include 
endwhile 
defined terms existing golog constructs definitions low previous definitions 
fol note introduces undirected search instantiation process golog programs programs discretion potential computational overhead 
improve simplistic specification directed realization action selection mechanism various planning algorithms 
note order construct independently notion introduced previous subsection 
easy incorporate contributions section replacing axioms plus deontic notions may wish include 
note variant order construct utility expressing narrative proposed 
modify express actions ordered necessarily case occurred situation created combination existing constructs 
appear proc 
th int 
conf 
knowledge representation reasoning kr 
self sufficient programs golog programs customizable encoded generically wish usable 
sensing actions agent incomplete knowledge initial state true wsc exogenous actions exist change world ways agent theory world predict 
web service compositions characteristic sequences information gathering services performed distinguish subsequent world altering services 
need define golog programs variety different agents making assumptions agent knows 
want ensure golog programs self sufficient respect obtaining knowledge require execute program 
wish programs ensure preconditions actions program tries execute realized program established explicit precondition program 
concrete define notion golog program self sufficient respect action theory kernel initial state formula relativized suppressed situation denoting necessary preconditions executing characterize introduce predicate defined inductively structure endif endwhile endwhile defined terms existing constructs follows 
abbreviates formula indicating truth value known situation 
definition knowledge self sufficient program golog program knowledge self sufficient relative action theory kernel initial state iff ensures execution golog program fail lack knowledge 
program may fail may im ible perform action 
ensures agent knows true true 
ensure generic procedures physically self sufficient define definition physically self sufficient program state iff golog program physically self sufficient relative action theory kernel initial proposition golog program associate kernel initial state follows directly definitions 
discuss verify common subset golog programs 
call golog program loop free contain nondeterministic iteration loop constructs 
note may preserve loop free nature programs programming constructs defining maximum iteration count time 
follows 
proposition loop free golog program associated situation calculus theory exist order situation calculus formulae mention proof inductive structure propositions follows loop free programs verified regression followed theorem proving initial situation 
programs potentially unlimited looping order definable problematic 
proposition loop free golog program defined proposition 
consist subset accessibility relations reflexive symmetric transitive euclidean 

iff iff appear proc 
th int 
conf 
knowledge representation reasoning kr 
follows directly reiter regression theorem knowledge 
wish highlight ernie davis knowledge preconditions plans aware 
similarities 
significant difference distinction distinguish knowledge sufficiency physically sufficiency framework plan executable requires agent knowledge execute physically possible 
construct condition situation calculus theory primitive actions regressed situations verified initial situation 
develops set rules check plan executability 
set rules sufficient necessary 
executing golog programs defined customizable generic usable generic procedures wsc execute 
building golog interpreter incorporates sensing actions interplay sensing execution world altering actions complex number different approaches discussed 
advocate online interpreter reason sensing actions suggests offline interpreter conditional plans 
trade clear 
online interpreter incomplete backtracking allowed offline interpreter computationally expensive due larger search space need generate conditional plans sensing actions involved 
choice online offline interpreter depends properties domain particular exogenous actions affect value fluents temporal extent persistence information sensed 
robotics domain online interpreter appropriate offline interpreter appropriate contingency planning 
middle ground execution define middle ground offline online execution argue appropriate large class semantic web wsc applications 
middle ground interpreter mg senses online collect relevant information needed golog program simulating effects world altering actions 
executing sensing actions branching creating conditional plan mg reduces search space size maintaining ability backtrack merely simulating world altering actions initially 
outcome sequence world altering actions subsequently executed humans follow approach collecting information web flight schedules simulating world altering actions buying tickets head completed plan execute 
course veracity mg predicated important assumption information gathered world altering actions selected persists 
assume fluents mg sensing persist reasonable period time actions program cause assumption violated 
assumption generally true information access web flight schedules store merchandise stock prices 
assumption pervasive mobile robotic applications may assume persistence milliseconds minutes hours 
formalize assumption follows 
definition conditioned fluent fluent conditioned fluent golog program iff contains golog construct appears formula recall construct define conditional loop constructs 
com definition invocation reasonable persistence irp assumption golog program kernel initial state adhere invocation reasonable tence assumption 
non knowledge preconditions sensing actions true 
knowledge preconditions actions conditioned fluents established persists condition ensures sensing actions executed mg interpreter 
condition ensures decisions predicated correct information 
condition may extreme argued earlier nature web services generally knowledge preconditions 
persistence knowledge condition trivially holds frame assumption knowledge 
condition addresses change subsequent exogenous actions 
claim irp assumption mg right thing programs physically self sufficient 
claim veracity mg action theory stage alternately shown human approval execution 
interpreter generate multiple alternate courses action 
subsequent actions inside outside program change value sensed fluents 
appear proc 
th int 
conf 
knowledge representation reasoning kr 
golog program adheres irp sequence world altering actions selected middle ground interpreter mg subsequent execution 
assuming exogenous actions sensor errors follows executing yields truth value fluents oracle chooses appropriate online inter branch points interpretation terminating situation execution golog program theory inter denote sequence actions relation mg starting mg comprised sensing actions world altering actions 
sequence sensing actions likewise sequence world altering actions 
mg executes sensing actions simulation world altering actions searching find appropriate terminating situation mg outputs subsequence world altering actions extracted executed world 
theorem action theory golog program mg adheres irp suppose holds assume sensor errors exogenous actions affect fluents fluents cases irp assumption risk violated full sequence sensing world altering actions generated mg re executed online execution monitoring system 
system sensing actions verify critical persistence assumptions violated 
case irp assumption hold conditioned fluents golog program mg integrated interpreter builds conditional plans branch points adhere irp approach proposed 
explicit encoding search areas program proposed addition search construct achieve functionality middle ground interpreter 
principle defined annotation temporal extent conditioned fluents action theory provides means automatically generating programs embedded search operators proposed 
leave formal account 
trivially true virtually current day web services 
middle ground prolog interpreter section proposed extensions golog enable programs generic customizable self sufficient 
section proposed strategy middle ground execution enables efficient thorough combination sensing search 
modified congolog offline interpreter realize enhancements 
describe necessary code modifications subsections follow prove correctness implementation 
adopt notational conventions prolog code differ theories action 
avoid confusion prolog code listed courier font 
prolog variables uppercase constants lowercase contradicting situation calculus notational convention 
user customizing constraints personal constraints added congolog interpreter straightforward elegant modification code accounts addition predicate 
replaced code trans poss nil fail 
congolog interpreter trans poss desirable nil fail 
ensures action selected interpreter desirable 
section show encode predicate prolog action theory 
domain independent prolog rules mg interpreter include rule ensure actions desirable proved 
desirable desirable 
order construct include order construct added rules interpreter final action final achieve poss 
trans action trans achieve poss 
achieve goal planner adapted called world simplest breath planner developed reiter pg 

appeal simplicity soundness completeness algorithm 
obviously planner accomplish task 
investigating effectiveness planners 
appear proc 
th int 
conf 
knowledge representation reasoning kr 
sensing actions incorporate sensing actions effects interpreter approach eliminates need situation calculus fluent 
soutchanski proposed somewhat similar transformation articulating conditions representation correct 
similar spirit approach :10.1.1.16.8725
accommodate backtracking sensing assume truth value certain fluent say determined executing external function call call denoted ex ecution succeeds true false 
note prolog answers queries free variables returning possible values variables technique equally suitable sensed functional fluents 
illustrated example 
external function calls irp assumption allows write equations form embodied successor state axiom fluent equation translated prolog follows holds exec 
addition need provide set rules call action externally 
exec external function call rules domain dependent may unique specific prolog encoded situation calculus domain theory 
section discuss translate situation calculus theories prolog illustrate external function calls wsc 
translating prolog translate specific situation calculus theory set prolog rules follow description provided additions predominantly accommodate sensing actions predicate 
create corre sponding propositional propositional fluent functional fluent create corre sponding propositional successor state axioms non sensed fluents translated prolog description 
fluents truth value change result sensing action normal successor state axiom encoding augmented include suitable external function calls 
add necessary code realize calls 
action defined equation cre ate prolog rule desirable omega 
prolog negation failure infer default action desirable situation mg code section 
illustrate points examples 
example return simple travel theme 
major airlines offer www programs allow user buy air ticket online 
conceive services world altering actions situation calculus simplify example disregard parameters origin destination date respectively 
service number effects including asserting user ticket execution 
successor state axiom follows 
encoded prolog follow 
holds dt dt holds dt dt holds dt 
recall mg execute world altering actions 
external function execute 
create interpreter executed world altering actions immediately prolog code modified analogously sensing action code 
example consider map service offered www yahoo com 
simplified service takes input origin trip destination returns things driving time context wsc view service sensing action execution tells value functional fluent prolog create corresponding propositional fluent 
simplicity assume sensed extension multiple ac tions trivial 
successor state axiom follows 
note call execute ex get driving time 
holds appear proc 
th int 
conf 
knowledge representation reasoning kr 
exec ex get driving time holds 
specify get driving time executed need additional code 
implementation sensing actions calls web services 
call open agent architecture oaa agent brokering system 
oaa turn requests service directions 
write general rule call 
exec write rule actual call 
ex get driving time oaa solve get directions 
oaa solve get directions requests yahoo service provides driving time 
information provided service contains additional information including images driving directions written additional code extract need service returns 
code extraction performed 
omit details interest space 
discuss section vision semantic web services realized extra code unnecessary 
example section discussed personal preferences showed translated equation 
show represent axiom prolog encoding domain theory 
desirable dt holds home holds dt 
correctness interpreter complete section theorem proves correctness interpreter 
theorem action theory golog program exists model set prolog rules representing set prolog rules representing mg golog interpreter proof prolog interpreter 
adheres irp action theories definitional theories complete contains definition fluent theory 
achieved making closed world assumption cwa 
programs self sufficient 
proposition follows immediately implementation theorem 
proposition action theory golog pro gram adheres irp 
situations iff closed world assumption defined exists definition set prolog rules mg golog interpreter set prolog rules representing proof prolog interpreter 
composing web services significant aspect contribution research described point implemented tested running system interacts services web 
section step back situate agent technology describing context system architecture semantic web service composition 
discuss details implementation 
conclude section example generic procedure illustrates 
architecture illustrates key components semantic wsc architecture :10.1.1.21.61
course semantic web exist www yahoo com semantic markup daml oil describe services disseminate information 
describe architecture system section follow discuss accommodated pieces architecture realizable elegant way 
key features architecture follow 
semantic markup web services individual web services described semantic web markup language 
programs control structure data flow described declarative process modeling language 
processes atomic composite 
process inputs outputs preconditions effects 
grounding describes communication level properties service 
service profile created describing locating service 
collectively semantic markup provides declarative api service programs agents read markup understand interact service 
appear proc 
th int 
conf 
knowledge representation reasoning kr 
semantic markup personal constraints web procedures ontologies agent broker kb mail 
semantic markup enabled agent technology web service ontologies semantic markup web service sites semantic wsc architecture ontologies web services encourage reuse vocabulary parsimony shared semantic understanding individual web service descriptions organized web service ontologies 
example ontology contain service class called buy subclasses turn subclassed web service provider wishing describe new service simply subclass existing service inheriting vocabulary ensuring degree integration existing systems 
semantic markup ontologies generic procedures generic procedures described semantic markup constructs describe web services 
just programs 
similarly generic procedures stored ontologies facilitate sharing reuse 
ability share generic procedures motivated desire procedures knowledge physically self sufficient 
semantic markup personal constraints addition semantic markup services people archive personal preferences constraints semantic markup 
profiles likewise stored ontologies users inherit constraints family place affiliations 
semantic markup enabled agent technology architecture includes variety agent technologies communicate web services agent broker 
golog interpreter agent technology 
agent broker agent broker accepts requests services agent technology services selects appropriate service directs request service 
likewise relays responses back requester 
implementation realize agent technology started simple implementation offline congolog interpreter quintus prolog 
modified extended interpreter described section 
agent brokering performed open agent architecture oaa agent brokering system 
modified golog interpreter communicate web services oaa 
unfortunately commercial web services currently utilize semantic markup 
order provide api computer interpretable output information extraction program world wide web wrapper factory 
program extracts information need html output web services 
information gathering actions performed way 
obvious practical financial 
reasons executing world altering services 
core infrastructure working golog interpreter communicating services web oaa 
golog oaa www system august :10.1.1.21.61
refining working semantic web connections 
architecture fully realized respect full automation semantic markup 
originally constructed rudimentary service procedure ontologies order logic 
migrating daml complete daml specification 
eventually golog interpreter populate kb daml ontologies daml oil ontologies user customizing constraints 
declarative representations compiled situation calculus representation 
constructed partial compilers daml pddl pddl situation calculus predominantly hand coding situation calculus theories time 
example complete section example generic procedure 
consider example composition task travel arrangements kr conference trip perform task services available web find kr conference web page determine location dates conference 
location decide appropriate mode transportation 
traveling air check flight schedules web services book flights arrange transportation airport web service 
book rental car 
need arrange transportation db cis upenn edu plan domain definition language 
appear proc 
th int 
conf 
knowledge representation reasoning kr 
conference location 
created generic procedure arranging travel captures aspects example 
generic procedure selects books transportation car air hotel local transportation emails customer itinerary updates online expense claim 
noted previously generic procedures complex generic 
interplay user constraints approach powerful 
follows provide prolog code subset generic travel procedure 
simplified program slightly particularly number parameters illustration purposes 
informative constant term names avoid explanation 
departure return dates trip 
pi nondeterministic choice action arguments construct sensing actions associated execution code included 
recall interpret generic procedure golog look actions desirable possible 
generic procedure booking return airline ticket 
proc poss pi price id price price id price 
note choice flight price procedures booking car hotel written similar fashion 
compose procedures golog travel program 
proc travel 
note nondeterministic choice actions 
booking return air ticket booking car destination prove undesirable golog tries book car origin user drive destination back 
tested generic travel procedure different tasks different user constraints 
tests confirmed ease versatility approach wsc 
summary related addressed problem automated web service composition execution semantic web 
developed extended theoretical research reasoning action cognitive robotics implemented experimented 
addressed wsc problem provision high level generic procedures customizing constraints 
proposed golog natural formalism task 
alternative planning approach change computational complexity task generating composition 
web service compositions short search space broad 
consequently approach potential drastically reduce search space making computationally advantageous 
additionally compelling easy average web user customize 
goal develop golog generic procedures easy generic customizable usable variety users varying conditions 
augmented golog ability include customizing user constraints 
added new programming construct called order relaxes notion sequence enabling insertion actions achieve precondition action performed program 
construct facilitates customization enabling generic procedures 
defined notion knowledge physically self sufficient programs executable minimal assumptions agent initial state knowledge state world 
showed criteria verified regression theorem proving 
adherence criteria generic procedures amenable wide spread 
execute programs defined middle ground approach execution performed online execution necessary information gathering web services offline simulation world altering services 
mg interpreter determined sequence world altering web services subsequent execution 
proved approach execution intended consequences irp assumption 
contributions implemented modifications existing congolog interpreter proved correctness implementation 
semantic web architecture includes agent broker communication web services variety service related ontologies 
tested results generic procedure travel variety different customizing constraints showcase effectiveness approach 
focused web service composition broad relevance variety cognitive robotic tasks 
appear proc 
th int 
conf 
knowledge representation reasoning kr 
related identified body closely related 
agent technologies deserve mention 
topic agents internet popular years 
related softbot done university washington 
action schemas describe information providing world altering actions agent plan achieve goal internet 
developed sort agent technology interacts web 
cognitive robotics group university toronto providing initial congolog interpreter extended augmented sri open agent architecture software 
zeng oaa interface golog code :10.1.1.21.61
gratefully acknowledge financial support defense advanced research projects agency daml program number 
second author acknowledge support nsf nsf eia nasa ncc 
benjamins ibrow intelligent brokering service knowledge component reuse world wide web 
kaw banff canada berners lee hendler lassila :10.1.1.11.6264
semantic web 
scientific american may 
daml 
www daml org services 
daml coalition ankolekar burstein hobbs lassila martin mcilraith narayanan paolucci payne sycara zeng 
daml semantic markup web services 
proc 
int 
semantic web working symposium swws 
davis 
knowledge preconditions plans 
journal logic computation 
de giacomo lesp rance levesque 
con golog concurrent programming language situation calculus 
aij 
de giacomo levesque 
incremental interpreter high level programs sensing 
logical foundations cognitive agents contributions honor ray reiter pages 
de giacomo levesque :10.1.1.16.8725
projection regression sensors 
ijcai 
etzioni weld 
softbot interface internet 
jacm pages july 
hendler mcguinness 
darpa agent markup language 
ieee intelligent systems trends controversies november december 
horrocks van harmelen patel schneider berners lee brickley connolly dean decker fensel hayes heflin hendler lassila mcguinness stein 
daml oil march 
www daml org daml oil index 
knoblock mixed initiative multi source information assistants 
proceedings th international conference world wide web pages 
lakemeyer 
sensing line interpreting golog 
logical foundations cognitive agents contr 
honor ray reiter pages 
levesque reiter lesperance lin scherl 
golog logic programming language dynamic domains 
journal logic programming april june 
lin reiter 
state constraints revisited 
journal logic computation 
special issue action processes 
martin cheyer moran 
open agent architecture framework building distributed software systems 
applied artificial intelligence january march 
mccarthy 
mathematical logic artificial intelligence 
pages winter 
mcilraith 
planning complex actions 
submitted publication 
mcilraith son zeng :10.1.1.21.61
semantic web services 
ieee intelligent systems special issue semantic web march april 
mcilraith son 
adapting congolog programming semantics web 
working notes fifth international symposium logical formalization commonsense reasoning pages 
reiter 
narratives programs 
proc 
seventh international conference knowledge representation reasoning kr pages 
reiter 
knowledge action logical foundations specifying implementing dynamical systems 
mit press 
na 
local conditional high level robot programs 
proceedings th workshop nonmonotonic reasoning action ijcai august pages 
scherl levesque 
frame problem knowledge producing actions 
proceedings th national conference artificial intelligence pages 
soutchanski 
correspondence different solutions projection task sensing 
working notes common sense pages 
waldinger 
deductive composition web software agents 
proc 
nasa wkshp formal approaches agent systems lncs 
springer verlag 
