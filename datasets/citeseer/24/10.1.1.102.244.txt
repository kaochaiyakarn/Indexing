computer scientist know floating point arithmetic david goldberg xerox palo alto research center coyote hill road palo alto floating point arithmetic considered subject people 
surprising floating point ubiquitous computer systems language floating point datatype computers pcs supercomputers floating point accelerators compilers called compile floating point algorithms time time virtually operating system respond floating point exceptions overflow presents tutorial aspects floating point direct impact designers computer systems 
begins background floating point representation rounding error continues discussion ieee floating point standard concludes examples computer system builders better support floating point categories subject descriptors primary computer systems organization general instruction set design programming languages processors numerical analysis general computer arithmetic error analysis algorithms secondary software engineering requirements specifications languages programming languages formal definitions theory operating systems process management synchronization general terms algorithms design languages additional key words phrases denormalized number exception floating point floating point standard gradual underflow guard digit nan overflow relative error rounding error rounding mode ulp underflow builders computer systems need information floating point arithmetic 
remarkably sources detailed information 
books subject floating point computation pat long print 
tutorial aspects floating point arithmetic floating point direct connection systems building 
consists loosely connected parts 
section discusses implications different rounding strategies basic opera tions addition subtraction multiplication division 
contains background information methods measuring rounding error relative error 
second part discusses ieee floating point standard rapidly accepted commercial hardware manufacturers 
included ieee standard rounding method basic operations discussion standard draws material section 
third part discusses connections floating point design various aspects computer systems 
topics include instruction set design permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication data appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
acm acm computing surveys vol march david goldberg contents rounding error floating point formats error guard cancellation exactly rounded operations ieee standard formats operations exceptions flags trap handlers systems aspects instruction sets languages exception handling details rounding error decimal conversion errors summary appendix acknowledgments optimizing compilers exception handling 
statements floating point provided justifications explanations central main argument section called details skipped desired 
particular proofs theorems appear section 
marked symbol proof included appears immediately statement theorem 

rounding error squeezing infinitely real numbers finite number bits requires approximate representation 
infinitely integers programs result integer computations stored bits 
contrast fixed number bits calculations real numbers produce quantities exactly represented bits 
result floating point calculation rounded order acm computing surveys vol march fit back finite representation 
resulting rounding error characteristic feature floating point computation 
section describes measured 
floating point calculations rounding error anyway matter basic arithmetic operations introduce bit rounding error necessary 
question main theme section 
section discusses guard digits means reducing error subtracting nearby numbers 
guard digits considered sufficiently important ibm added guard digit double precision format system architecture single precision guard digit retrofitted existing machines field 
examples illustrate utility guard digits 
ieee standard goes just requiring guard digit 
gives algorithm addition subtraction multiplication division square root requires implementations produce result algorithm 
program moved machine results basic operations bit machines support ieee standard 
greatly simplifies porting programs 
uses precise specification section 
floating point formats different representations real numbers proposed far widely floating point representation floating point representations base assumed precision number represented 
decimal number representations slas aud logan th floating point arithmetic 
normalized numbers em emax 
represented exactly approximately 
general floating point number represented dd dd 
called significand digits 
precisely 
dld dp represents number dl 
dp il 
term floating point number mean real number exactly represented format discussion 
parameters associated floating point representations largest smallest allowable exponents 
possible max possible exponents floating point number encoded ma 

log final sign bit 
precise encoding important 
reasons real number exactly representable floating point number 
common situation illustrated decimal number 
finite decimal representation binary infinite repeating representation 
number lies strictly floating point numbers exactly representable 
common situation real number range absolute value larger 
term introduced forsythe moler generally replaced older term mantissa 
smaller em 
discusses issues due reason 
numbers range discussed sections 
floating point representations necessarily unique 
example represent 
leading digit nonzero eq 
representation said normalized 
floating point number normalized 
normalized floating point numbers shown 
bold hash marks correspond numbers significant 
requiring floating point representation normalized representation unique 
unfortunately restriction impossible represent zero 
natural way repre sent em preserves fact numerical ordering nonnegative real numbers corresponds lexicographical ordering floating point representations 
exponent stored bit field means values available exponents reserved represent note floating point number part notation different floating point multiply operation 
meaning symbol clear context 
example expression involves single floating point multiplication 
assumes usual arrangement exponent stored left significant acm computing surveys vol 
march david goldberg relative error 
rounding error inherent floating point computation important way measure error 
con ulp 
sider floating point format section 
result floating point computation answer computed particular relative error corre spending ulp vary factor factor called 
setting largest bounds say nite precision clear error units real number floating point rounded number relative closest error place 
similarly real number represented bounded machine epsilon referred error units place 
general floating point number 
fle repre sent error id 
flp units place term shorthand units place 
result calculation floating point num ber nearest correct result error ulp 
way measure difference floating point number real number approximating relative error difference tween numbers divided example relative er oo 
avoid small numbers relative error normally written factor times case 
relative error expressed oo illustrate difference relative error consider real number 
approximated 
error relative error consider computation 
exact value computed value real error number 
committed example relative approximating 
error relative error 
compute relative error cor responds ulp observe real number approximated closest possible floating point number dd 
dd absolute error error measured times larger relative error 
general base fixed relative error expressed factor 
con eq 
shows fixed error results relative error 
large digit 
error natural rounding error way 
measure example numb form dd dd absolute error values range fle relative error ranges rounding flo ting point number corresponds ulp 
analyzing rounding error caused various formulas relative error better measure 
illustration analysis immediately proof theorem 
overestimate effect rounding un ess number larger em smaller lem 
numbers range fashion considered notice 
nearest floating point number factor error estimates formulas tighter machines small acm computmg surveys vol 
march order magnitude rounding error interest may interchangeably differ factor 
example floating point number error means number contaminated digits logd relative error computation ne contaminated digits log 
guard digits method computing difference floating point numbers compute difference exactly round nearest floating point number 
expensive operands differ greatly size 
assuming calculated rounds 
digits floating point hardware normally operates fixed number digits 
suppose number digits kept smaller operand shifted right digits simply discarded opposed rounding 

answer exactly difference computed exactly rounded 
take example 
yz 
correct answer computed difference floating point arithmetic wrong digit 
bad error 
theorem floating point format parameters computing differences digits relative error result large 
relative error expression occurs 
pp 
wherep 
digits equal 
exact difference computing answer digits rightmost digit gets shifted computed difference error relative er ror 

absolute error large result times larger 
put way shows number contaminated digits log digits result wrong 
suppose extra digit added guard situation guard digit 
smaller number truncated digits result subtraction rounded digits 
guard digit previous example answer exact 
single guard digit relative error re suit may greater ox rounds compared correct answer relative error greater acm computing surveys vol march david goldberg 
general relative error result slightly larger precisely theorem 
theorem floating point numbers format subtraction done digits guard digit relative rounding error result 
theorem proven section 
addition included theorem positive negative 
cancellation section summarized saying guard digit relative error committed subtracting nearby quantities large 
words evaluation expression containing subtraction addition quantities opposite signs result relative error large digits meaningless theorem 
subtracting nearby quantities significant digits operands match cancel 
kinds cancellation catastrophic benign 
catastrophic cancellation occurs operands subject rounding errors 
example quadratic formula expression bz ac occurs 
quantities ac subject rounding errors results floating point multiplications 
suppose rounded nearest floating point number accurate ulp 
subtracted cancellation cause accurate digits disappear leaving mainly digits contaminated rounding error 
difference error 
example consider 
exact value ac 
rounds ac rounds final answer error exactly equal acm computmg surveys vol march 
subtraction introduce error exposed error introduced earlier multiplications 
benign cancellation occurs subtracting exactly known quantities 
rounding error theorem subtraction done guard digit difference small relative error 
formula exhibits catastrophic cancellation rearranged eliminate problem 
consider quadratic formula ac ac ac involve cancellation 
addition subtraction formulas catastrophic cancellation 
avoid multiply numerator denominator similarly obtain rl rz ac computing rl formula involve cancellation 
computing rl rz 
hand computing rl 
expression formula exhibits catastrophic cancellation 
accurate evaluate 
quadratic expression cause catastrophic cancellation accurate case rounding errors rounding error committed computing smaller affect final subtraction 
formula improved form subtraction benign cancellation quantities rounding error catastrophic 
theorem relative error true multiplying quantities small relative error results product small relative error see section 
avoid confusion exact computed values notation 
denotes exact difference denotes computed difference rounding error 
similarly denote computed addition multiplication division respectively 
caps indicate computed value function ln sqrt 
lowercase functions traditional mathematical notation denote exact values ln 
excellent approximation floating point numbers approximations true quantities example exactly known decimal numbers expressed exactly binary 
case approximation huge relative error compared true expression advantage dramatic 
comput ing amount computing clearly preferred form case 
general replacing catastrophic cancellation benign worthwhile expense large input approximation 
ing cancellation entirely quadratic formula worthwhile data exact 
assumed floating point inputs algorithm ex results computed accurately possible 
expression accurate rewritten catastrophic cancellation floating point arithmetic replaced benign 
interesting examples formulas exhibiting catastrophic cancellation rewritten exhibit benign cancellation 
area triangle expressed directly terms lengths sides 
suppose triangle flat term eq 
subtracts nearby numbers may rounding error 
example correct value 
computed value error computed value error 
way rewrite formula return accurate results flat triangles kahan 
la 

satisfy simply rename applying 
straightforward check right hand sides algebraically identical 
values gives computed area ulp error accurate formula 
formula accurate example nice know performs general 
theorem rounding error incurred area provided subtraction performed guard digit square roots computed ulp 
acm computing surveys vol 
march david goldberg condition met troublesome expression virtually actual floating point sys rewritten exp ln tem 
example problem compute ensures small approach 
approximation ln statements theorem dis case payment relative error expression understood expression accurate obvious formula 
computed floating point arith way compute ln 
particular relative error accurately theorem shows expression hewlett packard formula yields accurate sqrt cents 
theorem assumes ln ap proximate ln ulp 
problem solves small 
ln close ln lost information low order bits com cumbersome nature puted value ln close statement theorems actual value 
usually say computed value writing circle theorem notation 
error bounds usually pessimistic 
numerical example computed value compared true value relative error main reason computing error bounds get precise bounds verify formula contain numerical problems 
final example expression rewritten benign cancellation 
expression arises financial calculations 
consider depositing day bank account earns annual interest rate compounded daily 
amount money accumulated year dollars 
computed result compared exact answer discrepancy 
reason problem easy see 
expression involves adding low order bits lost 
rounding error amplified raised nth power 
acm computmg surveys vol march ln computed formula ln ix relative error provided subtraction performed guard digit computed ulp 
formula value interesting catastrophic cancellation occurs naive formula ln formula may mysterious simple explanation works 
write ln ln xl xv 
left hand factor computed exactly right hand factor ln suffer large rounding error adding constant ln changing slightly introduce error 
words computing xk approximation xp ln 
value computed accurately 
exactly equal results section summarized saying guard digit guarantees accuracy nearby precisely known quantities subtracted benign cancellation 
formula gives inaccurate results rewritten higher cal accuracy benign cancellation procedure works subtraction performed guard digit 
price guard digit high merely requires making adder bit wider 
bit double precision adder additional cost 
price gain ability run algorithms formula computing area triangle expression theorem computing ln 
modern computers guard digit 
exactly rounded operations floating point operations done guard digit accurate computed exactly rounded nearest floating point number 
operations performed manner called exactly rounded 
example immediately preceding theorem shows single guard digit give exactly rounded results 
section gave examples algorithms require guard digit order properly 
section gives examples algorithms require exact rounding 
far definition rounding 
rounding straightforward exception round halfway cases example op 
thought divides digits half letting round round round 
rounding works digital floating point arithmetic equipment comput ers 
school thought says numbers halfway possible round half time round half 
way ob taining behavior require rounded result significant digit 
rounds 
methods best round round 
reiser knuth offer reason preferring round 
theorem floating point numbers define xl ley exactly rounded round xl 
clarify result consider 
rounding sequence xl xl lo successive value increases 
round 
example suggests round rule computations gradually drift upward round theorem says happen 
rest round 
application exact rounding occurs multiple precision arithmetic 
basic approaches higher precision 
approach represents float ing point numbers large significant stored array words codes routines manipulating numbers assembly language 
second approach represents higher precision floating point numbers array ordinary floating point vax trademark digital equipment 
acm computmg surveys vol march david goldberg numbers adding elements array infinite precision recovers high precision floating point number 
second approach discussed 
advantage array floating point numbers coded portably high level language requires exactly rounded arithmetic 
key multiplication system representing product xy sum summand precision done splitting writing xl yl exact product xy 
bit summands bit provided xi xh yh 
represented bits 
easy find splitting 
number xo 
xl xp written sum xo 
xl xp 

xp 
odd simple splitting method 
extra bit gained negative numbers 
example split xl 
way split number 
splitting method easy compute due dekker requires single guard digit 
theorem floating point precision restriction assume fl ating point operations exactly rounded 
half precision rounded fik je split xh xl xh xe xl xh representable bits precision 
see theorem works example 
ac rounded nearest floating point number computed value ac 
error acm computmg surveys vol march 
theorem write 
summand exact sum left unevaluated point 
similarly ac 
subtracting series term term gives estimate ac identical exactly rounded result 
show theorem really requires exact rounding consider 
mx 
subtraction performed single guard digit 
xl xl representable final example exact rounding consider dividing 
result floating point number general equal 
multiplying restore provided exact rounding 
general fact due kahan true 
proof ingenious readers interested details skip ahead section 
theorem integers special form provided fi ating point operations exactly rounded 
proof scaling power harmless changes exponent significant 
scale scale 

significant bits bit right binary point 
changing sign harmless assume 
ij prove theorem requires showing bit right binary point nij round deal halfway case note initial unscaled low order bit low order bit scaled halfway cases round suppose 

qp 
estimate nq ifs 
compute nl odd integer 
km numerator integer odd fact odd integer 

assume case similar 
nij im nij 
establishes proves theorem 
theorem holds true base long replaced dj 
gets larger 
fewer fewer denominators form 
position answer question matter basic floating point arithmetic arithmetic operations introduce little rounding error necessary 
answer matter accurate basic operations enable prove formulas correct sense small relative error 
section discussed algorithms require guard digits produce correct results sense 
input formulas numbers representing imprecise measurements bounds theorems interesting 
reason benign cancellation catastrophic approximations measured quantity 
accurate operations useful face inexact data enable establish exact relationships discussed theorems 
useful floatingpoint variable approximation actual value 

ieee standard different ieee standards floating point computation 
ieee binary standard requires single precision double precision ieee 
specifies precise layout bits single double precision 
ieee allows specify floating point numbers encoded bits cody 
require particular value specifies constraints allowable values single double precision 
term ieee standard discussing properties common standards 
section provides tour ieee standard 
subsection discusses aspect standard included 
purpose argue ieee standard best possible floating point standard accept standard provide 
full details consult standards cody cody ieee 
acm computing surveys vol march david goldberg formats operations 
base clear ieee allows 
base humans exchange think numbers 
especially appropriate calculators result operation displayed calculator decimal 
reasons ieee requires base 
section mentioned reason results error analyses tighter rounding error ulp factor fl computed relative error error analyses simpler relative error 
related reason effective precision large bases 
consider fi compared 
systems bits significant 
consider computation 
represented exact 
represented hexadecimal digit 
represented bit correct 
general base lose bits precision effective precision low 
large values problems ibm choose system 
ibm knows sure possible reasons 
increased exponent range 
single precision system 
significant requires bits 
fit bits leaves bits exponent sign bit 
magnitude representable numbers ranges 
get similar exponent range require bits exponent leaving bits significant 
just pointed effective precision low bits 
worse possible gain extra bit acm computing surveys vol march precision explained section machine bits precision compare range bits machine 
possible explanation choosing bits shifting 
adding floating point numbers exponents different shifted radix points line slowing operation 
system numbers exponent shifting required adding possible pairs distinct numb rs set 
system numbers exponents ranging shifting pairs 
required modern hardware performance gained avoiding shift subset operands negligible small preferable base 
advantage way gain extra bit significance floating point numbers normalized significant bit significant reason waste bit storage representing 
formats trick said hidden bit 
pointed section requires special convention method exponent significant zeros represent mln ieee single precision encoded bits bit sign bits exponent bits sig 
uses significant bits 
hidden bit bits encoded appears published goldberg knuth page attributes idea konrad zuse 
precision ieee standard defines different precision single double single extended double extended 
single double precision correspond roughly floating point hardware provides 
single precision occupies single bit word double precision consecutive bit words 
extended precision format offers just little extra precision exponent range table 
ieee standard specifies lower bound extra bits extended precision provides 
minimum allowable double extended format referred bit format table shows bits 
reason hardware implementations extended precision normally hidden bit bits standard puts emphasis extended precision making recommendation concerning double precision strongly recommending implementations support extended format corresponding widest basic format supported motivation extended precision comes calculators display digits digits internally 
displaying digits calculator appears user black box computes exponential cosines digits accuracy 
calculator compute functions exp log cos digits reasonable efficiency needs extra digits 
hard find simple rational expression approximates log error units place 
computing digits gives answer correct digits 
keeping extra digits hid kahan extended precision bits significant widest precision carry propagation done intel increasing cycle time kahan 
floating point arithmetic den calculator presents simple model operator 
extended precision ieee standard serves similar function 
enables libraries compute quantities ulp single double precision efficiently giving user libraries simple model primitive operation simple multiply invocation log returns value accurate ulp 
extended precision important sure transparent user 
example calculator internal representation displayed value rounded precision display result operations depend hidden digits appear unpredictable user 
illustrate extended precision consider problem converting ieee single precision decimal 
ideally single precision numbers printed digits decimal number read back single precision number recovered 
turns decimal digits recover single precision binary number see section 
converting decimal number back unique binary representation rounding error small ulp fatal give wrong answer 
situation extended precision vital efficient algorithm 
single extended available straightforward method exists converting decimal number single precision binary 
read decimal digits integer ignoring decimal point 
table represented exactly single extended 
find appropriate power necessary scale combination exponent decimal number position ignored decimal point 
compute represented exactly 
multiply divide 
acm computmg surveys vol 
march david goldberg table 
ieee format parameters format parameter single single extended double double extended emax exponent width bits format width bits operation done exactly closest binary number recovered 
section shows multiply divide exactly 
single extended format enables digit decimal numbers converted closest binary number exactly rounded 
algorithm compute exactly rounded binary equivalent shows guarantee conversion binary decimal back recover original binary number 
double precision supported algorithm run double precision single extended convert double precision digit decimal number back require double extended format 
exponent exponent positive negative method chosen represent sign 
common methods representing signed numbers sign magnitude complement 
sign magnitude system sign significant ieee formats bit hold sign rest bits represent magnitude number 
complement representation integer arithmetic 
scheme number represented smallest nonnegative number congruent modulo 
ieee binary standard methods represent exponent uses biased acm computmg surveys vol march representation 
case single precision exponent stored bits bias double 
means value exponent bits interpreted unsigned integer exponent floating point number 
called biased exponent di unbiased exponent advantage biased representation nonnegative point numbers treated integers comparison purposes 
referring table single precision 
reason having reciprocal smallest number mm overflow 
true reciprocal largest number underflow underflow usually serious overflow 
section explained representing section introduce 
ieee single precision means biased exponents range unbiased exponents range exactly nonnegative numbers represented bits 

operations ieee standard requires result addition subtraction multiplication division exactly rounded 
result computed exactly rounded nearest floating point number round 
section pointed computing exact difference sum float ing point numbers expensive exponents substantially different 
section introduced guard digits provide practical way computing differences guaranteeing relative error small 
computing single guard digit give answer computing exact result rounding 
introducing second guard digit third sticky bit differences computed little cost single guard digit result difference computed exactly rounded goldberg 
standard implemented efficiently 
reason completely specifying results arithmetic operations improve portability software 
program moved support ieee arithmetic intermediate result differs software bugs differences arithmetic 
advantage precise specification easier reason floating point 
proofs floating point hard having deal multiple cases arising multiple kinds arithmetic 
just integer programs proven correct floating point programs proven case rounding error result satisfies certain bounds 
theorem example proof 
proofs easier operations reasoned precisely specified 
algorithm proven correct ieee arithmetic correctly machine supporting ieee standard 
brown proposed axioms floating point include existing floating point hardware 
proofs system verify algorithms sections require features hardware 
furthermore brown axioms complex simply defining operations performed exactly rounded 
proving theorems brown axioms usually difficult floating point arithmetic proving assuming operations exactly rounded 
complete agreement operations floating point standard cover 
addition basic operations ieee standard specifies square root remainder conversion integer floating point correctly rounded 
requires conversion internal formats decimal correctly rounded large numbers 
miranker proposed adding inner product list operations precisely specified 
note inner products computed ieee arithmetic final answer quite wrong 
example sums special case inner products sum exactly equal machine ieee ic computed result 
possible compute inner products ulp hardware takes implement fast multiplier kirchner operations mentioned standard conversion decimal binary required exactly rounded 
reason efficient algorithms exactly rounding operations conversion known 
conversion best known efficient algorithms produce results slightly worse exactly rounded ones 
ieee standard require transcendental functions exactly rounded table maker dilemma 
illustrate suppose making table exponential function places 
exp 
rounded 
exp computed carefully arguments including inner product basic operations kahan leblanc 
acm computing surveys vol march david goldberg 
exp transcendental go arbitrarily long distinguishing exp ddd 
practical specify precision transcendental functions functions computed infinite precision rounded 
approach specify transcendental functions algorithmically 
appear single algorithm works hardware architectures 
rational approximation cordic large tables different techniques computing transcendental contemporary machines 
appropriate different class hardware single algorithm works acceptably wide range current hardware 
special quantities floating point hardware bit pattern represents valid floatingpoint number 
ibm system example 
hand vax reserves bit patterns represent special numbers called reserved operands 
idea goes back cdc bit patterns special quantities indefinite infinity 
ieee standard continues tradition number pronounced rhyme plan 
special quantities way handle exceptional situations square root negative number aborting computation 
ibm system fortran default action response computing square root negative number results printing error message 
cordic acronym coordinate rotation digital computer method computing transcendental funct ons uses shifts adds multiplications divisions walther method intel motorola 
acm computmg surveys vol 
march table 
ieee special values exponent fraction represents ml 
fx mln emax fx ay bit pattern represents valid number return value square root floating point number 
case system fortran returned 
ieee arithmetic nan returned situation 
ieee standard specifies special values see table denormalized numbers nan explained section 
special values encoded exponents pointed exponent 

traditionally computation treated unrecoverable error causes computation halt 
examples sense computation continue situation 
consider subroutine finds zeros function say zero 
traditionally zero finders require user input interval function defined zero finder search 
subroutine called zero 
useful zero finder require user input extra information 
general zero finder especially appropriate calculators natural key function awkward specify domain 
easy see zero finders require domain 
zero finder probing function various values 
probed value outside domain code table 
operations produce nan operation nan produced rem rem rem fi compute computation halt unnecessarily aborting zero finding process 
problem avoided introducing special value called nan specifying computation expressions produce nan halting 
list situations cause nan table 
zero probes outside domain code return nan zero finder continue 
zero punished making incorrect guess 
example mind easy see result combining nan ordinary floating point number 
suppose final statement return sqrt 
return nan 
sqrt nan sqrt nan sum nan number nan 
similarly operand division operation nan quotient nan 
general nan participates floating point operation result nan 
approach writing zero solver require user input domain signals 
zero finder install signal handler floating point exceptions 
evaluated outside domain raised exception control returned zero solver 
problem approach language different method handling signals method hope portability 
ieee represented floating point numbers expo floating point arithmetic nent nonzero 
implementations free put information significant 
unique nan family 
nan ordinary floating point number combined result nan operand 
result long computation nan system dependent information significant information generated nan computation generated 
caveat statement 
operands result nan generated 
infinity just provide way continue computation expressions encountered provide way continue overflow occurs 
safer simply returning largest representable number 
example consider com puting 
th en overflow replaced 
similarly yz yz overflow turn replaced 
final result drastically wrong 
correct answer 
ieee arithmetic result yz yz 
final result safer returning ordinary floating point number near correct answer division results nan 
nonzero number divided returns infinity reason distinction point default ieee arithmetic round overflowed numbers possible change default see section 
acm computing surveys vol march david goldberg approaches limit value 
example sin thinking limiting situation quotient small numbers represent 
ieee standard results nan 
analytic functions small limit ieee standard defines long sign depends signs usual way distinguish getting overflow getting division checking status flags discussed detail section 
overflow flag set case division flag second 
rule determining result operation infinity operand simple replace infinity finite number take limit iim similarly ai limit exist result nan nan table additional examples 
agrees reasoning conclude nan 
subexpression evaluates nan value entire expression nan 
case value expression ordinary floating point number rules practical example rules infinity arithmetic 
consider computing function 
bad formula overflow larger fib iz infinity arithmetic give rong answer yield number near rewritten 
improved expression overflow prematurely infinity arithmetic acm computmg surveys vol march correct value infinity arithmetic expression requires test adds extra instructions may disrupt pipeline 
example illustrates general fact infinity arithmetic avoids need spe cial case checking formulas need carefully inspected sure spurious behavior infinity 
zero zero represented exponent mm zero significant 
sign bit take different values zeros distinction comparing simple tests unpredictable behavior depending sign ieee standard defines comparison 
possible ignore sign zero ieee standard 
multiplication division involves signed zero usual sign rules apply computing sign answer 
zero sign relation fail hold reason result results sign information having lost 
way restore identity kind infinity result disastrous consequence losing sign overflowed quantity 
example signed zero concerns underflow functions discontinuity zero log 
ieee arithmetic natural define log log nan 
suppose represents small negative number zero 
signed zero negative log return nan 
signed zero log function distinguish negative number return example function discontinuity zero signum function returns sign number 
probably interesting signed zero occurs complex arithmetic 
example consider equation 
certainly true 
obvious computation gives problem traced fact square root multivalued way select values continuous entire complex plane 
square root continuous branch cut consisting negative real numbers excluded consideration 
leaves problem negative real numbers form io 
signed zero provides perfect way resolve problem 
numbers form square root numbers form side branch cut square root sign 
fact natural formulas computing give results 
return fi 
io io io io io io ieee arithmetic preserves identity sophisticated examples kahan 
distinguishing advantages occasionally confusing 
example signed zero destroys relation false floating point arithmetic ieee committee decided advantages signed zero outweighed disadvantages 
denormalized numbers consider normalized floating point numbers 

numbers appear perfectly ordinary floating point numbers factor larger smallest floating point number 
strange property 
reason small represented normalized number flushed zero 
important preserve property 
lo easy imagine writing code fragment having program fail due spurious division zero 
tracking bugs frustrating time consuming 
philosophical level computer science text books point currently impractical prove large programs correct designing programs idea proving re suits better code 
example introducing invariants useful going part proof 
floating point code just code helps provable facts depend 
example analyzing formula helpful oy see theorem 
similarly knowing true writing reliable floating point code easier true numbers prove 
ieee standard uses denormalized numbers guarantee called 
acm computmg surveys vol march david goldberg 


flush zero compared gradual underflow 
useful relations 
controversial part standard probably accounted long delay getting approved 
high performance hardware claims ieee compatible support denormalized numbers directly traps consuming producing leaves software simulate ieee standard 
idea denormalized numbers goes back goldberg simple 
exponent significant normalized 
example longer 
smallest floating point number floating point number 
small hidden bit number exponent 
significant greater equal implicit leading bit 
solution similar represent summarized table 
exponent 
represent 
formally bits significant field bl bp value exponent number represented 
bl bz number represented bz 

exponent needed exponent 
cause troublesome aspects 
programs frequently run noticeably slower hardware uses software traps 
acm computmg surveys vol march recall example 
section 
flush zero repre sented denormalized number 
behavior called gradual underflow 
easy verify holds gradual underflow 
illustrates denormalized numbers 
top number line shows normalized floating point numbers 
notice gap smallest normalized number em 
result floating point calculation falls gulf flushed zero 
bottom number line shows happens added set floating point numbers 
gulf filled result calculation represented nearest 
denormalized numbers added number line spacing adjacent floating point numbers varies regular way adjacent spacings length differ factor 
spacing abruptly changes em factor pp orderly change factor algorithms large relative error normalized numbers close underflow threshold behaved range gradual underflow 
gradual underflow simple expression large relative error normalized inputs seen 
arge relative errors happen cancellation example shows demmel 
consider dividing complex numbers ib id obvious formula ib ac bd ad id suffers problem component denominator id larger fib formula overflow final result may range 
better method computing quotients smith formula zc ib lcl id applying smith formula gives correct answer gradual underflow 
yields flush zero error 
typical denormalized numbers guarantee error bounds arguments way 
exceptions flags trap handlers exceptional condition division zero overflow occurs ieee arithmetic default deliver result continue 
typical default results nan overflow 
preceding sections gave examples proceeding exception default values reasonable thing 
exception occurs status flag set 
implementations ieee standard required provide users way read write status flags 
flags sticky floating point arithmetic set remain set explicitly cleared 
testing flags way distinguish genuine infinity overflow 
continuing execution face exception conditions appropriate 
section gave example 
xf denominator infinite resulting final answer totally wrong 
formula problem solved rewriting rewriting may solve problem 
ieee standard strongly recommends implementations allow trap handlers installed 
exception occurs trap handler called setting flag 
value returned trap handler result operation 
responsibility trap handler clear set status flag value flag allowed undefined 
ieee standard divides exceptions classes overflow underflow division zero invalid operation inexact 
separate status flag class exception 
meaning exceptions self evident 
invalid operation covers situations listed table 
default result operation causes invalid exception return nan converse true 
operands operation nan result nan invalid tion raised operation satisfies conditions table 
inexact exception raised result floating point operation exact 
system exact exact raises inexact exception 
section discusses algorithm uses inexact exception 
summary behavior exceptions table 
implementation issue connected fact inexact exception raised 
floating point acm computing surveys vol 
march david goldberg table 
exceptions exception result traps disabled argument trap handler overflow fm round underflow em round divide zero operands invalid amn operands inexact round round exact result operation single precision double xm 
hardware flags interrupts operating system signal floating point exception cost inexact exceptions prohibitive 
cost avoided having status flags maintained software 
time exception raised set software flag ap class tell floating point hardware mask class exceptions 
exceptions run interrupting operating system 
user resets status flag hardware mask 
trap handlers obvious trap handlers backward compatibility 
old codes expect aborted exceptions occur install trap handler aborts process 
especially useful codes loop 
comparing nan returns false code go infinite loop nan 
interesting trap handlers comes computing products potentially overflow 
solution logarithms compute exp log 
problems approach accurate costs simple expression iix overflow 
solution trap handlers called counting avoids problems 
idea follows global counter initialized zero 
acm computmg surveys vol 
march partial product xi overflows trap handler increments counter returns overflowed quantity exponent wrapped 
ieee single precision max overflow cause trap handler called wrap exponent back range changing ph see 
similarly underflows counter decremented negative exponent get wrapped positive 
multiplications done counter zero final product 
counter positive product overflowed counter negative 
partial products range trap handler called computation incurs extra cost 
underflows calculation accurate computed logarithms pk computed full precision multiply 
barnett discusses formula full accuracy underflow counting turned error earlier tables formula 
ieee specifies overflow underflow trap handler called passed wrapped result argument 
definition wrapped overflow result computed infinite precision divided rounded relevant precision 
underflow result multiplied 
exponent single precision double precision 
transformed example 
rounding modes ieee standard rounding occurs operation result exact exception binary decimal conversion operation computed exactly rounded 
default rounding means round nearest 
standard requires rounding modes provided round round round convert integer operation round causes convert floor function round ceiling 
rounding mode affects overflow round round effect overflow positive magnitude causes default result largest representable number similarly overflows negative magnitude produce largest negative number round round effect 
application rounding modes occurs interval arithmetic mentioned section 
interval arithmetic sum numbers interval rounded rounded exact result addition contained interval 
rounding modes interval arithmetic usually implemented computing machine epsilon 
results overestimates size intervals 
result operation interval arithmetic interval general input operation interval 
intervals added result rounding mode set rounding mode set 
floating point calculation performed interval arithmetic final answer interval contains exact result calculation 
helpful interval turns large floating point arithmetic correct answer interval 
interval arithmetic sense conjunction multiple precision floating point package 
calculation performed precision interval arithmetic suggests final answer may inaccurate computation redone higher higher precision final interval reasonable size 
flags ieee standard number flags modes 
discussed status flag exceptions underflow overflow division zero invalid operation inexact 
rounding modes round nearest round round round strongly recommended enable mode bit exceptions 
section gives examples modes flags put 
sophisticated example discussed section 
consider writing subroutine compute integer 
simple routine true return compute accurate way compute call positive power expression multiplies quantities rounding error division 
second expression exact final division commits just additional acm computmg surveys vol march david goldberg rounding error 
unfortunately slight strategy 
positive power underflows underflow tra handler called underflow status flag set 
incorrect underflow overflow range 
ieee standard gives user access flags subroutine correct 
turns overflow underflow trap enable bits saves overflow underflow status bits 

nei th overflow underflow status bit set restores trap enable bits 
status bits set restores flags calculation causes correct exceptions occur 
example flags occurs formula computing arccos rl arccos arctan arctan evaluates arc cos correctly evaluate arctan infinity arithmetic 
small computation cause divide zero exception flag set arc cos exceptional 
solution problem straightforward 
simply save value divide zero flag computing arccos restore old value computation 

systems aspects design aspect computer system requires knowledge floating point 
computer architec range just tiny bit smaller underflow threshold em em em may overflow ieee precision em 
acm computmg surveys vol march tures usually floating point instructions compilers generate floating point instructions operating system decide exception conditions raised floating point instructions 
computer system designers rarely get guidance numerical analysis texts typically aimed users writers software computer designers 
example plausible design decisions lead unexpected behavior consider basic program print equal print equal compiled run borland turbo basic ibm pc program prints equal 
example analyzed section 
incidentally people think solution anomalies compare floating point numbers equality consider equal error bound hardly cure raises questions answers 
value 
really considered equal different signs 
furthermore relation defined rule equivalence relation imply instruction sets common algorithm require short higher precision order produce accurate results 
example occurs quadratic formula 
discussed section ac rounding error contaminate half digits roots computed quadratic turbo basic registered trademark borland international formula 
performing ac double precision half double precision bits root lost means single precision bits preserved 
computation ac double precision quantities single precision easy multiplication instruction takes single precision numbers produces double precision result 
produce exactly rounded product digit numbers multiplier needs generate entire bits product may throw bits away proceeds 
hardware compute double precision product single precision operands normally little expensive single precision multiplier expensive double precision multiplier 
despite modern instruction sets tend provide instructions produce result precision operands 
instruction combines single precision operands produce double precision product useful quadratic formula worth adding instruction set 
instruction uses 
consider problem solving system linear equations written matrix form ax probably designers orthogonal instruction sets precision floating point instruction independent actual operation 
making special case multiplication destroys orthogonality floating point suppose solution computed method gaussian elimination 
simple way improve accuracy result called improvement 
compute solve system note exact solution zero vector general computation incur rounding error ay ax lj unknown true solution 
improved estimate solution jl 
steps repeated replacing 
argument accurate informal 
information see golub van loan 
performing iterative improvement vector elements difference nearby inexact floatingpoint numbers suffer catastrophic cancellation 
iterative improvement useful ax computed double precision 
case computing product single precision numbers full double precision result needed 
summarize instructions multiply floating point numbers return product twice precision operands useful addition floating point instruction set 
implications compilers discussed section 
languages compilers interaction compilers floating point discussed discussion section taken 
acm computing surveys vol 
march david goldberg ambiguity ideally language definition define semantics language precisely prove statements programs 
usually true integer part language lan guage definitions large gray area comes floating point modula exception nelson 
due fact language designers believe floating point entails rounding error 
previous sections demonstrated fallacy reasoning 
section discusses common areas language definitions gi es suggestions deal 
remarkably languages clearly specify floating point variable say value occurrence say value 
example ada brown model imply floating point arithmetic satisfy brown axioms expres sions possible values 
thinking floating point fuzzy way stands sharp contrast ieee model result floating point operation precisely defined 
ieee model prove evaluates theorem brown model 
ambiguity language definitions concerns happens overflow underflow exceptions 
ieee standard precisely specifies behavior exceptions languages standard model avoid ambiguity 
gray area concerns interpretation parentheses 
due roundoff errors associative laws algebra necessarily hold floating point ada registered trademark government ada joint program office acm computing surveys vol 
march numbers 
example expression totally different answer case 
importance preserving parentheses 
algorithms theorems depend 
example theorem formula mx mx re duce parentheses destroying entire algorithm 
language definition require parentheses honored useless floating point calculations 
subexpression evaluation imprecisely defined languages 
suppose ds double precision single precision 
expression ds product performed single double precision 
integers division integer floating point 
ways deal problem completely satisfactory 
require variables expression type 
simplest solution drawbacks 
languages pascal subrange types allow mixing subrange variables integer variables somewhat bizarre prohibit mixing single double precision variables 
problem concerns constants 
expression languages interpret single precision constant 
suppose programmer decides change declaration floating point variables single double precision 
treated single precision constant compile time error 
programmer hunt change floating point constant 
second approach allow mixed expressions case rules subexpression evaluation provided 
number guiding examples 
original definition required floating point expres sion computed double precision kernighan ritchie 
leads anomalies example immediately proceeding section 
expression computed double precision single precision variable quotient rounded single precision storage 
repeating binary fraction computed value double precision different stored value single precision 
comparison fails 
suggests computing expression highest precision available rule 
guiding example inner products 
inner product thousands terms rounding error sum substantial 
way reduce rounding error accumulate sums double precision discussed detail section 

double precision variable single precision arrays inner product loop look 
multiplication done single precision advantage double precision accumulation lost product truncated single precision just added double precision variable 
rule covers previous examples compute expression highest precision variable occurs expression 
computed entirely single boolean value true il il computed double precision gaining full advantage double precision accumulation 
rule simplistic cover cases cleanly 
dx dy double precision variables expression single dx dy contains double precision variable performing sum double precision pointless assumes common convention single precision constant odo double precision constant 
floating point arithmetic cause operands single precision result 
sophisticated subexpression evaluation rule follows 
assign operation tentative precision maximum precision operands 
assignment carried leaves root expression tree 
perform second pass root leaves 
pass assign operation maximum tentative precision precision expected parent 
case leaf single precision operations done single precision 
case il il tentative precision multiply operation single precision second pass gets promoted double precision parent operation expects double precision operand 
single dx dy addition done single precision 
presents evidence algorithm difficult implement 
disadvantage rule evaluation subexpression depends expression embedded 
annoying consequences 
example suppose debugging program want know value subexpression 
simply type subexpression debugger ask evaluated value subexpression program depends expression embedded 
final comment subexpression converting decimal constants binary operation evaluation rule affects interpretation decimal constants 
especially important constants exactly representable binary 
potential gray area occurs language includes tion built operations 
basic arithmetic operations value exponentiation obvious kahan 
exponentiation operator certainly value 
acm computing surveys vol 
march david goldberg problematical 
operator checks integer powers compute 
formula hand define real arguments depending log function result nan natural definition log nan 
tran clog function answer ansi fortran standard defines clog log ansi 
programming language ada avoids problem defining exponentiation integer powers ansi fortran prohibits raising negative number real power 
fact fortran standard says arithmetic operation result mathematically defined prohibited unfortunately ieee standard meaning mathematically defined longer totally clear cut 
definition method section 
example determine value ab consider nonconstant analytic functions property approaches limit value ab 
definition set quite reasonable 
case om limit approaches limit nan 
case log 
analytical take value az 

log 
acm computmg surveys vol 
march means definition unambiguously define exponential function arguments particular define 
ieee standard section discussed features ieee standard 
ieee standard says features accessed programming language 
usually mismatch floatingpoint hardware supports standard programming languages pascal fortran 
ieee capabilities accessed library subroutine calls 
example ieee standard requires square root exactly rounded square root function implemented di rectly hardware 
functionality easily accessed library square root routine 
aspects standard easily implemented subroutines 
example computer languages specify floating point types ieee standard different precision recommended configurations single plus single extended single double double extended 
infinity provides example 
constants represent supplied subroutine 
unusable places require constant expressions initializer constant variable 
subtle situation ing state associated computation state consists rounding modes trap enable bits trap handlers exception flags 
approach provide subroutines reading writing state 
addition depends restriction nonconstant 
restriction removed letting identically function gives possible value lim gt defined nan 
single call atomically set new value return old value useful 
examples section showed common pattern modifying ieee state change scope block subroutine 
burden programmer find exit block sure state restored 
language support setting state precisely scope block useful 
modula language implements idea trap handlers nelson 
number minor points need considered implementing ieee standard language 
zo 
defined confusing nan equal number including nan longer true 
fact expression simplest way test nan ieee recommended function provided 
furthermore unordered respect numbers defined causes floating point numbers partially ordered compare function returns unordered easier programmer deal comparisons 
ieee standard defines basic floating point operations re turn nan operand nan best definition compound operations 
example computing appropriate scale factor plotting graph maximum set values computed 
case sense max operation simply ignore 
rounding problem 
ieee standard defines rounding pre rounding mode round case floating point arithmetic depends current value rounding modes 
conflicts definition implicit rounding type conversions explicit round function languages 
means programs wish ieee rounding natural language primitives conversely language primitives inefficient implement number ieee machines 
optimizers compiler texts tend ignore subject floating point 
example aho mentions replacing leading reader assume replaced expressions semantics binary machine represented exactly binary 
textbook suggests replacing seen expressions quite different values qualify statement algebraic identity optimizing code noting optimizers violate language definition leaves impression floating point semantics important 
language standard specifies parenthesis honored totally different answer discussed 
problem closely related preserving parentheses illustrated code eps eps eps eps code designed give estimate machine epsilon 
optimizing compiler notices eps eps program changed completely 
computing smallest number greater compute largest number rounded em avoiding acm computing surveys vol 
march david goldberg kind optimization important worth presenting useful algorithm totally 
problems numerical integration numerical solution differential equations involve computing sums 
terms 
addition potentially introduce error large ulp sum involving thousands terms quite bit rounding error 
simple way correct store partial summand double precision variable perform addition double precision 
calculation done single precision performing sum double precision easy computer systems 
calculation done double precision doubling precision simple 
method advocated sort numbers add smallest largest 
efficient method dramatically improves accuracy sums theorem 
theorem kahan summation formula suppose el xj computed algorithm forj computed sum equal dj ive xi 
naive formula xl computed sum equal xx comparing error kahan summation formula shows dramatic improvement 
summand perturbed perturbations large simple formula 
details section 
acm computmg surveys vol march optimizer believed floatingpoint arithmetic obeyed laws algebra conclude rendering algorithm completely useless 
examples summarized saying optimizers extremely cautious applying algebraic identities hold mathematical real numbers expressions involving floatingpoint variables 
way optimizers change semantics floating point code involves constants 
expression oe implicit decimal binary conversion operation converts decimal number binary constant 
constant represented exactly binary inexact exception raised 
addi tion underflow flag set expression evaluated single precision 
constant inexact exact conversion binary depends current value ieee rounding modes 
optimizer converts oe binary compile time changing semantics program 
constants exactly representable smallest available precision safely converted compile time exact raise exception unaffected rounding modes 
constants intended converted compile time done constant declaration const pi 
common subexpression elimination example optimization change floating point semantics illustrated code may appear common subexpression rounding mode different evaluation sites 
final examples replaced boolean constant true fails nan fails opposite greater ordinary floating point numbers 
despite examples useful optimizations done floating point code 
identities valid floating point numbers 
examples ieee arithmetic lxx xx 
se simple identities fail machines cdc cray supercomputers 
instruction scheduling inline procedure substitution potentially useful final example 
sider expression dx single precision variables dx double 
machines ins multiplies single precision numbers produce double precision number dx get mapped instruction compiled series instructions convert operands double perform multiply 
double double precision compiler writers view restrictions prohibit converting irrelevant interest programmers tricks 
mind floating point num ers model real numbers obey laws real numbers 
problem real number semantics 
expensive implement 
time bit numbers multiplied product bits 
time bit numbers widely spaced exponents added sum bits 
algorithm involves thousands operations solving linear system soon operating huge numbers hopelessly slow 
vms math libraries vax weak form inline procedure substitution inexpensive jump subroutine call slower calls instructions 
floating point arithmetic implementation library functions sin cos difficult value transcendental functions rational numbers 
exact integer arithmetic provided lisp systems handy problems 
exact floating point arithmetic rarely useful 
fact useful algorithms kahan summation formula exploit bound holds similar bounds 
bounds hold commercial hardware just machines ieee arithmetic foolish numerical programmers ignore algorithms compiler writers destroy algorithms pretending floating point variables real number semantics 
exception handling topics discussed primarily concerned systems implications accuracy precision 
trap handlers raise interesting systems issues 
ieee standard strongly recommends users able specify trap handler classes exceptions section gave applications user defined trap handlers case invalid operation division zero exceptions handler provided operands exactly rounded result 
depending programming language trap handler able access variables program 
exceptions trap handler able identify operation performed precision destination 
ieee standard assumes operations conceptually serial interrupt occurs possible identify operation operands 
acm computing surveys vol march david goldberg machines pipelining multiple arithmetic units exception occurs may simply trap handler examine program counter 
hardware support identifying exactly operation trapped may necessary 
problem illustrated program fragment suppose second multiply raises exception trap handler wants value hardware add multiply parallel move addi ion operation ahead second multiply add proceed parallel multiply 
second multiply traps executed potentially changing result reasonable compiler avoid kind optimization floating point operation potentially trap virtually instruction scheduling optimizations eliminated 
problem avoided prohibiting trap handlers accessing variables program directly 
handler operands result argument 
problems 
fragment instructions executed parallel multiply traps argument overwritten addition especially addition usually faster multiply 
computer systems support trap handlers ieee standard pro ide way save value hardware having compiler avoid situation 
ka proposed trap handlers avoid problems 
method user acm computmg surveys vol march specifies exception value result exception occurs 
example suppose code computing sin user decides rare improve performance avoid test handle case trap occurs 
ieee trap handlers user write handler returns value installs computing sin user specify invalid operation occurs value 
kahan calls value specified exception occurs 
trap handlers value returned computed trap occurs 
advantage straightforward hardware implementation 
soon type exception determined index table contains desired result operation 
attractive attributes widespread acceptance ieee standard widely implemented hardware manufacturers 

details various claims concerning properties floatingpoint arithmetic 
proceed show floating point black magic straightforward subject claims verified mathematically 
section divided parts 
part represents error provides section 
second part explores binary decimal conversion filling gaps section 
third part discusses kahan summation formula example section rounding error discussion rounding error stated single guard digit guarantee addition subtraction accurate theorem 
proceed verify fact 
theorem parts subtraction addition 
part subtraction follows theorem positive point numbers format parameters subtraction done digits guard digit relative rounding error result 
proof interchange necessary harmless scale represented xo 
xl 
represented yo 
yl 
yp 
difference exact 
represented yl yp guard digit ensures computed difference exact difference rounded floating point number rounding error 
general oy yh truncated digits 

definition guard digit computed value rounded floating point number rounding error satisfies exact difference ji 
cases 
relative error bounded ti floating point arithmetic second smallest 
case relative error bounded 

final case 
way happen case applies relative error bounded 
bound exactly bound achieved limit adding numbers sign guard digit necessary achieve accuracy result shows 
theorem relative error computing guard digits 
proof algorithm addition guard digits similar algorithm subtraction 
shift right radix points aligned 
discard digits shifted past position 
compute sum digit numbers exactly 
round digits 
verify theorem guard digits general case similar 
loss generality assuming scaled form 

assume carry 
digits shifted acm computing surveys vol march david goldberg value sum relative error 
carry error shifting added rounding error 
sum ii relative error 
obvious combining theorems gives theorem 
theorem gives relative error performing operation 
comparing rounding error requires knowing relative error multiple operations 
relative error satisfies 
write way dl 
similarly 
relative error equal bounded 
words maximum relative error rounding errors small number negligible 
similar result small value relative error nearby values plugged relative error usually quite large 
way see try duplicate analysis worked yielding xth yc 
assuming multiplication performed computing exact product rounding relative error ulp uu floating point numbers putting equations letting gives 
relative error incurred computing ey xa xa ya 
acm computmg surveys vol 

march nearby error term large result 
computations formally justify claim accurate 
turn analysis formula area triangle 
estimate maximum error occur computing fact needed 
theorem subtraction performed guard digit computed exactly proof note exponent certainly exact 
condition theorem exponents differ 
scale interchange necessary represented xo xl xp yl 
yp 
algorithm comput ing compute exactly round floating point number difference form dl 
dp difference digits long rounding necessary 
form dl cip 
hypothesis theorem replaced stronger condition necessary 
analysis error previous section fact relative error basic operations addition subtraction small eqs 

common kind error analysis 
analyzing formula requires theorem proof show 
theorem subtraction uses guard digit sides triangle relative error computing provided 
proof examine factors 
theorem relative error til 
value factor ed ti 
means vi ql term involves potentially catastrophic subtraction gi may rounding er 
ror 
sides triangle combining ordering gives 
satisfies floating point arithmetic conditions theorem 
means el exact harmless subtraction estimated theorem nj 
third term sum exact positive quantities lq 
term theorem theorem 
multiplication assumed exactly rounded xy combining gives ql 
upper bound expands 
writers simply ignore term easy account 
writing cl polynomial positive ts increasing function 

get lower bound note cr acm computing surveys vol 
march david goldberg 
combining bounds yields 
relative error 
theorem shows catastrophic cancellation formula 
necessary show formula numerically stable satisfying bound entire formula theorem section gives 
proof theorem 
ce ob theorem shows 
easy check sl provided 
satisfy condition 
ti 
square roots computed ulp error comput ing error committed dividing 
factor necessary method proof theorem final error bound ti dominated til 
theorem ln derivative satisfies 
proof note alternating series decreasing terms 
easier see series alternating 
taylor series alternating decreasing terms 
proof theorem 
taylor series ln alternating series ln 
relative error incurred approximating ln bounded 
relative error bounded 
define 
division logarithms computed ulp computed value expression ln ln lo el estimate mean value theorem says jl 

heuristic explanation im definition follows statement combining theorem gives theorem precise theorem de lw just closely approxi means mates constant 
acm computing surveys vol march multiplying introduces final computed value easy check 
interesting example error analysis formulas occurs quadratic formula section explained rewriting elimi nate tial caused operation 
cancellation occur bz ac 
elim nated simple rearrangement formula 
roughly speaking ac rounding error contaminate half digits roots computed quadratic formula 
informal proof approach estimating error quadratic formula appears kahan 
ac rounding error contaminate half digits roots computed quadratic formula 
proof write ac ac rewritten ac dl 
get estimate size error ignore second order terms case absolute error aca ld 
ac term da ig 
estimate second term informal proof assume multiplication exact require 
floating point arithmetic fact ax bx rl rz ac rl second error term ac til 
computed value inequality shows absolute error rl fi absolute error rl destroys bottom half bits roots rl 
words calculation roots involves computing expression meaningful bits position corresponding lower order half lower order bits meaningful 
turn proof theorem 
fact theorem proven appendix 
theorem assume floating point operations exactly rounded 
exactly equal rounded significant digits 
precisely rounded significant imagining radix point just left significant digits rounding integer 
proof theorem 
theorem rounded places 
carry represented significant digits 
suppose carry 
xl xp rounding adds way carry lf xp 
case low order digit le digits 
acm computmg surveys vol 
march david goldberg deal xl scale integer satisfying bp 
ik ifi digits zl low order digits 
cases consider 
rounding places chopping xl il 
zt digits zl digits 
representable fp significant bits 
second case computing xk involves rounding xh xl xh pk pk 
el digits representable digits 
xh ith depending round 
xl represented digit 
theorem gives way express product single precision numbers exactly sum 
companion formula expressing sum exactly 
dekker knuth theorem section 
exactly rounded operations formula true example shows 
binary decimal conversion single precision expect converting binary number decimal digits sufficient recover original binary number 
case 
converting decimal number closest binary number recover original floating point number 
proof binary single precision numbers lying half open interval bits left binary point bits right binary point 
different binary numbers interval 
decimal numbers represented digits decimal numbers interval 
way decimal numbers represent different binary numbers 
decimal digits represent binary number uniquely 
show digits sufficient show spacing binary numbers greater spacing decimal numbers 
ensure decimal number interval ulp ulp contains binary number 
binary number rounds unique decimal number turn rounds unique binary number 
show spacing binary numbers greater spacing decimal numbers consider interval 
interval spacing consecutive decimal numbers 
smallest integer spacing binary numbers spacing gets larger interval 
check wl za fact lj lo zl theorem argument precision shows applied double decimal digits binary ieee single precision required recover double precision number converted closest number 
digit decimal number binary decimal conversion recover binary number vides example flags 
uniquely decimal 
recall section recover decimal digits binary number decimal acm computmg surveys vol march sion decimal binary conversion computed exactly 
conversion performed multiplying quantities ip exact single extended precision rounding single precision dividing cases similar 
computation ipi exact combined operation round ip exact rounding single extended single precision 
see fail exact take simple case single single extended 
product rounded part single extended multiply operation 
rounding single precision give 
answer correct rounding product single precision give 
error result double rounding 
ieee flags double rounding avoided follows 
save current value inexact flag reset 
set rounding mode round zero 
perform multiplication ip 
store new value inexact flag restore rounding mode inexact flag 
exact round ip correct bit 
digits truncated round zero truncates 
significant product look 
bl bz double rounding error may occur bz simple way account cases perform logical 
round ip computed correctly cases 
errors summation section mentioned problem accurately computing long sums 
simplest approach improving accuracy double precision 
get rough estimate doubling precision improves accuracy sum si xl sz sl 

floating point arithmetic ignoring order terms gives second shows computed alue exact summation performed perturbed values 
term xl perturbed ne term second equality shows error term bounded xj 
doubling precision effect squaring sum done ieee double precision format ne reasonable value doubling precision takes maximum perturbation ne changes error bound kahan summation formula theorem double precision better single precision 
intuitive explanation kahan summation formula works consider diagram proce dure isl yh zl yl acm computing surveys vol 
march david goldberg time summand added correction factor applied loop 
subtract correction computed previous loop xj giving corrected summand add summand running sum low order bits yl lost sum 
compute high order bits computing subtracted low order bits recovered 
bits lost sum diagram 
correction factor loop 
formal proof theorem taken knuth page appears appendix 

summary uncommon computer system designers neglect parts system related floating point 
probably due fact floating point little attention computer science curriculum 
turn caused apparently widespread belief floating point quantifiable subject little point details hardware software deal 
demonstrated possible reason rigorously floating point 
example floating point algorithms involving cancellation proven small relative errors underlying hardware guard digit efficient algorithm binary decimal conversion proven invertible provided extended precision supported 
task constructing reliable floating point software easier underlying computer system supportive floating point 
addition examples just mentioned guard digits extended precision section examples ranging instruction set design compiler optimization illustrating better support floating point 
increasing acceptance ieee floating point standard means codes acm computmg surveys vol march features standard portable 
section gave numerous examples illustrating features ieee standard writing practical floatingpoint codes 
appendix appendix contains technical proofs omitted text 
theorem setm fik assume point operations exactly rounded 
exactly equal rounded significant digits 
precisely rounded significant imagining radix point just left significant digits rounding integer 
proof breaks cases depending computation mx fik carry 
assume carry 
harmless scale integer 
computation mx kx looks aa 
aabb 
bb aa 
aabb 
bb zz 
bb partitioned parts 
low order digits marked high order digits marked compute mx involves rounding low order digits ones marked mx 
value bb greater 
pre ifa bb 
floating point arithmetic compute looks mx aa 
aabb bb aa aabb bb 
zzz bb picture shows computation mx mod rounded exact top line flk value unimportant 
digit results adding 
lowest order digit ture aa 
aabb 
oo bb bb zz bb 
subtracting causes borrow digit marked difference rounded net effect rounded difference equals top line bb subtracted borrow 
result kx 
consider case bb 
ifr odd difference rounded giving kx 
similarly odd difference rounded difference kx 
summarize ex kx 
combining eqs 
gives mod rf result performing computation 
oo aa 
aabb 
bb bb 
bb aa 
oo 
rule computing eq 
rule rounding ah places 
computing mx mx floating point arithmetic precision exactly equal rounding places case carry 
kx carry mx aa aabb 

oo bb 
bb rounding gives kx bb 
bb bo 
rn ox mx mod fik 
exactly rounding ah 
places involves rounding 
theorem proven cases 
theorem kahan summation formula suppose ej 
xj computed algorithm ll fm computed sum equal xx nc jj 
proof recall error estimate simple formula xx went 
introduce si xl xl 
computed sum sum terms multiplied expression acm computing surveys vol march david goldberg involving exact coefficient xl sk yh 
renumbering coefficient xz 

proof theorem runs sk ck qk exactly lines ak cients xl tail complicated 
de ck ffk kck ok yk xk ck qk sk yk ok ck sk sk sk greek letters bounded 
coefficient xl ultimate expression interest turns easier compute coefficient xl sh ck ck 
yl yj si xl xl aj calling coefficients xl expressions ch sk respectively 
ck ck qk bk sk ok yk ck dk sk ck sk ck kck sk uk yk dk sk ck ak ck uk sk ck qk uk dk get general formula sk ch computed ck expand definitions sk ck order formulas ignoring terms involving simplified gives sk sk ok ck ok sk xk ck sk sk sk ck kc 
acm computing surveys vol march formulas gives jz ql yl general easy check induction ck ok ql 
wanted coefficient xl sk 
get value greek letters subscripts equal compute coef xi coefficient vi yi 
acknowledgments article inspired course sun microsystems kahan ably organized david hough sun may july 
aim enable learn interaction floating point computer systems having get time attend am lectures 
due kahan colleagues xerox parc especially john gilbert reading drafts providing useful comments reviews paul hilfinger anonymous referee helped improve presentation 
sethi ullman 
princ ples techn ques tools 
addison wesley reading mass ansi 
american national standard programming language fortran ansi standard 
american national standards institute new york 

portable floating point environment 
manuscript 
brown 
simple realistic model floating point computation 
acm trans 
math 
softw 

cardelli donahue glassman jordan nelson 
modula report revised 
digital systems research center report palo alto calif cody 
proposed radix word length independent standard floatingpoint arithmetic 
ieee micro 
cody 
floating point standards theory practice 
reliability computing floating point arithmetic role methods scientific computing ramon moore ed 
academic press boston mass pp 

contributions proposed standard binary floating point arithmetic 
phd dissertation univ california berkeley 
dekker 
floating point technique extending available precision 
numer 
math 

demmel 
underflow reliability numerical software 
siam sci 
stat 
comput 


compiler support floatingpoint computation 
pratt 
experi 

forsythe moler 
computer linear algebraic systems 
prentice hall englewood cliffs goldberg 
bits digit accuracy 

acm 
goldberg 
computer arithmetic 
computer arch quantitative approach david patterson john hennessy eds 
morgan kaufmann los altos calif appendix golub van loan 
matrix computations 
johns hopkins university press baltimore md hewlett packard 
hp advanced funct ons handbook 
ieee 
ieee standard binary floating point arithmetic ieee 
reprinted sigplan 
kahan 
survey error analysis 
information processing ljubljana yugoslavia north holland amsterdam vol pp 

kahan 
calculating area angle needle triangle 
unpublished manuscript 
kahan 
branch cuts complex elementary functions 
state art numerical powell eds oxford university press chap 

kahan 
unpublished lectures sun microsystems mountain view calif kahan 
near orthogonality syntax semantics diagnostics numerical programming environments 
relations zp numerical computation programming languages reid ed north holland amsterdam pp 
kahan leblanc 
anomalies ibm package 
proceedings th ieee computer arithmetic urbana ill pp 

acm computing surveys vol 
march david goldberg kernighan ritchie 
language 
prentice hall englewood cliffs nj 
kirchner arithmetic vector processors 
proceedings th ieee symposium computer arithmetic como italy pp 

knuth 
art computer programming addison wesley reading mass vol 
ii nd ed 
er 
arithmetic digital computer new approach siam rev 
finite received december final revision accepted march acm computmg surveys vol 
march precision rational arithmetic slash number systems 
ieee trans 
comput 

reiser knuth 
evading drift floating point addition inf 
process 
lett 
computation prentice hall englewood cliffs sign logarithm number system ieee trans comput 
walther 
elementary functions 
proceedings spring jo nt computer conference pp 

