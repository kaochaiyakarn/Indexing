uml profile support requirements engineering kaos william heaven anthony finkelstein department computer science university college london london wc bt heaven finkelstein cs ucl ac uk important approaches requirements engineering years kaos model 
introduce profile allows kaos model represented uml 
includes informal presentation profile full account new stereotypes tags 
outline integration requirements models lower level design models uml leading uniform comprehensive specification document 
requirements engineering uml requirements engineering helped enormously methods guide practitioner task identifying requirements system 
important approaches requirements engineering years kaos model 
introduce profile allows kaos model represented uml 
ability model kaos approach uml offers potential extra tool support 
tool developed supports kaos uses non standard graphical notation specifically developed approach 
notation tool familiar 
hand uml editors ubiquitous software industry updated recognize new profiles 
furthermore modelling kaos uml industry standard remove need software engineer master new graphical notation order employ kaos methods 
additionally uml documentation requirements engineering process sit comfortably uml documentation software project 
purposes traceability models integrated documentation sort highly desirable 
uml currently provides explicit support requirements phase project 
exclusively object oriented framework creates difficulties mapping requirements lower level entities design model requirements typically capture concerns class boundaries design level 
address problem note profile complemented subject oriented design techniques uml 
subject oriented design approach provides mechanisms arranging uml classes concern profile representing requirements uml facilitate mapping domain 
requirements model design model instances single uml meta model 
claim contribution modest uml profile increase usefulness kaos 
method truly successful large number professionals sufficiently convinced potential industrial cases 
uml support requirements engineering kaos may help achieve 
kaos elucidation manipulation goals natural part doing requirements engineering requirements nature targets reached 
previous requirements engineering techniques focused foremost entities activities 
goal oriented methodologies give primary place intentional goals development software systems entities activities determined identification goals 
consideration goals leads exploration alternative system designs state goal having specify achieved helping designer build better system 
successful goal oriented method kaos 
kaos having identified preliminary goals system kaos framework facilitates identification goals requisites objects agents actions system 
kaos supplies rich ontology capturing modelling requirements 
meta level essentially taxonomy concepts guide identification requirements relationships 
goals taken describe expected properties system example achieve ambulance intervention 
kaos framework asks analyst define network concepts domain 
goals analyzed better understood identifying higher level goals goals explain goal desired clearly defined reducing subgoals 
identifying relationships goal goals goal graph developed 
goal graphs semantic networks xor relationships goals goal reduced conjunction subgoals exclusive disjunction 
conflict relationships goals may traced 
leaves goal graphs requisites goals reduced assigned responsibility individual agents 
requisite assigned software agent taken requirement agent domain taken assumption 
distinguishing requirements assumptions identifies boundary software environment system 
intuitively requirements prescriptive statements assumptions descriptive 
requisites operationalized actions performed agents responsible requisite way composite system satisfies goals 
agents may monitor control certain objects identified defining goals 
objects inputs outputs actions 
goals concern objects objects ensure requisite take part action operationalizes requisite 
identifying possible obstacles goal allows reformulate goal graph strengthen requirements specification choosing alternative reduction paths agent introducing new goals mitigate obstacle 
method roughly consists 
identifying reducing goals requisites identified 
identifying objects goal descriptions 
assigning requisites objects actions agents 
new goals may identified employing established patterns goal type 
example goal may achieve maintain form 
form goal determine may reduced patterns see 
patterns hide requirements engineer formal groundwork describing relationships goals 
formal language real time temporal operators provided formalization necessary methodology discourages overuse 
time place formalization occasions certain correctness model hindrance redundant 
instances kaos concepts goal requisite action goals requisites actions identified particular domain formal definition 
tactics selecting alternative goal reductions assignments provided 
kaos uml kaos model lends representation uml 
tiered structure involves meta level domain level instance level respectively mirror meta model layer model layer user model layer uml 
entities lower level instances entities level 
kaos model semantic network nodes concepts connections nodes associations concepts 
parallels uml 
parts kaos model graphical representation semantic network supplementary textual definition optional formal representation expressed temporal logic 
profile introduces new stereotypes tags 
extension allows model kaos semantic network graphically uml stereotyped classes associations represent informal formal descriptions tags stereotyped classes associations 
formal expressions need rewritten ascii characters uml editors support symbols kaos temporal logic 
cases may useful capture formal expression ocl expression directly constrains diagram model instance ocl extended temporal keywords 
cases formalization purpose reasoning goal conflicts obstacles ocl probably best medium formalization 
uml extended introducing new stereotypes language 
stereotypes applied existing uml entities classes associations augment semantics standard elements newly defined meanings allowing model previously unsupported concepts 
particular extension uml packaged profile 
heuristic purposes think profile extension uml meta model layer layer uml concepts class object association defined stereotype concept provides way branding model elements behave respects instances new virtual meta model constructs 
uml model level think class stereotyped goal instance class classification instance conflicts controls monitors concerns reduces reduces goal requisite input output kevent performs capability ensures requirement assumption operationalizes fig 

profile metamodel responsibility goal virtual extension class construct 
way provide extra categorization elements model 
stereotype may attributes modelled tags stereotyped class 
new tags may introduced independent elements 
shows meta model proposed profile minimal syntax omitting attributes classes readability 
stereotype reduces specialization existing uml abstraction stereotype refines abstraction specialization dependency 
rest set follows 
section informal presentation profile examples case study letier known software fiasco london ambulance service section outlines potential integrating goal driven requirements model lower level design models 
fuller case study section related covered section section concludes 
appendix provides full account stereotypes tags profile 
legend presentation follows discusses concepts domain kaos hand uml 
entities kaos modelled stereotyped classes uml model 
talking kaos concepts normal font example goal reduced goal 
talking uml stereotypes sans serif font stereotype names enclosed angle brackets example goal class linked goal class reduces association 
stereotypes kaos profile uml kaos profile means examples taken case study 
case study concerns part london ambulance service failed ambulance dispatching system covers handling urgent calls 
goals initial goal ambulance arrive scene incident minutes incident reported identified early stage goal achieve informaldef urgent call reporting incident ambulance scene incident mins formaldef incident reporting mins amb ambulance intervention amb uml represent goal form achieve informaldef urgent call reporting incident ambulance scene incident mins formaldef forall incident just reporting eventually mins exists amb ambulance intervention amb class stereotyped goal tagged values specifying informal definition formal definition indicating type goal case achieve goal 
tags goal stereotype form informaldef formaldef 
tag form take values set achieve maintain avoid cease minimize maximize informaldef formaldef take string 
formaldef string expression kaos temporal logic temporal operators written ascii text 
goal stereotype priority attribute help conflict resolution instanceof attribute boolean soft attribute indicating goal formalized false true 
values priority floats 
soft goal usually optimize goal maximize minimize goal 
values instanceof taken set 
goal instanceof value priority 
model goals classes uml little sense instances goal class 
think class goal stereotype singleton instantiated model 
asking questions goals lead identification higher level goals 
asking question achieve led higher level goal achieve goal form achieve informaldef incident requiring emergency service eventually resolved formaldef forall incident happened eventually resolved identification goal turn drives identification assumptions achieve achieve assumption form achieve informaldef incident requiring emergency service eventually reported las formaldef forall incident happened eventually exists reporting assumption intervention form achieve informaldef incident resolved intervention single ambulance formaldef forall amb ambulance incident intervention amb eventually resolved show relationships goals assumptions uml 
abstraction associations abstraction specialization dependency stereotyped reduces show reduced assumption reduces goal reduces goal reduces reduces fig 

way represent goal reduction intervention conjunction 
tag appropriately constrains branching abstraction links indicating reduction achieved collectively 
alternative tags xor constrain branching indicate disjunction exclusive disjunction respectively 
xor tag defined uml 
introduce companion tags 
classes involved reduction relationship notation soon diagram cluttered 
alternative uml collaboration notation 
collaboration template pattern defined reduction reduction xor reduction figures illustrate 
graphically collaboration templates defined dotted ellipse roles involved collaboration declared dotted box intersecting ellipse 
supplementary text provided 
model simply matter specifying classes fulfill defined roles instance classes course correct type role 
demonstrates reduction goal shown collaboration template 
note links classes collaboration labelled roles defined collaboration stereotype 
xor relationships assignment responsibility agents operationalization modelled similar way 
goals may conflict goals 
represent uml conflicts association conflicting goals 
requisites goal reduced assignable individual agent domain software requisite 
requisite assigned agent goal subgoal reduction pattern constraints goal subgoal reduces goal subgoal roles played instances goal requirement assumption xor reduction collaboration goal reduced set subgoals satisfaction sufficient satisfying goal minimally reduced set subgoals reduced sg subgoal sg fig 

reduction collaboration template software requirement requisite effectively assigned agent domain assumption 
assumption fully modelled uml tagged values assumption form achieve informaldef incident resolved intervention single ambulance formaldef forall amb ambulance incident intervention amb eventually resolved category ways requisites goals unable model metalevel specializations goal stereotype want inherit reduces association 
requirement assumption stereotypes attributes form informaldef formaldef priority category 
model value category value instanceof tag goal requisite reduces 
requirement stereotype adds tag specialization takes value set hard soft 
hard requirement may violated soft may violated temporarily 
requirement category soft 
classes goal stereotype requisite classes singletons 
goal subgoal reduction pattern constraints goal subgoal reduces goal subgoal roles played instances goal requirement assumption xor reduction collaboration goal reduced set subgoals satisfaction gn gn subset sufficient satisfying fig 

reduction collaboration template agents entities events model responsibility assignments requisites agents uml follows realm domain responsibility assumption intervention tags realm tag indicate agent domain agent agent software 
agent represented actor uml 
actor generally represents outside system actor interacts system part 
far rules agents software 
note actors users system functionality agents perform actions produce functionality 
mapped 
identification objects driven definition goals 
course talking objects kaos terminology things interest system 
goals identified defined draw partial object model diagram uml 
wanted express formal definition goal subgoal xor xor reduction pattern constraints goal subgoal reduces goal subgoal roles played instances goal requirement assumption xor reduction collaboration goal reduced single subgoal sg set alternative subgoals satisfaction sg sufficient satisfying reduces association indicates potential alternative reductions goal alternative may selected model fig 

xor reduction collaboration template goals met far ocl explicitly model objects 
ocl expression refers elements diagram order refer objects ambulance incident depict diagram 
ocl expression concern model goal defining formally relationships objects ambulance incident stereotype kevent specializations 
tags common stereotypes informaldef invariant 
kevent stereotype additional frequency property 
invariant object domain property concerning object assumed hold purposes designing system 
strengthening invariant ensure satisfaction goal concerns object 
value frequency tag model specifies time interval consecutive occurrences event 
classes tags shown 
relationships kaos model intervention reporting course straightforwardly modelled associations uml 
objects concern goals 
relationship modelled concerns association 
really declares object referenced definition goal 
object strengthened invariant contributes satisfaction requirement said ensure requirement 
relationship modelled ensures association 
assumption actions goal goal subgoal subgoal reduction subgoal goal fig 

way represent goal reduction intervention agent responsible requirement meet certain conditions 
agent perform action operationalizes requirement 
monitor object input action control object output action 
action shown graphical notation kaos location available computeraided dispatch allocated agent 
arrow hitting agent indicates agent monitors object attributes labelling arrow 
arrow leaving agent indicates agent controls object attributes labelling arrow 
diagram supplemented explanatory text action input arg arg ai location available output res ai allocated dompre location happened resolved incident kevent reporting intervention fig 

partial object model location destination available intervention ambulance ai allocated ai location ai allocated ai location encoded ai available ai allocated ai location location mins available allocated location location mins diagram text represent action 
equivalent uml shown figures 
simply covers aspects action specification relation goal operationalizes required trigger condition required post condition 
diagrammatically related association action goal 
principal difference uml representation action shown graphically class stereotype action kaos notation taken sum interactions agent 
uml diagram clearly separates monitors controls relationships hand input output relationships 
specific attributes objects declared monitored controlled tags monitors controls stereotypes respectively 
similarly arguments results tags declare specific attributes objects involved input output associations respectively 
domain pre post conditions required pre post trigger conditions defined tagged values class 
attributes specify constraints operationalizes association action goal 
diagrams provide greater detail may necessary model 
cases minimal tags sufficient 
allocated boolean available boolean string location string location string monitors ai output ai input output results allocated input arguments location available controls monitored location available controlled allocated performs input input self ai input allocated self ai input self input location self ai output allocated self ai output self input location fig 

action model requirement operationalizes previously allocation delay self action input encoded self action ai input available self action ai input allocated self action ai input time dist self action input location self ai input exists available allocated time dist self action input location action input input input ai input fig 

action model time dist string int perform action agent capable performing action 
unnecessary show capability association agent performing action implies capability 
may useful model capabilities determining responsibility relationships see 
similarly agent controls object monitors object 
essentially controlling object ability write object attributes monitoring object ability read object attributes 
unnecessary show monitors association controls implies monitors 
value tag operationalizes association ocl expression accesses time dist operation 
express ocl function kaos specification action introduced extra operation classes modelled 
function kaos specification gives time takes travel locations 
uml model invented operation class takes location value returns distance location location argument 
introduced keyword previously take temporal qualifier example real time constraints kaos may captured 
room cover extension ocl elaborate 
allow express fully elements uml find kaos specification 
cases ascii text formalization suitable 
model integration worth uml profile kaos measured benefits software engineering process 
kaos powerful approach essential part process provision means model uml ubiquitous modelling notation surely beneficial 
potentially kaos reach wider 
bonus 
modelled uml kaos model may incorporated rest system uml design documentation seamlessly linking documentation requirements elicitation part project 
requirements traceability obvious result interleaving requirements elicitation design documentation facilitation requirements traceability 
kaos model supports backwards requirements traceability reduces relationships 
navigating back goal reduces associations goal purpose ascertained identifying goal goals reduces 
forward requirements traceability supported operationalizes responsibility ensures associations requisite classes classes respectively 
want trace forward requirement goal lower levels design 
able integrate kaos model models system case models sequence models uml object models example 
application uml existing trace association allow relate elements requirements model design model 
trace association tracking requirements changes models 
signaling interrelations way produces manageable requirements document 
drawing connections uml associations simple clear 
trace association left discretion modeler 
syntactically applicable model elements course cases far meaningful appropriate 
relationship case goal example readily intelligible 
syntactically legal draw association goal case model actor cases links uml element need careful goal concerned actor emergency call 
interleaving models interesting possibility resulting profile interleaving kaos models standard uml models 
way kaos approach fully integrated rest design documentation software system 
kaos method encourages consideration different design alternatives key relationships reduction responsibility assignment modelled possibly exclusive disjunctive associations 
alternatives modelled investigated choosing attractive 
analysis alternatives uml models neatly carried classes identified modelled kaos 
kaos object represented uml model element uml sequence diagram instance 
represent uml kaos model design model communications infrastructure fig 

communications infrastructure model kaos model may form part comprehensive remaining essentially separate document 
example correlation relationship case uml model kaos action 
consider case abstracted view action action model detailed description case 
example illustrated top half 
agent modelled class kaos model 
model instance class design level dependency models 
correspondence elements kaos model design models straightforward 
level abstraction element represented kaos model coincide representation corresponding element design model 
agent instance modelled class kaos model represented single class design level 
case communications architecture better modelled package classes 
differing levels abstraction concern 
models requirements tend structured way obviously compatible conventional object oriented structure design models 
requirements specifications generally concerned features capabilities system 
features capabilities may eventually affect classes conversely single class may covering features 
uml profile kaos avoid 
kaos model represented uml means classes decompose directly class structure design model 
modelling requirements classes simply modelling concerns capabilities 
class representing general system concern straightforwardly mapped class classes design level represent actual components system 
uml offers explicit support decomposition models requirements 
requirement refines fig 

subject extends object oriented design uml adding additional decomposition capabilities support direct alignment design models requirements may help 
suggestion classes design models arranged subject way mitigates uml object oriented bias 
subject oriented approach allows design different requirements modelled possibly overlapping uml design models 
relationships models governing composition merger specified stereotyped associations 
augmenting uml profile profile introduced support smooth development system uml requirements implementation 
mapping requirements model design model facilitated 
single design models model requirement gives mapping design model kaos model 
agents actions objects kaos model correspond closely subsets elements design model modelled requirement question 
implementation need follow subject oriented programming principles may appropriate cases 
subject oriented design models composed object oriented code may developed 
sees gap requirements software bridged 
shows package imagine containing design model requirement 
package carries subject stereotype 
case study case study concerned development portion advanced automatic train control system san francisco bay area rapid transit bart rail service 
purpose system serve passengers running trains closely spaced 
case study turn taken informal description specifications 
aim show path initial goals agent assignment necessary documentation kaos process captured uml profile 
case study specifically concerned aspects system needed control acceleration speed trains 
problem addressed development acceleration speed control system responsible getting trains running swiftly smoothly possible safety constraints 
train enter closed gate bart system gate physical object signal received acceleration speed control system establishes train allowed enter segment track goal soft goal soft reduction goal soft goal soft form minimize goal costs soft form minimize goal goal reduction subgoal subgoal subgoal subgoal conflicts reduces fig 

preliminary goal graph bart system goal soft form minimize 
train get close train front train front stopped suddenly due train hit 
train stay maximum speed segment track handle identification formalization primary goals searching problem statement keywords purpose objective order intent initial goals identified early stage 
shows uml goal graph obtained reading document 
main goals identified minimize costs 
serve quickly reduce minimize costs reduces conjunction minimize minimize 
clear achieving trains minimize development costs spaced shown reduce minimize 
building new tracks expensive conflicts minimize 
minimize reduced resulting goal reduces goals reduce minimize minimize minimize 
reduces identified goal 
goals figures soft goals goals vague formalized 
sufficiently defined fully clear take satisfy goals 
ordinarily reduces relationship holds goal subgoal satisfaction subgoal sufficient satisfaction goal reduces 
reduces relationship exists goals reduced goals soft talk terms satisficing goal soft form minimize goal reduction goal soft form minimize subgoal subgoal goal soft form minimize reduces reduces goal soft reduces fig 

reduction minimize goal soft satisfying 
concept satisficing weaker satisfying lowerlevel goal supposed achieve parent goal acceptable limits absolutely 
goals identified far reduced 
important aspect system safety formalization case important 
safety conditions identify safety goals maintain avoid maintain track 
goals formally defined goal trains form maintain informaldef train get close train front train front stopped suddenly train hit maintain worst case stopping distance formaldef forall tr tr train tr tr tr loc tr loc tr goal form avoid informaldef train enter closed gate formaldef forall gate tr train status closed just tr goal form maintain informaldef train stay maximum speed track segment handle formaldef forall tr train tr tr speed speed loc train identification objects fig 

loc status track gate definition goals drives identification objects 
definitions goals identified entities train track gate relationships 
predicate defined formally tr tr train tr tr trk track tr trk tr trk tr loc tr loc tr train tr trk tr loc tr loc tr loc tr loc definition introduces relationship 
composition relationship track introduced 
shows uml object diagram captures portion kaos object model identified 
definitions goals identified early stage need revising 
revisions objects may uncovered 
example goal avoid 
train instantaneously gate closes train close train allowed enter gate closed 
weaken avoid 
example kaos tactic weaken goal unsatisfiable condition 
weakened avoid depicted goal form maintain informaldef train enter closed gate provided gate closed distance train gate worst case stopping distance train gate open distance train gate worst case stopping distance train train may ignore gate closed formaldef forall gate tr train status closed backto loc tr loc tr just tr weakening allows trains enter closed gate gate closed impossible train time 
allowing train enter closed gate need unsafe really clear rationale original avoid understood 
need identify higher level goal goal reduces asking avoid 
resulting extension goal model shown 
definition maintain elicited formally matching chain driven refinement pattern formalization parent goal avoid initial goal avoid train 
domain properties identified track segment leading switch ends gate sw switch trk track trk sw gate train enters switch iff leaves track segment preceding switch sw switch tr train tr sw trk track trk sw tr new goals domain properties turn augment object model shown 
definition domain properties attached object model properties constrain objects behaviour 
binary relationships objects modelled uml associations 
ternary relationships modelled collaborations roles segment role collaboration multiplicity 
ask questions maintain yielding 
goal form maintain reduces goal form avoid gain greater perspective goal finding higher level aim intended achieve 
goal form avoid reduces goal position reduces subgoal goal form maintain form avoid informaldef train enter switch appropriately positioned goal reduction subgoal goal form avoid goal form maintain fig 

goals identified asking questions avoid 
track speed loc train train switch track position switch track fig 

extended object model 
track segment loc status gate identification requirements agent assignments obviously achievable goals reduced irreducible assignable agent unachievable goals weakened reduced new form 
goal assigned agent called requisite 
requisite assigned agent software requirement 
better illustrate process concern reduction maintain order identify initial requirements system 
complete reduction goal goals system result goal graph large purposes 
restrict example identification requirements allocating agent 
reducing maintain goals identified avoid avoid train maintain goal form maintain informaldef train distance trains safe distance trains remain safe state formaldef forall tr tr train trk track previous tr tr tr loc tr loc tr tr tr tr loc tr loc tr goal form avoid informaldef train enter track train violates worst case stopping distance trains formaldef forall tr train trk track just tr trk exists tr train tr tr tr trk tr loc tr loc tr loc tr loc tr goal form avoid informaldef train enter track front train violates worst case stopping distance trains formaldef forall tr train trk track just tr trk exists tr train tr tr tr trk tr loc tr loc tr loc tr loc tr goal assigned agent 

maintain wcs operationalized centralized train control system agent obvious candidate system agent control speed location train monitor location trains 
need reduce goal 
figures show derivation graph maintain head 
graphs pruned show entire model simplicity 
part model shown includes requirement goals reducing goal maintain 
requirement assigned agent 
identifies requirements agents responsible 
figures show comments attached reduction collaborations indicating kaos methods identifying new goals 
goal operationalization agent interfaces operational requirements derived requirements identified agents assigned 
instance requirement safe acc assigned responsibility system agent 
portion agent interface model derived responsibility assignment diagram constraints action ocl 
model constraints operationalizes associations action shown 
uml representation include action definition agent interface model 
actions agent interfaces derived responsibility assignments shown minimally 
related kaos means goal oriented methodology see brief surveys field 
example focus acquisition requirements uses goals main guiding concept developing requirements specifications 
kaos influential widely cited approach 
unique conceptual ontology lower level descriptions system progressively derived system level organizational objectives framework essentially taxonomy concepts instantiated particular domains 
structure kaos gives models representation uml straightforward 
kaos graphical notation grail tool support uses 
notation informally defined mainly examples literature non standard 
furthermore expressive power limited 
things stand kaos diagram merely supplements textual definition concept 
hand uml representation kaos model combine ease immediacy visual comprehension full semantics kaos textual definition making richer notational semantics tagged values 
grail tool needs textual editor graphical editor displayed separate windows tool gui 
representing kaos uml lead widespread adoption approach 
importantly realm software split lack control cases goal form avoid split lack control train speed location goal form maintain introduce accuracy goal resolve lack monitor train speed location responsibility subgoal subgoal subgoal requirement location estimates instanceof goal form maintain goal reduction goal form maintain goal reduction goal train form maintain goal reduction subgoal goal form avoid subgoal goal form avoid subgoal goal loc estimates form maintain fig 

goal derivation graph maintain 
introduce actuation goal resolve lack control acceleration command goal intime form maintain goal reduction subgoal subgoal split lack control milestone subgoal subgoal goal loc estimates form maintain goal reduction requirement requirement requirement communication infrastructure realm software subgoal responsibility fig 

agent assignments subgoals 
goal exercised realm software responsibility responsibility responsibility realm software string info monitors input performs controls sent boolean string output cmd self cmd sent self cmd sent self cmd self info fig 

requirements engineering modelled alongside integrated uml design models system 
uml profile modelling goal oriented requirements previously developed part project 
concern project development design framework facilitating implementation ubiquitous web applications 
requirements engineering model advocated lightweight influenced kaos tailored typically rapid development cycles web services 
uml profile builds original idea project tackles problem anew full kaos model target considerably pared variant 
uml profile intended model large critical software systems 
shown profile integrate requirements acquisition model uml design models 
give example integrate requirements model lower level design models 
decomposition objectoriented systems class usually deemed necessary software engineering sufficient 
requirements models readily compatible object oriented structure concerns spread classes class may embody concerns 
late change requirements cause havoc lower levels design 
subject oriented approach design offered remedy 
uml models organized subject group classes deals exclusively single requirement 
cases requirements embodied single class model class times subject requirement 
redundancy goal operationalizes goal info info cmd info info cmd info info cmd info speed info operationalizes sec exists cmd cmd sent cmd info fig 

performs performs performs output input output input input output fig 

portion agent action interface model train input accounted semantics introduced uml profile governing subject units design composed 
profile allows straightforward integration requirements design models integration flawed differences structure types models 
augmenting subject oriented approach profile combining profile example requirements acquisition model represented uml integrated subject oriented uml design model provide powerful uml software modelling environment 
introduced uml profile kaos model represented 
providing representation kaos uml opens powerful approach requirements engineering support uml tools available 
kaos attractive newcomers rendering familiar context 
importantly documentation kaos requirements engineering activities unified uml design documentation making uml specification comprehensive manageable 
case study section 
aim case study illustrate parts kaos process modelled uml profile 
presentation profile section draws case studies examples case study section uses second case study bart train control system specification reproducing kaos model uml comprehensively 
far kaos literature uml profile adequately supports kaos 
include straightforward task incorporating support profile uml editor 
uml kaos model easily represented xml enabling automated consistency checking 

annie anton goal requirements analysis proceedings second international conference requirements engineering 
bertrand darimont massonet van lamsweerde grail kaos environment goal driven requirements engineering proceedings icse th international conference software engineering 
clarke harrison ossher tarr subject oriented design improved alignment requirements design code proceedings object oriented programming systems languages applications oopsla 
clarke extending uml metamodel design composition science computer programming 
anne dardenne axel van lamsweerde stephen fickas goal requirements acquisition science computer programming 
finkelstein andrea framework requirements engineering context aware services proceedings straw international workshop software requirements architectures 
finkelstein kappel schwinger th hofer pr ll ch ubiquitous web application development framework understanding th world multiconference systematics cybernetics informatics 
emmanuel letier reasoning agents goal oriented requirements engineering phd thesis ftp ftp info ucl ac pub thesis letier pdf 
object management group omg unified modelling language specification version cgi omg org docs formal pdf 
gil regev goal driven requirements engineering overview 
ch goal default htm 
winter berg bay area rapid transit district advance automated train control system case study description technical report sandia national labs www sandia gov ast papers bart case study pdf 
eric yu john goal oriented requirements engineering www cs toronto edu pub eric html appendix stereotypes tags profile tables included 
gives overview stereotypes second details tags 
constraints generally cover constraints kaos meta model 
table stereotypes constraints description parent base class stereotype class defines thing interest referenced goal class class defines autonomous thing interest instances classes may exist independently instances classes class class defines instantaneous thing interest instances kevent classes state class kevent action applied holds class defines input output relation classes defines state transitions class values association argument tag attributes class association denotes relationship class class association input value association result tag attributes class association denotes relationship class class association output performs ag ac capability ag ac controls ag monitors ag capability ag ac input ac monitors ag capability ag ac output ac class defines processor actions controls state transitions class controls ag responsibility ag operationalizes ac performs ag ac agent ag action ac object requisite agent need monitor control attributes object specifically provide input output constraints description parent base class stereotype see constraints association denotes relationship class class association capability see constraints association denotes relationship class class association performs see constraints values monitored tag attributes class association denotes relationship class class association monitors see constraints values controlled tag attributes class may values controlled tag class association denotes relationship class class association controls goal class singleton 
class defines objective achieved system class goal association denotes relationship goal class class association concerns abstraction denotes relationship goal classes goal class requisite class refines abstraction reduces association denotes relationship goal classes association conflicts requisite class singleton 
class defines goal sufficiently refined assignable single agent class requisite constraints description parent base class stereotype class defines requisite responsibility effectively assigned agent domain requisite association assumption requirement defined terms things monitored controlled software class defines requisite responsibility assigned agent domain requisite class requirement association denotes relationship requisite class class association operationalizes association denotes relationship class requisite class association ensures agent assigned responsibility requisite agent responsible assumption domain agent agent responsible requirement software agent association denotes relationship requisite class class association responsibility table tags constraints description type stereotype tag informal definition class association string kaos stereotypes informaldef formal definition class expressed kaos temporal logic ascii characters string goal requisite formaldef specifies type goal requisite achieve cease goals generate behaviours maintain avoid goals restrict behaviours minimize maximise goals design comparisons achieve maintain avoid cease minimize maximise goal requisite form soft goal class formaldef tag indicates goal soft soft goals goals clearly defined formalized boolean goal soft goal class instanceof value safety priority value specifies application specific type goal satisfaction safety security information accuracy goal instanceof see instanceof constraint priority resolve conflicts indicates highest priority float goal priority application specific type goal reduced requisite satisfaction safety security information accuracy requisite category defines domain property respect object expressed kaos temporal logic ascii characters string invariant constraints description type stereotype tag defines strengthening invariant order satisfy requirement expressed kaos temporal logic ascii characters string informal indication interval consecutive occurrences event string kevent frequency general domain precondition action string general domain postcondition action string required precondition operationalization requirement action expressed kaos temporal logic ascii characters string operationalize required postcondition operationalization requirement action expressed kaos temporal logic ascii characters string operationalize imply required postcondition operationalization requirement action action applied trigger condition true precondition action holds expressed kaos temporal logic ascii characters string operationalize indicates agent domain agent software agent domain software realm 
