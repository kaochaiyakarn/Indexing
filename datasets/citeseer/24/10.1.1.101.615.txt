formalizing meta programming techniques reconcile heterogeneous scheduling disciplines open distributed real time systems angelo chris gill ron cytron department computer science washington university st louis mo usa cytron cs wustl edu open distributed real time embedded dre systems different orb endsystems may different scheduling disciplines 
ensure appropriate application behavior open architecture dre systems enforce ordering activities originating endsystem activities migrate relative importance activities 
describes meta programming techniques applied extends real time corba enhance openness dre systems respect scheduling disciplines enabling dynamic ordering priority equivalence classes 
forthcoming omg real time corba dynamic scheduling joint final submission rt corba jfs illustrate techniques 
keywords real time distributed systems corba dynamic scheduling meta programming architectures 

emerging challenges distributed object computing doc middleware corba com java rmi shields developers complexities associated developing distributed systems 
example doc middleware allows applications invoke operations distributed objects concern object location programming language os platform communication protocols interconnects hardware 
maturation doc middleware specifications implementations past decade greatly simplified development open distributed systems complex functional requirements 
emergence quality service qos enabled doc middleware realtime corba rt corba real time java distributed real time java simplify open distributed real time embedded dre systems complex qos requirements stringent latency jitter dependability 
example combat systems involve heterogeneous collections mobile douglas schmidt electrical computer engineering dept university california irvine ca usa schmidt uci edu autonomous vehicles collaborate perform coordinated maneuvers support time critical missions reconnaissance perimeter defense suppression enemy air defenses 
likewise qos enabled doc middleware benefit commercial dre systems distributed virtual reality applications distributed multimedia collaboration systems massively multiplayer online persistent world games 
key challenges arising types dre systems involve communicating enforcing relative importance various competitors threads operations corba objects ensure appropriate scheduling system resources memory cpu time network bandwidth point time 
resolving challenges essential building dre systems simultaneously 
open system components connect interoperate flexible manner having statically 
dependable system preserve key toend qos properties timeliness resource constraints 
example mobile autonomous vehicles able collaborate dependable efficient manner despite heterogeneity scheduling disciplines implementations 
forthcoming real time corba dynamic scheduling joint final submission rt corba jfs addresses aspects challenges outlined 
example rt corba jfs defines distributable thread mechanism properties extend retract locus execution transition orbs servicing operation request 
contends competitors different resources cpu time memory network bandwidth various orbs traverses dynamic call graph 
contains certain scheduling information carried orbs embedded giop service context locus execution distributable thread represents orbs visited thread servicing remote method invocation 
server computer system running earliest deadline scheduler workstation competitor created system competitor created system competitor created system satellite comm 
tower system running rate monotonic scheduler workstation satellite dish system running generic value scheduler 
dre systems competitors migrate system system 
orbs visited distributable thread ensure thread processed appropriate priorities 
example illustrates representative dre system endsystems running orbs configured different scheduling disciplines 
threads distributed endsystems result remote operation invocations distributable thread migration 
result competitors originating different endsystems contend set resources orb endsystem 
competition type scheduling required 
rt corba specifies scheduling service relieve application programmers tedious error prone task configuring scheduling properties system 
service optional part rt corba specification may available rt corba orbs 
rt corba scheduling service deals priorities mappings complex scheduling properties deadline ordering competitor execution 
rt corba jfs rt corba specification builds advanced open standards address static dynamic scheduling context open qos enabled middleware dre systems 
specification fully addresses interoperability aspect challenges outlined due specification areas threads endsystem shown different shape depending endsystem originated 

mapping scheduling parameters rt corba jfs define mapping scheduling parameters distributable threads pass orbs configured heterogeneous scheduling disciplines different scheduling parameters scheduling discipline 
example request traversal dynamic call graph formed distributed thread execution visited orbs configured earliest deadline edf scheduling discipline 
edf scheduler orders competitors deadlines 
orb traversal value scheduling discipline competitor characterized time dependent function describes value associated competitor point time 
value scheduler tries maximize value gained system information function provides 
rt corba jfs distributable thread traverses endsystems corresponding scheduling information understood endsystem 
composition scheduling disciplines chain endsystems semantically coherent result non optimal 
existing standard specifies provide interoperability heterogeneous composable schedulers 
omission limits openness dre systems rt corba jfs middleware 

scheduling information propagation relevant issue rt corba specification rt corba jfs addresses update scheduling information propagated hop hop basis distributed call graph 
issue related directly interoperability solution described enable interoperability propagate update scheduling parameters 
solution problems outlined formalizing problem interoperability context open dre systems defining formalisms express different instances problem precisely providing meta programming architecture maps formalized abstractions software architecture rt corba 
outlines solution approach context corba 
shown endsystems configured different scheduling disciplines 
competitors initiated endsystem square initiated endsystem circular initiated endsystem triangular 
preserve qos properties requested competitors apply techniques reconcile 
properties scheduler enforce qos 
properties competitor express qos requirements 
techniques enable open architecture competitors traverse endsystems concern qos requirement expressed 
allow orb endsystem schedule competitors including initiated remotely adapting competitors properties orb local scheduler 
metaprogramming architecture level reflective middleware model implement solution 
organization remainder organized follows section defines formal model reconciling heterogeneous scheduling disciplines open distributed real time systems section presents meta programming architecture enhancing openness dre middleware illustrates briefly implements formal model defined section section compares approach related section presents concluding remarks outlines research directions 

terminology formalisms section defines terminology motivates assumptions underly 
formalisms section applicable open dre system 
concreteness focus examples context rt corba rt corba jfs 

properties competitors schedulers model open dre system consisting properties competitors schedulers defined informally follows properties describe qos attributes criticality level deadline constraint jitter 
restrict domain properties property function allows value quality functions expressed properties 
competitors denote entities contend common system resources 
competitors expose properties describe features importance qos requirements deadline worst case execution time 
schedulers competitors access shared resources 
order competitors access resource depends scheduler disciplines competitor properties 
scheduling disciplines formulated terms properties determine ordering competitors 
properties viewed abstraction competitors purpose scheduling 
focus dynamic systems schedulers operate online line 
remainder section presents formal model properties competitors schedulers 
advantage creating formal model enable heterogeneous orb endsystems exchange precise information properties associated individual competitors schedulers 
information allows endsystem transform competitors properties reconcile orb endsystem scheduler 
properties definition universe properties 
generic element denoted called property type simply property 
property associated tuple 
domain property 
default value property 
property denote associated domain associated default value property define tagged domain denote property tagged element value rt corba example property rt corba deadline distributable thread 
case domain property time rt corba represented integral type timebase timet 
examples properties rt corba include criticality distinguishes classes real time competitors periodicity activities 
definition set properties henceforth term rt corba connotes static dynamic scheduling capabilities 
define compound property domain cpd compound property domain set sets having size set exactly element tagged domain associated property note definition cpd impose ordering properties 
rt corba compound property domain viewed generalization rt corba jfs concept scheduling parameter types 
scheduling parameter type edf scheduling parameters defined rt corba jfs collection typed properties type defines domain property 
rt corba jfs focuses identity aggregate treating kind scheduling parameter different type 
definition stress identity single properties scheduling parameter treated collection properties typed aggregate properties 
competitors universe competitors 
assume competitor exposes set properties shown 
eh em pi pk 
association competitors properties definition define function competitor maps set properties exposes 
case universe discourse entities compete resources subject scheduling 
ph px point time competitor associated current value properties 
value element compound property domain indicated shows schematically relation works 
represents universe competitors power set universe properties represent generic competitors represent property sets contained respectively 
rt corba competitors rt corba distributable threads compete cpu time orb endsystems events event channel delivered consumers subscribed particular events giop requests compete network bus resources 
competitor distributable thread context rt corba set properties containing elements deadline importance laxity 
case value deadline importance laxity particular point time 
schedulers definition define ordering classes equivalence oce set properties consist ing tuple 
equivalence relation cpd total ordering set represents equivalence class element belongs 
definition oce provides partition equivalence classes cpd provides total order equivalence classes 
note ordering equivalence classes defined set properties 
property ordering effect structure equivalence classes equivalence class ordering 
ordering equivalence classes depends value type properties 
conversely due run time changes system configuration scheduler operation mode ordering equivalence classes depend time 
time dependency equivalence classes ordering occur schedulers refer time dependent properties value functions 
definition scheduler ordering classes equivalence oce set properties 
set properties scheduler imposes oce called characteristic set expresses properties scheduler impose ordering competitors 
properties exposed competitor scheduler considers characteristic set 
scheduler indicate characteristic set rt corba shows characteristic sets rt corba jfs defines laxity llf edf rate monotonic rm scheduling disciplines 
llf deadline remaining execution time importance edf deadline importance rm deadline 
characteristic set laxity llf earliest deadline eff rate monotonic rm scheduling disciplines consider rt corba jfs edf scheduler properties scheduler characteristic set deadline importance 
equivalence classes case represented set containing properties 
equivalence classes ordered importance deadline associated equivalence set ordered 
example ordering expression iff example ordering importance deadline ordering integral values 
rt corba jfs defines importance type deadline timet type 
definitions treat scheduler ordering equivalence classes set properties scheduler 
properties associated competitor relation note scheduler partitions full compound property domain characteristics series equivalence classes llf scheduler determines execution eligibility laxity defined difference deadline current time estimated remaining computation time 
canonical edf definition concept importance rt corba jfs orders classes 
note property values associated competitors change time potential effect change move competitor equivalence class 
assume schedulers dre systems behaved means schedulers different orb endsystems try enforce real time qos properties characterize competitors 
specifically consider pathological cases schedulers improve qos dimension 
example rate monotonic scheduler rms edf scheduler different orderings operations improve deadline feasibility operations schedule 

adapters core adapter concepts having formally defined terms property competitor scheduler address problems arising establishing ordering competitors sets properties differ characteristic set scheduler 
address different cases arise 
definition set properties adapter function type adapter defined function transforms set properties 
definition quite general assumption mapping performed adapter 
practice adapters sense 
rt corba depicts scenario endsystems running orb different scheduling discipline 
distributable threads dt dt moving endsystems 
dt originated endsystem executed operation object migrates endsystem endsystem invoking operation object contrast dt originated endsystem executed operation object migrates endsystem endsystem invoking operation object different schedulers orbs endsystem static rm scheduler 
shown schedulers different characteristic sets 
result adaptation required distributable thread crosses scheduling domain 
scheduling domain collection orb endsystems scheduling algorithm properties 
dt object llf scheduler endsystem object edf scheduler endsystem adaptation point scheduling point distributable thread object rm scheduler endsystem 
distributable thread traversing endsystems different scheduling disciplines claim proper type adapter handle adaptation 
addition shows point schedulers executed place distributable thread property adaptation occur place right adapter executed 
shows dt preempted dt executing endsystem orb 
case shows dynamic priority dt higher dt general dt dt non comparable adaptation performed sure properties expressed manner comprehensible endsystem orb scheduler 
adaptation reconciliation distributable threads competitor properties achieved means adapters 
reconciling properties adapters defined terminology formal model show formalisms reconcile properties support interoperability heterogeneous rt corba schedulers 
examine relevant cases occur outline solution 
case shows scheduler non empty characteristic set competitor map properties exposed competitor ordering classes equivalence created scheduler apply restriction adapter defined dt 
properties scheduler subset properties exposed competitor restriction adapter drops properties exposed competitor belong scheduler characteristic set 
rt corba example consider case shown restriction adapter applied dt immediately leaving orb arriving endsystem orb 
restriction adapter case map property exposed dt set containing deadline importance remaining execution time set containing just deadline importance 
restriction adapter implementation express property adapted form manipulated efficiently scheduler 
form generally scheduler dependent properties exposed uniformly competitors distributable thread context 
case shows scheduler characteristic set competitor non empty map properties exposed 
properties exposed competitor subset properties scheduler tor ordering equivalence classes created scheduler default extension adapter defined variation default extension adapter considers specific values extending set properties 
define extension adapter tuple 
set default values 
extension adapter extend set properties exposed competitor scheduler characteristic set 
rt corba example default extension adapter extension adapter applied dt right leaving orb arrival endsystem orb 
extension adapter map property exposed dt set containing deadline set containing deadline importance 
earlier cases adapter express property adapted form manipulated efficiently scheduler 
adapter enable statically scheduled orb interoperate dynamically scheduled orb 
case general scheduler non empty characteristic set competitor particular relation set shown 
properties 
assumption properties scheduler properties exposed competitor case generalized adapter 
case type adapter guarantee value properties shared sets remain unchanged 
generalized adapter defined transformation type generalized adapter contains adapters described far special case 
introduce concept generalized adapter define custom adaptation property sets allowing extra flexibility control adaptation occurs 
extension restriction adapters created dynamically meta adapter described section generalized adapters provided users applications 
rt corba example consider case distributable thread transitions orb configured muf scheduler uses importance property isolate different classes competitors statistical real time vs deterministic real time orb edf scheduler consider importance property 
case simply restriction adapter lose information contained importance property associated distributable thread 
way handle competitors having deadline different relative importance boost deadline important competitor ad hoc transformation performed generalized adapter 
shown cases examined adapters provide way transform reconcile properties competitors properties scheduler 
cases occur practice adapter perform right transformation generated run time system provided users applications 

meta programming architecture heterogeneous middleware interoperability section shows formalisms described section conceptual foundation building dre middleware supports interoperability heterogeneous scheduling disciplines 
outline requirements imposed dre middleware metaprogramming framework called implements formalisms described section 
briefly show architecture implemented orb 

overview meta programming architecture assure scheduler interoperability dre system implements formalisms introduced section determine map properties competitors function necessary adapters meta programming software schedulers scheduler characteristic set architecture 
architecture designed charac observation function set treated operators reflect properties exposed competitors schedulers 
degree control introspection needed implement formalisms introduced section obtained meta programming architecture shown 
shown competitors meta competitor competitor meta adapter adapter rho meta level meta property property base level meta scheduler scheduler 
uml class diagram meta programming architecture properties class entities adapters schedulers 
function represented association competitors properties treated class entities 
characteristic set scheduler exploited association scheduler meta object property meta object 
roles components summarized property class provides abstraction representation value property domain defined section 
combination property meta object provides information element tagged domain 
example context rt corba deadline period map property class meta objects contain information needed distinguish properties 
competitor class provides abstraction entities scheduled 
example context rt corba jfs distributable thread implemented specialization class 
scheduler class represents abstraction orb endsystem scheduler 
provides interface adding removing competitors testing feasibility 
context rt corba concrete implementation class edf scheduler llf scheduler 
adapter class provides interface adapter implementations 
defined section adapter converts set properties 
context rt corba object example convert properties needed earliest deadline edf scheduler needed maximize accrued utility mau scheduler 
meta property meta class associates property base object property type 
discussed property base object represents element property domain defined section 
value associated property type 
shown section association achieved tagged domain 
achieve association tying property base object meta object meta property 
property provides access default value property factory method creates associated property 
meta class reconciles property representations differ orb endsystem endsystem 
example property represents time expressed different time scales different systems 
meta competitor meta class manages transformations required competitor properties match scheduler characteristic set directly 
encapsulates logic performs property reconciliation meta class meta competitor 
metaclass shields developers complexities interoperability 
meta competitor selects adapter performs suitable transformation depending factors properties associated competitor properties characterize endsystem scheduler accessed meta scheduler defined 
provides explicit meta object protocol enables base objects configure way property adaptation occur restrict types property adaptation 
meta scheduler meta class provides interface enables introspection properties associated base object 
implements interface characteristic set scheduler providing explicit mop introspect characteristic set 
meta adapter meta class provides way introspect signature associated base object maximize accrued utility mau scheduler associates competitor value function scheduler tries maximize value function 
adapter 
signature mean sets properties represent domain domain adapter 
meta adapter provides factory method create adapter matches signature 
describing terms adaptation properties performs essential enable activities competitor 

applying rt corba meta programming architecture described section model realize interoperable rt corba orbs 
meta objects meta layer outlined directly embedded inside orb core metaobjects associated stubs skeletons 
shown corba orb incorporate certain meta objects meta layer outlined directly inside orb core meta objects associated stubs 
time distributable client stub property meta object scheduler meta object adapter meta object adapter registry competitor meta object competitor distributable thread args args return value operation invocation orb core distributable thread properties object servant skeleton adapter registry competitor meta object scheduler meta object adapter meta object 
open interoperable rt corba implementation thread transitions orb properties exposes reconciled characteristic set foreign orb endsystem scheduler described section 
context orb necessary determine property reconciliation occurs 
suggests property reconciliation occur scheduler order competitors 
occur right distributable thread leaves home orb client right arrival foreign orb server 

related research meta programming mechanisms influenced projects 
emerging middleware standards distributed real time embedded dre systems increasingly implemented standard middleware 
corba widely middleware platforms dre systems 
enable corba middleware building dre systems object management group specified rt corba rt corba jfs 
meta programming techniques reflective middleware meta programming techniques focus research years 
example common lisp object system clos early example sophisticated meta object protocol mop 
metaprogramming techniques initially artificial intelligence research applied systems software research orb middleware dynamically configurable adaptive reflective 
example cross fertilization dynamic tao university illinois urbana champaign illustrates tao reconfigured runtime dynamically linking unlinking certain components 
related effort washington university uci exploring application reflective middleware techniques context corba component model 
example adapt project lancaster university applying multi level reflective middleware model focused dynamic composition objects 

concluding remarks presents model formally characterizes properties competitors schedulers open distributed real time embedded dre systems 
key idea emerges formal model properties belong competitors 
competitor expose fewer properties scheduler strictly needs order access resources 
process making property class entity fundamental achieve interoperability heterogeneous orb endsystem schedulers 
outlines formal model properties competitors schedulers reified 
applies meta programming techniques improve scheduler interoperability heterogeneous orb endsystems 
meta programming techniques popular way enable dre systems adaptable flexible configurable predictable composable 
research focuses topics 
theoretical analysis investigating theoretical aspects involved transforming adapting properties competitors 
understanding effect property transformation competitor importance relate equivalence classes created different scheduling algorithms important detect invalid transformations transformations disregard properties fundamental expressing key qos requirements competitors 
advantage expressing theoretical aspects formal model simplifies communication systems transformations performed properties competitors 
theme theoretical investigation adaptations affect fulfillment application qos requests 
focus schedulability analysis dre systems endsystem potentially different scheduling algorithm requires adaptation qos requirements 
investigation provide criteria determine schedulability set competitors automatically open dre environment 

empirical evaluation extending tao support meta programming architecture described section 
enhancements part broader efforts apply reflective middleware techniques dynamic scheduling tao 
efforts developing testbed conduct empirical benchmarks quantify qos provided 
goals 
identify critical software patterns framework components 
measure impact solution dre performance predictability flexibility 
dimension research demonstrate develop open dre systems implement flexible formalisms meta programming architecture undue loss qos 
source code documentation test cases tao open source corba orb downloaded www cs wustl edu schmidt tao html 
bea systems corba component model joint revised submission 
object management group omg document orbos edition july 
gosling hardin turnbull 
real time specification java 
addison wesley 
bio costa gordon blair 
reflective architecture middleware design implementation 
ecoop workshop phd students object oriented systems june 
gill levine schmidt 
design performance real time corba scheduling service 
real time systems international journal time critical computing systems special issue real time middleware march 
gordon blair coulson robin papathomas 
architecture generation middleware 
proceedings ifip international conference distributed systems platforms open distributed processing pages london 
springer verlag 
harrison levine schmidt 
design performance real time corba event service 
proceedings oopsla pages atlanta ga october 
acm 
henning 
advanced corba programming 
addison wesley longman 
jensen 
eliminating hard soft real time dichotomy 
embedded systems programming oct 
jensen 
distributed real time specification java 
java sun com jsr jsr drt html 
kiczales des rivieres bobrow 
art metaobject protocol 
mit press cambridge massachusetts 
kon campbell 
supporting automatic configuration component distributed systems 
proceedings conference object oriented technologies systems pages san diego ca may 
usenix 
liu layland 
scheduling algorithms multiprogramming hard real time environment 
jacm january 
object management group 
common object request broker architecture specification edition oct 
object management group 
dynamic scheduling real time corba joint final submission omg document orbos edition april 
real time java experts group 
real time java specification 
schmidt levine 
design performance real time object request brokers 
computer communications apr 
sebastian gutierrez 
composable reflective communication framework 
proceedings ifip acm workshop reflective middleware april 
venkatasubramanian 
adaptive resource management architecture global distributed computing 
phd thesis university illinois urbana champaign 
wang schmidt 
adaptive reflective middleware qos enabled ccm applications 
ieee distributed systems online july 
zimmermann editor 
advances object oriented metalevel architectures reflection 
crc press boca raton fl 
