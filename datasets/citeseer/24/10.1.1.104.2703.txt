ground reducibility exptime complete hubert comon cnrs lsv umr cnrs ens cachan av 
du pdt wilson cachan cedex france 
hubert comon lsv ens cachan fr www lsv ens cachan fr comon inria lsv umr cnrs ens cachan av 
du pdt wilson cachan cedex france 
inria fr www lsv ens cachan fr 
prove ground reducibility exptime complete general case 
exp time hardness proved encoding emptiness problem intersection recognizable tree languages 
difficult show ground reducibility belongs dexptime 
associate automaton disequality constraints ar rewrite system term automaton deterministic accepts term iff ground reducible number states ar size constraints polynomial size prove new pumping lemmas total ordering computations automaton 
lemmas show emptiness automaton disequality constraints decided time polynomial number states exponential size constraints 
altogether get simply exponential time deterministic algorithm ground reducibility decision 
ground reducibility term term rewriting system expresses ground instances instances variables reducible property fundamental automating inductive proofs equational theories constructors 
related sufficient completeness algebraic specifications see 
roughly expresses cases covered reducible inputs 
papers devoted decision ground reducibility 
report brief history milestones starting general case 
ground reducibility shown decidable plaisted 
algorithm quite complex tower exponentials explicit complexity analysis 
kapur gave decidability proof conceptually simpler complicated complexity tower exponentials size precisely show checking reducibility ground instances reduced checking reducibility ground instances depth smaller tower exponentials size third proof proposed kounalis 
result generalized ground reducibility expected complexity exponentials explicit complexity analysis 
algorithms combinatorial arguments pumping property deep irreducible instance smaller instance irreducible 
yielded idea making explicit pumping argument pumping lemma tree language 
support idea left members linear variable appears set reducible instances accepted finite tree automaton 
set irreducible ground instances accepted tree automaton complement 
easily gives simply exponential algorithm linear case 
see algorithm optimal 
comon expressed problem ground reducibility emptiness problem tree language 
gave decision proof complexity worse ones 

dauchet proved beautiful result pumping properties difficulty 
show general result order theory unary predicates decidable 
turns ground reducibility expressed simple formula logic 
technique consists associating automaton formula spirit buchi rabin method 
kind automata appropriate call reduction automata particular case automata constraints introduced dauchet 
tree automata ability check equality disequality subtrees applying transition rule 
general emptiness languages recognized automata undecidable 
allow fixed number equality tests computation branch emptiness decidable 
unfortunately result give information possible efficient algorithms 
complexity results proof better plaisted bound 
tried specialize tree automata technique ground reducibility got way triple exponential bound :10.1.1.56.7042
better previous methods far lower bound 
problem works ground reducibility give bound depth minimal irreducible instance minimal term accepted automaton 
establishing carefully upper bound brute force algorithm checking reducibility terms depth smaller bound increases complexity double exponential 
different approach 
rely automata disequality constraints 
try give bound depth accepted term 
show stronger result appropriate notion minimality minimal term accepted automaton contains exponential number distinct subterms 
prove generalization pumping arbitrary replacements term decreasing chosen founded ordering 
ingredients yields algorithm deciding emptiness automaton disequality constraints runs polynomial time number states exponential time size constraints 
hand show ground reducibility reduced emptiness problem automaton disequality constraints number states exponential size constraints polynomial size 
altogether simply exponential algorithm ground reducibility 
result optimal ground reducibility exptime hard linear rewrite systems linear ao log lower bound proved kapur 
give simple proof exptime hardness 
known emptiness problem intersection recognizable languages exptime complete see 
show problem reducible ground reducibility polynomial time 
section recall definition automata disequality constraints 
section show construct automaton disequality constraints emptiness equivalent ground reducibility analyze carefully complexity construction size automaton 
section devoted pumping lemmas automata disequality constraints 
lemmas applied section derive optimal algorithm checks emptiness language recognized automaton disequality constraints 
study lower bound ground reducibility section 
automata disequality constraints fixed finite set function symbols arity aset variables 
set terms built written subset ground terms written 
position string positive integers 
concatenation positions denoted pp empty string 
length string 
positions ordered prefix ordering iff string pp position called parallel usual finite term viewed mapping set positions pos instance pos subset maximal position called subset leaves positions denoted 
pos write subterm position term obtained replacing position int 
assume reader familiar constrained term rewriting systems see survey 
recall term ground reducible rewrite system iff ground instances reducible rewriting relation associated rewrite system denoted reflexive transitive closure denoted ground reducible rewrite system iff ground instances reducible subsumption quasi ordering terms substitution terms similar set variables occurring term denoted var 
size term denoted pos positions set size rewrite system denoted isthe sum sizes left members definition 
automaton disequality constraints adc short tuple finite set states subset final states finite set transition rules form qn arity qn boolean combination negation constraints positions 
empty conjunction written called target state rule qn ground term satisfies write positions 
notion satisfaction extended conjunctions disjunctions expected 
particular 
definition 
run automaton term mapping pos pos ift arity rule qn 
rule target qi 
condition met called weak run 
runs seen ground terms alphabet terms arity symbol qn arity symbol run target final state called accepting run 
language may non standard definition size right hand sides rules relevant purpose 
subset accepted terms 
equivalently reduced final state constrained rewrite system regular language language standard tree automata adc constraints 
example 
qf 
defines automaton accepts terms irreducible rule 
term accepted yields final state 
term accepted weak run onf disequality satisfied 
note general adc non deterministic run term completely specified run term 
run unique term associated 
definition 
qf adc triple positions pos constraint 
particular weak run equality run 
equalities run classified particular position pos iff remote possible situations depicted 
fig 

equality close equality far 
reducing ground reducibility emptiness problem adc section show construct adc emptiness equivalent ground reducibility problem show precisely size automaton 
start adc accepting set irreducible ground terms normal forms 
normal forms adc set left hand sides rewrite system subset linear terms complement set linearized versions terms terms obtained replacing occurrence variable new variable yielding linear term 
initial set states consists strict subterms elements plus special states single variable accept terms qr accept reducible terms failure state 
assume terms considered variable renaming particular terms assumed share variables follows 
set states nf normal forms automaton consists unifiable subsets qr plus state qr 
element nf denoted qu general unifier mgu state special symbol 
transition rules set denoted nf set rules form qu qu 
qui qr un instance qr 
un instance term mgu terms qr including variable un instance 
qu qr constraint defined unifiable var 
note unifier second condition exists states qx final states normal forms automaton states qr 
nf nf qr normal forms automaton nf defined constructed sets nf nf nf nf automaton nf necessary complete automaton may run terms reducible non left linear rule 
deterministic 
example 
normal forms automaton example normal form automaton nf 
deterministic exists run reducible term 
proposition 
automaton nf accepts set terms irreducible number states exponential size constraint occurring rule nf size bounded 
proof 
constraints rules nf conjunctions disjunctions disequality atoms 
size constraints bounded respective sizes conjunctions disjunctions atoms 
size pos pos pos pos concerning number states sufficient magnitude cardinal closure qr mgu 
prove part proposition paragraphs 
correctness 
lemmas show nf recognises normal forms 
lemma 

ifs qu qu nf nf instance sup qv instance sup considered 
proof 
induction length derivation qu 
nf lemma 

ifs qu qu nf nf normal form proof 
induction length derivation qu 
nf length constant case exists rule qu nf construction condition means normal form 
assume qu nf qu qf nf sn 
si qui nf qui qr condition construction 
si normal form induction hypothesis 
assume reducible means instance term ln 
cases ln 
ln foreach si instance li 
lemma implies ui instance li un instance ln contradicts existence rule qu qu qu qr nf construction condition 
ln instance ln iff instance linearised version distinct positions wehave 
condition implies construction course contradicts application rule qu qu step derivation nf qu 
proof lemma completeness 
nf recognises ground normal forms lemma 
term normal form qf nf nf qu instance proof 
induction constant instance term qx nf construction 
induction step sn 
subterms sn normal forms induction hypothesis states qu qf nf qr si qui nf si instance ui instance un 
proceed contradiction 
assume rule nf target qf nf applicable qu 
cases 

qui qr un instance term condition construction nf 
contradict respectively induction hypothesis irreducibility lemma 
exists qu qu nf contradicts irreducibility construction constraint exists term qu 
construction nf general unifier terms qr un instance instance proof proposition ground reducibility adc linear term ground reducibility equivalent emptiness intersection nf regular set instances class adc closed intersection regular language computed time product sizes automata deciding ground reducibility amounts decide emptiness adc number states constraints size 
bit difficult linear situation set irreducible instances necessarily recognized adc 
reason compute directly automaton language empty iff ground reducible denoted nf nf nf nf start normal forms adc constructed section nf nf nf nf 
st pos ranges substitutions domain set variables occurring twice nf cardinal st exponential size 
nf st nf 
final states set nf nf uis instance 
qn qn nf un st nf contains fol lowing rules un qn un qn un instance defined 
un qn un qn un qn nf case 
un qn qn qn cases 
qn qn states nf constraint constructed steps 
lifting 
disequality constraints checked part un lifted root position explained construction 
un retrieve rules nf applied position pos run un nf deterministic 
cp constraint rule applied position write constraint defined induction pos cp 
extension 
second step consists ensuring disequality constraints deep positions constraint strict prefix position apply rule 
get constraint pos pos variables 
preparation take account non linearities imply equality constraints root equational deduction new disequality constraints inferred constraints obtained saturation deduction rule distinct positions pos variable example 

automaton nf see examples nf automaton anf contain additionally rule qq proposition 
term ground reducible iff language accepted nf empty 
number states automaton constant 
global size constraints transition rules 
number rules automaton maximal arity function symbol number function symbols 
proof 
bound recall st constraint 
construction st qf nf give upper bound number states anf constraints rules nf constraints nf conjunction constraints constructed 
conjunctions disjunctions conjunctions disequality atoms size construction step bounded 
lifting 
extension 
pos pos pos pos pos variables 
pos pos direction part proposition follows lemma 
lemma 
ground instance irreducible accepted nf proof 
substitution set variables ground terms irreducible nf consequence fact proved multiset induction 
lemma 
substitution ground irreducible multiset um subterms exists substitution variables final states qf qf qf nf ui reduced state ui qf 
note substitution 
proof 
xm multiset variables hypothesis xi normal form xi anf proposition 
means exists final states qf qf qf nf xi nf xi reduced nf state qf qf 
assume xi xi qf give substitution xm qf qf 
um multiset subterms uj variable 
uj vn 
induction hypothesis multiset uj vn uj um exists final states qf qf qf nf substitution set variable nf ui reduced nf state ui 
hypothesis uj irreducible accepted nf deterministic see proposition 
nf contains transition rule form qf nf uj nf contains transition rule vn vn vn instance 
gives final states qf qf qf qf qf substitution wanted multiset ui ui ui um direction part proposition proved help intermediate lemmas 
automaton nf recognise irreducible ground instances going show accepted construct term irreducible instance accepted witness non ground reducibility 
lemma 
term nf normal form proof 
construction transform nf projection component states nf obtain exactly normal form adc nf proposition 
lemma 
term nf ground instance linearised version proof 
may show induction general fact term recognized nf state nf st pos ground instance linearised version induction lemma 
run nf position pos target state 
position pos ifu nf target state pp 
proof 
induction 
terminate proof direction part proposition 
assume anf 
run anf lemma ground instance linearised version happen instance distinct subterms positions pos corresponding variable 
idea construct ground instance replacing lets associate variable var positions pos final target state 
variable construction state nf 
lemma target state qx qx 
construct weak run follows var choose replacement 
show run nf check constraints valid replacements words contains equalities 
follows fact constraint particular constructed 
shall contains constraints valid may valid part lifting construction kind equalities may occur see lemma section 
variable performed replacement 
situation possible transformations equality performed part extension construction 
variable performed replacement 
situation impossible completion part called variables construction term term associated ground instance lemma irreducible generalised pumping lemmas proof proposition crux part proof 
assume adc founded ordering total runs containing strict relation position pos monotonic implies ground term position pos 
definition 
pumping replacement runs target state target state definition generalises usual pumping definition get usual pumping choose embedding ordering 
lemma 
pumping weak run equality far close proof 
weak run target states equality definition runs contain equalities remaining possibilities equalities close far may refer close far equalities forgetting position large run successively show construct weak run pumping contain close equality uses combinatorial arguments show remove far equalities successive 
recall runs seen terms 
pumping creating close equalities integer exponential basis 

andc number distinct suffixes positions atom occurring constraint transition rules pumping lemma generalises 
lemma 
integer 
run positions indices 
ik pumping pi pi contain close equality 
example 
example illustrates principle proof lemma 
contain ternary symbol adc contain transition rule consider run depicted fig 

run possible pumping 
show large able find pumping create close equality 
assume replacement subtree position subtree rooted creates close equality 
means ui vi 
possible extract subsequence indices ui ui ui vi vi vi 
assume case disjunction instance 
try replace subterm andr respectively 
replacements creates close equality 
replacing create close equality 
proof 
lemma extract subsequence pl plk pl plk target state 
define pl uk plk extract second subsequence function test defined positions pos pos test 
constraint function test associate position pos defined cr test quotient positions defined pp illustrates definition cr 
note test defined 
fact 
pos cr cr fig 


see pos cr included set suffixes positions atomic constraint occurring rules 
number distinct sets cr forp pos smaller extract subsequence positions uk cr cr 
note ul vk ul going show extract vk subsequence corresponding lemma 
consequence intermediate lemma 
additional definitions notations lemma 
dependency degree subsequence vi vk dep vi cr vi term associated 
integer function recursively defined interval lemma 
cardinal set vj vj close equality smaller exists subsequence vi vi vk dep vi vi proof 
assume hypothesis lemma true prove induction definition function dep subsequence vi vk dep vi 
case sufficient show 

developing 





assume property true 
induction hypothesis subsequence vi vi extracted vk dep vi vi hypothesis lemma positions vi vi vi close equality 
wk positions assuming wk subsequence vi vi definition close equalities cr vi cr exists vi consider case symmetry vi vi wj term associated run term adc run 
lets recall term associated run 
construction depicted 
vi vi wj wj fig 

definition proof lemma 
definition dep vi vi exists subset cr cr vi vi vi particular vi wk 

fact cr 
implies distinct positions jf 
unique position 
construction wj 
wj recall definition dep wj wj dep vi vi completes proof lemma wj wj subsequence vk 
proof lemma finish proof lemma 
show hypothesis lemma true 
assume true 
andf subsequence vi vik vk dep vi vik 
fact cr definition dep vi vik wehave cr vi vi assume pumping vi vi close equality 
means exists vi atomic constraint vi vi vi cr vi vi vi contradicts vi vi see 
pumping vi close equality 
completes proof lemma 
vi vi vi vi fig 

proof lemma 
pumping creating equalities definition 
predicate defined relatively adc ordering holds true run integer iff exists runs target state pumping contain close equality 
list proof obvious consequences definition 
lemma 
implies 
lemma 
run exists run target states 
maximal number atomic constraints occurring rule maximal length atomic constraints transitions rule propagation lemma crux part proof 
technical prove 
explains get rid far equalities create close equalities 
underlying intuitive idea lemma 
assume create close equalities possible construct lemma yields run completed goal contains far equality 
far equalities give information structure original run going take advantage design new combined original ones ensure containing equalities allows prime induction construct run provided run 
eventually pumping run 
lemma propagation lemma 
run pos integer 
ifm true properties holds 
run run 
exists position true 
shall show page integer exists depends proof 
assume true 
means runs create close equality definition 
case lemma contains far equalities 
index maximal position prefix ordering isa far see 
set triples 

having identical far equalities distinct subterm 
fig 

far equality number distinct components elements note position prefix runs set components totally ordered prefix ordering 
ui strictly decreasing sequence prefix ordering components elements going show ui implies second case lemma hypothesis lemma 
extract sequence ui subsequence pi defined pi ensures positions pi pj distant 
integer associate unique index defined pi 
construction equality pumping pi pi chosen maximal 
consider pumping pm smallest positions pi show position pim im equalities far pim sake simplicity note note construction pk run 
shall apply lemma runs order find appropriate 
associate positions pi far equality 
construction definition far equalities por pi hypotheses lemma 
symmetry assume case construction pi definition pm situation depicted 
equality pi pk pm pk pk pk fig 

proof lemma 
pi pi pi positions pi pi pl subterm pi follows terms pi pairwise distinct 
apply lemma run pk positions pk 
note particular pk yields subsequence pim im pumping pi im pairwise distinct 
pi contain close equalities note im may contain far equalities 
table give upper bounds number far equalities positions pim pim im see picture situations 
far pim im far pim im far pim im equalities max 
number pim close pim far pim pim lines table possible positions possible equalities positions 
line maximal number pim 
note equality pi pi im registered array 
exists form pi pi im equality far pim pim im pim equality pim pim im pi pi pi far pim pim im pim pim im pi pi pim im pi fig 

far pim im far pim pim pim im pi 
component equality pk 
pk pi pi 
pk pk pim 
distance pk pim pim pk 
far position pim remarks pairwise distinct 
largest pim pumping replacement summarise possible equality positions bigger lemma 
proof lemma initiate process lemma propagation lemma push position equality created root tree 
simple sufficient conditions inequality yields lemma cs global size constraints transition rules lemma 
qf adc exists constants independent cs ln cs true position run run target state 
proof 
shall lemma 
need integer sake simplicity write respectively andd 
assume 
dn ek edn edn ln dn ln constants independent dn ln dn check sufficient dn 
dn ln ln ln dn 
ln dn cs ln cs cs cs cs ln cs rest follows induction depth propagation lemma lemmas 
emptiness decision adc section result theorem 
algorithm decides emptiness adc qf runs time cs polynomial 
algorithm marking algorithm state marked successful runs yielding state 
generalises usual marking algorithm finite bottom tree automata keep information state inhabited keep witnesses fact 
witnesses check disequality constraints higher run 
choose witnesses runs mark states ensure termination algorithm sufficient condition predicate 
algorithm set atom occurring constraint transition rule 
bound evaluated proof lemma cs ln cs assume constants emptiness decision algorithm 
start mapping associates state empty set saturate states rule conditions 
run 
target state ei 
pos exists sequence length runs ei target state pumping contain close equality 
consider fair executions algorithm assume runs constructed eventually checked 
assume marking runs checked prevents algorithm check run twice 
prove hand saturated set em contains accepting run iff accepts tree correctness completeness hand computed expected complexity 
correctness completeness lemma correctness 
contains accepting run empty 
proof 
immediate condition 
run emptiness decision algorithm 
lemma completeness 
contain accepting run empty 
proof 
assume accepts ground term accepting run minimal 
contradiction 
assume andlet subterm minimal subterm ordering set subterms belong show depth 
depth run form number runs smaller condition emptiness decision algorithm true contradiction 

minimality hypothesis condition emptiness decision algorithm true means exists position pos sequence runs target state pumping contain close equality 
pos position definition close equalities page pumping contain close equality 
lemma contradicts minimality termination complexity order show termination emptiness decision algorithm give complexity bound need additional argument generalization nig theorem bipartite graphs hypergraphs 
define notion dependency hypergraphs definition 
set integers 
sk elements independent iff set 
sk sj sj analogue nig theorem theorem reed private communication 
set integers 
subset independent elements cardinal 
proof 
prove result induction set independent elements assume property holds 
consider graph vertices elements edge iff component gi stable subset independent subset stable contains edge 
maximal number edges sharing vertex maximal follows neighbourhood 
construct stable set cardinal initially 
repeat choose vertex put remove vertices empty 
step remove elements steps step add element 
stable construction 

assume contradiction kn kn 

kn 
edges departing kn 
index kn 
vertices vj vj vj vn vj vj vn subset independent elements cardinal smaller equal kn 
contradicts induction hypothesis 
independence runs denote run check tuple ti pos ti term associated 
say runs 
independent check check independent 
lemma 
run adc pos total ordering 
runs target state independent cs different close equalities 
note totality sufficient lemma 
proof 
tk terms associated respectively hypothesis subset tj tj tl set indices contains close equality 
associate close equality pj integer pj construction pj pj symmetry may assume pj note pj 
mapping pj image cardinality cs 
uniquely define determine pj possible values possible values contradiction assume cs 
pigeon hole principle indices pj pj andi 
tj pj pj tj definition follows tj pj noting contains close equality contradiction 
bound number steps 
subset runs occurring strict subterms runs positions 
pos note maximal arity function symbol constructing run shall fix labels positions pos done choose belonging condition emptiness decision algorithm lemma state em contain cs independent runs 
theorem definition independence runs means cs 
cs 
term considered emptiness decision algorithm checked conditions form ensures termination algorithm gives bound number steps emptiness decision polynomial cs cs ln cs cs cs step assume inequality cs 

cost inference step 
estimate cost inference step 
choice transition rule algorithm done set deterministic choice performed time 
new candidate sons set checking run sufficient check disequality constraints satisfied 
course assume identical subterms shared disequalities checked constant time 
verifying condition algorithm performed time cs 
need estimate cost checking condition run 
thenumber position pos consider recall maximal arity function symbol 
target state rule 
check non existence sequence runs condition check possible individually 
bound number possible candidates add additional requirement implies condition runs en possible means number runs check smaller candidates 
pumping verifying creates close equality requires time cs 
sufficient check position pos distance disequality constraint rule position terms associated respectively assume verification inequalities performed constant time 
condition checked time polynomial cs cs bounded 
remarks cost inference step smaller polynomial cs cs cs bound number steps get complexity theorem 
ordering remains exhibit ordering satisfies requirements lemma 
ordering monotonic founded total depth depth proof 
consider interpretation term triple depth multiset strict subterms triples ordered lexicographic composition 
ordering natural numbers 
multiset extension 
lexicographic path ordering extending total precedence 
defined iff 
explain definition ordering founded defined recursively multiset extension 
defining multiset extension strict subterms subterm ordering founded 
simply component 
monotonic 
assume 
definition lexicographic composition 
ifd max tk ti ti tn tk case ti ti tn ti ti tn 
implies orm 
ti ti tn ti tn strict subterm strict subterm implies 
definition multiset ordering 
follows case ti tn ti tn suffices guarantee monotonicity 
founded 
structural induction infinite strictly decreasing sequence starting constant andt minimal 
true strict subterms set terms smaller strict subterm founded induction hypothesis 
multiset extension founded multisets elements infinite strictly decreasing sequence starting foundedness lexicographic path ordering lexicographic combination founded orderings founded 
contains strict relation 
component interpretation 
total 
purpose component interpretation lexicographic path ordering extending total precedence total ground terms 
distinct terms ori 
consequence theorem proposition decision ground reducibility dexptime 
theorem 
ground reducibility term rewrite system decided deterministic time polynomial 
lower bound theorem 
ground reducibility exptime hard linear rewrite systems linear terms ptime reductions 
proof reduction emptiness problem intersection languages recognized tree automata know exptime complete 
encode parallel computations runs tree automata ground term wheref new alphabet built tree automata 
encoding polynomial 
build rewrite system ground normal form form new function symbol represents successful runs automata ak 
ak empty iff term ground reducible conclude proof theorem checking system built polynomial time size size tree automata 
exptime complete problem formal definition exptime hard problem consider proposition 
fr seidl problem exptime hard tree automata ak isl ak empty representation runs ak qk 
assume loss generality sets qk pairwise disjoint 
alphabet defined follows qk unary arity qk zero 
arity arity plus distinguish subset recursively defined follows constant states qk qk qk symbol having arity states qk qk tn qk tn note qk andf qk tn terms 
terms represent parallel computations ak term 
rewrite system system expected reduce ground term form wheres represents successful runs term 
mutually exclusive reasons 
occurs position 

ands contains symbols 
ands contains transition conform means code runs 

codes runs successful 
enumerate rules reduce ground terms falling categories 
interested reducibility means right members rules irrelevant purpose 
right member rule arbitrary constant 
category rules xi qi xi xk fn fig 

rules category left members 
occur inside term xi xi xk arity xi xi xk distinct variables 
rule second category forms state occur kth positions xi xi xk arity xi xi xk distinct variables qk symbol original signature occur kth positions xi yk xi xk respective arity xi xi xk yk distinct variables position state qi xi xi xk arity xi xi xk distinct variables qi qi qk 
rules category see subterms describe transitions automata xi qi xi xk fn yn qn yn yn fn respective arities xi xi xk yn yn yn yn distinct variables qi qn qi qn qi 
category top term want final states xi xi xk arity xi xi xk distinct variables qk size note system linear 
need evaluate size 
expressed term number states automata ak initial number function symbols maximal arity function symbol max arity biggest rule belongs category size number rules category summarised cat 
number rules qi qi qi qi qi size polynomial sum sizes tree automata 
hand clear construction require time bigger 
altogether proves theorem 
proved ground reducibility exptime complete linear nonlinear case 
closes pending question 
claim result gives hint implement ground reducibility test 
seen tractable general 
possible way implement techniques efficiently possible suggested 
average algorithms may behave 
case claim tree automata help theory practice 
acknowledgments authors wish bruce reed proof theorem denis useful remarks suggestions 


comon 
dauchet 
pumping cleaning symbolic constraints solving 
proc 
int 
conference algorithms languages programming lecture notes computer science vol 
jerusalem july 
springer verlag 



dauchet 
properties automata constraints 
kirchner editor th international conference rewriting techniques applications volume lecture notes computer science montreal canada june 
springer verlag 

comon 
effective method handling initial algebras 
proc 
st workshop algebraic logic programming lncs 
springer verlag nov 

comon 
ground reducibility automata disequality constraints 
editor proc 
th symp 
theoretical aspects computer science lecture notes computer science vol 

springer verlag 

dauchet 
automata reduction properties solving 
journal symbolic computation 

dershowitz 
jouannaud 
rewrite systems 
van leeuwen editor handbook theoretical computer science volume pages 
north holland 

fr shapiro vardi 
logic programs types logic programs 
th ieee symp 
logic computer science pages 

gallier book 
reductions tree replacement systems 
computer science 


jouannaud kounalis 
automatic proofs induction theories constructors 
information computation july 

kapur narendran rosenkrantz zhang 
sufficient completeness ground reducibility complexity 
acta inf 

kapur narendran zhang 
sufficient completeness related properties term rewriting systems 
acta inf 

kounalis 
testing ground reducibility term rewriting systems 
theoretical computer science 

plaisted 
semantic confluence tests completion methods 
information control 

seidl 
haskell overloading dexptime complete 
inf 
process 
letters 
