language driven system design department mathematics computer science eindhoven university technology box nl mb eindhoven netherlands 
studies shown significant benefits domain specific languages 
designing dsl art craft clear methodology 
discuss step methodology designing languages 
approach referred language driven approach rooted formal techniques independent accepted software engineering process models 
illustrate approach small instructive case study 
proceedings th hawaii international conference system sciences complexity software steadily increased past decades 
necessitated development techniques master difficulties problems due increase 
years process models introduced structuring design process software 
different variants process models exist boehm spiral model incremental model 
differences models large models prescribe partitioning software engineering process number stages 
stages distinguished basis activities conducted 
order stages addressed deliverables expected stage prescribed process model 
theory process models fairly general respect means obtain deliverables stage process models define best practices number stages 
practice tools determined external influences policies 
traditional approach software engineering focuses mainly software product developed 
alternatively focus language class languages win tue nl stud tue nl win tue nl tailored software product 
languages referred domain specific languages 
domain specific languages dsls emerged tool tackling complexity software development projects 
studies shown significant benefits dsls software development 
noteworthy increase reliability maintainability produced software improved reusability software product code design see 
dsls benefits documented little literature available relation process models software engineering methods hand dsls hand 
developing dsl ad hoc process clearly defined process clearly defined methodology 
order support acceptance ideas concepts dsls clear methodology needs defined 
methodology focus aspects developing dsl clear emphasis intended application dsl specific problem domain 
discuss language driven approach software engineering 
approach considered step general methodology designing dsl 
emphasis approach interplay standard software engineering methods best practices various process models concepts ideas dsls 
key issue approach focus development suitable dsl writing part software product development software product 
language driven approach combines extends known accepted methods software engineering 
inherits techniques concepts area formal methods broadest sense basic ideas notions various programming paradigms incorporated 
language driven approach relies heavily expertise techniques needed conduct domain analysis 
tech ieee proceedings th annual hawaii international conference system sciences hicss ieee niques ample literature available 
major reason incorporating techniques specialist areas formal methods firm believe language consists syntax unambiguous semantics 
language pragmatics needs clear users 
techniques studied developed area formal methods essential analysing defining understandable language syntax semantics pragmatics 
tool asf sdf instance define analyse semantics programming languages 
apart formal semantics validating programs key issue formal methods research 
traditional scalability problems encountered applying formal methods design software issue language driven approach 
problem scalability caused large gap methods describe software product key concepts software product 
language driven approach gap relatively small software product defined terms natural concepts 
introduce discuss phases language driven approach 
phase mention deliverables needed techniques producing 
additional information selecting alternative techniques paradigms 
needed special requirements posed deliverables need formal verification 
ideas illustrated case study 
case study discusses design language controlling traffic lights junction 
organised follows 
section describes language driven approach detail 
section discuss related research conducted area 
section discusses case study 
extended detailed version appeared :10.1.1.103.2352
language driven approach section discuss elaborate ingredients play role language driven approach 
ingredients literature 
possible provide pointers literature 
discussion emphasise formal aspects design approach 
overview rationale proceedings th hawaii international conference system sciences ways language driven approach resembles standard software development process 
differences 
differences due fact language driven approach design centred development formal language 
language domain specific language dsl constitutes major result design process 
centre activities software design process shifts earlier stages user requirements specification phases 
known advantages reduction time market early detection errors development dsl described collection deliverables 
deliverables include definition syntax semantics define appropriate tool support 
language driven design approach integrated today software process models waterfall model spiral model 
proven software process models assists design language structured way 
shows overview artifacts produced development process 
refrain specific process model development deliverables 
practice final product result iterations development process 
problem domain concepts problem space dsl textual syntax graphical static requirements operational denotational semantics analysis case studies pragmatics methodology tool support 
language driven approach 
due inherent dependencies deliverables natural ordering imposed development 
ordering explicit distinction stages design process 
identification problem domain 
identification problem space ieee proceedings th annual hawaii international conference system sciences hicss ieee proceedings th hawaii international conference system sciences 
formulation language definition 
note due iterative nature process models actual order stages addressed fixed clear intended dependence stages 
stages considered atomic possible start parallel trajectory stage sufficient information stage available 
subsequent sections stages explained greater detail 
identification problem domain identification problem domain stage language driven approach 
focusing single problem needs investigated language driven approach focuses class problems stemming common problem domain 
thorough domain analysis necessary give complete precise definition essential concepts problem domain 
fortunately existing techniques support domain analysis domain specification 
proper demarcation problem domain vital subsequent artifacts depend concepts captured described problem domain 
refer overview best practices techniques conducting domain analysis 
problem domain usually larger generality concepts number concepts strictly needed solve actual problem 
advantages reuse domain knowledge self containment problem domain 
restricted problem domain implies design decisions 
identification problem space second stage language driven approach identification problem space 
remarked previously determined problem domain exhaustive collection concepts related actual problem 
mentioned definite advantages solving actual problem problem domain general large 
restriction problem domain necessary 
observation order provide direction solving actual problem design decisions 
design decisions possibly lead concepts identified problem domain 
concepts introduced play pivotal role solving actual problem 
fact concepts part problem domain follows straightforwardly fact identification problem domain design driven activity 
second observation respect actual problem problem domain contains inherent redundancy 
concepts appear play part solving actual problem consider irrelevant solving problem 
need consider concepts relevant problem 
observation respect actual problem identified concepts general 
natural second classification concepts distinction concepts constrained sense concepts inherently variable 
observations lead classification concepts categories concepts irrelevant actual problem concepts variable concepts fixed actual problem 
remarked concept irrelevant play part solution actual problem 
concepts classified irrelevant due abstraction aggregation 
concept called variable varies depending actual problem instance varies actual problem instance 
variable concepts vary depending actual problem instance considered problem parameters allowed instantiation problem parameters calls solution 
problem parameters part actual problem specified means expression dsl 
result collection variable concepts determines syntax language 
variable concepts vary actual problem determine behaviour system 
operational semantics concepts reappear part state space 
specified means expressions syntax 
category fixed concepts consists concepts identical problems considered 
caused fact notion inherently constant law nature concerns variable notion restricted simplify problem setting 
class containing variable concepts fixed concepts referred problem space 
obviously part problem space concrete compared problem domain 
reduces complexity basic notions relevant actual problem retaining information describe actual problem accurately 
ieee proceedings th annual hawaii international conference system sciences hicss ieee formulation language definition design language notions concepts problem domain 
section discuss constituent parts dsl 
advocate formal treatment specification syntax semantics dsl 
language definition stage divided syntax semantics pragmatics language defined 
syntax appearance language defined means syntax 
language driven approach constructs language related concepts identified domain space 
syntax language consists expressions variable concepts identified problem space 
variable concepts fixed concepts defined syntax 
syntax serves purposes 
supports user expressing properties problems user wants solve language 
second semantics syntactical expressions 
language constructs serve basis applying analysis techniques language problems described language 
format language constrained ways 
importantly susceptible interpretation transformation means computer 
syntax constrained number generally accepted requirements readability language constructs 
stress importance choosing syntax expressions mathematical semantics correspond intuitive semantics 
general language syntactical descriptions 
descriptions depend required language 
popular formats syntax textual linear syntax graphical syntax 
proceedings th hawaii international conference system sciences syntax express semantically relevant information minimal way keywords superfluous transitions defining grammar 
data structure computers store information obtained processing programs strongly related syntax 
textual linear syntax description encountered language descriptions 
information textual syntax essentially syntax 
textual syntax easier read 
best exemplified constructs construct 
construct appropriate keywords textual syntax syntax simply triplet 
third format graphical syntax gradually gaining popularity 
graphical visual languages benefits linear languages ability express spatial properties complex relations intuitive fashion 
general availability graphical workstations possible regular users visual languages 
graphical syntax may capable expressing textual syntax semantically relevant information identical 
syntax textual syntax partly defined means bnf grammars bnf grammars bnf grammars enhanced simple mathematical structuring mechanisms sets records 
popular way defining graphical language means graph grammars 
cases bnf grammars expressive exactly describe expressions language formed 
context sensitive properties declare property variables expressed different way 
additional requirements formedness expressions referred static semantics 
title somewhat misleading deals syntactical properties language prefer term static requirements 
attribute grammars specifying static requirements logical predicates applied 
conclude section syntax mention syntactical aspects specified 
requirement posed expressions graphical languages layout transparent tools 
detailed layout semantical meaning may expect textual syntax capable expressing properties 
resolved extending textual syntax information semantically irrelevant defining additional syntax tailored expressing details 
approach called tool interchange format see common interchange format cif sdl language 
semantics semantics language mathematical model reflects intended computational behaviour expressions language 
essence classify language com ieee proceedings th annual hawaii international conference system sciences hicss ieee ponents ways proceedings th hawaii international conference system sciences components dealing dynamic behaviour components describing purely static information 
distinction reflected semantics language 
general purpose languages various approaches exist defining semantics language 
choice suitable semantical approach depends largely characteristics language class language belongs 
practical semantics important 
dependent type semantics techniques behavioural analysis invariant analysis simulation expressions language 
designers language biased certain approaches 
basic semantical approaches existence semantical domain 
domain consists set collection sets additional structure defined relations 
expressions language relate entities domain obtain meaning properties related entities 
different approaches variations similar theme approaches emphasises different aspect benefits 
subsequently give short overview main advantages commonly approaches paragraphs 
overview semantical approaches state machines attribute grammars see :10.1.1.27.1551
operational semantics operational semantics give meaning dynamic part language 
centred notions state transitions states see 
transitions state described means transition function 
various ways exist defining operational semantics means sos rules 
operational semantics language quite close intuition language 
implementors 
operational semantics provides means performing simulations expressions language considering runs transition function 
useful areas testing automated testing 
possibility analysing transition graph induced language expression 
verification efforts 
tools asf sdf maude may develop prototypes language :10.1.1.22.8802
denotational semantics denotational semantics centred idea mathematical function describes meaning expression means transla tion understood mathematical model described section see 
virtue mathematical model analysis comparison expressions language 
theory denotational semantics mathematically rigorous 
language designers precisely expresses requirements language 
techniques prove expressions language equivalent easily formulated underlying mathematical model 
techniques automated theorem provers 
axiomatic semantics axiomatic semantics means number axioms relating expressions language 
axioms underlying logic 
axiomatic semantics combination denotational operational semantics provide underlying mathematical model suitable notion equivalence 
axioms defining semantics language provide possibility interpret axioms set rewrite rules 
allows rapid prototyping language 
axiomatic system option theorem proving 
examples axiomatic semantics pre post conditions programming languages axioms context concurrency :10.1.1.116.2392
semantics language defined syntax representation 
case language graphical syntax semantics defined directly graphical syntax convenient define mapping graphical syntax syntax formalise semantics 
may expected definition formal semantics crucial unambiguously understand programs define analysis techniques proper support tools 
semantics may defined long consistent 
analysis techniques semantical analysis expressions language 
consider techniques part semantical development language techniques largely dependent choices defining semantics language 
analysis techniques provide increased insight meaning possible expressions 
correctness language better understood determining properties expressions language 
analysis techniques follow standard mathematical approach 
conceivable new theory needs developed performing desired analysis 
ieee proceedings th annual hawaii international conference system sciences hicss ieee pragmatics pragmatics language deals aspects language 
obviously language design finished guidelines properly language 
collection examples may show application typical features case studies prove usefulness real examples 
documentation including tutorials educational material rules thumb needed advocate proper language 
guidelines called methodology language 
apart methodology language tools need defined interpreting compiling language support analysis programs written language 
ideally tools follow semantical definitions 
instance interpreter language needs show exactly behaviour described operational semantics 
meta tools support generation parsers scanners formally defined syntax 
dependent type semantics generation interpreters language processing tools viable see :10.1.1.27.1551:10.1.1.22.8802
related proceedings th hawaii international conference system sciences publications describing development specific dsl describe set meta tools support development 
little literature methodological aspects design domain specific languages see overview existing literature 
discuss relevant 
consel marlet describe methodology developing dsls :10.1.1.22.8802
relates orthogonal perspectives programming language perspective software architecture perspective describes staged development dsls 
methodology formal framework denotational semantics uses techniques obtain dedicated machines denotational semantics language 
see thibault thesis describes methodology similar methodology :10.1.1.22.8802
weiss proposed fast process program family oriented software development process 
approach introduces software engineering process called commonality analysis 
process yields information terminology commonalities members program family variabilities program family 
fast process consists set procedures followed domain engineers produce standard set intermediate final documents 
provides systematic way defining program family 
montages graphical tool environment gem mex see form suite describing aspects programming languages syntax static analysis semantics dynamic semantics 
syntax described bnf rules state machines known evolving algebras define semantics language 
system able generate visual programming environment specified language 
montages methodology support domain analysis 
gupta start reasoning observation software system understood terms interacts outside world 
system essence defined input language turn considered domain specific language 
horn logic give denotational definition dsl automatically yields parser interpreter tools support verification 
focus research applying horn logic purposes developing generally applicable methodology 
kastens discuss issues related maintenance dsl 
updating language going new language development cycle propose develop dsls way small maintenance performed easily 
consider language design collection components glued different ways making flexible language definition language family 
dsl life cycle called jacob approach 
corresponding tool support possible automatically generate substantial parts implementation 
authors describe methodology designing language family appropriate set components 
expect methodology outlined applicable language families 
case study illustrate language driven approach developing domain specific language regulation traffic lights 
problem deals regulating traffic crossing traffic junctions 
done means traffic lights division roads lanes 
standard approach controlling traffic lights fix order traffic lights allow traffic cross junction 
leads sub optimal throughput traffic congestion overcome problems sensors register presence traffic lane 
sensors information basis order traffic lights allow traffic cross junction 
order cope high priority vehicles police vehicles special care taken sure vehicles allowed cross junction soon possible 
ieee proceedings th annual hawaii international conference system sciences hicss ieee allowed unsafe situations traffic junction moment time 
conflicting traffic streams allowed cross traffic junction time 
priori assume traffic stream cleared junction immediately traffic light changed red 
traffic light clearance duration associated 
clearance duration traffic light time needed clear junction traffic 
order prevent traffic light switching colours fast associate minimal duration colour traffic light 
goal obtain autonomous traffic junction regulators efficient controllers defined standard approach guarantee safety 
achieve goal develop dsl tailored control traffic lights envision 
subsequent sections main focus stages language driven approach 
full coverage case study please refer :10.1.1.103.2352
section focus problem domain 
problem space discussed section 
section syntax language sketched 
semantics language analysis pragmatics :10.1.1.103.2352
problem domain proceedings th hawaii international conference system sciences assume introductory text previous section sufficient basic understanding problem domain 
concepts natural consequence characterisation traffic junction previous section discussed subsequent paragraphs 
notice marked concepts fixed variable part problem space avoid duplication information 
section provide motivation choice concepts 
miscellaneous 
detailed exposition concepts introduced paragraph please refer :10.1.1.103.2352
mention existence essentially different concepts time viz 
relative time duration absolute time time 
furthermore recognise importance concept traffic participant type participants relation 
junctions 
natural concepts problem domain concept junction 
junctions recognise levels concreteness physical topology intersection traffic rules apply intersection logical characteristics intersection 
levels explained greater detail 
physical topology intersection consists crossing roads 
roads divided number lanes 
define lanes stretches road identical behaviour lanes rail tracks lane consists number parallel strips 
users lane supposed follow route set routes intersection 
traffic junctions consider types lanes viz 
lanes entering lanes leaving intersection 
interested traffic crossing intersection consider possibilities doing 
perspective physical topology arrive notion possible continuations lane entering intersection 
set traffic lanes entering junction set traffic lanes leaving junction lanes requirement lanes observing traffic laws hold intersection see laws restrict traffic essential way 
considering possible continuations lane entering intersection fact consider subset continuations allowed law 
arrive notion continuations 
note lane entering intersection continuation 
continuations requirement continuations logical point view intersection exhibit unsafe behaviour 
unsafe behaviour causes 
hand traffic entering intersection lane conflict traffic entering intersection lane 
conflict dependent physical location lanes continuations lanes entering intersection 
order reason lanes describe lanes conflicting lanes simultaneously green light 
hand observe takes time traffic stream clear intersection received red light 
period needs taken account order guarantee safety 
refer period clearance duration 
clearance duration binary function lanes entering lanes leaving intersection 
consider notion clearance duration determines incoming lane maximum clearance duration continuations 
ieee proceedings th annual hawaii international conference system sciences hicss ieee conflict requirement conflict symmetric irreflexive conflict conflict derived continuations continuations conflict duration requirement partial function defined continuations duration derived max continuations traffic lights 
various important characteristics traffic lights identified 
main characteristic set colours traffic light 
traffic light usually changes colour fixed order notion state cycle identified 
state traffic light tightly coupled traffic light current state identified 
interested long light state 
traffic lights required state minimum time traffic light required show green light seconds 
tl state non empty set possible traffic light states tl state set traffic lights tl state tl loc tl state duration tl state duration sensors 
obtain information environment traffic lanes equipped sensors 
sensor triggered produces input event changes state sensor 
sensors notion state 
moment time inspect state sensor identify current state sensors 
sensors placed lanes detecting specified types road users 
convenient detecting speeding ambulances police vehicles 
sensors set sensors set possible sensor states sensors sensors sensors problem space proceedings th hawaii international conference system sciences important step language driven approach identification problem space narrowing problem domain extending design information 
restriction problem domain sketched section 
design decisions extensions problem domain discussed section 
design decisions model traffic lights competitive system traffic light competes lights right change colour 
information local traffic stream kept reach global decision lights change colour 
introduce concept assigning priorities traffic streams 
priorities dynamically change progress time detection traffic 
assume totally ordered set prio priority values 
sensor priority value corresponding lane initialised traffic detected sensor denoted sensor 
priority update function denoted determines new priority value lane elapse time unit 
prio totally ordered set priority values sensors prio prio prio prio reduction problem domain section marked various concepts fixed variable unmarked concepts turn irrelevant respect traffic light control 
subsequent paragraphs restrict discussion single example irrelevant fixed variable concept 
irrelevant concepts 
example irrelevant notion 
notion right level abstraction observe severe restriction exactly element element 
simply identify notions discard 
variable concepts 
variable concepts depend actual problem instance defined syntax 
example variable concept conflict matrix concept conflict 
goal describe traffic light control single fixed traffic junction need take conflict matrix account 
due fact dependent junction conflict matrix differ 
fixing conflict matrix unwise restrict language describing junctions identical conflicting traffic streams 
fixed concepts 
notions fixed concrete value order problem 
ieee proceedings th annual hawaii international conference system sciences hicss ieee instance colours traffic light fixed defining tl state green yellow red determines standard order green yellow red 
syntax proceedings th hawaii international conference system sciences section describe syntax traffic regulation language 
provide definition syntax give examples expressions concrete graphical syntax 
due space limitations give syntax definitions full detail 
syntax serves express minimal format semantically relevant information designer intersection provide order obtain operational system 
syntax clear correspondence variable concepts identified problem space 
words angular brackets nonterminals language 
assume nonterminals produce disjoint sets identifier symbols 
furthermore produces natural expression possibly containing occurrences variable say represents priority update function 
initial priority sensor captured non terminals clearance produce natural numeric constant 
junction lane conflict mintime lane continuation sensor continuation clearance sensor conflict mintime course static requirements need defined 
detailed overview syntax see :10.1.1.103.2352
ways syntax represented readable format 
textual representation example bit verbose 
example describes junction incoming lanes outgoing lanes 
lane continues lanes clearance duration path lane lane 
lane sensors called normal bus 
initial priority normal sensor detection bus sets priority 
sensor lane distinction type traffic detected 
priorities lanes updated time unit update functions respectively 
lanes conflict 
minimal state time traffic light colours set red yellow green 
leave reader interpret graphical symbols 
denote function parameter 
normal normal bus lanes sensors normal bus normal priorities conflicts mintime red yellow green 
example junction textual graphical syntax 
closing remarks purpose promote domain specific languages regular part software engineering process 
known material published case studies described language driven approach software development 
identified phases approach formulation problem domain identification problem space development language 
problem domain follows domain analysis 
problem domain necessarily general focus actual problem exclusively 
problem space adds concepts concepts due design decisions concepts problem domain 
problem space separates relevant concepts irrelevant concepts considers relevant concepts better accomodate problem class problems solved 
domain specific language developed exactly span problem space 
language developed sub phases syntax semantics pragmatics 
approach illustrated means conceptually simple case study 
case study linear way process developing case study iterative 
experience main factors respect quality language design consistency deliverables involved 
instance case study priority function concept introduced developing semantics obtained concept initial domain analysis 
integrated set support tools covering phases approach take care consistency checking 
ieee proceedings th annual hawaii international conference system sciences hicss ieee 
authors paul ronald felix robert discussions help case study 
marc acknowledged help clarifying ideas led 
due michael van proof reading 
proceedings th hawaii international conference system sciences baeten weijland 
process algebra 
cambridge tracts theoretical computer science 
cambridge university press 
boehm 
spiral model software development enhancement 
ieee computer 
clavel dur eker meseguer :10.1.1.22.8802
maude formal meta tool 
wing woodcock editors world congress formal methods volume lncs pages 
springer verlag 
consel marlet :10.1.1.22.8802
software methodology language development 
palamidessi glaser meinke editors proceedings th international symposium programming languages implementations logics programs alp volume pages 
springer verlag 
czarnecki eisenecker 
generative programming methods tools applications 
addison wesley 
gupta 
horn logic denotational framework specification implementation verification domain specific languages 
technical report new mexico state university 
heering klint 
semantics programming languages tool oriented approach 
acm sigplan notices 
hennessy 
semantics programming languages elementary structured operational semantics 
wiley new york 
herndon 
realizable benefits language prototyping language 
ieee transactions software engineering 
hoare :10.1.1.116.2392
axiomatic basis computer programming 
communications acm october 
itu 
itu recommendation common interchange format sdl 
itu geneva 
kieburtz mckinney bell hook lewis oliva sheard smith walton 
software engineering experiment software component generation 
proceedings th ieee international conference software engineering icse pages 
ieee computer society press 
klint 
meta environment generating programming environments 
acm transactions software engineering methodology 
knuth 
semantics context free languages volume pages 
springer verlag new york 
kutter 
montages specifications realistic programming languages 
journal universal computer science 
:10.1.1.103.2352
system design 
technical report department mathematics computer science eindhoven university technology 
kastens 
configuring component specifications domain specific languages 
proceedings th annual hawaii international conference system sciences 
ieee computer society press 
plotkin 
structural approach operational semantics 
technical report fn computer science department aarhus university 
prieto az 
domain analysis 
software engineering notes 
rekers sch rr 
graph grammar approach graphical parsing 
proceedings ieee symposium visual languages 
royce 
managing development large software systems 
proceedings ieee 
schmidt 
denotational semantics methodology language development 
allyn bacon newton ma 
kurtz 
formal syntax semantics programming languages laboratory approach 
addison wesley 
thibault 
domain specific languages conception implementation application 
phd thesis irisa university rennes 
van den brand van deursen heering de jong de jonge kuipers klint moonen olivier visser visser 
asf sdf meta environment component language development environment 
wilhelm editor compiler construction volume lncs pages 
springer verlag 
van deursen klint visser 
domain specific languages annotated bibliography 
sigplan notices 
weiss 
creating domain specific languages fast process 
kamin editor acm sigplan workshop domain specific languages dsl 
technical report university illinois department computer science 
see url www sal cs uiuc edu kamin dsl 
yeh 
alternate paradigm software evolution 
ng yeh editors modern software engineering foundations current perspectives new york ny 
van nostrand reinhold 
ieee proceedings th annual hawaii international conference system sciences hicss ieee 
