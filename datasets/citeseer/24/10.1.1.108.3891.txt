replace file sty meeting sty meeting 
entcs macro home page 
coalgebraic modal logic sets klin warsaw university edinburgh university polyadic coalgebraic modal logic studied setting locally presentable categories 
shown certain assumptions accessible functors admit expressive logics coalgebras 
examples include typical functors describe systems name binding interpreted nominal sets 
keywords coalgebra modal logic locally presentable category years coalgebra received attention unifying approach transition systems 
kinds systems considered theoretical computer science including labelled probabilistic timed ones modeled coalgebras certain functors called behaviour functors context category set sets functions 
categories considered example presheaf categories category nom nominal sets model process algebras name binding :10.1.1.23.7716
coalgebraic approach provides view notions coinduction bisimulation 
properties transition systems normally specified modal logic 
various logics developed describe properties different kinds systems hennessy milner logic labelled transition systems probabilistic modal logic probabilistic systems logics systems name binding 
importantly logics expressive characterize respective notions bisimilarity 
non expressive fragments logics characterize notions process equivalence trace equivalence testing equivalence 
successful theory transition systems provide general perspective modal logics properties 
approach logics coalgebras coalgebraic logic moss providing expressive logics essentially functors set 
supported epsrc ep 
email inf ed ac uk published elsevier science klin general coalgebraic logic difficult practice syntax involve applications behaviour functor formulas provide simple natural modalities known hennessy milner similar logics 
hand logics developed close usual concrete presentations expressivity depends conditions imposed behaviour functor :10.1.1.42.4120
example modalities predicate liftings map predicates predicates bx behaviour functor resulting modal logic expressive provided predicate liftings exist approach analyzed generalized schr der noted predicate liftings equivalent functions considered polyadic modal logic modalities arity functions allowed 
proved polyadic modal logics expressive accessible behaviour functors 
results mentioned apply functors set 
particular schr der expressivity proof set theoretic nature immediately clear translate base categories 
purpose generalize definition polyadic modal logic proof expressivity accessible functors locally presentable categories satisfy additional conditions 
approach inspired kurz stone dualities obtain logics coalgebras arbitrary categories pavlovic mislove worrell exploit logical connections data tests develop theory testing 
works contravariant adjunctions provide infrastructure linking processes formulas 
adjunctions assumed categorical dualities 
easily implies existence expressive logics functors main effort directed nontrivial task finding concrete presentations logics adjunctions dualities 
flexible approach duality assumption 
concrete presentations expressive logics easier find opens possibility treat various interesting non expressive logics uniform fashion comes price existence expressive logics depends certain conditions 
hand duality assumption adjunctions arise certain relevant categories 
apply examples interest general adjunctions 
main focus non expressive logics expressivity results provided 
structured follows 
technical preliminaries presents categorical generalization schr der polyadic modal logic proved expressive conditions 
categorical notion modality suggested 
examples functors different categories studied 
acknowledgments 
author grateful ji ad mek pointing notion strongly locally presentable category gordon plotkin john power useful discussions alexander kurz sam comments previous draft 
preliminaries klin reader assumed acquainted basic category theory 
epimorphism strong commutative square mono exists unique diagonal ii commutes 
ii strong quotient says strong epis monos form factorization system category morphism factorized strong epi followed mono 
source fi yi jointly monic fi fi object category object source morphisms jointly monic 
example set elements set 
category filtered exists cospan ii parallel pair morphisms coequalizer filtered colimit colimit diagram domain category nonempty filtered dual notion limit 
object category finitely presentable functor hom set preserves filtered colimits 
example finitely presentable objects set exactly finite sets equational class algebras algebra finitely presentable finitely generators finitely equations 
category locally finitely presentable cocomplete set finitely presentable objects object filtered colimit objects finitely presentable functor finitary preserves filtered colimits 
locally presentable category object finitely generated strong quotient finitely presentable object 
set finitely presentable finitely generated objects coincide algebra finitely generated sense universal algebra 
notions generalized filtered colimits locally presentable categories accessible functors regular cardinal 
definitions results proofs general case change 
information intuition locally presentable categories see 
endofunctor category algebra object carrier map lx structure 
algebra morphism lx ly map lf 
dually endofunctor coalgebra object carrier map bx structure 
coalgebra morphism bx map bf example set finite powerset functor fixed set labels klin coalgebras finitely branching labelled transition systems ltss 
coalgebra bx set elements called processes context behaviourally equivalent identified coalgebra morphism ltss coalgebras set behavioural equivalence coincides strong bisimilarity 
information examples coalgebras 
finitely branching ltss bisimilarity characterized finitary hennessy milner logic syntax semantics defined lts standard interpretation propositional connectives 
fragments hennessy milner logic considered see survey 
example restricted grammar logic characterizes trace equivalence ltss 
acquaintance various known approaches aimed generalizing hennessy milner logics functors set strictly necessary understand technical developments 
knowledge approaches hard put context 
due lack space related described worth reading 
logical connections generalization coalgebraic modal logic proceeds lines similar 
gain momentum considering familiar setting sets functions 
typically semantics logic satisfaction relation set tests formulas set tested entities processes equivalently function denotes element set tt ff 
transposes defining semantics processes sets formulas hold semantics formulas sets processes satisfy 
particular processes logically equivalent equated functional presentation easily generalized cover logics set truth values example probabilistic logics continuous interval 
abstracting category sets consider symmetric monoidal closed category chosen object 
contravariant internal hom functor klin self adjoint bijection obtained symmetric monoidal closed structure 
generally assume logical connection contravariant adjunction contravariance marked cross arrow tails slightly abusing notation denote sides bijection objects thought sets structures processes objects sets structures formulas 
connection provides infrastructure relating processes formulas 
clear special case special case 
connection composite covariant functors gf monads respectively 
denote units multiplications monads gf gf bijection expressed terms transformations gg gf property adjunctions gf id 
central definition approach logics coalgebras 
definition situation endofunctor polyadic coalgebraic modal logic shortly logic coalgebras pair called syntax endofunctor lf called semantics connects adjunction 
connection defines adjoint connection bg gl gl gf bg turn determines gf lf initial algebra thought object formulas 
coalgebra bx semantic interpretation object truth values assumed assumption object truth values 
assume internal see 
klin defined induction lf bx transpose map intuitively identifies logically equivalent processes 
example illustrate framework described far simple example consider logic trace equivalence labelled transition systems 
take set fixed set syntax modeled functor initial algebra connection function bx defined cases tt tt 
tt bx similarity definition usual semantics hopefully apparent 
straightforward check lts bx characteristic function set traces trace equivalence kernel proceed formulate prove logics respect behaviour behavioural equivalence implies logical equivalence 
property logics usually defined terms individual processes categorical setting approach needed 
intuitively identifies logically equiva lent processes coalgebra maps identify behaviourally equivalent processes theorem plausibly captures right categorical notion theorem logic respects behaviour coalgebra bx map factorizes coalgebra map proof 
consider coalgebra coalgebra map show equivalently proved induction definition diagram lf lf lf bf bx klin upper left part commutes naturality right part lower left part coalgebra map 
expressivity recall intuition logic admitting initial algebras interpretation coalgebra bx identifies logically equivalent processes 
expressivity logic means logical equivalence implies behavioural coal equivalence say logic expressive morphism requires coalgebra structure intuitively unnecessary strong assumption expressivity sufficient provide coalgebra image morphism coalgebra 
leads definition definition logic coalgebras expressive bx map coalgebra morphism followed mono theorem gives simple conditions sufficient logic expressivity 
theorem situation logic coalgebras initial algebra mono factorization system preserves monos bg gl pointwise monic expressive 
proof 
diagram commutes bg bg bx gf gf glf bx gl gl gf bx ga gf gf gf lower right part mapped upper right part naturality lower left part naturality gf upper left part klin commutes 
outer shape diagram bx bg gl ga see 
strong epi mono factorization preserves monos bm mono bx bi bm bg gl ga diagonal morphism bi exists strong 
coalgebra morphism satisfies definition 
conditions theorem hold practical examples usually key condition check pointwise example function defined tt tt 
tt pointwise monic example straightforward check 
logic traces expressive coalgebras 
note conditions theorem necessary expressive 
natural question arises conditions sufficient expressive logics exist assuming chosen promising choice bg canonical gf lf gf bg bg gf bg gl klin monad unit gf usually pointwise monic see 
unfortunately bg fails initial algebras 
example set finitary functor bg initial algebras cardinality reasons 
search better candidate note finitary functors locally finitely presentable categories initial algebras 
assuming locally finitely presentable general technique restrict functor finitary acts left kan extensions define li pres inclusion functor full subcategory finitely presentable objects 
elementary terms calculate represent filtered colimit diagram finitely presentable objects map form filtered diagram ld take colimit 
ci ck 
lci lk lck lj 
ld unique mediating morphism extends natural transformation coincides pres finitary prop 

may define bg canonical connections bg gl defined gf gf bg 
natural assume gf pointwise monic certain additional conditions composition pointwise monic 
spell conditions important notion needed definition ad mek locally finitely presentable category strongly locally finitely presentable limit cone li yi mono finitely generated exists li mono 
yj yi 
yk li lk example set pos strongly locally finitely presentable locally countably presentable cpo strongly 
category un unary algebras strongly locally finitely presentable locally finitely presentable see 
klin ready formulate sufficient conditions pointwise monic 
theorem situation defined strongly locally finitely presentable locally finitely presentable finitary preserves monos gf pointwise monic gf bg pointwise monic 
proof 
object shall prove bg gl mono 
recall part cocone li bg diagram filtered diagram finitely presentable objects colimit 
show mono show source gli bg gf bg jointly monic 
chase diagram gli gf bg bg gf gf bg gl bg gli gf bg gf bg gf bg left square naturality gf triangle commutes definition 
gf pointwise monic prove joint show source bg bg jointly monic 
consider object maps bg prove locally finitely presentable finitely presentable objects generate loss generality may assume finitely presentable 
klin colimit filtered diagram finitely presentable objects 
denote colimiting cocone nj yj finitary preserves colimit bg colimiting cocone filtered diagram 
finite exists maps locally finitely presentable strong epis monos form factorization system map nj yj factorizes strong epi yj followed mono 
definition finitely generated 
recall colimit diagram denote colimiting cocone ci contravariant adjoint maps cocone limiting cone gci diagram gd 
strong local finite exists index gci mono 
preserves monos bm mono 
note bm bm assumption bm bm bm bm bm corollary situation strongly locally finitely presentable locally finitely presentable gf pointwise monic finitary functor preserves monos admits expressive logic 
proof 
combine theorems 
non trivial point locally presentable category strong epis monos form factorization system prop 

meaning pointwise gf clear result specialized adjunctions arising chosen objects symmetric monoidal closed categories 
object internal map mono 
example set pointwise assumption means set logical values elements 
corollary specializes klin corollary strongly locally finitely presentable symmetric monoidal closed category internal finitary functor preserves monos admits expressive logic 
polyadic modalities results proved show guarantee expressive logic coalgebras exist 
clear syntax semantics logic concrete situations 
development far suggest treatment possibly non expressive fragments canonical logic 
example useful know logic definition fragment expressive logic 
section addresses questions 
analyze structure canonical logic define logic semantics essentially syntax allowing simpler presentation concrete examples 
structure suggests general notion polyadic modality 
showed logic finitary syntax canonically represented 
results considerably simplify presentation main examples 
definition colim bg see 
replacing colimit coproduct define bg bg coproduct right side indexed chosen generating set finitely presentable objects denotes 
evident mediating morphism extends natural transformation epi 
contravariant adjoint maps epis monos canonical adjoint connection gf bg bg gl pointwise monic corresponding connection pointwise monic 
expressive provided finitary admits initial algebras 
concrete cases slightly easier syntactically 
structure suggests general notion polyadic modality intuitively obvious sense modality logical connective arity operator mapping tuples formulas formulas 
finitely presentable object seen arity object map tuple indexed 
structure motivates definition definition finitely presentable object object bg object modalities arity 
examples confirm plausibility definition 
proceed show logic finitary syntax seen fragment 
basic notion logic morphism klin definition logic represented equation holds 
clearly preserves semantics 
logic transformation defines semantics 
particular semantics logic defined showing syntax embedded 
representation theorem shows logic finitary syntax defined way 
theorem logic finitary represented gf proof 
note necessarily finitary canonically represented bg gf bg defined transpose adjoint connection explicitly straightforward calculation shows commutes finitary representation yields transformation bijection nat bg nat li nat li nat pres inclusion functor left right bijections hold li middle equation holds definition 
transformation bg mapped series bijections equation gf gf holds 
observations structure earlier section theorem allows give concrete presentations expressive non expressive logics 
examples shown section illustrate point 
examples section shows definitions specialize useful natural notions concrete settings theorems find expressive logics non expressive fragments transition systems 
familiar setting sets functions studied 
schr der polyadic coalgebraic modal logic shown special case approach examples covered examples 
completeness describe classical example finitary hennessy milner logic 
case nominal sets equivariant functions studied shown klin milner parrow walker logic late bisimilarity systems name binding expressive fragment 
illustrates importance technical assumption strong local theorem example unary algebras homomorphisms 
sets finitary hennessy milner logic set consider finitary finitely presentable set isomorphic finite cardinal modality arity definition function syntax described grammar 

logic additionally straightforward equivalence modalities ensuring modality ignores arguments equal modality smaller arity 
bx inductive definition translates 

gf gf 

note 
tuple functions 
function obtained tupling 
syntax semantics correspond exactly polyadic coalgebraic modal logic special case approach 
result existence expressive polyadic modal logic immediately follows corollary 
set cartesian closed strongly locally finitely presentable set elements internal 
functors set preserve monos nonempty domains shown modify functor set preserve monos substantial change category coalgebras 
specific application consider fixed set labels finitely branching labelled transition systems 
modality definition function function expression built negations finite conjunctions diamond modalities placeholders interpretation hennessy milner logic 
example expression defines function 
straightforward see modality described expression 
formulas built expressions canonical connection klin derived interpretation example tt 
tt ff 
tt 
syntax obviously relates finitary hennessy milner logic 
easy see lts map defined usual semantics logic 
finitary hennessy milner logic special case approach expressivity follows corollary 
polyadic modalities admittedly quite complicated awkward little finitary hennessy milner logic 
alleviate problem choosing fragment theorem show expressive 
example consider logic defined grammar functor set 
obvious inclusion determines connection shown explicitly adjoint connection defined tt tt ff theorem prove expressive show pointwise monic 
distinct needs find loss generality assume fix 
define obviously finite 
pick 
choose element 
define iff tt 
straightforward check tt ff pointwise monic 
nominal sets systems name binding recalling basics nominal sets 
information see 
klin section fix countably infinite set 
names 
action symmetric group sym group permutations set function sym idn sym 
set supports fix tuple nominal set denoted element supported finite set 
nominal set element smallest supporting set denoted supp read fresh means supp 
nom category nominal sets equivariant maps functions sym 
set nominal action defined 
nominal set nominal abstraction set carrier construction extends functor nom 
nom colimits finite limits calculated set 
covariant finite powerset functor extends functor nom sym action calculated pointwise 
nom cartesian closed exponential set necessarily equivariant functions action defined sym restricted functions finitely supported respect action functions exists finite fix particular types exponentials 
set tt ff trivial action 
function supported fixes 
set consists functions satisfying condition finite 
straightforward check internal cartesian closed structure nom 
note nom 
consider nominal set set difficult check function supported supports 
follows function uniquely determined finite partial function fin element data function defined dom 
uniquely determined finitely supported finitely supported function obtained way 
free nominal set set sym evident sym action 
nominal set finitely presentable nom isomorphic klin free nominal set finite set finite set equations 
nom locally finitely presentable 
nominal set finitely generated exists finite generates exist sym nom strongly locally finitely presentable 
proof proceeds follows finitely generated nominal set finite supports finitely elements 
prove finite generate show fixed finitely elements form supported 
consider sym observe supports supp supp 
sym agree supp fixes supp altogether supported different maps restricted supp map supp subsets 
finitely maps 
ii finitely generated finitely equivariant maps prove note equivariant supp supp 
applied means fixed mapped finitely elements equivariant map 
finitely generated equivariant map determined acts finite subset finitely maps 
iii sym nominal set free nominal set generator generator categorical sense word nom 
take equivariant take take equivariant sym determined 
iv nom strongly locally finitely presentable 
situation consider sym limiting cones jointly monic mono cif cif ii finitely choices diagram take common bound obviously ci ci take nominal set functions ci ci previous observation map sym sym generator iii consider functor nom bx 
functor late bisimulation systems name binding see comparison observational equivalence coincides late bisimilarity 
finitary nom 
apply framework polyadic modal logic choose nom seen assumptions theorem hold canonical finitary logic expressive late klin bisimilarity 
modalities quite complicated simpler logic theorem prove expressivity 
specifically choose shorthand obvious functor grammar bm bi binds third production 
connection determined nominal set transpose bx equivariant relation bx defined cases follows 
simplicity negations ignored obvious extend definition full grammar bm bi tt tt tt tt coproduct inclusions bx 
prove expressive theorem show pointwise monic 
proof nominal set distinct lost generality assume pick 
assume define obviously finite 
ag ag ag 
define ag ag tt 
straightforward check tt ff 
hand assume define klin finite 
choose xg yg xg yg choose xg yg 
define xg tt 
straightforward check tt ff 
cases easier altogether show monic 
expressivity follows theorem 
fact logic easily translated logic lm proved expressive late bisimilarity 
nontrivial bit translation bm bm variable fresh 
image translation proper subset lm example match operators occur directly late input modalities theorem expressive subset 
close inspection proof theorem shows formulas form needed expressivity lm 
unary algebras distant transition systems example shows assumption strong local dropped theorem 
unary algebra set denoted called carrier function sx called successor function algebra 
homomorphism function respective carriers sx sy category unary algebras homomorphisms denoted un 
unary algebra subset subalgebra generated denoted defined omit notation clear context 
unary algebra finitely presentable finitely generated finite subset un locally finitely presentable strongly locally finitely presentable see 
un cartesian closed algebra homomorphisms unary algebra natural numbers incrementation successor defined 
closed symmetric monoidal structure convenient purposes particular algebra obvious candidate algebra logical values internal structure 
choose contravariant adjunction un closed symmetric monoidal structure 
define un un op px px klin spx sx pf check pf homomorphism calculate spx pf spx sx sy sy pf spy 
contravariant self adjoint 
homomorphism py define px check homomorphism calculate sy sy spy sx spx spx 
construction follows sets 
maps un monos injective carriers pointwise unit pp follows pointwise sets 
un un finitely covered powerset functor mapping algebra set subsets finitely generated subalgebras finite sp sx defined check homomorphism calculate sp sx sz sp 
check finitary un consider finitely generated 
gy finite set gy take finite union gy taken set generating subalgebra generated factorizes inclusion klin consider coalgebras bx fixed unary algebra labels 
coalgebra seen labelled transition system defined carriers successor functions sx sa sx sa sx ii sx sx sa iii finite 
sn sn 
transition systems introduced show technical importance strong local assumption expected practical applications 
get intuition see elements processes actions observed distance action sx sa corresponding step back processes actions appear identical example sa sa 
intuition explains conditions ii condition iii analogous finite branching condition ordinary ltss additional possibility process moving away nondeterministically chosen distance action 
note finitary 
finitely generated algebra modality arity definition predicate bp syntax described grammar 
arity number generators tuple 
represents unique extension 
tuple arity 



additionally straightforward equivalence modalities 
coalgebra bx inductive definition px translates 
ph 
bp defined pb pp 
bp 
pp 
gi klin gi th generator 
gi turns complicated modalities ensure expressivity counterexample consider algebra labels 
action sa indicated dotted arrows coalgebra described graph 


transitions indicated solid arrows transitions 
determined condition ii omitted clarity 
note finitely generated 
coalgebra morphism identifies 
see note coalgebra morphism identifies xn easily proved induction 
labelled step processes behaviourally equivalent 
formula distinguishes 
proof similar classical proof finitary hml respect infinitely branching ltss relies fact formula continuous meaning xm straightforward show continuous fact homomorphism take 
ii set formulas finitely generated set continuous formulas take max ranging set generators 
iii formula continuous 
proved induction 
arity choose show xn 
iv formula follows iii means expressive coalgebras 
shows assumption strong local dropped theorem 
ad mek 
final coalgebras continuous functors 
theoretical computer science 
klin ad mek herrlich strecker 
concrete categories 
wiley interscience 
ad mek locally presentable accessible categories 
cambridge university press 
barr 
terminal coalgebras founded set theory 
theoretical computer science 
kurz 
pi calculus logical form 
draft available www cs le ac uk people works html 
kurz 
duality logics transition systems 
proc 
fossacs volume lncs pages 
kurz 
presenting functors operations equations 
proc 
fossacs volume lncs pages 
dam 
proof systems pi calculus logics 
logic concurrency synchronisation de ed trends logic studia logica library pages 
kluwer 
fiore 
comparing operational models name passing process calculi 
information computation 
fiore 
congruence rule format name passing process calculi mathematical structural operational semantics 
proc 
lics pages 
ieee computer society press 
fiore turi :10.1.1.23.7716
semantics name value passing 
proc 
lics pages 
ieee computer society press 
gabbay pitts 
new approach syntax variable binding 
formal aspects computing 
van glabbeek 
linear time branching time spectrum bergstra ponse smolka editors handbook process algebra 
elsevier 
hennessy milner 
algebraic laws nondeterminism concurrency 
journal acm 
jacobs 
duality result modal logic coalgebras 
proc 
cmcs volume entcs pages 
elsevier 
jacobs rutten 
tutorial algebras induction 
bulletin eatcs 
jonsson yi larsen 
probabilistic extensions process algebras 
bergstra ponse smolka editors handbook process algebra pages 
elsevier 
klin 
fibred lifting expressivity coalgebraic modal logic 
proc 
volume lncs pages 
kurz 
specifying coalgebras modal logic 
theoretical computer science 
kurz 
coalgebras logics 
acm sigact news 
kurz strongly complete logics coalgebras 
appear 
draft available www cs le ac uk people 
mac lane 
categories working mathematician 
springer second edition 
makkai par 
accessible categories foundations categorical model theory volume contemporary mathematics 
american mathematical society 
milner parrow walker 
modal logics mobile processes 
theoretical computer science 
moss 
coalgebraic logic 
annals pure applied logic 

semantical principles modal logic coalgebras 
proc 
stacs volume lncs 
springer 
pavlovic mislove worrell 
testing semantics connecting processes process logics 
proc 
amast volume lncs pages 
springer 

coalgebras modal logic 
proc 
cmcs volume entcs 
elsevier 
rutten 
universal coalgebra theory systems 
theoretical computer science 
schr der 
expressivity coalgebraic modal logic limits 
proc 
fossacs volume lncs pages 

