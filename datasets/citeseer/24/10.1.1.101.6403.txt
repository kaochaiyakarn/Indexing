threshold password authenticated key exchange extended philip mackenzie thomas shrimpton markus jakobsson bell laboratories lucent technologies murray hill nj usa lucent com dept electrical computer engineering uc davis davis ca usa ucdavis edu rsa laboratories rsa security bedford ma usa com 
password authenticated key exchange systems single server storing password verification data 
provide resilience server compromise data typically takes form way function password possibly salt public values password 
server compromised password verification data perform offline dictionary attack user password 
propose efficient password authenticated key exchange system involving set servers certain threshold servers participate authentication user compromise fewer threshold servers allow attacker perform offline dictionary attack 
prove system secure random oracle model decision diffie hellman assumption attacker may eavesdrop insert delete modify messages user servers compromises fewer threshold servers 
real world systems today rely password authentication verify identity user allowing user perform certain functions setting virtual private network downloading secret information 
security concerns associated password authentication due mainly fact users passwords drawn relatively small easily generated dictionary 
information sufficient verify password guess mackenzie shrimpton jakobsson leaked password may performing offline dictionary attack run dictionary possible passwords testing leaked information order determine correct password 
password authentication performed network especially careful allow leakage information listening actively attacking network 
assumes server public key known verified user performing password authentication setting anonymous secure channel server generally sufficient prevent leakage information done ssh web ssl 
problem difficult server public key verified user 
solutions problem coined strong password authentication protocols property informally probability active attacker may eavesdrop insert delete modify messages network impersonating user negligibly better simple line guessing attack consisting attacker iteratively guessing passwords running authentication protocol 
strong password authentication protocols proposed wu 
protocols proven secure random oracle model bellare mackenzie public random string model katz standard model goldreich lindell :10.1.1.102.4190
protocols ones server public key known user vulnerable server compromise sense compromising server allow attacker obtain password verification data server typically type way function password public values 
perform offline dictionary attack password 
address issue resorting assumptions tamper resistance ford kaliski proposed distribute functionality server forcing attacker compromise servers order able obtain password verification data :10.1.1.37.9720
note main problem just distribute password verification data distribute functionality distribute password verification data authentication reconstructing data set servers smaller chosen threshold 
distributed cryptosystems studied extensively proven secure cryptographic operations signatures knowledge ford kaliski ones propose distributed password authenticated key exchange system 
give proof security system 
extends system ford random oracle model hash function modeled black box containing ideal random function 
standard cryptographic assumption 
fact possible scheme secure random oracle model insecure real instantiation hash function :10.1.1.136.3135
proof security random oracle model generally thought strong evidence practical security scheme 
threshold password authenticated key exchange kaliski notably require server public key known user give proof security 
contributions 
propose completely different distributed password authenticated key exchange system prove secure random oracle model assuming hardness decision diffie hellman ddh problem see :10.1.1.37.9720
system ford kaliski system require servers perform authentication system threshold system servers required authentication compromise servers affect security system 
distributed password authenticated key exchange system proven secure standard cryptographic assumption model including random oracle model 
specific assume client may store public data security active attacker may statically compromise number servers specified threshold 
technically achieve result storing semantically secure encryption function password servers simply storing way function password leveraging known solutions distributing secret decryption keys feldman verifiable secret sharing 
words transform problem distributing password authentication information problem distributing cryptographic keys 
transformation verifying passwords leaking information difficult requiring intricate manipulations elgamal encryptions careful efficient non interactive zero knowledge proofs 
note threshold password authentication system follow techniques general secure multi party computation working asynchronous model allow concurrent executions protocols assume authenticated channels 
note particular goal protocol client authenticated 
general secure multi party computation asynchronous model allowing concurrency assumes authenticated channels 
model extend model builds 
model designed problem authenticated key exchange ake parties client server 
goal engage protocol protocol completed hold session key known 
model designed problem distributed authenticated key exchange client servers 
goal engage protocol protocol completed client hold session keys shared server session key shared client server known servers conspire 
mackenzie shrimpton jakobsson note secure protocol allows secure downloadable credentials having servers store encrypted credentials file decryption key stored threshold scheme having send partial decryption credentials file client encrypted session key shares client 
note credentials secure threshold sense fewer threshold servers unable obtain credentials 
details scope 
assume familiarity model 
protocol participants 
types protocol participants clients servers 
id def clients servers non empty set protocol participants principals 
assume servers consists servers denoted 
sn servers meant cooperate authenticating client 
client clients secret password server servers vector clients entry password record 
password possibly small set passwords client selected 
assume password results easily extend password distributions 
clients servers modeled probabilistic poly time algorithms input tape output tape 
execution protocol 
protocol algorithm determines principals behave response inputs environment 
real world principal able execute multiple times different partners model allowing unlimited number instances principal 
instance principal id denoted describe security protocol assume adversary complete control environment mainly network provides inputs instances principals 
assume network performs aggregation broadcast functions 
practice point point network protocol implementor implement functionalities way single intermediate untrusted node aggregate broadcast messages formally adversary probabilistic algorithm distinguished query tape 
queries written tape responded principals allowed queries formally defined summarized slight modifications multiple servers send causes message sent instance instance computes protocol says state updated output model extended multiple sets servers clarity presentation omit extension 
notational convenience 
particular assumptions synchronicity type distributed consensus 
note controls network deny service time concern denial service attacks single intermediate node may facilitate 
threshold password authenticated key exchange computation query causes accept terminate shown initiate session client set servers adversary send message containing set indices servers servers unused instance execute sj 
sjk jk causes executed completion clients sj 
sj outputs jk transcript execution 
query captures intuition passive adversary simply execution reveal sj causes output session key held corresponding server sj sk sj reveal sj causes output session key held sj sk sj test sj causes flip bit session key sk sj output string drawn uniformly space session keys output 
test query type may asked time execution may asked 
test sj causes sj flip bit session key sk sj output string drawn uniformly space session keys output 
test query type may asked time execution may asked 
reveal queries model adversary obtains information session keys sessions test queries technical addition model allow determine adversary distinguish true session key random key 
assume may compromise servers choice servers static 
particular loss generality may assume choice initialization may simply assume adversary access private keys compromised servers 

server instance accepts holds partner id pid sid session key sk 
client instance accepts holds partner id pid session id sid set session keys skj 

sid concatenation messages pre specified compacted representations messages sent received client instance communication set servers 
note excludes messages sent servers client 
instances clients holding pid sid skj 
set 
jk sj sj servers holding pid sid sk said pid sj pid sid sid skj sk 
called matching conversation approach defining 
freshness 
client instance server pair sj fresh sj compromised reveal sj query sj partner reveal sj query 
server instance sj fresh sj compromised reveal sj query mackenzie shrimpton jakobsson partner sj reveal sj query 
intuitively adversary able distinguish random keys session keys held fresh instances 
advantage adversary 
formally define distributed authenticated key exchange advantage adversary protocol succ event single test query directed instance terminated fresh eventually outputs bit bit selected test query 
advantage attacking defined adv def pr succ 
fact easily verified 
fact 
pr succ definitions pr succ adv 
cryptographic security parameter 
gq denote finite cyclic group order 
generator gq assume included description gq 
notation 
mean elementwise multiplication ac bd 
mean elementwise exponentiation 
tuple notation means jth element denote set functions set provided probability measure saying random assigns sequence bits selected uniformly random 
shown sequence bits may define output specific set assume specify output random oracle interpreted random element gq 
access public random oracle algorithms specifically protocol adversary assume secret session keys drawn function negligible exists say multi input function negligible negligible respect inputs 
protocol section describe protocol threshold password authenticated key exchange 
section prove protocol secure ddh assumption random oracle model :10.1.1.37.9720
instance easily defined gq order subgroup prime 
server setup threshold password authenticated key exchange servers si 
servers global key pair servers share global secret key threshold feldman secret sharing protocol 
specifically polynomial mod chosen random coefficients aj zq 
server si gets secret share xi corresponding public share yi 
assume trusted dealer generates shares possible servers generate distributed protocol gennaro 
addition server si independently generates local key pair gx server si publishes local public key share global public key yi 
random oracles domain range defined context 
generators gq 

note protocol servers assumed stored public values ni yi likewise client assumed stored public values ni 
alternatively trusted certification authority ca certify values choose keep model simple possible 
client setup client clients secret password drawn set password assume password mapped zq remainder passwords elements zq 
creates elgamal ciphertext ec value servers global public key precisely selects zq computes ec 
sends ec servers si record ec database 
alternatively trusted ca choose keep model simple possible 

assume adversary observe participate system client setup phases 
assume client saves copy ec locally 
clear ec public information storing shared secret key client obviate need password authentication 
particular noted storing ec locally client alternatively obtain certified copy ec interaction servers 
details scope 
client login protocol high level description protocol formal description may full 
protocol client clients relies simulation sound non interactive zero knowledge proof ss scheme see de santis definition ss scheme mackenzie shrimpton jakobsson prove verify sim language defined predicate takes elements gq gq defined ec def ec algorithms prove verify sim random oracle 
prove may implemented standard way move honest verifier proof non interactive hash function generate verifier random challenge having extra input hash function 
proofs defined may implemented similarly 
discuss 
client clients receives set servers servers initiates protocol set broadcasting identity 
stated assume aggregation broadcast functionalities network communication client servers servers 
return receives nonces servers client removes password ciphertext ec raising dividing element tuple result form quantity formed satisfy predicate ss created bind session public key nonces servers 
ss forces client behave properly particular allow simulator proof security operate correctly 
idea similar second encryption achieve chosen ciphertext security 
verifying ss client password servers run verify log log 
effectively verifying decryption valid encryption plaintext message 
server si computes session key ki computed client 
efficiency calculations proof constructions figures 
recall servers involved execution protocol 
protocol requires rounds round exchange messages participants 
messages length proportional size group element 
client involved rounds servers involved rounds 
client performs exponentiations server performs exponentiations 

costs obviously higher ford kaliski scheme remember protocol achieve provable security random oracle model 
costs may reasonable practical implementations range 

protocol provide forward security 
achieve forward security server si need generate diffie hellman values dynamically simply values need certified threshold password authenticated key exchange si protect client man middle attack 
details scope 
zq client server si ec ci 
ci prove ec yi ki yi protocol ci fig 

protocol zq broadcast ci ci 
ci verify ec abort yi ki yi protocol takes parameters run servers si verify log log encryption 
parameter order allow proof security 
protocol shown uses standard notation lagrange coefficients mod basic idea protocol follows 
servers distributively compute standard technique randomizing quotient equal 
take second component distributively compute shared secrets 
verify implying encryption 
uses ss scheme prove verify sim language defined predicate mackenzie shrimpton jakobsson takes elements gq gq defined bi vi def ri bi ri vi ri ri 
ri algorithms prove verify sim random oracle 
uses ss scheme prove verify sim language defined predicate takes elements gq gq gq defined ci ri def ci ri 
algorithms prove verify sim random oracle 
uses ss scheme prove verify sim language defined predicate takes elements gq gq gq gq gq defined ci ci ri def ci ci ri 
algorithms prove verify sim random oracle 
security protocol state ddh assumption 
prove protocol secure ddh assumption 
decision diffie hellman 
formally state ddh assumption 
full details see 
gq section generator values gx gy dh algorithm input outputs believes dh 
running time adv ddh gq def pr zq xy pr zq adv ddh gq maxa adv ddh gq maximum taken adversaries time complexity ddh assumption states polynomial adv ddh gq negligible 
protocol prove protocol secure sense adversary attacking system compromises fewer servers determine session keys significantly greater advantage online dictionary attack 
recall consider static compromising servers adversary chooses servers compromise execution system 
texp time required perform exponentiation gq 
step ri threshold password authenticated key exchange zq bi vi prove bi vi ri broadcast bi vi step receive bj vj verify bj vj abort bj bi 
bi ai ixi ci ri cj yj prove ci ri ai broadcast ri step receive rj verify cj rj abort prove ci ci ri ai broadcast ci step receive verify cj cj rj abort abort fig 

protocol server si 
theorem 
protocol described group gq password dictionary size may mapped zq 
fix adversary runs time nse nex queries type send execute reveal respectively nro queries directly random oracles 
nro nex texp adv nse adv ddh gq nse nse nro nse proof proof proceed introducing series protocols 
related reduced simply guessing correct password describe protocols informally 
prove difference advantage attacking protocols pi pi negligible 
mackenzie shrimpton jakobsson zq ec ec ec mod mod return true ec mod return fig 

prove ec verify ec zq bi vi bi vi bi vi rie mod mod mod mod mod return fig 

prove bi vi ri bi bi vi vi return true bi vi bi vi fig 

verify bi vi zq threshold password authenticated key exchange ri ri ci ri ci ae mod mod return true ci ri return zq fig 

prove ci ri verify ci ri ri ri ci ci ci ri ci ae mod mod return true return ci ci ri fig 

prove ci ci ri verify ci ci ri sketch proofs leave details full 
probability collision nonces easily seen negligible 
shown standard reduction ddh 
input plug random powers servers local public keys random powers clients values check queries appropriate powers shown reduction ddh 
input plug create randomized encryptions vi ri values 
factor negligible probability simulation error ss proofs shown reduction ddh 
input plug simulate public shares uncompromised servers create randomized encryptions values 
sure authentication succeeds client uses value generate ci values uncompromised servers way product value simulate ss proofs 
mackenzie shrimpton jakobsson original protocol nonces assumed distinct reveal queries reveal help test query 
diffie hellman key exchange client uncompromised server replaced perfect key exchange adversary succeed impersonating client uncompromised server obtain information help test query 
value client values vi ri uncompromised servers replaced random values 
ss ss ss ss constructed associated simulators 
value client replaced random value values uncompromised servers changed force associated authentication succeed 
adversary succeeds sends value associated correct password 
abort adversary creates new valid ss proof ss proof associated uncompromised server 
value ec client changed random value adversary login attempt ci values uncompromised servers replaced values generated form random force failure 
fig 

informal description protocols difficulty performing authentication values chosen adversary know secret shares xi values uncompromised servers 
perform authentication plug value known discrete log decrypt values decryptions aid computing vi correct value don know 
generate ci values uncompromised servers way product simulate ss proofs 
straightforward increase probability adversary succeeding 
shown reduction ddh 
input plug simulate public shares uncompromised servers correct ss uncompromised server compute known 
simply check shown reduction ddh 
input plug simulate public shares uncompromised servers create randomized encryptions ec values 
affect authentication values generated clients values random point anyway 
difficulty obtaining right distribution ci values authenticating values chosen threshold password authenticated key exchange adversary 
creation bi values uncompromised servers leaves values correct true dh triple affect randomizing values random triple 
decryptions vi aid computing true gx value don know true dh triple appropriate random value random triple 
see adversary succeed impersonating client uncompromised server gains negligible advantage determining real session key random session key 
remainder protocols show adversary gains negligible advantage impersonating client simple online guessing attack 
particular password check values submitted adversary attempting impersonate client 
theorem follows 

bellare pointcheval rogaway 
authenticated key exchange secure dictionary attacks 
eurocrypt lncs pp 


bellare rogaway 
random oracles practical paradigm designing efficient protocols 
st acm conference computer communications security pages november 

bellare rogaway 
entity authentication key distribution 
crypto lncs pp 


bellare rogaway 
provably secure session key distribution party case 
th acm symposium theory computing pp 


blum feldman micali 
non interactive zero knowledge applications 
th acm symposium theory computing pp 


boneh 
decision diffie hellman problem 
proceedings third algorithmic number theory symposium lncs pp 


boyd 
digital multisignatures 
piper editors cryptography coding pages 
clarendon press 

mackenzie patel 
provably secure password authentication key exchange diffie hellman 
eurocrypt lncs pp 


canetti goldreich halevi 
random oracle methodology revisited 
th acm symposium theory computing pp 


canetti lindell ostrovsky sahai 
universally composable computation 
th acm symposium theory computing 

desmedt frankel 
threshold cryptosystems 
crypto lncs pages 

de santis di ostrovsky sahai 
robust non interactive zero knowledge 
crypto lncs pp 


allen 
tls protocol version ietf rfc january 
mackenzie shrimpton jakobsson 
diffie hellman 
new directions cryptography 
ieee trans 
info 
theory 

elgamal 
public key cryptosystem signature scheme discrete logarithm 
ieee trans 
info 
theory 

feldman 
practical scheme non interactive verifiable secret sharing 
th ieee symp 
foundations computer science pp 

ford kaliski jr server assisted generation strong secret password 
proceedings th ieee international workshop enterprise security 

frankel mackenzie yung 
adaptively secure distributed threshold public key systems 
european symposium algorithms lncs pp 


gennaro jarecki krawczyk rabin 
security distributed key generation dlog cryptosystems 
eurocrypt lncs pp 


gennaro jarecki krawczyk rabin 
robust threshold dss signatures 
eurocrypt lncs pages 

goldreich lindell 
session key generation human passwords 
crypto lncs pp 


goldreich micali wigderson 
play mental game completeness theorem protocols honest majority 
th acm symposium theory computing pp 



strong password authenticated key exchange 
acm computer communication review acm sigcomm 


password authentication multiple servers 
em rsa conference cryptographers track lncs pp 


katz ostrovsky yung 
efficient password authenticated key exchange human memorable passwords 
eurocrypt lncs pp 


mackenzie patel swaminathan 
password authenticated key exchange rsa 
asiacrypt lncs pp 


naor yung 
public key cryptosystems provably secure chosen ciphertext attacks 
nd acm symposium theory computing pp 


ssh communications security 
www ssh fi 

wu 
secure remote password protocol 
proceedings internet society network distributed system security symposium pp 

