siam comput 
society industrial applied mathematics vol 
pp 
efficient dynamic traitor tracing omer berkman michal parnas ji sgall 
notion traitor tracing introduced chor fiat naor tracing traitors lecture notes comput 
sci 
pp 
order combat piracy scenarios 
fiat tracing traitors lecture notes comput 
sci 
pp 
proposed dynamic traitor tracing scenario algorithm adapts dynamically responses pirate 
number users number traitors 
main result algorithm locates traitors unknown watermarking alphabet size optimal number log rounds 
improves exponential number rounds achieved fiat case 
algorithms larger alphabet alphabet size algorithm uses log rounds alphabet size pc algorithm uses log rounds 
final result lower bound log rounds algorithm uses alphabet size assuming known advance 
key words 
analysis algorithms asymptotic complexity cryptography traitor tracing ams subject classifications 
pii 


electronic world information easily copied retransmitted issue protecting intellectual property great concern 
owners information interested selling need protect 
ways protect property 
option prevent redistribution 
option devise means detect redistribution occurred 
second issue addressed traitor tracing course existence scheme may deter piracy occurring 
excellent example world pay tv systems 
owners pay tv system broadcast paying customers able add delete viewers needed ensuring process happens timely manner 
order protect material broadcast encryption utilized keys changed periodically addition existence secure hardware 
goal pirate enable persons view broadcasts 
pirate registered legitimate subscriber system achieve goal transferring decryption keys entire content 
order tracing difficult pirate control subscriptions alternate 
refer subscription traitor 
assume pirate operates content 
algorithms easily adapted deal mode piracy received editors february accepted publication revised form september published electronically february 
preliminary version appeared proceedings eleventh annual acm siam symposium discrete algorithms san francisco pp 

www siam org journals html academic college tel aviv st tel aviv israel omer mta ac 
il mta ac il 
mathematical institute cr cz czech republic department applied mathematics faculty mathematics physics charles university sgall math cas cz www math cas cz sgall 
author partially supported ga av ga efficient dynamic traitor tracing keys published 
traitor tracing schemes capable detecting traitors disconnected system harming legitimate user 
furthermore schemes supply legal evidence pirate identity 
chor fiat naor introduced notion traitor tracing provided solution problem 
static approach means security measures applied onset protocol 
single opportunity applying measures suffice order locate traitors piracy observed 
number traitors reality larger assumed static scheme algorithm way tracing traitors traitors may frame innocent user 
related 
comprehensive overview static schemes related see 
basic tool traitor tracing schemes cryptographic fingerprinting allows schemes generate different versions content send subsets users 
done example watermarking version noticeable degradation quality 
basic assumption previous schemes schemes pirate remove watermarks combine different versions new see 
typical static scheme uses fingerprinting content divided segments segment watermarked 
number different versions generated segment referred watermarking alphabet size 
possible course alphabet size equals number subscribers locate traitors immediately 
requires enormous bandwidth 
smaller alphabet version segment sent subscribers 

dynamic traitor tracing schemes 
fiat introduced dynamic traitor tracing schemes 
schemes adapt algorithm order force pirate reveal information 
eventually algorithm locates traitors stops piracy 
additional nice feature dynamic schemes need priori bound possible number traitors algorithms adapt new traitor discovered 
static schemes described modified fit dynamic setting follows round algorithm divides set users disjoint subsets number subsets bounded watermarking alphabet size 
different versions content transmitted system subsets users version subset 
pirate broadcasts versions evidence corresponding subset contains traitor 
happens algorithm changes allocation versions users starting new round 
pirate continue broadcast version knowledge gained algorithm 
eventually pirate keeps information gathered allows algorithm locate disconnect traitors 
segment dynamic setting defined part content transmitted users duration round 
note sending distinct version securely subset done encryption 
see section discussion bandwidth overhead required sending encrypted versions 
interested complexity measures dynamic traitor tracing scheme omer berkman michal parnas ji sgall number different versions size watermarking alphabet proportional bandwidth requirements time number rounds needed proportional number segments 
ignore computation performed traitor tracing algorithm note proposed algorithms previous efficient 
number subscribers number traitors 
shown deterministic algorithm versions order locate single traitor regardless number rounds known advance versions possible locate traitors log rounds versions possible locate traitors log rounds 

results 
family deterministic algorithms locate traitors polynomial number rounds 
exact bounds depend size watermarking alphabet 
specifically show versions possible locate traitors optimal number log rounds see lower bound 
improves exponential bound solving open problem raised 
note algorithm runs polynomial number rounds uses twice versions algorithm 
minimal number versions needed 
algorithm achieves optimal time minimal alphabet size 
versions possible locate traitors log rounds 
example time log 
pc versions possible locate traitors log rounds 
example constant time 
algorithms similar algorithms apply number traitors known advance 
means example algorithm allowed versions algorithm uses versions traitors known exist 
noted computation performed algorithms consecutive rounds efficient 
addition provide lower bound time needed locate traitors time needed locate traitors known advance versions log 
bound tight constant result constant result 
gap small factor log remains open problem close gap 
organization 
remainder organized follows 
section describe problem general strategy algorithms 
section describe algorithm uses versions log rounds 
algorithm building block algorithms 
optimal algorithm uses versions section establishing 
section algorithms minimal number versions required prove bounds 
section algorithm uses versions runs time log 
optimal interesting bound section obtained different efficient dynamic traitor tracing approach 
section prove lower bound 
conclude open problems section 
preliminaries 

model 
describe combinatorial game abstraction dynamic scenario described serves model rest 
denote set users 
set traitors controlled pirate 
round algorithm assigns user version current segment set versions give version subset users subset said colored pirate broadcasts colors answer 
pirate broadcasts color implies users colored traitor 
traitor located single user colored answer 
number traitors known advance way locate traitor 
traitor located disconnected removed assume pirate gives answer long active traitors 
pirate loses game answer meaning goes business algorithm located traitors 
measure maximal number colors single round number rounds needed worst case 
goal algorithm minimize numbers worst case precisely achieve tradeoff measures 
fact pirate decide advance traitors implicitly assumed 
pirate choose traitors adaptive manner game 
decides corrupt user committed decision game 
similar general situation area line algorithms adversary arguments 
algorithms deterministic adversary simulate algorithm advance committing set advance pose restriction 

simplified model 
lemma shows locating single traitor hard locating traitors worst case 
specifically show seemingly easier problem locating traitor saves rounds 
may somewhat counterintuitive try give intuition 
call pirate strategy reasonable answers color single user choice traitors received unique color 
reasonable strategies statement holds trivially algorithm locate traitor traitors unique color 
easy locate remaining traitors additional rounds claimed 
remains prove reasonable strategies result maximal number rounds fixed number colors 
goal algorithm locate traitor trivial brings advantage pirate lose game 
goal algorithm locate traitors clear advance reasonable strategy pirate best resort 
may better case pirate reveal traitor keep bigger uncertainty location remaining traitors 
prove statement true strategy necessarily reasonable strategies 
lemma 
exists algorithm locates traitors rounds exists algorithm locates traitors omer berkman michal parnas ji sgall rounds 
bound number colors algorithms 
proof 
algorithm locates traitors eventually get answers allow locate traitors 
traitor located algorithm locates traitor takes rounds colors 
suppose algorithm locates single traitor rounds 
devise algorithm uses algorithm black box order locate traitors 
algorithm runs algorithm passes algorithm pirate answers exception color algorithm single user answer pirate algorithm disconnects user clearly traitor pass pirate answer algorithm far algorithm concerned waits answer pirate user colored part user set user disconnected pirate give color user answer round 
far algorithm concerned round occurred charge round traitor located algorithm rounds charged algorithm including final round traitor located 
algorithm stops traitors located answers received pirate 
clearly number colors algorithm number colors algorithm finish proof show algorithm performs rounds assuming algorithm performs rounds 
charged rounds algorithm rounds traitors located 
sequence answers passed algorithm algorithm valid algorithm locates single traitor traitor located rounds 
total number rounds performed algorithm claimed 
assume algorithm stops locating traitor 
mentioning explicitly algorithm assume pirate broadcasts color single user algorithm stops immediately 
lemma change number rounds insignificant compared bounds show 
fact locating traitors requires rounds matter colors 
practice may desired reduce number colors traitor located 
easy modify algorithms achieve 

graph notation 
algorithms partition set users disjoint subsets give users subset common color 
represent current state algorithm undirected graph 
vertex represents subset users user belongs exactly vertex 
edge means subset contains traitor previous round answer color frequently color subset special vertex represents subset innocent users subset users known stage contain traitor 
vertex called singleton contains exactly user 

basic algorithm 
schemes basic algorithm formulated graph notation 
algorithm graph consists vertices special vertex disjoint edges adjacent recall edge implies efficient dynamic traitor tracing 
fig 

example graph basic algorithm 
endpoints contains traitor 
graph disjoint edges exist traitors 
see 
basic algorithm 
start graph 
repeat forever find vertex contains traitor 
split new vertices equal size differing size odd connect edge 
set 
vertex connected edge 
set split vertices equal size connect edge 
algorithm uses colors giving vertex distinct color 
round pirate broadcast color vertex traitors located log rounds 
second algorithm uses colors step requires exponential time algorithm impractical 

generalized graph notation 
order decrease number colors needed algorithms graphs generalize structure 
pairs connected vertices disjoint cliques possibly additional edges 
formally define graphs 
definition 
integers 
graph graph contains vertices special vertex vertices subsets possibly nonempty user belongs exactly vertex edge subset contains traitor vertices partitioned disjoint cliques qk qi ti note graph may contain additional edges cliques 
constraints structure graph described algorithms 
lemma easy verify remember vertices connected edge contains traitor 
lemma 
graph 
clique qi ti vertices contains ti traitors graph contains traitors 
number vertices graph 
clique algorithm 
section describe algorithm uses colors 
algorithm runs log rounds optimal 
section algorithm derive algorithm uses colors runs optimal number log rounds 
start overview clique algorithm 
lemma graph known contain traitors 
allowed colors 
omer berkman michal parnas ji sgall graph contain vertices may colors give vertex distinct color 
algorithm pairs cliques forces pirate round transmit color vertex disclose edge connecting pair cliques 
color vertex transmitted split vertex vertices producing new clique size advance locating traitors 
disclosed edges hand added graph order merge eventually pair cliques larger clique containing vertices cliques 
process repeated graph contains exactly clique size 
give vertices distinct color force pirate transmit color vertex allowing split vertex 

data structures invariants 
graph 
maintain graph special vertex cliques qi size ti 
zones blocks 
vertices graph partitioned zones 
vertices zone partitioned blocks 
edges connecting vertices different blocks zones 
zones blocks defined follows vertices zone partitioned blocks 
block graph induced vertices cliques qi qj sizes ti tj respectively 
block contain clique size ti tj 
equivalently means distinct vertices qi qj 
zone contains special vertex addition may contain clique qi size ti 
vertex clique qi form clique size ti 
equivalently means exists vertex qi see example data structures clique algorithm 

description algorithm 
start graph 
repeat phases phase distributing colors vertices allocate ti colors clique qi total colors 
color allocated describe distribute allocated colors zone block 
color block zone separately colors allocated pair cliques block zone qi qj cliques definition blocks zone exist distinct vertices qi qj color color color 
color remaining ti tj vertices qi qj remaining ti tj colors allocated cliques color vertex 
zone contains vertex color color allocated 
zone contains clique qi exists vertex qi color color remaining ti vertices qi ti colors color vertex 
empty vertices qi colored distinct colors 
ti colors total number colors allocated qi see example distribution colors 
efficient dynamic traitor tracing zone block block zone fig 

example data structures clique algorithm graph bold lines represent clique edges thin lines represent edges cliques clique example distribution colors phase clique algorithm labels denote colors vertices dashed lines denote pairs nonadjacent vertices received color 
phase reorganizing graph pirate response 
pirate broadcasts color vertex remove edges incident split new vertices equal size differing size odd add edge 
define new clique consisting vertices 
set 
incorporate clique zones see step 
qi clique belongs 
set qi qi 
qi remove edges incident vertex remaining qi 
remove vertex qi add place qi 
clique qi consists vertices 
qi legal clique 
case sets form new clique set incorporate new clique zones see step 
pirate broadcasts color pair vertices add edge tog edge connects vertices belonging pair cliques qi qj block adding edge block contains large clique size ti tj remaining vertex belong large clique 
remove edges incident clique add furthermore set remove cliques qi qj block incorporate new clique zones see step 
see example 
edge connects vertex clique qi zone omer berkman michal parnas ji sgall fig 

example merging pair cliques step phase clique algorithm 
left block zone received color middle block pirate answered joint color edge added 
right cliques merged big clique edges incident removed 
adding edge qi form clique ti vertices add vertex qi create new special vertex 
set ti increased 
new clique created steps reorganize zones follows incorporate zone contains place zone 
zone contains clique addition case remove edges incident remove zone pair new clique create zone new block containing cliques 
step phase removed edges incident vertex removing edges structure simpler practice may want leave graph provide information 
number edges turns analysis algorithm theorem valid edges removed 

correctness efficiency 
lemma 
invariants algorithm preserved times 
proof 
graph 
edge added got answer pirate corresponding edge endpoints contain traitor 
structure cliques changed steps phase verify clique vertices values updated properly new graph graph new values 
step phase removes edges incident maintains structure graph 
zone constraints 
adding new edge violate zone invariants create big clique reorganize cliques step phase 
steps phase edges added cliques 
reorganizing cliques violate zone constraints 
cliques placed block edges different blocks zones 
similarly clique placed zone edges clique edges different zones blocks 
cliques reorganized new clique created edges connect vertices different zones blocks removed 
order bound number rounds algorithm need bound number split operations performed algorithm 
define split round vertex split round step phase performed 
efficient dynamic traitor tracing lemma 
total number splits log 
proof 
set split increases 
algorithm decreases value set split times 
traitor define xi follows 
traitor xi 
traitor vertex xi log 
xi integer log 
consecutive splits xi increase 
may set zero corresponding vertex added decrease corresponding vertex split remain 
split vertex know contains traitor 
follows occurs traitor xi decreased 
log splits consecutive splits total number splits log 
theorem 
clique algorithm locates traitor log rounds colors 
traitors located log rounds colors 
proof 
lemma algorithm maintains graph lemma implies immediate allocation colors phase algorithm uses colors 
analyze number rounds needed 
round progress set split edge added graph assumed pirate gives answer long active traitors 
show number events log algorithm terminate running time log 
proves algorithm eventually finishes locating traitor 
lemma traitors located worst case log log rounds 
lemma total number splits log 
remains bound number edges added algorithm 
final graph graph graph contain vertices edges 
rounds edges may removed 
show number edges removed algorithm log 
implies log log edges added algorithm theorem follows 
edges removed set split ii cliques merged larger clique 
time event happens edges removed including edges possibly removed step phase 
event happen log times lemma 
number times cliques merged bounded number times number cliques increases happens vertex split 
event ii happen log times 
log edges removed algorithm 
may careful analysis show number splits log improve running time factor possible demonstrate run algorithm log splits occur log rounds needed 


section describe algorithm uses colors runs optimal number log rounds 
start overview algorithm 
clique algorithm loses efficiency high number log splits due fact split vertex may remove edges 
omer berkman michal parnas ji sgall solve problems follows users partitioned areas areas 
area users organized cliques singletons recall vertex called singleton contains exactly user 
allow cliques size clique algorithm 
vertices singletons split operations 
follows total number rounds area 
initially users placed area 
case users moved area area find set users containing traitor 
add area clique singletons 
area divided blocks constant number known traitors 
allows achieve amortized cost rounds split amortized cost log rounds pin traitor set users 
amortized cost log increase number traitors area placing new clique singletons area 
number known traitors increase times resulting number rounds log exactly matching lower bound 
see sketch areas 
grand plan difficulties 
main obstacle clique algorithm blocks area allowed create large cliques nonsingleton vertices may result splits 
additional problem block area colors number traitors known exist block violate bound colors 
sketch briefly solutions area overcome difficulties 
area organized blocks containing known traitors zone 
block goal find set users containing traitor ii split block parts part known traitors part known traitor 
case place users clique singletons area 
case ii number known traitors area increased maintaining invariant blocks constant number known traitors area 
means limited may happen show traitors block able partition parts required ii 
case continue block known contain traitors 
eventually number traitors known exist block raises able achieve required partition basic algorithm section colors 
note know traitors block necessarily know exact location parts block partitioned 
total number traitors known exist particular block may decrease happens clique algorithm 
major problem treat areas area area completely independent processes 
need areas color number traitors known exist area 
add colors desired colors 
solve distinguish total number traitors known exist number traitors known exist areas 
single additional color areas able prove existence additional traitor knowing area belongs 
technically done concept marking vertices algorithm 
know additional traitor exists safely extra color continue algorithm additional color area 
pair cliques pair cliques graph efficient dynamic traitor tracing zone zone zone block block empty contains clique zone traitors traitors block block traitors block area cliques singletons 
area blocks constant number known traitors 
fig 

example data structures graph optimal algorithm 

data structures invariants 
graph 
maintain undirected graph 
vertices subsets user set form partition edge contains traitor 
zones blocks 
vertices graph partitioned zones 
furthermore vertices zones partitioned blocks bi 
edges connecting vertices different zones different blocks 
bi number traitors known exist block bi zi number traitors known exist zone zi 
value sum bi blocks corresponding zone 
zones blocks defined follows area cliques singletons 
zone partitioned blocks bi number vertices bi bi vertices singletons 
vertices block bi partitioned cliques containing vertices number traitors known exist bi bi 
bi contain clique size bi 
zone empty contains clique size vertices singletons 
area blocks constant number known traitors 
zone graph 
number traitors known exist zone 
special vertex contains innocent users denoted users zones may added set algorithm 
omer berkman michal parnas ji sgall zone partitioned blocks bi number traitors known exist bi bi 
see example data structures optimal algorithm 
number traitors 

value updated automatically values bi zi individual blocks zones 
value lower bound number traitors known exist may increase decrease 
safely colors 
define value similar value lower bound number traitors known exist 
decreases increases set 
may larger know exist additional traitors know zone belong 
practical implication algorithm may case colors 
marks 
vertices zones singletons may marked 
invariant marked user traitor total number traitors know case 
additionally clique zones vertices marked 
rule increases marks removed 

description algorithm 
describe algorithm respect block zone separately 
pirate broadcasts color vertices blocks zones advance corresponding algorithm change coloring remaining zones 
describe detail algorithm respect zones 
initial graph zones empty zone 
set 
zone 
run clique algorithm 
need colors number cliques zone paired blocks vertex zone 
vertices singletons step creates new edge locate traitor 
eventually cliques block bi merged clique size bi 
remaining vertex bi belong large clique remove edges incident add zone 
reorganize zones follows zone empty clique placed zone 
pair clique zone new block zone zone empty 
zones 
colors zones colors 
zone run clique algorithm zone know contains traitors 
log rounds constant traitors users clique algorithm run log steps 
clique algorithm runs log steps reaching conclude traitors zone set 
vertices zone placed block zone 
zone empty set 
zone empty separate color vertex zone 
efficient dynamic traitor tracing zone empty algorithm zone uses current round colors colors allocated separate color vertex zone 
modify algorithm zone follows 
suppose algorithm zone round colors coloring subsets xq note 
replace round rounds 
fix unmarked vertex zone 
round color subsets xq zone color color xk color remaining vertices zone distinct colors 
number colors case required 
pirate broadcasts color xj advance algorithm step zone 
pirate eventually broadcasts colors pairs xk 
case mark vertices marked set remove marks 

recall clique zone may moved zone stage may moved back zone part larger clique cliques merged 
may marks vertices zones 
algorithm blocks zone fairly complex 
main building block algorithm 
provide specification algorithm describe algorithm zone 
description analysis algorithm postponed section 
specification algorithm 
input block containing traitors 
step algorithm uses colors number traitors currently known exist block 
times 
algorithm allowed discard users context algorithm users added set zone 
log rounds algorithm finds subset users block contains traitor ii finds disjoint subsets input block containing traitors containing traitor 
zone 
run algorithm blocks zone colors 
algorithm finishes blocks bi cases 
block bi split subsets traitor second traitors subset added zone see step 
second subset remains zone block 
subset users bi contains traitor create new clique size singleton vertices containing users reorganize zones follows 
zone empty place clique zone 
remove single clique zone pair new clique create zone new block containing cliques zone empty 
rest block bi added zone see step 
cases subset block bi known contain traitor added zone 
done follows remove edges incident divide equal vertices connected edge add clique size zone 
restructure cliques zone necessary similar way step phase clique algorithm 
set 
ifz go step zone 
omer berkman michal parnas ji sgall 
correctness efficiency 
lemma 
invariants algorithm preserved assuming holds algorithm 
proof 
graph zone constraints edges different zones blocks 
area zone invariants maintained properties clique algorithm 
zone maintained properties algorithm 
additional invariant 
invariant violated zones restructured appropriately step zone 
times vertices area singletons true new vertices created step zone maintained clique algorithm 
need check invariants violated adding users zone zones 
users added zone edges incident valid corresponding set users bigger 
clique added zone step zone structure zone changed consistently clique algorithm 
zones restructured 
marks 
vertices marked step zones 
vertex marked traitor follows sets xq described contain traitor 
imply traitors required 
step invoked vertex marked consistently invariant 
invariant marked vertices maintained long unchanged soon increases marks removed 
happen vertices clique marked 
happens marking new vertex zone value increased marks removed 
new clique created cliques zone merged 
case new clique contains vertices merged cliques marked 
number traitors 
need check traitors 
value changed cases increases case existence traitors guaranteed invariants individual blocks zones 
second case step zones vertices zone marked 
vertex zone traitor marking invariant traitors increase justified 
vertices zone traitors total traitors 
total number traitors step increase justified 
theorem 
algorithm locates traitor log rounds colors 
traitors located log rounds colors 
proof 
number colors cases colors 
analyze number rounds needed algorithm 
rounds step zones mark vertex advance algorithms clique algorithm step zone may happen algorithms changes case efficient dynamic traitor tracing continue series rounds step zones 
case charge rounds marking vertex 
second case adds steps step algorithms total number rounds may increase factor 
number traitors known exist zones contain singleton vertices 
number blocks zone 
note lower bound number traitors zones blocks zone contribute traitors bi may large 
values times 
values decrease increases times 
value decreases subset users containing traitor block zone 
case increases decreases decreases increases 
follows may increase times 
value increases amortized log rounds block zones counting rounds charged marking vertices zone 
number rounds log 
remaining rounds charged marking vertex creates edge cliques singletons 
unmark vertices remove edges increases cliques merged 
increase times time vertices unmarked 
accounts rounds 
clique singletons split 
get new clique increases happens times 
cliques merged times 
time remove edges marked vertex 
accounts rounds 
marked vertices edges 
accounts rounds 
total number rounds needed locate traitor log 
lemma traitors located worst case log log rounds 

algorithms blocks zone 
algorithm described section receives input block known contain traitors 
goal find subset users containing traitor ii partition block parts traitors single traitor 
achieved log rounds 
plan partition block constant number parts part contains traitor 
halve parts come closer achieving goal prove block contains traitors advance goal ii 
colors number traitors known exist block pirate confuse algorithm fact traitors 
conditional invariant extremely useful achieving aims 
definition 
block partitioned sets users aq property sets ai contains traitor block contains traitors 
words block contains exactly traitors located disjoint sets traitors knowledge location 
block sense algorithm making progress desired direction 
finding unconditional partitioning block parts containing traitor try find partition demonstrates omer berkman michal parnas ji sgall block 
may succeed just learn traitors 
try find block eventually able prove traitors block partition block unconditionally required ii basic algorithm section colors 
main part algorithm halve sets ai block remain block deduce traitors block 
algorithm motivated exponential algorithm fiat 
method follows split sets aq equal parts 
choose part sets ai color chosen parts unique colors 
additional color remaining users consisting parts sets ai receive unique color set 
try combinations choosing parts sets ai 
get answer parts colored unique color achieved required split corresponding set ai 
conclude traitors 
method uses colors colors 
algorithm modified common color chosen parts sets ai 
trying combinations analyzing answers able halve set prove traitors 
constant number combinations rounds needed constant 

description algorithms 
algorithms iv described building blocks algorithm algorithm zone section 
algorithms iv algorithm find subset users contains traitor 
fact event stops current algorithm stops algorithm current block 
mention descriptions algorithms explicitly 
means edge part graph endpoints singleton 
similarly recall algorithm stops locating traitor 
get vertex answer singleton 
algorithms allowed discard users 
context optimal algorithm described section users added set zone 
correctness individual algorithms follows immediately remarks description 
description algorithm argue briefly bound running time 
algorithm 
input constant block 
colors log rounds algorithm proves traitors block 
algorithm stops finding set users containing traitor 
discards users 
algorithm maintain block 
additionally set ai split disjoint sets ai ai equal size exactly cardinalities may differ ai singleton sets may empty 
rounds successive colorings form 
aq color set aj aj aj colors sets ai ai color set 
color union remaining sets including 
pirate broadcasts color nonsingleton set ai efficient dynamic traitor tracing add ai set ai ai split ai ai ai go step 
rounds pirate broadcasts colors possible sets containing block contains traitors done 
may suppose renumbering pirate broadcasts color aq 
means pirate broadcasts color aj aj sets aj aj singletons aj aj aj aj subset cardinality contains traitor done 
singleton set 
sets singletons 
sets aq form clique size contain traitors 
find set aj contain traitor assuming traitors 
set aj add set aj aj go step 
order find set aj distinguish subcases 
examine answer pirate round color set aq color set 
answer assuming traitors contain traitor 
traitor contains traitor follows traitors traitors aq 
answer aq assuming traitors contain traitor 
contain traitor aj contains traitor follows traitors 
rounds algorithm done nonsingleton sets split half added total number rounds log log 
algorithm ii 
input constant block known contain traitors 
colors log rounds algorithm proves traitors block ii finds subset input block consists cliques total vertices vertices contain traitor odd number 
algorithm stops finding set users containing traitor 
run clique algorithm block special set initially contains users 
constant traitors users clique algorithm run log rounds 
clique algorithm finish log steps conclude exist traitors done 
clique algorithm needs colors cliques total vertices odd done 
discard set continue running clique algorithm colors need color vertex supposed added discarded happens vertex clique size split cliques merged 
eventually cliques merged vertex contained clique size split 
case get odd number cliques done ii 
number rounds algorithm log claimed omer berkman michal parnas ji sgall restricted 
algorithm iii 
input block consisting clique vertices 
colors log rounds algorithm finds block subset input block ii finds subsets input block containing traitors containing traitor 
algorithm stops finding set users containing traitor 
nonsingleton vertex remove edges incident split vertices equal size 
block contains clique vertices 
find disjoint containing containing 
colors colors remaining vertices 
pair vertices block connected edge graph 
pirate broadcasts color vertex done ii vertex subset traitor remaining vertices contain traitors 
pirate broadcasts color vertices add edge repeat step 
disjoint step exist cases occurs clique containing discard set ai go back step 
graph vertices containing edges triangle vertex block sets sets remaining vertices 
done 
constant number rounds algorithm goes back step clique vertices halved 
log rounds obtain clique singletons algorithm stops 
algorithm iv 
input block consisting clique vertices 
colors log rounds algorithm finds block subset input block 
algorithm stops finding set users containing traitor 
nonsingleton vertex remove edges incident split vertices equal size 
find disjoint containing containing 
colors color remaining vertex 
pirate broadcasts color nonsingleton vertex cases occurs edge exist unite back split equal parts connected edge 
remaining vertices form clique edges 
set go step 
block sets union remaining vertices 
done 
pirate broadcasts color vertices add edge repeat step 
disjoint step exist cases occurs clique containing 
discard set ai go back step 
efficient dynamic traitor tracing graph vertices containing edges triangle vertex block sets sets remaining vertices 
done 
constant number steps algorithm goes back step clique vertices halved note step may occur 
log rounds obtain clique singletons algorithm stops 
algorithm 
input block containing traitors 
step algorithm uses colors number traitors currently known exist block 
log rounds algorithm finds disjoint subsets input block containing traitors containing traitor 
algorithm stops finding set users containing traitor 
prove block contains traitors finish run algorithm ii 
proves traitors go step 
cliques total vertices 
block sets union clique 
clique run algorithm iv find block 
case get block 
run algorithm prove block contains traitors go step 
prove block contains traitors finish block traitors 
run algorithm ii 
proves traitors go step 
cliques total vertices 
number traitors cliques 
split block clique traitor subset containing remaining cliques traitors done 
clique run algorithm iii 
get subsets traitors done 
block 
run algorithm prove block contains traitors go step 
block traitors 
run algorithm ii 
get cliques split block subsets traitor traitors done 
done follows cliques subset smallest clique rest 
single clique subset union vertices clique subset contains remaining vertices 
get block traitors run algorithm ii 
ifwe get cliques split step 
block traitors 
run basic algorithm described section locating traitors colors needs colors 
happens finds disjoint subsets containing traitor pairs basic algorithm 
split block subsets remaining subsets 
algorithm runs algorithms iv times takes log rounds 
step needs log rounds 
total number rounds log 
omer berkman michal parnas ji sgall 
colors 
section extend results algorithms colors 
number rounds needed locate traitors reduced number colors grows 

colors 
modify optimal algorithm section colors additional colors cliques singletons vertices 
ensures cliques vertices number edges removed round smaller 
additional colors allow marks vertices corresponding part optimal algorithm 
recall marks decrease number colors top 

data structures invariants 
basic structure similar optimal algorithm modifications 
zones blocks 
optimal algorithm 
additionally clique zones required vertices 
optimal algorithm 
new zone partitioned blocks bi bi contains clique singletons size bi bi marks 
marks vertices 

description algorithm 
zone 
optimal algorithm run clique algorithm colors 
new clique vertices produced merging cliques add new block incorporating 
zones vertex gets unique color 
size clique 
increased incorporate clique similarly new clique clique algorithm 
zone 
run clique algorithm optimal algorithm colors modifications due marks 
zone 
optimal algorithm colors 
new clique singletons created add new block incorporating 

correctness efficiency 
lemma 
invariants algorithm preserved times 
proof 
clique added zone produced merging cliques size size required 
bounds size cliques maintained verify fact decreases 
invariants maintained similarly optimal algorithm 
theorem 
algorithm locates traitor log rounds colors traitors located log rounds colors 
proof 
compared optimal algorithm need extra color clique zones 
number cliques cliques belong zone 
follows number colors 
analysis number rounds theorem differences area singletons 
marks charge marking vertices 
second degree efficient dynamic traitor tracing vertex zones 
number edges removed algorithm final number edges bounded 
total number rounds needed locate traitor log theorem follows lemma 

pc colors 
allow tc colors traitors known exist integer 
algorithm immediate extension basic algorithm described section 
stage algorithm keep disjoint sets si known contain traitor 
furthermore set partitioned subsets si equal sizes 
addition set innocent users contains users 
distribute colors follows set si color subsets si colors color subset 
color additional color 
total number colors tc 
pirate broadcasts color create new set st partition equal subsets 
set 
pirate broadcasts color subset si add subsets si set si si partition si new equal subsets 
theorem 
algorithm locates traitor log rounds pc colors 
traitors located log rounds pc colors 
proof 
subset split round algorithm 
split divides subset equal parts subset split log times 
subset may split additional times 
algorithm finishes log rounds 

degree algorithm 
section algorithm different idea 
algorithm uses colors runs time log 
bounds clique algorithm 
knowledge algorithm represented similar graph 
vertices represent disjoint subsets users edge vertices represents fact subset contains traitor 
main idea eliminate vertices large degree 
note degree vertex larger vertex contain traitor neighbors contain traitor resulting traitors 
knew advance know vertex contains traitor algorithm split 
unknown maintain value previous algorithms number traitors known algorithm exist 
vertex large degree appears suspect contains traitor 
notion large degree defined 
note knowledge vertices conditional know vertex contains traitor actual number traitors greater know case 
consequently increased information traitor suspected vertices treat users innocent 
remaining vertices distribute colors color vertex vertices connected edge 
existence coloring implied fact degree vertices small 
round progress adding new edge splitting vertex finding vertex large degree 
omer berkman michal parnas ji sgall 
data structures invariants 
graph 
maintain undirected graph 
vertices subsets user set form partition edge contains traitor 
zones 
vertices graph partitioned zones 
edges adjacent vertices zone 
maintain value number traitors known exist 
zones defined follows zone contains vertices 
invariant actual number traitors exactly vertex contains traitor 
stated degree vertices zone 
zone graph graph vertices containing disjoint cliques size special vertex may edges cliques 
invariant vertices zone degree 
number traitors 

number traitors known exist distinct vertices assuming actual number traitors invariant total number traitors implies algorithm may colors 
rule decreases 
note total number vertices graph 

description algorithm 
describing algorithm give lemma existence large matching show applied find proper coloring algorithm 
matching graph set disjoint edges 
size matching number edges matching 
proof lemma standard appendix lemma 
graph vertices degree 
exists matching size complement graph restricted zone vertices vertices zone distinct vertices connected edge connected edge zone contains vertices degree 
minimum degree graph lemma exists matching size describe algorithm 
initial graph 
zone empty zone contains single vertex set 
repeat phases phase distributing colors vertices find matching size exists lemma discussion 
color edge matching vertices edge 
distinct color remaining vertex including vertices zone 
number colors 
phase reorganizing graph pirate response 
pirate transmitted color single vertex remove edges incident split equal subsets add edge 
place new clique zone 
zone set 
efficient dynamic traitor tracing zone clique remove edges incident set 
zone create new special vertex set 
pirate transmitted color pair vertices necessarily zone add edge tog vertex degree larger move zone remove edges incident set 
create new special vertex 
repeat step vertices degree 
note step value decreases may cause vertices large degree 
add special vertex vertices remain zone belong clique size vertex contain vertices neighbor clique moved zone 
vertex contain old moved zone 
update reflect current number cliques size zone 
previous steps set add vertices belong zone 
zone remains unchanged 

correctness efficiency 
lemma 
invariants algorithm preserved times 
proof 
graph 
edge added got answer pirate corresponding edge 
zone 
consider moment decide place vertex zone 
point zone degree larger 
assume invariant violated contain traitor actual number traitors exactly follows traitors neighbor vertices zone 
zone contains traitors invariant zone 
total number traitors strictly larger contradiction 
conclude invariant maintained vertex placed zone 
long vertex remains zone value change step algorithm 
invariant maintained times 
zone 
vertex clique removed step vertex removed step value updated accordingly 
graph maintained 
vertex zone degree larger round remove step vertices zone 
number traitors 
increased step 
assume contrary traitors increased 
traitors zone invariant traitors zone 
total number traitors contradiction 
conclude traitors increase justified 
traitors times 
note conclude traitors vertex zone known contain traitor actual number traitors exactly untrue increased assume vertices zone contain traitors 
omer berkman michal parnas ji sgall theorem 
degree algorithm locates traitor log rounds colors 
traitors located log rounds colors 
proof 
algorithm uses colors calculation phase algorithm 
estimate number rounds 
value increased times decreases 
sufficient prove value number rounds log 
total number rounds traitor located log 
increase algorithm takes actions vertex split moved zone edges removed edge added note may happen single round 
zone vertices number times vertex moved zone plus number splits 
similarly previous algorithms log splits increases 
consequently number steps type bounded number edges plus number edges removed algorithm 
gives bound log rounds increases 

lower bounds 
prove lower bound number rounds needed algorithm uses colors assuming known advance 
lemma 
colors rounds needed locate traitors known advance 
proof 
ifc bound true rounds needed locate traitors 
pand number users innocent users 
coloring colors users color 
adversary argument 
round pirate transmits color users 
prove pirate continue rounds consistently fact traitors 
maintain graph users vertices initially edges 
round add edge users color answer algorithm colors users color choose decrease number rounds 
pirate continue long independent set size ing 
recall independent set set vertices edges 
case pirate answers consistent traitors vertices independent set 
graph vertices consisting disjoint cliques vertices vertices edges 
turan theorem see complement graph contain independent set size edges number edges cliques nontrivial 
pirate continue rounds 
theorem 
colors log rounds needed locate traitors known advance constant 
proof 
adversary argument proceeds phases 
phase pirate chosen location traitors revealing location traitor 
algorithm knows existence traitors colors 
pirate keeps set candidates efficient dynamic traitor tracing traitor 
phase set contains users traitors 
traitors get unique color pirate broadcasts color 
colored colors 
pirate broadcasts color users removes users size pirate fixes user traitor new phase begins 
traitor located phase assume loss generality 
number rounds phase log 

number rounds phase log total number rounds log log 
lemma proves theorem 

open problems 
conclude open problems 
nice close small gap log lower upper bound case colors known advance 
achieve asymptotically optimal number rounds optimal algorithm described section 
complex hidden constants large 
practical viewpoint desired find simpler optimal algorithm case possibly better constants 
may interesting investigate randomized algorithms 
question proper model case 
deterministic case pirate able simulate algorithm 
example pirate deduce completely distribution colors 
randomized case realistic assume game needs specified precisely 
appendix proof lemma 
lemma 
graph vertices degree 
exists matching size proof 
proof induction 
matching size show find matching size 
starting repeating process find matching size unmatched vertices degree 
neighbor unmatched extend matching trivially 
xd distinct neighbors yd respective neighbors matching cardinality vertices yj may equal xi case vertices yj distinct 
vertices matching size vertices distinct vertices yj 
neighbors matched degree follows connected yj replace edge xj yj matching edges xj yj 
acknowledgments 
debt amos fiat aria lev tal rabin useful discussions comments 
especially anonymous referees suggestions comments helped improve presentation 
blakley meadows fingerprinting long forgiving messages proceedings advances cryptology crypto lecture notes comput 
sci 
springer verlag newyork pp 

omer berkman michal parnas ji sgall boneh shaw collusion secure fingerprinting digital data ieee trans 
inform 
theory pp 

chor fiat naor tracing traitors proceedings advances cryptology crypto lecture notes comput 
sci 
springer verlag newyork pp 

cox kilian leighton secure robust watermark multimedia information hiding lecture notes comput 
sci 
springer verlag new york pp 

dwork naor digital self enforcing protection digital information proceedings th symposium theory computing pp 

fiat naor broadcast encryption proceedings advances cryptology crypto lecture notes comput 
sci 
springer verlag newyork pp 

fiat dynamic traitor tracing proceedings advances cryptology crypto lecture notes comput 
sci 
springer verlag newyork pp 

naor pinkas threshold traitor tracing proceedings advances cryptology crypto lecture notes comput 
sci 
springer verlag new york pp 

pfitzmann trials traced traitors information hiding lecture notes comput 
sci 
springer verlag newyork pp 

stinson wei combinatorial properties constructions traceability schemes codes siam discrete math pp 

schwenk tracing traitors finite geometries technical report deutsche telekom ag 
tur extremal problem graph theory math 

pp 

wagner fingerprinting proceedings ieee symposium security privacy ieee computer society press los alamitos ca pp 

