xml goes native run time representations xtatic vladimir michael levin benjamin pierce alan schmitt university pennsylvania 
xtatic lightweight extension offering native support statically typed xml processing 
xml trees built values xtatic static analysis trees manipulated programs part ordinary job typechecker 
tree grep pattern matching investigate transform xml trees 
xtatic surface syntax type system tightly integrated beneath hood implementation xtatic address number issues common language supporting declarative style xml processing xquery xslt xduce xact xen 
particular provide representations xml tags trees textual data memory efficiently support efficient pattern matching allow maximal sharing common substructures permit separate compilation 
analyze representation choices detail describe solutions xtatic compiler 
xtatic inherits key features xduce domain specific language statically typed xml processing :10.1.1.12.9903
features include xml trees builtin values type system regular types closely related popular schema languages dtd xml schema static typechecking computations involving xml powerful form pattern matching called regular patterns 
goals xtatic project bring technologies wide audience integrating mainstream object oriented language demonstrate implementation performance 
host language results applicable java setting 
source level integration xml trees object oriented data model accomplished steps 
subtype hierarchy tree types xduce grafted class hierarchy making regular types subtypes special class seq 
allows xml trees passed generic library facilities collection classes stored fields objects conversely roles tree labels types xduce played objects classes xtatic xml trees represented objects special tag class labels 
subtyping xtatic subsumes object oriented subclass relation richer subtype relation regular types 
xduce simple semantic definition subtyping sans inference rules extends naturally xtatic object labeled trees classes 
combined data model type system dubbed regular object types formalized 
algorithms checking subtyping inferring types variables bound patterns adapted straightforwardly xduce 
xtatic tree construction pattern matching primitives eschew forms destructive update language promotes declarative style tree processing values subtrees extracted existing trees construct entirely new trees 
style attractive points view easy reason need worry aliasing integrates smoothly language features threads allows rich forms subtyping unsound presence update 
highlevel xml processing languages including xslt xquery xact choice similar reasons :10.1.1.60.8264
declarative style significant demands implementation involves great deal replicated substructure shared achieve acceptable efficiency 
implementation source source compiler xtatic major function compiler translate high level pattern matching statements xtatic low level code efficient compact 
previous addressed issue introducing formalism matching automata define backtracking compilation algorithms regular patterns 
addresses lower level issue compile xml values value constructing primitives appropriate run time representations 
explore alternative representation choices analyze respect support efficient pattern matching common xtatic programming idioms safe integration foreign xml representations standard document object model dom 
contributions may summarized follows data structure sequences xml trees supports efficient repeated concatenation ends sequence equipped fast algorithm calculating subsequences bound pattern variables compact efficient hybrid representation textual data pcdata supports regular pattern matching character sequences statically typed form string grep type tagging scheme allowing fast dynamic revalidation xml values static types lost object storage generic collection proxy scheme allowing foreign xml representations dom manipulated xtatic programs translating representation 
space constraints details extended version 
implemented designs measured performance natural variants implementations xml processing languages 
results show declarative statically typed embedding xml transformation operations stock object oriented language competitive existing mainstream xml processing frameworks 
section briefly reviews xtatic language design 
heart section describes evaluates representations trees 
section summarizes results benchmarking programs compiled xtatic xml processing tools 
section discusses related 
language overview section sketches just aspects xtatic design directly impact runtime representation issues 
details 
consider document fragment sequence entries address book side side xml xtatic concrete syntax 
person name haruo hosoya name email email person person name jerome vouillon name tel tel person person name haruo hosoya name email email person person name jerome vouillon name tel tel person xtatic syntax document close xml differences outer double brackets segregate world xml values types regular syntax distinguish pcdata xml textual data arbitrary xtatic expressions yielding xml elements 
possible type value list persons containing name optional phone number list emails person name pcdata tel pcdata 
email pcdata person type constructor marks optional components marks repeated sub sequences 
xtatic includes type constructor non disjoint unions types 
shorthand closing bracket matching arbitrarily named opening bracket 
regular type xtatic denotes set sequences 
concatenation sequences sequence types written simple juxtaposition readability comma 
constructors bind stronger stronger 
type pcdata describes sequences characters 
types names may mentioned types 
address book type apers presence definitions name name pcdata tel tel pcdata email email pcdata person name tel apers person name tel 
email regular pattern just regular type decorated variable binders 
value matched pattern binding variables occurring corresponding parts belongs language denoted regular type obtained stripping variable binders 
matching multiple patterns xtatic provides match construct similar switch statement match expression functional languages ml 
example program extracts sequence type sequence type apers removing persons phone number eliding emails 
static addrbook apers ps res bool cont true cont match ps case person name tel rest res res person ps rest case person person rest ps rest case cont false return res integration xml sequences objects accomplished steps 
xtatic introduces special class named seq supertype xml type xml value may regarded object class 
regular type equivalent class type seq 
second xtatic allows object just xml tag label element 
instance write singleton sequence labeled integer parentheses distinguish xtatic expression xml tag similarly recursively define type object 
close overview describing xtatic views textual data 
formally type pcdata defined associating character singleton class subclass char pcdata abbreviation char 
concrete syntax write foo sequence type corresponding sequence value 
treatment character data advantages 
need introduce special concatenation operator pcdata sequence ab cd identical abcd 
seen type level pcdata pcdata char char char pcdata equating pcdata string allow seamless integration string concatenation operator sequence operator 
second singleton character classes pattern matching obtain functionality similar string regular expressions 
instance xtatic type pcdata corresponds regular expression representing trees turn design efficient representations xml trees 
design tree representation supports xtatic view trees shared object label seq seq contents seq kind kind int label seq seq contents char label seq seq contents fig 

classes representing sequences 
seq fst seq snd immutable structures section 
main constraint design programming style favored xtatic involves great deal appending consing sequences 
avoid re copying sub sequences enhance naive design appending lazily section 
xtatic needs inter operate xml representations available net particular dom 
full version show dom structures masquerade instances xtatic trees type safe manner 
simple sequences xtatic value regular type sequence trees 
xtatic patternmatching algorithms tree automata require access label tree sequence children sibling 
access style naturally supported simple singly linked structure 
summarizes classes implementing sequences 
seq superclass representing sequences regardless form 
exact class seq object needed xtatic generated code stored enumeration value field kind seq object 
maintaining field allows switch statement chain statements relying operator test class membership 
subclass includes fields contents point rest sequence right sibling child node 
field label holds object 
empty sequences represented single statically allocated object class 
null require extra test switching kind sequence effect optimizing empty sequence case common non empty case 
principle classes encode xtatic trees 
avoid dealing labels containing primitive values critically characters include specialized classes storing values base types 
xml data encoded contain label field instances special class tag represent xml tags 
tag object string field tag local name field namespace uri 
ensure single run time object known tag making tag matching simple matter physical object comparison 
seq lazy norm seq node switch node kind case append return norm rec node fst node snd default return node seq norm rec seq node seq acc switch node kind case append return norm rec node fst new node snd acc case object switch node kind case empty return new node label node contents acc default return new node label node contents new node acc similar cases 
fig 

lazy normalization algorithm 
pattern matching labels implemented follows 
object value label matches label pattern pattern class object belongs subclass pattern tag object physically equal tag pattern base value label holds value equal lazy sequences programming style encouraged xtatic sequence concatenation pervasive operation 
unfortunately run time representation outlined far renders concatenation linear size sequence leading unacceptable performance elements repeatedly appended sequence assignment res addrbook example section 
observation naturally suggests lazy approach concatenation introduce new kind sequence node contains fields fst snd 
concatenation non empty sequences seq seq compiled constant time creation node fst pointing seq snd seq 
preserve invariant field node points empty sequence 
support pattern matching need normalization operation exposes element sequence 
simplest approach eager normalization just transforms sequence contain top level nodes children nodes sequence normalized 
cases necessary normalize sequence program inspects elements long list 
introduce lazy normalization algorithm pseudocode form 
algorithm fetches concrete element leftmost non node tree copies contexts possibly share affected element new sequence consisting seq seq seq seq fig 

lazy normalization lazy sequences 
leftmost concrete element right sibling 
dotted pointers created normalization 
copies traversed nodes arranged equivalent tree 
illustrates algorithm normalizing sequence starting node equivalent sequence starting node parts sequence values shared uncommon process normalize sequence times 
described far normalization algorithm returns new sequence leaves original lazy sequence unchanged 
avoid redoing subsequent normalizations sequence modify place root node setting snd field null indicating normalized fst field result normalization seq lazy norm place seq node switch node kind case append node snd null return node fst node fst norm rec node fst node snd node snd null return node fst default return node interestingly place modification required correctness binding non tail variables patterns 
pattern matching algorithm naturally supports pattern variables bind tails sequence values variables binding non tail sequences handled trick 
binding non tail variable accomplished stages 
stage performs pattern matching traverses input sequence sets auxiliary variables xb xe subsequence 
second stage computes xb xe traversing sequence xb copying nodes reaches xe 
stages program traverses sequence performing normalization way 
place modification guarantees traversals encounter physically concrete nodes second stage justified detecting subsequence checking physical equality current node xe 
seq creation fresh nodes lazy normalization algorithm allocate memory eager counterpart 
show results constant factor overhead 
node said left node pointed fst pointer 
cases algorithm creates new node traverses left node reaches leftmost concrete element 
cases newly created nodes left nodes lead creation nodes subsequent normalizations 
lazy normalization allocates twice memory eager normalization 
measurements quantifying consequences overhead running time 
table shows running times variants phone book application section executed address book entries 
experimental setup described section 
variant constructs result section appending 
second variant constructs result appending front res person res variant favors non lazy tree representation previous subsection serves baseline lazy optimizations 
implementation recognizes prepending singleton sequences special case lazy structures created second program executed consequently concatenation approaches behave 
back appending program system runs memory eager concatenation lazy concatenation approaches perform reasonably 
performance lazy representations back appending program performance non lazy representation front appending program favors representation 
eager concatenations eager normalization lazy normalization back appending ms ms front appending ms ms ms comparison show difference lazy eager normalization approaches 
compared performance eager vs lazy normalization benchmarks discussed section 
performance close slight advantage depending workload 
hand programs explore part sequence lazy normalization arbitrarily faster making clear winner 
experience suggests common usage patterns representation exhibits constant amortized time operations 
possible come scenarios repeatedly accessing element sequence may take linear time access 
consider program fragment res res true res res res res match res case tag 
pattern matching expression extracts element res top level object sequence stored res modified place normalization 
object sequence stored res modified place consequently completely renormalized iteration loop 
kaplan tarjan okasaki describe catenable provide functionality required xtatic pattern matching algorithms operations run constant amortized time presence sharing 
implemented algorithms compared performance representation lazy normalization algorithm 
steque implementation slightly compact average requires times memory representation 
tricky example catenable fast xtatic represen tation fails sufficiently large sequences 
xtatic ms ms ms ms ms ms ms ms common patterns operations representation efficient 
table shows running times program builds sequence back appending element time fully traverses constructed sequence 
ran experiment sequences different sizes 
implementation catenable significantly slower simpler representation overhead arising complexity steque data structures 
measurements section describes performance measurements comparing xtatic xml processing systems 
goal gathering numbers verify current implementation gives reasonable performance range tasks datasets draw detailed relative speeds different systems 
differences implementation platforms languages xml processing styles task impossible 
tests executed ghz pentium mb ram running windows xp 
xtatic dom experiments executed microsoft net version 
interpreter cvs version november th compiled natively 
open xalan executed sun java version 
concerned run time data structures measurements include static costs typechecking compilation 
current implementation xtatic xml parser inefficient reveal information performance data model factor parsing loading input xml documents analysis 
measurement obtained running program parameters times averaging results 
selected sufficiently large input documents ensure low variance time measurements overhead just time compilation negligible 
xtatic programs compiled lazy append lazy normalization policy described section 
start comparing xtatic open implementation xquery 
test small query named shake counts number distinct words complete shakespeare plays represented collection xml documents combined size mb 
core shake implemen tation xquery call function tokenize splits chunk character data collection white space separated words 
xtatic implemented generic pattern matching shake xtatic ms open ms statement extracts leading word white space processes proceeds handle remainder pcdata 
time remainder boxed object immediately unboxed iteration loop 
believe superfluous manipulation main reason xtatic twice slower open example 
implemented xquery examples xmark suite ran mb data file generated xmark factor :10.1.1.19.9644
xtatic substantially outperforms open benchmarks times times times times 
huge discrepancy appears consequence factors 
firstly open commercial counterpart indexing examples dramatic performance improvement 
secondly translating high level xquery programs low level xtatic programs effect performing manual query optimization 
comparison systems problematic result provide insight underlying representations 
compare xtatic xslt implementations net xslt xalan 
part standard library xslt compiler generates java class file xslt template 
implemented transformations benchmark suite 
backwards program traverses input document reverses element sequence identity copies input document searches database person records particular entry reads pcdata fragment splits words outputs new pcdata fragment words reversed 
programs run mb xml document containing top level elements program executed small text fragment 
backwards identity xtatic ms ms ms ms net xslt ms ms ms ms xalan ms ms ms ms xtatic exhibits equivalent speed backwards identity cost reversing approximately equal cost copying sequence presence lazy concatenation 
corresponding xslt programs behave differently backwards implemented copying sorting sequence position elements 
xslt implementations relatively efficient identity 
may partially due fact compact read representation xml documents 
xtatic substantially slower xalan pcdata intensive example 
believe reason case shake comparison open overhead pcdata implementation performing text traversal 
conversely xtatic faster 
open explained difference level programming detail single xpath line program corresponds low level xtatic program specifies search input document efficiently 
pair experiments compare xtatic programs addrbook split :10.1.1.60.8264
introduced section ver split addrbook xtatic ms ms ms ms sion coded xtatic version higher level transform primitive run mb data file containing apers elements 
second program traverses mb xml document containing information people sorts children person gender 
difficult compare programs executed different run time frameworks written different source languages say rough approximation xtatic exhibit comparable performance 
important advantage memory efficient representation sequences 
compensated fact xtatic programs just time compiled programs interpreted 
experiment compares xtatic xact 
programs part xact distribution recipe processes database recipes outputs html presentation version address book program introduced section sorts output entries 
ran recipe file containing recipes entry address book problems installing xact windows experiments com xact executed recipe xtatic ms ms xact ms ms ghz pentium iii mb ram running linux 
programs xtatic substantially faster 
xquery comparison precise mismatch xml processing mechanisms xtatic xact 
particular large discrepancy case recipe partly attributed fact style processing document traversed completely rebuilt different form foreign relatively high level xml manipulation primitives xact quite natural relatively low level constructs xtatic 
experiment compares xtatic program dom net xpath library addrbook example mb input file 
program employs addrbook xtatic ms dom xpath ms xpath extract apers elements tel children destructively removes email children returns obtained result 
experiment confirms dom suited kind functional manipulation sequences prevalent xtatic 
dom data model geared destructive modification random access traversal elements result heavyweight 
related concentrated runtime representation issues addressed building implementation xtatic efficient tightly integrated aspects xtatic design implementation described companion papers surveying significant issues faced design language presenting core language design integrating object tree data models establishing basic soundness results third proposing technique compiling regular patterns matching automata 
considerable current research development activity aimed providing convenient support xml processing general purpose domain specific languages 
category xquery xslt special purpose xml processing languages specified strong industrial support including variety implementations wide user base 
language benzaken castagna frisch generalizes xduce type system intersection function types :10.1.1.60.8264
xen language meijer schulte bierman proposal significantly modify core design order integrate support objects relations xml particular xml simply syntax serialized object instances :10.1.1.125.1374
xact extends java xml processing proposing elegant programming idiom creation xml values done xml templates immutable class structures representing xml named gaps may filled obtain ordinary xml trees 
xj extension java native xml processing uses schema type system xpath navigation language xml 
source source compiler extension java language design point view similar xtatic 
scala developing general purpose web services language compiles java bytecode currently extended xml support 
far projects concentrated developing basic language designs little published serious implementations 
xquery xslt unable find detailed descriptions run time representations 
summarize available information 
considerable effort briefly sketched put making ocaml interpreter efficient :10.1.1.60.8264
address similar issues text tree representations similar solutions 
user visible datatype strings character list implement optimized alternatives described resembles 
uses lazy list concatenation apparently eager normalization 
difference object oriented flavor representations 
xact implementation developed independently parallel xtatic driven similar needs supporting efficient sharing targeting similar object oriented runtime environment strong similarities particular lazy data structures support efficient gap plugging 
preliminary performance measurements may viewed validating representation choices implementations 
xtatic special treatment pcdata appear xact 
current implementations xj dom designs amenable alternative back ends 
kay describes implementation version xslt processor saxon 
processor implemented java approach rely pre existing java dom library xml data representation dom heavyweight task hand carries information unnecessary xpath xslt entity nodes supports updates 
saxon comes variants run time structures 
object oriented similar spirit 
represents tree information arrays integers creating node objects demand destroying 
model reportedly memory efficient quicker build cost slightly slower tree navigation 
appears perform better provided default saxon 
broader context functional language implementations efficient support list string concatenation long recognized important issue 
early morris schmidt wadler describes technique similar eager normalization string processing language 
sleep propose modification lazy evaluator corresponds lazy normalization 
keller suggests lazy representation normalization behaves similarly database trees balancing 
aware prior studies comparing lazy eager alternatives done 
algorithmic problem efficient representation lists concatenation studied detail kaplan tarjan okasaki 
describe catenable support constant amortized time sequence operations 
opted simpler representations described concern excessive constant factors running time arising complexity data structures see section line started hughes continued wadler considers certain uses list concatenation similar operations applicative program eliminated systematic program transformation resulting improved asymptotic running times 
particular techniques capture known transformation quadratic linear version reverse function 
clear techniques applicable outside pure functional language setting transform recursive function uses append function uses list construction setting problematic uses append occur inside imperative loops 
prolog difference lists logic programming solution constant time list concatenation 
technique requires transforming programs operating regular lists programs operating difference lists 
possible 
marriott introduce dataflow analysis determines transformation achievable define automatic transformation algorithm 
leave detailed comparison lazy concatenation approach difference list approach 
parts xtatic compiler implemented stephen tse 
conversations contributed ideas xtatic 
haruo hosoya alain frisch christian xavier franc discussing various aspects 
xtatic supported national science foundation career ccr itr ccr gifts microsoft 

hosoya pierce xduce statically typed xml processing language 
acm transactions internet technology 
hosoya vouillon pierce regular expression types xml 
proceedings international conference functional programming icfp 

pierce regular object types 
european conference object oriented programming ecoop darmstadt germany 
preliminary version fool 

hosoya pierce regular expression pattern matching 
acm sigplan sigact symposium principles programming languages popl london england 
full version journal functional programming nov pp 


xsl transformations xslt www org tr xslt 

xquery xml query language working draft www 
org tr xquery 

benzaken castagna frisch xml centric general purpose language 
acm sigplan international conference functional programming icfp uppsala sweden 

christensen ller runtime system xml transformations java 
ne milo michael eds database xml technologies international xml database symposium 
volume lecture notes computer science springer 
levin compiling regular patterns 
acm sigplan international conference functional programming icfp uppsala sweden 

levin pierce schmitt xml goes native runtime representations xtatic 
technical report ms cis university pennsylvania 
levin pierce schmitt xtatic experience 
technical report ms cis university pennsylvania 
yonezawa regular expression types strings text processing language 
den bussche vianu eds proceedings workshop types programming tip 

kaplan okasaki tarjan simple persistent catenable lists 
siam journal computing 
franc 
www net 
schmidt waas kersten carey manolescu busse xmark benchmark xml data management 
proceedings international conference large data bases vldb hong kong china see www xml benchmark org 

technology 
www com xml community html 
ller schwartzbach static analysis xml transformations java 
ieee transactions software engineering 
meijer schulte bierman programming circles triangles rectangles 
xml conference exposition 

harren shmueli burke sarkar xj integration xml processing java 
technical report rc ibm research 
xml objects 
workshop programming language technologies xml plan 

emir extending pattern matching regular tree expressions xml processing scala 
diploma thesis epfl lausanne lamp epfl ch 
kay saxon anatomy xslt processor www ibm 
com developerworks library xslt 

morris schmidt wadler experience applicative string processing language 
acm symposium principles programming languages popl las vegas nevada 

sleep short note concerning lazy reduction rules append 
software practice experience 
keller divide data structuring applicative multiprocessing systems 
proceedings acm conference lisp functional programming 

hughes novel representation lists application function reverse 
information processing letters 
wadler concatenate vanishes 
note university glasgow revised 

nder concatenate reverse map vanish free 
acm sig plan international conference functional programming icfp pittsburgh pennsylvania 

sterling shapiro art prolog 
mit press 
marriott difference list transformation prolog 
new generation computing 
