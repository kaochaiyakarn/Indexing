coverage analysis java benchmark suites stephen brown ine mitchell james power department computer science national university ireland ireland 
iasted international conference software engineering innsbruck austria february note slightly extended version appears iasted international conference software engineering 
accepted iasted international conference software engineering innsbruck austria february 
coverage analysis java benchmark suites java programming language provides ideal environment static dynamic analysis easy parse supporting standardised easily profiled virtual environment 
study relationship results obtainable static dynamic analysis java programs particular difficulties correlating static dynamic results 
foundation study focus various criteria related run time code coverage commonly test suite analysis 
implemented dynamic coverage analysis tool java programs evaluate standard java benchmark suites line instruction branch coverage criteria 
data indicating considerable variance static dynamic analysis results suites programs suites 
key words benchmarking software testing dynamic analysis 
motivation provide foundation study relationship results obtainable static dynamic analysis java programs 
motivated observations 
java programming language associated virtual machine provides fertile environment static dynamic analysis object oriented programs 

significant body research exists analysis manipulation java code number papers refer static dynamic analysis 
fundamental relating static dynamic analysis knowledge degree analysed source code corresponds code executed little existing research compares results obtained static dynamic analyses 
seek address apparent gap literature research examining java programs contact author james power cs may stephen brown ine mitchell james power department computer science national university ireland ireland 
static dynamic perspective coverage criteria provide framework comparison 
posit poor coverage results may hinder comparison static dynamic analyses case measured recorded factor comparison 
remainder structured follows 
section discusses background seeks connect static analysis metrics dynamic coverage analysis 
sections connection evaluate common benchmark suites java 
section summarises results concludes 
background related significant amount research analysis manipulation java programs sought combine static dynamic data manipulate dynamic behaviour java programs static code transformations 
examples year include conflict analysis super instruction selection static dynamic slicing course program optimisation 
sable group sought record results running various programs different benchmark suites 
measurements record program size polymorphism memory usage interest java performance community 
title dynamic metrics draw parallel corresponding field static software metrics 
research performs static dynamic analysis java code concentrates particular aspect program behaviour 
suggest comparison viewed context perspective relationship static dynamic data 
analyses series java programs basic measurements lines code cyclomatic complexity instruction coverage branch coverage 
measurements summarised 
quantify static aspects program basic metrics available 
lines code loc metric frequently general guide size program 
just frequently criticised subject arbitrary variations depending language source code layout despite accepted iasted international conference software engineering innsbruck austria february 
static dynamic lines code line instruction loc coverage mccabe cyclomatic branch edge complexity coverage 
basic static metrics dynamic equivalents 
limitations universal step program measurement 
mccabe cyclomatic complexity program quantifies number decisions source code rough guide gauge effort required testing maintenance 
complex specific metrics exist 
purpose choosing basic measures commonly accepted usually deemed biased particular area application 
identify dynamic counterparts metrics drawn domain software testing 
discussed subsection 
role coverage criteria dynamic coverage measures typically field software testing estimate effectiveness test suite 
basis software testing software functionality characterised execution behaviour 
clearly improved test coverage leads improved fault coverage improved software reliability 
perspective higher execution coverage program benchmark suite measured test coverage means execution program provides better characterisation program behaviour 
number established analyses determining test coverage program control flow viewpoint 
include statement coverage decision coverage condition coverage decision condition coverage multiple condition coverage modified condition decision coverage mc dc 
case static software metrics subtle differences definition coverage measures 
seeks measure typically percentage degree certain aspect program source code exercised run time 
fundamental form coverage statement coverage achieved source language statement program executed 
measured run time instrumenting basic block vertex control flow graph 
relates directly size program low statement coverage implies large sections program exercised dynamic analysis 
coverage analyses decision coverage condition coverage multiple decision coverage deci sion condition coverage measured instrumenting branch source code corresponding tracing edges control flow graph 
important differentiate different branches destination order measure full edge coverage predicate graphs 
measurement different profiling tracing defined sequencing count edge executions relevant measuring control test coverage just boolean flag indicating execution edge sufficient 
programming languages attempts compare run time behaviour static data complicated difference compiled code original source code 
java source code compiled bytecode retains features original code 
particular simplicity bytecode means unambiguously identify quantities measured 
bytecode level measures may result necessity case original java source code available analysis 
remainder focus static manipulation static dynamic analysis java programs bytecode level 
particular bytecode instruction unit measurement loc line coverage 
similarly equate conditional jump instruction predicates decision points program basis calculating cyclomatic complexity run time decision coverage 
working bytecode level considerably facilitates identification edges control flow graph 
avoid confusion numerous methods calculating decision coverage mentioned call edge coverage 
run time edge coverage bytecode level lies condition decision coverage modified condition decision coverage source code level 
evaluation multiple conditions boolean expressions limits number possible edges object level short circuit operator extensions mc dc 
impossible branches due coupled conditions easily identified bytecode level 
form coverage discussed object code coverage 
deciding percentage constitutes acceptable level coverage necessarily empirical task estimates tend highest quartile 
deem sufficient statement coverage regarded generally insufficient 
note branch coverage produces acceptable results grady considers branch coverage appropriate ensuring characterisation 
devanbu suggest range branch coverage high likelihood exposing software faults 
obvious estimates objective quantitative data independent 
accepted iasted international conference software engineering innsbruck austria february 

count 
read 
ready 

return error 
count 
count 
read 
avg count 
return avg accepted iasted international conference software engineering innsbruck austria february 
entry exit indicates probe position 
piece java code corresponding control flow graph indicating location edge coverage probes 
implementation details previously noted java runtime system provides ideal environment dynamic analysis 
typically analysis conducted main levels granularity 
instrumenting jvm open source implementations jvm available kaffe jalape sable vm access source code means aspects running java program observed 

java virtual machine debug interface version java sdk support debugging interface provides event notification low level jvm operations 
trace program handles events record information execution java program 

instrumenting bytecode involves statically manipulating bytecode insert probes tracing mechanisms record information runtime 
approach involving bytecode manipulation provides simplest method dynamic analysis require low level knowledge jvm internals imposes little overhead running program 
follows run programs number benchmark suites collected line instruction edge coverage data 
data collected instrumenting programs bytecode level inserting probes collect relevant events 
basic framework byte code engineering library residual test coverage tool perform line instruction coverage 
tool statically determines basic blocks java class file inserts probe consisting small sequence bytecode instructions basic block 
basic block executed probe code records hit simple boolean value 
number bytecode instructions basic block calculate instruction coverage 
furthermore class file contains line number table mapping bytecode instructions line numbers original java program line coverage deduced data 
note line coverage corresponds lines code java source program may correspond statement coverage 
implementing edge coverage written complimentary tool manipulates bytecode inserting probes calculate edge coverage 
conditional jump bytecode associated probe pair recording true false evaluations conditional 
probe record false edge simply inserted immediately jump instruction probe record true edge inserted target jump instruction 
probe jump target preceded goto instruction ensure executed circumstances source statement 
note unconditional jumps instrumented correspond predicate source code 
note approach correspond exactly counting conditions original java code 
particular short circuit boolean operators cause early exit evaluation represented conditional jump bytecode 
boolean expression form count possibilities original java code counts possibilities calculation 
implementation edge coverage deals loops implemented conditional jumps bytecode 
loop register possibilities depending executed zero times loop times loop 
calculations affected intensive bytecode optimisations conditional code moved merged 
java compilers carry little optimisation default 
illustrate functionality edge coverage tool shows example java code adapted example rothermel harrold 
probes inserted record outcomes predicates running program produce edge coverage fraction 
example highlights difference granularity statement edge coverage 
example simplest paths program path entry exit path entry exit paths correspond line coverage counting predicates edge coverage distinguish cases yielding path path 
mccabe cyclomatic complexity program defined number decisions occurring statically program code plus 
probe pair insert associated single decision point number probe pairs occurring statically code provides measure cyclomatic complexity 
specifically program mccabe cyclomatic complexity value edge count number probes recorded corresponds record possible outcomes decision 
coverage results section examine benchmark suites java programs detail instruction branch counts associated coverage data 
instruction counts reported correspond size value sable group dynamic metrics coverage percentage corresponds size value expressed percentage size value 
despite fact edge coverage regarded fundamental coverage criteria aware date applied java benchmark suites 
experimental environment section report results variety java programs taken number popular benchmark suites 
version spec jvm benchmark suite version suite section version java grande benchmark suite 
appears just version suite dated march 
programs spec suites compiled javac compiler sun sdk version benchmarks run client virtual machine sdk 
programs spec suites distributed class file format recompiled modified 
note accordance licence spec programs run individually results comparable standard spec jvm metric 
benchmark suites include just programs test harness ensure results different executions comparable 
cases bytecode corresponding benchmark programs instrumented results include bytecode instructions executed java class library 
excluding class libraries may appropriate analysis clearly sensible approach coverage perspective 
results application programs instruction edge coverage results programs spec jvm benchmark suite table 
program show instruction count corresponding number bytecode instructions occurring statically class file edge count twice number conditional jumps occurring statically bytecode 
give line number coverage details spec suite line number tables available programs may unreliable 
note programs suites instruction coverage approximate line coverage fairly 
columns labelled correspond instruction edge coverage percentages spec programs run sizes 
size standard reportable size benchmarks sizes represent size 
see table spec programs complete instruction coverage programs jess db javac particularly low coverage 
consequence accepted iasted international conference software engineering innsbruck austria february 
spec instr instr coverage edge edge coverage program count size size size count size size size compress jess raytrace db javac mpegaudio jack table 
instruction edge coverage percentages spec jvm benchmark suite run sizes 
grande line line coverage instr instr coverage edge edge coverage program count size size count size size count size size euler raytracer search table 
line instruction edge coverage percentages section java grande benchmark suite run sizes instr instr edge edge program count coverage count coverage dialog float graphics image logic loop method sieve string table 
instruction edge coverage percentages benchmark suite run individually standard size 
line line instr instr edge edge program count coverage count coverage count coverage bh em health mst perimeter power tsp voronoi table 
line instruction edge coverage percentages benchmark suite run default parameters 
accepted iasted international conference software engineering innsbruck austria february 
low instruction coverage difficult correlate results static dynamic analyses high proportion static code involved execution 
results edge coverage table somewhat poorer line coverage program raytrace making high 
grady criteria mentioned section programs offer satisfactory coverage testing standpoint 
notable feature spec jvm coverage data table relatively small difference different run sizes 
programs javac virtually difference coverage run sizes suggesting analyses overhead running benchmarks size avoided 
program instruction coverage decreases larger input size falling move size size 
change case due help method containing instructions called sizes size 
table gives line instruction edge coverage applications section java grande sequential benchmark suite 
grande programs distributed source code format line numbers available note case line coverage corresponds closely instruction coverage 
line instruction coverage java grande programs little better spec programs program 
spec suite smaller versions size inputs little relative difference coverage results programs 
results smaller programs programs spec jvm java grande section suites intended model real world applications consist full fledged programs 
number benchmark suites designed model specific aspects java programs specific types operations 
subsection analyse benchmark suites set micro benchmarks java suite programs intended model programs 
table presents instruction edge coverage programs suite 
programs distributed class files include line numbers 
seen table programs markedly different coverage profile spec java grande suites instruction coverage programs 
edge coverage lower instruction coverage programs 
clearly simple single task design programs contributes higher coverage results 
table presents line instruction edge coverage data programs benchmark suite 
results appear better spec java grande suites programs having line coverage 
note coverage results programs suite programs 
attributed increased complexity measured terms edge count 
relationship cyclomatic complexity defined note cyclomatic complexity programs ranges bh programs cyclomatic complexity 
going standard suites standard benchmark suites researchers mixtures subsets suites occasionally augment suites programs better reflect problems encountered 
example approach uses programs spec suite augments number graphically programs choosing 
stress seek works addressing programs different perspective original authors 
addition standard benchmark programs difficult reproduce exact environment experiment 
results report remainder subsection considered indicative directly correlated results reported 
particular versions software typically cited 
table list programs papers assessed line instruction edge coverage criteria 
columns description gleaned remaining column lists version information programs trial 
programs fully fledged applications demo programs standard java sdk distribution 
table shows coverage results running programs conditions 
notable coverage results programs relatively poor edge coverage particular falling considerably benchmark suites 
expected demo programs java exercised fully 
poor coverage applications accounted minimal tasks performed ice application exercised classes exercised classes 
non classes excluded instruction usage increases increases accepted iasted international conference software engineering innsbruck austria february 
program description version ice browser simple internet browser 
run application open web page version java graphics library 
run demo program application options runs delay java sdk version java version xfig drawing program 
run application open document version gui component 
run demo program application bring initial window java sdk version line line instr instr edge edge program count 
count 
count 
ice java table 
programs running conditions line instruction edge coverage percentages 
long way satisfactory coverage 
noted importance comparing static dynamic analyses java programs 
order provide foundation analysis proposed common static metrics evaluated coverage dynamic context 
results analysis java benchmark suites showing relationship static dynamic data 
results lead larger suites designed measure real world applications poor instruction edge coverage conclude static analysis prove poor predictor dynamic behaviour 
suites smaller programs better coverage probably resulted lower complexity rendering programs suitable wider analyses 
ad hoc addition programs benchmark suites activity benefit full analysis relevant metrics 
step comparing static dynamic analyses coverage criteria 
experimental results indicated testing achieve branch coverage performs poorly testing achieve data flow coverage 
data flow path coverage techniques provide better indicator coverage provided execution java benchmark suites 
believe important existing benchmark suites evaluated just usual static metrics fullest possible range coverage criteria 
sim issued challenge software engineering community define benchmarks field cited importance benchmark suites areas computer science identified importance benchmark suites achieving consensus research goals allowing rigorous examination research results 
hope complement movement increased benchmark programs 
java programming language provides apparently fertile environment conducting dynamic analysis 
java programs readily analysed statically dynamically various levels granularity 
availability numerous java programs including benchmark suites furnish ideal basis dynamic analysis 
outlines demonstrates basis making comparison static dynamic analyses recording comparing base line measurements 
results suggest caution exercised choice benchmark suite programs benchmark suite wide variance coverage results 
partly funded embark initiative operated irish research council science engineering technology 
christoph von praun thomas gross 
static conflict analysis multi threaded object oriented programs 
conference programming language design im accepted iasted international conference software engineering innsbruck austria february 
plementation pages san diego california usa june 
anton ertl david gregg 
optimizing indirect branch prediction accuracy virtual machine interpreters 
conference programming language design implementation pages san diego california usa june 
yokomori inoue 
design implementation bytecode java slicing system 
third ieee international workshop source code analysis manipulation pages amsterdam netherlands sept 
takeuchi akira ogata komatsu nakatani 
effectiveness cross platform optimizations java just time compiler 
conference object oriented programming systems languages applications pages anaheim ca usa october 
hendren 
dynamic metrics java 
conference object oriented programming systems languages applications pages 
fenton pfleeger 
software metrics rigorous practical approach 
international thomson computer press 
myers 
art software testing 
john wiley sons february 
roper 
software testing 
mcgraw hill september 
binder 
testing object oriented systems models patterns tools 
addison wesley october 
mcgregor 
practical guide testing object oriented software 
addison wesley march 
li bieman 
software reliability growth test coverage 
ieee transactions reliability december 
miller 
applicability modified condition decision coverage software testing 
software engineering journal september 
ball larus 
optimally profiling tracing programs 
acm transactions programming languages systems july 

coverage measurement experience function test 
th international conference software engineering pages baltimore maryland usa may 
li bieman 
software test coverage reliability 
technical report cs colorado state university 
grady 
practical software metrics project management process improvement 
prentice hall 
devanbu stubblebine 
cryptographic verification test coverage claims 
ieee transactions software engineering february 
claire knight 
smell coffee 
uncovering java analysis issues 
international workshop source code analysis manipulation pages florence italy november 
dahm 
byte code engineering api 
technical report institut informatik freie universit berlin april 

open source residual test coverage tool june 
www cs uoregon edu research perpetual software 
gregg power waldron 
platform independent dynamic java virtual machine analysis java grande forum benchmark suite 
concurrency computation practice experience march 
gregg rothermel mary jean harrold 
safe efficient regression test selection technique 
acm transactions software engineering methodology april 
sable research group mcgill university 
dynamic software metrics april 
www sable mcgill ca metrics 
standard performance evaluation 
spec releases spec jvm industry standard benchmark measuring java virtual machine performance 
press release august 
www org osg jvm press html 
software 
may 
www ru cm info html 
bull smith freeman 
benchmarking java fortran scientific applications 
acm java grande conference pages stanford university california usa june 
mckinley 
data flow analysis software prefetching linked data structures java 
international conference parallel architectures compilation techniques pages barcelona spain september 
komatsu nakatani 
study techniques java just time compiler 
object oriented programming systems languages applications pages minneapolis minnesota usa october 
komatsu nakatani 
dynamic optimization framework java just time compiler 
conference object oriented programming systems languages applications pages tampa florida usa october 
frankl weiss 
experimental comparison effectiveness branch data flow testing 
ieee transactions software engineering august 
hutchins ostrand 
experiments effectiveness dataflow controlflow test adequacy criteria 
th international conference software engineering pages sorrento italy may 
sim easterbrook holt 
benchmarking advance research challenge software engineering 
th international conference software engineering pages portland oregon usa may 
accepted iasted international conference software engineering innsbruck austria february 
