consideration publication functional programming type correct stack safe provably correct expression compiler james mckinna university st andrews mail james mckinna st andrews ac uk joel wright university nottingham mail jjw cs nott ac uk conventional approaches compiler correctness type safety type preservation focused line proofs formalised machine existing compilation schemes respect operational semantics 
pearl shows dependent types programming illustrated allows build properties write programs guarantee design subsequent construction 
focus simple expression language compiled tree structured code simple stack machine 
purpose claim sophistication source language modelled show metalanguage tool writing programs type preservation progress theorems self evident construction correctness proved directly system 
simple setting achieve type preserving evaluation semantics takes typed expressions typed values 
compiler takes typed expressions stack safe intermediate code 
interpreter compiled code takes stack safe intermediate code big step stack transition 
compiler correctness proof described function type expresses equational correctness property 
contains proof correctness simple compiling algorithm compiling arithmetic expressions machine language mccarthy painter 
years mccarthy pioneered certification programming language implementation approach emphasised syntax operational semantics definition proof structural induction largely unchanged day correctness properties expressed commuting diagrams form 
changed emergence systems james mckinna joel wright checking proofs specific tools varieties martin type theory possibility integrating programming proof unified formalism 
compile exp code exec eval alue push stack stack examines simple example typed language arithmetic boolean expressions semantics primitive recursive interpreter eval compiler compile tree structured code simple machine exec 
contributes indirectly challenge illustrating completely checkable executable piece programming language manipulation 
prototype substantial experiments intend report mccarthy envisage order extensions complete revision formalism required ibid closing 
dependently typed programming dependently typed host language allows direct formulation type preservation progress 
dependent type theory provides programmers just integrated logic reasoning program correctness allows precise types programs data place strengthening typechecker language guarantees 
mcbride mckinna kernel language dependently typed programming supports dybjer notion inductive families dybjer language data economical syntax function program definition 
syntax source code originally view left interest readability suppress explicit calls case constructs formally justified goguen 
type signature definitions uniformly dimensional inference rule style introduce new datatype families data keyword constructors new function symbols 
functions declared giving type signatures followed tree structure superficially resembles equational syntax pattern matching programs sml haskell 
inductive families supported allow represent directly stratification values expressions types 
interested reader referred mcbride mckinna details program fully annotated source www pig org downloads compiler pearl epi functional pearl semantics eval example typed interpreter course familiar illustration programming example hinze gibbons de moor earliest appearance literature find augustsson carlsson dependently typed language cayenne examples doubtless exist back folklore 
restricted form type family allowing non uniform indexing host language types 
advantage approach full inductive families maintain clean separation object language type system model host language relies pun levels 
extend example simple evaluator example embrace typed stacks requires exploitation tricks style identified argued 
mcbride 
imagine required represent correctness proof section style 
type preservation type interpreter title section emphasises basic feature language representation available programmer working dependently typed setting properties programs case object language semantics directly expressible type system 
achieve representation object language expressions object language types 
introducing language type expressions data nat bool supports definition host language family types indexed object language values case analysis val nat nat val bool bool nat bool usual host language inductive definitions peano naturals booleans true false cond respectively omitted 
inductive family expressions indexed may directly follows val expt data expt exp nat plus exp nat exp bool expt expt declares types constructors syntax essentially terms informal typing rules 
notice get object level polymorphism host level injection values expressions 
james mckinna joel wright extensive implicit syntax mechanisms adapted pollack pollack original approach lego suppress object level indices particular constructor polymorphic object level dependency host level instance type indices correctly inferred 
position write evaluation function eval expressions values 
explicit object level type index information host level types express type preservation directly type signature eval expt eval object langauge property type preservation reified type 
constructing program body interpreter signature usual structural recursion expt eval rec eval val eval plus eval eval eval cond eval eval eval host language addition nat cond host language usual way 
typechecker enforces object language typing rules encoded definition expt ensure inductively recursive calls eval yield values correct object host level types 
expressed desired preservation property type proof holds expressed precisely program eval 
recursive definition eval host level type claimed precisely proof eval satisfies object level type preservation 
working rich host language obtain extremely terse type correct interpreter virtually free 
second semantics compile exec purposes consider direct style semantics obtained compiling code simple stack machine 
setting clear defined notion safety stack type safety stacks typed intermediate code stack type respecting way clear particular code addition expects pop natural number arguments stack push back single natural number underflow intermediate code executes context stack right type arguments top continue execution 
type system allows represent properties preservation progress types data typed stacks typed intermediate code operations compile exec respectively required establish 
simply instance idea type preservation type interpreter 
corresponding progress theorem encoded types intermediate object level code fragments 
functional pearl typing stacks simple machine defined terms big step semantics intermediate code code initial stack vals result stack vals 
exploit idea index family stacks object level type signature stack types may simply lists lists declared usual way nil cons data list list xs list xs list list typed stacks family dependently typed lists indexed stack type data stack stack stacks stack dependent types entirely concrete approach stacks enforce stack typing specify type safe top operation needing handle stack underflow obvious definition stack top top accepts case analysis type checking correctly rejecting need consider case type fails unify stack 
detailed account typechecking pattern matching programs available goguen precise details need concern 
compiling executing typed intermediate code stack safety code achieved steps firstly define type family code intermediate code way type interpreter exec expresses stack type preservation theorem 
define compiler compile produce code intended meaning leave value correct type top stack data code code stack exec stack exp compile code james mckinna joel wright specifying intermediate code specific expression language introduce actual intermediate code tree structured sequences explicit op skip sequencing typed push typing rule add stipulates stack layout correctly set addition expects boolean top stack tail type executes arbitrary code sequences operate stacks type data skip code code code code code push code add code nat nat nat code code bool implementing interpreter intermediate code examining details consider construction interpreter exec informally 
guided typing rules intermediate code proceeds case analysis code constructor case skip stack type stack type return case just iterated composition usual case push push corresponding value stack hand case add exploit stack typing input stack type nat nat know case analysis form natural numbers stack necessarily type indices occurring constructors stack family constructor form stack configuration ill typed give rise unification failure type checking 
need explicitly consider ill typed stacks underflow execution guaranteed progress case writing back natural number top case similarly input stack type bool know case analysis form boolean stack necessarily type ditto case analysis corresponds examining top stack entry jump execution appropriate branch ci stack type guarantees inductively execution get stuck point 
fact informal analysis usually justifies stack safety property provides commentary typed piece code defining exec functional pearl code stack exec stack exec rec exec skip exec exec exec exec push exec add exec true exec exec false exec implementing compiler intermediate code piece jigsaw compiler compile implement structural recursion discussion type correctness 
note need supply trailing stack type explicitly exp compile code compile rec compile push compile plus compile compile add compile compile compile compile compiler correctness equality distinguished family type system constructor refl 
may state correctness property compilation customary equational form proof simply dependently typed functional program correct expt stack correct eval exec compile proof proceeds induction expression implementation function proceeds primitive recursion case val case trivial evaluating functions left right hand side equation result pushing value host language type correct case computationally equal simply proved reflexivity refl 
case plus induction hypothesis recursive call respectively know eval exec compile eval exec compile james mckinna joel wright lhs computationally equivalent eval eval right hand side exec add eval eval 
computational rule exec add finishes proof reflexivity 
case induction hypotheses 
eval exec compile eval exec compile eval exec compile rewriting equation reduce right hand side exec compile compile eval left hand side just eval case analysis eval definition eval true case problem solved induction hypothesis false case problem solved second induction hypothesis typing rule program notation precisely designed situation sub computation case eval definitions eval exec behaviour abstracted occurrence type correct 
details idea view left mcbride mckinna section 
note achieved type correct stratification objectlevel old compiler correctness diagram 
host level type checking ensured informal proof equational reasoning plus appeal induction hypotheses retained implementation correct 
compile exp code exec eval correct val stack stack code implementing correct rest programs binaries execute mentioned url 
demonstrates suitably rich host language type system exemplified support inductive families important safety properties may captured entirely typed representation object language 
shown examples type preservation eval obtained free exec stack type preservation 
correctness property compiler requires separate proof representable host language program 
functional pearl important note implementations eval exec compile require annotation support correctness proof 
type annotations may carry entirely largely silently managed type checker 
type inference weak recognise nat element val nat mean require type tags 
remains interesting piece eliminate tags altogether 
demonstrated conceptual theoretical methodological practical advantages maintaining type information compilation high level source assembly language morrisett hope contributes mechanisation approach environment 
gratefully acknowledge colleagues team special conor mcbride peter morris 
go graham hutton scottish programming languages seminar 
generously supported epsrc gr gr ep 
augustsson lennart carlsson magnus 

exercise dependent types typed interpreter 
www cs chalmers se cayenne 
brian bohannon aaron fairbairn matthew foster nathan pierce benjamin sewell peter dimitrios geoffrey weirich stephanie zdancewic steve 

mechanized metatheory masses challenge 
international conference theorem proving higher order logics tphols 
lecture notes computer science 
springer verlag 
dybjer peter 

inductive families 
formal aspects computing 
gibbons jeremy de moor oege eds 

fun programming 

chap 

goguen mcbride conor mckinna james 

eliminating dependent pattern matching 
futatsugi jouannaud jean pierre meseguer jos eds algebra meaning computation th birthday volume joseph goguen 
lecture notes computer science vol 

springer verlag 
mcbride conor 

faking simulating dependent types haskell 
journal functional programming 
special issue haskell 
mcbride conor mckinna james 

view left 
journal functional programming 
mccarthy john painter james 

correctness compiler arithmetic expressions 
pages proceedings ams symposium applied mathematics mathematical aspects computer science 
morrisett greg walker david crary karl glew neal 

system typed assembly language 
acm transactions programming languages systems 
pollack randy 

implicit syntax 
preliminary proceedings st workshop logical frameworks www lfcs inf ed ac uk research proc proc ps gz pages 
