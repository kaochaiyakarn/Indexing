suif infrastructure research parallelizing optimizing compilers robert wilson robert french christopher wilson saman amarasinghe jennifer anderson steve tjiang shih wei liao chau wen tseng mary hall monica lam john hennessy computer systems laboratory stanford university ca compiler infrastructures support experimental research crucial advancement high performance computing 
new compiler technology implemented evaluated context complete compiler developing infrastructure requires huge investment time resources 
spent number years building suif compiler powerful flexible system share results efforts 
suif consists small clearly documented kernel toolkit compiler passes built top kernel 
kernel defines intermediate representation provides functions access manipulate intermediate representation structures interface compiler passes 
toolkit currently includes fortran front ends loop level parallelism locality optimizer optimizing mips back set compiler development tools support instructional 
expect suif suitable think may useful researchers 
invite suif welcome contributions infrastructure 
directions obtaining suif software included 
compiler research community great need compiler infrastructures new technology implemented evaluated 
basic requirements various parsers code generators infrastructure include important program analyses optimizations 
especially true arena compiler research high performance systems conventional data flow optimizations high level transformations necessary improve parallelism memory hierarchy performance 
developing fully functional infrastructure huge investment time resources 
independently developing entire infrastructure prohibitively expensive compiler researchers benefit greatly sharing investments infrastructure development 
making suif stanford university intermediate format compiler system available 
developed suif platform research compiler techniques high performance machines 
powerful modular flexible clearly documented complete compile large benchmark programs 
suif probably suitable believe useful 
group successfully suif perform research topics including scalar optimizations array data dependence analysis loop transformations locality parallelism software prefetching instruction scheduling ongoing research projects suif include global data computation decomposition shared distributed address space machines communication optimizations distributed address space machines array privatization interprocedural parallelization efficient pointer analysis optimization verilog simulations 
suif courses compiler optimizations stanford 
presents base infrastructure suif include latest research 
progresses continue incorporate results compiler 
goal suif construct base system support collaborative research development efforts 
structured compiler small kernel plus toolkit consisting various compilation analyses optimizations built kernel 
kernel defines intermediate representation interface passes compiler 
interface passes toolkit easily enhanced replaced rearranged 
ideal collaborative practical develop usable system 
program information necessary implement scalar parallel compiler optimizations easily available suif kernel 
intermediate program representation hierarchy data structures defined objectoriented class library 
intermediate representation retains high level information source code 
accessing manipulating data structures generally straightforward due modular design kernel 
provide extensive documentation kernel 
suif toolkit contains variety compiler passes 
fortran ansi front ends available translate source programs suif 
system includes automatically find parallel loops generate parallelized code 
suif translator allows compile parallelized code platform parallel run time library ported 
generating system directly produce optimized mips code 
system provides features support parallelization data dependence analysis reduction recognition set symbolic analyses improve detection parallelism unimodular transformations increase parallelism locality 
scalar optimizations partial redundancy elimination register allocation included 
suif system 
describe suif kernel section giving overview intermediate representation kernel implementation 
proceed briefly outline components toolkit section 
kernel design suif kernel performs major functions defines intermediate representation programs 
representation supports high level transformations low level analyses optimizations 
provides functions access manipulate intermediate representation 
hiding low level details implementation system easier helps maintain compatibility representation changed 
structures interface compiler passes 
suif passes separate programs communicate files 
format files stages compilation 
system supports experimentation allowing user defined data annotations 
subsections expand aspects kernel 
program intermediate format level representation programs parallelizing compiler crucial element compiler design 
traditional compilers uniprocessors generally program representations low level parallelization 
current suif system major revision earlier version 
previous ported new system available time 
hope include release 
example extracting data dependence information difficult array accesses expanded arithmetic address calculations 
extreme parallelizing compilers source source translators analyses optimizations directly syntax trees 
syntax trees fully retain high level language semantics language specific easily adapted languages 
example extending fortran compiler accept fortran programs difficult 
furthermore compiler algorithms able handle rich set source constructs rendering development algorithms complicated 
intermediate format mixed level program representation 
conventional low level operations includes high level constructs loops conditional statements array accesses 
loop conditional representations similar syntax trees language independent 
constructs capture high level information necessary parallelization 
approach reduces different ways expressing information canonical form simplifying design analyzers optimizers 
suif instructions primary components procedure body 
high level compiler passes typically group instructions expression trees 
instructions perform simple risc operations complex instructions avoid losing information array accesses procedure calls switch statements 
unstructured irregular control flow simply represented lists instructions include branch jump operations 
compilation progresses back optimizations code generation high level constructs longer needed expanded low level operations 
result expansion simple list instructions procedure 
information high level analyses easily carried low level representation annotations 
example data dependence information passed instruction scheduling annotating load store instructions 
symbol tables suif program hold detailed symbol type information 
information complete translate suif back legal high level code 
system keeps sufficient information fortran arrays common blocks enable full interprocedural analysis 
support interprocedural analysis optimization built intermediate representation 
significant programs multiple source files interprocedural algorithms able deal files 
addressed explicitly including source files top level intermediate representation 
source files share global symbol table global symbols file 
object oriented implementation kernel provides object oriented implementation suif intermediate format 
suif library defines class element program representation allowing provide interfaces data structures hide underlying details 
inheritance dynamic binding particularly context 
classes basically components added features subclass 
example variables labels procedures symbols share basic interface procedure symbols bodies code associated 
putting shared features base class deriving subclasses variant gain type safety modularity 
basic implementation suif data structures kernel provides numerous features system easy 
defines variety generic data structures including hash tables extensible arrays kinds linked lists 
functions needed frequently class included methods 
include methods traverse program representation duplicate regions code create new instructions symbols 
low level details reading writing suif files handled entirely library 
interface compilation passes suif toolkit consists set compiler passes implemented separate programs 
pass typically performs single analysis transformation writes results file 
inefficient flexible 
suif files output format passes reordered simply running programs different order 
new passes freely inserted point compilation 
approach simplifies process making code modifications 
modifications performed step pass actual suif code needs changed 
data structures associated code flow graphs simply reconstructed pass needs 
inefficient eliminates tedious bookkeeping associated making code modifications compilers 
compiler passes interact updating suif representation directly adding annotations various elements program 
users define kind annotation particular structure definitions annotations serve definitions interface passes 
easily replace existing pass pass generates annotations 
annotation facility encourages experimentation new abstractions 
adding new information annotations affect rest system making easy investigate various alternatives 
suif compiler toolkit compiler toolkit consists fortran front ends loop level parallelism locality optimizer optimizing mips back set compiler development tools support instructional 
front ends ansi front fraser hansen lcc modified generate suif files 
fortran front directly translates fortran suif 
translate fortran followed front convert programs suif 
capture fortran specific information pass suif compiler 
conversion occasionally obscures high level program semantics originally available fortran programs 
ideal solution build fortran front suif time 
current solution works benchmarks sufficient research purposes 
loop level parallelism locality optimizer achieve performance modern architectures programs effective computer memory hierarchy ability perform operations parallel 
key element suif compiler toolkit library driver applying loop level parallelism locality optimizations 
suif translates sequential programs parallel code shared address space machines 
compiler generates single program multiple data spmd program contains calls portable run time library 
suif translator convert suif ansi translation enables apply high level transformations parallelization techniques machines directly generate object code 
currently versions run time library sgi machines stanford dash multiprocessor kendall square research ksr 
implemented uniprocessor version library debugging testing 
suif different compiler passes 
number scalar optimizations help expose parallelism 
include constant propagation forward propagation induction variable detection constant folding scalar privatization analysis 
unimodular loop transformations guided array dependence analysis restructure code optimize parallelism locality 
parallel code generator produces parallel code calls parallel run time library 
loops containing reductions parallelized simple synchronization 
analyzer recognizes sum product minimum maximum reductions 
sophisticated recognize reductions span multiple arbitrarily nested loops 
algorithm tries find largest region code accesses scalar variable sections array commutative read modify write operations 
definition allows find reduction accumulates section array indirectly index array 
performs data dependence analysis suif dependence library 
traditional data dependence analysis determines overlap pairs array accesses indices loop bounds affine functions loop indices 
dependence analyzer algorithm described maydan 
consists series fast exact tests applicable limited domain 
test fourier motzkin elimination algorithm extended solve integer solutions 
algorithm uses memoization technique remembering previous test results capitalize fact dependence tests performed compilation identical 
technique shown efficiently generate exact answers data dependence tests invoked perfect club benchmarks 
extended dependence analyzer handle simple nonlinear array accesses 
loop transformer wolf lam algorithms 
optimizes code coarse grain parallelism unimodular loop transformations loop interchange skewing reversal blocking tiling 
optimize cache locality uniprocessors multiprocessors 
algorithm operates loops distance direction vectors 
unimodular transformations applicable perfectly nested loops imperfectly nested loops code outside innermost loops consists simple statements loops 
mechanisms performing loop transformations provided library researchers implement different loop transformation policies 
optimizing mips back compiler research projects need access optimizing back directly deal scalar optimization code generation 
examples projects implemented suif include software prefetching tool instruction scheduler superscalar processors 
support initial release suif toolkit includes set conventional data flow optimizations mips code generator 
data flow optimizer built sharlit data flow optimizer generator automatically takes data flow description translates efficient optimization code 
optimizations implemented sharlit include constant propagation partial redundancy elimination strength reduction register allocation 
compiler development tools compiler toolkit includes facilities aid compiler development process 
identified common functions needed compiler passes set libraries described 
debugging tools available 
library functions check correct types consistent data structures helps identify errors soon occur waiting break subsequent passes 
subtle errors typically require examination suif code 
suif binary files viewed different formats text directly corresponding suif representation formatted postscript showing tree structures high level code 
suif passes deal extensively integer matrices systems linear inequalities extracted set common mathematical functions mathematics library 
included library fourier motzkin elimination algorithm solving systems real valued inequalities extensions fourier motzkin solve integer solutions extensions class linear inequalities symbolic coefficients 
library supports linear algebra 
developed interactive interface mathematics library linear inequality calculator lic 
tool allows compiler developer easily test new algorithms examples stanford compiler course aid students learning data dependence analysis parallel code generation 
high level program transformations need generate large amounts suif code 
example parallel code generator create upper lower bound expressions schedule iterations parallel loop 
constructing expressions directly low level suif objects requires tedious error prone operations 
simplify process builder library translates statements suif code 
builder interface insulates user changes internal program representation 
simplified suif instructional students just learning compiler optimizations overwhelmed task implementing context complete compiler developed simple suif library provide simplified interface suif system 
interface tailored specifically implementing scalar data flow analyses optimizations 
exposes students information relevant problems 
simple suif retains information suif files students able test projects context fully functional compiler 
system compiler optimization course stanford 
students able simple suif develop optimizations quarter course 
suif system capable compiling standard benchmark programs 
run compiler multiflow test suite perfect club benchmarks spec benchmarks 
mips back optimization able compile validate programs 
successfully tested perfect benchmarks fortran floating point applications spec nas parallel benchmarks 
suif growing system 
continually developing experimenting new compiler techniques 
new passes completed add toolkit potentially replacing powerful passes 
view suif bootstrapping system 
kernel retain basic interface possibly extensions support new areas research 
various components toolkit may day replaced passes embodying newer compilation techniques better engineering designs 
goal establish interface compiler passes researchers collaborate developing suif infrastructure 
invite suif welcome contributions system 
get suif software suif system freely available suif stanford edu 
additional information suif world wide web suif stanford edu 
suif system implemented contains lines code 
release comes full documentation design kernel libraries usage information compiler passes toolkit 
acknowledgments acknowledge previous members suif research team contributions release dror maydan data dependence analysis todd mowry shaking bugs compiler karen pieper help original suif system design mike smith mips code generator todd smith translators suif michael wolf building initial system loop transformation library 
current members suif compiler team amy lim brian murphy patrick 
helped release developing software incorporated 
want john letting multiflow test suite 
suif compiler project supported part darpa contracts dabt 
supported nsf young investigator award nsf cise postdoctoral fellowships student fellowships bell laboratories dec western research laboratory intel nsf 
scalar optimizer known fail circumstances eventually replaced 
amarasinghe lam 
communication optimization code generation distributed memory machines 
proceedings acm sigplan conference programming language design implementation june 
anderson lam 
global optimizations parallelism locality scalable parallel machines 
proceedings acm sigplan conference programming language design implementation june 
fraser hanson 
retargetable compiler ansi sigplan notices oct 
gay feldman 

available netlib research att com 
hall mellor crummey carle rodriguez 
fiat framework interprocedural analysis transformation 
proceedings sixth workshop languages compilers parallel computing aug 
lenoski laudon joe stevens gupta hennessy 
dash prototype implementation performance 
proceedings th annual international symposium computer architecture pages may 
maydan amarasinghe lam 
array data flow analysis array privatization 
proceedings th annual acm symposium principles programming languages jan 
maydan hennessy lam 
efficient exact data dependence analysis 
proceedings acm sigplan conference programming language design implementation pages june 
mowry lam gupta 
design evaluation compiler algorithm prefetching 
proceedings fifth international conference architectural support programming languages operating systems pages oct 
smith horowitz lam 
efficient superscalar performance boosting 
proceedings fifth international conference architectural support programming languages operating systems pages oct 
tjiang hennessy 
sharlit tool building optimizers 
proceedings acm sigplan conference programming language design implementation pages july 
tjiang wolf lam pieper hennessy 
integrating scalar optimizations parallelization 
proceedings fourth international workshop languages compilers parallel computing pages aug 
wolf lam 
data locality optimizing algorithm 
proceedings acm sigplan conference programming language design implementation pages june 
wolf lam 
loop transformation theory algorithm maximize parallelism 
ieee transactions parallel distributed systems pages oct 

