models issues data stream systems brian babcock babu datar rajeev motwani jennifer widom department computer science stanford university stanford ca babcock datar rajeev widom cs stanford edu overview motivate need research issues arising new model data processing 
model data take form persistent relations arrives multiple continuous rapid time varying data streams 
addition reviewing past relevant data stream systems current projects area explores topics stream query languages new requirements challenges query processing algorithmic issues 
new class data intensive applications widely recognized applications data modeled best persistent relations transient data streams 
examples applications include financial applications network monitoring security telecommunications data management web applications manufacturing sensor networks 
data stream model individual data items may relational tuples network measurements call records web page visits sensor readings 
continuous arrival multiple rapid time varying possibly unpredictable unbounded streams appears yield fundamentally new research problems 
applications cited feasible simply load arriving data traditional database management system dbms operate 
traditional dbms designed rapid continuous loading individual data items directly support continuous queries typical data stream applications 
furthermore recognized approximation adaptivity key ingredients executing queries performing processing data analysis mining rapid data streams traditional dbms focus largely opposite goal precise answers computed stable query plans :10.1.1.34.8546
consider fundamental models issues developing general purpose data stream management system dsms 
developing system stanford touch 
attempt provide general overview area related current 
glaring omissions naturally fault 
section considering data stream model queries streams 
section take simple view streams append relations transient tuples queries sql operating logical relations 
sections discuss issues complicate model query language ordering timestamping sliding windows 
section presents concrete examples ground discussion 
section review projects geared specifically data stream processing plethora past research areas related data streams active databases continuous queries filtering supported nsf iis 
datar supported microsoft graduate fellowship 
rajeev motwani received partial support foundation research 
systems view management sequence databases 
clearly applications data stream processing hope show new problems address realizing complete dsms 
section deeply area query processing uncovering number important issues including queries require unbounded amount memory evaluate precisely approximate query processing techniques address problem 
sliding window query processing considering portions streams approximation technique option query language applications prefer sliding window queries 
batch processing sampling synopsis structures handle situations flow rate input streams may overwhelm query processor 
meaning implementation blocking operators aggregation sorting presence streams 
continuous queries registered portions data streams passed queries wish stream history 
section outlines details query language architecture dsms query processor designed specifically address issues 
section review algorithmic results data stream processing 
focus primarily sketching techniques building summary structures synopses 
touch sliding window computations negative results discuss additional algorithmic issues 
conclude section remarks evolution new field summary directions 
data stream model data stream model input data operated available random access disk memory arrive continuous data streams 
data streams differ conventional stored relation model ways data elements stream arrive online 
system control order data elements arrive processed data stream data streams 
data streams potentially unbounded size 
element data stream processed discarded archived retrieved easily explicitly stored memory typically small relative size data streams 
operating data stream model preclude presence data conventional stored relations 
data stream queries may perform joins data streams stored relational data 
purposes assume stored relations contents remain static 
preclude potential transaction processing issues arise presence updates stored relations occur concurrently data stream processing 
queries queries continuous data streams common queries traditional database management system 
important distinctions peculiar data stream model 
distinction time queries continuous queries 
time queries class includes traditional dbms queries queries evaluated point time snapshot data set answer returned user 
continuous queries hand evaluated continuously data streams continue arrive 
continuous queries interesting class data stream queries devote attention 
answer continuous query produced time reflecting stream data seen far 
continuous query answers may stored updated new data arrives may produced data streams 
mode preferred 
example aggregation queries may involve frequent changes answer tuples dictating stored approach join queries monotonic may produce rapid unbounded answers dictating stream approach 
second distinction predefined queries ad hoc queries 
predefined query supplied data stream management system relevant data arrived 
predefined queries generally continuous queries scheduled time queries predefined 
ad hoc queries hand issued online data streams begun 
ad hoc queries time queries continuous queries 
ad hoc queries complicate design data stream management system known advance purposes query optimization identification common subexpressions queries importantly correct answer ad hoc query may require referencing data elements arrived data streams potentially discarded 
ad hoc queries discussed detail section 
motivating examples examples motivating data stream system application domains including finance web applications security networking sensor monitoring 
web financial search engine evaluates queries real time streaming financial data stock news feeds 
web site gives examples time continuous queries commonly posed customers 
modern security applications apply sophisticated rules network packet streams 
exam ple networks provides integrated security platform providing services firewall support intrusion detection multi gigabit network packet streams 
platform needs perform complex stream processing including url filtering table lookups correlation multiple network traffic flows 
large web sites monitor web logs online enable applications tion performance monitoring load balancing 
web sites served widely distributed web servers yahoo may need coordinate distributed clickstream analyses track heavily accessed web pages part real time performance monitoring 
emerging applications area sensor monitoring large number sensors distributed physical world generate streams data need combined monitored analyzed 
application domain detailed examples network traffic management involves monitoring network packet header information set routers obtain information traffic flow patterns 
description babu widom delve example detail help illustrate continuous queries arise naturally real applications conventional dbms technology adequately support queries 
consider network traffic management system large network backbone network internet service provider isp 
systems monitor variety continuous data streams may characterized unpredictable arriving high rate including packet traces network performance measurements 
typically current traffic management tools rely special purpose system performs online processing simple hand coded continuous queries just log traffic data perform periodic offline query processing 
conventional dbms deemed inadequate provide kind online continuous query processing beneficial domain 
data stream system provide effective online processing continuous queries data streams allow network operators install modify remove appropriate monitoring queries support efficient management isp network resources 
consider concrete setting 
network packet traces collected number links network 
focus specific links customer link connects network customer isp network backbone link connects routers backbone network isp 
denote streams packet traces corresponding links 
assume simplicity traces contain just fields packet header listed 
src ip address packet sender 
dest ip address packet destination 
id identification number sender destination uniquely identify packet 
len length packet 
time time packet header recorded 
consider continuous query computes load link averaged minute intervals notifying network operator load crosses specified threshold natural interpretation 
select sum len group time having sum len functionality query may possibly achieved dbms triggers prefer special techniques performance reasons 
example consider case link high throughput optical link 
case may choose compute approximate answer employing random sampling stream task outside reach standard trigger mechanisms 
second query isolates flows backbone link determines amount traffic generated flow 
flow defined sequence packets grouped time sent specific source specific destination 
select src dest sum len select src dest len time order time group src dest src dest time user defined function takes source ip address destination ip address timestamp packet returns identifier flow packet belongs 
assume data view table expression clause passed function order defined order clause 
observe handling stream particularly challenging due presence group order clauses lead blocking operators query execution plan 
consider task determining fraction backbone link traffic attributed customer network 
query example kind ad hoc continuous queries may registered periods congestion determine customer network cause 
select count src src dest dest id id select count observe joins streams keys obtain count number common packets 
joining streams potentially require unbounded intermediate storage example bound delay packet showing links user may prefer compute approximate answer 
approximation technique maintain bounded memory synopses streams see section alternatively exploit aspects application semantics bound required storage may know joining tuples occur bounded time window 
final example continuous query monitoring source destination pairs top percent terms backbone traffic 
ease exposition employ construct sql 
load select src dest sum len traffic group src dest select src dest traffic load select count load traffic traffic select count load order traffic review data stream projects provide overview past current projects related data stream management 
revisit projects sections discuss issues facing building general purpose data stream management system stanford 
continuous queries tapestry system content filtering database email bulletin board messages 
restricted subset sql query language order provide guarantees efficient evaluation append query results 
alert system provides mechanism implementing event condition action style triggers conventional sql database continuous queries defined special append active tables 
xfilter content filtering system performs efficient filtering xml documents user profiles expressed continuous queries xpath language 
xyleme similar content filtering system enables high throughput restricted query language 
tribeca stream database manager provides restricted querying capability network packet streams 
stream query processing system uses stream processing techniques analyze large quantities stored data 
niagaracq systems support continuous queries monitoring persistent data sets spread wide area network web sites internet 
uses query processing algorithm incremental view maintenance niagaracq addresses scalability number queries proposing techniques grouping continuous queries efficient evaluation 
niagaracq project shanmugasundaram discuss problem supporting blocking operators query plans data streams naughton propose rate optimization queries data streams new optimization methodology stream arrival data processing rates 
chronicle data model introduced append ordered sequences tuples chronicles form data streams 
defined restricted view definition language algebra chronicle algebra operates chronicles traditional relations 
focus ensure views defined chronicle algebra maintained incrementally storing chronicles 
algebra declarative query language querying ordered relations sequences proposed seshadri livny ramakrishnan 
applications continuous queries need refer sequencing aspect streams particularly form sliding windows streams 
related category includes temporal time series databases ordering tuples implied time querying indexing query optimization 
body materialized views relates continuous queries materialized views effectively queries need reevaluated incrementally updated base data changes 
particular importance self maintenance ensuring data saved maintain view base data unavailable related problem data expiration determining certain base data discarded compromising ability maintain view 
differences exist materialized views continuous queries data stream context continuous queries may stream store results may deal append input data may provide approximate exact answers processing strategy may adapt characteristics data streams change 
telegraph project shares target applications basic technical ideas dsms :10.1.1.12.4794:10.1.1.34.8546
telegraph uses adaptive query engine eddy concept process queries efficiently volatile unpredictable environments autonomous data sources internet sensor networks :10.1.1.34.8546
madden franklin focus query execution strategies data streams generated sensors madden discuss adaptive processing techniques multiple continuous queries 
tukwila system supports adaptive query processing order perform dynamic data integration autonomous data sources 
aurora project building new data processing system targeted exclusively stream monitoring applications 
core aurora system consists large network triggers 
trigger data flow graph node built operators boxes aurora terminology 
stream monitoring application aurora system application administrator creates adds triggers aurora trigger network 
aurora performs compile time optimization reordering operators shared state common subexpressions run time optimization trigger network 
part run time optimization aurora detects resource overload performs load shedding application specific measures quality service 
queries data streams query processing data stream model computation comes unique challenges 
section outline consider interesting challenges describe alternative approaches resolving 
issues raised section frame discussion rest 
unbounded memory requirements data streams potentially unbounded size amount storage required compute exact answer data stream query may grow bound 
external memory algorithms handling data sets larger main memory studied algorithms suited data stream applications support continuous queries typically slow real time response 
continuous data stream model applicable problems timely query responses important large volumes data continually produced high rate time 
new data constantly arriving old data processed amount computation time data element low latency computation high algorithm able keep pace data stream 
reason interested algorithms able confine main memory accessing disk 
arasu took initial steps distinguishing queries answered exactly bounded amount memory queries approximated disk accesses allowed 
consider limited class queries class provide complete characterization queries require potentially unbounded amount memory proportional size input data streams answer 
result shows knowing size input data streams impossible place limit memory requirements common queries involving joins domains attributes involved query restricted known characteristics data imposition query predicates 
basic intuition domain restrictions unbounded number attribute values remembered turn join tuples arrive 
extending results full generality remains open research problem 
approximate query answering described previous section limited bounded amount memory possible produce exact answers data stream queries high quality approximate answers acceptable lieu exact answers 
approximation algorithms problems defined data streams fruitful research area algorithms community years discussed detail section 
led general techniques data reduction synopsis construction including sketches random sampling histograms wavelets :10.1.1.102.5483
summarization techniques seen approximate query answering 
example develops histogram techniques provide approximate answers correlated aggregate queries data streams gilbert general approach building summaries data streams provide approximate answers classes aggregate queries 
research problems abound area approximate query answering streams 
basic notion approximations remains investigated detail queries involving simple aggregation 
subsections touch approaches approximation peculiar data stream model computation 
sliding windows technique producing approximate answer data stream query evaluate query entire past history data streams sliding windows data streams 
example data week considered producing query answers data older week discarded 
imposing sliding windows data streams natural method approximation attractive properties 
defined easily understood semantics approximation clear users system confident understand producing approximate answer 
deterministic danger unfortunate random choices produce bad approximation 
importantly emphasizes data majority real world applications important relevant old data trying real time sense network traffic patterns phone call transaction records scientific sensor data general insights past informative useful insights stale data 
fact applications sliding windows thought approximation technique imposed due infeasibility computing historical data part desired query semantics explicitly expressed part user query 
example queries section tracked traffic network backbone applied traffic time traffic past 
variety research issues sliding windows data streams 
discuss section fundamental issue define timestamps streams facilitate windows 
extending sql relational algebra incorporate explicit window specifications nontrivial touch topic section 
implementation sliding window queries impact query optimization largely untouched area 
case sliding window large entire contents window buffered memory theoretical challenges designing algorithms give approximate answers available memory 
results vein :10.1.1.24.7941
existing sequence temporal databases addressed issues involved time sensitive queries class includes sliding window queries relational database context differences data stream computation model pose new challenges 
research temporal databases concerned primarily maintaining full history data value time data stream system concerned primarily processing new data elements fly 
sequence databases attempt produce query plans allow stream access meaning single scan input data sufficient evaluate plan amount memory required plan evaluation constant independent data 
model assumes database system control sequence process tuples merging multiple sequences assume data stream system 
batch processing sampling synopses class techniques producing approximate answers give processing data element arrives resorting sort sampling batch processing technique speed query execution 
describe general framework techniques 
suppose data stream query answered data structure maintained incrementally 
general description data structure supports operations update tuple 
update operation invoked update data structure new data element arrives method produces new updated results query 
processing continuous queries best scenario operations fast relative arrival rate elements data streams 
case special techniques necessary keep data stream produce timely answers data element arrives update data structure new results computed data structure average inter arrival time data elements 
data structure operations slow producing exact answer continually date possible 
consider possible bottlenecks approaches dealing 
batch processing scenario update operation fast operation slow 
case natural solution process data batches 
producing continually upto date answer data elements buffered arrive answer query computed periodically time permits 
query answer may considered approximate sense timely represents exact answer point past exact answer moment 
approach approximation batch processing attractive cause uncertainty accuracy answer sacrificing timeliness 
approach data streams bursty 
algorithm keep peak data stream rate may able handle average stream rate quite comfortably buffering streams rate high catching slow periods 
approach xjoin algorithm 
sampling second scenario may fast operation slow takes longer average inter arrival time data elements 
futile attempt data computing answer data arrives faster processed 
tuples skipped altogether query evaluated sample data stream entire data stream 
obtain approximate answer cases give confidence bounds degree error introduced sampling process 
unfortunately situations including queries involving joins sampling approaches give reliable approximation guarantees 
designing sampling algorithms produce approximate answers provably close exact answer important active area research 
synopsis data structures quite data structures operations fast desirable 
classes data stream queries exact data structure desired properties exists design approximate data structure maintains small synopsis sketch data exact representation able keep computation data element minimum 
performing data reduction synopsis data structures alternative batch processing sampling fruitful research area particular relevance data stream computation model 
synopsis data structures discussed detail section 
blocking operators blocking query operator query operator unable produce tuple output seen entire input 
sorting example blocking operator aggregation operators sum count min max avg 
thinks evaluating continuous stream queries traditional tree query operators data streams enter leaves final query answers produced root incorporation blocking operators query tree poses problems 
continuous data streams may infinite blocking operator data stream inputs see entire input able produce output 
clearly blocking operators suitable data stream computation model aggregate queries extremely common sorted data easier processed efficiently unsorted data 
doing away blocking operators altogether problematic dealing effectively challenging aspects data stream computation 
blocking operators root tree query operators tractable blocking operators interior nodes tree producing intermediate results fed operators processing example sort phase sort merge join aggregate subquery 
blocking aggregation operator root query tree operator produces single value small number values updates answer streamed produced 
answer larger query answer relation produced sorted order practical maintain data structure date answer continually retransmitting entire answer cumbersome 
approaches works blocking operators produce intermediate results 
central problem results produced blocking operators may continue change time data seen operators consuming results reliable decisions results intermediate stage query execution 
approach handling blocking operators interior nodes query tree replace non blocking analogs perform approximately task 
example approach juggle operator non blocking version sort aims locally reorder data stream tuples come earlier desired sort order produced tuples come sort order tuples may delivered order 
interesting open problem extend types blocking operators quantify error introduced approximating blocking operators non blocking ones 
tucker proposed different approach blocking operators 
suggest augmenting data streams assertions appear remainder data stream 
assertions called interleaved data elements streams 
example type punctuation see stream attribute tuples seeing punctuation aggregation operator grouping stream answers 
similarly join operator discard saved state relating previously seen tuples joining stream reducing memory consumption 
interesting open problem formalize relationship punctuation memory requirements query query require unbounded memory proved answerable bounded memory guarantees presence appropriate punctuation provided 
closely related idea schema level assertions constraints data streams may help blocking operators aspects data stream processing 
example may know clustered strictly increasing joining stream may know kind referential integrity exists arrival join attribute values 
cases may constraints unblock operators reduce memory requirements 
queries referencing past data data stream model computation data element streamed revisited 
limitation means ad hoc queries issued data discarded may impossible answer accurately 
simple solution problem stipulate ad hoc queries allowed data evaluated data streams began point query issued past stream elements ignored purposes query 
solution may appear satisfying may turn perfectly acceptable applications 
ambitious approach handling ad hoc queries past data maintain summaries data streams form general purpose synopses aggregates give approximate answers ad hoc queries 
approach requires making decision advance best way memory resources give approximate answers broad range possible queries 
problem similar ways problems physical database design selection indexes materialized views 
important difference traditional database system index view lacking possible go underlying relation albeit increased cost 
data stream model computation appropriate summary structure recourse available 
ad hoc queries declared pertain data research issues involved best process 
data stream applications queries long lived continuous queries ephemeral time queries gains achieved multi query optimization significantly greater possible traditional database systems 
presence ad hoc queries transforms problem finding best query plan set queries offline problem online problem 
ad hoc queries raise issue adaptivity query plans 
eddy query execution framework introduces notion flexible query plans adapt changes data arrival rates data characteristics time :10.1.1.34.8546
extending idea adapt joint plan set continuous queries new queries added old ones removed remains open research area 
proposal dsms stanford begun design prototype implementation comprehensive dsms called stream stanford stream data manager 
discussed earlier sections dsms traditional time queries replaced augmented continuous queries techniques sliding windows synopsis structures approximate answers adaptive query processing fundamental features system 
aspects complete dbms need reconsidered including query languages storage buffer management user application interfaces transaction support 
section focus primarily query language query processing components dsms touch issues initial experiences 
query language dsms general purpose data management system flexible intuitive method users system express queries 
stream project chosen modified version sql query interface system providing means submit query plans directly 
sql known language large user population 
declarative language gives system flexibility selecting optimal evaluation procedure produce desired answer 
methods receiving queries users possible example aurora system described uses graphical boxes arrows interface specifying data flow system 
interface intuitive gives user control exact series steps query answer obtained provided declarative query language 
main modification standard sql addition allowing clause refer streams relations extend expressiveness query language sliding windows 
possible formulate sliding window queries sql referring timestamps explicitly quite awkward 
sql introduces analytical functions partially address shortcomings sql expressing sliding window queries allowing specification moving averages aggregation operations sliding windows 
sql syntax sufficiently expressive data stream queries applied non aggregation operations joins 
notion sliding windows requires ordering data stream elements 
cases arrival order elements suffices implicit timestamp attached data element preferable explicit timestamps provided part data stream 
formally say data stream consists set tuple timestamp pairs timestamp attribute traditional timestamp sequence number required comes totally ordered domain distance metric 
ordering induced timestamps selecting data elements making sliding window 
extend sql allowing optional window specification provided enclosed brackets stream subquery producing stream supplied query clause 
window specification consists 
optional partitioning clause partitions data groups maintains separate window group 
window size physical units number data elements window logical units range time covered window days 
optional filtering predicate 
sql physical windows specified rows keyword rows preceding logical windows specified keyword range minutes preceding 
lieu formal grammar examples illustrate language extension 
underlying source data examples stream telephone call records attributes customer id type minutes 
attribute ordering attribute records 
suppose user wanted compute average call length considering long distance calls placed customer 
query formulated follows select avg minutes calls partition customer id rows preceding type long distance expression braces defines sliding window stream calls 
contrast previous query similar computes average call length considering long distance calls calls types placed customer select avg minutes calls partition customer id rows preceding type long distance distinction filtering predicates applied calculating sliding window cutoffs predicates applied windowing motivates inclusion optional clause window specification 
slightly complicated example returning average length telephone calls placed gold customers select avg minutes select minutes calls customers customer id customer id tier gold rows preceding notice example stream calls joined customers relation applying sliding window 
timestamps streams previous section sliding windows defined respect timestamp sequence number attribute representing tuple arrival time 
approach unambiguous tuples come single stream clear meant attempting apply sliding windows composite tuples derived tuples multiple underlying streams windows output join operator 
timestamp tuple join result timestamps tuples joined form result tuple different 
timestamp issues arise set distributed streams single logical stream web monitoring application described section truly distributed streams sensor networks comparing timestamps stream elements may relevant 
previous section introduced implicit timestamps system adds special field incoming tuple explicit timestamps data attribute designated timestamp 
explicit timestamps tuple corresponds real world event particular time importance meaning tuple 
implicit timestamps data source include timestamp information exact moment time associated tuple important general considerations old may important 
distinction implicit explicit timestamps similar transaction valid time temporal database literature 
explicit timestamps drawback tuples may arrive order timestamps tuples timestamps may come tuples earlier timestamps 
lack guaranteed ordering difficult perform sliding window computations defined relation explicit timestamps processing order 
long input stream sorted timestamp local perturbations order tuples easily corrected little buffering 
reasonable assume explicit timestamps tuples delivered roughly increasing timestamp order 
look assign appropriate timestamps tuples output binary operators join example 
possible approaches taken discuss 
approach fits better implicit timestamps provide guarantees output order tuples join operator simply assume tuples arrive earlier pass join earlier exact ordering may depend implementation scheduling vagaries 
tuple produced join operator assigned implicit timestamp set time produced join operator 
best effort approach advantage maximizes implementation flexibility disadvantage impossible impose precisely defined deterministic sliding window semantics results subqueries 
second approach fits explicit implicit timestamps user specify part query timestamp assigned tuples resulting join multiple streams 
simple policy order streams listed clause query represents prioritization streams 
timestamp tuple output join timestamp joining tuple input stream listed clause 
approach result multiple tuples timestamp purpose ordering results ties broken timestamp input stream 
example query select rows preceding rows preceding output tuples sorted timestamp ties broken timestamp 
second stricter approach assigning timestamps results binary operators drawback implementation point view 
desirable output join sorted timestamp join operator need buffer output tuples certain input tuples disrupt ordering output tuples 
example timestamp priority tuple joins tuple possible tuple join older tuple falls current window 
case join tuple produced second belongs join tuple produced 
query tree consisting multiple joins extra latency introduced reason propagate tree additive fashion 
inputs join operator sliding windows join operator confidently produce outputs sorted order 
mentioned earlier sliding windows distinct purposes important part query semantics times approximation scheme improve query efficiency reduce data volumes manageable size 
sliding window serves increase query processing efficiency best effort approach allows wide latitude ordering tuples usually acceptable 
hand ordering tuples plays significant role meaning query query defined sliding windows stricter approach may preferred cost efficient implementation 
general purpose data stream processing system support types sliding windows query language allow users specify 
system add extra keyword replaces preceding best effort ordering may 
example clause rows preceding specifies window consisting previous tuples strictly sorted timestamp order 
comparison rows specifies sliding window consisting records dsms allowed ordering produce sliding window constrained follow timestamp ordering 
keyword physical window sizes specified number records logical windows days preceding keyword 
portion query plan dsms 
query processing architecture dsms section describe query processing architecture dsms 
far focused continuous queries 
query registered query execution plan produced begins executing continues indefinitely 
addressed ad hoc queries registered relevant streams begun section 
query execution plans system consist operators connected queues 
operators maintain intermediate state synopsis data structures 
portion example query plan shown binary operator unary operator 
operators connected queue operator input queues shown synopsis structures operator input 
example sliding window join operator maintains sliding window synopsis join input section 
system memory partitioned dynamically synopses queues query plans buffers handling streams coming network cache disk resident data 
note aurora eddies single globally shared queue inter operator data flow separate queues operators :10.1.1.34.8546
operators system scheduled execution central scheduler 
execution operator reads data input queues updates synopsis structures maintains writes results output queues 
operators adhere update model discussed section period execution operator determined dynamically scheduler operator returns control back scheduler period expires 
experimenting different policies scheduling operators determining period execution 
period execution may time may quantities number tuples consumed produced 
aurora eddies chosen perform fine grained scheduling step scheduler chooses tuple global queue passes operator processing approach scheduler choose appropriate 
expect continuous queries data streams operate long running 
lifetime continuous query parameters stream data characteristics stream flow rates number concurrently running queries may vary considerably 
handle fluctuations operators adaptive 
far focused primarily adaptivity available memory factors considered including disk increase temporary storage expense latency 
approach memory adaptivity basically trading accuracy memory 
specifically operator maximizes accuracy output size available memory handles dynamic changes size available memory gracefully run time memory may taken away operator 
simple example sliding window join operator discussed may approximation join entire history input streams 
larger windows stored available memory better approximation 
examples include duplicate elimination limited size hash tables sampling reservoirs 
aurora system proposes adaptivity approximations uses load shedding techniques application specified measures quality service graceful degradation face system overload 
fundamental approach trading accuracy memory brings interesting problems need understand different query operators produce approximate answers limited memory approximate results behave operators composed query plans 
query plan tree operators certain amount memory dsms allocate memory operators maximize accuracy answer query minimize approximation 
changing conditions dsms reallocate memory operators 
suppose query query plan 
query optimizer efficiently find plan best memory allocation minimizes approximation 
plans modified conditions change 
synopses shared query plans optimally consider set queries may weighted importance 
addition memory management faced problem scheduling multiple query plans dsms 
scheduler needs provide rate synchronization operators stream joins pipelined operators query plans 
time varying arrival rates data streams timevarying output rates operators add complexity scheduling 
scheduling decisions need take account memory allocation operators including management buffers incoming streams availability synopses disk opposed memory performance requirements individual queries 
aside query processing architecture user application interfaces need dsms dynamic environment operates 
systems aurora hancock completely eliminate declarative querying provide procedural mechanisms querying 
contrast provide declarative language continuous queries similar sql extended operators discussed section mechanism directly submitting plans query algebra underlies language 
developing comprehensive dsms interface allows users administrators visually monitor execution continuous queries including memory usage approximation behavior 
provide way administrators adjust system parameters queries running including memory allocation scheduling policies 
algorithmic issues algorithms community fairly active late area data streams typically motivated problems databases networking 
model computation underlying algorithmic similar section formally stated follows data stream algorithm takes input sequence data items called data stream sequence scanned increasing order indexes 
algorithm required maintain value function prefix stream seen far 
main complexity measure space algorithm time required process stream element relevant 
cases algorithm maintains data structure compute value function demand time required process query interest 
henzinger defined similar model allowed algorithm multiple passes stream data making number passes complexity measure 
restrict attention algorithms allowed pass 
measure space time terms parameter denotes number stream elements seen far 
primary performance goal ensure space required stream algorithm small ideally want memory bound independent unbounded 
interesting problems easy prove space lower bound precludes possibility forcing settle bounds merely sublinear problem considered devise algorithm requires space processing time data element query see cases impossible achieve algorithm willing settle approximations 
rest section summarizes state art data stream algorithms relevant databases 
focus primarily problems creating summary structures synopses data stream histograms wavelet representation clustering decision trees addition touch known lower bounds space time requirements data stream algorithms 
summary structures considered traditional databases 
challenge adapt techniques data stream model 
random samples random samples summary structure scenarios small sample expected capture essential characteristics data set 
easiest form summarization dsms synopses built sample 
fact join synopsis aqua system uniform sample base relation 
stratified sampling proposed alternative uniform sampling reduce error due variance data reduce error group queries 
compute random sample data stream relatively easy 
reservoir sampling algorithm vitter pass data set suited data stream model 
extension chaudhuri motwani narasayya case weighted sampling 
sketching techniques seminal alon matias szegedy introduced notion randomized sketching widely 
sketching involves building summary data stream small amount memory possible estimate answer certain queries typically distance queries data set 
sequence elements belongs domain multiplicity denote number occurrences value sequence th frequency moment defined denote polynomial function 
define frequency moments capture statistics distribution values instance number distinct values sequence length sequence self join size called gini index homogeneity frequent item multiplicity 
difficult see exact computation moments requires linear space focus attention approximations 
problem efficiently estimating number distinct values received particular attention database literature particularly context single pass random sampling algorithms 
sketching technique compute earlier flajolet martin drawback requiring explicit families hash functions strong independence properties 
requirement relaxed alon matias szegedy sketching technique estimate constant factor technique uses linear hash functions requires memory 
key contribution alon sketching technique estimate uses space provides arbitrarily small approximation factors 
technique applications database literature including join size estimation estimating norm vectors processing complex aggregate queries multiple streams 
remains open problem come techniques maintain correlated aggregates provable guarantees 
key idea sketching technique described follows element domain hashed uniformly random value define random variable return estimator observe estimator computed single pass data provided efficiently compute values 
hash functions way independence easy prove quantity expectation equal variance standard tricks combine independent estimators accurately high probability obtain estimate intuitive level view technique tug war elements randomly assigned sides rope value square displacement rope captures skew data 
observe computing self join size relation exactly computing values join attribute relation 
alon extended technique estimating join size distinct relations follows 
random variables corresponding respectively similar random variable mapping domain values relations 
proved estimator expected value equal variance order get small relative error independent estimators 
observe estimating joins relations number estimators depends data distribution 
dobra extended technique estimate size multi way joins answering complex aggregates queries 
provide techniques optimally partition data domain estimators partition independently minimize total memory requirement 
frequency moment viewed norm vector value th dimension multiplicity technique compute norm update model vectors data element increments decrements quantity seeing update update corresponding sketch adding sum 
sketching idea extended compute norm vector follows 
assume dimension underlying vector integer bounded consider unary representation vector 
bit positions elements dimension underlying vector 
unary discussed section bar yossef gibbons devised algorithms certain conditions provide arbitrarily small approximation factors recourse perfect hash functions 
hash functions way independence obtained standard techniques involving parity check matrices bch codes 
representation denotes element corresponding bit position 
captures norm vector 
catch element dimension required efficiently compute range sum hash values corresponding pertinent bit positions set feigenbaum showed construct family range summable valued hash functions limited way independence 
indyk provided uniform framework compute norm called stable distributions improving previous estimating norm allowed arbitrary addition deletion updates dimension 
ability efficiently compute norm difference vectors central synopsis structures designed data streams 
histograms histograms commonly summary structures succinctly capture distribution values data set column possibly collection columns table 
employed multitude tasks query size estimation approximate query answering data mining 
consider summarization data streams histograms 
different types histograms proposed literature 
popular definitions optimal histogram approximate distribution set values constant function minimize sum error squared piecewise equi width histograms partition domain buckets number values falling bucket uniform buckets 
words maintain quantiles underlying data distribution bucket boundaries 
biased histograms maintain exact counts items occur frequency threshold approximate counts uniform distribution 
maintaining count frequent items related iceberg queries 
give overview computing histograms data streams 
optimal histograms data streams jagadish showed compute optimal optimal histograms data set dynamic programming 
algorithm uses space requires time size data set number buckets 
prohibitive data streams 
guha koudas shim adapted algorithm sorted data streams 
algorithm constructs arbitrarily close optimal histogram error arbitrarily close optimal histogram space time data element 
gilbert removed restriction data stream sorted providing algorithms sketching technique described earlier computing norms 
idea view data element update underlying vector length trying approximate best bucket histogram 
time process data element time reconstruct histogram size sketch bounded relative error willing tolerate 
algorithm proceeds constructing robust approximation underlying signal robust approximation built repeatedly adding dyadic interval constant value best reduces approximation error 
order find dyadic interval necessary efficiently compute signal corresponds constant value dyadic interval zero 
sketch original signal minus constant dyadic interval translates efficiently computing range sum stable random variables computing sketch see indyk dyadic interval 
gilbert show construct efficiently range summable stable random variables 
robust histogram cull histogram desired accuracy buckets 
equi width histograms quantiles equi width histograms histograms summary structures characterize data distributions manner sensitive outliers 
traditional databases optimizers selectivity estimation 
parallel database systems employ value range data partitioning requires generation quantiles splitters partition data approximately equal parts 
greenwald khanna single pass deterministic algorithm efficient computation quantiles 
algorithm needs sample values seen far quantiles range possible ranks samples take 
error associated quantile width range 
periodically merge quantiles similar errors long error combined quantile exceed algorithm improves previous set results manku rajagopalan lindsay chaudhuri motwani narasayya 
space guarantees precision employ novel data structure maintains biased histograms iceberg queries applications maintain simple aggregates count attribute find aggregate values specified threshold 
queries referred iceberg queries 
iceberg queries arise applications including data mining data warehousing information retrieval market basket analysis copy detection clustering 
example search engine interested gathering search terms account queries 
frequent item summaries useful applications caching analyzing trends 
fang gave efficient algorithm compute iceberg queries disk resident data 
algorithm requires multiple passes suited streaming model 
manku motwani randomized deterministic algorithms frequency counting iceberg queries data streams 
randomized algorithm uses adaptive sampling main idea item accounts fraction items highly part uniform sample size deterministic algorithm maintains sample distinct items frequency 
new item added benefit doubt estimating frequency 
see item exists sample frequency incremented 
periodically items low frequency deleted 
algorithms require space length data stream guarantee element algorithms report items count greater items reported guarantee reported count actual count wavelets wavelets technique provide summary representation data 
wavelets coefficients projections signal set data values orthogonal set basis vector 
choice basis vectors determines type wavelets 
haar wavelets databases ease computation 
wavelet coefficients desirable property signal reconstructed top wavelet coefficients best approximates original signal terms norm 
sketch norm difference original signal dyadic interval constant value 
papers demonstrated efficacy wavelets different tasks selectivity estimation data cube approximation computing multi dimensional aggregates 
body indicates estimates obtained wavelets accurate obtained histograms amount memory 
chakrabarti propose wavelets general purpose approximate query processing demonstrate compute joins aggregations selections entirely wavelet coefficient domain 
extend body data streams important devise techniques computing wavelets streaming model 
related development matias vitter wang show dynamically maintain top wavelet coefficients efficiently underlying data distribution updated 
computing top wavelet coefficients data stream model 
technique gilbert approximate best dyadic interval reduces error gives rise easy greedy algorithm find best term haar wavelet representation 
haar wavelet basis consists dyadic intervals constant values 
improves previous result gilbert 
data sorted order simple algorithm maintains best term haar wavelet representation lot summary structures remains interesting open problem address issue global space allocation different synopses space 
requires come global error metric synopses minimize main memory space constraint 
allocation dynamic underlying data distribution query workload changes time 
sliding windows space deterministic manner 
discussed section sliding windows prevent stale data influencing analysis statistics serve tool approximation face bounded memory 
little extending summarization techniques sliding windows remains ripe research area 
briefly describe 
datar showed maintain simple statistics sliding windows including sketches computing norm 
technique requires multiplicative space overhead length sliding window accuracy parameter 
enables adaptation sketching algorithms sliding windows model 
provide space lower bounds various problems sliding windows model 
datar motwani adapt reservoir sampling algorithm sliding windows case 
computing iceberg queries data streams manku motwani techniques adapt algorithms sliding window model 
guha koudas adapted earlier provide technique maintaining optimal histograms sorted data streams sliding window model require buffering elements sliding window 
space requirement linear size sliding window update time data element amortized number buckets histogram accuracy parameter 
open problems sliding windows clustering maintaining top wavelet coefficients maintaining statistics variance computing correlated aggregates 
negative results emerging set negative results space time requirements algorithms operate data stream model 
henzinger raghavan rajagopalan provided space lower bounds concrete problems data stream model 
lower bounds derived results communication complexity 
understand connection observe memory pass algorithm function seeing prefix data stream lower bounded way communication required parties trying compute party access prefix second party access suffix stream arrive 
henzinger approach provide lower bounds problems frequent item counting approximate median graph problems 
communication complexity alon matias szegedy provide tight lower bounds computing frequency moments 
particular proved lower bound ing count frequent item domain size 
glance lower bound similar lower bound henzinger may contradict frequent item set counting results manku motwani 
note estimates count frequent item exceeds skewed distributions common practice lower bounds proven pathological distributions items near uniform frequency 
serves reminder may possible prove strong space lower bounds stream computations considerations applications enable circumvent negative results 
saks sun provide space lower bounds distance approximation vectors norm data stream model 
munro paterson showed algorithm computes quantiles exactly passes requires statistics count sum min max number distinct values sliding windows model datar 
general lower bound technique sampling algorithms bar yossef 
useful deriving space lower bounds data stream algorithms resort oblivious sampling 
remains interesting open problem obtain similar general lower bound techniques classes algorithms data stream model 
feel techniques communication complexity results prove useful context 
miscellaneous section give algorithmic results data streams 
data mining space 
space lower bounds maintaining simple decision trees form synopsis prediction 
domingos studied problem maintaining decision trees data streams 
clustering way summarize data 
consider median formulation clustering data points metric space objective choose representative points sum errors data points minimized 
error data point distance point nearest chosen representative points 
guha single pass algorithm maintaining approximate medians cluster centers uses space amortized time data element compute constant factor approximation median problem 
algorithm uses divide andconquer approach works follows clustering proceeds hierarchically small number original data points clustered centers 
centers weighted number points closest local solution 
get weighted cluster centers clustering different sets cluster higher level cluster centers 
multiple streams gibbons considered problem computing simple functions number distinct elements unions data stream 
useful applications distributed environment feasible send data central site processing 
important note techniques earlier especially sketching amenable distributed computation multiple streams 
reductions streams bar yossef kumar sivakumar introduce notion reductions streaming algorithms 
order reductions efficient needs employ list efficient streaming algorithms 
idea list efficient streaming algorithms data item time implicitly list data items succinct form 
algorithm efficiently process list time function succinct representation size said list efficient 
develop list efficient algorithms reduction paradigm address interesting problems computing frequency moments includes special case counting number distinct elements counting number triangles graph stream 
prove space lower bound problem 
best knowledge henzinger little graph problems streaming model 
algorithms useful analyzing large graphical structures web graph 
property testing feigenbaum introduced concept streaming property testers streaming spot checkers 
programs pass data small space verify data satisfies certain property 
show properties efficiently testable streaming tester sampling tester problems converse true 
efficient sampling tester testing property sequence samples space time 
sequence said grouped imply type occurrences single contiguous run 
natural relaxation property natural property may desire massive streaming data set 
discussed illustrates properties efficiently testable sampling algorithms streaming algorithms 
measuring measuring data stream useful applications example useful determining choice sort algorithm underlying data 
ajtai studied problem estimating number inversions measure permutation factor permutation data stream model 
obtained algorithm space time data element 
prove space lower bound randomized exact computation showing approximation essential 
isolated number issues arise considering data management query processing algorithmic problems new setting continuous data streams 
proposed initial solutions described past current related data streams suggested general architecture data stream management system dsms 
point take step back consider meta questions regard motivations need new approach 
effective data stream systems conventional database technology enhanced support streaming primitives triggers temporal constructs data rate management 
need database researchers develop fundamental general purpose models algo rithms systems data streams 
suffices build ad hoc solutions specific application network management web monitoring security finance sensors 
killer apps data stream systems 
believe questions answered affirmative course time tell 
assuming positive answers meta questions see fundamental aspects design data stream systems discussed detail 
important general question interface provided dsms 
approach stanford extend sql support stream oriented primitives providing purely declarative interface traditional database systems allow direct submission query plans 
contrast aurora project provides procedural boxes arrows approach primary interface application developer 
fundamental issues discussed include timestamping ordering support sliding window queries dealing effectively blocking operators 
major open question little say dealing distributed streams 
sense redirect streams central location query processing imperative push processing points arrival distributed streams raising host issues level dsms 
issue touched briefly section constraints streams exploited query processing 
systems questions remain open query optimization construction synopses resource management approximate query processing development appropriate accepted benchmark data stream systems 
purely theoretical perspective interesting open question defining extensions relational operators handle data stream constructs study resulting stream algebra properties extensions 
foundation surely key developing general purpose understood query processor data streams 
members stanford stream research group contributions feedback 
acharya gibbons poosala 
congressional samples approximate answering group queries 
proc 
acm sigmod intl 
conf 
management data pages may 
acharya gibbons poosala ramaswamy 
join synopses approximate query answering 
proc 
acm sigmod intl 
conf 
management data pages june 
ajtai jayram kumar sivakumar 
counting inversions data stream 
manuscript 
alon gibbons matias szegedy 
tracking join self join sizes limited storage 
proc 
acm symp 
principles database systems pages 
alon matias szegedy 
space complexity approximating frequency moments 
proc 
annual acm symp 
theory computing pages 
franklin 
efficient filtering xml documents selective dissemination information 
proc 
intl 
conf 
large data bases pages sept 
arasu babcock babu widom 
characterizing memory requirements queries continuous data streams 
proc 
acm symp 
principles database systems june 
available stanford edu pub 
avnur hellerstein :10.1.1.34.8546
eddies continuously adaptive query processing 
proc 
acm sigmod intl 
conf 
management data pages may 
babcock datar motwani 
sampling moving window streaming data 
proc 
annual acm siam symp 
discrete algorithms pages 
babu widom 
continuous queries data streams 
sigmod record sept 
bar yossef kumar sivakumar 
sampling algorithms lower bounds applications 
proc 
annual acm symp 
theory computing pages 
bar yossef kumar sivakumar 
reductions streaming algorithms application counting triangles graphs 
proc 
annual acm siam symp 
discrete algorithms pages 
barbara new jersey data reduction report 
ieee data engineering bulletin 
ghosh gupta subramanian 
analytic functions oracle 
available www db stanford edu archive speakers pdf 
larson 
updating derived relations detecting irrelevant autonomously computable updates 
acm trans 
database systems 
carney cherniack convey lee stonebraker tatbul zdonik 
monitoring streams new class dbms applications 
technical report cs department computer science brown university feb 
chakrabarti garofalakis rastogi shim 
approximate query processing wavelets 
proc 
intl 
conf 
large data bases pages sept 
charikar chaudhuri motwani narasayya 
estimation error guarantees distinct values 
proc 
acm symp 
principles database systems pages 
chaudhuri das narasayya 
robust optimization approach approximate answering aggregate queries 
proc 
acm sigmod intl 
conf 
management data pages may 
chaudhuri motwani 
sampling relational operators 
bulletin technical committee data engineering 
chaudhuri motwani narasayya 
random sampling histogram construction 
proc 
acm sigmod intl 
conf 
management data pages 
chaudhuri motwani narasayya 
random sampling joins 
proc 
acm sigmod intl 
conf 
management data pages june 
chaudhuri narasayya 
efficient cost driven index selection tool microsoft sql server 
proc 
intl 
conf 
large data bases pages 
chen dewitt tian wang 
scalable continuous query system internet databases 
proc 
acm sigmod intl 
conf 
management data pages may 
cortes fisher pregibon rogers 
hancock language extracting signatures data streams 
proc 
acm sigkdd intl 
conf 
knowledge discovery data mining pages aug 
datar gionis indyk motwani 
maintaining stream statistics sliding windows 
proc 
annual acm siam symp 
discrete algorithms pages 
dobra gehrke garofalakis rastogi 
processing complex aggregate queries data streams 
proc 
acm sigmod intl 
conf 
management data 
domingos hulten 
mining high speed data streams 
proc 
acm sigkdd intl 
conf 
knowledge discovery data mining pages aug 
domingos hulten spencer 
mining time changing data streams 
proc 
acm sigkdd intl 
conf 
knowledge discovery data mining pages 
duffield grossglauser 
trajectory sampling direct traffic observation 
proc 
acm sigcomm pages sept 
faloutsos ranganathan manolopoulos 
fast subsequence matching time series databases 
proc 
acm sigmod intl 
conf 
management data pages may 
fang shivakumar garcia molina motwani ullman 
computing iceberg queries efficiently 
proc 
intl 
conf 
large data bases pages 
feigenbaum kannan strauss viswanathan 
approximate difference algorithm massive data streams 
proc 
annual ieee symp 
foundations computer science pages 
feigenbaum kannan strauss viswanathan 
testing spot checking data streams 
proc 
annual acm siam symp 
discrete algorithms pages 
flajolet martin 
probabilistic counting 
proc 
annual ieee symp 
foundations computer science 
garcia molina yang 
expiring data warehouse 
proc 
intl 
conf 
large data bases pages aug 
gehrke korn srivastava 
computing correlated aggregates continual data streams 
proc 
acm sigmod intl 
conf 
management data pages may 
gibbons 
estimating simple functions union data streams 
proc 
acm symp 
parallel algorithms architectures pages 
gilbert guha indyk kotidis muthukrishnan strauss 
fast small space algorithms approximate histogram maintenance 
proc 
annual acm symp 
theory computing 
gilbert kotidis muthukrishnan strauss 
surfing wavelets streams pass summaries approximate aggregate queries 
proc 
intl 
conf 
large data bases pages 
greenwald khanna 
space efficient online computation quantile summaries 
proc 
acm sigmod intl 
conf 
management data pages 
guha koudas 
approximating data stream querying estimation algorithms performance evaluation 
proc 
intl 
conf 
data engineering 
guha koudas shim 
data streams histograms 
proc 
annual acm symp 
theory computing pages 
guha mishra motwani callaghan 
clustering data streams 
proc 
annual ieee symp 
foundations computer science pages nov 
gupta jagadish mumick 
data integration self maintainable views 
proc 
intl 
conf 
extending database technology pages mar 
haas naughton seshadri stokes 
sampling estimation number distinct values attribute 
proc 
intl 
conf 
large data bases pages sept 
hellerstein franklin adaptive query processing technology evolution 
ieee data engineering bulletin june 
hellerstein haas wang 
online aggregation 
proc 
acm sigmod intl 
conf 
management data pages may 
henzinger raghavan rajagopalan 
computing data streams 
technical report tr compaq systems research center palo alto california may 
indyk 
stable distributions pseudorandom generators embeddings data stream computation 
proc 
annual ieee symp 
foundations computer science pages 
ioannidis poosala 
histogram approximation set valued query answers 
proc 
intl 
conf 
large data bases pages sept 
networks home page 
www com 
ives florescu friedman levy weld 
adaptive query execution system data integration 
proc 
acm sigmod intl 
conf 
management data pages june 
jagadish koudas muthukrishnan poosala sevcik suel 
optimal histograms quality guarantees 
proc 
intl 
conf 
large data bases pages 
jagadish mumick silberschatz 
view maintenance issues chronicle data model 
proc 
acm symp 
principles database systems pages may 
nisan 
communication complexity 
cambridge university press 
liu pu tang 
continual queries internet scale event driven information delivery 
ieee trans 
knowledge data engineering aug 
madden franklin 
stream architecture queries streaming sensor data 
proc 
intl 
conf 
data engineering feb 
appear 
madden hellerstein shah raman 
continuously adaptive continuous queries streams 
proc 
acm sigmod intl 
conf 
management data june 
appear 
manku motwani 
approximate frequency counts streaming data 
manuscript 
manku rajagopalan lindsay 
approximate medians quantiles pass limited memory 
proc 
acm sigmod intl 
conf 
management data pages june 
manku rajagopalan lindsay 
random sampling techniques space efficient online computation order statistics large datasets 
proc 
acm sigmod intl 
conf 
management data pages june 
matias vitter wang 
wavelet histograms selectivity estimation 
proc 
acm sigmod intl 
conf 
management data pages june 
matias vitter wang 
dynamic maintenance wavelet histograms 
proc 
intl 
conf 
large data bases pages sept 
motwani raghavan 
randomized algorithms 
cambridge university press 
munro paterson 
selection sorting limited storage 
theoretical computer science 
nguyen abiteboul 
monitoring xml data web 
proc 
acm sigmod intl 
conf 
management data pages may 
parker muntz chau 
stream query processing system 
proc 
intl 
conf 
data engineering pages feb 
parker simon valduriez 
svp model capturing sets lists streams parallelism 
proc 
intl 
conf 
large data bases pages aug 
poosala ganti 
fast approximate answers aggregate queries data cube 
proc 
intl 
conf 
scientific statistical database management pages july 
quass gupta mumick widom 
making views self maintainable data warehousing 
proc 
intl 
conf 
parallel distributed information systems pages dec 
raman raman hellerstein 
online dynamic reordering interactive data processing 
proc 
intl 
conf 
large data bases 
saks sun 
space lower bounds distance approximation data stream model 
proc 
annual acm symp 
theory computing 
schreier pirahesh agrawal mohan 
alert architecture transforming passive dbms active dbms 
proc 
intl 
conf 
large data bases pages sept 
sellis 
multiple query optimization 
acm trans 
database systems 
seshadri livny ramakrishnan 
sequence query processing 
proc 
acm sigmod intl 
conf 
management data pages may 
seshadri livny ramakrishnan 
seq model sequence databases 
proc 
intl 
conf 
data engineering pages mar 
seshadri livny ramakrishnan 
design implementation sequence database system 
proc 
intl 
conf 
large data bases pages sept 
shanmugasundaram tufte dewitt naughton maier 
architecting network query engine producing partial results 
proc 
intl 
workshop web databases pages may 
snodgrass ahn 
taxonomy time databases 
proc 
acm sigmod intl 
conf 
management data pages 

standard 
line analytical processing sql olap 
available www ansi org document iso iec amd 
stanford stream data management stream project 
www db stanford edu stream 
sullivan 
tribeca stream database manager network traffic analysis 
proc 
intl 
conf 
large data bases page sept 
terry goldberg nichols oki 
continuous queries append databases 
proc 
acm sigmod intl 
conf 
management data pages june 
home page 
www com 
tucker maier sheard fegaras 
enhancing relational operators querying punctuated data streams 
manuscript 
available www cse ogi edu dot niagara pdf 
ullman widom 
course database systems 
prentice hall upper saddle river new jersey 
urhan franklin 
xjoin reactively scheduled pipelined join operator 
ieee data engineering bulletin june 
naughton 
rate query optimization streaming information sources 
proc 
acm sigmod intl 
conf 
management data june 
appear 
vitter 
random sampling reservoir 
acm trans 
mathematical software 
vitter 
external memory algorithms datastructures 
abello editor external memory algorithms pages 
dimacs 
vitter wang 
approximate computation multidimensional aggregates sparse data wavelets 
proc 
acm sigmod intl 
conf 
management data pages june 
vitter wang iyer 
data cube approximation histograms wavelets 
proc 
intl 
conf 
information knowledge management nov 
xml path language xpath version nov 
recommendation available www org tr xpath 
yahoo home page 
www yahoo com 

