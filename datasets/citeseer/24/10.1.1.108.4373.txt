exploiting symmetry protocol testing software engineering sen sen august centrum voor wiskunde en informatica report sen issn cwi box gb amsterdam netherlands cwi national research institute mathematics computer science 
cwi part stichting mathematisch centrum smc dutch foundation promotion mathematics computer science applications 
smc sponsored netherlands organization scientific research nwo 
cwi member ercim european research consortium informatics mathematics 
copyright stichting mathematisch centrum box gb amsterdam nl kruislaan sj amsterdam nl telephone telefax exploiting symmetry protocol testing jan cwi box gb amsterdam netherlands spring cwi nl computing science institute university nijmegen box gl nijmegen netherlands test generation execution hampered large state spaces systems involved 
automata transition system test algorithms advantage symmetry behavior specification implementation may substantially reduce amount tests 
framework describing exploiting symmetries black box test derivation methods finite state machines fsms 
algorithm symmetry relation traces fsm computes subautomaton characterizes fsm symmetry 
machinery applied classical method test derivation 
focus symmetries defined terms repeating patterns 
mathematics subject classification acm computing classification system keywords phrases conformance testing automated test generation state space reduction symmetry note research author carried part project specification testing verification software technical applications stichting mathematisch centrum philips research laboratories contract rwc ps ps 
research second author partially supported netherlands organization scientific research nwo contract sion 
current affiliation philips research laboratories eindhoven prof aa eindhoven netherlands 
long recognized proper functioning components open distributed systems components thoroughly tested interoperability conformance internationally agreed standards 
thorough efficient testing high degree automation test process crucial 
unfortunately methods automated test generation execution seriously hampered large state spaces short version report appeared editors formal description techniques protocol specification testing verification forte xi xviii pages 
kluwer academic publishers 

implementations test 
ways deal problem exploit structural properties implementation test safely assumed hold 
focus advantage symmetry structure systems 
symmetry defined may type parameterized system parameters may example range ids components ports contents messages 
setting test theory finite state machines fsms 
assume specification implementation test fsm implementation black box 
explicitly specification automaton collection tests derived applied black box 
exploiting symmetry allow restrict test process subautomata specification implementation characterize systems symmetry smaller 
symmetry defined terms equivalence relation trace sets specification implementation 
requirements imposed ensure symmetry allows find desired subautomata 
instantiate general framework focusing symmetries defined terms repeating patterns 
experiments pattern symmetries supported prototype tool implemented open sar tool set shown substantial savings may obtained number tests 
assume black box system symmetrical structure cf 
uniformity hypothesis appropriate speak gray box testing 
specification fsm generally possible verify particular relation symmetry system black box implementation assume case 
reliability assumption tester responsibility 
respect may think exploiting symmetry structured way test case selection systems large tested exhaustively subautomata tested thoroughly 
deal symmetry protocol testing 
similar techniques developed test generation methodology labeled transition systems success trees canonical testers 
case symmetry equivalence relation traces representatives equivalence classes test generation 
approach approach start different testing methodologies easy compare 
symmetry relation defined bijective renamings action labels pattern definition generalizes approach 
hand case symmetry relation result subautomata specification implementation characterize systems symmetry impose certain requirements absent 
symmetrical structures product automaton interoperating systems studied 
assumed systems tested isolation attention focused pruning product automaton exploiting symmetry arising presence identical peers 
away internal composition system focus defining general framework describing symmetries fsms 
organized follows 
section contains basic definitions concerning fsms behavior 
section introduce define general notion trace symmetry 
show symmetry behavior system subautomaton system computed called kernel characterizes 
finite state machines behavior system symmetry 
section apply machinery classical method test derivation 
section instantiate general framework focusing symmetries defined terms repeating patterns 
section contains extensive example inspired 
discuss section 
code listings examples appendices finite state machines section briefly terminology concerning finite state machines behavior need rest 
denote set natural numbers 
finite sequences denoted greek letters 
concatenation sequences denoted juxtaposition denotes empty sequence sequence containing single element simply denoted empty returns element returns element 
sets sequences sequence vw set symbols define xi xi xxi definition 
finite state machine fsm structure finite set states finite set actions finite set edges initial state require deterministic pair edges write sa components fsm omit subscripts clear context 
range states actions edges 
denote state fsm fsm sb sa ea 
execution fragment fsm possibly empty alternating sequence states actions state ai si si 
ifs loop ifn non empty loop 
execution execution fragment begins initial state execution fragment trace defined sequence 
sequence actions write execution fragment loop looping trace 
exists 

symmetry symmetry section introduce notion symmetry employed 
want able restrict test process subautomata specification implementation characterize systems symmetry 
papers exploiting symmetry model checking subautomata constructed explicitly fsms identifying collapsing symmetrical states 
concerned black box testing definition impossible refer directly states black box 
traditional fsm test theory fsms assumed deterministic state black box identified unique state black box reached certain trace system 
natural define symmetry relation traces 
basic notion symmetry fsm equivalence relation closed relation sequence actions related trace sequence trace 
idea construct specification automaton automaton trace set included trace set specification contains representative trace equivalence class equivalence relation traces specification 
order able define symmetry pair consisting equivalence relation representative choosing function 
impose requirements symmetry 
specification demand equivalence class symmetry represented unique trace prefixes trace represented prefixes representing trace representative traces respect loops 
third requirement means representative trace looping trace trace looping part removed representative trace 
requirement introduces state information definition symmetry 
requirements enable construct subautomaton specification called kernel trace specification represented trace kernel 
course case symmetry preserved prefixes respects loops requirements come free 
black box implementation symmetry demand closed symmetry 
tests established implementation displays certain behavior assumption display symmetrical behavior 
section theory applied mealy machines addition need way identify subautomaton implementation covered tests derived kernel specification 
definition 
symmetry fsm pair binary equivalence relation representative function 
closed traces traces 

traces length related 

satisfies 
construction kernel prefix closed traces loop respecting representative traces traces looping trace 
mentioned demand exists symmetry specification implementation test required closed symmetry 
proposition 
definition 
symmetry fsm minimal subautomaton traces traces 
construction kernel section fix fsm symmetry presents algorithm constructs kernel basically explores state space keeping mind trace leads currently visited state 
soon trace contains loop algorithm explore 
enabled denotes set actions ea contains edge eff denotes furthermore repr denotes set actions iff exists action call function see lemma 
definition action deterministic closed non empty non empty 
justifies function choose nondeterministically chooses element algorithm global variable growing state space returned algorithm updated execution procedure build 
local variable build significant execution algorithm useful proving correctness 
remainder section devoted correctness algorithm kernel 
order prove algorithm works properly prove terminates creates subautomaton build uses parameters properly 
lemma 
execution algorithm kernel terminates 
proof 
number states finite nested call build seen build seen seen seen seen 
finitely levels nested calls 
furthermore number enabled transitions finite loop empties decreases strictly monotonically loop empty finitely nested calls build 
lemma 
execution build automaton subautomaton grows monotonically 

construction kernel function kernel fsm var fsm procedure build seen var seen enabled choose repr eff sk sk ek ek build seen od od fi sk ek build return 
algorithm kernel 
construction kernel proof 
obvious algorithm 
lemma concerns value variable moment call build 
lemma 
kernel execution calls build seen 
moment proof 
induction length 


observing algorithm procedure build clear call build seen aand seen 
inthe initialization defined equal ass weare done 

suppose trace length kernel calls build seen 
call build seen occur execution call build seen 
induction hypothesis know build seen calls build seen just added ek enabled ands eff 
build seen follows traces 
call 
build seen calls build seen definition choose repr induction hypothesis completes proof 
lemma 
kernel execution called build seen 
proof 
follows immediately lemmas 
lemma 
kernel proof 
know lemma fact execution starts empty transition added execution line algorithm kernel 
happens execution call build seen forsome seen lemma may conclude completion 
definition execution call build seen line see lemma 
kernel calls build seen execution build holds 
construction kernel 
termination loop property holds kernel called build eff seen 
termination loop property holds proof 

loop started empty 
statement adds line executed lines executed edge added ek build seen called 

start loop enabled start loop 
termination loop empty 
actions added removed line 
execution loop certainly enabled 
observe execution loop repr repr enabled 
moment removed line condition 
defined line changed observation holds repr enabled 
enabled definition representative uniqueness representative done 
lemma 
kernel execution calls build seen sn ands 
kernel calls build 
build si calls build si ai sj 
sn seen proof 
induction length 

result follows immediately 

suppose am kernel calls build seen am sm am 
build seen occur execution call build seen seen seen 
induction hypothesis know seen sm kernel calls build build si 
construction kernel calls build si ai sj 
build sm calls build sm seen need prove sm seen sj 
looking statements build sm sm seen see sm seen sm sj sm sj result follows 
lemma 
kernel execution calls build seen seen proof 
lemmas follows traces 
lemma follows lemma 
theorem completes proof fact algorithm kernel returns kernel theorem 
kernel 

kernel subautomaton 
traces traces 
proof 
prove item 
algorithm kernel obvious state initial state transition leading subautomata initial states equal 
deterministic representative traces unique lemma transition part representative trace see transition combining observations see state conclude subautomaton item 
ais closed traces say prove stronger property inv induction length length 
inv traces seen 
kernel execution calls build seen contains non empty looping trace kernel execution calls build seen 
andalso sot sk traces 
suffices observe kernel calls build 

test derivation symmetric mealy machines 
induction hypothesis ih inv suppose 
prefixed closed traces traces 
distinguish cases 
contain non empty looping trace 
show set seen kernel calls build seen 
lemma know traces proves inv 
assume inv traces 
looping trace set seen kernel calls build seen 
inspect execution procedure build call 
lemma know seen lemma know completion loop build seen called state action lemma know soc cand build seen called 
contains non empty looping trace 
exist andt contains non empty looping trace show set seen kernel calls build seen traces 
trivially 
prefix closed ris loop respecting may apply ih obtain inv inv hold 
means traces traces looping trace kernel calls build seen 
subautomaton lemma know traces 
test derivation symmetric mealy machines section apply machinery developed previous sections mealy machines 
exists wealth test generation algorithms mealy machine model 
show classical method adapted setting symmetry 
main idea test derivation entire specification automaton kernel 
technical detail require mealy machines minimal observed setting symmetry 
notation chow 

test derivation symmetric mealy machines definition 
mealy machine deterministic fsm ia oa ia oa finite disjoint sets inputs outputs respectively 
require input enabled input deterministic state sa input ia exists precisely output oa 
input sequences elements ia input sequence sa write exists trace result projecting ia case write outcome execution fragment sand trace denoted 
distinguishing sequence states input sequence outcome outcome 
say distinguishes chow conformance defined existence isomorphism specification implementation 
assume automata minimal show existence bisimulation specification implementation 
bisimilarity known process equivalence concurrency theory 
minimal automata bisimilarity equivalent isomorphism deterministic automata bisimilarity equivalent equality trace sets 
definition 
fsms 
relation sa sb bisimulation iff ands ands 
implies sa implies sa bisimilar notation exists bisimulation 
call states sa bisimilar notation exists bisimulation 
relation equivalence relation sa class equivalence class sa main ingredient chow test suite characterizing set specification set input sequences distinguish inequivalent states inducing different output behavior 
case states inequivalent non bisimilar different trace sets 
presence symmetry need characterizing set entire specification automaton kernel 
kernel need input enabled inequivalent states need common input sequence distinguishes 
characterizing set contains states kernel inequivalent original specification automaton input sequence states common specification distinguishes 
constructing distinguishing sequences specification automaton smaller kernel course potentially expensive setting symmetry 
test derivation symmetric mealy machines may lead large sequences 
number states kernel small need test execution may benefit considerably restriction kernel 
expect cases distinguishing sequences marked subautomaton specification envelopes kernel 
definition 
test pair mealy machine pair kernel set input sequences holds 
pair states sk contains input sequence outcome outcome 
proof chow test suite complete fault coverage crucially relies assumption upper bound number states black box implementation correctly estimated 
specification implementation assumed input sets input enabled equivalent correct estimate number states implementation reached start state input sequence specification 
similarly assume give upper bound number states black box reachable start state input sequence kernel specification 
call subautomaton implementation generated states image kernel 
technically assumption state space black box bound maximum length distinguishing sequences needed characterizing set implementation 
kernel image kernel need input enabled may distinguishing sequences states image constructed image 
sufficient estimate number states image addition estimate long suffix distinguishing sequence starts step outside image kernel 
definition 
mealy machines input set kernel ak sequence input sequence called related exists sequence define subautomaton sb related eb 
definition parameter upper bound length part distinguishing sequence steps outside image kernel 
definition 
subautomaton mealy machine self contained number bisimulation classes sb pair 
test derivation symmetric mealy machines states exist input sequences length respectively lemma generalization lemma 
outcome 
lemma 
mealy machines input set test pair 
suppose 
number bisimulation classes sc bounded 

self contained 
distinguishes bisimulation classes sc 
states distinguishes proof 
induction 
prove exist bisimulation classes sc distinguishes 
proves result assumption number bisimulation classes sc bounded 

assumption distinguishes bisimulation classes sc surely distinguishes classes 

ifi distinguishes bisimulation classes sc done 
suppose 
exist distinct bisimulation classes intersection sc non empty distinguish 
exist states sc sc distinguish 
self contained define smallest number contains input sequence outcome outcome 
exist states th successors respectively distinguish distinguish 
distinguishes bisimulation classes belong 
result allows construct characterizing set image kernel implementation 
test suite resulting method consists concatenations sequences transition cover specification sequences definition 
transition cover kernel mealy machine finite collection input sequences transitions input sequences contains 
test derivation symmetric mealy machines follows main theorem 
theorem 
spec impl mealy machines input set assume symmetry spec impl closed 
test pair spec 
impl 
suppose 
number bisimulation classes spec sk 
number bisimulation classes impl sc bounded 

self contained impl 

spec impl 
spec impl proof 
spec impl deterministic suffices prove traces spec traces impl 
spec input enabled impl input deterministic suffices prove traces spec traces impl 
impl closed follows immediately item claim 
claim 
traces spec 
traces impl 
abbreviates impl 
ifs impl impl impl impl 
write note construction distinguishes bisimulation classes spec intersection sk non empty 
holds bisimulation classes impl intersection sc non empty 
lemma 
proof claim proceeds induction length 


certainly traces impl 
item 
consider input sequence show impl assume impl impl elements lead spec state follows impl 
lemma impl 
patterns 
write 
induction hypothesis traces traces impl 
say kernel spec exists action state sk exist input sequences impl impl impl impl induction hypothesis item spec impl exists unique state iu exists unique state traces impl 
impl input deterministic prove impl unique state impl iv 
consider 
suffices prove elements spec follows forall 
lemma patterns section describe symmetries patterns 
pattern fsm set permutations set actions called transformations 
behavior system transformations indicate template may filled obtain symmetric variants cover full behavior system 
interesting example automaton symmetric protocol representing behavior peer hosts may engage atm call setup procedure 
behavior completely symmetric identity peers 
fsm representation 
action means output atm service caller action means input caller atm service 
action set denotes request caller atm service set call caller 
set request followed form call proc service performed 
action conn indicates called side ready connection acknowledged conn ack 
caller may skip sending call proc send conn transition state 
typical template subautomaton representing call set initiated single initiator caller transformation permutation actions generated swapping roles initiator responder 
template displayed 
example section featuring chatbox supports multiple conversations callers template chatting callers transformations shuffle identity callers 
template fsm may arbitrarily complex intuitively increasing complexity indicates stronger symmetry assumption black box implementation 

patterns set set set set set set set set call proc call proc call proc call proc conn conn conn conn set set set set call proc call proc call proc call proc set set set set conn ack conn ack conn ack conn ack conn conn conn conn set set set set conn ack conn ack conn ack conn ack conn conn conn conn conn conn conn conn call proc call proc call proc call proc set set set set conn conn conn conn set set set set set set set set call proc call proc call proc call proc conn conn conn conn atm call setup protocol set set set set set set set set call proc call proc call proc call proc conn conn conn conn set set set set call proc call proc call proc call proc set set set set conn ack conn ack conn ack conn ack conn conn conn conn conn conn conn conn template define pattern symmetries need terminology partial functions multisets 
partial function thenf means defined means defined 
multiset set form 
ak nk ai element ni denotes multiplicity 
weuse cond shorthand multiset created adding single condition cond holds 
definition patterns 
pattern pair fsm called template finite set permutations 
sequence 
fn partial functions 
fn exec 
fn sequence edges obtained function fi edge fi remainder section fix fsm pattern explain defines symmetry behavior fsm transformation renaming actions 
copy particular instantiation template 
intuitively trace set included trace set parallel composition copies indexed elements enforced synchronization actions traces traces parallel composition define symmetry relation traces terms behavior copies permutations index set 
definition intuitive requirement way relation representative function formulated succinctly 
particular parallel composition copies intuitive requirement formal rephrasing apply 

patterns definition 
element covering sequence 
fn partial functions fi non empty domain 
fi ai act 

sequence exec 
fi induces execution 
sequence trace ai trace 
say covers exists covering call loop preserving holds 
suppose traces covered 
fn 
gm looping trace 
exec 
fn exec 
fn 
gm intuitively requirements mean 
non empty domain requirement partial functions fi ensures inclusion trace set trace set parallel composition copies requirements express covering contain junk 
requirement corresponds enforced synchronization actions parallel composition 
lemma 
trace exists covering proof 
deterministic coverings uniquely determined traces length covered position holds 
listings respectively copies participate action position states copies participating edge follow participating equal permutation 
traces length symmetric iff covered covered coverings variants 
definition 
elements cov 
fn cov 
gn respectively 
cov cov said variants fi gi 
define binary relation covered variant coverings easy check equivalence relation 
section write 
patterns important special case 
suppose consists parallel composition components ci indexed elements set identical index occur parameters actions 
traces exists permutation index set indices induces renaming indices actions execution ci induces symmetric 
lemma 
covers 
fn 
fn lemma 
covers aand band 
proof 
covered 
fn 
gn respectively 
lemma coverings induce coverings 
fn 
gn respectively clearly variants 
previous lemmas imply result 
corollary 
relation prefix closed traces traces 
definition reasonable demand trace covered need closure property 
call binary relation persistent traces implies exists action 
define representative function 
assume total irreflexive ordering ordering course exists choice may greatly influence size kernel constructed symmetry definition 
total irreflexive ordering ordering induces reflexive transitive ordering traces length way define element 
show representative function 
prove prefix closed 
lemma 
suppose persistent closed 
traces 
proof 
contradiction 
suppose exists trace 
note closed traces 
persistence implies exists action prefix closed corollary follows 
definition 
definition 
contradiction 

patterns show loop respecting prove auxiliary results 
lemma 
covers 
fn 
gn respectively exec 
fi fi exec 
gi gi proof 
know fi gi 
result follows immediately 
lemma 
suppose loop preserving pattern total irreflexive ordering definition 
suppose trace covered closed persistent traces looping trace iff 
proof 
write 
fn 
gm 
hk cover 
lemma 
fn 
gm covers 
fn covers 
loop preserving know exec 
fn exec 
fn 
gm 
fn 
hk covers 
traces traces 

fn 
cover 
equation fact 
fn 
gm covers follows 
fn 
gm 
covers 
obtain hi follows 
traces traces 

fn 
gm 
cover 
equation follows 
fn 
covers 
obtain hi follows 

patterns prove loop respecting 
lemma 
suppose loop preserving pattern total irreflexive ordering definition 
suppose trace covered closed persistent traces looping trace 
proof 
contradiction 
suppose 
lemma 
definition 
lemma 
definition 
contradiction 
result allows pattern approach computing kernel 
example atm switch computed kernel fsm symmetry induced template ordering obeys relation set set 
surprisingly resulting kernel identical template 
theorem 
suppose loop preserving pattern total irreflexive ordering definition 
suppose trace covered closed persistent symmetry proof 
show representative function 
immediate requirement prefix closed follows lemma 
loop respecting follows lemma 
lemma extra ingredient making implementation algorithm kernel section efficient 
implementation described section 
lemma 
suppose pattern 
fn 
gm respectively 
exec 
fn exec 
gm 
fn 
hk covers 
gm 
hk covers lemma 
suppose symmetry definition covers 
fn 
gm respectively 
foreach exec 
fn exec 
gm rand 
examples proof 
prove direction follows immediately 
contradiction 
suppose definition know lemma know covering part equal covering part likewise part certainly hold 
unicity representatives definition obtain 
yields contradiction assumption examples section report initial experiments application symmetry testing examples 
section presents example chatbox section presents example cyclic train section presents example ring leader election protocol 
code listings examples appendices part test generation trajectory implemented tool environment open sar prototyping algorithm kernel section 
section relates prototyping experiences 
pattern symmetry section apply test derivation method section 
chatbox service section report experiments application symmetry testing chatbox 
chatbox offers possibility talk users connected chatbox 
joins connects chatbox talk connected users leaves disconnects 
join leave time 
simplicity assume user instance talk user 
demand user waits reply talking partners leaves 
contents messages consider message 
service primitives provided chatbox join leave dreq dind obvious meaning see 
lack space give full formal specification chatbox template 
test service chatbox may offered vendor components implementation customers allowed desire inspect 
example inspired conference protocol 
changes stemming need keep protocol manageable experiments losing symmetry pursued 
mention absence queues multicasts restriction number outstanding messages 
ignore issues test contexts test architectures points control observation 
lotos model crl model appendix symmetry inherent protocol immediate pairs talking users replaced pairs talking users long done systematically definitions 
example trace user joins leaves joins 
examples usera join userb usera leave userb chatbox protocol service usera userb dreq dind symmetric trace user joins leaves user joins 
essence user joined left user point users new join actions symmetric 
note symmetry general symmetry induced solely permutation actions ids users 
template symmetry basically consists conversation users including joining leaving transformations set shuffle identity users 
feel reasonable assumption black implementation offering service symmetric sense 
applied machinery users 
considered simpler version protocol joining leaving 
start test generation computing kernel specifications 
table results applying prototype implementation algorithm kernel 
prototype able find significantly smaller mealy machine kernel models provided suitable ordering see definition actions symbols representative function 
kernels constructed consist interleavings transformations pattern constrained symmetry ordering 
instance chatbox users joining leaving take ordering defined follows 
sending message sending message sending reply sending reply 
ordering kernel contains traces messages user sent messages user messages user sending replies handled reverse order 
trace different order sending messages computed trace kernel exactly theorem states 
technique dealing traces reminiscent partial ordering techniques 
table see kernel size relatively smaller considering joining leaving difference due fact send message user left joining leaving symmetry messages sent 
computed kernels construct test pairs determining kernel set input sequences constitutes characterizing set kernel defined definition 
part automated easily seen generic 
examples model kernel states trans minimal 
states trans users users joining leaving users users table kernel statistics chatbox argument pair inequivalent non bisimilar states short distinguishing sequences exist 
easy devise transition cover kernel size proportional size kernel 
shown theorem size test suite generated depend magnitude numbers indicating search space distinguishing sequences image kernel implementation 
boils questions size image part implementation kernel 
size minimal distinguishing experience inequivalent non bisimilar states image part implementation 
steps distinguishing sequence perform outside image kernel 
questions variations classical state space questions black box testing 
practical reasons numbers usually taken larger corresponding numbers specification 
cyclic train section report initial experiments application symmetry testing cyclic train 
example inspired elevator specification vaandrager course declarative specifications systems university nijmegen spring 
symmetry elevator obviously sought floor numbers lowest highest floor possible go lower higher modified example little elevator cyclic lowest floor elevator reach highest floor moving floor vice versa 
example bit intuitive rename cyclic elevator cyclic train floors stations 
see 
train runs cyclic track station station 
change direction needed sent destination button inside train pressed called station button station pressed 
consider running example cyclic train running stations 
train moving station station 
symmetry inherent protocol immediate behavior train requested go station moving station symmetric behavior stations involved 
example trace train starts station called station sent station symmetric trace train starts station called station sent station 
template symmetry basically consists train arriving current station left 
examples station station station cyclic train stations station right opening doors closing doors moving away transformations set shuffle identity station 
applied machinery trains stations 
considered version train mealy style transition consists input output action 
assumed state give input pressing button output input depends state train 
input train may want move station station 
modeled input action wait 
table results applying prototype implementation algorithm kernel 
state spaces generated crl code see appendix minimized 
kernel significantly smaller models provided suitable ordering see definition actions symbols representative function 
orderings table refer ordering symmetric request actions train go certain station 
numbers indicate station train go 
mealy style models turns orderings listed table better 
models stations fact best orderings 
models orderings tested 
naturally state space kernel constructed kernel get larger process takes longer 
ring leader election protocol section report initial experiments application symmetry testing ring leader election protocol 
example taken 
protocol setting number stations connected unidirectional ring messages passed central resource station access time 
exclusive access guaranteed token passed stations 
links connect stations unreliable 
examples model kernel states trans minimal 
states trans ordering stations stations mealy style stations stations stations stations stations table kernel statistics cyclic train model kernel states trans minimal 
states trans stations stations table kernel statistics ring leader election protocol stations may crash moment token lost new token generated 
leader election protocol ensures leader chosen may resource generate new token 
moment new election may started 
protocol proved correct explained detail 
crl model see appendix translated lotos code pages 
symmetry inherent protocol immediate behavior station symmetric behavior station 
pattern symmetry equal behavior station operating isolation 
generated state space pattern crl description 
resulting state space appendix applied machinery rings stations 
table results applying prototype implementation algorithm kernel 
state spaces generated crl code see appendix minimized 
kernel significantly smaller models provided suitable ordering see definition actions symbols representative function 
ordering depends parameters action 
minimized state space ordering descending values parameters worked better state space minimized ordering ascending values parameters worked slightly better 
tried possible orderings 
implementing algorithm kernel algorithm kernel see implemented open sar tool set 
interesting detail algorithm uses finite state machines 
specification reduced kernel template symmetry determine oracle traces symmetric 
enable open sar interface generalized somewhat able explore labeled transition systems time 
experience open sar suitable prototyping exploration algorithms kernel 
introduced general fsm framework exploiting symmetry specifications implementations order reduce amount tests needed establish correctness 
feasibility approach shown experiments 
number open issues remain 
see steps possible necessary feasible 
theoretical side construct algorithms computing checking symmetries determine conditions hand sufficient guarantee symmetry hand enable significant optimizations algorithms 
practical side generate execute tests real life implementations continue prototyping test generation trajectory 
acknowledgments vaandrager suggesting transfer model checking techniques test theory radu hubert invaluable assistance including adding functionality 
open sar tool set 
jan tretmans anonymous referees comments 
aho lee 
uyar 
optimization technique protocol conformance test generation uio sequences rural chinese postman tours 
ieee transactions communications 
haddad 
ili 
exploiting symmetry linear time temporal logic model checking step 
steffen pages 
brinksma 
theory derivation tests 
editors protocol specification testing verification volume viii pages 
north holland 
brinksma tretmans 
framework test selection 
jonsson parrow editors protocol specification testing verification volume xi pages 
north holland 
chan ito 
improved protocol test generation procedure 
proceedings acm symposium communication architectures protocols pages 
charles 
basing test coverage formalization test hypotheses 
kim kang hong editors testing communicating systems volume pages 
chapman hall 
chow 
testing software design modeled finite state machines 
ieee transactions software engineering 
clarke jha 
exploiting symmetry temporal logic model checking 
courcoubetis pages 
courcoubetis editor 
proceedings th international conference computer aided verification cav volume lecture notes computer science 
springer verlag 
emerson jha peled 
combining partial order symmetry reductions 
brinksma editor tools algorithms construction analysis systems tacas volume lecture notes computer science pages 
springer verlag 
emerson sistla 
symmetry model checking 
courcoubetis pages 
emerson sistla 
utilizing symmetry model checking fairness assumptions automata theoretic approach 
acm transactions programming languages systems 
fujiwara 
test selection finite state models 
ieee transactions software engineering 

open sar open software architecture verification simulation testing 
steffen pages 
information tool set see www inrialpes fr pub cadp html 

specification verification various distributed leader election algorithms unidirectional ring networks 
science computer programming july 
full version available inria research report rr www inrialpes fr publications 

gaudel 
testing formal 
mosses nielsen schwartzbach editors tapsoft theory practice software development volume lecture notes computer science pages 
springer verlag 
godefroid 
partial order methods verification concurrent systems approach state explosion problem volume lecture notes computer science 
springer verlag 
groote ponse 
syntax semantics crl 
ponse verhoef van editors algebra communicating processes workshops computing 
springer verlag 
sistla 
fly model checking fairness exploits symmetry 
grumberg editor proceedings th international conference computer aided verification cav volume lecture notes computer science pages 
springer verlag 
iso 
information processing systems open systems interconnection lotos formal description technique temporal ordering observational behaviour 
iso iec 
kang kim 
interoperability test suite derivation symmetric communication protocols 
mizuno editors formal description techniques protocol specification testing verification forte xvii pages 
chapman hall 
michel 
selective generation symmetrical test cases 

burkhardt editors testing communicating systems volume pages 
chapman hall 
chatbox code listings robin milner 
communication concurrency 
prentice hall international englewood cliffs 

handling redundant additional states protocol testing 
editors protocol test systems volume viii pages 
chapman hall 
steffen editor 
tools algorithms construction analysis systems tacas volume lecture notes computer science 
springer verlag 
tretmans 
testing theory practice simple experiment 
proceedings cost international workshop applied formal methods system design 
published technical report ctit university twente netherlands 
tretmans 
theory derivation tests 
formal description techniques forte ii 
north holland 

failure diagnosis automata 
cybernetics 
chatbox code listings lotos model users specification chatbox join leave dreq library boolean natural type chatbox types chatbox rename types boolean sorts mes type vector type 
vector type external matrix type 
matrix type external output opns output 
constructor ok 
constructor dind 
constructor output mes 
constructor ack 
constructor mes type eq mes type mes type bool vector 
vector constructor external vector type 
external usr type bool vector type vector type 
external usr type vector type bool matrix 
matrix constructor external matrix type setm 
setm external chatbox code listings usr type usr type bool matrix type matrix type getm 
getm external usr type usr type matrix type bool 
external usr type bool vector type matrix type matrix type eqns bool ack eq mes false mes eq ack false ack eq ack true mes eq mes true type chatbox rename types usr type nat behaviour chat join leave dreq vector matrix matrix process chat join leave dreq pc vector type sent ack matrix type choice usr type pc join output chat join leave dreq pc sent ack pc join ok chat join leave dreq true pc sent ack pc leave output chat join leave dreq pc sent ack pc leave ok chat join leave dreq false pc sent ack choice usr type usr type chatbox code listings dreq mes output eq pc pc getm sent chat join leave dreq pc sent ack dreq ack output eq pc pc getm ack chat join leave dreq pc sent ack dreq mes dind eq pc pc getm sent chat join leave dreq pc setm true sent setm true ack dreq ack dind eq pc pc getm ack chat join leave dreq pc setm false sent setm false ack endproc chatbox crl model users sort bool func bool map bool bool bool bool bool var bool rew sort nat func nat sort mes func mes ack mes sort output func output ok dind output act join leave nat output dreq nat nat mes output proc chatbox pres bool pres bool pres bool pres bool sentto bool sentto bool sentto bool chatbox code listings sentto bool sentto bool sentto bool sentto bool sentto bool sentto bool sentto bool sentto bool sentto bool join output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres join ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto join output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres join ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto join output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres join ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto join output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres join ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto chatbox code listings leave output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres leave ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto leave output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres leave ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto leave output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres leave ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto leave output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres leave ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq mes output chatbox pres pres pres pres sentto sentto sentto chatbox code listings sentto sentto sentto sentto sentto sentto sentto sentto sentto delta dreq mes output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto delta dreq mes output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto delta dreq mes output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto delta dreq mes ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq mes output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq mes ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq mes output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto chatbox code listings sentto sentto sentto sentto sentto sentto dreq mes ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq mes output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq mes ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq mes output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq mes ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq mes output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq mes ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq mes output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto chatbox code listings dreq mes ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq mes output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq mes ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq mes output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq mes ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq mes output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq mes ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq mes output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq mes ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto chatbox code listings sentto sentto sentto sentto sentto sentto pres pres sentto dreq mes output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq mes ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq mes output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto delta dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto delta dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto delta dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto chatbox code listings delta dreq ack ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq ack ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq ack ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq ack ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq ack ok chatbox pres pres pres pres chatbox code listings sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq ack ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq ack ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq ack ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq ack ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto chatbox code listings sentto sentto sentto pres pres sentto dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq ack ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq ack ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto dreq ack ok chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto pres pres sentto dreq ack output chatbox pres pres pres pres sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto sentto init chatbox state space symmetry user des chatbox code listings join ok leave output dreq mes output dreq ack output dreq mes output dreq ack output leave ok dreq mes dind dreq mes dind join output dreq mes output dreq ack output dreq mes output dreq ack output dreq ack dind dreq ack dind leave ok dreq mes dind dreq mes dind join output dreq mes output dreq ack output dreq mes output dreq ack output join ok leave output dreq mes output dreq ack output dreq mes output dreq ack output dreq ack dind dreq ack dind leave ok join output dreq mes output dreq ack output dreq mes output dreq ack output join ok leave output dreq mes output dreq ack output dreq mes output dreq ack output lotos model users joining leaving specification chatbox join leave dreq library boolean natural chatbox code listings type chatbox types chatbox rename types boolean sorts mes type vector type 
vector type external matrix type 
matrix type external output opns output 
constructor dind 
constructor output mes 
constructor ack 
constructor mes type eq mes type mes type bool vector 
vector constructor external vector type 
external usr type bool vector type vector type 
external usr type vector type bool matrix 
matrix constructor external matrix type setm 
setm external usr type usr type bool matrix type matrix type getm 
getm external usr type usr type matrix type bool 
external usr type bool vector type matrix type matrix type eqns bool ack eq mes false mes eq ack false ack eq ack true mes eq mes true type chatbox rename types usr type nat behaviour chat dreq matrix matrix process chat dreq sent ack matrix type chatbox code listings choice usr type usr type dreq mes output eq getm sent chat dreq sent ack dreq ack output eq getm ack chat dreq sent ack dreq mes dind eq getm sent chat dreq setm true sent setm true ack dreq ack dind eq getm ack chat dreq setm false sent setm false ack endproc chatbox state space symmetry user joining leaving des dreq mes dind dreq mes dind dreq mes output dreq ack output dreq mes output dreq ack output dreq ack dind dreq ack dind dreq mes dind dreq mes dind dreq mes output dreq ack output dreq mes output dreq ack output dreq ack dind dreq ack dind dreq mes output dreq ack output dreq mes output dreq ack output chatbox code listings algorithm kernel users open caesar inria unite de recherche alpes avenue de europe montbonnot saint martin france module kernel users adapted mail cwi nl date program command bcg open file bcg kernel users file bcg file bcg file bcg lts spec bcg format input file bcg lts symm bcg format input file bcg lts result bcg format output program computes lts result sub lts spec precisely computes kernel spec symmetry lts symm 
information theory kernels symmetry exploiting symmetry protocol testing jan 
extended full version available www cwi nl assumptions pair symm permutations representation function symmetry spec sigma defined smallest trace tau tau smallest trace symmetric sigma smallest minimal element wrt ordering induced ranking action labels rank label action labels spec form label label input string offer output string action labels symm form label unique transition symm label part symm occur spec subset chatbox code listings function permute label assumes permutation size parameters permuted nr nr nr nr 
typedefs type permutation function permute label assume parameter permuted single character see static constant permutations typedef type colour function add item colour list assume edge nr lts symm stored int lemma full ref la kernel implies visits state states permutation lts symm skip visits 
implementation far efficient 
search tables caesar caesar keep track states visited 
table caesar stores state needs visited explored storing state visit decide explored 
state needs stored transition leading representative transitions symmetric skipped path leading contain state loop stored pointers table course null pointer initial state empty trace occurrence table state unique state id permutations lts symm state lemma full multiple occurrences state occur table caesar 
requirements open caesar manual hubert october obeyed 
execution gives errors 
constant branching size denote branching factor lts spec number needed finite administration transitions spec written result avoid writing inefficient 
assumptions example chatbox action labels spec en symm input string join leave dreq output string ok dind output offer mes ack join leave offer join leave output ok output dreq offers 
mes ack dreq output dind output constant vector size permutations symmetry template lts symm users chatbox 
chatbox code listings preliminary defs includes global vars static char caesar sccs kernel algo open caesar kernel users static char bcg cadp bin cadp com arch io lm include string include caesar graph include caesar edge include caesar table include signal include bcg user bcg user includes bcg io write bcg global variable exploring lts symm functions bcg type object transition bcg object transition pop window statistics static void caesar abort bcg signal int bcg signal signal sig ign signal sig ign signal sig ign signal sig ign signal sig ign signal sig ign signal sig ign signal sigsegv sig ign ifdef signal sig ign endif signal sigterm sig ign signal sig ign bcg io write bcg caesar error caught interrupt closing bcg file typedefs permutation define permutation size action parameters permuted define vector size permutations lts symm incl identity pm chatbox code listings parameters permuted string label type char case ll just deal parameters 
char suffices typedef char type permutation permutation size typedef type permutation type permutation vector vector size permutations stored permutations gives th permutation permutations gives value permuted permutations odd gives new value permutations know default values 
static type permutation vector permutations identity perm typedefs colouring define label size reserve space big action labels typedef char type label label size state vector bcg states exploring lts symm state permutation lts symm typedef bcg type natural type state vector vector size typedef int type colour edge nr lts symm stored int typedef struct tag colour type colour list typedef struct tag colour type colour colour type colour list type colour body functions colouring char get type label label note contents label changed 
edges bcg symmetry format labels action label function chatbox code listings get characters label char tmp tmp char label tmp return char label char get action type label label note contents label may changed 
edges bcg symmetry format labels action label function get characters label char tmp tmp char label return tmp caesar type boolean output caesar type label caesar determine offer caesar equal output char tmp separator type label label caesar dump label label caesar tmp strtok char label separator switch tmp case join join leave leave case tmp strtok null separator parameter offer tmp strtok null separator break case tmp strtok null separator dreq dreq tmp strtok null separator parameters offers tmp strtok null separator tmp strtok null separator break default tmp strtok null separator edge number taken switch tmp case join join leave leave case tmp strtok null separator tmp strtok null separator break case tmp strtok null separator dreq dreq tmp strtok null separator chatbox code listings tmp strtok null separator tmp strtok null separator break return caesar type boolean strcmp tmp output 
int rank label caesar type label caesar determine ranking label conform join leave dreq mes ij ij case ordering easily implemented case statement arithmetic expression note labels get ranking ok dind output labels different outputs symmetric covered different edges safe char tmp separator int rnk rnk rnk type label label caesar dump label label caesar tmp strtok char label separator switch tmp join join case tmp strtok null separator rnk atoi tmp break leave leave case tmp strtok null separator rnk atoi tmp break dreq dreq case tmp strtok null separator rnk atoi tmp tmp strtok null separator rnk atoi tmp tmp strtok null separator tmp offer mes ack switch rnk case rnk break chatbox code listings case rnk break case rnk break case rnk break case rnk break case rnk break case rnk break case rnk break case rnk break case rnk break case rnk break case rnk break switch rnk case rnk break case rnk break case rnk break case rnk break case rnk break case rnk break case rnk break case rnk break case rnk break case rnk break case rnk break case rnk break break return rnk char permute label char str type permutation perm note contents str changed occurrence string str perm replaced perm occ perm replaced perm simultaneously assumptions replace single characters replacements nr nr nr nr char tmp tmp str tmp tmp perm tmp perm tmp perm tmp perm tmp chatbox code listings return str void create colour list type colour list cl create empty list pointer cl points cl type colour list malloc sizeof type colour body void delete colour list type colour list cl free memory space corresponding list pointed cl type colour list tmp tmp tmp tmp cl tmp null tmp null tmp tmp free tmp tmp tmp cl null int length colour list type colour list cl return number elements list cl int cl null cl cl return type colour head colour list type colour list cl return colour elt elt list cl return cl colour void tail colour list type colour list cl delete elt list cl store pointer tail list cl type colour list tmp tmp cl cl tmp free tmp chatbox code listings void add item colour list char str type colour list cl add item str list pointed cl type colour list tmp tmp cl tmp null type colour list tmp tmp null tmp tmp create colour list tmp tmp colour atoi str blanks str deleted 
tmp null tmp tmp create colour list tmp tmp colour atoi str tmp null cl tmp void colour list caesar cl note function uses global variable bcg object transition defined earlier 
note problems caused string changing functions get action get string label order functions ensures don mess information type state vector caesar type label caesar type colour list cl type state vector label caesar may enabled transition states 
states add edge nr enabled transition colour cl int step type label label label bcg type state number bcg symm state bcg symm state bcg type label number bcg label number caesar dump label label caesar vector size compute succ chatbox code listings bcg symm state bcg type state number bcg ot iterate ln bcg object transition bcg symm state bcg label number bcg symm state body state iterator char tmp get label string lts symm belonging label number strcpy char label char bcg ot label string bcg object transition bcg label number tmp permute label get action label permutations strcmp tmp char label bcg type natural bcg symm state add item colour list get label cl step bcg ot iterate new cadp 
step step caesar type boolean find delete colour list col cl type colour col type colour list cl find entry col list cl delete entry cl return true store changed list pointer cl entry return false cl changed caesar type boolean caesar type boolean type colour list tmp tmp cl tmp null tmp colour col caesar type boolean cl tmp free tmp tmp null tmp colour col tmp tmp tmp null type colour list tmp caesar type boolean tmp tmp tmp tmp free tmp chatbox code listings return caesar type boolean symmetric colour list cl cl type colour list cl type colour list cl compare lists colours cl cl 
lists induce equal multisets colours check elt cl see cl delete 
look elt tail cl 
note cl changed function totally emptied int type colour col col type colour list tmp length colour list cl length colour list cl col head colour list cl find delete colour list col cl return caesar type boolean cl cl return caesar type boolean return caesar type boolean vars typedefs search tables caesar type table caesar base caesar type state mark type mark field caesar type table caesar base field caesar type state mark type mark field caesar keeps track states need explored algorithm 
state need information path led state current state permutation lts symm caesar store state caesar visit state 
index state caesar unique id state 
id states written chatbox code listings output lts result 
furthermore useless inefficient write transitions output lts result 
caesar keep track transitions written 
branching factor lts spec upperbound number transitions maximally written lts result finite structure vector 
mark field table caesar store prev int flag indicating prev state prev index index state current state reached vector current state permutation lts symm typedef struct tag mark type mark field typedef struct tag mark int prev caesar type index table prev index type state vector type mark body define branching size lts spec max outgoing trans state typedef struct type label label caesar type index table succ type trans typedef type trans type trans vector branching size mark field table caesar store integer indicating transitions departing state corr 
base field written output bcg file trans vector fixed size fields filled transitions written bcg output typedef struct tag mark type mark field typedef struct tag mark int type trans vector trans type mark body iterating successor states edges mark field indicating transition explored symmetric transition symmetric repr explore transition symmetric trans explore 
typedef char type edge mark field main chatbox code listings main argc argv int argc char argv variable decls int caesar type boolean caesar monitor caesar type state caesar caesar caesar caesar type state prev state tmp state int prev tmp caesar type edge caesar en caesar caesar caesar type edge caesar ptr caesar type label caesar caesar caesar caesar type string caesar label caesar type pointer caesar caesar pointer dummy type mark body mark mark mark mark prev mark tmp mark type mark body mark dummy type mark body mark body mark body prev type mark body mark mark mark mark prev mark type mark body mark dummy type mark body mark body mark body prev type edge mark field edge mark edge mark type edge mark field edge mark ptr edge mark ptr edge mark ptr caesar type index table bcg spec initial state bcg spec state bcg spec state caesar type index table prev index caesar dummy run caesar type index table get index table put index table char bcg filename output char bcg filename symm char tmp label bcg type string bcg label string bcg type boolean bcg visible type colour list cl cl type state vector stdout null opening lts spec caesar tool argv argc argv argc caesar error bcg filenames expected argument lts symmetry input file lts result output file strlen argv strcmp argv strlen argv bcg chatbox code listings sprintf bcg filename symm argv sprintf bcg filename symm bcg argv argc argv strlen argv strcmp argv strlen argv bcg sprintf bcg filename output argv sprintf bcg filename output bcg argv opening lts symm bcg init occurrences bcg init doesn matter bcg ot read bcg bcg filename symm bcg object transition caesar init graph 
guess alignment mark value caesar init edge caesar false caesar true caesar true sizeof char building exploration tables caesar create table caesar standard base field caesar type state sizeof type mark body caesar true null null caesar print state null caesar null caesar error memory table caesar create table caesar standard base field caesar type state sizeof type mark body caesar true null null null null caesar null caesar error memory table storing initial state caesar start state caesar type state caesar put base table caesar caesar start state caesar type state caesar put base table caesar mark type mark body caesar put mark table caesar mark dummy mark mark dummy caesar put table caesar bcg spec initial state bcg type state number chatbox code listings caesar get index table caesar mark type mark body caesar put mark table caesar initialise initial states lts symm mark dummy prev mark dummy prev index vector size mark dummy bcg ot initial state bcg object transition mark mark dummy caesar put table caesar opening lts kernel bcg init occurrences bcg init doesn matter bcg io write bcg bcg filename output bcg spec initial state created kernel algo caesar monitor setting interrupts signal caesar abort signal caesar abort signal caesar abort signal caesar abort signal caesar abort signal caesar abort signal caesar abort signal sigsegv caesar abort ifdef signal caesar abort endif signal sigterm caesar abort signal caesar abort caesar create label caesar main loop exploring table caesar explored table caesar current size table get index table caesar get index table caesar put index table caesar put index table caesar get current state table caesar copy state caesar caesar type state caesar get base table caesar mark type mark body caesar get mark table caesar need state id current state bcg io write caesar search table caesar chatbox code listings caesar type pointer caesar bcg spec state pointer dummy caesar error get index table state table get index table mark body mark vector size mark body caesar get table caesar create successor list current state caesar create edge list caesar caesar en caesar truncation edge list caesar error memory edge lists put mark field edge list caesar iterate lnm edge list caesar en caesar caesar caesar caesar edge mark ptr type edge mark field caesar edge mark ptr iterate loop successor caesar iterate lnm edge list caesar en caesar caesar caesar caesar edge mark ptr type edge mark field caesar caesar dump label caesar type string tmp label caesar skip representative edge mark ptr colour list caesar cl length colour list cl caesar error main colour list label state symm states empty tmp label bcg spec state representative known edge mark ptr need find repr walk rest edge list change explore flag successor state transition symmetric transition caesar caesar 
chatbox code listings lower ranking current explored 
ensures symmetric successors explored 
starting point edge list successor edge caesar current elt caesar copy label caesar caesar edge mark ptr edge mark ptr caesar ptr caesar successor edge caesar caesar ptr null caesar iterate lm edge list caesar ptr caesar caesar caesar edge mark ptr type edge mark field caesar edge mark ptr colour list caesar cl symmetric colour list cl cl rank label caesar rank label caesar edge mark ptr caesar copy label caesar caesar edge mark ptr edge mark ptr edge mark ptr edge explored 
delete colour list cl caesar iterate edge mark ptr empty deleting list safe hope delete colour list cl explore representative edge mark ptr explore repr need state id succ state search caesar visit initialise mark field caesar search table caesar caesar type pointer caesar bcg spec state caesar dummy caesar copy state caesar type state caesar put base table caesar chatbox code listings caesar mark type mark body caesar put mark table caesar mark bcg spec state caesar put index table caesar caesar put table caesar decide current successor seen store succ state table visit current path initial state walk back path led caesar initial state caesar encountered way prev prev state just came prev index get index table index get index prev caesar retrieve table caesar prev index caesar type pointer prev state caesar compare state caesar prev state caesar retrieve table caesar prev index caesar type pointer prev mark mark body prev type mark body prev mark prev mark body prev prev prev index mark body prev prev index skip seen exact state caesar time caesar visited path going try find state table combination just needs explored 
put index table caesar put index table caesar run run put index table run caesar retrieve bm table caesar run caesar type pointer tmp state caesar type pointer tmp mark caesar compare state caesar tmp state tmp vector size tmp tmp tmp mark tmp chatbox code listings caesar label caesar string label caesar store caesar explored time caesar visited path prepare base field values storing new state table put index table caesar put index table caesar caesar copy state caesar type state caesar put base table caesar caesar prepare mark field put new values colouring mark type mark body caesar put mark table caesar mark dummy prev mark dummy prev index get index table vector size mark dummy mark mark dummy store new elt table caesar put table caesar store caesar explored edges added table lts kernel re table caesar retrieve table caesar caesar type index table bcg spec state caesar type pointer mark run run mark run mark trans run succ bcg spec state strcmp mark trans run label caesar label write lts result run mark mark trans run succ bcg spec state strcpy mark trans run label caesar label mark bcg io write bcg edge bcg spec state caesar label bcg spec state cyclic train code listings caesar iterate finished iterating successors caesar delete edge list caesar en finished exploring table printf done bcg io write bcg exit main cyclic train code listings crl model stations sort bool func bool map bool bool bool bool bool bool bool bool bool bool bool bool var bool rew sort station func station map eq station station bool left station station right station station left station station bool right station station bool var station rew left left left left left cyclic train code listings left left left right right right right right right right right eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq cyclic train code listings eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq left left left left left left left left left left left left left left left left left left left left left left left left left left left cyclic train code listings left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left right left sort func call send sort reqlist func er reqlist rl station bool bool reqlist reqlist map bool reqlist reqlist reqlist station reqlist bool station reqlist bool station reqlist bool change station bool reqlist reqlist station reqlist reqlist cyclic train code listings var reqlist station bool rew er rl eq er rl left er rl right change er er change call rl eq rl rl change call change send rl eq rl rl change send er er rl eq rl rl sort direction func right left direction map eq direction direction bool bool direction direction direction var direction rew eq right right eq right left eq right eq left right eq left left eq left eq right eq left eq act request station moveleft station proc stat station dooropen bool reqs reqlist dir direction sum sum station request stat dooropen eq stat dooropen cyclic train code listings change reqs reqs eq dir left stat left right stat right dir dir stat stat stat reqs dir dooropen stat reqs delta stat stat reqs dir dooropen delta right stat right stat dooropen reqs right stat reqs dir right stat reqs left dir dooropen eq dir right stat reqs delta moveleft left stat left stat dooropen reqs left stat reqs dir left stat reqs right dir dooropen eq dir left stat reqs delta init rl rl rl rl rl rl rl rl er state space symmetry station des request call request send moveleft request call request send moveleft cyclic train code listings request call request send moveleft request call request send moveleft request call request send mealy style crl model stations sort bool func bool map bool bool bool bool bool bool bool bool bool bool bool bool var bool rew sort station func station map eq station station bool left station station right station station left station station bool right station station bool var station rew left left left left left left left left cyclic train code listings right right right right right right right right eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq cyclic train code listings eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq eq left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left cyclic train code listings left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left right left sort func call send sort reqlist func er reqlist rl station bool bool reqlist reqlist map bool reqlist reqlist reqlist station reqlist bool station reqlist bool station reqlist bool change station bool reqlist reqlist station reqlist reqlist var reqlist station bool cyclic train code listings rew er rl eq er rl left er rl right change er er change call rl eq rl rl change call change send rl eq rl rl change send er er rl eq rl rl sort direction func right left direction map eq direction direction bool bool direction direction direction var direction rew eq right right eq right left eq right eq left right eq left left eq left eq right eq left eq sort output func moveleft station output output output act request station output wait output proc stat station dooropen bool closing bool reqs reqlist dir direction sum sum station request output stat dooropen closing eq stat dooropen cyclic train code listings change reqs reqs eq dir left stat left right stat right dir dir dooropen closing eq stat closing eq dir stat reqs delta request stat stat reqs dir dooropen eq dir eq stat stat reqs delta request moveleft left stat left stat dooropen change reqs eq left stat left dooropen closing eq dir left stat stat reqs delta request right stat right stat dooropen change reqs eq right stat right dooropen closing eq dir right stat left stat stat reqs delta wait output stat dooropen closing reqs dir dooropen closing eq dir stat reqs delta wait stat stat dooropen reqs dir closing eq dir stat reqs delta wait stat stat stat reqs dir dooropen stat reqs delta wait stat stat reqs dir dooropen delta cyclic train code listings wait right stat right stat dooropen reqs right stat reqs dir right stat reqs left dooropen eq dir right stat reqs delta wait moveleft left stat left stat dooropen reqs left stat reqs dir left stat reqs right dooropen eq dir left stat reqs delta init rl rl rl rl rl rl rl rl er state space mealy style symmetry station des wait output wait moveleft wait request call output request send output request call moveleft request send moveleft request call request send request call moveleft request send moveleft request call moveleft request send moveleft request call moveleft request send moveleft request call request send request call request send request call request send request call request send ring leader election code listings request call moveleft request send moveleft request call moveleft request send moveleft request call moveleft request send moveleft wait moveleft wait request call output request send output wait request call output request send output wait request call output request send output wait wait moveleft wait request call request send request call request send request call request send request call request send request call moveleft request send moveleft request call moveleft request send moveleft request call moveleft request send moveleft request call moveleft request send moveleft wait moveleft wait request call output request send output ring leader election code listings crl model stations sort bool func bool map bool bool bool bool bool bool bool bool eq bool bool bool ring leader election code listings neq bool bool bool bool bool bool bool var bool rew eq eq eq eq neq neq neq neq sort address func address map eq address address bool pred address address succ address address address address bool greater address address bool var address rew pred pred pred succ succ succ eq eq eq eq eq eq eq eq eq ring leader election code listings greater act rec claim stat rec claim link rec claim address address bool snd claim stat snd claim link snd claim address address bool rec token stat rec token link rec token address snd token stat snd token link snd token address crash open close address comm link rec claim stat rec claim rec claim link snd claim stat snd claim snd claim link rec token stat rec token rec token link snd token stat snd token snd token proc station add address election add election add address round bool crash add fail add stat snd claim succ add add round election add round stat rec token add privilege add round sum cand address sum round bool stat rec claim add cand round 
crash add fail add stat snd claim succ add cand round election add round cand add add cand delta election add round eq add cand neq round round delta privilege add round eq add cand eq round round delta ring leader election code listings fail add address stat rec token add stat snd token succ add fail add sum cand address sum round bool stat rec claim add cand round 
stat snd claim succ add cand round fail add eq cand add delta fail add eq add cand delta privilege add address round bool crash add fail add open add 
crash add fail add close add 
crash add fail add stat snd token succ add election add round stat snd token succ add election add round link add address link rec token add link snd token add link add ring leader election code listings sum cand address sum round bool link rec claim add cand round link snd claim succ add cand round link add link rec token add link add sum cand address sum round bool link rec claim add cand round link add init link rec claim stat rec claim link snd claim stat snd claim link rec token stat rec token link snd token stat snd token link station link station link station crl model symmetry station sort bool func bool map bool bool bool bool bool bool bool bool eq bool bool bool neq bool bool bool bool bool bool bool var bool rew ring leader election code listings eq eq eq eq neq neq neq neq sort address func address map eq address address bool pred address address succ address address address address bool greater address address bool var address rew pred pred pred succ succ succ eq eq eq eq eq eq eq eq eq greater ring leader election code listings act rec claim address address bool snd claim address address bool rec token address snd token address crash open close address proc station add address election add election add address round bool crash add fail add snd claim succ add add round election add round rec token add privilege add round sum cand address sum round bool rec claim add cand round 
crash add fail add snd claim succ add cand round election add round cand add add cand delta election add round eq add cand neq round round delta privilege add round eq add cand eq round round delta fail add address rec token add snd token succ add fail add sum cand address sum round bool rec claim add cand round ring leader election code listings 
snd claim succ add cand round fail add eq cand add delta fail add eq add cand delta privilege add address round bool crash add fail add open add 
crash add fail add close add 
crash add fail add snd token succ add election add round snd token succ add election add round init station state space symmetry station des rec claim rec claim rec claim rec claim rec claim rec claim snd claim rec token crash snd claim snd claim snd claim ring leader election code listings snd claim crash snd token crash open rec claim rec claim rec claim rec claim rec claim rec claim rec token rec claim rec claim rec claim rec claim rec claim rec claim snd claim rec token crash close crash snd claim snd claim snd claim snd claim snd token snd token crash open snd claim snd claim snd claim snd claim crash snd token crash close crash snd token crash 
