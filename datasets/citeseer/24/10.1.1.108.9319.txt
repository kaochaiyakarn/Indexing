efficient password authenticated key exchange human memorable passwords jonathan katz ostrovsky moti yung telcordia technologies department computer science columbia university 
cs columbia edu telcordia technologies south street morristown nj 
research telcordia com moti cs columbia edu 
interest password authenticated protocols remain secure users choose passwords small space possible passwords say dictionary english words 
assumption careful design protocols broken line dictionary attacks adversary enumerates possible passwords attempt determine correct 
heuristic protocols proposed solve important problem 
formal validations security proofs idealized random oracle ideal cipher models specific constructions 
construction general assumptions secure standard model human memorable passwords proposed goldreich lindell 
protocol requires public parameters unfortunately requires techniques general multi party computation impractical 
proves solutions possible principal 
main question left open finding efficient solution fundamental problem 
show efficient round password authenticated key exchange protocol human memorable passwords provably secure decisional diffie hellman assumption requires roughly times computation standard diffie hellman key exchange provides authentication 
assume public parameters available parties 
stress standard model require random oracle assumption 
background protocols allow mutual authentication parties generating cryptographically strong shared key authenticated key jonathan katz ostrovsky moti yung exchange underly interactions place internet 
importance primitive realized time security community see exhaustive followed increasing recognition precise definitions formalization needed 
formal treatments model participants share cryptographically strong information secret key encryption authentication messages public key encryption signing messages 
setting arising practice human users capable storing human memorable passwords password authenticated key exchange remains studied heuristic protocols exist 
formal definitions security setting appeared 
problem standard model random oracles difficult precisely requires bootstrapping weak shared secret strong 
fact priori clear solution possible 
completeness results multi party computation directly apply due strong adversarial model considered see section 
particular adversary may ask concurrent arbitrarily interleaved executions protocol may modify messages prevent delivery may impersonate participants protocol act man middle may corrupt protocol participants 
goldreich lindell shown principle problem solvable trapdoor permutation leaving open question practical solution possible 
show somewhat surprisingly existence efficient solution human memorable passwords decisional diffie hellman assumption 
adversarial model setting follows formal discussion appears section parties larger network share weak low entropy password wish authenticate generate strong session key protecting subsequent communication 
adversary controls communication network 
messages may tampered delivered order delivered adversary may ask arbitrarily interleaved executions protocol 
adversary may corrupt selected instances see participants obtain session keys generated successful executions protocol 
adversary succeeds cause participant compute session key adversary distinguish random 
space possible passwords small adversary monitored conversation may enumerate possible passwords try match recorded conversation 
example challenge response protocol party sends challenge responds password trivially susceptible attack regardless note attack possible poly time adversary appropriate choice parties share high entropy password 
additionally fact efficient password authenticated key exchange adversary corrupt instances determine actual session key means protocol ensure consistency recorded conversation session keys revealing information password 
complications problem harder case participants share strong key outset protocol 
security mean model inherently insecure 
passwords chosen small space adversary try possibility time impersonation line attack 
say protocol secure informally exhaustive guessing best adversary 
real world adversary line attacks hardest mount easiest detect 
realistic assume number line attacks adversary allowed severely limited attacks eavesdropping line password guessing 
previous problem line attacks password authenticated protocols noted bellovin merritt followed flurry security community providing additional solutions heuristic arguments security see exhaustive 
formal models password authenticated key exchange proposed bellare pointcheval rogaway extensions suggested second mackenzie patel extensions 
models advantages choose model review appropriate definitions section 
models assume parties wishing communicate share human memorable password particular assume public key infrastructure pki allows participants generate share public keys 
definitions security setting proposed fact protocols resistant line dictionary attacks model 
requirement secure pki strong wish avoid 
formal validations security specific protocols appeared 
validations proofs standard model relies ideal ciphers rely random oracles 
goldreich lindell shown protocol general assumptions secure standard model 
interestingly contrast protocol require public parameters 
unfortunately construction requires non constant number rounds requires techniques generic multi party computation 
scheme serves general plausibility result terminology coined inefficient practical 
pointed authors solution allow concurrent executions protocol parties password 
jonathan katz ostrovsky moti yung contribution security validation proofs random oracle ideal cipher models useful lend measure confidence protocols security heuristic 
hand proofs security models necessarily translate real world security important proofs standard cryptographic assumptions 
prove security construction decisional diffie hellman ddh assumption 
efficiency especially important setting security concerns motivated practical considerations human users inability remember long secrets 
stress scheme provably secure practical compared heuristically secure protocols original diffie hellman protocol provide authentication 
protocol requires rounds communication computational complexity roughly times greater solutions 
furthermore able construct scheme making stronger assumptions ddh assumption 
solution relies public key techniques fact necessary emphasize protocol public key solution 
particular require participant public key rely set common parameters shared system 
avoids problems associated public key infrastructures revocation centralized trust key management issues allows new servers clients join network time execution protocol requiring access line centralized trusted authority fact need inform presence 
furthermore participants know secret key associated public parameters 
eliminates risk compromise participant compromise security entire system 
construction secure notion basic security stronger notion forward security weak corruption model 
initial version concentrate basic security leave topic forward security final version 
model definitions reader assumed familiar model model prove security protocol 
completeness review main points definition refer reader details 
principals passwords initialization 
fixed set protocol participants principals client client server server client server disjoint 
user def client server 
client password pw server vector pws pw client contains passwords clients assume clients share passwords servers 
recall pw client remembers efficient password authenticated key exchange log assumed chosen relatively small space possible passwords 
protocol run initialization phase occurs public parameters set passwords chosen client 
assume passwords client chosen independently uniformly random set 
constant independent security parameter 
execution protocol 
real world protocol determines principals behave response signals input environment 
principal able execute protocol multiple times different partners modeled allowing principal unlimited number instances execute protocol see 
denote instance user instance 
adversary assumed complete control communication network 
adversary interaction principals modeled access oracles inputs may range user allows adversary interact different instances 
global state maintained entire execution instance adversary interacts global state directly visible adversary global state instance may updated oracle oracle call oracle output may depend state 
oracle types defined send sends message instance oracle runs instance real execution maintaining state appropriate 
output adversary addition information see 
execute oracle executes protocol instances client server outputs transcript execution 
transcript includes adversary see eavesdropping real world execution protocol information see 
reveal outputs session key sk stored part global state instance test query allowed time adversary execution 
random bit generated adversary sk adversary random session key 
advantage adversary 
event succ occurs adversary succeeds asks single test query outputs bit bit chosen test oracle 
advantage attacking protocol defined adv ake def pr succ 
adversary unrestricted success trivial adversary submit reveal query instance submitted test oracle 
clearly restrictions imposed 
describing formalize idea 
intuitively instances ease presentation analysis extended easily handle arbitrary distributions including users inter dependent passwords 
jonathan katz ostrovsky moti yung jointly run protocol formally define session id sid instance say instances hold sid null 
define sid concatenation messages sent received instance transcript execution 
restriction may imposed adversary test query reveal query may called furthermore instance completed execution non null session key defined 
poly time adversary able break protocol attempting impersonate user trying passwords size password space independent security parameter distinguishes problem 
say protocol secure kind attack best adversary 
formally number calls adversary send oracle 
protocol secure passwords chosen dictionary size adversary advantage attacking protocol bounded negligible function 
term represents fact adversary essentially better guess password call send oracle particular polynomially calls execute oracle passive observations valid executions reveal oracle compromise short term session keys help adversary online impersonation attacks harder mount easier detect give adversary non negligible advantage 
concrete security particularly important setting adversary advantage non negligible assuming send queries 
quantify adversary maximum advantage function adversary running time number queries send execute reveal oracles respectively 
provably secure protocol password ake building blocks protocol proof security rely number building blocks 
protocol uses cramer shoup cryptosystem secure adaptive chosen ciphertext attack 
require extension cramer shoup cryptosystem remains secure adaptive chosen ciphertext attack 
extension defines types encryption client encryption tighter definition security require adversary advantage bounded rn minimum number messages adversary needs send order cause completion protocol non null session key defined 
analysis proof proof indicates security construction tight respect 
efficient password authenticated key exchange server encryption 
details appear appendix need time signature scheme secure existential forgery 
proof security relies decisional diffie hellman ddh assumption note security cramer shoup cryptosystem requires ddh assumption 
review components appendix explicitly quantify security necessary explicit analysis adversary maximum advantage attacking key exchange protocol 
chosen ciphertext secure encryption previously context secure key exchange 
pointed protocol differs works require assumption publickey infrastructure participant holds secret key publishes public key 
decryption performed execution protocol 
protocol high level description protocol 
primes subgroup order ddh assumption holds 
initialization phase generators function family universal way hash functions way function chosen random published 
note public information added assumption standard diffie hellman key exchange typically assumes parties fixed generator necessary require public generator proofs security 
require know discrete logarithms generators respect need trusted party generates public information source randomness publicly derive information 
part initialization phase passwords chosen randomly client 
assume passwords lie mapped zq 
typical values valid assumption human memorable passwords 
execution protocol follows see client wants connect server client runs key generation algorithm time signature scheme giving vk sk 
client computes client encryption see appendix pwc client name sent server message 
server chooses random elements zq computes message forms gy hz cd server computes server encryption see appendix pwc sent back client second message 
client selects random elements zq computes second message forms gy hz cd signed signing key generated step 
sid defined transcript entire conversation 
formal description protocol appears appendix protocols require public information 
jonathan katz ostrovsky moti yung public information client server vk sk zq gr pw client vk cd client vk zq zq server gy hz cd server sig sign sk sig pw skc client vk gy hz cd gr pw server cd verify vk sig pw sks sks fig 

protocol password ake 
see text details 
protocol description omits implementation details important proof security hold 
important client server perform validity check messages receive 
particular side check values receive group identity words required check group elements order 
note validity checks required chosen ciphertext security underlying cramer shoup cryptosystem 
correctness 
honest execution protocol calculate identical session keys 
see note honest execution 
skc gy hz cd cd sks gy efficient password authenticated key exchange hz cd verify equal 
cd mutual authentication 
note protocol achieves key exchange mutual authentication 
trivially add mutual authentication adding fourth message protocol 
details appear final version 
practical considerations practice collision resistant hash function say sha universal way hash function 
advantage increased efficiency expense requiring possibly stronger assumption security 
efficient time signatures presumed way functions sha des 
particular time signatures efficient signature schemes secure adaptive chosen message attacks 
client computation reduced important client smartcard follows time signature scheme fresh keys need generated time connection signing key verification key generated initialization lifetime client 
particularly suited applications onthe fly signature schemes 
initialization step may done host computer keys downloaded smartcard step may done line connection 
proof security section holds 
disadvantage signature scheme required secure existential forgeries polynomially messages signed just single message 
cases tradeoff may acceptable 
note may store pwc server pwc avoid computing exponentiation time protocol executed 
security protocol concentrate basic security protocol leave corresponding results forward security full 
theorem indicates protocol secure lower order terms negligible see appendix definitions lower order terms 
theorem 
protocol passwords chosen dictionary size security parameter 
adversary runs time asks queries respective oracles 
jonathan katz ostrovsky moti yung adv ake sig ddh cs min min helpful develop intuition notation presentation full proof 
note execute oracle help adversary 
reason diffie hellman key exchange forms heart protocol secure passive attack 
consider active impersonation attacks adversary 
protocol flows 
adversary tries impersonate client attempt determine eventual session key server adversary send third messages adversary wants impersonate server attempt determine eventual session key client adversary prompt client generate message send second message 
consider adversary impersonating client message comes adversary client vk say message valid pwc client vk pw password client 
define valid analogously second message adversary impersonating server note password determines validity depends name client adversary sends message 
define notion validity third message 
fact central proof fact invalid message sent instance session key computed instance information theoretically independent messages sent received instance 
holds clients servers 
proof 
consider case adversary interacting server def def def message 
cd 
consider random values see server instance execution 
element second message constrains values follows log 
session key calculated kr multiplied sk ax pwc dw sk pwc equation hold message invalid equations linearly independent sk information theoretically independent transcript execution 
similar argument holds case adversary interacting client 
efficient password authenticated key exchange instance adversary sent invalid message 
fact implies adversary advantage distinguishing session key generated instance random session key 
adversary non zero advantage come sending valid message instance 
call message sent adversary previously message previously output client server running protocol adversary simply copied re message new 
lemma bounds adversary probability coming new valid second message lemma 
adversary probability sending point protocol second message new valid bounded negligible function 
lemma essentially follows chosen ciphertext security non malleability extended cramer shoup encryption see appendix 
detail appear full proof 
lemma reflects fact adversary trivially guess appropriate password time sends second message 
remaining point argue previously messages significantly help adversary 
note adversary re uses message adversary high probability able compute valid signature include third message 
adversary re uses second message full proof indicates knowing randomness generate message adversary gain negligible advantage 
proof theorem 
refer formal specification protocol appears appendix number clients servers polynomial security parameter number fixed advance public 
imagine simulator controls oracles adversary access 
simulator runs protocol initialization described appendix including selecting passwords client simulator answers adversary oracle queries defined appendix figures 
adversary succeeds guess bit simulator uses test query see section additional details 
define sequence transformations 
original protocol bound effect transformation adversary advantage 
lemma assumes passwords chosen uniformly random password space appropriately modified handle arbitrary distributions 
mentioned section clients servers fact dynamically added protocol execution request adversary passwords chosen adversary forward security considered 
simplicity focus static case 
simplicity assume users choose passwords independently uniform distribution 
analysis easily modified accommodate arbitrary distributions 
jonathan katz ostrovsky moti yung bound adversary advantage final transformed protocol gives explicit bound adversary advantage original protocol 
consider verification keys output send oracle course protocol 
may restrict case adversary unable forge new message signature pair keys course protocol 
change adversary success probability simple hybrid argument shows sig sig 
protocol calls execute oracle answered chosen random bounds effect adversary advantage lemma 
adversary success probability differs ddh advantage 
proof 
simulator uses adversary black box distinguish diffie hellman quadruples random quadruples 
quadruple group runs initialization follows zq publish parameters group pw client 
random self reducibility property simulator generate st tt 
diffie hellman quadruple st tt hand random quadruple st tt distributed random quadruples fixed 
th call execute answered execute client server vk sk zq pwc client vk msg client vk gx hz cd pwc server msg server gy hz cd msg sign sk sk ski ax pw pw sid sidi msg msg msg return msg msg msg diffie hellman quadruple exact simulation hand random quadruple exact simulation 
protocol calls execute answered session key chosen randomly adversary view success probability statistical distance min adversary view protocol 
fact shows session key independent efficient password authenticated key exchange transcript execution seen adversary msg msg valid appropriate password 
chosen randomly probability msg msg valid exactly protocol public parameters generated choosing randomly choosing randomly zq setting gy gy gz chosen 
furthermore gx send oracle changed follows simulator checks message sent send oracle instance previously see 
current query send oracle answered normally 
msg client vk simu computes client vk checks pwc az msg said appear valid query answered normally 
msg said appear non valid query answered normally session key chosen randomly calls send client msg answered similar fashion 
msg previously query answered normally 
msg server simulator computes server checks gx pwc msg said appear valid query answered normally 
msg said appear query answered normally session key instance chosen randomly adversary view protocol exactly equivalent view protocol 
msg msg appear non valid fact valid password pwc fact shows resulting session key independent adversary view 
hand message appears valid may fact invalid query answered normally adversary view affected 
protocol definition adversary success changed course answering send oracle query msg new appears valid session key set special value 
adversary asks reveal query instance simulator halts immediately adversary succeeds 
course answering send oracle query msg new appears valid session key set special value 
adversary asks reveal query instance simulator halts immediately adversary succeeds 
adversary succeeds guessing bit increase advantage adversary 
protocol calculation session key send oracle modified 
time computed simulator answering call send oracle simulator stores associated values call send oracle msg sig possibilities jonathan katz ostrovsky moti yung msg new appears valid 
case session key set simulator behaves 
msg new appears non valid 
case simulator chooses session key randomly 
msg previously verify vk sig 
case simulator chooses session key randomly 

msg previously verify vk sig 
case sig previously output send oracle assume adversary forged new message signature pairs 
simulator knows values gx hz msg server pwc calculates session key sk 
cd simulator adversary view exactly equivalent adversary view kr equal gy msg valid message valid generated simulator knows appropriate password 
protocol change oracle send component chosen random change adversary success probability cs 
simulator break extended cs encryption chosen ciphertext attack follows parameters extended cs encryption public parameters protocol 
course protocol simulator may determine new message appears valid submitting decryption oracle checking returned plaintext equal appropriate password 
calls send oracle simulator submits appropriate password plaintext server name value request server encryption see appendix 
return simulator server may encryption appropriate password random group element hz cd simple hybrid argument bounds change adversary success probability 
protocol send oracle changed msg previously session key chosen random ensure consis tency send server oracle changed follows sid matches sid instance set equal sk statistical difference adversary view protocol previous bounded min fact shows views equivalent msg invalid 
furthermore probability msg valid appropriate password chosen random 
protocol send oracle changed component chosen randomly similar analysis protocol change adversary success probability cs 
protocol send oracle changed random session key chosen msg previously 
similar anal efficient password authenticated key exchange ysis protocol statistical difference adversary view protocol previous protocol bounded min consider adversary advantage protocol 
adversary view entirely independent passwords chosen simulator adversary manages submit new msg appears valid point execution protocol succeeds guessing password 
adversary probability guessing password precisely assumes passwords selected uniformly analogous calculation done case 
adversary advantage protocol bounded note adversary ask query query meaningful similarly ask query query meaningful 
adversary advantage original protocol bounded expression theorem 
acknowledgments yehuda lindell philip mackenzie steven myers helpful discussions topic password authenticated key exchange 

bellare micali 
public key encryption multi user setting security proofs improvements 
eurocrypt 

bellare canetti krawczyk 
modular approach design analysis authentication key exchange protocols 
stoc 

bellare pointcheval rogaway 
authenticated key exchange secure dictionary attacks 
eurocrypt 

bellare rogaway 
entity authentication key distribution 
crypto 

bellare rogaway 
random oracles practical paradigm designing efficient protocols 
acm cccs 

bellare rogaway 
provably secure session key distribution party case 
stoc 

bellovin merritt 
encrypted key exchange password protocols secure dictionary attacks 
ieee symposium security privacy 

boneh 
decision diffie hellman problem 
proceedings third algorithmic number theory symposium 


public key cryptography password protocols multi user case 
acm cccs 

mackenzie patel 
provably secure password authenticated key exchange diffie hellman 
eurocrypt 


transforms password authenticated key exchange protocols 
phd thesis mit department electrical engineering computer science cambridge ma 

canetti goldreich halevi 
random oracle methodology revisited 
stoc 
jonathan katz ostrovsky moti yung 
cramer shoup 
practical public key cryptosystem provably secure chosen ciphertext attack 
crypto 

diffie hellman 
new directions cryptography 
ieee trans 
info 
theory 

goldreich micali 
line line digital signatures 
crypto 

goldreich 
foundations modern cryptography 
crypto 

goldreich lindell 
personal communication crypto rump session 
session key generation human passwords 
available eprint iacr org 

goldreich micali wigderson 
play mental game completeness theorem protocols honest majority 
stoc 

goldwasser rivest micali 
digital signature scheme secure adaptive chosen message attacks 
siam comp 


halevi krawczyk 
public key cryptography password protocols 
acm transactions information system security 


open key exchange defeat dictionary attacks encrypting public keys 
proceedings workshop security protocols 

mackenzie patel swaminathan 
password authenticated key exchange rsa 
asiacrypt 

naor yung 
universal way hash functions cryptographic applications 
stoc 

stern 
security analysis practical fly authentication signature generation 
eurocrypt 

stern 
fly signatures factoring 
acm cccs 


way functions necessary sufficient secure signatures 
stoc 

schnorr 
efficient signature generation smartcards 
crypto 


shoup 
formal models secure key exchange 
available ucsd edu 
building blocks decisional diffie hellman ddh assumption see 
concreteness subgroup order prime security parameter 
generator ddh assumption states infeasible adversary distinguish distributions zq xz yz zq 
precisely choose random distributions give adversary element chosen distribution 
adversary succeeds guessing distribution chosen advantage defined usual 
ddh maximum advantage adversary runs time ddh assumption poly advantage ddh negligible 
efficient password authenticated key exchange time digital signatures see 
probabilistic algorithm generating public verification key private signing key vk sk 
signing message denoted sig sign sk verification denoted verify pk sig signature correct 
consider experiment run generate vk sk 
message chosen signature sig sign sk computed 
adversary pk sig outputs pair sig equal message signature pair 
adversary advantage defined probability verify pk sig 
sig maximum possible advantage adversary runs time assumption poly value negligible 
note signature scheme meeting requirement constructed way function extended cramer shoup encryption 
cramer shoup cryptosystem encryption scheme secure adaptive chosen ciphertext attack see formal definitions 
extend cryptosystem discussed appendix extension remains secure adaptive chosen ciphertext attack 
extension gives types encryption algorithms client encryption algorithm server encryption algorithm identical public parameters 
consider experiment run generate public key private key pair pk sk 
adversary pk access decryption oracle ciphertext returns corresponding plaintext ciphertext invalid 
adversary outputs plaintext may request client encryption server encryption random bit chosen adversary random encryption type requested adversary random encryption type requested random element 
adversary may continue submit queries decryption oracle ask decryption challenge ciphertext 
adversary succeeds guessing advantage defined usual 
cs maximum possible advantage adversary runs time asks decryption oracle queries 
see appendix proved poly advantage cs negligible ddh assumption 
concrete security bound 
extended cramer shoup encryption consider extension cramer shoup encryption scheme chosen ciphertext secure 
new techniques proof security modified scheme exactly original exception details careful get right 
public parameters generators gz gx gy gy universal way hash function ciphertexts form ddh assumption implies way function 
jonathan katz ostrovsky moti yung decryption done computed condition checked fails output 
output plaintext essential difference lies definition encryption oracle 
adversary submits plaintext submits additional information encryption oracle returns side information addition ciphertext 
precisely adversary includes bit determines plaintext encrypted client encryption server encryption 
case client encryption adversary includes client client 
case server encryption adversary includes server server value zq 
encryption oracle sets probability chooses randomly 
encryption carried follows client encryption client vk sk client vk zq cd return sk server encryption server zq server hz cd cd return theorem 
encryption scheme outlined secure sense indistinguishability adaptive chosen ciphertext attack 
sketch proof informal proof security exactly follows easily verified additional information adversary improve advantage 
point requiring careful consideration adversary probability finding collision collision resistant stronger assumption universal way left prove 
universal way noted vk selected simulator simulator prepares public key knows log produce representation value adversary 
deal fact adversary gets choose bit determines client encryption server encryption seeing set user fixed advance worst size polynomial security parameter simulator guess adversary choices advance affect simulator probability finding collision polynomial factor details omitted 
efficient password authenticated key exchange formal specification protocol initialize select prime defines group choose random generators publish parameters pw client 
fig 

specification protocol initialization 
execute client server vk sk zq client vk gr hr pwc cd msg client vk gx hz cd gr hr pw server cd msg server gy hz cd msg sign sk sk ski ax pw pw sid sidi msg msg msg return msg msg msg reveal user return sk test user sk return sk return sk fig 

specification execute reveal test oracles adversary access 
note public underlying group 
subscript refers server client 
jonathan katz ostrovsky moti yung send client server vk sk pwc msg client vk cd state sk msg return msg send server client vk zq client vk zq client vk hz cd pwc server msg server cd statei msg msg return msg send client server sk msg statei server zq hz cd msg sid msg msg msg pw return msg sk er send server sig msg msg statei vk msg sid msg msg msg sig pw sk return sk fig 

specification send oracles adversary access 
note public underlying group 
subscript refers server client 
third argument send oracles denoted msg 
