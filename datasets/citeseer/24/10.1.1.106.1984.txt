discovering similar multidimensional trajectories uc riverside cs ucr edu investigate techniques analysis retrieval object trajectories dimensional space 
kind data usually contain great amount noise previously metrics fail 
formalize non metric similarity functions longest common subsequence robust noise furthermore provide intuitive notion similarity trajectories giving weight similar portions sequences 
stretching sequences time allowed global translating sequences space 
efficient approximate algorithms compute similarity measures provided 
compare new methods widely euclidean time warping distance functions real synthetic data show superiority approach especially strong presence noise 
prove weaker version triangle inequality employ indexing structure answer nearest neighbor queries 
experimental results validate accuracy efficiency approach 
investigate problem discovering similar trajectories moving objects 
trajectory moving object typically modeled sequence consecutive locations multidimensional generally dimensional euclidean space 
data types arise applications location object measured repeatedly time 
examples include features extracted video clips animal mobility experiments sign language recognition mobile phone usage multiple attribute response curves drug therapy 
advances mobile computing sensor gps technology possible collect large amounts spatiotemporal data increasing interest perform data analysis tasks data 
example mobile computing users equipped george boston university cs bu edu dimitrios gunopulos uc riverside dg cs ucr edu mobile devices move space register location different time instants wireless links spatiotemporal databases 
environmental information systems tracking animals weather conditions common large datasets created storing locations observed objects time 
data analysis data include determining finding objects moved similar way followed certain motion pattern 
appropriate efficient model defining similarity trajectory data important quality data analysis tasks 
robust distance metrics trajectories general trajectories obtained tracking procedure aid various sensors 
lies main obstacle data may contain significant amount outliers words incorrect data measurements example stock data contain errors whatsoever 
movement movement 
examples trajectories 
instances video tracked time series data representing word athens 
start contain outliers 
time dtw athens athens boston boston 
hierarchical clustering series displayed 
left presence outliers sequences leads incorrect clustering 
dtw robust noisy conditions 
right focusing common parts achieves correct clustering 
objective automatic classification trajectories nearest neighbor classification 
shown nearest neighbor rule asymptotic error rate twice bayes error rate 
problem database trajectories query database want find trajectory closest need define 
realistic distance function 
efficient indexing scheme 
previous approaches model similarity time series include euclidean dynamic time warping dtw distance relatively sensitive noise 
distance functions robust extremely noisy data typically violate triangular inequality 
functions achieve considering dissimilar parts objects 
useful represent accurate model human perception comparing kind data images trajectories focus portions similar willing pay attention regions great dissimilarity 
kind data need distance functions address issues different sampling rates different speeds 
time series obtain guaranteed outcome sampling fixed time intervals 
sensors collecting data may fail period time leading inconsistent sampling rates 
time series moving exactly similar way moving twice speed result probably large euclidean distance 
similar motions different space regions 
objects move similarly differ space move 
easily observed sign language recognition camera centered different positions 
euclidean space usually subtracting average value time series move similar series closer 
outliers 
introduced due anomaly sensor collecting data attributed human failure jerky movement tracking process 
case euclidean distance completely fail result large distance difference may points 
different lengths 
euclidean distance deals time series equal length 
case different lengths decide truncate longer series pad zeros shorter general gets complicated distance notion vague 
efficiency 
adequately expressive suf simple allow efficient computation similarity 
cope challenges longest common subsequence model 
variation edit distance 
basic idea match sequences allowing stretch rearranging sequence elements allowing elements unmatched 
advantages method twofold elements may unmatched euclidean dtw elements matched outliers 
model allows efficient approximate computation shown dtw need compute costly norm 
see clustering produced distance 
sequences represent data collected video tracking process 
originally represent series dimension depicted ity 
fails distinguish classes words due great amount outliers especially trajectories 
euclidean distance obtain worse results 
produces intuitive clustering shown 
generally euclidean distance sensitive small variations time axis major drawback pair elements sequences 
model define similarity measures trajectories 
simple extension model dimensions sufficient example model deal parallel movements 
extend order address similar problems 
similarity model consider set translations dimensions find translation yields optimal solution problem 
rest organized follows 
section formalize new similarity functions extending model 
section demonstrates efficient algorithms compute functions section elaborates indexing structure 
section provides experimental validation accuracy efficiency proposed approach section presents related 
section concludes 
similarity measures section define similarity models match user perception similar trajectories 
give useful definitions proceed presenting similarity functions appropriate models 
assume objects points move plane time discrete 
trajectories moving objects size respectively trajectory sequence definition integer real number define follows constant controls far time go order match point trajectory point trajectory 
constant matching threshold see 
similarity function idea allow time stretching 
objects close space different time instants matched time instants close 
definition define similarity function trajectories follows function define similarity measure suitable trajectories 
consider set translations 
translation simply shifts trajectory space different constant dimension 
family translations 
function belongs define second notion similarity family functions 

notion matching region trajectory 
points trajectories gray region matched extended function 
definition family translations define similarity function trajectories follows similarity functions define distance function trajectories follows range definition trajectories define distance functions note symmetric 
transformation equal translation preserves symmetric prop erty 
allowing translations detect similarities movements parallel space identical 
addition model allows stretching displacement time detect similarities movements happen different speeds different times 
show example trajectory matches trajectory translation applied 
note value parameters important give distance trajectories space 
useful information analyze trajectory data 
time 
translation trajectory similarity function significant improvement detect parallel move ments ii normalization guarantee get best match trajectories 
usually significant amount noise average value standard deviation time series normalization process distorted leading improper translations 
efficient algorithms compute similarity computing similarity function compute similarity functions run computation sequences 
computed dynamic programming algorithm time 
allow matchings difference indices allows faster algorithm 
lemma shown :10.1.1.56.8782
lemma trajectories find time 
small dynamic programming algorithm efficient 
applications may need large 
case speed computation random sampling 
trajectories compute subsets sampling trajectory 
dynamic programming algorithm compute show high probability result algorithm samples approximation actual value 
describe technique detail 
computing similarity function consider complex similarity function sequences constants find translation maximizes length longest common subsequence possible translations 
length trajectories re spectively 
assume translation translation applied gives longest common subsequence translation maximizes length longest common subsequence key observation infinite number translations apply transla tion results longest common subsequence finite set possible longest common subsequences 
section show efficiently enumerate finite set translations set provably includes translation maximizes length longest common subsequence give bound number transformations consider look projections trajectories axes separately 
define projection trajectory sequence values coordinate dimensional translation function adds constant elements dimensional sequence take projections respectively 
show lemma lemma trajectories length longest common subsequence dimensional sequences consider translation applied thought linear transformation form transformation allow matched instructive view stabbing problem consider vertical line segments ax axis ax ax ax bx bx bx bx 
bx fc fc bx axis 
example translations line segments dimensional plane axis put elements axis put elements pair elements positions matched algo rithm values create vertical line segment centered point extends point 
element matched elements total number line segments translation dimension function form plane described line slope 
translating element matched el ement line intersects line segment line slope defines set possible matchings elements sequences number intersected line segments upper bound length longest common subsequence ordering elements ignored 
different translations result different longest common subsequences respective lines intersect different set line segments 
example translations intersect different sets line segments result longest common subsequences different length 
lemma gives bound number possible different longest common subsequences bounding number possible different sets line segments intersected lines slope 
lemma dimensional sequences lines slope intersect different sets line segments 
proof line slope 
move line slightly left right intersects number line segments cross endpoint line segment 
case set inter line segments increases decreases 
endpoints 
line slope sweeps endpoints intersect different sets line segments sweep 
addition enumerate trans lations produce different sets potential matchings finding lines slope pass endpoints 
translation corresponds line set translations gives possible matchings longest common subsequence applying process find set translations give matchings quences consider dimensional translations created cartesian product translations trans lations running algorithm takes find longest common subsequence se theorem trajectories compute shown theorem time 
efficient approximate algorithm theorem gives exact algorithm computing algorithm runs cubic time 
section efficient approximate algorithm 
key technique bound difference sets line segments different lines slope intersect far apart lines 
consider dimensional projections translations result lets consider different sets intersected line segments 
translation line form sort trans lations translation set line segments intersects 
lemma shows neighbor translations order intersect similar sets line segments 
lemma different translations sequences symmetric difference prove main theorem theorem trajectories constant find ap proximation similarity time 
proof axes 
exists translation consider projections superset matches optimal addition previous lemma translations different matchings optimal 
translations ordering described different matchings optimal matching find translations alternatively find translations time run quantile op time find sort translations 
erations 
true get total plane 
away pairs translations optimal dimension away optimal dimensions 
setting proof 
completes trajectories lengths respectively constants approximation algorithm works follows 
projections axes find sets different translations axis 

find 
run th quantiles set pairs translations 
algorithm 
return highest result 
indexing trajectories similarity retrieval section show hierarchical tree clustering algorithm order efficiently answer nearest neighbor queries dataset trajectories 
distance function metric obey triangle inequality 
easy construct examples trajectories traditional indexing techniques difficult 
prove weaker version triangle inequality help avoid examining large portion database objects 
define clearly set translations 
show lemma lemma trajectories length sequence proof clearly element match element element matches element element match element elements match elements el ements follows indexing structure partition trajectories sets length longest trajectory set times shortest typically apply hierarchical clustering algorithm set tree algorithm produced follows node tree store medoid cluster 
medoid tory minimum distance maximum trajectory cluster tree query sequence want examine follow subtree rooted previous lemma know sequence terms distance order provide lower bound maximize expression node tree medoid keep trajectory maximizes expression 
length query smaller shortest length trajectories currently considering minimum maximum lengths obtain approximate result 
searching index tree nearest trajectories assume search index tree contains trajectories minimum length maximum length simplicity discuss algorithm nearest neighbor query query trajectory try find trajectory set similar search procedure takes input node tree query distance closest tra far 
children check child trajectory cluster 
case trajectory just compare distance current nearest trajectory 
cluster check length query choose appropriate value compute lower bound distance query trajectory cluster compare result distance current near est neighbor need examine cluster smaller scheme approximate algorithm compute consequently value compute times higher exact value 
approximate algorithm section indexing trajectories subtract bound compute note don need worry terms negative sign approximation algorithm underestimates experimental evaluation implemented proposed approximation indexing techniques described previous sections experimental results evaluating techniques 
describe datasets continue presenting results 
purpose experiments twofold evaluate efficiency accuracy approximation algorithm section second evaluate indexing technique discussed previous section 
experiments run pc amd athlon ghz gb ram gb hard disk 
time accuracy experiments results experiments approximation algorithm compute similarity function dataset comes marine mammals satellite tracking data 
consists sequences geographic locations various marine animals dolphins sea lions whales tracked different periods time range months seals dataset 
length trajectories close shown 
table show computed similarity pair sequences seals dataset 
run exact approximate algorithm different values report indicative results 
number times approximate algorithm invokes examples procedure number translations try 
see get results 
got similar results synthetic datasets 
table report running times compute similarity measure trajectories dataset 
approximation algorithm uses different runs 
running time approximation algorithm faster observed experimental results running times approximation algorithm proportional number runs 
achieved reusing results previous translations terminating early execution current translation going yield better result 
main experiments approximation algorithm provide tractable time vs accuracy trade computing similarity trajectories similarity defined model 
classification approximation algorithm compare clustering performance method widely euclidean dtw distance functions 
specifically whale edu cover html similarity running time sec exact approximate tries exact approximate tries table 
similarity values running times sequences seals dataset 

euclidean distance defined sequences length length sequences vary considerably 
tried offer best possible comparison pair sequences sliding shorter trajectories longer recording minimum distance 

dtw modified original algorithm order match coordinates 
dtw euclidean normalized data computing distances 
method need normalization computes necessary translations 

randomized version sampling various values time correct clusterings represent average values runs experiment 
necessary due randomized nature approach 
determining values values clearly dependent application dataset 
datasets disposal discovered setting trajectories length yield significant improvement 
furthermore point similarity stabilizes certain value 
determination application dependent 
experiments value equal smallest standard deviation trajectories examined time yielded intuitive results 
index value pairs trajectories 
experiment video tracking data 
time series obtained represent position human tracking feature tip finger 
conjuction spelling program user write various words 
recordings different words 
data correspond words athens berlin london boston paris 
average length series points 
shortest points longest points 
determine efficiency method formed hierarchical clustering computing pairwise distances distance functions 
evaluate total time required method quality clustering knowledge word trajectory represents 
take possible pairs words case pairs clustering algorithm partition classes 
lower levels dendrogram clustering subjective top level provide accurate division classes 
clustered single complete average linkage 
best results distance function produced complete linkage report results approach table 
experiment conducted rest datasets 
experiments conducted different sample sizes values percentage original series length 
results euclidean distance classification errors dtw errors 
real variations clustering sam ple sizes average incorrect clusterings cases constantly 
sampling errors 
experiment australian sign language dataset asl dataset consists various parameters hand position azimuth tracked different writers sign words asl 
series relatively short points 
parameters collected recordings words norway cold crazy eat forget happy innocent lose spend 
experiment conducted dimension 
examples dataset seen 
kdd ics uci edu distance function time sec correct clusterings complete linkage euclidean dtw table 
results video tracking data various sizes sample distance time sec correct clusterings asl correct clusterings asl noise euclidean dtw table 
results asl data asl added noise euclidean dtw distance functions 
performance experiment similar dtw recognized correctly clusters recognized clusters 
expected dataset contain excessive noise furthermore data normalized rescaled range experiment similarity function translation translations going achieve improvement see 
sampling performed series length trajectories short 
consequence don gain accuracy execution time comparable euclidean performing translations 
easily explained computation norm computationally intensive simple range comparison approach 
movement movement 
recordings word norway australian sign language 
graph depicts position writer hand 
experiment asl added noise added noise sequence asl random starting point duration equal series length 
noise added func tion produces random number chosen normal distribution mean zero variance range values coordinates 
experiment wanted see addition noise affect performance distance functions 
running time original data 
proves robust euclidean dtw noisy conditions table 
euclidean performed poorly recognizing clusters dtw recognized clusters recognized euclidean noise 
evaluating quality efficiency indexing technique part experiments evaluated efficiency effectiveness proposed indexing scheme 
performed tests datasets different sizes different number clusters 
generate large realistic datasets real trajectories time datasets seeds create larger datasets follow patterns 
perform tests queries exact matches database hand similar existing trajectories 
experiment run different queries report averaged results 
tested index performance different number clusters dataset consisting total tra fraction dataset examined time sec sample size delta percentage series length 
asl data time required compute pairwise distances combinations asl asl noise number nearest neighbors clusters clusters clusters 
performance increasing number nearest neighbors 

executed set nearest neighbor nn queries plot fraction dataset examined order guarantee best match nn query 
note fraction included medoids check search part dataset 
show results nearest neighbor queries 
datasets clusters 
see results indicate algorithm performance queries large performed similar experiments varied number clusters datasets 
number clusters increased performance algorithm improved considerably 
behavior expected similar behavior proposed index structures high dimensional data :10.1.1.31.1422
hand dataset clusters performance algorithm degrades major av 
correct clusterings sample size delta percentage series length 
noisy asl data correct clusterings method complete linkage 
fraction dataset examined number nearest neighbors trajectories 
pruning power increases database size 
ity trajectories distance query 
behavior follows pattern high dimensional indexing methods 
experiment evaluates index performance sets trajectories increasing cardinality 
indexed trajectories 
pruning power inequality evident 
size database increases avoid examining larger fraction database 
related simplest approach define similarity sequences map sequence vector norm distance define similarity measure 
norm distance dimensional vectors defined known euclidean distance manhattan distance 
various approaches extended indexed distance metric 
approach time warping technique match signals speech recognition 
berndt clifford proposed technique measure similarity time series data data mining 
works similarity measure 
similar technique find longest common subsequence sequences define dis tance length subsequence 
shows sequences match allowed stretch rearrange sequence values 
values real numbers typically allow approximate matching exact matching 
fast probabilistic algorithms compute time series 
techniques define time series similarity extracting certain features landmarks signatures time series features define similarity 
interesting approach represent time series direction sequence regular time intervals 
ge smyth interesting alternative approach sequence similarity probabilistic matching 
domain independent framework defining queries terms similarity objects 
note deals mainly dimensional time series 
related 
discuss define similarity measures sequences multidimensional points restricted version edit distance equivalent efficient methods index sequences similarity retrieval 
focus sequences feature vectors extracted images trajectories discuss transformations approximate methods compute similarity 
lee propose methods index sequences multidimensional points 
extend ideas faloutsos similarity model euclidean distance 
proposes method cluster trajectory data due smyth 
variation em expectation maximization algorithm cluster small sets trajectories 
method model approach usually scalability problems 
implicitly assumes data trajectories follow basic models easy find describe real datasets 
lately indexing moving objects answer spatial proximity queries range near est neighbor queries 
index methods answer topological navigational queries database stores trajectories moving objects 
works consider global similarity model trajectories concentrate finding objects close query locations time instant time period specified query 
efficient techniques accurately compute similarity trajectories moving objects 
distance measure model performs noisy signals 
exact computation inefficient approximate algorithms provable performance bounds 
efficient index structure hierarchical clustering similarity nearest neighbor queries 
distance metric triangle inequality hold 
prove similar inequality holds weaker allows prune parts datasets false dismissals 
indicate approximation algorithm get accurate fast estimation distance trajectories noisy conditions 
results index evaluation show achieve speed ups searching similar trajectories comparing brute force linear scan 
plan investigate biased sampling improve running time approximation algorithms especially full rigid transformations 
shifting scaling rotation necessary 
approach index trajectories similarity retrieval embeddings map set trajectories points low dimensional euclidean space 
challenge course find embedding approximately preserves original pairwise distances gives approximate results similarity queries 
agarwal arge erickson 
indexing moving points 
proc 
th acm symp 
principles database systems pods pages 
agrawal faloutsos swami 
efficient similarity search sequence databases 
proc 
th fodo pages oct 
agrawal lin sawhney shim 
fast similarity search presence noise scaling translation time series databases 
proc vldb pages sept 
barbara 
mobile computing databases survey 
ieee tkde pages jan 
berndt clifford 
dynamic time warping find patterns time series 
proc 
kdd workshop 
beyer goldstein ramakrishnan shaft 
nearest neighbor meaningful 
proc icdt jerusalem pages 
bollobas das gunopulos mannila 
time series similarity problems separated geometric sets 
proc th scg nice france 
ozsoyoglu 
matching indexing sequences different lengths 
proc cikm las vegas 
chakrabarti mehrotra 
local dimensionality reduction new approach indexing high dimensional spaces 
proc 
vldb pages 
chu wong 
fast time series searching scaling shifting 
acm principles database systems pages june 
das gunopulos mannila :10.1.1.56.8782
finding similar time series 
proc 
pkdd symp pages 
duda hart 
pattern classification scene analysis 
john wiley sons 
faloutsos jagadish mendelzon milo 
signature technique similarity queries 
se quences 
faloutsos 
lin 
fastmap fast algorithm indexing data mining visualization traditional multimedia datasets 
proc 
acm sigmod pages may 
faloutsos ranganathan manolopoulos 
fast subsequence matching time series databases 
proceedings acm sigmod pages may 
smyth 
trajectory clustering mixtures regression models 
proc 
th acm sigkdd san diego ca pages aug 
ge smyth 
deformable markov model templates time series pattern matching 
proc acm sigkdd 
gionis indyk motwani 
similarity search high dimensions hashing 
proc 
th vldb pages 
fleming 
camera mouse preliminary investigation automated visual tracking computer access 
proceedings rehabilitation engineering assistive technology society north america annual conference pages orlando fl july 
goldin kanellakis 
similarity queries time series data 
proceedings cp france sept 
goldstein ramakrishnan 
contrast plots trees space vs time nearest neighbour searches 
proc 
vldb cairo pages 
jagadish mendelzon milo 
similaritybased queries 
proc 
th acm pods pages may 
singh 
variable length queries time series data 
proc 
ieee icde pages 
keogh chakrabarti mehrotra pazzani 
locally adaptive dimensionality reduction indexing large time series databases 
proc 
acm sigmod pages 
keogh pazzani 
scaling dynamic time warping datamining applications 
proc 
th int 
conf 
knowledge discovery data mining boston ma 
gunopulos 
indexing mobile objects 
proc 
th acm symp 
principles database systems pods pages june 

lee 
chun 
kim 
lee 
chung 
similarity search multidimensional data sequences 
proceedings icde pages 
park chu yoon hsu 
efficient searches similar subsequences different lengths sequence databases 
proceedings icde pages 
wang zhang parker 
landmarks new model similarity pattern querying time series databases 
proceedings icde pages 
jensen theodoridis 
novel approaches query processing moving objects 
proceedings vldb cairo egypt sept 
qu wang wang 
supporting fast search time series movement patterns multiple scales 
proc acm cikm pages 
rafiei mendelzon 
querying time series data similarity 
ieee transactions knowledge data engineering vol 
pages 
sakoe chiba 
dynamic programming algorithm optimization spoken word recognition 
ieee trans 
acoustics speech signal processing assp feb 
jensen leutenegger lopez 
indexing positions continuously moving objects 
proceedings acm sigmod pages may 

indexing similar trajectories 
technical report 
weber 
schek blott 
quantitative analysis performance study similarity search methods high dimensional spaces 
proc 
vldb nyc pages 

yi faloutsos 
fast time sequence indexing arbitrary lp norms 
proceedings vldb cairo egypt sept 
