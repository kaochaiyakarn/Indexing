computing information compression multiple alignment uni cation search gerard wol university bangor uk gerry sees bangor ac uk argues operations universal turing machine utm equivalent mechanisms post canonical system pcs widely accepted de nitions concept computing may information compression multiple alignment uni cation search icmaus 
motivation interpretation suggests ways utm pcs model may proposed new computing system designed exploit icmaus principles fully possible 
provision relatively sophisticated search mechanism proposed sp system appears open door integration simpli cation range functions including unsupervised inductive learning best match pattern recognition information retrieval probabilistic reasoning planning problem solving 
detailed consideration icmaus principles may applied functions outside scope article relevant sources cited article 
key words theory computing turing machine post canonical system multiple alignment new computing paradigms 
category sd journal universal computer science vol 
submitted accepted appeared springer pub 
years widely accepted intuitive concept computing may de ned terms operations universal turing machine utm turing concepts recognised equivalent lambda calculus church kleene see rosser recursive function kleene normal algorithm markov post canonical system pcs post 
related ideas successful providing theoretical basis design modern digital computers 
notwithstanding turing vision possibility arti cial intelligence turing utm pcs equivalent models computing operate rigid manner appears far removed human intelligence 
likewise ordinary digital computers special programming notoriously lacking human exibility intelligence 
utm equivalent models conventional computer raw state little functionality little intelligence necessary practical purposes create programs provide missing capabilities far understood 
understanding increasing success ai applications achieving human capabilities speech recognition ability play games chess go bridge ability recognise visual patterns objects exible manner 
computers rst invented ort devoted development programs associated concepts wide range applications 
areas application quite served specialised programs 
notwithstanding development suites programs intended problems integration di erent kinds application 
similar concepts emerged diverse forms 
example concept heuristic search manifests form hill climbing descent genetic algorithm simulated annealing dynamic programming neural computation 
normally recognised heuristic methods appear standard computational techniques newton raphson method nding square roots dynamic programming techniques matching patterns retrieving information 
diversity programs concepts collectively complex 
need simpli cation diverse areas 
new developments wolff computing information compression 
considerations main motivation programme research wol wol seeking new insights nature computing aiming develop new generation computing system ideas 
identify elements shared diverse applications elements truly speci application may help achieve simpli cation computing systems better integration applications 
mean programming cost opportunity introduce errors yielding gains quality 
shall see section central idea research conjecture kinds computing formal reasoning may usefully understood information compression multiple alignment uni cation search ic maus 
conjecture may turn wrong 
accumulation supporting evidence described discussed sources cited section 
word theory proposals section may suggest intended displace established theories computing 
accurate say proposals framework ideas provide interpretation established models computing suggest ways models may augmented provide additional functionality generic applications 
test bed ideas vehicle demonstrations software model developed sp running conventional computer 
described brie section fully sources cited 
alignments shown output model 
wolff computing information compression 
scope orientation regarding primary motivation developments promote simplicity integration computing attempt demonstrate potential ideas 
readers referred sources describing ideas may apply diverse areas computing background thinking pervasive nature information compression human cognition arti cial computing wol 
unsupervised inductive learning entire programme research previous programme research unsupervised inductive learning language wol wol earlier articles cited articles 
demonstration early form framework ideas may applied learning wol 
integration unsupervised inductive learning di erent kinds reasoning wol 
best match information retrieval wol wol 
design execution software wol 
potential range applications sp concepts wol wol 
causality wol 
parsing natural language representing structure natural language icmaus framework wol wol wol 
probabilistic reasoning icmaus framework wol wol wol wol including representing class hierarchies inheritance attributes 
best match pattern recognition information retrieval 
probabilistic deductive reasoning 
probabilistic abductive reasoning 
reasoning probabilistic decision networks decision trees 
reasoning probabilistic rules 
reasoning default values nonmonotonic reasoning 
solving geometric analogy problems 
modelling functioning bayesian network 
primary purpose describe sp theory outline show provide interpretive framework utm pcs describe models may augmented greater generic functionality 
apart appendix presentation relatively informal examples ideas clear 
attempt formal proof icmaus framework may model utm pcs largely detailed proof take far space available 
papers written stage multiple alignment insights achieved see section 
presentation follows section describes outline sp theory developed date brief remarks working models system 
section describes brie concept utm fully equivalent concept pcs 
section tries show operation pcs consequently operation utm may interpreted terms icmaus concepts 
section considers established models computing may advantage augmented 
section contains concluding remarks 
appendix de nes key terms article 
sp theory wolff computing information compression 
indicated central idea sp theory conjecture kinds computing formal reasoning may usefully understood information compression multiple alignment uni cation search 
information compression ic may process maximising simplicity information reducing redundancy whilst retaining possible non redundant descriptive power 
mnemonic sp applied ideas 
programme research term multiple alignment ma meaning related distinct meaning bio informatics term normally 
meaning term programme research explained section 
term uni cation means simple merging matching symbols sequences symbols meaning related simpler concept uni cation logic means assignment variables structures structures 
explained fully section uni cation matching patterns core mechanism information compressed 
earlier publications conjecture expressed words pattern matching place words multiple alignment 
years appropriate focus narrowly multiple alignment form pattern matching promising framework uni cation search intended integration concepts 
meaning term pattern research de ned appendix includes meaning term sequence general includes arrays symbols dimensions includes sequences arrays discontinuous 
contexts article term pattern may read synonymous term sequence 
wolff computing information compression 
sole mechanism information may compressed meaning mechanisms may seen contain uni cation fundamental level 
research needed establish conjecture true 
context term search means systematic exploration space possible multiple alignments 
mean exhaustive search entire space possible alignments ampli ed practical problems kind constraint reduces size space searched 
shall see section conjecture nature computing depends key assumption ic measured 
needs quali ed observation practical process searching mas yield ic necessary examine mas yielding ics zero negative see section 
minimum length encoding unsupervised inductive learning sp theory incorporates version principle minimum length encoding mle eld inductive inference see solomono wallace boulton rissanen li vitanyi 
mle version occam razor 
key idea mle measuring compression measure size raw data encoded form size code patterns needed create encoding 
course components constant case examples considered article purposes comparison necessary measure varies 
components vary omitted counterintuitive anomalies arise 
example may create code pattern comprising entire contents works shakespeare bit label 
code pattern compress complete works shakespeare bit 
alternatively create set code patterns comprising letters characters print text shakespeare 
case set code patterns small encoding works shakespeare patterns gives result size original 
clearly realistic compression shakespeare text falls extremes 
minimising size set code patterns encoded text produce required balance 
connection discovery development ideas solomono writes trying nd algorithm discovery best grammar set acceptable sentences 
things sought mle umbrella term concepts minimum message length encoding mml closely related minimum description length encoding mdl 
set positive cases acceptable sentences grammars able generate sentences goodness criterion 
clear ad hoc grammar lists sentences corpus ts perfectly 
promiscuous grammar accepts conceivable sentence ts perfectly 
rst grammar long description second short description 
grammar half way correct criterion 
indicated key minimise size grammar repository code patterns text encoded terms grammar 
similar ideas developed computer models designed test statistical mechanisms provide explanation aspects children apparently achieve learn rst language see wol wol earlier papers referenced evidence children learn segmental structure language words phrases sentences needing explicit markers beginnings ends structures explicit teaching 
similar way appear able bootstrap knowledge word classes disjunctive categories language aid teacher assistance 
apparently need external supervision correction children learn distinguish correct generalisations grammatical rules incorrect despite fact de nition kinds generalisation zero frequency child experience 
models developed described sources cited appear provide solutions problems product way ad hoc provision exhibit features learning correspond remarkably range phenomena observed children learn rst language 
empirical evidence reviewed wol 
multiple alignment wolff computing information compression 
term multiple alignment normally associated computational analysis symbolic representations sequences dna bases sequences amino acid residues part process elucidating structure functions evolution corresponding molecules 
aim computation nd alignments sense 
mean discussed brie section 
alignment arrangement oftwo sequences atomic symbols judicious stretching sequences appropriate symbols match arranged vertical columns 
matter presentation convenient allow columns contain symbols match case vertical lines symbols mark positive matches hits symbols 
example alignment dna sequences uses second convention shown 
alignment dna sequences 
generalisation concept multiple alignment research concept ma generalised way 
sequences symbols aligned special status designated new 

sequences designated old 

alignments evaluated terms compression new achieved encoding new terms sequences old hierarchical encoding tags mentioned section 
detailed description done wol wol somewhat detailed description wol 

implication way framing alignment problem contrast multiple alignment normally understood bio informatics sequence old may appear times alignment may aligned obvious restriction instance symbol may aligned 
regarding point kind ma shown obviously include copies sequence alignment 
bother practice simply lead trivial alignment symbol copy corresponding symbol symbols copies 
proposed icmaus framework di erent sequence may appear times alignment 
appearance just appearance sequence duplicate copy pattern 
appearance pattern represents pattern sense recognise hit symbol appearance corresponding symbol appearance simply matching instance symbol 
match spurious forbidden 
entirely possible recognise hit symbol pattern di erent symbol pattern 
examples seen 
simple example wolff computing information compression 
give reader concept multiple alignment developed research simple example wol wolff computing information compression showing parsing may understood terms 
shows grammar fragment syntax patterns de ned section 
particular example models context free phrase structure grammar cf psg rewrite arrow pattern number shown brackets right notional frequency occurrence parsing sample english 
simple grammar written patterns symbols 
pattern brackets right representing frequency occurrence pattern parsing notional sample language 
shows ma parsing sentence grammar 
parsings sentence parsed plays role new grammar parsing treated old 
convention kinds ma pattern occupies rst row alignment relevant patterns old shown second subsequent rows pattern row 
parsing sentence sequences representing sentence relevant rules grammar 
evaluation alignments terms information compression intuitively alignment hits positive matches symbols gaps sequences symbols part despite similarity example cf psg mode representing syntax appears kind context sensitive expressive power needed represent syntax natural languages cf see wol wol wol 
wolff computing information compression hit gaps short possible 
possible measures directly computer programs nding mas commonly 
con dence validity measures may increased placed broader theoretical framework 
keeping remarks ic ic related concepts probability may provide framework 
evaluation mas tradition includes chan allison wallace allison wol 
proposals mas evaluated terms ic 
owing way concept multiple alignment generalised section way alignments evaluated terms ic described outline somewhat di erent methods 
encoding new terms codes patterns old insu cient space explain detail alignments evaluated terms ic scheme 
detailed explanation examples showing done multiple alignments wol wol somewhat detailed accounts wol wol 
subsection describes method outline 
new aligned old 
intuitively clear encode part new code symbols 
likewise may encoded 
sentence may encoded modest reduction symbols assuming sake simplicity example symbols encoded number bits 
pattern contains subsequence 
subsequence contained pattern patterns old 
means subsequence may encoded 
sequence may reduced preserving symbols encode respectively 
encoding levels sentence level word level ect reducing original symbols 
clear complex examples principles may applied recursively number levels 
regarding mle principle section measures compression include size grammar coding size data encoding true context systems learn size grammar changing 
noted previously need apply examples ones considered article example size old remains constant 
cases purposes comparison may ignore size old 
variations probability symbols patterns key role compression methods hu man coding shannon fano elias coding see cover thomas 
conversely measures information content compression calculate probabilities see solomono wol wol wol wol 
wolff computing information compression 
account probabilities patterns symbols method simply outline assumed symbol encoded number bits symbol 
method sp model see section calculates encoding cost symbol individually account frequency occurrence formula shannon fano elias method see cover thomas 
course encoding costs calculated way totally unrelated numbers characters names symbols 
names symbols purely sake human comprehension readability 
sizes codes assigned patterns may similar way related frequencies occurrence method hu man method similar 
reasons take space explain sp model determines size code pattern sizes symbols code pattern 
yields code sizes roughly line principle rare patterns longer codes common patterns result precise hu man similar methods 
role uni cation information compression may natural obvious command attention essence compression just described merging uni cation sequences symbols 
lowest level new ect uni ed old 
level patterns old uni ed old 
uni cation matching patterns codes tags show information deleted provides foundation simpler standard methods ic see storer conjecture methods 
icmaus scheme touchstone necessary uni cations applied alignment projected single sequence ambiguity left right sequence symbols 
example shown alignment projected single sequence projection symbol corresponds column alignment column containing symbols symbols uni ed 
column place alignment ensures left right position relative columns ambiguous 
mismatches alignments contrast example just nonsense alignments shown exhibit ambiguity relative left right positions 
means alignments projected single sequence making arbitrary choices supported data precede vice versa 
kind ambiguity alignment described research mismatch symbols 
icmaus scheme developed date sp model scheme expressed alignment containing mismatches symbols old discarded 
possible course devise scheme resolving kind con ict kind measure strength support alternatives 
theory current form provide motive kind need 
pending new insights dictate di erent course action alignment kind simply discarded 
icmaus scheme currently conceived sp model mismatches symbols new symbols old taken mean simply part new encoded terms alignment 
alignments kind mismatch permitted icmaus scheme necessary parsing applications larger alignments encoding relatively large parts new built smaller ones encode relatively small sections new 
information compression algorithmic information theory algorithmic information theory see example li vitanyi body information deemed random computer program generate information smaller body information 
elegant approach de ning randomness advantages earlier concepts randomness suggests information compression de ned terms relative sizes computer programs 
types encodings described may look computer programs remarkably close parallels devices structuring computer programs devices information compression 
take space discuss readers may nd relatively full discussion wol 
search wolff computing information compression 
generally understood multiple alignment problems space possible alignments corresponding uni cations normally large searched exhaustively 
example size search space alignments sequence length sequence length mx nx ai bj ai number subsequences length bj number subsequences length ai calculated ai 

likewise bj substituting simple cases size search space grows exponentially size patterns 
general search spaces large patterns short 
constraints search wolff computing information compression 
entire search space ma normally large necessary practical purposes constrain search way part search space examined 
broad terms done di erent ways may applied singly arbitrary constraints may applied 
example limit may placed maximum size gap sequence unmatched symbols alignment 
alignments excluded consideration 
kind constraint certain parts search space ruled priori reached 
second kind constraint applied heuristic techniques hill climbing descent beam search genetic algorithm simulated annealing 
techniques kind measure goodness narrow space searched successive stages 
reason known generically metrics guided search 
heuristic techniques space searched dramatically reduced part total search space ruled priori 
constraints normally trade quality best solutions search 
kinds technique ideal solutions guaranteed examples small 
examples realistic size narrowing search space described yield approximate solutions excessive computational demands 
practical applications approximate solutions quite acceptable 
escaping local peaks just noted recognised feature heuristic search techniques hill climbing search process may reach solutions search problem relatively best may 
smallest examples possible prove solution best wolff computing information compression possible solution 
solution normally possibility better solution may exist search space 
solution wish discover better may necessary search process able move hill local peak hope backtracking route may higher local peak 
alternatively search may proceed parallel paths allowed continue peaks allow possibility paths pass peaks may lead peaks higher 
context need able escape local peaks means search process needs able create alignments yielding relatively poor compression new terms old 
practice sp earlier models see section notwithstanding conjecture research section advantageous occasions system create alignments small negative 
new old established concepts computing case concepts new old far removed computing normally understood may useful stage indicate direction proposals going 
table shows current proposals concepts new old may mapped established concepts computing 
unsupervised inductive learning keeping remarks section origins mle principle key understanding unsupervised inductive learning kind learning shown rst table provides framework ideas 
envisaged compression reasonably large body information normally done incremental manner processing section time keeping heuristic techniques accommodate large search spaces incremental processing means time space possible alignments signi cantly smaller body information processed 
incremental approach compression convenient new information supplied incremental manner case processing start immediately need wait information received 
general framework envisaged initially old empty 
rst section new received selected immediately added old 
processed compressed far possible terms patterns old 
early stage compression achieved due redundancies may rst section new 
wolff computing information compression 
area new old application unsupervised raw data 
grammar inductive learning knowledge structure created learning 
parsing sentence grammar parsed 
parsing 
pattern pattern stored knowledge recognition recognised recognise scene scene pattern analysis analysed 
scene 
databases query sql records stored query language 
database 
expert query rules system query language knowledge stored expert system 
expert system 
computer data computer program program parameters 
supplied program run 
table way concepts new old research appear relate established concepts computing 
subsequent stages processing done way new section new added old set multiple alignments formed new old best selected basis encoding compressing new terms old 
successive sections new processed range patterns old gradually increase generally progressively easier nd matches useful uni cations 
stage system attempts encode new information codes tags attached patterns old 
suitable tags system creates new ones attaches required patterns parts patterns old 
aspects computing envisaged manifestations computing shown table may understood part inductive learning process described subsection 
kinds computing may seen analogous processing section new formation mas compressed terms existing patterns old existing codes 
example section illustrates idea 
model exclusion processes laying new patterns old modifying existing patterns old attaching new codes appropriate places concepts outlined embodied software model sp developed test bed ideas vehicle demonstrations 
envisaged phase development model give capability unsupervised inductive learning ability new patterns old modify existing patterns old assign new codes appropriate places 
description model current form wol somewhat detailed description wol 
fuller description similar slightly earlier version model may wol description wol 
examples earlier versions may sources cited section 
examples alignments shown article output sp edited necessary alignment page 
concepts model mature intended model form basis development sp system practical applications 
related ideas wolff computing information compression 
primary goal development icmaus framework integrate concepts wide range sub elds computing altogether surprising framework family resemblance systems 
ability icmaus framework model range kinds computing systems detailed section 
section notes systems points similarity icmaus scheme gamma parallel programming model murthy krishnamurthy chemical reaction model datastructure bag multiset 
computations interpreted succession chemical reactions consuming elements multiset producing new elements speci rules 
computations achieved basic mechanisms searching elements multiset satisfy reaction conditions element execution relevant actions 
number reactions may performed parallel provided operate sets elements 
reaction conditions select elements choice elements may probabilistically 
classi er system forrest comprises set production rules operating high parallel environment bucket brigade learning algorithm adjusting weights rules genetic algorithm learning new rules 
generally rule programming simple scheme wide range applications see example krishnamurthy krishnamurthy 
computations achieved interaction relatively simple elements rules object space produce new elements elements modi ed attributes 
disjoint subsets object space interactions may proceed parallel 
pattern matching basis elements selected 
gamma model rule programming may adapted operate non deterministic probabilistic manner 
treat algorithm miranker matching algorithm designed cient pattern matching production rule system running speci high parallel architecture dado 
systems described pattern matching high parallel environment prominent features system 
icmaus framework resembles systems relatively simple standardised entities basis knowledge representation emphasis pattern matching way knowledge processed 
high parallel environment nds echo high parallel form projected sp computing system icmaus framework 
probabilistic dimension icmaus scheme feature shared schemes just mentioned 
important di erence systems ic maus framework intended scope system 
conjecture scope icmaus framework broad computing taken granted including basic notions variable number system negation comparisons greater 
research aims things provide interpretation concepts 
distinctive icmaus framework emphasis ic unifying theme conjecture uni cation matching patterns sole mechanism achieving ic 
di erences patterns icmaus scheme simpler production rules patterns lack rewrite arrow distinction condition action multiple alignment prominent icmaus framework way systems 
probabilistic dimension icmaus scheme wol wol wol wol basic conceptual framework fundamental way schemes 
dna computing wolff computing information compression 
adleman demonstrated simple versions hamiltonian path problem solved dna solution see adleman 
prominence multiple alignment icmaus framework ma associated analysis dna molecules naturally assume relationship dna computing icmaus scheme 
main signi cance dna computing relation icmaus concepts probably chemical reactions dna molecules provide means matching patterns may done massive parallelism 
potentially mode computing provides vehicle pattern matching required icmaus scheme high levels parallelism may help achieve useful speeds 
adleman rst experiments pattern matching kind appropriate kind partial matching required icmaus fully developed forms 
baum shown pattern matching dna support sophisticated kinds heuristic processing needed nd partial matches patterns 
universal turing machine post canonical system standard form turing utm comprises tape symbols may appear sequence read write head transition function 
sequence steps symbol read tape current position head depending symbol transition function current state head new symbol written tape state head changed head moves position left right 
detailed description needed arguments take advantage fact minsky chapters operation utm modelled pcs post 
section shall describe workings pcs section shall try show operation pcs utm may understood terms icmaus 
structure pcs pcs comprises wolff computing information compression 
alphabet primitive symbols letters post terminology primitive assertions axioms strings symbols regarded input 
productions regarded program 
normally included formal de nitions pcs concept clear system intended see section pcs includes mechanisms matching patterns searching matches leading substrings input pattern left hand ends productions 
production general form gn hm gi hi certain xed string gn null null 
arbitrary variable string null 
replaced certain minsky pp 

simplest normal form pcs primitive assertion production form spaces symbols examples inserted sake readability allows atomic symbols comprises string characters spaces showing start nish string 
spaces may ignored 
represent string zero symbols instances represent single variable mayhave value comprising string zero symbols 
proved post kind pcs reduced pcs normal form see minsky chapter 
kind pcs main exclusive focus attention 
pcs works wolff computing information compression 
pcs normal form processes input string rst step nd match string left hand side productions set 
input string matches left hand side production match leading symbols input string xed string start left hand side assignment trailing substring input string variable left hand side production 
consider example pcs comprising alphabet axiom input string productions normal form 


example rst symbol input string matches rst symbol rst production trailing considered match variable takes string value 
result successful match new string created accordance con guration right hand side production matched 
example new string form derived variable follows variable right hand side production 
rst step new string treated new input processed exactly way 
example rst symbol matches rst symbol second production variable production takes value result string 
cycle repeated matching fails 
clear example ect rotate original string form 
string processing started brought round front string 
example rotation trick minsky chapter demonstrating pcs normal form model kind pcs 
combinations alphabet input productions process matching strings productions terminates 
combinations alphabet input productions system may follow paths di erent may reach agiven di erent routes 
output computation set strings created process proceeds 
examples readers unfamiliar kind system examples included show clearly pcs computing 
rst example examples minsky chapter showing odd unary numbers may 
second example source 
examples may chapter 
generating numbers unary notation unary number system 
recursive nature unary number system expressed clearly succinctly pcs alphabet single symbol 
axiom 
production string number string 
expressed production clear description pcs works pcs generate nite series unary strings obvious pcs recognise string symbols example unary number 
done production reverse matching character string right hand side production left hand side output repeating right left process axiom match 
generating palindromes quote minsky palindromes strings read backwards forwards 
clearly string palindrome remain add letter 
clearly obtain palindromes building way middle 
example alphabet axioms aa bb cc 
productions wolff computing information compression 
example normal form clear generates palindromes alphabet 
previous example pcs may recognise string characters palindrome productions reverse 
icmaus operation pcs hard see successful match leading substring input string leading substring pcs production may terms alignment uni cation patterns outlined section 
obvious concepts alignment uni cation applied processes matching trailing string symbols variable assigning value variable incorporating output string 
modelling step rotation trick proposed sp framework icmaus rst pcs described rotation string may modelled patterns shown 
regarding patterns pattern heading new corresponds axiom input 
patterns left heading old may seen representation alphabet 
rst patterns right correspond productions pcs 
shall see pair symbols pattern function variable 
rewrite arrow instance variable 
shall see pattern right ect recursive de nition concept string letters alphabet 
comparable production shown example section expresses recursive nature unary number system 
ect type de nition variable de ning nite set alternative strings composed alphabet variable may take 
patterns symbols hidden meaning 
particular symbols may described informally service symbols exactly formal status symbols enter matching uni cation way 
step wolff computing information compression 
shows best alignment terms ic sp input pattern new patterns old 
gure repeated appearances pattern represent single instance pattern accordance generalisation multiple alignment problem described section 
true appearances pattern 
uni cation matching symbols ect projecting alignment single sequence readers note pattern contains variables pair symbols considered pair symbols take value 
true general icmaus framework symbols status principle quali ed cycle proposed service symbols removed output string leaving data symbols processing 
new old la pa lb pb lc pc lt sp patterns modelling rst example pcs described section 
interpretation patterns text 
notwithstanding interpolation instances service symbols sequence contains subsequence corresponding input subsequence corresponding output rst step rst example pcs 
example subsequence cbt corresponding contents variable shared input output removing need rewrite arrow inthe pcs 
analogy idea way welsh english con ated bilingual signs wales 
phrase welsh means council english 
natural bilingual signs put council represent welsh english forms name words council 
example word serves welsh version name english version manner example contents variable serves input string output string 
repetition steps second subsequent steps may proceed way 
step may suppose service symbols stripped sequence contents variable onwards system new 
reaches front string production leading means new stage fully matched 
example may taken signal rotation complete 
minsky example takes space reproduce presence string may equated example causes productions re leading processing paths 
examples wolff computing information compression 
subsection shows second third examples pcs described may modelled icmaus 
best alignment terms ic sp patterns shown described text 
unary numbers icmaus shows patterns model example pcs generating unary numbers section 
rst pattern corresponds axiom pcs second corresponds production pcs 
new options new described text old wolff computing information compression 
patterns processing sp model pcs produce recognise unary numbers section 
symbols body pattern pattern represents 
rst symbols pattern matched pair body pattern pair followed 
pattern may read unary number unary number followed 
rst patterns supplied sp new second placed old program generate succession alignments example shown 
stopped program continue producing alignments memory machine exhausted 
project alignment single sequence ignore service symbols example see system ect generated unary number see example alignment captured recursive nature unary number de nition 
readers may wonder sense compress small relatively large pattern contains especially repeated times alignment 
relevant discussion may section 
wolff computing information compression 
alignments produced sp patterns 
best alignment terms compression produced sp old patterns old 
shows best alignment produced sp new replaced alignment ect recognition fact number 
corresponds way pcs may run backwards recognise input patterns left right arrow icmaus scheme notion backwards processing apply 
unary numbers may recognised similar way 
palindromes icmaus shows patterns may sp model pcs described section 
rst patterns old may seen analogues axioms pcs 
pattern old expresses recursive nature palindromes 
pattern serves link single letter patterns rst old recursive pattern 
new options new described text old wolff computing information compression 
la lb lc patterns processing sp model pcs produce recognise palindromes section 
shows best alignment produced sp new old patterns heading old 
alignment may seen recognition pattern new palindrome 
palindromes alphabet may recognised similar way 
example unary numbers patterns old may generate palindromes 
case kind seed required new single letter pair letters 
seeds new system generate palindromes memory machine exhausted 
readers may wonder patterns old simpli ed 
possible substitute likewise single letter axioms replace likewise pairs remove 
possible penalty reasons take space explain searching best alignments takes longer leads false trails 
wolff computing information compression 
best alignment terms compression produced sp patterns new old shown gure 
wolff computing information compression 
information compression operation pcs clear foregoing discussion examples process matching string symbols production pcs may modelled formation alignment de ned research 
conjecture provides inspiration research described section pertinent question ask alignment kind yield compression new terms patterns old 
answer question depends details encoding new terms old done including assumptions method 
certainly possible devise encoding methods answer question 
method sp outlined section answer provided key assumption described discussed subsections 
encoding fewer symbols new consider rst example uncontroversial conservative assumptions 
suppose new contains sequence old contains pattern 
example clear new aligned matching sequence symbols pattern old new may encoded terms pattern 
encoding smaller new terms numbers symbols assume xed number bits encoding symbol compression terms bits information 
encoding symbols new new contains symbol old contains patterns naturally assume positive compression achieved 
new aligned encoding similar 
xed number bits encoding symbol encodings represents negative compression 
sp assumed symbol new larger theoretical minimum needed discriminate symbol means ect symbol new assumed contains redundancy 
assuming symbol new represents relatively large chunk information example section 
assumption symbol new relatively large coupled calculation sizes symbols new notional actual size relatively large minimum size size code may represent symbol close theoretical minimum 
clarity discussion symbol new actual size represented directly code symbol new represented characters prime wolff computing information compression 
suppose new aligned patterns old shown 
case encoding new terms old similar 
encoding symbols sequence new encoded super cial reading zero negative compression 
actual size symbol new say bits minimum size symbol new say bits encoding represents compression bits 
redundancy operation digital systems assumption symbol new contains redundancy may hoc assumption salvage conjecture research 
little re ection may convince assumption justi cation 
computing attractions digital systems relatively robust face noise 
normally case binary alphabet symbols normally typically represented di erent voltages values di erent ensure electronics discriminate little error billions computations 
technology capable discriminating larger number di erent voltages voltages analogous alphabet symbols 
alphabet symbols requires round gures log bits information symbol assuming equiprobable symbols expressed times bits theoretical minimum 
analogy accepted valid digital computing provision redundancy computations 
reducing redundancy level bringing di erence voltages closer threshold electronics discriminate cause errors increase 
computing possible redundancy level eliminated 
identi ers addresses codes consider higher levels organisation digital computers nd typically redundancy entities di erent kinds identi ed 
clearly true identi ers names les names tables elds databases names functions variables computer programs 
may objected justice redundancy exists primarily serve psychological needs humans read remember identi ers identi ers converted addresses disk computer memory real computing done 
addresses locations computer memory contain redundancy 
rare application location provided bits needed identify location strictly necessary 
may objected justice current technology provide new memory locations required 
point memory locations addressing system take advantage assigning short addresses frequently accessed locations longer addresses locations accessed rarely 
indirect addressing may go partly road approximate solution 
similar way xed length codes symbols entities bit codes ascii character set convenient normally quite redundant exploit variations frequencies di erent codes 
hu man coding course known techniques constructing variable length codes take advantage variations frequency 
best known hu man coding see cover thomas 
said sizes hu man codes theoretical minimum 
sense true slightly misleading 
order parse sequence binary symbols representing sequence hu man codes necessary trie created alongside hu man codes 
codes may minimal unusable 
additional information needed specify trie may seen redundancy system 
discussion wolff computing information compression 
quick review workings digital computers shown redundancy pervades system way symbols entities identi ed 
redundancy eliminated argued form 
redundancy equates structure 
computing system including programs totally lacking redundancy totally unstructured means totally random 
system totally random unstructured system 
certainly support highly structured predictable kinds information processing know computing 
similar way meaningful computing depends existence redundancy level input data symbolic structure data 
considerations suggest deliberate redundancy symbols new sp model ad hoc theoretical anomaly 
computing depends fundamental way existence redundancy level structure computer programs data processed computer 
augmentation established models computing section described examples operation pcs normal form may understood icmaus 
known pcs may wolff computing information compression modelled pcs normal form post minsky chapter may conclude tentatively operation pcs may terms icmaus 
know utm may modelled pcs minsky chapter may conclude tentatively operation utm may terms icmaus 
operation pcs utm may understood terms ic maus require full range capabilities developed icmaus system 
matching pcs utm done relatively constrained manner section require sophisticated search 
envisaged proposed sp system fully developed realisation icmaus mechanisms including developed abilities heuristic search nding partial matches patterns building wide variety alignments patterns 
shows schematic representation proposed sp computer schematic representation conventional computer utm pcs comparison 
subsections consider turn 
conventional computers utm pcs schematically conventional computer utm pcs comprises core machine software range applications 
terms ideas described sections may suppose conventional computer icmaus relatively simple search operate somewhat rigid manner 
pcs searching matching occurs input string compared left hand sides productions 
utm searching matching occurs symbol newly read tape symbol representing state read write head compared left hand part tuples transition function 
exact matches right hand part corresponding tuples control deterministic non deterministic manner happens 
conventional computer manifestation searching matching process item memory accessed address item 
may seen process searching addresses memory match address 
accessing item memory served logic circuits great speed eliminate areas memory progressively item 
kind highly constrained form searching matching advantages certain kinds problem solved great accuracy speed 
penalty kinds problem require exibility solved additional mechanism provided owing limitations conventional computer applications contain additional icmaus mechanisms designed de ciencies core mechanisms 
similar mechanisms provided repeatedly diverse applications 
example search forms database systems expert systems parsers compilers text editors dtp software especially software spelling checking correction spreadsheets genetic algorithms various kinds data mining software specialised kinds software 
kind wolff computing information compression repetition suggested instances icmaus shown part conventional computer portrayed 
indicated icmaus mechanisms provided conventional computer exploit full potential type mechanism 
icmaus mechanisms incomplete general provides required speci application requirements normally provide missing show instances icmaus mechanisms conventional computer fully developed represented relatively small type 

general parts icmaus mechanisms domain speci knowledge things rules accounting classes objects particular organisation associated data structures methods laws thermodynamics aerodynamics topology concepts areas computers applied 
proposed sp computer proposed sp computer core mechanism comprises icmaus mechanisms developed fully understanding available resources allow 
sp computer probably larger complex conventional computer anticipated pay elimination repeated instances icmaus giving simpli cation system better integration applications 
key di erence icmaus conventional computer icmaus sp computer additional programming restricted exact matches sequences symbols awell developed capability nding partial matches sequences symbols advanced versions partial matches arrays symbols dimensions 
core projected sp computer contain mechanisms building multiple alignments kind described section 
constraining sp computer behave conventional computer sp computer able nd partial matches arrays symbols possible restrict exact matches sequences symbols required particular application 
suitable constraints see section sp computer may function required conventional computer 
minimum length encoding design computers 
principles just described similar principle minimum length encoding grammar induction described section 
case grammar induction principle requires search grammar minimises size grammar size sample icmaus icmaus conventional computer icmaus icmaus proposed sp computer icmaus schematic representation conventional computer proposed sp computer terms icmaus proposals 
key core conventional computer sp computer icmaus small type icmaus mechanisms described section various relatively restricted forms 
icmaus large type icmaus mechanisms relatively fully developed generic form software cover wide range applications 
conventional computer includes instances small icmaus instances shown 
assumed data processed computers 
encoded terms grammar 
means compressing sample making sure grammar derived sample counted part cost compression 
case computer design aiming compress system including core computer software 
roughly may equate grammar grammar induction may equate computers data grammar induction 
way increase size grammar mean decrease size grammar data taken increase size mean reduction suggested 
extending established ideas wolff computing information compression 
principles illustrated new 
kinds principle provide motivation creation database management systems expert system shells 
type application system created foundation range applications kind saving need reprogram basic mechanisms application 
accordance remarks cost quality database man agement systems expert system shells mean dramatic savings costs gains quality compared programming application individually 
di erent proposals anticipated scope wider scope database management system expert system shell 
evidence possible scope system provided sources cited section 
design sp computer current technology straightforward way create sp computer program software virtual machine running conventional computer 
sp model created way test bed demonstrator theoretical concepts ect realisation sp computer 
longer time scales creating sp computer way certainly best way 
reasons considered subsections 
new hardware needed core conventional computer basic mechanisms utm pcs mechanisms searching matching programmed 
case utm pcs mechanisms part de nition 
digital computers notwithstanding existence microcode core mechanisms general provided dedicated hardware logic circuits mentioned earlier accessing item memory means address 
similar way necessary search mechanisms sp computer programmed 
creating mechanisms programming conventional computer bit cleaning bathroom required private benjamin 
done basic tools clearly designed job 
long run hardware techniques may meet requirements system directly 
new hardware necessarily mean new electronic hardware 
potential exible pattern matching light high levels parallelism see especially light rays cross interfering 
noted previously section potential searching huge pattern matching search spaces parallel chemicals solution form example dna computing 
parallel processing wolff computing information compression 
estimated time complexity space complexity current sp model icmaus mechanisms intrinsically hungry computing power constrained conventional computer 
possible solution problem creation sp system software virtual machine running high parallel computer comprising cheap conventional processors 
approach promising software virtual machine single processor 
returning analogy cleaning device comprising thousands conceivably quite ective 
alternatives include new devices electronics light chemistry combination mechanisms 
article sp concepts outline tried show established models computing may terms information compression multiple alignment uni cation search 
argued established models may augmented exploit fully potential functionality icmaus mechanisms 
augmentation increase size complexity core computational process research date suggests reduction size complexity software mean saving size complexity ofthe combination core system software 
terms software mean lower costs fewer errors working systems 
better integration diverse applications 
accordance occam razor mle principle incorporated sp theory theory combine simplicity explanatory descriptive power 
established models computing simple leave problems unsolved 
conceptual framework described article provide interpretation established models 
time suggests models may advantage enlarged 
resulting reduction simplicity may set increase descriptive explanatory power 
am grateful referees article alerting relevance rule programming paradigm probabilistic parallel programming multiset transformation classi er systems treat algorithm helpful comments article 
second referee suggesting dna computing inclusion article 
am grateful professor tim porter school mathematics bangor helpful comments earlier drafts article discussion related issues 
dr chris school useful discussions time time related issues 
de nitions concepts basic concepts de nition wolff computing information compression 
symbol kind mark compared symbol 
context pattern matching symbol smallest unit participate matching symbol compared matched single symbol result matching symbols di erent 
result permitted 
important feature concept symbol research respect way behaves system hidden meaning 
research symbol primitive mark discriminated manner symbols 
symbols symbols arithmetic function meaning system directly visible 
symbol may meaning take form symbols associated symbol explicit visible structure symbols patterns 
symbols proposed framework hidden meaning having ect symbol behaves system meaning human reader 
symbols match say belong symbol type 
system contains symbols normally recognise alphabet symbol types symbol system belongs symbol types alphabet symbol type represented system 
positive match symbols termed hit 
alignment patterns unmatched symbols pattern hits hit pattern gap 
de nition pattern array symbols dimensions 
article dimensional patterns sequences strings symbols main focus attention 
meaning term pattern includes meanings terms substring subsequence de ned 
de nition substring sequence symbols length sequence length constituent symbols substring contiguous sequence contains substring 
de nition wolff computing information compression 
subsequence sequence symbols length sequence length constituent symbols subsequence may contiguous sequence contains subsequence 
set subsequences sequence includes substrings sequence 
post canonical system normal form de nition post canonical system normal form quadruple pcs nite set alphabet symbols post calls letters axiom input comprising nite string symbols drawn replacement nite set productions method searching match string symbols productions 
production form represent string zero symbols drawn replacement instances represent single variable may avalue comprising string zero symbols 
pcs normal form operates searching method exact matches leading substrings string productions 
exact match trailing substring assigned variable 
string comprises value followed string may termed output treated new input matches sought input 
process terminates matches 
akey characteristic input string original input string strings formed system processed way able nd production string production exact match leading substring input string 
comments notice search match symbol string leading symbols productions yield positive result computation may develop strands branching stage see minsky chapter 
accommodate deterministic non deterministic styles computing 
sp system de nition wolff computing information compression 
sp system quadruple sps nite set alphabet primitive symbols pattern symbols new nite set patterns symbols old search method di erent sense sophisticated pcs see 
system operates searching alignments dened alignment contains patterns alignment promotes compression uni cation matching symbols alignment 
de nition pcs drawn descriptions post minsky identi ed explicitly element system 
post minsky accounts process searching matches strings substrings formally identi ed element system descriptions give informal 
reason identifying explicitly article emphasise appears key di erence pcs utm generalised forms sp system discussed section 
de nition case dimensional patterns alignment dimensional array patterns separate row array 
alignment shows sets matching symbols arranging symbols set column array 
alignment de ned research symbols contiguous pattern appears alignment need occupy contiguous cells array 
pattern may appear times alignment 
pattern appears times alignment symbol appearance pattern shown matching symbol appearance pattern 
symbol pattern may placed column symbol pattern pattern providing order constraints violated 
alignment order constraints preserved statement true rows alignment symbols column column follows follow condition holds rows contain di erent patterns rows contain appearances pattern 
de nition mismatch alignment occurs columns alignment containing hits column containing hits alignment columns containing hits columns containing single symbols di erent patterns old 
de nition wolff computing information compression 
search space sps set possible alignments patterns previously noted concept alignment generalised straightforward manner patterns dimensions 
attempt provide formal de nition alignments patterns dimensions higher 
fact displaying alignments convenient put symbols column lines mark symbols match relevant de nition alignment 
de nition alignment step operation pcs alignment contains mismatches 
symbol pcs mapped identical symbol pattern alignment 
order symbols order matching symbols production pcs enters operation symbol production mapped identical symbol pattern appears alignment order symbols production order matching symbols corresponding pattern 
positive match symbols operation pcs column alignment containing matching pair symbols 
order columns alignment order corresponding pairs symbols operation pcs 
wolff computing information compression 
adleman adleman computing dna scienti american 
adleman adleman molecular computation solutions combinatorial problems science 
allison wallace allison wallace posterior probability distribution alignments application parameter estimation evolutionary trees optimization multiple alignments journal molecular evolution 
allison allison wallace yee finite state models alignment macromolecules journal molecular evolution 
allison yee allison yee minimum message length encoding comparison macromolecules bulletin mathematical biology uk 
baum baum boneh running dynamic programming algorithms dna computer proceedings second annual meeting dna computers held princeton university june 
dimacs series discrete mathematics theoretical computer science issn chan chan wong chiu survey multiple sequence comparison methods bulletin mathematical biology uk 
clocksin mellish clocksin mellish programming prolog springer verlag berlin 
cover thomas cover thomas elements information theory new york john wiley 
evolutionary trees dna sequences maximum likelihood approach journal molecular evolution 
forrest forrest parallelism programming classi er systems san mateo ca morgan kaufman 
kleene kleene de nability recursiveness duke mathematical journal 
wolff computing information compression 
krishnamurthy krishnamurthy krishnamurthy krishnamurthy rule programming paradigm formal basis biological chemical physical computation biosystems 
li vitanyi li vitanyi kolmogorov complexity applications second edition new york springer verlag 
markov markov theory algorithms kluwer dordrecht 
murthy krishnamurthy krishnamurthy probabilistic parallel programming multiset transformation generation computer systems 
minsky minsky computation finite nite machines prentice hall englewood cli new jersey 
miranker miranker treat new cient match algorithm ai production systems san mateo ca morgan kaufman 
post post formal reductions general combinatorial decision problem american journal mathematics 
reichert cohen wong application information theory genetic mutations matching polypeptide sequences journal theoretical biology 
rissanen rissanen modelling shortest data description automatica 
rosser rosser highlights history calculus annals history computing usa 
search common patterns sequences 
solomono solomono formal theory inductive inference parts ii journal information control 
solomono solomono discovery algorithmic probability journal computer system science 
storer storer data compression methods theory computer science press rockville maryland 
turing turing computable numbers application entscheidungsproblem proceedings london mathematical society series 
turing turing computing machinery intelligence mind 
wallace boulton wallace boulton information measure classi cation computer journal 
wol wol probabilistic reasoning information compression multiple alignment uni cation search overview journal universal computer science 
copy may obtained www edu 
wol wol probabilistic reasoning information compression multiple alignment uni cation search report 
copy may obtained www edu wol www sees bangor ac uk gerry sp summary html 
wol wol probabilistic reasoning icmaus ii calculation probabilities best match pattern recognition information retrieval reasoning networks trees rules report 
copy may obtained www edu wol www sees bangor ac uk gerry sp summary html 
wol wol probabilistic reasoning icmaus iii hypothetical reasoning geometric analogies default values nonmonotonic reasoning modelling explaining away report 
copy may obtained wolff computing information compression 
www edu wol www sees bangor ac uk gerry sp summary html 
wol wol parsing information compression multiple alignment uni cation search report 
copy may obtained www edu wol 
article wol wol 
wol wol parsing information compression multiple alignment uni cation search sp report 
copy obtained www edu wol www sees bangor ac uk gerry sp summary html parsing 
wol wol parsing information compression multiple alignment uni cation search examples report 
copy may obtained www edu wol www sees bangor ac uk gerry sp summary html parsing 
wol wol causality statistical learning multiple alignment seminar tutorial causal models statistical learning london march 
wol wol learning reasoning information compression multiple alignment uni cation search gammerman ed computational learning probabilistic reasoning wiley chichester 
earlier version applied decision technologies brunel university april proceedings stream computational learning probabilistic reasoning 
wol wol computing compression overview sp theory system new generation computing 
wol wol computing compression sp new generation computing 
wol wol scaleable technique best match retrieval sequential information metrics guided search journal information science 
wol wol new concept software software engineering journal 
wol wol computing information compression reply ai communications 
wol wol computing cognition information compression ai communications 
wol wol theory cognition computing ellis horwood chichester 
wol wol simplicity power unifying ideas computing computer journal 
wol wol learning syntax meanings optimization distributional analysis levy schlesinger eds categories processes language acquisition lawrence erlbaum hillsdale nj 
reprinted chapter wol 
wol wol language acquisition data compression generalization language communication 
reprinted chapter wol 
