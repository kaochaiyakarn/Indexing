proceedings th symposium operating systems principles sosp 
saint malo france 
october 
disco running commodity operating systems scalable multiprocessors edouard bugnion scott devine mendel rosenblum examine problem extending modern operating systems run efficiently large scale shared memory multiprocessors large implementation effort 
approach brings back idea popular virtual machine monitors 
virtual machines run multiple commodity operating systems scalable multiprocessor 
solution addresses challenges facing system software machines 
demonstrate approach prototype called disco run multiple copies silicon graphics irix operating system multiprocessor 
experience shows overheads monitor small approach provides scalability ability deal non uniform memory access time systems 
reduce memory overheads associated running multiple operating systems developed techniques virtual machines transparently share major data structures program code file system buffer cache 
distributed system support modern operating systems export partial single system image users 
solution achieves benefits operating systems customized scalable multiprocessors achieved significantly smaller implementation effort 
scalable computers moved research lab marketplace 
multiple vendors shipping scalable systems configurations tens hundreds processors 
unfortunately system software machines hardware reaching functionality reliability expected modern computer users 
operating systems developers shoulder blame inability deliver promises machines 
extensive modifications operating system required efficiently support scalable machines 
size complexity modern operating systems modifications resource intensive undertaking 
sosp 
acm 
computer systems laboratory stanford university stanford ca bugnion devine mendel cs stanford edu www flash stanford edu disco disco running commodity operating systems scalable multiprocessors alternative approach constructing system software large computers 
making extensive changes existing operating systems insert additional layer software hardware operating system 
layer acts virtual machine monitor multiple copies commodity operating systems run single scalable computer 
monitor allows commodity operating systems efficiently cooperate share resources 
resulting system contains features custom scalable operating systems developed specifically machines fraction complexity implementation cost 
commodity operating systems leads systems reliable compatible existing computing base 
demonstrate approach constructed prototype system targeting stanford flash shared memory multiprocessor experimental cache coherent non uniform memory architecture ccnuma machine 
prototype called disco combines commodity operating systems originally designed large scale multiprocessors form high performance system software base 
disco contains features reduce eliminate problems associated traditional virtual machine monitors 
specifically minimizes overhead virtual machines enhances resource sharing virtual machines running system 
disco allows operating systems running different virtual machines coupled standard distributed systems protocols nfs tcp ip 
allows efficient sharing memory disk resources virtual machines 
sharing support allows disco maintain global buffer cache transparently shared virtual machines virtual machines communicate standard distributed protocols 
experiments realistic workloads detailed simulator flash machine show disco achieves goals 
simple modifications existing commercial operating system basic overhead virtualization uniprocessor workloads 
show system virtual machines run workloads faster commercial symmetric multiprocessor operating system increasing scalability system software substantially increasing system memory footprint 
show page page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
placement dynamic page migration replication allow disco hide numa ness memory system improving execution time 
section provide detailed presentation problem addressed 
section describes overview approach challenges virtual machines construct system software large scale shared memory multiprocessors 
section presents design implementation disco section shows experimental results 
discussion related section conclude section 
problem description addresses problems seen computer vendors attempting provide system software innovative hardware 
purposes innovative hardware scalable shared memory multiprocessors issues similar hardware innovation requires significant changes system software 
shared memory multiprocessors research groups demonstrated prototype operating systems hive hurricane address challenges scalability fault containment 
silicon graphics announced cellular irix kernel support shared memory machine origin 
designs require significant os changes including partitioning system scalable units building single system image units features fault containment ccnuma management 
size system software modern computers millions lines code changes ma machines represent significant development cost 
changes impact standard modules modern system virtual memory management scheduler 
result system software machines generally delivered significantly hardware 
changes functionally complete introduce instabilities certain period time 
late incompatible possibly buggy system software significantly impact success machines regardless innovations hardware 
computer industry matures users expect carry forward large base existing application programs 
furthermore increasing role computers play today society users demanding highly reliable available computing systems 
cost achieving reliability computers may dwarf benefits innovation hardware application areas 
computer hardware vendors commodity operating systems microsoft windows nt face greater problem obtaining operating system support ccnuma multiprocessors 
vendors need persuade independent changes disco running commodity operating systems scalable multiprocessors operating system support new hardware 
vendors deliver promises innovative hardware convince powerful software companies running hardware worth effort port 
situation small wonder computer architects frequently complain constraints inflexibility system software 
perspective software constraints impediment innovation 
reduce gap hardware innovations adaptation system software system developers find new ways develop software quickly fewer risks incompatibilities instabilities 
return virtual machine monitors address problem providing system software scalable multiprocessors developed new twist relatively old idea virtual machine monitors 
attempting modify existing operating systems run scalable shared memory multiprocessors insert additional layer software hardware operating system 
layer software called virtual machine monitor virtualizes resources machine exporting conventional hardware interface operating system 
monitor manages resources multiple virtual machines coexist multiprocessor 
shows virtual machine monitor allows multiple copies potentially different operating systems coexist 
virtual machine monitors combination commodity specialized operating systems form flexible system software solution machines 
large ma multiprocessor configured multiple virtual machines running commodity operating system microsoft windows nt variant unix 
virtual machine configured processor memory resources operating system effectively handle 
virtual machines communicate standard distributed protocols export image cluster machines 
system looks cluster loosely coupled machines virtual machine monitor uses global policies manage resources machine allowing workloads exploit fine grain resource sharing potential hardware 
example monitor move memory virtual machines keep applications paging disk free memory available machine 
similarly monitor dynamically schedules virtual processors physical processors balance load machine 
commodity software leverage significant engineering effort invested operating systems allows ccnuma machines support large application base 
monitor relatively simple piece code done small implementation effort page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
pmake os smp os os os 
architecture disco disco virtual machine monitor software layer hardware multiple virtual machines run independent operating systems 
allows multiple copies commodity operating system coexist specialized thin operating systems hardware 
multiprocessor consists set processing elements pe connected high performance interconnect 
processing element contains number processors portion memory machine 
low risk introducing software bugs incompatibilities 
approach offers different possible solutions handle applications resource needs exceed scalability commodity operating systems 
relatively simple change commodity operating system allow applications explicitly share memory regions virtual machine boundaries 
monitor contains simple interface setup shared regions 
operating system extended special virtual memory segment driver allow processes running multiple virtual machines share memory 
example parallel database server put buffer cache shared memory region query engines running multiple virtual machines 
second flexibility approach supports specialized operating systems resource intensive applications need full functionality commodity operating systems 
simpler specialized operating systems better support needs applications easily scale size machine 
example virtual machine running highly scalable lightweight operating system puma allows large scientific applications scale size machine 
specialized operating system runs virtual machine run alongside commodity operating systems running standard application programs 
similarly important applications database web servers run highly customized operating systems database accelerators 
flexibility support wide variety workloads efficiently approach number additional advantages system software designs targeted ccnuma machines 
running multiple copies operating system virtual machine handles chal db nfs scientific app disco disco running commodity operating systems scalable multiprocessors thin os pe pe pe pe pe pe pe pe interconnect ccnuma multiprocessor ccnuma machines scalability fault containment 
virtual machine unit scalability analogous cell structure hurricane hive cellular irix 
approach monitor distributed systems protocols need scale size machine 
simplicity monitor task easier building scalable operating system 
virtual machine unit fault containment failures system software contained virtual machine spreading entire machine 
provide hardware fault containment monitor structured cells 
simplicity monitor easier protect operating system hardware faults 
numa memory management issues handled monitor effectively hiding entire problem operating systems 
careful placement pages virtual machine memory dynamic page migration page replication monitor export conventional view memory uniform memory access uma machine 
allows non numa aware memory management policies commodity operating systems numa machine 
handling ccnuma multiprocessors approach inherits advantages traditional virtual machine monitors 
benefits appropriate today grown importance 
exporting multiple virtual machines single ccnuma multiprocessor multiple different operating systems simultaneously running 
older versions system software kept provide stable platform keeping legacy applications running 
newer versions staged page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
carefully critical applications residing older operating systems newer versions proven 
approach provides excellent way introducing new innovative system software providing stable computing base applications favor stability innovation 
challenges facing virtual machines unfortunately advantages virtual machine monitors come certain disadvantages 
documented problems virtual machines overheads due virtualization hardware resources resource management problems sharing communication problems 
overheads 
overheads traditional virtual machine monitors come sources including additional exception processing instruction execution memory needed virtualizing hardware 
operations execution privileged instructions safely exported directly operating system emulated software monitor 
similarly access devices virtualized requests intercepted remapped monitor 
addition execution time overheads running multiple independent virtual machines cost additional memory 
code data operating system application replicated memory virtual machine 
furthermore large memory structures file system buffer cache replicated resulting significant increase memory usage 
similar waste occurs replication file systems different virtual machines 
resource management 
virtual machine monitors frequently experience resource management problems due lack information available monitor policy decisions 
example instruction execution stream operating system idle loop code lock busy waiting indistinguishable monitor level important calculation 
result monitor may schedule resources useless computation useful computation may waiting 
similarly monitor know page longer actively virtual machine reallocate virtual machine 
general monitor resource management decisions high level knowledge operating system 
communication sharing 
running multiple independent operating systems sharing communication difficult 
example cms vm virtual disk containing user files virtual machine accessed virtual machine 
user start virtual machines different users easily share files 
virtual machines disco running commodity operating systems scalable multiprocessors looked set independent stand systems simply happened sharing hardware 
disadvantages exist impact greatly reduced combining advances operating system technology new tricks implemented monitor 
example prevalence support modern operating systems interoperating distributed environment greatly reduces communication sharing problems described 
section techniques allow overheads small compared benefits achieved approach 
disco virtual machine monitor disco virtual machine monitor designed flash multiprocessor scalable cache coherent multiprocessor 
flash multiprocessor consists collection nodes containing processor main memory devices 
nodes connected high performance scalable interconnect 
machines directory maintain cache coherency providing software view shared memory multiprocessor non uniform memory access times 
written flash machine hardware model assumed disco available number commercial machines including convex exemplar silicon graphics origin sequent 
section describes design implementation disco 
describe key abstractions exported disco 
describe implementation abstractions 
discuss operating system requirements run top disco 
disco interface disco runs multiple independent virtual machines simultaneously hardware virtualizing resources machine 
virtual machine run standard operating system manages virtualized resources independently rest system 
processors 
match flash machine virtual cpus disco provide abstraction mips processor 
disco correctly emulates instructions memory management unit trap architecture processor allowing unmodified applications existing operating systems run virtual machine 
required flash machine choice processor unfortunate disco support complete virtualization kernel virtual address space 
section details os changes needed allow kernel mode code run disco 
emulation mips processor disco extends architecture support efficient access processor functions 
example frequent kernel operations page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
enabling disabling cpu interrupts accessing privileged registers performed load store instructions special addresses 
interface allows operating systems tuned disco reduce overheads caused trap emulation 
physical memory 
disco provides abstraction main memory residing contiguous physical address space starting address zero 
organization selected match assumptions operating systems run top disco 
commodity operating systems designed effectively manage non uniform memory flash machine disco uses dynamic page migration replication export nearly uniform memory access time memory architecture software 
allows non numa aware operating system run flash changes needed numa memory management 
devices 
virtual machine created specified set devices disks network interfaces periodic interrupt timers clock console 
processors physical memory operating systems assume exclusive access devices requiring disco virtualize device 
disco intercept communication devices translate emulate operation 
importance performance efficiency virtual machine disco exports special abstractions scsi disk network devices 
disco virtualizes disks providing set virtual disks virtual machine mount 
virtual disks configured support different sharing persistency models 
virtual disk modifications disk write requests stay private virtual machine visible virtual machines 
addition modifications persistent survive shutdown virtual machine non persistent disappear reboot 
support efficient communication virtual machines real machines monitor virtualizes access networking devices underlying system 
virtual machine assigned distinct link level address internal virtual subnet handled disco 
standard network interfaces ethernet fddi disco supports special network interface handle large transfer sizes fragmentation 
communication world outside machine disco acts gateway uses network interfaces machine send receive packets 
implementation disco operating systems run shared memory multiprocessors disco implemented multi threaded shared memory program 
disco differs existing systems careful attention numa mem disco running commodity operating systems scalable multiprocessors ory placement cache aware data structures interprocessor communication patterns 
example disco contain linked lists data structures poor cache behavior 
small size disco lines code allows higher degree tuning possible line operating systems 
improve numa locality small code segment disco currently kb replicated memories flash machine instruction cache misses satisfied local node 
machine wide data structures partitioned parts accessed single processor memory local processor 
data structures accessed multiple processors locks wait free synchronization mips ll sc instruction pair heavily employed :10.1.1.164.8106
disco communicates shared memory cases 
uses inter processor interrupts specific actions change state remote virtual processor example tlb posting interrupt virtual cpu 
disco structured highly tuned scalable splash application general purpose operating system :10.1.1.104.6469
virtual cpus previous virtual machine monitors disco emulates execution virtual cpu direct execution real cpu 
schedule virtual cpu disco sets real machines registers virtual cpu jumps current pc virtual cpu 
direct execution operations run speed raw hardware 
challenge direct execution detection fast emulation operations safely exported virtual machine 
operations primarily execution privileged instructions performed operating system tlb modification direct access physical memory devices 
virtual cpu disco keeps data structure acts process table entry traditional operating system 
structure contains saved registers state virtual cpu scheduled real cpu 
perform emulation privileged instructions disco additionally maintains privileged registers tlb contents virtual cpu structure 
mips processor disco runs kernel mode full access machine hardware 
control virtual machine run disco puts processor supervisor mode running virtual machine operating system user mode 
supervisor mode allows operating system protected portion address space supervisor segment give access privileged instructions physical memory 
applications kernel code directly executed disco emulates operations issued supervisor mode 
trap page fault system call page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
bus error occurs processor traps monitor emulates effect trap currently scheduled virtual processor 
done updating privileged registers virtual processor jumping virtual machine trap vector 
disco contains simple scheduler allows virtual processors time shared physical processors machine 
scheduler cooperates memory management support affinity scheduling increases data locality 
virtual physical memory virtualize physical memory disco adds level address translation maintains physical machine address mappings 
virtual machines physical addresses memory starting address zero continuing size virtual machine memory 
disco maps physical addresses bit machine addresses memory system flash machine 
disco performs physical machine translation software reloaded translation lookaside buffer tlb mips processor 
operating system attempts insert virtual physical mapping tlb disco emulates operation translating physical address corresponding machine address inserting corrected tlb entry tlb 
tlb entry established memory mapping translated additional overhead processor 
quickly compute corrected tlb entry disco keeps virtual machine pmap data structure contains entry physical page virtual machine 
pmap entry contains pre computed tlb entry physical page location real memory 
disco merges entry protection bits original entry inserting tlb 
pmap entry contains pointing virtual addresses invalidate mappings tlb page taken away virtual machine monitor 
mips processors user mode memory translated tlb kernel mode operating systems may directly access physical memory devices unmapped segment kernel virtual address space 
operating systems place operating system code data segment 
unfortunately mips architecture bypasses tlb direct access segment making impossible disco efficiently remap addresses tlb 
having operating system instruction trap monitor lead unacceptable performance 
required re link operating system code data mapped region address space 
problem unique mips architectures alpha remap regions tlb 
mips processors tag tlb entry ad disco running commodity operating systems scalable multiprocessors dress space identifier avoid having flush tlb mmu context switches 
avoid complexity virtualizing disco flushes machine tlb scheduling different virtual cpu physical processor 
approach speeds translation tlb entry field provided virtual machine directly 
workload executing top disco suffer increased number tlb misses tlb additionally operating system tlb flushed virtual cpu switches 
addition tlb expensive emulation trap architecture emulation privileged instructions operating systems tlb handler remapping physical addresses described 
lessen performance impact disco caches virtual machine translations second level software tlb 
tlb disco tlb handler consults second level tlb 
finds matching virtual address simply place cached mapping tlb forwards tlb exception operating system running virtual machine 
effect optimization virtual machines appear larger tlbs mips processors 
numa memory management providing fast translation virtual machine physical addresses real machine pages memory management part disco deal allocation real memory virtual machines 
particularly important task ccnuma machines commodity operating system depending disco deal nonuniform memory access times 
disco try allocate memory schedule virtual cpus cache misses generated virtual cpu satisfied local memory having suffer additional latency remote cache accomplish disco implements dynamic page migration page replication system moves replicates pages maintain locality virtual cpu cache misses memory pages cache misses occur 
disco targets machines maintain cache coherence hardware 
machines numa management implemented monitor operating system required correct execution optimization enhances data locality 
disco uses robust policy moves pages result eventual performance benefit 
pages heavily accessed node migrated node 
pages primarily read shared replicated nodes heavily accessing 
pages write shared moved fundamentally benefit migration replication 
disco policy limits number times page move avoid excessive overheads 
disco page migration replication policy driven page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
cache counting facility provided flash hardware 
flash counts cache misses page physical processor 
flash detects hot page monitor chooses migrating replicating hot page cache counters 
migrate page monitor transparently changes physical machine mapping 
invalidates tlb entries mapping old machine page copies data local machine page 
replicate page monitor downgrade tlb entries mapping machine page ensure read accesses 
copies page local node updates relevant tlb entries mapping old machine page 
resulting configuration replication shown 
disco maintains data structure contains entry real machine memory page 
perform necessary tlb page migration replication entry contains list virtual machines page virtual addresses access 
entry contains pointers replicated copies page 
virtual devices node node vcpu vcpu virtualize access devices disco intercepts device accesses virtual machine eventually forwards physical devices 
disco interpose programmed input output operating system device drivers trapping monitor emulating functionality hardware device assumed version operating system 
cleaner simply add special device drivers operating system 
disco device defines monitor call device driver pass command arguments single trap 
devices disks network interfaces include dma map part arguments 
disco intercept dma requests translate physical addresses spec disco running commodity operating systems scalable multiprocessors virtual pages physical pages machine pages 
transparent page replication 
disco uses physical machine mapping replicate user kernel pages 
virtual pages virtual machine map physical page virtual machine 
disco transparently maps virtual page machine page replica located local node 
ified operating systems machine addresses 
disco device drivers interact directly physical device 
devices accessed single virtual machine disco needs guarantee exclusivity access translate physical memory addresses dma need virtualize resource 
interposition dma requests offers opportunity disco share disk memory resources virtual machines 
disco copy write disks allow virtual machines share main memory disk storage resources 
disco virtual network devices allow virtual machines communicate efficiently 
combination mechanisms detailed section section allows disco support system wide cache disk blocks memory transparently shared virtual machines 
copy write disks disco intercepts disk request dmas data memory 
virtual machine requests read disk block main memory disco process request going disk 
furthermore disk request multiple machine page size disco process dma request simply mapping page virtual machine physical memory 
order preserve semantics dma operation disco maps page readonly destination address page dma 
attempts modify shared page result copy write fault handled internally monitor 
mechanism multiple virtual machines accessing shared disk sharing machine memory 
copy write semantics means virtual machine unaware sharing exception disk requests finish nearly instantly 
consider environment running multiple virtual machines scalability purposes 
virtual machines share root disk containing page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
physical memory vm physical memory vm code data buffer cache data 
transparent sharing pages 
read pages brought disk kernel text buffer cache transparently shared virtual machines 
creates global buffer cache shared virtual machines helps reduce memory footprint system 
kernel application programs 
code readonly data stored disk dma ed memory virtual machine accesses 
subsequent requests simply map page specified dma engine transferring data 
result shown virtual machines share read pages 
effectively get memory sharing patterns expected single shared memory multiprocessor operating system system runs multiple independent operating systems 
preserve isolation virtual machines disk writes kept private virtual machine issues 
disco logs modified sectors copy disk modified 
persistent disks modified sectors logged separate disk partition managed disco 
simplify implementation applied concept copy write disks non persistent disks kept modified sectors main memory possible 
implementation memory disk sharing feature disco uses data structures 
disk device disco maintains tree indexed range disk sectors requested 
tree find machine memory address sectors global disk cache 
second tree kept disk virtual machine find modifications block virtual machine 
trees efficiently support queries ranges sectors 
copy write mechanism file systems root disk modifications intended persistent shared virtual machines 
persistent disks containing user files disco enforces single virtual machine mount disk time 
result disco need virtualize layout disk 
persistent disks accessed virtual machines distributed file system protocol nfs 
virtual network interface copy write mechanism disks allows sharing memory resources virtual machines code data buffer cache code buffer cache data disco running commodity operating systems scalable multiprocessors machine memory private pages shared pages free pages allow virtual machines communicate 
communicate virtual machines standard distributed protocols 
example virtual machines share files nfs 
result shared data client server buffer cache 
special attention data duplicated machine memory 
designed virtual subnet managed disco allows virtual machines communicate avoiding replicated data possible 
virtual subnet networking interfaces disco copy write mappings reduce copying allow memory sharing 
virtual device uses addresses limit maximum transfer unit mtu packets 
message transfer sent virtual machines causes dma unit map page read sending receiving virtual machine physical address spaces 
virtual network interface accepts messages consist scattered buffer fragments 
implementation virtual network disco operating system device driver respects data alignment outgoing message properly aligned message fragments span complete page remapped copied 
mechanism page data read disk file cache file server running virtual machine shared client programs request file standard distributed file system protocol nfs 
shown disco supports global disk cache distributed file system connect virtual machines 
practice combination copy write disks access persistent data specialized network device provides global buffer cache transparently shared independent virtual machines 
result read pages shared virtual machines 
reduces memory footprint may adversely affect data locality sharers access page remotely 
disco page replication policy selectively replicates hot pages suffer cache misses 
pages shared possible replicated necessary improve performance 
page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
nfs server nfs client buffer cache running commodity operating systems commodity operating system run disco irix unix svr operating system silicon graphics 
disco independent specific operating system plan support windows nt linux 
support portability modern operating systems hardware abstraction level hal allows operating system effectively ported run new platforms 
typically hal modern operating systems changes new version machine rest system remain unchanged 
experience relatively small changes hal reduce overhead virtualization improve resource usage 
changes irix part hal changes simple introduce bug software require detailed understanding internals irix 
performed changes source level matter convenience simple performed binary translation augmentation techniques 
necessary changes mips architecture virtual processors running supervisor mode efficiently access segment mips virtual address space bypasses tlb 
unfortunately mips operating systems including irix place kernel code data segment 
result needed relocate unmapped segment virtual ma 
operating systems irix structured welldefined hal 
hal includes platform processor specific functions operating system 
disco running commodity operating systems scalable multiprocessors mbuf buffer cache virtual pages physical pages machine pages 
transparent sharing pages nfs 
illustrates case nfs reply read request includes data page 
monitor networking device data page source machine address space destination 
monitor data page driver mbuf clients buffer cache 
remap initiated operating system monitor call 
chines portion mapped supervisor segment mips processor 
allowed disco emulate direct memory access efficiently tlb 
need relocating kernel appears unique mips modern architecture alpha sparc powerpc 
making changes irix required changing header files describe virtual address space layout changing linking options assembly statements unfortunately meant needed re compile re link irix kernel run disco 
device drivers disco monitor call interface reduces complexity overhead accessing devices 
implemented uart scsi disks ethernet drivers match interface 
monitor call interface provides view idealized device implementation drivers straightforward 
kernels normally designed run different device drivers kind change source small risk introducing bug 
complexity interaction specific devices left virtual machine monitor 
fortunately designed virtual machine monitor internal device driver interface simplify integration existing drivers written commodity operating systems 
disco uses irix original device drivers 
changes hal having take trap privileged register access cause significant overheads running kernel code synchronization routines trap handlers frequently access privileged registers 
reduce overhead patched hal irix convert frequently privileged instructions non trapping load store page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
special page address space contains registers 
optimization applied instructions read write privileged registers causing side effects 
experiment performed patches hand critical locations patches easily automatically applied privileged instruction generates trap 
part emulation process disco overwrite certain instructions special load store suffer overhead trap 
help monitor better resource management decisions added code hal pass hints monitor giving higher level knowledge resource utilization 
inserted small number monitor calls physical memory management module operating systems 
monitor call requests zeroed page 
monitor clear pages ensure isolation virtual machines anyway operating system freed task 
second monitor call informs disco page put operating system freelist chance reclamation disco immediately reclaim memory 
improve utilization processor resources disco assigns special semantics reduced power consumption mode mips processor 
mode operating system system idle 
disco virtual cpu mode cleared interrupt posted 
monitor call inserted hal idle loop effect 
changes irix optimizations disco relies cooperation operating system 
example virtual network device take advantage remapping techniques packets contain properly aligned complete pages written 
operating system networking subsystem naturally meets requirements 
example preserves alignment data pages advantage scatter gather options networking devices 
unfortunately irix mbuf management data pages freed mbufs linked word page 
guarantees packet transferred monitor networking device automatically trigger copy write fault receiving 
simple change mbuf freelist data structure fixed problem 
kernel implementation nfs copies data incoming mbufs receiving file buffer cache packet contained un fragmented properly aligned pages 
effectively prevented sharing file buffer cache virtual machines 
clients servers transparently share page specialized call bcopy new remap function offered hal 
remap function semantics bcopy routine uses monitor call remap page disco running commodity operating systems scalable multiprocessors possible 
shows data page transferred nfs read write call remapped source virtual machine destination memory buffer mbuf page monitor networking device remapped final location call hal remap function 
specialized operating system ability run thin specialized operating system allows disco support large scale parallel applications span entire machine 
applications may served full function operating system 
fact specialized operating systems puma commonly run scientific applications parallel systems 
illustrate point developed specialized library operating system runs directly top disco :10.1.1.100.6047
contains services needed run splash applications thread creation synchronization routines libc routines nfs client stack file application linked library operating system runs address space operating system :10.1.1.104.6469:10.1.1.104.6469
result need support virtual memory subsystem deferring page faulting responsibilities directly disco 
find overly simplistic limited operating system run directly hardware ability run virtual machine alongside commodity operating systems offers powerful attractive combination 
experimental results implemented disco described previous section performed collection experiments evaluate 
describe simulation experimental setup section 
set experiments sections demonstrate disco overcomes traditional problems associated virtual machines high overheads poor resource sharing 
demonstrate sections benefits virtual machines including improved scalability data locality 
experimental setup workloads disco targets flash machine unfortunately available 
result simos machine simulator develop evaluate disco 
simos machine simulator models hardware mips multiprocessors detail run essentially unmodified system software irix operating system disco monitor 
study configured simos resemble large scale multiprocessor performance characteristics similar flash 
simos contains simulation models flash mips processors page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
workload environment description characteristics pmake software development engineering hardware development parallel compilation gnu chess application verilog simulation vcs machine simulation simulation models slow workloads chose study 
result model statically scheduled non superscalar processors running twice clock rate 
simpler pipelines modelled order magnitude faster 
processors chip caches mips kb split instruction data mb board level cache 
absence memory system contention minimum latency cache nanoseconds local memory nanoseconds remote memory 
simos allows run realistic workloads examine behavior detail non intrusive annotation mechanism simulation slowdowns prevent examining long running workloads detail 
realistic short workloads able study issues cpu memory overheads virtualization benefits scalability numa memory management 
studies require long running workloads fully evaluating disco resource sharing policies possible environment wait real machine 
table lists workloads study base simulated execution time 
workloads chosen representative typical uses scalable compute servers 
simulated execution times small simos environment allowed study workload behavior great detail determine small execution regions exhibit similar behavior longer running 
fast mode simos ensure workloads include cold start effects 
execution overheads evaluate overheads running disco ran workload uniprocessor irix directly simulated hardware disco running irix single virtual machine hardware 
shows comparison 
overhead virtualization ranges modest raytrace high pmake database workloads 
compute bound disco running commodity operating systems scalable multiprocessors multiprogrammed short lived system intensive processes multiprogrammed long running processes execution time sec sec splash scientific computing raytrace splash parallel applications sec database commercial database sybase relational database server decision support workload single memory intensive process sec table 
workloads 
workload scaled differently uniprocessor multiprocessor experiments 
reported execution time uniprocessor workloads running irix disco 
execution time include time boot operating ramp applications enter steady execution state 
setup time orders magnitude longer performed simos fast emulation mode 
engineering raytrace workloads overheads mainly due disco trap emulation tlb reload misses 
engineering database workloads exceptionally high tlb rate suffer large overheads 
overheads virtualization applications 
heavy os services file system process creation pmake workload particularly stressful workload disco 
table shows effect monitor overhead top os services 
table see overheads significantly lengthen system services trap handling 
short running services irix quick page fault handler trap overhead significant portion service show slowdowns factor 
longer running services execve open system call show slowdowns 
slowdowns explained common path normalized execution time irix disco pmake irix idle disco kernel user disco engineering irix disco raytrace irix disco database 
overhead virtualization 
compares uniprocessor workloads execution time running irix directly simulated hardware irix running disco virtual machine 
execution time separated time spent user programs irix kernel disco idle loop 
page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
operating system service system time irix avg time invocation irix enter leave kernel page faults system calls interrupts 
path includes privileged instructions individually emulated disco 
restructuring hal irix remove overhead 
example irix uses tlb wired entry different purposes user mode kernel 
path kernel entry exit contains privileged instructions deal exclusively feature individually emulated 
notice relatively high overhead servicing kernel tlb faults occur disco runs irix mapped addresses unmapped addresses running directly machine 
version disco mapped kb page pairs tlb 
larger pages supported mips tlb significantly reduce overhead 
large slowdowns operating system intensive pmake workload high trap system call rate overhead 
shows reduction kernel time workloads 
operating system handled directly monitor 
reduction pmake primarily due monitor initializing pages behalf kernel suffering memory stall instruction execution overhead operation 
reduction kernel time raytrace engineering database workloads due monitor second level tlb handling tlb misses 
memory overheads evaluate effectiveness disco transparent memory sharing quantify memory overheads running mul slowdown disco kernel execution disco running commodity operating systems scalable multiprocessors relative execution time disco tlb write emulation privileged instructions demand zero quick fault open utlb write read execve table 
service breakdown pmake workload 
table breaks overheads virtualization top kernel services pmake workload 
demand zero demand zero page fault quick fault slow tlb refill utlb fast tlb refill 
utlb service irix irix disco configurations request number services category 
service execution time expressed fraction irix time separates time spend kernel emulating tlb writes privileged instructions performing monitor call emulating unmapped segments 
slowdown column sum relative execution times measures average slowdown service 
monitor calls page faults tlb faults tiple virtual machines single workload running different system configurations 
workload consists different instances basic pmake workload 
pmake instance reads writes files different disk 
configurations processor machine megabytes memory disks 
configurations differ number virtual machines access workload file systems 
configuration irix runs irix bare hardware disks local 
configurations split workload vm vms vms virtual machines vms 
vm virtual resources correspond equal fraction physical resources 
result total virtual processor memory resources equivalent total physical resources machine processors mb memory 
example vms configuration consists dual processor virtual machines mb memory 
root disk workload binaries mounted copy write disks shared virtual machines 
workload file systems mounted different private exclusive disks 
configuration runs virtual machines accesses workload files nfs private disks 
virtual machines serves nfs server file systems configured megabytes memory 
virtual machines mb memory 
results memory configured virtual machines available real machine 
workload shows ability share file cache standard distributed system protocols nfs 
page footprint size mb proceedings th symposium operating systems principles sosp 
saint malo france 
october 
irix disco buffer cache irix text irix data vm vms compares memory footprint configuration workload 
virtual physical footprint amount memory needed disco support sharing virtual machines 
machine footprint amount memory needed sharing optimizations 
pages divided irix data structures irix text file system buffer cache disco monitor 
see effective sharing kernel text buffer cache limits memory overheads running multiple virtual machines 
read shared data kept single location memory 
kernel private data shareable virtual machines 
footprint kernel private data increases number virtual machines remains small 
virtual machine configuration copies irix data structures take megabytes memory 
nfs configuration virtual buffer cache larger comparable local configuration server holds copy workload files 
data transparently shared clients machine buffer cache comparable size configurations 
standard distributed file system nfs disco maintain global buffer cache avoid memory overheads associated multiple caching data 
scalability demonstrate scalability benefits virtual machine monitors ran pmake workload configurations described previous section 
irix numa aware kernel tends allocate kernel vms disco running commodity operating systems scalable multiprocessors vms vms nfs 
data sharing disco 
compares memory footprints different configurations section run pmake workload 
configuration breaks virtual footprint system actual machine memory footprint 
virtual footprint equivalent amount memory required absence memory sharing optimizations 
normalized execution time irix vm vm vm pmake vm idle disco sync kernel user stall user data structures single node flash causing large hot spots 
compensate changed physical memory layout flash machine pages allocated nodes round robin fashion 
round robin allocation eliminates hot spots results significantly better performance irix runs 
disco able actual layout machine memory allocates consecutive pages node 
simplify comparison disabled dynamic page migration replication disco runs 
shows execution time workload 
just processors irix suffers high synchronization memory system overheads system intensive workloads 
example quarter time spent kernel synchronization routines remaining kernel time spent stalled memory system communication misses 
version irix known primary scalability bottleneck spinlock protects memory management data structures irix 
operating systems nt comparable scalability problems small numbers processors 
single virtual machine leads higher overheads comparable uniprocessor pmake workload 
increase primarily due additional idle time 
execution operating system general critical regions particular slower top disco increases vm nfs irix radix 
workload scalability disco 
performance pmake radix workloads processor ccnuma machine normalized execution time running irix bare hardware 
radix runs irix directly top hardware specialized os top disco single virtual machine 
workload execution broken user time kernel time time synchronization time monitor time idle loop 
configurations physical resources processors mb memory different number virtual machines 
page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
contention semaphores operating system 
workload increased idle time due additional contention certain semaphores protect virtual memory subsystem irix forcing processes 
interaction causes non linear effect overheads virtualization 
partitioning problem different virtual machines significantly improves scalability system 
virtual machines scalability benefits outweigh overheads virtualization 
virtual machines execution time reduced base execution time primarily significant reduction kernel stall time kernel synchronization 
see significant performance improvement accessing files nfs 
nfs configuration see increase idle time primarily due serialization nfs requests single server manages disks 
overheads nfs protocol increase idle time configuration executes faster base irix time 
workload compares performance radix sorting algorithm splash applications :10.1.1.104.6469:10.1.1.104.6469
radix unfortunate interaction lazy evaluation policies irix virtual memory system 
irix defers setting page table entries parallel thread memory touched thread 
sorting phase starts threads suffer page faults region causing serialization various semaphores protect virtual memory data structures 
contention execution traps significant comparison radix page touched 
result radix spends half time operating system 
difficult modify radix setup threads differently avoid problem examples easy fix 
modifying radix ran top irix 
manage virtual memory suffer performance problems irix 
shows drastic performance improvements running application specialized operating system top disco full blown operating system disco 
configurations suffer number page faults processing accounts system time 
system time order magnitude larger irix top disco 
numa aware allocation policy disco reduces hot spots improves user stall time 
dynamic page migration replication show benefits disco page migration replication implementation concentrate workloads exhibit poor memory system behavior specifically engineering raytrace workloads 
engineering disco running commodity operating systems scalable multiprocessors normalized execution time irix disco uma irix disco remote local exec engineering raytrace 
performance benefits page migration replication 
workload compares execution time irix numa irix disco numa page migration replication irix bus uma execution time divided instruction execution time local memory stall time remote memory stall time disco overhead 
percentage cache misses satisfied locally shown bar 
workload consists verilog simulations memory system simulations processors virtual machine 
raytrace workload spans processors 
raytrace largest available data set fully fits mb cache ran raytrace experiments kb cache show impact data locality 
shows reduction execution time workload 
workload run irix irix disco migration replication irix uma memory system 
uma memory system latency ns equivalent local latency numa machine 
result performance uma machine determines lower bound execution time numa machine 
comparison disco numa irix run shows benefits page migration replication comparison uma irix run shows close disco got completely hiding numa memory system workload 
disco achieves significant performance improvements enhancing memory locality workloads 
engineering workload sees performance improvement raytrace gets improvement 
user kernel modes see substantial reduction remote stall time 
disco increases data locality satisfying large fraction cache misses local memory small increase disco overhead 
disco totally hide numa memory latencies kernel greatly improve situation 
comparing disco performance optimistic uma cache misses satisfied nanoseconds disco comes engineering disco uma page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
action engineering num sec avg time raytrace num sec avg time migration replication table 
action taken hot pages 
table shows number migrations replications second average latency workloads 
workload raytrace 
implementation page migration replication disco significantly faster comparable kernel implementation 
improvement due disco streamlined data structures optimized tlb mechanisms 
result disco aggressive policy decisions provide better data locality 
table lists frequency latency page migrations replications workloads 
related start comparing disco approach building system software large scale shared memory multiprocessors research commercial projects target class machines 
compare disco virtual machine monitors system software structuring techniques 
compare implementation dynamic page migration replication previous 
system software scalable shared memory machines opposite approaches currently taken deal system software challenges scalable sharedmemory multiprocessors 
throw large os development effort problem effectively address challenges operating system 
examples approach hive hurricane research prototypes cellular irix system announced sgi 
multi kernel operating systems handle scalability machine partitioning resources cells communicate manage hardware resources efficiently export single system image effectively hiding distributed system user 
hive cells contain faults cell boundaries 
addition systems incorporate resource allocators schedulers processors memory handle scalability numa aspects machine 
approach innovative requires large development effort 
virtual machines disco similar cells hive cellular irix support scalability form system software fault containment boundaries 
systems disco balance allocation resources processors memory units scal disco running commodity operating systems scalable multiprocessors ability 
systems disco handles numa memory management doing careful page migration replication 
benefit disco os intensive approach reduction os development effort 
provides large fraction benefits systems fraction cost 
os intensive approach tied particular operating system disco independent particular os support different oses concurrently 
second approach statically partition machine run multiple independent operating systems distributed system protocols export partial single system image users 
example approach sun enterprise machine handles software scalability hardware reliability allowing users hard partition machine independent failure units running copy solaris operating system 
users benefit tight coupling machine dynamically adapt partitioning load different units 
approach favors low implementation cost compatibility innovation 
hard partitioning approach disco requires minimal os changes 
short providing full single system image systems build partial single system image standard distributed systems protocols 
example single file system image built nfs 
single system administration interface built nis 
system administration simplified disco shared copy write disks shared virtual machines 
hard partitioning approach disco share resources virtual machines supports highly dynamic reconfiguration machine 
support shared buffer cache ability schedule resources machine virtual machines allows disco excel workloads perform relatively static partitioning 
furthermore disco provides ability single application span resources machine specialized scalable os 
digital announced galaxies operating system version vms partitions machine relatively statically sun machine additional support segment drivers allow applications share memory partitions 
galaxies reserves portion physical memory machine purpose 
comparable implementation application level shared memory virtual machines simple require having reserve memory advance 
disco compromise os intensive os light approaches 
infinite os development budget os right place deal issues resource management 
high level knowledge greater control available operating system allow export single system image develop better resource page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
management mechanisms policies 
fortunately disco capable gradually getting way os improves 
operating systems improved scalability just request larger virtual machines manage machine resources 
disco provides adequate low cost solution enables smooth transition maintains compatibility commodity operating systems 
virtual machine monitors disco virtual machine monitor implements software virtual machine identical underlying hardware 
approach far novel 
survey lists research papers topic ibm vm system introduced period 
disco shares approach features systems includes performance optimizations vm 
allow simultaneous execution independent operating systems virtualizing hardware resources 
attach devices single virtual machines exclusive mode 
vm mapped virtual disks distinct volumes partitions disco notion shared copy write disks 
systems support combination persistent disks temporary disks 
interestingly argues technology developed interconnect virtual machines allow interconnection real machines 
opposite occurred disco benefits today advances distributed systems protocols 
basic approach disco performance optimizations vm virtual machines 
disco differs support scalable shared memory multiprocessors handling modern operating systems transparent sharing capabilities write disks global buffer cache 
idea virtual machines remains popular provide backward compatibility legacy applications architectures 
microsoft windows operating system uses virtual machines run older windows dos applications 
disco differs runs system software virtual machine just legacy applications 
daisy uses dynamic compilation techniques run single virtual machine different instruction set architecture host processor :10.1.1.13.7848
disco exports instruction set underlying hardware direct execution dynamic compilation 
virtual machine monitors provide fault tolerance sensitive applications 
bressoud schneider system virtualizes certain resources machine specifically interrupt architecture 
running os supervisor mode disables direct access resources physical memory having virtualize 
sufficient provide fault tolerance allow concurrent virtual machines coexist 
disco running commodity operating systems scalable multiprocessors system software structuring techniques operating system structuring technique disco described microkernel interface 
developing clean elegant interface microkernels disco simply mirrors interface raw hardware 
supporting different commodity specialized operating systems disco shares microkernels idea supporting multiple operating system personalities 
interesting compare disco exokernel software architecture allows application level resource management :10.1.1.100.6047
exokernel safely multiplexes resources user level library operating systems 
disco exokernel support specialized operating systems exos aegis exokernel disco 
specialized operating systems enable superior performance freed general overheads commodity operating systems 
disco differs exokernel virtualizes resources multiplexes run commodity operating systems significant modifications 
fluke system uses virtual machine approach build modular extensible operating systems 
recursive virtual machines implemented nested process model efficiency preserved allowing inner virtual machines directly access underlying microkernel machine 
ford show specialized system functions checkpointing migration require complete state encapsulation 
fluke disco totally encapsulates state virtual machines trivially implement functions 
ccnuma memory management disco provides complete ccnuma memory management facility includes page placement dynamic page migration page replication policy 
dynamic page migration replication implemented operating systems machines cache coherent ibm ace bbn butterfly 
systems migration replication triggered page faults penalty having poor data locality greater due absence caches 
implementation disco closely related kernel implementation 
projects target flash multiprocessor 
machine supports page movement performance optimization 
policies derived earlier 
kernel implementation added numa awareness existing operating system implementation disco designed features mind resulting lower overheads 
page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
tackles problem developing system software scalable shared memory multiprocessors massive development effort 
solution involves adding level indirection commodity operating systems raw hardware 
level indirection uses old idea virtual machine monitors hide novel aspects machine size numa ness 
prototype implementation called disco show problems traditional virtual machines longer significant 
experiments show overheads imposed virtualization modest terms processing time memory footprint 
disco uses combination innovative emulation dma engine standard distributed file system protocols support global buffer cache transparently shared virtual machines 
show approach provides simple solution scalability reliability numa management problems faced system software largescale machines 
disco designed exploit shared memory multiprocessors techniques uses apply loosely coupled environments networks workstations 
operations difficult retrofit clusters existing operating systems checkpointing process migration easily supported monitor 
shared memory multiprocessors done low implementation cost commodity operating systems 
return virtual machine monitors driven current trend computer systems 
operating systems application programs continue grow size complexity machine level interface remained fairly simple 
software written operate level remains simple provides necessary compatibility leverage large existing body operating systems application programs 
interested exploring virtual machine monitors way dealing increasing complexity modern computer systems 
acknowledgments authors john chapin john gerth mike nelson rick rashid steve volker shepherd rich draves feedback 
colleagues dan ben verghese participated lively discussions disco carefully read drafts 
study part stanford flash project funded arpa dabt 
ed bugnion supported part nsf graduate research fellowship 
mendel rosenblum partially supported nsf young investigator award 
disco running commodity operating systems scalable multiprocessors michael accetta robert baron william bolosky david golub richard rashid michael young 
mach new kernel foundation unix development 
proceedings summer usenix conference 
pp 

jun 
william bolosky robert fitzgerald michael scott 
simple effective techniques numa memory management 
proceedings th symposium operating systems principles sosp pp 

dec 
thomas bressoud fred schneider 
hypervisor fault tolerance 
proceedings th symposium operating systems principles sosp 
pp 

dec 
tony brewer greg 
evolution hp convex exemplar 
proceedings compcon spring 
pp 

john chapin mendel rosenblum scott devine lahiri dan anoop gupta 
hive fault containment shared memory multiprocessors 
proceedings th symposium operating systems principles sosp pp 

dec 
thomas cormen charles leiserson ronald rivest 
algorithms 
mcgraw hill 

alan cox robert fowler 
implementation coherent memory abstraction numa multiprocessor experiences platinum 
proceedings th symposium operating systems principles sosp pp 

dec 

origin vm time sharing system 
ibm res 
develop pp 

helen custer 
inside windows nt 
microsoft press 

ebcioglu erik altman :10.1.1.13.7848
daisy dynamic compilation architectural compatibility 
proceedings th international symposium computer architecture isca 
pp 

jun 
dawson engler frans kaashoek toole jr exokernel operating system architecture application level resource management :10.1.1.100.6047
proceedings th symposium operating systems principles sosp pp 

dec 
page proceedings th symposium operating systems principles sosp 
saint malo france 
october 
bryan ford mike hibler jay lepreau patrick back stephen 
microkernels meet recursive virtual machines 
proceedings nd symposium operating system design implementation osdi 
pp 

oct 
robert goldberg 
survey virtual machine research 
ieee computer magazine pp 
jun 
maurice herlihy :10.1.1.164.8106
wait free synchronization 
acm transactions programming languages systems toplas pp 

jan 
ibm 
ibm virtual machine planning guide 

adrian king 
inside windows microsoft press 
jeffrey david mark heinrich john richard simoni kourosh gharachorloo john chapin david joel baxter mark horowitz anoop gupta mendel rosenblum john hennessy 
stanford flash multiprocessor 
proceedings st international symposium computer architecture isca pp 
apr 
jim laudon daniel lenoski 
sgi origin ccnuma highly scalable server 
proceedings th international symposium computer architecture isca 
pp 

jun 
tom russel clapp 
sting cc numa computer system commercial marketplace 
proceedings rd international symposium computer architecture isca 
pp 

jun 
mike perez compaq 
interview scalable hardware evolves network os 
dec 
sharon perl richard sites 
studies windows nt dynamic execution traces 
proceedings nd symposium operating system design implementation osdi pp 

oct 
mendel rosenblum edouard bugnion scott devine steve herrod 
simos machine simulator study complex computer systems acm transactions modelling computer simulation pp 

jan 
mendel rosenblum edouard bugnion steven herrod witchel anoop gupta 
impact architectural tends operating system performance 
proceedings th symposium operating systems principles sosp pp 

dec 
disco running commodity operating systems scalable multiprocessors lance chu jong rolf david van maccabe fisk 
puma operating system massively parallel computers 
proceedings intel supercomputer user group conference 
ron krieger benjamin michael stumm 
hierarchical clustering structure scalable multiprocessor operating system design 
journal supercomputing pp 


ben verghese scott devine anoop gupta mendel rosenblum 
operating system support improving data locality cc numa compute servers 
proceedings th international conference architectural support programming languages operating systems asplos pp 

oct 
steven cameron woo evan pal singh anoop gupta :10.1.1.104.6469
splash programs characterization methodological considerations 
proceeedings nd annual international symposium computer architecture isca pp 

may 
page 
