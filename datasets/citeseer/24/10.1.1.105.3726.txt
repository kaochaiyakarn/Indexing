survey formal concept analysis support software engineering activities thomas tilley richard cole peter becker peter eklund school information technology electrical engineering university queensland brisbane australia school information technology computer science university australia tilley itee uq edu au 
formal concept analysis fca typically applied field software engineering support software maintenance object oriented class identification tasks 
presents broader overview describing classifying academic papers report application fca software engineering 
papers classified framework activities defined iso software engineering standard 
alternate classification schemes programming language analysis target application size discussed 
addition authors support agile methods formal specification fca introduced 
domain software engineering formal concept analysis fca typically applied support software maintenance activities refactoring modification existing code identification object oriented oo structures 
body literature reporting application fca identification maintenance class hierarchies database schemata 
database system typically forms backbone computer assisted software engineering case tools discussion database related applications scope 
identification classes fca applied areas software engineering including requirements analysis component retrieval 
aim provide broad overview area describing classifying academic papers report application fca range software engineering activities 
papers classified framework activities defined iso software engineering standard 
alternate classification schemes programming language applicability target application size brief analysis authorship citation patterns survey literature 
section introduces framework classify different reported approaches applicability defined software engineering activities 
section presents classified papers provide overview fca support software engineering 
approaches related early phases software development application formal specification discussed section 
section reports related software maintenance section concludes 
software engineering life cycle framework understand software engineering supported fca understanding software engineering processes involved 
section sets framework classify papers software engineering perspective 
development software traditionally described life cycle models 
models grew need better understand manage software engineering process characterised failed late bug laden projects 
royce proposed classic waterfall model consists steps phases proceed linear fashion system requirements software requirements analysis program design coding testing operations 
waterfall model focuses heavily documentation produced implementation phase may iteration successive steps 
royce realised iterations happen non consecutive steps undesirable 
address proposed extensions alleviate risk largely focused production additional documentation 
model variant waterfall model step left hand side corresponding validation verification step right hand side 
model presents opportunity formal development documents left hand side feed validation activities right 
spiral model alternative life cycle directly incorporates risk analysis major activities includes planning engineering customer evaluation 
starting centre spiral developers planning phase followed risk analysis engineering prototype system customer evaluation 
cycle repeats move spiral progresses outwards final system evolutionary fashion 
addition examples number life cycle models exist appropriate model project may depend number factors including type project development style organisational maturity developers customer 
alternative classic life cycle approaches meta model defines common software engineering activities independently particular life cycle model 
developers choose life cycle project activities mapped chosen model 
iso iso software engineering standard describes meta model software engineering life cycle processes consists thirteen activities mapped chosen life cycle model 
activity process implementation related starting methodology activities system related system requirements analysis system architectural design system integration system qualification 
remaining related software standard notes activities tasks may overlap interact may performed iteratively recursively 
short descriptions remaining obtained ieee standard glossary software engineering terminology requirements analysis process studying user needs arrive definition system hardware software requirements 
architectural design process defining collection hardware software components interfaces establish framework development computer system 
detailed design process refining expanding preliminary design system component extent design sufficiently complete implemented 
coding testing coding defined 
process expressing computer program programming language testing process analyzing software item detect differences existing required conditions bugs evaluate features software items 
integration process combining software components hardware components system 
qualification testing testing conducted determine system component suitable operational 
installation period time software cycle software product integrated operational environment tested environment ensure performs required 
acceptance support formal testing conducted determine system satisfies acceptance criteria enable customer determine accept system 
software maintenance addition activities defined understanding software maintenance required 
process software maintenance requires iteration previously defined activities terms waterfall model thought feedback loop previous stages 
ieee standard glossary software engineering terminology defines software maintenance process modifying software system component delivery correct faults improve performance attributes adapt changed environment 
section uses activities framework classify academic papers reporting application fca software engineering activities 
intention classify single activity record activities supported reported approach 
fca support software engineering activities section presents overview fca support software engineering survey 
software engineering activities defined section classify academic papers theses published 
papers report application fca software engineering approaches describe summarised sections 
note assumes familiarity fca reader pointed ganter wille classic text details 
papers survey analysed fca 
valued context constructed considers papers set formal objects 
part context appears table 
papers included survey naming format adopted research index known citeseer digital library names composed author surname digits year publication word title excluding words 
example inference configuration structures source code published krone snelting appears krone inference 
classification papers derived valued context considering iso activities scale attributes appears 
line diagram seen papers describe applications software maintenance detailed design 
note object count included concept aid readability diagram 
papers typically reporting fca identify class candidates legacy code maintenance class hierarchies considering concept lattices hierarchies obvious application 
emerging body literature related requirements analysis seen typically number papers reporting example 
worth noting papers describing applications testing papers explicitly reporting application software integration qualification testing acceptance support coding areas opportunity fca researchers 
alternate classification schemes addition iso activity categorisation number attributes categorise papers survey 
total attributes identified including names authors citations papers survey year publication inputs outputs target application languages java size reported application target 
seehttp citeseer nj nec com avoid confusion terms class class candidate typically refer object oriented objects opposed formal objects fca 
ammons debugging understanding understanding ball concept reconciling reverse canfora case dekel applications identifying enhancing bridging eisenbarth aiding eisenbarth feature eisenbarth locating fischer specification funk algorithms godin building godin applying godin design krone inference kuipers types leblanc environment lindig concept lindig assessing richards assisting richards controlled richards richards representing richards applying schupp right identifying snelting reengineering snelting concept snelting reengineering snelting reengineering snelting software snelting understanding understanding tilley software tilley tonella object tonella object identifying table :10.1.1.10.9845:10.1.1.10.9845:10.1.1.10.9845:10.1.1.12.7599:10.1.1.12.7599:10.1.1.54.4371:10.1.1.4.4625:10.1.1.4.4625:10.1.1.142.4815:10.1.1.142.4815:10.1.1.44.6482:10.1.1.13.4624
formal context showing reported application languages papers survey 
attribute values represent size application kloc lines code 
kloc value indicates reported application particular language size quoted 
cobol fortran java modula omt smalltalk uml fig 

concept lattice showing papers categorised iso software engineering activities support 
context table represents application techniques described particular programming design language 
attributes programming languages cobol fortran java modula smalltalk design specification languages omt uml procedural oo languages represented 
attribute values record size reported target application kloc lines code example kloc represents application containing lines source code 
kloc referred source thousands lines code metric reported indicate project size software engineering 
kloc necessarily consistent meaningful metric gives raw indication size applications technique applied may imply tool support 
number papers report application specific language report size particular application kloc value papers appears context 
interesting note non zero value repeats context typically refers example reported number papers 
example kloc application appears papers funk algorithms krone inference snelting reengineering snelting concept snelting software 
similar patterns seen kloc fortran kloc cobol kloc modula applications 
presents concept lattice treats table simple valued context kloc value including relates object attribute 
seen papers report application particular programming design language 
note snelting software reports applications programming languages smalltalk 
snelting surveys earlier results number papers authored authored 
lattice shows smalltalk described isolation papers contrast java modula fortran analysed connection languages 
line diagram summarises context considers maximum reported kloc languages 
gives indication papers fall different kloc ranges 
seen papers survey reporting application systems kloc refer different examples 
analysis kloc fortran system discussed papers lindig assessing snelting concept snelting software 
addition kloc cobol examples reported kuipers moonen kuipers types van kuipers identifying describe application example 
largest application survey describes analysis kloc semiconductor testing tool written eisenbarth koschke simon eisenbarth locating order magnitude larger examples demonstrates fca software analysis tools capable handling real world projects :10.1.1.13.4624
fig 

lattice table showing reported application languages ignoring size 
summary collaboration authors survey papers 
concept lattice represents authors collaborated papers different authors 
papers top lattice authors appear papers coauthors 
count number papers shown structures godin snelting particular interest 
structures represent collaboration multiple papers reasonably large number different authors 
snelting col fig 

inter ordinal scale showing maximum application size languages 
note papers reporting uml omt ignored scale kloc suitable metric design specification languages 
reason large number language applications described snelting software 
fact diagram horizontally decomposed sublattices indicates research performed independently research groups largest led snelting hesse richards godin joint publications groups 
section presents line diagram showing transitive closure citations set survey papers 
example cites cites transitively cites top line diagram papers listed papers cited literature survey set 
number explanations location papers 
earliest papers survey godin building krone inference definition earlier cite survey collection 
written german list citations unavailable 
remaining papers cite wille fca background build directly described papers 
bottom diagram papers cited survey collection 
papers earlier publication years appear ignored community papers may long cited 
appears list german language english language set 
fig 

lattice showing collaboration authors set survey papers 
note papers authors worked different authors collection papers examined listed 
papers impact appear top diagram long chains containing concepts beneath 
observed nearly linear terms citations reflects coherence community 
example snelting godin cite large forks appear structure 
structure right hand side line diagram interesting 
papers richards contained citations survey set cited reconciling 
richards cites snelting software connects back main trunk 
early phase activities software engineering activities occur commencement coding considered early phase activities 
section summarises papers shown support early phase software engineering activities 
section organised specific activities described papers 
see placed respect software engineering activities please refer back 
overview papers describing fca support software maintenance activities appears section 
requirements analysis thesis describes environment requirements gathering habermas theory communicative rationality 
habermas described fig 

concept lattice representing transitive closure citations set survey papers 
somewhat idealistic environment attempts agendas obvious negotiation considers viewpoints equally 
thesis fca question answering discussion tool 
value concepts highlighted promotes questions things missing may indicative incomplete requirements 
case studies directly related software engineering parallel typical problems encountered requirements gathering 
interesting note case studies beta describes gathering requirements fca retrieval system library center interdisciplinary technology research 
cases tool requirements gathering analysis task described certain perspective role 
typically descriptions written natural language controlled vocabularies 
wel wel hesse attempts identify class candidates case descriptions 
cases considered objects formal context nouns identified text considered formal attributes 
structure corresponding concept lattice considered starting point class hierarchy tilley case study applying wel approach object specification 
richards apply fca cases attempt reconcile descriptions written different stake holders controlled vocabulary grammar 
tool reconciling case tool exploits prolog answering system called english language parser link grammar theory translate sentences unambiguous flat logical forms 
formal nature controlled language facilitates analysis cases identify misunderstandings inconsistencies conflicts 
furthermore context produced sentences formal objects flat logical forms broken word phrases treated formal attributes 
similar concepts differences terminology identified resulting concept lattice 
component retrieval software reuse lindig describes retrieval system retrieving software components library indexed keywords 
example keywords man pages describing unix commands keywords considered formal attributes unix commands formal objects 
case commands represent components retrieved 
retrieval system provides query interface boolean query mapped formal concept lower cover concept lattice offered set possible refinements user 
formal specification fischer builds component retrieval lindig keywords formal specification captures behaviour software component see hesse contribution volume 
exploiting power formal methods components retrieved explicit properties required component selection implicit similarity components 
underlying structure concept lattice computed offline facilitates browsing software component libraries retrieval 
component specifications consist axioms describing pre conditions postconditions 
specifications objects attributes formal context 
functions partial functions specifications considered formal attributes 
addition library navigation component retrieval resulting lattice improve library 
unlabelled concepts extents containing intuitively unexpected components may indicate missing attributes features added library 
visualizing specifications fca state formal method exploits set theory order predicate logic 
specifications composed named schema boxes describe operations input output behaviour 
models constructed specifying composing series schemas refined reflect desired level system abstraction 
example schema spivey specification appears 
fig 

schema specification result mathematical nature notation tools comprised formatting package atex type checker 
continued call formal methods tool support particular tools support ability view specifications different levels abstraction 
section provides brief overview authors create tool interactively exploring specifications xml representation open source cross platform fca tool 
reported overview process 
specifications traditionally written atex viewed postscript pdf documents alternative marking specifications 
specifications written easily parsed advantage transformed xsl stylesheets html rendered web browser 
specifications easily accessed line form complete html anchors hyperlinks navigation 
fig 

overview specification browsing system 
fca tool rendering concept lattices supports extent intent highlighting conceptual scaling nesting zooming 
formal context representing static structure specification constructed considering schema formal object individual mark elements attributes 
context stored relational database accessed 
scales constructed user pre defined query specification reveal properties interest example language features data types specification 
extensible view interface exploited users click schema name line diagram web browser launched displaying relevant part specification rendered 
way users conceptually navigate explore specification fca retrieve relevant parts original specification desired 
software maintenance section deals fca suggest modifications existing software programs systems 
activity may performed different contexts different objectives 
term software maintenance usually refers modification software system deployed customer 
types software maintenance identified 
corrective modifying system improve way meets requirements 

adaptive modifying system operate correctly new environment 

perfective adding new functionality system 

improving design implementation better accommodate maintenance activities 
spectrum applications fca software maintenance covers types common thread extracting understandable structures organise artifacts software systems 
various applications fca software maintenance vary inputs concept lattices create put concept lattices 
effort organise different approaches grouped categories analysis dynamic information application legacy systems review class hierarchies 
summarise categories briefly discussed depth snelting contribution volume 
framework merging approaches knowledge base storing artifacts software system relationships mechanism deriving concept lattices graph queries 
dynamic analysis approaches analysis dynamic aspects software systems reported ammons ball eisenbarth :10.1.1.4.4625:10.1.1.142.4815:10.1.1.44.6482
ammons ball examine test coverage eisenbarth recover software architecture related cases 
dynamic information typically extracted programs executing profiler 
profiler records software artifacts procedures variables accessed run program order 
computer program essentially consists large number instructions 
instruction identified position program 
example may consider instruction memory location 
run computer program produces trace 
trace sequence instructions run 
notions concerning instructions respect collection traces important dominance 
instruction dominates instruction trace prefix ends contains words dominates way execute executed similarly post dominates trace postfix starting contains words post dominates execution requires subsequently executed 
direct correspondence dominance post dominance lattice structure dominance post dominance lead implications lattice 
consider program traces formal objects instructions formal attributes dominates post dominates implication lattice form ammons bodik larus incorporated fca formal methods debug temporal specifications 
small specifications debugged inspection larger specifications verified tools check specification number programs 
may hundreds thousands execution traces checks formal objects analysis 
execution traces classified expert decides correct erroneous 
considering transitions finite automata represent specifications formal attributes concept lattice produced clusters similar traces 
expert classify clusters traces classifying individually 
ball examines test coverage comparing implicational logic concept lattice generated traces extracted test programs dominance postdominance relationships extracted static code analysers 
additional implications concept lattice considered see removed new test 
eisenbarth describe technique locating computational units software implement feature functionality interest 
example interested locating portion web browser code related browser history 
combines static dynamic analysis particular note application technique kloc example discussed section 
number test cases scenarios constructed cover cases interest treated formal objects analysis 
computational units executed runs program considered formal attributes 
attribute object concepts resulting lattice particular interest contain program artifacts introduced specific scenarios 
report similar approach additionally arrange artifacts attribute uml diagrams uml reverse engineering tool 
way specific parts software architecture related cases extracted viewed 
capability particularly useful preparation traceability software engineering process aspects system architecture traced back requirements 
application legacy systems fca applied extract structure legacy systems compared hierarchical clustering technique organising artifacts legacy systems 
snelting fca analyse preprocessor commands legacy programs order examine configuration structure 
formal objects code fragments included preprocessor commands formal attributes disjunctive expressions governing inclusion code fragments 
concept lattice constructed notion interference introduced 
interference concept non empty extent 
types undesirable interference identified corresponding illegal configurations example interference dos corresponding orthogonal attributes example interference variable related graphics subsystem related operating system 
interferences concept lattice horizontally decomposed 
experiments legacy systems revealed configuration lattices directly decomposed horizontal sum disjoint sub lattices 
order simplify configuration structure notion interference introduced 
interference see formal definition collection meet reducible incomparable concepts removal yields lattice decomposable disjoint horizontal sum terms 
additional constraint interference subset concepts interference 
concepts involved interferences particular interest interferences orthogonal aspects system configuration 
techniques simplify concept lattice include limiting nesting depth preprocessor commands considered merging rows differ fewer elements 
techniques objective get overview configuration structure software program 
legacy programs written languages access common data structures norm fortran cobol considered van deursen kuipers lindig canfora 
van deursen kuipers compare formal concept analysis grouping fields large legacy cobol program hierarchical clustering 
hierarchical clustering involved defining distance metric cobol procedures extending metric sets procedures starting procedure cluster repeatedly merging closest clusters produce binary tree clusters 
hierarchical clustering generally criticised yield different inputs data instances clusters equidistant leading arbitrary choice clustering step generally input order different clustering results slightly different distance metrics obtained 
results produced contrast fca dependent definition distance metric closer produced software engineers familiar legacy system 
objective focus domain specific procedures performing system functions procedures having high degree fan judged system procedures discarded 
judgment controlled operator set threshold 
canfora follow similar approach interested organising legacy cobol systems components suitable distribution corba 
considered programs files relational tables 
formal context pruned removing objects attributes isolated concepts concepts directly top concept directly bottom concept don intent extent intersection concepts files relation tables having structure merged 
case arises files perform operation table sorting 
programs single file removed 
canfora apply rules formal objects formal attributes removed 
result concept lattice horizontally decomposable domain areas number interferences corresponding operations involving domain area 
task deriving object oriented models legacy systems written considered reps tonella :10.1.1.54.4371
general approach consider functions formal objects attributes commonly accessed data structures fields commonly structures 
fan refers number procedures call particular procedure 
top bottom concepts reps tonella concerned re organising functions different fine grained module structure access functions common data structures ii fields commonly accessed data types :10.1.1.54.4371
starting formal context access common data structures functions tonella seeks partitioning objects formal context functions software modules 
tonella method seek partitioning objects formal context 
tonella method searches optimal partitioning way choose set concepts extents partition objects ii assign attribute concept maximum overlap extent iii measure number concepts number concepts attributes assigned 
set concepts better concepts fewer unlabelled concepts 
search produces number optimal considered candidate placing functions software modules described concept intents containing functions concept extents 
reengineering class hierarchies snelting explains mechanism re organise class hierarchies fca :10.1.1.10.9845
variables taken formal objects methods fields objects variables refer taken formal attributes 
variable associated field method variable access method field 
number rules employed account assignment variables conservatively account dynamic dispatch 
real objective investigation objects existing run program 
snelting tip access static analysis medium variables 
see snelting contribution volume details 
schupp consider class hierarchies standard template library stl 
classes formal objects documented properties classes formal attributes 
introduce notions abstracting lacking orthogonality lacking refinement describe class libraries 
inspecting various aspects structure attempt construct concept lattice render draw 
inspection aspects stl shown example reveal regular structure 
example shows complementary pairs attributes unique multiple associative sorted hashed pair simple associative 
complementary attributes related exclusive words objects exactly attributes 
godin consider context formal objects messages methods smalltalk formal attributes classes 
consider concepts having empty attribute contingent labeled class new class candidates 
approval designer class candidates may added software 
godin approach discussed detail godin valtchev contribution volume 
applied similar technique analysis collection classes java discovered new inheritance link collection 
approach briefly outlined section 
fig 

concept lattice set map classes stl 
leblanc dony describe environment reengineering class hierarchies leblanc consider concept lattice generated classes formal objects attributes derived method signatures 
approach includes information parameter types return values 
concept considered candidate java interface 
valtchev address problem representing analysing data fca relationships exist objects 
binary inter object relationships represented relational context family 
approach applied uml class diagrams representing classes association relationships classes classes considered formal objects variables methods attributes 
tonella antoniol attempt recover design patterns source code formal context objects triples consisting classes 
attributes formal context triples form indexes object triple relation type 
example object associated attribute derived indicate derived tonella antoniol discover concepts concept lattice known adapter pattern 
ar ar nierstrasz concerned detecting patterns software fca 
similar tonella antoniol apply approach smalltalk take account behavioral information related derivation subclasses 
track dekel proposes mechanism provide suggested reading order java classes 
idea propose reading order human reader constructs encountered class introduced classes 
conceptual analysis software structure process software design implementation contains arbitrary decisions name methods variables structure class hierarchy 
design proceeds decisions need reviewed order achieve consistent orthogonal simple designs 
agile methods extreme programming xp particular advocate regular refactoring activities undertaken revise software structure 
tool conceptual analysis software structure cass attempts address requirements 
cass exploits source code analysers profilers extract information stored knowledge base large collection triples form subject predicate object 
rule system extend knowledge base new relationships artifacts 
graph queries define aspect code explored generate result sets visualised concept lattices 
hypotheses questions may investigated generating new lattices displaying new aspects software structure navigating back source artifacts software documentation 
concept lattice generated query graph natural refinement ordering allows general views elaborated specific 
user able progress general view specific view vice versa 
addition theory fca allows aspects software structure combined coherently nested diagrams 
provided snapshot fca applied support software engineering activities activities defined iso standard number criteria 
power line diagram convey summarise large amounts information demonstrated real world examples number approaches tools 
provided insight authorship groups citation patterns survey literature 
majority reported areas detailed design software maintenance fca applied oo re engineering class identification tasks 
approaches seen obvious applications specialisation generalisation relationship concepts concept lattice range different formal objects ranging compiled code cases surprising 
novel applications included support test coverage analysis tools examples emerge support coding integration qualification testing 

ammons bodik larus 
debugging temporal specifications concept analysis 
proceedings conference programming language design implementation pldi 
acm june 



ein zum bei der informatik 
peter lang frankfurt 

ar 
understanding behavioral dependencies class hierarchies concept analysis 
proceedings lmo langages mod les object paris france february 
hermes 

ar nierstrasz 
understanding classes ray views 
managing specialization generalization hierarchies workshop ase montreal canada 
preliminary version 

ball 
concept dynamic analysis 
proceedings acm sigsoft symposium foundations software engineering pages september 

beck 
extreme programming explained embrace change 
addison wesley 

becker 
suite implementing conceptual information systems 
volume 

boehm 
spiral model software development enhancement 
thayer editor tutorial software engineering project management pages 
ieee computer society washington 


reverse engineering case realizations uml 
symposium applied computing sac 
acm 

richards aguilera moll 
reconciling cases controlled language graphical models 
proceedings th international conference applications prolog pages japan october 
university tokyo 

canfora cimitile de lucia di 
case study applying eclectic approach identify objects code 
workshop program comprehension pages 
ieee 

cole tilley 
conceptual analysis software structure 
proceedings fifteenth international conference software engineering knowledge engineering pages usa june 
knowledge systems institute 

dekel 
applications concept lattices code inspection review 
israeli workshop programming languages development environments chapter 
ibm haifa research lab ibm hrl haifa university israel july 

dony 
ares adding class restructuring inheritance hierarchy 
mes journ es bases de donn es es pages 

wel 
enhancing system analysis means formal concept analysis 
conference advanced information systems engineering th doctoral consortium heidelberg germany june 

wel hesse 
identifying candidate objects system analysis 
proceedings caise ifip third international workshop evaluation modelling methods system analysis design pisa 

wel hesse 
bridging gap case analysis class structure design formal concept analysis 
ebert frank editors und informatik und wirtschaftsinformatik 
proceedings modellierung pages koblenz 
verlag 

eisenbarth koschke simon 
aiding program comprehension static dynamic feature analysis 
proceedings icsm international conference software maintenance pages 
ieee computer society press 

eisenbarth koschke simon 
feature driven program understanding concept analysis execution traces 
th int workshop program comprehension pages 
ieee 

eisenbarth koschke simon 
locating features source code 
ieee transactions software engineering march 

fischer 
specification browsing software component libraries 
automated software engineering pages 

fowler 
refactoring improving design existing code 
addison wesley 

funk snelting 
algorithms concept lattice decomposition applications 
technical report tu braunschweig december 

ganter wille 
formal concept analysis mathematical foundations 
springer verlag berlin 

godin mili mineau missaoui 
chau 
design class hierarchies concept galois lattices 
theory application object systems 

godin mineau missaoui st 
applying concept formation methods software reuse 
international journal knowledge engineering software engineering 

robert godin mili 
building maintaining analysis level class hierarchies galois lattices 
proceedings oopsla conference object oriented programming systems languages applications pages 

leblanc 
java classes java interfaces galois lattices 
actes de rd international conference orders algorithms applications pages montpellier 

valtchev 
concepts point concepts case uml diagram reconstruction 
advances formal concept analysis knowledge discovery databases pages 

ieee 
ieee std ieee standard glossary software engineering terminology 
ieee new york september 

ieee 
ieee eia standard information technology software life cycle processes 
ieee new york march 

iso 
iso iec standard information technology software life cycle processes 
iso new york march 

krone gregor snelting 
inference configuration structures source code 
proceedings international conference software engineering icse pages 

kuipers moonen 
types concept analysis legacy systems 
technical report sen centrum voor wiskunde en informatica july 

leblanc dony 
environment building maintaining class hierarchies 
moreira demeyer editors ecoop workshop object oriented architectural evolution number lecture notes computer science 
springer verlag 

lindig 
concept component retrieval 
hler giunchiglia green walther editors working notes ijcai workshop formal approaches reuse plans proofs programs pages august 

lindig snelting 
assessing modular structure legacy code mathematical concept analysis 
proceedings international conference software engineering icse pages boston 

richards 
representing requirements natural language concept lattices 
nd annual international conference british computer society specialist group artificial intelligence es cambridge december 

richards 
compare cases multiple viewpoints 
proceedings acis 

richards aguilera 
controlled language assist conversion case descriptions concept lattices 
proceedings th australian joint conference artificial intelligence 

richards 
tool case tool reconciling requirements viewpoints 
proceedings th australian workshop requirements engineering 

richards 
compare cases multiple viewpoints 
proceedings th australasian conference information systems acis melbourne december 

richards compton 
combining formal concept analysis ripple rules support reuse 
proceedings software engineering knowledge engineering madrid june 
springer verlag 

rock wille 
ein toscana zur 
stumme wille editors methoden und anwendungen pages berlin heidelberg 
springer verlag 

rook 
controlling software projects 
software engineering journal january 

royce 
managing development large software systems 
thayer editor tutorial software engineering project management pages 
ieee computer society washington 
originally published proceedings 

melo 
applying concept formation methods object identification procedural code 
proceedings international conference automated software engineering ase pages 
ieee november 

schmitt conrad 
restructuring object oriented database schemata concept analysis 

schewe editors fundamentals information systems post proceedings th international workshop foundations models languages data objects pages boston 
kluwer academic publishers 

schmitt saake 
merging inheritance hierarchies database integration 
proceedings rd international conference cooperative information systems coopis new york august 

schupp krishnamoorthy 
right level abstraction assessing reusable software formal concept analysis 
corbett priss editors foundations applications conceptual structures contributions iccs pages 
bulgarian academy sciences 

reps identifying modules concept analysis 
proceedings international conference software maintenance pages 
ieee computer society press 

snelting 
reengineering configurations mathematical concept analysis 
acm transactions software engineering methodology april 

snelting 
concept analysis new framework program understanding 
sigplan sigsoft workshop program analysis software tools engineering paste pages montreal canada june 

snelting 
software reengineering concept lattices 
proceedings th european conference software maintenance pages 
ieee 

snelting tip 
reengineering class hierarchies concept analysis 
technical report rc apr ibm watson research center ibm watson research center box yorktown heights ny usa 

snelting tip 
reengineering class hierarchies concept analysis 
proceedings symposium foundations software engineering pages november 

snelting tip 
understanding class hierarchies concept analysis 
acm transactions programming languages systems pages may 

spivey 
formal specifications 
software engineering journal january 

snelting 
understanding class hierarchies kaba 
workshop object oriented reengineering toulouse france september 

sun dong lui wang 
object web environment projections uml 
www th international world wide web conference pages new york 
acm 

swanson 
dimensions maintenance 
proceedings nd international conference software engineering pages 
ieee computer society press 

tilley 
fca tool visualising formal specifications 
ganter de moor editors conceptual structures contributions iccs pages 
shaker verlag 

tilley hesse duke 
software modelling exercise fca 
ganter de moor editors conceptual structures contributions iccs pages 
shaker verlag 

tonella 
concept analysis module restructuring 
ieee transactions software engineering april 

tonella antoniol 
object oriented design pattern inference 
proceedings csm pages 

van deursen kuipers 
identifying objects cluster concept analysis 
proceedings st international conference software engineering icse pages 
acm 
