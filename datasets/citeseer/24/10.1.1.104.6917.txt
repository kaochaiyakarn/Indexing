power slicing internet flow measurement ramana rao university california san diego ramana cs ucsd edu network service providers high speed flow measurement solutions routers track dominant applications compute traffic matrices perform operational tasks 
solutions typically need operate constraints precious router resources cpu memory bandwidth 
cisco net flow widely deployed flow measurement solution uses configurable static sampling rate control resources 
propose flow slices solution inspired previous enhancements netflow smart sampling adaptive netflow anf 
flow slices contrast netflow controls resource bottlenecks router separate tuning knobs uses packet sampling control cpu usage flow sampling control memory usage multi factor smart sampling control reporting bandwidth 
resulting solution smaller resource requirements current proposals memory usage anf enables accurate traffic analysis results error anf balances better error estimates byte packet flow counts flow count estimates times accurate smart sampling 
provide theoretical analyses variances estimators flow slices experimental comparisons flow measurement solutions anf 
role traffic measurement operating large scale ip networks requires little 
traffic measurement allows network operators informed decisions provisioning extending networks helps solve operational problems 
specialized devices operating relatively low traffic links perform complex security analyses reveal malicious activities monitor complex performance metrics simply capture packet header traces accurate timestamps analyzed offline 
simpler solutions snmp counters deployed highest speed links give measurements total volume traffic 
flow level measurement routers offers compromise scalability complexity traffic analyses supported offer details composition traffic mix 
propose new flow measurement solution flow slices 
contributions practical theoretical summarize important ones 
cristian estan university wisconsin madison estan cs wisc edu flow slices separate parameters controlling possible bottlenecks router processing load memory reporting bandwidth 
separation allows solution applicable wide variety scenarios different resource constraints 
flow slicing algorithm core solution provides accurate results packet sampling amount memory 
enables new measures traffic estimates number active flows 
note flow slices refer complete flow measurement solution proposed flow slicing refer algorithm core solution 
flow slices separates sampling rate adaptation binning 
adaptive netflow uses router memory measurement bandwidth flow records active fixed time intervals bins 
adaptive sampling rates give flow slices robustness adaptive netflow overheads binning 
see table comparison various flow measurement solutions 
propose multi factor smart sampling takes account multiple factors byte counts packet counts existence syn flags flow records determine sampling probability individual flow records 
comparable configurations decreases significantly variance estimates number flow arrivals increasing slightly variance byte counts compared smart sampling 
optional binned measurement allows eliminate binning error analysis phase maintaining memory reporting bandwidth overheads adaptive netflow 
propose novel estimators various measures traffic 
see section discussion estimators 
explain flow slices briefly review previous internet flow measurement 
related netflow implemented cisco routers widely flow measurement solution today 
routers maintain flow records collecting various bits information 
flows identified fields header packet source destination ip address protocol source destination port type service bits 
flow record keeps information number usenix association internet measurement conference issue sampled netflow adaptive netflow flow slices memory usage variable fixed fixed volume flow data reported variable fixed fixed behavior ddos spoofed sources flow reduction small reduction traffic mixes flows expiration accuracy accuracy estimates traffic small time bins accurate accurate accurate reporting overhead small bins unaffected large increase unaffected lifetime flow record router memory min active timeout bin length min slice length flow length flow length inactivity timeout inactivity timeout resource usage time bin reporting spike extra memory processing intensive tasks counting counting counting renormalization counting tcp flow arrivals syns counting active flows separate flow counting extension counting active flows high speeds hardware flow counting extension table sampled netflow adaptive netflow flow slices differ types measurements support adapt different traffic mixes resource consumption memory usage reporting traffic 
packets flow total number bytes packets timestamp packet protocol flag information packets syn flag set 
netflow uses rules decide remove flow record router memory report collection station tcp flags fin rst indicate flow termination seconds configurable inactive timeout seeing packet matching flow id minutes configurable active timeout record created avoid staleness memory full 
new packet netflow looks corresponding entry creating new entry necessary updates entry counters timestamps 
high speed interfaces processor memory holding flow records keep packet rate cisco introduced sampled netflow updates flow cache sampled packets 
configurable value parameter packet sampled probability 
problem netflow memory required flow records bandwidth consumed report depends strongly traffic mix 
particular large floods small packets randomly spoofed source addresses increase memory bandwidth requirements orders magnitude 
adaptive netflow solves problem dynamically adapting sampling rate 
adaptive netflow divides operation flow measurement algorithm equally spaced time bins 
bin algorithm starts sampling aggressively high sampling probability 
memory consumed quickly switches aggressive sampling 
existing entries reflect counts new sampling rate effect bin 
bin entries reported 
fixed size bins adaptive netflow increases memory utilization compared sampled netflow causes bursts reporting bandwidth 
memory utilization higher operate seamlessly adaptive netflow requires sets records double buffering current bin records previous bin transmitted 
double buffering flow records expire need transmitted immediately create space set entries 
large flows spanning multiple bins reported separately bin increasing bandwidth usage 
table gives summary comparison sampled netflow adaptive netflow flow slices 
flow records estimate number bytes packets various traffic aggregates interest 
give network operators information dominant applications network usage various clients traffic matrices useful statistics 
smart sampling way reducing data analyses significantly affecting results 
smart sampling retains flow records probability proportional size byte counter 
flow records estimate number active flows important looking denial service attacks scans worms traffic mix 
unfortunately internet measurement conference usenix association sampled netflow impossible recover number flows original traffic collected data protocol information 
syn flag information flow records accurately estimate number tcp flows traffic mix 
description flow slices core flow slicing algorithm sample hold algorithm 
presenting core algorithm discuss extensions adding packet sampling scale high speed links inactivity timeout reduce memory usage router adding binned measurement reduce binning error analysis adding multi factor smart sampling control volume flow data reported 
version flow slices described table extensions 
discuss configuration parameters flow slices set adaptively current traffic mix 
core algorithm core flow slicing algorithm addresses problem reducing memory usage flow measurement module 
sampled netflow adaptive netflow random packet sampling handle sampled packets 
just sample hold flow slicing uses sampling control creation flow entries sampled packet creates entry flow subsequent packets counted just sampled ones 
increases accuracy estimates packet counts changing memory requirement 
flow slicing probability control creation flow entries 
expire report entry exactly seconds creation irrespective rate packets arrive particular flow 
call core algorithm flow slicing entry tracks slice length flow 
just case netflow entry associated flow byte packet counter updated packet timestamps packet stores protocol information packets counted entry syn flag set 
ensure estimators creation entry initialize byte counter number bytes packet caused creation entry see section details 
slice length related active timeout netflow controls long active entry kept expiring reported default minutes 
parameters limit staleness data long lived flow know traffic reported delay 
dynamically adapting flow slicing probability control rate entries created freed ensuring algorithm stays allocated memory budget keeping rate entries slicing probability adaptive memory usage packet arrival packet sampling reduces processing overheads flow slicing reduces memory usage smart sampling reduces volume reports flow record sent monitoring station lookup flow entry entry create flow entry time slice duration architecture flow memory created average slightly keep rate flows records reported smooth 
contrast adaptive netflow proposes expiring active entries measurement bin large peak reports requires buffers increase memory usage factor reporting records smoothed measurement bin 
discuss dynamic adaptation detail adaptation techniques similar applied context feedback current memory usage 
note adaptation require costly operation renormalization required adaptive netflow 
discuss tuning knobs provide control resource bottlenecks cpu memory bandwidth 
scaling high speeds flow slicing probability controls memory usage lookup flow memory packet flow slicing control processing load 
presence limited processing power add random packet sampling stage front flow slicing stage see 
simple solution set packet sampling probability statically value ensures processor performing flow measurement keep worst case traffic mixes 
cisco recommendations turning netflow sampling speeds higher oc set oc links oc packet sampling rates worst case traffic consisting link entirely full byte packets flow measurement module packet time perform wide dram accesses average 
usenix association internet measurement conference adding inactivity timer flows internet short lived 
mechanism removing entry expiration slice length large value moment time entries flow memory belong flows longer active just memory waiting expire 
hand having short slice length lead increase reporting traffic loss accuracy 
adding inactivity timeout parameter flow slices reduces memory spent obsolete entries 
experimental results section show significantly reduce memory requirement inactivity timers 
adaptive algorithm setting flow slicing rate turn reduction memory usage increase accuracy 
adding binned measurement flow slices problem net flow want perform traffic analysis time bins flow slices span time bins guess flow packets bin introduces errors results 
problem pronounced analysis required small time bins capture precise traffic dynamics 
extend flow slices support binned measurement traffic keeping multiple sets byte packet counters set bin slice passes 
keeping separate counters bin binning error eliminated entirely cost increasing size flow records 
note reporting bandwidth costs solution significantly smaller solution adaptive netflow entire record reported bin 
byte packet counters bytes complete record bytes 
number counters record larger number bins required fit slice flow slice overlap partially bin 
choice size measurement bin supported compromise resource consumption router accuracy results 
reasonable choices range slice length times smaller 
brevity explore note depending final goal flow slicing algorithm extended additional resources obtain desired accuracy 
controlling reporting bandwidth smart sampling proposed way reducing number flow records causing error 
smart sampling focuses measuring number bytes arbitrary aggregates traffic smart sampling favors flow records large byte counters small flow counters 
common packet sizes vary packet counts proportional byte counts closely correlated 
smart sampling ensure errors introduced packet counts small 
situation different flow arrival counts 
depend heavily flow records syn flag set records come small flows discriminated smart sampling 
errors introduced smart sampling flow arrival counts significant 
propose new variant smart sampling smart sampling takes consideration just byte counts packet counts syn flags 
multi factor smart sampling favors flow records large byte packet counts favors records syn flag ensuring errors introduced flow arrival counts large 
exact rule determine multi factor smart sampling probability depends estimators byte packet counts postpone discussion section 
setting parameters flow slicing routers network devices performing flow measurement types resources bottlenecks processing power flow memory reporting bandwidth 
flow slices different tuning knobs control resources packet sampling probability controls processing load flow slicing probability controls memory usage thresholds determining smart sampling probability control volume data reported 
result accurate traffic analysis results single parameter packet sampling probability control resources adaptive netflow 
distinction irrelevant practice scarce resource processing power router useful perform quick sanity check proceeding unfavorable traffic mix push memory requirements reporting bandwidth high problem 
assume traffic mix consisting back back minimum sized packets belonging different flow massive flooding attack randomly spoofed source addresses 
packet sampling rates section traffic measurement module receive packet 
aggressive inactivity timeout seconds need flow memory fit flow records bytes record requires megabytes 
reported flow records take bytes ignoring overheads flow records second requires megabits second 
numbers orders magnitude comfortably afford 
experiments section realistic traffic mixes evaluate benefits flow slices compared sampled netflow adaptive netflow 
parameters flow slices listed internet measurement conference usenix association parameter controls set flow slicing probability memory usage router adaptively memory usage flow slice length staleness reported data statically user preferences inactivity timeout reduces memory usage statically typical inter packet arrival time packet sampling probability processing load router statically worst case traffic bin size optional binning error statically user preferences smart sampling thresholds volume flow data reported adaptively statically target volume table need decide set statically part router configuration dynamically adapt current traffic mix 
main tuning knobs flow slicing probability definitely set dynamically allow router protect memory overflow faced unfavorable traffic mixes 
thresholds controlling smart sampling probability set adaptively 
consider packet sampling probability static recommended values different link capacities 
flow slices just dynamic packet sampling probability go conservative static value hard guarantee stability approach pushing packet sampling rate adaptation logic hardware raises deployment problems chose explore solution 
reader noticed optional binned measurement feature flow slices resembles sampled netflow 
dynamic adaptation algorithms set flow slicing probability smart sampling probability solutions perform exactly processing 
consider important feature 
difference sampled netflow flow slices react unfriendly traffic mixes environments strong constraints resources 
adaptive netflow flow slices provide robustness unfavorable traffic mixes adaptive netflow forces user adopt binned measurement model increase memory usage volume reports traffic mix favorable 
estimators flow slices section discuss formulae estimating traffic flow records provided flow slices 
practice user interested number bytes packets flows entire traffic mix portion traffic 
estimators focus single flow 
compute total traffic user sum contributions individual flow records 
estimators individual flows property errors estimates individual flows accumulate cancel extent 
table configuration parameters flow slices 
purposes analysis bin arbitrary interval time interest traffic analysis 
simplify analysis start focusing simple case single bin slice length inactivity timeout larger size bin flow memory empty bin 
look estimators generalize remove constraints 
table summarizes notation 
estimating packet counts packet counter cs entry initialized packet flow gets sampled incremented subsequent packets belonging flow 
number packets flow input flow slicing algorithm 
equation gives formula estimator number packets flow 
cs lemma defined equation unbiased estimator proof induction number packets base case packet flow sampled probability case counted packets 
probability sampled counts 
inductive step induction hypothesis know flow 
flow slice length inactivity timeout larger bin size know flow gets entry packets bin get counted cs 
possible cases packet flow gets sampled get cs doesn value cs flow packets sampling decisions rest packets flow 
ps usenix association internet measurement conference name meaning flow slicing probability packet sampling probability smart sampling probability size flow packets flow slicing cs packet counter flow record estimate size flow flow slicing flow sliced original size flow packets packet sampling estimate original size flow flow sampled sliced size flow bytes flow slicing byte counter flow record cb estimate number bytes flow flow slices flow sliced original size flow bytes packet sampling estimate original size flow bytes flow sampled sliced contribution estimate number active flows flow sliced contribution estimate number flow arrivals flow sliced contribution estimator number flow arrivals flow sampled sliced contribution second estimator number flow arrivals flow sampled sliced zs zb za smart sampling threshold controlling influence smart sampling threshold controlling influence smart sampling threshold controlling influence sample packets randomly probability applying flow slicing algorithm want estimate number packets input packet sampling stage 
qs easy show unbiased estimator estimating byte counts discussing estimate byte count estimates flow slices show simpler solution 
byte counter cb flow entry just count total number bytes packets seen flow record created 
just packet counter need additive correction account packets missed creation entry 
get unbiased estimate number packets missed total size know sizes 
assume packet sizes uniform flow lead systematic biases 
proof lemma shows storing size sampled packet led creation entry solve problem estimate total number bytes packets counted lead unbiased estimator 
require entry flow record 
store information byte counter initializing cb entry created size bytes sampled packet 
number bytes flow input flow slicing algorithm 
table notation 
cb lemma defined equation unbiased estimator proof induction number packets flow bi sizes individual packets 
definition number bytes flow bi 
convenience notation index packet sizes reverse order size packet bs size 
base case packet sampled probability case counted cb bytes 
probability sampled counts 
cb inductive step induction hypothesis know packet sampled left packets cb bs 
packet gets sampled count bs count rest exactly flow slice length inactivity timeout larger bin size 
cb bs bs pb bs sample packets randomly probability applying flow slicing algorithm want internet measurement conference usenix association estimate number bytes input packet sampling stage 
qb easy show unbiased estimator estimating number active flows definitions counting flows active flows flow arrivals 
flow active time bin sends packet time bin 
consecutive tcp connections computers happen share port numbers considered single flow reported flow record current assumptions 
active flows packets sampled flow slicing process records flow records get counted active flow total estimate unbiased 
count records packet counter cs flows records flow gives unbiased estimates number active flows 
cs cs lemma defined equation expectation 
proof possible cases packet gets sampled cs packet gets sampled cs packets gets sampled flow record contribution flow estimate number active flows 
probability case ps probability second ps third ps 
ps ps ps estimators number bytes packets flow trivial generalize case apply random packet sampling flow slicing expected number packets bytes packet sampling exactly times number 
number active flows simple relationship shown impossible estimate significant bias number active flows random sampling applied 
changing slightly definition flow counts take advantage syn flags tcp flows 
estimating flow arrivals flow arrivals defined tcp flows start syn packet 
flow considered arrived bin syn packet time bin 
flows active certain bin syn packet bin count flow arrivals bin count active flows 
look core flow slicing algorithm estimator compute number flow arrivals 
syn flag set syn flag set syn flag set flow record set packets counted record trivial prove leads unbiased estimates number flow arrivals assumption 
assumption packet flow syn flag set 
flow arrival information preserved random packet sampling 
duffield propose estimators number flow arrivals flow records collected random sampling traffic 
formulas individual contributions flow records total estimate number flow arrivals follows 
syn flag set syn flag set syn flag set syn flag set duffield show estimators unbiased flows exactly syn packet 
estimators overestimate number flow arrivals flows syn packet 
flows syn packets definition flow arrivals differs slightly counted second estimator unbiased need assumption 
assumption packet bin flow syn flag set 
flows retaining syn packets random packet sampling stage retain single syn packet estimates number flow arrivals number flows 
easily combine get estimator number flow arrivals combined algorithm random packet sampling flow slicing 
pq syn flag set syn flag set treats separately flows syn packet packet sampling survive 
fortunately differentiate types flows flow slicing applied flow single usenix association internet measurement conference syn packet sampled flow slicing record cs syn flag set flow sampled flow slicing cs bin means packet sampled syn flag set put category flows single syn packet surviving packet sampling 
combine obtain estimator 
pq syn flag set cs syn flag set cs syn flag set cs note assumption violated syn packet flow say due syn retransmissions estimators biased counting 
repeated syns rare occurrence effect final estimate flow records small 
multi factor smart sampling reduce number flow records maintaining accurate byte counts smart sampling proposes sampling flow records size dependent probability min threshold parameter controlling trade loss accuracy reduction volume reports 
adapt smart sampling flow slices min estimate byte packet flow arrival counts smart sampled flow records formula results variance larger discriminates flows bytes flows bytes produce flow records syn flag set exactly records rely 
propose new variant smart sampling smart sampling takes consideration just byte counts packet counts syn flags 
picking smart sampling probability min zs zb za balance requirements estimators 
individual thresholds control trade accuracy reduction report volume separately estimators bytes packets flow arrivals 
note multi factor smart sampling generalization smart sampling set zb zs za assign exact sampling probabilities records smart sampling 
dynamically adjusting flow slicing probability flow slices dynamically adjusts flow slicing probability current traffic 
adjustment happen middle time bin 
values estimators 
estimators unbiased 
proofs depends having single value replaced separate pi packet 
estimators need value packet slicing probability effect time sampling packet caused creation entry 
doesn necessarily mean needs extend flow entry field holds timestamp packet determine flow slicing rate router keeps small log adjustments 
flow record expires reported report include value flow slicing probability effect time entry created 
similarly smart sampling thresholds zs zb za adjusted dynamically report include current value compute analysis 
uses just possible values parameters powers sampling rates encoded byte reporting overhead impose limited flow record bytes 
bins timeouts flow reconstruction simplify discussion estimators started strong assumptions records longer bin length counters count packets bin interest flow memory empty bin 
section relax assumptions discuss effects relaxations estimators 
continuous operation elementary relaxation assumption consider continuous operation algorithm records longer bin length separate counters bin active records start bin records created earlier 
simplest case records spanning entire bin 
byte packet counters reflect actual traffic 
packet sampling stage compute cs 
flow started earlier bin 
flow record expires bin run analysis record flow possible record flow get created record expiration 
byte packet counts additive just add counters record estimates second 
analysis carries consider bin sub bins record ends starting time 
unbiased byte packet estimates sub bins estimates sum bins unbiased 
internet measurement conference usenix association cs know flow sent packets bin set equation cs unbiased estimator flow active second sub bin tell active 
approach preserves analysis complicated flow records representing flow processed independently anymore contribution second record flow count bin depends record flow identifier 
router reports records near analysis flow reconstruction keep hash table flow identifiers find flow records flow identifier covering parts bin 
consequence doing flow reconstruction running risk double counting flows record acceptable settings 
definition flow arrivals section long assumption holds flow record starts start bin irrespective second flow record possibly syn flag 
second flow record syn flag set clearly say assumption hold flow reconstruction count separately flow arrival count 
settings type counting serious concern 
assumption hold 
slices shorter bins inactivity timeout short analysis long time bins say hours flow slices shorter bin size 
happen records flow bin 
byte packet counts just add individual estimates different records get unbiased estimator entire bin 
active flows get unbiased estimate flow reconstruction 
flow arrivals individual records summing contributions flow reconstruction gives unbiased estimates long assumption violated 
record started bin syn flag set violation assumption count flow arrival 
binning errors far assumed flow slices uses binned measurement 
guarantees long analysis time intervals exact multiples measurement bins easy determine exactly packets bytes counted record bin 
default flow slices doesn bins records span bin boundaries user guess packets bytes divided bins 
prove reconstruction traffic divides bins unbiased assumption spacing packets 
assumption flow input flow slicing algorithm time arrivals pairs consecutive packets 
algorithm distributing packets reported flow record spans bins bins covered record 
consider cs packet arrival events timestamp packet counted entry timestamp packet counted entry remaining cs evenly spaced 
consider packet arrived packet arrival event event packets distribute packets bins accordingly 
shown unbiased way distributing packets bins assumption 
recommend distributing cb bytes flow bins proportionally number packets counted bin 
assumption prove distribution bytes bins unbiased need additional assumption uniformity packet sizes 
flow arrivals binning problem assume packet counted flow record syn count flow arrival bin packet 
achieve provably unbiased binning bytes packets realistic assumptions inter packet arrival times packet size distributions flows 
turn measurements see binning error typical traffic 
recommend experimental results decide increasing size flow record adding multiple counters binned measurement worth 
variances estimators estimators discussed previous section defined individual flow compute measure say number packets larger aggregate analyst sum values estimators flow records matching aggregate 
sampling decisions different flows fortunately independent variance estimates aggregates sum respective variances estimators individual flows 
section focus studying variances various estimators individual flows 
show variances estimators core flow slicing algorithm lower estimators random sampling adaptive netflow control memory usage 
section start simplified setting single bin isolation proceed realistic settings 
proofs variance results section technical report 
usenix association internet measurement conference packet count variance core flow slicing algorithm compute variance packet count estimator 
var note variance strictly lower variance results random packet sampling case variances equal 
higher larger difference variance results flow slicing compared packet sampling 
sampling probability give memory usage flow slicing ordinary sampling comparison variances shows flow slicing superior solution 
advantage apparent estimating traffic aggregates traffic coming large flows 
holds compare combination packet sampling flow slicing flow slices pure packet sampling adaptive net flow sampled netflow 
fair comparison sampled netflow packet sampling probability pq 
conceptually divide stage packet sampling samples packets probability second samples probability stage identical statistical properties solutions difference accuracy second stage comparing second stages reduces comparing flow slicing packet sampling probability byte count variance compute variance estimates number bytes number packet sizes bi reverse order size packet bs 
var note variance strictly lower variance results random packet sampling case single packet flow 
shows byte counts flow slices better solution ordinary sampling 
flow count variance compute variance estimates number active flows 
compare packet sampling unbiased estimates number active flows packet sampled data 
var ratio estimated actual packets packets flow scatter plot depicting accuracy packet count estimates flow slices 
continuous operation consider continuous operation algorithm bin record flow 
slice spans entire bin counts exactly variance estimator 
slice ends current bin divide flow parts covered older record rest 
part variance byte packet counts second part apply formulas number packets flow bin number packets second part bi sizes packets 
flow count estimate number packets record variance estimate formula applies 
having flow records active bin increase variance packet byte flow count estimates contrary reduce significantly 
experimental evaluation divide experimental evaluation parts 
group experiments evaluates efficacy core flow slicing algorithm multi factor smart sampling algorithm 
second group compares flow slices solution adaptive netflow anf show efficacy flow slices terms memory usage accuracy estimates 
evaluations obtained traces oc link caida 
accuracy core flow slicing algorithm section evaluate core flow slicing algorithm full state approach 
experiments provide insight efficacy flow slicing algorithm effect changing various variables flow slicing probability slice length memory usage mean relative error results 
internet measurement conference usenix association mean relative error flows mean relative error theoretical error memory usage sampling probability trade mean relative error memory usage increase flow slicing probability 
estimates unbiased 
experiment fix flow slicing probability slice duration seconds 
shows scatter plot ratio estimated true flow sizes number packets axis increasing true flow size axis 
note plot shows flows packets duration trace hour 
scatter plot see flows accurately estimated 
estimates converge true values flow size increases 
presence sided errors empirically confirms estimates flow slicing 
effect flow slicing probability accuracy estimates equation increasing flow slicing probability increases accuracy estimated flow sizes 
memory usage increase slicing probability increases 
mean relative error flows larger corresponding memory usage plotted varying slicing probability axis 
apart empirical value mean relative error plot theoretical value equation 
confirms increasing slicing probability decreases mean relative error increasing memory usage 
observed theoretical empirical values mean relative errors close agreement validating analysis section 
kinds errors introduce interpolating number packets time bins 
goal experiment study errors introduced interpolating number packets various time bins flow slices bins store timestamps packet 
axis ratio estimated actual size flow bin axis actual flow size packets 
experiment slice length seconds divided equally bins size seconds 
conclu memory usage estimated actual packets packets flow scatter plot depicting errors introduced interpolating bin measures slices 
sions drawn results 
large flows error estimates obtained interpolating bins slices insignificant 
hand relatively small flows interpolating flow slices results higher error 
divide entire volume traffic particular flow bins covers see section details error depends timing bursts traffic 
course capture fine grained traffic information extension proposed section result higher memory requirements 
second observe presence sided errors indicates lack bias 
effect multi factor smart sampling accuracy estimates 
section proposed modification smart sampling improve accuracy estimates number flow arrivals 
table summarizes results experiment comparing multi factor smart sampling smart sampling 
discuss details experiment want note assumption packet flow syn flag set violated trace 
applications average number packets syn flag set flow due syn retransmissions 
affects estimators flow arrivals syn counts 
experiment aim evaluate accuracy estimators syn counts effect smart sampling estimates 
measure error relative actual number flow arrivals estimate flow arrivals input smart sampling algorithms 
input result flow slices packet sampling probability flow slicing probability slice length seconds inactivity timeout seconds 
threshold smart sampling bytes 
thresholds multi factor smart sampling zs packets zb bytes za flows selected produces usenix association internet measurement conference port number error smart sampling error actual traffic aggregation key pkts bytes syns pkts bytes syns pkts bytes syns web kazaa edonkey telnet smb smtp dns table comparison error introduced smart sampling smart sampling estimates traffic various applications average runs different seeds 
algorithms configured reduce number flow records 
port number adaptive netflow flow slices flow slices flow slices range packets bytes packets bytes packets bytes packets bytes web kazaa edonkey telnet smb smtp dns table comparison accuracy estimates adaptive netflow flow slices different slice lengths 
approximately number records smart sampling roughly 
table shows error introduced variants smart sampling estimates traffic various applications identified destination port numbers 
smart sampling introduces large errors flow arrival estimates multi factor smart sampling ensures errors comparable packet byte count estimates 
example smart sampling incurs error telnet small flows approximately bytes flow average compared kazaa discriminated smart sampling 
multi factor smart sampling hand achieves accurate flow arrival counts biasing sampling records non zero flow arrivals 
typically results slight reduction accuracy packet byte count estimates 
comparison adaptive netflow section compare flow slices adaptive net flow previously proposed solution packet sampling 
purposes evaluation fix packet sampling probability anf 
fair comparisons flow slices split proba bility parts consisting packet sampling oc trace flow slicing probability 
compare average error estimates individual flows categorized ranges aggregates destination port number 
typically table shows anf flow slices similar errors estimating traffic various applications aggregated port 
flow slices performs better anf average error individual flows 
varying slice length seconds flow slices affect accuracy results significantly bigger slice lengths perform little better smaller slice lengths 
flow slices compare anf resource consumption table summarizes memory usage router volume traffic reports flow slices anf inactivity timeout resource requirements solutions similar 
move longer bins slices slight decrease report volumes significant increase memory requirements 
adding inactivity timeout seconds flow slices dramatic effect 
memory requirements reduced significantly cost slight increase volume reports 
internet measurement conference usenix association trace packets slice length memory entries report volume records second bin size secs slices anf slices anf hour hour hour mins mins mins table comparison amount memory volume traffic reports generated flow slices anf different slice lengths flow slices bin sizes anf 
columns show memory savings flow slices achieve inactivity timeout seconds 
mean relative error adaptive netflow pkt count adaptive netflow byte count flow slices pkt count flow slices byte count attack rate pkts sec mean relative error kazaa flow slices kazaa anf telnet flow slices telnet anf attack rate pkts sec accuracy anf flow slices rate attack traffic increases 
left plot compares average relative error estimating size flows packets 
right plot compares average relative error estimating size traffic aggregates telnet kazaa 
results averages runs different seeds 
inactivity timeout memory usage flow slices sensitive slice length 
lower memory usage flow slices compared anf important consequences sampling rates adapted dynamically 
memory constraints sampling rate adaptation algorithm converge aggressive sampling rates flow slices results accurate estimates 
effect denial service attacks 
compares estimates obtained anf flow slices presence dos attack 
varied attack rate packets second pps pps attack packet represents different flow source addresses spoofed random 
configured anf flow slices operate memory budget flow records including buffering needed anf transmit records measurement bin 
anf converged smaller sampling probabilities attack traffic gained intensity sampling probability varied pps pps 
similarly flow slices random packet sampling probability remained constant simulate real hardware constraints combined sam pling probability varied 
flow slices afford aggressive sampling mainly due inactivity timeout seconds slice length flow slices bin size anf seconds 
left plot attack rate axis mean relative error packet byte counts flows packets axis log scale 
comparable memory usage presence dos attacks flow slices produces traffic estimates order magnitude better anf 
right plot average relative error estimating traffic belongs different applications telnet kazaa flow measurement solutions 
accuracy estimates reduces attack rate increases flow slices provides better accuracy anf 
results prove traffic mixes flow slices perform better solutions results show efficacy flow slices realistic traffic mixes 
apply inactivity timeouts flow slices results better re memory cost small loss accuracy little increase total volume flow records reported 
usenix association internet measurement conference processing memory bandwidth constraints impossible high speed routers provide full flow measurements forcing consider type data reduction 
different flow measurement solutions perform data reduction differently compare comparing resource consumption amount error data reduction causes various analyses wants perform flow data 
flow slices offers unique mix qualities flow measurement solutions dynamic adaptation sampling parameters keep resource usage limits separate parameters controlling potential resource bottlenecks efficient available resources algorithmic solutions minimizing errors introduced data reduction 
qualities possible due novel algorithms core flow slicing algorithm multi factor smart sampling various new estimators 
experiments confirm compared currently sampled net flow adaptive netflow flow slices constitutes better flow measurement solution 
fact flow slices supports traffic analyses discussed mean room improvement 
useful analyses flow data haven considered 
instance correlation flows classify different flows control data connections ftp session application :10.1.1.60.2196
additional metrics flow duration variability packet inter arrival times divide flows different application categories 
analyses require additional information preserved sampling techniques order effective 
important challenge adapt data reduction techniques sampling enable sophisticated traffic analyses 
acknowledgments wish nick duffield discussions contributed idea estimator ken keys helping code adaptive netflow 
wish anonymous reviewers comments helped greatly improve 
possible nsf ani 
ipmon packet trace analysis 
ipmon com php 
brownlee mills ruth 
traffic flow measurement architecture 
rfc oct 
brownlee plonka 
ip flow information export 
ietf working group 
cooperative association internet data analysis 
www caida org 
chaudhuri motwani narasayya 
random sampling histogram construction 
sigmod 
cranor johnson shkapenyuk 
gigascope stream database network applications 
sigmod june 
dag project 
dag cs waikato ac nz 
duffield lund thorup 
charging sampled network usage 
nov 
duffield lund thorup 
properties prediction flow statistics sampled packet streams 
nov 
estan keys moore varghese 
building better netflow 
proceedings acm sig comm aug 
estan varghese 
new directions traffic measurement accounting focusing elephants ignoring mice 
acm trans 
comput 
syst aug 
feldmann greenberg lund reingold rexford true 
deriving traffic demands operational ip networks methodology experience 
sigcomm aug 
karagiannis faloutsos claffy 
transport layer identification traffic 
imc oct 
keys moore koga claffy 
architecture coralreef internet traffic monitoring software suite 
pam apr 
estan 
power slicing internet flow measurement 
technical report ucsd may 
rose 
rfc mar 
cisco netflow 
www cisco com warp public tech netflow 
paxson 
bro system detecting network intruders real time 
computer networks volume 
plonka 
network traffic flow reporting visualization tool 
usenix lisa dec 

snort lightweight intrusion detection networks 
usenix lisa 
sen spatscheck duffield 
class service mapping qos statistical signature approach ip traffic classification 
imc oct 
sampled netflow 
www cisco com cc td doc product software ios limit htm 
internet measurement conference usenix association 
