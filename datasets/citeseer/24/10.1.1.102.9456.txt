extended temporal logic revisited orna kupferman nir moshe vardi hebrew university school engineering computer science jerusalem israel email orna cs huji ac il url www cs huji ac il orna weizmann institute science department computer science rehovot israel email wisdom weizmann ac il url www wisdom weizmann ac il rice university department computer science houston tx email vardi cs rice edu url www cs rice edu vardi 
key issue design model checking tool choice formal language properties specified 
recognized language extend linear temporal logic ability specify regular properties 
designers familiar finite state machines prefer extensions automata fixed points propositional quantification 
early extensions linear temporal logic automata nondeterministic chi automata 
drawback inability refer past asymmetrical structure nondeterministic automata 
study extension linear temporal logic called etl uses way alternating automata temporal connectives 
way automata traverse input word back forth exponentially succinct way automata 
alternating automata combine existential universal branching exponentially succinct nondeterministic automata 
rich structure way alternating automata etl powerful convenient logic 
show etl formulas translated nondeterministic chi automata exponential blow 
follows satisfiability model checking problems etl pspacecomplete ones ltl earlier extensions automata 
spite succinctness way alternating automata advantages etl obtained major increase space complexity 
acceptance alternating automata industry development symbolic procedures handling optimistic practicality etl formal verification check system correct respect desired behavior checking mathematical model system satisfies formal specification behavior 
early formal verification efforts considered terminating systems 
specification relates initial condition system condition supported part bsf 
supported part nsf ccr nsf ccr bsf intel 
guaranteed satisfied termination fra 
pnueli suggested temporal logic order describe nonterminating reactive systems pnu 
temporal logics augment propositional logics temporal modalities making possible describe sequence events time 
example temporal modalities eventually specify behavior holds moments moment holds 
temporal logic led development algorithmic methods reasoning reactive systems cgp :10.1.1.111.7245
particular temporal logic model checking enjoys substantial growing industrial applications bbg 
key issue design model checking tool choice formal language behaviors specified 
decades ago wolper argued basic behaviors expressed linear temporal logic ltl 
example showed behavior true positions expressed ltl wol 
wolper suggested extend linear temporal logic grammar operators 
convenient think wolper extension terms regular languages suggested vw intuitively system defined set atomic propositions infinite behavior system viewed word alphabet set allowed behaviors described regular automaton alphabet consists boolean formulas example behavior described automaton language behavior stating atomic proposition automaton language turned ltl express precisely star free regular behaviors tho inability express regular expressions ltl inadequate numerous important tasks :10.1.1.42.2841
example compositional model checking verify sys described tem checking assume guarantee specifications components 
specification states composition contains satisfies satisfies assumption refer propositions observed ltl expressive specify recognition specification language able specify regular properties led extensions ltl 
includes augmenting ltl quantification atomic propositions resulting mp augmenting ltl fixed point operators resulting linear calculus bb var 
suggestions appealing practice formulas linear calculus hard understand satisfiability problem non elementary mey 
recall vardi wolper suggested automata temporal connectives vw :10.1.1.42.2841
study usage different types automata 
particular logic uses nondeterministic chi automata enables specification etl regular etl properties 
combines perspectives system specification operational perspective finite state machines behavioral perspective temporal operators 
etl related logics appealing practice cf 
ht full regularity achieved adding regular expressions propositions actions 
reason assumption needs refer locations interaction environment done star free regular expression 

satisfiability problem etl bbl afg pspace complete 
etl logic suffers limitations 
lacks temporal operators refer past 
past temporal operators add expressive power ltl specification behaviors convenient 
convenience reflected fact best known translation pltl extends ltl past temporal operators ltl involves non elementary blow gab 
mentioned assume guarantee reasoning compositional model checking assumptions refer propositions observed component 
pltl refer history computation resembles ltl referring locations interaction component environment bk pnu 
quote pnueli order perform compositional specification verification convenient past operators necessary full power etl pnu 
second limitation etl follows limited structure nondeterministic automata 
ltl syntax contains disjunctions conjunctions runs nondeterministic automata treated purely disjunctively 
modelling conjunctions nondeterministic automata involves blow state space results automata structure different structure equivalent ltl formulas 
automata preserve possible structure formulas 
describe study logic etl removes limitations 
extension temporal logic past analogous extension automata bidirectional movement 
way automata traverse input word back forth technically transition function way automata maps state letter set pairs pair specifies state direction reading head automaton proceeds 
just pltl expressive ltl way automata expressive conventional oneway automata 
temporal logic paradigm convenient define languages way automata convenience reflected succinctness 
example translation nondeterministic way chi automata nondeterministic way chi automata involves exponential blow gh 
etl going way chi automata temporal operators 
addition automata going alternating deterministic automaton single run input word 
nondeterministic automaton may runs accepts word accepting 
viewed automaton operates existential mode 
dually universal mode word accepted runs automaton accepting 
alternating automaton bl cks existential universal modes allowed 
richer combinatorial structure alternating automata convenient specification example easy specify fact issued requests past temporal operators yesterday past time counterparts 
reader encouraged try specify behavior past temporal operators 
earlier attempt extend etl alternating automata reported vw :10.1.1.42.2841
attempt somewhat ad hoc handle alternating chi automata 
language 
formally alternating chi automata exponentially succinct nondeterministic chi automata dh 
addition complementation alternating chi automata quadratic simple kv 
interest alternating automata merely theoretical 
alternating automata industrial projects 
intel compiler uses intermediate language called essentially variant etl automata temporal connectives 
compiler translates temporal logic ftl afg formulas nondeterministic chi aff automata 
note ability ftl refer past events limited limitations etl etl possible extend ftl include past 
note shown nondeterministic boolean decision diagrams bdds maintaining sets states order reason alternating automata fin 
believe etl interesting theoretically practically 
may ask bother logic way alternating automata directly 
boolean operators easy implement alternating automata 
believe explicit usage boolean connectives nesting formulas natural users 
furthermore ability name formula refer name convenient dealing internals alternating automata functionality available afg ftl 
note succinctness way automata holds framework alternating automata shown way alternating automata finite words exponentially succinct way alternating automata finite words bir hard extend result chi automata pit 
succinctness alternating automata valid framework way automata way alternating chi automata exponentially succinct way nondeterministic chi automata gh 
etl etl extends important aspects 
hand succinctness results additive exponential translation way alternating chi automata way nondeterministic chi automata var 
automata theoretic approach verification reduce questions systems behavior questions automata vw :10.1.1.42.2841
formal specification construct nondeterministic chi automaton accepts exactly set words satisfy order check satisfiable check language nonempty 
order verify system respect check language system contained language approach construct etl formula nondeterministic chi automaton accepts exactly set words satisfy construction proceeds stages 
translate etl formula way alternating hesitant automaton 
alternating hesitant automata extension alternating weak automata mss combine chi dual chi acceptance condition 
recall complementation problem alternating chi automata quadratic 
hand complementing alternating chi automaton chi alternating automaton done dualizing transition function acceptance condition 
consequently combination condi tions leads linear translation etl way alternating hesitant automata 
second stage translate way alternating hesitant automaton way nondeterministic chi automaton 
remove hesitation get chi automaton combine techniques removing alternation ms techniques removing bidirectionality var 
fact deal hesitant word automata procedure simpler required translation way alternating parity tree automata way nondeterministic parity tree automata var 
etl formula nondeterministic chi automaton states 
follows model checking bility problems etl solved polynomial space 
matching lower bounds easy show problems pspace complete etl ones ltl sc 
follows spite succinctness way alternating automata advantages etl obtained major increase space complexity 
definitions finite alphabet word infinite sequence letters denote letter nondeterministic automata nondeterministic automaton finite alphabet finite set states set initial states transition function acceptance condition 
run word infinite sequence denote set states occurring infinitely formally infinitely consider types acceptance conditions chi chi 
run chi automaton accepting visits states infinitely run chi automaton accepting visits states finitely hesitant automata combine chi chi acceptance conditions 
extend weak automata mss richer acceptance condition 
hesitant automaton nondeterministic automaton set states states 
addition partition disjoint sets set disjoint union set chi states set chi partition case chi set case chi set 
state denote set states set partition 
exists partial order collection sets states occurs transitions state set lead states set lower 
follows run hesitant automaton ultimately gets trapped set partition 
run accepting iff chi chi set run set hesitant automaton may switch chi chi sets eventually stays forever set acceptance determined classification set 
note chi automaton chi automaton 
automaton accepts word exists accepting run rejects language denoted set words accepted complementary language set words rejected alternating automata set denote set positive boolean formulas allow say set satisfies formula denoted assigning true members false members formula evaluates true 
note formula satisfied empty set formula satisfied 
formula dual denoted alternating automaton obtained switching switching tree set elements called nodes empty word root nodes children nodes successors node leaf children 
path tree set leaf exists unique alphabet labeled tree pair tree maps node letter nondeterministic automata unique initial state transition function 
say nondeterministic automaton accepts word state accepts suffix states alternating automata allow posing existential universal demands suffix word 
example accepts word starting state accepts suffix word copies states single copy state accepts suffix sends suffix run alternating automaton word labeled tree possibly empty set satisfies formula path tree denote set states occurring infinitely path formally infinitely consider alternating chi chi automata 
run alternating chi automaton accepting infinite paths run alternating chi automaton accepting infinite paths way alternating automata way alternating automaton alternating automata transition function alternating automata allowed pose ex universal demands suffix word 
way automata allow pose demands prefix word 
technically reading head th position move locations example reading letter location send copy state location means automaton state copy state location stay location state automaton choose second option 
run word labeled tree set satisfies formula path set defined alternating automata infinitely nodes run way alternating chi automaton accepting infinite paths run way alternating chi automaton accepting infinite paths way alternating hesitant automaton obeys restrictions nondeterministic hesitant automaton 
state set union chi chi sets partition state set partial order restricts transition function 
follows infinite path run tree way alternating hesitant automaton ultimately gets trapped set partition 
run accepting infinite path note way alternating automaton viewed way alternating automaton transition function restricted formulas nondeterministic automaton viewed alternating automaton transitions restricted disjunctions set automaton state denote automaton initial state way alternating chi automaton dual chi automaton dual automata accept complementary languages ms alternating hesitant automaton alternating hesitant automaton set chi states set chi states switch roles 
accepts complementary dual language clearly 
denote different types automata symbol acronyms symbol describes ton way way way automata omit second symbol describes branching mode automaton deterministic nondeterministic alternating third symbol describes type acceptance condition chi chi hesitant symbol indicates automaton runs words 
example denotes way deterministic chi automata set regular languages recognized deterministic chi word automaton 
linear temporal logic linear temporal logic ltl extends propositional logic temporal operators eventually time pnu 
semantics ltl defined respect infinite words set atomic propositions 
example formula satisfied words letters contain atom full syntax semantics see pnu 
extended temporal logic mentioned vardi wolper suggested increase expressive power ltl temporal connectives vw :10.1.1.42.2841
suppose alphabet set defines set sequences truth assignments propositions 
view formula satisfied exactly words accepted formal definition bit complex automata allowed formulas part alphabet propositions 
describe definition etl defined vw :10.1.1.42.2841
start syntax 
formulas defined respect set atomic propositions follows 
proposition formula 
formulas 
formulas etl pairs formulas formula 
semantics defined respect words locations 
consider run formula word starting point infinite sequence states run accepting indicate word location satisfies formula word location relation defined follows 
proposition iff iff iff iff iff accepting run starting consider example state visited exactly reads letter run accept ing visits state infinitely 
etl connective proposition true iff true infinitely 
equal ltl formula stating issued requests 
describe etl equivalent formula 
consider example consider formula note infinite runs accepting 
state corresponds configuration requests pending 
state corre sponds configuration request pending 
accordingly etl formula equivalent extending temporal logic way alternating automata define formally logic etl logic etl extends etl having way alternating automata temporal connectives 
complementing transition function alternating automata simple 
allowing chi chi acceptance conditions complementation temporal connectives simple 
accordingly etl uses abw acw automata connectives 
runs formulas automata connectives defined follows 
consider way alternating automaton run word starting point finite infinite labeled tree possibly empty set sition intuitively children labeled states child satisfies tran locations copies automaton start running 
note mutually exclusive different copies may choose different formulas 
automaton abw run accepting infinite paths automaton acw run accepting paths important clear context write formula recall formula stating issued requests 
describe etl formula 
consider abw equivalent formula see note visits state reads letter containing sends copy goes backwards expecting request comes 
request eventually 
etl formula structure pltl formula 
similar logics handling etl easier positive normal form negations pushed inward de morgan laws 
etl formula positive normal form negations apply automata atomic propositions 
formula denote positive normal form etl formula positive normal form closure denoted complements 
includes formulas includes subformulas form automata connective state 
simplicity assume state sets automata connectives denote subformula pairwise disjoint initial state similarly denote clear context write just respectively 
formally set minimal set satisfying 
consider automaton note formula equivalent formula dual treat formulas existentially 
automata transition state successor involves choice order false runs rejected treat formulas universally 
universally case means take transition corresponding letter holds positive normal form etl allows application negation automata connectives 
abw acw note formulas positive normal form 
negation applies atomic propositions automata connectives 
consider formula discussed 
closure formula models formula set infinite words satisfy formula 
decision etl procedures section solve satisfiability model checking problems etl etl formula construct accepts exactly words satisfying size show satisfiability model checking problems etl pspace complete 
construction proceeds stages serving intermediate formalism 
describe construct intermediate 
theorem 
etl formula length states 
proof set states define function formula follows 
formula obtained dual replacing atom form atom switches adds front states example etl formula define set chi states abw connective acw connective state state set chi states note decision include elements states automata arbitrary 
tran sition states strict subformulas automaton going get trapped set associated 
partition follows 
state state automaton singleton set partition 
automaton states form set partition 
partial order sets iff states form set partition transition function defined formula letter follows 
proposition transition states associated abw acw sure accepting run formula 
automaton state checks formula holds current location checked sending copy formula accepting run starting transition taken reading checked copies sent 
transition states associated formula dual 
easy see respects partial order partition acceptance condition abw state visit infinitely chi state hand transition state obtained dualizing transitions visit finitely chi state members restriction visited finitely infinitely determined classification chi chi states respectively 
automaton connective describe transform intermediate 
var vardi translates way alternating parity tree automata way nondeterministic parity tree automata 
defined parity automaton words special case trees transformation var 
describe simpler direct construction 
need notations 
consider restriction set restriction define strategy infinite sequence restrictions 
denote say strategy word states set satisfies 
intuitively strategy suggests location possible way satisfying transition function 
lemma 
consider alphabet states 
word iff strategy states accepts proof intuition quite simple 
reading automaton remember sets 
set states restricts set states strategy promises strategy promises 
checks states promised strategy restricted promises fulfilled 
local requirements strategy fulfills transition states restricted restricted need memory order checked 
formal proof 
path strategy finite infinite sequence pairs path infinite case path finite case infinite path accepting gets trapped visits infinitely gets trapped visits finitely 
finite path accepting 
say winning infinite paths accepting 
losing 
hard see accepts word iff winning strategy word ms var kv 
lemma 
consider states 
alphabet states accepts exactly losing strategies proof define accepts exactly losing strategies automaton chi set chi set chi set defined chi set follows 

intuitively automaton reads strategy guesses path accepting 
accordingly rejects strategy reaches location set restrictions empty corresponds case candidate path finite 
candidate path infinite accepting iff satisfy acceptance condition easy translate linear blow chi set nondeterministically move copy set states 
automaton lemma uses bidirectionality order follow strategy enables remove alternation leaves bidirectionality 
remove blow state space lemma 
var states construct states intuitively blow follows fact remember pair states set states visited subsequent visits automaton combine lemmas obtain goal 
theorem 
proof alphabet construct states lemma construct iff states accepts word lemmas construct accepts word alphabet iff projection accepting strategy 
automaton intersection projected combine constructions described resulting solving satisfiability model checking problems etl theorems immediately imply 
theorem 
etl formula length states 
construct reduce satisfiability nonemptiness reduce model checking system respect language inclusion problem 
system finite state transition graph set words generates say satisfies words generate 
ltl fact etl closed negation check checking emptiness intersection vw :10.1.1.42.2841
nonemptiness problem chi automata solved nlogspace lower bounds follow immediately lower bounds ltl sc linear translation ltl abw var 
theorem 
satisfiability model checking problems etl pspacecomplete 
follows spite succinctness way alternating automata advantages etl obtained major increase space complexity 
discussion studied extension linear temporal logic way alternating automata 
resulting logic etl expressive previous extensions linear temporal logic regular automata added strength bidirectionality alternation logic substantially convenient 
satisfiability model checking problems etl pspace complete case ltl weaker extensions ltl automata 
developments optimistic practicality etl development symbolic procedures handling alternating automata fin usage alternating automata intermediate formalism aff intel 
etl possible extend intermediate formalism include convenient past 
considered linear framework verification 
branching temporal logic extends linear temporal logic path quantifiers path exists path formulas describe computation trees 
limitation ltl applies branching time extension ctl similar suggestions extend expressiveness ctl studied literature 
includes extensions path formulas ctl regular word automata vw cgk extension state formulas regular tree automata ms 
linear framework strengthen extensions powerful automata particular way alternating ones 
possible remove bidirectionality alternation branching framework var treatment etl 
implementation going complicated branching framework 
aff fix gerth haim vardi 
compiler 
submitted 
afg fix gerth ginsburg haim vardi 
temporal logic new temporal property specification logic 
submitted 
bb barringer 
temporal logic fixed points 
temporal logic specification lncs 
springer verlag 
bbg beer ben david geist 
methodology system practical formal verification reactive hardware 
th cav lncs springer verlag 
bbl beer ben david 
fly model checking formulas 
th cav lncs 
springer verlag 
bir 
state complexity finite state devices state compressibility incompressibility 
mathematical systems theory 
bk barringer kuiper 
hierarchical development concurrent systems framework 
seminar concurrency lncs 
springer verlag 
bl brzozowski 
finite automata sequential networks 
tcs 
cgk clarke grumberg kurshan 
synthesis approaches verifying finite state concurrent 
logic computation 
cgp clarke grumberg peled :10.1.1.111.7245
model checking 
mit press 
cks chandra kozen stockmeyer 
alternation 
journal association computing machinery january 
dh harel 
power bounded concurrency finite automata 
journal acm 
emerson 
generalized quantitative temporal reasoning automata theoretic approach 
tapsoft lncs 
springer 
fin 
symbolic refinement checking nondeterministic bdds 
tacas lncs 
springer verlag 
fra francez 
program verification 
int 
computer science 
addison 
gab gabbay 
declarative past imperative 
temporal logic specification lncs 
springer verlag 
gh harel 
complexity results way multi pebble automata logics 
tcs 
ht thiagarajan 
dynamic linear time temporal logic 
annals pure applied logic 
kv kupferman vardi 
weak alternating automata weak 
th 
ieee computer society press 
kv kupferman vardi 
calculus synthesis 
th mfcs lncs 
springer verlag 
lichtenstein pnueli zuck 
glory past 
logics programs lncs springer verlag 
mey meyer 
weak monadic second order theory successor elementary recursive 
proc 
logic colloquium vol 
lecture notes mathematics mp 
springer verlag 
manna pnueli 
temporal logic reactive concurrent systems specification 
springer verlag berlin january 
ms muller schupp 
theory ends pushdown automata secondorder logic 
tcs 
ms muller schupp 
alternating automata infinite trees 
tcs 
ms muller schupp 
simulating alternating tree automata nondeterministic automata new results new proofs theorems rabin mcnaughton safra 
tcs 
mss muller schupp 
alternating automata weak monadic theory tree complexity 
th icalp lncs 
pit 
extending temporal logic automata 
sc 
thesis weizmann institute science israel pnu www wisdom weizmann ac il home public html publications msc thesis ps 
pnueli 
temporal semantics concurrent programs 
tcs 
pnu pnueli 
transition global modular temporal reasoning programs 
logics models concurrent systems volume nato advanced summer institutes pages 
springer verlag 
sc sistla clarke 
complexity propositional linear temporal logic 
journal acm 
sistla vardi wolper 
complementation problem chi automata applications temporal logic 
tcs 
tho thomas 
combinatorial approach theory automata 
information computation 
var vardi 
temporal fixpoint calculus 
th popl pages 
var vardi 
automata theoretic approach linear temporal logic 
logics concurrency structure versus automata lncs 
var vardi 
reasoning past way automata 
th icalp lncs 
springer verlag 
vw vardi wolper 
process logic 
logics programs lncs 
springer verlag 
vw vardi wolper :10.1.1.42.2841
reasoning infinite computations 
information computation november 
wol wolper 
temporal logic expressive 
information control 
