pragmatics type directed partial evaluation olivier danvy computer science department aarhus university www brics dk danvy 
type directed partial evaluation stems arbitrary static values dynamic contexts type 
algorithm coincides coercing value supertype value coincides normalization calculus 
type directed partial evaluation specialize compiled closed programs type 
similix insertion cornerstone partial evaluators callby value procedural programs computational ects 
prevents duplication residual computations generally maintains order dynamic side ects residual programs 
article describes extension type directed partial evaluation insert residual expressions 
extension requires annotate ect information 
achieved delimiting abstracting control comparably continuation specialization direct style 
enables type directed partial evaluation programs ade nitional lambda interpreter imperative language direct style 
residual programs normal form 
type directed partial evaluation stems need arbitrary static values dynamic contexts partial evaluator :10.1.1.103.291
requires type values including free variables values higher order practice works value text closed source programs 
algorithm parallels source binding time improvements coincides systems subtypes normalization proof theory logical frameworks 
interpreting static expressions executable code dynamic expressions code construction yields type directed partial evaluation specialization compiled code text long normal form :10.1.1.103.291
type directed partial evaluation encounters problem partial evaluators call value programs computation duplication 
example consider procedure type constructor accounts scheme uncurried procedures 
ny munkegade building dk aarhus denmark 
danvy brics dk define foo lambda lambda value foo 
text unavailable compiled away 
basic foo lambda computation duplicated ofthe application rst argument foo 
duplication consequence function denoted rst argument pure total 
function furthermore inexpensive computation duplication reduces code duplication 
general duplication wanted 
point ofthis remedy situation 
extend language types handled type directed partial evaluation account impure procedures application duplicated 
treatment proven expression 
value foo 
time specify rst argument 
syntactically type argument long arrow 
foo lambda residual expression inserted 
insertion naturally scales voluminous programs yielding residual programs cps continuations normal forms monadic normal forms illustrated :10.1.1.48.8807
lambda lambda lambda reader keep mind inserting expressions challenge contrast existing partial evaluators access tothe text source program 
interaction scheme procedure scheme obeys call value 
structured follows 
aside issue naming residual variables section 
side issue pragmatically trivial solving improve readability residual programs 
equipped review problem residual computational ects partial evaluation section 
specialize section respect type directed partial evaluation section 
possible specialize direct style interpreter paulson tiny language section 
corollary section cps transformation compiled programs normal form section 
technique section relies control clashes similar control operations handle disjoint sums 
section outlines coexist 
comparison related section conclude section 

lexical scope names local variables matter 
practice contribute program readability programmers usually pick meaningful identi ers 
reason automatically generated programs hard read precisely uninformative identi ers 
similix identi ers example depend onthe history computation source scope information 
long 
relative delight ofthe user di er subtly 
strategy picking residual names surprise type directed 
implicit naming named rst letter type gensym generated number 
similar variables higher types 
name stub products booleans functions 
explicit naming user specify name stubs type language directive 
directive alias speci es full name may come handy name clash expected 
example example type alias denotes uncurried scheme procedure arguments associated name stub third associated name 
lambda alias lambda sound call value propagate constants procedure boundaries partial evaluator unfolds calls 
parameters may static call value call general 
backdrop partially static structures torben mogensen suggested insert residual expression dynamic parameter pass residual identi er naming dynamic actual parameter parameter rationale call value parameter duplicated compromising dynamic source program illustrated section 
simple solution put atthe core similix partially static values scaled remarkably provide simple solution thorny problem automating call unfolding provide sound treatment dynamic side ects 
doubled avariable splitting mechanism provides simple elegant treatment partially static values higher order values 
section adapt insertion technique type directed partial evaluation 
particular case type directed partial evaluation lacking source code impossible insert residual expressions call sites compiled source program 
go upstream calls point residual expressions dynamic expressions owing procedure boundary see dynamic expressions come 
essentially come residual calls procedures form dynamic expressions 
choose annotate type procedures insert expression naming result unfolded return residual name tothe current context 
point requires delimit control comparatively strategy continuation partial evaluation direct style :10.1.1.103.291
corresponding speci cation type directed partial evaluation shown 
extension type directed partial evaluation :10.1.1.103.291
domains value expr de ned inductively structure types starting set dynamic base types 
isthe domain typed level terms contains value expr 
arrow read reify static value level term statically reduces dynamic counterpart static type 
value pair fst snd expr pair fst snd reify type value fresh 
pair fst snd re ect type type expr tt shift fresh 
pair tt fst tt snd reset re ect annotated type value expected delimited context 
statically reduce reify type value expr fig 

type directed insertion value 
conversely arrow read re ect dynamic expression level term representing static counterpart dynamic expression 
reify resp 
re ect applied types occurring positively resp 
negatively source type 
generalizes speci cation type directed partial evaluation popl proceedings sense 
removing 
type language yields original speci cation remembering algebraic property reset property expression containing occurrence shift reset presence procedures directed partial evaluation contains series expressions 
characteristic 
example paulson tiny interpreter direct style section type directed partial evaluation addresses classical example paulson tiny interpreter mp partial evaluation circles :10.1.1.103.291
skip hexpi hexpi hexpi hexpi hexpi read simple exercise corresponding de nitional interpreter direct style contrast popl proceedings written continuation style apply factorial program result 
displays residual program 
direct style counterpart residual program displayed popl proceedings 
naming scheme section directly readable 
taken advantage single threadedness store generate unique residual identi er 
particularly lovely residual program generated straight ordinary direct style interpreter compiled ordinary scheme compiler 
residual program perfectly readable addition generated ciency compiled code 
corollary cps transformation compiled programs simple translate terms cps 
expressions example context continuation essentially desugared follows simple adapt produce cps terms 
lack time display adapted gure submission 
corresponding program available author home page 
lambda add sub mul equal gt read fix true 
lookup update lambda read update update fix lambda lambda lookup gt true 
lambda lookup lookup mul update lookup sub update lambda lookup update residual program specialized version tiny interpreter respect factorial source program 
observed scheme program normal form threading store 
loop mapped xed point declaration re ecting semantics loops tiny interpreter 
location sets computed partial evaluation time 
fig 

residual factorial program hand renaming control insertion vs disjoint sums popl proceedings shift reset handle section 
clashes insertion section 
hierarchy control abstractions treatment disjoint sums clearly supersedes treatment insertion 
case shift reset 
leave aspect 
related section situated type directed partial evaluation related stems need static values dynamic contexts higher type algorithm coincides higher order coercions calculus normalization 
express level calculus 
coincidence algorithms shows computational power ine monovariant partial evaluator calculus 
picking particular representation compiled syntax constructions compiled syntax constructors possible specialize closed compiled programs type 
phd thesis filinski de nes extensional mappings monadic values programs standard ml 
particular possible de ne extensional cps transformation particular case identity monad ofthe continuation monad 
composing transformation berger schwichtenberg algorithm programmed standard ml yields ect cps transformation section 
issues extended type directed partial evaluation pragmatic features ability specify identi ers insert expressions residual programs 
possible ensure sound call unfolding matters type directed partial evaluation inherently call value specialize direct style programs containing dynamic computational ects improve readability residual programs 

ulrich helmut schwichtenberg 
inverse evaluation functional typed calculus 
proceedings sixth annual ieee symposium logic computer science pages amsterdam netherlands july 
ieee computer society press 

bj rner andrei ershov jones 
partial evaluation mixed computation 
north holland 

hans 
boehm editor 
proceedings annual acm symposium principles programming languages portland oregon january 
acm press 

anders bondorf 
self applicable partial evaluation 
phd thesis diku computer science department university copenhagen denmark 
diku report 

anders bondorf 
similix manual system version 
technical report diku computer science department university copenhagen copenhagen denmark 

anders bondorf 
improving binding times explicit cps conversion 
william clinger editor proceedings acm conference lisp referee encouraged distinction constructions constructors constructor generates construction 
distinction proves essential context program generating programs 
functional programming lisp pointers vol 
pages san francisco california june 
acm press 

anders bondorf olivier danvy 
automatic recursive equations global variables data types 
science computer programming 

william clinger jonathan rees editors 
revised report algorithmic language scheme 
lisp pointers iv july september 

charles consel 
tour partial evaluation system higher order applicative languages 
david schmidt editor proceedings second acm sigplan symposium partial evaluation semantics program manipulation pages copenhagen denmark june 
acm press 

charles consel olivier danvy 
tutorial notes partial evaluation 
graham editor proceedings twentieth annual acm symposium principles programming languages pages charleston south carolina january 
acm press 

olivier danvy 
back direct style 
science computer programming 
special issue esop fourth european symposium programming rennes february 

olivier danvy 
type directed partial evaluation 
guy steele jr editor proceedings third annual acm symposium principles programming languages st petersburg beach florida january 
acm press 

olivier danvy andrzej filinski 
abstracting control 
mitchell wand editor proceedings acm conference lisp functional programming pages nice france june 
acm press 

olivier danvy andrzej filinski 
representing control study cps transformation 
mathematical structures computer science december 

olivier danvy jens palsberg 
essence partial evaluation 
lisp symbolic computation 
earlier version appeared proceedings acm sigplan workshop evaluation semantics program manipulation 

olivier danvy 
eta expansion trick 
technical report brics rs daimi computer science department aarhus university aarhus denmark august 

matthias felleisen 
theory practice rst class prompts 
jeanne ferrante editors proceedings fifteenth annual acm symposium principles programming languages pages san diego california january 

andrzej filinski 
controlling ects 
phd thesis school computer science carnegie mellon university pittsburgh pennsylvania 

cormac flanagan amr sabry bruce duba matthias felleisen 
essence compiling continuations 
david wall editor proceedings acm sigplan conference languages design implementation sigplan notices vol 
pages albuquerque new mexico june 
acm press 

john olivier danvy 
generic account continuation passing styles 
boehm pages 

fritz henglein 
dynamic typing syntax proof theory 
science computer programming 
special issue esop fourth european symposium programming rennes february 

fritz henglein jesper rgensen 
formally optimal boxing 
boehm pages 

neil jones carsten gomard peter sestoft 
partial evaluation automatic program generation 
prentice hall international series computer science 
prentice hall 

julia lawall 
continuation elimination higher order programming languages 
phd thesis computer science department indiana university bloomington indiana usa july 

julia lawall olivier danvy 
continuation partial evaluation 
carolyn talcott editor proceedings acm conference lisp functional programming lisp pointers vol 
vii orlando florida june 
acm press 

torben mogensen 
partially static structures self applicable partial evaluator 
bj rner ershov jones pages 

torben mogensen 
binding time aspects partial evaluation 
phd thesis diku computer science department university copenhagen copenhagen denmark march 

flemming nielson hanne riis nielson 
level functional languages volume tracts theoretical computer science 
cambridge university press 

larry paulson 
compiler generation denotational semantics 
bernard editor methods tools compiler construction pages 
cambridge university press 

frank pfenning 
logic programming lf logical framework 
gerard huet gordon plotkin editors logical frameworks pages 
cambridge university press 

david schmidt 
detecting global de nitions 
acm transactions programming languages systems april 

peter sestoft 
automatic call unfolding evaluator 
bj rner ershov jones pages 
article processed latex macro package llncs style 
