building web service ontologies marta sabou dissertation series 
research reported thesis carried auspices dutch graduate school information knowledge systems 
prof dr van harmelen promotor prof dr stuckenschmidt university mannheim germany prof dr brazier vrije universiteit amsterdam dr domingue open university uk dr guarino laboratory applied ontology cnr italy prof dr de rijke universiteit van amsterdam prof dr th 
schreiber vrije universiteit amsterdam isbn copyright marta sabou vrije universiteit building web service ontologies ter van de doctor aan de vrije universiteit amsterdam op van de rector prof dr het te van de van de der op april om uur de van de universiteit de boelelaan door marta sabou te promotor prof dr van harmelen prof dr stuckenschmidt preface favorite metaphors life compares challenging expedition 
metaphor challenge task life mountain climb 
time mountain seams important hardest conquer rich top realize higher mountains climb ahead 
thesis result years effort climb probably hardest mountain life far 
reaching peak possibility engage higher challenges 
ahead 
time looking back journey realize completed help people 
time 
supervisors frank heiner undoubtedly played central role year apprenticeship research 
frank enrolled phd position place 
supervising master thesis considered potential researcher offered phd position group convinced accept 
am grateful frank heiner supported pursuing risky topic quite distant expertise 
managed steer successful direction 
technical content working opportunity learn skills essential research writing papers reviewing fellow researchers 
hardest part role harder technical content providing actual tools perform research teaching right attitude research 
science optimism incredible dedication inspired motivated single day years 
topic thesis novel core expertise kr group performed cooperation researchers different research groups 
master thesis years cooperated dutch research experienced staff late jos van der meer kampman fluit ter horst jeen broekstra jeroen 
papers written cooperation members group sander van frances brazier richards macquarie university sydney visiting group time 
thesis accomplished framework wonderweb european project 
project gave opportunity perform joint daniel oberle university karlsruhe colleague peter mika aldo gangemi rome 
benefitted important help crucial stage researchers univer van amsterdam maarten de rijke gilad valentin 
european project knowledge web gave opportunity spend productive motivating weeks sheffield gate group bontcheva diana maynard hamish cunningham valentin tablan 
done sheffield helped finalize important case study cooperation carole goble chris wroe university manchester 
acknowledge contribution people brought thesis 
people closely cooperated enjoyed support larger number colleagues friends 
owe special mar marcos room mate dear friend 
remember great pleasure cooperation jeen broekstra part time michel klein van cwi teaching web knowledge representation course vu 
colleagues ai bi groups annette holger laura mark peter radu contributed pleasant motivating environment interesting lunch time discussions especially ronny ziv 
owe italian dinner mark van translated summary thesis dutch 
members reading committee insightful constructive comments thesis 
kmi helped cover design 
special friends amsterdam alessandro dirk federico peter 
hope distance break friendships 
help friends colleagues fellow researchers completed thesis help family 
sacrifices unlimited love opportunity follow higher education finalize studies abroad finish thesis 
uncle zoltan australia provided financial means allowed go university 
raw model ones maximum 
take pages thesis describe mother years left home interest education 
want years immense love helped teaching humans endure infinitely truly believe 
sister supported years love wisdom life compensates brittle personality 
unfortunately family members grandparents father lived day 
dear memory joy life live day 
am extremely fortunate share joy pain years dear husband giovanni 
side hard times taught truly success 
am grateful deep love endless optimism jokes interesting stories history politics turned news eater total ignorant teaching obvious things life ignored schooling cooking forces permanent diet 
family massimo maurizio support regarding true member italian perfect 

contents research questions 
contributions 
structure thesis 
publications 
context related semantic web services changing world wide web 
semantic web 
ontologies 
ontology languages semantic web 
web services 
semantic web services 
generic web service ontologies 
web service domain ontologies 
requirements web service ontologies 
requirements generic web service ontologies 
requirements web service domain ontologies 
summary 
related 
acquisition software semantics 
formal ontology methods 
ontology learning 
ontology learning approaches 
methods text ontology learning 
ontology learning tools 
major issues ontology learning 
summary 
ii contents ii enhancing generic web service ontologies improving daml 
web services 
modelling simple service bib rdf 
modelling service multiple interfaces sia 
top design sia 
bottom modelling sia 
composite process approach sia 
final model sia 
modelling complex service sesame 
description 
modelling requirements 
specifying service semantics 
input output specification 

summary 
adapting owl generic software entities 
motivation 
application server semantic web 
scenarios 
requirements 
ontology design 
overview 
sub ontologies 
ontology deployment 
example component description 
component descriptions 
related 
summary 
aligning owl foundational ontology 
related 
problematic aspects owl 
conceptual ambiguity 
poor axiomatization 
loose design 
narrow scope 
alignment 
dolce 
descriptions situations 
core ontology services 
aligning owl core ontology services 
summary 
contents iii suggestions improvement 
conceptual 
increased axiomatization 
improved design 
wider scope 

summary 
iii learning web service domain ontologies framework learning web service domain ontologies 
problem building web service domain ontologies 
case study wonderweb rdf storage tools 
case study grid bioinformatics services 

requirements ontology learning solution 
dealing low grammatical quality 
dealing sublanguage characteristics 
learning ontologies procedural knowledge 
framework learning web service domain ontologies 
overview framework 
step term extraction 
step ontology building 
step ontology pruning 
possible extensions framework 
implementation details 
gate framework 
concrete implementations 
visual support ontology learning 
summary 
evaluation 
ontology learning evaluation practices 
chosen evaluation criteria 
term extraction 
expert evaluation 
ontology comparison 
experimental corpora 
results 
term extraction 
expert evaluation 
ontology comparison 
comparison ontology learning tools 
discussion 
iv contents contributions 
requirements web service ontologies 
enhancing generic web service ontologies 
learning web service domain ontologies 
note generality results 

semantic web services 
semantic web enabled software engineering 
ontology learning 
dolce synchro task owl syntax samenvatting bibliography dissertation series chapter world wide web berners lee granted uniform access heterogeneous data sources residing internet 
tremendous success web lead explosive increase levels finding right information non trivial task 
response limitations years web encountered revolutionary changes aim transform static document collection intelligent dynamic data integration environment 
innovative technology web service technology allows uniform access web standards software components residing various platforms written different programming languages 
result software components providing variety functionalities ranging currency conversion flight booking accessible web 
web service technology introduced new abstraction layer radically new architecture software 
business perspective web services correspond business services compositionality paradigm underlies web service technology allows composing existing business services new complex services 
second novel web technology semantic web berners lee develops techniques augmenting existing web data logics formal descriptions meaning 
thesis concerned annotation semistructured data 
semantic markup machine processable facilitates access integration vast amount web data 
core semantic web technology ontologies gruber 
ontology formal representation consensual world knowledge provides elements building semantic descriptions 
major limitation web services technology finding composing services requires manual effort 
serious burden increasing number web services services exist bioinformatics lord 
address problem semantic web researchers proposed augment web services semantic description functionality order facilitate discovery integration 
technology combining web services semantic web techniques referred semantic web services mcilraith 
semantic web service descriptions rely kinds ontologies 
generic web service ontology specifies main aspects describe web services regardless domain operate 
example ontology provides vocab describe web services inputs outputs complex internal data flows 
second domain ontology provides concepts domain web service populate generic description template built concepts generic ontology 
concepts denote entities domain web service food hotel functionalities performed services domain 
collectively refer generic domain ontologies employed web service descriptions web service ontologies 
major problem semantic web services technology address thesis building web service ontologies time consuming complex task 
constitutes major bottleneck development semantic web service technology 
ontology building process different generic domain ontologies 
generic ontology typically developed group experts intended large user base 
example owl martin developed committee experts members research projects adopt standard structuring web service descriptions 
typically experts reside world development process mainly conducted virtual environments email phone conferences 
eventual feedback users influences development standard committee 
contrast generic ontologies little research focusing building web service domain ontologies domain ontologies web service context 
domain experts reuse existing ontology build ontology appropriate ontology exist 
despite importance domain ontologies exist describing web services requiring building new ontology 
aware research field semantic web services aims qualitatively improve web service ontologies facilitate process building ontologies 
previous research performed context software engineering ontology engineering relevant considering problem building web service ontologies 
generic problem acquiring complex semantic descriptions software components experienced difficult software engineering 
example comprehensive survey existing software libraries revealed difficulty acquiring software semantics hampered adoption sophisticated solutions industrial settings mili 
literature study revealed approaches addressed acquisition software semantics 
explicitly tailored building ontologies 
exists plethora ontology engineering high applicability problem building enhancing web service ontologies 
literature documents number methodologies prescribe main steps ontology building process gomez perez knowledge engineering general schreiber 
traditional methodologies consider particularities distributed decentralized settings ontology shaped dynamic requirements big open user groups 
exception diligent methodology accurately captures phases process 
second body relevant aims qualitatively enhance existing ontologies 
methodologies relying ontological notions ontoclean guarino welty validate ontological adequacy complex ontologies 
techniques alignment foundational ontologies permit analyzing disambiguating enriching 
research questions ontologies wordnet gangemi industry ontologies borgo 
prior methods applied context web services generically software ontology driven conceptual modeling included aspects software development 
third category approaches grouped term ontology learning facilitate semi automatic acquisition ontologies unstructured semi structured structured data sources maedche staab 
variety ontology learning methods tools developed gomez perez addresses special context web services 
field slowly reaching maturity increasingly applied variety application domains issues related evaluation usability require investigation 
thesis addresses problem building web service ontologies adapting existing techniques mentioned fields particular context web services 
important contributions brought fields 
rest chapter state research questions addressed thesis describe contributions state art provide overview thesis 
research questions central question investigated thesis facilitate process building web service ontologies enhance quality ontologies 
centered concrete research questions 
requirements web service ontologies fulfill 
prerequisite improving state art web service ontology development understanding process 
particular important identify requirements web service ontologies fulfill 

enhance quality generic web service ontologies 
generic web service ontologies standards creating semantic descriptions high quality 
ensure need ways test fulfill previously identified requirements identify problematic aspects limitations provide appropriate solutions 

semi automatic acquisition web service domain ontologies feasible 
acquisition web service domain ontologies time consuming task automation desirable 
important identify requirements automatic acquisition solution context web services data sets typically available 
existing ontology learning methods adapted particularities context rigorously evaluated incorporated easy tools 
research questions lead contributions summarized section 
contributions thesis contributes development web service ontologies implicitly realization semantic web services idea 
contributions fall major categories 
identifying requirements web service ontologies 
despite large body area semantic web services efforts directed identifying requirements web service ontologies 
aware requirements stated lara grosof 
experiences working evolving semantic web services technology identified set requirements web service ontologies fulfil 
non exclusive list requirements complements requirements brought forward community far 

methods enhance generic web service ontologies 
enhancements owl 
important goal field semantic web services design generic web service ontologies 
little attention evaluation quality ontologies 
identified set methods analyze generic web service ontologies improve quality 
recommend generic ontology describe real life services order increase modelling expressiveness 
second adapt ontology related domains order test generality conceptualized knowledge 
third alignment foundational ontology disambiguating meaning concepts proposed ontology increasing axiomatization 
alignment ontologies foundational ontology allows 
methods analyze owl identify limitations propose solutions overcome limitations 
observations solutions valuable findings developing generic web service ontology 
perspective foundational ontologies contribution extension context software components 

learning web service domain ontologies 
domain ontologies play important role building semantic web service descriptions little research concentrated ways automate acquisition 
guidelines tools exist support acquisition ontologies 
thesis pioneered long run aims achieve semi automatic acquisition web service domain ontologies 
start analyzing problem ontology learning context web services 
identify set characteristics constrain development automated solution design framework ontology learning account characteristics 
experiment different implementations framework elaborate evaluation determine method provides better performance 
implement methods prototype system different means tool user friendly 
contributed field ontology learning showing existing methods successfully adapted web service context 

structure thesis structure thesis thesis structured main parts covering research questions 
part context related part describe context identify set requirements web service ontologies response research question survey related 
part ii enhancing generic web service ontologies part address second research question 
describe methods analyze enhance different aspects generic web service ontologies 
demonstrate methods context owl 
analyze owl meets requirements stated chapter offer partial solutions enhance eventual limitations 
part iii learning web service domain ontologies final part investigate third research question related semiautomatic acquisition web service domain ontologies 
analyze requirements automatic solution design implement evaluate different learning methods 
material thesis distributed individual chapters follows part context related chapter introduce semantic web services technology conclude requirements web service ontologies fulfill 
chapter overview related existing ontology engineering practices potentially applied solve stated problem 
part ii enhancing generic web service ontologies chapter owl describe set real life services 
allows conclude modelling expressiveness usability owl 
chapter investigate adaptability owl extending describe software modules managed application server middleware 
analysis reveals owl valuable design principles easy reuse 
chapter show owl ambiguous poorly axiomatized suggest enhancement aspects alignment dolce foundational ontology 
alignment methodology generally valid aligning generic web service ontologies potentially contributing ontologies 
part iii learning web service domain ontologies chapter analyze process building domain ontologies application domains 
analysis establish set requirements ontology learning solution problem fulfill 
framework adapts ontology learning methods context web services 
describe instantiations framework rely natural language processing techniques different levels complexity 
part chapter provides details implementation prototype system 
chapter perform evaluation framework 
provide generic considerations ontology learning evaluation methods describe evaluation metrics employ 
metrics assess compare instantiations framework available data sets 
chapter discuss contributions point 
publications chapters thesis previous publications chapter semantic web services stuckenschmidt sabou klein 

semantic web technology bringing meaning distributed systems 
ieee distributed systems online papers published cooperation members owl committee martin 
owl white martin 

bringing semantics web services owl approach 
proceedings international workshop semantic web services web process composition san diego california usa 
chapter combines material published sabou richards van 

experience report daml 
proceedings workshop services semantic web th www conference budapest hungary richards sabou 

semantic markup semantic web tools daml description rdf store 
proceedings second international semantic web conference volume lncs pages sanibel island florida usa 
performed cooperation richards sander van frances brazier context agent factory project 
supported members dutch providing support working sesame ontology storage query engine 
chapter published sabou oberle richards 

enhancing application servers semantics 
proceedings australian workshop engineering service oriented systems melbourne australia cooperation daniel oberle richards 
material chapter result joint peter mika daniel oberle aldo gangemi context wonderweb project 
published mika sabou gangemi oberle 

foundations daml aligning daml dolce 
international semantic web services symposium sws aaai spring symposium series 
extended version symposium published mika oberle www daml org services owl biz 
publications gangemi sabou 

foundations service ontologies aligning owl dolce 
proceedings international world wide web conference www 
acm press 
chapter material published sabou 

software apis web service ontologies semi automatic extraction method 
proceedings third international semanticweb conference iswc hiroshima japan sabou wroe goble 

learning domain ontologies web service descriptions experiment bioinformatics 
proceedings th international world wide web conference chiba japan sabou wroe goble stuckenschmidt 

learning domain ontologies semantic web service descriptions 
journal web semantics 


considerations evaluation methods detailed chapter published sabou 

extracting ontologies software documentation semi automatic method evaluation 
proceedings ecai workshop ontology learning population ecai olp valencia spain refined follow book chapter sabou 

learning web service ontologies automatic extraction method evaluation 
buitelaar magnini editors ontology learning population 
ios press 
ideas possible extensions described sabou pan 

improving web service repositories semantic web techniques 
proceedings workshop semantic web enabled software engineering collocated th international semantic web conference iswc 
implementation details provided chapter describe visualisation techniques support ontology learning 
experiences direction published sabou 

visual support ontology learning experience report 
proceedings th international conference information visualisation iv london uk 
visualization conducted cooperation support fluit 
cooperation resulted book chapters published prior adapting visualization support ontology learning fluit 
part context related chapter semantic web services chapter provide brief semantic web services supporting semantic web web services technology 
give examples technologies concrete example scenario showing enhance information access integration 
conclude chapter list requirements web service ontologies fulfill 
parts chapter authored materials article online journal stuckenschmidt white owl martin workshop owl martin 
changing world wide web world wide web novel technologies extend semantic web web services semantic web services address data access integration issues 
chapter briefly introduce technologies showing advantages brings example scenario 
scenario consists task finding certified pharmacy mile range location identified zip code 
world wide web emerged solution information management problem cern research institute facing late nineties berners lee 
data intensive research activity performed cern produced increasing amount digital data projects researchers software distributed network computers running different operating systems particular incompatible data formats 
finding integrating distributed heterogeneous data increasingly difficult 
web distributed hypertext system allowed access heterogeneous data sources set standards describing data html localizing documents network uri accessing 
due simplicity html allowed creation web pages minimum effort web tremendous success relatively short time 
prototype web written web expended fast world american health insurance program 
www cern ch semantic web services wide web consortium created number web sites servers increased rapid pace web sites march example scenario 
web information needed performing example task list details available printed format digital format isolated different computers 
web information available search 
vast range medical information available online disease drug descriptions homepages medical institutions hospitals health insurance programs 
takes looking web page estimating distance zip codes 
problems world wide web 
accelerated growth web finding right information increasingly difficult support search engines google 
current search technology relies keyword search 
techniques provide relatively high recall web sites mention keyword retrieved low semantic recall pages desired topic containing keywords ignored 
precision low retrieved pages contain information user needs 
result complex queries certified pharmacy mile hard answer specific information available web available take different syntactic forms 
generic query certified pharmacy retrieves half hits keywords appear spread document 
trying refine query enforcing keywords appear order results hits answers quest 
major cause inefficiencies keyword search keywords treated strings meaningful entities 
technique deal complexity human language phenomena synonymy polysemy changing world wide web 
response limitations web encountered revolutionary changes depicted 
semantic web community aims semantic extension current syntactic web augmenting existing web information logics formal descriptions meaning 
semantic markup machine processable allow easier access integration vast amount available information achieved keyword search 
second web changing collection static web pages dynamic environment advent web services technology software components accessible web protocols 
semantic web services technology developed cross road technologies applying semantic web techniques web services 
rest chapter briefly technologies 
semantic web goal semantic web solve current limitations web augmenting web information formal machine processable representation meaning 
direct benefit machine processable semantics enhance see www org talks styles images timeline pdf timeline web development 
news com 
semantic web semantic syntactic semantic web rdf owl traditional web uri html static semantic web services annotation annotation functionality changing web 
web services uddi wsdl soap dynamic ment automation information management tasks search data integration 
idea applying knowledge representation reasoning techniques context web investigated mid nineties notably shoe simple html ontology extensions luke ontobroker fensel 
semantic web term clearly associated line research defined semantic web extension current web information defined meaning better enabling computers people cooperation berners lee different approaches realizing semantic web 
approaches distinguished type data sources consider semantic description richness semantic annotation 
approach reflecting principles gofai old fashioned ai aims extensively capturing meaning textual data sources rich semantic descriptions 
unfortunately research information retrieval community shown formally representing information contained textual documents bad idea content simply recoded general way 
success community relied developing lightweight techniques require complete understanding document content 
focus semantic web community gradually shifted initial approach 
alternative gofai approach decreasing complexity semantic annotations added textual documents 
achieved semantic web languages low semantic expressiveness xml 
kind lightweight annotations successfully natural language processing field capture aspects analyzed corpora 
looking evolution semantic web applications semantic web technology mainly relied limited semantic information semantic languages low expressivity xml rdf 
current focus semantic web research directed sup semantic web services porting intelligent data exchange 
case information annotated unstructured text semi structured information available databases exchanged web services 
annotations extended different information artifacts images music web services 
role semantic annotations support merging integrating exchanging data applications organizations 
approach considerably different original gofai view semantic web brings enormous challenges promises immediate practical benefits 
content thesis line third view semantic web goal access textual documents facilitate annotation web services allow intelligent data manipulation 
defined meaning information provided semantic descriptions referred metadata data data 
characteristics specific semantic metadata 
metadata describes information terms domain vocabulary meaning specified formal domain model ontology 
second metadata expressed representation language parsed interpreted machines 
briefly describe ontologies ontology languages follows 
ontologies term ontology originating philosophy detailed smith welty adopted ai researchers describe formal domain models 
ontology definitions provided decades 
frequently cited definition gruber ontology explicit specification conceptualization 
words ontology domain model conceptualization explicitly described specified 
borst defines ontology formal specification shared conceptualization borst 
definition requires addition gruber definition conceptualization express shared view parties consensus individual view 
conceptualization expressed machine readable format formal 
studer 
studer merge definitions stating ontology formal explicit specification shared conceptualization consensual domain models primary role ontologies enhance communication humans establishing shared vocabulary explaining meaning shared terms reach consensus 
formal models ontologies represent knowledge computer processable format enhancing communication humans computer programs computer programs 
ontologies investigated research fields context diverse application areas 
guarino offers extensive list research fields recognized time importance ontologies guarino ranging knowledge engineering information retrieval integration 
years mcguinness reports ontologies web related tasks web site organization navigational support browsing searching mcguinness 
example scenario 
demonstrate benefits ontological descriptions task built ontology specifies set concepts related health care providers see 
concepts pharmacy denote main entities domain conceptualized 
set relations 
semantic web ontology instances product medicine pharmacy medicine aspirin legend concept relation instance hospital isa relation zipcode instanceof relation inferred relation example ontology ontology instances 
established concepts 
important relation isa relation indicates subsumption concepts 
example ontology specifies kinds concepts subclasses 
restrictions imposed properties property restriction frequently mechanism defining subclasses 
example pharmacy sells hospital differ pharmacy kind offered products services 
pharmacy web pages semantically described concepts defined ontology 
example data instances describe certified sells aspirin medicine 
semantic descriptions enhance information access integrating 
different syntactic forms encoded semantic information overcoming limitations keyword search 
second ontology explains relations concepts machine understandable formal way computer perform reasoning 
example automatically deduce classified pharmacy fulfills restriction sells certified program 
semantic data helps enhance automate task 
studer definition studer states major ontology characteristics considerable variations exist dimensions defined characteristics 
semantic web technology implicitly relies ontologies different levels detail generality captured conceptualization 
briefly discuss characteristics purpose classifying ontologies thesis 
note adopt intuitive rigorous attitude discussion 
general agreement major characteristics ontology level generality specified conceptualization debate defining different categories generality guarino van heijst semantic web services guarino studer 
purpose debate differences views adopt intuitive classes generality 
foundational top level ontologies conceptualizations contain specifications domain problem independent concepts relations space time matter formal principles derived linguistics philosophy mathematics 
thesis dolce foundational ontology 
examples top level ontologies discussed compared borgo suggested upper merged ontology pease basic formal ontology smith 
generic ontologies contain generic knowledge certain domain medicine biology mathematics web services 
domain concepts specified terms top level concepts inheriting general theories top level concepts 
thesis owl martin ontology specifies set concepts allow describing web services 
domain ontologies lowest reusability specific particular domain 
detail heavyweight lightweight ws domain ontology owl dolce domain generic toplevel generality example ontologies classified dimensions 
second classification criterion level detail specification guarino mcguinness uschold jasper 
thesis adopt terminology introduced corcho distinguish weak rich domain theories 
lightweight ontologies domain models include taxonomic hierarchy properties concepts 
heavyweight ontologies contain axioms constraints 
note distinction lightweight heavyweight ontologies blurred intuitive fixed measures 
thesis worked types ontologies depicted lightweight domain ontologies automatically learned heavyweight generic ontology owl contains couple restrictions relatively poor ontological perspective heavyweight foundational ontology dolce 
www org 
web services ontology languages semantic web ontologies explicitly specified formal language 
performed thesis relied rdf owl languages 
rdf 
rdf rdf schema represented step web ontology language 
rdf data model allowing describe resources web 
rdf schema rdf allows definition basic ontology elements classes hierarchy properties domain range hierarchy mcbride 
rdf suited expressing lightweight ontologies 
tools developed rdf considerable number semantic web applications language expressive ontology language developed 
owl class rdf id rdfs subclassof owl restriction owl onproperty owl objectproperty rdf id owl onproperty owl hasvalue rdf id owl hasvalue owl restriction rdfs subclassof rdfs subclassof owl class rdf id rdfs subclassof owl class owl class rdf id owl 
example shows owl declaration concept certified web ontology language owl expressive ontology language rdf 
basis developing owl daml oil language originated merging language proposals aimed overcoming expressivity limitations rdf daml ont oil horrocks 
owl enhances expressivity rdf providing means describe relations classes disjointness union intersection cardinality value restrictions properties cardinality universal existential quantifiers property characteristics transitivity symmetry equality 
owl provides constructs encode ontological knowledge previous subsection xml syntax 
web services spectacular growth web dynamic advent web service technology 
web service ws self contained software component www org rdf serialization generated protege owl plugin protege stanford edu plugins owl 
web ont working group web site www org sw 
www daml org daml ont html www ontoknowledge org oil semantic web services allows access functionality web interface 
wss communicate employing established protocols message transport encoding 
web services architecture working group defines web service software application identified uri interfaces bindings capable defined described discovered xml artifacts 
web service supports direct interactions software agents xml messages exchanged internet protocols xml web service tasks publication discovery uddi composition bpel ws service description wsdl message exchange soap transport layer ftp smtp overview web service standards 
web service technology introduced new abstraction layer radically new architecture software 
innovative vision employing set xml standards define describe web service functionalities tasks discovery composition services facilitated automated extent 
web service technology aims facilitate interaction different web services software programs enforcing xml standards data exchange 
note kind data exchanged web services semi structured textual structured long embedded xml messaging protocol 
adapted de aalst shows main web service technology standards xml 
web service interface described web service description language wsdl 
web services exchange messages encoded soap simple object access protocol messaging framework transported internet protocols 
tasks performed web services 
typical web service life cycle envisions scenario 
service provider publishes wsdl description service uddi registry permits universal description discovery integration web services 
subsequently service requesters inspect uddi locate discover web services interest 
information provided wsdl description directly invoke corresponding web service 
web services composed achieve complex functionality 
compositions services specified bpel ws busi www org tr wsdl www org tr soap www uddi org ftp www software ibm com software developer library ws bpel pdf 
web services ness process execution language web services 
relying standards web services hide implementation details increasing cross language cross platform interoperability 
example scenario 
web services allow access large databases permitting controlled access information explicitly stated web pages 
example pharmacy finding process repeated zip code health care provider relying output web services data provided static web pages 
web service generalize task web service retrieve details suppliers zip code city name types supplies provided 
service porttype op zip op city op description example shows schematic representation wsdl file associated service wsdl considerable support industry increasing tool support wsdl generators editors 
xml language machine processable structured standardized way describe web interfaces services 
wsdl service seen collection network endpoints operate messages 
example service provides port 
port groups operations return lists suppliers details zip code city name description supplied material 
operation input output message 
message name set parts certain type 
parts represent input output parameters depending declared input output message 
brevity example state name message name parts 
type parts xmlschema data type previously defined complex type type parts omitted schematic description 
wsdl document major parts 
interface service specifies data types messages corresponding operations refer previously defined messages 
second implementation part binds interface concrete network protocols message formats soap 
limitations web service technology 
soap wsdl uddi bpel ws standard combination technology build web service application 
fail achieve goals automation interoperability require humans loop lassila 
wsdl specifies functionality service syntactic level 
descriptions automatically parsed wsdl description service available www net wsdl 
schematic representation wsdl files xml syntax wsdl verbose reproduced 
semantic web services invoked machines interpretation meaning left human programmer 
support reliable large scale interconnectivity web services software semantics needed include properties capabilities interfaces effects service de aalst 
semantic web services semantic web community addressed limitations current web service technology augmenting service descriptions semantic layer order achieve automatic discovery composition monitoring execution mcilraith martin stuckenschmidt 
automation tasks highly desirable result research projects adopted semantic web service technology different application domains bioinformatics grid wroe problem solving methods motta 
supplier type location find medical supplier list suppliers compute distance closest supplier workflow finding closest medical supplier 
example scenario 
example task specialization generic task finding closest medical provider generic task finding provider domain 
strategies performing generic task retrieve details medical providers certain type selecting closest computing distance location provider location 
workflow schematically represented 
example task populate workflow service web service calculates distance zip codes 
semantic web service technology aims automate performing tasks semantic description web services 
descriptions right services selected combined way solve task hand 
major approaches web service composition 
specification start final state pre post condition reasoning performed select combine right services 
second parametric design paradigm generic task workflows formally specified populated right web services depending task hand 

semantic web services common characteristic emerging frameworks semantic web service descriptions owl martin wsmo irs motta see overview comparison combine kinds ontologies obtain service description 
generic web service ontology owl specifies generic web service concepts input output prescribes backbone semantic web service description 
second domain ontology specifies knowledge domain web service types service parameters city functionalities fills generic framework 
discuss kinds ontologies subsections 
generic web service ontologies generic ontologies web service descriptions development 
daml ontology permits describing aspects web service 
daml translated daml owl renamed owl 
second initiative wsmo web service modelling ontology overlaps owl different principles brings additions owl see lara detailed analysis ontologies 
research thesis performed transition period daml owl 
period wsmo initiative started 
thesis consider owl 
believe results third part thesis equally applicable wsmo 
elaborate generality section 
owl service ontology 
note arrows picture directed owl model direction seam counterintuitive 
owl ontology conceptually divided sub ontologies specifying service profile service works process service implemented grounding 
fourth ontology service contains service concept links serviceprofile servicemodel concept see 
service presents serviceprofile described servicemodel supports 
concepts specialized profile process grounding ontologies respectively 
rest subsection explain parts owl describing www wsmo org www daml org services owl profile owl www daml org services owl process owl www daml org services owl grounding owl www daml org services owl service owl semantic web services example service 
introduce schematic service representations thesis 

profile ontology specifies functionality offered service semantic type inputs outputs city supplier details service provider service parameters quality rating geographic radius 
description discovering service 
central concept ontology profile subclass serviceprofile 
schematic representation semantic web service descriptions thesis profile instance depict process describes indicated relation functional characteristics inputs outputs preconditions effects referred type 
example service presents profiles offers distinct functionalities 
profile semantic type described functionality concepts supply 
profile describes process specified process model 
profiles return output described concept 
input type varies profile zipcode city 
note description constructed concepts defined web service domain ontology section 
service profile zipcode profile city profile 


process ontology 
complex services consist smaller services executed certain order 
example buying book amazon com involves browsing service selects book paying service 
owl allows describing internal process models 
useful purposes 
check business process offering service appropriate product selection happen payment 
second monitor execution stage service 
third process models automatically compose web services 
servicemodel concept describes internal working service specialized concept process ontology 
process model single process atomic simple composite composed atomic processes various control constructs 
process set notation service represent process 
process depict type involved control constructs types 
service allows choice corresponding profiles consists modelled choice control construct 
service profile 

semantic web services choice atomicprocess zipcode atomicprocess city atomicprocess 
profile process bridge 
profile contains links process 
shows links terms bold face belong profile ontology rest process ontology 
firstly profile states process describes unique process 
secondly input outputs preconditions effects profile correspond degree process 
understanding correspondence trivial fact play different roles profile process 
profile ontology treated equally parameters profile subproperties profile parameter property 
process ontology inputs outputs regarded subproperties process parameter property 
preconditions effects just simple properties process 
technically properties profile process fact treated differently conceptual level misleading 
link profile process part daml descriptions created property domain ranges process 
parameter input output process profile process precondition owl profile effect parameter thing owl process input output profile process bridge 
precondition effect condition 
grounding ontology provides vocabulary link conceptual description service specified profile process actual implementation details semantic web services message exchange formats network protocols 
grounding wsdl description performed rules 
atomicprocess corresponds wsdl operation 

consequence rule input atomicprocess mapped corresponding message part input message wsdl operation 
similarly outputs output atomicprocess mapped corresponding message part output message wsdl operation 

type wsdl message part specified terms owl parameter xml schema data type owl concept 
grounding ontology specializes contains set elements grounding atomic processes specified 
notation depict atomic process grounding showing link atomic process corresponding wsdl element 
service atomic process processes 
service profile 

gr op gr op gr op finish subsection describing set design principles underlying owl identified ontology 

semantic vs syntactic descriptions 
owl differentiates semantic syntactic aspects described entity 
profile process ontologies allow semantic description web service wsdl description encodes syntactic aspects names operations parameters 
grounding ontology provides mapping semantic syntactic parts description facilitating flexible associations 
example certain semantic description mapped syntactic descriptions semantic functionality accessible different ways 
way certain syntactic description mapped different conceptual interpretations offering different views service 

generic vs domain knowledge 
owl offers core set primitives specify type web service 
descriptions enriched domain knowledge specified separate domain ontology 
modelling choice allows core set primitives domains 

modularity 
feature owl partitioning description concepts 
best demonstration way different aspects description partitioned concepts 
result service instance 
semantic web services relate instances containing particular aspect service 
advantages modular modelling 
description split instances easy reuse certain parts 
example reuse profile description certain service 
second service specification flexible possible specify part relevant service implementation need servicemodel 
owl description easy extend specializing owl concepts 
web service domain ontologies externally defined knowledge plays major role owl description 
owl offers generic framework describe service truly useful domain knowledge required 
example domain knowledge define type functionality service offers types parameters 
datastructure zipcode product medicine hospital pharmacy city functionality web service domain ontology 
depicts hierarchical structure domain ontology describe example web service 
note specifies datastructure hierarchy consisting concepts discussed subsection functionality hierarchy 
functionality hierarchy contains classification service capabilities 
generic classes service capabilities shown finding medical supplier calculating distances locations 
generic categories specialized capabilities restricting type output parameters find providers input parameters zipcode city 
complexity reasoning tasks performed semantic web service descriptions conditioned factors 
web services domain concepts small number coupled domain ontology descriptions 
issue ontology mapping solved semantic web services difficult problem 
requires domain ontologies broad provide needed concepts web service certain domain 
second richness available knowledge crucial performing complex reasoning 
example scenario 
semantic web service descriptions example task generalized automated 
right services needed perform task selected automatically collection services 
semantic metadata allows flexible selection retrieve services partially match request potentially interesting 
example service finds details medical suppliers considered match request services retrieve details suppliers web service domain ontology specifies type 
note matchmaking superior keyword search offered uddi 
composition services complex service automated 
discovered composed semantic descriptions services invoked solve task hand 
material chapter far briefly described exemplified technologies understood thesis 
section conclude explain number requirements ontologies semantic web service descriptions fulfill 
requirements investigated thesis 
requirements web service ontologies goal thesis enhance web service ontologies process building 
achieve goal need understand requirements ontologies fulfill 
unfortunately little directed defining requirements 
aware described lara grosof 
papers list set functional requirements web service activities supported ignore qualitative requirements ontologies fulfill 
state set requirements experience working semantic web services 
note requirements aim complement set requirements identified community far 
requirements generic web service ontologies role generic web service ontologies capture domain independent aspects web services 
ontologies richly axiomatized heavyweight ontologies facilitate creating formal descriptions reasoned automatic means 
generic ontologies designed maintained committee experts usually cooperate virtual means 
user base ontologies considerably larger committee maintains 
observations users brought knowledge committee analyzed case incorporated versions standards 
consider requirements fulfilled generic web service ontologies john domingue observations lead clarifying descriptions requirements 

requirements web service ontologies modelling expressiveness 
generic web service ontologies model wide range services different domains 
requirement ontologies scale cover large variety heterogeneous services allowing modelling different types services 
clear semantics rich formalization 
semantic web service descriptions aim enable complex reasoning tasks involving multiple software agents 
important intended meaning descriptions interpreted unambiguous way agents 
prerequisite goal semantics generic web service ontologies clearly formally specified 
rich formalization crucial clearly expressing semantics descriptions facilitating complex reasoning tasks 
adaptability 
important requirement models created generic ontologies easily reusable adaptable web services 
generic knowledge captured generic web service ontology reusable describe kinds software entities 
facilitate easy transition traditional software web services 
standards 
evolving generic web service ontologies owl wsmo irs ii objective employ different ontology frameworks specifying services 
point proposed standards meaning services described different frameworks 
lack hampers performing formal comparison different ontologies 
think long term proposed standards beneficial 
maturity level allow attempted proposed standards interoperable 
fact semantic web service technology aims complement enhance current technology important aware correspondence generic web service ontologies industrial web service standards wsdl oasis 
usability 
success generic ontology conditioned quality early adoption community 
factors contribute early adoption 
example supporting material usage examples modelling guidelines ensure ontology easy understand 
tool support important facilitate ontology 
maintainability created semantic models facet usability 
acknowledge natural tension requirements modelling expressiveness minimal ontological commitment usability 
order adopted wide community pressure standard minimal 
additionally useable defined concepts relations complex 
part thesis inspect owl initiative establishing generic web service ontology different perspectives determine requirements met 
offer solutions enhancing problematic aspects identify 
semantic web services requirements web service domain ontologies web service domain ontologies contain domain specific knowledge complete generic descriptions 
usually domain ontologies lightweight specifying important concepts functionality types domain note complex applications require complex domain ontologies experienced dip project 
generic ontologies domain ontologies employed web service descriptions usually developed single domain expert 
designer domain ontology uses ontology describe services 
identified requirements web service domain ontologies 
broad domain coverage 
desirable feature domain ontologies broad domain coverage 
ontologies contain concepts describe certain domain web services domain described ontology 
characteristic hard achieve due factors factors observed case studies chapter 
note broad domain coverage requirement require ontology heavyweight richly formalized ontology desirable 
ontology containing broad taxonomy terms axioms case domain ontologies web service descriptions broad domain coverage lightweight ontology 
scalability 
number existing web services domain increasing 
domains witnessed rapid increase hundreds services bioinformatics lord 
wide adoption technology web service repositories changing daily basis enriched dissimilar services 
situation requires domain ontologies scale cover large dynamically changing collections dissimilar services 
naturally achieving goal requires level automation ontology building process needs repeated regularly large collections services 
second part thesis describe semi automatically acquiring web service domain ontologies aims support domain engineers build domain ontologies large dynamically changing web service collections 
summary chapter briefly described novel web technologies showed enhance information access integration 
web vast amount digital data available search 
current keyword search techniques fail identify right pages query 
limited information explicitly stated static web pages able perform simple data processing 
limitations addressed technologies 
formal description meaning web pages created semantic web technology machine processable interpretable enhancing search data integration tasks compared keyword search 
second web services processing service dip semanticweb org 
summary computer programs dynamically accessible web interfaces 
consequence generic version task performed 
discovery integration web services needs done manually 
semantic web services overcome limitation semantically describing capabilities web services 
generic task models created automatically filled run time right web services 
description semantic web services technology identified set requirements web service ontologies fulfill 
observations constitute extended problem statement thesis goal enhance quality facilitate building process web service ontologies 
part thesis describe efforts enhance owl generic web service ontology 
second part detail automatic learning web service domain ontologies 
chapter related chapter identify briefly overview related 
goal thesis facilitate building ontologies web services acquiring software semantics general web service semantics particular relevant 
fields concerned acquisition ontologies describe software 
employ different ontology engineering methods 
hand methods relying generic ontological principles improve quality owl 
methods successfully contexts software description 
hand adapt ontology learning support quick acquisition web service domain ontologies 
acquisition semantic markup considered fundamental problem reaching vision semantic web uschold hendler 
semantic markup relies concepts provided ontologies subproblem acquiring ontologies place 
ontologies developed decades semantic web raises new challenges developing larger scale increased change rate van harmelen 
thesis investigate ontology acquisition problem special context web services 
obviously related body software engineering area acquiring software semantics see section 
methods exist dealing ontology acquisition 
methodologies exist prescribe major steps process building ontologies 
aim establishing methodology discuss topic chapter 
second suit methodologies relying extensive research fundamental philosophical linguistic mathematical principles enhance quality heavyweight ontologies 
methods detect explain correct frequent mistakes faults ontologies relying rigorously studied ontological principles 
describe methods section ontology learning field aims automatically derive lightweight ontologies existing data sources 
methods high relevance third research question discussed section 
point set problematic issues ontology related learning field section issues addressed described rest thesis 
acquisition software semantics semantic descriptions software components explored software engineering support tasks program understanding biggerstaff building software reuse libraries mili 
acquisition semantic descriptions critical stage hampered development semantic techniques 
example concluded major survey software reuse libraries mili sophisticated approaches exist build exploit software reuse libraries practice characterized ad hoc low tech methods practical semantically sophisticated methods 
methods emerged tried acquire semantics automatically 
approach automatically building software library maarek implemented guru tool 
approach analyzes natural language documentation software authors richer functional information source code explanatory comments code 
approach uses combination information retrieval clustering methods 
stage profile built analyzed document containing relevant terms define document 
second stage profiles clustered unsupervised hierarchical agglomerative clustering hac 
resulting hierarchy binary tree 
nodes hierarchy named impossible automatically predict right name 
automatically built library proved perform better terms precision compared system commercial tool relies lot manually encoded knowledge set software collection 
technique combined code analysis methods helm maarek 
attempt build term hierarchy reported mili 
ir techniques limited noun phrases corpus rely occurrence terms documents deduce semantic relations 
note approaches builds taxonomic structures 
remarkable derived semantics evaluated context concrete application topic currently development ontology learning field see chapter 
subtopic acquiring semantics software acquisition web service semantics 
creation semantic web service descriptions time consuming complex task automation desirable signaled researchers field example wroe 
task broken smaller tasks 
acquiring suitable web service domain ontology prerequisite creating semantic web service descriptions 
required create shared terminology semantic service descriptions 
second actual process annotating web services concepts provided domain ontology creating semantic descriptions performed 
knowledge research teams concentrate second task web service annotation 
hess kushmerick hess kushmerick hess employ naive bayes svm machine learning methods classify wsdl files 
formal ontology methods web forms manually defined task hierarchies 
patil 
patil employ graph similarity techniques select relevant domain ontology wsdl file collection ontologies 
annotate elements wsdl file concepts selected ontology 
teams existing domain ontologies acknowledge hampered lack ontologies 
second part thesis complementary address acquisition web service domain ontologies 
formal ontology methods successfully information systems ontologies provide clear semantics concepts rich formalization semantics 
requirements important area semantic web services ontological descriptions reasoning tasks 
existing ontologies fulfill requirements 
section overview shows highly general ontological notions successfully employed enhance quality ontologies 
ontoclean guarino welty methodology validating taxonomic relationships relies generic ontological notions essence identity unity 
ontoclean possible detect correct common modelling mistakes confusion subsumption instantiation confusion subsumption meronymy partof relations 
generically rely complex set generic principles enhance existing ontologies 
projects proved beneficial align existing ontologies foundational ontologies dolce capture generically valid ontological notions drawn philosophy linguistics mathematics 
example gangemi authors describe dolce ontology ontoclean methodology assessing quality wordnet top level category nouns 
perform direct mapping wordnet concepts concepts dolce apply rigidity properties introduced ontoclean 
methods problematic issues wordnet revealed 
confusion detected different ontological elements concepts individuals object meta level entities notably abstraction synset includes object level concepts set time space meta level concepts attribute relation 
discovered mixture level generality sibling synsets 
mapping resulted making concrete suggestions enhance wordnet 
example alignment provided borgo dolce process building manufacturing ontology 
alignment software related ontologies performed 
pioneered line performing alignment owl dolce 
alignment allowed validate improve quality owl see chapter 
ontology learning aim ontology learning methods semi automatically derive conceptual structures different types unstructured semi structured fully structured data 
fits category performed numerous disciplines computational related linguistics machine learning databases software engineering maedche staab 
term ontology learning coined response growing need automate ontology acquisition context semantic web research 
multidisciplinary field encompasses variety approaches 
aware extensive overviews existing approaches tools ontology learning maedche staab gomez perez 
chapter provide background necessary motivate choices position landscape research field 
ontology learning approaches important characteristic ontology learning approaches input data rely 
strong influence ontology learning method 
shortly describe ontology learning approaches grouped data structures 
rely classification provided gomez perez extend published survey finalized 
majority existing approaches learn ontology textual sources 
sub category text approaches approaches process machine readable dictionaries mrd derive conceptual structures jannink wiederhold rigau 
trend ontology learning leverage vast amount redundant data available web 
pioneer area cimiano learns subsumption hierarchies instanceof relations querying data available web cimiano 
large category text methods methods developed learning ontologies knowledge bases compton semistructured schemata relational schemata rubin 
deciding data sources appropriate learning web service ontologies considered possibilities 
resources connected underlying implementation service provide useful knowledge functionality web service web services simply web accessible software products 
source code textual documentation existing uml diagrams 
second web service specific data sources associated wsdl files activity logs 
major criterion choosing data source basis ontology learning method availability 
observed web services accompanied short textual description functionality helps user quickly understand service 
descriptions exist line web service repositories similarly javadoc style method descriptions offer short descriptions functionality software api documentation frequently available source code 
experimented textual web service functionality descriptions attached web services extracted underlying software documentation detailed chapters 
www net 
ontology learning methods text ontology learning variety methods developed learning ontologies textual sources 
significantly methods rely pattern techniques association rules maedche staab employ clustering methods faure nedellec 
approach adopted learning web service domain ontologies motivated observations textual sources attached web services contain valuable information building ontologies natural language specific way 
fact texts belong defined sublanguage grishman kittredge specialized form natural language see chapter details 
characteristics texts chose rely pattern techniques ontology learning 
pattern techniques widely natural language processing applications 
notably derive semantic relations large corpora 
pioneer direction research hearst introduced idea learning hyponymy relations lexico syntactic patterns hearst 
patterns defined lexical basic syntactic information pos tags 
allow extracting relations shallow text processing 
example hyponymy relationship suggested broken bones injuries extracted np np np pattern hearst 
follow charniak developed set lexico syntactic patterns identify meronymy partof relations charniak 
cases identified semantic relations enlarge wordnet 
naturally patterns clear relevance ontology learning 
patterns cimiano cimiano came leon tool incorporates generic patterns french language gilles gilles 
generic patterns general corpora fail small domain specific corpora 
cases domain tailored patterns provide better performance gilles 
domain tailored patterns enlarge extraction corpora 
example world wide web data pattern learning cimiano 
ontology learning approaches pattern extraction just step complex process faure nedellec buitelaar 
cases patterns identify potentially interesting terms corpus processing steps derive relevant semantic structures terms 
ontology learning tools major survey ontology learning performed research started identified tools learning ontologies textual sources gomez perez 
tools implement variety methods clustering techniques asium faure nedellec mo workbench bisson pattern techniques gilles 
goal reuse existing ontology learning methods context web services wanted experiment tools 
tools available download research 
useful 
related maedche staab ontology learning workbench offering suite algorithms combined build ontology 
particular workbench offers modules identifying important concepts learning taxonomic relations extracting generic binary relations association rules 
learned ontology visually schema visualization technique 
able experiment basic algorithms 
particularities corpus lead suboptimal performance implemented methods 
major problems corpus employed sublanguage specific software documentation different generic texts 
finding prompted implement modified versions algorithms 
source code support developers provided valuable help starting research 
research tools developed 
predecessors tools aim ontology learning easier adapt novice users 
buitelaar protege noy plugin allows quick extraction domain ontologies set mapping rules defined terms xpath queries xml linguistic annotations 
currently tool comes readily defined mappings 
allows learning taxonomic relations noun phrase information 
second mapping extracts slots 
mapping predicate slot having domain subject range object 
mappings built depending needs user 
extracted ontology protege environment 
learned structure concept slot contains detailed information regarding provenance parts corpus identified rule led identification 
text cimiano voelker successor offering extended set ontology learning algorithms 
text brings enhancements predecessor 
relies probabilistic ontology model pom allows combining results different processing algorithms representing probabilities learned structures 
second probabilistic model improved user interface built 
learned constructs listed ordered probability correct represented graph visualisation component 
advantage pom traceability extraction learned structure stored set pointers parts corpus extracted 
text implements data driven change discovery mechanism allows updating ontology model changes underlying data having perform extraction scratch 
efficiency allows user trace evolution ontology changes underlying data 
major issues ontology learning growth semantic web ontologies needed various domains 
increases demand ontology learning solutions new different domains 
sourceforge net projects www com olp dfki de htm protege stanford edu org projects text 
ontology learning example context web services new application domain ontology learning 
specialized domain characteristics corpora special characteristics 
corpora describe knowledge available specialized domain exhibit strong characteristics 
natural language specific way sublanguage 
case domain web services see subsection 
clear requirements output learning method 
restricted domain clear kind knowledge needed extracted corpus 
knowledge specialized semantic structure extracted generic algorithms 
example case web services know domain concepts functionality hierarchies need learned see subsection 
novelty existing algorithms consider verbs usually denote functionality candidates concepts 
non nlp expert developers users 
domain experts ontology learning tools need develop domain seldom experts ontology engineering nlp 
characteristics broaden field research ontology learning topics adaptability 
special characteristics analyzed corpora restricted domains clear requirements knowledge extracted require adaptation existing ontology learning methods 
need adaptation addressed offers generic framework defining pattern extraction rules specialized domains 
believe order meet requirements non expert ontology learning solution developers toolkits easily adaptable combinable methods needed guidelines implement domain tailored ontology learning solution 
discuss adapted ontology learning techniques context web services chapter 
evaluation 
evaluation remains important issue ontology learning general 
fact different methodologies developed hard provide joint evaluation metrics benchmarks 
problematic case specialized domains corpora collected clear gold standards baseline comparison 
overview existing evaluation practices served basis developing evaluation scheme described chapter 
usability 
ontology learning essentially knowledge transfer processes domain knowledge perceived humans formal models reasoned computers 
ontology learning methods involve multiple stages 
topically extract terms document corpus combine transform ontology elements concepts 
essential development ontology learning tool knowledge structures involved processes relations easily understood human users 
important enhance usability ontology learning tools 
briefly efforts direction chapter 
related summary chapter provided brief overview research fields relevant 
field software engineering described efforts automatically acquiring semantic description software components 
knowledge efforts addressed building ontology set software components 
automating task especially important context semantic web services domain ontologies play major role 
field ontological engineering looked methods ontological principles aim enhance quality existing ontologies ontology learning methods aim bootstrap ontology learning automatically learning lightweight ontologies 
ontological methods direct applicability enhancing quality generic web service ontologies 
methods applied domain software descriptions 
ontology learning employed support building domain ontologies 
ontology learning methods adapted context web services discussed second part thesis 
part ii enhancing generic web service ontologies chapter improving daml chapter stated wide scale adoption generic web service ontology conditioned expressiveness allows modelling wide range services usability modelling guidelines examples provided learning ontology 
chapter investigate daml perspectives reporting experiences modelling set increasingly complex services 
daml low expressiveness usability 
contribution enhance aspects daml 
identify set modelling limitations offer solutions eliminating extending expressiveness ontology 
second offer set modelling examples guidelines help take ontology community 
material chapter published part workshop services semantic web held conjunction twelfth international world wide web conference sabou second international semantic web conference richards sabou 
generic web service ontology describe web services independently domain 
factors key wide scale adoption ontology 
expressive allow modelling wide range services 
second examples marked services modelling guidelines exist support easy learning ontology 
start research daml weakly documented low usability 
daml growing de facto standard semantic web service markup complete service descriptions papers discussing technical issues markup process 
preliminary literature study yielded types reported usage daml 
daml coalition complete fictitious examples daml site concrete applications paolucci provided 
second projects certain parts daml ontology matchmaking research focused profile ontology cardoso sheth 
third extended parts daml enriched process ontology wroe improving daml extended profile ontology bio informatics related properties lopes extended specification conditions 
papers mentioned complete daml gave details experiences 
common referenced papers described process writing daml markup 
concerned little daml markup pointed actual services 
conditions considerable effort get started daml example markup guidelines modelling practices completely absent 
sought fill gap providing set complete real web service descriptions sharing modelling experiences 
result exercise twofold 
concluded daml limited expressiveness encountered difficulties modelling simple web services 
observations proposed solutions brought knowledge daml committee partly implemented 
second marked services considerations markup accessible research community order ease adoption new ontology 
start chapter describing application provided set example services section 
describe modelling experiences increasingly complex services sections 
conclude section summarizing discussing set emerging noteworthy issues 
web services described set services developed context sw vu project uses semantic web technology build portal scientific publications bibtex files 
table summarizes services depicts typical invocation pattern 
files duplicates bib rdf web services building bibliography portals invocation workflow 
main invocation steps services versions 
services available athttp www cs vu nl marta services 
www cs vu nl sw vu 
web services step data translation 
available bibtex file converted rdf bib rdf service saved web accessible rdf repository query engine sesame broekstra service 
step duplicate detection 
merger available data results redundancies different owners bibliographies syntactically different resources denote author 
daml encode redundancies extended sesame reasoning capabilities interpret new tag 
sia service provides automated support task finding resources referring person 
machine learning techniques rdf source sia extracts resources refer person returns tuples similar resources 
second step extract data sesame service send sia obtain redundancy file save back sesame service 
step display creation 
portal creator software creates portals publications querying sesame 
web service functionality bib rdf file conversion service takes file bibtex format outputs file rdf format 
file import service takes file rdf format adds specified public private repository sesame 
file export service extracts data specified public private repository sesame outputs data rdf formats 
sia utility service reads rdf file adds daml tag duplicate names 
ai dis service takes contents sesame repository displays web portal 
table overview services functionality 
web services combined differently depending available input data user requirements 
example data files provided rdf need perform bib rdf translation 
different formats corresponding translator invoked 
data originates single data source duplicate detection step needed anymore 
data available sesame repository storage performed 
semantic web service technology aims automating adaptive service composition reasoning service requirements descriptions 
wished www org improving daml technology order automate portal creation task 
semantically annotated web services daml 
descriptions reasoned agent factory design service brazier wijngaards order prescribe optimal composition depending input output requirements 
details agent factory task interested reader referred richards van 
report experiences creating daml markup services bib rdf sia sesame 
modelling simple service bib rdf service described daml bib rdf bib rdf simple service transforms bibtex file rdf representation 
service takes input url bibtex file returns rdf encoding data 
despite simplicity service modelling daml lead discover severe inconsistency serviceprofile servicemodel parts description 
section described mapping parameters service profile servicemodel 
aspects mapping 
expect profile parameters certain type refer process parameters type 
enforced 
current specification easily link parameters different types profile input process output 
second process ontology model preconditions effects subproperties process inconsistent entities type values profile 
preconditions effects defined profile refer corresponding preconditions effects process included range 
daml coalition acknowledges possibility inconsistencies profile process discovered point daml services coalition 
matchmaking profile description break may occur attempted usage service 
rationale design decision clear 
conclude link distinct levels specification corrected explicit 
solution 
solution issue included owl owl developed author participation coalition 
new solution offers simplified modelling see schematic representation schema describing offered process ontology 
profile ontology definitions set properties 
rationale modelling profile process parts description refer input conditional output precondition conditional effect instances set declared profile subset declared process 
solution avoid duplicating definition instances models 
models point instances problem correctly mapping set profile set process circumvented 
www cs vu nl marta services bib rdf bib daml releases owl solution extended new notions 
conditional means existence output effect depends condition fulfilled 

modelling service multiple interfaces sia process ontology models concepts properties 
profile process instances refer set properties 
note unintuitive initial modelling profile linked process property profile ranged properties process properties eliminated 
conceptual difference inputs outputs hand preconditions effects maintained current modelling 
distinction results different views functionality service 
hand functionality service regarded information transformation process defined input output parameters 
hand describe world state change provoked execution service useful define preconditions world states fulfilled execution effects world states execution service 
rationale inputs outputs grouped parameter concept 
profile owl profile owl process process parameter input precondition process new way model profile process bridge 
modelling service multiple interfaces sia sia service essentially simple bib rdf service acts rdf file determines resources possibly point physical person returns rdf file tuples equivalent resources 
element complexity service acquire rdf source multiple ways read improving daml ing url accepting data string reading data sesame repository name repository log information 
intuitively situation similar specific kind ad hoc polymorphism overloading certain method allows different signatures essentially executes function 
sia service performs function duplicate detection independently set parameters invoked 
available documentation daml provided little guidance model situation 
coalition members considered problem supporting multiple interfaces offered solution situation number arguments order data types may differ type polymorphism 
offered solution define higher level concept covers possible alternative data types 
approach address problem different number arguments 
simple solution problem treat alternative interface separate service 
rejected solution conceptual practical reuse reasons 
conceptual level describing service 
separate services daml provide way identifying fact service 
knowing service description related fact identical may important comes choosing services 
practical point view marking service time consuming having perform activity possible interface 
reuse point view wanted share reuse possible alternative ways accessing service 
order provide semantics allow intelligent matchmaking handle interfaces different data types number parameters tried number alternatives 
variant sia top design starting service model working service grounding 
due problems faced sia second variant sia bottom approach starting wsdl definition 
sia clarified daml view service primarily defined ios effects 
developed sia support new view service composite process involving data readers translators atomic process 
descriptions valid solutions conceptually wrong impossible specify daml wsdl 
final design sia compromise provided valid solution completely represent conceptual model service 
involved significant repetition descriptions 
variants detail discussion rationale choices design 
schematic description variant provided clarify discussion 
top design sia effect service altered way rdf file provided intuition model single service differentiation ways accessing grounding level 
adopted modelling sia profile pr process level described service accepting rdffile producing rdffile 
wsdl representation service consists port operations op op op differ input www cs vu nl marta services sia sia service daml 
modelling service multiple interfaces sia messages 
expects url second string third receives sesame related parameters server url password login repository name 
service sia profile pr rdffile rdffile atomicprocess rdffile rdffile gr op gr op gr op 
wsdl service porttype sia op url stream op string stream op url pse ln rep stream specifying op op easy 
third grounding realized impossible build mapping single input process parameters wsdl operation op daml wsdl mapping states atomic process input output corresponds wsdl message part 
daml coalition acknowledges possible limitation give concrete example problematic scenario 
example shows assumption prohibits modelling ad hoc polymorphism 
encourage revision 
partial solution 
new version daml restrictive solve issue 
possibility defining xslt transformations process parameters wsdl message parts 
case inputs multiple input parameters mapped single wsdl message part 
solve particular problem need map input parameter rdffile multiple message parts url pse ln rep 
bottom modelling sia sia changed strategy bottom modelling sia structure wsdl file modelled single input just parameters needed sesame repository data source 
model excluded grounding problem new issues emerged 
issue relates distribution processes servicemodel instances 
previously decided model single service 
service servicemodel maxcardinality 
processes part single servicemodel 
servicemodel accommodate single process type atomic simple composite process process property exact cardinality 
requires combination atomic processes composite 
process choice control construct closest needs expresses process chosen execution 
modelled composite process cp choice atomic processes included single servicemodel entity 
www cs vu nl marta services sia sia service daml improving daml second issue relates profile 
keeping profile previous example technically correct link input output profile io process parameters referenced profile 
means advertised service expose ability read data directly sesame 
adding parameters profile solution specify parameters relate 
misleading matchmaking 
decided create profile instances pr generically describes io maps pr reflects parameters 
service generic process sesame process 
service sia profile pr rdffile rdffile profile pr server url psw ln rdffile cp choice atomicprocess rdffile rdffile atomicprocess server url psw ln rdffile gr op gr op gr op wsdl sia design constraints imposed daml model 
correspondence io pe modelling levels profile process grounding directly imposed sake consistency 
second defines service effect signature 
approach sia sia conceptually inconsistent daml view provide different profile different ways access service 
profiles provide meaning new view means define service considered model observation service combination processes translator process different data acquisition processes 
composite process approach sia modelled sia having complex 
consider service offers cp cp cp combined global cp 
processes sequence dr translator process 
service profiles pr pr pr describing composite processes 
wsdl file 
service sia profile pr cp url rdffile profile pr cp rdffile profile pr cp server url psw ln rdffile cp choice www cs vu nl marta services sia sia service daml 
modelling service multiple interfaces sia cp sequence atomicprocess dr url rdffile atomicprocess rdffile rdffile cp sequence atomicprocess dr rdffile atomicprocess rdffile rdffile cp sequence atomicprocess dr server url psw ln rdffile atomicprocess rdffile rdffile gr cp op 
gr cp op 
gr cp op 
wsdl sia encountered new grounding problem 
conceptually composite process corresponds wsdl operation inputs inputs wsdl operation output translator corresponds output wsdl operation 
assumption existing mapping states single atomic process corresponds single wsdl operation 
perform mapping composite process wsdl operation 
daml coalition acknowledges possible limitation skeptic importance relaxing assumption daml services coalition 
example shows assumption prohibits modelling complex internal structure directly reflected web interface service 
see serious limitation conceptual modelling 
alternative solution 
members daml coalition indicated alternative solution issue mapping composite processes wsdl operations 
mapping done concept mediates atomicprocess 
precisely correlated instance property 
instance linked property atomicprocess grounded corresponding wsdl operation 
unfortunately existing material daml time investigations contain guidelines explanations reveal role construct particular problem 
final model sia experiences aware limitations daml final model reflected sia model single service different profiles pr pr pr describing different functionalities service 
service single containing composite process cp 
indicates service perform possible atomic processes 
map www cs vu nl marta services sia sia service daml improving daml atomic processes wsdl operation 
essentially sia give conceptual complex internal model processes able map wsdl operations 
description similar sia reflects dealing different signatures just 
service sia profile pr url rdffile profile pr rdffile profile pr server url psw ln rdffile cp choice atomicprocess rdffile atomicprocess rdffile rdffile atomicprocess server url psw ln rdffile gr op gr op gr op wsdl sia concluding section completely satisfied final model unable model processes composite processes feel better reflects structure service 
concerned amount effort involved providing maintaining large set descriptions 
service superclass level definition appropriate conceptually document smallest 
amount repetition exists profile grounding documents considerable 
course cut pasting reduce initial effort defining concepts document pointing reduce maintenance overheads 
verbosity approach somewhat excessive 
greatest concern final compromise unsure model consistent model developed team represent service 
feel semantics added meaningful useful way greater direction precision provided ontology uncertainty minimal 
modelling complex service sesame complex service sw vu project sesame 
service presents modelling issues addressed research surface modelling services expose functionality semantic web tools 
daml describe services variety application domains 
described services fictitious examples offered daml site just services demonstrating solutions complex tasks composition matchmaking lei horrocks 
different communities started experiment describing real life services merging agent technology daml gibbins richards 
important developments 
modelling complex service sesame reported field bioinformatics wroe 
wishing describe mathematical services medina concludes daml offers base 
commerce services described currency converter description amazon surprisingly semantic web tools described semantically semantic web services exist 
ontology storage facilities sesame validators annotation tools address lack entire daml ontology wsdl describe typical semantic web tool sesame sesame exhibits set characteristics previously discussed particular group services modelling non trivial 
modular architecture composed independent components arbitrary combinations fulfill certain tasks 
contrast web services described date modular defined flow model components usable stand 
second uses complex data types requiring shift current practice perceiving inputs outputs atomic values 
third constraints input output parameters 
naturally question arises daml expressive model characteristics 
part chapter attempts answer question characteristics exist sw tools 
problems encountered typical problems people encounter publishing tools web service 
provide solutions recommendations terms usage guidelines extensions daml 
description sesame rdf repository query engine 
provide valuable support ontology applications 
part application accessed web interface 
currently soap communication protocols available 
sesame interface available different functionalities different urls 
shortly functionalities including brackets url extension published 
sesame server contains set password protected repositories 
called public repositories accessible login information 
server interface request list repositories available specified login including public ones 
storage facility sesame offers functionality upload data interact 
data upload functionality adds data specified url sent string 
content repository deleted completely 
deletion statement level supported 
user retrieve content repository alternatively schema information instance information 
refined data extraction method query method www daml org services 
daml validator athttp www daml org validator 
annotea org annotations 
description available athttp www cs vu nl marta services sesame owl 
see detailed description athttp www org doc sesame users ch html 
base url form hostname servlets proceeds extension capitalized words depend server installation 
improving daml transforms sesame query engine 
predefined way functionalities 
fact highly self contained stand combination functionalities 
modelling requirements expect service descriptions intelligent agents reason provided semantic data 
operational level integration needed technical information properly captured 
requirement fulfilled daml allows conceptual syntactic level specifications wsdl 
conceptual level semantics offered functionality specified 
multiple ways 
specify service describing parameters 
issue treated part chapter section 
second meaning service depends relation services 
desirable describe components relate intelligent service determine usage patterns fulfilling certain tasks 
dependency services composition certain service composed multiple services 
case sesame investigate issue section 
issue linking semantic syntactic descriptions service 
desirable single conceptual description mapped descriptions different technical implementations service 
sesame case possible ground semantic description syntactic descriptions different interfaces soap rmi 
experimented linking wsdl description interface encountered problems discussed section 
related grounding technical descriptions combination semantic ones undergo minor changes usable tools require semantic data 
section 
specifying service semantics splitting sesame 
order satisfy various needs service providers daml impose particular modelling style leaving gap conceptual considerations actual modelling 
happens notion service 
conceptually define web services web sites 
allow effect action change world daml services coalition 
differentiate simple complex services 
simple service invokes single web accessible program interaction user execution services 
complex service composed multiple simple services 
light definitions sesame functionalities web services functionalities simple services sesame complex service 
deciding actual modelling trivial 
number alternatives tried underlining benefits disadvantages 

modelling alternative 
adopted modelling style existing daml examples see schematic representation 
accordingly note definition web service broader web services community considers web service web accessible program 

modelling complex service sesame created single service instance sesame 
component functionalities modelled 
fixed workflow components sesame functionalities arbitrary ways solve tasks workflow model closest needs process choice 
expresses little relations components semantic value weak 
tried compensate profile pr level associated multiple profile instances service functionality pr pr global functionality sesame 
grounding sesame contains entities internal process corresponding wsdl operation 
sesame pr pr pr pr port traditional service modelling sesame 
approach limitations 
simple services offered alternative interfaces implementations 
service concept different atomic processes different implementation atomic service results different grounding service 
face combinatorial explosion general service component offers new implementation 
second profile level indication relation services 
third services visible matchmaking time profile explicitly mentioned needs interpret full description complex service just simple service 
note style description works fine web services composed simple services meaning outside service fixed workflow 
cases single profile suffices describe global task execution achieve 
need advertise stand anyway 
assumptions apply sesame functionalities combination just 

second modelling alternative 
due considerations decided model functionality separate service services represented 
limitations previous model solved overhead declaring new implementation simple service reduced declaring single atomic grounding service description needs interpreted 
issue expressing services inter relate open 
optimally express sets services certain sesame server 
depending exposed services different sesame servers different types offer storage functionality sesame offer improving daml sesame pr pr port sesame pr pr proposed modelling sesame 
querying facilities offer sesame 
want express composition profile process level 
implemented building domain ontology enrich daml concepts 
relied assumptions widely domain ontology reflect terms accepted large community easy extend new knowledge straightforward integrate service descriptions 
domain ontology conceptual difference tools functionalities define tools terms functionalities provide 
terms modelling involves inter related constructions 
specialize daml profile profile functionality see 
subclasses concept reflect main tool categories described thorough survey existing semantic web tools gomez perez 
second concept superclass functionalities 
declared functionality types relevant sesame grouped generic concepts 
example consider methods data retrieval 
superclass extended methods specific tools fulfill function 
second declared new property allows specify kind functionalities certain tool offers depicted part 
construction allows define imposing constraints type functionalities 
example allow functionality type offer functionality 
provide functionality 
ontology contains set terms needed describe sesame repository user password 
fulfilled requirements widely domain ontology 
concepts largest survey semantic web tools sw community extended concepts daml growing standard 
second model easy extend new functionality types added new tool types defined existing newly added functionality 
third issue easy www cs vu nl marta services owl 
modelling complex service sesame service description demonstrated 
datasource format password profile functionality reasoner repository user domain ontology 
domain knowledge daml descriptions 
domain concepts reasons daml description 
express meaning offered functionality profile level 
section devoted issue 
second domain knowledge describe process profile level 
grounding process wsdl descriptions enriched domain knowledge shown section 
indicates functionality service declaring profile type documented domain ontology 
discussed previously modelling tools offer complex functionalities model tools functionalities services 
indicate type tool just functionality appropriate types profiles 
demonstrates process 
sesame service instance profile sesame prof type kind profile 
similarly individual functionality declared service modelling decision 
example functionality declared service instance associated profile instance type kind functionality profile 
declaring sesame profile type inherit property defined 
instance level property associate sesame prof prof 
indicates functionality offered sesame service relies functionality service 
easy define different sesame instances different combinations functionalities 
useful practical scenarios different user groups access different functionality 
example stores data sesame may wish available customers employees 
customers improving daml daml instances presents service profile sesame presents presents functionality sesame prof domain knowledge profile 
prof property subclassof instanceof allowed read stored data 
particular service instance sesame advertises data reading capability 
contrary employees add read data service instance points functionalities 
managed express composition interdependency profile just process level originally possible daml 
matchmaking time wants sesame gets list needed service profiles discover individual services associated profiles 
input output specification previously concerned service 
continue details parameters service specified 
part section proposes flexible modelling input parameters inputs depending condition specified 
second part propose alternative complex data type specification 
conditional inputs 
daml cover cases inputs depend certain condition 
currently indicate input mandatory optional relying daml oil cardinality restriction mechanism 
mandatory input cardinality restriction enforce existence 
encountered situations input required combination input 
example specifying log information password mandatory user parameter supplied 
case service actual data supplied url specified 
solution 
solution consistent current version daml extend process ontology support conditional inputs way outputs effects may conditional see 
general template 
modelling complex service sesame process thing thing process input input condition current proposed modelling inputs 
defining conditional elements propose defining class simply bundles condition input properties condition conditional input input conditional input 
conditional input input occurs condition true 
modelling allows specifying wider range inputs currently possible 
inputs depending factors external process described 
example specify customers outside usa need provide zipcode input 
case customers geographic location conditions zipcode input needed 
second capture situations exemplified input conditioned existence input generally condition involves inputs 
third propose alternative way specify mandatory inputs conditional inputs condition true 
optional inputs modelled inputs depend condition 
list complete think cases appear tools services 
note deal conditions specified 
fact ongoing research topic community 
complex data types xml schema daml oil 
support automatic discovery operational integration web services markup provide information semantics methods parameters syntactic signature method names data format parameters 
issue best specify complex data types syntactic semantic level major importance sesame methods provide complex output data types 
concrete example consider simplest functionality sesame 
output conforms dtd specified 
element repository element repository title element title pcdata attlist repository id id required readable true false required writable true false required improving daml complex data formats defined types section wsdl document 
maximum platform independence xml schema xsd specify format complex data types 
syntactic information provided xsd allows tools easily parse output conforms dtd allowing easy integration web services 
information semantics 
daml solution replace syntactic xsd definitions semantic definitions written daml oil wsdl allows xml type definition language types section 
claim daml oil rich data typing feature ankolekar 
felt recommendation limitations applied complex types sesame 
difficult express complex syntax data type solely daml oil elements 
considered owl type definition provides advanced ways data typing ancestor 
achieve goal 
understandable daml oil owl ontology language delegates data type representation xsd 
second wsdl document purely daml oil data types useless users service understand daml oil 
ideally existing wsdl description undergo minor changes enabled semantic technology ensure backward compatibility traditional applications 
expect tools xsd definitions sesame wsdl description understand daml oil 
want extend xsd types replace 
third applications parts complex data type interesting semantically 
example syntax previous output complex semantically interested parts 
want specify objects type repository returned want specify details 
solution 
considerations mind alternative complex type definition 
xml schema specify syntax output just traditional wsdl description 
add semantics type augmented components corresponding daml oil concepts 
xsd annotation tag exactly function 
wrote xsd definition augmented concepts defined domain ontology 
xsd element name xsd complextype xsd element name repository xsd annotation xsd documentation repository xsd documentation xsd annotation xsd complextype xsd element name title type xsd string xsd attribute name id type xsd string required xsd attribute name readable type xsd boolean required xsd attribute name writeable type xsd boolean required xsd complextype xsd element xsd complextype xsd element issue converting xml messages ontology addressed wsmo irs iii lifting lowering mechanisms 

method satisfies requirements 
xml schema define complex types straightforward language designed purpose 
easily add semantics parts description way remains usable non semantic applications 
experiences describing services distilled general observations daml 
positive aspects daml 
strength daml goes syntactic description service providing semantic description 
semantics allow reasoning service move ultimate goal dynamic service discovery usage 
daml upper ontologies provide semantics high level concepts concerning web services 
concepts set domain relevant concepts offered domain ontology meaningful descriptions services achieved 
particularly valuable matchmaking requestor may alternative terms 
domain ontology relation identify synonyms subclassof relation identify hypernyms hyponyms 
supports matchmaking different levels abstraction requestor provider 
key strength daml links industry standard wsdl 
way fulfills role link semantic web community industry 
negative aspects daml 
mentioned positive aspects daml encountered set shortcomings 
imprecise conceptual model 
daml seeks provide flexibility fully defined number concepts flexibility comes expense clarity 
result daml imprecisely underlying conceptual model 
base statement facts different models exist daml 
parts daml employ different metaphors describe services 
profile level service types parameters 
process level ios pes treated conceptually differently emerge different views service see section 
conceptual gap wider daml model aligned wsdl model defines services collections ports see section 
alternative conceptual models specification services difficult mapping models impossible 
daml different models lead inconsistencies specification see section 
mappings parts daml unclear 
mapping profile process lead possible inconsistencies final service description sections 
second mapping wsdl limits expressiveness daml section 
just modelling simple service conflicted mapping rules 
forced revise models grounding possible expense giving polymorphism sia accurate specification complex internal structure sia 
correspondence software engineering se concepts established 
intended users daml software engineers 
consider improving daml support se concepts form concept mappings ease understanding daml 
wsdl intuitively models different interfaces allows grouping operations ports methods interface daml considers simple function metaphor methods 
complex concepts polymorphism re supported 
think se model disambiguate concepts give shared framework daml wsdl 
imprecise conceptual model reduces modelling power daml multiple modelling possibilities exist 
complexity daml modelling increases complexity modelled service 
clear view services produce variety models demonstrated services sia section sesame section 
note nature ontology modelling partly cause having multiple modelling possibilities 
ad hoc polymorphism modelled 
ad hoc polymorphism just term software engineering mechanism equally valid commerce scenario 
example commerce site optimally allow multiple ways paying credit card bank transfer 
basically effect achieved paying item money obtained different sources 
se point view method modelled single service 
arise model different facets service daml see section 
question conform limitations ontology know model conceptually correct 
difficult learn 
major comments worries difficult get started writing daml 
previously mentioned lack conceptual model played fair role 
inhibiting factors limited tool support 
time research tool support writing daml markup 
simple text editors task building complex descriptions consisting interlinked parts complex error prone frustrating 
situation changed nowadays plethora semantic web service description editors ode sws gomez perez owl editor 
examples guidelines available 
daml site provided complex examples 
examples artificially created fit ontology real life examples 
consequence ignore situations arise case real life services 
lack examples augmented lack guidelines modelling certain situations 
knowledge daml wsdl soap required 
pre requisites start writing complete daml descriptions high know daml wsdl soap 
users partly familiar techniques considerable burden learn sufficient depth 

summary summary chapter investigated expressiveness usability daml employing model real life services 
part referring imprecise conceptual model daml modelling limitations indicate ontology low expressiveness 
contribution chapter point concrete limitations daml provide solutions 
short limitations corresponding solutions 
mapping profile process lead inconsistent descriptions 
solution daml ontologies redesigned section 
mapping wsdl permit modelling ad hoc polymorphism complex internal structures 
problem partially addressed new grounding model section 

obvious model complex services combine self contained services 
provide solution domain ontologies section 
conditional inputs supported daml 
rationale possible modelling section 
argue performing minimal changes described wsdl files terms added semantic information section 
part indicates daml low usability 
contribution point provide example marked services community 
identify set commonly occurring modelling situations document offer modelling solutions possible guidelines 
findings chapter derived daml general lessons learned applicable web service ontologies 
modelling situations documented covered ontologies 
second believe crucial apply new ontology real life services order assure expressiveness 
case daml describe real life services lead discovering set noteworthy issues suggested important improvements 
usage examples guidelines tools important ensuring adoption ontology 
chapters continue analyze daml perspective adaptability domains ontological correctness 
chapter adapting owl generic software entities concluding expressivity usability owl previous chapter chapter investigate adaptability describe kinds software entities web services 
motivation perform analysis twofold 
wish establish owl generic way reusable similar domains 
prove quality asset knowledge reuse goals ontology engineering 
second owl adapted semantically describe generic software entities entities easily exposed semantically described web services facilitating uptake semantic web services technology 
perform analysis owl basis developing ontology support certain type middleware system application server 
identifying aspects application servers benefit semantic technology show owl reused building ontology support application servers 
material chapter published australian workshop engineering service oriented systems sabou 
generic web service ontology owl captures knowledge describing particular type software entities web services 
typically generic knowledge structures easily adaptable related domains 
facilitating knowledge reuse goals building ontologies 
indication quality owl reuse contexts web services 
practical motivation reusing owl describing types software entities supporting tasks specific web services 
envision short time different software entities available web services 
example components managed middleware systems device controllers 
entities described ontology derived owl time exposure web services straightforward derive semantic descriptions 
foster adoption semantic web adapting owl generic software entities services technology 
benefits semantic descriptions explored original setting components example chapter show semantic descriptions automate middleware specific tasks 
chapter interested degree owl adaptable context middleware systems 
generally speaking middleware systems facilitate application development distributed information systems 
common middleware solutions focus software entities provide application programmer interface api called software modules 
current web service technology middleware relies syntactic standards idl object modelling group describing software modules 
syntactic standards limited expressivity 
perform analysis adaptability owl context concrete application server application server semantic web oberle 
application servers component products provide functionality security state maintenance data access persistence development web applications 
despite comprehensive functionality application servers realizing complex distributed system remains easy task 
instance managing component dependencies versions licenses typical problem 
microsoft environments referred dll hell 
developers confronted increasing repository programming libraries standard tasks io networking database access handling xml 
desirable assist developer resources 
chapter structured follows 
section provide motivation middleware perspective developing ontology support frequent middleware tasks 
section ontology built adapting owl 
report status embedding newly built ontology middleware server section 
related section conclude section 
motivation section introduce application server semantic web middleware section describe set usage scenarios require semantic descriptions software modules section 
scenarios lead set requirements section guided developing ontology section 
application server semantic web integration existing software modules important issue semantic web complex applications require single software module 
ideally developer system wants easily combine different preferably existing software modules 
far integration done ad hoc generating endeavour little possibilities reuse extensibility individual modules system 
application server semantic web oberle addresses issue facilitating reuse existing modules ontology stores editors inference engines development maintenance comprehensive semantic web applications 
combines means coordinate information flow modules define dependencies broadcast events different modules translate semantic web data formats 

motivation architecture application server relies microkernel component approach 
microkernel offers minimal functionality managing starting stopping initializing components 
existing software modules deployable order managed microkernel 
process adds wrapper software module transforms component 
run time application server may host components application interface api 
order distinguish components direct interest developer components providing functionality application server connectors registry call functional components system components 
client software hard codes certain api 
order facilitate working deployed component client software called surrogates client side objects reveal api particular component relay communication client relieved handling network protocols middleware idiosyncrasies 
run time application server allows client chose component surrogate relay communication 
application server semantic web design development existing application servers applying augmenting underlying concepts semantic web 
wish semantic technology server scenarios discussed subsection 
scenarios order tackle problems managing locating components propose introduce formal conceptualization software related issues 
formalism allows representing common knowledge domain fact component dependencies transitive 
formal descriptions software modules benefits 
development ontology beneficial gain conceptual agreement application server developer 
example ontology formalizes relationships internal components server 
multitude software tools leverage knowledge specified means reasoning engine 
semantic descriptions software modules improve frequently occurring scenarios application server 
scenarios listed apply application server detail setting 

implementation details 
libraries depend libraries certain archive contain libraries 
information system assist developer locating required libraries 
furthermore user notified libraries require different versions certain third component 
instance various early versions xml parsers cause lot trouble 
system runs libraries included path certain order class loader picks latest version 
envision reason kind data order educated suggestion situations 

component discovery 
run time client dynamically decide component surrogate relay communication 
example ontology editor word deployment process registering possibly initializing starting component microkernel 
similar stubs corba 
adapting owl generic software entities specific ontology store deployed application server 
moment information functionality important prominently certain properties component rdf store component capable transactions 
registry system component simple ontology store holds semantic descriptions deployed components queried accordingly 

api discovery 
programming application developer want find certain api order able program 
preferably want perform search semantic level specify high level details api functionalities 
example developer client software need api provides ontology storing retrieving functionality 
related overlapping apis system recommend best fitting 
support semantic search suggest describing existing functionalities offered methods apis terms concepts contained common service taxonomy 

classification apis 
developer want determine type new api type offered functionality methods 
example api offering ontology storage inferencing capabilities types 

publishing web services 
developer want functionality hosted components web services 
web service connector may publish components methods correspondingly 
development toolkits usually provide functionality creating stubs skeletons automatically generating interface descriptions 
example java wsdl tool generates wsdl definitions java service implementations 
representation languages owl tool support new languages needed 
wsdl tools obtain required input directly source code powerful languages require additional measures 
internal semantic description apis easier generate corresponding owl description 
requirements scenarios discussed lead set requirements served design principles ontology section 

module implementation functionality syntax 
ontology contain means describe implementation invocation details software modules support implementation tasks scenario 

module characteristics functionality semantics 
ontology contain means give high level descriptions software modules types ontology stores reasoners characteristics providers description supports component api discovery scenarios 

reusability sharing 
semantic descriptions software modules reusable 
easy coupling syntactic semantic description 
ontology design supported 
aspect reuse ontology design application server incorporate existing efforts standards technologies communities 

domain independence 
ontology reusable wider range domains just semantic web domain separate generic domain specific concepts 
requirements guided designing ontology 
ontology design section ontology shown built adapting owl supporting application server 
start providing comparative overview ontology owl section 
section sub ontology detail show fulfills certain requirement 
concrete example module description showing ontologies instantiation level section 
overview design principles owl described section underpin comparatively depicted 
principles influenced kinds sub ontologies relations 
discussion gives rationale design decisions 
generality generic domain owl profile process grounding wsdl owl semanticweb web services software modules implementation comparative overview owl ontology software modules 
sub ontology uses ontology idl semantic descriptions syntactic descriptions type software entity adapting owl generic software entities 
semantic vs syntactic descriptions 
adopted separation semantic syntactic descriptions complying requirements 
number ontologies allow semantic description syntactic descriptions 
mapping exists description aspects 
different types entities want describe modified owl ontologies follows kept owl profile ontology specifying semantic information described components 
extended concepts describing functionality apis methods conceptual level 
necessary profile ontology constructs specifying functional descriptions shallow 
extensions grouped small ontology called api description 
process ontology previous analysis detailed chapter yielded semantic web tools usually offer set simpler functionalities predefined way invoking captured certain dataflow 
type described components change ontology easily extended process ontology 
defined language describing apis syntactically wsdl designed specifying network endpoints 
purpose formalized subset idl interface description language object modelling group terms idl ontology 
consequence changes reuse existing owl grounding wrote grounding ontology allows mappings conceptual description apis profile syntactic specification idl 

generic vs domain knowledge 
generic domain ontologies order fulfill desiderata expressed 
owl wsdl generic knowledge level 
true extensions owl shown 
specific goals built domain ontologies area semantic web 
specifies type existent semantic web software modules coarse level 
second describes functionality semantic web specific apis fine grained level terms methods parameters 
naturally ontologies easily replaced depending application domain example bio informatics 

modularity 
modularity enables easy reuse specifications extensibility ontology 
important issue size reusable parts 
example profile instance contains lot information specific contact information providers instance reused service description 
coarser granularity information concept increases chance reusability 
reused principle identifying related content relating central concept grouping small ontologies re sub ontologies 
describe process isolating reusable knowledge subsection short overview ontology 

ontology design query uses ontology subconcept property reification concept datatypes sub ontology domain requires output effect type void library interceptor input precondition returns parameter thing parameter hastype actor service parameter string system component method operation ontology 
functional component proxy component name profile interface idl component owl profile implementation presents supports implements generic foundational adapting owl generic software entities sub ontologies reusing design principles underlying owl guided design requirements put forward section 
section briefly describe sub ontologies relations exist graphical overview ontologies shown 
ontology discuss indicate scenarios section supports requirements stated section fulfills 
table shows relations requirements sub ontologies confirming major influence requirements design 
requirement 
syntax 
semantics 
reuse 
domain sub ontology sharing independence software module owl profile api description implementation idl idl grounding domain ontologies software module ontology table dependencies requirements sub ontologies 
ontology similar owl service ontology responds requirement sharing reuse existing standards 
ontology depicted contains main concept top concept type description ensuring coarse grained modularity description 
performed changes renamed service concept entities focus descriptions 
accordingly renamed serviceprofile service grounding concepts 
excluded servicemodel concept stated section interested internal working modules 
added concept groups implementation details described implementation ontology 
concepts describe specified corresponding ontologies described 
owl profile extension owl profile ontology specify particular characteristics contact information providers certain parameters 
example ontology store service parameter specifying representation 
ontology design presents supports implements owl implementation ontology 
language 
profile describes component 
information type component discovery run time corresponds requirement providing generic high level characteristics described modules 
examples parameters provided section 
owl profile name profile actor service parameter owl ontology 
current functional description specification owl focused expressing single functionality want describe functionalities offered software module correspond set methods api note previous chapter encountered weakness profile model wished model service relies different services 
adapting owl generic software entities added new property profile see ranges concept groups information describe api separated small ontology 
separated content small ontology expect modules able reuse functionality descriptions contact information providers 
profile kept support sharing reuse existing standards requirement 
api description api description ontology offers framework semantically describing functionality offered methods apis accordingly types apis 
complements owl profile purposes 
ontology central concept called multiple properties instances type method see 
furthermore instance method set parameters inputs outputs preconditions effects 
parameter features hastype property points concept domain ontology 
types methods specialized terms domain concepts 
kind information perform task discovering available apis offered functionality methods classify new apis methods derive owl descriptions corresponding web services scenarios 
requirement motivates semantic functionality descriptions 
owl implementation method parameter hastype thing input output precondition effect ontology 
implementation ontology depicted contains implementation level details module responds requirement 
aspects 
ontology design implementation describe characteristics code class implements code required archives version code 
aspects modelled properties concept 
note characteristics specific certain implementation reusable 
automatic deployment components scenario 
signature interface 
name methods parameters modelled ontology idl 
implementation idl parameter type void interface operation returns string requires functional component implementation ontology 
component system component proxy component library interceptor main concept component subclass bundles instance instance interface class describes signature api 
idl formalized small subset idl interface description language object modelling group specification ontology allows describing signatures interfaces 
interface concept corresponds described interface 
features property points operation instance 
operation set input parameters certain type 
operation returns void 
interfaces operations parameters identifiers correspond names code 
allows specify invocation implementation details needed automatic invocation adapting owl generic software entities methods see requirement widely industry standard complying 
idl grounding idl grounding ontology see provides mapping api description interface description 
mapping straightforward concepts map respective concepts api description implementation sub ontologies 
ontology 
implementation acknowledge possibility redundancy approach idl api description ontologies look similar easy reuse flexible coupling see higher design goal 
certain concept level description grounded different interfaces may look technically different signatures 
domain ontologies built domain ontologies specialize parts generic ontology 
isolating domain knowledge separate sub ontologies conform owl design principles implicitly requirement domain independence 
generically describes semantic web software modules 
ontology outcome extensive survey gomez perez domain 
survey distinguishes categories software modules ontology building modules ontology evaluation modules category proposes set characteristics 
characteristics survey framework comparing actual modules 

ontology design datatypes reification owl query domain ontologies 
transformed information domain ontology follows 
built taxonomy categories document 
category subclass profile 
characteristics category modelled sub properties owl 
example created category added properties suggested survey 
additional properties specializations 
concluded easy extend owl profile property modelling information survey 
allow easy addition extra knowledge survey offers non exhaustive reduced set characteristics 
second ontology describes semantic web specific functionalities 
contains set api functionality types methods generally offered 
example declared concept denotes apis storing engines defined providing method adding data store query method querying data store 
note combining simple apis create complex ones 
example obtained inheriting methods 
type api specializations created declaring extra methods specializing existing ones 
schema ontology provided api description ontology apis type functionalities type method 
believe ontology allow performing flexible search existing apis 
note building domain ontologies relied ontology built describing sesame see section 
adapting owl generic software entities ontology deployment ontology incorporated application server semantic descriptions registered components stored central repository called registry 
descriptions support set application server specific tasks 
section exemplify actual description software component section explain semantic descriptions application server section 
example component description exemplify described ontology describing ontology stores rdf representation language 
examples describing software modules ontology reader referred oberle 
assume ontology stores deployed functional components kaon rdf main memory ontology store transient implementing rdf api karlsruhe ontology semantic web kaon 
kaon rdf server ontology store implements api applies database system actual storage 
sesame ontology store implements api 
sake brevity illustrate description methods api see 
note omit fully qualified improve readability 
provide complete semantic description component 
components highlight differ 
kaon rdf api void add statement statement model find resource subject resource predicate object sesame api int string string string string query describing kaon rdf main memory 
declare links instances mm profile mm impl containing different aspects description rdf id presents rdf resource mm profile supports rdf resource implements rdf resource mm impl profile point view mm profile describe associated properties declared semantic web profiles domain ontology 
profile includes contact information pointer instance 
implementation kaon server available athttp kaon semanticweb org 
ontology deployment rdf id mm profile rdf resource servicename servicename platform rdf resource rdf resource rdf rdf resource note information specific 
instance reused modules 
terms domain ontology offers adding data add method querying repository find method 
description api contains declaration methods type type query parameter follows rdf id rdf id input rdf id hastype rdf resource input output rdf id hastype rdf resource output query rdf id query 
query furthermore declare technical details module mm impl 
impl rdf id mm impl impl impl rdf id mm impl rdf resource 
impl impl impl rdf resource impl syntactic description api shown 
grounding instance establishes correspondence conceptual description description technical implementation 
idl interface rdf id adapting owl generic software entities idl edu aifb rdf api model idl idl idl operation rdf id addop idl add idl idl idl parameter rdf id statement idl statement idl idl edu aifb rdf api model statement idl idl parameter idl idl returns idl rdf id response idl hastype void idl hastype idl idl returns idl operation idl idl idl operation rdf id 
idl operation idl idl interface describing kaon rdf server 
definition kaon rdf server similar kaon rdf main memory provide api 
provide type descriptions reuse semantic description api syntactic description grounding grounding aspects 
profile description modified order describe server uses database storage 
describing sesame 
describing sesame reuse api related descriptions previous descriptions 
semantic description sesame functionality 
sesame provides functionalities previous modules query 
rdf id rdf id input rdf id hastype rdf resource ontology input output rdf id hastype rdf resource 
related output query rdf id query 
query component descriptions currently semantic descriptions support main scenarios introduced section 
implementation details scenario loading components carried automatically implementation details description implementation ontology reasoning capabilities server 
example transitive closure required libraries certain component deduced 
uses semantic descriptions oberle 
second component discovery scenario supported run time 
client query registry available components chose component returned list properties component 
example oiled bechhofer ontology editor acting client query existing ontology stores reasoners select interact available components described detail oberle 
note situation superior traditional application servers relation different clients hard coded 
related classical software reuse systems comparable need describe software modules appropriately efficient precise retrieval 
techniques faceted classification diaz limited representation provider features 
analogical software reuse massonet van lamsweerde shares representation modules functionalities achieved software roles conditions 
wing wing describe specification language matching mechanism software modules 
allow multiple degrees matching consider syntactic information 
upml unified problem solving method development language fensel developed describe implement intelligent broker architectures components facilitate semi automatic reuse adaptation 
framework developing knowledge intensive reasoning systems libraries generic problem solving components represented inputs outputs preconditions effects tasks 
note efforts describe different kinds components concentrate solely syntactic semantic descriptions blending 
adapting owl generic software entities body related adaptations owl particular domains 
example wroe uses extension owl describing web services bio informatics domain 
owl enriched speech acts describing agent web services gibbins 
considers software description api level 
idl augmented concepts specified description logics borgida devanbu 
specifically consider adding kinds information idl interface data invariants particularly useful database integrity constraints procedure pre post conditions object behavior models dynamics 
addition checking exact matching information client server formal assertions description logic dl reasoning allow perform additional tasks 
borgida devanbu list compatibility testing specifications local consistency checking thorough treatment exceptions variability services provided 
approach just augments syntactic part api description 
deal semantic information method functionality approach 
summary chapter investigated adaptability owl context particular application server supports development complex semantic web applications 
proof concept built ontology adapts owl meet requirements application server 
newly built ontology incorporated server automating implementation tasks component discovery scenarios 
owl incorporates valuable design principles easily adaptable describing types software entities web services 
believe adaptability important features generic ontologies characterize ontologies web service descriptions 
chapter aligning owl foundational ontology previous chapters analyzed expressivity usability adaptability owl chapter analyze owl ontological perspective 
identify problematic aspects suggest enhancements alignment foundational ontology 
contribution core ontology services tries fill conceptual gap foundational ontology owl 
ontology reused align web service description languages contributing 
material chapter published aaai spring symposium entitled international semantic web services symposium mika extended version published thirteenth international world wide web conference mika 
clarity semantics rich formalization semantics important requirements ontologies designed deployed large scale open distributed systems envisioned semantic web 
due fact ontologies facilitate mutual understanding enabling effective cooperation multiple artificial agents establishing consensus mixed society artificial agents cooperate human beings 
foundational ontologies fulfill requirements serve starting point building new domain application ontologies provide point easy rigorous comparisons different ontological approaches create framework analyzing integrating existing ontologies metadata 
clarity semantics rich formalization especially important ontologies describing web services owl enable complex tasks involving multiple agents 
contribution development owl identify problematic aspects suggest enhancements alignment foundational ontology 
owl suffers conceptual ambiguity lacks con aligning owl foundational ontology cise axiomatization designed loosely offers overly narrow view web services 
alignment discovered possible enhancements problematic aspects ontology 
findings benefit designers users owl 
furthermore core ontology services developed middle layer aligning web service description languages 
lastly note contribution limited concrete results reported chapter consists examples benefits alignment foundational ontologies description alignment method 
chapter structured follows 
related section 
section identify explain problematic aspects owl 
section main body alignment owl dolce foundational ontology 
section detail suggested improvements problematic aspects introduced 
conclude section 
related previous efforts responded problems owl 
briefly discuss initiatives aware describing motivation parts owl focus techniques initial results available 
initiative narayanan mcilraith motivated need formal semantics describe simulate automatically compose test verify web service compositions 
focuses solely owl servicemodel provides constructs specifying composition 
authors establish situation calculus semantics main elements owl servicemodel atomic composite processes conditional effects outputs translate operational semantics provided petri nets 
knowledge representation formalism rich theoretical tool support various composition tasks 
semantics allowed re existing simulation modelling environment 
authors able identify tractable subsets owl expressive efficient analysis verification composition model checking 
second effort ankolekar focuses owl service model proposes concurrent operational semantics incorporates subtype polymorphism 
motivation provide initial semantics discover possible ambiguity developed language 
serve developing techniques automated verification owl models 
web standards provide similar semantics easier compare understand strengths weaknesses 
authors efforts mutually acknowledge similarity proposed semantics minor details discussed ankolekar 
aiming increased formal axiomatization wish explain owl concepts terms foundational ontology reflects generally accepted theories linguistics philosophy cognitive sciences show ontological analysis owl brings surface irregularities model just semantics promises 
long term benefits alignment allows comparison aligned ontologies goal 
problematic aspects owl stated ankolekar 
extend analysis entire owl model 
methodological perspective previous approaches provide independent reconstructions owl alignment embed owl model larger context offered foundational ontology 
deduce example owl address difference real life object book representational counterpart information system isbn number important ontological distinction 
semantics established previous reflected current owl formalization model 
case model inherits axiomatization available owl dl version dolce 
problematic aspects owl section identify illustrate problematic aspects understanding owl foundational perspective 
revisit discussing suggestions improvements section 
relate issues question ontology quality 
ontology quality topic borgo provides criteria evaluation extensional coverage concerning amount entities supposed described ontological theory intensional coverage concerning kinds entities described ontological theory precision concerning axioms required describe just models ontology designer intends cover 
criteria ontology approximate domain discourse supposed described signature maps kinds entities intended designer axiomatize predicates order catch intended models exclude unintended ones 
introduce problems encountered owl 
conceptual ambiguity features insufficient intensional coverage 
second third poor axiomatization loose design cases insufficient precision 
third problem weakness mainly inherited limitations owl expressivity 
fourth narrow scope case extensional intensional coverage 
conceptual ambiguity clear conceptual framework owl concluded section difficult users understand intended meaning concepts relationship concepts relate modelled services 
concepts clarified owl coalition public mailing lists 
addition web services architecture wsa working group introduced owl ontology web service concepts independent owl probably leads necessity alignment ontologies needs explanation respective assumptions 
conceptual ambiguity affects particularly upper level owl shown 
notion service introduced martin follows service mean web sites merely provide static information allow effect action change world sale product control www org wsa aligning owl foundational ontology physical device 
read web accessible program sensor device declared service regarded service 
definitions operationalized concept web site web appears ontology 
notion service characterized solely relationship number servicemodel number sufficient understand concept service considered owl 
note term web service closely related terms service service suffer overloading 
search possible formalizations variety definitions emphasizing different aspects service gangemi offering functionality usefulness particular task interoperability standards providing interface existing system 
refer reader compares contrasts definitions business literature software engineering information sciences 
poor axiomatization owl descriptions machine processable 
important concept characterized rich axiomatization order support meaningful inferences 
general believe level commitment owl need raised shall support complex reasoning tasks put forward coalition 
issue mentioned previous section poor axiomatization reflects lesser problem definition concepts clear axiomatization ontology needs improvement 
respects owl shows characteristics typical application ontology firm concept relation hierarchy concepts relations direct subconcepts top level concept relation relations take owl thing domain range 
propose adding foundations owl level axiomatization increased 
alignment foundational ontology means relating concepts relations ontology basic categories human cognition investigated philosophy linguistics psychology 
approach advantage restrictions level common sense inherited concepts application ontology 
prompts ontology engineer sharpen notions respect distinctions foundational ontology 
promotes reuse highlighting commonalities especially helps reduce proliferation relations typical phenomenon application ontologies 
alignment modularized foundational ontology allows selectively import theories ontology mereology time theory demonstrate section aligning control constructs owl ontology plans basic extensions dolce foundational ontology 
loose design problematic aspect owl point view entangled design 
heart problem lies purpose owl providing descriptions various views web services required support number different service related tasks discovery composition invocation 
functional dimension web 
problematic aspects owl service descriptions contextualized represent various points view service possibly different granularity 
views overlapping concern attributes service 
straightforward modularization cases results entangled ontology placement certain knowledge arbitrary intensive mapping required modules 
phenomenon described object oriented design notion aspects proposed encapsulate concerns cross cut concept hierarchy software 
case point application attribute binding owl 
construct attribute binding necessary owl express example output process input process output composite process output subprocesses 
programming equivalences expressed variables 
variables governed rules scoping define boundaries commitment 
owl lacks notion variables argument binding expressed explicit value maps 
shown value map form list attached 
list contain instances valueof concept members valueof concept point single relation single concept relations example case processes process takes output process input list valueof members related concept output relation related concept input relation 
reader may note intended meaning entire construct sensible instantiations process respect equivalences expressed value map encoded axiomatization 
explained lack expressivity description logic 
owls process component owls rdf list rdfs owls owls valueof owls representation attribute binding owl 
owls process owls parameter tedious representation unfortunate consequence solution guess scope commitment represented value map 
owl suggest attaching value map process sub processes involved value map 
argued owl specification mentions ability profile providing views 
actual constructs provided map possible service executions 
enforced 
explanation ordered collection ordering means 
cardinality restrictions missing formalization 
aligning owl foundational ontology multiple value map restrictions inputs outputs process resulting service composition expanding collapsing processes 
current owl proposal unclear approach situation 
narrow scope typically service descriptions cross boundary information system objects record book external world objects physical book 
reason web services part service value attributed requester 
believe phenomenon characterize real world services users paying simply information recorded manipulated process includes actual changes effects real world book delivered 
scope owl needs extended represent real world services naturally cross lines information systems physical world 
owl acknowledges aspect services unclear distinction objects events information system regarding data manipulation data real world objects events external system 
foundational ontology possible required creator description distinctions fundamentally affect ontological nature objects events concerned 
return issue section 
insufficient intensional coverage owl core shows precision top service concept related servicemodel concept cardinality 
means service servicemodel expected hold 
prevents consider alternative evaluate relationship servicemodel required customer guideline legal regulation underlying provider system instance 
contribution extend owl relationships mapping service descriptions elements actual service executions covered owl 
relationships directly inherited descriptions situations ontology module dolce introduced section 
alignment section describe alignment owl dolce foundational ontology explained section 
dolce extended ontology descriptions situations detailed section 
conceptual gap owl descriptions situations large constructed core ontology services section 
section depicts owl concepts expressed core ontology services 
give short summary alignment methodology 

alignment dolce role foundational ontologies serve starting point building new ontologies provide point easy rigorous comparisons different ontological approaches create foundational framework analyzing integrating existing ontologies metadata standards 
conceptualizations contain specifications domain independent concepts relations formal principles derived linguistics philosophy mathematics 
dolce descriptive ontology linguistic cognitive engineering belongs wonderweb project foundational ontology library designed minimal includes reusable widely applicable upper level categories rigorous terms axiomatization extensively researched documented gangemi masolo 
physical endurant entity endurant perdurant quality non physical endurant arbitrary sum event stative temporal quality top level taxonomy dolce 
physical quality quality upper part dolce taxonomy sketched 
dolce fundamental distinction enduring entities 
main relation endurants objects substances perdurants events processes participation endurant lives time participating perdurant 
example person endurant may participate discussion perdurant 
person life perdurant person participates duration 
qualities seen basic entities perceive measure shapes colors sizes sounds smells weights lengths electrical charges 
spatial temporal qualities encode spatio temporal attributes objects events 
abstracts spatial temporal qualities qualities quality regions sets 
particular regions encode measurement qualities metric conceptual space 
dolce axiomatized modal logic maintained languages particular trade expressivity computational complexity required certain application 
example kif version suited detailed meaning negotiations machine readability complete axiomatization 
loom macgregor version support ontology driven industrial applications required high expressivity classification services version modal temporal axioms removed transformed order take advantage loom variety description logic incomplete desirable certain settings 
owl dl mcguinness region set aligning owl foundational ontology van harmelen version currently maintained semantic web applications 
probably provides best scaled version due completeness owl dl strategy applied porting dolce different languages quite liberal consists finding appropriate naming policy constructs sound natural best modelling practices certain language provided subsumption hierarchy axioms accurate mapping version 
scope chapter mention dolce chosen basis reasons due internal structure rich axiomatization explicit construction principles careful interdisciplinary literature common sense orientedness due modular nature 
fact part wonderweb foundational ontology library dolce mapped foundational ontologies possibly suitable certain applications extended modules covering different domains legal biomedical problems planning contexts lexical resources wordnet lexica 
features internal consistency external openness dolce specially suited needs 
descriptions situations modelling physical objects events dolce quite straightforward intuition comes odds want model non physical objects social institutions plans organizations regulations roles parameters 
difficulty due fact intended meaning non physical objects results statements meaning emerges combination entities 
example norm plan social role usually represented set statements concept 
hand non physical objects may change manipulated similar physical entities treated order objects 
means ontology account objects modelling context frame depend 
representation context common problem realistic domains technology society law finance full non physical objects 
aligning dolce 
owl dl version dolce athttp www loa cnr dolce html 
alignment order respond modelling requirements descriptions situations gangemi module dolce developed 
results theory ontological contexts capable describing various notions context frame non physical situations topics plans beliefs entities 
features philosophically concise axiomatization 
depicted introduces new category situation reifies state affairs involves entities ground ontology case dolce 
situation satisfies situation description description aligned dolce non physical endurant composed descriptive entities descriptions parameters functional roles 
axioms enforce descriptive component links certain category dolce parameters valued regions functional roles played endurants satisfies perdurants see 
descriptions model contexts example murder situation reported witness played person endurant testimony description 
situation may interpreted alternative descriptions 
captures multiple overlapping alternative contexts may match world model contexts systematic relations elements 
descriptions situations 
shows practical value applied ontology design pattern re structuring application ontologies require contextualization 
see remainder section case describing web services 
core ontology services descriptions services show clear contextual nature modelled situation descriptions sense dolce descriptions situations 
may mentioned situation refers arbitrary entity dolce domain 
refer dolce basic extensions ontology plans dolce 
aligning owl foundational ontology consider number different views may exist service view service provider service requester legal view contract concepts formulate view clearly separate actual objects act independent concepts appearing views 
different views service need equally detailed 
example commercial advertisements typically feature selected characteristics service 
various views naturally focus different aspects service means descriptions may partially mapped 
directly aligning owl descriptions situations developed core ontology services cos aligned owl sources ontology 
stage alignment common technique conceptual gap source ontologies foundational ontology large 
core ontology services features concise axiomatization reused scenarios purely commercial services 
depict showing concepts cos relate dolce pattern implemented 
description level consider frequently occurring descriptions service specializations description represents separate viewpoint 
service offering description 
service offering viewpoint legal entity providing service 
commercial advertisements service offering may describe entirely service carried 
considered proposal contract agreement service 

service request description 
counterpart offering comprises expectations requester service 
requirements flexible concerning subset tasks roles parameters service activities contain 

service agreement description 
agreement reached provider requester service joint understanding regarding service may described service agreement 
agreement means understanding service providing value requester may may originally offered functionality service 

service assessment description 
typically agreement reached measures taken monitor assess control execution service provided 
assessment concerns matching service activities agreement 
service assessment may executed third party may involve aspects mentioned descriptions hotel room may checked looking dust tv sets 

service norms description 
description social conventions regarding execution service written code practice iso unwritten norm 
view basis legal action service deviates norms ways foreseen agreement 
ideal world function meaningless 
reality contracts incomplete difficult imagine possible outcomes flowing agreement 
violations resulting penalties accepted adhering contract kind control strategy 

alignment core ontology services aligned dolce dolce concepts blue dark background 
note design pattern implemented 
aligning owl foundational ontology introduce specializations task see 
allows model activities information system real world 
axioms ensure sequence computational activities 
activities new kinds perdurants especially introduced see lower part 
special kind information objects binary software participants activity produced running software 
example flying joe particular passenger destination 
example execution procedure reserves particular seat particular passenger 
chief difference tasks activities plan particular execution plan plan describes possible activities constraining way occur order achieve plan goals 
examples reservation flight collection payment described information system may implemented number ways 
flying passenger passenger particular destination 
may carried ways 
core ontology services may optionally take advantage number concepts ontology plans module dolce 
allows division tasks elementary complex construction complex tasks elementary ones features 
axioms ensure newly introduced non participate 
endurant dolce may expressed rdf wsdl 
represents physical counterpart specifically said instrument 
core ontology services models frequently occurring see 
requester provider service conceived agentive legal role dolce executor service considered agentive functional role legal nature 
examples passenger role requester booking service role travel agency provider service 
group roles played instruments services 
include computational inputs outputs formalized 
comprehensive axiomatization requires played 
aligning owl core ontology services describe alignment owl core ontology services experiences process 
concepts printed italics part owl namespace indicated 

alignment process alignment proved value early allowing quickly separate concepts ontology clear unique ontological interpretation respect basic categories dolce 
example valueof concept introduced technical reasons see section 
similar arguments hold class models ternary relationship process precondition effect 
valueof class introduced representation purposes real semantics captured ontology similarly distinctions serviceprofile profile servicemodel introduced owl provide flexibility modelling representing conceptual differences 
definition service ambiguous natural text description owl sake argument considered service service serviceprofile servicemodel parts 
note serviceprofile just expands servicemodel process descriptions 
opinion need separate parameters servicename profile 
intention just align owl reorganizing 
description service serviceprofile servicemodel input agentive actor output task aligning owl core ontology services 
relations servicename regard profile aligned domain literal range 
notion actor serviceprofile aligned depicted 
concept aligned task concept core ontology services individual control constructs mapped task components included ontology plans 
example repeat control construct aligned cycle concept kind exit condition repetition interval 
example construct maps notion case task exactly branches shown 
note difference owl task types core ontology task types tasks sequence activities branching synchro tasks particular sequence planning activities 
leaves open interpretation example case multiple conditional effects process 
aligning owl foundational ontology disambiguation inputs outputs preconditions effects relatively straightforward core ontology 
input output aligned respectively 
hand notions precondition effect inherited ontology plans modelled situations linked respective tasks task precondition task postcondition relationships 
modelled case task construct 
omitted alignment grounding ontology wsdl christensen focus 
notion software tool core ontology services expressed number description systems 
wsdl description system modelled extent required express 
summary ontology stack summarizes alignment effort 
dolce foundational ontology extended descriptions situations module defined core ontology services align owl 
note methodology alignment align compare service description efforts web services architecture wsa ontology application server semantic web alignments detailed gangemi 
specialized domain application ontologies service descriptions richards sabou formulated generic service ontologies 
requirements dolce descriptions situations core ontology services owl domain ontologies stack ontologies alignment process 
method combination bottom top approach 
hand ontologies lower layers provided representation requirements higher layers abstracted concepts relationships 
hand upper layers provided design guidelines lower layers 
meant preconditions means task precondition pc condition pc precondition pc 
refined representation considered model software description sense algorithm 
core ontology services owl alignment available download athttp www 
cs vu nl research www 
design 
suggestions improvement goal preserve structure owl possible method suggested rearrangement ontology backbone provided ontology 
suggestions improvement section suggestions improvement problematic aspects owl discussed section 
note subsection corresponds introduced section 
conceptual alignment foundational ontology helped understanding concepts owl 
example ontological analysis explained difference information object application domain counterpart role plays information system see section 
indicated possible enhanced modelling information object modelled serviceprofile servicemodel logical consider single instance playing multiple roles 
improvement implemented owl coalition described section 
core ontology services went separate functionality process software aspects service loaded single concept service owl 
replaces service concept different kinds descriptions context envision process certain roles related individual tasks process 
inputs outputs tools carry certain task examples roles 
case information services inputs outputs played information objects tools played particular software implementations 
definition may fact formulated foundational ontology allows compare alternative definitions foster discussion alternative conceptualizations semantic web service 
increased axiomatization key advantage alignment foundational ontology prompts engineer take stance respect principles established foundational ontology 
typically gained increased understanding ontology richer axiomatization ties foundational ontology 
dolce mitigates danger process importing theories shared engineer extensive modularization world views domains law finance 
example core ontology services ontology plans includes subtypes generic task concept detailed modelling plans process models 
constructs directly comparable control constructs owl provide higher level axiomatization 
example types dolce synchro task owl definition depicted appendix matches concept join split join control construct owl 
synchronization task typically bind execution planning activity domain activity referred activity supposed re synchronize aligning owl foundational ontology process waits execution concurrent partly concurrent activities 
higher axiomatization partly possible natural linkage ontology time module dolce describing constraints temporal relations process elements executions plan 
owl need ontology time natural adopt existing ontology creating ontology scratch 
ontology plans allowed align relations owl components relate control constructs components 
owl relation described merely subrelation owl property domain 
aligned relation temporary component relation dolce 
firm foundation subrelation basic component functional proper part mereological relation partly temporally indexing relation characterized formal restrictions application basic concepts object description event improved design propose complement modularization owl contextualization design pattern 
contextualization allows move monolithic process description service representation different possibly conflicting views various granularity 
descriptions situations ontology provides basic primitives context modelling notion roles allows talk inputs outputs level independent objects play roles 
pattern results intuitive representation attribute binding clearly defined semantics scoping provided descriptions situations 
inputs outputs modelled precisely serve variables ontology 
single endurant example physical book play multiple roles different descriptions natural express book output respect process input 
easier represent requirement input process played instance output process putting constraints objects process task play roles expressivity required goes power owl 
intuitive representation components explicit scope descriptions belong 
addressed clearly defined limits scope necessary describe semantic relationships service descriptions example talk conflicts descriptions 
wider scope seen web services exist boundary world inside information system external world 
rare case pure information service web services carry operations support real world service 
functionality essential property service arises entire process comprises computational real wold activities 

suggestions improvement web service descriptions necessarily descriptions parallel worlds 
information systems world consist software manipulating representations information objects 
computational processes running real world books delivered destinations 
connection worlds information objects representations real world objects 
computational activities comprise part service execution real world 
example order needs entered web agent information system warehouse knows books deliver address 
distinction information objects events physical ones explicitly owl 
believe distinction important disambiguating nature services open environment semantic web 
separation naturally follows dolce foundational ontology distinction important part characterization concepts 
particular possible precise kinds relationships occur objects objects events 
relation dolce 
example dolce distinguish physical object book information object name book representation information particular description system string encoding 
relations provided dolce shown 
reader may note building descriptions situations ontology design pattern naturally extends owl representation service situ examples far may conjecture owl inputs outputs concern physical objects relating information objects message parts wsdl grounding 
fact lack distinction stands emergence semantic web identity crisis results ambiguous identifiers semantic web ontology languages rdf pepper schwab 
practice uri document web fragment document containing definition concept represent concept intended actual location web 
unfortunately standard scheme exists distinguish kinds identifiers need resolved different ways 
aligning owl foundational ontology ations 
service situations correspond possible executions service 
description service executions considered owl coalition purposes service execution monitoring 
believe direction pursued owl service requests formulated terms actual values input output parameters relatively narrow sets parameter values 
example customers clear idea book want buy kind book imagine intelligent matching engine case returns services offer particular book category books returning known book selling services 
exercise giving ontological foundation owl useful better understanding owl enriching additional formal semantics 
see results example benefits alignment foundational ontologies methodology applicable standards 
matter fact core ontology services applied framework ongoing efforts characterize web services commit specific software design framework generic social notion service 
example ontology web services architecture wsa working group interesting methods web service deployment problem solving methods motta interpreted aligned interoperable reusable ontological components 
alignment owl core ontology services means web services described owl automatically aligned dolce 
descriptions enriched adding dolce semantics example spatio temporal relations domain concepts involved 
imagine allow sufficiently sophisticated matching composition engine reason additional semantics order provide targeted matches result 
building tool scope 
difficulties encountered method ontology alignment required understand extent principles foundational ontology 
principles stem sciences philosophy psychology semiotics communication theory means re engineering kind requires considerable intellectual investment knowledge engineer moment 
think investment materialized core ontology services pay new web service ontologies aligned web service ontology communicate domain ontologies workflow ontologies service actors matching composition services overlapping domains tasks 
pay shows just taken reusable ontology foundational 
reusable ontology carry analysis owl order gain access conceptual alignment service domain task ontologies reusability need appropriate flexible foundational ontology 

summary summary chapter finalize analysis owl inspecting depth ontological perspective 
conclude owl exhibits severe problems ambiguity poor axiomatization loose design narrow scope failing fulfill clear semantics rich formalization requirement 
negative aspects solved aligning owl richly formalized extensively researched foundational ontology 
stack ontologies alignment dolce descriptions situations core ontology services 
note alignment dependent dolce descriptions situations may aligned foundational ontology 
parts service description deal service quality assessment left 
alignment foundational ontology time consuming intellectually demanding activity 
conceptual gap foundational ontology domain bridged development core ontology case core ontology services alignment standards domain wsmo irs performed easier reaching cross standard 
chapter analysis owl generic web service ontology 
part thesis focus solving problem acquiring web service domain ontologies 
part iii learning web service domain ontologies chapter framework learning web service domain ontologies generic domain ontologies equally important building semantic web service descriptions 
part thesis turn attention web service domain ontologies 
major issues related domain ontologies acquiring broad coverage domain ontologies difficult costly 
chapter describe factors hamper building high quality domain ontologies conclude requirements automatic solution problem 
ontology learning framework addresses requirements 
note novelty natural language processing methods way put generic framework specialized context web services 
chapter providing details implementation framework prototype system 
material chapter synthesized different publications 
published third international semantic web conference sabou th international world wide web conference sabou article journal web semantics sabou workshop published conjunction fourth international semantic web conference sabou pan 
content section summary article published th international conference information visualization sabou previous visualization published book chapters fluit 
important role semantic web service descriptions played web service specific domain ontologies 
despite importance domain ontologies web service descriptions exist building challenging task 
part thesis address problem semi automatically learning web service domain ontologies 
report stage aim get better understanding ontology learning task context web services identify potentially framework learning web service domain ontologies feasible technologies 
early learned context web services raises issues constrain development ontology learning solution 
designed framework performing ontology learning context web services addresses issues ways 
exploits particularities web service extract information ontology building 
particular sublanguage characteristics texts lead identification set heuristics 
heuristics implemented pattern extraction rules defined top linguistic information 
second learned ontologies suited web service descriptions contain static procedural knowledge 
implemented learning methods follow basic principles framework different linguistic knowledge 
method uses basic part speech pos information developed tested context wonderweb project sabou 
second method uses deeper dependency parsing techniques acquire linguistic knowledge 
designed tested data sets provided grid project sabou 
chapter framework methods 
chapter comparative evaluation methods context projects 
chapter structured follows 
start analyzing factors hamper building web service domain ontologies 
describing problem domain ontology building context research projects served case studies developing evaluating framework section 
analysis overview issues constrain development ontology learning solution web services context section 
ontology learning framework deals constraints concrete instantiations framework section 
implementation details framework prototype system provided section 
problem building web service domain ontologies section describe ontology building process took place context research projects wonderweb grid 
projects offered realistic requirements data sets evaluation standards 
cases detail kind data sources ontology building manually built domain ontologies 
manually built ontologies serve gold standards evaluating automatically learned ontologies 
highlight various difficulties encountered building domain ontologies 
benefit analysis twofold 
projects reveal major aspects web service ontology building difficult 
aspects prompt need automating extent acquisition domain ontologies 
second benefit analysis overview set issues constrain development ontology learning methods context web services 
constraints detailed section guided design ontology learning framework discussed section 
wonderweb semanticweb org www mygrid org uk 
problem building web service domain ontologies case study wonderweb rdf storage tools project description 
eu funded wonderweb research project aimed develop infrastructure large scale deployment ontologies semantic web 
project engineering infrastructure provided kaon application server semantic middleware system facilitates interoperability semantic web tools sabou 
ontologies describe functionality semantic web tools services core architecture middleware 
rdf storage query facilities essential components semantic web application ones integrated kaon required domain ontology describe domain 
wonderweb ontology describing rdf storage functionality project performs configuration semantically described web services agent design algorithms richards sabou van 
data sources 
tools offering ontology storage major survey gomez perez reported existence tools available web services survey 
problematic build quality domain ontology analyzing available web services 
web services simply exposures existing software web accessibility large overlap correspondence functionality offered web service underlying implementation 
observation domain ontology manually built analyzing apis rdf storage tools sesame broekstra jena mcbride kaon rdf api maedche 
data sources ontology building consisted javadoc documentation methods offered apis 
javadoc documentation contains general description method functionality followed description parameters result types exceptions thrown 
see example javadoc documentation add method jena api 
add add statements returned iterator model 
parameters iter iterator returns statements added 
returns model throws generic rdf exception manually built ontology 
manually built ontology contains concepts distributed main hierarchies see snapshot ontology 
hierarchy contains concepts denote set functionalities offered analyzed apis 
concepts grouped method concept similar meaning owl profile concept 
hierarchy contains main categories methods adding data removing data retrieving data querying 
naturally specializations methods exist 
example depending granularity added data methods exist adding single rdf statement ontology 
note hierarchy reflects certain conceptualization unique 
method hierarchy ontology contains elements rdf data framework learning web service domain ontologies data ontology method rdf storage ontology snapshot 
model hierarchy grouped data concept 
ontology rich knowledge useful reasoning tasks 
example definition methods enriched multiple ways imposing restrictions type cardinality parameters describing effects types special behavior idempotent 
building manual ontology indication api rich allow building web service domain ontologies 
encountered problems 
major impediment building domain ontology describing rdf storage tools choice data sources build domain ontology 
decision taken took weeks person build ontology 
time includes time read understand api time identify overlapping functionalities offered apis model ontology 
case study grid bioinformatics services project description 
grid uk epsrc science pilot project building semantic grid middleware support silico experiments biology 
experimental protocol captured workflow steps performed web services 
core infrastructure ontology describing functionality services semantics manipulated data 
key role ontology facilitate user driven discovery services time workflow construction 
contrast efforts owl wsmo ontology currently intended support workflow specification agent driven automated service discovery automatic invocation monitoring 
data sources 
ontology built manually initially documentation services source relevant terms 
services part 
problem building web service domain ontologies european molecular biology open software suite service collection referred services 
service detailed description containing short description service detailed information command line arguments examples input output file formats relation services collection scientific publications describing functionality 
generic process aligning gapped aligning global aligning pairwise global aligning local aligning multiple local aligning pairwise local aligning calculating displaying distinguishing filtering grouping inserting joining grid ontology snapshot 
manually built ontology 
manually built grid ontology larger complex rdf related ontology 
contains concepts distributed set distinct subsections covering domains molecular biology bioinformatics informatics generic tasks common upper level structure 
currently part ontology accounting concepts provides concepts annotating web service descriptions forms annotation tool 
obtained semantic web service descriptions facilitating service discovery wroe 
grid ontology contains small number concepts denoting functionality see snapshot part ontology 
observe different modelling principle compared rdf related ontology 
functionality concepts simply denote generic actions performed bioinformatics linked involved data structures 
possible explanation choice bioinformatics perform operations multitude data structures enumerating combinations impractical 
encountered problems 
factors hampered building ontology 
ontology building time consuming 
ontology initially built months effort ontology expert years experience building description logic biomedical ontologies 
second impediment dynamic nature field 
exponential rise number bioinformatics web services past year required months effort maintain extend ontology 
content currently lags needed describe services available community 
thirdly lack tools hampered process 
time www mrc ac uk software apps framework learning web service domain ontologies development tool support handling separate ontology modules minimal existence single substantial ontology 
fourth impediment lack guidelines build domain specific ontology relate upper level ontologies 
time daml predecessor owl development ontology curator devised generic web service description schema daml simplified reflect narrower requirements 
lacking guidance web services field curator relied design principles employed large open source biomedical ontologies rector rogers tambis ontology baker 
analysis ontology building process previous subsections lead major 
ontology building experienced difficult process projects 
prompts need semi automated solution problem 
thesis investigate ontology learning techniques semi automating domain ontology building 
second web service context presents set constraints taken account designing semi automatic solution 
subsection detail 

ontology building difficult automated 
case studies agree set problematic factors hampered ontology building activity 
high number textual documents 
ontology curators analyze read understand identify common concepts high number textual documents cases ensure quality ontologies 
number analyzed documents increasing web services available 
lack guidelines 
second impediment lack guidelines knowledge ontologies contain design principles follow 
resulted different groups building different ontologies describe web services domain reportedly happened bioinformatics lord 
difference modelling style seen compare ontologies produced case studies 
case study names functionality concepts denote action functionality participating data structure 
case study verb denoting action naming functionality concepts aligning 
factors ontology building time consuming activity months creating demand tools support ontology curators extract ontologies large rapidly changing textual data collections 

constraints taken account building automated ontology learning solution 
conclude ontology building activities differ aspects 
application domains different computer science vs biology related 
second different kinds data sources basis ontology building javadoc descriptions tool apis case study detailed service case study 
sources differ grammatical quality 
requirements ontology learning solution descriptions case study having lower quality perspective 
manually built ontologies different 
grid ontology larger complex rdf related ontology 
necessarily advantage experience shown small fraction ontology currently web service annotation 
despite differences characteristics exhibited case studies 
characteristics described detail section acted set requirements setting ontology learning framework specialized web services domain see section 
requirements ontology learning solution analysis ontology building process case studies identified set characteristics major influence design ontology learning solution 
characteristics relate aspects learning problem 
quality analyzed texts 
textual comments attached web services characterized low grammatical quality see subsection sublanguage features see subsection 
characteristics partially caused functioning existing ontology learning tools 
overcame limitations characteristics carefully choosing nlp tools ontology learning framework 
characteristics learned ontology 
domain ontologies employed web service descriptions conceptualize static procedural knowledge see subsection 
current ontology learning efforts centered extracting static knowledge 
adapted existing techniques extraction procedural knowledge 
dealing low grammatical quality low grammatical quality strong characteristic natural language descriptions associated web services 
descriptions short informative comments written developers 
typically punctuation completely ignored spelling mistakes 
naturally services users expose better documentation services barely contain snippets abbreviated text 
evident drawback low grammatical quality analyzed texts difficult process shelf nlp tools 
existing nlp tools trained high quality newspaper corpora offer considerable higher quality web service 
example rule part speech taggers sensitive capitalization words considering capitalized words nouns 
possible remedy preprocessing capitalization words sentence adding punctuation advantages working 
texts usually employ simple sentences complicated phrases 
reduced ambiguity favors deeper linguistic analysis 
example dependency parsers better short sentences complex phrases 
second advantage framework learning web service domain ontologies texts natural language specific belong sublanguage 
characteristic amenable automatic analysis discussed subsection 
dealing sublanguage characteristics software documentation general web service descriptions particular employ natural language specific way 
belong defined sublanguage grishman kittredge 
sublanguage specialized form natural language particular domain subject matter characterized specialized vocabulary semantic relations syntax weather reports real estate advertisements 
harris researchers study natural language restricted domains introduced notion sublanguage word classes defined sets words acceptable context sublanguage harris 
intuitive example medical domain context revealed tumor find words ray film scan 
words belong medical tests sublanguage word class 
constraints occurrences word classes sublanguage 
example valid sentences medical sublanguage form medical test revealed disease sentences form disease revealed medical test meaningless sublanguage grammatically valid 
constraints called selectional constraints 
word classes selectional constraints determined web service sublanguage analyzing 
example considering ext vb word class verbs indicate extraction process extract get retrieve frequently occurring pattern involves word class preposition easily determine output source action 
selectional constraint pattern ext vb output source 
examples extract data 
extract cds mrna translations feature tables 
get data 
retrieve features sequence 
knowledge word classes selectional constraints certain sublanguage greatly support natural language processing tasks information extraction grishman 
sublanguage analysis techniques direct applicability ontology learning word classes denote semantic classes 
selectional constraints help determine members word class knowledge members word classes involved restrictions 
major problematic aspects sublanguage analysis determining interesting word classes selectional constraints time consuming process 
promising research partly automating process grishman riloff 
intention design framework focus frequently occurring sublanguage features need laborious 
framework learning web service domain ontologies identified 
patterns rely lexical information syntactic structures 
example straightforward observations sublanguage verb indicates action performed web service 
word class action include identified verbs 
noun phrases appear action verb denote participant action forming word class action participant 
word classes easily identified relying minimal linguistic analysis 
occurrence word classes identifies web service functionality provides basic material ontology learning algorithm 
learning ontologies procedural knowledge ontology learning adapted deal characteristics input data produce ontologies fit task describing web services 
web service domain ontologies contain static domain entity concepts procedural knowledge functionalities offered web services 
existing ontology learning efforts knowledge focused deriving static knowledge 
contributions extend techniques acquisition procedural knowledge 
factor consider due lack guidelines modelling procedural knowledge web services different modelling styles emerging see different styles adopted ontologies case studies 
framework provides methods generating ontologies follow modelling styles 
framework extended follow novel modelling styles 
framework learning web service domain ontologies previous section identified set particularities condition ontology learning performed context web services 
characteristics require adaptation existing ontology learning methods 
literature study yielded ontology learning field offers wide range different approaches ontology acquisition 
targeted specific domains aware efforts analyze software documentation style texts 
generic ontology learning tools exist prominently text maedche staab velardi buitelaar available experimenting generic methods fine tuned certain domain 
tried extract domain ontology corpora text tool publicly available time experiments 
results suboptimal due strong particularities corpus hampered efficacy generic methods implemented tool 
section ontology learning framework tailored address particularities web services domain 
describe learning framework section detail steps 
framework learning web service domain ontologies overview framework ontology learning framework consists steps depicted 
briefly describe steps show characteristics web services context influenced design 
term extraction linguistic analysis extraction patterns ontology building ontology pruning main steps ontology learning framework 

term extraction 
step identify words corpus relevant ontology building 
word set words identified useful ontology building form term 
term extraction done steps 
linguistic analysis phase corpus annotated linguistic information 
set extraction rules applied linguistic information identify potentially interesting terms 
characteristics web services domain influenced design choices ways 
overcome limitations poor grammatical quality texts employed linguistic analysis different complexity 
evident results experiments complex analysis led better results 
small size corpus sublanguage features facilitated rule solution 
sublanguage features corpora allowed easily observe heuristics identifying important information implement extraction rules 

ontology building 
second step framework previously identified terms centralized analyzed transformed corresponding concepts hierarchical relations 
ontology building phase derives static procedural knowledge form hierarchy frequent domain concepts hierarchy web service functionalities 
strong sublanguage features analyzed corpora allow extracting terms highly relevant ontology building 
suffices simple ontology learning techniques adapt requirements domain extract procedural knowledge 

ontology pruning 
low grammatical quality corpus sublanguage characteristics cause suboptimal functioning linguistic tools 

framework learning web service domain ontologies derived concepts domain relevance 
pruning stage excludes potentially uninteresting concepts ontology 
subsections detail steps learning framework 
step term extraction term extraction phase identifies sets words terms corpus relevant ontology building 
phase realized different ways example linguistic analysis different complexity 
report instantiations framework different kinds linguistic knowledge 
instantiation pos uses basic part speech pos information second dep relies deeper dependency parsing techniques acquire linguistic knowledge 
different linguistic information requires implementing different extraction patterns extraction rules surface patterns case syntactic patterns second 
form pattern rules differ described follows heuristics remain 
independently technical implementation distinguish major categories rules type information derive 
rules identifying domain concepts rely observation domain concepts correspond nouns corpus 
small size corpora concise style web service majority nouns denote potentially interesting domain concepts 
extract entire noun phrases noun phrase consists head noun preceded arbitrary zero number modifiers nouns adjectives 
rules identifying functionalities implement previously described sublanguage characteristic verbs related nouns indicators web service functionality 
follows detail concrete instantiations term extraction step rely different linguistic information 
method part speech term extraction instantiation framework relies simplest linguistic information part speech tags pos 
pos tagger perform linguistic analysis phase 
tagger assigns word sentence corresponding pos tag 
example sentence tagger identified verb find nouns sites proteins adjective antigenic preposition 
find vb antigenic jj sites nn prep proteins nn 
general steps described framework set extraction rules applied derived linguistic information 
extraction patters form left hand side rules surface patterns pos tag linguistic information rely surface knowledge order words sentence 
framework learning web service domain ontologies 
identifying domain concepts 
stated extraction patterns written extract static domain concepts procedural service functionalities knowledge 
surface pattern extracts noun phrases implements heuristic observation described 
rule specified jape cunningham rich flexible regular expression rule mechanism 
det noun pos noun np np np pattern left hand side rule identifies noun phrases 
noun phrases word sequences start zero determiners identified det part pattern 
determiners followed zero adjectives nouns possession indicators order identified noun pos part pattern 
noun phrase finishes noun called head noun noun 
det noun pos macros act placeholders rules identifying terms part categories 
macros rely actual pos tag information 
example macro definition macro token category jj token kind word token category jjr token kind word token category jjs token kind word macro contains disjunction patterns 
means macro fire word satisfies patterns 
patterns identifies words assigned jj jjr jjs pos tags 
pos tags assigned category feature token annotation 
note annotations features gate cunningham encode various information analyzed documents 
word sequence identified left hand side rule referenced right hand side 
text snippet identified part pattern associated variable reused right hand side 
example np identifies noun phrases 
string right hand side rule specifies strings denoted np annotated np annotation 
example sentence rule identifies antigenic sites noun proteins noun noun phrases 

identifying functionalities 
surface pattern identifies pairs verbs noun phrases potential functionality information added domain ontology 
having identified noun phrases np verbs vb previous rules jape rule identifying annotating functionalities straightforward 
vb np funct funct functionality notation convention terms extracted corpus 

framework learning web service domain ontologies example sentence rule identifies find antigenic site verb phrase denoting possible functionality bioinformatics 
method dependency relation term extraction second instantiation framework dep experiment richer linguistic information pos tags dependency relations 
dependency parsing offers deeper linguistic analysis pos tagging commonly method computational linguistics 
dependency relation asymmetric binary relation word called head word called modifier 
minipar lin state art dependency parser reported high performance precision recall respect dependency relations 
example list table minipar analysis example sentence 
word information provided position sentence ii form appears sentence iii lemma iv part speech name dependency relation word head obj vi position head word modified current word 
example antigenic adjective modifies noun sites sites object verb find 
pos 
word lemma pos relation head find find antigenic antigenic mod sites site obj prep mod proteins protein table example minipar output 
benefit richer linguistic information potentially interesting information extracted easier way 
naturally heuristics extraction patterns re implemented 
case patterns defined syntactic relations sentences called syntactic patterns 

identifying domain concepts 
category patterns identify domain concepts explore nn noun modifier noun mod adjective modifier noun dependency relations detect noun phrases 
relations identified head noun modifiers annotated noun phrase 
regular expressions encode complex patterns allow variables 
extra java code right hand side jape extraction rules accomplish 

identifying functionalities 
pattern functionality identification relies obj relationship identifies pairs verbs objects 
object head noun phrase noun phrase extracted 
pattern relies output previous np extraction pattern 
pattern captures desired information majority cases exceptions 
exceptions occurs verbs sentence refer object 
example sentence replace delete sequence sections suggests replace sequence section delete sequence section valid framework learning web service domain ontologies position word lemma pos relation head replace replace lex mod delete delete lex dep sequence sequence nn sections section obj table verb dependency example 
position word lemma pos relation head pick pick pcr pcr nn primer obj nn zation zation conj table noun dependency example 
ties domain wish extract 
minipar output directly encode verb object relation delete section see table 
hand analysis denotes dependency relation verbs sentence 
verbs related logical operator bound single noun object verbs 
extraction patterns identifies cases verbs related conj relations 
relations denote cases verbs related logical operators reverse complement sequence 
cases logical dependency verbs partially specified explicitly define dependents transitivity relation dependency dependency dependency 
exception objects conjunctive relation 
example pick pcr hybridization wish extract pick pcr primer pick hybridization functionalities 
minipar output specifies verb object relation see table 
knowing conjunctive relation deduce plays object relation respect verb pick 
just verbs written pattern identifies conjunctive nps deduces additional knowledge 
patterns identify dependency verbs objects performed pattern identifies functionalities 
summarizing section note sublanguage nature web service specific corpora allowed extract sufficient material ontology building relatively simple shelf natural language processing techniques 
advantages simple extraction methods 
fast 
second rely shelf thoroughly researched high performance techniques pos tagging dependency parsing 
pattern extraction rules adjusted 
framework learning web service domain ontologies extended users system needs particular data sets 
step ontology building second step framework ontology building collects results pattern extraction 
noun phrases basis deriving data structure hierarchy functionality information building functionality hierarchy 
employ lemma base form extracted terms ontology building 
site automatically extracted site concept 
building data structure hierarchy 
observed terms mentioned analyzed corpora especially bioinformatics corpus high level compositionality sense incorporate meaningful terms proper substrings 
observation confirmed study gene ontology terms proved terms domain compositional nature 
observation proved study compositionality indicates existence semantic relationship terms 
term obtained adding modifier term specific 
translates ontological subsumption relationship 
hierarchy building algorithm reflects observations 
concept lexicalization proper substring concept lexicalization site generic corresponding subsumption relationship added ontology 
lexicalization concepts substring speculate substring represents valid domain concept appear stand term corpus add parent concept example depicts site data structure hierarchy 
compositionality hierarchy building called vertical relations buitelaar velardi cimiano 
building functionality hierarchy 
clear guidelines field semantic web services functionality hierarchies look 
owl irs wsmo style modelling functionalities includes verb action directly involved data element functionality 
modelling style followed case study see 
hand bioinformatics domain ontology developed case study functionalities concepts denoting action aligning connection data structures see 
provide ontology building modules produce functionality hierarchies fulfilling framework learning web service domain ontologies modelling styles creating verb noun phrase delete verb deleting concepts 
note take strong stand right way model functionality hierarchies 
reasons 
initial iteration concerned correctly extracting needed information way conceptualized right information extracted conceptualized different ways 
second acknowledge important issue requires investigation believe modelling guidelines provided semantic web services technology 
fact observation experimental performed different domains benefit different ways conceptualizing functionality knowledge 
believe technology domains common guidelines emerge appropriate ways model functionalities probably dependent domain characteristics 
constrained particular conceptualization tool allowed extension different functionality hierarchy building modules 
step ontology pruning main steps framework term extraction ontology building result initial ontology 
steps rely initial heuristics select potential concepts 
capture strong sublanguage characteristics heuristics perfect derived concepts domain relevant 
irrelevant concepts derived due suboptimal functioning nlp tools low quality texts 
pruning module aims filter irrelevant concepts learned ontologies 
maedche describes major strategies performing ontology pruning maedche 
baseline pruning strategy assumption frequent terms corpus denote domain concepts 
conversely concepts low frequency terms eliminated ontology 
second pruning strategy relative pruning frequency terms analyzed corpus independent corpus 
concepts rely terms frequent analyzed relative corpora maintained ontology 
lacking corpus domains baseline pruning strategy current implementations 
consider average frequency req learned concepts threshold value prune concepts lower frequency value 
req freq heuristic pruning observation noun phrases included functionality annotation rules denote domain concepts 
low frequency data structure concept lexicalization identified functionality annotation corresponding functionality concept pruned data structure concept pruned 

framework learning web service domain ontologies possible extensions framework extraction framework instantiations extracting basic information web services functionality types domain concepts play role parameters 
ongoing experiments explore new ways extend basic framework order acquire richer information services 
section briefly overview plans extending framework 
note chapter presents evaluation basic framework extensions 
possible extension identify parameters able distinguish inputs outputs 
refined rules defined 
example word front noun phrase indicates plays role input 
currently working identifying heuristics 
example heuristics identify inputs np np gets current weather zip code 
amount interest rate term service calculate load payments 
vb action np output nps inputs calculates distance zip codes 
translates text variety languages 
second source information determining inputs outputs functionalities wsdl files describe web services 
particular names methods messages contain useful information service 
preliminary investigations seams wsdl files accurate providing information textual descriptions attached web services 
idea combination sources give best results 
operational features inputs outputs features important choosing service 
particular geographic area service active important consideration 
ontology learning framework able extract geographical constraints indicated web services concepts describe geographic radius service 
note issue evident online web service repositories services different parts world acting different geographic regions registered 
online web service repositories attempt deduce feature country extension url service description published 
seldom indicates geographic region service built 
example web service validates enhances contact information address india published com address conversely web service url contains certain country identifier france perform service independent geographic constraints case example service cipher decipher 
ws com wsdl www com fr crypto cesar wsdl framework learning web service domain ontologies alternative solution determining geographic constraints service named entity recognition ner systems 
systems automatically identify geographic entities persons organizations free text 
ner technology matured previous decades reach performances precision recall generic system annie precision recall systems tuned needs particular domains cunningham 
search swedish telephone subscribers 
search uk index 
webservice return longitude latitude height city 
france 
lookup atm locations zip code 
example web service descriptions experiments show annie ner system recognizes swedish uk france corresponding countries 
observed cases restriction strengthened constructions country country 
constructs easily identified regular expression rule mechanism example term extraction step framework 
possible extension framework level algorithms 
example complex algorithms derive taxonomy hierarchy 
direction experimented encoding set hearst patterns 
occurrences patterns rare textual sources attached web services 
fact analyzing descriptions extracted online web service repository contained subsumption information identifiable hearst patterns 
explore wordnet hierarchy learning domain 
implementation details important part implementation prototype system 
aimed build system easy developers users ontology learning methods 
user friendly tool brings closer ultimate goal facilitating process building web service domain ontologies 
aim modular easy run understand implementation easily modified adapted new application domains 
achieve gate framework cunningham sections 
second visual techniques provide user friendly easy understand presentation data sets derived ontology learning extracted terms learned ontology order support frequently occurring tasks section 
www com 
implementation details gate framework developers ontology learning solutions gate offered features important development ontology learning tools modularity traceability portability evaluation 
gate available generic nlp frameworks developed offer robustness re usability experimental repeatability scalability bontcheva 
knowledge nlp framework offer support ontology language engineering 
application built part framework inherits features 
gate infrastructure framework developing natural language processing applications 
processing resources processing algorithms pos taggers dependency parsers language resources data elements corpora ontologies combined applications programmatically visually 
gate offers wide range processing resources possibility extend set customized modules 
building application gate user interface 
modularity 
gate allows building modular applications 
applications built pipelining set processing resources programmatically visually 
gate visually load nlp modules pos taggers data structures corpora ontologies combine different applications 
example depicts gate user interface 
left pane shows currently loaded processing language resources 
right pane shows resources combined pipeline build application called 
resources run documents provided test corpus 
note application performs framework learning web service domain ontologies linguistic analysis term extraction steps part speech ontology learning method pos 
inspecting annotations gate user interface 
traceability 
easy combination processing resources gate provides user interface inspection results produced resources 
input output data processing resources represented terms called annotations 
annotation description added certain part analyzed text 
annotations added individual words word compounds sentences paragraphs 
annotations easily visualized gate 
inspect documents corpus highlighted left pane language resources annotations 
text document seen bottom middle pane 
right pane contains annotations grouped called annotation sets 
example tokens annotation set contains annotations depict different information 
token annotation added identify tokens sentence 
np annotation labels noun phrases text 
functionality annotation set contain funct annotation spreads word combinations denote functionality offered service 
annotation selected instances highlighted text 
case np funct annotations highlighted 
note overlaps annotations 
name annotations contain set features attribute value pairs 
view features top middle pane 
example funct annotation feature contains label noun phrase np feature value verb participates functionality verb 
annotations easily inspected documents allowing 
implementation details insight results processing resources 
portability 
modular architecture gate easy adapt application novel needs simply replacing modifying modules 
example different language processing modules adjust jape rules 
evaluation 
gate offers mechanisms quantitative evaluation 
compares sets annotations added document 
functionality useful compare automatically annotated document manually annotated version document compare annotations added different systems different versions system 
evaluation tool benchmarking tool performs evaluation corpus level document level 
tool compares annotating assigned documents different versions corpus 
precision recall measure compared document level corpus level 
annie english tokenizer annie sentence splitter annie pos tagger jape rules pos pruning pos minipar external jape rules dep pruning dep gate implementation pos dep 
concrete implementations implemented ontology learning methods gate 
shelf techniques methods rely readily available gate 
example depicted left hand side linguistic analysis step part speech method pos entirely performed processing resources offered gate tokenizer annie english tokenizer sentence splitter annie sentence splitter hepple pos tagger hepple available annie pos tagger processing resource 
case dependency method dep see right hand side performed linguistic preprocessing external gate minipar lin 
approaches extraction patterns implemented jape regular expression rule mechanism cunningham part gate 
final steps jointly performed single module pruning implemented gate processing resources usable gate gui 
framework learning web service domain ontologies data methods linguistic information structures identified patterns represented annotations analyzed texts 
extraction rules individual modules operate annotations represent output annotations 
greatly benefitted support gate implementation 
briefly mention important benefits reuse existing libraries document management ontology representation 
second declaring parts method gate processing resources offered annotation system data transfer mechanism parts run manage tool gate gui 
possible build configure modular applications visually selecting existing processing resources provided gate select different corpora inspect annotation output processing module 
allow easy debugging extraction process transparent users increasing usability tool 
data storage evaluation facilities gate development fine tuning stages prototype 
visual support ontology learning previous section discussed implementation details prototype showed gate achieved usability features important developers 
section discuss visual techniques learned ontologies tool easier developers users 
systems exist exploit visualization techniques semantic web 
example ontology authoring tools gomez perez offer visualization facilities support needs ontology development stage 
analysis tools detailed fluit concluded visualizations authoring tools mainly schema 
reason users tools ontology engineers need get insight complexity ontology build 
tools employ schema visualization techniques primarily focus structure ontology concepts relations 
schema visualizations graphical distinction schema information instances 
result scale visualise instances 
fail show instance level overlaps classes 
ontology authoring tools aware ontology learning approaches employ visual techniques 
text maedche staab tool employs schema visualization extracted ontologies 
second conjunction visualization technique developed related terms extracted corpus 
text relies graph visualization extracted concepts 
useful visualizations depict relations entities type concepts terms 
due complexity ontology learning crucial know entities different types interrelate documents concept extracted 
achieve cluster map fluit visual technique developed dutch biz 
implementation details note commonly schema visualization techniques cluster map technique optimized visualizing large instantiated ontologies 
cluster map visualize light weight ontologies describe domain set classes concepts hierarchical relation 
technique visualizes instances set classes classification classes 
due specialization relationship encoded hierarchy set objects subclass subset superclass 
set subclasses class incomplete union contain objects superclass 
classes share instances overlapping specialization relationship holds 
characteristics quit common taxonomies 
difficult show satisfactorily textual representations schema techniques currently semantic web 
cluster map offers alternative matter 
cluster map example 
shows example cluster map visualizes set documents classified topics discussed documents 
small sphere represents instance 
classes represented rounded rectangles stating names cardinalities 
directed edges connect classes point specific generic load management subclass management 
balloon shaped edges connect instances specific class es 
instances class membership grouped clusters similar venn diagrams 
example contains clusters represents overlap load management energy management classes 
organization graph computed variant known algorithm eades 
hand class cluster nodes repel 
hand edges connecting classes clusters classes produce attractive force connected nodes springs 
added value visualisation lies expressivity 
classes relationships vocabulary domain easy detect 
immediately apparent items belong multiple classes classes overlap 
subclasses root class incomplete union cover superclass members management classified 
interesting aspect visualization geometric closeness map related semantic closeness 
consequence graph layout algorithm 
framework learning web service domain ontologies classes semantically close share objects 
objects classes share closer represented 
objects semantically close belong class es 
objects class membership clustered 
prototype adapted cluster map support frequently occurring situations development deployment ontology learning method see details sabou 
different visualizations embedded gate framework plugins 
plugins supports evaluation ontology extraction complements text evaluation tools offered gate 
second plugin demonstrated visualizes extracted ontology shows derived concepts relate documents extracted 
third plugin helps identifying concepts derived data sources cases ontology learning performed multiple different corpora 
situation description 
ontology learning methods perfect 
extracting irrelevant concepts limited grouping concepts generic concepts discovering abstractions discovering relations 
automatically extracted ontology inspected domain expert judges domain relevance concepts enriches ontology important abstractions relations 
understand meaning concept evaluate correctness necessary inspect contexts corpus access documents extracted 
discover new relations concepts possible abstractions insight provided selected set concepts interrelate document level 
proposed visualization 
support analysis tasks cluster map traditional way extracted concept forms cluster map class documents extracted instances 
document instance contains position terms resulted deriving concepts 
documents concept learned added top class 
examples 
visualization allows accessing documents concept learned 
quick access evidence information essential understanding intended meaning concept 
detect relations set extracted concepts visualize concepts analyze resulting image 
example visualized functionality concepts extracted domain bioinformatics 
observed groups interconnected functionalities emerged see part 
group represents functionalities offered simultaneously web services 
closer look observe group part contains functionalities search modify content second group part find functionalities concerned input output operations reading writing 
domain expert easily access simple mouse click inspect documents interrelate concepts decide case set new categories 
example part visualized method evaluating creating datastructure type concepts derived case study rdf stores 
obtained visualization groups terms formed verbs 
visual closeness concepts rightly suggests shared characteristics 
group evaluation contains concepts involved evaluating query repository server query 

implementation details understanding extracted ontology 
related web service functionalities method datastructure concept type identification corpus detecting similar concepts verb selectional restriction 
second group contains concepts describe elements rdf data model 
principle visualization equivalent selectional restriction technique ontology learning detect semantically related concepts 
cimiano 
technique identifies terms occur syntactic context semantically related 
example objects verb drive drives car drives truck share characteristic belong semantic class vehicle 
task frequently performed method developer measure ontology covers domain 
example application domain expect document described method datastructure concept 
visualizing documents corpus top documents method concept extracted documents resulting datastructure concept see part documents fulfil expectation concepts extracted documents 
easy filter documents provided type concepts investigate reasons 
solving improve ontology learning 
section described set visualizations support frequently occurring tasks development deployment ontology learning tools 
build visualizations exploit fact cluster maps visualize relations types entities instances classes 
visualizations different types ontology learning related entities documents terms concepts document sources play role instances classes support different tasks 
cluster map technique offers powerful visual paradigm easily adapted support wide range generic analysis comparison monitoring ontology learning specific evaluation tasks 
interactive gui allows creating framework learning web service domain ontologies different visualizations just mouse clicks 
aware flexible cluster map paradigm requires certain amount training full potential 
especially true different entities play role classes instances 
novice user confusing changing different visualizations 
generally believe visual techniques enhance development deployment ontology learning methods 
naturally cluster map technique 
techniques useful support situations 
experiments backed rigorous user study encouraging pursuing integration ontology learning solutions visual techniques 
summary chapter analyzed domain ontology building process case studies 
study high number web services exist domain current lack modelling guidelines hamper building process motivate development tools support ontology building domain 
observed set characteristics specific web services context need addressed designing semi automatic solution problem 
design ontology learning framework influenced findings 
framework aims provide support dealing high number web services 
allows deriving ontologies built different modelling styles order compensate current lack guidelines direction 
characteristics web services context related quality analyzed data sets nature derived knowledge influenced main design decisions choice nlp techniques rationale extraction rules output format conceptualization stage 
notable relatively simple shelf natural language processing techniques sufficed implementing framework 
rely studied techniques fast easily adjusted particular needs domain 
implemented framework prototype system gate nlp workbench extending visual support presenting results ontology learning methods 
chapter detail issues related evaluation framework 
chapter evaluation previous chapter framework adapts ontology learning context web services 
described learning methods framework employ linguistic analysis different complexity 
chapter evaluate framework 
evaluate methods different domains verifying quality extracted ontologies high quality hand built ontologies domains 
evaluation indicates extraction applicable different domains deeper linguistic analysis leads better results results achieved relatively simple shelf techniques 
continuously extended updated view ontology learning evaluation 
considerations issue published ecai workshop ontology learning population ecai olp sabou 
metrics refined follow book chapter sabou papers published third international semantic web conference sabou th international world wide web conference sabou article appeared journal web semantics sabou 
evaluation integral part development tool algorithm 
evaluation previously framework represented important part 
performing evaluation straightforward standard benchmarks defined criteria evaluating ontology learning algorithms 
performed partial evaluations developed methods framework 
verified performance part speech method pos data sets provided case study sabou evaluated dependency parsing method dep context case study sabou 
evaluation experiments applying methods different data sets slightly different evaluation metrics strategy evolving 
partial results answer questions framework applicable domains 
goal build framework adapts ontology learning context web services evaluation independent domain analyzed services 
proof domain independence methods perform similarly data sets different domains 
extraction method performs best 
methods evaluated different data sets slightly different evaluation criteria hard compare 
achieve fair comparison apply methods data sets set evaluation strategy metrics 
approach find answer questions take evaluation step applying methods data drawn case studies evaluation criteria assessing methods 
ontology learning evaluation non trivial task start chapter giving overview evaluation practices community section 
subset practices evaluation described detail section 
describe experimental corpora section discuss experimental results section 
conclude section 
ontology learning evaluation practices evaluation ontology learning important largely unsolved issue reported papers workshop buitelaar 
evaluation stages typically performed evaluating text ontology learning methods term level evaluation assesses performance extracting terms relevant ontology learning corpus 
naturally quality term extraction direct influence quality built ontology 
evaluation easily performed established recall precision metrics 
ontology quality evaluation assesses quality learned ontology 
different ontology evaluation approaches identified maedche maedche depending considered quality ontology 
application specific ontology evaluation quality ontology directly proportional performance application uses 
papers report successfully ontologies various tasks text clustering classification tasks hotho hotho information extraction faure poibeau 
initial considerations task ontology evaluation reported porzel 
problematic issues surface evaluations 
difficult asses quality supported task performance application search 
second experimental environment needs created factors ontology influences performance application 
case complex applications hard achieve clean experimental environment 
gold standard ontology evaluation quality ontology expressed similarity manually built gold standard ontology 
cases experimental data corpora extracted gold standard ontologies downloaded fromhttp www cs vu nl marta experiments extraction html 

chosen evaluation criteria authors gold standard ontology extracted different corpora learning method 
authors gold standard ontologies extracted strictly automatically analyzed corpora cimiano 
difficulties encountered approach comparing ontologies difficult 
maedche staab works measuring similarity ontologies compare ontologies different levels lexical conceptual 
lexical comparison assesses similarity lexicons set labels denoting concepts ontologies 
conceptual level taxonomic structures relations ontologies compared 
gold standard evaluation approach assumes gold standard ontology contains extractable concepts certain corpus contains 
reality gold standards omit potential concepts corpus introduce concepts sources domain knowledge expert 
evaluation results influenced imperfections gold standard 
compensate errors concept concept evaluation domain expert performed 
evaluation 
expert evaluation performed cases gold standard available construction costly just sake experiment 
ideally evaluation performed experts 
chosen evaluation criteria employ combination evaluation strategies asses compare quality implemented learning methods 
asses performance term extraction algorithm marked 
evaluate ontology quality rely domain experts concept concept evaluation 
domain experts case studies curators corresponding gold standard ontologies 
compare extracted ontologies gold standard ontologies provided case study 
follows methodology metrics performing type evaluation 
term extraction evaluation stage concerned performance term extraction modules 
measure performance modules manually identified relevant terms extracted corpus 
misspelled terms considered extraction 
benchmark evaluation tool offered gate compare set terms ones identified pattern extraction 
term recall recall quantify ratio manually classified relevant terms extracted analyzed corpus terms extracted corpus 
term precision recision denotes ratio correctly extracted terms extracted terms 
compute measure assigning equal importance precision recall 
recall recision evaluation manual ontology building expert domain knowledge learning building evaluation gold standard 
ontology comparison corpus ontology learning learned ontology terms 
term extraction chosen evaluation strategies 
measure expert evaluation recision recall recision recall 
expert evaluation evaluation stage domain expert performs concept concept evaluation learned ontology 
compute ontology precision represents percentage domain relevant concepts extracted ontology op recision 
observed manually built gold standards omit concepts corpus introduce concepts named corpus 
evaluation step domain expert distinguishes categories relevant concepts exist gold standard correct omitted gold standard new 
irrelevant concepts marked spurious 
terms categories concepts op recision defined follows op recision correct new correct new spurious note evaluation wish estimate domain representative learned ontology precision need calculate number gold standard concepts discovered automatic method number simply represents difference number gold standard concepts number correctly identified concepts 
consider recall learning method section 
evaluate quality taxonomic relations 
count number taxonomic relations discovered domain relevant correct new concepts 
expert assesses taxonomic relations 
chosen evaluation criteria express isa relation 
recision metric ratio correctly identified isa relations taxonomic relations domain relevant concepts automatically discovered 
recision useful side results expert evaluation opinion suggestions experts see section 
qualitative evaluation provided valuable ideas improvements 
ontology comparison final evaluation stage compare extracted ontology manually built gold standard ontologies corresponding domain 
lexical comparison metric denotes shared concepts manual extracted ontology 
metric originally defined maedche staab relative number hits renamed cimiano lexical overlap lo 
lo set domain relevant extracted concepts correct new lo set concepts gold standard 
lexical overlap ratio number concepts shared ontologies correct intersection sets number gold standard concepts noted 
intuitively metric equivalent recall previously defined represents precision 
correctly extracted concepts equivalent single concept gold standard equivalent counted 
lo lo contains individual concepts noted 
lo lo lo lo correct extracted ontology bring important additions manual ontology highlighting concepts ignored creation 
aware previously defined metric measuring additions 
define ontological improvement oi ratio domain relevant extracted concepts gold standard noted new concepts gold standard 
oi lo lo lo new comparing taxonomic structures gold standard extracted ontology employ similar strategy expert evaluation stage 
count number taxonomic relations discovered gold standard concepts 
count number relations qualified isa relations gold standard 
ratio numbers 
taxonomic comparison simpler comparison introduced maedche maedche 
feasible performed compared hierarchies deep overlap quite small 
evaluation experimental corpora experimental corpora provided research projects 
case study rdf tools 
corpus rdfs contains documents extracted documentation tools build manual ontology documents jena api kaon rdf api sesame api 
document corpus contains javadoc description method 
previous showed short textual descriptions methods contain information javadoc elements method syntax description parameters introduce lot noise severely diminishing performance extraction sabou 
short descriptions experiments 
exclude syntax method introduces irrelevant technical terms java com org 
note earlier building software libraries information retrieval methods adopted similar decisions exclude syntax details analyzed corpus helm maarek 
show examples typical descriptions analyze list resources subjects statements 
subsequent operations resource may modify model 
jena returns resource uri unique model 
kaon uploads data inputstream repository 
sesame case study bioinformatics services 
corpus domain bio consisted individual bioinformatics service descriptions available web site worked short method descriptions significant web service descriptions general similar descriptions online web service repositories detailed descriptions services specific layout extraction easier 
biased extraction methods particular kind documentation 
analyze short descriptions replace delete sequence sections 
find antigenic sites proteins 
cai codon usage statistic 
results section evaluation comparison implementations framework 
ran implementations corpora section evaluation criteria described section evaluate 
ontology building algorithm adjusted follow modelling principle employed gold standard ontology producing compound functionality concepts case study simple action verb concepts case study 
order get insight www mrc ac uk software apps www net 
results efficiency pruning heuristics evaluated pruned completing processing steps un pruned excluding processing step version extracted ontologies 
term extraction results evaluation stage see table indicate better performance dep domains measure higher dep pos 
corpus dep resulted higher recall pos precision slightly decreased 
context ontology learning general web service domain ontology learning particular recall important precision domain experts prefer deleting concepts missing important concepts 
note results precision range system precision ranging 
obtain higher recall compared values achieved 
rdfs bio pos dep pos dep measure table term extraction results case studies 
errors due mistakes output linguistic analysis tools 
known generic tools perform worse specialized corpora newspaper style texts initial training 
example verbs sentence mistaken nouns causing lower recall 
performance values remain range train linguistic analysis tools specific sublanguage 
note performance dependency parsing sensitive length complexity analyzed texts 
fortunately majority sentences corpora simple allow correct analysis 
partially explains better performance dependency parsing implementation 
second source errors spelling punctuation mistakes 
rdf related corpus rdfs perspective lower quality bioinformatics corpus bio affects recision extracted set 
leads textual sources web service catalogs preferable low quality code documentation 
expert evaluation results expert evaluation extracted ontologies shown table rdf domain table bioinformatics domain 
data evaluation sets dep method resulted slightly decreased ontology precision direct consequence lower term extraction precision see tables 
explanation correlation incorrect extracted terms lead incorrect concepts 
trace cause behavior quality analyzed texts conclude low quality texts lead precise ontologies 
pruning mechanism increased ontology precision domains methods leading precisions range dep case study pos case study 
means half concepts pruned ontologies relevant analyzed domain offering start building domain ontology 
pruned pruned pos dep pos dep correct new spurious lo oi table evaluation results rdf domain case study expert evaluation ontology comparison phases 
pruned pruned pos dep pos dep correct new spurious lo oi table evaluation results bioinformatics domain case study expert evaluation ontology comparison phases 
taxonomic evaluation results see tables show methods identified similar number taxonomic relations corpus rdfs bio 
naturally bio resulted taxonomic relations high level compositionality bioinformatics concepts 
corpora extraction methods extracted taxonomic relations correct recision 
indicates hierarchy building algorithm simple performs 
similar drawn comparative study taxonomy building algorithms proved vertical relation algorithm highest precision cimiano 
algorithm low recall able identify compositionality taxonomic relations 
note 
results correctly discovering taxonomic relations existing gold standards new taxonomic relations discovered gold standard gold standard concepts gold standard new concepts new new concepts 
effect pruning mechanism taxonomic structures different corpora 
bio half correct taxonomic relations disappear pruning rdfs effect pruning radical 
major reasons behavior bioinformatics due compositionality terms deep data structure concept hierarchies created frequency concepts decreases generality 
low frequency specialized concepts pruned important taxonomic relations deleted 
solution decrease pruning threshold advancing deeper hierarchy 
ontology precision high pruning adopted lower value pruning threshold 
qualitative evaluation 
quantitative results derived interesting observations comments domain experts performed evaluation 
recall vs precision 
seams ontology major importance ontology engineer 
concepts included final ontology useful give insight domain guide abstraction activities 
concentrate increasing recall term extraction process expense precision 
done extending original set extraction patterns cover cases adjusting extraction tools sublanguage training 
synonymy 
evaluation expert recognized potential synonym sets find search identify extract locate report scan fetch retrieve return pick select produce calculate reverse invert 
synonymy information important piece knowledge semantic web services 
especially search matchmaking algorithms benefit knowing concepts equivalent 
ontology engineer decide include synonymy ontology different ways 
example maintain concepts describe synonymy explicit mapping owl 
alternatively choose maintain single concept synonym set link lexical synonyms concept 
automatic acquisition synonymy information remains important 
abstractions 
experts redistributed extracted domain concepts domain view 
example subclasses identified protein belong different domains molecular biology bioinformatics placed corresponding hierarchies accordingly 
abstractions need manually created ontology engineers view domain 
abstraction step considerably supported expert overview relevant domain concepts 
support 
curators considered extracted ontologies useful start deriving domain ontology 
complex structures directly included final ontology site hierarchy provided helpful hints certain concepts interrelate 
appreciated contribution learned ontologies suggested new additions manually built ontologies 
evaluation ontology comparison final evaluation step perform comparison automatically learned ontologies corresponding manually built gold standard ontologies 
case study unpruned ontology extracted dep contains half concepts existing manually built ontology lo new potential concepts oi table 
values lower unpruned ontology derived pos 
lexical overlap computed individual correctly extracted concepts shown brackets 
behavior pruning mechanism satisfactory 
pruning doubled ontology precision pos dep slightly affected lexical overlap 
ontological improvement affected reduced pos newly identified concepts possibly low domain relevance 
pruning distinguishes important domain concepts important concepts 
pruned pruned pos dep pos dep recision table taxonomy evaluation results rdf domain case study 
pruned pruned pos dep pos dep recision table taxonomy evaluation results bioinformatics domain case study 
case case study comparison bioinformatics gold standard ontology currently web service description shows trend registers success rdf case study see table 
unpruned ontologies cover manual ontology methods suggest new possible concepts oi 
pruning behavior satisfactory case reduces lexical overlap ontology improvement half resulting low ontology precision increase 
behavior explained fact 
results low frequency specialized terms pruned important see explanation 
lexical overlap low 
major cause ontological losses curator included concepts fields biology bioinformatics informatics corpus 
relied expert knowledge ontologies domain see section 
see example organism primate hierarchy hierarchy measurement units 
curator relied set compound concepts define different views services 
example left hand side contains snapshot set concepts define different kinds services compositionality types inputs outputs 
concepts define views represent concepts gold standard 
algorithm able learn views feasible extend direction 
unit composite unit primitive unit length unit metres temperature unit celsius fahrenheit kelvin organism organism multicellular organism animal animal animal vertebrate animal mammal animal primate example parts grid ontology mentioned corpus 
mygrid service accepting go term id mygrid service accepting bioinformatics data mygrid service accepting bioinformatics data datastructure mygrid service accepting biological sequence mygrid service operation accepting protein sequence mygrid service operation composed retrieving mygrid service operation producing medline mygrid service operation producing alignment data mygrid service operation producing bioinformatics data hierarchy different views defined services 
ontological improvement high 
results suggest grid ontology curator worked independently corpus building gold standard missed concepts named corpus 
interviewing revealed examination corpus 
just time ontology development concepts added needed evaluation describing certain service 
note worked subset analyzed corpus service descriptions analyzed 
name changes account mismatch 
curator expanded abbreviations created preferred term synonyms retrieving fetch get return 
fact acknowledged automatic approach leads faithful reflection terms community uses describe services 
comparison ontology learning tools primary goal research adapting existing techniques web services context developing new ones attempted compare tool existing tools 
task hampered factors 
ontology learning tools publicly available download experimentation 
know 
tools essentially ontology learning provide set generic techniques allow customization user needs 
example tools offer way encode domain specific extraction patterns 
tuning tools execute patterns elements tool tailored web services expect similar results 
differences caused performance underlying language processing tools tools different pos taggers 
despite considerations ran standard term extraction pattern data set provided case study 
results comparison results methods table 
expected results lower obtained domain specific extraction patterns 
particular lexical overlap ontology improvement metrics rich values lower half obtained methods 
straightforward explanations standard pattern ignores functionality type concepts 
concepts specific web service context irrelevant generic ontology learning tasks 
lower performance indicates fine tuned context web services 
case results suggest non generic ontology learning tool 
pruned pos dep correct new spurious lo oi table comparison methods data provided case study 
complete comparison searched performance results give insight tool compares 
difficult ontology learning related papers report evaluation results metrics incompatible 
cimiano papers related 
discussion reported formal concept analysis ontology learning algorithm lexical overlap reached maximum value 
provide result indication typical performance value aware give overview state art performance ontology learning 
fact ontology learning community just reached stage effort establishing evaluation benchmarks metrics adopted community purpose able compare different efforts 
discussion chapter chapter motivated observation domain ontologies major importance semantic web services acquisition time consuming task difficult increasing number web services 
ultimate goal research build tool support semi automatic ontology learning context web services 
chapters stage research pioneered ontology learning web services 
ontology learning context web services raises non trivial questions inheriting unsolved issues ontology learning general 
aim better understand problem hand investigate technologies feasible 
addressed set fundamental issues data source selection choosing appropriate learning algorithms deciding evaluation methodologies metrics considering usability 
contribution lies identifying tackling issues offering partial solutions 
discuss findings section point findings far 
selecting data sources 
traditional ontology learning predominantly focused learning ontologies describe set textual documents 
case data sources ontology learning textual sources 
possible data sources learning web service ontologies 
resources connected underlying implementation provide useful knowledge functionality web service web services simply web accessible software products 
source code textual documentation existing uml diagrams 
second web service specific data sources associated wsdl files activity logs 
observed web services accompanied short textual description functionality helps user quickly understand service 
descriptions exist line web service repositories javadoc style code 
available sources short textual descriptions web services characterized low grammatical quality specific sublanguage automatic processing 
considered textual 
current experiments reported show wsdl documents contain valuable information service describe detailed short textual descriptions considered 
combine sources 
choosing learning techniques 
goal adapt existing ontology learning techniques specific domain developing novel ones 
evaluation choice techniques depends kind data sources considered 
example uml diagrams require semantic mapping techniques essentially different natural language processing techniques textual sources 
designed framework learning ontologies textual web service descriptions implemented methods framework natural language processing techniques different complexity 
design evaluation framework derived observations simple techniques fine defined contexts 
despite methods relatively simple shelf term extraction ontology building techniques learned ontologies quality argue evaluation part discussion 
explanation phenomenon considering defined ontology learning task specialized texts strong sublanguage characteristics 
context differs efforts design generic ontology learning methods run kind textual sources build generic ontological structures 
generic ontology learning methods harder build rely complex techniques 
believe semantic web technology variety specialized domains tools allow easy adaptation basic ontology learning methods increased practical importance 
consider step context directed ontology learning 
deeper linguistic analysis seams increase performance 
dependency relationship method performs better pos tag method 
increases recall term extraction corpus little impact term extraction precision 
second extracted ontologies lower precision compensated higher values ontological overlap improvement experts consider precision important domain coverage 
argument dependency parsing richer dependency information easier write establish new syntactic patterns surface ones 
possible build domain independent tool 
sublanguage features methods build identified web service descriptions written various domains 
believe feasible build ontology learning tool tailored context web service descriptions applicable different application domains 
indication methods perform similarly different domains 
corpus particularities influence extraction performance 
example punctuation spelling mistakes lead low term extraction precision consequently precise ontology 
envision improvements basic framework 
wish extend method fine grained extraction patterns complement current high coverage patterns 
considerable number sublanguage patterns iteration provide rich input ontology building 
wish exploit pronoun resolution prepositional phrases 
machine learning techniques help discovering new patterns 
interesting investigate fine grained lexical patterns framework applicable 
discussion different domains 
second want enhance ontology building step 
synonymy information conceptualisation step important development possibility 
concentrate strategies enrich basic extracted ontology 
example defining different views set domain concepts providing set patterns act extracted semantic information 
evaluation 
achieve goal stage research understanding applicability ontology learning techniques context web services evaluation directed getting insight performance learning methods 
possible extension evaluation test robustness methods see performance affected applied incrementally enlarged data sets domain 
major tasks perform task evaluation extracted ontologies web service context powering web service tasks search matchmaking complement current evaluation indicate appropriateness learned ontologies web service tasks 
believe current evaluation sufficient encourage continuation line 
major observations evaluation ontology quality difficult gold standards faithfully represent knowledge corpus domain experts omit concepts feasible read analyze available documents reasonable time frame 
complementary methods extract ontologies contain high percentage domain relevant concepts corpus 
amount domain relevance extracted concepts influenced tuning pruning algorithm 
quality ontologies extracted simple methods encouraging 
state fact similar ontology learning open domain reports maximum lexical overlap reach cases 
qualitative evaluation experts indicated extracted ontologies represent faithfully knowledge corpus provide useful start building domain ontology 
providing ontology curators ontologies contain half extractable concepts considerable help time consuming task 
chapter goal thesis enhance quality web service ontologies facilitate process building ontologies 
achieve goal investigated research questions 
requirements web service ontologies fulfill 

enhance quality generic web service ontologies 

semi automatic acquisition web service domain ontologies feasible 
part thesis investigated research question established set requirements web service ontologies experiences semantic web services technology 
second part thesis focused second research question describing set methods check generic web service ontology fulfills requirements stated part thesis 
methods help enhancing quality ontologies 
final part thesis turned attention web service domain ontologies described efforts build semiautomatic solution acquisition stated third research question 
chapter discuss contributions related research questions investigated section ideas section 
contributions section detail major describe contributions state art 
organize discussion major topics introduced research questions 
general web service ontologies fulfill requirements discussed section methods employed facilitate achieving requirements 
part methods relate generic web service ontologies concerned improving quality see section 
rest methods aid semi automatic acquisition web service domain ontologies discussed section 
requirements web service ontologies emerging semantic web services technology concluded web service ontologies fulfill set requirements 
major requirement generic web service ontology high quality 
particular ontology provide high modelling expressiveness large variety services modelled 
clear semantics rich formalization semantics ensure support complex reasoning tasks performed artificial agents 
measure quality captured generic knowledge adaptable similar domains 
desirable mapping different evolving generic ontologies achieved order ensure basis comparison 
generic ontology consistent way large open group users compulsory adequate usage examples guidelines provided call characteristic usability 
web service domain ontologies provide broad domain coverage contain knowledge describes large dynamic web service collections 
contribution identify describe requirements 
enhancing generic web service ontologies second part thesis set methods enhance quality generic web service ontologies 
methods test quality owl identify limitations propose solutions 
outcome generally reusable developing generic ontologies see section 
briefly describe main methods reached contributions modelling expressiveness owl generic web service ontology tested improved describe real life services 
testing modelling expressiveness owl describe set services chapter 
exercise yielded owl low modelling expressiveness 
ontology relies unclear conceptual model different metaphors representing service profile process level 
links different parts unclear 
lead discovering internal inconsistencies limitations model situations ad hoc polymorphism complex internal structures 
contribution identify exemplify document modelling cases covered generic web service ontology 
owl provided set solutions identified limitations 
suggestions incorporated newer versions ontology 
adaptability owl tested reusing related context 
positive owl easily adapted similar domains high adaptability 
particular reused design principles underly owl build ontology describe api software components support tasks semantic middleware see chapter 
result ontology embedded application server 
contributions identifying reusable parts owl extension owl middleware systems 
published 
contributions middleware community appreciated useful innovative oberle 
alignment owl foundational ontology ensured clear semantics rich formalization semantics 
investigation owl ontological perspective revealed conceptual ambiguity poor axiomatization loose design narrow scope leading ontology low clarity semantics semantics poorly formalized see chapter 
overcome limitations performed alignment dolce rigorously formalized foundational ontology 
bridge conceptual gap high level concepts dolce concepts owl designed intermediate ontology core ontology services cos 
contributions form dolce perspective extend dolce library software related module 
offering set valuable observations owl community contributions part development cos alignment methodology generically reused aligning generic ontologies 
alignment multiple ontologies cos mapping achieved concepts 
learning web service domain ontologies third part thesis investigated feasibility automated solution support process building web service domain ontologies 
resulted contributions 
web service context exhibits specific features exploited developing automated ontology acquisition solution 
case studies performed concluded domain ontology building scenarios different exhibit important characteristics taken account developing automated solution see chapter 
observed generally available data sets ontology learning textual descriptions offered functionalities api documentation web service comments 
textual descriptions low grammatical quality employ natural language specific way sublanguage 
static procedural knowledge extracted automated tool 
contribution get better understanding problem hand identify aspects build automated ontology acquisition methods 
simple ontology learning methods adapted web service context 
understanding particularities web service context built framework adapted ontology learning methods specificities domain 
framework relies observation due sublanguage characteristic analyzed texts simple pattern techniques extract semantic structures regularities sublanguage 
framework allows implementation different extraction methods 
example linguistic analysis different complexity perform ontology learning 
contribution draw general lines framework provide different implementations see chapter 
evaluation shows extracted ontologies quality 
evaluation ontology learning methods straightforward task 
analyzed different approaches combination define evaluation metrics 
results evaluation show framework designed web service context applicable application domains methods perform comparatively different domains 
results imply deeper linguistic analysis leads better results sensitive imperfections corpus 
experts involved evaluation indicate extracted ontologies represent faithfully knowledge corpus provide useful start building domain ontology 
fact extracted ontologies contain average domain relevant concepts 
comparatively ontology learning efforts open domains able obtain higher values ontology overlap metric double strength method complementing human experts supporting inspection corpus contributing broad coverage domain terminology 
contribution point giving insight performance learning methods establish baseline evaluating ontology learning web services context 
collected data sets associated manually built gold standard ontologies benchmark evaluating new solutions see chapter 
established evaluation scheme evaluate ontology learning domain 
provide easy extend prototype implementing methods generic nlp framework 
achieve goal facilitating acquisition web service ontologies building high performance ontology learning methods need implement tools easy adapt experts 
aware requirement implemented prototype easy debug extend adapt developers ontology learning methods web service context see chapter 
implementation relied generic nlp workbench gate 
implementation experimented visual means extracted knowledge 
contribution prototype system easily adapted needs web services context 
note generality results thesis performed context owl time generic web service ontology 
semantic web service frameworks merged notably wsmo 
section argue results general order reused context semantic web service efforts 
claim comparison web service efforts reported research papers lara 
main papers web service frameworks cover complementary aspects web services 
example owl relies agent oriented approach wsmo focuses business requirements trust security 
fact comparison ontologies non trivial 
web service frameworks differ maturity level 
concluded lara owl mature aspects having defined process model grounding component 
hand wsmo clearer conceptual model clear difference requestors providers 
common characteristic 
approaches rely ontologies describe web services 
owl ontology complemented domain ontology case wsmo domain ontologies task ontologies combination 
authors comparison lara conclude needed better compare wsmo owl 
set real cases modelled approaches determine applicability real world settings 
second formal mapping established ontologies wsmo completed aspects 
provide brief overview results reusable context wsmo modelling cases 
modelling cases identified describing services generally valid covered generic web service ontology 
reused context line identified lara modelling real cases ontologies assess applicability real life settings 
alignment methodology 
alignment methodology serve example aligning generic web service ontologies dolce foundational ontologies 
alignment advantages stage development semantic web services field 
help identify potential conceptual ambiguities currently developed wsmo ontology 
second aligning wsmo owl dolce easier construct formal mapping get better understanding differences ontologies 
core ontology services 
cos ontology provides conceptual bridge high level concepts dolce domain software descriptions 
claim ontology facilitate alignment generic web service ontologies dolce ontologies aligned concepts cos directly generic concepts provided dolce 
methods learning web service domain ontologies 
methods independent generic web service ontology 
different semantic web services frameworks rely different ways organizing domain knowledge 
methods provide basis adaptation particular needs certain framework 
thesis variety methods enhance quality web service ontologies facilitate process building ultimate goal supporting semantic web services research 
covered variety issues topic envision important research done context enhancing semantic web services field see section 
significance fields software engineering ontology learning 
detail possible fields sections 
semantic web services possibilities extending research area semantic web services 

enhancing generic web service ontologies 
discussed previous sections results respect generic web service ontologies reused building generic ontology 
encourage applying results context novel initiatives wsmo 
particular important task generic web service ontologies alignment core ontology services 
benefit field ways 
beneficial determine flaws problematic aspects ontologies 
second provide basis comparing different ontologies allowing complementary development 
awareness semantic web services community level standardization necessary especially increasing number different approaches available 
need evident workshop aimed identifying potential standardization area semantic web services battle martin 
participants forum identified approaches realizing semantic web services 
web service modelling ontology wsmo owl service ontology owl web service semantics wsdl miller order ontology semantic web services flows berardi siemens service description model irs iii meteor general opinion agreement common core set specifications feasible desirable different maturity level approaches permit standardization efforts 

ontology learning web services context continued 
ontology learning addresses important issues pioneering research direction current status considered proof concept ontology learning performed context web services 
aware limitations envision various ways develop 
fact line continued funded european research project tao 
particular topics addressed extracting complex information 
implemented methods extract simple information services parameters functionality 
learned form descriptions 
example role parameter input output precondition constraints services activity geographic radius quality ratings 
combining extraction sources 
way obtain complex information consider extraction sources 
example experiments shown wsdl descriptions contain valuable precise detailed information textual 
obvious challenge multiple sources combining knowledge extracted lsdis cs uga edu library download wsdl html lsdis cs uga edu projects meteor 

note issue developing topics ontology learning cimiano voelker 
scaling learning methods 
achieved encouraging results relatively simple ontology learning methods 
obvious direction scale methods ways 
complex taxonomy building algorithms methods consider synonymy wordnet straightforward improvement 
second consider current methods developed repositories web services single domain 
simplifying assumption fails open repositories web contain services different domains 
way drop implicit assumptions development framework apply methods context open web service repositories 
automatically detecting extraction rules 
possible critiques framework relies manually identified extraction rules 
identification heuristics underly rules straightforward aware automation process beneficial 
promising research partly automating process context sublanguages riloff grishman hope able reuse extend context 
task evaluation 
current evaluation complex useful get insight performance methods 
obvious step evaluate appropriateness automatically learned ontologies support web service related tasks 
completing extending usability studies 
important step usability considerations backed usability tests 
wish identify scenarios visualization useful experiment visual paradigms cluster map 
naturally new experiments undergo usability tests 

tools semantic web services 
obvious way continue general direction offering support developing web services technology building supportive tools 
fact need semantic web service tools clearly expressed article topic acknowledges lack standardization tool support far limiting factor adoption semantic web services technology 
tools developed lately support different tasks involved creating semantic web services automatic markup generation wsdl owl api owl ide finding suitable domain ontology meteor patil semi automatic annotation web services hess editing visual composition semantic web services owl editor protege ele www mindswap org owl api projects org projects owl ide ucd projects annotator org owl editor developed university ode sws gomez perez 
note tools research prototypes commercial efforts provide tools supporting sws technologies se battle martin 
obvious step development support entire process semantic web service development 
observation little automated support provided current tools 
argue automatic methods better integrated existing generation semantic web services tools 
particular current efforts try combine automatic ontology learning automatic semantic annotation done sam tool 
task providing semantic annotation acquire domain ontology annotate web services concepts automated 
think beneficial leverage advantages ontologically founded methodologies 
example ontological design principles distinction situation description formulated reusable ontology design patterns integrated semantic web service tools way easy reuse 

methodologies building ontology standards 
web service description standards built support semantic web services technology naturally ontological modelling 
case owl wsmo possibly recommendations built 
believe important analyze formalize process creating ontology standards 
help better understand development life cycle standard processes involved personnel needed resources need allocated 
semantic web enabled software engineering promising research direction integration semantic web technologies software engineering 
fact thesis initiated integration semantic technologies support tasks context application server middleware see chapter 
creation ontology follow integration server proved useful received middleware community oberle 
way contribute software engineering field adapt semi automatic ontology learning improve online web service repositories 
analysis current techniques organize libraries yielded rely semantic information 
believe reasons cost difficulty acquire semantic descriptions large dynamic web service collections 
fact situation web service repositories similar situation software libraries concluded major survey mili predominantly employ simplistic techniques rely knowledge acquisition 
detailed analysis ideas current situation improved semantic web technology sabou pan 
staff um edu mt supervising undergraduate html kw dia fi upm es content htm 
efforts direction semantic web techniques software engineering context unique belong increasing trend supports integration 
example semantic web techniques software engineering topic semantic web enabled software engineering workshop collocated international semantic web conference 
ontology learning final research field envision possible field ontology learning 

adaptive ontology learning 
continuous uptake semantic web technology variety domains need adapting ontology learning solutions domains increasing 
trend identified supported newest ontology learning tools text 
particular allows adaptation pattern ontology building approaches different domains 
text hand offers comprehensive library generic ontology learning modules combined particular setting modified fit certain domain constraints 
goal bringing ontology learning closer non experts tools differ plethora previous concerned discovering new techniques 
experience context web services believe concrete domains set constraints provide defined ontology learning problem simpler learning methods provide results 
essential provide easy tools comprehensive guidelines tools allow adaptation ontology learning diverse communities 

evaluation ontology learning tools 
issue evaluation probably important development ontology learning field 
stage approaches exist comparative evaluation prerequisite development field 
concluded workshop topic buitelaar different techniques different steps different results 
example clustering techniques essentially different outcome term extraction methods 
factors hamper development standard set evaluation metrics 
initial efforts ontology learning challenge currently performed 

usability ontology learning tools 
wide ontology learning techniques require easily adaptable new domains incorporated tools easy 
fact general topic ensuring smooth user interaction semantic tools technologies topic workshops user semantic web interaction workshop iswc user aspects semantic web workshop 
experience newest ontology learning tools text support usability providing provenance information visual techniques results 
concrete effort identify set usability www mel nist gov conferences www ifi unizh ch iswc ws html kmi open ac uk events features experiment techniques best implement 
thesis provided view usability features ways achieved features 
believe effort needs detailed taken community level 
appendix dolce synchro task owl syntax class dolce synchro task partial dolce elementary task restriction dolce predecessor somevaluesfrom unionof dolce concurrent task dolce partly concurrent task restriction dolce direct predecessor mincardinality restriction dolce sequences allvaluesfrom dolce planning activity restriction dolce represented allvaluesfrom dolce join node annotation rdfs label synchro task annotation rdfs comment task joins set tasks branching samenvatting nieuwe op het moment het van het world wide web 
aan de ene kant web service technologie web tot software die zijn op verschillende en verschillende 
dit de van software die een aan van tot het van het web 
aan de andere kant de web technologie aan voor het van web data met op logica van hun 
deze markup te en en van de web data 
de kern van web technologie andere uit ontologie van dat de om te 
een van web service technologie dat het en van services nog het web services 
web service technologie uit als een op dit van het web services te met een van hun om het en van services te 
web service op ontologie een web service ontologie de van web services van het domain zij inputs outputs 
een ontologie uit het van de web service aan om de template die met uit de ontologie te hotel 
wij de en ontologie web service ontologie een van web service technologie dat wij dit ter hand dat het van web service ontologie een en dit een de van het 
het en voor de bij het van als ontologie voor web service 
meer detail web services het web en web service technologie en leiden een set van af die web service ontologie te 
een voor een web service ontologie een 
de ontologie een een grote van kan worden 
en rijke van deze voor door 
een andere de ook aan te voor op 
het dat een tussen verschillende ontologie om een basis voor te 
als een ontologie door een grote en open op een worden kunnen het dat adequate en worden 
voor ontologie het dat ze een breed en dat ze een grote aan services 
het van het methoden die de van web service ontologie kunnen 
wij de van de de facto voor web service owl 
elke eis die aan web service de van de owl ontology en een voor die ook van zijn voor andere 
om de en van owl te hebben het om een set van services te 
dit als op dat owl een 
dat de ontologie op een model het verschillende om een service te op en proces 
ook de tussen de verschillende 
dit tot de van verschillende interne en ad hoc interne 
wij een set van aan voor de en zijn van de ontologie 
een andere het en van eisen die worden door web service ontologie 
ons van owl ons ook haar 
dat owl te van verschillende services 
voor het van 
het van een set web service dat de van het owl comit kunnen 
ook de en verschillende ook zijn deze niet met dat het bij de dat er hun ontologie 
een van de dat owl voor op 
meer hebben verschillende die het van owl om een ontologie te die api software kan en dat verschillende taken middleware kan zie 
het van ons de ontologie en de van de server 
een analyse van owl van het aan en een en ons tot de dat de ontologie een en dat deze op zie 
om deze te een alignment met dolce een en basis ontologie 
om het gat de niveau van dolce en de van owl te hebben wij een ontologie de kern ontologie van services kos 
een van de van ons het van dolce het van de dolce met deze software module 
het van een set aan de owl zijn de van dit van ons het van kos en de die op kan worden om ook andere basis ontologie te 
door het van verschillende ontologie met kos kan een van hun worden 
het van het de van het van een om het van web service ontologie te 
uit de case studies die dat scenario voor het van ontologie kunnen zijn dat zij een hebben te worden men een 
dat de het data sets voor het van ontologie van zijn api web service 
deze hebben een en op een ze een 
als te worden door het van deze 
dat ontologie kunnen worden voor de web service context 
de van de web service context hebben een dat ontologie aan de van het 
dit op de dat de van de de kunnen worden om te uit de van de 
dit de van verschillende methoden toe 
hebben analyses van verschillende om ontologie uit te 
het van van het en het van zie van ontologie methoden 
een verschillende en een van methoden om te defini ren 
de van aan dat ons het voor de web service context op verschillende methoden verschillende 
de ook aan dat analyse tot zij minder voor de van het corpus 
de experts die bij de aan dat de ge ontologie een van de het corpus zijn dan de hand ontologie en dan ze een voor het van een ontologie 
de ge ontologie meer dan van de 
het van de van van de methoden het van een voor van ontologie methoden de web services context 
data sets en hun met de hand ontologie die kunnen worden als een voor het van nieuwe zie 
om het doel van het van het van web service ontologie te het van ontologie methoden met een ze te die te zijn door experts 
ons van deze eis hebben een prototype ge dat te uit te en aan te door van ontologie methoden deze context en dat een voor experts die ontologie met het zie 
deze door het van de gate software en het van visuele om de ge te 
ook hebben een aan het van het van web service ontologie wij ons voor dat kan worden de context van het van het web service 
het als de voor web service ontologie een niveau van het worden ze te 
de voor het van web service ontologie hier een en en te worden 
kan ook op het bij van software engineering en web technologie zijn 
zou het ontologie hebben van van ontologie van ontologie methoden en het van ontologie bibliography ankolekar burstein hobbs lassila martin mcdermott mcilraith narayanan paolucci payne sycara 

daml web service description semantic web 
horrocks hendler pages 
ankolekar huch sycara 

concurrent execution semantics daml subtypes 
horrocks hendler pages 
sycara 

concurrent semantics web services specification language daml 
proceedings fifth international conference coordination models languages 
gilles 

supervised text analyses ontology terminology engineering 
proceedings dagstuhl seminar machine learning semantic web 
gordijn akkermans 

shared service terminology online service provisioning 
proceedings sixth international conference electronic commerce icec delft netherlands 
acm 
baker goble bechhofer paton stevens brass 

ontology bioinformatics applications 
bioinformatics 
medina 

brokerage mathematical services monet 
cavedon 
battle martin 

workshop frameworks semantics web services summary report 
available online www org workshop report html 
bechhofer horrocks goble stevens 

oiled reason able ontology editor semantic web 
proceedings joint german austrian conference artificial intelligence volume lnai pages 
springer verlag 
berardi gruninger hull mcilraith 

order ontology web services 
proceedings workshop constraints capabilities web services 
charniak 

finding parts large corpora 
proceedings th annual meeting acl 
berners lee 

information management proposal 
available online www org history proposal html 
berners lee 

weaving web 
san francisco 
berners lee hendler lassila 

semantic web 
scientific american 
biggerstaff webster 

concept assignment problem program understanding 
proceedings th international conference software engineering pages los alamitos ca 
ieee computing society press 
bisson nedellec 

designing clustering methods ontology building mo workbench 
staab 
hotho 

text classification boosting weak learners terms concepts 
proceedings fourth ieee international conference data mining pages 
ieee computer society press 
bontcheva tablan maynard cunningham 

evolving gate meet new challenges language engineering 
natural language engineering 
borgida devanbu 

adding dl idl knowledgeable component inter operability 
proceedings st international conference software engineering pages 
ieee computer society press 
borgo gangemi guarino masolo 

ontology roadmap 
wonderweb deliverable 
borgo 

role foundational ontologies manufacturing domain applications 
meersman tari pages 
borst 

construction engineering ontologies 
phd thesis university enschede nl centre information technology 
brazier wijngaards 

automated servicing agents 
artificial intelligence simulation behaviour special issue agent technology 
martin mcilraith stein 

agent composite services daml behavior oriented design intelligent semantic web 
zhong liu yao editors web intelligence 
springer verlag berlin 
broekstra kampman van harmelen 

sesame generic architecture storing querying rdf rdf schema 
horrocks hendler pages 
buitelaar cimiano magnini editors 
proceedings ecai workshop ontology learning population evaluation text methods semantic web knowledge discovery life cycle 
valencia spain 
buitelaar sintek 

protege plug ontology extraction text linguistic analysis 
bussler 
bussler davies fensel studer editors 
proceedings european semantic web symposium volume lncs 
springer verlag heraklion crete greece 
domingue motta payne 

approaches semantic web services overview comparisons 
bussler pages 
cardoso sheth 

semantic workflow composition 
technical report lsdis lab computer science university georgia 
cavedon editors 
proceedings aamas workshop web services agent engineering 
melbourne australia 
christensen curbera meredith weerawarana 

web services description language wsdl 
working draft 
available online www org tr wsdl 
cimiano handschuh staab 

self annotating web 
feldman pages 
cimiano hotho staab 

clustering concept hierarchies text 
proceedings lrec 
cimiano schmidt thieme staab 

learning taxonomic relations heterogeneous evidence 
buitelaar 
cimiano staab 

automatic acquisition taxonomies text fca meets nlp 
proceedings ecml pkdd workshop adaptive text extraction mining croatia 
cimiano voelker 

text framework ontology learning datadriven change discovery 
proceedings th international conference applications natural language information systems 
corcho fernandez lopez gomez perez 

methodologies tools languages building ontologies 
meeting point 
data knowledge engineering 
cunningham maynard bontcheva tablan 

gate framework graphical development environment robust nlp tools applications 
proceedings th anniversary meeting association computational linguistics 
cunningham maynard tablan 

jape java annotation patterns engine second edition 
research memorandum cs department computer science university sheffield 
daml services coalition 
daml semantic markup web services 
daml white 
available online www daml org services daml 
daml pdf 
de aalst 

dont go flow web services standards exposed 
ieee intelligent systems 
zucker dieng 

learning ontologies rdf annotations 
proceedings ijcai workshop ontology learning seattle 
diaz 

implementing faceted classification software reuse 
communications acm 
eades 

heuristic graph drawing 
congressus numerantium 


tools semantic web services 
agentlink news 
denker martin 

owl editor development tool semantic web services 
gomez perez euzenat pages 
filman bader 

aspect oriented programming 
communications acm 
sabou stuckenschmidt 

uml semantic web transformation approaches 
klein editors knowledge transformation semantic web volume frontiers artificial intelligence applications pages 
ios press amsterdam 
faure nedellec 

asium learning subcategorization frames restrictions selection 
kodratoff editor proceedings workshop text mining th european conference machine learning ecml 
faure poibeau 

experiments semantic knowledge learned asium information extraction task 
staab 
feldman najork wills editors 
proceedings th international world wide web conference www 
acm press new york ny usa 
fensel benjamins motta wielinga 

upml framework knowledge system reuse 
dean editor proceedings sixteenth international joint conference artificial intelligence ijcai pages stockholm sweden 
morgan kaufmann 
fensel decker erdmann studer 

ontobroker enable intelligent access www 
proceedings th knowledge acquisition knowledge system workshop kaw 
banff 
fensel sycara mylopoulos editors 
semanticweb iswc second international semantic web conference proceedings volume lncs 
springer verlag sanibel island fl usa 
fluit sabou van harmelen 

ontology information visualisation 
editor visualising semantic web 
springer verlag 
fluit sabou van harmelen 

supporting user tasks visualisation light weight ontologies 
staab studer pages 
fluit sabou van harmelen 

ontology information visualization semantic web applications 
editor visualising semantic web second edition 
springer verlag 
gangemi guarino masolo schneider 

ontologies dolce 
gomez perez benjamins editors proceedings th international conference knowledge engineering knowledge management ekaw 
ontologies semantic web volume lncs 
springer verlag spain 
gangemi mika sabou oberle 

ontology services service descriptions 
technical report laboratory applied ontology national research council rome italy 
gibbins harris shadbolt 

agent semantic web services 
white pages 
gomez perez 

survey ontology tools 

gomez perez euzenat editors 
semantic web research applications second european semantic web conference proceedings volume lncs 
springer verlag heraklion crete greece 
gomez perez fernandez lopez corcho 

ontological engineering 
advanced information knowledge processing 
springer verlag 
gomez perez gonzalez 

development semantic web services knowledge level 
proceedings european conference web services erfurt germany 
gomez perez 

survey ontology learning methods techniques 

grishman 

adaptive information extraction sublanguage analysis 
ijcai workshop adaptive text extraction mining 
grishman hirschman 

discovery procedures sublanguage selectional patterns initial experiments 
computational linguistics 
grishman kittredge editors 
analyzing language restricted domains sublanguage description processing 
lawrence erlbaum assoc hillsdale nj 
grosof gruninger kifer martin mcguinness parsia payne tate 

semantic web services language requirements 
www daml org services requirements requirements shtml 
gruber 

translation approach portable ontology specifications 
knowledge acquisition 
guarino 

semantic matching formal ontological distinctions information organization extraction integration 
pazienza editor information extraction multidisciplinary approach emerging information technology volume lncs pages 
springer verlag 
guarino 

formal ontology information systems 
guarino editor formal ontology information systems 
proceedings fois pages 
ios press amsterdam trento italy 
guarino welty 

overview ontoclean 
staab studer pages 


ontological foundations structural conceptual models 
phd thesis 
harris 

mathematical structures language 
wiley interscience new york 
hearst 

automatic acquisition hyponyms large text corpora 
proceedings fourteenth international conference computational linguistics 
helm maarek 

integrating information retrieval domain specific approaches browsing retrieval object oriented class libraries 
proceedings object oriented programming systems languages applications pages new york ny usa 
acm press 
white editors 
proceedings th international world wide web conference 
acm press budapest hungary 
hendler 

agents semantic web 
ieee intelligent systems 
hepple 

independence commitment assumptions rapid training execution rule pos taggers 
proceedings th annual meeting association computational linguistics acl hong kong 
hess johnston kushmerick 

tool semi automatically annotating semantic web services 
mcilraith pages 
hess kushmerick 

learning attach semantic metadata web services 
fensel pages 
hess kushmerick 

machine learning annotating semantic web services 
aaai spring symposium semantic web services 
horrocks hendler editors 
semantic web iswc international semantic web conference volume lncs 
springer verlag sardinia italy 
horrocks patel schneider van harmelen 

shiq rdf owl making web ontology language 
journal web semantics 
hotho staab stumme 

wordnet improves text document clustering 
proceedings semantic web workshop sigir th annual international acm sigir conference toronto canada 
editor 
semantic web kick finland vision technologies research applications 
hiit publications university helsinki 
jannink wiederhold 

thesaurus entry extraction line dictionary 
proceedings fusion sunnyvale ca 


ontological theories semantic web 

lara lausen de bruijn fensel 

semantic web services description requirements current technologies 
proceedings international workshop electronic commerce agents semantic web services held conjunction fifth international conference electronic commerce icec pittsburgh 
lara lausen roman de bruijn fensel 

conceptual comparison wsmo owl 
wsmo deliverable 
lassila 

serendipitous interoperability 



composing workflows semantic web services 
cavedon 
lei horrocks 

software framework matchmaking semantic web technology 
white pages 
lin 

dependency evaluation minipar 
workshop evaluation parsing systems international conference language resources evaluation granada spain 
lopes 

daml executable code 
proceedings aamas workshop challenges open agent systems 
lord wroe goble 

light weight architecture user oriented semantic service discovery 
gomez perez euzenat pages 
lord bechhofer wilkinson hull goble stein 

applying semantic web services bioinformatics experiences gained lessons learnt 
mcilraith pages 
luke spector 

ontology knowledge discovery world wide web 
aaai workshop internet information systems 
maarek berry kaiser 

information retrieval approach automatically constructing software libraries 
ieee transactions software engineering 
macgregor 

description classifier enhance deductive inference 
proceedings seventh ieee conference ai applications pages 
maedche 

ontology learning semantic web 
kluwer academic publishers 
maedche motik stojanovic 

managing multiple distributed ontologies semantic web 
vldb journal 
maedche staab 

discovering conceptual relations text 
horn editor proceedings fourteenth european conference artificial intelligence ecai pages berlin germany 
ios press 
maedche staab 

ontology learning semantic web 
ieee intelligent systems 
maedche staab 

measuring similarity ontologies 
proceedings european workshop ekaw 
maedche staab 

ontology learning 
staab studer pages 
martin burstein denker hobbs kagal lassila mcdermott mcilraith paolucci parsia payne sabou sirin srinivasan sycara 

owl white 
www daml org services owl 
martin paolucci mcilraith burstein mcdermott mcguinness parsia payne sabou srinivasan sycara 

bringing semantics web services owl approach 
proceedings international workshop semantic web services web process composition san diego california usa 
masolo borgo gangemi guarino 

ontology library final 
wonderweb deliverable 
massonet van lamsweerde 

analogical reuse requirements frameworks 
proceedings rd ieee international symposium requirements engineering re pages annapolis md usa 
ieee computer society 
mcbride 

jena semantic web toolkit 
ieee internet computing 
mcbride 

resource description framework rdf vocabulary description language rdfs 
staab studer pages 
mcguinness 

ontologies come age 
fensel hendler lieberman wahlster editors spinning semantic web bringing world wide web full potential 
mit press 
mcguinness van harmelen 

web ontology language owl overview 
available online www org tr owl features 
recommendation 
mcilraith plexousakis van harmelen editors 
semantic web iswc third international semantic web conference proceedings volume lncs 
springer verlag hiroshima japan 
mcilraith son zeng 

semantic web services 
ieee intelligent systems 
special issue semantic web 
meersman tari editors 
move meaningful internet systems coopis doa odbase international conferences proceedings volume lncs 
springer verlag napa cyprus 
mika oberle gangemi sabou 

foundations service ontologies aligning owl dolce 
feldman pages 
mika sabou gangemi oberle 

foundations daml aligning daml dolce 
international semantic web services symposium sws aaai spring symposium series 
mili mili 

survey software reuse libraries 
annals software engineering 
mili ah ki godin 

nail faceted controlled vocabulary component classification retrieval 
sigsoft software engineering notes 
miller verma rajasekaran sheth aggarwal 

wsdl proposal wsdl committee 
white 
motta domingue 

framework infrastructure semantic web services 
fensel pages 
narayanan mcilraith 

analysis simulation web services 
computer networks 
velardi 

learning domain ontologies document warehouses dedicated websites 
computational linguistics 
velardi cucchiarelli neri 

quantitative qualitative evaluation ontology learning system 
buitelaar 
noy sintek decker fergerson musen 

creating semantic web contents protege 
ieee intelligent systems 
oberle eberhart staab volz 

developing managing software components ontology application server 
proceedings fifth international middleware conference 
oberle staab studer volz 

kaon server demonstrator 
wonder web deliverable 
oberle staab studer volz 

supporting application development semantic web 
acm transactions internet technology toit 
object modelling group 
idl language mapping specification java idl 

cohen eberlein hunter 

compositional structure gene ontology terms 
proceedings pacific symposium biocomputing 
paolucci sycara kawamura 

delivering semantic web services 
technical report cmu ri tr robotics institute carnegie mellon university 
patil sheth verma 

meteor web service annotation framework 
feldman pages 
pease li 

suggested upper merged ontology large ontology semantic web applications 
working notes aaai workshop ontologies semantic web 
edmonton canada 
pepper schwab 

web identity crisis 
technical report www net 
porzel 

task approach ontology evaluation 
buitelaar 


visualization visualizing binary fact types ontology bases 
proceedings th international conference information london 
rector rogers 

ontological issues description logic represent medical concepts experience galen 
working group workshop 


discovering knowledge texts learning dogma inspired ontologies 
buitelaar 
daelemans 

automatic initiation ontology 
meersman tari pages 
richards sabou 

semantic markup semantic web tools daml description rdf store 
fensel pages 
richards van brazier sabou 

composing web services agent factory 
cavedon 
rigau 

automatic acquisition lexical knowledge 
phd thesis departament de informatics universitat da catalunya 
riloff 

automatically generating extraction patterns untagged text 
proceedings th national conference artificial intelligence aaai pages 
rubin oliver klein altman 

automatic data acquisition ontologies relational data sources declarative object definitions xml 
proceedings pacific symposium biology 
sabou 

extracting ontologies software documentation semi automatic method evaluation 
buitelaar 
sabou 

software apis web service ontologies semi automatic extraction method 
mcilraith pages 
sabou 

learning web service ontologies automatic extraction method evaluation 
buitelaar magnini editors ontology learning text methods evaluation applications volume frontiers artificial intelligence applications 
ios press july 
sabou 

visual support ontology learning experience report 
proceedings th international conference information visualisation iv london uk 
sabou oberle richards 

enhancing application servers semantics 
proceedings australian workshop engineering service oriented systems melbourne australia 
sabou pan 

improving web service repositories semantic web techniques 
proceedings workshop semantic web enabled software engineering collocated th international semantic web conference iswc 
sabou richards van 

experience report daml 
proceedings workshop services semantic web th www conference budapest hungary 
sabou wroe goble 

learning domain ontologies web service descriptions experiment bioinformatics 
proceedings th international world wide web conference chiba japan 
sabou wroe goble stuckenschmidt 

learning domain ontologies semantic web service descriptions 
journal web semantics 
schreiber akkermans de shadbolt van de velde wielinga 

knowledge engineering management commonkads methodology 
mit press cambridge massachusetts 


visual modelling owl services 
proceedings international conference www internet madrid spain 
gilles 

extraction de relations entre termes de du domaine 
actes de la conference ic plate forme 
desjardins finin 

planner composing services described daml 
cavedon 
smith 

basic formal ontology 
technical report institute formal ontology medical information science university leipzig 
smith welty 

fois ontology new synthesis 
proceedings international conference formal ontology information systems pages maine usa 
acm press 


goal delegation multiagent system 
di la ricerca di informazione sul web 
staab maedche nedellec editors 
proceedings ecai ontology learning workshop 
staab studer editors 
handbook ontologies 
international handbooks information systems 
springer verlag 
stuckenschmidt sabou klein 

semantic web technology bringing meaning distributed systems 
ieee distributed systems online 
studer benjamins fensel 

knowledge engineering principles methods 
data knowledge engineering 
compton 

discovery ontologies knowledge bases 
proceedings international conference knowledge capture pages new york ny usa 
acm press 
van harmelen wielinga 

configuration web services parametric design 
motta shadbolt gibbins editors proceedings th international conference knowledge engineering knowledge management ekaw number lnai pages hall uk 
springer verlag 
uschold 

semantics semantic web 
proceedings workshop ontologies agent systems oas th international conference autonomous agents 
uschold jasper 

framework understanding classifying ontology applications 
proceedings ijcai workshop ontologies problem solving methods 
stockholm 
van harmelen 

semantic web change kr challenges opportunities new research agenda 
knowledge engineering review 
van heijst schreiber wielinga 

explicit ontologies kbs development 
international journal human computer studies 
van sabou brazier richards 

configuring web service techniques agent configuration 
proceedings ieee wic international conference web intelligence halifax canada 
velardi 

text processing techniques automatically enrich domain ontology 
proceedings international conference formal ontology information systems pages 
acm press 
pinto sure tempich 

diligent knowledge processes 
journal knowledge management 

web services architecture requirements 
web services architecture working draft available online www org tr wd wsa reqs 
wroe goble greenwood lord miles payne moreau 

automating experiments semantic data bioinformatics grid 
ieee intelligent systems 
wroe stevens goble roberts greenwood 

suite daml oil ontologies describe bioinformatics web services data 
journal cooperative information science 
wing 

specification matching software components 
acm transactions software engineering methodology 
dissertation series johan van den cwi active temporal database autonomous objects um information retrieval graphically browsing meta information ans tud contribution linguistic analysis business conversations language action perspective dennis breuker um memory versus search games bij mark vu physiology quality change modelling automated modelling quality change agricultural products rob eur classification decision trees neural nets don beal um nature minimax search jacques um practical art moving physical objects aldo de moor empowering communities method legitimate user driven specification network information systems wijngaards vu re design compositional systems david ut verification support object database design jacques um informed gambling conception analysis multi agent mechanism discrete reallocation frank vu perspectives improving software maintenance koen tue prototyping cms storage management uva van een en geert de haan vu etag formal model competence knowledge user interface design van der pol um knowledge query formulation information retrieval van eijk uu programming languages agent communication niels peek uu decision theoretic planning clinical patient management coup eur sensitivity decision theoretic networks florian waas cwi principles probabilistic query optimization niels nes cwi image database management system design considerations algorithms architecture jonas karlsson cwi scalable distributed data structures database management uu qualitative approaches quantifying probabilistic networks koen uu agent programming languages programming mental models maarten van someren uva learning problem solving smirnov um conjunctive disjunctive version spaces instance boundary sets van vu processing structured hypermedia matter style martijn van vu task user interface design vu diva architectural perspectives information visualization pascal van eck vu compositional semantic structure multi agent systems dynamics pieter jan distributed development large object oriented models views packages classes maarten uva modeling simulating practice brahms multiagent modeling simulation language practice analysis design tom van vu knowledge management role mental models business systems design nico vu architecture level modifiability analysis van ut modelling searching web document collections henk ernst blok ut database optimization aspects information retrieval juan roberto uu discrete acyclic digraph markov model data mining radu vu private cyberspace modeling electronic environments inhabited privacy concerned agents ul applied legal epistemology building knowledge ontology legal domain peter cwi monet generation dbms kernel query intensive applications jaap gordijn vu value requirements engineering exploring innovative commerce ideas willem jan van den integrating modern business applications objectified legacy systems brian sheppard um perfect play scrabble wijngaards vu agent modelling dynamics biological organisational applications albrecht schmidt uva processing xml database systems wu tue architecture adaptive hypermedia applications de vries uu agent interaction approaches modelling programming verifying multi agent systems rik ut semantics verification uml activity diagrams workflow modelling pieter van vu anatomy design foundations models applications stefan uva understanding modeling improving main memory database performance heiner stuckenschmidt vu ontology information sharing weakly structured environments jan vu modal action logics reasoning reactive systems martijn tud human computer interaction presence virtual reality exposure therapy milan petkovic ut content video retrieval supported database technology jos lehmann uva causation artificial intelligence law modelling approach boris van ut development specification virtual environments jansen uva formal explorations knowledge intensive tasks ran um repair scheduling um resolution visually guided behaviour andreas electronic business negotiation experimental studies interaction medium innovation context culture simon ut reasoning uncertainty natural language dialogue bayesian networks ut dutch speech recognition multimedia information retrieval jeroen um searching opponent models kun freezing language conceptualisation processes ict supported organisations de tud plan merging multi agent systems cwi feature grammar systems incremental maintenance indexes digital media warehouses david jansen ut extensions statecharts probability time stochastic timing um learning search decisions virginia dignum uu model organizational interaction agents founded logic lai xu monitoring multi party contracts ebusiness perry groot vu theoretical empirical analysis approximation symbolic problem solving chris van uva organizational principles multi agent architectures eur knowledge discovery monotonicity bart jan hommes tud evaluation business process modeling techniques elise um een voor verbeek um en de nieuwe internationale le en expertise martin vu sake argument explorations argument reasoning suzanne uva knowledge rich indexing michel klein vu change management distributed ontologies bui ut creating emotions facial expressions embodied agents wojciech ut multiple models reality agents know play paul uu logic conflict 
logical explorations strategic equilibrium arno uu multi relational data mining federico vu hybrid genetic relational search inductive learning mark um informed search complex games machado uva supporting construction qualitative knowledge models ut generative probabilistic models multimedia retrieval learning design facilitating multidisciplinary design teams floor uva methodological aspects designing induction applications erik van der um ai techniques game go franc run pragmatic approach conceptualisation language ut database support moving object data gabriel lopez uva level probabilistic grammars natural language parsing pieter um adaptive game ai tue hypermedia presentation generation semantic web information systems richard tue model driven approach building distributed ontology web applications jeen broekstra vu storage querying inferencing semantic web languages anders uva explaining behaviour qualitative simulation interactive learning environments vu agent matchmaking clustering decentralized approach search boer eur distributed simulation industry fred hamburg ul een voor het van vu web service configuration semantic web exploring semantics meets pragmatics vu analysis dynamics cognitive processes uu usability xml query languages boris tud software specification reusable business components sent uu test selection strategies probabilistic networks michel van um situated representation cristina ul cyber consumer law state art perspectives ut improving concurrency recovery database systems exploiting application semantics tue foundations electronic contracting cristina vu contextual issues design information technology organizations christoph uva role metacognitive skills learning solve problems 
