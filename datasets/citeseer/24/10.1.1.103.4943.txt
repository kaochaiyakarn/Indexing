architectural modifications deployed software mmel verhoef software improvement group pt cwi kruislaan sj amsterdam free university amsterdam department information management software engineering de boelelaan hv amsterdam netherlands submitted july revised february accepted march discuss nuts bolts industrial large scale software modification projects 
projects necessary system owners deployed systems hit architectural barriers 
mastery projects key extension best date software assets 
discussion comprises process problem analysis pricing contracting projects design implementation tools code exploration code modification details service delivery 
illustrate concerns way real world example deployed management information system required invasive modification system fit 
chosen project particularly suited complete treatise size just loc nature relevant architectural modification form data expansion 
share lessons learned architectural modification projects 
keywords software malleability software maintenance definition software architecture software asbestos software modification software analysis automated program transformation 
email addresses steven cs vu nl ralf cs vu nl cs vu nl mmel verhoef 
appear science computer programming modified april contents real world modification example characteristics suitable project prodcode project technical challenges project drivers software asbestos cobol defense universal inevitability asbestos contaminated systems definition software architecture analysis modification problems process problem analysis initial problem statement identification undue assumptions identification usage patterns encountered subtleties dissolved complications convergence analysis project economics cost estimation contract signature management summary cost risk dimensions design solution top level specification identification affected fields picture string expansion maximum expansion literal expansion table expansion specific changes remained documentation changes implementation tools perl implementation technology issues technology options concluding remarks software systems long time years 
normally business critical systems automate important business processes processes society payment salaries bookkeeping pensions payment taxes 
hand systems require constant change preserve enhance assets represented systems 
hand systems lack malleability resist new requirements 
mismatch implemented vs required systems way restricted technology development methodologies past 
systems deployed today legacy tomorrow elements current system designs naturally replaced revised apis data access user interfaces middleware technology model driven technology 
malleability attribute deals managed automated modification deployed software 
focus malleability deployed software 
realise malleability vital architectural quality attributes software world 
generally term malleability stands possessing capacity adaptive change capability altered controlled outside forces influences 
words ideal software architecture system software enters deployment phase continuously adaptable changing business needs changing environment 
names prominent quality attribute changeability adaptability modifiability flexibility maintainability extensibility evolvability 
opt malleability word expresses implied attribute accurately 
change smooth pressure needed adapt system expressed roots word malleability 
word goes back latin verb means hammer 
malleability express capability extended shaped beating hammer pressures 
image resembles realities software world 
early phase software iron architecting decisions grades malleability various parts 
immutable parts heated interspersed materials 
parts envisioned amenable change need arises 
constructed way heat change takes considerable effort 
parts kept permanently oven continuously hot spots 
architectural modifications revitalisation malleability complementary normal maintenance practice 
revitalisation malleability requires operating system wide level function module basis 
term architectural modifications emphasise corresponding projects implemented architecture deployed systems 
software architecture refers high level designs way serve construction new systems focus modification deployed systems 
deployed system say source code defines architectural barriers hinder smooth change 
propose definition software architecture software architecture deployed software determined aspects hardest change 
definition adopted clarify 
believe way better understand software architecture 
starting definition supplies methodology architectural modifications 
explain projects important special 
define milestones successful architectural modification projects initial problem statement iterative problem analysis contracting design implementation tools code exploration code modification service delivery 
major contribution reasons 
firstly software assets invalidated malleability 
secondly architectural modification projects tend fail consume huge amounts resources attempted naive manner 
complete treatise case applied methodology architectural modifications real world projects lays project suitable presentation 
fact contains complete treatise real world project dealing successfully actual architectural modification deployed software 
reported experience meant instructive carrying architectural modification projects 
particular presents integrates experiences subjects problem analysis code exploration learn modification problem 

get customer involved cost estimation obtain precise transparent cost estimation reasonable amount time costs acceptable customer managerial realities argue favour automated transformations opposed manual approach 
explain complexity project system owner organisational realities align offline modification site service provider simultaneous client site maintenance technological issues technology modification 
amount automation justified project hand shaped tractable example project just loc applied methodology projects 
instance method ology analysing impact estimating effort costs provide customer precise information project loc software portfolio investigated architectural modification extending bank account numbers digits 
organisation sec 
introduce real world case 
prodcode project 
case concerned data expansion problem business critical application 
project projects discussing realities architectural modification projects 
sec 
substantiate software architecture determined hardest change 
crux insufficient malleability deployed software call software asbestos 
explain architectural modifications aim malleability automated program transformations removing safely manipulating software asbestos 
sec 
describe process analysis malleability problems 
process iteratively refines initial problem statement code exploration 
provisions ensure timely precise analysis meaningful parties involved projects 
resulting problem specification forms basis development automated transformation tools 
sec 
deal project economics 
foremost explain process agree cost estimation effort distribution fair contract signed 
point high costs im possible risks manual approach pursuing architectural modifications 
sec 
problem specification obtained program analysis 
analyses transformations described detail basis implementation automated tools manual steps obtained 
employ formal rewrite rules informal rules examples 
sec 
discuss tool support code exploration automated program transformations 
describe lightweight approach adopted prodcode project 
briefly assess various technology options exist prodcode project serves benchmark 
sec 
conclude 
research partially sponsored dutch ministry economic affairs contract computeraided life cycle enabling software assets 
grateful detailed constructive comments received anonymous referees science computer programming journal 
grateful opportunity discuss real world project carried anonymous customer 
real world modification example sketch prodcode project 
surface project simply extending product codes digits 
describe problem statement prodcode project complemented lists challenges regarding technical solution service delivery 
incorporate experiences gained projects 
listing challenges drivers modification projects want create awareness complexity projects implies need managed require automated tool support 
introduce prodcode project detail identify project characteristics consider important view contribution 
characteristics suitable project service delivery assume business model independent parties problem owner solution provider 
problem owner pose problem statement 
uncommon problem owner represented maintenance department 
solution provider takes lead analysing modification problem implementing solution 
business model service delivery 
alternative situation architectural modifications carried system owners different departments involved regular maintenance department vs task force responsible identified malleability problem 
reality check suitable case modification project concern software system 
reality checking crucial managerial technological forces drive real world projects 
major class business critical systems comprises information systems deployed processing data finance insurance governmental sector 
implies certainly case deal deployed cobol system substantiated finance insurance data processed cobol 
refer related figures 
opting cobol case ensure approach immediately meaningful business critical systems exist today 
soon clarify generality approach inevitability insufficient malleability regardless language technology 
amenable full treatise hand chosen case complex encounter typical complications 
hand chosen project simple able convey complete meaningful discussion hand 
project suitable full treatise problem statement specialised types modifications diverse tooling sophisticated non disclosure limits discussion system large involved languages unknown 
took time came real world case suited discussed 
example system loc small architectural modification effort trivial large prevent full coverage problem including solution 
problem statement looks deceptively simple 
project required expand certain kinds fields 
data expansion relatively understood occurs frequently practice form digit bank account number problem 
characteristics case ideal full treatment gets complete insight real world architectural modification project start finish 
generality approach restricted cobol data expansion 
generally applies projects aim modification deeply aspects implemented architecture deployed systems 
types projects benefit 
just convenient project simple problem statement explanatory purposes 
describe example type architectural modification effort 
reported code restructuring project swiss bank code drastically changed order migrate green screen function key mainframe interface browser mouse centric pc interface 
complexity problem focus transformation algorithm project drivers discussed 
address type architectural modification 
reported project german bank multiple instances information system migrated product line 
focus methodology migration 
backed real world case full treatise infeasible 
case chosen problem statement comprehended special domain specific knowledge 
focus impact architectural modifications comprise projects managed tools aid cost effective solutions 
prodcode project prodcode architectural modification project carried global players finance insurance industry 
contracting enterprise number parameters project anonymous 
prodcode project concerned deployed management information system 
business critical system developed early refined enhanced day 
software system provides managers important productivity summaries finance insurance products 
due various mergers acquisitions number products monitored grown anticipated 
financial products amount sufficient identify financial products digit product code 
digit type hardwired source code 
architectural modification effort necessary expand product code fields facilitate monitoring products 
problem statement modification effort initiated statement data items representing product codes expanded system deal product codes 
management information system written cobol 
sample declaration product code field named prodcode prodcode pic 
picture string stands numerical digits 
continue deploy management information system new upper limit product codes needed 
new type pic considered appropriate line code transformed follows prodcode pic 
argue digits expanded digits best take upper limit products 
smaller values favourable view possible performance degradation 
customer requested experiments carried find balance increase product codes performance degradation 
summary system application consisted cobol programs totalling lines code 
furthermore copy books lines code involved 
regarding data management mixture sequential indexed files db tables 
files accessed cobol native support file processing db tables accessed embedded sql 
copy books generated db tables 
code base contained embedded sql statements copy statements 
cobol terminology copy book kind include file textual inclusion gets expanded place copy statement just include files get expanded means preprocessing statement include 
cobol copy books pervasively define common data declarations reusable statement blocks 
type title ieee software column martin fowler discusses define types money currency product codes little objects 
view fowler position column support classification prodcode project regarded architectural modification 
fowler observes architects consider details types little objects product codes attention 
fowler points consequences having defined type little objects disastrous need change software 
recover type change 
precisely happened prodcode project 
types little objects architectural matter 
say product codes part software architecture type product codes hard change 
fowler link software modification software architecture column definitions software architecture 
technical challenges simple problem statement simple solution 
initial problem statement prodcode project may suggest reader problem trivial 
far problem statement misleading 
problem stated simple terms folklore systematic cost effective solution major challenge 
way turn prodcode project expanding fields named prodcode 
consider technical challenges section discusses project drivers managerial technological nature 
impact analysis non trivial modification projects kind require substantial effort regarding impact analysis 
prodcode project assumption relevant fields named prodcode alike naive 
complete set mnemonics product codes worked 
identification mnemonics guaranteed safe complete 
eventually need code analysis identify relevant fields usage patterns 
significantly involved searching fields name 
raises standard issue precision 
imprecise identification affected fields cause harmful modification acceptable system owner business critical system 
turned patterns simple data field declarations relevant prodcode problem 
instance upper limit product codes occurs declaration cobol tables 
occurs clause table declarations expanded 
furthermore upper limit hard coded cobol terminology cobol term table array say homogeneous collection data 
cobol syntax table declared adding clause field declaration size array 
match code select product product code ok cancel xxxxxxxx generated look don change 
handler select dialog 
prodcode pic 
match pic 
cursor code pic 
prodcode field value 
match field value 
ok button value 
cancel button value 
action code pic 
enter value 
escape value 
close value 
help value 
fig 

form entering prodcode corresponding data declarations generated gl tool user interface development 
cobol application program communicates run time system forms manager subprogram calls group field handler select dialog data exchange 
control structures 
fact value frequently error code sense loop invalid prodcode 
context learned declarations fields product codes type pic opposed pic just fields able hold error code 
constants replaced systematically new upper limit 
see variety affected patterns 
heterogeneous system platforms business critical systems normally involve cocktail languages notations technologies 
cocktail comprises programming languages house general purpose facilities macros preprocessing embedded languages database access transaction management middleware technology distribution scripting languages gluing programs controlling jobs processes configuring applications 
heterogeneity challenges attempts derive simple solutions evidently complete correct 
instance impact analysis need operate languages 
heterogeneous reasoning challenging refer reports language migration dialect migration indication 
heterogeneity source language problem mere challenge obtain quality front ends source code analysis transformation 
prodcode project faced different cobol dialects standard compiler directing statements preprocessing embedded sql db data models generated copy books db tables 
issue generated copy books instance general issue parts source code generated external tools generators supporting interaction gl languages 
consequently careful change primary proprietary sources generated ones 
illustrated user interface development fig 

prodcode field dialog de scribed proprietary format 
gl code subject data expansion 
encountered specific problem project issue prodcode project basic forms reports 
semantical subtleties solutions modification problems ultimately challenged subtleties programming language 
instance prodcode project struggle subtle rules conversion cobol types numeric alphanumeric data 
modification projects encountered complications follows semantical subtleties exception handling 
semantical subtleties object destruction cf 
memory leaks 
precision issues cross language data conversions 
undocumented obscure api uses error codes file handling 
fragile race conditions distributed multi user code 
subtleties source unsound modifications look seemingly correct 
subtleties lead complex defensive schemes modification 
project drivers substantiated large scale modification projects challenging far proper technical solution concerned 
overestimate specific technical problem project 
experience modification projects driven factors 
project drivers normally related economical managerial legal technological characteristics problem owner solution provider 
important identify drivers upfront modification project fact contract signature affect costs substantially level infeasibility project 
light switch myth early stage modification projects customers tend think documented user friendly mature tool maintenance staff solve problems automatically transparently conveniently site 
ideal tool complexity comparable light switch just turn handle result neatly converted program 
prod code project rapidly realised complexity problem required semi automatic approach 
overhead build tools maintenance programmers 
furthermore software hardware architecture client site site turned largely different 
exploration transformation tools currently unix client software including prodcode application ran mainframe different operating system 
unix mainframe conversion modification tools paid project hand 
consequently communicate customer agree realistic option service delivery conversion carried site 
syntax retention non functional requirement tool support means changed programs identical original sources locations require modification 
normally includes preservation syntactical patterns lexical details spacing comments 
syntax retention prerequisite lexical technology line line inspection differences original new system 
syntax retention customer inspect differences efficiently locations notified appearance changed 
customers necessarily come requirement 
implied primary way thinking modification modification terms hand coding 
realise automated conversions possibly perform pervasive code changes stripping line numbers lexical syntactical pretty printing 
fact syntax retention similar non functional requirements challenge implementation transformation tools 
prodcode project anticipated need syntax retention 
limited testing opportunities prodcode project regression testing software testing new requirements met done customer 
sight setup appears reduce effort soon clear setup puts stress process able guarantee correct solution testing 
customer unacceptable go iterations modification testing just compensate omissions 
expect customer carry advanced testing new requirement 
generally expect owner deployed software possession serious harness regression testing 
modifications obviously correct modified system produce unforeseen undocumented problems client site 
strong incentive automated transformations 
automated checks performed converted system transformation rules 
proposing complete formal verification architectural modifications projects normally amenable treatise 
scattered modification projects modification projects naturally involve maintenance departments site system owner core automated modification delivered external solution provider 
scattered modification projects imply extra effort synchronisation 
prod code project customer want outsource database part expansion fact access gl code 
reasons confidentiality maintenance department responsible migrating indexed files db tables 
implied challenge set process guarantees consistent changes 
recall cobol code included copy books generated db tables 
order part expansion complete reliable possible generated report client point affected database columns needed expansion client site 
dead code course modification projects encounters code patterns difficult comprehend difficult handle 
patterns symptoms dead code 
identifying abnormal patterns beneficial prevents trying cover patterns 
approval dead dangerous code involved simple static checks conservative additional knowledge program usage data required 
prodcode project suspicious tables indexed product codes entries 
eventually turned size tables reflected earlier upper limit product codes code trigger problems happened dead 
business critical systems contain dead code significant quantity 
updates performed systems lead actual volume code dead 
entire programs dead sense anymore 
loading shipping back organisations predefined process deliver complete systems external sites 
proper configuration version management requires level sei capability maturity model cmm companies level 
consequence original system initially come batches files get shipped files shipped different versions 
example difficulties integrating external large scale software modification effort client everyday practice 
aspects hamper swift throughput project cause failure 
problem prepare software site client change system mean time 
modification possibly incomplete outdated version system phase manage separate shipping project client complete version system shipped modified tools 
apply tools system ship new version say day 
client needs freeze maintenance activities period 
exist project drivers differ project project 
drivers list occur influence duration costs projects significantly 
software asbestos life cycle software invaded incidental accidental issues just buildings unintentionally invaded unknown characteristics asbestos 
term software asbestos refer implementation unintentionally immutable parts software system severely hamper necessary changes 
architectural modifications precisely meant remove safely manipulate software asbestos hard coded product codes prodcode project 
matrix places architectural modifications context change easy hard anticipated maintenance best practice unanticipated maintenance sheer luck design alter architectural modification life cycle enabling architectural modifications required changes anticipated happen difficult asbestos 
architectural modifications go regular maintenance activities may concerned modifying single subprograms systematically revising calls subprogram wrapping subprogram cf 
anticipated easy changes table 
architectural modifications concerned deeply aspects implemented architecture deployed system 
note inevitability software asbestos continued need keep business critical systems malleable directly linked lehman laws software evolution 
possible forms software asbestos concerned choices abstractions idioms software development choice implementation languages platforms development environments libraries domain specific apis proprietary communication protocols choice partitioning components directory structures cpu partitioning layout conventions variable naming schemes preprocessing middleware distribution synchronisation aspects security policy 
explain software asbestos exists prodcode application software asbestos generally inevitable dream technology methodology business critical systems 
due course encounter forms software asbestos 
discuss issue contaminated system modify replace keep 
particular law continuing change law ii increasing complexity law vii declining quality 
final part section fully substantiate link software architecture architectural modifications deployed software 
cobol defense primary challenge regarding technical solution prodcode problem fields product codes need identified fields readily tagged way 
fields type pic product codes 
learned different types just pic pic xx pic 
fact different types concept product code 
lines prodcode system implies different type loc 
complications related hard coded literals serves error code 
legitimate raise questions implement issue looks simple concept product codes complex manner 
exception freak accident type implementation common practice 
problem simpler trivial declarations fields product codes refer designated type 
constant declarations error codes special values 
happen 
replying questions want provide evidence cobol business critical information systems prodcode application result careless programming careless programmers incapable adhering simplest best practices software engineering 
need analyse cobol idioms 
hard coded types literals cobol permit reusable declaration type product codes 
immediately rules malleable software architecture type product codes amounts hot spot 
encouraged hard coded types 
far cobol inferior compared languages pascal modula ada typed oo languages 
similarly error code hard coded proper declaration constants permitted 
types product codes opposed merely pic pic related common cobol programming practice heavily formatted types reports screen encouraged cobol weak type system 
encoding cobol compliant implementation type product codes declared data division program copy book system wide prodcode template typedef 
prodcode pic 
prod error code value 
declaration uses cobol new typedef clause type declarations 
typedef clause indicates prodcode template template type declaration normal data field compiler allocate space 
result picture string need scattered normal field declarations anymore 
note immediately favour type pic type pic uniformly assume fields able store error code greater value converted prodcode system 
type declaration declares condition name prod error code error code 
refer template type clause 
give example construct group field output data includes field product code output data 
output header pic 
output prodcode type prodcode template 
clarity code equivalent expanded code output data 
output header pic 
output prodcode pic 
prod error code value 
new constructs clearly convenient encode reusable type product codes hard coded error codes avoided 
type declarations complications go away related different types product codes 
code conversion types scattered system form implicit conversions move statements 
imagine define data types product codes including conversion routines possible cobol subprograms object oriented concepts contemporary cobol 
idioms available time type declarations available time cobol business critical systems built wonder idioms possibly avoid hard coded types literals 
discuss idioms 
data field declarations augmented condition names 
condition names constants conditions statements prodcode assignments set statement 
idiom insufficient condition names repeated new product code field 
really need type declarations avoid illustrated prodcode template 
environment division cobol program various kinds declarations 
forms come close constant declarations 
define character sets alphabet phrase enumerations literals class phrase 
turns phrases restricted declare numeric constants general program 
form declaration comes close type declarations 
compiler vendors extensions cobol implementations solve hard coded literal problem 
cobol supporting symbolic constant declarations years 
purpose level data declarations 
fujitsu cobol supports declaration form called symbolic constants part special names paragraph 
indication pervasive problem hard coded literals easily solved existing palette constructions cobol 
hard coded types manner 
attempt place reusable declaration product codes copy book 
elements declaration variable level number name field condition name error code 
assume copy book prodcode cpy trivial form level data name pic 
error code value 
attempt reuse declaration means sophisticated copy statement replaces level data name error code 
reconstruct earlier example type declarations output data 
output header pic 
copy prodcode cpy replacing level data name output prodcode error code output pc error 
replacing mechanism purely textual copy books inlined preprocessing 
low level idiom practice 
assumption uniform type pic approach cobol terminology order level numbers expresses grouping fields 
greater level number indicates nesting relative previous field level number contiguous fields means fields part group 
time system deployed type considered wasteful 
idioms considered proper solution 
universal inevitability asbestos cobol biased discussion revealed existing cobol business critical systems possibly avoid software asbestos related hard coded types product codes 
consequently want prolong life software assets engage architectural modification effort 
dramatic impact finance insurance data processed cobol 
celebrated focus hard coded types cobol needs complemented key observations mere existence type declarations data types language choice guarantee idioms consistently malleable system architectures implied 
hard coded types constitute just particular form software asbestos 
choice language platform environment style collection examples software asbestos 
substantiate bottom line matter hard tries software system contaminated forms software asbestos 
matter asbestos result deprecated idioms styles software architect failed anticipate certain dimension malleability 
software asbestos fact life 
types little time having support type declarations idiom widely guarantee success 
explain resort language seen cobol business critical systems uses type declarations new age 
discuss type declaration problems language type declarations start short advanced business application programming 
gl cobol support type declarations 
fact language implementation sap software certainly counts business critical 
werner lay analysis reuse data types implementation sap analysed 
system huge programs functional modules tables excellent candidate data type reuse 
werner analysis revealed majority data type declarations huge system reused 
data type declarations 
reused reuse restricted times remaining apparently reused 
results indicate difficult maintain precise set types larger applications 
life cycle software types emerge clear developers types exist certain types related 
knowledge explicit software 
certain moment variations existing types created conceptually equivalent existing ones 
leads software asbestos 
asbestos related apis years development platforms started rely heavily apis 
conservative cobol program uses cobol constructs java application uses jdbc database access net application uses ado interface database access 
cobol code prodcode application uses api embedded sql 
existing business critical code employs general purpose domain specific home grown apis exist versions 
benefits apis dispute pervasive api usage clearly prime cause software asbestos 
status evident wanted migrate api just version api 
give example fairly simple code creates main window terms pre net windows api main window ws ws ws cw cw cw cw null null null sw mapping code windows forms net framework results form form new form form text main window form show looks relatively simply 
idea mapping pic pic hard problem api migration 
locate slices code amount certain idiom api usage define representation idiom new api 
bit concrete consider configuration main window original code snippet 
knew find boolean expression ws 
configuration sufficiently explicit conversion 
actual code expression arbitrarily formed need resolve variable computed dynamically 
just simple example indicates api conversion challenging form architectural modification 
asbestos related preprocessing mechanisms preprocessing macros specifically meant software malleable 
new idea 
instance peter brown wrote construct portable software conditional compilation targeting different platforms 
portability clearly form malleability 
prod code developers preprocessing simulate type constant declarations required prodcode fields 
cobol supports preprocessing statements days preprocessor cpp cobol traditional unix tool preprocessor home grown preprocessor 
instance constants defined define statement opposed hard coded constants prodcode application 
encoding reusable type declarations bit involved need come suitably parameterised macros 
preprocessing identified studies best practices software engineering 
contrary assumed benefits show time 
various authors report implications preprocessors cpp portability code reuse reasons 
executive summary reports preprocessors software flexible tends lead source code 
presence cpp constructs programs headache just maintainers developers tools program comprehension 
mechanisms software malleable certain dimension 
preprocessing macros introduces new forms software asbestos 
cases necessitates architectural modifications conditional compilation constructs 
instance people philips research learned written called def resolver shed light software television sets 
tool support preprocessing statements discussed 
model driven architecture silver bullet 
years object management group omg developed model driven architecture mda approach building platform independent applications 
approach relies omg standards uml xmi 
mda promises applications realised different open proprietary platforms including corba ee net web services 
key requirement developer differentiates platform independent model pim platform specific model psm developed software 
mda approach aims supporting derivation psm pim 
sight mda approach viewed major attack software asbestos coming form scattered code 
quote martin fowler assess eternal independence mda approach mda talks platform independence treating programming environment platform 
complete 
mda uses bunch omg standards uml mof xmi cwm standards bit platform java stack net stack matter 
doing swapping hardware os platform independent programming environment 
aren getting independence 
mda approach problem software asbestos go away 
pervasive complex standards underlying mda specific mechanisms derivation psms candidates software asbestos 
difference faced asbestos models addition just asbestos source code 
contaminated systems contaminated system different perspectives system conservation long asbestos way long suffer associated lack malleability keep system instance prodcode application reside hard coded types product codes 
invest type recovery 
modification prodcode project exemplifies problem software asbestos normally addressed system owners faced insufficient malleability 
order enable specific enhancement system architectural modification project embarked 
call life cycle enabling 
preventive modification cases preventive architectural modification preferable associated benefits considered worth effort 
benefits typically include improved program comprehension cost reduction normal maintenance activities 
replacement malleability system owners possi bly abandon deployed systems replace new system includes previous services new ones hard accomplish architecture deployed system 
starvation system owners decide keep system accepting negative impact able deficiencies add valuable service 
reasons starvation include costs revitalisation replacement foreseeable life business critical system 
discuss potential perspectives detail 
minimal roi threshold elapsed time months suppose months development net return required 
ongoing development month high operational costs system years actual roi threshold significantly higher 
visible peak indicates roi pressure resulting costs development operation 
contrast continuous operation deployed system including incremental system adaptation lead roi pressure 
fig 

curve lower bound roi threshold achieve net return software development project 
adopted 
modification vs replacement sight replacement attractive insufficient malleability deployed system serve reason develop new modern system 
cases replacement motivated economical terms 
large investment deployed system normally past 
deployed system operational costs 
new system requires large budget rebuild current 
includes high operational costs years unknown features current system recovered virtue failure new system 
costs compensated lower operational costs new system rest system lifetime 
fig 
illustrate investment stresses return investment roi threshold 
requirements change drastically significant budget needed adapt deployed system option incremental changes comes risks 
arguments assume system owners able perform architectural modifications managed manner 
starvation remaining option 
mere existence software asbestos normally sound reason replacement costs risks simply high 
replacement implied strategic political forces replacement home systems standard erp packages 
modification automated vs manual structured process carrying architectural modifications employs automated program transformations 
current practice inability update software structured automated manner implies modification projects significant amounts system need changed performed place 
large architectural modification projects performed manual manner fail 
manual approach expensive error prone 
manual approach leads patchwork resulting short term extensions system 
lack automation software modification projects factor 
addition large scale projects suffer inappropriate project management 
projects harsh deadlines little commitment management business sees added value 
projects described prodcode project launched management realises benefits automated approach performing large scale architectural changes 
compile open ended list reasons favour automation bottom line transformations keeps control situa tion knows exactly needs change changed changed order change changes 
automated transformations scalable means deal large code bases 
automation modifications contributes structured process 
people consistently applying rules hand 
variants modifications error prone 
automated program transformations change solves issue 
large code volumes manual approaches strongly discouraged gartner group systems comprise lines code manual mass update projects considered professional 
automated approach exact formulation prob lem including variances demonstrate prodcode project 
actual implementation problem specification normally low effort respect manual approach 
case manual approach complications variances overlooked initial phases causes problems delays complications variances encountered 
changes performed different versions system modification rules developed initial snapshot need applied production system 
source code portions system occur late 
needs automated process handle batches versions uniformly 
manual changes recorded example unix tool diff included patches automated process 
mass change needs executed short period time normal maintenance put hold 
aspects data migration necessary take running business critical system offline 
implementation automated process may take including recording manual steps final application automated process normally limited night weekend 
version system running remote locations perform mass update times 
converted systems display unexpected side effects instance connection systems 
systems need update conversion needs repeated 
automated transformations provide high degree reuse situations 
variants new system required compare certain aspects variants 
automated transformations variants generated easily 
prodcode project ability performance analysis new upper limit product codes 
transformations temporarily include code facilitates assertion checking debugging 
fully automatic solution feasible costeffective 
instance modification problem involves heuristics determine affected parts system necessitates interactive steps approval maintenance programmers 
extreme case automation restricted generation report applied maintenance staff manual manner 
special interactive tool support provided programmers basically walk generated report navigate affected code locations ado 
similarly tension handling frequent highly complex idioms specific manual changes occurrence providing general rule underlying code pattern 
decision automation necessary generic modification rules required relating technical analysis problem hand drivers project 
asbestos treatment endeavour deal software asbestos architectural modification efforts different options safe change trace software asbestos adapt affected code patterns 
precisely done prodcode project 
similar effort described hard coded sql error codes updated new codes new version database management system 
removal trace software asbestos remove entirely 
case prodcode problem mean turn hard coded literals symbolic constants replace hard coded types type declarations 
option requires cobol compliant compiler extensions 
workaround trace software asbestos supply workaround 
typical example windowing deal problem 
hardcoded types dates digits years preserved workaround interprets years differently 
hybrid options mixed 
instance different degrees asbestos removal projects 
uncommon factor date arithmetic designated routines hard coded types normally 
note start tracing asbestos prior asbestos aware transformation 
obtain stricter separation tracing transformation assume result tracing documented temporarily permanently source code 
fact form scaffolding say structured comment 
useful method drive transformation repeatedly operate asbestos 
scaffolds useful interactive transformations scaffolds mark relevant spots affected encode options user intervention 
definition software architecture want utterly clarify architectural dimension 
discuss definitions software architecture argue view focuses modification deployed software valuable 
pluralism software architecture exist proposals definitions 
extensive list definitions refer 
definitions suggest concrete terms software architecture certain views system design 
fairly established definition bass clements kazman example software architecture program computing system structure system comprise software elements externally visible properties elements relationships 
style operational definition widely definition provides list issues components properties relations components 
definitions tend share aspirations civil architecture sense focusing integrity construction 
art systems architecting idea architecture perceived follows models control construction process ensure integrity architectural concept 
architecture deployed systems case deployed systems requirements design documents normally outdated non existing 
original designers programmers available anymore reflect architecture 
furthermore successive changes blurred original design decisions 
guarantee whatsoever encountered barriers considered original architectural design 
leads conclude deployed systems define implemented architecture 
body research architectural recovery systems recovered architectural information kind just discussed highlevel views system design 
want focus malleability deployed systems 
needs architect 
ieee software column name martin fowler ralph johnson means quotations discuss role architect soon discuss defining software architecture 
phrases architecture software system structure significant components phrases relativity significance 
significant 
customers 
johnson votes expert developers offers definition software architecture successful software projects expert developers working project shared understanding system design 
shared understanding called architecture 
architecture important design issues important expert developers 
architect person worries important things 
johnson identifies style definition architecture set design decisions early project 
johnson proposes read architecture set design decisions wish get right early project necessarily get right 
fowler picks definition 
simply wonders people feel need get things right early project 
fowler answer including implied definition software architecture answer course perceive things hard change 
defining architecture things people perceive hard change 
definition somewhat oriented development construction software emphasis changeability malleability line architectural view deployed software 
fowler uses wording architecture people perceive hard change depends technical imaginable abilities architect arrange easy change 
reason part definition 
implemented architecture little step fowler definition 
modifying deployed systems faced implemented architecture 
detailed design decisions easy hard change aspects belong past 
point anymore fowler perspective architecture partly incidental accidental 
motivates definition software architecture deployed software determined aspects hardest change 
hard change judged standards software development maintenance practice 
managed automated architectural modifications precisely meant enable changes hard 
conclude software architecture immutable aspects software system 
really needs architectural modifications replace parts 
candidates immutable aspects chosen implementation languages platforms development environments predefined libraries apis proprietary communication protocols database schemas 
instance aspects counts architectural 
aspect system counts architectural solely depends difficult change encountered implementation aspect 
bibliography started definition software architecture years ago time deviated status quo 
definition adopted independently discovered 
instance adopted definition slides dagstuhl seminar software architecture believe best definition software architecture software architecture comprised features difficult change system 
seminar jan bosch independently develops similar characterisation slides software architecture hard change 
static stable part system 
inflexible architecture fact life 
gert refers definition course notes software architecture example definition software architecture 
recall ieee software columns fowler aligned view software architecture 
believe alternative definition general 
sections describe approach carrying architectural modifications 
analysis modification problems define process analysing actual problem architectural modification project 
result analysis problem specification forms basis estimation effort costs 
focus analysis technical solution recall complete understanding modification project requires identification project drivers listed sec 

disclaimer readers experienced area data expansion feel approach come sophisticated 
case companies possession advanced technology methodology endeavour expansion projects 
stress data expansion serves example 
deal known issues doing data expansion 
aim illustration reusable method general process architectural modifications description ultimate approach data expansion 
process problem analysis process problem analysis explore code exploration learn problem 
lead assumptions affected patterns variation points quantitative measure 
model sketch operational model approximates technical solution identified part problem 
concerns analyses determine affected patterns transformations adapt code 
estimate operational model knowledge project drivers quantitative measures estimate effort needed solve identified part problem 
review reflect operational model gathered far identify drastic sources incompleteness 
includes exposure undue assumptions programming conventions encoding idioms adhered 
discuss findings discussed customer domain experts 
meant ensure feedback cycle take advantage customer insights create awareness identified complications time 
loop steps repeated risks problem variances understood model sufficient detail cost estimation 
purpose process fold 
firstly amount affected code diversity relevant code patterns estimated 
secondly superficially changes 
customer participation ensures impact results analysis meaningful customer 
prod code project maintenance department client site loosely involved problem analysis 
addition daily meetings contact person consulted immediate help 
initial problem statement enter process starting initial problem statement prodcode project 
remember succinct statement system required product codes 
go phases explore model estimate 
code exploration customer told names fields product codes normally contain string prodcode 
decided rough estimate affected data declarations system 
employed simple unix command grep list declarations data fields containing string prodcode grep prodcode wc grep command looks lines starting cobol level number cf 
data name declared line contains string prodcode 
pipe output grep command word count command wc solely obtain number hits prodcode 
quantitative measure programs supplied customer occurrences prodcode data divisions initial batch programs 
apart programs product codes supplied copy books including generated ones 
simple query gave indication volume data declarations needed changed 
tooling time comment technology tooling want state clearly phase project light weight tooling grep advanced tooling running 
avoid labour intensive development tooling phase problem analysis architectural modification projects usually completed pricing short notice 
leave room software development aimed supplying tool support 
note code grep sun solaris sunos 
commands may need minor changes applied platforms 
exploration precise cost estimation opposed precision needed ultimate technical solution 
sketch operational model replace data type pic declarations data fields names contain prodcode pic 
effort estimation effort implementing requirement pretty low 
product code fields 
sketch operational model directly executable simple means textual replacement 
required effort implementing model person day 
project drivers prodcode project cf 
sec 
complicate implementation requirement 
instance syntax retention easily guaranteed required transformation operates small focus 
identification undue assumptions discuss steps obtain detailed problem specification prodcode project 
involves reviewing initial problem statement far gathered model 
review meant identify directions deeper exploration 
accuracy problem specification problems simple requirements specifications underestimated apparently people formulation operational model 
research boehm shows stopping moment idea 
initial phase project usually factor difference optimistic pessimistic estimates effort 
putting little effort defining operational model pays considerably requirements specification known detail factor difference high low estimates 
improvement 
process problem analysis iterative 
completing naming conventions accordance findings boehm reason believe converged final problem specification continued investigate problem detail 
decided challenge naming convention prodcode originally offered customer 
applied grep instructions follows order find declarations fields digits person day meant represent hours person representing solution provider 
grep pic 
wc grep pic 
wc indicate grep commands slightly elaborate avoid matches data types prefix happens match pic pic 
browsed field declarations checked source code 
discussed couple candidates client added pc naming conventions 
accounting naming conventions expect naming conventions obeyed 
code exploration determine approved fields product codes moved fields name covered naming conventions 
instance query gives lines move statements prodcode field source grep move prodcode move prodcode link field prodcode move prodcode tab prog ind prodcode dat 
move prodcode booking ind 
move prodcode tab prog ind prodcode mand 
shown hits reveals data name ind line program obviously follow prescribed naming conventions 
recall tooling time note developed data flow analyser accomplish task accuracy 
seen people tempted write perfect data flow analyser control flow analyser slicer dead code detector solve problems find need tool took time 
recall stage better simple tools require front investment tool development 
powerful infrastructure available time customisation applicable portfolio hand non affordable 
example advent house preprocessor far non encountered cocktail embedded languages simply strange dialect trigger considerable customisation efforts advanced technology just day 
customisation issue explaining findings people client site underestimated speaks favour simple tooling 
refined operational model investigation move statements shows fields product codes names reveal functionality 
need improve operational model identify affected fields precisely field declarations follow naming conventions prodcode pc affected 
addition fields occur move statements affected field affected 
style specification euro conversion projects design sophisticated tools identification problem spots needed impact analysis 
model raises issues view estimation effort pollution need sure identification affected fields pre cise suffer false negatives false positives 
name resolution need able navigate sites affected fields move statements declaration sites 
discuss problems detail 
pollution na algorithm identification affected fields include fields 
happen field just product codes types 
fields types get included transitive closure 
see problem relevant investigated move statements looking types operands 
consider line code shows data item tmp alpha move statement definite product code move prodcode tmp alpha 
type tmp alpha turned pic 
extra large type tmp alpha program suggested field served heterogeneous buffer field 
qualify fields affected just move statement tmp alpha 
name resolution initial operational model read kind textual replacement command identification affected fields sites complicates situation 
start interact language syntax static semantics able navigate sites move statements corresponding declarations operands entirely trivial 
name resolution potentially needs handle compound data fields illustrated nested group field notice occurrences 
rec 
rec 
grouping visually emphasised indentation common cobol grouping defined order level numbers 
fld pic 
pic xx 
fld pic 
rec 
fld pic 
pic 
degrees freedom referring components group fields 
legal possibly occur move statements rec rec refers declaration 
rec refers declaration 
rec refers declaration 
rec refers second declaration 
rec refers second declaration 
fact data name correspond valid ambiguous 
regard prodcode project question affected fields require compound name resolution 
fortunately analysis revealed precision required 
effort estimation precise name resolution relatively expensive checked really need prodcode project 
prototyped identification affected fields 
augmented prototype inclusion overloaded name reported 
turned overloaded names occur fields followed naming conventions product codes 
analysis revealed ignore compound names name resolution 
extra effort propagation affected fields plus ad hoc name resolution estimated account person days adding earlier person day initial operational model 
note effort grown factor compared initial estimation line findings boehm regarding precision requirements specifications 
type variations component initial problem statement worth challenging 
exploration affected fields revealed types pic product codes 
detected different types 
discuss actual list 
type possibly different expansion rule necessary 
important realise gained insight enables realistic estimate regarding increased effort project 
estimate higher customer initially expected 
idea sure customer aware encountered complications 
types pic puzzled subscripts 
sub pc pic comp 
move prodcode sub pc 
picture string describes type signed numeric data item digits 
need signed type 
digits 
note included line source code showing connection sub pc prodcode 
confronted domain experts client site type offer explanation 
findings reality modification projects information build confidence thorough fair cost estimation 
code exploration reveals issues come surprise domain experts need understood order supply solution modification problem 
identification usage patterns considered declarations possibly affected code locations 
important question answer usage patterns product codes affected need adaptation 
identifying affected fields probed move statements see revealed additional affected fields 
want systematically learn usage patterns 
prodcode tracing developed simple analysis determine occurrences prodcode corresponding statement form operands context 
perl rapid tool development 
produced list looks follows field ind set numeric field ind set field ind move alpha move numeric 
list entries corresponding uses product codes prod code application 
line output consists program name line number columns operand combination prodcode field 
indication kind operand shown field numeric literal alphanumeric literal 
line report mentioned statement form prodcode field 
report provides useful overview contexts 
just move statements set conditions statements 
findings trigger questions occurrences literals ring bell 
prodcode field statement 
indication hard coded literals 
reason set statement product codes 
set state ment reveal tables subscripted product codes 
patterns deserve deeper analysis exhaustive case discrimination potentially subject adaptation 
clearly done full problem analysis 
number uses factor larger original number merely affected declarations 
increase effort fully aligned boehm findings 
hard coded literals regarding question learned prodcode implementation heavily relied hard coded literals product codes 
notably hard coded literals occurred move statements boundary literals conditions limit loops legal product codes 
see literals 
consider occurrence literal statement prodcode field prodcode entry prog numeric prodcode entry prog go 
move prodcode entry prog sub prog 
initial problem statement assumed possible codes comparison 
reveals codes greater carry meaning 
affected fields types pic prior data expansion store values greater 
code snippets invited suspect usage values greater error codes 
noticed implementation dynamic type checks ensure fields product codes contain proper numeric values 
boolean condition line check numeric 
triggers new questions anybody check prodcode numeric 
numeric 
revealing error codes simple way look potential error codes search loops ranging 
actual system find 
look loop 
ind go 
perform 
add ind 
go 
suppose analysis categorised ind affected field 
loop iterates product codes incrementing field ind 
product code paragraph performed 
loop terminated condition ind holds 
clearly error code 
investigation reveal alpha numeric error codes 
assume test field contain numeric field indication defensive style programming related irregular situations 
adaptation error codes apparently fields hold error value type pic 
question need expansion digits precautions due 
fact extension fields type pic needed insisted precisely valid product codes 
product codes code left serve error code 
state addendum operational model literals occurring simple comparisons involving affected field second operand need replaced values denotes parameter modification project formulation specify affected patterns precisely 
formulation considered sufficient effort estimation 
tables product codes cobol different sorts statements share verb set 
idiom turned product codes assign values index fields cobol tables 
tab prog 
elem occurs indexed ind 
code pic minimum pic 
comp code pic 
set ind prodcode wg mand num 
move code elem ind 
line index field ind declared associated table elem 
line set statement assigns prodcode ind 
line table access performed ind serves index field 
conclude table elem indexed product codes 
expansion affected tables expanding number product codes tables product codes need expanded 
encountered new fact began understand new upper limit product codes affect performance system 
response time system memory requirements change factor increase size tables say entries 
course depends factors size table entries complexity operations entry complexity loops tables linear quadratic 
estimated product codes starting point revised necessary 
assumed operational model needs enhanced follows take findings set statements account set statement reveals affected fields just move statements 
occurs clause table index field known affected changed entries entries 
easily locate tables recognising occurs clauses 
table affected indexed affected field 
easily change occurs clauses expand table 
operational model straightforward implement 
complication arises fact index table necessarily need declared explicitly case indexed clause missing 
link index fields affected table identified differently 
fact simple form name resolution 
estimated person days effort table expansion including special purpose name resolution 
encountered subtleties code exploration revealed issues particularly puzzling compared things discussed far 
firstly numeric alphanumeric types freely product codes including hard coded literals 
initially unable predict implications irregularity 
secondly tables subscripted product codes table entry contained product code 
initially unable decide expand 
subtleties discussed detail underlines architectural modifications tend intricate suggested deceptively simple problem statement communicated initially 
suspicious tables concerned tables involve product code entry 
tables potentially subject expansion basis loose argument product codes table need hold entries fact different idioms conceivable table table hold exactly entry valid product code 
table entries product codes 
idiom revealed requires table expansion 
fixed table table serves kind buffer fixed number entries 
instance size table reflect number viewable entries screen 
idiom require expansion expansion incorrect 
open ended table number entries table bounded greater number product codes 
case new number entries defined case 
sample code correspond idiom 
fragment fills table loop reading records file 
elem occurs 
prodcode pic 
short txt pic 
val min pic 

perform test prodcode 
add ind 
move prodcode record prodcode elem ind 
read file record go 
go 

field ind loop variable initially zero 
occurs clause table manifests upper limit number records file 
case need argue favour expansion structure loop suggests records possible product codes potentially encountered 
fact loop rule records product code 
code exploration file control entry file revealed prodcode declared primary key file 
record product code normal increase table entries appropriate 
option adopt defensive style modification 
expand tables regardless symptoms speaking favour expansion 
obviously approach potentially wasteful 
customers strictly dislike think unnecessary modifications 
furthermore circumstances expansion result hazardous code 
notably expansion conceptually fixed table lead range problems screen 
fortunately code exploration revealed suspicious tables prodcode project 
conclude issue suspicious tables relevant phase cost estimation 
safely postponed dealing suspicious tables 
strange literals maximum error code simple code exploration revealed hard coded literals system 
sec 
listed usage patterns product codes 
initially suspicious occurrences alphanumeric literal affected move statement 
meaning 
alphanumeric literals 
learned codes encoded distinguished product codes special meaning certain program certain time migration program 
fact codes alphanumeric largely accidental 
hard coded literals need changed say expanded subtle reasons illustrate 
consider alphanumeric field product codes mand 
prodcode pic xx 
move prodcode mand 
expansion move statement move literal field prodcode mand 
affected literal expanded 
prodcode application exercised basically combinations numeric alphanumeric operands 
systematic investigation revealed alphanumeric types pic xx product codes 
means numeric alphanumeric product codes program 
eventually need decisions combinations 
confined postpone working details literal expansion need small number decisions expanding literals 
amount literals subtle issue required adding person day estimated effort 
dissolved complications recall investigated precise name resolution needed 
investigations crucial limiting costs project 
complications dissolved order keep analyses transformations simple possible 
list dissolved complications seed set construction require 
example conditions data declarations qualify field element seed set 
patterns usage support assumptions elements seed set 
relatively reliable naming conventions prod code project necessary 
sophisticated analyses uncover buffer fields fields types usage opposed pure prodcode fields 
prodcode project restricted simple heuristics planned human approval affected fields 
size application reasonable 
syntactical forms taken account move corresponding statements arithmetic statements file access statements 
prodcode project concluded additional forms reveal affected fields 
example arithmetic performed product codes 
analysis affected fields potentially inter modular analysis 
mean track product codes program boundaries subprogram calls imports copy books record descriptions 
prodcode project subprograms application code naming conventions obeyed copy books 
identification affected fields file basis sufficient 
analysis affected fields expansion fields require precision redefinitions cobol form unsafe variant records unions move statements group fields operands taken account 
means code exploration checked necessary 
conceivable complications omit relevant 
theory issues taken account practice neglect theme due specifics project 
complications relevant imply major extra effort illustrate means discussing item list 
group moves consider contrived code fragment prodcode pic 

pic second pic 
move prodcode 
prodcode field moved group field happens split product code characters 
idiom exercised prodcode application projects carried 
instance date ingredients day month year retrieved manner 
problem idiom group field count affected field necessitates generalised operational model expansion 
positions second statements relevant identification affected fields 
furthermore code rest assumption positions 
code needs update 
finding problems irrelevant prodcode project embarked complex algorithms 
redefinitions identification affected fields expansion complicated product codes occurred redefinitions 
cobol facility provide multiple interpretations stored data 
illustrate redefinitions overlaying fields stored separately prodcode pic 
prodcode xx redefines prodcode 
pic second pic access product codes ways digit value position wise 
contrived fragment 
fortunately redefinitions prodcode application involve product codes 
languages offer related language constructs unions constructs known considerably complicate reasoning programs 
redefinitions pervasively cobol programs 
especially older software redefinitions save space imposing different interpretations block memory file record 
cases expansion primary overlayed data structure justified 
hard determine redefinition meant provide alternative view data vs unrelated data structure 
convergence analysis useful idea feed problem specification process pick program code base perform obvious changes manually 
approach usually result intensive exploration particular program trigger implementation simple queries code exploration 
queries applicable full code base 
process reveal aspects solution strategy 
analysing code patterns implementing exploratory analyses apply worst case selection criterion 
instance program complex programs cover simple complex cases 
point code exploration necessarily give accurate cost estimation 
formula detect required amount code exploration form time boxing idea try find possible prominent aspects problem specification inventory new effort estimation 
prodcode project result problem specification phase collection examples scenarios reports raw solution options illustrated 
kind problem specification large extent comprehensible system owners 
solid basis cost estimation formed 
addition came management summary changes context probably necessary 
summary looks follows filename fs ws cy xx mv st misc 
report lists programs corresponding counts prodcode respective pattern 
abbreviations context patterns fs affected code file section ws affected code working storage section cy affected code copy books xx affected code alphanumeric literal context affected code numeric literal context mv affected code move statements st affected code set statements affected code statements misc affected code statements 
code patterns directly involved prodcode 
number times larger original estimate prodcode declarations 
project economics know impact problem deal pricing issue 
important characteristic type project customers tend demand fixed price fixing problem occurs 
fixed price origins directed thinking customer initially envision black box tool job price fixed price 
position mandatory come accurate cost estimation 
evidence regarding specifics complexity problem gathered 
customer convinced estimation reasonable 
cost estimation contract signature problem analysis described sec 
completed week 
analysis phase covered consultancy contract person days problem specification deliverable 
lead working problem specification arranged daily meetings client complemented phone calls email threads 
guaranteed necessary customer involvement 
idea separate contracts analysis rest project customer stays power customer decide continue project deliverable analysis phase problem specification customer property 
specification supposed system owner regardless continuation project 
initiate continuation project submitted effort distribution cost estimation form draft contract 
submission offered fixed price calculated effort estimation person days 
activity effort distribution listed working days code exploration meetings customer expected results detailed modification rules detailed side conditions service delivery kind documentation 
working days tool development analysis affected fields 
working day tool development picture string expansion 
working days tool development table expansion 
working days tool development literal expansion 
working days manual adaptations remaining affected patterns recording transformation scripts 
working day documentation modifications 
working day running mass conversion production code san ity checking mass conversion results 
effort distribution defended meeting prior contract signature 
information available estimate 
agree terms signed fair contract 
contract fixed side conditions 
notably liability limited fact modification gl code carried 
responsibility testing assigned customer 
furthermore contract stated detailed documentation performed changes delivered 
management summary completion project customer provided kind management summary performed changes 
summary helped convince client agreed price reasonable 
overview numbers changes categories shown fig 

note compilation overview straightforward view requirement document changes 
recall moment time declarations sites 
course locations affected code needed update 
summary see actual changes 
problem count classes changes picture expansion table expansion maximum expansion alphanumeric literal expansion numeric literal expansion adaptation display filler contraction adaptations changes fig 

management summary prodcode project 
affected spots detected tools code exploration 
changes covered generic transformation rules 
remaining changes performed manually recorded patch scripts replay 
cost risk dimensions want briefly argue architectural modification effort automated transformations right way addressing prodcode problem 
summarise costs risks manual approach 
omit discussion risks automated modifications generally re engineering refer 
costs manual approach benchmarking data known maintenance programmers average deal bugs month 
data indicates time maintenance programmer occupied understanding problem order actual change 
management summary provided fig 
see changes 
grouped named categories additionally changes fit main categories 
types change 
lack information assume applying type change similar fixing bug apply types changes month changes months 
note applying months understanding 
changes client tested changed code carried complementary changes db tables 
implied additional working days client site 
total effort working days benchmarked estimate months working days 
automated process architectural modification resulted improvement factor compared conservative estimation tackling problem course regular maintenance 
problems code volume metric people think working days project hand 
way looking project contained files 
day file relatively small change 
code volume useful metric 
ted keller showed interesting analogy 
suppose gall removal average duration minutes costs 
suppose average pea sized brain tumour hours time cost necessary 
surgeon effort merely measured tissue volume obtain results 
suppose gall times larger pea sized brain tumour 
neuro surgeons times expensive tissue volume times productive tissue volume general surgeons able remove pea sized brain hour 
keller show looking code volume maintenance projects leads results 
working days prodcode problem effort succeeds manual approach 
risks manual approach apart cost dimension risk dimension 
fact dimension important missed looking cost issue 
suppose type mass change project done hand 
cases team looses oversight pretty quickly solutions applied case programs updated 
order apply type change order keep track process 
conceptual scope average maintenance programmer program entire system 
change program goal modify structural integrity system program scope sufficient 
manual modification projects fail avoided place leading years patchwork 
mass change projects avoided cost dimension risk dimension 
experience automated modification efforts perform better dimensions 
example failure give example demonstrate risks manual approach 
example concerns preparation system euro conversion 
manual efforts modification effort failed 
stage colleagues hired resolved problem means hour managed automated modification project 
reason earlier failure manual attempts lot changes needed changes dealing seemingly random alphanumeric identifiers average length characters 
systematic identifiers recognised partly changed 
data structures needed phased copy books macro function called replaced parts alphanumeric identifiers factored put parameters replacement macro 
identifiers looked alike exactly typographical errors hardly detected 
status prevented human implement large scale changes scheme completely entire system 
calculation productivity improvement augmented risk dimension calculation shows saves case happens fail hand 
design solution phase problem analysis deals detailed design solution 
rules analysis transformation prodcode application 
describe rules means examples rules subjected formal specification 
rules sufficient detail serve input actual tool implementation 
specification formalism briefly explain specification formalism 
algebraic specification consists equations form open terms signature 
equation interpreted rewrite rule left right ground term matches left hand side equation open term conditions fulfilled conditions evaluate true rewritten variables occur terms bound closed terms matching 
specifications section executed asf sdf meta environment system implements conditional term rewriting concrete syntax 
specification relies special idiom supported asf sdf generic traversal functionality 
function symbols marked model traversal arguments bottom top traversal 
remaining arguments parameters traversal 
result specifications prog seed affected prog seed prog affected prog prog affected prog affected prog prog prog prog prog affected prog prog fig 

top level specification 
radically concise constructs interest need covered equations 
top level specification fig 
top level specification prodcode modification single conditional equation 
expresses modification consists steps condition seed set determined function prog program set fields match certain naming conventions 
seed set starting point determining affected fields 
second condition function extends seed set affected fields 
done analysing statements source code prog maximum number iterations 
third condition function expands picture strings af field prog declarations elaboration simple case turn pic pic 
results intermediate prog result fourth condition function expands literals refer maximum number product codes 
concerns literals statements 
transformation produces intermediate prog result fifth condition function expands literals re fer product codes 
meant compensate mixture numeric alphanumeric product codes 
transformation produces intermediate prog result sixth condition function expands tables subscripted product codes 
transformation operates prog computes final prog result function takes original prog program additional parameter name resolution 
id str level id dd items pic seed str id dd items seed level id dd items seed seed prodcode pc id str str str fig 

identification seed set specification 
steps discussed sequel 
part section discuss specific changes separately explain approach documenting required changes 
identification affected fields identify seed set contains affected fields recognisable code naming conventions 
propagation step needs performed repeatedly computing closure fields type usage 
finding seed set problem specification phase checked naming conventions initially provided customer additional ones 
result knew names prodcode pc product codes 
names occur prefixes data names 
specified accordingly 
define function accumulates seed set denoted seed 
top level specification function applied complete program prog location match possible cobol data division 
rely generic traversal functionality need specify trivial rewrite rules navigate relevant patterns 
explain remaining equations 
function check identifier matches search patterns 
equations employ wild card notation cf 

furthermore check length fields function code exploration encountered affected fields length encountered product code fields length 
fields length may expanded needed reveal affected fields propagation 
move id id id affected id affected set id id id affected id affected fields affected fields affected fields affected fields affected affected fig 

step propagation specification 
strongly recommended check seed set false positives may pollute remaining steps analysis 
propagation purpose propagation identify data fields program type usage fields seed set 
subdivided propagation phases 
firstly step algorithm detects affected fields statement forms 
secondly iteration suitable condition 
prodcode project straightforward propagation algorithm job 
step propagation fields move set statements type usage constructs provide input step propagation 
consider move statement move prodcode pc customer record 
example step propagation reveal new affected fields prodcode pc covered naming conventions product codes 
set statement field ind uncovered step propagation set ind pc customer record 
step propagation formalised fig 

move statement set statement involved fields type usage see equations 
equations suggest step propagation readily arranged syntactical patterns 
set fields fields type usage overlap set affected affected fields far add fields affected see equation 
set affected preserved see equation 
iterated propagation definition propagation analysis completed iterating step propagation new fields maximum iteration count reached 
top level equation fig 
stated set prog affected affected affected affected prog affected affected prog affected affected prog affected prog prog affected fig 

iterated propagation specification 
affected fields initialised seed set parameter position iteration count initialised maximum count 
iteration propagation defined fig 

equation simply states iteration stops iteration count reached zero 
equations function step propagation applied 
equation states iteration stops new affected fields equation states continue iteration 
pollution problems discussed earlier computation affected fields done care 
prodcode project include fields king size formats buffers propagation 
brevity reflected specifications 
projects useful employ negative name patterns criteria avoid false positives 
prodcode project iterated propagation converged step second step reveal additional affected fields 
experience usually indication absence pollution problems 
picture string expansion start picture string expansion 
intuition course expand type pic pic discuss types 
illustrate expansion data division fragment program stra fields 
stra mand 
stra data 
pc pic 
fun pic 
ski pic 
line see pc field level name matches conventions product codes 
field expanded picture string short 
expansion leads code stra fields 
bb bb bbbb bbb xx xxx str str fig 

picture string expansion specification part 
id affected str str level id dd items str pic dd items affected level id dd items pic str dd items fig 

picture string expansion specification part ii 
stra mand 
stra data 
pc pic 
fun pic 
ski pic 
underlined expanded picture string 
types product codes pic digits pic xx alphanumeric positions pic alphanumeric positions blank position happens zero 
fig 
map data types product codes prodcode application expanded types 
affected fields types type pic preserved 
assume types capable hold digits 
fig 
specification picture string expansion 
equation deals pattern called data description entries field declarations 
condition checks data name hand set affected fields 
second condition performs actual picture string expansion specified fig 

argument function arbitrary field declaration 
associative list pattern matching picture string str obtained turned expanded equivalent str note specification complicated case name resolution takes compound data account 
maximum expansion pointed earlier literals need adapted exercise boundary values product codes 
code exploration revealed boundary values explored conditions statements 
required adaptations form 
pc pc pc pc pc pc pc pc pc denotes name affected field 
new maximum 
flipped variations patterns omitted brevity 
maximum expansion illustrated code fragment 
ind go 
perform 
add ind 
go 
propagation revealed ind affected field program 
condition line refers number product codes needs adapted accordingly 
ind go 
perform 
add ind 
go 
principle patterns discussed conceivable comparisons formed various ways 
idea restrict transformation rules actual code patterns code base 
aside thinking idea 
firstly require substantial 
secondly normalisation difficult meet id affected num num num rel id num rel id id affected num num id rel num id rel num fig 

expansion table boundaries 
num num side conditions syntax retention 
fig 
maximum expansion specified 
rules cover special patterns listed 
transformation function applied conditional expressions consisting relational operator rel operands 
variable rel matches relational operator symbols negated counterparts 
equations affected field serve left right operand operand required numeric literal 
equations specify actual expansion literals 
literal expansion analysed problem learned numeric alphanumeric types product codes 
furthermore code exploration revealed numeric alphanumeric literals hard coded cases 
particular literals occurred patterns move pc 
move pc 
pc affected field type 
patterns raise question literals need expanded corresponding fields expanded 
semantics moves numeric alphanumeric types defined bit subtle interpret 
virtually combination numeric alphanumeric source target length picture string valid result regulated number rules 
table explores combinations 
literal moved field pc actual result depends picture string 
table denote space symbol 
pc pic xxx pc pic alpha numeric literal move pc numeric literal move pc obtained knowledge writing tiny test program reliable approach 
experienced programmers predict cases reliably 
table concluded literals expanded respectively 
patterns involving literals clear literals occur number syntactical patterns just move statements 
systematic code exploration narrowed possible patterns exercised prodcode application source operands move statements conditions statements declarations condition names 
extend operational model accordingly literal alpha numeric numeric length assigned compared product code field leading zero added 
literals occur part declaration condition names product codes 
literals need expanded manner 
fragment illustrates literal expansion statements prodcode wg mand alpha sentence go 
need expand literals compound condition compared field prodcode wg mand alpha prodcode wg mand alpha sentence go 
fragment uses cobol called abbreviated combined relation conditions 
condition clause abbreviated manner assuming left operand comparison comparison operator inherited subsequent abbreviated comparisons 
instance abbreviates 
id affected lit lit lit move id affected move lit id id affected lit lit id lit affected rel id rel lit id affected lit lit lit rel id affected lit rel id fig 

literal expansion specification 
lit lit programs hard coded literals occurred eventually suspected dead 
cases maintenance programmer argued programs literals product codes implemented shot data conversion point time 
code fragment suspected conversion program 
fragment illustrates literals product codes occur part data field declarations cond occupied pic value zero 
occupied code values 
line condition name occupied code declared 
name serve form condition true field cond occupied holds values 

expanded literals 
literal expansion specified 
equation covers literals move statements 
equations cover literals comparisons 
brevity omit rules needed deal complex forms conditions abbreviated combined relation conditions 
actual expansion literals defined equations 
literals length taken apart padding zero added 
table expansion data field subscripted affected field table hosts subscripted field expanded 
table normally holds entries expansion entries expansion 
illustrative purposes continue fragment involves table declaration table accesses code uncovered corresponding index field product code propagation tab prog 
elem occurs indexed ind 
minimum pic 
comp code pic 
move minimum link minimum tab prog ind 
move comp code link comp code tab prog ind 
set ind prodcode wg mand num 
line lines away table access see set statement ind connected prodcode 
transformed part fragment looks follows tab prog 
elem occurs indexed ind 
minimum pic 
comp code pic 
omit rewrite rules table expansion discuss irregular cases encountered 
variations related programming skills systematic analysis tables just tables entries tables entries subscripted product codes 
tables extra entry indicated defensive style uncommon actual cobol programs 
defense concerned code check index field different error code 
avoid run time errors programmers add extra entry 
expanding tables entries need preserve status extra entry 
variations related dead code addition tables subscripted product codes interested tables involved field product codes 
recall earlier discussion tables require expansion 
particularly suspicious example tab contr 
prodcode el occurs 
prodcode pic 
year pic 
contr el occurs 
pic comp 
contr perc pic comp 
ind comp pic 
ind expired pic 
filler pic 
notice prodcode field 
notice table entries 
examined table 
table indexed data item product code type usage loop encoded go logic 

perform rent comp 
add sub tab 
read file prodcode el sub tab compute contr sub tab go 
go 
apparently table filled retrieving records file called file 
evidence sufficient number entries prior expansion 
meeting domain expert proposed code dead 
told number original upper limit product codes system designed upper limit extended product codes 
table forgotten earlier modification effort carried manually 
code happened dead time program error detected 
result meeting customer decided deal dead code 
side note iterative history updating uncommon 
instance view date expansion systems built digit year updated deal digits updated deal leap years updated deal year updated deal leap year exception updated deal weeks year weeks updated digits going updated case windowing solution 
irrelevant tables tables occurs project expanded refer number product codes cases 
claim approved inspections comments naming conventions 
table example case table expansion needed 
ci table 
ci entry occurs 
entry ci 
ci reg pic 
ci prov pic 
part pic 
part pic 
consulting domain experts learned name convention ci points data product codes certain kind customer information 
specific changes remained transformations previous subsections relatively generic sense lend general modification rules 
remaining specific changes explain informal manner 
spots detected tools code exploration changes performed manually 
stress changes recorded patch scripts generated diff tool repeat changes adapt changes 
expecting changes times cost effective doing hand recording changes 
filler contraction group fields picture string expansion fields reside group fields offers complication 
group field happens serve input output buffer similar purposes preserve length group field possible 
exceed line length printer screen 
similarly avoid data files recreated different length 
issue addressed advantage fillers part group fields buffers records 
fact fillers cobol programmers formatting anticipate data expansion 
measured systems physical lines code consisted fillers 
consequently attempt compensate expanded item reducing size sibling filler 
group field table entry contains prodcode field 
group field characters long line buffer expected precisely length 
various fillers optimally format information shown screen sent line printer 
table entry 
filler pic 
prodcode pic 
filler pic code pic minimum pic 
cobol terminology filler declaration takes precisely form ordinary data declaration keyword filler data declaration data name 
results dummy anonymous parts group fields initialised filled move statements 
filler pic 
comp code pic 
filler pic 
retain length characters expansion prodcode field reduce filler prodcode fact filler table entry 
filler pic 
prodcode pic 
filler pic code pic minimum pic 
filler pic 
com code pic 
filler pic 
particular example argue length exhausted anyway long filler group field 
length group field goes expansion unused characters tail 
general liberal approach cause harm instance fields subprogram calls file records 
receiving subprogram line wise printing insist characters long buffers declaration linkage section 
obviously change length client subprogram disastrous effects call linkage section fit 
cobol compilers necessarily emit warnings mismatch leading run time errors 
general preserved invariants code including length buffers 
updating comments strings simple text search prodcode patterns comments alphanumeric literals contained prodcode 
occurrences required adaptations 
instance programs display paragraphs 
display 
display prodcode table greater 
display 
call 
clearly error message connected product codes 
message outdated expansion 
new range overflow 
manually updated display paragraph 
display 
display prodcode table greater 
display 
call 
note added asterisks lines 
affected comments prefixed table declaration indexed product codes element occurs prodcode comment converted follows 
element occurs prodcode argue keeping comments date worth effort affect functional behaviour 
reasons comments updated 
maintenance programmers study comments confused inconsistent documentation take time properly 
average maintenance programmer aware entire change history system 
easily resolve inconsistencies faced outdated comments 
maintenance teams learn comments outdated cases may assume case comments including comments colleagues 
lead considerable loss productivity 
strange idioms fragment required mixture modes expansion 
picture string expansion literal expansion table expansion relevant time 
fragment hard codes possible product codes 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
prodcode table redefines 
prodcode occurs pic 
hard wired list possible product codes declared fillers blocks product codes list redefined accessible cobol table entries 
update declaration preserve functional behaviour 
idioms hand issue architectural modification project 
come transformation upgraded list product codes follows 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
filler pic value 
prodcode table redefines 
prodcode occurs pic 
note number product codes covered filler differs original code adapted code 
deviation implied maximum line length cobol 
alternative solution called continuation lines alphanumeric literal distributed multiple lines special continuation syntax cobol dash sign seventh column 
documentation changes recall prodcode contract required detailed documentation changes 
addressed requirement design solution follows 
assumed changes documented means source code annotations including category change 
specific way accomplish goal label affected line code short conversion code marking comment margin starting column cobol files 
annotation starts common prefix pcexp product code expansion 
character appended characterise rule applied character encoded rule applied 
fig 
list codes annotation 
illustrate discipline annotation easily extract affected lines program 
similarly obtained rule encodings picture string expansion table expansion occurs maximum expansion numeric literal expansion alphanumeric literal expansion adaptation display statements filler contraction adaptations stands complex additional remarks generic transformation specific transformation hand recorded patch script comment transformation negative code suspicious adaptation needed grep pcexp filler pic 
prodcode pic 
elem occurs indexed ind 
prodcode pic 
fk tk occurs indexed ind tk pic prodcode booking pic 
ind ind go 
display 
display prodcode table greater 
display 
prodcode wg mand num prodcode 
fig 

modified programs annotated pcexp 
margins 
possible codes listed part 
grep affected lines illustrated part 
management summary sec 
lists changes category 
documentation unchanged patterns annotations document code fragments considered changed complete justification 
alert suspicious patterns trigger false positives 
instance explored table expansion encountered table need expansion concerned product codes cf 
sec 

sort non changes documented follows ci table 
expansion performed 
table deals customer information 
ci entry occurs 
stands text comments 
stands negative change 
marking new comment lines ensures added comments confused primary documentation 
comments help explicit problem spotted missed problem fact 
particular inspect test updated system type documentation turns useful significantly aids reviewing completeness solution 
common practice testers customer site inspect code try check cases missed 
see stumble suspicious unchanged parts system seen code change necessary 
lines text comments explain change necessary 
implementation tools described approach architectural modifications naturally employs tools kind simple means code exploration tools grep advanced tools program analysis ultimately required 
tools involve grammar knowledge certain degree employ non trivial algorithms heuristics data structures compute results 
part modification project allows generic adaptations implemented terms automated program transformations 
development transformation tools organised continuation earlier efforts tool support code exploration program analysis 
manual changes require scripting record re played 
case ed scripts obtained option unix tool diff 
scripting turns manual changes basic form automated program transformations 
relevant prodcode project en countered need develop interactive components help walking affected code locations approving guesses implemented heuristics making selections possible transformation options 
principle tools kind developed client site service provider site 
recall tools prod code project developed service purposes 
briefly describe lightweight implementation prominent tools analysis transformation prodcode project 
discuss general technology issues options 
current line prodcode pattern extend seed set file name line number current line declaration matrix column section elsif current line move set matrix column propagate file name line number current line zero space elsif current line propagate elsif current line read write call propagate matrix column previous verb current line move set read write call previous verb fig 

excerpt perl script code exploration program analysis 
perl implementation prodcode project implemented required analysis transformation functionality specified previous section kloc perl code 
language perl perfectly suited implement lexical tools analysis transformation due capabilities regular expression matching file handling 
discuss noteworthy aspects implementation 
purpose discussion generally promote perl architectural modifications illustrate characteristics benefits limitations lightweight approach 
technology options perl appeared expensive risky prod code project time 
analysis functionality fig 
core fragment perl script analysis shown 
seed set list affected patterns produced fragment 
script operates number data structures uses auxiliary functions deliver required functionality 
worth mentioning script initiated problem analysis completed matured useful provide input ultimate transformation 
explain fragment 
line current line input checked matches prodcode pattern 
recall conventions prodcode pc 
match succeeds extend seed set line 
function records file name line number current line prodcode pattern 
depending location matched prodcode pattern counter relevant division section incremented 
prodcode pattern current line declaration say data division linkage working storage section 
affected var line number data name var line number picture position vertical position data name old picture vertical picture data name left part substr current line picture position right part substr current line picture position length old picture new picture map string old picture difference length old picture length new picture right part substr right part length right part difference old line left margin substr current line right margin new line left part new picture right part new compl line left margin new line fig 

excerpt perl script transformation 
line increment corresponding counter matrix type occurrence index corresponding column 
prodcode pattern match line declaration code match consequently procedure division 
various statement categories handled elsif lines 
consider case current line contains prodcode pattern move set statement lines 
brackets pattern move set line result match move vs set saved predefined variable 
line count match incrementing matrix verb right column 
line propagate new variable 
function propagate extends set affected fields 
arguments propagate listed lines 
arguments consist file name line number current line matched verb stored regexp variable plus line noise indicate cobol syntax skipped order arrive new cobol verb 
cases statements handled similar way lines 
closing line deals case verb determined current line 
implies middle multi line statement started previous verb lines ago 
case update counter previous verb line 
storing current verb previous verb accomplished line 
perl approach lexical grammar knowledge encoded implementation 
instance list keywords recognising statements line fig 
directly cobol grammar 
transformation functionality examine core fragment transformation functionality 
excerpt fig 
illustrates line line treatment picture string expansion 
full implementation transformation functionality contains similar part treating table expansion literal expansion 
line wise process picture string expansion relies data structures reuse analysis functionality 
line check affected variable declared line hand 
case picture string expansion attempted 
number sub phrases corresponding declaration looked lines data name starting picture position picture mask current line old picture string left part right part picture string 
line new picture string computed function map string 
takes old picture string old length new length returns new picture string 
picture string expansion completed construction new line steps 
lines difference old new length picture mask determined right part truncated accordingly 
difference normally heading blank picture string compensate additional digit 
line old line including margins turned comment line concatenating various items left margin columns comment marking column core current line right margin columns return 
line new line resulting cobol program constructed completed margins annotation line 
recall code indicates picture string expansion see fig 

technology issues discuss technology issues implementing functionality sourcecode analysis transformation required architectural modification projects 
reflecting issues crucial determine feasibility projects estimate costs 
overview prime issues context free vs lexical tools grammar context free technology allows re engineer express analyses transformations directly terms syntactical patterns language hand 
contrast discussed implementation adopts lexical approach basically operates level regular expressions model sequences tokens characters 
comfort pattern notation users grammar technology faced different notations encoding syntactical patterns 
option directly employ concrete syntactical notation 
option term format tree format object model 
dimension distinction pattern language comprises constructs sublanguage syntax result normalisation 
support pretty printing technologies come readily equipped pretty printer relevant language 
transformation technology strictly require pretty printer produce readable output 
pretty printing pervasive result completely rendered scratch regardless original indentation 
alternatively pretty printing conservative unchanged parts input pretty printed 
syntax retention transformations ideally preserve comments input 
requirements related comments 
modification projects require transforming comments adding comments documentation 
recall encountered additional issues prodcode project 
preservation comments just aspect syntax retention 
need preserve indentation layout 
domain specific support pattern matching building regard language syntax simplest kind domain specific support analysis transformation functionality 
means domain specific support include source code annotation generic traversal efficient intermediate representations suites disciplined meta programming 
reusable infrastructure ultimate technology comes readily packaged reusable infrastructure parsing pretty printing preprocessing data flow control flow analysis 
development enhancement customisation reusable components important factor eventual provision product line architectural modifications 
industrial strength attempt definition industrial strength observe industrial modification projects business critical systems tend require technology attributes scalability robustness technology fit portfolios millions loc range complex transformation problems 
reconfigurability tolerance adopting technology actual parameters specific language cocktail hand reasonably simple 
discuss complex issues depth 
issues covered consider concrete technology options 
simplicity lexical approach various widely known tools allow implementation lexical tools rexx lex perl awk sed 
lexical approach conceptually simple difference failure success cases 
usually technical preconditions embark lexical approach 
particular need parser pretty printer 
lexical approach naturally preserves layout modified software cf 
syntax retention 
lexical tools easily operate source code involves embedded language constructs preprocessing constructs 
lexical approach just suited tools analysis transformation special purpose preprocessors needed projects 
presentation newly inserted code including comments controlled accurately 
lexical tools easily deployed client site needed usually rely sophisticated technology 
limitations lexical approach problem lexical tools imprecise unpredictable borderline tools effective 
lexical tools easily lead severely damaged converted systems discussed sec 

complex code patterns get non proportional effort spent recognising transforming 
instance proper control flow analysis cobol requires recognition nested statement structure includes various specific phrases statement rules meaning delimiters 
analysis cumbersome implement regular expressions 
problem lexical tools normally tend reuse grammar knowledge poorly operate low level abstraction 
maintenance tools difficult 
rapid parser development enables context free tools tools aware language syntax principle better suited implementation functionality involves non trivial patterns 
unfortunately tools expensive implement 
industrial application grammar approach requires additional investments development parsers languages hand 
parser available necessary tweak project basis 
just tweaking expensive lexical tool manual 
language deployed systems cobol embedded sql cics transactions preprocessing challenge parsing technology 
new technology rapidly implement parsers potential solve problem expensive front investments 
conducting research context 
combine methods grammar recovery grammar deployment 
parser development simplified improved parsing technology offering convenient idioms parser tweaking 
mix lexical context free tools context free lexical tools synergistic manner 
combination context free tools precise analyses opposed transformations 
allows refrain investing pretty printing layout preservation 
analyses include precise data exact row column information lexical tools useful execute actual modifications 
context free tools approve lexically modifications example check resulting programs parsed certain postconditions met 
lexical tools ways complement context free tools compensate weaknesses 
lexical tools handle preprocessing prior context free parsing postprocessing merge output transformation original layout resolve layout documentation problems lexical level 
tolerant parsers combination lexical context free approach parsers tolerant dependent details context free syntax 
principle underlies fuzzy parsing island grammars tolerant grammars comprise island skeleton grammars 
approaches focus context free patterns interest rest input skipped lexical style 
tolerant parser development seen vital option rapid parser development identified bottleneck context free tools 
tolerant parsers share problem lexical tools potential false positives false negatives 
introduced skeleton grammars grammars deduced full blown base line grammar structure constructs interest inherited 
reusable infrastructure architectural modification projects face various challenges complex languages platforms imprecise incomplete requirements changes fixed pricing handling offloading testing 
reasons important establish suitable methodological basis 
faced complex modifications methodological basis needs complemented technological 
time line precise problem analysis unattractive implementation modification tools involves costs risks 
technological basis comprises reusable infrastructure analysis transformation source code see 
list components chances reuse including elements methodology cases preprocessors copy books cobol include files macros need expanded comment columns cobol need removed 
extra preprocessing account normalisation eliminate syntactical variation 
preprocessing challenged requirements reversibility postprocessing 
effects preprocessing reversed 
parsers front investment recovery development base line grammars 
grammars need deployed parser technology choice 
need processes rapidly recover customise grammars parsers new dialects new embedded languages 
pretty printers grammar language initial pretty printer generated 
proper investment development customised pretty printer 
pretty print rules reusable conservative pretty printing just patterns affected problem specific transformations 
name resolvers sites identifiers readily connected declaration sites 
additional properties provided number sites storage space field including group fields cobol 
data flow analysers components serve standard inquiries uses reachable definition 
analysers deal type usage analysis prodcode project 
analysers compute data implementation problem specific refactoring slicing tools 
control flow analysers components help performing general purpose problem specific control flow restructuring dead code detection 
analysers projects wrapping legacy components extracting business rules replacing transaction management 
low level tooling concerns plug technology extend editors ities structured editing interactive transformations 
concerns infrastructure building testing modification tools 
furthermore concerns technology component modification tools 
tension implementing ad hoc solutions investing reusable components 
consider example name resolution 
develop reusable component full name resolution just prodcode project economically justified 
size project relatively small budget modification project 
hand projects multi loc range investment building reusable component name resolution pay 
tension precise components vs leaving room heuristics 
instance type usage analysis amounts precise algorithm part attack pollution problems naturally involves heuristics 
instance prodcode project uncover buffer fields basis fuzzy criteria extra large types 
implies reusable components sufficiently parameterised customisation incorporate heuristics convenient 
technology options various technologies potential architectural modifications parsing generators transformation environments meta programming frameworks program kinds generic language technology 
categorise terms industrial strength vs home grown systems terms lightweight sophisticated technology combinations 
addition reusing existing technology ends implementing ad hoc solutions parts problem 
listing categorising assessing technology options specific technologies scope discuss illustrative experiences technology options 
prodcode benchmark discuss technology options prodcode problem basis assessment 
fact prod code problem served kind internal benchmark just close colleagues 
prodcode project suitable comparative assessment real world case reasonable size specification entire solution documented original system converted available 
options follow take context free approach solving problem opposed lexical implementation 
option asf sdf meta environment 
second option haskell transformation technology 
third option strategic term rewriting stratego 
asf sdf meta environment asf sdf meta environment bundles generic language technology 
notably provides couple formalisms executable specifications sdf syntax definition formalism asf algebraic specification formalism 
sdf rich syntax formalism supported generalised lr parser generator 
asf viewed typed programming language conditional term rewriting concrete syntax rules 
recall asf sdf rewrite rules development specification sec 

actual project developed specification back back lexical tools code exploration analysis modification 
specification served concise presentation solution meant actual implementation 
status implied technology issues 
firstly time cobol front immediately fit parsing prodcode code 
size time line prod code project days time complete problem analysis 
issue sufficient trigger deployment lexical tools 
side conditions complicated version asf sdf meta environment available time 
concerns layout preservation documentation changes 
status asf sdf meta environment infrastructure improved considerably 
firstly recovered grammars ibm vs cobol ii grammar improved process deploy parsers 
secondly simple form layout preservation transparently supported asf sdf meta environment 
underway improve reconfigurability pretty printing 
thirdly asf sdf meta environment provides convenient support generic traversal easy rewrite complex parse trees 
newer case study demonstrates current infrastructure refer 
asf sdf meta environment employed complicated cobol case study go statements removed control flow improved millions loc cobol different dialects 
haskell language processing functional programming languages sml haskell quite suitable implementing functionality analysis transformation 
firstly concept algebraic data types term matching building fit typed manipulation program representations 
secondly available abstraction mechanisms facilitate concise reusable implementations complex problems 
illustrated generic refactorings pic names pic affected fold alg alg data desc elementof affected fold alg alg pic clause mask case mask pic clause fig 

picture string expansion haskell simplified 
top level function pic converts cobol program parameterised names affected fields 
picture string expansion encoded nested fold say traversal program 
traversal see alg stops level data field declarations 
second traversal see alg stops pic clause replaces picture string 
traversals obtained refining identity map cf 
handle specific patterns data desc pic clause 

prodcode project served running example developing architecture haskell transformation systems 
clarifies integrating external components industrial strength parsers adding support generic traversal functional programming viable platform re engineering see 
experiences functional programming processing deployed systems reported time sml concerned problem 
fig 
show haskell implementation picture string expansion 
encoding relies traversal generator 
argue pattern matching construction readable 
implied prefix terms opposed concrete syntactical notation 
requirement layout preservation met operating algebraic data type parse trees extra positions layout information 
positions elided fig 

case asf sdf meta environment documentation changes left separate postprocessor line wise column sensitive style documentation easily accomplished level parse trees 
stratego stratego language supporting strategic rewriting define concrete rewrite rules normalisation strategies innermost traversal strategies top bottom traversals 
stratego integrated powerful parsing technology asf sdf meta environment 
analysis transformation functionality prodcode project reconstructed stratego specification sketched sec 
input 
problem layout preservation attacked stratego called overlays 
feature supports term access alternative signatures case alternative signature hides positions layout 
original contribution stratego liberty easily compose different traversal schemes 
liberty immediately needed straightforward modifications small number fixed traversal strategies appear sufficient 
free traversal schemes eventually implementing advanced parametric functionality analysis transformation see discussion 
open ended list options adopt criteria 
firstly consider systems tied specific source language 
language specific systems transformation frameworks fixed object languages useful specific projects systems 
furthermore consider systems cover parsing transformation opposed merely parser generators attribute grammar systems convenient transformation problems 
focus industrial strength systems pragmatic definition system industrial modification projects range different parameters carried system developers preferably system 
systems meet criteria dms refine txl 
front ends number typical languages business critical software available systems 
systems support manipulation sourcecode representations normally rule language akin asf sdf 
ends discussion prodcode project 
discussion comprised analysis problem project economics design solution implementation tools 
concluding remarks discussed issue deployed systems hitting architectural borders 
malleability systems needs architectural modification projects 
clarified architectural modification projects important deployed systems normally business critical enabling change vital preserve associated assets 
argued need architectural modifications reality software evolution 
new forms software asbestos unintentionally invade software 
discussed project drivers modification efforts need understood successfully complete modification projects 
discussed specific project full detail 
indicated type project done manually high risk high cost effort 
shown development precise problem specification helps course software modification projects 
source code exploration vital method 
discussed cost estimation contracting 
illustrated technical solution modification project typically designed means different kinds rules code samples 
discussed tool implementation service delivery 
summarise provided detailed insight nuts bolts architectural modification efforts delivered road map computer aided life cycle enabling software 
variant thereof conduct architectural modification efforts deployed software systems malleability systems alignment business needs 
success large scale modification effort dependent systematic problem analysis high degree automation choice appropriate technology getting system owner involved right way managed automated modification replace hand crafted maintenance 
popl 
proceedings th acm sigplan sigact principles programming languages january san antonio tx acm sigplan notices new york ny usa 
acm press 
bradley langer townsend 
cobol defense 
ieee software 
bass clements kazman 
software architecture practice 
addison wesley 
nd edition st edition appeared 

framing software reuse 
yourdon press prentice hall 
baxter 
preprocessor conditional removal simple partial evaluation 
aiken koschke editors proceedings working conference reverse engineering wcre pages 
ieee computer society 
belady lehman 
model large program development 
ibm systems journal 
boehm 
software engineering economics 
prentice hall 
boehm clark horowitz selby 
cost models life cycle processes 
annals software engineering september 
bosch van 
explicit modelling architecture design decisions february 
slides dagstuhl seminar software architecture recovery modelling 
van den brand heering de jong de jonge kuipers klint moonen olivier visser visser 
asf sdf meta environment component language development environment 
compiler construction cc lncs 
springer 
van den brand de jong klint olivier 
efficient annotated terms 
software practice experience 
van den brand klint verhoef 
re engineering needs generic programming language technology 
acm sigplan notices 
van den brand klint 
term rewriting traversal functions 
acm transactions software engineering methodology april 
van den brand moonen 
generalized parsing term rewriting semantics driven disambiguation 
bryant editors proceedings third workshop language descriptions tools applications volume electronic notes theoretical computer science 
van den brand sellink verhoef 
generation components software renovation factories context free grammars 
science computer programming 
van den brand 
rewriting layout 
nachum claude kirchner editors proceedings international workshop rule programming september 
brown 
cool compiler directing statements new standard 
com june 
www com gary htm 
brown 
typing data new cobol standard 
com february 
com gary htm 
brown 
techniques portable software 
john wiley sons 
rogers 
successful cobol upgrades highlights programming techniques 
john wiley sons 
information technology programming languages environments system interfaces programming language cobol standard iso iec 
cordy halpern 
txl rapid prototyping system programming language dialects 
computer languages 
van deursen kuipers 
building documentation generators 
yang white editors proceedings ieee international conference software maintenance icsm pages 
ieee computer society press 
van deursen moonen 
type inference cobol systems 
baxter quilici verhoef editors proceedings working conference reverse engineering wcre pages 
ieee computer society press 
due lopes de oliveira de la 
architecture recovery software evolution 
lehner editors proceedings nd euromicro conference software maintenance reengineering pages 
ieee computer society press 
henglein mossin niss rensen tofte 
type theory year conversion tool 
acm pages 
faust verhoef 
software product line migration deployment 
software practice experience 
favre 
cpp paradox 
proceedings th european workshop software maintenance durham 
favre 
preprocessors point view 
cimitile editors proceedings ieee international conference software maintenance icsm pages washington 
ieee computer society press 

experiences architecture dutch met may 
seminar utrecht netherlands www nl site nsf seminars mei ev ent met 
fowler 
platform independent malapropism september 
fowler www com html 
fowler 
type 
ieee software pages january february 
fowler 
needs architect 
ieee software pages september october 
hall 
year tools services 
symposium revolution continues managing diversity st century 

harris yeh 
reverse engineering architectural level 
perry editor proceedings th proc international conference software engineering 
ieee computer society press april 
jones 
applied software measurement assuring productivity quality 
mcgraw hill second edition 
jones 
year software problem quantifying costs assessing consequences 
addison wesley 
jones 
software assessments benchmarks best practices 
addison wesley 
jones 
year market overview 
technical report ct usa 
de jonge 
pretty printing software reengineering 
antoniol baxter editors proceedings ieee international conference software maintenance icsm pages 
ieee computer society press october 
keller 
change costing maintenance environment 
cimitile editors proceedings ieee international conference software maintenance icsm 
ieee computer society 
lecture notes accompanying keynote address 
kernighan ritchie 
programming language 
prentice hall 
klein 
cobol migration tutorial ibm 
publishing 
kleppe warmer bast 
mda explained model driven architecture practice promise 
addison wesley 
pages 
klint 
meta environment generating programming environments 
acm transactions software engineering methodology 
klint mmel verhoef 
engineering discipline 
submitted publication available www cs vu 
nl august 
mmel 
deriving tolerant grammars base line grammar 
lawrence pfleeger verhoef editors proceedings ieee international conference software maintenance icsm pages 
ieee computer society 

systematic approach fuzzy parsing 
software practice experience 
mmel 
parse tree annotations meet re engineering concerns 
proc 
source code analysis manipulation scam pages 
ieee computer society press september 
mmel verhoef 
grammar deployment kit 
van den brand mmel editors proc 
language descriptions tools applications volume entcs 
elsevier science april 
pages 
mmel visser 
functional transformation systems 
th international workshop functional logic programming spain july 
technical university valencia publication upv university press valencia sep 
markosian 
application refine language tools software quality assurance 
proc 
th knowledge software engineering conference page monterey ca 
mmel 
object oriented cobol concepts implementation 
jon editor cobol unleashed 
macmillan computer publishing september 
pages 
mmel 
generic refactoring 
proc 
acm sigplan workshop rulebased programming pages 
acm press 
mmel verhoef 
vs cobol ii grammar version 
available www cs vu nl grammars browsable vs cobol ii 
mmel verhoef 
cracking language problem 
ieee software pages november december 
mmel verhoef 
semi automatic grammar recovery 
software practice experience december 
mmel visser visser 
essence strategic programming 
draft available www cwi nl ralf 
mmel visser 
application letter 
dahl wadler editors proc 
practical aspects declarative programming padl volume lncs pages 
springer verlag january 
lehman 
laws program evolution rules tools programming management 
proceedings state art conference software projects fail pages 
press 
lehman 
laws software evolution revisited 
editor software process technology volume pages nancy france 
springer verlag 
small 
understanding code containing preprocessor constructs 
third international workshop program comprehension pages 
ieee computer society press 
maier 
art systems architecting 
crc press nd edition 

software quality producing practical consistent software 
technical report ct usa 
mcconnell 
code complete 
microsoft press 
mcconnell 
rapid development 
microsoft press 
moonen 
generating robust parsers island grammars 
aiken koschke editors proceedings working conference reverse engineering wcre pages 
ieee computer society press october 
omg model driven architecture 
www omg org mda 
van 
principle software architect philips research eindhoven netherlands personal communication may 
ovum report status programming languages europe 
ovum report london 

engine 
web site www 
com engine html 
ramalingam field tip 
aggregate structure identification application program analysis 
acm pages 
robbins 
unix nutshell system edition 
reilly associates rd edition 

data pointers 
com august 
com don htm 
sellink verhoef 
restructuring cobol cics legacy systems 
verhoef editors proceedings third european conference maintenance reengineering pages 
ieee computer society press 
sellink verhoef 
native patterns 
blaha quilici verhoef editors proceedings working conference reverse engineering wcre pages 
ieee computer society press 
sellink verhoef 
architecture automated software maintenance 
smith woods editors proceedings seventh international workshop program comprehension pages 
ieee computer society press 
sellink verhoef 
scaffolding software renovation 
ebert verhoef editors proc 
conference software maintenance reengineering pages 
ieee computer society press march 
semantic designs incorporated 
dms software reengineering toolkit 
web site www com products dms 
html 
systems peek hood technical white 
available www com sct tech html 
systems mf ibm cobol fujitsu cobol converters 
www com sct tools fsc html 

architecture functions commercial software reengineering workbench 
lehner editors proc 
nd euromicro conference software maintenance reengineering pages 
ieee computer society press 


addison wesley 
german 

risks involved reengineering projects 
blaha rugaber editors proceedings working conference reverse engineering wcre pages 
ieee computer society press 
software engineering institute carnegie mellon university 
define software architecture 
web site www sei cmu edu architecture definitions html 
lethbridge 
parsing minimization extracting information code presence conditional compilation 
sixth international workshop program comprehension pages 
ieee computer society press 
spencer 
ifdef considered harmful portability experience news 
usenix conference 
werner 
die von daten sap 
information management consulting im 
german 

recovery improvement software architecture case study february 
slides dagstuhl seminar software architecture recovery modelling 
verhoef 
realities language conversions 
ieee software november december 

modifiability legacy assets 
journal software maintenance evolution july oct 
special issue 
verhoef 
quantitative portfolio management 
science computer programming 
visser 
strategic pattern matching 
narendran rusinowitch editors rewriting techniques applications rta volume lncs pages trento italy july 
springer verlag 
visser 
benaissa tolmach 
building program optimizers rewriting strategies 
international conference functional programming icfp baltimore maryland 
acm sigplan pages september 
wall christiansen schwartz 
programming perl nd edition 
reilly associates 
wall schwartz 
programming perl 
reilly associates 

transformations improving cobol programs 
proc 
second stratego user day 
technical report utrecht university 
widmer 
cobol migration planning 
edge information group 

