group communication partitionable systems specification algorithms babao glu alberto montresor universit di bologna zamboni bologna italy babaoglu montresor cs unibo www home page www cs unibo projects html 
give formal specification implementation partitionable group communication service asynchronous distributed systems 
specification motivated requirements building partition aware applications continue operating blocking multiple concurrent partitions reconfigure dynamically partitions merge 
specified service guarantees liveness excludes trivial solutions constitutes useful basis building realistic partition aware applications implementable practical asynchronous distributed systems certain stability conditions hold 
functional requirements define output values related input values usually sufficient specifying traditional applications 
modern network applications non functional requirements just important functional counterparts services applications provide correct respect input output relations delivered acceptable quality levels 
reliability timeliness configurability examples non functional requirements particular interest network applications 
correct application satisfies functional requirements possible operating environments just may take time depending characteristics environment 
hand may operating environments impossible achieve non functional properties certain levels 
reason non functional requirements network applications define acceptable quality intervals exact values 
order deliver quality levels feasible acceptable network applications need environment aware dynamically modify behavior depending properties operating environment 
nature network applications mobile computing data sharing collaborative involve cooperation multiple sites 
applications characterized reliability configurability requirements possible partitionings communication network extremely important aspect environment 
addition accidental partitionings caused failures mobile computing systems typically support disconnected operation voluntary partitioning caused deliberately units network 
nature partitioning determine quality application terms services available performance levels 
words partitionings may result service reduction service degradation need necessarily render application services completely unavailable 
informally define class partition aware applications able progress multiple concurrent partitions blocking 
service reduction degradation unavoidable partitionings depend heavily application semantics establishing arbitrary applications scope chapter 
certain application classes strong consistency requirements may case services suspended completely partition 
situation corresponds called primary partition model traditionally characterized partitioned operation network applications 
chapter focus specification implementation system services supporting partition awareness continued operation network applications restricted single partition may span multiple concurrent partitions 
goal system provide necessary mechanisms imposing policies govern partitioned operation 
manner application decide services available partition quality levels 
methodology partition aware application development process group paradigm suitably extended partitionable systems 
methodology processes cooperate order implement network application join named group members 
events relevant partition awareness process crashes recoveries network partitionings merges unified single abstraction group current membership 
process partitionable group membership service installs views correspond process local perception group current membership 
partition aware applications programmed reconfigure adjust behavior composition installed views 
partitionable system group membership service guarantee processes partition install identical views composition corresponds partition 
inconsistencies may compromise functional correctness may result quality levels lower feasible 
specifying properties fault tolerant distributed services asynchronous systems requires delicate balance conflicting goals 
specification strong exclude degenerate trivial solutions weak implementable 
formal specification partitionable group membership service asynchronous system proven elusive numerous prior attempts unsatisfactory 
discuss length shortcomings previous attempts 
summary existing specifications admit solutions suffer problems informal ambiguous ii cease install new views cases group membership continues change iii split group concurrent views possibly singleton sets iv install views justification operating environment 
lack satisfactory formal specification impossible argue correctness various partitionable group membership service implementations proposed 
chapter give formal specification partitionable group membership services desirable properties suffer problems observed previous solutions ii implementable asynchronous distributed systems exhibit certain stability conditions formally characterize iii useful constitutes basis system abstractions significantly simplify task developing realistic partition aware applications 
prove usefulness collection new system abstractions need program set applications twice proposed abstractions second time compare relative difficulty complexity 
pursued exercise programming set practical partition aware applications top group communication service group membership specification extended reliable multicast service view synchrony semantics 
reason current limited specification services implementability 
rest chapter organized follows 
section introduce system model define basic properties communication presence partitions 
sect 
give formal specification partitionable group membership services guarantees liveness excludes useless solutions 
sect 
extend failure detector abstraction chandra toueg partitionable systems show implemented practical asynchronous systems certain stability conditions hold 
sect 
prove specification implementable top unreliable datagram communication service systems admit failure detectors 
section briefly illustrate partitionable group membership service may extended group communication service view synchrony 
section relates specification numerous proposals group communication sect 
concludes 
system model adopt notation terminology similar chandra toueg 
system comprises set processes communicate exchanging messages network 
processes associated unique names maintain life 
communication network implements channels connecting pairs processes primitives send recv sending receiving messages 
system asynchronous sense communication delays relative process speeds bounded 
practical distributed systems considered asynchronous transient failures unknown scheduling strategies variable loads computing communication resources impossible bound delays 
simplify presentation discrete global clock ticks coincide natural numbers unbounded range simplification conflict asynchrony assumption processes allowed access global clock 
global histories execution distributed program results process performing event possibly null chosen set clock tick 
set includes events send recv corresponding respective communication primitives 
sect 
extend set events related group membership 
global history execution function denotes null event 
process executes event time indicating process performs event time interval write executes event interval global history 
communication model absence failures network logically connected process communicate process 
process sends message process executing send receives message sent executing recv 
communication unreliable described sequencing multiple messages sent destination need preserved channels fifo 
loss generality assume messages sent globally unique ii message received previously sent 
note communication model extremely faithful practical distributed systems built top typical unreliable datagram transport services ip udp 
failure model processes may fail crashing halt prematurely 
simplicity consider process recovery crash 
evolution process failures execution captured crash pattern function denotes set processes crashed time crashed processes recover 
correct denote processes crash correct variety events including link crashes buffer overflows incorrect inconsistent routing tables may disable communication processes 
refer generically communication failures 
process crashes permanent communication failures may temporary due subsequent repairs 
evolution communication failures repairs execution captured unreachability pattern function denotes set processes communicate time say process unreachable time write shorthand say process reachable time write noted communication failures necessarily permanent may appear disappear dynamically 
reflected fact sets may differ arbitrarily 
note unreachability pattern characterization communication state system just crash pattern characterization computational state 
omnipotent external observer construct unreachability crash patterns occur execution inferred asynchronous system 
useful stating desired properties group membership service 
implementation specified service asynchronous system approximations unreachability crashes provided failure detectors discuss sect 

reachable unreachable attributes individual communication channels identified ordered process pairs just correct crashed attributes individual processes 
rest chapter refer communication failure scenarios called partitionings involve multiple sets processes 
partitioning disables communication different partitions containing set processes 
processes partition communicate communicate processes outside partition 
communication partitions reestablished say merge 
process communication failures occur execution totally independent satisfy certain constraints captured notion failure history definition failure history 
failure history pair crash pattern unreachability pattern process crashed time unreachable process time ii process crashed time reachable time formally ii definition unreachability pattern subsumes crash pattern failure history 
choose model crash unreachability pat formulas follow free variables assumed universally quantified respective domains process events time messages views inferred context 
terns separately specifications terms properties need hold correct processes 
need relate crash unreachability patterns events execution 
words need formalize notions crashed processes halt prematurely unreachable processes communicate directly 
requiring global failure histories execution conform constraints defining run 
definition run 
run pair global history corresponding failure history crashed process stops executing events ii message sent received destination reachable sender time sending 
formally ii send recv note definition ii reachable relation correct processes perpetually reflexive correct process reachable 
transitivity reachability hand need hold general 
choice render model realistic admitting scenarios common wide area networks including internet site may reachable site site reachable time unreachable directly 
sites considered belonging partition communicate indirectly communication services sophisticated send receive primitives offered network 
shall see sect 
services built system model processes able communicate possible 
notion partition set processes mutually communicate services 
assume perpetual symmetry reachable relation 
words time possible process reachable process vice versa 
motivated observed behavior real wide area networks 
model tractable require form eventual symmetry stated property eventual symmetry 
initial period process remains reachable unreachable eventually remain reachable unreachable 
formally reasonable behavior expect practical asynchronous distributed systems 
typically communication channels bidirectional rely physical logical resources directions 
result ability inability communicate direction usually implies similar property eventually observed direction 
conclude system model impose fairness condition communication network exclude degenerate scenarios processes unable communicate despite fact reachable infinitely 
words communication system behave maliciously processes normally reachable unreachable precisely times attempt communicate 
property fair channels 
processes permanently unreachable 
sends unbounded number messages receive unbounded number messages 
formally send recv send partitionable group membership service specification methodology partition aware application development process group paradigm suitable extensions partitionable systems 
methodology processes cooperate network application joining group members 
process may decide terminate collaboration explicitly leaving group 
absence failures membership group comprises processes joined left group 
addition voluntary events membership group may change due involuntary events corresponding process communication failures repairs 
process partitionable group membership service tracks changes group membership installs views events 
installed views correspond process local perception group current membership 
partition aware applications programmed reconfigure adjust behavior composition installed views 
absence partitionings correct process install view view include exactly members crashed 
goal clearly feasible partitionable system processes different partitions different perceptions membership group 
reasons partitionable group membership service guarantee certain stability conditions correct processes partition install identical views composition correspond composition partition 
section translate informal ideas formal specification partitionable group membership service 
specification set properties view compositions view installations stated terms unreachability pattern occurs execution 
specification give benefited extensive reflection actual experience programming realistic applications gone numerous refinements years 
believe represents minimal set properties service useful implementable 
formal specification sake brevity assume single process group consider changes membership due voluntary join leave events 
group membership vary due failures repairs 
start defining terms introducing notation 
views labeled order globally unique 
view write denote composition set process names 
set possible events execution augmented include denoting view change installs view current view process time denoted view view installed time events said occur view current 
view called immediate successor denoted installs view view called immediate successor denoted exists process successor relation denotes transitive closure views related called concurrent 
immediate successor views say process survives view change belongs composition installed views arbitrary reflect reality unreachability pattern occurs execution 
words processes aware processes communicate directly order adapt behaviors consistently 
informally process install views include processes reachable exclude unreachable 
requiring current view process perpetually reflect actual unreachability pattern impossible achieve asynchronous system 
state requirement eventual properties hold stable conditions reachability unreachability relations persistent 
gm view accuracy 
time process remains reachable correct process eventually current view include formally correct view gm view completeness 
time processes partition remain unreachable rest group eventually current view correct process include process 
formally correct view view accuracy view completeness fundamental importance 
state composition installed views arbitrary function actual unreachability pattern occurring run 
specification lacked property similar view accuracy trivially satisfied installing process empty view singleton view consisting process 
resulting service exhibit called view splitting useful 
view accuracy prevents view splitting requiring eventually views installed permanently reachable processes contain 
hand absence view completeness admit implementations processes install views containing entire group rendering service useful 
note view accuracy view completeness stated slightly differently 
reachable relation processes transitive 
reachable directly justification requiring include view converse necessarily true 
fact process communicate directly process imply communicate indirectly sequence pairwise reachable intermediate processes 
reason view completeness stated terms complementary sets processes process pairs 
doing assures process excluded view communication impossible exists path directly indirectly reaching 
view accuracy view completeness state requirements views installed individual processes 
group membership service useful place constraints views installed different processes 
coherency guarantees views processes behave differently belong partition different perceptions composition 
example consider system processes permanently reachable 
view accuracy time install view containing 
suppose time third process remains reachable 
view accuracy eventually install new view includes addition presence process unknown directly reachable 
continues believing shares view current view continues include fact process gone install view different resulting differences perception environment lead processes behave differently belong partition 
property formulated avoid undesirable scenarios 
gm view coherency 
correct process installs view processes install eventually installs immediate successor formally correct 
ii processes initially install view installs immediate successor eventually installs immediate successor crashes 
formally correct 
iii process installs view immediate successor view processes survive view previously installed formally returning example current view process remain indefinitely gm ii requires eventually install new view 
assumption installs view gm new installed include result processes belong partition return sharing view 
fact generalize example argue view coherency view accuracy guarantee view installed correct process installed processes permanently reachable 
note composition final view installed includes process belonging partition 
reasonable communicate relay reachable directly 
view coherency important reachability unreachability relations persistent 
situations view accuracy view completeness applicable view coherency serves inform process longer shares view process 
consider processes initially mutually reachable 
suppose installed view containing time current view process different time installs crashes installs view having installed network partitioning merge 
cases gm gm ii respectively ensure process eventually aware fact install new view process installs new view sure processes installed view 
inherent limitation due asynchrony possibility failures 
gm iii allows process reason posteriori processes time process installs view immediate successor view deduced processes installed view process belonging view installs sure belong view note entirely local information successive pairs installed views allow process reason globally actions processes 
property group membership places restrictions order views installed 
systems partitionings impossible reasonable require correct processes install views total order 
partitionable system feasible due possibility concurrent partitions 
partitionable group membership service useful set views consistently ordered processes install 
words views installed process order views installed opposite order process 
gm view order 
order processes install views successor relation partial order 
formally combined view accuracy view coherency view order allows conclude time permanently reachable processes install set views install order 
final property specification places simple integrity restriction composition views installed process 
definition ii correct process reachable 
property gm ensures eventually views installed process include 
desirable self inclusion perpetual eventual property installed views 
gm view integrity 
view installed process includes process 
formally properties gm gm taken define partitionable group membership service 
discussion recall properties gm gm stated terms runs reachability unreachability relations persistent 
sufficient exclude trivial solutions runs reachability unreachability processes continually changing due transient failures 
example consider system composed processes run permanently mutually reachable 
view accuracy view coherency know time installed view composed 
consider run identical time unreachable 
behavior processes runs identical time distinguish runs 
install views composed time run install views run reachability relations persistent transient 
example generalized conclude implementation satisfying specification delay arbitrarily installation new view including processes remain reachable sufficiently long periods 
delay arbitrarily installation new view excluding processes remain unreachable sufficiently long periods 
asynchronous distributed systems fundamental limitations solvability certain problems presence failures 
consensus primary partition group membership 
partitionable group membership service defined happens solvable asynchronous system 
proof sketch impossibility results extended version 
impossibility result circumvented requiring certain stability conditions hold asynchronous system 
section formulate conditions properties unreliable failure detector 
sect 
show specified implemented systems admit necessary failure detector 
failure detectors partitionable systems section formalize stability conditions necessary solving specification partitionable group membership asynchronous systems 
indirectly stating set properties need hold failure detectors suitably extended partitionable systems 
similar failure detector definitions extended partitionable systems appeared contexts 
failure detector abstraction originally proposed chandra toueg systems perfectly reliable communication 
partitionable systems specification failure detector properties reachability pairs processes individual processes correct crashed 
example acceptable desirable failure detector suspect happens correct unreachable informally failure detector distributed oracle tries estimate unreachability pattern occurs execution 
process access local module failure detector monitors subset processes outputs currently suspects unreachable 
failure detector history function describes outputs local modules process 
say suspects time formally failure detector function associates failure history set denoting failure detector histories occur executions failure history asynchronous systems failure detectors inherently unreliable information provide may incorrect 
despite limitation failure detectors satisfying certain completeness accuracy properties proven useful abstractions solving practical problems systems 
informally completeness accuracy state respectively conditions process suspected meaningful estimate 
consider adaptations completeness accuracy partitionable systems maintaining names chandra toueg compatibility reasons fd strong completeness 
process remains unreachable correct process eventually suspect formally failure history failure detector satisfies strong completeness failure detector histories correct fd eventual strong accuracy 
process remains reachable correct process eventually longer suspect formally failure history failure detector satisfies eventual strong accuracy failure detector histories correct borrowing chandra toueg failure detectors satisfying strong completeness eventual strong accuracy called eventually perfect class denoted addition properties stated formulate weak perpetual counterparts generating hierarchy failure detector classes similar chandra toueg 
informally weak completeness accuracy require corresponding property hold pair processes pairs perpetual versions require corresponding property hold eventually 
detailed discussion failure detector hierarchy partitionable systems reductions scope chapter brief observations 
absence partitionings failure detector classes weak version completeness happen equivalent strong version 
systems suffices correct process suspect crashed process reliably communicate information correct processes 
partitionable systems possible failure detector classes weak completeness strictly weaker strong completeness 
principle impossible implement failure detector partitionable asynchronous systems just impossible implement failure detector belonging classes asynchronous systems perfectly reliable communication 
practice asynchronous systems expected exhibit reasonable behavior failure detectors implemented 
example consider algorithm similar chandra toueg round trip way message time outs 
process periodically sends ping message process 
process receives ping sends back ack message 
process receive ack local time units adds list suspects 
receives ack message process suspects removes suspect list increments time period channel 
results chandra toueg 
note processes send ack messages response ping messages process continually time process unreachable 
algorithm trivially satisfies strong completeness property partitionable asynchronous systems 
hand asynchronous system possible process observe unbounded number premature time outs process remains reachable case repeatedly add remove list suspects violating eventual strong accuracy property practical systems increasing time period communication channel mistake ensure eventually premature time outs communication channels ensuring eventual strong accuracy 
scenario algorithm fail achieve eventual strong accuracy occurs process reachable process continues receive ping messages ack messages sent systematically lost 
system satisfying eventual symmetry scenario forever eventually start receiving ack messages causing permanently remove suspect list satisfy eventual strong accuracy 
perfectly reliable failure detectors impossible implement asynchronous systems reasonable ask consequences mistakenly process reachable 
shall see section failure detectors solving incorrect suspicions may cause installation views smaller feasible 
words may compromise view accuracy invalidate properties 
consequence processes slow slow communication links may temporarily excluded current view processes merged back delays smaller 
type view splitting reasonable including processes views force entire computation slow pace 
obviously notion slow completely application dependent established group basis 
partitionable group membership service implementation section algorithm implements service specified sect 
partitionable asynchronous systems augmented failure detector class goal show implementability proposed specification consequently algorithm designed simplicity efficiency 
structure solution shown fig 
consists components called multi send layer msl view management layer process 
fd denotes failure detector module satisfying properties class defined sect 

interactions communication network failure detector limited msl uses unreliable datagram transport application join leave msl fd recv send network fig 

structure partitionable group membership service 
service network primitives send recv 
msl read suspect list corresponding failure detector module fd 
sl implements primitives described turn 
recall consider group membership changes due failures repairs 
implementation give includes view change notification event primitives join leave voluntarily joining leaving group 
order distinguish various layers discussion say process sends receives messages communicates msl primitives respectively 
reserve send receive denote communication directly network services going msl 
similarly say process suspects processes notified event suspect reserved describing failure detector 
notation presentation algorithms 
italic font variable procedure names 
tags denoting message types written 
wait construct block process event generated msl 
generate construct produces upcall specified type layer architecture 
multi send layer implementing group membership service directly top point point unreliable datagram transport service provided network difficult 
difficulty aggravated lack transitivity reachability relation provided failure detector 
task msl hide complexity transforming unreliable point point network communication primitives best effort counterparts 
informally msl tries deliver sent messages processes destination set 
msl filters raw failure detector suspect list eliminating processes reached indirectly 
words notion reachability msl corresponds transitive closure reachability failure detector layer 
distinguishes msl typical network routing reliable multicast service integration message delivery semantics reachability information 
sense msl closer dynamic routing layer phoenix layer horus 
informally properties msl satisfy property 
process continuously unreachable eventually continuously suspect process continuously reachable eventually process suspects suspects process receives message process sent earlier messages sender received fifo order message sent correct process eventually received processes destination set suspected process suspects reachability relation defined events eventually symmetric 
properties non triviality conditions communication service 
properties place simple integrity order requirements receiving messages 
property defines liveness condition sending messages 
property prevents processes property requires correct process stops correct process eventually important note combination properties conclude continuously reachable eventually stops properties conclude continuously reachable message sent eventually received 
formal description properties algorithm achieve extended version 
proposed algorithm integration routing algorithm failure detector class view management layer uses services provided msl order construct install views defined specification 
process reachable set correspond processes currently suspected 
reachable sets form basis constructing views part specification follows immediately properties msl produce 
particular property gm satisfied property requiring process continuously unreachable eventually continuously suspect property gm satisfied properties discussed 
property gm satisfied property 
main difference reachable sets constructed msl views defined respect coherency 
reachable sets thread reachable set processes version 
vector clock 
symmetry set view current view id composition view corresponding complete view generate view true wait event remain idle event occurs case event foreach reachable reachable symmetry version reachable reachable reachable synchronize vp vq version version reachable fi esac od fig 

main algorithm process completely individualistic lack coordination views different processes need coherent defined property gm 
achieves property reachable sets initial estimates new views installs having reached agreement composition mutually reachable processes 
guarantee liveness solution execution agreement algorithm terminate installing new view 
composition installed views invalidate properties inherited msl described 
main algorithm illustrated fig 
alternates idle phase agreement phase 
process remains idle informed msl change perception reachable set event receives message process observed change 
events cause process enter agreement phase 
agreement protocol illustrated fig 
organized sub phases called synchronization phase estimate exchange phase short phase ee phase respectively 
phase process sends synchronization message containing version number processes perceives reachable waits responses 
message acts wake processes entered phase 
furthermore version numbers exchanged phase subsequent ee phases distinguish messages different agreement protocol invocations 
process leaves phase enter receives response synchronization message process suspected phase receives message process entered ee phase 
process enters ee phase fig 
estimate composition view 
phase process modify estimate reflect changes approximation reachability reported msl 
order guarantee liveness algorithm constructs estimate sets monotone decreasing agreement condition certain hold eventually 
estimate changes process sends message containing new estimate process belonging estimate 
process receives estimate messages removes estimate processes excluded estimate sender 
time change estimate causes process send agreement proposal process selected current estimate act coordinator 
note estimates evolving different processes may select different coordinators 
coordinator may crash unreachable agreement condition verified 
situations current agreement attempt fail new estimates evolve causing new coordinator selected 
coordinator eventually observes proposals received set processes equal agreement achieved coordinator sends members message containing new view identifier composition equal process receives message possibilities install complete view containing processes indicated message install partial view containing subset processes indicated message 
partial views necessary installation complete view violate property gm iii 
condition checked verifying current views processes composing new view intersect mean process intersection installed intersecting views violating property gm iii 
reason received view broken set non intersecting partial views satisfying property gm iii 
hand current views intersect process install new complete view received coordinator 
note classification views complete partial completely internal implementation 
application programmer provided service unaware distinction deals single notion view 
invocation agreement protocol condition checked locally current views processes composing new view included message coordinator 
procedure repeat estimate reachable view estimation version version generate new version number stable exit view stable procedure synchronized processes foreach estimate synchronize version version estimate synchronized wait event remain idle event occurs case event foreach reachable reachable symmetry version reachable reachable reachable estimate estimate reachable symmetry version estimate estimate estimate synchronize vp vq version vp synchronized synchronized version vq version vq agreed vq synchronize version version fi estimate version estimate symmetry version estimate elseif version estimate estimate synchronized agreed fi esac od fig 

agreement synchronization phases process terminates installation new view possible new view correspond current set processes perceived reachable new synchronization message received previous ee phase 
cases new agreement phase started 
extended version give proof algorithm satisfies properties 
discuss high level terms techniques algorithm order satisfy specification 
leaving trivial properties view completeness view integrity view order focus attention view coherency view accuracy liveness solution 
property gm consists parts 
gm iii satisfied installation partial views explained 
gm gm ii process eventually informed process belonging current view installed changed views having installed respectively 
process kept informed message suspect event 
cases agreement phase 
liveness invocation agreement protocol terminates installation new view situations reachability relation highly unstable 
guaranteed fact successive estimates process composition view monotone decreasing sets 
achieved actions 
new suspect lists reported msl result process added initial estimate 
second processes exchange estimates remove processes removed 
manner process continues reduce estimate coincides exactly processes agree composition view 
limit estimate set eventually reduce process singleton view installed 
approach may conflict view accuracy process receives process message inviting remove process refuse 
permanently reachable non triviality properties msl guarantee time remove view estimate removing 
time send message inviting exclude belong current estimate phase view agreement constitutes barrier propagation old remove messages 
way possible show time views installed contain detailed description algorithm extended version 
reliable multicast service specification class partition aware applications programmed group membership limited 
general network applications require closer cooperation facilitated communication group members 
section briefly illustrate group membership service sect 
may constitute basis complex group communication services 
procedure installed false true new view installed repeat wait event remain idle event occurs case event foreach reachable reachable symmetry version reachable reachable estimate agreed estimate reachable reachable estimate estimate symmetry agreed agreed estimate estimate synchronize vp vq version vq agreed vq estimate estimate estimate estimate agreed agreed estimate elseif estimate agreed estimate fi propose estimate installed true fi view id id estimate installed true fi esac installed fig 

estimate exchange phase process part 
procedure procedure estimate estimate estimate agreed estimate reachable propose agreed estimate min estimate function return estimate estimate estimate estimate agreed agreed procedure view estimate estimate comp id id view view id estimate id id view estimate generate view estimate stable view comp reachable estimate agreed agreed fig 

estimate exchange phase process part 
proposed extension reliable multicast service view synchrony semantics governs delivery multicast messages respect installation views 
having introduced reliable multicast specification illustrate solution may easily extended order implement view synchrony 
group members communicate reliable multicasts invoking primitive mcast attempts deliver message processes current view upcall 
multicast messages labeled order globally unique 
simplify presentation denote set messages delivered process view ideally correct processes belonging view deliver set messages view 
partitionable systems requirement result multicast block communication failures repaired processes unreachable view installed deliver message 
relax condition delivery messages follows process may exempt delivering set messages correct process view crashes unreachable words agreement set delivered messages view limited processes survive view change view view 
fig 

merging scenarios 
ovals depict view compositions sets process names 
directed edges depict immediate successor relations views 
rm message agreement 
views immediate successor processes belonging views deliver set multicast messages view formally importance message agreement better understood considered properties offered group membership service specified sect 

permanently reachable processes time install sequence views deliver set messages pair successive views 
note property rm places restrictions set messages delivered process belonged view subsequently ends different partition excluded case process may may deliver message delivered view delivers message view observation leads property 
rm uniqueness 
multicast message delivered delivered exactly view 
formally properties rm rm define called view synchrony group communication systems 
distributed application development view synchrony extremely valuable admits global reasoning local information process knows processes surviving view change delivered set messages view 
processes share global state view state depends set delivered messages regardless order continue share state view survive view change applications shared state sensitive order messages delivered specific order properties enforced additional system layers 
unfortunately group communication service specified far allow global reasoning local information partitionable systems 
consider scenario depicted fig 
processes installed view 
point process crashes temporarily unreachable process reacts events installing view containing merging back installing view 
process hand reacts crash installs view excluding suppose share state view modifies state 
install knows immediately states may diverged infer fact local information 
behave inconsistently respect effort avoid situation collaborate sending warning message soon installs view perform inconsistent operations receiving message 
problem stems fact views merge form view common member 
scenario example easily generalized run overlapping views merge form common view 
rule runs property 
rm merging rule 
views merging common view disjoint compositions 
formally sequence view installations run respecting property shown fig 
installing process install view 
views merge form empty intersection 
result install view knows immediately states diverged partitioning 
note property rm may appear part group membership specification concerned view installations 
choose include part reliable multicast service specification rm relevant context multicast message deliveries 
words applications need guarantees multicast messages rely interested rm 
property places simple integrity requirements delivery messages prevent message delivered multiple times process message delivered thin air multicast 
rm message integrity 
process delivers message process multicast earlier 
formally mcast note specification consisting properties rm rm trivially satisfied delivering messages 
exclude useless solutions including property 
rm liveness 
correct process delivers multicast messages 
formally correct mcast 
ii correct process delivers message view includes process delivers eventually install new view immediate successor formally correct view second part property rm liveness counterpart property rm process delivers message view containing process delivers eventually excludes current view 
properties rm rm define reliable multicast service combined properties gm gm group membership obtain call partitionable group communication service view synchrony semantics 
extended version show solution extended satisfy specification 
related discussion process group paradigm focus extensive experimental years group communication services gradually finding way systems supporting fault tolerant distributed applications 
examples experimental group communication services include isis transis totem newtop horus ensemble spread moshe 
specifications group membership group communication related specific experimental system 
despite intense activity distributed systems community agree formal definition group membership problem especially partitionable systems 
fact attempts show admit trivial solutions exhibit undesirable behavior partially responsible situation 
group membership specifications appeared 
friedman van renesse give specification horus group communication system similarities proposal particularly respect safety properties view coherency message agreement 
important differences respect non triviality properties horus specification conditional outputs produced failure detector system 
approach suggested adopted 
feel specification group membership formulated properties runs characterizing actual executions terms suspicions failure detector produces 
validity specification conditional properties failure detector producing suspicions 
example referring failure suspects suspects lead specifications useless 
reasonable correctness group membership service implementation specification rely properties failure detector 
congress moshe membership protocols designed transis group 
congress provides simple group membership protocol moshe extends congress provide full group communication service 
specification moshe similarities proposal includes properties view identifier local monotony self inclusion view synchrony compared gm gm rm proposal 
property rm implied properties self delivery termination delivery moshe 
hand specification moshe guarantee properties rm rm undesirable scenarios similar described sect 
possible 
main differences moshe proposal respect non triviality requirements 
moshe includes property called agreement views may compared properties gm gm gm 
agreement views property forces set processes say install sequence views time process correct ii mutually reachable processes iii mutually unreachable processes iv suspected process proposal requirement may relaxed requiring condition hold sufficiently long period time forever 
despite similarities non triviality requirements moshe proposal different implications 
example moshe guarantee processes install common sequence views mutually permanently reachable processes system alternately reachable unreachable 
proposal processes mutually permanently reachable install sequence views regardless state rest system 
desirable common sequence installed views basis consistent collaboration partition aware application development methodology 
fekete formal specification partitionable group communication service 
service construct ordered broadcast application subsequent construct replicated data services 
specification separates safety requirements performance fault tolerance requirements shown hold executions stabilize situation failure status stops changing 
basic premise fekete existing specifications partitionable group communication services complex unusable application program mers 
set devise simpler formal specification crafted support specific application mind 
simple specifications partitionable group communication possible services support simple applications 
unfortunately system services useful wide range applications inherently complex admit simple specifications 
experience developing actual realistic partition aware applications supports claim 
specification implementation form basis group enhanced extension java rmi distributed object model 
enables creation object groups collaborate facilities offered partitionable group communication service 
clients access object group standard java remote method invocation semantics remotely invoking methods single non replicated remote object 
system includes dependable registry service partition aware application built services 
dependable registry distributed object repository object groups advertise services symbolic name register operation clients locate object groups name lookup operation 
registry replica maintains database bindings symbolic group names group object composition 
replicas kept consistent group communication primitives offered 
partitioning different replicas dependable registry may diverge 
register operations partition serviced long replica included inside partition 
lookup hand able retrieve bindings registered outside current partition 
replicas contained partition kept consistent sense maintain set bindings behave non replicated object 
partitions merge reconciliation protocol executed bring replicas may updated different partitions back consistent state 
behavior dependable registry perfectly reasonable partitionable system clients asking remote services interested servers running partition 
partition aware applications characterized ability continue operating multiple concurrent partitions long reconfigure consistently 
group membership service provides necessary properties reconfiguration possible applications dynamically establish services performance levels offer partitions 
primary partition version group membership suitable supporting partition aware applications progress limited network partition 
formal specification partitionable group communication service suitable supporting partition aware applications 
specification excludes trivial solutions free undesirable behaviors exhibited previous attempts 
requires services live sense view installations message deliveries delayed arbitrarily conditions require 
shown specification implemented asynchronous distributed system admits failure detector satisfying strong completeness eventual strong accuracy properties 
correctness implementation depends solely properties failure detector operating characteristics system 
practical failure detector implementation presents trade accuracy responsiveness failures 
increasing acceptable message delays false suspicion accuracy improved responsiveness suffer 
practice guarantee reasonable responsiveness finite bounds placed acceptable message delays established dynamically channel application basis 
doing guarantee new views installed bounded delays failures 
turn may cause reachable processes excluded installed views 
processes slow slow communication links reasonable exclude views delays return acceptable levels 
property included specification carefully studied contribution evaluated 
argued excluding properties resulting service trivial subject undesirable behaviors useful basis developing large classes partition aware applications 
specification new system services social process proving usefulness included properties impossible 
best program wide range applications twice service proposed property second time compare relative difficulty complexity 
pursued exercise specification programming set practical partition aware applications 
fact specification developed iterating exercise modifying properties feedback development step 
additional empirical evidence support specification point system entirely specification implementation 
discussed sect 
dependable registry service integral part programmed services offered 
currently underway develop partition aware financial applications partitionable distributed version sun tuple space system called javaspaces 

amir moser melliar smith agarwal 
totem single ring ordering membership protocol 
acm transactions computer systems november 

amir stanton 
spread wide group communication system 
technical report center networking distributed systems johns hopkins university baltimore april 

charron bost toueg 
formal specification group membership services 
technical report tr department computer science cornell university august 

chockler dolev keidar 
scalable group membership services novel applications 
proceedings dimacs workshop networks distributed computing pages 
american mathematical society 


babao glu baker 
communications infrastructure constructing reliable applications large scale distributed systems 
proceedings th hawaii international conference system sciences pages maui hawaii january 

babao glu montresor 
group communication partitionable systems specification algorithms 
technical report ublcs de computer science university bologna april 


babao glu montresor segala 
system support partition aware network applications 
proceedings th international conference distributed computing systems icdcs pages amsterdam netherlands may 

birman 
process group approach reliable distributed computing 
communications acm december 

birman van renesse 
reliable distributed computing isis toolkit 
ieee computer society press 

chandra hadzilacos toueg charron bost 
impossibility group membership 
proceedings th acm symposium principles distributed computing podc pages may 
available technical report tr department computer science cornell university 

chandra toueg 
unreliable failure detectors reliable distributed systems 
journal acm march 

dolev friedman keidar malki 
failure detectors omission failure environments 
proceedings th acm symposium principles distributed computing podc santa barbara california august 
available technical report tr 

dolev malki 
transis approach high availability cluster communication 
communications acm april 

dolev malki strong 
asynchronous membership protocol tolerates partitions 
technical report cs institute computer science hebrew university jerusalem 

dolev malki strong 
framework partitionable membership service 
technical report cs institute computer science hebrew university jerusalem 

dolev malki strong 
framework partitionable membership service 
proceedings th acm symposium principles distributed computing podc may 

mac shrivastava 
newtop fault tolerant group communication protocol 
proceedings th international conference distributed computing systems icdcs vancouver bc canada june 

fekete lynch shvartsman 
specifying partitionable group communication service 
proceedings th acm symposium principles distributed computing podc santa barbara california august 

fischer lynch patterson 
impossibility distributed consensus faulty process 
journal acm april 

friedman van renesse 
strong weak virtual synchrony horus 
technical report tr department computer science cornell university march 

hayden 
system 
phd thesis department computer science cornell university january 

kaashoek tanenbaum 
group communication amoeba distributed operating system 
proceedings th ieee symp 
reliable distributed systems pages arlington tx may 

fekete lynch 
multicast group communication base load balancing replicated data service 
proceedings th symposium distributed computing august 


conception implementation toolkit building fault tolerant distributed applications large scale networks 
phd thesis ecole polytechnique rale de lausanne 

schiper 
view synchronous communication large scale networks 
proceedings nd open workshop esprit project broadcast grenoble france july 

montresor 
dependable registry service distributed object model 
proceedings rd european seminar advances distributed systems madeira portugal april 

montresor 
reliable distributed object model 
proceedings nd ifip international working conference distributed applications systems helsinki finland june 

moser melliar smith agarwal papadopoulos 
totem fault tolerant group communication system 
communications acm april 

moser amir melliar smith agarwal 
extended virtual synchrony 
proceedings th international conference distributed computing systems icdcs poznan poland june 


new look membership services 
proceedings th acm symposium principles distributed computing podc may 

de fekete lynch shvartsman 
dynamic view oriented group communication service 
proceedings th acm symposium principles distributed computing podc june 

ricciardi birman 
process groups implement failure detection asynchronous environments 
proceedings th acm symposium principles distributed computing podc pages august 

schiper ricciardi 
virtually synchronous communication weak failure 
proceedings rd international symposium fault tolerant computing ftcs pages june 

van renesse birman cooper stephenson 
horus system 
birman van renesse editors reliable distributed computing isis toolkit pages 
ieee computer society press 

van renesse birman maffeis 
horus flexible group communication system 
communications acm april 
