semantics functional descriptions web services uwe keller holger lausen michael digital enterprise research institute deri university innsbruck austria firstname lastname deri org 
functional descriptions central pillar semantic web services 
disregarding details invoke consume service shall provide black box description determining usability web service request usage scenario respect provided functionality 
creation sophisticated semantic matchmaking techniques exposition correctness requires clear unambiguous semantics functional descriptions 
existing description frameworks owl wsmo lack respect presents called state spaces rich language independent model web services world act 
allows giving precise mathematical definition concept web service semantics functional descriptions 
demonstrate benefit applying model means concrete case semantic analysis functional descriptions allows detect certain un desired semantic properties functional descriptions 
side effect semantic analysis formal model allows gain formal understanding insight matching functional descriptions web service discovery 
enabling automated detection web services adequately serve request usage scenario main objective semantic web service technology 
functional description web service specifies provided functionality 
disregarding detailed information invoke consume web service purpose functional descriptions provide black box description normal runs web service regard technical communication related errors occur service usage 
prominent description frameworks semantic web services functional descriptions essentially state constraints characterize intended executions web service 
owl service profiles encompass functional description described output preconditions results 
counterpart wsmo capabilities defined preconditions assumptions postconditions effects 
models lack clear unambiguous semantics functional descriptions 
essential developing appropriate semantic matchmaking mechanisms discovery proving correctness functional descriptions general sort symbolic computation functional descriptions frameworks 
respect necessity rigorous formal model web services world act basis clear semantic definitions functional descriptions 
addressing fine grained perspective web services functional descriptions identified previous level rich semantic descriptions aim applicability model setting state functional descriptions frameworks owl wsmo 
restrict particular language describing states preconditions postconditions formal definition usable frameworks modular independent language chosen describing state conditions 
contribution follows called state spaces sufficiently rich flexible language independent model describing web services world act sec 
model describe functional description properly specify formal semantics sec 
give concise formal definitions concepts involved model sec 
demonstrate applicability introduced model specific case semantic analysis functional descriptions sec 

particular clearly define desirable properties functional descriptions realizability semantic refinement show determine properties algorithmically existing tools provably correct way 
reconstruct generalized versions results matching component specifications known software component community formal model get additional insights relation semantic notion refinement syntactic criterion checking semantic matches discussed see deeper 
bigger picture 
model considered small step mathematical model service oriented architectures 
rich mathematical model able give semantics formal descriptions architectures similarly discussed simple case capabilities reason descriptions understood verifiably correct way extension refinement basic model 
expect model provides suitable flexible foundation non standard extensions 
overview solution 
part rich model description frameworks owl wsmo functional descriptions web services syntactic expressions specification language constructed non logical signature expression captures specific requirements web services constrain set web services subset interesting particular context 
set web services satisfy functional description denoted considered actual meaning way define natural model theoretic semantics functional descriptions defining satisfaction relation web services functional descriptions 
comparison common logics semantic structures interpretations assign expressions truth value simply bit complex 
fact seen generalizations called kripke structures 
general various simpler syntactic elements combined functional description state frameworks ones mentioned preconditions postconditions 
refers web services conditions refer simpler semantic entities states sense static world 
state conditions expressions static language signature single states determine world perceived external observer world truth value conditions 
formally satisfaction relation states state expressions denotes holds state essence observe syntactic level language capturing static aspects world extended language captures dynamic aspects world 
order define similar extension semantic level extend definition satisfaction definition satisfaction 
way definition highly modular language independent maximum extent focuses description dynamics possible state transitions central aspect functional description language adds top state description language applied various languages way requires model theoretic semantics static language commonly logics provide 
furthermore model theoretic approach coincides common understanding functional descriptions declarative descriptions provided functionality achieved 
model web services introduces state spaces flexible approach defining rigorous formal model web services world act meaning functional descriptions 
introducing model informally mathematically concise definitions section 
changing world 
consider world entity changes time 
entities act world human user computer program affect world perceived entities specific moment 
point time world particular state determines world perceived entities acting 
need consider language describing properties world state 
assume arbitrary fixed signature usually domain ontologies language derived signature 
classical order logic illustration purposes stress means bound specific language languages wsml owl easily framework 
consider signature balance 
allows talk bank accounts balance 
allows comparing respective values instance expressions balance stating balance account needs non negative 
context dynamics properties world change useful distinguish symbols supposed fixed meaning affected entity acts world symbols affected change meaning execution web service balance 
refer class symbols static symbols denoted dynamic symbols denoted 
state spaces 
consider state space represent possible states world 
state completely determines world perceived entity acting statement entity current state world true false 
state fact defines interpretation signature 
interpretations represent observations respect laws world underlies balance bank account allowed negative 
assume laws captured background ontology denote set interpretations respect models mod 
considering example signature background ontology balance acc acc interpretation denotes state balance acc 
contrast interpretation balance acc denote state wrt 

changing world 
means defined change operations entities affect world modify current state 
operations denote state transitions setting change operations single concrete executions web services change operation represented service accessed web service achieved executing input data 
specify service provider kind particular service accessible requested client 

input data 
execution web service essentially causes state transition transforming current state world new state transition general atomic transition sequence 
sn sn 
intermediate state si effect perceived 
especially relevant web services allow accessing long lasting activities involve multiple conversation steps requester web service consider international bank transfer having concrete input data information transfer acc acc web service execution involve intermediate state balance acc balance acc balance acc balance acc balance acc balance acc outputs changes information space 
execution 
web service send information output requester 
consider outputs updates called information space requester service precisely consider information space service requester set objects universe object received requester execution 

execution information space evolves starting empty set web service invoked execution leads monotonic sequence information spaces 

bank transfer example financial transaction tid receive message acknowledgment msgid confirmation transaction approved initialized ack msgid tid ack msgid tid confirm acc acc tid observations states 
aim describe effects web service executions requester 
obviously requester observe state world related properties represented statements hold additionally aspects observer world perceive state model includes information space described 
state sense corresponds observations relevant uses formal model purpose means pairs interpretations mod possible information spaces consequently represent observations related state observation function mod assigns state pair interpretation respecting domain laws information space denote component rw real world properties entity perceives world second component information space invoker perceives information space 
require observation function fixed total function arbitrary 
means observations entity defined state perception representable terms consistent domain model corresponds state means surjective considering states objects predefined fixed structure separated formal structure representing actual observations state means able address extensions model needed extensions clean modular way formally describing conversations group agents world 
easily include representation contextual aspects model state observed differently various agents 
web service executions 
input 
web service execution assume fixed signature limited language describing observations world assume injective distinct states world distinguished limited language rw rw 


sm starting state induces sequence observations 
sm service requester execution 
sequences states represent meaningful state transition caused execution faithfully represent need require adjacent states 
change observed invoker objects information space received invoker point time execution disappear execution completed 
discussed general need require constraints sequence interpret possible run 
web service call pre state execution sm post state execution states intermediate states 
web services 
web service seen set executions 
delivered web service state world requester equipped kind valid input data 

order keep track input data caused specific execution need represent web service terms slightly richer structure set mapping provided input values 
resulting execution 

illustrates proposed model 
state space web service information space state world rw fig 

model world web services 
functional description web services 
combining state related descriptions functional description capability essentially creates constraint possible web service executions 
executions web service capability described terms capability description contains constraint pre post state constraint post longer arbitrary possible executions state space respects pre final state sm respect post considered represent actual execution web service capability state spaces web services give series definitions capture preceding semi formal discussion rigorous way 
signature logic signature background theory capturing relevant domain knowledge 
denote set interpretations denote set interpretations universe considered denoted universe subset set denote powerset mod denote interpretations satisfy domain model 
denote meaning symbol assigned interpretation 
signature partitioned set dynamic symbols set static symbols extend signature adding new symbol pre set pre variants symbols denoted pre furthermore add new symbol 
intention follows contains symbols interpreted way static symbols contains symbols interpretation change execution web service dynamic symbols pre contains symbols interpreted execution web service right starting execution 
denotes objects information space 
symbols added formulating post state constraints describe changes pre states post states precise way 
definition state space 
state space tuple non empty set states ii non empty set objects called universe iii consistent iv mod total surjective function assigns state pair interpretation rw satisfying information space meaning rw meaning rw 
considered domain ontology representing consistent background knowledge world 
sort descriptions preconditions clause captures nature static symbols 
denotes state space 
interacting web service client technical interface 
abstracting technical details interface basically provides set values input data 
required input data represent interface interaction web service capability point view 
definition web service capability interface input binding 
web service capability interface web service finite sequences names 
required input values input binding web service capability interface total function 
set input bindings denoted ina 
input binding essentially represents input provided invoker web service entire execution definition web service execution 
possible web service execution finite sequences 
sm states sj sj ii 
sm iii universe rw si universe rw sk iv si universe rw si meaning rw meaning rw pre vi meaning rw si 
denote set possible web service executions exec 
definition gives detailed conditions sequence considered web service execution 
clause iii requires execution universes related states sj words universes interpret state expression related execution arbitrary specifically related 
particular iii ensures functional description postconditions talk object precondition refer 
precise comparisons various states execution possible 
clause iv requires state involved execution information space part universe state 
allows relate compare information space objects real world objects state expressions 
clauses vi ensure intermediate final states pre versions pre dynamic symbols interpreted execution symbol represent respective information space 
definition web service web service implementation 
web service implementation web service capability interface 
total function ina exec defines accepted input bindings ina states respective web service execution exec 
formally require sm implies ina 
web service pair web service capability interface corresponding web service implementation consider mapping marking execution sequences input data triggers execution 
define web service implementation terms function maps single web service executions consider deterministic web services execution fully determined input binding intial state 
sort uncertainty going happen executing unexpected failures due environment web service embedded considered model 
total function ina definition reflects fact represents implementation 
specifications possible effect situation fully determined 
formal machinery formalize meaning functional descriptions state description language 
write express formula satisfied interpretation variable assignment 
assume functional description pre post consists precondition pre postcondition order model dynamic universes object creation deletion needs model object existence state description language instance dynamic unary 
post 
freevars pre post denotes set free variable names represent inputs web service consideration 
logical expressions pre post usually refer ontology 
definition extension input binding renaming 
input binding web service capability interface 
set symbol names total function 
called extension ij ij function input binding denote rename input binding derived replacing pairs dom 
call rename renaming 
extension input binding definition ensure variable occurs free precondition postcondition assigned concrete value 
truth value determined statements 
renaming represents technical level effect renaming input names web service interface corresponding names interface web service description 
definition capability satisfaction capability model 
web service pre post functional description web service 
denote set free variables pre post denote universe rw 
satisfies capability exists subset inputs bijection ii input bindings ina states extensions rename 
sm rw pre rw sm post case write call web service capability model simply model clause essentially requires interface compatibility web service inputs refered web service description 
note require syntactic equality names equivalence renaming 
perfectly fine models proper subset inputs mentioned capability clause ii defines meaning preconditions postcondition 
please note free variables expressions implicitly universally quantified definition 
applying formal model semantic analysis demonstrating suitability proposed model section shows beneficial application semantic analysis functional descriptions modeltheoretic framework carry semantic standard notions mathematical logic refer formal descriptions model notion particular context meaningful way 
deeper extended discussion topic refer interested reader 
realizability 
define realizability description corresponding notion satisfiability logic functional description realizable state space iff 
web service satisfies consider functional description pre post ifd describing web services account withdraws ifd acc amt pre amt post balance acc acc amt glance description implementable web service satisfies closer look respective domain ontology obvious case 
ontology defines balance negative precondition prevent balance withdraw 
assume web service realizing considering input binding amt acc precondition satisfied postcondition hold final state respective execution rw sm acc balance acc 
inconsistent domain ontology balance acc sm exist contradiction shows web service exist 
fix description realizable need extend precondition pre amt amt balance acc 
example illustrates usefulness notion realizability 
provides tool detecting functional descriptions contain flaws obvious modelers 
see soon rephrase problem realizability description understood problem algorithms exist 
turn important notion realizability turns special case conformance original notions mathematical logic 
functional refinement 
notion logical entailment usually defined follows formula logically entails formula iff interpretation models model 
substituting interpretations web services formulae functional descriptions satisfaction capability satisfaction derive criteria captures refinement functional descriptions 
functional refinement denoted iff 
web service implies 
intuitively speaking means specific web service matter provides provide 
words describe piece functionality fits requirements 
web services provide satisfy web service provides specific required 
illustration consider web service description pre prs acc advertises ability provide access credentials particular web site com 
domain ontology specifies web site content access web site able know content 
furthermore com web site providing ultimate answer life universe constant ee post value 
pre post account acc balance acc ee balance acc acc ee password prs com password prs com ws prs 
content ws access prs ws knows prs content com answer life ee prs ws 
password prs ws access prs ws formal definition examine definition pre post prs acc check functional refinement previous description 
pre account prs acc balance acc post knows prs answer life notion beneficially applied functionality matchmaking 
instance assume person seeking ultimate answer life knows answer life account acc current balance usd 
information domain ontology considering specific input binding prs acc acc infer web service advertised provide capability serve purpose precondition pre satisfied input 
consequence specific input service delivers described postcondition post infer knows answer life 
know web service advertised provide capability perfectly suitable endeavor 
notion functional refinement pre index set web service description request necessary consider available description subset identified pre indexing 
framework allows proof theorem see especially useful reducing problem determining functional refinement eventually semantic analysis notions discuss section defined proof obligation language underlying theorem reduction functional refinement 
pre post pre post functional descriptions interfaces 
pre denote formula derived replacing dynamic symbol corresponding pre variant pre pre post post pre pre pre pre pre gives algorithm implemented system allows determine logical entailment note expect knowledge central domain ontology number knowledge bases generic provider requester specific 
simplicity assume aggregated system algorithm determine functional refinement descriptions capability language principle new calculus dealing needed purpose semantic analysis 
algorithm derived theorem longer heuristic provably correct 
discussion variants theorem refer 
able formulate corollary immediate consequence definition realizability functional refinement denote description trivially unrealizable true false 
corollary realizability vs refinement 
functional description pre post realizable iff 
corollary simply states description specific trivially unrealizable functional description unrealizable 
light theorem shows reduce realizability defined proof obligation 
deal realizability algorithmically existing tools 

functional description consider dual notion realizable having web service model 
notion corresponds classical notion validity obviously represents form ill defined unacceptable type description 
matches possible web services matter 
service providers non trivially omnipotent descriptions advertise web services registry get maximal visibility 
trivially omnipotent functional description true true 
immediate consequence derive corollary shows reduce defined proof obligation deal algorithmically existing tools corollary vs refinement 
functional description pre post omnipotent iff 
corollary simply states description general trivially omnipotent functional description omnipotent 
summary 
semantic analysis seen concrete example symbolic computation functional descriptions formally ground formal model ii problem interesting 
model able rigorously define various useful notions enable analyze relate functional descriptions semantically 
shown reduce various relevant notions defined proof obligations underlying language making severe restrictions assumptions language 
framework able proof correctness reduction 
wealth different languages exist semantic web ones invented uniform treatment provides universal approach semantics functional description independent language 
related defining semantics functional description provide basis applications semantic web service repositories discovery engines illustrated case formalism corresponding examples 
area previously leveraged different detailed formal view concept web service web services formally considered sets objects input outputs 
description language sets allow natural representation means concepts description logics 
matching reduced standard reasoning tasks language dynamics associated detailed state perspective web services represented setting 
common practice semantic web community considering semantic descriptions web service strictly focus languages description logics adequate language independent mathematical model objects invest underlies descriptions 
question conceptually interesting compatible various concrete representation languages description logics order logics demonstrated 
area software specification functional descriptions studied phenomena 
hoare introduced approach describing component pre post conditions 
numerous systems developed follow line description 
significant commonalities framework constructs identifying inputs outputs means symbols pre state formulae post state 
framework different dimensions fix underlying language address current situation semantic web various different languages various formalisms explicitly take existence background knowledge represented ontology notion side effect real world modelled account 
particular theorem section represents generalization known criterion proposed software component community specification matching 
guarded plugin match defined pm pre pre pre post post equivalent necessary condition theorem 
covers simpler scenario specifications contain dynamic functions 
criterion explicitly deals background ontology functional descriptions 
contrast theorem gives formal investigation criterion called guarded plugin match relates semantic notion functional refinement detected means defined proof obligation 
defined state spaces formal model appropriately describing web services act world change 
main features proposed model language independence maximum extent ii modular flexible definitions easily extended fit needs specific applications 
language independence particular means approach applicable variety static description language capturing properties single states 
especially suitable application frameworks owl wsmo describe functionality provided web services state manner 
basis model rigorously defined semantics functional descriptions 
demonstrated applicability benefit model terms concrete case semantic analysis functional descriptions 
illustrated capture interesting naturally arising properties functional descriptions particular functional refinement realizability 
mathematically concise definitions exemplified device provably correct algorithm semantic analysis existing algorithms systems 
case followed supports thesis correctness sort symbolic computation functional descriptions web services analyzed exposed framework 
presents basic model plan apply frameworks wsmo owl strive genericity independence specific static languages state descriptions 
particular plan develop matching mechanism defined notion functional refinement order provide component clear defined functionality functional web service discovery 
furthermore consider extensions model integrating execution invariants properties guaranteed change execution web service see details distinction complete incomplete functional description sort closed world modelling integrating behavioral descriptions choreography orchestration interfaces concerned intermediate states order consume respectively achieve functionality web service 
model considered small step adequate mathematical model service oriented architectures 
needs consider represent lot aspects world states multiple agents interacting distributed setting communicating concurrent fashion integrate respective elements mathematical model 
expect model provides flexible extensible foundation non standard extensions 
concise rich model able give semantics formal descriptions architectures similarly discussed simple case capabilities reason descriptions understood verifiably correct way extension refinement basic model 

material works supported eu knowledge web network excellence fp dip project fp austrian federal ministry transport innovation technology project rw ffg 
authors members wsmo working group www wsmo org fruitful input discussion 

blackburn de rijke venema 
modal logic 
cambridge university press 

enderton 
mathematical logic 
academic press second edition edition 

contextual reasoning 
artificial intelligence perspective 
technical report itc irst technical report may 

fitting 
order logic automated theorem proving 
springer verlag second edition edition 

hoare 
axiomatic basis computer programming 
commun 
acm 

jones 
systematic software development vdm 
prentice hall upper saddle river nj usa 

keller lara lausen fensel 
automatic location services 
proceedings nd european semantic web conference pages 

keller lara eds 
wsmo web service discovery 
deliverable nov wsml working group 
online www wsmo org tr 

lara roman fensel 
conceptual comparison wsmo owl 
proc 
nd european conference web services 

lausen 
functional description web services 
deliverable jan wsml working group 
online www wsmo org tr 

lausen roman eds 
web service modeling ontology wsmo 
member submission june 
online www org submission wsmo 

li horrocks 
software framework matchmaking semantic web technology 
www budapest hungary may 

martin ed 
owl semantic markup web services 
member submission november 
online www org submission owl 

meyer 
eiffel language 
prentice hall ptr 

paolucci kawamura payne sycara 
semantic matching web service capabilities 
iswc pages 
springer verlag 

spivey 
notation manual 
prentice hall international second edition edition 

van benthem 
handbook logic artificial intelligence logic programming epistemic temporal reasoning volume chapter temporal logic pages 
oxford university press oxford uk 

wing 
specification matching software components 
acm transactions software engineering methodology 
