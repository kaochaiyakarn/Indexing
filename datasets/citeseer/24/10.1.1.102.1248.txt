multi dimensional dynamic logic programming represent societal agents viewpoints jo alexandre leite jos alferes lu pereira centro de ncia artificial universidade nova de lisboa portugal jja lmp di fct unl pt 
explores applicability new paradigm multi dimensional dynamic logic programming represent agent view combination societal knowledge dynamics 
representation dynamic society agents core min agent architecture system designed intention providing common agent framework unique strengths logic programming hat allows combination non monotonic knowledge representation reasoning mechanisms developed years 
years notion agency claimed major role defining trends modern research 
influencing broad spectrum disciplines sociology psychology agent paradigm virtually invaded sub field computer science :10.1.1.27.8869:10.1.1.133.2832
commonly implemented means imperative languages mainly reasons efficiency agent concept increased influence research development computational logic systems 
efficiency crucial issue clear specification correctness logic programming nonmonotonic reasoning brought back spotlight 
logic programming paradigm provides defined general integrative encompassing rigorous framework systematically studying computation syntax semantics procedures attending implementations environments tools standards 
lp approaches problems provides solutions sufficient level abstraction generalize problem domain problem domain 
afforded nature foundation logic substance method constitutes major assets 
accrues significant improvements efficiency logic programming implementations non monotonic reasoning 
allowing unified declarative procedural semantics eliminating traditional wide gap theory practice quite powerful results field non monotonic extensions logic programming lp belief revision inductive learning argumentation preferences abduction represent important composite added value design rational agents :10.1.1.27.8869
logic programming seen representation language static knowledge 
move open dynamic environment typical agency paradigm need consider ways representing integrating knowledge different sources may evolve time 
agent comprises knowledge states form knowledge transitions states 
knowledge state transitions represent agent knowledge environment evolution behaviour evolution 
logic programs describe knowledge states fit logic programs describe transitions knowledge states 
natural associate state set transition rules obtain state 
developments opened logic programming unreachable dynamic worlds 
authors introduced dynamic logic programming 
studied defined declarative operational semantics sequences logic programs dynamic logic programs 
program sequence contains knowledge state different states may example represent different time periods different sets priorities 
dynamic logic programming extended logic programming making possible logic program undergo sequence modifications opening possibility incremental design evolution logic programs significantly facilitating modularization logic programming modularization non monotonic reasoning 
authors introduced language language dynamic updates designed specifying changes logic programs 
initial knowledge base logic program provides way sequentially updating unifying states state transitions single declarative logic framework 
main motivation dynamic logic programming represent evolution knowledge time relationship different states encode aspects system explored 
dynamic logic programming represent states evolving dimension aspect system aspectual evolution encoded combined simultaneously 
dynamic logic programming defined linear sequences states 
multi dimensional dynamic logic programming mdlp introduced generalize dlp allow collections states represented arbitrary acyclic digraphs dag just sequences states 
mdlp assigns semantics sets subsets logic programs depending stand relation defined dag represents states configuration 
natural generalization mdlp affords extra expressiveness enlarging latitude logic programming applications unifiable single framework 
flexibility provided dag ensures wide scope variety new possibilities 
virtue newly added characteristics multiplicity composition mdlp provides societal viewpoint logic programming important web agent days combining knowledge general 
explore application new paradigm multidimensional dynamic logic programming represent agent view combination societal knowledge dynamics agent view evolution knowledge result knowledge evolution community agents 
brief overview dlp section 
section mdlp 
section explore application mdlp represent inter intra agent relationships views multi agent system 
conclude section 
background start overview syntax semantics generalized logic programs followed short recap paradigm dynamic logic programming 
generalized logic programs stable models represent negative information logic programs updates need allow default negation premises clauses heads generalized logic programs defined generalized logic program language mean finite infinite set propositional clauses form 
ln li literal atom default negation atom 
clause rule mean mean 
ln 
resp 
resp 

valued interpretation mean set literals satisfies condition precisely literals belongs interpretation define atom atom 
established tradition convenient omit default negative atoms describing interpretations models 
say valued interpretation stable model generalized logic program 
renames default literal program model new atoms say class generalized logic programs viewed special case broader classes programs introduced earlier special case normal programs semantics coincides stable models semantics 
reader find motivation usage generalized logic programs simple denials result freely moving head body 
dynamic logic programming recall semantics dynamic logic programming 
dynamic logic program sequence pn 
denoted ps finite infinite sequence lps indexed finite infinite set 

sequence may viewed outcome updating updating pn 
see sections pi determined ith state transition 
role dynamic logic programming ensure newly added rules force previous rules valid inertia long conflict ones remain force 
notion dynamic logic program state denoted characterizes meaning dynamic logic program queried state means stable models defined follows definition stable models dlp 
ps dynamic logic program interpretation ms stable model state iff ms ps reject ms default ms ps pi reject ms pi pj ms default ps ms ps ms atom 
multi dimensional dynamic logic programming main motivation dlp represent evolution knowledge time relationship different states encode aspects system pointed 
fact dlp employed represent stock features system means represent reason evolution knowledge time combine rules learnt diversity agents reason updates agents beliefs model agent interaction model reason actions resolve inconsistencies metaphorical reasoning 
common feature applications dlp states associated set theories encode possible representational dimensions time hierarchies domains inasmuch dlp defined linear sequences states 
example dlp model relationship strict hierarchy group agents dlp model evolution single agent time 
dlp stands deal settings model evolution group agents time 
effect knowledge updating simply envisaged place time dimension 
updating dimensions may combine simultaneously temporal specificity taxonomies strength updating instance legislative domain hierarchical position knowledge source organizations credibility source uncertain mined learnt knowledge opinion precedence society agents 
possible dlp needs extended allow general structure states 
section notion multi dimensional dynamic logic programming mdlp introduced generalizes dlp allow collections states represented arbitrary acyclic digraphs 
setting mdlp assigns semantics sets subsets logic programs depending relate relations defined acyclic digraph representing states 
graphs directed graph digraph pair finite infinite sets vd vertices ed pairs vertices directed edges 
directed edge sequence vn digraph sequence edges en ed ei vi vi directed path directed edge sequence edges distinct 
directed acyclic graph acyclic digraph dag digraph directed edge sequences vertices source vertex valency number edges final vertex sink vertex valency number edges initial vertex 
say directed path relevancy dag dag wrt vertex dv vv ev vv vi vi vi ev vi vj vi vj vi vj vv 
relevancy dag dag wrt set vertices ds vs es vs vv es ev dv vv ev relevancy dag wrt declarative semantics start defining framework consisting generalized logic programs indexed dag 
restrict dag vertex dag path finite 
definition multi dimensional dynamic logic program 
propositional language 
multi dimensional dynamic logic program mdlp pair pd dag pd pv set generalized logic programs language indexed vertices call states vertices simplicity leave language implicit 
characterize models state keep basic intuition logic program updates interpretation stable model update program program iff stable model program consisting rules subset rules comprised rejected carry inertia due overridden program dag index programs program may single ancestor 
dealt desired intuition program pv pd reject rules program pu pd directed path atom defined update ancestor negation assumed default 
formally stable models mdlp definition stable models state 
pd mdlp pd pv interpretation ms stable model state iff ms ps reject ms default ps ms ps pi reject ms pi pj ms default ps ms ps ms intuitively set reject ms contains rules belonging program indexed state overridden head rule true body state path state ps contains rules programs indexed state paths state rules potentially relevant determine semantics state set default ps ms contains default negations unsupported atoms atoms rule ps body true ms determine models mdlp state need consider part mdlp corresponding relevancy graph wrt state situation desire determine semantics jointly state 
states belong relevancy graph simply determine models state 
case 
formally semantics mdlp arbitrary set states determined definition definition stable models set states 
pd mdlp pd pv 
set states interpretation ms stable model set states iff ms ps reject ms default ps ms ps spi pi reject ms pj ms default ps ms ps ms equivalent addition new vertex dag connecting addition edges states wish consider 
furthermore program indexed empty 
determine stable models new mdlp state 
note addition state affect stable models states 
newly introduced edges belong relevancy dag wrt state 
particular case definition corresponding semantics mdlp alternative definition purely syntactical transformation mdlp produces generalized logic program stable models equivalence relation stable models mdlp previously characterized 
computation stable models state reduces computation transformation followed computation stable models transformed program 
directly provides implementation mdlp publicly available di fct unl pt jja updates 
inter intra agent social viewpoints previous section contains definition notion multi dimensional dynamic logic programming mdlp extension dlp allow states related arbitrary dag 
stable models mdlp characterized explained dags represent real problems 
particular shown dags allow combination representational dimension motivation introduce mdlp 
explore particular classes dags suitable context multi agent systems 
agents situated need represent reason information obtain directly sensing environment communicated agents 
agents environment evolve time incoming information update existing knowledge 
agents credibility represented hierarchy predominance 
section explore dags provide way represent evolution time knowledge provenance community hierarchically related agents 
start agent situated community agents represented greek letters 
multi agent system 
agent hierarchical view world position community agents related dag dh eh eh depicted fig 

dag agent opinions prevail agent 
need 
example agent role coordinate community natural exist edge connecting agent 
static environment representation sufficient determine semantics view community 
situation rules asserted agent constitute programs indexed dag fig 

fig 

hierarchical dimension temporal dimension realistic scenario dynamics system ignored single program representing agent 
sequence programs representing knowledge agent time point 
suppose time points represented set mean current time state example knowledge agent represented set programs indexed dag bt bt depicted fig 

full dynamic hierarchical scenario comprising agents represented set programs pd pat indexed dag 
remains defined relationships programs edges belonging purpose propose basic ways systematically relate programs 
equal role representation approach combining hierarchical temporal dimensions accomplished assigning equal roles precedence relations 
scenario maintain temporal precedence relation agent hierarchical time state relate programs fall outside scope precedence higher ranked older program lower ranked newer 
accordingly set edges dag contains union sets edges time dependence edges 
hierarchy dependence edges bt 
intuitively rule reject rule lower ranked agent indexed time state equal lower 
situation depicted fig 


section chosen simplified representation dags interpretation easier 
purpose introduce fig 

equal role representation new nodes meta nodes encapsulating part dag detail 
obtain complete dag simplification needs replace meta node detail replacing edges entering meta node set edges entering source node detail 
similarly needs replace node departing meta node set edges departing sink detail 
dag added new node labelled single sink empty program associated indicating semantics corresponding agent view system time state determined 
semantics mdlp invariant wrt transitive closure dag omitting edges affect transitive closure 
scenario legal reasoning legislative agency divided conforming hierarchy power governed principle lex superior lex superior rule issued higher hierarchical authority overrides issued lower evolution law time governed principle lex posterior lex posterior priori rule enacted point time overrides earlier 
lex superior encoded hierarchy dependence edges lex posterior encoded time dependence edges 
allowing rejection governed time hierarchy contradiction inasmuch pairs programs related graph 
purpose agency system perform sort paraconsistent reasoning agent negotiation system trying reach agreement ideal scenario contradiction generate messages responsible agents possibly review positions 
case may want reduce amount contradiction establishing skewed relation temporal hierarchical dimensions 
approaches explored subsections 
fig 

time prevailing representation time prevailing representation representation dag contains time hierarchy dependence edges edges time prevailing edges tpe bt 
intuitive reading rule indexed time state overrides older rule independently agents rules belong 
situation depicted fig 

representation particularly useful dynamic situations competence distributed knowledge changes rapidly different agents typically provide rules different literals 
mainly newer rule overrides older 
means situation completely defined rules issued community time state simply ignore older rules 
main drawback representation relates agents community 
requires agents fully trusted allowing new rules override old ones irrespective hierarchical position untrustworthy lower ranked agent override higher ranked agent just issuing rule time state 
leads alternative representation 
hierarchy prevailing representation representation dag contains time hierarchy dependence edges edges hierarchy prevailing edges bt 
fig 

hierarchy prevailing representation intuitive reading rule indexed higher ranked agent overrides lower ranked agent rule independently time state indexed 
situation depicted fig 

situation useful contrast previous agents untrustworthy lower ranked agent rule may contradicted older higher ranked agent rule 
main drawback consider entire history higher ranked agents order accept reject rule provided lower ranked agent 
number techniques reduce size dynamic logic program developed useful simplifying time sequence programs individual agent 
outside scope 
context legal reasoning scenario corresponds collisions rules governed principle lex superior priori posterior rule issued higher hierarchical authority earlier point overrides issued lower hierarchical authority point 
representing inter intra agent relationships representations set forth previous sub sections refer community agents 
different levels abstraction represent macro micro aspects multi agent system unified manner 
suppose agent composed sub agents concurrently performing dedicated tasks reading writing common knowledge structure 
view agent seen community sub agents related example dag fig 

dynamic system comprising agents sub agents represented set programs pd pat indexed dag 
fig 

sub agent hierarchy relations programs propose combination time hierarchy prevailing representations relate sub agents agents respectively 
mentioned time prevailing representation efficient requires agents trusted 
expect agent trust component sub agents 
representation agents opt hierarchy prevailing relation 
formally set edges dag contains time prevailing edges tpe bt model relationships sub agents 
hierarchy prevailing edges bt model relationships agents system 
note edge entering resp 
departing interpreted set edges entering resp 
departing bt dt 
situation depicted fig 

note just proposal possible existing combinations represent relations 
explored multi dimensional dynamic logic programming means combine knowledge different agents single knowledge base point view precise declarative semantics 
depending situation relations agents envisaged classes acyclic digraphs suitable encoding 
strengths mdlp framework capable simultaneously represent aspects system dynamic fashion powerful language specify evolution representations means transitions launched design agent architecture min 
aims providing sound theoretical basis common agent framework strengths logic programming allow combination non monotonic knowledge representation reasoning mechanisms developed years 
logic programming endeavour justified ground providing rigorous single encompassing theoretical basis fig 

inter intra agent relationship representation topics implementation vehicle parallel distributed processing 
additionally logic programming provides formal high level flexible instrument rigorous specification experimentation computational designs making extremely useful prototyping possibly lower level target implementation languages envisaged 
rational agents opinion require number reasoning mechanisms mentioned carry tasks 
min agent modular design common knowledge base concurrently manipulated specialized sub agents 
common knowledge base contains knowledge shared sub agent 
conceptually divided components capabilities intentions goals plans reactions object knowledge base internal behaviour rules 
conceptually divided components modules share common representation mechanism mdlp represent knowledge state represent state transitions common part agent behaviour 
agent composed specialized functionality related execute various specialized tasks 
examples implementing reactive planning scheduling belief revision goal management learning dialogue management information gathering preference evaluation strategy diagnosis functionalities 
sub agents contain program encoding behaviour interfacing common knowledge base 
whilst sub agent functionalities fully specifiable require private specialized procedures serves interface language 

alferes leite pereira przymusinska przymusinski 
dynamic updates non monotonic knowledge bases 
journal logic programming 
short version titled dynamic logic programming appeared procs 
kr 

alferes pereira przymusinska przymusinski 
language updating logic programs 
artificial intelligence 
appear 
short version appeared procs lpnmr lnai 

martelli 
logic programming multi agent system combination applications semantics 
logic programming paradigm year perspective 
springer 

faber leone 
disjunctive logic programs inheritance 
procs 
iclp 
mit press 

dell acqua pereira 
updating agents 
procs mas iclp ws 

eiter fink tompits 
considerations updates logic programs 
procs 
jelia lnai 
springer 

gelfond lifschitz 
stable semantics logic programs 
procs 
iclp 
mit press 

jennings sycara wooldridge 
roadmap agent research development 
journal autonomous agents multi agent systems 

lamma pereira 
strategies combined learning logic programs 
machine learning 

leite alferes pereira 
multi dimensional dynamic logic programming 
procs 
pages 

leite alferes pereira 
min dynamic logic programming agent architecture 
procs 
atal 

leite pereira cardoso pereira 
metaphorical mapping consistency dynamic logic programming 
procs 
aisb 
aisb 

lifschitz woo 
answer sets general non monotonic reasoning preliminary report 
procs 
kr 
morgan kaufmann 

niemel simons 
smodels implementation stable model founded semantics normal lp 
procs 
lpnmr volume lnai 
springer 

rodrigues 
collaborative legal information retrieval system dynamic logic programming 
procs 

acm press 

sadri toni 
computational logic multiagent systems roadmap 
available www org 

sakama inoue 
updating extended logic programs abduction 
procs 
lpnmr 
springer 

xsb prolog 
xsb logic programming system version 
available www cs sunysb edu 

zhang foo 
updating logic programs 
procs 
ecai 
morgan kaufmann 
