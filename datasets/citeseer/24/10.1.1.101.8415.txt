overview cost optimization queries aggregates surajit chaudhuri hewlett packard laboratories page mill road palo alto ca chaudhuri hpl hp com kyuseok shim ibm almaden research center harry road san jose ca almaden ibm com optimization problem select project join queries studied extensively 
problem received relatively attention optimizing queries aggregates 
example single block sql traditional query processing systems directly implement sql semantics defer execution grouping joins clauses executed 
furthermore queries views aggregates traditional optimizers consider flattening views 
show rich set execution alternatives significantly enhance quality plans produced 
discuss choose alternatives 
consider single block sql queries 
queries reason consider alternatives group operation precedes join early evaluation group significantly reduce size input join 
transformation may result grouping operation pushed base table 
event indexes base tables combine operation join group 
case queries containing views aggregates presence group hinders ability reorder relations view relations outside 
reordering joins view boundaries potential generating cheaper execution alternatives 
order able optimize queries aggregates need transformations enable optimize queries containing group join 
optimization algorithms incorporate transformations increasing search space dramatically 
considering optimization single block sql queries 
refer readers cs cs cs technical details 
transformations single block sql transformations possible group precede join 
conditions transformations possible fall broad categories conditions depend solely schema nature join predicates independent nature aggregating functions 
join join ep join ep join transformations conditions depend specific properties aggregating functions 
lead additional group nodes 
conditions require introducing derived columns 
conditions require derived columns transformations belong group applicable aggregating function including sideeffect free user defined function 
application transformation operator tree leads transformed operator tree illustrated 
observe transformation increase number operators 
example consider case amount product division state query calculate total sales product developed western states 
case traditional execution takes join tables computes 
alternative scheme group table compute total sales product 
subsequently eliminate results correspond products developed western states 
selectivity join large execution may efficient 
exploiting properties aggregating functions possible stagewise group leading group nodes 
aggregation functions follow property join agg agg agg agg bags values denotes sql union operation bags 
example aggregate function sum follows property sum sum sum sum 
consider simple modification query earlier 
assume want compute total sales division division may products 
applying transformation compute total sales product join table add sum sales products belong division 
cases keeping track count coalesced groups possible introduce group early group 
cases properties aggregating functions may admitted general equation agg agg agg count count bags values denotes sql union operation 
computing stagewise grouping requires derived column values 
example count average groups average coalesced group computed 
illustrated node ep extended projection represents computation aggregated value relationship equation 
observe execution ep join node combined single join implementation 
transformations represent early evaluation grouping operand join node 
generalized sides operands represent aggressive early grouping 
optimization algorithm single block query decision apply transformation needs optimizer anticipated costs 
choice interacts join ordering group effect reducing number tuples cost requiring sorting hashing data stream pre sorted 
problem optimization presence group aggregates properties 
increase number operators group operator may added number operators may increase transformation 

effect physical properties application grouping operation relation results relation just fewer tuples differences physical properties application group operator may change width intermediate relation 
application group operator interacts interesting orders sac 
difficult problem handling optimization problem presence group arises fact transformations introduce additional group operators 
potential execution space dramatically increased may opportunity place group preceding join 
challenge optimizing queries possible locally compare segments plans choose winner reasons 
grouping early new interesting order may introduced grouping implemented sorting 
may win locally order generated sorting may reduce cost join operations 
effect similar considering sub optimal sort merge join traditional select project join queries 
needs address problem determining major minor order sorting grouping implemented sorting relationship join predicates 
similar considerations arise grouping implemented hashing 
observe aggregation functions column width relation application grouping increase 
effect increased width leads effect converse interesting order 
locally better may perform increased width may lead higher cost globally 
greedy conservative heuristic proposed greedy conservative heuristic technique optimize single block sql group cs exploiting transformations 
design principles greedy conservative heuristic ensure quality plan produced worse execution plan produced traditional optimizer significant overhead optimization 
order ensure cost increase optimization modest decided choice applying early grouping late grouping locally 
greedy conservative heuristic places group preceding join conditions hold semantically correct 
record width output group operator larger input 
results cheaper plan join 
considering join relations conditions hold cost optimal plan compared cost represents application group 
note intermediate relations 
furthermore greedy conservative heuristic considers single ordering group columns join method considered implementing sort merge join method choose major minor ordering join node 
virtue local decisions greedy conservative heuristic adds little overhead optimization considering significantly extended execution space 
pointed previous section local decision greedy conservative suboptimal 
greedy conservative heuristic ensures local decision result plan worse traditional execution 
enforce property plan considered width intermediate obtained increase condition 
experiments implementation extension sac indicate significant increase order magnitude quality plans modest increase optimization overhead cs 
results particularly encouraging view fact took conservative cost model discourages early evaluation group operators 
implementation system style optimizer greedy conservative heuristic incorporated optimizer architectures 
single block queries general query uses view definition aggregate turned single block select project join spj query 
section discuss group operators moved traditional query graph query blocks 
relative placement group query blocks significant impact cost plan query views containing aggregates due effect data reduction reordering relations query blocks 
section discuss new approach optimizing queries 
pull transformation transformation pull group operator join 
transformation interesting pulling group enables alternative join orders 
sequence pull transformations may result collapsing multi block query single block query 
section explore aggregate view obtain query group top 
consider execution andp 
andr andj andg base tables query expressions join nodes group operators respectively 
plan defer group obtain equivalent manner see grouping columns ofg union grouping columns ofg key columns ofr 
intuition tagging tuple key recover original groups including key attribute pull plan plan pulling group operator grouping columns ofg 
subsequent deferred grouping throw away key column part projection columns 
note inp key column ofr grouping columns projection column join includes columns 
furthermore projection list join includes aggregating columns 
transformation applicable join predicate involve aggregation column ofg 
formal statement transformation appears cs 
dayal day briefly touches idea keys pull 
wong gw implicitly restricted form pull specific class join aggregate queries optimized 
special instances pull transformations defined 
optimization algorithm class queries consider optimization algorithm canonical form shown see cs details aggregate view vi consists select project join expression group clause possibly clause 
vi contains join group operator gi 
query single block query consisting join aggregate views set base tables join vm bn vi aggregate views bi base relations 
query may contain group clause 
set relations fb fv denoted respectively 
gm vm bn canonical form query approach extending traditional optimization algorithm multi block queries pull push transformations guided criteria approach adaptable existing optimizers produce plan worse traditional optimizer 
want able limit extent search systematic fashion 
key idea apply pull transformation view vi relation relations vi vj additional reordering relations vi vj enabled preprocessing step 
details algorithm cs 
relationship correlated nested queries note join aggregate class nested queries closely related optimizing queries containing views aggregates 
follows past flattening nested queries pioneered kim kim 
example result kim transformation query join base tables aggregate views views containing aggregates 
result optimizing queries containing views aggregates optimizing queries correlated nested subqueries 
show alternative flattening schemes nested subqueries due gw special cases execution alternatives due optimization aggregate views 
differences transformations due kim highlighted seen arising due extreme placements group operators 
problem optimizing queries containing aggregate views key problem right directly bears problem optimizing queries nested subqueries 
kim transformation wong transformation unnesting transformations increasing emphasis decision support systems problem optimizing queries aggregates assumed increasing importance 
article pointed developments area 
evolving querying models decision support systems olap interfaces spur development area 
probe invariant grouping single block query studied independently cs yl 
introduced simple coalescing generalized coalescing 
additional transformations including pull group reported yl cs 
problem optimization transformations addressed cs single block sql queries cs multi block sql queries 
comprehensive treatment transformations optimization algorithms discussed article forthcoming cs 
note correctness transformations require general case gw mur 
cs chaudhuri shim 
including group query optimization 
proceedings th international vldb conference santiago chile sept 
cs chaudhuri shim 
complex queries unified approach 
technical report hewlett packard laboratories palo alto preparation submit publication 
cs chaudhuri shim 
query optimization aggregate views 
proceedings th international conference extending database technology avignon france march 
day dayal 
nests trees unified approach processing queries contain nested subqueries aggregates quantifiers 
proceedings th international vldb conference brighton august 
gupta harinarayan quass 
aggregate query processing data warehousing environments 
proceedings st international vldb conference zurich sept 
gw richard harry wong 
optimization nested sql queries revisited 
proc 
acm sigmod conference management data san francisco ca may 
kim kim 
optimizing sql nested query 
acm tods sept 
mur 
improved unnesting algorithms join aggregate sql queries 
proceedings th international vldb conference vancouver canada august 
sac selinger astrahan chamberlin lorie price 
access path selection relational database management system 
proceedings acm sigmod international symposium management data boston ma june 
yl yan larson 
performing group join 
proceedings international conference data engineering houston feb 
yl yan larson 
eager aggregation lazy aggregation 
proceedings st international vldb conference zurich sept 

