trade offs protecting storage meta data comparison cryptographic backup versioning immutable tamper proof redundant storage solutions joseph paul stanton elizabeth hasan larry william national center supercomputing applications ncsa university illinois urbana champaign ncsa uiuc edu modern storage systems responsible increasing amounts data value data growing importance 
primary storage system solutions emerged protection data secure storage cryptography backup versioning systems immutable tamper proof storage redundant storage 
results published studies compare solutions different requirements highlighting trade offs performance space attack resistance cost 
case study applying solutions design ncsa 
lastly conclude different storage protection solutions may appropriate different requirements general current state ofthe art storage protection solutions directions research 

potential loss corruption leakage data storage system great concern 
data critical element organizational processes 
data computational resources powering modern activity useless 
worse computations performed corrupted data 
unacceptable disclosure sensitive information accidents malicious attacks new legal liabilities ultimate damage organizational reputation 
earliest securing data focused physical security data 
guards locked doors cameras deter attackers early days computing 
remote access inter networking required security moved system level 
operating systems passwords firewalls intrusion detection systems attempt effect security networks computers 
physical security system security necessary protect data inadequate 
insider attack access privileges find obstacles data destruction determined malicious outsider obstructed little 
evolution focus protection shift solutions storage system center 
primary goal storage security insure cia properties confidentiality integrity availability 
variety techniques available 
cryptographic techniques ensuring confidentiality integrity 
backup versioning enhance availability integrity data 
tamper proofing immutability effect strong guarantees integrity 
redundancy provides better availability 
varying strengths weaknesses techniques applied correctly provide secure performing storage system 
applied incorrectly easily lead costly slow system false sense security 
highlight trade offs protecting storage systems different solutions order determine solutions appropriate different circumstances 
remainder organized follows section provides brief overviews different storage protection solutions 
section compares different solutions data available literature 
section case study storage protection design ncsa 
section general directions research 

summary storage protection solutions 
cryptography storage solutions employ cryptography primarily designed insure data confidentiality strong encryption 
proper control decryption keys authorized users gain access specific data breach storage system reveals attacker 
security clearly beneficial times necessary comes fold cost manifested performance penalties associated data access additional overhead key management 
cryptographic storage systems differ way handle added costs 
cryptographic operations computationally expensive time intensive systems offload cost client machines concentrating load storage system 
additionally designs rely centralized trusted server manage cryptographic keys require users distribute revoke keys 
noted cryptographic storage systems designed availability 
incorporating larger storage solution susceptible denial service deletion attacks 
destruction data successful compromise storage server prevent authorized user accessing data attacker able recover data encrypted disk 
pasis described detail provides method ensure availability making exception rule 
performance cryptographic storage system largely dependent type cryptography employed 
cryptographic operations easily dominate access latency result choice cryptographic scheme major determining factors performance 
older ciphers especially des des prohibitively expensive 
newer ciphers aes easier implement efficiently allow better performance especially dedicated hardware offload cryptographic operations 
absence cryptographic operations systems perform comparably underlying file system employ 
demonstrate significance cryptographic operations table offers performance comparison select systems 
transparent cryptographic file system examples file system level systems perform cryptographic operations operating system prior writing data disk 
designed layered top file system nfs 
application requests data transferred storage server client machines 
client machine responsible decryption data transferred application 
similarly data written encrypted client machine transferred storage server 
result server handles unencrypted data 
time data plaintext form application 
systems cryptographic keys localized individual machines data shar ing requires file owner manually distribute appropriate keys 
unwieldy manage larger storage environments 
additionally key revocation requires files re encrypted new keys distributed relies cumbersome timeout threshold forcing users periodically re authenticate operations 
similar file system solutions plutus sirius implement cryptographic storage system standard remote file system 
encryption decryption signing done hosts allowing scalability possible centralized server 
system daemon intercepts file system access calls routes appropriate encryption decryption operations 
systems differ directly embedded operating system offering wider range key management 
file owners required manually distribute keys additional users keys encrypt data embedded key management system located storage server 
shows arrangement keys plutus 
separate key system keys keys control access lower level data keys 
allows revoking user occur changing keys management level preventing large amounts re encryption 
additionally plutus employs key rotation scheme automates key management process limits amount individual user management 

plutus key system alternative solution pasis uses threshold secret sharing mechanism separate data servers assumption independent failures 
fewer servers configurable thresholds fail data loss leakage result 
clients able corrupt data authorized write pasis records client initiates particular operation allowing source corruption traced 
large disadvantages pasis include low read write perfor table 
comparison performance different systems different cryptographic methods 
note performance results derived unrelated studies individual systems direct comparison 
storage system sequential read sequential write plutus crypto plutus des plutus des nfs crypto trivial crypto des mance due excess network traffic susceptibility coordinated attacks dependent server failures 

tamper proofing immutability tamper proofing immutability techniques improve integrity data 
tamper proofing provides integrity guarantees 
purpose detect modifications occurred 
generally cryptographic hashing signing effect tamper proofing 
immutability hand provides integrity guarantees improvements availability ensuring written data overwritten 
enforcement property done software hardware due physical nature media 

tamper proofing 
immutability subsumes tamper proofing 
consider tamper proof digital security camera 
camera adds cryptographic signature images 
images court authenticity camera hardware signs captures modifications readily apparent 
suppose images recorded cd 
modify images needs merely save cd destroy original 
tamper proofing go undetected 
time tamper proof security log little deleted 
immutability tamper proofing fill different roles 
illustrates relationship immutable cryptographic systems 
systems cryptography provide integrity cryptographic systems provide confidentiality 
tamper resistant techniques provide software immutability 
hardware media enforced immutability provide metadata protection necessary 

relationship immutable techniques cryptographic systems may provide tamper proofing addition confidentiality 
storage systems inherently include tamper proofing 
general techniques exist cryptographic hashes cryptographic signatures 
hashing system summary data hash function 
copy hash retained verify data remains unchanged 
cryptographic signatures generate additional information certifying signer approves data 
signature serves purpose hash 
signature checked forged 
modified data detected 
axis classify tamper resistant systems data protected systems metadata full file pathname data 
protecting metadata yields somewhat different form security assurance path meets certain characteristics data retrieved correct 
particularly useful systems tamper resistant immutable techniques 
verification overhead reduced data checked particularly large files 
furthermore systems offer strong path address pair correct data changed retrieval 
contrast highly replicated decentralized systems including sufficient information validate complete path may considerably expensive protecting data 
general centralized systems content distribution networks incorporate metadata protection sfs decentralized systems pasis rely fragmentation replication 
oceanstore exception 

immutability 
immutability refers property applied object prohibits subsequent changes object 
file systems immutability refers preventing changes modifications contents file 
different strategies create immutable storage 
classify immutable storage major categories physical worm technology worm embedded worm technology worm software worm technology worm worm physical storage technologies include media nature immutable 
optical optical media implement worm 
optical disks popular 
examples include cd dvd 
optical combine optical drives multiple worm disks 
capacities optical worm devices range hundreds megabytes gigabytes ultra density optical udo disks 
optical disk storage operates principal changes magnetic properties certain media particular temperatures 
advantage optical worm tolerates mechanical damages media far better optical disks 
reading occurs speeds magnetic disks 
currently available optical disks capacities gb 
greatest advantage worm technology widespread adoption different vendors 
similarly optical disks available different vendors 
mass marketing research development worm lowered price compared worm technologies 
major problem optical worm devices write operations extremely slow compared magnetic counterparts 
capacity physical media relatively small 
management large number media disks proves big problem 
embedded worm worm device driver firmware implement immutable storage system 
large storage vendors come proprietary storage solutions incorporating worm 
magnetic tapes disks solutions 
magnetic tape worm uses combination tape storage firmware protection 
commonly tape usually write protected requires specialized tape drives embedded write protection mechanism 
magnetic disk worm uses disk firmware add protection mechanism magnetic disks 
tape libraries somewhat similar nature optical boxes combining multiple worm tapes 
emc product network appliance product examples embedded worm technology hybrid firmware software approach 
worm devices larger storage space available tape magnetic disk 
faster write operations performed optical media 
cost comparatively small 
magnetic media prone problems related physical damage 
worm tapes recognized usable non worm devices 
magnetic tape worms allow sequential read writes random access contents 
intruders physical access magnetic worm tape damage tape destroy contents os allow read disallow write digital object user immutable flag 
allow read allow write changeable digital object 
worm architecture final category immutable storage software worm worm see 
operating system provides protection mechanisms capability schemes modified file systems 
example unix provides mechanism indicating system files directories immutable 
system utilities set immutability flag ren der file impossible modify root access 
malicious user gaining root level access circumvent protection 
linux intrusion detection system lids provides immutability enabling powerful root privileges revoked 
intruder gained root privileges perform activities exploiting machine 
lids prevent root kits linux kernel modules allowing loading kernel sealed lids 
addition lids enforce access control list acls file system objects 
problem lids features implemented linux vfs 
intruder modify delete file raw disk interface circumventing acls enforced lids 
solve lids disable capability cap sys preventing raw access storage devices 
major advantage worm technology simple implement integrate existing operating systems 
hand solutions depend file system code incorporate security 
root privileges bypass file system access physical media 
intruders gains root access system complete control memory bypass software immutability mechanism 
table shows comparison different worm techniques available 
main issues challenges achieving immutable storage capacity data throughput management overhead cost security 
magnetic tape cheapest high capacities 
slower data throughput management overhead 
optical medium capacities costly 
magnetic disk worms fast high capacities 
security problem devices 
os techniques provide best performance capacities prone security problems 
view hybrid approach worm firmware techniques best solution immutable storage 

backup versioning time dimension backup versioning technology improve availability integrity data time dimension 
backup provides snapshot past system state 
modern backup solutions operate constrained space low system overhead require management configuration leave large time spans unprotected data 
versioning provides continuous data view involves higher overheads greater space requirements 
modern backup systems quite mature 
amanda project effort focused improving backup management 
modern backup system tivoli usually number backup clients 
clients individual servers workstations 
software clients sends data central backup server 
server quantity disk accumulate backup data 
sufficient data accumulated written tape 
meta data backups kept disk efficiency 
newer refinement process replace tape disk arrays 
disk disk backup possible falling cost disk drives improves performance especially restores 
tape cheapest media bulk backup especially low power costs 
massive arrays idle disks examines potential idling disks save power 
power usage reduced marginal reductions performance compared active array 
focused managing mobile hosts prioritizing backup organization economic value 
prevalence laptops modern enterprise environments reduces effectiveness see backup management software necessitates different strategies 

effectiveness backup function mobility 
notable versioning file systems include file service rfs elephant file system 
rfs comprehensive versioning systems writes logged specified age 
operates assumption host system untrustworthy 
write age detection window maintained 
administrative interface tunneled host system strong cryptography defeat potentially compromised host 
studies daily write traffic show total versioning reasonable usual disk capacities 
rfs extends concept include logging isolate damage caused malicious modification 
identification malicious process rfs uses dependency tree operations table 
comparison immutable techniques cd dvd optical jukebox tape disk unix fs tools os techniques cost mb high high low medium medium medium capacity low medium high high high high speed low low low high high high security high high medium low medium low low management overhead high medium high medium low low low automatically identify recovery state 
elephant file system keeps landmark versions representative file system state increasing intervals time 
individual files may assigned different versioning levels versioning complete versioning windowed versioning landmark versioning 
accidental modifications deletions landmark versioning insufficient protect malicious attacker 

redundancy space dimension redundancy improves availability integrity space dimension data replicated different space recovered instantly 
best example storage system redundancy raid 
mirroring raid parity raid error correcting codes raid raid recover hardware failures 
erasure codes important storage system protection technique redundancy 
erasure codes allow flexible failure resistance space usage ordinary parity mirroring 
hand erasure codes computationally expensive imposing large penalties write performance 
double failures uncommon due common environmental conditions malicious attack 
survive double failures redundancy technique row diagonal parity may 
data loss double failures generally comes failure individual blocks disks rebuild failed disk 
failed blocks ordinarily exposed stressful conditions array rebuild 
row diagonal parity keeps units parity information 
additional parity information aligned disk failure recovered 
write performance somewhat worse raid read performance equivalent 
data course important data 
graid recognizes 
graid uses extra free space generally available disk array store additional copies critical data file system metadata 
failure graid allows majority processes complete data require may missing 
additionally extra copies commonly read data improve performance 
automatic balancing replication levels key idea hp autoraid system 
autoraid puts newly written data raid style redundancy pattern 
space filled older data moved efficient raid style redundancy 
allows better storage efficiency sacrificing performance 
additionally system self tuning requiring administrative overhead 

meta data comparison existing literature provides plenty statistics properties various techniques 
scattered papers describing technology 
additionally little direct comparison general techniques 
find necessary provide meta data comparison techniques 

performance primary concern performance 
regardless security system meet necessary performance levels little 
generally performance measured terms cpu overhead latency network bandwidth 
cryptography primary cost cpu overhead 
depending cryptography implemented magnitude costs vary greatly 
important factor choice cipher 
des result throughput low mb sec blowfish approach mb sec 
performance comparisons different ciphers 
new aes cipher rijndael high performing properly implemented 
hand public key cryptographic operations critical digital signature algorithms slowest 
modern processors perform operations millisecond times 
additionally private key ciphers suited implementation hardware inexpensive fpgas asics supporting multi megabyte second performance tamper proofing imposes similar overheads cryptography lesser magnitude hashing signature algorithms tend efficient 
individual clients tend want verify data load table 
comparison matrix confidentiality integrity availability cost encryption high medium cpu secret sharing high high high cpu latency tamper proofing high cpu immutability high high latency space backup medium medium bandwidth space versioning medium high space raid low medium space easily spread machines leaving single bottleneck 
immutability backup redundancy impose relatively small performance overheads 
optical tape media limit storage bandwidth immutable storage systems overcome disk systems 
backup particularly performance sensitive bottlenecks may exist tape network bandwidth 
redundancy generally provides performance improvements additional data provide benefits read performance 
penalties generally paid write performance penalties understood 

space cryptographic tamper proof systems incur similar sorts overhead form additional metadata 
cryptographic systems key management data 
tamper proofing requires storage digital signatures hashes imposes additional storage cost file 
integrity manages file basis overhead negligible dealing small files 
integrity information done finer grained level space overhead may burdensome generally configurable trade 
immutability comprehensive versioning impose similar space overheads space requirements continually grow 
depending application rate growth vary lot systems reasonable 
workstation disks typically experience mb day write traffic easily comprehensively versioned immutable system 
redundancy achieves gains primarily additional space requirements 
additional space requirements generally configurable 
standard raid systems require disks disks worth usable space 
row diagonal parity raid schemes disks 
erasure codes allow arbitrarily flexible choice space overhead added complexity 
grad hp autoraid impose variable amounts overhead adjust ing disk usage patterns provide better protection space available 
disk space available approach raid efficiency 
backup imposes space overheads form multiple versions data 
complicated rotation schemes towers hanoi minimize overhead expense higher management complexity 
additionally refinements backup differential incremental backups reduce overhead required 
proper backup management software reduce management overhead complicated backup techniques 

resilience attack difficult measure strength security techniques 
frameworks attempting exist qualitative attempting assign quantitative meaning arbitrary 
attempt qualitative comparison security properties different technologies 
table provides summary comparison 
base model comparisons 
confidentiality increased cryptographic techniques encryption secret sharing 
techniques ensure data protection 
relies assumption keys necessary decrypt data kept confidential 
management keys centralized easier problem securing system enterprise 
integrity system protected encryption techniques 
raid provides protection hardware failures easily thwarted purposeful attack 
backup versioning provide protection attacker change data guise authorized user backup versioning blindly backup version corrupted data 
allow recovery uncorrupted data non trivial task detecting corruption occurred having additional copies relevant time period 
encryption tamper proofing corruption difficult detectable little prevent deletion 
tamper proofing little prevent corruption alert users presence corruption essence allowing deletion attacks 
secret sharing especially immutability provide strong guarantees integrity 
secret sharing requires multiple failures authorization occur 
immutability prevents modifications occurring completely protects integrity data 
availability integrity influences multiple techniques 
encryption reduce availability loss encryption keys cause associated data lost 
backup raid improve availability moderately 
proper backup system allow data recovered period unavailability restore progress required backup fall backup window recovery possible 
raid protects hardware failures quite software failures result raid system storing incorrect data 
incorrect data protected hardware failures incorrect 
secret sharing immutability versioning increase availability 
secret sharing requires multiple points failure data unavailable 
protect software hardware attacks 
theoretically immutable system lose data placed 
versioning act complete backup system 
versioning generally line recovery period short 
versioning quite space efficient large window changes kept 
attacker may changes system perform denial service versioning system addresses attacks rate limiting changes malicious behavior detected 
qualities allow versioning greatly increase availability 
important realize techniques introduce additional complexity storage system 
complexity provides vulnerabilities opportunities administrators configuration mistakes opportunities attackers find additional flaws 
successfully dealing extra complexity necessary garner additional protection benefits 

cost techniques adding functionality storage additional complexity resultant system 
complexity imposes overhead terms additional equipment human resources power example store pb tape library year may consume worth power 
conditions disk array may consume worth power 
specific additional resources imposed vary greatly technique technique de pendent specific implementation details particular environment 
may additional hardware software required meet performance space requirements dominates cost highest overhead increased storage management costs 
organizations spend significantly money managing storage infrastructures acquiring implementing technology 
root causes organizational complexities evolved storage demands increase technology grows powerful 
result storage management responsibilities typically dispersed enterprise creating cost inefficiencies 
solution consolidating storage management storage area networks network attached storage direct attached primary storage secondary storage backup umbrella storage administrator administration team 
storage administrators manage performance maximize throughput minimize response time manage storage infrastructure resilient failure manage scalability grows downtime redesign 
strategies improve storage security highest management costs associated backup especially machines mobile difficult track 
case storage centrally located mistake backup procedure imposes immediate costs form lost data 
somewhat lesser management costs exist initial deployment techniques amortized entire lifetime deployment 
set techniques generally continue function additional management costs time failure occurs costs imposed worth initial investment 

case study storage protection design ncsa compute power increased ncsa corresponding mass storage system 
storage protection reliability failures backup redundancy solutions primary focus new threat emerged internet attacks high performance computing hpc centers spring 
ncsa reported intrusions supercomputing clusters intrusions result loss data 
worse case scenario scientific community high performance computing datasets risk 
scientific datasets fall categories kind developed decades research independent datasets fit uniquely loss dataset widespread effects benchmarks dataset cor scientific community subsequent research results suspect 

storage environment ncsa supports large scale scientific computing 
result storage environment deal large data sets high performance requirements 
infeasible deploy storage system meeting performance capacity requirements 
storage environment partitioned environments high performance storage intended support short medium term persistence requirements scientific computing jobs mass storage system intended supply large quantities long term storage 
shows basic layout portion ncsa storage environment 
storage nodes nodes compute nodes nodes disk tb hsm disk cache tb tape library pb 
logical diagram storage environment supercomputer ncsa performance storage system 
describe environment supercomputer take currently largest cluster machine ncsa example system 
ia linux cluster dual processor compute nodes 
supporting compute nodes storage servers running lustre cluster file system 
total provide tb disk space scratch space 
individually storage server capable providing mb sec bandwidth disks total available bandwidth gb sec 
typical workloads system massive reads writes 
scientific computing job starts node associated job attempt read initial dataset simultaneously 
job runs need write partial result 
time node associated job simultaneously attempt write state 
typically jobs continue io operations complete providing maximum bandwidth ultimate concern 
cluster system built commodity components 
quality reliability individual component satisfactory large number components ensures failures occur 
level redundancy built system system intended scratch fail failsafe conditions aren disastrous associated downtime undesirable 
mass storage system unified system machines ncsa share 
provides archival storage ncsa high performance computing users providing storage datasets active 
large data requirements necessary hierarchical storage manager 
bulk storage provided tape lto tb disk acting cache 
permanent storage file duplicated system failure tape cause loss data 
tapes lost system lost data 
access mass storage system ftp interface 
transfers file larger latencies averaging seconds peaking minutes allowed 
high performance users encouraged prefetch files avoid latencies 
system intended required high performance general bottleneck site performance 
somewhat unusual storage system mix traffic 
read write ratio writes reads 
inverse scenario implies data written tape read 
additionally lack quotas encourages users keep 
result storage growing tb week accelerating 

confidentiality cryptography direct means improving confidentiality system 
authentication metadata control effective encryption data provide protection unauthorized reads 
confidentiality data ncsa generally critical corporate military grid computing environment confidentiality guarantees may necessary 
provide disk encryption high performance system require providing extra processing power perform cryptographic operations 
single ghz aes software rate mb 
dedicated hardware easily hit mb greater inexpensive dollar fpga parts 
write bandwidth individual storage nodes mb feasible encrypt data disk 
support additional metadata added lustre reasonable 
wire encryption impose additional load compute nodes 
typically io causes compute nodes stall may possible support additional computational load reducing performance user jobs 
ideally support cryptography implemented network interface minimize system bus 
uses gigabit ethernet access storage nodes purchasing network interfaces cryptographic acceleration designing cards hardware feasible 
feasible proprietary interconnect myrinet communicate disk 
case encryption probably reduce performance somewhat 
way allowing encrypted file system option users choose encrypt files require protection prefer performance reasonable choice 
providing encryption mass storage system relatively cheap reasonable 
additional hardware required provide cryptographic operations needed high performance systems 
additionally centralized nature storage system simplify management cryptographic metadata 

integrity integrity provided tamper proofing immutability redundancy 
tamper proofing imposes similar overheads cryptography similar feasibility implementation possibilities 
high performance mass storage domains feasible 
mass storage especially tamper proofing may desirable 
purposeful corruption data sets undetected corrupt resulting computations spread users 
backup protection useless corruption occurred determined may backup window 
immutability prevent 
obvious reasons infeasible entire high performance storage immutable critical system files files identified users protected 
mass storage system essentially paying cost 
quota imposed users incentive users delete evidence support 
disallow ing deletes formalism current behavior system 
additionally growth new data system exponential old data accounts small portion storage 
low performance requirements large economies scale available cost storage relatively low 
include capacity tape library cost storage system dollar gigabyte 

availability primarily increase availability system improving availability hardware 
cluster systems ncsa implemented high availability hardware heavily redundant systems ability lustre support failover leveraged eliminate single points failure 
immediate moment moment usability system high performance storage ephemeral volatile bother techniques 
mass storage high availability lost file 
tape library supports sufficient redundancy eliminate point failure 
disk cache front concern uses raid fail 
largest availability concerns relate loss corruption permanent loss availability 
better integrity guarantees side effect eliminate potential 
secondary concern occasional latency issues 
average latency acceptable order seconds peak latencies exceed hour 
uncertain time specific causes peak latencies long term move away tape spinning disk may feasible 

remarks storage environment ncsa divided sub environments high performance systems mass storage system 
large heavily unique characteristics 
high performance systems volatile stand performance degradation 
mass storage system hand characterized simply large 
differences treated differently 
high performance systems protected cryptography additional hardware 
letting users disable cryptography particular jobs desirable users ncsa concerned confidentiality solely performance 
tamper proofing provide benefits hpc technically feasible 
immutability possible secret sharing techniques ill suited write intensive applications 
volatility immutability impossible backup versioning difficult 
high performance systems incorporate element redundancy providing sufficient availability current purposes 
recommendation leave high performance systems meet current needs 
exception grid utility computing increased confidentiality requirements shared resources require additional protection necessitate changes 
mass storage system protected cryptography encrypt disk possible special hardware encrypt wire require hardware acceleration clients 
tamper proofing feasible desirable subsumed immutability 
currently system paying costs immutability nature formalizing policy immutability provide stronger guarantees integrity free 
availability mass storage system improved terms quality performance occasionally latency system high 
improve availability data mass storage system propose examining large disk arrays alternative tape 

summarized current state art primary storage protection solutions cryptography immutable tamper proof storage backup versioning redundancy 
depending environment consideration solutions may appropriate 
example ncsa hpc storage cryptographic techniques applicable required mass storage immutability provides benefits 
feel interesting areas storage protection focus areas 
usability 
techniques add complexity complex system management errors administrators potential benefits 
additionally additional burden pressed users attempt circumvent system 

unification clusters 
currently cluster file systems cryptographic versioning file systems 
necessary implement techniques secure storage parallel file system lustre 

leveraging unique properties 
techniques designed general purpose storage mind 
properties high performance massive storage systems differ general systems 
advantage differences may allow solutions better specific tasks 
hope started discussion trade offs making storage protection decisions especially relates large high performance installations 
done 
butler 
storage issues ncsa get file systems going wide fast large scale linux cluster systems 
nasa ieee goddard conference mass storage systems technologies 
butler 
production storage environments file systems presentation 
supercomputing conference sc 

design implementation transparent cryptographic file system unix 
proceedings freenix track usenix annual technical conference pages 
usenix association 
chen lee gibson katz patterson 
raid high performance reliable secondary storage 
acm computing surveys 
chervenak 
protecting file systems survey backup techniques 
grunwald 
massive arrays idle disks storage archives 
proceedings acm ieee conference supercomputing pages 
ieee computer society press 
corbett english goel kleiman leong sankar 
row diagonal parity double disk failure correction 
proceedings usenix fast conference file storage technologies pages san francisco ca march 
network appliance usenix association 
dai 
speed comparison popular crypto algorithms 
www eskimo com benchmarks html jan 
emc 
emc products platforms 
www emc com products systems jsp platform oct 
fu kaashoek mazi res 
fast secure distributed read file system 
proceedings th usenix symposium operating systems design implementation osdi pages san diego california october 

goh shacham boneh 
sirius securing remote untrusted storage 
proceedings tenth network distributed system security ndss symposium pages 
internet society isoc february 
goodson wylie ganger reiter 
efficient byzantine tolerant erasure coded storage 
hasan stanton 
techniques challenges immutable storage applications multimedia 
proceedings spie international symposium jan 

survey tamper resistant storage techniques multimedia systems 
proceedings spie international symposium jan 
riedel swaminathan wang fu 
plutus scalable secure file sharing untrusted storage 
proceedings second usenix conference file technologies mar 
lids project 
lids project secure linux system 
www lids org oct 

lin 
su 
huang 
wu 
high throughput low cost aes cipher chip 
proceedings rd ieee asia pacific conference asics ap asic aug 
menezes van oorschot vanstone 
handbook applied cryptography 
crc press 
network appliance www com products filer html jan 

moved data 
backup tracking system dynamic workstation environments 
proceedings th large installation systems administration conference lisa xviii nov 

virtual disk optical worm killer 
global distribution white june 
riedel swaminathan 
framework evaluating storage system security 
proceedings conference file storage technologies pages 
usenix association 
feeley hutchinson veitch 
deciding forget elephant file system 
symposium operating systems principles pages 
schwan 
lustre building file system node clusters 
proceedings linux symposium july 
silva gu 
amanda network backup manager 
proceedings seventh systems administration conference lisa vii usenix association berkeley ca page 
arpaci dusseau arpaci dusseau 
improving storage system availability graid 
proceedings usenix fast conference file storage technologies pages san francisco ca march 
university wisconsin madison usenix association 

simple portable expandable cryptographic application program interface 
master thesis university urbana champaign 
strunk goodson soules ganger 
self securing storage protecting data compromised systems 
symposium operating systems design implementation pages october 
wilkes golding staelin sullivan 
hp autoraid hierarchical storage system 
jin cortes buyya editors high performance mass storage parallel technologies applications pages 
ieee computer society press wiley new york ny 
williams 
worm worm worm sausage 
imaging world july 
williams 
tao backup wall homepage 
www com cgi oct 
wright dave zadok 
cryptographic file systems performance don know hurt 
proceedings ieee security storage workshop pages washington dc oct 
wright zadok 
secure convenient cryptographic file system 
proceedings annual usenix technical conference pages san antonio tx june 
wylie strunk ganger khosla 
survivable information storage systems 
computer 
zhu chiueh 
design implementation evaluation file service 
proceedings dependable systems networks dsn 
