exploiting bittorrent fun profit robert nelson eddie kohler lixia zhang university california los angeles kohler lixia cs ucla edu assesses bittorrent robustness selfish peers try download fair share abusing existing protocol mechanisms 
design implement selfish peer exploits evaluate effectiveness public private torrents 
practice bittorrent appears quite robust kind exploit selfish peers obtain bandwidth honest peers download rates suffer slightly consequence observe considerable degradation system quality service 
identify private torrent scenarios selfish peer benefit significantly expense honest peers discuss bittorrent protocol mechanisms lead robustness rendering scenarios infeasible 
popular bittorrent protocol large file distribution strives provide form fairness clients contribute data system achieve high download throughput 
bittorrent design emphasizes fair interactions increase performance scalability protocol strictly enforce fairness 
study effects selfish bittorrent clients implementations attempt download fair share abusing protocol mechanisms 
identify exploits potentially deliver increased benefits selfish peer cause damage honest peers community 
exploits exhaust wide range possible selfish behavior derived careful consideration core bittorrent mechanisms believe representatives possible exploits space 
experiments public torrents private torrents running planetlab infrastructure show practice benefit peer employing exploits limited damage honest peers 
discuss bittorrent mechanisms lead robustness derive guiding principles protocol design results 
rest organized follows 
section provides brief description bittorrent related studies concerned robustness performance 
section describes design implementation exploits section evaluates effectiveness 
section discuss results 
background related bittorrent peer peer file distribution protocol main goal alleviate load server hosting popular files 
bittorrent file divided multiple pieces piece multiple sub pieces 
different pieces file downloaded different peers 
metadata file associated download 
file contains information necessary download process including number pieces hashes pieces hashes peers verify piece received correctly 
metadata file typically created content provider launch client offering entire file download 
order join download process client retrieves metadata file band usually known website email 
contacts tracker centralized component keeps track peers participating download 
tracker ip address port metadata file 
nowadays torrents hosted public trackers provide services free 
contacted tracker responds list randomly selected peers include seeds entire file offering leechers process downloading 
newly arrived peer starts contacting list requesting different pieces file 
clients nowadays implement rarest policy piece requests look pieces exist smallest number peers 
strategy effectively accomplishes widest dissemination rarest pieces system probability missing piece minimized 
peer able determine pieces peer bit field message exchanged connecting 
piece exchange strategy peers trading model peers prefer send data peers reciprocate 
particular preference peers uploading data highest rate 
period typically seconds peer recalculates receiving data rate peers list selects fastest ones typically 
uploads peers duration period 
say peer unchokes fastest rest 
peer successfully downloads new piece sends advertisement list 
furthermore constantly keeps looking better connections randomly unchoking additional peer third period means optimistic unchoke 
seeds need download pieces choose unchoke fastest downloaders 
note algorithm considered main driving factor bittorrent fairness model free rider eventually get low download rates lack cooperation result peers 
fair amount algorithms performance protocol 
cohen bittorrent creator described bittorrent main mechanisms design rationales 
qiu derived model expressions average number seeds leechers average download time 
bharambe simulations evaluate bittorrent basic operation find protocol scales rarest policy outperforms alternative piece picking policies 
studies measured bittorrent traffic detail 
examines characteristics actual tracker log redhat linux iso image including percentage clients completing download load seeds geographical spread clients 
detailed measurements actual torrent traffic observe efficiently handle large flash crowds global tracker potentially bottleneck :10.1.1.59.3191
lastly guo demonstrates client performance fluctuates widely small torrents high bandwidth peers tend contribute system 
inter torrent collaboration proposed alternative providing extra incentives seeds stay longer torrent 
aforementioned studies assume peers conform proposed behavior 
briefly mention exploit similar third exploit evaluate effect selfish client startup download throughput 
best knowledge study examined behavior bittorrent system presence peers abuse protocol mechanisms gain unfair benefit 
exploit design implementation developed exploits selfish clients download fair share constraints protocol rules 
exploits focus peer interaction protocol peer tracker protocol 
particular design selectively contacting peers lying downloaded pieces 
order verify feasibility performance implications implemented exploits modifying existing bittorrent client 
chose latest version simplicity ease extension ensured changes interfere regular protocol operation 
downloading seeds new peer joins torrent receives list randomly selected peers tracker 
option asking tracker refreshed list time 
selfish client connecting repeatedly ask new lists 
trackers perform form load balancing reasonable assume short period time client received information seeds torrent easily identified advertise having pieces file 
selfish client completely ignore leechers attempt connect download pieces seeds 
addition benefit optimistic unchoking accepting pieces leechers refuse upload return 
seeds typically high bandwidth clients expect selfish client able sustain high download rates experimentally confirmed section 
selfish client sooner download entire file contributing data system 
behavior violates bittorrent fairness model free riding leechers achieve low rates 
potential directly harming honest clients 
fast selfish peer purposefully targets downloads data seeds occupies seed unchoking slots 
low bandwidth peers need pieces available seeds may starve selfish peer disconnects seed selects optimistic unchoke 
damage significant sybil attack employed selfish client multiple identities maintains multiple open connections seed 
downloading fastest peers exploit attempts maximize download rate peering fastest peers torrent reciprocate high rates performing optimistic unchokes 
finding fastest peers exploit bittorrent tries anyway 
bittorrent periodically selects peers uniformly random optimistic unchoking 
client eventually chance download client rates mismatched 
peers especially slow peers benefit result optimistic unchoking slower peers starve communicate faster peers 
optimistic unchokes selfish peer stills needs mechanism select fast peers interact 
protocol dictates peer send advertisement finished downloading new piece 
observing frequency advertisements sent different peers selfish client roughly infer download rate 
estimated rate constitutes lower limit download capacity upload capacity usually inferred experiments validate estimation method private torrents find accurate reliably guide discovery fastest peers 
selfish client attempts interact peers 
default bittorrent client eventually arrive selection selfish client attempts avoid wasting time resources convergence 
regarding seeds way estimate capacity send advertisements exploit opts request pieces seeds possible 
expect benefit employing exploit sharing large files convergence period negligible compared entire download time 
worth noting selfish client contributing data system 
deviation rules exploit different method estimating fastest peers lack optimistic unchokes selfish peer actively discriminating slow peers refusing interact circumstances 
behavior potential especially harmful startup phase new peers obtain pieces optimistic unchokes 
addition researchers observed seeds disconnect system fast peers tend exchange pieces leaving slow peers completed file 
exploit aggravates scenario shutting slow peers phase torrent 
advertising false pieces leechers prefer upload pieces leechers reciprocate upload pieces high rates return 
order attract download bandwidth selfish peer offer rare pieces pieces need actual pieces file 
selfish peer advertise pieces asked sub piece just send garbage data 
honest receiving detect garbage receiving sub pieces piece checking hash metadata file 
entire piece necessarily downloaded single peer protocol mandate keeping state origin normally way detecting lying 
advertising pieces time proposed client employing exploit advertises new fake pieces constant rate 
simply advertise pieces implementations allow seeds request pieces advertise fake pieces slow rate honest peers see selfish client seed 
note pieces advertised newly arriving leechers interact selfish peer 
bit field sent connection contains pieces selfish client 
point time honest peers see selfish client seed 
exploit punishes leechers download garbage disruption primary objective selfish peer piece share rest 
making unchoking decisions consult list pieces advertised peers 
unchoking decisions solely rates set peers consider unchoking pieces peers 
general idea exploit protocol assigns different value different pieces data 
careful manipulation selfish client indirectly influence client decision making process benefit 
evaluation section describe experimental setup measurements results 
evaluate exploits turn 
experimental setup exploit conducted distinct sets experiments private torrents planet lab experimental platform public torrents wide area internet 
specifics set provided respective subsections 
planetlab convenient tools collecting measurements geographically dispersed clients greatly facilitated experiments 
private torrent experiments serve means assessing exploits impact terms selfish client benefit effect rest community 
controlling peers torrent record behavior lifetime change protocol parameters observe resulting effect peers 
turn helps identify conditions improve exploit effectiveness distinguish protocol mechanisms responsible observed behavior 
results experiments runs different times day leechers download single mb file presence single seed 
choice small peer population partly motivated measurement studies find real torrents tend small 
planetlab available bandwidth unusually high typical torrents enforce download upload limits peers suspending requests sub piece transmissions limit reached resuming rates fall limits 
leechers complete download disconnect system right away employing exploit measure download upload rates period selfish peer connected 
leechers join torrent poisson distribution 
ran experiments distributions results significantly affected parameter 
order copy launch bittorrent client different planetlab nodes pssh package modified allow executing remote processes different intervals 
public torrent experiments run clients honest selfish employing exploits 
join torrent time average download rate clients achieve entire download lifetime measured 
ran experiments torrents small large peer populations different times day 
experiments reveal behavior exploits real settings diverse protocol implementations participate piece exchange torrents small 
downloading seeds evaluate exploit limit bandwidth leechers mbps download mbps upload 
limits chosen heuristically order showcase exploit impact selfish honest peers 
leechers operate limits order examine effect exploit employed peers high low bandwidth 
particular evaluate exploit fast peer located subnet seed fast slow peer located overseas seed slow 
impose limit seed 
shows achieved download rates different scenarios everybody honest slow unlimited peer employs exploit fast unlimited peer employs exploit average download rate mbps download rates presence exploit fast slow peer peer peer peer peer peer planetlab node peers honest slow peer selfish fast peer selfish peers selfish effect downloading seed employs exploit 
scenario serves base case seeks determine effect widespread exploit 
top bottom box represent th th percentile download rates experiments 
horizontal line inside box median vertical lines extending boxes represent maximum minimum values respectively 
clearly high variability noted especially bandwidth unlimited 
maximum benefit achieved selfish peer maintain fast connection seed 
particular selfish fast peer median download rate improves peer expending upload bandwidth 
able capture seed early completes download 
hand exploit effective selfish peer slow 
effect honest peers cases limited 
perform slightly worse drops median download rate ranging 
experiments lower bandwidth limits validate claim 
particular limiting leechers download bandwidth kbps average speed consistent earlier findings selfish peer able sustain high download rates seed resulting slightly worse download rates 
bittorrent proves quite robust kind exploit 
provide explanation section section 
upload rates increase slightly presence exploit peer contributing data higher contention unchoking slots 
interestingly appears everybody cheating everybody benefit 
counterintuitive result artifact imposed bandwidth limitations 
downloads seed limit imposed leechers file sharing degenerates fast seed effectively serving file multiple clients take turns unchoking slots 
addition torrent population low seed easily handle incoming requests 
efficient slow leechers exchanging pieces download rates limited leechers increase 
average download rate mbps download rates presence exploit modified seed fast slow peer peer peer peer peer peer planetlab node peers honest fast peer selfish effect downloading seed unchoking slot running experiment unlimited leechers observed fast peers slightly better slow ones worse 
fast selfish leechers capture seed achieve higher rates normal circumstances slow selfish leechers starve seeds available serve 
improved exploit download leechers download seed prevent starvation slow selfish leechers 
order examine effect multiple unchoking slots success exploit ran set experiments limited number unchoking slots seed default 
seed sends data time 
removed optimistic unchoking seed 
new download rates seen honest fast selfish scenarios 
clearly exploit effective case 
selfish peer median download rate increases honest leechers suffer significantly 
selfish peer effectively seed completes download 
consequently claim file sharing peer peer protocols aspire robust exploits incorporate mechanism parallel downloading 
explore idea section 
experiments public torrents validate limited success exploit real settings 
measurements small torrents peers large ones peers show selfish gets consistently higher download rates median improvements 
variability torrents high depending torrent time day 
exploit particularly torrents high number seeds provide wider choice peers selfish client 
peers greater incentive selfish popular torrents 
noteworthy observation exploit slight increase download rate fact sustain high rates necessarily contributing data system 
violates bittorrent model ensuring low rates free riding leechers 
average download rate mbps download rates presence second exploit limited seed fast peer peer peer peer peer peer peer planetlab node peers honest fast peer selfish effect downloading fastest peers downloading fastest peers exploit evaluation limit upload bandwidth seed mbps download upload bandwidth leechers mbps kbps respectively 
seed limit helps assess impact torrents seeds potential effects exploit apparent 
shows download rates different scenarios everybody honest fast unlimited employs exploit interacting fastest leechers peer list 
observe selfish peer achieves better download rates measured median 
avoids wasting bandwidth slow peers downloads pieces unlimited peers seed 
tradeoff slightly higher upload rate selfish maintain fast connections unlimited peers 
interestingly experiments public torrents confirm success 
results torrents peers selfish gets consistently lower download rates 
draw definitive believe selfish peers rate estimation algorithm works planetlab relatively stable environment outperformed dynamic global internet bittorrent short term rate measurements peers 
adaptive rate estimation algorithm exploit effective 
advertising false pieces exploit evaluation selfish peer advertises total number pieces seconds 
limit upload bandwidth seed download upload bandwidth leechers mbps 
experiments show higher seed limits reduce effectiveness exploit 
furthermore limit selfish client maximize probability honest leechers willing exchange data 
shows download rates different scenarios everybody honest unlimited employs exploit 
selfish client achieves better download rates measured median 
selfish client achieves improved download rate remaining average download rate mbps download rates presence third exploit limited seed fast peer peer peer peer peer peer peer planetlab node peers honest fast selfish peer effect advertising false pieces exchanging data honest leechers 
addition honest peers slightly improve download rates 
selfish client gets piece exchange piece honestly slow peers faster rate slow peers 
describing design exploit mentioned protocol mandate keeping state origin sub pieces 
increasingly client implementations popular azureus download sub pieces peer record information peers send corrupt data internal data structure 
easily blacklist clients consistently send garbage 
exploit provides little benefit fact harmful interacting stateful client implementations 
run azureus client garbage pieces selfish client entire download duration 
discussion section discusses handful patterns believe contribute bittorrent robustness 
ability maintain parallel interactions diverse peers especially freedom choice peers greatly facilitates robustness 
example exploit impact reduced seeds multiple unchoking slots seeds freely invoke optimistic unchoking 
exploits solutions apart principle instance seeds employing called super seeding policy masquerading leechers gradually advertising available pieces easily thwart exploit maintaining topology enables protocol remain resilient presence misbehaving peers 
evident behavior public torrents presence third exploit honest clients just ignore selfish peer continue download interacting 
detecting isolating selfish clients requires memory past interactions bittorrent clients remember origins piece downloads able detect punish false piece advertisements 
course trade offs protocol efficiency robustness considered 
keeping history past interactions severely impact perfor mance history stored checked interaction 
luckily subset history necessary determine trustworthiness peer 
principle problem partitioning strictly enforced 
multi party algorithm client able negatively influence client decision process declaring false information 
right bittorrent allow peer indirectly manipulate peer behavior advertising false pieces 
data peer possesses making unchoking decisions decoupling data needs client service provided client third exploit feasible 
harm performance common case honest peers advantageous choose piece appropriate leechers interact 
selfish peers exploits take advantage information provided bittorrent protocol 
possible enhance robustness exporting minimal information example allowing nodes hide properties seeds 
find failure fastest peer exploit public torrents network dynamic properties existing information difficult exploit 
lastly bittorrent optimistic unchoking policy aids robustness preventing preserving fully connected graph due randomness inherent optimistic unchoking slowest nonzero chance interacting fast seed 
value optimistic unchoking evident failure fastest peer exploit public torrents significant success exploit removing optimistic unchoking seed 
optimized protocol relied rate estimations faster peers honest probably robust 
bittorrent exploits attempt abuse existing protocol mechanisms order achieve higher download rates 
cases exploits delivered significant benefits bittorrent proved quite robust 
examined protocol mechanisms provide robustness proposed design guidelines peer peer file sharing protocols 
interesting investigate combinations exploits 
example second third exploits better convince fastest peers interact selfish 
addition clear exploits effect multi torrent system exchange pieces belonging different torrents possible 
dynamics cross torrent communication new opportunities selfish behavior 
acknowledgments material part supported national science foundation 
wish xu spirit provided initial motivation project 
anonymous reviewers jeff lei guo shared insights bittorrent systems 
grateful members research lab constructive criticism 
lastly author indebted pino provided constant support encouragement entire duration project 
azureus homepage 
azureus sourceforge 
net 
homepage 
sourceforge net projects 
jeff 
personal communication 
official bittorrent homepage 
www 
bittorrent com 
planetlab homepage 
www planet lab org 
pssh homepage 
www org pssh 
bharambe padmanabhan 
analyzing improving bittorrent performance 
technical report msr tr microsoft research redmond wa february 
cohen 
incentives build robustness bittorrent 
workshop economics peer peer systems pages berkeley ca may 
douceur 
sybil attack 
international workshop peer peer systems iptps pages boston ma march 
lei guo chen zhen xiao tan ding zhang 
measurements analysis modeling bittorrent systems 
internet measurement conference imc berkeley ca october 
keller biersack felber 
dissecting bittorrent months torrent lifetime 
passive active measurements antibes juan les pins france april 
sips 
measurement study bittorrent peer peer file sharing system 
technical report pds delft university technology netherlands april 
sips 
bittorrent file sharing system measurements analysis 
fourth international workshop peer peer systems iptps february 
qiu srikant 
modeling performance analysis bittorrent peer peer networks 
sigcomm september 
parkes 
specification faithfulness networks rational nodes 
rd acm symposium principles distributed computing podc st john canada july 
parkes massoulie 
faithfulness internet algorithms 
acm sigcomm workshop practice theory incentives game theory networked systems portland september 
