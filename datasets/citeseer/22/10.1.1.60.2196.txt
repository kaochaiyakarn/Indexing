transport layer identification traffic thomas karagiannis uc riverside andre caida sdsc emergence peer peer networking late applications multiplied evolved established leading growth app internet traffic workload 
contrast generation networks defined port numbers current applications ability disguise existence arbitrary ports 
result reliable estimates traffic require examination packet payload methodological legal privacy technical logistic fiscal perspectives 
access user payload rendered impossible factors inhibiting trustworthy estimation traffic growth dynamics 
develop systematic methodology identify flows transport layer connection patterns networks relying packet payload 
believe approach method characterizing traffic knowledge network dynamics user payload 
evaluate methodology develop payload technique traffic identification reverse engineering analyzing popular protocols demonstrate efficacy discovery protocols traces previously unknown 
results indicate traffic continues grow contrary reports popular media 
categories subject descriptors computer communication networks local wide area networks general terms algorithms measurement keywords peer peer measurements traffic classification permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
imc october italy 
copyright acm 
faloutsos uc riverside kc claffy caida sdsc 
years peer peer file sharing grown represent formidable component internet traffic 
volume sufficiently dominant links increased local peering internet service providers observable unquantified effect global internet topology routing system mention competitive market dynamics 
despite dramatic growth reliable profiling traffic remains elusive 
longer enjoy benefit traffic relatively easily classified due defined port numbers 
current networks tend intentionally disguise generated traffic circumvent filtering firewalls legal issues articulated recording industry association america 
networks operate top nonstandard proprietary protocols current clients easily operate port number port 
circumstances frustrating robust identification traffic possible examining user payload 
packet payload capture analysis poses set insurmountable methodological legal privacy technical logistic financial obstacles abound overcoming leaves task reverse engineering growing number poorly documented protocols 
obfuscating workload characterization attempts increasing tendency protocols support payload encryption 
frequency protocols introduced upgraded renders packet payload analysis impractical inefficient 
develop systematic methodology identify flows transport layer flow connection patterns traffic relying packet payload 
significance algorithm lies ability identify protocols depending underlying format offers distinct advantage payload analysis identify previously unknown protocols 
fact analysis detected traffic distinct protocols previously unknown 
validate methodology developed payload technique traffic identification reverse engineering analyzing popular protocols 
specifically highlights include develop systematic methodology traffic profiling identifying flow patterns character table bulk sizes oc datasets set bb date day start dur dir src ip dst ip flows packets bytes aver util 
ut wed mbps wed mbps thu mbps thu mbps wed mbps wed mbps wed mbps behavior examination user payload 
methodology effectively identifies flows bytes compared payload analysis limiting false positives 
methodology capable identifying flows missed payload analysis 
methodology identify approximately additional flows payload analysis 
data collected oc gbps link tier internet service provider isp provide realistic estimates trends traffic widearea internet years 
find contrast claims sharp decline traffic constantly growing 
methodology expanded support profiling various types traffic 
mapping applications port numbers longer substantially valid generalized version algorithm support traffic characterization tasks workload 
minimize false positives traffic identification assess filter connection features numerous protocols applications mail dns 
rest structured follows section describes backbone traces span may april 
section discusses previous traffic estimation analysis 
sections describe detail payload nonpayload methodologies traffic identification 
section presents evaluation algorithm comparing volume identified methods 
section challenge media claims pervasive undertaken causing decline file sharing activity 
section concludes 

data description part analyzed traces included caida backbone data kit consisting packet traces captured oc link tier isp connecting pops san jose california seattle washington 
table lists general workload dimensions datasets counts distinct source destination ip addresses numbers flows packets bytes observed 
processed traces caida coral suite 
analyze traces taken may january february april 
captured traces dag monitors packet capture software university waikato supports observation directions link 
older traces monitors captured bytes packet includes ip tcp udp headers initial bytes payload packets 
approximately packets traces encapsulated extra byte mpls label leaves space payload bytes 
fortunately able capture february april traces bytes tcp udp payload allows evaluate nonpayload methodology 
protect privacy monitoring system anonymized ip addresses traces prefix preserving anonymization algorithm crypto pan 

previous traffic research far emphasized detailed characterization small subset protocols networks motivated dominance protocol particular provider infrastructure specific time period 
typical data sources range academic network connections tier isps 
measurement studies focused topological characteristics networks flow level analysis investigating properties bottleneck bandwidths possibility caching availability retrieval content 
sen developed signature payload methodology identify traffic 
authors focus tcp signatures characterize file downloads protocols examination user payload 
methodology similar payload analysis discussed section 
number sprint studies report traffic observed major tier provider backbone 
volume estimates applications fixed port numbers coralreef database captures small decreasing fraction traffic 
approach differs previous ways analyze traffic sources exceptionally high diversity major tier isps internet core 
study popular applications available methodologies payload nonpayload limited subset networks 
contrary study applications currently contribute vast majority traffic 
combine cross validate identification methods fixed ports payload transport layer dynamics 

payload analysis traffic limitations payload analysis traffic identifying characteristic bit strings packet payload potentially represent control traffic protocols 
monitor popular protocols edonkey includes overnet networks fasttrack supported kazaa client bittorrent gnutella mp ares direct connect 
networks operate top nonstandard usually custom designed proprietary protocols 
payload identification traffic requires separate analysis various protocols identify specific packet format case 
section describes limitations inhibit accurate identification traffic link level 
addition methodology identify flows 
limitations carefully consider issues study 
restrictions data related originate nature protocols 
specifically limitations captured payload size caida monitors capture bytes user payload packet see section february april traces 
payload heuristics capable effectively identifying packets payload available byte payload restriction limits number heuristics reliably pinpoint flows 
furthermore older traces may january contain bytes payload limited number packets monitors capture bytes packet tcp options push payload bytes captured segment 
limitations older traces described detail section 
requests protocols requests responses transfer files impossible distinguish traffic typical web traffic bytes payload partial content represent encryption increasing number protocols rely encryption ssl transmit packets files 
payload string matching misses encrypted packets 
protocols widespread file sharing applications yields broad variety protocols 
analysis top protocols guarantee identification flows especially diversity oc backbone link 
experience applications traffic analysis protocols represent vast majority current traffic 
unidirectional traces traces reflect direction monitored link 
cases identify flows carry tcp acknowledgment stream download payload 
monitored directions link asymmetric routing renders find streams data acknowledgment tcp flow link 
overcome limitations nonpayload methodology described section 
methodology analysis identifying specific bit strings application level user data 
documentation privacy issues agreement isp prohibit examination bytes user payload 
table strings payload protocols 
character implies hex strings 
protocol string trans 
prot 
def 
ports edonkey xe tcp udp xc fasttrack get hash tcp udp bittorrent bit tcp gnutella giv tcp gnd udp mp go md siz tcp udp direct connect dir tcp sr udp ares get hash tcp get sha protocols generally poor empirically derived set distinctive bit strings case monitoring tcp udp traffic tcpdump installing various clients 
table lists subset strings analyzed protocols tcp udp 
table presents known ports protocols 
complete list bit strings 
classify packets flows defined tuple source ip destination ip protocol source port destination port 
commonly accepted second flow timeout packet arrives specific flow seconds flow expires 
address limitations described previous section apply different methods estimate traffic listed increasing levels aggressiveness flows classifies source destination port number flow matches known port numbers table flow flagged 
compare payload packet flow table strings 
case match byte payload packet bit strings flag flow corresponding protocol fasttrack edonkey packets match classify flow non 
flow flagged source destination ip addresses flow hashed table 
flows contain ip address table flagged possible payload match 
avoid recursive misclassification non flows perform type ip tracking host ips identified networks clients maintain large number connections open active file transfers 
increased probability host identified participate flows 
flows flagged possible 
hand user may browsing web sending email connected network 
minimize false positives exclude flows source destination port implies web mail ftp ssl dns ports tcp online gaming dns udp general believe provide estimate closer real intensity traffic especially lim prevents clients ports excluding specific protocols looking port numbers may result underestimating flows 
byte payload traces provides loose lower bound volume 
takes advantage ability identify ips participating flows determined facilitating identification flows payload analysis fails 
section examine evolution volume traffic 
section overcome problem limited byte payload older traces 
analysis payload estimates strictly payload string matching 
sen developed similar signature payload methodology 
authors concentrate tcp signatures characterize file downloads protocols identify traffic examination user payload bytes 
describes subset signatures included methodology udp protocol signaling signatures larger number protocols networks network analyzed corresponds significant portion traffic 
hand presents advantage examining user payload bytes 
examining bytes payload increase amount identified traffic expect minimum difference number identified flows methodology described section 
characteristic signatures bit strings packets appear user payload bytes payload sufficient capture majority flows 
second expect missed flows due payload limitation identified method tcp udp control traffic originating specific ips 

nonpayload identification traffic describe nonpayload methodology traffic profiling ptp 
method examines packet header detect flows way examine user payload 
knowledge attempt identity flows arbitrary ports inspection user payload 
heuristics observing connection patterns source destination ips 
patterns unique hosts examining flow history ips help eliminate false positives reveal distinctive features 
employ main heuristics examine behavior different types pairs flow keys 
examines source destination ip pairs tcp udp transfer data tcp udp heuristic section 
second peers connect studying connection characteristics ip port pairs section 
high level description algorithm follows data processing build flow table observe packets cross link tuples similar payload method 
time collect information various characteristics ip port pairs including sets distinct ips ports ip port pair connected packet sizes transferred flow sizes 
table excluded ports tcp udp ip pairs heuristic 
ports application netbios dns ntp isakmp streaming irc gaming exe identification potential pairs flag potential flows tcp udp usage ip port connection characteristics 
false positives eliminate false positives comparing flagged flows set heuristics identify mail servers dns flows malware tcp udp ip pairs heuristic identifies source destination ip pairs tcp udp transport protocols 
analyzed protocols tcp udp layer transport protocols 
protocols include edonkey fasttrack gnutella mp direct connect 
generally control traffic queries query replies udp actual data transfers tcp 
identify hosts look pairs source destination hosts transport protocols tcp udp 
concurrent usage tcp udp definitely typical aforementioned protocols application layer protocols dns streaming media 
determine non applications traces transport protocols examined source destination host pairs tcp udp flows exist 
protocols applications tcp udp transport protocols dns netbios irc gaming streaming collectively typically small set port numbers table lists applications known ports 
port related microsoft netbios service 
port application called exe automatically installed kazaa 
exe related traffic choose exclude analysis user control specific kazaa client 
excluding flows ports table remaining ip source destination pairs tcp udp traces payload analysis described section 
summary source destination ip pair concurrently uses tcp udp transport protocols consider flows pair long source destination ports set table 
ip port pairs second heuristic monitoring connection patterns ip port pairs 
lawsuit napster prevalence centralized networks decreased dramatically distributed hybrid networks emerged 
connect distributed networks client maintains user change port number control functionality flows networking exe port 
initial connection new host network 
host connects superpeer picked host cache 
peer informs superpeer ip address port willing accept connections peers 
superpeer propagates ip port pair rest network 
peers willing connect host advertised ip port pair 
ip port pair number distinct ips connected equal number distinct ports connect 
ip port pair heuristic equality number distinct ports number distinct ips affiliated pair order identify potential pairs 
starting host cache 
depending network host cache may contain ip addresses peers servers supernodes superpeers 
pool hosts facilitates initial connection new peer existing network 
soon connection exists ips host cache henceforth refer ips superpeers new host informs superpeer ip address port number accept connections peers 
host provides information specific protocol relevant 
generation networks listening port defined specific network simplifying traffic classification newer versions clients allow user configure random port number clients advise users change port number disguise traffic 
superpeer propagate information mainly ip port pair new host rest network 
ip port pair essentially new host id peers need connect 
summary host initiates tcp udp connection peer destination port advertised listening port host source port ephemeral random port chosen client 
normally peers maintain tcp connection peer may udp flow peer described previously 
keeping mind multiple connections peers rare data sets consider happens peers connect peer peer select temporary source port connect advertised listening port peer advertised ip port pair host affiliated distinct ips distinct ports words advertised destination ip port pair host number distinct ips connected equal number distinct ports connect 
illustrates procedure new host connects network advertises ip port pair 
superpeers supernodes hosts handle advanced functionality network routing query propagation 
probability distinct hosts pick random source port time extremely low 
hand consider happens case web 
case host connects pre specified ip port pair ip address web server port 
host connecting web server initiate usually concurrent connection order download objects parallel 
summary web traffic higher ratio traffic number distinct ports versus number distinct ips connected ip port pair 
methodology nonpayload methodology builds insights previous sections 
specifically time interval build flow table link key second flow timeout payload methodology described section 
examine primary heuristics look source destination ip pairs concurrently tcp udp ip pairs exist ports table consider 
examine source destination pairs pairs henceforth imply source destination ip port pairs 
seek pairs number distinct connected ips equal number distinct connected ports 
pairs equality holds considered contrast difference connected ips ports certain pair large larger regard pair non 
simple heuristics efficiently classify pairs 
particular ip port heuristic effectively identify pairs sufficiently large sample connections specific pair 
example time interval minutes false positives pairs connections february trace table 
specific trace ip pair ips connect classify high confidence 
flow considered depends classification ip port pairs 
pairs tuple flow key classified flow deemed 
similarly pairs classified non flow 
additionally ips flow match tcp udp heuristic flow considered 
false positives describe heuristics developed decrease risk false positives 
considering diversity backbone links feature vast number ips flows expect previous methodology yield false positives classifying pairs 
false positives common pairs connections frequent specific applications protocols connection behavior matches profile heuristics connection ip port pair mail smtp pop dns gaming 
decrease rate false positives review connection flow history pairs probability misclassification high source destination port equal implies smtp 
past flow history pairs enables accurate classification investigating properties specific ips 
subsections describe heuristics augment basic methodology limit magnitude false positives 
mail data sets mail protocols simple mail transfer protocol smtp post office protocol pop contribute false positives 
mail false positives surprising connection behavior resembles ip port heuristic 
analysis mail flows connection patterns allows identification mail servers traces misidentification traffic ip addresses 
examine flows port numbers equal smtp pop authentication service commonly mail servers 
fact treat port numbers consider ports equal purpose behavior 
identify mail servers port usage history different flows time interval port source destination port 
observed flow pattern illustrates characteristic behavior mail servers examining usage port ip src ip dst ip proto case shows flows ip port source port flows destination port flows 
behavior characteristic mail servers note ip addresses anonymized 
initiate connections mail servers propagate email messages 
identify pattern monitor set destination port numbers ip exists source pair ip 
set destination port numbers contains port consider ip mail server classify flows 
similarly set source ports ip exists destination pair ip 
example source pair set destination ports 
port appears set infer ip mail server deem flows 
keep ips identified mail servers list avoid application heuristics 
dns domain name server protocol runs top tcp udp port characterized mainly numerous short flows packets bytes short duration 
dns connection patterns analogous ip port pair heuristic dns pairs easier identify dns source destination ports 
example representative pattern udp dns flows src ip dst ip proto case observed ip port pairs considered due port source destination port flow tuple 
mail server ips maintain list rejected pairs exclude analysis possible flows pairs 
example source pair may additional dns flows ips destination port 
identified specific pair dns false positive rule possibility additional flows 
heuristic ensures dns flows effectively identified removed estimate specific host part network 
true flows host considered dns requests 
restrict heuristic dns 
contrary apply flows pairs ports 
heuristic facilitates removal false positives commonly ports port numbers especially caused service runs port 
flows ports equal similar pattern described 
flows source port equal destination port port number source destination ip port pairs considered inserted list definitively pairs 
heuristic inspired dns flow features called dns heuristic necessarily specific dns 
gaming malware line gaming runs mainly top udp 
characteristic examples line games sufficient traffic traces age half life quake 
hand malware tends run tcp 
malware mean worm traffic ports beagle port port address space scans appear backbone traces 
gaming malware bear similar property flows different ips ports carrying number pack ets bytes sized packets 
consider udp flow pattern game half life src ip dst ip pr pkts bytes flows ip port pair packets size consistent dividing number bytes number packets flow mean packet size 
flows average packet size 
contrary consider ip port heuristic accept pairs pairs number distinct ips equals number distinct ports connecting pair distinct ips distinct ports pair distinct ip distinct port 
remove pairs maintain ip port pair set distinct average packet sizes set distinct total transfer sizes 
different sets port numbers contains known port numbers second malware gaming ports 
classify ip port pair length pair transfer length pair avg port length pair port port transfer set distinct transfer sizes flows pair avg set distinct average packet sizes flows pair set distinct ips pair 
note sets contain duplicate entries insert unique values 
summary classify ip port pair conditions hold port known ports set pair transfer size distinct average packet sizes average packet size total transfer size flow divided total number packets pair flows ips port malware ports set 
dns heuristic insert ip port pairs agree rule list non pairs 
heuristics apply number rules offer finer grained analysis ip port pairs 
scans addition heuristic malware gaming count number ip port pairs specific ip appears rule port scans false positives 
specifically reject ips appear large number ip port pairs time target ips 
packet pairs remove packet flows ips appear flows trace 
way consider traffic 
msn messenger servers removed flows msn messenger servers 
identify flows easily port distinct destination ips prefix 
port history remove web dns mail false positives examined set distinct ports connect ip port pair 
ports set reflect known services mail web dns rule pair appears flows 
applications may port numbers canonically map known services highly clients connect port numbers current versions clients randomize port accept connections 
case exist large fraction users change client listening port 
final algorithm combining techniques previous subsections yields final nonpayload methodology identification flows 
note algorithm designed analysis passive traffic traces allowing multiple passes data necessary 
addition optimized memory consumption performance 
adapting algorithm active real time monitoring traffic network speed part ongoing 
algorithm ptp presents detail procedure executed time interval 
section described distinct phases execution phases overlap 
time intervals maintain set different lists knowledge learned interval help intervals 
maintained lists flow table specific interval correspond identification heuristics false positive handling methodologies 
specifically lists maintain time intervals include pip list contains ips classified tcp udp ip pair heuristic section list contains ip port pairs classified ip port pair heuristic rejected lists contain rejected pairs ips false positive heuristics list includes ip port pairs flows rejected lists 
ip port pair item list coupled sets include distinct ips appearing flows specific pair distinct ports flows specific pair distinct average packet sizes flows pair avg distinct transferred flow sizes pair transfer 
interval analyze ip port pairs list false positive heuristics 
analysis aforementioned lists description heuristics previous subsections 
false positive heuristics fail specific ip port pair flows matching pair deemed 
flows ips pip list considered despite existence various constants ptp algorithm different port lists expect human intervention minimum port lists stable periods months 
specifically constants depend link question games contribute large numbers flows updated algorithm nonpayload algorithm flow identification procedure ptp traffic low able src dst ip pair ft tcp udp pair pip insert tcp udp heuristic pip insert flows ft src ip dst ip pip print flow tcp udp pairs pip insert put ips list pip insert dns heuristic true insert src pair pair ip port insert dst pair src dst ip src dst ip port pair pair print flow previous interval insert src pair put pairs list pip insert src pair pair rejected sets pair insert pair pair rejected rejected insert src pair rejected insert dst pair pairs examine pairs added previous intervals classified ip pair rejected ip pip pair insert pair print flows pair diff pair ip set len pair len diff diff port check true insert ip check malware true rejected insert pair check scan true rejected insert pair port history heuristic true rejected insert pair insert pair print flows pair diff rejected insert pair significant changes occur specific traffic mix sufficient amount packets flows new worm new network 
note ip port pairs heuristic indirectly separate flows different classes 
class flows ports 
case deem absolute difference sizes acceptable probability specific pair higher 
note sizes indicate number distinct ports distinct ips affiliated specific ip port pair see ip port heuristic section new clients randomize port numbers exist clients known ports users immediately upgrade newer versions randomize port 
contrary flows allow maximum difference sizes 
ip port heuristic assumes equal sizes allow limited inequality account possible failed connections common behavior 
evaluation section evaluate accuracy methodology comparing nonpayload versus payload estimates traffic 
byte payload traces february april strict payload matching method section 
avoid comparison purposes section byte payload traces offer sufficient number payload bytes identify vast majority flows 
second introduce ambiguity evaluating ptp algorithm compare flows determine absolute certainty introduces false positives targets byte payload traces mitigate disadvantage bytes user payload 
payload analysis section 
compare number flows bytes identified methodologies 
addition study extent nature false positives 
show methodology overcomes disadvantages payload analysis volumes additional flows able identify 
fraction identified traffic demonstrate ptp algorithm performs compared payload analysis particular fraction traffic payload analysis sec ptp algorithm 
fig 
summarize findings 
fig 
presents bitrate traffic determined payload analysis upper line fraction identified ptp algorithm bottom line 
flows previously discovered payload inspection examine ptp algorithm classified 
shown fig 
lines fall top traces values difference sizes minimal effect algorithm 
allowing larger differences impact slightly number false positives 
classes flows reflect fact pairs port 
bitrate traffic determined payload methodology upper line portion identified nonpayload algorithm bottom line 
traces nonpayload methodology successfully identifies bytes 
increasing bitrate approx 
mbps right plot algorithm identifies bytes 
identified upper line vs missed bottom line flows bytes nonpayload methodology compared payload examination logarithmic scale 
flows bytes shown total volumes minutes 
flows identified 
note despite large difference utilization traces fraction missed flows remains constant 
indicating approach able accurately identify vast majority traffic 
fig 
better depicts success nonpayload methodology 
specifically examine portions flows bytes payload inspection identified ptp algorithm bottom line plots total number flows bytes missed nonpayload algorithm minute intervals 
upper line plots total volumes identified flows bytes 
axis plotted logarithmic scale facilitate comparison 
top row plots presents number flows bottom row volumes bytes 
column plots fig 
reflects different trace 
nonpayload methodology discovers total bytes flows 
percentages appear independent total traffic link 
despite large variation traffic volumes traces approximately order magnitude difference direction monitored link ptp algorithm performs sufficiently cases 
note number missed flows declining time illustrating increasing knowledge ip port pairs connection behavior ptp algorithm 
hand fraction unidentified bytes depends fluctuation volume specific flows manifests time varying lines missed bytes 
shape plot missed bytes vs time affected sizes missed flows 
number missed flows nonpayload methodology may decreasing large missed flow may cause volume missed bytes noticeably increase 
false positives described earlier section heuristics aim minimizing false positives flows misclassified 
minimizing false positives challenging task considering dynamic nature diversity sources sheer volumes traffic internet core 
develop heuristics account characterize behavior major classes web mail traffic order discriminate behavior 
false positives may originate types traffic false positives vs correctly identified flows bytes 
flows bytes shown total volumes minutes 
false positives account total estimate false positives plus correctly recognized traffic 
cumulative distribution function number distinct ips ip port pairs lead false identification flows 
misclassifications pairs fewer distinct ips 
false positives due insufficient sample specific pairs 
profiled heuristics 
attempting eliminate false positives profiling types traffic increase computational burden sufficiently improving outcome 
unrealistic especially internet core need pinpoint tens thousands flows millions flows crossing backbone link tab 
fig 
indicates number false positives produced ptp algorithm 
false positives represent flows classified ptp algorithm identified payload analysis 
hand ptp algorithm detects true flows missed payload analysis due limitations described section 
flows included false positives fig 
describe section 
fig 
presents volume flows bytes correctly classified compared corresponding amounts false positives 
structured similarly fig 
top bottom rows show flows bytes respectively columns refer different traces volumes plotted minute intervals 
false positives correspond approximately total estimate traffic 
percentage misclassified flows depends trace time trace drops cases time intervals 
similar missed flows previous section false positives decrease stabilize time knowledge characteristics specific ips pairs increases 
majority false positives originate limited number samples specific ip port pair 
sizes ptp algorithm sufficiently small allow inference connection patterns 
fig 
illustrates cumulative distribution function size false positives april trace 
directions link size false positives size implies specific ip port pair connections distinct ips 
fact approximately false positives represent ip port pairs communicate ip 
robustness ptp algorithm examine robustness algorithm respect effect time interval successive executions ptp algorithm 
analysis identified missed flows false positives previous subsections minute time intervals min ptp algorithm 
examine affects percentages missed flows false positives 
note variable designates period flow table formed time interval successive executions algorithm 
intuitively short time intervals sensitive transient phenomena ips appearing link time 
larger allows efficient profiling ips pairs 
increases memory requirements flow table size increase 
fig 
illustrates missed false positive flows vary different time intervals april trace 
facilitate comparison average number missed false positive flows minute 
effect time interval missed false positive flows 
increases numbers missed flows false positive flows decreases 
expected minute line appears noisier successive intervals observe large transient spike number false positives contrast smoother lines minute intervals 
missed flows lines fall top minutes trace number false positives drops continually increases 
difference volume false positives minute intervals trivial relative number flows link especially comparing byte volumes 
memory requirements minute intervals fraction minute intervals settled minute intervals analysis 
large spike minute line false positives caused address space scan trace 
specific time interval distinct source ip scanned address space destination port creating approximately flows minute 
false positive heuristics effectively recognized ip intervals min indicated false positive line dropping sharply sudden increase 
larger time intervals heuristics effectively recognize non scanning flows spike appears minute lines fig 

false false positives advantage nonpayload identification traffic possibility overcome limitations payload analysis see section 
inescapable limitations payload analysis payload methodologies identify invisible 
payload exists flows identified 
flows actual nonpayload flows tcp acknowledgment streams file transfers flows encrypted payload 
payload methodologies verify discover 
inherently payload methodologies require priori knowledge anatomy protocols applied previously reverse engineered known protocols 
contrast methodology affected constraints 
able discover numerous flows missed payload analysis 
identify flows separately examined flows identified ptp algorithm missed payload inspection port number known ports list ips consistently source destination ports 
history connection patterns ips participating flows reveal nature 
additionally important ptp algorithm effectively discover unknown protocols 
encountered powerful capability process minimizing number false positives 
comparing nonpayload payload classification observed numerous false positives specific port numbers 
inspection payload traffic port numbers revealed aforementioned ports represent traffic distinct protocols networks unknown 
networks originate asia tcp udp ports port 
date able identify protocol responsible traffic port 
large number packets contain string get byte packet payload available 
access full packet payload possible way knowing fraction rest false positives mask protocols remain unidentified 
total able discover approximately additional flows additional mbytes discovered payload methodology minutes average april trace additional flows additional mbytes april trace additional flows additional mbytes february trace 
payload vs nonpayload identification traffic previous section suggests flexibility nonpayload methodologies 
provide assessment advantages disadvantages payload versus nonpayload methodologies experience 
nonpayload methodologies provide diverse benefits payload analysis specifically regard privacy issues nonpayload methodologies offer ideal solution perceived real privacy legal alarms triggered idea inspecting user payload 
inspired users isps increased concern privacy providers reluctant allow payload analysis 
possibly obviate privacy issues payload analysis reporting aggregate information traffic monitoring site 
anonymization ip addresses nonpayload methodologies require anonymization ip addresses performed inhibits analysis topological characteristics traffic ips aggregated autonomous systems 
payload examination permitted isps require anonymization ip addresses individual users linked packet payload 
storage overhead storage needed support passive analysis payload traces significantly grows increasing bytes captured payload 
approach requires layer header information 
alternatively packet flow sampling reduce storage overhead 
processing overhead passive active monitoring payload processing network speed oc link far trivial due system memory bus bottleneck 
bus network monitoring cards transfer packet header plus examined payload bytes memory 
increasing volume captured payload risks packet loss high utilizations monitored link 
reverse engineering protocols vs behavior analysis noted previously section payload methodologies ability verify pinpoint existence protocols advance 
contrary monitoring nonpayload behavior bypasses requirement previous knowledge facilitates detection unfamiliar networks 
encryption payload methodologies fail encrypted payload bound eventually common especially newer versions protocols 
hand methodology current form inferior payload analysis regarding detailed analysis specific protocols 
model general behavior distributed semi distributed networks algorithm currently monitor individual protocols 

file sharing traffic trends popular media sources reported sharp decline peer peer traffic year user populations reportedly dropping 
assertion true indicate reversal trend constant increase activity years top downloads sourceforge net clients july 
section discuss alleged claims contrast results 
notwithstanding inherently challenging nature traffic classification definitively illustrated study media reports rarely measuring classifying traffic internet 
reports base telephone surveys periodic samples log files limited number networks clients specifically kazaa small number gnutella clients morpheus popularity relative newer advanced networks edonkey bittorrent 
payload nonpayload methodologies oc traces indicate measured accurately traffic declined seen proportion traffic decrease time change increase data sources 
bitrate trends necessarily reflect trends user population counts believe statistics show networks largely unaffected practices 
addition limitations payload analysis methodologies described section list complications may affect comparison traffic volumes 
specifically byte packets older traces may january caida monitors captured bytes packet see section leaving bytes tcp packets examination tcp headers typically bytes packets options 
facilitate fair payload comparison byte payload heuristics section traces 
hand udp header bytes leaves payload bytes effective string matching packets 
mpls packets traces encapsulated byte mpls label switching headers 
mpls tier isp routing traffic engineering purposes 
mpls decreases number packets matched string table significant amount traffic payload byte mpls header byte tcp header 
isp caching alleviate effect traffic isps employ caching content 
caching similar web caching capable reducing upstream traffic yielding large savings isps 
naturally requests served caches reach backbone resulting limited view usage especially comparing past years caching common 
versus copyrighted traffic typically majority traffic related copyrighted material 
necessarily equate copyrighted traffic dominance copyrighted material networks largely accepted true 
study identify trends networks exchanging copyrighted material 
link utilization time day traces drastically different characteristics taken link different times day 
traces collected business hours compare traces varying utilizations captured different time day 
compare traffic relative total volume traffic link focusing absolute values 
conflicting traffic engineering goals large volume isps tempted manipulate traffic economic objectives 
networks pay transit incentive keep traffic boundaries non charging peers 
networks charge transit try attract traffic adjusting routing performance metrics clients prefer peers lower rtts bittorrent choose ones highest bitrate 
increase peering cable companies attributed rise traffic 
pricing international vs domestic traffic play role 
competitive peering behavior cause unpredictable link workload changes conditions equal 
note limitations analysis varying utilization traces virtually internet measurement studies new unique internet science 
traffic growing compare traces may january february april 
recall ta isps usually charged traffic send upstream providers 
estimation volume traffic different payload nonpayload methodologies 
cases observe growing trend traffic validated methodologies 
note estimates traffic volume increase comparing port numbers payload 
especially april trace payload estimate double estimate produced port numbers 
ble lists bulk volumes utilizations 
payload nonpayload analysis 
payload findings analytically step methodology described section 
fig 
demonstrates average bitrate traffic detected method directions traces 
facilitate comparison volume percentage relative total traffic volume trace 
despite aforementioned limitations general observations fig 
significant decline traffic corroborated contrary traffic traces growing comparable older traces january 
trend supported methodologies examined direction 
direction may january volumes comparable methods rate known ports traffic april trace significantly higher total traffic volume link surpasses traces 
failure conventional estimation methodologies depicted fig 
port numbers traffic classification misleading 
traffic measurements port numbers results underestimating traffic especially traces 
fig 
illustrates migration random port numbers comparing traces 
may difference estimates minimal explodes traces 
change effect newer clients automatically randomizing port number 
sufficient payload size comparing payload estimations traffic byte byte payload february april traces demonstrates payload limitation significant robust identification 
traffic bytes payload estimated approximately february april respectively shown fig 
estimates bytes payload considerably lower 
increasing captured payload size bytes potentially result increase estimates traffic 
noted section bytes payload conflicting bit strings web protocols 
factors hardware bottleneck monitoring system limit size payload capture 
vs nonpayload methodology previous analysis suggests nonpayload algorithm overestimates compared payload estimates section approximately nonpayload estimates cases comparable 
note nonpayload estimates include traffic protocols discovered nonpayload analysis supports conjecture payload methodology accurately estimates traffic 
general traffic grown constitute considerable portion traffic monitored backbone link confirming assumption estimations traffic intensity limited number networks characteristic port numbers unrealistic 
findings illustrate expanding software alternatives users previously unknown protocols traces constitute characteristic example increasing diversity protocols networks 

focused non payload identification monitoring significant growing component internet traffic applications 
traditionally traffic classified known port numbers unique protocol 
growing concerns due legal complications pushed networks challenge network standards randomizing port numbers general making effort disguise activity 
result conventional measurement analyses bound underestimate traffic reliable identification traffic requires examination user payload data 
method relies network transport layer behavior identify traffic 
specifically algorithm profiling flow patterns ip addresses 
addition validate methodology developed payload scheme identify flows reverse engineering analyzing popular protocols networks 
key feature algorithm ability identify unknown protocols 
methodology general behavior networks prior knowledge analysis protocols required 
algorithm detected distinct protocols previously unknown 
show methodology able effectively pinpoint flows flows bytes traces operational oc backbone link 
number false positives ranges approximately total payload estimate 
furthermore demonstrated algorithm ability identify flows missed payload analysis 
estimates methodologies challenged claims sharp decline activity 
estimates real internet traffic simplistic port number analysis confirm hypothesis traffic growing volume continue grow 
consider number extensions strengthen algorithm 
wish exploit availability bidirectional traces merging ip pairs appear directions link 
want consider additional heuristics knowledge specific packet sizes may reflect control traffic protocols 
additionally ip id field may facilitate identification existing connections observing gaps sequence numbers 
process extending generalizing methodology general traffic profiling 
study illustrated connection characteristics patterns various popular applications 
simple port application breakdown problematic workload characterization tasks extending methodology general traffic profiling may offer higher integrity alternative 
accurate monitoring traffic important aspect internet traffic modeling 
traffic risen significant percentage total traffic monitored links 
hand idiosyncrasies bandwidth symmetry dramatic change approach network provisioning traffic engineering 
previous predicted paradigm threatens asymmetrical bandwidth assumption inherent broadband infrastructures dsl cable modems may result increases local peering isps 
changes business choices providers affect global internet topology routing system mention competitive market dynamics ways begun consider 
efficient accurate methods workload characterization realm head better vision 
acknowledgments thankful coral suite team study possible 
due colleagues ken keys shannon brownlee daniel andersen shah support 
carey williamson imc anonymous referees helpful comments 

gao kc claffy 
share diversity disparity ip traffic 
pam 
ares 
www com 
bhagwan savage voelker 
understanding availability 
iptps 
bittorrent 
org bittorrent 
john borland 
threat may slowing file swapping 
news com com html 
claffy 
braun polyzos 
methodology internet traffic flow profiling 
ieee jsac 
direct connect 
www neo modus com 
packet level traffic measurements sprint ip backbone 
ieee network 
edonkey 
www edonkey com 

www project net 

www com 
mihail 
random walks peer peer networks 
infocom 
graham pearson martens donnelly 
dag cell capture board atm measurement systems 
wand cs waikato ac nz 
keller biersack felber garc es 
dissecting bittorrent months torrent lifetime 
pam 

www com 
karagiannis brownlee kc claffy faloutsos 
dying just hiding 
ieee globecom global internet generation networks 
karagiannis brownlee kc claffy faloutsos 
file sharing internet characterization traffic backbone 
technical report 
www cs ucr edu 
ammar dhamdhere raj riley zegura 
bootstrapping gnutella measurement study 
pam 
keys moore koga claffy 
architecture coralreef internet traffic monitoring software suite 
pam 

measurement traffic profile edonkey filesharing service 
pam 
bergman roy ben shaul aviv shavit 
file swapping networks cacheable 
characterizing traffic 
th 
moore keys koga kc claffy 
coralreef software suite tool system network administrators 
usenix lisa 
mp 
www com mp php 
norton 
evolution internet peering ecosystem 
www com pdf whitepapers pdf 
garcia ramon garcia de blas andres perez fernandez 
enabling local preference peer peer traffic 
cost td technical document 
pew internet american life project 
sharp decline music file data memo pip media metrix january 
www org reports 
saroiu gummadi gribble 
measurement study peer peer file sharing systems 
mmcn 
sen spatscheck wang 
accurate scalable network identification traffic application signatures 
www 
sen wang 
analyzing peer peer traffic large networks 


www org 
tcpdump 
www tcpdump org 

www com 
xu fan ammar 
prefix preserving ip address anonymization measurement security evaluation new cryptography scheme 
ieee icnp 
