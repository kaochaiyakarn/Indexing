simulation continuous time markov chains christel baier joost pieter katoen holger hermanns institut informatik university bonn bonn germany faculty computer science university twente box ae enschede netherlands dept computer science rwth aachen aachen germany 
presents simulation preorder continuoustime markov chains ctmcs 
simulation preorder conservative extension weak variant probabilistic simulation fully probabilistic systems discrete time markov chains 
main result simulation preorder preserves safety liveness properties expressed continuous stochastic logic csl stochastic branching time temporal logic interpreted ctmcs 
compare stepwise behaviour states transition systems simulation bisimulation relations widely considered 
bisimulation relations equivalences bisimilar states exhibit identical stepwise behaviour 
contrary simulation relations preorders state space simulates state mimic stepwise behaviour converse guaranteed state may perform steps matched successor corresponding related successor reverse necessarily hold 
simulation lifted entire transition systems comparing initial states 
simulation relations verification purposes show system correctly implements system 
interesting aspects simulation relations allow verification local reasoning 
setting model checking bi simulation relations combat known state space explosion problem :10.1.1.111.7245
bisimulation relations possess called strong preservation property simulation possesses weak preservation 
strong preservation means formulas follows iff 
property holds instance ctl ctl strong bisimulation 
simulation relies contact author 
tel fax mail katoen cs utwente nl 
preservation certain classes formulas formulas 
instance safety formulas follows implies 
note converse deduce hold simulated state name weak preservation 
simulation equivalence defined mutual simulation states coarser bisimulation equivalence yields better abstraction smaller quotient 
simulation relations basis abstraction techniques rough idea replace large system verified small model model check system 
studies simulation preorder continuous time markov chains ctmcs investigates preservation properties expressed continuous stochastic logic csl 
ctmcs important class stochastic processes widely practice determine system performance dependability characteristics 
csl continuous probabilistic variant ctl includes means express transient steady state performance measures 
instance allows stipulate probability reaching certain set goal states specified real valued time bound provided paths states obey certain properties probability value 
model checking algorithms csl prototypical software implementations available sparse matrices symbolic multi terminal bdds :10.1.1.49.6154
baier prove lumping equivalence continuous time variant probabilistic bisimulation preserves csl desharnais panangaden shown converse equivalence induced csl implies lumping equivalence 
proposes novel simulation preorder ctmcs 
notion extends probabilistic simulation discrete time markov chains originally defined jonsson larsen 
main result weakly preserves csl safety liveness properties 
means safe implies safe csl safe live implies live csl liveness formula live 
consequence validity safety formulas refutation liveness formulas carries state wrt 
concrete state result verify csl formulas ctmc verifying formulas smaller simpler ctmc abstraction 
organisation 
section introduces ctmcs presents simulation preorder ctmcs elementary properties 
section recalls csl introduces safe live fragments 
section discusses weak preservation csl formulas 
section defines simulation equivalence compares equivalence notions 
section discusses related 
section concludes 
proofs main results provided appendix 
safety formulas understood arbitrary formulas ctl restriction ctl universal path quantifiers :10.1.1.116.9247
simulation ctmcs fully probabilistic systems 
ap fixed finite set atomic propositions 
labelled fully probabilistic system fps tuple countable set states probability matrix satisfying ap labelling function assigns state set atomic propositions valid called stochastic called sub stochastic 
labelled fps continuous time markov chains 
labelled ctmc tuple ir rate matrix 
adopt conventions allow self loops 
exit rate denotes probability transition time units equals state race outgoing transitions exists 
probability moving single step equals probability delay going finishes delays outgoing transition 
definition 
ctmc embedded discrete time markov chain emb 
note definition embedded emb ctmc stochastic 
definition 
ctmc ctmc unif constant maxs 
called rate determined state shortest mean residence time maxs se 
rates self loops ctmc normalised respect mean residence time uniformly set unif 
literature defined transforming ctmc emb unif 
technical convenience define transformation ctmcs ctmcs basically adding self loops slower states 
simulation fully probabilistic systems 
labelled transition systems state simulates successor successor simulates simulation states defined terms simulation successor states 
probabilistic setting target transition fact probability distribution simulation relation needs lifted states distributions 
done weight functions 
countable set dist denote collection possibly sub stochastic distributions definition 
dist dist iff exists weight function 
implies 


intuitively weight function shows probability distributed related states equals total amount probability gets distributed 
note stochastic probability distribution probability select 
addition probability select element component equals probability select element second component equals 
example 
note sub stochastic 

weight function defined satisfies constraints def 

fully probabilistic systems consider slight variant probabilistic simulation jonsson larsen definition 
fps coarsest binary relation state space 


relation symmetric transition probabilities stochastic 
case simulation preorder agrees probabilistic bisimulation 
instance probabilistic bisimulation coincide embedded ctmc 
simulation ctmcs 
ctmcs modify timing aspects incorporated 
intuitively intend simulation preorder ensure simulates iff faster ii time behaviour simulates 
obvious attempt direction refine def 
demanding addition average fast 
approach turns useful coincide lumping equivalence ctmcs 
involved definition return enables radical state space aggregation incorporates notion stuttering 
definition 
ctmc 
relation simulation iff states exist functions sets ui vi ui ui si ui ui vi vi si vi vi 

implies 

ki ui ui ui si ui 
definition 
simulation relation defined iff exists simulation 
successor states si grouped subsets ui vi 
require ui vi disjoint understand definition consider ui vi 
fact allow non empty intersection technical reasons explained 
ki denotes total probability move si transition state ui 
vice versa probability ki state si transition state vi cf 
fig 

fig 
simulation scenario condition states grouping successor states vi ui state simulates simulates state 
second third condition require existence weight function relates conditional probabilities move state conditional probabilities move state 
weight function probability distributions si ki 
fourth condition states faster sense total rate move state total rate move state 
intuitively interpret moves si vi state silent transitions transition action labeled transition systems 
condition def 
guarantees transition stutter step 
vice versa transitions si ui state considered observable moves 
fig 
examples simulation refinement example 
consider ctmcs depicted fig 
states labelled proposition states exists relation 
pictorial representation elements ui vi indicated patterns fig 
ui vi 
difficult check constraints def 
fulfilled fourth constraint obtain 
note exceed equal longer established 
exists relation 
straightforward check constraints def 
fulfilled 
examples far special case state case characteristic function ui sets ui vi disjoint 
general things complicated need construct ui vi fragments states 
deal functions 
intuitively fragment state belongs ui remaining part part belongs vi 
fragments states exemplified example 
example 
consider ctmcs depicted fig 

states labelled intuitively slower 
require sets ui vi def 
disjoint seen follows 
fig 
example simulation fragments states moves rate state total rate move state smaller 
chance define components def 

comparable simulation order different labels define 
weight function condition violated moves probability state probability reach state step hand allow splitted half belongs half get conditional probabilities ui states related 
note 
interesting observe happens states absorbing 
absorbing 
absorbing 
case condition 
def 
successor states belong simulated condition 
def 

vice versa state 

particular implies non absorbing 
shows absorbing successor states belong simulate condition 
def 

observation absorbing state simulated state labeling natural type simulation abstracts silent moves 
observation state simulates absorbing state perform stutter steps non observable transitions viewed probabilistic counterpart divergence non probabilistic systems 
note absorbing states ctmc just time advances 
lemma 
preorder 
lemma 
ctmc unif superscript simulation preorder indicates ctmc considered 
proofs facts appendix note proof lemma relies fact sets ui vi may overlap 
safe live csl section logic csl discusses distinguished subsets logic sequel shown weakly preserved simulation 
paths ctmcs 
path ctmc alternating sequence 
si si ti ir time stamps ti denote amount time spent state si 
path denote set paths denotes th state si 
denotes state occupied time smallest index tj 
prs denote unique probability measure sets paths start definition borel space see 
continuous stochastic logic 
csl branching time temporal logic la ctl state formulas interpreted states ctmc path formulas interpreted paths ctmc 
csl variant equally named logic aziz incorporates operator refer probability occurrence particular paths similar pctl ii real time operator tctl iii steady state operator 
focus fragment csl denoted csl distinguished consider step steady state operator 
simplicity consider time intervals form 
omission operators justified 
usual strong operator incorporate weak operator classification safety liveness properties 
properties subjects weak preservation results aim establish 
recall ap set atomic propositions 
ap ir 
syntax csl 

asserts probability measure paths satisfying meets bound operator 
replaces usual fair ctl path quantifiers 
path formula asserts satisfied paths absorbing state sk assume path represented infinite sequence 
tk sk sk sk 
time instant preceding time instants holds strong 
weak operator differs require eventually true means time interval holds 
semantics 
semantics csl boolean operators identical ctl omitted 
remaining state formulas iff prob path formula 
prob prs path 
semantics defined iff 
note standard untimed operator obtained equal 
semantics weak operator defined iff 
boolean connectives derived usual way tt ff tt 
temporal operators real time variants derived tt ff 
instance error atomic proposition characterizes states system error occurred error asserts probability system error time units smaller 
operator weak operator closely related 
state csl formula prob prob prob prob formulas equivalent 
similar equivalence holds weak operator exchanged 
note path satisfies holds requirement released soon valid 
csl safety liveness properties 
weak preservation results distinguish safety bad happens liveness eventually happen properties 
order negations may attached atomic propositions 
syntax set safety formulas defined 
example csl safety formula error expressing probability error occur time units 
syntax set liveness formulas defined 
result aforementioned relationship cf 
equations duality safety liveness properties csl formula safe liveness property equivalent safe applies liveness property live 
steady state 
operator steady state operator part csl fragment enables weak preservation result shown example 
fig 
steady state behaviour preserved example 
consider ctmcs depicted fig 
state decorated atomic propositions valid respective state 
steady state long run probability si state si spread evenly spread unevenly 
concretely consequence 
hand 
furthermore xa xb xa xb 
fact steady state operator compatible simulation relation viewed specific instance known phenomenon ctmcs ordered steady state performance 
weak preservation section devoted main result weak preservation csl fragments respect arrive requires establish crucial observations 
ctmc probability measures ctmc agree ctmc unif 
arbitrary csl path formula lemma 
pr path path 
lemma implies csl satisfaction agrees csl satisfaction unif 
may safely assume exit rate state equals theorem 
state 
formula safe safe safe 

formula live live live 
proof 
proven sets sat safe upward closed sat safe sat safe 
involved omitted 
proof induction formula interesting cases lemma 
statement formulas follows duality weak operator 
proof theorem requires establish fact lemma implies prob prob sets sat upward closed 
initial proof idea fact resort embedded ctmc result prob 
prob emb unif means reached steps path natural 
advantage approach remaining proof obligation implies prob prob verified considering discrete time behaviour ctmc 
proof equation straightforward conjecture turns wrong 
illustrated ctmc absorbing state labelled proposition difficult check state simulates state follows prob prob real time instant prob emb 
contradicts 
initial proof attempt fails consider alternative route 
alternative proof attempts similar lines failed 
prove different way 
crux proof apply number transformations ctmc consideration 
details proof appendix proof sketch 
lemma 
csl formulas satisfaction sets sat upward closed sat sat 
implies prob prob 
proof 
provide proof sketch full proof appendix 
series transformation steps modify obtain ctmc pair probability move state equals probability added self loop 
probability added self loop equals probability move state 
probabilities move state respectively equal 
faster exit rate exceeds exit rate 
meaning def 
reasoning follows 
interesting case si 
states satisfy 
possibility si fulfill path formula move ui state 
denote probability reach state time units transitions states 
prob si equals limn si 
state probabilistic behaviour exit rate establish 
induction subsequently shown 
simulation equivalence section defines simulation equivalence relates notion equivalences induced csl fragments 
furthermore relationship lumping equivalence probabilistic bi simulation weak probabilistic bisimulation established 
simulation equivalence 
simulation equivalence denotes kernel simulation preorder 
states simulation equivalent mutually simulating definition 

theorem 


csl safety formula safe safe iff safe 
csl liveness formula live live iff live lemma 
equivalence equivalence simulations 
theorem 
states iff equivalent iff equivalent 
simulation characterised fragments csl considered 
lumping equivalence 
recall states lumping equivalent equivalence relation satisfying equivalence classes quotient 
theorem 
state implies 
converse theorem hold 
instance corresponding states ctmc unif simulate considered disjoint union state spaces lumping equivalent rate chosen strictly larger maxs se 
simulation equivalence strictly refines lumping equivalence 
simulation 
interesting investigate effect simulation relation interpreted constraint total rates states embedded 
preorder obtained omitting clause 
def 
denote induced simulation equivalence cf 
def 

strong probabilistic bisimulation finer weak probabilistic bisimulation denote state labelled weak probabilistic bisimulation 
specific states weakly probabilistic bisimilar equivalence relation satisfying equivalence classes quotient equivalence class containing 
theorem 
state implies 
claim converse direction theorem holds setting formally shown 
recall agree feel similar result may expected note probabilistic preorder side issue mainly interested ctmc model checking 
related preservation bisimulation 
aziz shown larsen skou probabilistic bisimulation discrete time markov chains fully preserves formula logic probabilistic ctl pctl 
result generalised continuous space markov processes desharnais 
segala lynch reported similar results simple probabilistic automata model probabilistic choices non determinism exist 
baier shown lumping equivalence preserves csl desharnais panangaden shown converse equivalence induced csl implies lumping equivalence 
simulation preorders 
seminal works larsen skou jonsson larsen probabilistic bi simulation variants proposed see 
related simulations 
discuss works briefly 
argenio investigated simulation discrete time markov decision processes showed preservation untimed probabilistic reachability properties 
opposed approach stays entirely probabilistic setting away probabilistic behaviour 
advantage csl model checking algorithms applied model concrete model 
segala lynch weak strong simulations probabilistic automata showed notions pre congruences wrt 
parallel composition 
divergence free probabilistic automata showed strong simulation weakly preserves safe fragment pctl 
addition weak preservation result weak simulation fragment subset variant pctl abstracts internal activities shown 
desharnais studied approximation continuous space markov processes series finite rational markov processes 
simulation preorder capture relationship successive finite approximants showed preorder weakly preserves subset pml probabilistic variant hennessy milner logic 
define branching bisimulation style see proof styles coincide 
testing preorders 
important branch preorders ones testing framework processes compared ability pass specified set tests 
discrete time probabilistic systems range testing preorders proposed 
account relation probabilistic may testing probabilistic simulation established 
testing preorders continuous time probabilistic systems received scant attention far 
notable exception bernardo cleaveland consider testing action labelled ctmcs 
similar simulation preorder tests allow discriminate models respect transient evolution 
precise testing preorders considered probability executing successful computation average duration exceeding time bound probability reach success time bound 
shown testing preorders coincide 
csl preservation results testing known 
concluding remarks simulation preorder ctmcs provided weak preservation results safety liveness fragments csl 
claim simulation preorder easily extended markov reward models requiring rewards simulating states related weak preservation results fragments logic obtained similar way shown 
step plan algorithm deciding construct quotient space simulation preorder simulation equivalence 
investigate concept simulation help increase efficiency csl model checking abstraction refinement methodology 
proofs basic results simulation relation lemma 
preorder 
proof 
reflexivity follows directly def 

transitivity proven follows 
simulations ctmc show simulation 

clear equally labelled 
check conditions def 

ui vi def 

simplicity prove case successor state belongs function characteristic function 
condition assumed states 


simulations state 

way obtain 

define exists 
definition 

ki si ui 
definition ui derive 
similarly get 

follows 
lemma 
ctmc unif proof 
ui vi ki def 

components ui vi show simulation unif 
defined similarly 
show simulation unif checking conditions def 

suffices check constraints constraints clear 

ki 
ui si ui 
justification simplification follows 
proof general case replace occurrence 
si ui si ui transition probabilities state si unif 
follows 
way condition 
proven state 

similar argument follows 
proving weak preservation lemma follows values prob remain unaffected switching ctmc 
allows assume states exit rate states sake simplicity assume sequel 
transformations ctmcs shown preserve probabilities time bounded formulas 
transformation 
replace lumping equivalent ctmc states transformed ctmc form 
intuitively copies states respectively 
pair states fix weight function def 

furthermore def 

particular 
sets depend precise write simplicity omit parameters 
definition 
ctmc ctmc defined si rate matrix 
sequel constructed def 

lumping equivalence denoted defined section 
follows construction proposition 
si results directly follows transformation leaves probabilities time bounded formulas invariant corollary 
prob si prob 
second transformation 
simplify exposition assume copies states belong ui vi 
conditions fulfilled may deal additional copies states belong ui vi si self loop 
modify constructed def 
adding transitions follows 
adding self loop arbitrary rate change transient probabilities change prob 
rough idea add self loop state rate extended self loop rate 
adding self loop insert transitions copies state ranges elements rates auxiliary transitions sum 
state insert transitions total rate 
definition 
ctmc defined def 
transformed version ctmc defined ctmc defined states note state space labellings differ rate matrix 
assume ui vi states fall lumping equivalence class results proposition 
prob prob 
second transformation affect probabilities formulas 
continue briefly justify construction total exit rates states note 

transition probabilities indicated informal proof sketch 
total probability move state assume 
insert auxiliary transitions 
applies 
recall states total rate 
equals probability auxiliary transition similarly probability auxiliary transition coincides probability move state probability move state ui ui provided probability go state provided weight function condition 

case equations transition probabilities hold 
definition 
probability reach state states steps time bound state function defined dx 
defining clause informally justified follows 
satisfies probability reaching state time units steps equals probability reaching direct successor time units multiplied probability reaching state remaining time path steps 
lemma 
ctmc defined def 
sat upward closed sat sat 
states non negative real 
proof 
claim clear state prob prob 
recall si lumping equivalent 
satisfy csl formulas 
similarly prob prob 
proof remaining case induction basis induction clear induction step extend copy state slow new state successors states transition probabilities total rate states slow slow auxiliary state slow predecessors 
state slow slower transition probabilities slow induction hypothesis yields note sat upward closed cases impossible 
real number states states 
get slow dx dx dx dx dx 
dx dx lemma 
csl formulas satisfaction sets sat upward closed sat sat 
implies prob prob 
proof 
results defined transformations derive prob corollary proposition prob definition calculus limn lemma limn definition calculus prob corollary proposition prob 

alur courcoubetis dill 
model checking dense real time 
inf 
comp 

aziz singhal brayton sangiovanni vincentelli 
usually works temporal logic stochastic systems 
wolper ed computer aided verification lncs pp 


aziz singhal brayton 
verifying continuous time markov chains 
alur henzinger eds computer aided verification lncs pp 


baier hermanns 
katoen 
logical characterisation performability properties 
montanari 
eds automata languages programming lncs pp 


baier hermanns 
weak bisimulation fully probabilistic processes 
grumberg ed computer aided verification lncs pp 



baier 
katoen hermanns 
approximate symbolic model checking continuous time markov chains 
baeten eds concurrency theory lncs pp 


baier 
norm functions probabilistic bisimulations delays 
ed 
software science computation structures lncs pp 



baier hermanns 
katoen 
model checking continuous time markov chains transient analysis 
emerson sistla eds computer aided verification lncs pp 


baier 
deciding bisimilarity similarity probabilistic processes 
comp 
system sc 

bernardo cleaveland 
theory testing markovian processes 
palamidessi ed concurrency theory lncs pp 


brown clarke grumberg 
characterizing finite kripke structures propositional temporal logic 
th 
comp 
sc 

buchholz 
exact ordinary finite markov chains 
appl 
prob 

clarke brown grumberg 
model checking abstraction 
acm tr 
progr 
lang 
sys 

clarke grumberg peled 
model checking 
mit press 

argenio jensen larsen 
reachability analysis probabilistic systems successive refinements 
de alfaro gilmore eds process algebra probabilistic methods lncs pp 


desharnais edalat panangaden 
logical characterisation bisimulation labelled markov processes 
ieee symp 
logic computer science pp 


desharnais panangaden 
continuous stochastic logic characterizes bisimulation continuous time markov processes submitted publication 
available www acaps cs mcgill ca prakash csl ps 

desharnais gupta jagadeesan panangaden 
approximating labelled markov processes 
ieee symp 
logic computer science pp 


van glabbeek weijland 
branching time abstraction bisimulation semantics 
acm 

gross miller 
randomization technique modeling tool solution procedure transient markov chains 
oper 
res 


hansson jonsson 
logic reasoning time reliability 
form 
asp 
comp 


hermanns 
katoen meyer 
markov chain model checker 
graf schwartzbach eds tools 
construction analysis systems lncs pp 


jensen 
markov chains aid study markov processes 



jonsson 
simulations specifications distributed systems 
baeten groote eds concurrency theory lncs pp 


jonsson larsen 
specification refinement probabilistic processes 
ieee symp 
logic computer science pp 


jonsson yi larsen 
probabilistic extensions process algebras 
bergstra 
eds handbook process algebra chapter pp 



katoen kwiatkowska norman parker 
faster symbolic ctmc model checking 
de alfaro gilmore eds process algebra probabilistic methods lncs pp 


kulkarni 
modeling analysis stochastic systems 
chapman hall 

larsen skou 
bisimulation probabilistic testing 
inf 
comp 

milner 
communication concurrency 
prentice hall 

lee 
weak bisimulation probabilistic systems 
palamidessi ed concurrency theory lncs pp 


puterman 
markov decision processes discrete stochastic dynamic programming 
john wiley sons 

segala lynch 
probabilistic simulations probabilistic processes 
nordic computing 

silva 
private communication 


stewart 
numerical solution markov chains 
princeton univ press 


verification probabilistic real time parametric systems 
phd thesis university nijmegen 

