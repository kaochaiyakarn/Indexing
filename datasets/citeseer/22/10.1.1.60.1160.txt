dataflow anomaly detection sandeep sekar department computer science stony brook university stony brook ny sekar cs sunysb edu forrest researchers developed intrusion detection techniques modeling program behaviors terms system calls 
weakness techniques focus control flows involving system calls arguments 
weakness susceptible classes attacks including attacks security critical data race condition symbolic link attacks mimicry attacks 
address weakness develop new approach learning dataflow behaviors programs 
novelty approach compared previous system call argument learning techniques learns temporal properties involving arguments different system calls capturing flow security sensitive data program 
interesting aspect technique uniformly layered top existing control flow models leverage control flow contexts significantly increase precision dataflows captured model 
contrasts previous system call argument learning techniques leverage control flow information focused learning statistical properties individual system call arguments 
experiments show temporal properties enable detection attacks aren detected previous approaches 
support formal reasoning security assurances provided program follows dataflow behavior model tar read files located directory specified command line argument 

forrest researchers developed intrusion detection techniques modeling behaviors programs terms system call sequences :10.1.1.13.6179
approaches described learn models program behaviors observed training phase generally assumed free attacks :10.1.1.46.2976
approaches research supported part onr nsf ccf cns computer associates sensor cat center advanced technology 
static analysis source code binary 
variety representations models strings finite state automata push automata :10.1.1.13.6179:10.1.1.46.2976
techniques shown effective common types attacks involve execution foreign code 
addition techniques effective attacks exercise unusual code paths code path taken maliciously crafted input processed vulnerable code buggy server 
important weakness approaches singular focus control flows little emphasis data flows involving system call arguments 
susceptible classes attacks non control flow hijacking attacks 
demonstrates attacks common servers target data variables store userid corresponding ftp client directory contains allowable cgi scripts web server 
race condition attacks exploit errors resource referenced name changed time check time 
race attacks change system calls victim process change interpretation operands 
mimicry attacks 
evasion attacks attacker modifies attack closely mimics program behavior seen intrusion detection system ids 
shown attacks largely generated automated way 
detect attacks necessary reason system call arguments 
research direction far focused learning statistical properties system call argument isolation 
contrast intrusion detection technique learning temporal properties involving arguments different system calls capturing flow data program 
specifically contributions formulate notion dataflow properties programs 
properties defined terms externally observable events specifically system calls formula tion reason actual dataflows take place program hypothesizes flows may relationships observed parameters different system calls 
formulation decoupled control flow models leverage control flow context significantly improve precision dataflow models 
dataflow properties categorized unary relations involve properties single system call argument binary relations involve arguments different system calls 
binary relations turn powerful versatile 
enable models parameterized capture system call argument derived command line parameter environment variable 
enable detection reported stealthy attacks undetectable 
binary relations support formal reasoning nontrivial security properties programs 
efficient algorithm layered top existing techniques learning control flow behaviors programs 
algorithm provides uniform way enhance precision existing methods including gram fsa vtpath execution graph methods :10.1.1.13.6179
detailed experimental evaluation technique establishing benefits attack detection 
selected attacks hard detect existing control flow models show detected technique 
particular significance regard race attacks best knowledge detected previous program behavior anomaly detection technique 
technique detect sophisticated attacks security critical data 
argue attack detection essential characteristics attack result nonessential artifacts easily changed 
formal assurances security 
show models precise interesting dataflow properties proved 
means assert detect attack violates properties 
believe anomaly intrusion detection technique provide formal assurances involving substantive security properties large programs 
model precision 
precision model terms average branching factor improves factor false alarms 
false alarm rate intrusion detection increased factor result capturing argument information 
organization rest organized follows 
section define data flow properties incorporated control flow behavior models 
section describes algorithm learn dataflow relationships 
section provides details implementation 
section evaluate effectiveness approach 
section discusses related followed concluding remarks section 
defining data flow behavior 
events traces behavior model formalize program behaviors terms externally observable events generated program 
interest mainly confined system call events rest terms event system call interchangeably 
series definitions execution trace simply trace program denoted sequence system calls executed execution 
trace typically includes information system call arguments information program runtime environment program location system call pc information 
system call tracer simply tracer responsible intercepting recording system calls generating 
trained behavior set traces generated training runs 
behavior model automaton accepts traces 
strictly speaking model accepts prefixes traces simplicity say model accepts training trace set model traces captures essential properties traces 
properties captured vary different methods discussed 

behavior models previous research gram method property captured method set substrings length event names captured model arguments 
model accept trace provided substrings length training set fsa method fsa method events annotated program location information 
event invoked location denoted fsa method captures successor relationship events trace new trace accepted model successive event pair trace addition event appear event trace vtpath method method learns successor relationships similar fsa method takes account function calls active time invocation system call opposed just location system call 
call stack information compactly summarized vtpath captures difference call stacks observed time occurrence 
execution graph method method captures generalization relationship learnt vtpath method 
particular suppose pair events trace denote return addresses stack point invocation events 
information method infers sequence calls returns intra procedural transitions occurred program order generate sequence events call stack information 
trace event pairs constructed composing program transitions observed event pairs accepted model 
description conclude methods capture trace properties properties hold execution trace sequencing relationships events controlflow properties programs 
describe methods extended incorporate dataflow properties 

dataflow properties dataflow properties refer properties execution traces properties relate values event argument data flow system call subsequent 
natural approach capturing properties event arguments sets 
instance set specify possible file name arguments open system calls execution trace program note approach combines information open system calls appeared trace 
combination lead significant needless losses accuracy 
illustrate consider example program fd open passwd 
perform authentication fd open tmp combined information open operations dataflow model trace corresponds opening passwd file line accepted clearly inconsistent normal program behavior 
improve accuracy desirable partition open system calls subsets capture properties subset separately 
question partitioning 
making control flow context available learning dataflow properties 
important observation control flow models distinguish different occurrences event trace 
instance example fsa model distinguishes open system calls pc value 
generally approaches described sort automaton model gram model uses automata recognize grams fsa approach uses finite state automaton 
vtpath model thought recognizing strings program locations 
execution graph method uses push automaton control state possibly bounded information stack distinguish event occurrences 
term control flow context refer event context information provided controlflow model 
labeled traces encode control flow context traces 
approach allows decouple dataflow properties control flow models 
control context encoded traces giving names event arguments event appears places labeled trace instances correspond control flow context arguments name 
example labeled trace open passwd read open tmp write 
possible dataflow relationships similar control flow models focus learning dataflow properties 
properties formulated relationships event arguments 
natural specify relationships referring argument names labeled trace 
limit attention unary binary relations event arguments learnt efficiently adequate purposes 
unary relations 
unary relations capture properties single argument 
represented form argument name denotes relation constant value 
examples unary relations include equal relationship applicable types arguments 
instance equal indicates value argument elementof relation capture fact argument take values 
elementof indicates take values set generalization elementof argument take multiple values drawn set 
instance rd wr represents fact set valued argument value subset set rd wr 
range relation involving integer arguments 
characterized lower upper bound range indicates argument take values range 
relation capture fact file name argument contained specified directory 
example value home user xyz state home user 
relation specify fact file name argument certain extensions takes values set doc doc txt doc txt holds 
unary relations mentioned incorporate approximations 
instance elementof example relation doesn need approximations 
variable observed distinct values vk traces captured vk 
approximations necessary sets large integer string valued variables sets unbounded size 
case approximations range may 
note previous works system call argument learning focused unary relations :10.1.1.13.2425
main difference approach suggest control flow contexts support accurate learning 
result approach learns properties hold occurrences system call control context previous approaches learn properties hold occurrences system call regardless control context 
binary relations 
binary relations capture relationships event arguments 
may arguments event arguments different events 
focus mainly relationships naturally capture flow data arguments system call 
binary relations general represented sets manner analogous unary relations 
approach limit method finite small relations require approximations lose important information 
practice need represent types relations large domains significant loss information 
examples relationships include equal captures equality system call operands file descriptor returned open operation equals argument subsequent write operation 
indicates file name argument directory named argument 
contains reverse operation second file name argument directory named argument 
indicates arguments common base directory home user xyz home user abc hold common directory home 
indicates file names base txt doc hold common base 
indicates file names extension 
example value txt value txt holds common extension txt 
section describe relations formulated learnt 
interpretation binary relations 
unary relations defined apply occurrences event argument trace 
interpretation unsuitable binary relations relation form equal hold interpretation possible value traces 
alternative interpretation pairs occurrence trace single occurrence natural way pair occurrences closest 
definition lifting relation trace 
binary relation event arguments lift trace denoted rt holds iff occurrence closest preceding occurrence holds 
rt holds iff rt holds consider labeled trace form 
say vice versa 
consider trace relationship tmp tmp var var clear hold second occurrence satisfy compared note holds ignore occurrence series occurrences 
int main int argc char argv 
source dir argv target file argv 
target fd open target file wr 
push source dir uses global stack 
dir name pop null 
dir dir name 
foreach dir entry dir 
dir entry 
push dir entry 

source fd open dir entry rd 
read source fd buf 
write target fd buf 
close source fd 



close target fd 
exit 
start open equal elementof close equal close equal close equal start open equal elementof rd read equal write equal exit 
example program left model argument information right 
intervening motivates different flavor relation rt denote definition holds iff holds pair intervening consider trace 
clearly value equals value preceding accommodate define variation definition rn holds iff holds occurrence th preceding occurrence note rt example trace equal 
motivating example illustrate concepts developed example program highly simplified version tar program 
shows program takes command line argument describing source directory command line argument specifies name archive 
traverses directory may contain subdirectories copies files archive 
simplicity ignore aspects archiving maintaining file boundaries directory structures 
addition abstracted away details lstat system call replaced descriptive names 
example system calls underlined 
shows version fsa model learnt 
states model labeled line number 
transitions labeled system call argument information 
argument names nature argument transition associated file descriptor argument close system call transition state labeled refers argument transition 
relationships shown annotations transitions 
illustrate relationships learnt consider execution trace generated program run archive directory opt proj tmp proj tar 
operations trace shown column 
second column shows corresponding control flow transitions learnt fsa 
third column shows values system call arguments fourth column shows relationships learnt 
generation trace introduced synthetic event start capture command line arguments converted files names absolute path names 
relationships capturing absolute values file descriptors shown example 
addition absolute values various file arguments operation traces control flow argument satisfied data transition values flow property program started arguments opt proj opt proj tmp proj tar tmp proj tar open tmp proj tar wr start tmp proj tar equal wr elementof wr opt proj opt proj opt proj readme opt proj readme open opt proj readme rd opt proj readme equal rd elementof rd read equal write equal close equal opt proj src opt proj src opt proj src opt proj src opt proj src opt proj src open opt proj src rd opt proj src equal rd elementof rd read equal write equal close equal close equal exit 
sample trace program observed argument relationships 
learnt trace shown values vary trained different traces eventually discarded 
example evident binary relationships involving file names file descriptors useful allow track interesting dataflow properties traces 
interesting note relationships arise due properties program environment program 
instance relationship exists due fact file system absolute path name file name parent directory prefix 
static analysis technique hard time extracting relationships obviously impossible infer semantics file system program 

learning argument relationships section describe algorithms learning relationships described section 
algorithms take labeled traces inputs output relationships hold traces 

learning unary relations learning unary relationships straight forward 
event argument algorithm maintains list values encountered traces 
number values exceeds threshold algorithm approximates set 
kind approximation appropriate event argument externally specified configuration file 
lines configuration file shown 
line specifies event arguments represent file modes distinct values remembered 
parts configuration value kind mode approx bit max value kind path approx prefix max lib value kind fd sd approx range max 
sample configuration file 
file specify event arguments represent type data 
values approximated bit operation 
second line applicable file directory arguments 
maximum distinct values remembered approximated common prefix operation 
line states file names match lib name remembered regardless size set 
line states file socket descriptors maximum distinct values remembered range values kept 
runtime storage requirements 
unary relations learnt time length measured terms number bytes labeled trace provided restrict simple approximation operations strings longest common prefix lcp 
note lcp computed quickly strings represented trie 
construction tries takes time linear size input strings 
computing common prefix takes longer length shortest string trie 
insertion take place second invocation common prefix operation shown total time taken maintain lcp information bounded total length strings input trace turn bounded trace length 
storage requirements dictated total number 
procedure value 
lookup 

yn 
yn 
update 

relationship learning algorithm distinct argument names traces maximum size sets approximation performed 
note due way generate labeled traces bounded size control flow model gram fsa vtpath methods 
key point size traces increased bound storage requirements going bounded 

learning binary relations binary relations learnt procedure shown 
procedure invoked repeatedly event input trace argument event 
parameterized respect relation designed learn rt 
modifications learn rk discussed subsequently 
takes arguments current argument name current value uses global data structures store values occurrences event arguments indexed relation argument name stores set arguments yc rtp yc holds prefix tp current trace including data structures initialized empty algorithm 
line looked identify set arguments holds value step arguments yd aren deleted latest occurrence yd didn possess specified relationship line designed handle event arguments yn appearance current trace occurred previous occurrence rely function identify arguments 
note yn condition characterizing rtp yn holds vacuously 
time relationship verified hold yn appear 
event arguments explicitly added line 
updated line latest value slight generalization algorithm necessary dealing relations take additional constant parameter 
instance consider relation iff ob tained adding suffix case suffix may change shrink examine pairs 
example trace abc abcde value de additional pair values added trace abc abcde efg 
support relationships refinement modifies parameter needed step 
learning requires slight change algorithm 
specifically step delete variables aren exception variables ye haven appeared trace previous occurrence easily checked associating timestamps arguments checking timestamp ye timestamp previous occurrence learning requires kind change deleting old values event argument time new value seen retain values runtime storage requirements 
discuss runtime storage requirements learning single relation 
algorithm invoked times total number events trace 
assumes event arguments 
hash table representation equality relation integral types line algorithm completed time 
operation contains step completed time proportional length maintaining trie 
adding iterations arrive length xi xi denotes ith argument trace 
expression simplified noting bounded number distinct event arguments turn bounded size fsa get bound sm worst case runtime approach fsa method 
previous paragraph computed runtime executing line 
easily seen complexity line bounded size size yn smaller runtime line bound 
update value table takes time bounded length integer string relations 
runtime steps bounded runtime line complexity sm 
argument worst case size retracing arguments easy see replace average size complexity argument hold 
experiments observed relatively small larger order hundreds 
times larger result factor dominates practice sm 
leads practically efficient algorithm takes time linear size input trace file length 
easy see storage requirements learning binary relations dependent number distinct event arguments 
worst case storage complexity quadratic established practice find storage requirements linear dealing multiple traces 
obvious approach handling multiple traces process trace 
global data structures need appropriately reinitialized traces 
particular table reinitialized traces 
cleared trace 
slight modification necessary definition 
include event arguments occurrence preceded occurrence current trace previously processed traces 
specifying relations interest 
algorithm designed support common binary relations equal file name path related relations contains 
limit relationship learning arguments represent kinds objects relationship learnt file descriptors learnt file descriptor userid 
relations interest specified configuration file section shown relation equal kind fd uid path relation kind path relation kind path line specifies arguments representing file descriptors file names equality relationship learnt 
second third lines specify file name arguments relations interest 
observe model learning algorithm discounts possibility coincidental relationships sense relationship appears hold assumed real meaningful relationship 
assumption works probability accidental relationships small 
file descriptors typically range small number distinct values assumption hold 
result meaningless relations learnt relationship file descriptor argument read open entirely different file opened closed long ago 
address problem specify close fd occurs relationships involving fd learnt 
specified configuration file terminate flag close operation 
related problem involving file descriptors number useless relationships learnt 
suppose program opens file location performs read operations file locations xn corresponding argument names 
algorithm learn xn equality relationships xn xn equality relationships xn 
security perspective clear relationship xi useful relationships associate read operation name file opened 
useful learn relationship xi xj 
useless relationships specified configuration file learner avoids learning 
current implementation considers relationship file descriptor arguments useful corresponds return value open operation 

implementation implemented approach redhat linux 
implementation consists online offline component 
online component tracer uses ptrace mechanism trap system call monitored process logs information program location system call invoked values significant arguments return code system call 
tracer incorporates knowledge argument data useful filenames logged buffer arguments system calls read 
tracer performs normalization system call argument values converting filenames canonical form obtained resolving symbolic links occurrences 
system calls additional information logged inode information open stat calls ip address port information sockets 
tracer records program parameters open file descriptors command line arguments environment variables 
parameters provided arguments synthetic events generated tracer 
open file descriptors synthetic open event introduced records name file network endpoint involved 
environment variables synthetic event name derived name environment variable 
arguments name derived position argument th command line argument provided argument event named arg 
meaningful event name function program attack description detected 
chen wu ftpd format string attack overwrites userid data chen heap overflow corrupt name execve program chen stack overflow overwrite filename data cve fingerd read arbitrary file plan cve gnu rm race condition chen synthetic causing file open return stderr descriptor 
attacks effectiveness evaluation 
detection column respectively indicate attack detected violation binary relationship unary relationship 
argument position generated application specific plugin tracer maps command line arguments appropriately named event sequence 
application specific plugins obtain parameters program values specified configuration file 
offline component consists log file parser reconstructs system call events feeds learning module 
operation learning module controlled configuration file described earlier 
implementation module follows description section 
experiments rt relation variants rk 
evaluation section study effectiveness approach attack detection section followed analysis false alarm rates section 
study precision models branching factor metric proposed 
performance overheads intrusion detection discussed section 

detection attacks note principle range attacks detectable approach 
way establish effectiveness select visible exploits cert cve demonstrate detection 
helpful primarily testing easy detect attacks code injection attacks alter control flows obvious ways 
attacks detected control flow models 
real problem attacker easily adapt attack evade detection techniques 
main advantage approach due improved precision offered block stealthy attacks designed evade existing ids 
establish demonstrate detection collection stealthy attacks 
see section chose set attacks shown 
attacks designed evade techniques focused control flow hijack attacks 
category attacks studied race conditions symbolic link attacks category techniques specifically designed 
previous program behavior anomaly detection techniques don detect view behavior program hasn changed 
formally establish automated verification techniques certain attacks succeed 
show program exhibits behavior specified model provide safety guarantees regardless attack mounted 
unique feature technique outlined section 
detection stealthy attacks attacks shown obtained corresponding exploit internet developed ourself 
ran exploits verified attacks successful 
trained programs involved benign data 
reran attack verified attack caused anomaly 
investigated anomaly ensure anomaly direct consequence attack artifact resulted poor training data nonessential aspects attack 
shows attacks detected violation binary relation unary relation 
half cases essential feature attack violation binary relationship 
means previous approaches rely binary relations won able detect attacks 
remaining attacks attack table requires control flow context combined argument value believe won detected previous techniques leverage control flow information 
remaining attacks detected previous approaches argument learning 
describe attacks detail 
wu ftpd corruption user identity data 
attack exploits wu ftpd format string vulnerability 
involves code function 
pw pw uid code operation requires root privilege 
reason privilege temporarily dropped pw pw uid 
attack exploits format string vulnerability change pw pw uid 
root privilege maintained second call allows remote attacker upload download arbitrary files root user 
experiments actual attack simulated instrumenting code change value pw pw uid attack scenario 
implementation detected attack learns equality relation argument line setuid call appearing function pass invoked user logs 
equality relation violated attack 
important detect attack violation relationship alternative raising alarm absolute value argument zero raise false alarm root uses server 
corruption filename executed 
client connection telnet daemon authenticates user external program 
name program stored variable 
attack heap overflow vulnerability overwrite variable value bin sh subsequent authentication attempt user result root shell 
simulated attack similar manner previous attack 
typical configurations value bin login 
configuration easy detect attack violation value normally observed argument execve 
interesting note models successfully able handle atypical configurations may invoked different command line parameters specifying different authentication programs 
case recall tracer introduces synthetic event record command line argument 
model captures relationship argument argument execve 
manner model produced environment login program deployed environment login program named able detect attack 
directory traversal corrupting filename 
stack overflow web server evade path name checks execute arbitrary program 
attack occurs code fragment function strstr ptr return 
reject request log strstr ptr cgi bin execve ptr 
variable ptr pointer text string url requested remote client 
function checks absence presence cgi bin url cgi request handled 
purpose checks ensure programs cgi bin directory executed server 
function log buffer overflow vulnerability exploited change ptr point string cgi bin bin sh details 
subsequent check strstr ptr cgi bin successful spawns shell 
actual buffer overflow produce attack 
system learns common prefix files executed cgi bin directory cgi bin directory file name argument execve 
condition violated attack approach able detect 
fingerd symlink vulnerability 
programs assume file names regular names contain symbolic links 
attacks crafted violating assumption 
describe example symlink vulnerability old versions bsd fingerd 
server uses local finger client program serve remote requests 
server runs root privileges executes client dropping privileges 
allows attack user create symbolic link called plan home directory points file readable root shadow password file 
running finger remote site see contents file 
vulnerability arises code snippet show text function verifies presence file shown check symbolic link 
lstat return fd open fp fd 
essential aspect attack file name read isn directory user 
detected approach violation relationship command line argument specifies name user directory filename opened 
recall resolve symbolic links filenames learning detection 
attack potentially detected observing resolved filename plan raise false alarm user symbolic link benign way say linking plan file named schedule 
race condition attacks 
race conditions file access occur applications incorrectly assume sequence operations files atomic 
prototypical example setuid root program access system call check real user access file open open 
calls attacker typically real user change access call succeed time open executed points file isn accessible 
race condition attacks hardest attacks detect led development detection techniques specifically targeting 
interesting note specialized effort approach detect 
demonstrate ability approach detect realworld race attacks selected race condition rm gnu file utilities package 
attack exploits fact rm descends subdirectory chdir subdirectory chdir 
window time descend ascend operations attacker move subdirectory higher 
result second chdir operation going directory invoked 
instance consider operation rm tmp contains subdirectory rm descends tmp attacker rename tmp tmp rm executes chdir go tmp start deleting files tmp different original intent removing subdirectory tmp attack typically rm invoked root clean directories tmp attacker write permission subdirectory tmp experiments inserted sleep command rm program obtain sufficient time window launch actual attack 
rm program implementation learnt relationship command line argument arguments unlink rmdir system calls arguments system calls directory name command line argument 
relationship violated attack detected 
types race conditions detected violations path relationships 
robust detection technique rely inode numbers filenames obtained 
attacks file descriptors 
programs may assumptions meanings file descriptors descriptor corresponds stderr 
example setuid program vulnerability described fd open passwd str read user fprintf stderr user entered str attacker execve program closing stderr open passwd return file descriptor subsequently fprintf effect writing user provided data password file 
attack detected violation unary relationships learnt file descriptors 
verifying security properties models note security policy statically verified respect model learnt technique assured intrusion detection system detect attack violates clearly beneficial deterministic assertions anomaly detection system 
verification security policies expressed extended finite state automaton finite state automaton remember finite number values file names 
technically automata capture negations safety properties accept traces violate desired security property 
models extended finitestate machines accepting normal execution traces 
verification amounts intersection property model automata checking language accepted automata nonempty 
property violated 
verifier written xsb prolog system suited writing verification tools 
focus section results verification verification process omit technical details process 
properties verified tar gzip find find executes programs specified exec command line option 
verify property need application specific command line parser recognize parameter exec switch generate corresponding synthetic event 
property states argument execve find equal exec argument 
equality relationship learnt model involving exec parameter argument execve property easily verified 
files read tar reside directory specified command line 
need application specific command line parser generate synthetic event captures value directory argument 
done model learns files read tar directory configuration files shared libraries get loaded process start 
policy allows reading configuration files libraries files specified directory verified model 
file written gzip obtained adding gz suffix argument 
similar previous examples property verified problem note property holds gzip typical command line options 
need complex policy correlates command line parameters files accessed 
training detection program trace length trace length false alarm rates base unary binary httpd instances verify properties manner expected 
instance case httpd tried verifying property files executed cgi bin directory 
verification succeeded subsequently realized number distinct executables seen training trace small approximation taken place 
scripts executed approximation common prefix unary relation applied 
multiple cgi bin directories learning algorithm currently learns single common prefix common prefix directories just model capture executed files 
result verification succeed case 
handle problem learning algorithm needs extended handle disjunctions certain variables satisfy binary relations unary relations 
topic continuing research 

false alarm analysis determine false positive rates trained system system call traces different lengths 
training system run detection mode different system call trace 
useful false alarm analysis performed live traffic training scripts 
limited choice applications 
laboratory main servers exercised httpd limited false alarm analysis programs 
results tabulated show false alarm rates order note corresponds raw false alarm rates fraction system calls caused violations regard nature violations 
practical system raw alarms evaluated nature violation 
series alarms aggregated 
factors typically result significant reduction false alarm rates 
reason hard evaluate false alarm rates directly compare reported previous techniques fsa method known produce modest false alarm rate 
addition unary relations increases false alarm 
false alarm rates 
rate modestly 
note binary relations add low false positive rate higher rate observed httpd 
investigated reason due fact training trace single system call rarely executed 
values parameters calls turned bore strong relations arguments subsequent system calls 
detection system call executed times broke relations involving argument value 
fact false positives due 
address problem add notion confidence level relation number times verified training 
currently investigating approach reduce false alarms 
measures may reduce level binary relation false positives fraction false alarm rate base method 

model precision average branching factor metric originally developed wagner dean context intrusion detection measure precision models 
basically idea determine degree freedom attacker state model 
roughly measured average number branches taken program state automaton program execution 
lower branching factor translates improved model precision 
definition system calls partitioned sets dangerous harmless average branching factor defined terms branches correspond dangerous system calls 
dangerous system calls considered harmless arguments known advance 
example bin ls considered harmless argument known attacker potentially substitute argument bin sh obtain shell 
applied similar metric compute average branching factor presence argument information 
dangerous system call argument values learnt approximations system call considered harmless 
approximations learning values check binary relations corresponding argument program program states binary size kb transitions relations wu ftpd httpd find tar gv gzip 
sample model sizes test programs experiments 
program argument learning argument unary unary learning binary rels wu ftpd httpd find tar 
average branching factor program workload enforcement overhead overhead detection overhead gzip compress mb file 
gv open browse kb post script file 
tar archive files mb tar file 
find search header files directory tree files 

exists lossless binary relation call considered harmless 
relation equal considered lossless 
relations contains considered lossless constant parameters contain wild card patterns 
instance lossless iff constant parameter contain wild card pattern 
hand relation lossy common directory name retained rest argument information lost 
shows average branching factor models argument learning learning unary relations learning unary binary relations lose significant information mentioned 
table shows binary relations leads major improvements branching factor 
point average branching factor technique directly compared techniques fsa control model 
reason directly compare results reported 

performance overheads model sizes 
shows programs experiments model sizes terms number states transitions relations models 
models relatively small compared size programs involved 
time learning models 
studied performance learning algorithm 
programs considered httpd ftpd 
training traces mb mb consisting system 
overhead intrusion detection calls 
learning algorithm took minutes process traces 
overhead intrusion detection 
current implementation uses ptrace system call interception introduces high runtime overheads interception exceed programs 
obtain better performance kernel interceptor 
overheads system call interception including costs retrieving pc reported kernel implementation 
addition intrusion detection requires verification binary relations cost making calls file names 
measured overheads individually user level implementation shown 
find represents worst case scenario terms overheads performs large number system calls involving file names incurs overhead call overhead verifying relationships file names 
kernel implementation lower overheads overhead numbers relationship verification change 

related 
static analysis techniques number static analysis techniques developed building intrusion detection models 
sourcecode analysis binary analysis 
extract system call arguments appear immediate constants program 
binary analysis approach additionally asso calling context extracted static data data flow analysis 
incorporate environment dependency program models 
dependency needs specified manually approach 
contrast approach learns dependencies automatically 
primary benefit static analysis techniques eliminate false alarms 
models conservative capturing superset possible behaviors exhibited program 
conservative nature limits attack detection ability attacks cause program runtime behavior deviate code detected 
means variety attacks input validation errors race conditions detected erroneous behaviors represent possible behaviors victim program 
result attacks discussed detected methods 
capturing accurate information data values quite challenging complexities language allows arbitrary type casts pointer arithmetic 

learning approaches intrusion detection 
number techniques learn control flow behaviors intrusion detection discussed focus attention techniques learning argument information 
regard describes techniques learning statistical information system call arguments anomaly detection 
statistical information includes properties string arguments length distribution characters 
furthermore structural inferences string arguments learn regular grammar describes normal values 
proposes host anomaly detection system uses rule learning algorithm model system call behaviors incorporating argument information 
uses rule learning algorithm captures fixed number distinct values frequently occurring arguments 
terminology approaches focused unary relations primary strength approach learning complex binary relations 
approach able utilize controlflow context improve precision dataflow relationships approaches don 
hypothesizing program properties 
describes technique automatically extracting program properties execution traces 
relies humans specify regions trace property extraction attempted 
contrasts technique fully automated 
similar goals fully automated :10.1.1.1.8645
primary difference technique focus invariant properties algorithm focused temporal properties traces 
cally problems quite different requiring different techniques employed 
instance algorithms learning invariants speeded exploiting transitivity holds need explicitly verify unfortunately true trace properties 
mobile code security 
described models similar :10.1.1.59.7427
goal provide view model carrying code approach mobile code security provides superficial treatment models :10.1.1.59.7427
results improves important ways :10.1.1.59.7427
develop formal treatment dataflow properties 
second show control flow contexts different control flow models utilized improve precision dataflow relationships limited fsa method :10.1.1.59.7427
third develop efficient algorithm learning relationships analyzing complexity 
fourth show parameterize model incorporating dependence program environment including command line argument environment variables open file descriptors 
importantly provide detailed evaluation technique intrusion detection concerned mobile code security :10.1.1.59.7427

approach enhancing accuracy host intrusion detection models capturing dataflow information 
approach layered existing techniques learning control flows 
formal treatment data flow properties traces efficient learning algorithm parameterized respect relations interest 
experimental evaluation showed approach effective detecting sophisticated attacks previous techniques fail 
established models compact produce low false alarm rates 
important benefit approach enables formal reasoning security guarantees provided models intrusion detection 
acknowledgments saha invaluable help verification liang support system call interposition environment model extraction 
daniel du yow jian lin ramakrishnan discussions model extraction verification 
anonymous reviewers insightful comments suggestions 
ammons bodik larus 
mining specifications 
acm symposium principles programming languages popl january 
bishop 
checking race conditions file accesses 
computing systems 
cert cc 
cert advisory ca multiple vulnerabilities wu ftpd 
chen dean wagner 
model checking lines code 
network distributed system security symposium san diego ca february 
chen xu iyer 
data attacks realistic threats 
usenix security symposium baltimore md august 
feng huang jha lee miller 
formalizing sensitivity static analysis intrusion detection 
ieee symposium security privacy 
feng lee gong :10.1.1.13.6179
anomaly detection call stack information 
ieee symposium security privacy may 
common security exploit vulnerability matrix 
published world wide web url www tripwire com files literature poster tripwire exploit poster pdf 
gao reiter song 
gray box extraction execution graphs anomaly detection 
acm conference computer communications security ccs pages washington dc october 
gao reiter song 
gray box program tracking anomaly detection 
usenix security symposium pages san diego ca usa august 
ghosh 
study neural networks anomaly misuse detection 
usenix security symposium washington dc august 
jha lee miller 
environment sensitive intrusion detection 
advances intrusion detection raid september 
jha miller 
detecting manipulated remote call streams 
usenix security symposium san francisco ca august 
jha miller 
efficient contextsensitive intrusion detection 
network distributed system security symposium san diego ca february 
hofmeyr forrest somayaji 
intrusion detection sequences system calls 
journal computer security 
ko fink levitt 
automated detection vulnerabilities privileged programs execution monitoring 
annual computer security applications conference ac sac december 
robertson vigna 
automating mimicry attacks static binary analysis 
usenix security symposium baltimore md august 
vigna 
detection anomalous system call arguments 
european symposium research computer security gj vik norway october 
lam chiueh 
automatic extraction accurate application specific sandboxing policy 
advances intrusion detection raid sophia antipolis french france september 
chapin 
detection file race conditions 
international journal information security 
michael ghosh 
simple state approaches program anomaly detection 
acm transactions information system security 
perkins ernst :10.1.1.1.8645
efficient incremental algorithms dynamic detection invariants 
acm international symposium foundations software engineering fse newport beach ca usa november 

improving host security system call policies 
usenix security symposium washington dc usa august 

gnu recursive directory removal race condition march 
bugtraq mailing list 
sekar 
fast automaton approach detecting anomalous program behaviors 
ieee symposium security privacy 
sekar basu :10.1.1.59.7427
model carrying code practical approach safe execution untrusted applications 
acm symposium operating systems principles sosp bolton landing new york october 
chan 
learning rules system call arguments sequences anomaly detection 
icdm workshop data mining computer security pages 
yee 
dynamic detection prevention race conditions file accesses 
usenix security symposium washington dc usa august 
ray joshi 
preventing race condition attacks file systems 
acm symposium applied computing sac 
wagner dean 
intrusion detection static analysis 
ieee symposium security privacy oakland ca may 
wagner soto 
mimicry attacks host intrusion detection systems 
acm conference computer communications security ccs 
forrest pearlmutter 
detecting intrusions system calls alternative data models 
ieee symposium security privacy pages 
wespi dacier debar 
intrusion detection variable length audit trail patterns 
advances intrusion detection raid toulouse france october 
wikipedia 
en wikipedia org wiki trie 
xsb 
xsb logic programming system 
available www cs sunysb edu 
