discovering frequently changing structures historical structural deltas unordered xml zhao cais nanyang technological university singapore 
pg ntu edu sg ibm india research lab india 
ibm com department social informatics kyoto university japan 
large amount done xml data mining 
observed existing works focus snapshot xml data xml data dynamic real applications 
best knowledge existing works addressed issue mining history changes xml documents 
mining results useful applications xml change detection xml indexing association rule mining classification propose novel approach discover frequently changing structures sequence historical structural deltas unordered xml 
structure discovering process efficient expressive compact data model historical document object model dom proposed 
model basic algorithms discover frequently changing structures scans xml sequence 
experimental results show algorithms optimization techniques efficient scalable 
categories subject descriptors database management database applications data mining 
general terms algorithm design experimentation 
keywords xml data mining 

increasing research efforts mine xml data 
existing mining xml data includes frequent substructure mining classification association rule mining :10.1.1.13.6173
frequent substructure mining researched topic 
basic idea extract substructures subtrees subgraphs occur frequently set xml documents individual xml document 
frequent substructures efficient querying classification xml documents 
motivation permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
cikm november washington dc usa 
copyright acm 
existing research frequent substructure mining agm fsg treeminer gspan focus discovering frequently occurred substructures structural data collections 
example suppose collection xml documents describe detail information university professors 
figures tree representations xml documents 
applying existing state art structure mining techniques frequent substructures discovered 
example applying gspan mining approach structures shown figures returned frequent substructures mining results 
existing approaches xml mining focus snapshot xml data real life xml data dynamic 
xml data may change time different ways 
example consider document publication activity professor may change time 
figures tree representations versions document 
black circles represent newly inserted nodes elements attributes 
gray circles denote deleted nodes 
bold circles nodes contents updated 
insertions deletions nodes considered structural changes content changes refer updates 
save space structural changes 
ci ji pi represent conference journal element attribute id dynamic nature xml leads challenging problems 
maintenance frequent substructures 
data source changes new frequent structures may added old ones may frequent 
second discovery novel knowledge hidden historical changes xml data difficult impossible discovered snapshot data 
focus discovering novel hidden knowledge historical changes xml data 
consider different versions xml documents novel knowledge discovered 
notice list means exhaustive 
frequently changing structure content structure rooted xml content activity changed frequently structure content rooted bio changed history 
web delta association structure rooted publication changes structure activity changes 
change patterns papers inserted root xml nodes cfp frequently deleted inserted 
professor bio activity publication project edu academic pc chair nsf industry academic project stanford ibm editor nsf almaden dm publication xml phd assistant ibm almaden author ucla professor uiuc research bs center year title conf ucla jack sigmod sigmod ms mit phd cmu tree representation xml document tree representation xml document version professor professor bio professor activity project publication edu academic industry bio frequent substructure frequent substructure activity edu bio research project cfp edu academic industry dm bio applications knowledge useful applications association rule mining changes xml xml change detection web usage mining applications representative potential wide range applications 
association rule mining set frequently changing structures sequence structural deltas represented transactions 
consequently association rules discovered treating delta transaction 
considering structural data shown suppose set structures rooted nodes dm xml ai cfp sequence structural deltas transformed transactions dm xml cfp xml ai 
applying existing association rule techniques association structural changes discovered 
association rules useful monitoring predicting underlying change trends web sites commerce monitoring change pattern users navigation behavior issue addressed previous 
web usage mining lot done web usage mining 
existing works focus snapshot web usage data usage data dynamic real life 
knowledge hidden historical changes web usage data reflects web access patterns wap change critical adaptive web web site maintenance business intelligence web usage data considered set trees similar structures xml documents 
partitioning web usage data user defined calendar pattern obtain sequence changes historical web access patterns 
changes useful knowledge certain web access professor activity industry publication db ai research project cfp xml journal conf xml version document example activity bio research activity journal conf professor bio research publication db dm publication project cfp version document ai version document patterns changed parts changes frequently parts extracted 
preliminary results mining changes historical web access patterns shown 
xml change detection major limitations existing xml change detection systems scalable large xml documents 
set web delta association rules frozen structures extracted historical changes scalability xml change detection system improved 
suppose association rule states part xml document changes time part change 
skip part document change detection part changes 
similarly frozen structures expected change seldom change 
time eliminate corresponding parts xml document change detection 
knowledge loading entire xml documents parts documents change loaded compared 
believe improve efficiency scalability change detection process especially large xml documents 
overview list knowledge may observe core foundation knowledge frequently changing structure content knowledge discovered 
focus discovering frequently changing structure fcs applications data described structural way chemical compounds biological data computer network web browsing history 
archive applications sigmod record dblp xml documents content update rare structural information critical 
deal unordered xml documents unordered model xml suit able database applications 
say xml mean unordered xml 
existing state art xml mining techniques fail extract frequently changing structure 
apply techniques repeatedly sequence snapshots xml data discover knowledge accurately efficiently 
suppose versions xml collections denoted xn 
take gspan algorithm example 
version gspan applied sets frequent structure mining results denoted mn 
postprocessing sequence mining results may find sets structures mn set structures frequent time points mp mq set structure frequent time point frequent time point structures may reflect change patterns frequencies accurately 
example structures may changed may changed may depend changes structures data collections 
possible may deleted position document inserted position document 
similarly structures may changed may changed 
may result changes changes total number transactions minimal support threshold mining postprocessing processes expensive 
example shows applying existing xml mining techniques repeatedly list knowledge discovered accurately efficiently 
sequence xml documents different versions xml document fcs mining discover substructures change frequently significantly sequence xml structural deltas 
propose algorithms extract frequently changing structure xml structural deltas 
major phases dom construction phase fcs extraction phase visualization phase 
phase sequence historical xml documents structural deltas calculated stored dom historical document object model 
second phase data mining techniques extract frequently changing structures traversing dom tree 
lastly visualization phase frequently changing structures tree representation easily interpreted 
experiment results show algorithms successfully extract frequently changing structures efficiently 
dom tree compact size original size xml sequence 
observed space optimization techniques dom tree compact consequently algorithms scalable handle mb xml sequence 
major contributions summarized follows 

propose novel approach best knowledge discover hidden knowledge sequence historical structural deltas xml documents 

algorithms mining frequently changing structure optimization techniques proposed implemented 

list applications frequently changing structure mining results useful 

conduct extensive experiments different datasets varying parameters show performances algorithms optimization techniques 
rest organized follows 
section related research 
section presents background fcs mining 
dom model fcs mining algorithms different optimization techniques described section 
detailed experimental results reported section 
section concludes 

related xml data semi structured widely data mining semi structured data attracted research efforts :10.1.1.13.6173
existing focus discovering frequent substructures collection semi structured data xml documents 
agm apriori algorithm mining frequent substructures 
results agm restricted induced substructures 
fsg apriori algorithm mining connected frequent subgraphs 
experiments results show fsg considerably faster agm 
agm fsg scale large database 
gspan algorithm extracting frequent subgraphs candidate generation 
employs depth search strategy graph database 
agm gspan needs elaborate computations deal structures non canonical forms 
treeminer proposed discover frequent embedded substructure generalization induced substructure 
treeminer scale large xml documents 
discovered frequent substructures explored improve applications xml querying xml classification different techniques focus designing ad hoc algorithms extract structures occur frequently snapshot data collections fcs mining extract structures change frequently sequence historical xml versions 
considering dynamic nature xml data efforts directed research change detection xml data 
different techniques proposed 
xml computes difference xml documents hash values simple tree comparison algorithm 
proposed detect changes ordered xml documents 
insertion deletion updating support move operation 
diff designed detect changes unordered xml documents 
fcs mining extend xml change detection technique discover hidden knowledge history changes unordered xml data data mining techniques 

background section background knowledge types structural changes xml data dynamic metrics 
give problem statement frequently changing structure mining 
types xml structural changes structure xml document modelled tree structure document object model dom specification 
section different types structural changes xml documents tree representations 
traditionally changes xml documents represented types edit operations 
basic operations composite operations represented list basic operations 
insert name value insert node node name name node value value leaf child node node delete delete leaf node update new value change value leaf node new value 
note value updated name 
insert tx insert subtree tx rooted node delete tx delete subtree tx rooted node edit operations edit script defined sequence edit operations transform xml document version 
edit operations change structure xml documents 
example update operation change structure document 
corresponding structural changes define structural edit script sequence edit operations convert structure 
similar edit script update operations excluded structural edit script 
example structural edit script structure figures version version delete delete insert cfp insert cfp easier locate edit operation affiliated node defined edit operation 
insertion operations affiliated nodes nodes deletion updating operations affiliated nodes definitions model structures xml documents unordered labeled rooted tree structures 
denote structure xml document set labeled nodes set edges root 
distinguish elements attributes mapped set labeled nodes 
edge ordered pair nodes parent size structure denoted number nodes definition 
substructure structure substructure denoted provided ii parent say contains superstructure example definition structure substructure structure substructure structure 
definition 
structural delta si si tree representations xml documents xi xi 
structural delta xi xi represented structural edit script om transforms si si denoted si om si 
size structural delta denoted defined number basic edit operations structural edit script 
consider previous example structural delta version version delete delete insert cf insert cf value basic edit operations shown colored circles 
definition 
structural delta substructures sequence structural delta xml document tree representation suppose ns es rs substructure sequence structural delta denoted operation oj affiliated nodes ns 
reconsider examples 
substructure rooted node activity corresponding structural delta empty structural delta example 
definition 
consolidate structure structures si sj ri rj 
consolidate structure denoted si sj ns ns ns ii es parent es es consider structures 
substructures rooted node bio consolidate structure structure rooted node bio 
example observed different substructures xml document change different ways different frequencies 
evaluate historical behavior different substructures propose set dynamic metrics 
definition 
structure dynamic si si tree representations xml documents xi xi suppose si 
structure dynamic document xi document xi denoted ni defined ni ni structural dynamic version 
consolidation structure total number unique nodes versions obtained si si 
includes nodes version nodes deleted version ni percentage nodes changed xi xi number nodes consolidation structure 
example consider structures shown figures 
calculate structure dynamic value substructure rooted node dm version version 
definition dm dm dm 
consequently dm 
observed ni 
inserted deleted corresponding value structure dynamic si si change version version value structure dynamic 
implied larger value structure dynamic significantly substructure changed 
definition 
version dynamic sn tree representations xml documents xn suppose sj 
version dynamic denoted defined vi vi si si consider different versions xml document 
calculate version dynamic value substructure rooted node xml 
value 
delta xml 
similarly 
vi 
consequently version dynamic substructure 
observed 
changed ver sion history corresponding value vi version dynamic value 
change history value vi version dynamic value 
implies larger value version dynamic frequently substructure changed history 
major difference ni measures changes history ni measures local changes consecutive versions 
substructure value version dynamic sequence values structure dynamic 
measure change behavior substructure terms significance frequency proposed dynamic metric named degree dynamic denoted dod 
dod extension structure dynamic incorporating version dynamic metric 
represents significance structural changes history 
definition 
degree dynamic sn tree representations xml documents xn suppose sj ni values structure dynamic version dynamic degree dynamic dod defined dod di di ni ni pre defined threshold structure dynamic 
metric dod defined threshold structure dynamic 
represents fraction versions structure dynamic values substructure predefined threshold total number version substructure changed history 
consider examples shown 
calculate dod value substructure rooted node xml 
previous examples know structure dynamic values substructure 
version dynamic value 
suppose threshold structure dynamic set value dod 
threshold structure dynamic set corresponding dod value 
obvious dod 
extended structure dynamic value dod implies significance substructure larger value significant changes 
problem statement problem frequently changing structure mining discover structures changed significantly frequently history 
set metrics frequently changing structure defined follows 
definition 
frequently changing structure sn tree representations xml documents xn thresholds structure dynamic version dynamic degree dynamic respectively 
structure sj frequently changing structure fcs sequence iff dod 
fcs defined predefined thresholds dynamic metrics 
significance changes defined structure dynamic degree dynamic frequency changes defined version dynamic 
example 
consider versions xml shown example frequently changing structure structure rooted node xml shown 
structure may indicate corresponding professor active research area xml 

algorithms section algorithms discovering frequently changing structures 
data model representing storing history structural delta proposed 
overview algorithms followed algorithms fcs mining 
identify limitations algorithms set optimization techniques 
dom model structure xml document represented stored tree dom tree proposed 
frequently changing structure mining problem sequence history xml documents efficient store sequence dom trees 
dom model represent history changes xml data 
dom extension dom model historical properties compress history changes xml single dom tree 
general model store representing historical changes xml data including structure content insert delete update 
formally define dom tree follows definition 
dom dom tree tuple set object identifiers set labelled directed arcs string function maps node set values cn cv cn integer cv binary string distinguished node called root 
elaborate parameters cn cv 
parameters introduced record historical changes substructure 
cn integer records number versions substructure changed significantly structure dynamic corresponding threshold 
cv binary string represents historical changes substructure 
length string equal number deltas xml sequence 
ith publication xml ai db dm publication xml dm ai part dom tree digit string denotes change status structure xi xi value means structure changed value means change 
types changes specified cv focus frequency significance changes 
dom tree cv value structure updated formula cv cv cv cv sj sj substructures part dom structure sequence 
suppose threshold structure dynamic cn value node xml means structure changed twice history structure dynamic value 
cv value node means node changed 
cv value internal nodes root node calculated formula 
cv cn values dynamic metrics calculated follows 
cv sj sj list descendant st ti nodes cv sj ith digit cv sj 
ni cv cv ith digit cv total number xml documents 
cn dod cv cv ith digit cv total number xml documents 
dom model inspired fp tree association rule mining 
designed preserve compress historical structural information xml versions 
dom compresses historical structural data representing identical nodes dom tree related historical information preserved binary string integer 
compared fp tree compactness dom higher nodes may appear links 
extracted candidate generation process traversing dom exactly fp tree conditional fp tree generation process 
feature dom tree expresses temporal features xml structures 
fcs algorithm phases fcs mining 
dom construction phase fcs extraction phase visualization phase 
sequence historical xml docu ments dom tree constructed phase 
store structural delta xml files original diff algorithm integrate change detection mapping processes 
second phase extract fcs dom tree 
mining results displayed users visualization phase 
section focus dom construction fcs extraction visualization phase quite straightforward 
dom construction algorithm describes process dom construction 
sequence historical xml documents dom tree initialized structure version 
algorithm iterates versions extracting structural deltas mapping dom tree 
sx diff function modification diff algorithm generates structural change different versions document 
structural delta mapped dom tree mapping rules described algorithm 
process iterates xml document left sequence 
dom tree returned output phase 
algorithm describes mapping function 
dom tree structural changes function map deltas dom tree return updated dom tree 
idea update corresponding values nodes dom tree nodes structural delta 
values nodes updated rules node exist dom tree node inserted 
value cv set ith digit string set version number structural delta 
addition ni value calculated 
ni cn set cn values parent nodes incremented ni 
cn set process terminates 
ii nodes exist dom value cv updated inserting ith digit cv version number structural delta 
value cn updated ni 
similarly ni cn incremented cn values parent nodes updated rule ni 
cn change process terminates 
fcs extraction phase dom tree values required parameters structure dynamic version dynamic degree dynamic node calculated compared predefined thresholds 
fcs version dynamic degree dynamic thresholds calculate parameters determine necessary calculate parameter 
parameters satisfy definition substructure fcs 
algorithm version dynamic node checked corresponding threshold 
threshold check degree dynamic 
considering traversal strategy dom tree approaches analyzed bottom level level approach top breath approach 
come details traversal strategies lemmas extraction phase efficient 
lemma 
ni nj nodes substructures rooted ni nj denoted sn sn respectively 
ni ancestor nj sn sn 
proof 
proof intuitive 
previous definition node changes include node considered changed 
indicates number versions superstructure changed substructures 
consequently concluded version dynamic superstructure version dynamic substructures total number versions 
lemma 
structures substructure 
threshold dod necessary condition structure fcs cn 
proof 
lemma infer 
necessary condition structure fcs degree dynamic threshold cn cn inferred cn 
lemmas observed necessary traverse entire dom tree 
skip checking structures 
lemma top traversal strategy 
reach node version dynamic threshold necessary traverse substructure version dynamic substructures definitely threshold 
lemma bottom traversal strategy 
case node calculate version dynamic value cn value node checked value si si substructures 
cn si necessary calculate version dynamic degree dynamic structure fcs 
lemmas top fcs extraction algorithm bottom fcs extraction algorithm algorithm algorithm 
algorithm analysis section analyze time complexity space complexity fcs basic algorithms 
visualization trivial focus analysis second phases 
time complexity phase dom tree constructed sequence historical xml documents 
phase xml document parsed consecutive versions compared 
tn tn denote number nodes sequence xml documents structure deltas respectively 
complexity sx diff ti ti max deg ti deg ti log max deg ti deg ti 
complexity mapping process ti 
sx diff mapping process iterate times phase cost initialization 
ti ti dominant iteration sx diff 
complexity phase max ti ti max deg ti deg ti log max deg ti deg ti 
phase dom traversed parameters potential calculated compared predefined thresholds 
matter traversal strategy choose upper bound phase entire traversal dom tree total number nodes dom tree 
practice actual cost phase substantially cheaper lemma lemma reduce traversal space 
analysis inferred bottleneck fcs mining structural change detection process expensive process 
space analysis fcs basic algorithms history xml structural deltas stored dom tree processed memory 
space cost algorithm size dom tree 
algorithm observed size dom tree depends overlaps consecutive versions 
number xml documents value average number nodes significantly change larger size dom structural data stored unique node store size dom larger total size sequence xml documents 
sizes xml documents increase changes significant number xml documents increases size dom increase accordingly 
upper bound space requirement sn sn tree representations xml documents sequence xn optimization techniques analysis fcs basic algorithms section propose optimization techniques 
compression techniques build merge strategy dtd pruning technique 
objective techniques algorithm scalable reducing size dom tree 
compression technique dom model suppose versions xml sequence 
node length binary string represent history changes 
observed size string large digits useful node dom change twice insertion deletion 
consequently binary string integers represent changes 
consider dom tree example 
node suppose deleted th version cv value node basic approach 
store integers represent changes 
basic algorithm space requirement bites strategy requires bites integers 
obvious strategy efficient terms space 
usually get useful knowledge changes number versions greater 
building merging strategy input sequence xml versions threshold structure dynamic alpha output dom tree initialized delta sx diff mapping delta algorithm endfor return algorithm dom construction input dom tree threshold structure dynamic alpha structural delta delta output updated dom tree ni delta ni null ni update ni ni ni alpha update ni ni parent endif endfor endif endfor return algorithm mapping statistics datasets symbol description non number nodes nov number versions oc changes description datasets input dom tree threshold version dynamic dod beta gamma output set fcs root nodes null top bread approach ni beta dod gamma updated incorporating endif prune descendants endif endfor return algorithm fcs extraction top input dom tree threshold version dynamic dod beta gamma output set fcs root nodes ni null cn gamma times ni beta dod gamma updated incorporating endif endif endif endfor return algorithm fcs extraction bottom size dom kb input dom tree threshold structure dynamic alpha structural delta delta output updated dom tree delta ni deleted alpha update prune descendants update endif endfor return algorithms experimental results parameters symbol description threshold ni threshold threshold dod source data non nov oc sigmod dblp synthetic basic algorithms observed structure deleted cn cv values change change happen 
structure fcs determined 
differ fcs basic algorithms propose keep substructures dom tree 
structures fcs deleted root nodes stored dom summarized historical information 
strategy size dom tree reduced 
consider dom tree 
suppose coming version substructures rooted dm db deleted 
thresholds substructure dm fcs substructure db 
store entire substructure dm db root node dm stored summarization historical information 
similarly substructure db merged parent node shown building merging algorithm shown algorithm 
algorithm building merging pod poi percentage change experimental results size dom tree description datasets dataset non nov oc description datasets table symbols descriptions datasets source data non nov oc sigmod dblp synthetic dtd pruning technique observed history structural changes nodes change history 
necessary store information fcs mining 
prune nodes dom construction phase dom tree compact efforts checking nodes avoided 
help dtd schema elements attributes xml documents categorized classes 
elements attributes inserted deleted individually classified class elements attributes inserted deleted individually class 
dtd know elements defined occurrences inserted deleted elements defined default required exactly occurrence deleted inserted individually 
dtd pruning strategy maps nodes belong class nodes class merged parent nodes save space 
example suppose elements bs ms phd defined required subelements exactly occurrence element edu 
store entire substructure rooted node edu represented single node edu dom tree 

performance study experimental setup dataset ran experiments pc intel pentium ghz cpu ram hard disk microsoft windows 
implemented basic algorithms bottomup algorithm fcs basic top algorithm fcs basic 
implemented algorithms combining optimization techniques proposed 
performances quite similar section due space constraint 
fcs implemented integrating optimization techniques 
fcs implemented compression technique building merging technique xml data sequences dtds 
note optimization algorithms implemented bottom traversal strategy metrics calculated efficiently way 
synthetic xml delta sequences generated xml documents real synthetic xml documents 
real xml documents dblp sigmod xml downloaded uw xml repository synthetic xml generated ibm xml generator xml documents sequences xml versions generated synthetic xml delta generator 
experiments datasets different characteristics varying parameters algorithm 
algorithm different xml datasets show datasets affect performance 
experiments dataset possible variations parameters done show parameters affect performance 
symbols characteristics datasets parameters algorithms shown tables descriptions 
variation algorithm parameters evaluate performance algorithms fcs basic fcs basic fcs fcs varying thresholds major parameters structure dynamic version dynamic degree dynamic 
table shows characteristics datasets parameters experiments 
symbol denote parameters characteristics dataset varied experiments 
shows performance algorithms varying threshold 
sigmod xml dataset 
shows algorithms perform threshold changes 
dblp xml dataset 
describes changes threshold may affect performances 
synthetic xml dataset 
figures observations 
algorithms sensitive changes 
observation thresholds increases execution time decreases 
due fact threshold increases www cs washington edu research www alphaworks ibm com tech pruning techniques efficient search space fcs reduced 
execution time change significantly changes thresholds major cost algorithms cost sx diff independent thresholds 
shown sx diff cost total cost 
observed total number nodes increases percentage sx diff cost increases 
fcs basic algorithm stable changes sensitive changes 
due fact fcs basic uses heuristic lemma prune dom tree algorithms heuristic lemma lemma solely lemma 
dataset parameters observed differences execution time algorithms constant order 
means different traversal strategies optimization techniques time cost change significantly 
characteristics datasets evaluate performance algorithms varying characteristics datasets 
table shows values parameters characteristics datasets experiments 
shows performance algorithms sigmod varying non average number nodes xml document corresponding size xml document versions sequence 
presents performance algorithms dblp varying nov number version sequence versions versions average size xml document nodes 
evaluates performance algorithms varying oc 
synthetic dataset 
figures observations 
average number nodes non xml document increases time cost increases 
changes significant compared changes figures 
average number nodes increases sx diff cost increases pruning extraction phase expensive 
total number versions nov xml sequence increases execution time algorithms increases 
obvious total number versions increases number comparison increases accordingly 
consequently cost detection structural changes increases 
compared changes non changes nov affect performance significantly 
percentage changes oc xml sequence increases execution time increases 
fcs mining dealing deltas original sequence oc increases size delta increases 
consequently sx diff pruning extraction phases expensive 
compression efficiency experiments evaluate space efficiency algorithms comparing compactness dom tree 
table shows characteristics datasets parameters experiments 
show size dom trees different datasets different algorithms 
observe compared variation variation non variation variation nov original dataset dom trees compact 
compression rate dom tree optimization techniques 
optimization techniques fcs fcs compact fcs basic 
especially dom tree built fcs compact 
compression rate fcs experiments 
fact explains time cost fcs fcs relatively expensive shown results shown figures 
evaluate compression rate dom tree datasets different characteristics 
characteristics dataset observed percentages deletion insertion affect compression rate significantly 
shows size dom tree changes percentages deletion insertion change 
dom tree built fcs algorithm 
dataset table 
percentage changes set 
observed percentage deletion increases percentage insertion decreases size dom decreases 
nodes deleted pruning merging function efficient 
summary observations conclude proposed algorithm fcs basic fcs basic efficient scalable optimization techniques compression technique building merging strategy dtd pruning strategy improved space efficiency substantially 
experiment results users want find fcs higher version dynamic fcs basic recommended 
fcs basic best choice optimization techniques bottom manner 
fcs algorithm applied datasets fcs datasets dtds 

propose approach discover useful variation variation oc experiment results execution time size dom tree hidden knowledge history xml structural changes 
specifically focus extracting 
propose dom model represent store xml structural data history structural data preserved compressed 
dom model basic algorithms fcs basic fcs basic discover 
analyzing performance basic algorithms optimization techniques discussed 
extensive experimental evaluations dataset generated synthetic real xml documents conducted algorithms proposed 
recommendations choose algorithm discussed experiment results 
show usefulness frequently changing structures presenting list potential applications 

braga ceri klemettinen 
tool extracting xml association rules 
proc 

chen chia 
mining association rules structural deltas historical xml documents 
proc 
pakdd 
abiteboul marian 
detecting changes xml documents 
proc 
icde 
curbera epstein 
fast difference update xml documents 
proc 

han pei yin 
mining frequent patterns candidate generation 
proc 
sigmod 
inokuchi washio motoda 
apriori algorithm mining frequent substructures graph data 
proc 
pkdd 
karypis 
frequent subgraph discovery 
proc 
icdm 
wang dewitt 
cai 
diff effective change detection algorithm xml documents 
proc 
icde 
yan han 
gspan graph substructure pattern mining 
proc 
icdm 
zaki 
efficiently mining frequent trees forest 
proc 
sigkdd 
zaki aggarwal 
xrules effective structural classifier xml data 
proc 
sigkdd 
zhao 
mining changes historical web access patterns 
pro 
pkdd 
