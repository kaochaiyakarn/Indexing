middleware distributed context aware systems karen henricksen indulska ted mcfadden crc enterprise distributed systems technology dstc karen itee uq edu au mcfadden dstc edu au school information technology electrical engineering university queensland itee uq edu au org 
context aware systems represent extremely complex heterogeneous distributed systems composed sensors actuators application components variety context processing components manage flow context information sensors actuators applications 
need middleware seamlessly bind components recognised 
numerous attempts build middleware infrastructure context aware systems provided partial solutions instance adequately addressed issues mobility fault tolerance privacy 
goals provide analysis requirements middleware context aware systems drawing traditional distributed system goals experiences developing context aware applications 
provides critical review middleware solutions followed comprehensive discussion pace middleware 
provides comparison solution previous highlighting advantages middleware important topics research 
proliferation standalone embedded computing devices home environments combined variety networking technologies increases importance context awareness distributed applications 
contextaware applications adapt changes environment user requirements 
dynamic adaptation provides degree autonomy needed free users current computer centric model human computer interaction 
example sensor smart home applications unobtrusively support elderly people everyday tasks remembering take medications providing early detection behavioural changes 
reported funded part operative research centre enterprise distributed systems technology dstc australian federal government crc programme department education science training 
complexity developing context aware applications middleware essential requirement 
middleware solutions proposed far contextaware systems address basic issues traditionally addressed middleware distributed systems including paradigms coordination communication distributed components 
offer support gathering managing context information order simplify application development promote sharing context information context sensing components 
additional requirements met 
instance solutions adequately support deployment configuration new components dynamic reconfiguration components user privacy 
evaluate current state art middleware distributed context aware applications including middleware developed pace pervasive autonomic context aware environments project 
evaluation highlight set open research problems area 
structure follows 
sections characterise context aware systems introduce set requirements middleware systems 
section review set middleware solutions analyse respect requirements 
sections introduce pace middleware demonstrate middleware support development context aware vertical handover application 
sections provide analysis solution discussion open research challenges summary contributions 
characteristics context aware systems context aware systems consist variety distributed components 
early systems relatively simple constructed simply distributed application components communicating directly local remote sensors 
today widely acknowledged additional infrastructural components desirable order reduce complexity context aware applications improve maintainability promote reuse 
illustrates distributed components current context aware systems 
addition application components sensors actuators shown extremities layered model systems include components assist processing sensor outputs produce context information applications ii map update operations higher order information back actions actuators layer context repositories provide persistent storage context information advanced query facilities layer decision support tools help applications select appropriate actions adaptations available context information layer 
programming toolkits incorporated application layer layer support interactions application components components context aware system 
programming toolkits layer layer application components layer layer decision support tools layer layer context repositories layer layer context processing components layer layer context sensors actuators fig 
components context aware system 
middleware requirements refer components reside layer application components layer sensors actuators communications framework binds distributed components middleware context aware systems 
middleware address requirements traditional distributed systems heterogeneity mobility scalability tolerance component failures disconnections 
addition protect users personal information location preferences accordance privacy preferences ensure automatic actions taken context aware applications behalf users adequately understood controlled users 
large number distributed components context aware systems introduces requirement straightforward techniques deploying configuring managing networks sensors actuators context processing components context repositories 
detailed summary requirements provided table 
survey middleware context aware systems section review analyse proposed middleware solutions context aware systems 
focus solutions span multiple layers system architecture shown fig 
exclude single layer solutions 
support hardware components ranging resource poor sensors heterogeneity actuators mobile client devices high performance servers supported variety networking interfaces programming languages 
legacy components may 

support components especially sensors applications mobile mobility communication protocols underpin system support appropriately flexible forms routing 
context information may need migrate context aware components 
flexible component discovery mechanisms required 

scalability context processing components communication protocols perform adequately systems ranging sensors actuators application components 
similarly scale administrative domains 

support flows context information distributed components privacy context aware system controlled users privacy needs expectations 

traceability state system components information flows control components open inspection relevant manipulation order provide adequate understanding control system users facilitate debugging 

tolerance sensors components fail ordinary operation context aware system 
disconnections may component occur 
system continue operation requiring failures excessive resources detect handle failures 

ease distributed hardware software components aware system easily deployed configured meet user environmental requirements potentially non experts configuration example smart home environments 
table 
requirements middleware context aware systems context servers layer models context interpretation layer 
exclude solutions general deal location sensing management 
context toolkit dey context toolkit provides set abstractions implement reusable software components context sensing interpretation 
context widget abstraction represents component responsible acquiring context information directly sensor 
widgets combined interpreters transform low level information higher level information useful applications aggregators group related context information single component 
services context aware applications invoke actions actuators applications locate suitable widgets interpreters aggregators services 
toolkit implemented set java objects represent abstractions described 
provide basic communication protocol xml 
web standards allows interoperation components implemented languages providing basic support heterogeneity 
toolkit address component discovery requirements mobility 
toolkit specifically address scalability privacy traceability control component failures deployment configuration 
context fusion networks chen propose context fusion networks provide data fusion services aggregation interpretation sensor data contextaware applications 
operator graph model context processing specified application developers terms sources sinks channels 
model sensors represented sources applications sinks 
operators responsible data processing act sources sinks 
chen implemented cfn model form solar scalable peer peer platform instantiates operator graphs runtime behalf context aware applications 
solar hosts planets support application sensor mobility buffering events periods disconnection address component failures providing monitoring recovery preservation component states 
solar address heterogeneity privacy monitoring control system users 
context fabric previous solutions context fabric proposed hong landay primarily concerned privacy context sensing processing 
provides architecture privacy sensitive systems set privacy mechanisms application developers 
architecture structures context information store tuples entity 
populated context sources sensors queried context aware applications 
hong landay implemented model web technologies identified urls tuples exchanged xml format 
provide programming model methods transferring tuples 
privacy supported dey address monitoring control providing extension context toolkit 
adding operators carry actions tuples enter leave space instance operators perform access control notify users information disclosure enforce privacy tags describe information flows 
focuses heavily privacy address traditional distributed systems requirements mobility scalability component failures deployment configuration 
partially address heterogeneity builds platform language independent web standards 
provides privacy related traceability control operator mechanism 
gaia gaia designed facilitate construction applications smart spaces smart homes meeting rooms 
consists set core services framework building distributed context aware applications 
gaia event manager service enables applications developed loosely coupled components provide basic fault tolerance allowing failed event producers automatically replaced 
gaia remaining services support various forms context awareness include context service allows applications find providers context information require ii presence service monitors entities entering leaving smart space including people hardware software components iii space repository maintains descriptions hardware software components iv context file system associates files relevant context information dynamically constructs virtual directory hierarchies current context 
smart spaces typically small constrained environments gaia address scalability issues involved spaces large scale super spaces 
similarly privacy addressed basic services potentially provided additional services user monitoring control outside gaia scope 
heterogeneity mobility component configuration supported gaia limited forms 
reconfigurable context sensitive middleware yau propose reconfigurable context sensitive middleware context aware applications 
provides application developers novel interface definition language idl specify context requirements including types context situation relevant application actions triggered timing actions 
idl interfaces compiled produce application skeletons interact runtime object request broker orb manages context acquisition situation awareness sa processor responsible managing triggers 
orb provides context manager uses context discovery protocol manage registrations local sensors discover remote sensors 
requirement context toolkit cfn solar support heterogeneity support mobility scalability support privacy traceability control tolerance failures ease deployment configuration context fabric gaia table 
middleware support requirements context aware systems 
key comprehensive partial context aware application starts discovery protocol look local remote sensors satisfy application context requirements 
prototype described yau satisfy heterogeneity requirement supports applications windows ce platform idl compiler potentially modified produce skeletons variety platforms communication protocols 
addition context discovery protocol flexible support mobility component failure yau attempt address scalability privacy traceability control 
main strength approach comes idl specify context requirements 
possible incorporate new types context context aware behaviour editing recompiling idl interfaces partially addresses ease deployment configuration 
analysis table summarises capabilities surveyed solutions shows comprehensive solutions exist 
shortcoming revealed table solutions provide decision support layer functionality 
middleware discuss introduces decision support addresses large subset requirements listed table 
pace middleware middleware developed part pace project investigates variety issues related pervasive computing including design context aware applications solutions modelling managing context information 
early form middleware tools components added subsequently developed context aware applications uncovered additional requirements :10.1.1.60.274
current version middleware consists context management system layer preference management system provides customisable decision support context aware applications layer programming toolkit facilitates interaction application components context preference management systems layer tools assist generating components layers including flexible messaging framework 
components tools developed design principles 
model context information context aware system explicitly represented system 
representation separate application components layer parts system concerned sensing actuation layers context model evolve independently requiring components re implemented 

context aware behaviour context aware applications determined part external specifications customised users evolved context model forcing re implementation components 

communication application components components middleware services tightly bound application logic significant re implementation effort required underlying transport protocols service interfaces change 
sections provide overview components tools middleware 
section illustrate development context aware system supports vertical handover media streams 
context management system middleware context management system fulfils requirements layer discussed section provides aggregation storage context information addition performing query evaluation 
uses context modelling approach context expressed terms fine grained facts higher level situations capture logical conditions true false unknown certain context 
information stored fact representation queried retrieving specific facts template matching evaluating situation definitions set facts 
context modelling approach documented previous papers described detail :10.1.1.60.274
example fact context model shown section 
context management system consists distributed set context repositories 
repository manages catalog collection context models consisting fact type situation definitions 
applications may define context models share applications 
contextaware components statically linked single repository discover repositories dynamically catalog name potentially attributes 
methods interacting context repository currently permitted order support range client programming languages platforms likewise variety discovery mechanisms including context discovery allows matching context attributes 
repository capable performing access control feature switched required 
access control mechanism allows users define privacy preferences dictate circumstances situations context information queried updated 
privacy preferences stored evaluated preference management system describe section 
current prototype consists context management layer running top relational database management system 
written java jdbc query manipulate set context databases provides clients interfaces query supports situation evaluation retrieval facts matching supplied templates update allows insertion deletion modification facts insertion new situation definitions transaction allows clients create read transactions sequence queries executed consistent set context information regardless concurrent updates subscription allows monitoring situations fact types callbacks notification interfaces implemented clients metadata allows clients discover fact types situations defined models catalog 
addition invoking methods repositories java rmi clients web interface xml programming language stubs generated context model specification 
method potentially accommodate arbitrary programming languages communication protocols currently generate stubs java python elvin contentbased message routing scheme underlying communication paradigm 
benefits elvin allows complex interactions including communication supported rmi allows example queries updates simultaneously routed multiple context repositories 
discuss stubs section 
currently context repositories behave independently developing model replicating context information java sun com products jdbc note efficient implementation terms query update time throughput performance adequate context aware applications developed far 
repositories allowing clients cache context information disconnections 
preference management system preference management system provides layer functionality builds functionality context management system 
assists context aware applications making context decisions behalf users 
main roles provide storage user preference information evaluation preferences respect application state variables context information stored context management system determine application actions preferred user current context 
applications connect store preference information preference repositories 
preferences defined terms novel preference model allows description context dependent requirements form enables combined fly support decisions users preferred choice set available candidates 
example preference model decide mode input output employed particular users requirements current contexts 
detailed description preference model outside scope information earlier papers :10.1.1.60.274:10.1.1.59.7409
benefits preference approach decision making customisation evolution context aware behaviour supported straightforward manner preferences shared exchanged applications new types context information incorporated decision making processes simply adding new preferences need modify application components 
implementation preference management system bears strong resembles context management system discuss relatively briefly 
provides interfaces update allows new preferences defined grouped appropriately sets instance owner purpose query provides preference evaluation information stored context management system transaction allows set preference evaluations occur consistent set context information regardless concurrent updates occurring context management layer metadata allows retrieval preference preference set definitions 
similar manner context repositories preference repositories respond requests clients variety communication protocols 
java clients need interact directly repositories provided java programming toolkit assists discovery interaction repositories 
describe toolkit section 
programming toolkit programming toolkit complements functionality preference management layer implementing simple conceptual model formulating carrying context choices 
model provides mechanism linking application actions candidate choices 
allows actions automatically invoked basis results evaluating choices respect preference context information services preference context management systems 
significant benefit toolkit process discovering communicating preference context management systems transparent applications 
helps produce applications cleanly structured decoupled context models better able support changes available context information 
changes result evolution sensing infrastructure time problems disconnection migration sensor rich environment sensor poor 
toolkit currently implemented java rmi communication remote components ported programming languages communication protocols 
messaging framework facilitate remote communication components context aware systems may application components middleware services ones described sections provide flexible messaging framework 
tradition middleware corba framework aims provide various forms transparency location migration transparency 
maps interface definitions communication stubs appropriate deployment environment 
stubs considerably simpler programmer apis underlying transport layers automatically re generated date allowing substitution transport layers modifying application 
stubs generated variety programming languages communication protocols including message rpc protocols 
date focused producing java python stubs elvin publish subscribe content message routing scheme 
elvin particularly appropriate building context aware systems decouples communication cooperation 
delivers messages matches message content subscriptions listeners explicit addressing able tolerate mobility support complex interactions interactions case rpc rmi allow spontaneous interactions components need explicit discovery configuration step 
ability add new listeners system fly useful debugging generating traces 
plan extend messaging framework protocols appropriate context aware systems example context routing schemes geocast performs routing location 
schema compiler toolset final piece middleware set tools capable producing custom components assist developing deploying context aware systems starting context models specified layered context modelling approach briefly outlined section 
tools take input form textual representation context model context schema perform checks verify integrity model produce outputs sql scripts load remove context model definitions relational databases context repositories model specific helper classes simplify source code concerned carrying context queries updates context model interface definitions compatible messaging framework 
output simplifies deployment evolution context models 
automating mapping context models database structures stored context repositories errors arise hand coding sql scripts jdbc code manipulate repositories avoided 
similarly updates context models supported simply re generating scripts 
envision extending tools produce alternative scripts context repositories sql 
second output designed simplify programming components query update context model includes classes represent basic value types fact types situations defined model 
programming classes generic apis provided context management layer type checking possible compile time standard ide features code completion better exploited 
final output produce stubs transmitting receiving context information communications infrastructure elvin 
context transmitters layer layer components sensors actuators processing components transmit context information context repositories 
similarly context receivers layer listen context updates require mapping operations context repositories 
information context schema toolset 
case study vertical handover illustrate middleware assists development distributed context aware systems vertical handover application case study 
application represents just context aware applications developed middleware described earlier papers 
application concerned adapting streaming media mobile user context 
adaptation occurs application layer network layer mobile ip stringent quality service qos requirements 
application adapts handing stream network interfaces single computing device interfaces different devices 
handover potentially occur response context change example user moving range network offers higher bandwidth current network signal strength current network dropping 
handover process managed adaptation managers proxies 
adaptation managers context management system monitor significant context changes order determine vertical handover occur network interface 
proxies perform handover process 
proxy located transmitter proxies located networks receivers 
transmitter local proxy proxy transmitter responsible redirecting stream receives handover instruction adaptation manager 
handover process proxy transmitter transmits stream original new proxy 
referred 
proxies receivers networks responsible forwarding streams receiver executing client device 
handover complete proxy transmitter stops transmitting original receiver proxy 
implementation architecture system including application components supporting middleware components shown fig 

remainder section demonstrate middleware implement system 
context model 
context model vertical handover prototype shown fig 

main objects described model computing devices networks network interfaces streams proxies 
model captures associations computing devices network interfaces proximity devices mappings streams proxies network interfaces basic qos information related network interfaces current signal strength bandwidth type configuration information 
information application supplied static profiled terminology context modelling approach proximity devices sensed wireless beacons current network connectivity signal strength bandwidth sensed monitors running network 
context model instantiation run time concrete facts managed set context repositories shown fig 

local network may contain repositories 
example system architecture shown diagram local networks possess context repositories network 
design system configurations possible 
schema compiler toolset described section map context model appropriate database structures context repositories deployed 
toolset generate context transmitter key control receiver stub control transmitter stub context receiver stub context transmitter stub programming toolkit migration av stream java rmi elvin events qos monitor strength context listener update handover adaptation manager notify context repository rate preference repository query proxy transmitter proxy receiver network network av transmitter proxy transmitter av receiver internet qos monitor context repository context listener fig 
vertical handover architecture 
update adaptation manager preference repository proxy transmitter proxy receiver av receiver network receiver stubs wireless beacons shown diagram network monitors adaptation managers shown networks report context information context repositories elvin context listeners map elvin notifications rmi context repository updates 
adaptation managers 
context aware functionality application concentrated adaptation managers 
components responsible determining handover required current context user preferences 
adaptation managers components interact context preference repositories 
design principles outlined section adaptation managers tightly coupled context model 
direct interaction occurs adaptation managers context repositories form subscriptions notifications allow managers learn significant context changes report new streaming configurations 
key name representation textual description profiled information sensed information static information located near object type fact type uniqueness key constraint device id interface proxy network interface id streaming connected network name stream id proxy id signal strength bandwidth type type address address direct address address signal strength nr bandwidth nr network type name network address id fig 
context model vertical handover application 
subscriptions monitor state sensed fact types 
adaptation manager notified change example drop signal strength shown fig 
uses programming toolkit described section connect preference repository re evaluate user preferences determine current network interface preferred step 
bulk context evaluation occurs step side effect preference evaluation step 
new context information easily incorporated evaluation simply extending user preferences implementation adaptation manager need change 
adaptation manager determines handover required communicates proxies step context listeners step elvin 
manager transmits handover instruction proxies elvin stubs produced pace messaging framework described section 
instructing proxies perform handover adaptation manager updates stream state information stored context repositories streaming fact type shown fig 
context transmitter stub transmit information context listeners 
analysis section briefly analyse pace middleware respect requirements set table compare earlier solutions surveyed section 
analysis highlight areas 
heterogeneity 
pace messaging framework generate stubs variety programming languages transport layers offers strong support heterogeneity 
pace middleware capable accommodating legacy components transmitters receivers vertical handover system 
pace support heterogeneity comprehensive solutions surveyed section 
yau solution bears similarities approach extended generate skeletons variety platforms discussed section 
mobility 
elvin messaging framework facilitates component mobility demonstrated vertical handover system removes need component discovery 
local context preference repositories dynamically discovered mobile context aware components variety service discovery protocols 
pace provides level mobility support comparable best solutions surveyed section 
plan extend pace current support mobility introducing caching hoarding models context preference information allow mobile components store local copies information relevant users 
scalability 
current implementation pace middleware address scalability performance said solutions surveyed section 
unsurprising developed research prototypes 
intend develop models context preference managers large scale systems large number administrative domains 
privacy 
address privacy providing access control sensitive context information 
middleware provides privacy support surveyed solutions exception 
controlling access context information addresses aspect privacy 
address aspects intend add access control preference management system combine access control context authentication 
information current privacy 
traceability control 
showed section traceability control addressed previous middleware relation privacy 
pace middleware begins address problem 
elvin facilitates generation traces event listeners added fly event traces tailored adjusting elvin subscriptions 
preference model provides basic mechanism user control customisation 
envisage opening service layers clients allow inspection manipulation context preference evaluations 
traces evaluations selectively revealed users explain system behaviours 
tolerance failures solution failure tolerance ranks solar ahead remaining solutions surveyed section 
middleware detect repair failed components elvin allows loose coupling components minimising impact disconnections failures 
addition context preference models designed assumption context information generally imperfect 
introduces tolerance failed sensors sensing errors 
deployment configuration 
pace middleware provides advanced support component deployment configuration previous solutions 
specifically messaging framework simplifies deployment components top variety platforms schema compiler toolset facilitates deployment new context models 
extensions middleware needed facilitate scalable deployment configuration infrastructural components sensors 
showed middleware essential building context aware systems introduced list requirements middleware address 
analysed current state art area provided comprehensive discussion evaluation pace middleware 
solution ranked best equal best majority requirements heterogeneity mobility traceability control deployment configuration average remaining requirements privacy tolerance failures 
advantage pace middleware provides decision support layer functionality solutions surveyed 
problems adequately addressed broader research community example scalable deployment configuration management sensors caching hoarding context information support mobility mechanisms revealing aspects system state facilitate user understanding control 

dey salber abowd conceptual framework toolkit supporting rapid prototyping context aware applications 
human computer interaction 
dey designer support context monitoring control 
technical report irb tr intel research berkeley 
chen li kotz design implementation large scale context fusion network 
st annual international conference mobile ubiquitous systems ieee computer society 
hong landay architecture privacy sensitive ubiquitous computing 
nd international conference mobile systems applications services mobisys boston 
rom hess ranganathan campbell nahrstedt gaia middleware infrastructure active spaces 
ieee pervasive computing special issue wearable computing 
ranganathan campbell super spaces middleware large scale pervasive computing environments 
workshop middleware support pervasive computing percom workshop proceedings orlando 
ranganathan campbell context aware security scheme smart spaces 
st ieee international conference pervasive computing communications percom fort worth 
yau huang gong seth development runtime support situation aware application software ubiquitous computing environments 
th annual international computer software application conference compsac hong kong 
henricksen indulska software engineering framework context aware pervasive computing 
nd ieee international conference pervasive computing communications percom ieee computer society 
indulska henricksen mcfadden common context model virtual community applications 
nd international conference smart homes health telematics 
volume assistive technology research series ios press 
segall arnold boot henderson phelps content routing elvin 
auug conference canberra 
mcfadden henricksen indulska applying disciplined approach development context aware communication application 
rd ieee international conference pervasive computing communications percom ieee computer society 
imielinski geographic addressing routing 
rd acm ieee international conference mobile computing networking mobicom budapest 
mcfadden henricksen indulska automating context aware application development 
ubicomp st international workshop advanced context modelling reasoning management nottingham 
henricksen wishart mcfadden indulska extending context models privacy pervasive computing environments 
nd international workshop context modelling reasoning percom workshop proceedings ieee computer society 
wishart henricksen indulska context obfuscation privacy ontological descriptions 
st international workshop location context awareness 
volume lecture notes computer science springer 
