generics library bruno oliveira ralf hinze andres oxford university computing laboratory wolfson building parks road oxford ox qd uk bruno comlab ox ac uk institut informatik iii universit bonn bonn germany ralf informatik uni bonn de generic function function defined structure data types single definition obtain function works data types 
contrast ad hoc polymorphic function requires separate implementation data type 
previous hinze lightweight generic programming introduced techniques allow definition generic functions directly haskell 
severe drawback approaches generic functions defined extended ad hoc behaviour new data types precluding design customizable generic programming library techniques 
revised version hinze generics masses approach overcomes limitation 
new technique writing customizable generic programming library haskell possible 
generic polytypic function function defined structure types single definition obtain function works data types 
standard examples include functions derived haskell show read 
contrast ad hoc polymorphic function requires separate implementation data type 
haskell implement ad hoc polymorphic functions type classes 
example binary encoder class encode encode bit instance encode char encode instance encode int encode instance encode encode encode encode xs encode encode xs newtype encode encode encode bit instance generic encode unit encode const char encode int encode plus encode case inl encode inr encode prod encode encode encode view iso encode encode iso 
generic binary encoder function works data types built integers characters lists 
assume primitive bit encoders integers characters provided 
lists encoded replacing occurrence bit occurrences bit followed encoding head element encoding remaining list 
function encode extended time additional data types 
write instance encode class 
time add new data type want encode values data type need supply specific implementation encode 
generics masses gm particularly lightweight approach generic programming 
techniques described write generic functions directly haskell 
contrasts approaches generic programming usually require significant compiler support language extensions 
generic binary encoder implemented gm technique 
describe technical details shape class generic section 
focus comparison ad hoc polymorphic function 
different methods class generic define different cases generic function 
characters integers assume standard definitions 
case lists subsumed generic cases unit sum product types 
viewing data types uniform way cases sufficient call encoder lists tuples trees complex data structures new instance declaration required 
situations specific case specific data type called ad hoc case desirable 
example lists encoded efficiently shown encoding constructor encode length list followed encodings elements 
consider representation sets balanced trees 
set represented multiple trees generic equality function compare sets structurally need ad hoc case set representations 
defining ad hoc cases ad hoc polymorphic functions trivial 
generic version binary encoder addition new case difficult 
case method class generic adding new case requires modification class 
say generic functions written style extensible gm approach modular precludes writing generic programming library 
generic functions concise ad hoc polymorphic functions flexible 
previous foundational provides strong basis generic programming considered non extensible generic functions 
realized authors severe limitation :10.1.1.127.8206
contributions give encoding extensible generic functions directly haskell modular overcoming limitations gm retaining advantages 
show implemented language extensions notational overhead significantly reduced 
relate solution expression problem 
rest structured follows 
section repeat fundamentals gm approach demonstrate extensibility easy achieve 
section give new encoding generic functions haskell gm modular 
section look problem pretty printing values generically show code modular pretty printer encoding 
disadvantage encoding requires programmer write relatively large amount boilerplate code generic function 
section show employ widely implemented extensions haskell language reduce workload programmer significantly 
section relate technique expression problem discuss related 
generics masses section summarise key points gm approach 
class generic functions gm approach generic programming generic function instance class generic class generic unit char char int int plus prod constr name arity constr id view iso generic binary encoder instance 
idea generic represents type generic function method type class represents case generic function 
methods unit sum product types defined follows data data inl inr data types class methods follow kinds data types parameterized types function takes additional arguments capture recursive calls generic function parameters data type 
generic functions require information constructors name arity optionally provide definition function constr 
just default implementation just ignores extra information 
define cases primitive types char int providing respectively functions char int 
view function allows generic functions haskell data types isomorphism data type structural representation 
example isomorphism data type lists data iso iso iso iso fromlist tolist fromlist fromlist inl fromlist xs inr xs tolist tolist inl tolist inr xs xs order generic functions data type programmer define isomorphism 
generic functions data type means view case 
huge improvement ad hoc polymorphic functions extended additional data type 
class rep rep generic instance rep rep unit instance rep char rep char instance rep int rep int instance rep rep rep rep plus rep rep instance rep rep rep rep prod rep rep instance rep rep rep rlist rep generic functions 
generic dispatcher order call generic function encode provide suitable value type encode 
type class rep shown infer called representation automatically 
call type class dispatcher selects correct case generic function depending type context 
note dispatcher works instance generic needs defined generic functions 
help class rep define encode follows encode rep bit encode encode rep type representation implicitly passed type class 
function encode convenience ad hoc overloaded function truly generic 
order extend function new type cases need create representation type 
example rlist generic rlist view unit plus prod rlist representation lists 
embedding generic view previously defined isomorphism lists 
section show gm approach modular way overcome problem 
extensible generic functions section consists parts part demonstrate gm functions leads non modularity 
second part show overcome limitation 
modularity problem suppose want encode lists want different encoding lists derived generically list encoded encoding length followed encodings list elements 
long lists encoding efficient separate subsequent elements lists mark list 
class generic base class generic functions methods limited 
want design generic programming library mandatory constrain limited set frequently types 
add extra case introducing subclasses class generic list list rlist default list just rlist 
list default method type class overridden instances 
example define efficient encoding lists instance encode list encode length concatmap encode extension breaks try adapt dispatcher method rep type generic easily replace context generic specific 
consequently generic functions gm approach extensible 
rules modularity cases appear generic function turned methods class generic argued impossible may necessary add specific behaviour user defined types simply known library writer 
ad hoc dispatchers problem gm approach generic dispatcher general forces specific dispatching behaviour generic functions 
solution problem simple intriguing order generic function extensible specialize rep generic function question 
class encode bit instance encode encode unit instance int encode encode int instance char encode encode char instance encode encode plus instance encode encode prod 
ad hoc dispatcher binary encoders shows obtain specializing rep binary encoder 
instances encode extract value newtype redirect call appropriate case generic 
function plays role rep defined encode encode encode trivial extend dispatcher new types 
consider ad hoc case encoding lists defined providing instance declaration encode 
corresponding dispatcher extension performed follows instance encode encode list summarize 
specializing dispatchers specific generic functions obtain encoding generic functions haskell equally expressive gm approach shares advantage code pure haskell 
additionally generic functions specialized dispatchers extensible place type class generic functions encode library easy extend programmers 
example extensible generic pretty printer section show define extensible generic pretty printer 
example non modular version gm originally wadler 
newtype pretty pretty pretty doc instance generic pretty unit pretty const empty char pretty int pretty plus pretty case inl pretty inr pretty prod pretty pretty line pretty view iso pretty pretty iso constr ar pretty ar ar text ar group nest text line pretty text generic pretty printer 
generic printer instance generic encodes generic pretty printer 
pretty printer defined wadler pretty printing combinators 
combinators generate value doc rendered string 
structural cases unit function just returns empty document plus decomposes sum pretty prints value products pretty print second components separated line 
base types char int assume existing pretty printers 
view case just uses isomorphism convert user defined type structural representation 
pretty printers require extra constructor information function constr calls pretty prints constructors 
suppose add new data type tree representing labelled binary trees 
furthermore nodes auxiliary integer value track maximum depth subtrees 
data tree empty fork int tree tree want generic functions tree 
explained need add subclass generic case new data type provide suitable view 
class generic tree tree tree view constr empty unit plus constr fork int prod rtree prod prod rtree omit boilerplate definition 
providing pretty printer tree amounts declaring empty instance default definition tree 
instance pretty demonstrate pretty printer showing outcome console session main fork fork empty empty fork empty empty main render pretty tree char fork fork empty empty fork empty empty main fork fork empty empty fork empty empty main render pretty tree pretty text char chr fork fork empty empty fork empty empty function render takes number columns available rendering document pretty prints 
render creates document pretty generic functionality provided tree char pretty prints tree interestingly second example shows tree int override generic behaviour int parameter function pretty print auxiliary values int provided int integer parameters 
extra flexibility provided possibility overriding generic behaviour required render provide dispatcher just convenient pretty function 
main render pretty fork fork empty empty fork empty empty showing lists user defined types tree generic pretty printer just reuse generic functionality results similar ones get just append deriving show data type definitions 
builtin lists 
problem lists special mix fix notation usual alphabetic prefix constructors 
fortunately seen section combine ad hoc polymorphic functions generic functions 
shall define instance pretty pretty override default definition 
instance pretty list pretty case text class pretty doc doc pretty list instance pretty pretty instance char pretty pretty char instance int pretty pretty int instance pretty pretty plus instance pretty pretty prod instance tree pretty pretty tree pretty pretty pretty 
ad hoc dispatcher pretty printers group nest text pretty rest rest text rest xs text line pretty rest xs extend dispatcher instance lists uses haskell standard notation 
instance pretty pretty list unfortunately done 
haskell special notation involving lists strings just lists characters want print conventional string notation 
need treat lists special manner need handle lists characters specially 
basically means need implement nested case analysis types 
anticipated possibility included function helps tackling problem 
basic idea behaves expected lists ones characters uses 
just haskell show class 
modify order redirect call done 
instance pretty pretty printer gm supporting list notation involved adding extra case generic required access source code generic originally declared 
contrast solution addition special case lists involve change original generic class instance pretty 
additional flexibility approach comes price ad hoc dispatchers requires programmer write boilerplate code required original gm encoding 
need add dispatcher extensible generic function 
code highly trivial certainly preferable define ad hoc dispatcher define function ad hoc polymorphic function forced give actual implementation data type 
better return single dispatcher works generic functions 
section see alternative encoding avoids duplication dispatchers 
making ad hoc dispatchers ad hoc section way write extensible generic functions requires generic dispatcher just original gm approach 
relies extensions class system particular undecidable instances standardized implemented ghc widely 
recall discussion section 
shown problem gm dispatcher fixes context method rep class generic 
subclasses generic add additional cases generic functions context rep flexible 
specific type class generic 
haskell support abstraction type classes trick achieve effect 
technique proposed hughes mmel peyton jones 
key idea type class class achieving object oriented overloading 
represent type class dictionary type encode constraint form encode plays similar role constraint form specific type encode question type variable 
see idea capture ad hoc dispatchers single definition 
type constructor represents type class want 
structural cases base cases int char handled generic instance generic unit instance generic int int instance generic char char instance generic plus instance generic prod instance list instance tree tree 
ad hoc dispatcher 
require instance generic 
tree argument respectively constrained type classes handle types 
remaining constraints form contain necessary information perform recursive calls 
just dispatcher obtain extensible encode encode encode bit encode encode similarly pretty printers just dispatcher time pretty encode pretty pretty doc pretty pretty approach requires amount programmer original gm technique modular allows write generic programming library 
discussion related section summarize main results briefly relate technique expression problem discuss closely related 
original gm shown encode generic functions haskell 
functions defined encoding extensible define new generic functions easily adding new cases variants involve modification existing code 
encodings introduce generic functions extended new cases retaining simplicity expressiveness gm approach 
important aspect gm encoding dispatching generic functions resolved statically calling generic function case defined compile time error 
results currently process assembling library frequently generic functions 
interested reader haskell source code web comlab ox ac uk bruno oliveira generics tar gz expression problem wadler identified need extensibility dimensions adding new variants new functions problem called expression problem 
solution problem allow definition data type addition new variants data type addition new functions data type 
solution require recompilation existing code statically type safe applying function variant function defined result compile time error 
solution accomplishes particular case generic functions 
easy generalize technique way applied instances expression problem 
example oliveira gibbons generalizes gm technique design pattern recast techniques 
analyze role type class solution context expression problem 
class generic plays role data type definition declares variants functions defined 
subclasses generic represent extra variants add functions need defined variants want function need provide respective case 
instances generic subclasses bodies extensible functions 
dispatcher allows encode dispatching behaviour extensible functions add new variant want functions add new instance variant 
related generic haskell gh tool supports generic programming language 
tool generate haskell code haskell compiler 
approach gh uses sums products viewing user defined types 
gh generate boilerplate code required new data types automatically 
approach need manually provide code 
generic functions extensible point add extra ad hoc case generic function 
believe major importance arguing extensible functions crucial modular generic programming library 
case gh special cases need defined 
gh external tool convenient 
approach import modules generic library 
derivable type classes proposed extension haskell allows write generic default cases methods type class 
approach data types viewed constructed binary sums binary products close relative approach gm 
main advantage trivial add ad hoc cases generic functions isomorphisms data types structural representations see section automatically generated compiler 
approach permits generic functions types kind dtc implementation lacks ability access constructor information precluding definition generic parsers pretty printers 
mmel peyton jones approach generic programming type classes 
idea similar sense type class defined generic function default methods provide generic definition 
overriding generic behaviour simple providing instance ad hoc definition 
approach shares dtc limitation generic functions types kind 
difference approach data types mapped common structure consisting sums products 
generic definitions small set combinators 
possibility type class essential approach optional helpful 
hinze propose extension haskell allows definition extensible data types extensible functions 
help extension possible define extensible generic functions types kind haskell 
proposed language modification relatively small solution advantage usable right 
furthermore give safety guarantees setting call undefined case generic function static error open data types results pattern match failure 
language possible define extensible generic functions types kind guaranteeing static safety 
novelty define flexible generic functions 
believe time solution features haskell relying solely implemented language constructs solely haskell 
jeremy gibbons ferm valuable suggestions discussions 
partially funded epsrc datatype generic programming dfg generic functional programming language projects 
peyton jones ed haskell language libraries revised report 
cambridge university press strachey fundamental concepts programming languages 
lecture notes international summer school computer programming copenhagen reprinted higher order symbolic computation pp 

hinze generics masses 
international conference functional programming acm press bird de moor hoogendijk generic functional programming types relations 
journal functional programming jansson functional polytypic programming 
phd thesis chalmers university technology hinze polytypic values possess types 
backhouse oliveira eds proceedings fifth international conference mathematics program construction july 
volume lecture notes computer science springer verlag exploring generic haskell 
phd thesis utrecht university hinze peyton jones derivable type classes 
hutton ed proceedings acm sigplan haskell workshop 
volume electronic notes theoretical computer science elsevier science preliminary proceedings appeared university nottingham technical report 
mmel peyton jones scrap boilerplate class extensible generic functions 
proceedings acm sigplan international conference functional programming icfp acm press wadler expression problem 
java genericity mailing list wadler printer 
gibbons de moor eds fun programming macmillan hughes restricted data types haskell 
meijer ed proceedings haskell workshop 
number uu cs oliveira gibbons typecase design pattern type indexed functions 
haskell workshop 
hinze open data types open functions 
technical report iai tr institut informatik iii universit bonn weirich open shut typecase 
proceedings acm sigplan international workshop types languages design implementation new york ny usa acm press 
