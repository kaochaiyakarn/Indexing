sebastian bader department computer science technische universit dresden germany integration symbolic neural network artificial intelligence paradigms constitutes challenging area research 
aim merge different major approaches intelligent systems engineering retaining respective strengths 
symbolic paradigms syntax order language appears particularly difficult 
extend idea proposed garcez gabbay show order logic programs represented fibred neural networks 
idea neural network iterate global counter clause ci logic program counter combined fibred neural network determines ci outputs atom level interpretation result fibred network computes operator tp logic program capturing semantics program 
intelligent systems artificial neural networks differ substantially symbolic knowledge processing logic programming 
neural networks trainable raw data robust practically impossible read declaratively 
logic programs implemented problem specifications highly recursive lacking training methods robustness particularly data noisy thrun 
obvious integration paradigms single systems beneficiary respective strengths retained 
exists notable body investigating integration neural networks propositional similarly logic 
refer browne sun avila garcez gabbay overviews 
sebastian bader supported gk german research foundation 
garcez partly supported foundation 
pascal hitzler supported german federal ministry education research project european union network excellence 
copyright american association artificial intelligence www aaai org 
rights reserved 
computing order logic programs fibring artificial neural networks avila garcez department computing city university london uk pascal hitzler institute aifb university karlsruhe germany order logic clear reasonable integration achieved systematic difficulties slow research efforts spelled bader hitzler lldobler 
different techniques overcoming obstacles currently investigation including metric spaces topology iterated function systems hitzler lldobler seda bader hitzler 
heart integration efforts question order knowledge represented neural network architectures 
novel approach fibring neural networks proposed avila garcez gabbay 
clause ci logic program neural network iterates counter combined fibred neural network determines ci outputs atom level interpretation fibring offers modular way performing complex functions relatively simple networks modules ensemble 
organized follows 
section briefly review fibring neural networks logic programs 
fundamental ideas underlying representation results giving details implementation worked example 
conclude discussions 
preliminaries introduce standard terminology artificial neural networks fibring neural networks logic programs 
refer reader bishop avila garcez gabbay lloyd respectively background 
artificial neural networks artificial neural networks consist simple computational units neurons receive real numbers inputs weighted connections perform simple operations weighted inputs added simple functions threshold sigmoidal identity truncate applied sum 
neurons usually organized layers 
neurons receive input neurons called input neurons outgoing connections neurons output neurons 
network computes function number input respectively output units 
key success xn wn artificial neuron left simple fibring network right neural network architectures rests fact trained effectively training samples form input output pairs 
convenience assumptions networks depicted layers updated sequentially left right layer neurons updated top bottom 
avila garcez gabbay introduced new model neural networks fibring neural networks 
briefly activation certain unit may influence behaviour units changing weights 
particular architecture slight variant original proposal appears natural purposes 
definition fibring function associated neuron maps weights network new values depending input neuron fibring functions understood modeling presynaptic weights play important role biological neural networks 
certainly necessary requirement biological plausibility fibring functions compute simple functions tasks turn performed neural networks 
return point 
dashed lines indicate weights may changed fibring function 
described update dynamics left right top bottom 
soon activation fibring neuron re calculated corresponding fibring function applied respective weights modified 
example simple fibring network squaring numbers 
node computes weighted sum inputs performs operation identity 
fibring function takes input multiplies output example simple fibring network implementing behaviour 
nodes behave example question plausible types fibring functions computational power networks studied separately touched slightly 
start general fibring functions restrict simple ones fibred weight simply multiplied activation 
output neuron activation apply linear transformations clear modifications achieved adding neuron network fibring 
modifications understood abbreviations keep networks simple 
logic programs logic program finite set clauses ln may differ clause atom order language 
ln literals atoms negated atoms clauses program understood universally quantified 
called head clause li called body literal conjunction ln called body clause 
allow abuse notation indicates body empty case clause called unit clause fact 
atom said ground contain variables herbrand base underlying program defined set ground instances atoms denoted bp 
example shows logic program corresponding herbrand base 
subsets herbrand base called herbrand interpretations think set containing atoms true interpretation 
set ip interpretations program identified power set bp 
example natural numbers program underlying language corresponding herbrand base bp 
intended meaning successor function nat 
nat nat 
constants functions relations nat bp nat nat nat 
logic programs accepted convenient tool knowledge representation logical form 
furthermore knowledge represented logic program essentially captured immediate consequence operator tp defined mapping ip ip tp set bp exists ground instance am bn clause ai bj fixed points tp called supported models understood represent declarative semantics sequel need enumerate herbrand base done level mappings definition logic program level mapping function bp denotes set positive integers excluding zero 
level mappings slightly general form commonly controlling recursive dependencies atoms prominent notion probably 
definition logic program level mapping 
clauses 
ln ground li called acyclic respect 
program called acyclic exists level mapping 
acyclic programs known unique supported models cavedon 
programs examples acyclic 
example odd numbers program level mapping 

odd 
odd assume level mappings bijective exactly bp purposes level mapping simply enumeration herbrand base 
level mappings induce order atoms define prefix function interpretations returning atoms definition prefix length interpretation defined pref ip ip 
write pref pref 
acyclic programs follows order decide atom level included tp sufficient consider pref 
logic programs fibring networks show represent acyclic logic programs means fibring neural networks 
follow basic idea lldobler lldobler st rr developed hitzler lldobler seda bader hitzler represent operator tp network program 
reasonable thing single step operator essentially captures semantics program associated mentioned 
order represent tp input output mapping network need encoding ip suitable subset real numbers 
idea lldobler st rr purpose 
integer bijective level mapping 
define ip exclude case injective 
convenient assume results depend 
denote range range 
systematic reasons way embedding ip reals reasonable hitzler lldobler seda bader hitzler concern 
prefix operation expressed naturally reals 
proposition ip range pref trunc bn pref trunc bn bn convenience overload pref set pref pref pref pref 
turn construction fibring networks approximate programs 
describe approach general terms spell formal detailed way 
goal construct neural network compute tp tp range 
network designed way successively approximates tp running 
main loop iterating global counter counter fibres kernel evaluate atom level contained tp kernel output atom contained 
furthermore input subnetwork providing time output subnetwork accumulate outputs kernel converge tp 
clause ci subnetwork determines ci outputs atom level interpretation 
done fibring subnetwork computes corresponding ground instance head level existent 
ground instance subnetwork output determine body true interpretation detailed description clause networks section 
note construction possible programs covered 
means local variables variable occuring body occurs corresponding head 
obviously programs acyclic respect bijective level mapping covered 
clause clause general architecture acyclic compute unique supported model program directly connecting output input region network shown 
simply due mentioned fact want decide atom level included tp sufficient look atoms level result 
proposition program acyclic respect bijective level mapping bp ip iff true respect unique supported model proof immediate result application banach contraction mapping principle semantic analysis acyclic programs see hitzler seda 
acyclic programs start empty interpretation recurrent network run 
implementing clauses order complete construction previous section give implementation clauses 
clause form 
lk denote ground instance head level assuming exists 
idea construction create network implements fibred counter implements case ground instance head level network output output body true respect interpretation 
tp clause clause tp recurrent architecture acyclic programs gate filter filter filter lk implementing clauses idea shown subnetwork implementing clause 
lk body literals consists parts gate filters 
gate output clause ground instance level head furthermore filter body literal li outputs corresponding ground literal li true conditions satisfied final conjunction neuron active subnetwork outputs 
note construction sufficient programs covered 
allowed local variables fact infinitely ground instances head level exist 
closer look type fibring function needed construction 
gate implicitly performs simple pattern matching operation checking atom level unifies head clause 
filters checks corresponding instances body literals true interpretation implicitly performs variable binding elementary check set inclusion 
argue operations performed fibring function biologically feasible 
perspective take understood functions performed separate network give explicitly substantiate point certain extent section 
pattern matching task connectionist networks perform 
variable binding task addressed section give examples implementing filters 
neural gates specified gate clause 
lk fires ground instance head level depicted 
decision ground instance head level exists neural gate simple pattern matching embedded fibring function 
follows discuss number different cases unfold fibring function network order give plausible network topologies simpler fibring functions 
implementations possible cases shall serve examples 
ground headed clauses 
consider clause head contain variables ground clause example clause example 
level head case fixed value say corresponding gate subnetwork fire general counter equal done network shown left neuron output neuron output weighted inputs sum 
easily implemented threshold units 

simple gates ground headed clauses left remainder classes right remainder classes 
levels li ground instantiated heads certain clause expressed multiples certain fixed number li clauses number example construct simple subnetwork depicted right 
neurons symbolize equivalence classes remainders 
network initialized activating 
time reevaluated activation simply proceeds row 
powers 
level li ground instantiated heads certain clause expressed powers certain fixed number li construct simple subnetwork shown 
simple gate powers filtering interpretations network implement ground instance hn 
clause head level need know distance head body literals terms levels function need set functions bi 
body literal bi computes level literal li input level head illustrated example 
example odd numbers program example bi functions 

odd 
body literal construct filter subnetwork fires corresponding ground body literal included interpretation need decide certain atom included 
underlying idea 
order decide atom level included interpretation construct interpretation containing atoms level smaller atom expressed reals evaluate result non negative included done network shown 
trunc schematic plot fibring function filter atom level clear construct networks filter atom level bi function bi implemented neural network 
fibring networks implement polynomial function shown avila garcez gabbay indicated example approach flexible general 
worked example give complete example extending logic program level mapping example 
clause need ground headed gate 
implement second clause remainder class gate needed returns odd numbers 
furthermore need filter returns atom level included clause example need gate returning numbers similar filter clause number 
combining parts account acyclic get network shown 
run initial value 
trunc trunc neural implementation example outputs converge unique supported model sequence outputs right neuron sequence real numbers converges unique supported model contributes advance state art neural symbolic integration showing order logic programs implemented fibring neural networks 
generic ways representing needed fibring functions biologically plausible fashion remain investigated detail task extending proposal fully functional neural symbolic learning reasoning system 
fibring offers modular way performing complex functions logical reasoning combining relatively simple modules networks ensemble 
module kept simple able apply standard neural learning algorithms 
ultimately may provide integrated system robust learning expressive reasoning capability 
bader hitzler 
logic programs iterated function systems recurrent radial basis function networks 
journal applied logic 
bader hitzler lldobler 
integration connectionism order knowledge representation reasoning challenge artificial intelligence 
proceedings third international conference information tokyo japan 
appear 
bishop 
neural networks pattern recognition 
oxford university press 
browne sun 
connectionist inference models 
neural networks 
cavedon 
acyclic programs completeness sldnf resolution 
theoretical computer science 
avila garcez gabbay 
fibring neural networks 
mcguinness ferguson eds proceedings nineteenth national conference artificial intelligence sixteenth conference innovative applications artificial intelligence july san jose california usa 
aaai press mit press 
avila garcez gabbay 
neural symbolic learning systems foundations applications 
perspectives neural computing 
springer berlin 
hitzler seda 
generalized metrics uniquely determined logic programs 
theoretical computer science 
hitzler lldobler seda 
logic programs connectionist networks 
journal applied logic 
lldobler 
massively parallel computational model logic programming 
proceedings ecai workshop combining symbolic connectionist processing 

lldobler st rr 

approximating semantics logic programs recurrent neural networks 
applied intelligence 
lloyd 
foundations logic programming 
springer berlin 
thrun 
monk problems performance comparison different learning algorithms 
technical report cmu cs carnegie mellon university 
