conf rence lausanne robust unification linguistics frederik seminar universit bingen bingen germany sfs uni tuebingen de unification constraint unification formalisms widely write natural language grammars 
problems coverage grammars due restrictive interpretation grammar described 
approaches proposed relaxing different requirements 
ad hoc rely properties specific parser architecture 
approach general level viz 
formalism 
concretely typed attribute logic carpenter 
step ensured type hierarchy certain properties meaningful robustness possible containing information went wrong 
size hierarchy limited modulation 
distance measure logic introduced distinguish different analyses 
reporting problems treatment unknown words fall naturally formalism existing grammars linguistic theories implemented re specific adaptations robustness non robust formalisms 

linguistic theories implementations formalisation linguistic theories lexical functional grammar lfg dalrymple head driven phrase structure grammar hpsg pollard sag pollard sag means mathematical models greatly improved possibility test implementations 
confirmed certain predictions linguistic side shown general deficiency dealing unexpected extra grammatical input 
constraint grammatical theory hpsg visible parse failures especially logical setup formalism consistently pursued 
reason computational linguists worked weaker assumptions ensure result obtained 
assumptions implementations unification satisfying computational accounts constraint formalisms complexity 
implementations versions formalisms attribute logic engine ale carpenter penn linguistic knowledge base lkb simple type hierarchy frederik copestake tz 
nearly ubiquitous technique parsers store intermediate analysis results chart parsers 
parse results put recovery module jensen 
problem partial results part analysis problem detected final analysis analyses applications need information say grammar checkers reproduce 
statistical methods common approach solve problem relaxation rules overgeneration ranking results far am aware handle arbitrary feature structures 
follows method re interpret typed formal framework linguistic theories robustness information mistakes comes formalism require development specialised modules deal robustness 

formal preliminaries carpenter inheritance hierarchy type hierarchy consists set types relation 
relation called subsumption relation defines partial ordering types expressing general 
usually explicit general type specific type 
easy add necessary unique position instance specific elements hierarchy interpreted 
obvious 
unification types defined general type specific types unified 
important unification gives unique result properties inheritance hierarchy disappear 
instance see type aforementioned types 
shows neutral element null element 
add fourth type 
relation undefined incomparable 
carpenter furthermore requires type hierarchies satisfy condition types common subtypes unique general common subtype bounded complete partial order condition see 
benefit unification operation return result 
hierarchies known finite meet semi lattices define 
definition lattice non empty partially ordered set lattice defined defined 
robust unification linguistics partially ordered set left unification black nodes unique 
partially ordered set right meet semi lattice 
note node 
symbols replaced 
shall 
partially ordered set satisfies second condition called meet semi lattice meet operation lattices case generalisation operation unique result 
equivalent unification called join join semi lattices partially ordered sets condition satisfied 
hierarchies shall lattices proper subset set 

dealing failure 
types instance basic appearance problem overcome unification types fails 
interesting result tells problem 
normally unification failure reduces entire feature structure regardless values 
feature structures values involved unification cause failure 
order know caused failure top smashing avoided unification return result different null element 
unification defined terms subsumption relation subsumption expanded 
instance example obviously offending couple 
take unification result unification result completely different 
recovered result 
information failure looking described types involved failing unification 
deal problem lattices sets 
earlier defined lattices 
definition lattices sets lattice lattice sets closed finite unions intersections 
borrowed terminology definitions davey priestley 
lattice complete lattice sets frederik hierarchies finite finiteness strict limitation 
powerset set instance lattice sets 
lattice shown lattice sets node lattice 
lattices sets precisely structures wanted task 
require combination elements set join ed gives result member set 
containment relation elements lattice know element set show resulting subset contributed result element occur 
may obvious property clear contexts 
cumbersome find lattice sets hierarchy works 
distributive lattice isomorphic lattice sets 
words know distributive lattice certain desired properties 
define distributive lattices 
definition distributive lattice lattice distributive distributive laws hold 
fact laws needs checked holds 
example distributive lattice shown 
easy check isomorphic lattice sets powerset set diagram arranged containment exactly shape lattice 
going back example result unification hierarchy displayed give result result unique pair types 
unified type result 
distributivity unification operations distributivity says relation operations provides information recover error 
necessarily mean error corrected involves errors rarely simple exam robust unification linguistics robust lattice boolean ples 
practice recovery information defines general analysis result conform grammar rules unchanged input phrase lexicon 
exactly done information left specific applications valid value may chosen correction generalisation values may taken 
readers may wonder point boolean lattice required examples refer boolean lattices 
boolean lattice distributive lattice top bottom element unique complement 
complementation necessary 
clear hierarchy shown black node complement hierarchy distributive robust 

partitioning type hierarchy type hierarchy expanded distributive lattice grow big 
fortunately combinations types needed 
certain grammar type hierarchy divided partitions called modules 
partitions discussed kaci fall 
types partition occur attribute type different partition 
just means belonged module place 
module defined subset types subsumption relation rest type hierarchy incomparable necessarily words seen outside module equivalent 
inside module types related usual subsumption 
gives big gain space needed store type information 
types occur need encoded 
result english grammar instance values person form module clearly smaller robust version entire type hierarchy 
measures am removing robustness formalism 
types different modules unified correct albeit potentially incomplete system 
setup failure points implementation mistake non robust system just replaced error 
having said possible design grammar entire hierarchy module case modularisation 
modularisation implementation formalism 
compiler compiles module time prolog term uses value attributes appropriate type module 

feature structures frederik types attributes build feature structures type may attributes typed values turn 
define easier think feature structures directed graphs 
carpenter defined tuple set nodes graph root node graphs begins function assigns type node partial function defines directed paths features nodes nodes 
just types subsumption relation feature structures 
definition feature structure subsumption subsumes total function feature defined 
carpenter definition says subgraph starts root types nodes subsume types nodes 
relaxation unification types entirely defined subsumption relation possible feature structures 
additions need obtain robust feature structure unification source failure comes types 
patr ii shieber instance atomic values cause feature structure unification fail 
number person number person result unification 
arg arg arg number person values attributes simplified values exist original non robust hierarchy 

distance unification succeed input obeys module distinctions 
order allow systems parsers real distinctions different robustly obtained solutions introduce distance measure types feature structures 
line previous changes measure entirely defined terms subsumption 
robust unification linguistics distance type hierarchy 
lefthand side hierarchy righthand side table distances 

types distance types number nodes non robust subsumption hierarchy types nodes subsumed general subsuming specific plus 
distance defined incomparable types 
example shown 
note distance case multiple inheritance 
table recovery distance hierarchy 
course lot cases distance incompatible types needs calculated 
recovery distance distance generalisation type hand expected type type hand 
contrary distance recovery distance commutative 
recovery distance hierarchy shown table 
recovery concerns types incomparable 
interesting case recovery distance asymmetric result 
distance plays important role indicates ungrammaticality analysis results feature structure expected checked 
recovery distance keeps track different 
happens analysis results get worse stay 
asymmetric situation expected versus available reflected non commutativity recovery distance 
possible define correction distance sum recovery distances directions 
judge goodness correction 

feature structures distance definitions types carried feature structures extra requirement feature structures path length counted 
words type value counted assume values information just extra depth 
type hierarchy frederik path length difference need specified explicitly distance feature structures taken distance subsumption hierarchy feature structures 
distance types reflected feature structure subsumption hierarchy types build feature structures 
example shown hierarchy 
feature structures describe different situations 
recovery distance differ value person 
value derived type hierarchy 
index third num sing index second num sing hierarchy gets subtypes constrained value recovery distance changes distance values root types gives total distance 
third num sing non second num sing shows distance feature structures manipulated encoding things type hierarchy certain way 
may considered linguistically significant result distance second plural third singular language encoding smaller second encoding 
appropriate grammar writer decide 
non robust formalisms fairly great strictly speaking define direction recovery distance direction 
robust unification linguistics freedom new attributes placed encoded types features 
distance measure formalism sensitive differences 
shows distance just measure significant formalism 

usage implementations theory hpsg rules principles lexical entries defined entirely terms feature structures type hierarchy 
grammar compiled type hierarchy structures keep track information required robustness incorporated distance 
rule applications consist unifications 
feature structures involved unifications inconsistent 
cases assuming correct implementation unification succeed explained entail deterioration structure parser tries unify inconsistent feature structures recovery distance structure say edge category chart expected say rule daughter specified grammar writer zero anymore 
feature value incompatible distance increases 
distance carried rule applications monotonically larger parse 
parser obviously information choose best candidates proceed 
final result best analyses ones smallest deterioration 
grammatical analyses deterioration 
parsing succeed return feature structures associated deterioration values 
current parser bottom chart parser uses heuristics keep number solutions 
heuristics consist subsumption check check deterioration value feature structure 
useful remove results lost information 
time heuristic applied parses take long 

approaches similar lines thinking published artificial intelligence deal defaults presuppositions belnap ginsberg fitting linguistics sch ter vogel cooper name para consistent multivalued logic 
usage defaults prominent linguistics artificial intelligence 
proposal follows similar lines vogel cooper extends type hierarchy deal problems handle certain types instance lists 
mention possibility measuring discrepancy feature structures propose concrete measure 
abney walther techniques reminiscent extensive 
abney works features uses bit vectors record values possible inconsistencies 
walther mainly interested automatic updating lexicon unknown words 
need able parse sentences containing new words resulting information derive semantic syntactic properties words 
bod kaplan lfg dop framework focus stochastic processing complex linguistic formalism suggest information distance feature structures deal ill formed sentences 
note lfg typed framework 
frederik foster approach inconsistencies unification recorded feature structure 
proposal unification returns plain failure 
different nodes feature structures merged values compatible 
changes type hierarchy feature structure unification algorithm 

set errors treated way limited substitution errors 
feasible solution word order changes interesting extension 
obvious follow experiment weights changes type hierarchies 
interesting see extent statistical techniques integrated architecture 
way feature structures composed types distance measures distance measure feature structures violate subsumption hierarchy exists feature structures 
effects parsing distance measure effect shape inheritance hierarchy location attributes 
big changes remains seen 

technique provides basis framework robust analysis natural language modern linguistic theories 
unification emerges changes completely monotonic 
allows existing theories descriptions language compiled grammars fit real 
general parser application independent approach robustness results diagnosing correcting errors time offers potential ungrammatical data positive way linguistic argumentation 
research supported studentship university essex united kingdom 
want anna reading draft versions anonymous reviewers 
remaining errors 
abney 

partial parsing 
tutorial anlp october stuttgart 
line document www sfs uni tuebingen de abney abney 
ps gz 
kaci boyer lincoln nasr 

efficient implementation lattice operations 
acm transactions programming languages systems 
contains errors project description sfb 
walther 

processing unknown words hpsg 
coling 
cs cl 
robust unification linguistics belnap 

useful valued logic 
dunn epstein eds modern uses multiple valued logic volume chapter 
bod kaplan 

probabilistic corpus driven model lexical functional analysis 
coling 
butt holloway 
butt holloway eds 

proceedings lfg conference brisbane 
university queensland 
published line www csli stanford edu publications lfg lfg html march 
carpenter 

logic typed feature structures 
applications unification grammars logic programs constraint resolution 
number cambridge tracts computer science 
cambridge new york melbourne 
carpenter penn 

ale 
attribute logic engine 
user guide 
version beta 
distributed part ale 
coling 
proceedings th international conference computational linguistics th conference association computational linguistics montreal canada 
international committee computational linguistics 
copestake 

new lkb system 
www csli stanford edu aac doc pdf 
dalrymple kaplan maxwell john zaenen eds 

formal issues lexical functional grammar 
number csli lecture notes 
stanford california 
davey priestley 

lattices order 
cambridge mathematical textbooks 
cambridge second reprint edition 
fall 

reasoning taxonomies 
phd thesis school computing science simon fraser university canada 
fitting 

negation refutation 
parikh ed proceedings 
fourth annual symposium logic computer science ieee 
foster 

handling inconsistency new type unification 
esslli student session birmingham 
preparation technical report 
ginsberg 

multivalued logics uniform approach reasoning artificial intelligence 
computational intelligence 
tz 

manual 
seminar universit bingen bingen germany 
draft september 
jensen heidorn miller ravin 

parse fitting prose fixing getting hold ill formedness 
american journal computational linguistics 
pollard sag 

information syntax semantics volume fundamentals csli lecture notes 
stanford 
pollard sag 

head driven phrase structure grammar 
studies contemporary linguistics 
chicago london stanford edition 
sch ter 

paraconsistent feature logic 
sch ter vogel chapter 
sch ter vogel eds 

nonclassical feature systems volume edinburgh working papers cognitive science 
centre cognitive science university edinburgh 
shieber pereira robinson tyson 

formalism implementation patr ii 
bresnan ed research interactive acquisition knowledge 
final report 
sri project 
sri international artificial intelligence center menlo park cal frederik vogel cooper 

robust chart parsing mildly inconsistent feature structures 
sch ter vogel chapter 
