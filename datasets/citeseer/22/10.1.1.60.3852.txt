linear tree edit distance algorithm similar ordered trees ne umr cnrs universit lille cedex france fr 
describe linear algorithm comparing similar ordered rooted trees node labels 
method comparing trees usual tree edit distance 
show optimal mapping uses insertions deletions constructed nk size trees 
approach inspired zhang shasha algorithm tree edit distance combination adequate pruning search space 
problem determining similarity labeled ordered trees occurs areas computer science hierarchically structured data image decomposition rna secondary structures computational biology 
paradigms compare ordered trees edit distance alignment 
original edit distance edit operations nodes insertion deletion substitution operations apply restriction order 
tai introduced solution problem 
zhang shasha gave faster dynamic programming algorithm 
time required collapsed depth size trees collapsed depth parameter depends shape tree 
value collapsed depth bounded depth number leaves trees smaller average 
klein proposed improved algorithm log 
analyses zhang shasha klein approaches 
alignment introduced jiang alternative tree edit 
insertions performed deletions 
words alignment trees obtained applying insert operations trees isomorphic labels ignored 
alignment expressive edit distance approach 
provides typical example alignment requires edition operations edit distance 
shows bounded ratio scores distance alignment 
best known algorithm alignment runs maximal degree trees 
trees bounded degrees alignment algorithm turned quadratic 
results dealing local gapped alignments proposed 
article address problem comparing similar trees 
assume number errors input trees bounded advance positive integer errors edit operations affect skeleton tree insertions deletions 
question comparing similar trees occurs comparing related rna secondary structures instance 
fast algorithm proposed tree alignment errors context method construct optimal alignment log time 
particular trees bounded degree running time reduces log 
focus tree edit distance paradigm errors 
news possible convert method zhang shasha linear algorithm 
approach inspired known band method optimal alignment similar strings uses graph theoretical formalisation called edit graph 
show optimal mapping input trees uses errors edit distance computed nk 
edit distance alignment fig 

edit distance versus alignment borrowed 
picture shows optimal mapping trees edit distance mapping contains deletion insertion 
errors 
alignment optimal mapping involves errors 
cost edit operations defined follows sub ins del 
cn fig 

edit distance versus alignment 
natural number define trees cn dn height size displayed 
family trees shows difference distance optimal alignment linear size trees 
value edit distance cn dn depend optimal mapping composed deletion followed insertion optimal alignment cost involves deletions 
graph representation tree edit problem definition tree 
tree node called root connected ordered sequence disjoint trees 
node assigned label 
denotes empty tree 
sequel shall notations 
notation tree 
node denotes subtree rooted size denotes number nodes tree size size depth length path root height length longest path originated height leaf 
usual edit distance relies elementary edit operations substitution consists replacing label node label insertion node deletion node 
edit operation assigned cost sub ins del denote costs respectively substituting inserting deleting node 
definition edit distance 
trees 
tree edit distance denoted td minimal cost edit operations needed transform pair nodes write td distance subtrees 
dn mentioned section zhang shasha klein proposed efficient algorithms problem 
methods dynamic programming decompositions input trees 
introduce alternative formulation graph theoretical representation 
known alignment strings reduced question searching optimal path grid 
strings length respectively 
construction optimal alignment bidimensional array represented weighted directed graph 
vertices arcs originated vertex labeled del labeled ins labeled sub set paths node node exactly set possible alignments strings 
optimal alignment path smallest weight 
adapt point view problem edit distance trees 
done restrained version edit distance substitution occurs nodes depth 
general apply construction full tree edit distance 
motivating idea mapping trees induces sequence alignment associated postorder traversal enumerating nodes subtrees root 
course possible path grid lead correct tree mapping 
mapping consistent structures trees 
node matched node subtrees matched 
concerning graph representation means path containing diagonal arc visit vertex size size 
take account constraint modify edit graph consequently 
set vertices constituting grid identical arcs insertions deletions 
arcs corresponding substitution operations modified 
definition tree edit graph 
trees size respectively 
nodes enumerated postorder notation indices starting 
tree edit graph weighted directed graph composed nodes incident arcs defined follows deletion arc labeled del insertion arc labeled ins substitution arc size size labeled td gives example tree edit graph 
explaining compute labels td substitution arcs establish briefly construction correct 
purpose lemmas 
definition subgraph top level path 
trees pair nodes write edit graph subgraph associated restriction insertion deletion arcs substitution arcs fig 

edit graph 
clarity sake insertion deletion arcs substitution arcs separate grids 
edit graph obtained overlaying grids 
arcs oriented bottom right node upper left node 
nodes arcs size size substitution arc size size extra arc labeled sub 
top level path optimal path bottom right corner upper left corner 
path edit graph define set vertices origin diagonal arc size size lemma 
trees path mapping conversely mapping path edit graph size size 
derive optimal mapping edit graph mapping longer obtained single path serie top level paths 
lemma 
trees 
optimal mapping built recursively follows 
mapping mapping mapping mapping optimal path associated edit graph 
cost mapping weight top level path step time needed compute top level path size size 
mapping contains linear number matching pairs computation time 
come problem determining labels substitution edges edit graph 
td obtained weight top level path 
coordinates node size size 
distinct denote fd cost optimal path 
usual dynamic programming algorithm optimal graph gives equations fd 
fd fd fd del fd fd ins fd del fd min fd ins fd size size td readers familiar original formulation zhang shasha algorithm may note equation main recurrence formulas computation tree edit distance lemmas 
value fd exactly distance denoted forestdist zhang shasha article 
equation deduce distance td 
fd del td min fd ins fd sub klein algorithm strategy traversal grid finding optimal paths 
problem edit distance errors shall focus direct strategy zhang shasha 
tree edit distance errors general idea algorithm errors prune edit graph keep relevant vertices arcs 
implement optimisations lemmas 
property analogous alignment algorithm strings 
trees similar best mappings paths near main diagonal edit graph 
means necessary build entire graph 
definition strip 
positive integer 
trees define set pairs nodes strip strip tree edit graph write strip strip 
lemma 
trees nodes respectively 
mapping uses errors visits vertex strip 
definition relevant 
positive integer 
trees pair nodes strip pair called relevant size size size size size size furthermore define maximal number errors size size size size 
lemma 
trees nodes respectively 
mapping uses errors mapped relevant number errors compare bounded 
proof 
mapped implies path visit vertices edit graph size size size size 
total amount errors path greater size size size size size size 
particular number errors outside greater size size size size 
total number errors bounded remains errors 
lemmas lead outline computation distance errors 
procedure distance input trees integer output fills array td 
strip td distance 
distance td size size 
strip relevant td size size size size compute td errors equations equations previous section adapted compute td paths strip fd paths strip strip 
case borders search space delineated explicitly 
gives functions forestdist fd treedist td 
function forestdist input integers output compute weight fd optimal path size size initial cases size size return size return ins size return del general case fd size size strip strip substitution td fd size size strip strip deletion min fd del strip strip insertion min fd ins return note parameters fd equation omitted 
fd stands fd size size 
function treedist input integers output compute distance td errors size size strip strip compute fd function forestdist return min fd del fd ins fd sub gives raise algorithm improved lemma 
lemma 
trees 
nodes descendant exists mapping uses errors associated top level path contains vertex form depth depth 
proof 
belongs top level path node path excluded involved substitution 
top level path contains depth depth deletions 
lemma ensures calculating td errors necessary inspect pairs depth depth 
definition truncated tree 
tree node natural number 
truncated tree defined unique way largest subtree root height write size size functions forestdist treedist modified take account new property 
function forestdist input integers output compute weight fd optimal path size size initial cases size size return size return ins size return del general case fd size size strip strip substitution td fd size size depth depth strip strip deletion min fd del strip strip insertion min fd ins return function treedist input integers output compute distance td errors optimization lemma traversal size depth depth size strip strip compute fd function forestdist return min fd del fd ins fd sub time computation td treedist size size function treedist 
remains question answered implement effective way 
tricky point traversal truncated tree 
far nodes ranked visited postorder 
able skip nodes depth 
combine postorder bottom traversals 
introduce arrays allow translate index node postorder notation bottom notation vice versa size define bottom index bottom notation node rank postorder notation post order index postorder notation node rank bottom notation 
attributes may computed linear time pre processing 
function treedist new version treedist full details 
function treedist input integers output compute distance td errors optimization lemma full details 
initialisation size node depth depth traversal size strip strip compute fd function forestdist computation index node visited depth depth post order bottom depth depth return min fd del fd ins fd sub variable introduced perform traversal 
initialisation done height attribute height smaller 
pick child height repeat process child height node depth depth reached 
affect total complexity treedist 
procedure input trees integer output fills array td 
strip td distance 
distance td size size 
strip relevant td size size size size compute td function treedist conclude complexity analysis procedure size 
lemma 
tree 
positive integer 
size size 
proof 
proof induction size theorem 
procedure computes tree edit distance errors nk time kn space 
possible reconstruct optimal mapping nk 
proof 
implementation uses bidimensional arrays td fd 
indexed size td stores values td distance strip 
precisely td equals td 
fd permanent array temporary values 
call treedist parameters fd stores values optimal intermediate paths 
precisely fd equals fd weight optimal path size size 
size array noticed previously run time treedist size 
algorithm strip lemma yields bound size size size 
concerning construction underlying optimal mapping full edit distance consider successive top level paths matching pairs nodes lemma 
property worth notice toplevel path obtained restricting search vertices strip 
done size 
trace back needs nk time 
final comment algorithm construct optimal mapping trees nk time number errors bounded advance trivial bound size size leads asymptotic complexity zhang shasha algorithm 
average complexity worse optimization zhang shasha consists redundant computations pair nodes pair leftmost children 
specified advance possible apply scheme 
idea goes follows 
uses iterated application distance errors increasing values starting value size size doubled step 
stopping condition relationship score number errors 

chawathe 
comparing hierarchical data external memory 
fifth international conference large data bases pages 


rna secondary structure comparison exact analysis zhang shasha tree edit algorithm 
theoretical computer science 


analysis tree edit distance algorithms 
combinatorial pattern matching volume pages 
lecture notes computer science 

ller giegerich kurtz 
local similarity rna secondary structures 
ieee bioinformatics conference pages 

jansson 
sung 
local gapped alignment application finding rna structural motifs 
isaac volume pages 
lecture notes computer science 

jansson lingas 
fast algorithm optimal alignment similar ordered trees 
fundamenta informaticae 

jiang wang zhang 
alignment trees alternative tree edit 
theoretical computer science 

klein 
computing edit distance unrooted ordered trees 
th european symposium algorithms pages 


computational biology chapter sequence comparison database search 
international thomson publishing 

tai 
tree tree correction problem 
journal association comput 



algorithms trees graphs 
springer 

zhang shasha 
simple fast algorithms editing distance trees related problems 
siam journal computing 
