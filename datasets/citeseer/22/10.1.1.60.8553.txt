multi tree unstructured peer peer multicast venkataraman paul francis john latest debate overlay multicast systems build trees 
main argument anti tree side tree construction complex trees fragile 
main counter argument non tree systems lot overhead 
argue ways build multi tree systems simple scalable algorithms yield fast convergence robustness 
presents multi tree heterogeneous multicast algorithm unstructured overlay 
simulation show control load percent heterogeneous target load traded improvements latency tit tat incentives 

francis zhang respectively independently argued ip multicast going form system multicast needed bring multicast masses 
nearly decade multicast gone spite success technologies file sharing swarming 
part reason surely multicast niche application 
really needed live near live streaming content distribution non live 
multicast applications today largely handled infrastructure overlays akamai ip multicast enterprise settings 
believe substantial improvements multicast algorithms improvements may lead widespread technology 
focus non interactive multicast applications grow large scale thousands recipients handle wide range volumes 
canonical application broadcast sports event content may simple text description score important events low volume audio play medium volume video high volume 
seconds delay tolerable necessary form receiver play buffer smooth short term disruptions network os performance 
delay tolerance means assume supported part national science foundation ani darpa project fa 
cornell university university north carolina chapel hill francis cs cornell edu jmc cs unc edu small number content streams 
sources transmit tree root aggregated stream multicast 
addition large scale important requirement fine grained control member load 
need stems fairness utility performance arguments 
fairness suggests member node transmit volume receives 
utility valued fairness nodes capacity transmit willing 
performance requires node bottleneck called transmit 
factors single tree approach comes short 
certainly fair nodes transmit nodes transmit times stream volume single tree provide granularity effectively utilize transmit capacity 
node capacity transmit say stream volume serve leaf transmit 
result believe argued multi path approach necessary 
multi path mean node receives portions multicast stream different routes 
multi path may achieved multiple trees splitstream called treeless approach bullet 
say called treeless goal bullet individual packet block packets traverses tree 
question build trees granularity slice block packet 
difference important 
block granularity node explicitly informs neighbors blocks explicitly requests neighbor blocks receive 
represents substantial overhead average node degree means additional packets sent received average data block received 
stream low volume overhead times stream volume 
higher volume applications bullet target overhead acceptable worth trying avoid 
slice granularity nodes maintain long term parent child relationship respect slice slice defined th packet data stream number slices 
result trees established virtually packet overhead 
hand node crashes stops performing assuming interior nodes fanout 
paths may unacceptably long 
adequately offspring tree suddenly receiving packets tree re built 
furthermore building tree isn instantaneous free case high churn complex tree building algorithm may take long time repair completely 
fortunately tree building algorithms need complex 
aspects building trees parent selection loop detection avoidance 
environments afford moderate amount processing overhead packet contrast high speed routers instance loop detection fast easy 
needs tag data packets identities node forwarded packet 
quite efficient terms packet size processing bloom filters small probability false positives 
loops detected immediately packet traverses loop 
packet data packet sent application absence packets probe packet transmitted node children 
loops avoided having nodes advertise bloom filters receive neighbors 
node select neighbor parent node appears parent received bloom filter 
method loop avoidance detection tree building simple 
stream node selects loop free parent neighbors 
loop detected rarely node selects different parent 
flooding swarming may kick start tree 
tree building way fast easy problem inefficient trees may result 
nodes may transmit load paths may longer necessary 
inefficiencies improved time time measured seconds tens seconds switching different parents doing improves measure efficiency load latency tit tat path disjointness link stress 
simple multicast protocol show simulations achieves robustness fine grained control heterogeneous load avoiding packet overhead treeless approaches 
show simulations affecting load fine tune trees respect constraints latency tit tat 

approach background describe approach 
splitstream striping multiple trees get fine grained control heterogeneous load node target maximum load expressed number stripes zero upwards 
constraints stripes node transmits may transmit stripe number times long operates maximum 
yoid nodes form random graph 
yoid node degree node random graph load mean transmit load nodes choose receive fewer slices instance multiple description codes independently set transmit load receive load 
current implementation assume nodes receiving stripes 
proportional node target load small probabilistic error 
requires node knows minimum target load nodes node degree associated minimum 
assume information known application 
actual set neighbors changes membership churn number neighbors node stays roughly time 
discuss neighbors 
addition random neighbors node may know number nearby nodes probably measured latency 
node nodes source multicast stream joins random graph 
node called true source random neighbors transmits slice neighbor 
neighbors called slice sources effectively root multicast tree 
structure place node runs ongoing process periodically exchanges local information load latency looping neighbors uses information determine appropriate parent child relationships tree 
set constraints node pair locally tries determine best parent child configuration 
constraints currently follows 
course loops 
avoided detected described 
second pairwise tit tat constraints force satisfied 
third node may transmit maximum load 
looping constraint conceivable nodes may choose violate constraints short periods time instance respond quickly node failures 
currently implement 
criteria converge best parent child configuration latency load 
criteria align may situations improving latency hurts load vice versa 
load important criteria insure load node actual load near target load try improve latency 
remainder section provide detail build random neighbor graph load latency fine tuned 
random graph construction random neighbor graph underpinning way ransub underpinning bullet 
algorithm called uses weighted random walks build random graphs discover random nodes graph 
walks weighted way nodes fine grained statistical control node degree probability selected random walks 
simple unstructured scales easily number members reacts quickly churn 
note bullet utilize neighbor discovery especially required heterogeneity 
load node lets neighbors know information current load number slices transmitting target load maximum load ml upper lower load thresholds ult llt considered satisfied outside considered overloaded underloaded 
typical numbers ml ult llt 
node periodically checks see overloaded parents underloaded potential parents neighbors produce loop chosen parents slice 
opportunity switch dropping current overloaded parent reducing load adding underloaded neighbor increasing load 
node informs overloaded parent loads subset best underloaded potential parents 
parent may receive similar information multiple children picks best candidate child neighbor load instructs selected child switch 
note conditions may changed exchange request switch contains parameter force load latency discussed switch decision 
parameter changed considerably switch aborted 
note order prevent packet loss duplication actual switch coordinated child identifies packet old parent transmitting new parent start transmitting 
latency node neighbors satisfied respect load node looks parent switches improve latency receives packets 
novel trick allows measure relative latency neighbor receives slice requiring synchronized clocks 
specifically node measures delay receives packets stream relative 
idea simple node close slice source tree receive packets slice relatively sooner receive comparable packets slices 
node parent receiving slice late relative slices potential parent receiving slice relatively early switch parents long neighbors loads remain satisfactory 
note nodes switches expected improvement latency certain threshold 
current implementation long node neighbors load satisfactory range improvements load improvements hurting latency 
load balancing algorithm forward progress guaranteed converge 
relax restriction potentially improve load 
need maintain short history switches prevent rapid oscillations 
latency improving algorithm converge 
occasions oscillation relatively slow time required produce confident measure delay 

evaluation performed series experiments event driven simulator 
simulation topologies created placing member nodes random edge locations network topologies having routers generated gt itm topology generator 
message delays determined resulting distance metric 
simulate message loss 
scale simulation simulator explicitly generate data packets 
control decisions take account delay transmitted data packets seen 
random overlay constructed trace file generated offline simula number nodes thousands number nodes thousands tol load distribution latency relative excess percentage excess load distribution tol overlay stretch distribution latency overlay avg stretch cdf average overlay stretch tor 
trace generates node joins leaves triggers neighbor add delete events 
nodes participating multicast simulations uniform download slices 
heterogeneity experiments assign node target upload slices uniformly random representing total node degrees 
results average upload capacity giving total system adequate capacity support multicast volume 
set ult llt th target load denoted tol 
maximum load ml set th target load example target load ml ult llt respectively 
heartbeat period second nodes declared seconds heartbeat 
parent switching decisions second 
load latency evaluation set experiments nodes join multicast th second 
th second additional nodes join rate joins second 
shows load accuracy measured ratio node measured load target load 
cdf curves correspond cases latency reduction latency reduced long load th target load tol 
see provides excellent control load 
latency reduction nodes exceed target virtually nodes target load 
algorithm fully converged seconds join 
noted time taken load number nodes thousands cdf disconnect durations tol redundancy redundancy redundancy disconnect duration disconnect durations latency fine tuning algorithm converge nodes establish parents slices seconds joining network 
fewer parent switches lead cycle 
extreme churn speaks bloom filter method loop avoidance 
control message overhead averaged parent switch messages node entire tol run 
examine performance latency reduction 
parameters characterize latency network stretch overlay stretch 
network stretch defined ratio actual measured latency network latency true source node 
overlay stretch ratio actual measured latency experienced node shortest path latency overlay graph true source node 
cdf overlay stretch 
poorly latency reduction results nodes having overlay stretch nodes having overlay stretch 
corresponding network stretch shown th percentile network stretch 
th percentile hop length 
get intuition adding locality random graph improve stretch ran node static simulation addition random neighbors selected nearest neighbors added node neighbor set 
case th percentile network stretch versus locality noticeable dramatic improvement pure random graph 
robustness node failures experiment nodes join second simulation nodes fail th second 
shows cdf disconnection times tol case disconnection time total time node getting full stream 
curves graph show effect adding varying degrees redundancy instance forward error correction 
example curve denoted redundancy case receiving total slices produces full stream 
observe th percentile disconnection time redundancy seconds seconds timeout period 
see redundancy increased slices th percentile disconnection time reduced just seconds 
effect tit tat till assumed nodes lie loads 
environments may free loaders 
provides natural framework applying incentive constraints 
build intuition tit tat may affect load latency simulated simple weak tit tat model volume received neighbor percentage volume sent neighbor instance tolerance node supplies slices neighbor requires serves slices back 
ratios allowed 
addition nodes assign initial small credit new neighbors allow parent child relationships get started give additional credits time neighbor sends received 
tit tat constraints enforced credits 
tested simple tit tat scheme works tol parameters 
node static homogeneous setting node target load slices 
node periodically checks neighbors violating tit tat withdraws uploaded slices necessary 
parent switches fall tit tat constraints allowed 
compared tit tat ratios corresponding relationships respectively 
find decreasing ratio improves load balance expense latency 
instance th percentile average overlay stretch tit tat 
longer frequent disconnections case case 
experiments encouraging show tit tat constraints incorporated extent expense performance measures 

related considerable past single tree multicast protocols 
effectively support heterogeneity restrict discussion related multi path multicast protocols 
splitstream dht multicast protocol tries resolve heterogeneity problem splitting stream stripes sending multiple interior trees built dht 
heterogeneous environments node churn large number non dht links formed making system complex inefficient 
preliminary simulations splitstream microsoft version indicate control heterogeneous load quite poor 
allows target maximum load splitstream allows maximum load set 
splitstream simulations node network maximum load values having range ml values mentioned section nodes loaded maximum close nodes zero load 
performance measures stretch disconnect times similar worse reported 
don believe necessary build node disjoint paths constraint added 
bullet splits stream multiple blocks uses single tree top mesh 
nodes receive subset blocks parents tree remaining argue strict tit tat impractical simulations corroborate 
blocks retrieved nodes randomly chosen distributed algorithm called ransub 
bullet incurs high control overhead due scheme orthogonally retrieving packets 
multicast protocol away trees improve node resilience presence churn 
node employs simple controlled flooding mechanism notify neighbors data arrivals approach retrieve blocks 
potentially incur high network cpu overheads due notifications 
note benefit random graph construction heterogeneity aware 
assessed feasibility overlay multicast protocols supporting large scale live streaming applications analyzing real world akamai traces traces online offline bandwidth measurements concluded real world hosts bandwidth support cases 
incentive protocols try enforce hosts contribute resources 
proposals literature apply file sharing streaming applications 
bittorrent popular file sharing protocol widespread divides file multiple pieces lets peers download pieces 
peers employ tit tat mechanism limit free riding system 
number proposals peers maintain credit neighbors enable fair sharing resources content distribution network 
adopts taxation model peer peer streaming multicast applications encourage peers contribute bandwidth system poor peers 
employs credit technique splitstream detect free riders 
scheme trees reconstructed periodically pair neighbors gets opportunities donate receive successive reconstructions 
protocol fully answer tackle heterogeneity system 

represents new point multicast design space efficiencies associated trees simplicity scalability associated unstructured networks 
foundation ability build random sparse overlay graphs tight statistical control heterogeneous node degrees 
foundation combined simple loop detection mechanism bloom filters provides framework different constraints optimizations emphasized depending application 
date focused large scale non interactive applications broadcast sporting event range volumes text audio video formats 
control load important latency show significant improvements latency load control relaxed slightly 
show certain amount pairwise tit tat added mainly expense latency 
show operates churn 
part plan explore class application 
look churn scenarios 
look additional mechanisms improving latency controlling load favoring large fan 
look range tit tat mechanisms including social irrational behavior 
plan detailed apples apples comparisons splitstream 
believe generalized optimizations framework allows explore different types applications environments 
include low latency applications pub sub applications nodes may join large number groups applications packets traverse multiple disjoint paths 

acknowledgments yoshida preliminary simulations splitstream 
castro rowstron providing simulator code splitstream 
francis 
heterogeneous overlay construction random node selection unstructured networks 
proceedings ieee infocom barcelona 
rowstron druschel 
pastry scalable decentralized object location routing large scale peer peer systems 
middleware november 
francis 
yoid extending internet multicast architecture 
www icir org yoid 
chu rao zhang 
case system multicast 
proceedings acm sigmetrics june 
rodriguez albrecht vahdat 
bullet high bandwidth data overlay mesh proceedings th acm symposium operating systems principles sosp 
castro druschel kermarrec rowstron scribe large scale decentralized application level multicast infrastructure 
ieee journal selected areas jsac 
castro druschel kermarrec nandi rowstron singh 
splitstream high bandwidth multicast cooperative environments 
sosp 
pai kumar sambamurthy mohr 
eliminating trees overlay multicast 
fourth international workshop peer peer systems february 
cohen 
incentives build robustness bittorrent 
workshop economics peer peer systems june 
zegura calvert bhattacharjee 
model internetwork 
proceedings ieee infocom 
sripanidkulchai maggs zhang 
feasibility supporting large scale live streaming applications dynamic application points 
proceedings acm sigcomm august 
chu chuang zhang 
case taxation peer peer streaming broadcast 
acm sigcomm workshop practice theory incentives game theory networked systems pins august 
bharambe rao padmanabhan seshan zhang 
impact heterogeneous bandwidth constraints dht multicast protocols 
fourth international workshop peer peer systems february 
rodriguez albrecht vahdat 
random subsets build scalable network services 
usenix usits 
ngan wallach druschel 
incentives compatible peer peer multicast 
second workshop economics peer peer systems july 
whitaker wetherall 
forwarding loops 
proceedings ieee 
montgomery 
techniques packet voice synchronization 
ieee select areas commun 
pai mohr 
swift system incentives trading 
second workshop economics peer peer systems 
nandi ngan singh druschel wallach 
providing incentives cooperative content distribution systems 
proceedings sixth international middleware conference november 
