enhancing accuracy network intrusion detection host context holger christian tu nchen university cambridge computer science department computer laboratory tum de christian cl cam ac uk vern paxson robin sommer international computer science institute tu nchen lawrence berkeley national laboratory computer science department vern icir org sommer tum de past network host approaches intrusion detection received attention network security community 
approach taken exclusively provides satisfactory solution network systems prone evasion host solutions suffer scalability maintenance problems 
integrated approach leveraging best worlds preserve advantages network detection alleviate weaknesses improving accuracy traffic analysis specific host context 
framework preserves separation policy mechanism highly configurable flexible sensor manager architectures imposes low overhead involved hosts 
include case study approach notoriously hard problem purely network systems correct processing requests 
keywords network security distributed intrusion detection host supplied context evasion years intrusion detection systems idss central component tool chest security analysts 
assuming proper maintenance attention idss provide essential information investigation user activity real time forensics 
traditionally dimension idss classified vantage point network systems benefit wide field vision suffer ambiguity observations challenging performance requirements 
host systems solve ambiguity problem impose significant performance overhead executing processes monitor individual hosts 
number solutions proposed improve accuracy network analysis process reduce ambiguity problem 
furthermore number distributed approaches proposed improving coverage activity network 
widespread adoption systems occurred 
despite wellknown shortcomings systems deployed today operate network centralized fashion 
reasons manifold include ease maintenance single device potentially high coverage single point view ease deployment 
acknowledge situation architecture bro ids remains faithful primarily network approach improving accuracy providing host context matters analysis process 
architecture allows gradual transition distributed detection 
improve bro field vision augmenting mechanism sacrificing flexibility policy level integrate host components allowing send receive bro events building blocks analysis policy bro deployments 
focus attention crucial frequently exploited services typically run handful machines 
compared usual host paradigm performing analysis host solution incurs modest performance maintenance overhead hosts actual analysis performed different system 
perspective nids approach trades additional burden communicating systems potentially saving considerable number cycles analysis process obviating need costly nids processing resolve ambiguity 
key question approach degree tradeoff increased communication decreased processing net gain 
show generally significant win 
note idea leveraging host context network idss novel 
contributions twofold move idea forward tightly integrating wellestablished policy driven approach bro system 
second identify novel ways leveraging context provided similar processing stages nids host applications 
detailed case study instrument apache web server interface bro 
demonstrate feasibility architecture deploy setup production environments 
additionally examine effectiveness multipoint analysis approach testbed launching large number scripted attacks web server 
remainder recapitulate bro architecture section including overview addition communication framework system 
discuss benefits including host supplied context section 
section conduct case study instrument apache web server supply information concurrently executing section presents experiences instrumented test lab installation environments 
summarize point section 
bro distributed event intrusion detection system bro architecture remained faithful original philosophy developed original 
significant improvement communications framework basis powerful event model suitable distributed event communication 
summarize architecture key elements condensed form put context integration host supplied context 
illustrates bro architecture 
bro ids policy layer login policy scan detector 
worm detector network analysis udp tcp 
signature engine core policy script interpreter event engine network peer communication libpcap ssl architecture bro ids 
separation mechanism policy core idea bro split event detection mechanisms event processing policies 
event generation performed analyzers bro core analyzers operate continuously input observed bro instances trigger events asynchronously corresponding activity observed 
bro core contains analyzers wide range network protocols rpc ftp icmp smtp tcp udp 
analyzers connection oriented associate state connections observed network trigger events interesting protocol activity encountered 
examples include establishment new tcp connection request 
bro provides signature engine typical misuse intrusion detection matches byte string signatures traffic flows triggers events signature matches 
event triggered engine passes policy layer takes care processing event possibly triggering new ones 
design takes care minimize cpu load analyzers responsible triggering events policy layer enabled 
policy configuration bro peer runs policy configuration policy layer 
policy embodies site security policy expressed scripts containing statements specialpurpose bro scripting language 
understand significance approach important realize bro concept connection protocol dependent connectionless protocols udp connection defined bidirectional flow shares endpoint addresses ports terminated inactivity timeout 
relevance event varies site site 
simple example sites may consider detection microsoft iis exploit attempt pure unix network threat may detailed subtle contextual policy distinctions supported seen operational 
bro policy language strongly typed procedural style provides wide range elementary data types facilitate analysis activity network 
communication framework state management bro communication framework supports serialization transmission arbitrary kinds state bro instances 
driving idea design allow realization independent state longer think state accumulated policy layer local concept information dispersed network potentially shared past executions bro 
communication model imposes hierarchical structure 
examples exchangeable state include triggered events state kept data structures managed policies policy definitions 
purpose sufficient think entities exchanged peers events ignores large part flexibility 
interface applications bro implemented lightweight highly portable library supporting bro communication protocol called allows nodes instances bro ids event communication 
nodes request send receive bro events just bro configured bro policy language 
node policy implemented directly client code mechanisms configuration files 
host supplied context network intrusion detection having distributed network intrusion detection system hand nids communication mechanisms implement host sensors supplement nids analyses 
section explain nids benefit additional information integrated host supplied context bro event framework 
healthy acronym bro client communications library motivation motivation augmenting network analysis host supplied context 
overcoming encryption 
major benefit host supplied context host access information flow encryption takes place 
recipient encrypted connection instrumented report selected information nids user login names requested objects 
instrumenting server applications employ encrypted communication allows protocol analysis clear text protocols 

comprehensive protocol analysis 
having host applications report nids enables access additional information applications internal protocol state 
endpoints fully decode application layer protocol case easily provide nids context nids hard derive 
simple example user authentication telnet login session 
telnet protocol include information login success failure bro resort heuristics attempt infer result authentication attempt keystroke response dialog 
telnet server host immediately unambiguously knows outcome attempts 

anti evasion 
evasion attacks fundamental problems network intrusion detection 
exploit ambiguities inherently observing network traffic location endpoints 
ambiguities render hard impossible nids correctly interpret crafted packet sequences fashion host receiving 
attacks exploit differing interpretations traffic multiple protocol levels 
application layer point view generally possible pinpoint exact location protocol stack ambiguity introduced web server just occurred due tcp retransmissions layer ip fragmentation layer 
seminal describe network attacks lead different payload streams perceived system nids 
approaches alleviate problem exist normalization active mapping seen deployment large scale networks 
nids analysis likewise leverage context multiple levels 
way learning application interprets received data additional information detect evasion attacks nids 
including application layer state host analysis attacks detected avoided 
interesting approach instrumentation host network stack allow share information stream reassembly nids 
key question minimize amount information needs shared allow comparison 
example envision exchanging checksums stream detect mismatches lightweight fashion 
instrumentation allow monitor multiple types applications evasion attacks need instrument application individually 

adaptive scrutiny 
generally wealth things cause ids suspicious connection intent unusual destination hosts ports scanning behavior source host past matches traffic flow signatures large number ip fragments just small set examples 
approach adds indicator toolbox deviation interpretations host nids classify connection suspicious initiating closer scrutiny traffic 

ids hardening 
lastly differing interpretations data simply point subtle bugs implementation nids application 
generally see somewhat complementary approaches leveraging context 
host provide additional context nids include analysis 
second host supply redundant context nids uses verify information distilled 
integration bro incorporate host supplied context bro analysis letting selected applications send events central bro instance 
similar bro core generated events remote events represent policy neutral descriptions phenomena occurring individual process executions 
implies policy determines relevance events exclusively maintained bro host 
benefits maintaining policy pushed hosts twofold policy accessible centrally easier adapt second approach imposes overhead monitored host ordinary data analyzed host 
generating sending event cost host effort writing log file 
addition instrument host process fairly little effort library 
implements bidirectional event communication instrumented application controllable bro order react accordance policy 
bro connection oriented view traffic analysis raises significant issues integration remote events existing local state 
essentially need unite stream events generated observing connection wire stream events generated remote application processes connection data 
avenue doing remote application send parameters identifying connection example ip port quadruple 
order analyzer structured way allow fusion event streams 
means available state required process events relevant event handlers 
furthermore state structured support processing events different origins levels abstraction levels 
instance problem space need synchronization guarantee bro host monitor relevant traffic ensure new state instantiated local remote events state expired prematurely 
analysis sessions case study decided take closer look widely application layer protocol internet 
major provide components detect attacks minimum extract requested urls network stream match set signatures detect malicious requests 
main observation decoders dissect connection web server nids 
duplication separation tasks reasonable discussion prefer web server perform intrusion detection naturally sense nids serve requests 
redundancy allows benefit additional redundant context discussed section 
discuss approaches turn 
focus urls extracted requests note similar reasoning holds deeper inspection 
leveraging additional web server context respect semantics request obviously web server authoritative environment specific configuration defines interpretation request meaning reply 
providing nids information web server promises offer significant increase contextual information 
web servers provide kinds context hard impossible nids derive decryption ssl enabled sessions quite common transferring sensitive data 
quite desirable poses severe restrictions passive network monitoring 
web server decrypts requests provide clear text nids independent encrypted channel 
full request processing web server fully decodes request stream receives 
contrast perform task half snort may requests pipelined persistent connections cross packet boundaries older versions extract url packet 
full reply processing information easily provided web server nids needs put considerable effort deriving 
example bro able extract server reply code sessions 
experience high performance environments comes prohibitive processing cost 
hand web server additional cost involved providing result sending data nids 
disambiguation document eventually served substantially differ requested 
server resolves path inside url virtual namespace context may predictable file response 
redirection rewriting mechanisms internal server change url path arbitrarily 
nids follow exact steps web server need know related configuration statements full file system layout web server infeasible practical terms 
furthermore simply flexible accommodate shadow configuration 
avoiding evasion redundant context evasion attacks mislead nids protocol decoding 
nids extracts different request web server see may produce false negatives false positives 
compare outcome decoders opportunity detect mismatches 
web session network transport layers evasion attacks hide alter inject urls 
ways evade application layer decoders 
prevalent form url encoding 
rfc urls may contain subset ascii characters 
represent characters arbitrary values encoded special control sequences 
example web servers required support encode arbitrary hexadecimal values 
web servers notably microsoft iis provide sophisticated encodings unicode 
nids hard precisely mimic encodings character sets 
past systems required fixes discovery new encoding tricks 
general web server eventual interpretation url depends local environment configuration making nearly impossible nids derive 
issue part general problem lacking context required reliably detect attacks 
application layer encoding attacks target nids web server 
due implementation bugs encoding may circumvent internal checks 
example cve entry discusses flaw iss server leads filename decoded twice 
detect bugs compare decoding web server performs independent result nids 
similarly nids flaws show verified outcome web server 
comparing output decoders detect evasion attacks implementation flaws prepare possibility numerous benign differences explore 
deployment results case study evaluated approach installations experimental test bed production environments 
apache web server bro nids 
setup instrumented apache web server client communicates instance bro nids running concurrently machine remote host 
semantically communication apache bro way 
request apache sends involved hosts tcp ports original request string url canonicalized apache name file served reply code 
information available apache default logging module need slight extension access ports 
different ways connecting server 
particularly unobtrusive separate process client reads apache log file modification apache communicates apache pipe 
second integrate directly apache 
implemented 
operational deployments second performance testing detailed 
bro receives apache request runs kinds analysis corresponding main uses identified sections 
passes canonicalized url standard detection process 
includes script layer analysis event layer signature matching 
second matches url extracted bro connection packet stream 
encounters difference generates alert 
test bed installed apache development version bro host 
bro run default analysis packet stream seen loopback device 
apache supplied information sent tcp connection client bro system 
instrumented production web servers technische universit nchen germany main web server computer science department server network architectures group 
connected backbone network gb uplink internet 
main server handles requests day 
monitor approach separate client reading log file 
network architecture group server processes requests day 
ran bro host direct connection apache client testbed 
experiences operated setups weeks encouraging results 
discuss additional context provided significant benefits detection process preliminary experiences evaluating redundant context detect evasion attacks decoding flaws 
note maintaining analysis policy bro side keeping client policy neutral proved valuable change configuration nids needing touch web servers 
additional context incorporating context supplied apache proved major gain 
confirm nids reliably saw requests served web server major benefit high volume environments nids running commodity hardware regularly drops packets may accesses 
confirmed bro perform signature matching urls filenames omitted decoding bro configuration 
web servers holds potential realize major performance gain analysis easily increase total cpu usage factor 
bro signature engine assumes internal connection state exists matching signatures connection 
bro decoding traffic directly receiving feed apache instantiated state 
fortunately arrange bro instantiate state having capture tcp control packets syns fins 
experience quite feasible analyze control packets highly loaded gb en 
note approach limits internal signature matching sessions bro sees 
matching requests unseen connections example internal site require additional internal modifications plan implement soon 
note restriction applies internal signature engine 
script level analysis regular expression matching generally possible internal connection state 
bro uses bidirectional signatures avoid false positives 
example signatures alert server respond error message 
apache supplies reply code retain important feature 
time able detect attacks ssl encrypted sessions 
verified bro received decrypted information spotted sensitive accesses 
redundant context configured bro system automatically compare urls received apache server distilled decoder 
cases differences urls legitimate 
importantly web server may internally expand requested url example expanding request foo bar foo bar index html 
preliminary experiences production servers appears practice differences may rare explicitly code nids configuration 
consequently bro implemented expansion table regular expressions reproduces url translations 
compare urls strip cgi parameters 
logging url apache remove url encoded parameters 
bro hand decodes parameters fully 
stripping required avoid mismatches accesses cgi scripts 
policy running production servers 
main source differences encountered requests form get www foo bar index html requests indicate somebody trying web server proxy 
apache strips www foo bar processing request bro 
examining requests closely saw scans open proxies 
indicated client misconfigurations 
additional differences apache bro 
turned security relevant saw client requests included labels form foo html label labels removed apache 
question remains larger scale environment differences occur sufficiently varied forms significantly complicate redundant context detecting evasion attempts decoder flaws 
stress apache bro intensively installed evasion tools test lab 
perl library includes various url encoding tricks supposed evade security mechanisms web server 
includes command line script issuing individual requests server 
patched script selectively enable evasion methods 
installed penetration testing tool ships large library requests exploit known server vulnerabilities 
internally leverages 
able encode requests evasion techniques 
small stand encoder converts arbitrary strings different unicode representations 
results evasion experiments encouraging 
systems apache bro job decoding crafted requests differences insert relative directory urls turning foo bar foo bar garbage foo bar 
apache path 
bro leaves untouched nids knowing web server filesystem layout sense subsequent analysis may want alert 
avoid ambiguities double encoded requests decoded 
double encoding character ascii encoded 
decoding step yields second gives 
apache encounters request logs result decoding step sends error client 
bro decodes removes additional percentage sign processing 
addition reports ambiguity 
behaviors differ systems recognize situation report error 
processing time instrumentation event request requests events request overhead bro event transmission service time sequence requests static webpage 
left graph shows unmodified apache operation middle shows service times single event transmitted request right shows service times identical events transmitted request 
case horizontal line indicates average value requests 
requests containing unicode characters literally encoded iis proprietary encoding left untouched treated error apache 
bro leaves characters untouched 
systems agree apache serve document 
summarize see apache bro appear terms 
encounter mismatches detect soon occur 
note results may readily apply web servers 
example microsoft iis supports handful encodings supported bro 
particular bro include unicode decoder 
addition past experience iis vulnerabilities suggests complex decoder may vulnerable apache performance evaluation key question performance overhead instrumentation tolerable 
tested performance impact incurred apache httperf load generator 
ran httperf apache bro separate machines ghz pentium mb ram connected mb network 
measurements implemented client form apache logging module mod bro requiring additional lines code 
measured request overhead sending bro events lightly loaded apache 
requested single static webpage times rate connections second measuring request processing times benchmark module av true unix systems 
windows apache may handle unicode differently examined 
processing time processing time queue length requests overhead event transmission collecting bro overloaded 
size event queue instrumented application noticeable impact application performance 
results nth request separate runs 
results shown average apache required ms request 
sending single bro event necessary contextual analysis quite low performance impact order request capable supporting say requests sec 
second experiment tested overhead bro heavy load 
emulate situation reliably artificially introduced processing delay received event bro side 
clients bounded connection event queue configured maximum size events 
additional events enqueued point lead oldest events dropped 
simplify queuing behavior ran apache single process serving requests 
event queue length results shown workload receiving bro host noticeably affect instrumented application performance 
production installations connected single web server bro 
explore setup scale instrumented servers measured amount data exchanged instance apache receiving bro 
volume depends number requests length requested urls independent connection actual payload size 
single run see section issues requests web server 
average request bytes payload transmitted apache bro 
network load modest mbps requests sec level accommodate number busy web servers 
bro side amount process received bytes general parse full stream 
option significantly load bro leveraging web server processing context enable bro monitoring scale significantly higher loads 
summarize preliminary assessment overhead imposed instrumenting applications participate event communication network bro nodes appears quite acceptable 
summary developed notion extensive enhancements possible supplementing networkbased intrusion detection host supplied context 
incorporating host authoritative state nids analysis provide nids additional context redundant context 
allow analyze encrypted traffic leverage host protocol decoder detect evasion attacks increase scrutiny suspicious hosts offload nids 
case study instrumented apache web server interface open source bro nids 
extended bro incorporate web server accesses detection process 
additionally bro compare urls provided apache urls distilled passive protocol analysis providing roughly thirds bytes come protocol overhead 
high note bro communication protocol exchange serializations bro complex data structures ensuring type safety reconstructing structures performing architecture independent data marshaling 
trade efficiency flexibility 
means detecting evasion attacks flawed decoders server 
installed apache bro combo production environments examined detail test bed 
proof principle results deployments quite encouraging 
critical question explore concerns scaling projections obtained preliminary experiments hold deploy instrumentation widely site 
particular direct communication redundant context doubles volume data nids processes ii may wind generating benign differences deployments wider diversity server configurations comes play 
problems may amenable refinements basic technique example transmitting entire redundant context server nids sending incremental checksum greatly reducing network volume common case streams agreeing finding additional remove benign variations take broader operational experiences properly explore possibilities 
area ripe concerns extending approach host applications 
particular working ssh server instrumented report results authentication attempts clear text inputs outputs login sessions 
allow leverage bro existing rlogin telnet analyzers examination encrypted user sessions operationally proved increasingly critical widespread ssh 
acknowledgments carried collaboration intel research cambridge 
jon crowcroft anja feldmann helpful discussion feedback 
alexander help setting test environment 
thomas timothy 
insertion evasion denial service network intrusion detection 
technical report secure networks 
mark handley christian vern paxson 
network intrusion detection evasion traffic normalization protocol semantics 
proc 
th usenix security symposium 
umesh shankar vern paxson 
active mapping resisting nids evasion altering traffic 
proc 
ieee symposium security privacy 
phillip porras peter neumann 
emer ald event monitoring enabling responses anomalous live disturbances 
national information systems security conference baltimore md october 
giovanni vigna richard kemmerer 
netstat network intrusion detection system 
journal computer security 
eugene spafford diego zamboni 
intrusion detection autonomous agents 
computer networks 
vern paxson 
bro system detecting network intruders real time 
computer networks 
magnus ulf 
application integrated data collection security monitoring 
proc 
advances intrusion detection raid lecture notes computer science 
springer verlag 
marc andrew hutchison 
interfacing trusted applications intrusion detection systems 
proc 
advances intrusion detection raid lecture notes computer science 
springer verlag 
robin sommer vern paxson 
exploiting independent state network intrusion detection 
technical report tum tu nchen 
christian robin sommer 
event management distributed intrusion detection 

submission 
robin sommer vern paxson 
enhancing byte level network intrusion detection signatures context 
proc 
th acm conference computer communications security 
bro client communications library 
www cl cam ac uk 
martin 
snort lightweight intrusion detection networks 
proc 
th systems administration conference lisa pages 
greg gary mcgraw 
exploiting software break code 
addison wesley professional 
berners lee fielding irvine masinter 
uniform resource identifiers uri generic syntax 
rfc 
daniel 
ids revisited 
www com products downloads secured sf ids ns pdf 
internet security systems security alert 
multiple vendor ids unicode bypass vulnerability 
iss net alerts id advise 
cve 
www cve mitre 
org cgi bin cgi name cve 
holger anja feldmann vern paxson robin sommer 
operational experiences high volume network intrusion detection 
proc 
th acm conference computer communications security 

www net rfp 
rain forrest 
look whisker anti ids tactics 
www net rfp pages whitepapers 
html 

www net code shtml 
daniel 
url encoder 
code org encoder mosberger jin 
httperf tool measuring web server performance 
proc 
workshop internet server performance madison wi pages june 
mod benchmark apache plugin 
www com php mod benchmark php 
zhang paxson 
detecting stepping stones 
proceedings th usenix security symposium aug 
donoho shankar paxson staniford 
multiscale stepping stone detection detecting pairs jittered interactive streams exploiting maximum tolerable delay 
proc 
advances intrusion detection raid 
