verifying confidentiality authentication kerberos frederick butler cervesato aaron andre scedrov department mathematics university pennsylvania south rd street philadelphia pa usa scedrov saul cis upenn edu itt industries advanced engineering sciences huntington avenue alexandria va usa itd nrl navy mil department mathematics armstrong hall box west virginia university wv usa department mathematics tulane university st charles avenue new orleans la usa math tulane edu 
results project analyzing kerberos 
main expected properties protocol confidentiality authentication hold protocol 
analysis highlights number behaviors follow script protocol appear harmful principals involved 
obtained results formalizing kerberos levels detail multiset rewriting formalism msr adapting inductive proof methodology pioneered schneider 
detailed specification takes account encryption types flags options error messages timestamps 
scedrov butler partially supported dod university research initiative uri program administered office naval research nsf ccr 
cervesato partially supported nrl contract 
written cervesato visiting princeton university 
years pursued project intended give precise formalization operation objectives kerberos determine protocol satisfies requirements 
initial results reported 
detailed complete account 
intended high level summary goals methods outcome project 
adopted hierarchical approach formalizing large complex protocol gave base specification orthogonal refinements 
may thought fragment family refinements base specification including common refinement detail approach pseudocode 
notably able extend theorems proofs formalization detailed formalizations adding detail 
base specification refer level formalization contains detail prove authentication confidentiality results omits details full protocol 
level refinement level specification adds selected timestamps temporal checks base specification important part protocol level formalization yield interesting results omitted discussion 
see details 
refer second refinement base specification level formalization refines refined level formalization 
level description kerberos adds encryption types flags options checksums error messages core exchanges included level 
analysis concentrated confidentiality session keys data origin authentication tickets information main requirements levels 
initial report included properties level extended parts level parallel theorems level formalization 
various anomalies curious protocol behaviors appear cause harm prevent protocol achieving authentication 
summarize findings including details anomaly noted 
background 
kerberos widely deployed protocol aimed repeatedly authenticating client multiple application servers single login 
kerberos various tickets encrypted server key unreadable user forwarded appropriate request authenticate user desired service 
formalization kerberos publicly released version protocol extended thoroughly analyzed inductive approach 
analysis heavy reliance isabelle theorem prover yielded formal correctness proofs specification timestamps highlighted minor problems 
simple fragment version kerberos investigated state exploration tool mur 
methodology 
security protocol specification language msr formalize kerberos various levels abstraction intend consider 
msr simple logic oriented language aimed giving flexible specifications complex cryptographic protocols 
uses strongly typed multiset rewriting rules order atomic formulas express protocol actions relies form existential quantification symbolically model generation nonces session keys fresh data 
framework includes static checks type checking data access verification limit specification 
contrast meta security systems msr offers open uncommitted logical basis possible reason experiment wide variety specification verification techniques sound manner 
msr resembles inductive method analyze kerberos model state transitions protocol run msr tailored specifying protocols primitive notion freshness formal semantics captures notion transition 
interest connect specification language methods proof project intended test bed msr real world protocol prior embarking ongoing implementation effort explore forms reasoning best take advantage linguistic features msr 
experience gathered project positive 
verification methods inspired schneider notion rank function influenced inductive theorem proving method paulson applied verification kerberos 
formalization kerberos analyzed defined classes functions rank capture essence notions authentication confidentiality respectively 
experience functions suggests currently manual generation automated embedded msr proof assistant 
results 
proved authentication properties tickets ticket granting service kerberos associated encrypted keys client sends ticket request server 
doing separate confidentiality properties proved session keys generated standard protocol run 
proved confidentiality authentication properties key ticket level formalizations shown parallel properties second key ticket pair hold level formalization expect hold level formalization 
table sect 
shows property statements correspond property types protocol exchanges 
report state protocol properties language applicable formalizations properties proved deleting details corresponding level theorem gives level theorem statement proofs show similar parallels 
uncovered handful anomalous behaviors interesting practical attacks level ticket switch anomaly intruder corrupts ticket way client restores 
refined anonymous ticket switch anomaly level 
encryption type anomaly level intruder hijacking requests manipulating encryption type fields 
anomalies reported ticket option anomaly effects generalize anonymous ticket switch anomaly actions intruder simpler originally described anonymous ticket switch anomaly describe anomaly addition reviewing anomalies 
organization 
start sect 
high level description kerberos discussion details included level formalizations 
section provides overview msr definition rank functions analysis 
sect 
turn positive results confidentiality authentication kerberos sect 
discusses curious protocol behavior seen 
sect 
outlines possible directions extensions 
appendices contain msr rules comprising formalizations kerberos 
appendices give level description behavior honest protocol participants intruder respectively 
appendices level formalization 
overview kerberos protocol intuitive description standard kerberos run provides client convenient means repeatedly authenticate application server obtains service ticket third party known ticket granting server tgs 
added flexibility authentication tgs implemented presenting ticket granting ticket fourth party kerberos authentication server kas 
core protocol consists succession phases outlined fig 
color conventions various fields explained shortly 
describe succession phase sends request krb req kas ticket tgt particular tgs replies message krb rep consisting ticket tgt encrypted component containing fresh authentication key akey shared tgt encrypted secret key kt accompanying message encrypted secret key kc 
second phase forwards tgt authenticator encrypted akey tgs message krb tgs req 
responds krb tgs rep sending service ticket st encrypted secret key client kas tgs server krb req krb rep krb error krb tgs req krb tgs rep krb error tgs normal messages error messages application messages krb ap req krb ap rep krb error ap application messages tgt akey kt st skey ks md akey md 
skey krb req krb rep tgt akey krb tgs req tgt md tc akey krb tgs rep st skey akey krb ap req st md tc skey krb ap rep tc skey krb error krb error tc tc err fig 
kerberos messages level level formalizations kerberos ks application server component containing service key skey shared encrypted akey 
third phase forwards st new authenticator encrypted skey message krb ap req credentials valid application server authenticate provide service 
acknowledgment message krb ap rep optional 
single ticket granting ticket obtain service tickets possibly application servers valid 
similarly service ticket repeatedly request service expires 
cases fresh authenticator required ticket 
protocol run described similar kerberos 
primary difference versions aside options available version version structure rep tgs rep messages 
version ticket granting ticket sent kas part message encrypted client secret key kc service ticket sent tgs likewise encrypted shared 
version see ticket granting ticket service ticket sent encryption enables cut paste anomalies describe 
note kerberos protocol changes initial specification 
version revisions changes include addition anonymous tickets may may revisions protocol 
description protocol ietf internet draft version month lifetime 
current version 
level formalizations fragment kerberos adopt level specification consists minimum machinery necessary implement presentation 
summarized black ink fig 
please ignore parts gray fully formalized app 
adopt standard conventions comma denote concatenation fields expressions form result encrypting message key distinguish encryption algorithms level detail 
usually write possibly subscripted nonces similarly decorated timestamps 
level specification extends level adding additional fields messages displayed gray fig 

additions include error messages option fields client requests flag fields servers describe options granted keyed checksums explicit consideration encryption types 
level formalization detailed app 
msr msr originated simple logic oriented language aimed investigating decidability protocol analysis variety assumptions 
evolved precise powerful flexible relatively simple framework specification complex cryptographic protocols possibly structured collection coordinated subprotocols 
introduce syntax operations msr go 
central concept msr fact protocols expressed msr rules take multisets objects precise definition omit moment rewrite different multisets 
msr facts formal representation network messages stored information internal states protocol participants 
protocol runs represented sequences multisets facts obtained previous applying rules formalization protocol 
protocol signature protocol specification msr requires type declarations classifying terms appear protocol 
include types kas tgs server authentication ticket grating applications servers respectively interact clients fourth type protocol participant 
subtype generic principal type names may network messages 
principal msg kas principal types include nonces timestamps keys 
auxiliary types allow shared keys included messages prohibiting long term database keys sent network 
example client tgs shared key type subtype msg database key type 
level formalization uses expanded signature includes options subtypes opt client uses modify default request server flags subtypes flag describe options granted server 
level adds encryption types allow client specify encryption method formalization encryption type additional parameter different types keys 
syntactically level non atomic messages concatenation messages result symmetrically encrypting message key denote resulting message noted level formalization includes message digests cryptographic hashes 
digest encryption parameterized encryption type denoted respectively compatible keep encryption type implicit specifically discussing 
formalizations shared keys database keys construct message digests 
state roles intuitively msr represents state execution protocol multiset ground order formulas facts mentioned earlier 
predicates universal particular indicates message transiting network 
predicates protocol dependent classified memory role state predicates 
memory predicates store information runs protocol pass data subprotocols invoke external modules 
intruder stores intercepted information predicate 
encounter memory predicates go 
role state predicates form 
allow actions principal 
principals cause local transformations global state non deterministically executing multiset rewriting rules form lhs rhs lhs finite multiset facts number constraints facts 
constraints principals check system clocks determine validity requests external processes explicitly modelled 
facts lhs contained constraints satisfied rule replace facts rhs 
actual definition slightly general sense rules generally parametric rhs may specify generation nonces data rewriting state 
rules comprising protocol subprotocol collected role parameterized principal executing 
rules role threaded role state predicates declared inside role 
rank functions inspired schneider analysis amended needham schroeder protocol define rank functions facts multisets facts 
key message rank relative captures maximum number nested encryptions keyed message level formalization message key appear term innermost encryption exactly encrypted digested define rank fact 
tj maximum value rank ti intuitively number times encrypted obtain fact obtained looking arguments predicate rank multiset finitely distinct facts maximum rank fact multiset 
authenticate origin showing specified protocol participant may create fact rank relative participants including intruder rewrite multiset facts resulting multiset greater rank relative 
facts trace positive rank appearance fact positive rank multiset trace implies protocol participant created point trace 
set keys atomic message term relative minimum number decryptions keys needed extract message term 
define fact 
tj minimum argument ti may placed back network allows protocol participants store keys memory facts equals 
defined multiset facts minimum fact appearing multiset 
note fact corresponds intruder knowledge equal relative set keys 
may prove confidentiality showing set keys facts relative appear protocol trace 
properties kerberos overview established confidentiality data origin authentication properties kerberos 
important kerberos claims provide authentication proving authentication important session keys show confidential may additional post protocol run communication protocol participants 
types properties hold ticket granting client server exchanges 
sub protocols similar structure unsurprising properties expressed proved similar ways 
table shows parallel relationships properties established far exchange corresponding confidentiality property corresponding authentication property 
confidentiality properties give conditions intruder learns certain information authentication properties state conditions certain messages appear network messages originated specific principals 
properties described detail ticket granting exchange sec 
client server exchange sec 

assume presence dolev yao intruder 
additionally intentionally leak keys intruder done 
table 
properties established kerberos confidentiality authentication exchange property property exchange property property precise statements terms msr rules facts proofs properties related way formalizations related removing information detailed version gives version 
result optimistic able extend properties shown client server exchange detailed formalization 
properties ticket granting exchange ticket granting exchange closer protocol run properties slightly simpler client server exchange 
proved properties level formalizations 
confidentiality akey 
property established kerberos confidentiality session key generated authentication server intruder learn key 
property 
intruder know long term secret keys kc kt encrypt session key akey generated authentication server intruder learn akey 
authenticity ticket granting ticket authenticator 
second property kerberos data origin authentication ticket authenticator client request ticket granting server 
property 
intruder know long term key encrypt ticket granting ticket tgt ticket didn initially exist tgs processes request ostensibly client containing ticket granting ticket tgt session key akey authentication server created session key akey tgs generated tgt 
furthermore intruder know long term key authentication server send akey client authenticator created particular client 
properties client server exchange move properties client server exchange exchange parallels ticket granting exchange properties parallel properties proved exchange 
properties build stated may viewed main positive results obtained 
far proved properties level formalization expect hold level formalization 
confidentiality skey 
property client server exchange session key shared client server know intruder 
property 
intruder knows long term secret key tgs encrypt service ticket st containing new session key skey client server session key client request service ticket intruder learn skey 
authenticity service ticket authenticator 
second property exchange data origin authentication ticket authenticator included client request server 
property 
intruder know long term key encrypt service ticket st ticket initially exist server processes request ostensibly client containing service ticket st session key skey ticket granting server generated session key skey created st furthermore intruder learns session key ticket granting server encrypt skey replying client request service ticket client created authenticator 
anomalies overview anomalies analysis kerberos anomalies review 
described give detailed description forth sect 

behavior deviates intended protocol behavior anomalies compromise security protocol 
noted jeffrey implementations kerberos sufficiently guard replays allowing intruder force repeated generation fresh credentials replaying requests client 
concern separate anomalies noted leave discussion detailed report 
anomaly realized level formalization remaining anomalies require detail level formalization 
ticket option anomaly requires detection replays explicitly included level generic error detection ticket anomaly intruder intercepts krb rep message kas replaces ticket granting ticket garbage message 
intercepts subsequent krb tgs req messages client restores original ticket allowing protocol proceed normally 
behavior undetectable client expects unable read encrypted ticket 
false beliefs data possession holds valid ticket fact 
origin ticket authenticator may authenticated kerberos prove entirety valid krb tgs req message originated client 
anonymous ticket switch anomaly client requests service tickets anonymous non anonymous tgs server intruder may intercept tgs rep messages switch tickets forwarding resulting messages client 
exactly tickets client receives contains identity anonymous client mistaken belief tickets client sends krb ap req messages name matched wrong ticket requesting mutual authentication 
intruder intercepts messages replaces authenticator client name authenticator forwarding resulting messages may read tickets key non anonymous ticket opens accompanying authenticator 
accepts request ticket rejects request anonymous ticket returning error message client 
may tamper message contains client name correctly believes exactly requests accepted incorrectly believes seen name 
ticket replay anomaly described detail effects similar anonymous ticket switch anomaly 
intruder intercepts krb ap req messages server simply replays produce replay error server may tamper error message essentially server unpack timestamp request new error message appear authentic 
done conjunction intercepting second krb ap req message client client believe anonymous ticket switch anomaly accepted exactly requests incorrect belief 
anomalies involve separating tickets rest message containing 
possible kerberos tickets included data encrypted server client 
change message structure versions protocol allows anomalies affect basic authentication provided kerberos 
encryption type anomaly assume client different longterm keys different encryption methods learned intruder knows key compromised 
sending krb req message kas request response encrypted encryption method corresponding lost key 
message unencrypted may change encryption type field specify encryption method corresponding lost key 
response encrypted lost key readable may impersonate anyway knowing long term key see impersonation possible takes steps avoid lost long term key 
ticket replay anomaly examine ticket replay anomaly detail similar discussions replays detailed report 
updates fig 
show message flow anomaly 
client initiates completes authentication service exchange kas obtaining ticket granting ticket tgt tgs uses ticket requests service tickets single server requesting different options service tickets 
receives requests different service tickets st st associated session keys skey skey assume options granted tgs different tickets 
recall tgs sends copy granted options new session key encrypted session key shared client tgs client associates different granted options different keys 
client sends requests server st authenticator encrypted skey containing timestamp st skey respectively 
assume requests client request mutual authentication server expects response case error 
intruder intercepts requests 
duplicates request containing st skey forwards server accepts rejects second replayed authenticator 
prompts error message containing server intruder may intercept modify client kas tgs intruder server tgt akey tgt md tc akey st skey akey tgt md akey st skey akey st md skey st md skey st md skey st md skey krb error ts err replay krb error ts err fig 
message flow ticket replay anomaly send client 
intruder send second request containing st skey server 
result client receives error message containing timestamp response request containing st skey assume request rejected second accepted reverse true 
potentially options tickets different case anonymous tickets client erroneously assume identity seen server error tied non anonymous ticket 
unclear anomaly practical concern 
highlight interactions ticket options traces anonymous ticket option may particularly undesirable 
formalizations include explicit checks replayed authenticators anomaly realizable formalizations 
adding checks require additional detail level formalization 
summarized results project specifying analyzing kerberos suite initial report detailed discussion contained 
concentrated subset protocol takes account encryption types checksums flags options error messages timestamps top core message exchange 
formally shown level detail kerberos complies confidentiality data origin authentication requirements 
observed anomalous behaviors deviate expected script protocol appear potential causing harm principals involved 
order produce results paired msr security protocol specification language inductive proof method inspired schneider 
may extended directions 
formalizations kerberos may refined adding options particular renewable tickets timestamps temporal checks seldom analyzed optional subprotocols comprise suite particular krb safe priv exchanges mechanisms distributing updating longterm keys 
second may refine tools analysis cope increasing complexity necessity assess requirements go confidentiality authentication 
step ongoing implementation msr environment help manage complex specifications assist development 
part development verification methods order reuse previously proved results guidelines new proofs refined specifications kerberos 
looking automation help purpose 
received encouraging feedback ietf kerberos working group 
acknowledgments grateful alan jeffrey john mitchell clifford neuman ken number helpful comments earlier 

kohl neuman kerberos network authentication service network working group request comments 

neuman ts kerberos authentication service computer networks 
ieee communications 
neuman kohl ts yu kerberos network authentication service internet draft expires may 

butler cervesato scedrov formal analysis properties kerberos msr 
proceedings th computer security foundations workshop ieee computer society 
butler cervesato scedrov formal analysis properties kerberos msr 
technical report cis ms university pennsylvania department computer information science pages 
available ftp ftp cis upenn edu pub papers scedrov ms cis pdf ps 

bella formal analysis kerberos authentication system 
universal comp 
sci 

bella inductive verification cryptographic protocols 
phd thesis university cambridge 
bella paulson isabelle prove properties kerberos authentication system 
meadows eds proc 
dimacs workshop design formal verification security protocols cd rom 

bella paulson kerberos version iv inductive analysis secrecy goals 
proc 
esorics fifth european symposium research computer science 
number lecture notes computer science springer verlag 
bella paulson ban kerberos inductive method 
proc 
cav tenth international conference computer aided verification 

mitchell mitchell stern automated analysis cryptographic protocols mur 
proc 
ieee symposium security privacy ieee computer society press 
cervesato lincoln mitchell scedrov meta notation protocol analysis 
proc 
twelfth ieee computer security foundations workshop 

cervesato typed multiset rewriting specifications security protocols 
proc 
irish conference mathematical foundations computer science information technology elsevier entcs 
cervesato typed msr syntax examples 
proc 
international workshop mathematical methods models architectures computer network security mmm 
springer verlag st petersburg russia may 

lincoln mitchell scedrov multiset rewriting complexity bounded security protocols 
manuscript pages 

schneider verifying authentication protocols csp 
ieee transactions software engineering 
neuman personal communication 

neuman yu hartman kerberos network authentication service internet draft expires august 
www ietf org internet drafts draft ietf krb wg kerberos clarifications txt 

jeffrey personal communication 

personal communication 
level protocol formalization give detailed description level formalization kerberos figs 
show msr roles rules comprising formalization 
believe level formalization contains minimum client tgs nonce etype 
tgs kas 
etype 
kc akey akey kc msg nonce 
krb error tk err errorcode msg 
errorcode tk err time nonce akey krb error tk err errorcode fig 
client role authentication service exchange client amount detail needed capture kerberos protocol 
proofs related formalization nonces omitting remove connection krb req krb rep messages 
authentication service exchange recall authentication service exchange allows client obtain kas credentials ticket granting exchange tgs actions exchange formalized fig 
fig 

note rules fill gaps rules exchanges protocol omit various server rules essentially recoverable client rules 
asks credentials server rule sending req message name name tgs wishes obtain credentials fresh nonce storing role state predicate rule allows process krb rep message sends response initial request 
message expected contain name opaque ticket passed encrypted long term key kc session key akey nonce original request name tgs 
message form match data original request stored removes krb rep message network deletes role state predicate stores relevant data persistent memory predicate 
formalization process error messages may return defined 
client tgs nonce kc kt akey etype 
invalid errorcode msg 
tk err time tk err akey akey kt akey kc krb error tk err errorcode fig 
authentication server role authentication service exchange kas krb req message network valid determined external process rule allows generate fresh session key akey send key krb rep message message consists name ticket encrypted kc key akey nonce request name tgs 
ticket encrypted long term key kt contains akey name client 
ticket granting exchange third fourth messages shown fig 
comprise ticket granting exchange 
client presents credentials previously obtained authentication server authentication service exchange tgs order obtain service ticket application server client actions exchange formalized fig 

indicated memory predicate akey client completed authentication service exchange get credentials tgs rule allows initiate exchange obtain credentials application server doing chooses new nonce sends krb tgs req message consisting previously obtained ticket authenticator encrypted session key akey name name server wishes obtain credentials new nonce 
stores information request role state predicate retains memory predicate exchanges client second rule allows read krb tgs rep message matches request message consists name opaque ticket passed application server encrypted session key akey session key skey application server client topt server tgs nonce time 
tgs server akey msg akey tc time tc topt etype 
skey skey msg akey nonce tc krb error tc 
tt err errorcode errorcode msg 
tt err time tc nonce akey tc akey akey tc skey tt err errorcode fig 
client role ticket granting exchange client nonce application server name match stored information original request order process krb tgs rep message 
process message stores ticket server name session key skey memory predicate 
close correspondence rules fig 
omit tgs rule level 
krb tgs req message right hand side rule appears network tgs rule allows tgs read network process includes validity check constrains firing rule 
firing rule produces fresh session key client share server named krb tgs req message places krb tgs rep message left hand side rule network 
client server exchange fifth sixth messages fig 
form client server exchange 
client presents credentials previously obtained tgs application server level formalization assume mutual client sopt server time msg 
server skey tc time skey msg mutual tc sopt tc skey 
skey tc krb error 
tc ts err errorcode msg 
errorcode ts err time skey tc 
skey tc skey skey skey tc skey ts err errorcode client fig 
client role client server exchange mutual authentication authentication requested sixth message type krb ap rep required protocol finish 
shows role client exchange 
previously obtained credentials ticket session key skey stored memory predicate may fire rule 
places krb ap req message containing ticket authenticator obtained encrypting current time tc system external process session key skey network stores relevant information request role state predicate second rule may fired network contains krb ap rep message consisting tc encrypted skey 
rule reads message network stores server name session key skey predicate 
modelled level formalization information intended additional communications omit formal statement server msr rule essentially client rules 
krb ap req message server appears network may fire rule reads network replies krb ap rep message 
paralleling tgs rule constrained validity check krb ap req message 
stores data request memory predicate predicate session key known client may communication 
level intruder formalization section rules specifying dolev yao intruder model kerberos 
ask reader ignore moment grayed text describes additions needed detailed level intruder 
come back app 
divide actions available intruder categories fairly standard operations interception transmission message network decomposition composition pair decryption encryption message known key app 
overlooked action generating new data app 
accessible data app 

network pairing encryption rules rules describing dolev yao intruder intercept transmit messages decompose compose pairs decrypt encrypt messages various types known keys 
administrative rules permit duplication deletion deleted data 
intruder allowed read messages network removing network process put messages knows network 
may break compound messages constituent parts combine separate messages single message concatenation 
rules samples intruder rules model decryption sdc encryption sec shared key 
type ts auxiliary types mentioned sect 
includes tgs server 
client ts etype msg sdc client ts etype msg sec similar rules allow intruder decrypt encrypt long term key knows 
intruder allowed duplicate delete information knows ability delete data dropped intruder specification adverse effects 
data generation rules general intruder able generate honest principal generate nonces session keys 
case kerberos admit exception rule principals forward uninterpreted data allow intruder create garbage modelled objects generic type msg 
omit intruder rules generating nonces session keys include rule generating generic messages merits discussion 
mg msg rule mg allow generate long term key principal subtype msg 
note intruder may generate fresh messages may type msg 
intruder allowed generate kind data principal names kind new agents happens band long term keys distributed band timestamps generated external clock principal 
allowing intruder generate data forms incorrect open doors countless false attacks 
data access rules intruder entitled look data principal 
access names entities type principal keys longterm session timestamps 
note respect timestamps differ nonces allow intruder guess 
note ability guess timestamps may give unreasonable strength intruder 
piece information accessible thin air intruder intercepted information able guess nonces generated principals keys belong clearly generic messages 
level protocol formalization level formalization extends level formalization adding additional elements full protocol specification 
particular include options messages sent client allowing request particular encryption methods anonymous tickets specify server provide mutual authentication replies messages include flag fields specifying options granted 
message digests appear specified protocol 
added error messages authenticator krb tgs req message includes timestamp may sent back client error message 
add temporal checks 
grayed portions fig 
figs 
details added level formalization obtain level 
refer level rule name appropriate subscript various figures mean entire rule depicted including grayed portions 
fields specifying encryption type appear messages level technically appear encrypted message occurs sect 
convention omit etype capacity explicitly discussing 
authentication service exchange return fig 
see client actions authentication service exchange looking black gray type 
rule allows send krb req message extends rule adding options field field containing requested encryption type response 
rule allows client process response includes field indicating options granted kas 
rule shows error processing generic error message formalized storing relevant information memory predicate 
errorcode describes reason krb req failed 
actions kas formalized fig 
including black gray type 
rule similar rule validity check performed covers added message fields external process determine options requested approved granted described flags 
request valid reason determined external process invalid assume hold iff check fails reads current time tk err local clock external process 
rule fired sends error message consisting time error occurred tk err appropriate errorcode names ticket granting exchange considering colors type fig 
gives level client rules ticket granting exchange 
rule allows client send krb tgs req message updates rule 
message includes current time tc client local clock obtained external process message digest keyed akey unencrypted portion krb tgs req options field requested encryption type may client request anonymous ticket granting ticket 
rule extends rule allows client read network krb tgs rep corresponds previous krb tgs req message 
added details flags response options timestamp encryption type stored role state predicate 
note anonymous set flags krb tgs rep message name dummy identifier user appear ticket rule 
level formalization adds error messages rule allows process manner rule authentication service exchange 
note names error message match role state predicate omit formal msr rules tgs essentially client rules ticket granting exchange 
tgs sets flags response options requested client verifies checksum included krb tgs req message 
notable difference level tgs behavior addition rule send error messages 
essentially rule authentication service exchange 
client server exchange including colors type shows role client exchange 
rule obvious extension rule constraint mutual indicate mutual required option requested note ticket stored predicate anonymous indicated presence anonymous field stored send generic identifier user place name authenticator sent rule 
denote message digest 
skey specifies optional checksum application specific rule virtually identical rule difference presence role state predicate rule models handling error messages exactly way previous exchanges kas tgs storing relevant information sent error message memory predicate 
exchanges omit rules processing client request 
server response krb ap req message requesting mutual authentication constrained check option verification checksum addition general validity check level 
change krb ap rep message server allowed send error messages case invalid request client essentially exchanges 
level formalization allows client request mutual authentication application server case views exchange finished soon sends krb ap req message may process error messages similarly send reply valid request may send error messages needed 
level intruder level intruder rules update level reflect added detail formalization 
rules interception transmission decomposition composition decryption encryption known key change extent take encryption types account rules involve cryptographic primitives 
disassembling rule message digests cryptographic hashing permit recovering message 
intruder construct message digest long knows proper key captured rule similar sec 
updates generation rules limited allowing intruder choose encryption type session key may generate 
new data types introduced level detail generated intruder principal 
additional data generation rules app 

data access rules subject similar changes 
new data types encryption types options flags treated similarly timestamps range limited number legal values public knowledge 
timestamps assume encryption types options flags rules parallel ta 
information inaccessible level specification intruder remains inaccessible level 
