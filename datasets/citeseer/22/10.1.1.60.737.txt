decoupled query optimization federated database systems deshpande joseph hellerstein cs division eecs department university california berkeley 
cs berkeley edu report 
ucb csd april computer science division eecs university california berkeley california decoupled query optimization federated database systems deshpande joseph hellerstein cs division eecs department university california berkeley 
cs berkeley edu april study problem query optimization federated database systems 
nature federated databases explicitly decouples aspects optimization process making imperative optimizer consult underlying data sources doing cost optimization 
increases cost optimization changes trade offs involved optimization process significantly 
dominant cost decoupled optimization process cost costing traditionally considered insignificant 
optimizer afford rounds messages underlying data sources optimization techniques environment geared gathering required cost information minimal communication 
explore design space query optimizer environment demonstrate need decoupling various aspects optimization process 
decoupled variants various query optimization techniques discuss trade offs performance scenario 
implemented techniques federated database system experimental results somewhat surprisingly indicate simple phase optimization scheme performs fairly long physical database design known optimizer aggressive algorithms required 
need federated database services increased dramatically years 
enterprises infrastructures decentralized result mergers acquisitions specialized corporate applications resulting deployment large federated databases 
dramatically internet enabled new inter enterprise ventures including business business net markets hubs net business hinges thousands decentralized catalogs databases 
broadly considered federated database technology subject multiple research thrusts including schema integration data transformation federated query processing optimization 
query optimization goes back far early distributed database systems sdd dis tributed ingres bgw focused linking data sources various capabilities cost models 
query optimization broad federated environment presents peculiarities change trade offs optimization process quite significantly 
nature federated systems decouple aspects query optimization process tightly integrated centralized distributed database systems 
forced ad constraints federations typically span organizational boundaries decoupling moti need scale administration performance system thousands sites sdk 
federated query processors need consider basic decoupling query processing large scale federated system data access compu tation carried various sites 
global efficiency beneficial consider assigning portions query plan arbitrary distributed ways 
flexibility constrained var ious issues including administrative constraints sdk limited site capabilities flms 
federated system restricted centralized processing order form scale consider data computation resources available time 
decoupling cost factors centralized dbms query execution cost unidimensional construct measured units 
federation costs decoupled multiple dimensions control various administrators 
proposal universal cost metric hard currency sdk typically costs valuable expose orthogonally including response time ghk data freshness ow accuracy computations ahl 
decoupling cost estimation regardless number cost dimensions centralized opti accurately estimate costs operations autonomous sites may depend transient system issues including current loads temporal administrative policies sdk 
cost estimation process federated manner reflective query processing cost estimates provided sites doing 
addition time transfer data network various components modeled 
studied individually context distributed neous federated database research sbm 
best knowledge decoupling cost estimation requires optimizer communicate sites merely find cost operation studied 
scenario communication may dominant cost query optimization process 
high cost costing raises number new design challenges adds additional factors complexity federated query optimization 
cost costing get idea cost costing affect optimization time plot time required obtain costs function number operations costs required wide area network 
experiment run optimizer communicating single data source simulated wide area network set artificially constructed queries see naive method sending message operation turns infeasible smallest message cost model described detail section queries number operations need tpc query 
requests batched single message time required find costs quite significant optimizer careful choosing operations requests costs 
time seconds contributions 
requests cost costing batched communication message request consider large space federated query optimizer design alternatives argue need consideration high cost costing environment 
accordingly minimum communication decoupled variants various known optimization techniques 
implemented algorithms federated database system experimental results modified tpc benchmark queries 
experimental results somewhat surprisingly suggest simple technique breaking op timization process phases hs finding best query plan static conditions scheduling federation run time conditions works presence fluctuations loads underlying data sources communication costs long physical database design known optimizer 
hand optimizer unaware physical database design indexes materialized views underlying data sources aggressive optimization techniques required propose hybrid technique tuning previous heuristic circumstances 
preliminary analysis explaining surprising success phase optimizer cost model experimental settings section 
analysis suggests behavior may merely peculiarity experimental settings may hold true general 
overview describing design space federated query optimizer place prior context section 
briefly describe architecture federated system experiments section discuss additional factors federated optimizer consider section 
section minimum communication decoupled variants various known optimization techniques discuss trade offs performance 
results empirical study algorithms tpc benchmark section 
design space related explore design space federated optimizer concentrate factors signifi cantly affect complexity optimization process dynamic load conditions run time conditions including loads underlying data sources communication costs significant impact execution cost query 
unknown cost models discussed heterogeneous nature system impossible optimizer know cost models underlying data sources may depend implementation issues database design issues presence indexes materialized views 
factors divide design space federated query optimizer categories shown vertical axis table 
horizontal axis list various known optimization techniques developed years 
exhaustive heuristic phase randomized pruning dynamic unknown cost models static unknown garlic cost models dynamic known parametric mariposa cost models zation cg inss sdk static known idp ks simulated anne cost models po ik table design space federated optimizer 
vertical axis contains various cost scenarios horizontal axis contains various optimization algorithms 
denotes combinations consider denotes scenario optimization algorithm applicable 
see various possibilities studied 
focus uppermost category cost models underlying data sources known optimizer optimizer consider load conditions optimizing 
note top row terms site data source interchangeably 
assumptions environment algorithms developed scenario applied scenarios 
may possible cases develop better algorithms constrained scenarios pruning aggressively knowledge constraints 
proceed consider rows table turn 
query optimization perspective simplest scenarios lowest row cost models underlying data sources known optimizer optimization goal minimize total execution cost 
earliest distributed database systems built assumptions environment 
optimizer extended version system optimizer extra term added execution cost formula communication cost 
kossmann ks proposed alternative exhaustive dynamic programming called iterative dynamic programming idp exhaustive algorithm turns complex time space distributed scenario small queries 
discuss algorithm detail section 
various randomized algorithms proposed complex join queries containing large number joins ik 
combat large plan space parallel environment introduce new randomized algorithm called simulated annealing 
second row bottom relevant centralized database systems run time condi tions significantly affect execution cost query plan 
cg inss gan col discuss parametric optimization compute set plans optimal different values run time parameters just plan choose plan run time values parameters known 
gk discuss techniques may extended distributed databases loads underlying databases may known optimization time 
phase optimization approach begins sense context 
initially proposed xprs parallel database system hs phase approach divides optimization parts finding best single site plan scheduling run time current conditions 
mariposa sdk similar approach federated op timization finding best single site plan bidding mechanism gather information loads underlying systems schedule plan phase 
second row top focuses heterogeneous nature federated databases consid ering dynamic runtime issues 
heterogeneous database systems challenge incorporating cost models underlying data sources optimizer 
solution problem try learn cost models data sources calibration learning techniques zl dks middleware systems garlic chosen solve problem wrappers programmed encapsulate cost model capabilities site 
cost costing significant garlic wrappers belong middleware fact execute address space optimizer 
garlic uses exhaustive dynamic programming find optimal plan aware explicit area uses optimization techniques difficult extend scenario 
fully decoupled federated database system modeled top row assumptions underlying cost models transient costs 
fully decoupled environment federated ik term phase optimization hybrid randomized algorithm propose follow usage term hs 
dbms know implementation policies autonomous sites federation free change implementations physical database design cost estimation policies automated mechanisms sdk 
uncertain load conditions commu nication costs significant impact execution cost query especially optimizing response time 
sbm discuss query optimization issues loosely coupled federated systems 
query optimization perspective main focus incorporating knowledge statistics system parameters gained executing query run time query plan 
statistical decision mechanism schedules query plan join time 
sbm propose mechanism loosely coupled multi database system underlying databases cooperate find optimal plan 
algorithm suitable federated database system environment may completely cooperative number messages exchanged underlying data sources increases exponentially size query 
apart traditional query optimization techniques ah propose new adaptive architecture called eddies query processing :10.1.1.34.8546
eddies designed function highly dynamic environ ments geared adapting idiosyncrasies data sources execution query execution query 
kind databases consider static respect assume existence relevant metadata including statistics data sources 
described ah eddies centralized fashion accessing data various data sources executing queries single machine federated database interested distribution participating data sources :10.1.1.34.8546
architecture terminology experimental study federated database system mariposa research system sdk extended handle heterogeneous data sources including various relational databases legacy systems web data sources html xml 
part support mariposa economic paradigm sdk system cleanly decouples various aspects optimization process described previously 
main idea economic paradigm integrate underlying data sources computational economy captures autonomous nature various sites federation 
significant controversial goal mariposa demonstrate global efficiency economic computing terms distributed load balancing 
purposes controversies economic policy relevant long term adaptivity problem mariposa tried solve scope 
main benefit economic model provides fully decoupled costing api sources 
result site local autonomy determine operation costs take account factors resource consumption response time accuracy staleness data administrative issues supply demand specialized data processing 
local autonomy critical federated system spans organizational boundaries expect find internet context large enterprises 
section briefly discuss architecture system introduce terminology rest 
architecture bidder executor system consists layers application layer sql query optimization goal sql parser optimizer coordinator middleware layer bidder executor database database architecture federated system local execution layer application layer consists client program interacts user 
passes user query optimization goal middleware execution 
middleware layer middleware layer consists query parser optimizer coordinator 
metadata manager shown get relevant information tables locations statistics regarding cardinalities distribution join attributes optimizer uses information formulate set operations performed communicates data sources compute costs operations bidding constructs described formulates query plan 
plan matching optimization constraints client application notified query plan passed coordinator coordinates execution query 
local execution layer underlying site exposes modules middleware layer bidder executor 
bidder participates query optimization process optimizer making cost estimates parts queries 
mariposa sdk argued bidder incentive honest accurate costs 
problem dishonest inaccurate bidders similar nature cost estimation problem single site optimizer faces bidders don accurate bids plan may turn optimal query execution 
issue accurate cost estimation orthogonal discussion 
remainder assume bidders perfect bidders export cost operation accurately 
terminology terminology extended mariposa sdk rest 
request bid rfb rfb construct optimizer find execution cost operation remote data source 
rfb consists operation performed may contain relevant statistics necessary input join operation intermediate table optimizer include relevant statistics table corresponding rfb 
bid data source specifically bidder source uses construct respond rfb 
cases response contain estimated execution cost possibly multi dimensional operation tell optimizer staleness accuracy data 
cost mark construct abstracts load conditions site number scale bids site 
number usually depend load conditions data sources may dictated administrative policies 
construct control load data source seen optimizer experiments 
federated query optimization query optimization problem find execution plan satisfies optimization goal provided user goal may function variables including response time total execution cost accuracy staleness data 
simplicity concentrate factors response time total execution cost measured terms money fairly easy extend include factors assuming easily estimated 
assume information costs operations interface bidders optimization problem restated optimizing cost information exported bidders 
optimizer needs consider plan space query optimizer search depends large number factors affect search space quite significantly 
discussed important factors dependence execution costs runtime conditions unknown cost models 
ate additional factors optimizer needs consider analyze effect optimization process 
response time optimization vs total cost optimization traditionally optimization goal minimization total cost execution ap plications factors response time staleness data answering query ow accuracy data ahl may critical 
ghk point minimizing optimization goal requires partial order dynamic programming techniques 
partial order dynamic programming generalization classical dynamic programming algorithm cost plan computed dimensional vector depends particular scenario costs considered incomparable equal dimensions 
feasible subset tables partial order dp scheme keeps set incomparable subplans just single subplan kept classical dynamic programming approach 
set incomparable plans computed query plan chosen optimization goal shown cost dimensional vector space time complexity optimization process increases expected factor ghk 
polynomial time approximation algorithm proposed problem py 
ks point total cost optimization distributed setting requires partial order dynamic programming plans producing result different sites comparable due subsequent communication costs differ 
bidding granularity intra site pipelining bidding granularity refers choice operations optimizer requests costs 
maximum flexibility scheduling query plan fine grained possible 
natural choices bidding granules estimate cost query plan scans underlying base tables joins query plan 
creates problem want intra site pipelining optimizer know particular site pipeline consecutive joins 
absence information sites optimizer assume pair joins appear query plan pipelined site assume intra site pipelining 
assumption result incorrect estimation cost 
solve problem allow multi join bid requests optimizer sends bid request consisting multiple relations may intermediate relations bidder asked bid join involving relations 
site resources bidder pipelining joins 
imagine results explosion plan space making optimization time ex chain queries traditionally optimized polynomial time ol 
discuss increase plan space section 
partial order dynamic programming thought generalization interesting orders system sac subplans considered incomparable produce result different sorted order decision optimal subplan optimization process 
trade offs optimization process time spent optimization roughly divided parts cpu time includes time taken optimizer plan called pre processing cost henceforth time taken sites decide bids time taken optimizer processing resulting bids post processing cost 
time taken planning bids directly proportional number bid requests site pre processing post processing costs depend heavily optimization algorithm chosen connectivity query graph 
message time includes actual communication time optimization time taken processing message ends 
depends number rounds messages performed total number bid requests responses sites 
size bid request plays important role 
bid request contain relevant information relations involved operation name relation base table statistics relations relations may intermediate relations details operation join select predicates 
considering optimization times traditionally seconds message startup times observed internet wan order hundreds milliseconds message time significant part optimization time optimization process involves messages 
study trade offs detail section 
simplifying assumptions simplify discussion rest assumptions relational sources assume underlying databases relational export relational interface kind gateway tool coh 
accurate statistics assume statistics regarding cardinalities selectivities available 
reasons feel justified making assumption standard protocols odbc jdbc allow querying host database statistics 
suggested acps possible cache statistics earlier query executions 
communication costs assume communication costs remain roughly constant tion optimization execution query optimizer estimate communication costs incurred data transfer sites involved query 
information may maintained periodically probing communication links getting latest statistics 
possible get costs execution time probing communication links directly current statistics 
probes piggybacked messages sent bidders 
pipelining sites assume pipelining data query operators sites 
main issue pipelining sites pipelined operators may waste resources waiting 
especially problem space shared resources memory time shared different processes easily gi 
producer slow communication link sites slow consumer waiting network holding resources result significant waste resources wan communication times usually high 
adapting optimization techniques section discuss adaptations various known optimization techniques take ac count high cost costing 
aside minimizing total communication cost want sure plan space explored optimization algorithm remains centralized version algorithm 
general break optimization algorithms steps step choose subplans require cost estimates prepare requests bids 
step send messages bidders requesting costs 
step calculate costs plans subplans 
possible decide execution plan query repeat steps 
clearly try minimize number repetitions steps step involves expensive communication 
classical dynamic programming exhaustive dynamic programming proposed system sac prevalent optimization technique database systems today 
algorithm exhaustively searches plans query dynamic programming principle optimality prune away bad subplans early possible 
algorithm exponential nature finishes reasonable time joins involving small number relations guaranteed find optimal plan executing query 
traditionally algorithm requires costing sub plans optimization process show costing postponed significant impact opti mization time 
adapt algorithm federated scenario follows requiring round messages costing 
enumerate feasible joins ol multi joins section desired 
feasible relation defined base relation intermediate relation generated cartesian product feasible join defined join feasible relations ability fetch records foreign data streams proposed early original ingres system commercial database systems started providing functionality fetch records live data streams ibm db udb informix dynamic server udo original system algorithm searched left deep plans implementation search bushy plans 
involve cartesian product 

create bid requests joins multi joins computed scans base relations 

request costs bidders feasible joins 
note join request cost performing individual join assuming input relations computed case input relations intermediate tables 

calculate costs plans subplans recursively classical dynamic programming partial order dynamic programming desired find optimal plan query 
message sizes size message sent requesting bids directly proportional number requests 
columns table show number bid requests required different kinds queries 
vertical axis lists different possible query graph shapes ol clique shape denoting worst possible case optimization algorithm 
see number bid requests goes exponentially multi join bids added 
plan space plan space explored algorithm exactly plan space system style algorithm modified search bushy plans 
system optimizer requires costing feasible joins demand costing done algorithms perform exactly steps find optimal plan 
exhaustive exact pruning optimizer may able save considerable amount computation pruning away subplans knows part optimal plan 
top approach gm gra suitable kind pruning bottom dynamic programming approach described possible incorporate pruning algorithm 
typically algorithms find plan query cost plan prune away subplans cost exceeds cost plan 
main problem kind pruning reduce total number bid requests optimizer requires multiple rounds messages optimizer data sources 
effectiveness pruning depend heavily number rounds messages believe exact pruning useful framework 
dynamic programming heuristic pruning dynamic programming number bid requests required exponential cases 
see message time required get bids optimization time prohibitive smallest queries 
dynamic programming requires costs feasible joins reduce number bid requests compromising optimality technique 
simplicity discussion ignore case cartesian product required executing query 
minor extension easy add 
heuristic pruning techniques iterative dynamic programming ks prune subplans earlier total number costs required 
pruning need find costs subplans consideration requires contacting bidders 
see introduces trade number rounds messages total number bid requests sent 
plan may optimal plan greedy strategies may throw away optimal plan 
experiment variants iterative dynamic programming technique similar variants described ks bid requests batched minimize number rounds messages idp adapt follows 
enumerate feasible way joins feasible joins contain equal base relations 
parameter algorithm 

find costs contacting data sources single round communication 

choose subplan corresponding way join subplans way joins evaluation function throw away subplans 

finished repeat optimization procedure intermediate relation rest relations part 
experimental study simple evaluation function chooses subplan lowest cost 
idp natural generalization earlier variant ks 
differs idp choosing way join possible way joins keep joins throw rest away parameter algorithm 
motivation algorithm variant aggressive pruning plan space may find plan 
aside possibility algorithms may find plan require multiple rounds messages optimizing 
fact variant idp designed query execution starts immediately subplan chosen rest optimization proceed parallel execution subplan 
idp unfortunately admit parallelization 
message size table shows number bid requests required different query graph shapes 
total cost costing depends number rounds communication required 
decreasing decreases total number bid requests startup costs usually significant factor message cost total communication cost may necessarily decrease 
plan space ks discusses plan space explored algorithm 
subspace plan space explored exhaustive algorithm 
techniques described ks minimum selectivity applied orthogonally 
reflect dynamic load costs considerations focus cost pruning 
denote upper bounds number bid requests optimizer 
shape dp dp idp idp query multi joins multi joins chain mn star mn clique phase optimization table number bid requests phase optimization hs extensively chm gi distributed parallel query optimization mainly simplicity ease implementation 
changes need single site optimizer produces best plan local cost models execution time scheduling decisions need include selecting sites run operators cl selecting degrees parallelism operators gi 
message size joins query plan need size message linear number relations involved query multi join bid requests case size exponential number relations 
plan space plan space explored phase system algorithm plan explored second phase importance scenario 
considering plan fully explored algorithm expected algorithm produce worse plans earlier algorithms explore bigger plan space 
quite surprised find produced reasonably plans 
revisit algorithm section 
randomized genetic algorithms traditionally randomized genetic algorithms proposed replace dynamic programming infeasible 
successful algorithms called po combines iterative improvement variant hill climbing simulated annealing ik 
problem randomized algorithms compute costs plans consideration typically current plan neighbors plan space step means optimizer require multiple rounds messages costing 
natural way extending algorithms require fewer rounds messages find possible plans optimizer may consider amount time find costs run optimizer costs 
unfortunately number possible plans optimizer may consider steps increases exponentially typically number steps required quite large believe approach feasible federated environment 
different kind randomized algorithm proposed observation plans plan space costs close optimal plan able find reasonably plan generating plans randomly costing best 
approach attractive requires round messages problem randomly samples plans small total number bid requests generated approximately number relations query 
seriously limits total number plans evaluated optimizer think approach feasible federated scenario 
experiments section initial experimental results comparing performance various optimiza tion algorithms discussed 
main goals experimental study motivate need dynamic costing understand trade offs involved optimization process 
mentioned actual cost execution relevant evaluating optimization algorithm information optimizer execution costs cost models exported bidders 
simplistic cost model bidders communication cost 
results significantly affected choice cost models 
experimental setup implemented algorithms described earlier modified version federated database system hsc 
experiments carried stand windows nt machine running mhz pentium mb memory 
optimizer underlying data sources connect microsoft running locally machine 
set bidders started locally re quired experiments 
simulate network message cost model message size bytes takes time reach startup cost cost byte 
experimented different communication settings corresponding local area wide area networks 
configurations experiments lan ms ms wan ms ms query workload queries tpc benchmark 
queries involve join relations query requires joining relations 
chose data set wanted realistic data set performing experiments 
want concentrate join order optimization modify queries removing aggregates top query shown query select customer orders lineitem supplier nation region custkey custkey orderkey orderkey suppkey suppkey nationkey nationkey nationkey nationkey name region orderdate date date orderdate date date interval year startup times obtained finding time taken ping request www mit edu wan local machine lan time byte obtained finding time taken transfer data sites 
query select customer orders lineitem supplier nation nation custkey custkey orderkey orderkey suppkey suppkey nationkey nationkey nationkey nationkey name nation name nation name nation name nation shipdate data date query select customer orders lineitem supplier part nation nation region custkey custkey orderkey orderkey suppkey suppkey partkey partkey nationkey nationkey nationkey nationkey name region type type orderdate date date query select orders lineitem supplier part partsupp ps nation orderkey orderkey suppkey suppkey partkey partkey nationkey nationkey ps suppkey suppkey ps partkey partkey name color data distribution indexes tpc benchmark scaling factor leads table sizes shows table 
experiments done data sources 
distribution tables indexes follows site supplier index suppkey part index partkey lineitem index partkey nation region site orders index orderkey lineitem index orderkey nation region site supplier index suppkey part index partkey partsupp nation region site orders index orderkey customer index custkey nation region believe realistic data distribution scheme data set tables joined frequently appear 
table name 
tuples tuple size table name 
tuples tuple size lineitem orders partsupp part customer supplier nation region table tpc table sizes scaling factor cost model simple cost model involves grace hash join index nested loop join 
need include nested loop joins assume sufficient memory perform hash join passes 
cost formulas follows index join index cost sb hr br grace hash join cost rb sb min rb sb rb sb denotes memory available join br denotes number tuples block denotes number tuples relation rb denotes number blocks occupied relation denotes number blocks occupied performing select project operations apply 
hr denotes height tree index denotes selectivity join 
optimizer performance section see different optimization algorithms perform various circumstances motivate need better costing optimization process 
algorithms com pare exhaustive section phase po section variants iterative dynamic programming section idp idp idp idp 
effect uncertain load conditions total cost optimization average scaled cost query query query query queries total cost optimization po idp idp idp idp average scaled cost query query query query queries response time optimization po idp idp idp idp optimization presence uncertain load conditions error bars show standard deviation runs experiment varied cost mark various data sources involved amount memory allocated joins 
cost mark ups chosen memory site chosen 
queries algorithms run randomly chosen settings parameters 
costs best plans algorithms scaled optimal plan query exhaustive algorithm 
shows mean scaled costs standard deviation random runs algorithms 
show results wide area network trends observed similar local area network 
see phase algorithm performs somewhat worse exhaustive algorithm cases find optimal plan 
counter intuitive observation partially explained noting phase optimizer fixes join order placement operators data sources involved 
observing query plans chosen exhaustive algorithm circumstances optimal query plan similar plan static optimizer 
observed queries tried lesser extent query 
discuss phenomenon section 
performance idp variants compared idp variants expected idp doing worse idp cases algorithms perform similarly 
performance idp idp shows interesting phenomenon cases idp performed better idp 
mainly artificial constraint imposed idp algorithm choosing relation subplan stage 
demonstrated query plan chosen algorithms query 
shows plans chosen exhaustive algorithm variants setting parameters 
see requirement choosing lowest cost subplan size idp produce plan chosen algorithms 
lineitem orders nation supplier nation customer lineitem nation supplier orders ii nation customer plan chosen exhaustive idp query ii plan chosen idp response time optimization experiment similar experiment changed optimization goal minimizing response time 
shows relative performance optimization algorithms case 
see queries query query po finds worse plan optimal plan 
queries hand performs optimal plan 
average scaled cost query query queries po idp idp idp idp total cost optimization presence materialized views ii percentage total cost average communication cost queries communication cost wan error bars denote standard deviation random runs main reason extended phase optimizer search bushy plans finds bushy plans queries effectively parallelized 
idp variants perform similarly earlier experiment higher deviations cases 
effect presence materialized views mentioned earlier data sources may materialized views exposed optimizer data source black box may generating views dynamically 
experiment see views may affect performance different optimization algorithms 
experiment introduce view system join customer orders lineitem relations site 
joins involved view foreign key joins number tuples view number tuples relation lineitem 
static optimizer aware view data source access information generating bids 
selections relations view pulled view 
rest setup including indexes kept earlier experiment 
shows results experiment queries 
results similar affected view 
see po consistently produces plan worse optimal plan 
idp variants show unpredictable results idp performing able take advantage view idp performs bad phase optimizer restriction choosing lowest cost subplan size choose wrong plan 
ii discussion iterative dynamic programming see idp variants quite sensitive parameters cases idp idp performed better phase optimizer 
suggests hybrid algorithms algorithm choice federated environment especially physical designs underlying data sources may hidden optimizer 
hybrid algorithm involve running idp idp different parameters choosing better plans 
divisible plan chosen idp clearly going worse plan chosen idp 
usually number joins query reasonably small choosing small values ideal 
plan address issue federated query optimization 
discussion phase optimization surprising fact arises experiments phase optimization algorithm perform worse exhaustive algorithm total cost optimization physical database design known optimizer 
section try analyze phenomenon cost models experimental settings 
argue runtime cost plan chosen phase optimizer small multiple runtime cost optimal plan 
key observations experimental setup help analyze 
intra site inter site pipelining 
result total execution cost plan separated costs execution join plan 

phase phase optimizer aware indexes data sources 
sufficient memory execute hash join passes data sha 
observations leads assertion assertion query plan denotes cost plan computed phase denotes cost plan runtime conditions loads sites equal cost mark ups sites equal communication costs zero words runtime cost plan differs factor static cost plan communication costs zero loads sites equal 
proof consider join plan 
phase phase optimizer chosen index join method hash join method executing join 
chosen index join method cost join remain runtime conditions described 
chooses hash join method memory allocated runtime perform passes vice versa 
case cost join changes factor usually projections selections query plan result loss generality set cost mark sites 
small sizes intermediate relations comparison base tables result second pass smaller relation 

communication cost query execution significant fraction total execution cost 
shows average fraction total cost spend communicating plan exhaustive optimizer 
see communication cost forms small fraction total cost queries 
holds true wide area network selections projections query plan total data communicated smaller total data read disk 
joins tpc queries key foreign key joins result intermediate tables larger base tables usually smaller 
observations speculate phase may performing experimental study shows 
consider various factors impact runtime execution time query plan turn reason difference runtime execution cost plan phase optimizer optimal runtime plan large 
optimal plan phase phase algorithm optimal plan runtime conditions exhaustive algorithm 
phase algorithm finds best static plan 
loads sites equal communication costs zero assertion assuming worst case memory conditions requires pass hash join requires passes hash join fraction total run time cost communication cost worst case assumption incur communication cost cost plan runtime including communication costs 
usually going smaller cf 

consider effect load conditions 
impact dynamically changing load condi tions mitigated phase optimizer schedules joins run time account load conditions 
joins query scheduled lightly loaded sites 
possible may incur communication cost result argued communication cost form major factor total query execution cost 
spite worst case assumptions runtime execution cost statically optimal plan going small multiple dynamically optimal plan experiments 
observe smaller ratios main reason plans differ joins contain 
believe artifact shape query plan topology ik 
local minimum query plan space higher cost absolute minimum expect see precisely behavior 
time seconds 
relations cost costing lan processing time cost costing wan time seconds 
relations ii cost costing lan processing time cost costing wan time seconds iii cost costing lan processing time cost costing wan optimization time exhaustive optimizer chain query ii star query iii optimization time idp experimental observations analysis suggest phenomenon may limited experimental setup cost model 
believe applies general scenario plan address issue general scenario 
optimization overheads subsection look optimization overheads various algorithms discussed section discuss trade offs optimization process 
shows cost optimization exhaustive dynamic programming algorithm function number relations query broken message cost processing cost 
gives idea message cost relates processing cost optimization process 
show results kinds query graphs chain shaped star shaped 
particular query graph shape actual query little effect number bids cpu cost optimization 
experiments queries artificially constructed joining relation times required 
see batching rfb single message cost costing significant fraction total optimization cost lan configuration 
optimization overheads idp variants depend significantly parameter algorithm 
shows optimization time star query size various values parameter intentionally chose large query idp smaller queries efficient exhaustive optimization shown 
show optimization times wan configuration similar trends observed configuration 
see algorithm significantly faster smaller values approaching cost exhaustive algorithm approaches number relations 
note increasing decreases number rounds messages requires rounds requires rounds total communication cost may necessarily decrease increase total number optimizer may offset savings optimization time sec lan exhaustive po idp idp idp idp optimization time sec wan exhaustive po idp idp idp idp optimization time tpc queries points joined purpose clarity natural order axis 
due smaller number rounds messages 
look optimization times algorithms compared earlier sections tpc queries 
compare total cost optimization times need partial order dynamic programming times subplans produce results different sites comparable due subsequent communication costs 
see po takes time algorithms idp time configurations 
see effect high message costs wan configuration cost exhaustive algorithm message dropping cost algorithms messages 
idp incurs higher cost query requires rounds messages 
summary experimental results experiments modified tpc benchmark demonstrate need aggressive optimization algo rithms take account dynamic runtime conditions optimizing algorithms require number messages accumulate required cost information underlying data sources 
exhaustive dynamic programming algorithm modified single message works reasonably small queries large queries heuristic algorithm idp may 
idp sensitive parameters particularly parameter running idp parallel different values parameter may best practice 
surprising observation experiments phase optimization algorithm performed reasonably cases especially optimizer knew materialized views indexes data sources optimization goal minimizing total cost 
tried analyze observation experimental settings clearly promising direction 
uncertain load conditions unknown cost models decoupled query optimization necessity federated database systems 
decoupling cost computations optimization process requires optimizer consult data sources involved operation find cost operation 
changes trade offs involved optimization process significantly dominant cost optimization cost contacting underlying data sources 
new trade offs optimization techniques randomized genetic algorithms nature require multiple rounds messages rendered impractical scenario 
minimum communication adaptations various known query opti mization algorithm discussed trade offs performance 
experimental results tpc benchmark indicate cases especially physical database design known optimizer phase optimization works 
absence information aggressive opti mization techniques 
iterative dynamic programming technique sensitive parameters running idp multiple parameter choices may best practice 
plan address issues surprising effectiveness phase optimization algorithms best way combine idp variants 
acps sel uk candan yannis papakonstantinou subrahmanian 
query caching optimization distributed mediator systems 
proceedings acm sigmod international conference management data 
ah ron avnur joseph hellerstein :10.1.1.34.8546
eddies continuously adaptive query processing 
proceedings acm sigmod international conference management data volume 
ahl ron avnur joseph hellerstein bruce lo chris olston raman raman roth kirk wylie 
control continuous output navigation technology refinement line 
sigmod proceedings acm sigmod international conference management data 
bgw philip bernstein nathan goodman eugene wong christopher reeve james jr query processing system distributed databases sdd 
tods 
vi mont ono 
analytical models neural networks query cost evaluation 
proc 
rd international workshop generation information technology systems 
cg richard cole goetz graefe 
optimization dynamic query evaluation plans 
proceedings acm sigmod international conference management data 
chm chandra chekuri hasan rajeev motwani 
scheduling problems parallel query optimization 
proceedings fourteenth acm sigact sigmod sigart symposium principles database systems 
cl michael carey hongjun lu 
load balancing locally distributed database system 
proceedings acm sigmod international conference management data 
coh net query 
www com press data sheet pdf 
col richard cole 
decision theoretic cost model dynamic plans 
ieee database engineering bulletin 
dks du ravi krishnamurthy ming chien shan 
query optimization heterogeneous dbms 
th international conference large data bases 
cem dogac 
multidatabase query optimization 
distributed parallel databases 
robert epstein michael stonebraker eugene wong 
distributed query processing relational data base system 
proceedings acm sigmod international conference management data 
flms daniela florescu alon levy ioana manolescu dan suciu 
query optimization presence limited access patterns 
sigmod proceedings acm sigmod international conference management data 
gan sumit ganguly 
design analysis parametric query optimization algorithms 
vldb proceedings rd international conference large data bases 
ghk sumit ganguly hasan ravi krishnamurthy 
query optimization parallel execution 
proceedings acm sigmod international conference management data 
gi minos garofalakis yannis ioannidis 
parallel query scheduling optimization space shared resources 
vldb proceedings rd international conference large data bases 
gk sumit ganguly ravi krishnamurthy 
parametric distributed query optimization load conditions 
sixth international conference management data 
sar martin kersten 
fast randomized join order selection transformations 
vldb proceedings th international conference large data bases 
gm goetz graefe william mckenna 
volcano optimizer generator extensibility efficient search 
proceedings ninth international conference data engineering pages 
gra goetz graefe 
cascades framework query optimization 
data engineering bulletin 
hs wei hong mike stonebraker 
optimization parallel query execution plans xprs 
proceedings international conference parallel distributed information systems december 
laura haas patricia selinger elisa bertino dean daniels bruce lindsay guy lohman mohan pui ng paul robert yost 
research project distributed relational dbms 
ieee database engineering bulletin december 
hsc joseph hellerstein michael stonebraker rick 
independent open enterprise data integration 
ieee database engineering bulletin march 
ik yannis ioannidis cha kang 
randomized algorithms optimizing large join queries 
proceedings acm sigmod international conference management data 
ik yannis ioannidis cha kang 
left deep vs bushy trees analysis strategy spaces implications query optimization 
proceedings acm sigmod international conference management data 
inss yannis ioannidis raymond ng kyuseok shim sellis 
parametric query optimization 
th international conference large data bases 
knight 
market maker revolution www com documents perspective pdf september 
ks donald kossmann konrad 
iterative dynamic programming new class query optimization algorithms 
see www db fmi uni passau de kossmann papers idp pdf 
patrick valduriez mohamed za effectiveness optimization search strategies parallel execution spaces 
th international conference large data bases 
net net market makers www com nm 
ol ono guy lohman 
measuring complexity join enumeration query optimization 
th international conference large data bases 
sema cem dogac 
dynamic query optimization distributed object management platform 
proceedings fifth international conference information knowledge management 
ow chris olston jennifer widom 
offering precision performance tradeoff aggregation queries replicated data 
th international conference large data bases 
py christos papadimitriou yannakakis 
multiobjective query optimization 
proceedings acm sigact sigmod sigart symposium principles database systems 
mary roth arya laura haas michael carey william cody ronald fagin peter schwarz joachim thomas ii edward wimmers 
garlic project 
proceedings acm sigmod international conference management data 
pirahesh krishnamoorthy lapis tran 
heterogeneous query processing sql table functions 
th international conference data engineering march 
sac patricia selinger morton astrahan donald chamberlin raymond lorie thomas price 
access path selection relational database management system 
proceedings acm sigmod international conference management data 
stonebraker brown 
interoperability distributed applications distributed databases virtual table interface 
ieee data engineering bulletin september 
sbm 
distributed query optimization loosely coupled multidatabase systems 
proceedings international conference database theory 
sdk michael stonebraker robert devine marcel witold litwin avi pfeffer adam sah carl staelin 
economic paradigm query processing data migration mariposa 
proceedings third international conference parallel distributed information systems pdis 
sha leonard shapiro 
join processing database systems large main memories 
tods 
zl qiang zhu ake larson 
query sampling method estimating local cost parameters multidatabase system 
proceedings tenth international conference data engineering 

