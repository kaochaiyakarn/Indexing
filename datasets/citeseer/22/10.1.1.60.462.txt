tinycubus flexible adaptive framework sensor networks pedro jos marr andreas daniel minder rg robert sauter kurt rothermel university stuttgart germany institute parallel distributed systems marron minder rothermel informatik uni stuttgart de proliferation sensor networks sensor network applications complexity systems continuously increasing 
sensor networks heterogeneous terms hardware characteristics application requirements single network 
addition requirements currently supported applications expected change time 
developing deploying optimizing sensor network applications extremely difficult task 
architecture tinycubus flexible adaptive cross layer framework sensor networks aims providing necessary infrastructure cope complexity systems 
tinycubus consists data management framework selects adapts system data management components cross layer framework enables optimizations cross layer interactions configuration engine installs components dynamically 
furthermore show feasibility architecture describing evaluating code distribution algorithm uses application knowledge sensor topology order optimize behavior 
years wireless sensor networks proposed way unobtrusively gather realworld data 
sensor network consists small networked devices equipped sensors 
node able process data network transmit multi hop communication 
nodes resource constrained additionally applications energy consumption plays important role 
sensor nodes stationary may move high speeds 
order acquire data sensor networks various kinds hardware 
research groups berkeley motes tinyos standard platform sensor nodes 
different models motes running tinyos differ greatly 
cur rently motes new means communication ieee devices developed integration new types sensors mems technology example way 
likewise applications continuously evolving highly heterogeneous 
new applications continue appear similarities specific requirements 
example known applications goal monitor ecological phenomena sensor networks developed military operations medical care rescue operations 
network defined collection devices heterogeneous applications network consists different devices able perform different tasks 
example nodes equipped special kinds sensors may processing power complex calculations act gateways networks 
furthermore specific requirements network depend heavily application see sections 
requirements change application executed network adapt 
developing adaptation application optimizing code complex error prone tasks 
order simplify application development system software form flexible adaptive framework supports large number hardware platforms applications clearly needed 
architecture tinycubus aims providing necessary infrastructure support complexity systems 
tinycubus consists data management framework cross layer framework configuration engine 
data management framework allows dynamic selection adaptation system data management components 
cross layer framework supports data ieee 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
sharing forms interaction components order achieve cross layer optimizations 
configuration engine allows code distributed reliably efficiently account topology sensors assigned functionality 
contribution twofold 
describe architecture tinycubus flexible adaptive cross layer framework sensor networks 
secondly describe evaluate code distribution algorithm configuration engine disseminate components code reliably efficiently network cross layer data provided framework 
results evaluation show algorithm reduces number messages exchanged topology network structured known application 
remainder structured follows 
section describes requirements specific sensor network applications 
section iii presents architecture framework gives detailed information parts 
section iv describes evaluates code distribution algorithm configuration engine 
section gives overview related section vi concludes describes directions 
ii 
application requirements specific sensor network applications play important role research performed university stuttgart sustainable bridges 
applications studied canonical examples wide range applications deal static mobile sensor nodes 
analysis allows identify requirements characteristics apply applications fall category 
goal sustainable bridges project provide cost effective monitoring bridges static sensor nodes order detect structural defects soon appear 
wide range sensor data needed achieve goal temperature relative humidity swing level vibrations noise detection localization mechanisms determine position cracks 
order perform localization nodes sample noise emitted bridge rate khz triangulation methods position possible defect determined 
process requires clocks adjacent sensors synchronized 
sensors required lifetime years batteries replaced regular bridge inspections 
contrast goal project develop cooperative driver assistance system provides ad hoc warning system traffic jams accidents lane highway merging 
addition information average speed road conditions position requested standard query interface 
sensors integrated cars mobile respect 
wide range highly dynamic sensor data speed position tire pressure gathered continuously 
processing data performed timely manner immediately sent drivers interested 
time constrained communication important system data forwarded appropriate cars right time 
contrast sustainable bridges application energy constraints severe application sensor nodes directly connected electric system car 
application similarities extracted description projects sustainable bridges applications similarities 
data centric data driven 
state needs change depending current state application 
sustainable bridges example monitoring state important detect occurence event notify nodes fast possible 
having recorded data high sampling rate nodes switch analyzing state reliably exchange analyze recorded data 
applications fault tolerant respect failures changes environmental conditions expected operate unattended long periods time 
sustainable bridges applications perform sensitive monitoring tasks applications need reliable availability sensors guaranteed 
application requirements may change time software running sensor nodes able adapt reconfigure right functionality chosen appropriate time 
application differences applications considerable differences 
table provides overview different requirements applications 
terms data model sustainable bridges application specific goal specific table differences requirements sensor network applications property sustainable bridges data model specific generic flexible query model push pull progr 
paradigm publish subscribe generic query distr 
transp 
energy mobility real time time sync topology important medium important data model application needs generic flexible data model support extensibility generic user interaction 
regarding query model case sustainable bridges application user needs notified certain events material example occur 
events pushed user application needs support publish subscribe mechanism 
hand users application need able specify queries ask information average speed road conditions 
requires pull query mechanism 
application data node id important bridge scenario exact source node data known need distribution transparency bridge application 
seen application descriptions energy constraints important sustainable bridges mobile nodes exist 
node sustainable bridges detects event potentially sleeping nodes woken fast start measurements 
real time constraints high 
messages traffic jams delivered reasonable time fast sustainable bridges 
mentioned sustainable bridges application strict time synchronization requirements ensure event localization quality project accurate synchronization sufficient 
regarding topological constraints sustainable bridges application assumes sensor nodes placed manually critical points bridge exact topology network known 
topological information limited road city maps 
requirements generic framework ease development sensor network applications generic framework necessary 
framework support data centric model sensor network applications need reconfiguration flexibility 
sensor networks heterogeneous new applications hardware platforms continuously evolve 
generic framework extensible flexible manage new application requirements 
provide mechanisms parametrization generic components meet requirements specific applications 
sufficient new application specific components installed sensor nodes 
code new components distributed efficiently network avoid wasting energy 
applications react differently changes environment changes mobility nodes 
different optimization parameters energy latency 
framework able adapt conditions support optimizations especially resource limitations sensor networks 
iii 
architecture architecture tinycubus mirrors requirements imposed applications underlying hardware 
developed goal creating generic reconfigurable framework sensor networks 
shown tinycubus implemented top tinyos nesc programming language allows definition components contain functionality algorithms 
tinyos primarily hardware abstraction layer 
tinyos tinycubus application running system 
applications register requirements components tinycubus executed framework 
tinycubus consists parts tiny data management framework tiny cross layer framework tiny configuration engine described sections 
tiny data management framework tiny data management framework provides set standard data management system components selected basis typically data driven nature sensor network applications 
type standard data management component replication caching prefetching hoarding aggregation tiny cross layer framework state repository app 
req 
application components tinycubus opt 
param 
sys 
param 
tinyos 
am tiny data mgmt 
framework hardware abstraction layer 
operating system hardware sn topology manager tiny configuration engine system components data mgmt 
components user defined components fig 

architectural components tinycubus type system component time synchronization broadcast strategies expected implementations component type exist 
tiny data management framework responsible selection appropriate implementation information obtained system 
course necessary components loaded sensor functionality needed downloaded sensors gateway nodes connected larger code repositories 
cube called combines optimization parameters energy communication latency bandwidth application requirements reliability system parameters mobility 
component type algorithms classified dimensions 
example tree routing algorithm energy efficient highly mobile scenarios high reliability requirements 
component implementing algorithm tagged combination parameters requirements algorithm efficient 
eventually combination component available type data management system components 
tiny data management framework selects best suited set components current system parameters application requirements optimization parameters 
adaptation performed lifetime system crucial part optimization process 
currently investigating different strategies determine necessary beneficial select different component 
strategies ensure total overhead adaptation small compared benefits newly selected algorithm 
furthermore parameters requirements dimensions system parameters application requirements optimization parameters carefully selected 
regarding system parameters analyze measured sensor node 
simplest case observations purely local number neighbors mobility 
examining sensor network applications outlined section ii determine application requirements 
broadest sense subsumed term quality service 
examples consistency accuracy reliability realtime constraints 
optimization parameters describe algorithm distinguishes algorithms system application parameters 
latency communication energy 
example sustainable bridges application requires time synchronization component static scenario provides high accuracy needs optimized respect energy sensor nodes expected lifetimes years 
tiny cross layer framework tiny cross layer framework provides generic interface support parameterization components cross layer interactions 
strict layering layer interacts immediately neighboring layers practical wireless sensor networks possible apply certain desirable optimizations 
example application components link layer component need information network neighborhood information gathered components system provided 
examples cross layer interactions callbacks higher level functions ones provided application developer 
tiny cross layer framework provides support forms interaction 
uses specification language allows description data types information required provided component 
cross layer data stored state repository 
deal callbacks dynamically loaded code tinycubus extends functionality provided tinyos allow dereferencing resolution interfaces components 
state repository layers components interact danger loosing desirable architectural properties modularity 
architecture cross layer framework acts mediator components 
cross layer data directly accessed components stored state repository 
component replaced adapt changed requirements component uses old component cross layer data affected change new component provides compatible data 
expect components available framework developed cross layer optimizations mind 
provide cross layer data 
components know cross layer data available state repository 
supply knowledge specification language allows specify cross layer data component needs provides 
specification components cross layer data available determine data gather 
callbacks regarding callbacks components tinyos provides support separation interfaces implementing components 
tinyos concept callbacks sophisticated purposes wiring components static 
components selected dynamically exchanged runtime 
usage component callbacks static directed new component data management framework selects different component configuration engine installs replacement 
tiny configuration engine cases parameterization provided tiny cross layer framework 
installing new components swapping certain functions necessary example new functionality new processing aggregation function sensed data required application 
tiny configuration engine addresses problem distributing installing code network 
goal support configuration system application components assistance topology manager role assignment algorithms 
topology manager topology manager responsible self configuration network assignment specific roles node 
role defines function node properties hardware capabilities network neighborhood location examples roles source aggregator sink aggregation clusterhead gateway slave clustering applications vibration describe sensing capabilities node 
previous describe generic specification language algorithm efficient role assignment briefly outlined remainder section 
cases network heterogeneous assignment roles nodes extremely important nodes need component receive install 
show section iv information configuration engine example distribute code efficiently network 
role specification role assignment algorithm role assignment topology manager uses generic specification language decentralized role assignment algorithm 
specification language role defined rule 
rule satisfied algorithm assigns role node 
example rule assigns role clusterhead node role hop neighborhood clusterhead count hop role clusterhead copies role specification nodes role assignment algorithm executed 
possible uses local knowledge 
information network neighbors required number nodes neighborhood role node retrieve information neighbors avoiding conflicting role assignments see details 
iv 
role code distribution algorithm sensor network applications topology roles network known advance follows regular structure 
definitely case roles defined routing mind clustering approaches 
course general case roles properties application system hand 
example provided sustainable bridges application fig 
nodes affixed edge equipped vibration sensors required provide temperature readings 
vibration sensor temperature sensor gateway node fig 

sensor topology sustainable bridges having information different roles assuming cases difference role assignment motivated differences functionality code distribution algorithm leverage knowledge route code updates set nodes really need belong specific role 
words code nodes vibration sensors updated example new network vibration data processing algorithm needed affect temperature nodes available system 
course code distribution algorithm sure nodes receive appropriate messages reliably run version application 
thinking severe energy constraints sensor nodes particular application account energy cost data transmission high scheme reduce number messages sent unnecessarily irrelevant nodes beneficial 
network model discuss network model distribution algorithm get detailed description section 
algorithm network consists set inner nodes ni set gateway nodes gj messages outside sensor network code updates inserted system 
set nodes network 
set roles defined rm defines complete relation assigns roles nodes 
nr set nodes assigned role define hop neighborhood node ni set nodes single hop broadcast range ni follows ni nj nj broadcast range ni hop neighborhood defined recursively expression hk ni nj nj hk ni set nodes role hop distance node ni simply hr ni hk ni nr say node ni hop connected node nj role iff ni nj connected nodes nl nlm role nl 
nlm nr path consecutive nodes set ni nl nlm nj involves nodes nr 
equations define transitive closure reachable nodes hop connected ni particular role note ni role included ni 
ni ni ni nj ni hr nj cr ni ni iff ni ni assuming messages inserted gateway nodes equation defines set nodes role reached hop connectivity ncr gi cr gi role smallest calculated nodes network role hop connected kr min ncr nr 
value kn nodes roles network connected calculated kn max kr detailed description code distribution algorithm uses network model information role assignments provided tiny cross layer framework efficiently disseminate code updates specific roles 
algorithm starts gateway nodes broadcasting data neighborhood 
nodes role forward data kr hop neighbors flooding nodes role nodes roles necessary reach 
algorithm parametrized selecting kr role 
topology network crucial 
case depicted fig 
network kr hop connected role kr possible reach target nodes maximum efficiency 
general case especially topologies random kr nodes roles different need involved process forwarding information 
true course necessary guarantee delivery nodes role 
cases delivery required smaller kr selected provide energy efficient processing cost sacrificing completeness see detail sections 
reason distribution algorithm parametrized respect allows application components system select level completeness choosing appropriate addition reliability necessary case providing code updates distribution algorithm implicit acknowledgments 
neighbor forwards message sent node ni ni treats message acknowledgment 
certain amount time neighbor forward message ni retransmits 
modularization techniques advocated reliability component algorithm replaced scheme ensures reliable transmissions 
algorithm node ni waits random time tmax retransmitting message 
just possible way avoid broadcast storm problem mentioned reliability component replaced scheme avoids collisions 
course choice tmax directly related delay observed evaluation algorithm 
summary role dissemination algorithm settable parameters system maintained tiny cross layer framework role target nodes kr network connectivity broadcasting data boolean variable rel controls implicit acknowledgments tmax determines maximum retransmission time 
assumptions implementation algorithm assume roles assigned dynamic reassignment roles code dissemination algorithm runs 
means connectivity kr network role determined front 
furthermore assume nodes stationary fail determined neighborhood hr respect role network connectivity communication assumed performed bidirectional local broadcasts transmission failures occur permanent 
evaluation order show feasibility approach implemented role code distribution algorithm motes running tinyos 
set experiments show analytically means experiments worst case average results computation kr connectivity role structured random grid topologies sensor networks 
second set experiments compare efficiency algorithm flooding approach modified provide reliability collision avoidance 
results obtained tinyos simulator provided uc berkeley 
experimental setup experiments analyzed scenarios 
sensor nodes laid evenly spaced grid role assignment depicted fig 
represents topology sustainable bridges application 
gateway node located corners inject messages network 
distance nodes meters radio model set lossless disc model communication range meters 
packet losses occur due collisions maximum retransmission delay tmax set ms ms respectively 
second scenario parameters apply roles sorted regular structure randomly assigned 
scenarios assume presence roles vibration temperature represent types sensors network 
evaluate code distribution algorithm sending fictitious code updates gateway node vibration sensors 
purpose interested efficiency algorithm terms network connectivity ratio vibration temperature sensors worst case average percentile fig 

kr needed achieve completeness random scenario number forwarded messages aim measuring performance real code updates 
computation kr set experiments deals computation reasonable kr connectivity network role seen perspective gateway nodes 
case applications sustainable bridges project computation kr performed hand application developer 
structure network location sensor nodes known 
case kr known vibration nodes 
structure network random known priori way determining values kr desirable 
fig 
shows worst case average percentile values kr network random role assignments choose kr node reached 
graph see starting ratio vibration temperature nodes kr achieves completeness average percentile cases worst case indicates value kr 
curves fig 
obtained choosing random role assignments grid varying number vibration nodes measuring value kr needed achieve completeness 
worst case curve possible compute general expression gives values kr arbitrary grid structures size assuming nodes communicate immediate horizontal vertical diagonal neighbors gateway node located corners analytical formula worst case avg 
completeness flooding ratio vibration temperature sensors fig 

avg 
completeness kr random scenario kr nr nr mn nr nr mn nr mn situations completeness required 
cases fig 
shows average completeness achieved kr 
graph determine smallest value kr needed achieve desired completeness assuming ratio nodes target role known 
example ratio target roles equal achieve completeness fig 
tells kr achieve average desired results 
performance results second set experiments focused evaluating performance role distribution algorithm scenarios described 
fig 
shows number messages sent average node sustainable bridges scenario 
graph compares messages sent flooding role distribution algorithm maximum retransmission delay tmax ms ms respectively 
role assignments axis vary original configuration depicted fig 
nodes assigned role 
measurements shown average runs 
graph see flooding tmax ms requires messages node tmax ms requires little average 
flooding algorithm retransmits messages presence collisions nodes reached average avg 
messages node flooding flooding role role ratio vibration temperature sensors fig 

avg 
number sent messages node structured scenario number messages sent greater varies length tmax 
addition graph shows number messages sent independent ratio vibration temperature sensors flooding distinguish distribute data 
contrast role algorithm performs better flooding especially ratio vibration temperature sensors low vibration sensors required forward messages expected number messages node increases ratio vibration temperature sensors increases 
extreme nodes network vibration nodes algorithm behaves just flooding 
fig 
depicts average delays needed algorithms reach vibration nodes structured scenario 
maximum delays shown graph algorithm worst case twice long delay needed average 
addition average delays flooding times better role algorithm 
reason flooding uses vibration nodes forward data allows parallelism fact network vibration nodes located square vibration node chooses long random delay avoid collisions data distribution delayed 
choosing example tmax ms possible keep number sent messages low see fig 
achieving delays just slightly flooding compare flooding avg role avg fig 

just seen role distribution recall network topology scenario exhibits hop connectivity vibration role 
avg 
delay ms ratio vibration temperature sensors flooding avg flooding avg role avg role avg fig 

avg 
delay message delivery structured scenario algorithm efficiently structured topologies sustainable bridges expect topologies exhibit hop connectivity 
tested algorithm random distributions roles show effectively scenarios 
fig 
shows number messages sent random role assignments flooding different versions role algorithm kr kr respectively 
flooding behaves expected just structured case 
algorithm hand sends far fewer messages flooding topology network exhibits say hop connectivity role algorithm reach nodes 
shown fig 
flooding obviously reaches completeness algorithm guarantee completeness cases 
example hop algorithm network exhibits hop connectivity required nodes reached 
hop algorithm reaches completeness high probability ratio vibration sensors greater requiring relatively low number messages see fig 

example ratio vibration nodes sends average messages node flooding requires 
cases connectivity network known fig 
choose reasonable value kr desired level completeness 
analogously structured case fig 
shows average delays needed flooding hop hop algorithms reach target nodes 
different random role assignments tested avg 
messages node flooding flooding role hop role hop role hop role hop ratio vibration temperature sensors fig 

avg 
number sent messages node random scenario algorithm lower delays flooding low ratios vibration sensors shown fig 
values algorithm average reach target nodes clear unfair advantage 
soon number vibration sensors reaches point saturation algorithm probabilistically reach nodes ratio hop algorithm behaves similarly flooding 
ratio values hop algorithm slower flooding correlates results fig 

case differences delay noticeable 
reason random assignments roles placed arbitrarily number neighboring nodes role average higher bridge scenario vibration sensor direct neighbors 
delays fig 
represent worst case scenario message reaches exactly target data sent serially vibration sensor 
advantages role code distribution seen evaluation section results provided role algorithm promising structured scenarios 
cases application knowledge topology network improve number messages sent maintaining reliability 
shown relatively easy determine probabilistically reasonable values kr networks topology known exhibits random properties cases algorithm outperforms reliable plain flooding techniques 
sensor avg 
delay ms flooding avg flooding avg role avg hop role avg hop role avg hop role avg hop ratio vibration temperature sensors fig 

avg 
delay message delivery random scenario networks deployed environments structure topology network wellknown knowledge routing components provide efficient data distribution 
terminology introduced experimental results described allow tiny data management framework classify role algorithm see fig 
selected appropriate system parameters application requirements optimization criteria require 
additionally role code distribution algorithm advantages 
general algorithm distribute kind data destination varies certain information roles 
furthermore assume roles assigned role connectivity kr network determined estimated algorithm efficient plain flooding 
assume network topology change static time overhead computation kr small penalty pay continuously sending data times overhead reliable flooding 
case nodes mobile distribution changes assume ratio nodes high results detailed estimate values kr 
furthermore node decide perform estimation conclude neighborhood relatively static respect changes topology certain values kr presence mobility 
fact algorithm parametrized respect properties network allows select appropriate version depending desired result 
tradeoff latency number messages framework adapt requirements application network 
experiments deal distinct roles results valid number roles 
difference definition ratio generally determined number nodes role divided sum nodes roles different related tinycubus role code distribution algorithm related variety 
section provide description relevant projects process creating frameworks similar part related code distribution schemes routing algorithms cross layer data forwarding decisions 
impala aim providing functionality distribute new applications sensor networks just configuration engine 
purpose create abstractions operating system application differ slightly 
uses scripting language really suited resource limited platforms tinyos motes 
uses special commands language allow forwarding current program nodes tries avoid unnecessary code transfers transmitting code script running neighboring nodes 
support adaptation cross layer interactions proposed framework 
impala new code transmitted demand new version available neighboring node 
furthermore certain parameters change adaptation rule satisfied system switch protocol 
adaptation mechanism supports simple adaptation rules 
uses data impala generic structured mechanism share easily extensible 
project system aims creating cross layer framework similar 
targeted sensor networks assumes environments typical mobile ad hoc networks general case limited terms resources 
addition focuses data sharing layers network protocol stack include configuration adaptation capabilities framework 
emstar software environment linux sensor nodes assumes presence higher nodes part sensor network 
similar data management framework emstar contains standard components routing time synchronization able provide adaptation mechanisms available framework 
regarding related concerned implementation code distribution ripple code distribution algorithm implemented emstar 
order reduce number messages sent algorithm uses publish subscribe scheme single node neighborhood sends code updates subscribers 
similar approach includes mechanism transmit code updates reliably fails consider cross layer data role information data forwarded nodes 
example code propagation sensor networks trickle 
trickle periodically broadcasts meta data software version nodes focuses detecting code update needed 
hand role algorithm selectively send code updates nodes supposed receive role 
course possible combine algorithms optimize code updates system 
langendoen describe scheme install code sensor nodes 
goal minimize size code image transmitting differences previous version considered scheme 
address updates distributed network 
number routing algorithms cross layer information improve efficiency usually done protocol specific basis 
example spatial information routing done project 
provide generic mechanism allow arbitrary data sharing schemes 
vi 
described architecture tinycubus flexible adaptive cross layer framework sensor networks 
specific requirements derived increasing complexity hardware capabilities sensor networks variety breadth typical applications heterogeneity network 
designed system tiny data management framework provides adaptation capabilities tiny cross layer framework provides generic interface repository exchange management information tiny configuration engine purpose manage upload code appropriate sensor nodes 
furthermore provided description novel role code distribution algorithm uses cross layer information role assignments order improve number messages needed distribute code specific nodes 
results evaluation show algorithm performs times better plain flooding scenarios topology distribution roles network known 
situations case provided analytical results allow compute connectivity network role minimal overhead shown algorithm adapted different network topologies provide improvement flooding schemes 
implementation tinycubus way prototypes cross layer framework configuration engine partially functional 
process integrating framework additional application provides capabilities smart environment fully functionality provided tinycubus 
regarding role code distribution algorithm plan extending support highly mobile sensor nodes ones project include functionality related projects trickle 
addition analyze types topologies nodes equally spaced determine role algorithm works conditions 
hill szewczyk woo hollar culler pister system architecture directions networked sensors proc 
th intl 
conf 
architectural support programming languages operating systems pp 

szewczyk osterweil polastre hamilton mainwaring estrin habitat monitoring sensor networks comm 
acm vol 
pp 

marr minder rothermel becker adaptation cross layer issues sensor networks proc 
intl 
conf 
intelligent sensors sensor networks information processing 
sustainable bridges web site 
online 
available www net schulz safe comfortable driving inter vehicle communication proc 
intelligent vehicle symp vol 
pp 

gay levis von behren welsh brewer culler nesc language holistic approach networked embedded systems proc 
acm sigplan conf 
programming language design implementation pp 

goldsmith wicker design challenges energy constrained ad hoc wireless networks ieee wireless communications vol 
pp 

mer frank marr becker generic role assignment wireless sensor networks acm sigops european workshop appear 

tseng 
ni 
chen 
sheu broadcast storm problem mobile ad hoc network wireless networks vol 
pp 

levis lee welsh culler accurate scalable simulation entire tinyos applications proc 
st intl 
conf 
embedded networked sensor systems pp 


han srivastava design implementation framework efficient programmable sensor networks proc 
st intl 
conf 
mobile systems applications services mobisys 
liu martonosi impala middleware system managing autonomic parallel sensor systems proc 
th acm sigplan symp 
principles practice parallel programming pp 

conti turi cross layering mobile ad hoc network design ieee computer vol 
pp 

girod elson cerpa ramanathan estrin emstar software environment developing deploying wireless sensor networks proc 
usenix pp 

heidemann estrin remote code update mechanism wireless sensor networks university california tech 
rep tr november 
levis patel culler shenker trickle algorithm code propagation maintenance wireless sensor networks proc 
st usenix acm symp 
networked systems design implementation 
langendoen efficient code distribution wireless sensor networks proc 
nd acm intl 
conf 
wireless sensor networks appl pp 

heinzelman chandrakasan balakrishnan energy efficient communication protocol wireless microsensor networks proc 
hawaii intl 
conf 
system sciences vol 
ff 
yuen lee andersen simple effective cross layer networking system mobile ad hoc networks proc 
th ieee intl 
symp 
personal indoor mobile radio communications vol 
pp 

tian han rothermel spatially aware packet routing mobile ad hoc inter vehicle radio networks proc 
ieee th intl 
conf 
intelligent transportation systems vol 
pp 

