indexing data oriented overlay networks karl aberer datta manfred hauswirth roman schmidt application structured overlay networks implement index structures data oriented applications peer peer databases peer peer information retrieval requires highly efficient approaches overlay construction changing application requirements frequently lead re indexing data re construction overlay networks 
problem far addressed literature describe approach efficient construction data oriented structured overlay networks scratch self organized way 
standard maintenance algorithms overlay networks accomplish efficiently inherently sequential 
proposed algorithm completely decentralized parallel construct new overlay network short latency 
time ensures loadbalancing skewed data key distributions result preserving key order relationships necessitated data oriented applications 
provide theoretical analysis basic algorithms complete system implementation tested planetlab 
implementation support peer peer information retrieval database applications 
standard database systems common practice regularly re index attributes meet changing requirements optimize search performance 
structured peer peer overlay networks increasingly supported part na tional competence center research mobile information communication systems mics center supported swiss national science foundation number partly carried framework epfl center global computing supported swiss national funding agency part european project 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings st vldb conference trondheim norway school computer communication sciences ecole polytechnique rale de lausanne epfl ch lausanne switzerland access structure highly distributed data oriented applications relational query processing metadata search information retrieval 
motivated presence certain features supported design scalability decentralized maintenance robustness network churn 
compared unstructured overlay networks proposed applications structured overlay networks additionally exhibit lower bandwidth consumption search 
standard maintenance model peer peer overlay networks assumes dynamic group peers forming network peers join leave essentially sequential manner 
addition proactive reactive maintenance schemes repair inconsistencies resulting node network failures re balance load order react data updates 
approaches maintenance extensively studied literature correspond essentially updating database index structures reaction updates 
contrast results exist efficiently construct large overlay network scratch bootstrap new large scale structured overlay network practical way reasonable time 
understandable insofar overlay networks done assumption providing efficient resource location scheme applicationspecific fairly stable resource identifier space file names file sharing 
increasing adoption structured overlay network technology data oriented applications assumption longer holds 
resources identified dynamically changing predicates different overlay networks simultaneously supporting specific addressing need 
illustrate requirements typical application case peer peer information retrieval investigated 
standard application structured overlay networks peer peer information retrieval implementation distributed inverted file structure efficient keyword search 
scenario situations occur overlay network constructed scratch set documents distributed potentially large number peers identified holding information pertaining common topic 
support efficient retrieval specific document collection dedicated overlay network implementing inverted file access may set 
new indexing method example new text extraction function identifying semantically relevant keywords phrases search set semantically related documents distributed large set peers 
index keys change result changing indexing method new overlay network needs constructed support efficient access 
due updates distributed document collection existing distributed inverted file obsolete 
may result maintaining inverted file document updates due changing characteristics global vocabulary changing indexing strategy term selection inverse document frequency 
complete reconstruction overlay network re quired 
due catastrophic network failures standard maintenance mechanisms longer reconstruct consistent overlay network 
overlay networks needs constructed scratch 
course scenario applies generally application probable multiple overlay networks deployed parallel 
principle re construction overlay network scenarios achieved standard maintenance model sequential node joins leaves 
existing proposals structured overlay networks offer completely parallel construction process involving peers simultaneously :10.1.1.28.5987
assume model joins peers essentially sequential process 
approach encounters serious problems peer community decide serial ization process electing peer initiate process 
peer community solve leader election problem turn unsolvable large peer populations making strong assumptions coordination limiting peer autonomy 
process performed essentially serialized manner incurs substantial latency 
particular take advantage potential parallelization natural approach 
principle systems pastry support concurrent construction take optimistic approach concurrent node joins possible long conflicts :10.1.1.28.5987
assumes exists large overlay conflicts 
early stage bootstrapping large number peers joining concurrently conflicts 
type strategy applicable problem addressing 
dks avoids problem equipping joining peers approximate routing table course operation overlay corrected correction 
approach robust incurs considerable efforts average number lookups peer required stabilize network order number node joins leaves 
address problem structured overlay network constructed efficiently scratch problem research community identified started address :10.1.1.62.9444
approach generic mechanism autonomously partition keyspace completely parallel manner 
approach potentially constructing structured overlay fixed key space partitioning 
data oriented applications exists additional factor adds difficulty finding solution problem load balancing 
overlay networks semantic processing keys range queries popular example canonical method uniform hashing keys remove skew key distribution applicable 
led substantial research including load balancing features overlay networks 
construction taken account construction approach solve load balancing problems 
fact address types load balancing problems simultaneously balancing storage load peers skewed key distributions balancing number replica peers key space partitions 
problem important balance workload peers solved adapting overlay network structure key distribution 
second important guarantee approximately uniform availability keys unreliable networks peers potentially low availability 
classical balls bins load balancing problem 
approach keyspace bisection process completely decentralized parallel randomized algorithm assigning peers key space partitions proportion key distributions partitions 
recursively applying keyspace bisections peers incrementally construct overlay network maintaining load balance 
introduce approach context grid overlay network structure developed years essential elements approach applicable overlay networks fixed key space partitioning schemes pastry :10.1.1.28.5987
demonstrate theoretical correctness basic keyspace bisection process analysis simulation show feasibility building complete system matching theoretically predicted behavior experimental results obtained full fledged implementation deployed planetlab infrastructure 
resulting system available www grid org currently implement peer peer retrieval www info peer peer data management systems 
overview approach trie structured overlay assume data keys taken key space consisting interval design grid overlay network simple principal ideas divide conquer key space recursively bisected resulting partitions carry approximately workload peers associated partitions 
bisection approach greatly simplifies decentralized load balancing local decision making 
canonical trie structure bisecting key space induces canonical trie structure basis implementing standard distributed prefix routing scheme efficient search 
resulting overlay illustrated 
load distribution replica sub network trie structured overlay network bottom see possible skewed distribution data keys interval bisect interval resulting partition carries approximately load 
partition uniquely identified bit sequence 
associate peers example exactly partitions 
call bit sequence peer partition peer path 
bit sequences induce trie structure implement prefix routing 
peer maintains routing table pertain path 
specifically bit position path maintains randomly selected peer path opposite bit position 
trie structure represented distributed fashion routing tables peers 
topology analogous prefix routing schemes devised classified fixed key space partitioning scheme structured overlay networks literature :10.1.1.28.5987
search overlay network performed resolving requested key bit bit 
bits resolved locally peers forward request peer routing table 
replication ways order increase resilience overlay network nodes network links fail 
multiple kept routing tables providing alternative access paths multiple peers associated key space partitions structural replication order provide data redundancy 
routing choices randomly choosing peers complementary sub tree level resulting overlay network additionally provides efficient recursive partitioning search terms communication cost message number leaf nodes tree irrespective shape tree 
overlay network construction process constructing overlay network scratch require low latency highly parallel require minimal bandwidth consumption 
time load balancing criteria achieved 
partitioning search space partition holds maximal data load measured number keys partition 
call maximal storage load 

resulting partition associated constant number peers availability different data keys approximately 
call minimal replication factor 
perfect load balancing properties achieved iff 
total number data keys number peers 
algorithm shows global partitioning algorithm attempts achieve load balancing goals best effort bisecting key space assumptions met 
algorithm partition partition partition partition partition analogous algorithm works follows 
assume peers associated key space partition containing data keys sub partitions containing respec tively data keys achieve load balance criterion fraction peers associated partition case peers associated achieve load balance criterion 
recursively applies bisection step key space 
various reasons algorithm achieve load balancing goals approximately 
provided number data keys large number peers associated partition constant skewed data distributions happen small partitions contain large fraction data keys bisection peers underloaded partitions reaching partitions 
fundamental problems bisection approach 
practical data distributions large peer populations problems theoretical nature achieves load balancing properties provided chosen properly 
algorithm defines consider optimal partitioning search space peers resulting optimal overlay network 
peer peer system global coordination exists problem intend solve achieve partitioning generated decentralized process approximately 
measure quality solution determining deviation optimal partitioning 
decentralized process peers precise information number peers keys partition know decision peers partition take respect associating partition 
available information set locally stored data keys information gathered local interactions peers 
decentralized process design random peer encounters set basic local interactions 
random encounters initiated performing random walks pre existing unstructured overlay network 
interactions peers perform encounters classified categories shown 
random interaction possibility exchange content split key space update routing table random interaction possibility replicas content partial list replicas shown reconciling content anti entropy algorithm 
peers partition path prefix meet random interaction interact possibility peers update routing table entries add redundancy randomization apart recommending peers meet peers better match path 
induces random interactions 
peers different partitions meet id network evolution legend multiple entries level routing table part prefix shown index data peers belong partition partition divide conquer strategy data keys currently hold 
belong partition peers routing table entries route peer belongs partition 
peers partition meet may decide case current partition contains sufficient number data keys justify split partition overloaded corresponding line 
coordinate locally decision 
addition peers keep peer encountered split incrementally construct routing tables 
reduce problem load balanced overlay network construction problem decentralized partitioning key space partition 
problem large number peers perform decision split independently allowing fast construction overlay network making independent decisions way ratio number peers matches ratio data load partitions 
words global behavior distributed decision making process match outcome partitioning step global partitioning algorithm corresponding lines 
solution problem central contributions discussed detail section 
decentralized partitioning consider set peers hold data keys key space space partitioned parts load measured number data keys related partitions assume partitioning ideally achieve properties 
proportional replication peer decide partitions expectation fraction peers decides fraction 
workload uniformly distributed peers meeting load balancing criteria resulting overlay 

referential integrity process peer encounter peer decided partition 
peers necessary information construct routing structure overlay infrastructure delegating requests keys longer associated 
peer initiate interactions peer selected uniformly randomly measure cost algorithm solving problem terms number interactions initiated peers cost minimized 
quality algorithm solving problem measured deviation resulting distribution peers optimal distribution achieved global knowledge coordination 
assume value known peers 
analyze influence having approximate knowledge sampling locally stored data keys 
clarify critical issues discuss simple heuristic approaches case simple strategy adopt peers decided partition initiate random interaction 
contacted peer undecided peers decide different partitions balanced split peer initiating interaction decides opposite contacted peer decided unbalanced split 
way learns peer partition 
algorithm symmetric expectation number peers decide partition provides best possible performance model interaction possible decision taken 
call strategy eager partitioning 
eager partitioning strategy works employed values arbitrary known possible strategy call autonomous partitioning aut peer decision partitions advance meeting peer tries meet peer partition order satisfy referential integrity constraint 
setting obviously peer interactions wasted peers decided partition meet 
specific case modeling interactions markovian processes observed interactions initiated average peer asymptotically large compared interactions peer eager partition ing 
autonomous partitioning optimal strategy 
adaptive eager partitioning introduce method optimized solution partitioning problem characteristics eager partitioning works due space constraints summarize main points analysis 
full analysis long version 
adaptive eager partitioning aep algorithm 
undecided peer initiates interactions uniformly randomly selected peer decision reached 
selecting peers uniformly random non trivial problem solve variant random walks 

contacted peer undecided peers perform balanced split probability maintain 

contacted peer decided contacting peer decides maintains contacted peer 

contacted peer decided contacting peer decides probability probability 
case maintains contacted peer 
second case obtains peer partition contacted peer 
straightforward see condition partitioning problem satisfied 
question determine satisfy condition properly choosing probabilities model peer interactions markovian process mean value analysis 
assume step peer counterpart contacts randomly selected peer 
denote number peers decided step respectively 
initially process step assume informally speaking partitioning proceeds fast possible optimizing required number interactions 
model determine proper value value solve recursive system 
important observation recursion terminates soon undecided peers exist soon find value general integer value context mean value analysis allow fractional steps 
standard solution methods obtain evaluating termination condition obtain note depend partitioning process requires number interactions peers independent load distribution 
defi nition obtain relationship network size load distribution decision probability 
having dependent problematic reasons resulting equation hard solve second importantly necessarily known peers 
interested situations relatively large perform asymptotic analysis 
letting obtain relationship positive solutions obtained values equation derive positive solutions exist means algorithm partition correctly highly skewed partitions 
pursue different strategy reducing probability balanced splits analogous analysis setting derive relationships relation continue discussion different partitioning algorithms statement modeling approach necessary sequential approach model analyze concurrent process 
simplification appropriate approximation purpose 
assume latency interaction interactions peers occur concurrently 
concurrent behavior peers corresponds approxi mately sequential behavior analysis perform shows models sufficiently accurate relatively small large numbers peers model sufficiently approximation small concurrency occur critical 
error analysis groups 
assumed value known peers 
practically peers derive estimate sampling 
analyze effect errors introduced approximate knowledge potential sources errors limit case mean value analysis turned negligible influence 
assume peers obtain samples locally stored data keys 
samples correspond bernoulli variables probability peers estimate computing mean value bi distributed 
determine effect error estimating values resulting effect partitioning process approximate values long meaning clear 
provide exemplary error analysis evolu tion case algebraically simplest case 
analogous analysis done case substantially complex 
assume step value estimation determine estimation value error sampling error obtained peer initiating step denote error introduced result partitioning process due sampling errors 
derive closed form expression analyzing markov model process 
sampling errors presumably small taylor series expansion approximate fact reasons clear need second order approximation perform proper error analysis 
value small determine expectation value standard deviation simplify presentation write 
obtain expectation value shows sampling introduces systematic shift balance resulting partitions 
concrete implementation compensate systematic error discussed detail subsequently 
obtain standard deviation similar analysis 
impact errors depends particular behavior functions numerical differentiation observed functions behaved relevant region 
performing analogous analysis behavior functions relevant error behavior 
included plot order point important observation small values second derivative grows extremely fast consequently error large 
error analysis shows presence sampling errors include correction terms aep 
probabilities alpha numerical solution numerical simulation markov model validate correctness analytical models performed numerical simulation experiments 
simulated models 
simulation mean value model aep known 
sam simulation mean value model aep value estimated samples 
aep discrete simulation aep peers discrete decisions adding mean value contributions mean value model 
cor discrete simulation aep corrected probabilities 
aut discrete autonomous partitioning discrete simulation autonomous decision making estimated samples results experiment repeated times 
shows deviation mean value expected value averaged experiments 
expected sampling estimating leads systematic deviation resulting distribution sam aep 
error correction strategy cor eliminates deviation completely 
clearly autonomous partitioning aut average achieves desired distribution 
mean deviation mean sam aep cor aut mean experiments expected value subtracted highlight deviation 
shows cost algorithm measured number interactions 
theoretically predicted observe adaptive eager partitioning performs better aut small values approx 
independent version considered sam cor 
experiments different sample sizes showed sample size practically influence 
small samples samples lead results larger sample sizes 
experiments showed adaptive eager partitioning advantage autonomous partitioning reduces standard deviation error partitioning approximately factor 
aep approach optimizes performance terms number required interactions error control terms matching partitioning ratio interactions sam aep cor aut number interactions mean total number interactions experiments superficially aep appears complex algorithm aut considerably outperforming aut 
complexity analysis required determine correct decision probabilities practical implementation aep advantages provides invariant decision partition availability guaranteed 
point problem studied section novel load distribution problem area distributed systems particularly referential integrity constraint 
solution problem useful overlay network construction resource task distribution decentralized load balancing general 
algorithmic issues order aep implementing algorithm decentralized fashion address issues related global organization indexing process 
initiating indexing process absence global coordination mechanism reach decision initiate indexing process obvious 
focus initiation process orthogonal index evolution process describe simple decentralized strategy 
depending locally observed queries individual peers may autonomous decisions new index may necessary re indexing may required 
peers locally decide indexing useful initiate vote flooding peer network 
flooding pre existing generic unstructured overlay network assume exist 
peers receive voting request reply back local decision 
additionally helpful information locally available storage space peer willing contribute store information new index number local data items indexed piggy backed 
votes sent back paths arrived multiple votes aggregated flowing back reduce bandwidth consumption 
number positive negative responses peer initiated voting decide initiate index construction flood decision back peers 
additionally aggregate storage space available amount storage required data items system decision contain parameters ensuring optimized utilization available resources synchronization indexing process 
assume collaborative environment majority peers behave maliciously byzantine manner adheres democratic decision group participates indexing irrespective individual votes 
synchronizing terminating indexing process partitioning algorithm introduced section enables reaching decision parallel bisecting key space proportionally group autonomous peers 
indexing process algorithm executed multiple times synchronization mechanism needed 
addition peers need autonomously recognize terminate indexing process 
realize follows 
peer communicating decision start indexing process provides parameters values chosen average number data keys peers hold mentioned section information derived information piggy backed votes 
additionally provides time starting partition peers replicate data keys time randomly chosen peers 
start indexing process data keys replicated desired number times network 
estimating number data keys current partition peers estimate number current peers order perform proper decisions algorithm attempting directly learning existing replicas level partitioning process unnecessarily slow progress indexing 
estimate number replicas partition analyzing overlap sets data keys peers interacting balanced split 
denotes set data keys peers hold maximum likelihood estimate expected number peers current partition 
ex ample expected peers partition initially data keys replicated times 
ensure correctness estimation purpose initially replicating data 
partitioning peers extended paths attempt immediately contact peers perform partitioning level 
succeed identifying different peer partition useful interaction take place divide conquer replicate fixed number attempts refer interaction see initiate interactions continue con peer 
way peers ahead crowd due faster network connections forced wait slower ones 
mechanism eventually leads termination process peers encounter fully synchronized copies 
complexity goal approach index construction perform low bandwidth consumption low latency 
regard bandwidth consumption necessary requirement perform worse sequential approach standard construction mechanisms study look complexity case balanced key distribution level peers engage bilateral interactions average 
addition locating peer partition level peers route expectation steps performing refer interaction 
shows total number interactions order latency opposed standard maintenance model 
simulation system 
partitioning study global behavior indexing algorithms integrating elements discussed far performed simulation studies implemented mathematica 
mainly interested desired load balancing properties achieved various approximations algorithm performs predicted 
simulations peer populations sizes 
data distributions uniform distribution pareto distribution pdf parameters normal distribution mean value standard deviation test data text retrieval experiments project 
distributions denoted pareto normal distributions represent cases extremely skewed distributions 
initially randomly assigned keys distributions peers held samples 
tested respectively replicas keys generated 
typically experiments experiments repeated times results averaged 
algorithms implemented described 
experiments executed workstation cluster machines running week 
note separate experiments conducted times 
furthermore real network peers exclusive resources actual overlay construction process faster 
evaluating experiments primarily determining degree load balancing peers key space partitions worked 
compared generated key sets distribution generated global coordination algorithm 
algorithm generates distribution partitions key space generated number peers associated partition 
compared distribution distribution generated decentralized algorithm 
explained section consider distribution generated optimal distribution 
measuring distance distribution provides measure quality load balancing 
experiment fig shows quality load balancing depending peer population size different distributions 
observe quality remains practically stable independent size 
investigated influence replication fac tor comparing principle load balancing properties affected measure deviations relative average replication 
confirmed skewed distributions strongly skewed distributions certain degradation observed 
investigate detail reasons effect related relatively low number partitions high replication factors 
interested influence sample size quality load balancing 
expected samples lead higher accuracy 
fact result fig shows influence exists 
insofar important shows partitioning done small samples enables possibilities optimization reduce bandwidth consumption 
order understand quality load distributions achieved analyzed role theoretical framework fig 
replaced functions fig 
heuristic functions chosen absence theoretical understanding properties 
hypothesis wanted verify concrete nature functions plays significant role view approximations distributed algorithm 
chose functions exhibit qualitatively behavior ones aep 
experiment executed clear result minor change theoretically correct functions degrades quality load balancing substantially 
theoretical basis proves valuable despite assumptions 
analyzed communication costs algorithm 
see number interactions peer fig bandwidth consumption peer measured terms total number data keys exchanged peers interactions fig grow gracefully terms network size expected theory 
skew data distribution significantly increase bandwidth consumption 
experimental evaluation planetlab infrastructure obtain results large scale experiments realistic networking conditions verify theoretical predictions simulation experiments 
planetlab www planet lab 
org global testbed large scale experiments distributed systems 
moment consists approximately nodes geographically distributed planet running modified version linux support efficient administration resource sharing largescale experiments 
nodes connected diverse collection links 
experiments planetlab ran nodes depending number available nodes 
node executed instance grid node 
interpreting results important consider planetlab shared large number research groups experiments executed parallel mutually influence performance considerably especially respect absolute latency 
experimental setup deployed grid software peers available nodes times experiments conducted assigned keys real text collection taken information retrieval project peer 
relatively low number keys chosen speed experiments seen sample size little influence load balancing 
validate experiments performed tests larger numbers keys peer various distributions including uniform random distribution pareto distribution 
time line experiments follows initial phase starting time peers join system contacting bootstrap peer form unstructured overlay network replicate data fixed number times 
replication phase peers randomly choose peers unstructured overlay network replicate data 
subsequently constructed approach 
especially interested evaluating bandwidth consumption phase verify theoretically predicted load balancing properties algorithm achieved realistic networking conditions 
run queries constructed overlay network analyze search performance 
peer performed search minutes 
fi nal phase structured overlay network simulated evaluate failure resilience grid 
peer independently decides go offline minutes minutes causes considerable churn system compensate 
network churn deviation various peer populations varying peer population deviation min model vs heuristics theory vs heuristics experimental evaluation deviation various desired replications min varying required replication interactions required peer overlay construction various population sizes interactions peer verified system behavior matches theoretical predictions simulations 
experiment performed peers compared simulation results number peers key set 
quality load balancing evaluated defined section practically identical simulations experiments average simulations standard deviation resp 
value experiment 
indicates theoretically predicted load distribution properties met quite accurately implementation realistic network conditions slow connections communication failures 
report system measurements evaluate performance overlay network construction phase operational lifetime static situation change peer population churn peers leave join network 
shows number peers overlay time 
see peers join network number peers network increases maximal number 
construction phase number stable approx 
peers decreasing final phase simulate network churn substantial dynamic fraction peers unavailable 
shows aggregate bandwidth consumption peers maintenance queries bytes sec 
construction phase bandwidth consumption reaches peak bytes sec peer 
maintenance consumption decreases quickly bytes sec negligible compared simulation results various experiment scenarios 
deviation various data sample sizes varying data sample size total number data keys moved peer bandwidth consumption overlay construction bandwidth consumed queries 
peers bandwidth bps bandwidth consumed data keys moved time minutes number participating peers maintenance queries time minutes aggregate bandwidth consumption shows average query latency standard deviation 
absolute values relatively high essentially reflect poor response time planetlab nodes 
response time slightly higher larger deviation network churn requested peers may offline compensated 
time seconds standard deviation average time minutes query latency observed number query hops query low theoretically expected approx 
half mean path length churn 
average path length slightly average number query hops query approximately 
construction phase led full evolution overlay network peers discovered replicas system expected mean replication factor intended success rate queries network churn 
queries mainly unsuccessful network problems lost corrupted messages 
point current experimental evaluation limited sense moderate number available peers allow obtain significant results reduction latency bootstrapping predicted theoretical analysis section main properties approach 
related fundamental problems address large scale distributed indexing systems distributed index construction load balancing 
traditionally structured overlay networks mainly distributed hash tables dhts followed sequential construction maintenance strategies online balancing 
contrast approach applies highly parallel strategy speeds construction process takes advantage distributed computing resources allowing participants independently asynchronously construction enables merging independently created indices 
address load balancing standard strategy overlay approaches uniform hashing keys remove skew distribution 
defeats applicability overlay networks semantic processing keys range queries 
standard overlay approaches typically additional index top overlay network needs created 
advantage approach universal usability top dht 
considerably efficient approach semantically close data items necessarily stored close overlay network high fragmentation multiple overlay network queries required locate semantically close content 
apart additional effort constructing additional index schemes additionally suffer inefficiencies operational phase system 
contrast build trie clusters semantically close data realizing network indexing enables efficient query processing 
comes expense sophisticated construction process data oriented overlay networks 
additionally complex online load balancing strategies applied 
online load balancing widely researched area distributed systems domain modeled balls bins 
traditionally randomized mechanisms load assignment including load stealing load shedding power choices partly reused context systems limited applicability 
example provides storage load balancing key order preservation support range queries cost efficient searches isolated keys longer guaranteed 
dynamic nature systems different online load balancing temporary tasks lack global knowledge coordination 
replication balancing real bins number bins varies time storage load balancing balls peers autonomously migrate replicate overloaded key spaces 
storage load balancing balls essentially determined data distribution essentially bins fit balls dynamically partitioning key space way round 
distinguishing property approach related load balancing strategies address conflicting load balancing problems storage load balancing amount storage nodes replication load ensuring approximately uniform data availability having roughly number replicas data partition 
step direction heuristic key space bisection proposal 
comparison heuristics exhaustively analyze refine bisection mechanism order better understand guarantee superior load balancing characteristics overlay network emerging recursive bisection algorithm 
additionally simulate construction process verify analytically predicted properties fully fledged implementation grid deployed planetlab back analysis simulation results large scale ex data 
overlay network substrate data oriented applications peer topeer search engine www info semantic overlay network 
furthermore existing load balancing overlay network construction mechanisms far sequential 
need faster overlay construction generated interest research community evident publications 
random interactions peers induced potentially original unstructured topology try build desired topology essentially trying sort peers identifiers generated process 
mechanisms overlay networks construction support search keys generated uniform hashing peer identifiers simply generated uniform hashing skew load distribution 
data oriented applications mechanism critical limitation peers amount load set peer identifiers generated process flexibility adaptivity load balancing particularly load skewed 
scheme hand adaptively creates key space partitions assigns peers partitions load characteristics generic parallel overlay construction mechanism 
special case uniform load distribution traditionally assumed dhts uniform hashing easily construct overlay requiring step partitioning 
fast re construction data oriented structured overlay networks emerging research topic covered exhaustively literature 
re indexing due changing application requirements frequent scenario data oriented applications necessitates efficient re construction overlay networks 
existing approaches essentially serialized take account inherent intricacies preservation key ordering relationships enable semantic processing data keys 
efficient completely decentralized algorithm supports fast parallel construction structured overlay networks scratch recursive bisection scheme preserves key semantics provides loadbalancing skewed distributions storage replication load 
prove efficiency approach analytical results verified simulation large scale experiments complete system implementation planetlab 
implementation available www grid org 
aberer mauroux hauswirth 
building internet scale semantic overlay networks 
iswc 
aberer datta hauswirth 
multifaceted simultaneous load balancing dht systems new game old balls bins 
self properties complex information systems hot topics series lncs 
karl aberer 
grid self organizing access structure information systems 
coopis 
karl aberer datta manfred hauswirth roman schmidt 
indexing data oriented overlay networks 
technical report ic ecole polytechnique rale de lausanne epfl 
abiteboul manolescu 
constructing querying peer peer warehouses xml resources 

el brand haridi 
dks family low communication scalable fault tolerant infrastructures applications 
rd ieee acm international symposium cluster computing grid ccgrid 
haridi 
framework structured peer peer overlay networks 
post proceedings global computing conference lncs 
springer verlag 
angluin aspnes chen wu yin 
fast construction overlay networks 
spaa 
azar plotkin waarts 
line load balancing temporary tasks 
journal algorithms 
byers considine mitzenmacher 
simple load balancing distributed hash tables 
iptps 
chun culler roscoe peterson bowman 
planetlab overlay testbed broad coverage services 
acm sigcomm computer communication review july 
ganesan bawa garcia molina 
online balancing range partitioned data applications peer peer systems 
vldb 
halevy ives madhavan mork suciu tatarinov 
piazza peer data management system 
tkde 
jelasity babaoglu 
man gossip overlay topology management 
engineering self organising applications 
karger ruhl 
new algorithms load balancing peer peer systems 
iris student workshop 
pitoura 
content routing path queries peer peer systems 
edbt 
manku 
balanced binary trees id management load balance distributed hash tables 
acm podc 
mitzenmacher 
power choices randomized load balancing 
ieee transactions parallel distributed systems 
nejdl wolpers siberski schmitz schlosser ser 
super peer routing strategies rdf peer peer networks 
web sem 
plaxton rajaraman richa 
accessing nearby copies replicated objects distributed environment 
spaa 
steger 
balls bins simple tight analysis 
random 
ratnasamy hellerstein shenker 
brief announcement prefix hash tree 
acm podc 
ratnasamy francis handley karp shenker 
scalable content addressable network 
acm sigcomm 
rowstron druschel :10.1.1.28.5987
pastry scalable distributed object location routing large scale peer peer systems 
middleware 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
proceedings acm sigcomm 
