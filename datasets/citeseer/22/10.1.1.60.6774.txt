pixy static analysis tool detecting web application vulnerabilities short jovanovic christopher engin technical university vienna secure systems lab chris ek tuwien ac number importance web applications increased rapidly years 
time quantity impact security vulnerabilities applications grown 
manual code reviews time consuming error prone costly need automated solutions evident 
address problem vulnerable web applications means static source code analysis 
precisely flow sensitive interprocedural context sensitive data flow analysis discover vulnerable points program 
addition alias literal analysis employed improve correctness precision results 
concepts targeted general class taint style vulnerabilities applied detection vulnerability types sql injection cross site scripting command injection 
pixy open source prototype implementation concepts targeted detecting cross site scripting vulnerabilities php scripts 
tool discovered reported previously unknown vulnerabilities web applications reconstructed known vulnerabilities web applications 
observed false positive rate false positive vulnerability low permit effective security audits 

web applications important communication channels various kinds service providers clients 
increased importance web applications negative impact security flaws applications grown 
vulnerabilities may lead compromise sensitive information reported continuously costs resulting damages increasing 
main reasons phenomenon time financial constraints limited programming skills lack security awareness part developers 
existing approaches mitigating threats web applications divided client side server side solutions 
client side tool known authors application level firewall offering protection case suspected cross site scripting xss attacks attempt steal user credentials 
server side solutions advantage able discover larger range vulnerabilities benefit security flaw fixed service provider instantly propagated clients 
server side techniques classified dynamic static approaches 
dynamic tools perl taint mode try detect attacks executing audited program static analyzers scan web application source code vulnerabilities :10.1.1.135.1565
pixy open source tool statically detecting xss vulnerabilities php code means data flow analysis 
chose php target language widely designing web applications substantial number security advisories refer php programs 
prototype aimed detection xss flaws equally applied taint style vulnerabilities sql injection command injection see section 
main contributions follows flow sensitive interprocedural contextsensitive data flow analysis php targeted detecting taint style vulnerabilities 
analysis process overcome significant conceptual challenges due untyped nature php 
additional literal analysis alias analysis steps lead comprehensive precise results provided previous approaches 
pixy system implements proposed analysis technique written java licensed gpl 
experimental validation pixy ability detect unknown vulnerabilities low false positive rate 

taint style vulnerabilities targeted detection vulnerabilities 
tainted data denotes data originates possibly malicious users possibly cause security problems vulnerable points program called sensitive sinks 
tainted data may enter program specific places spread program assignments similar constructs 
set suitable operations tainted data untainted sanitized removing harmful properties 
important types vulnerabilities cross site scripting sql injection seen instances general class taint style vulnerabilities 
overview vulnerabilities 

cross site scripting xss main purposes xss attacks steal credentials cookie authenticated user means malicious javascript code 
due sandbox model javascript access cookies belong site javascript originated 
xss attacks circumvent sandbox model injecting malicious javascript output vulnerable applications access desired cookies 
details attack 
speaking terms sketched class taint style vulnerabilities xss roughly described properties entry points program get post cookie arrays 
routines type casts destroy potentially malicious characters transform harmless ones casts integer 
sensitive sinks routines return data browser echo print printf 

vulnerabilities current prototype focuses xss vulnerabilities vulnerabilities sql injection command injection identified belonging general class taint style vulnerabilities differ respect concrete values parameters 
concepts targeted underlying general characteristics adjusting pixy detection instances requires engineering effort 

data flow analysis goal analysis determine possible tainted data reaches sensitive sinks properly sanitized 
apply technique data flow analysis understood topic computer science compiler optimizations decades 
general sense purpose data flow analysis statically compute certain information single program point coarser units functions 
instance classical constant analysis computes program point literal values variables may hold 
data flow analysis operates control flow graph cfg program 
construct parse tree php input file java lexical analyzer java parser cup 
parse tree transformed linearized form resembling code kept control flow graph encountered function 
straightforward approach solving problem detecting taint style vulnerabilities immediately conduct taint analysis intermediate address code representation generated front 
taint analysis identify points tainted data enter program propagate taint values assignments similar constructs inform user sensitive sink receives tainted input 
enable analysis produce correct precise results significant preparatory required 
instance variable assigned tainted value taint value propagated variable aliases variables pointing memory location 
perform alias analysis providing information alias relationships 
beneficial taint analysis know literal values variables constants may hold program point 
task performed literal analysis 
currently information collected literal analysis evaluate branch conditions ignore program paths executed runtime technique called path pruning 
potential uses literals information resolution non literal include statements variable variables variable array indices variable function calls 
key features analysis high precision flow sensitive interprocedural contextsensitive 
perform alias analy note name literal analysis classical term constant analysis order prevent confusion php constants 
sis untyped scripting language php 
exists rich literature pointer analysis questionable techniques directly applied semantically different problem alias analysis php 
mentioned unpublished xie aiken static analysis scripting languages regarded difficult problem achieved attention far 
context apparently trivial issues simulation effects simple assignment require careful considerations 
instance multi dimensional arrays contain elements explicitly addressed declared 
correctly handle assignment multidimensional array array variable hidden elements taken account 
details aspects applied analyses full length technical report 

limitations currently pixy support object oriented features php 
object member variables methods treated optimistic way meaning malicious data arise constructs 
addition files included include similar keywords scanned automatically 
experiments frequently observed false positives stemming lacking file inclusions eliminated manual inclusion 
unfortunately automation manual procedure straightforward file inclusions php dynamic contrast static preprocessor includes means names files included constructed run time recursive conditional inclusions permitted included files return values 
sense inclusion mechanism php strongly resembles function calls number differences concerning variable scoping 

empirical results performed series experiments prototype implementation demonstrate ability detect previously known cross site scripting vulnerabilities new ones 
pixy run popular open source php programs 
program files pixy evaluated prototype obtained website 
pixy automatically continue analysis included files manually resolved include relationships scanned files 
precisely simply provided missing function definitions static definitions global variables took hour application 
currently working straightforward extension automatically inlines included files eliminate manual task 
file analyzed minute ghz pentium processor gb ram prototype presents opportunities performance tuning 
tables summarize results experiments 
applications reconstructed known vulnerabilities false positives fp 
applications discovered previously unknown vulnerabilities false positives 
cases informed authors issues posted security advisories bugtraq mailing list 
pixy reported programming bugs relevant security function calls arguments 
note bugs influence program security properties counted vulnerabilities false positives 
results clearly show analysis capable finding novel vulnerabilities real world applications 

case studies detailed descriptions discovered vulnerabilities corresponding bugtraq postings 
section take closer look interesting vulnerabilities demonstrate requirement perform analysis able track data flows program 
reviews module contains interesting flaw related superficially harmless looking built function 
analyzer sure built functions considered return tainted values default 
way vulnerabilities missed due built functions modeled explicitly return untainted values 
explicit modeling performed providing short specification configuration file processed start 
list currently modeled built functions technical report 
false positives arising harmless unmodeled functions easily eliminated providing specification function true behavior 
simplified version vulnerable code shows second parameter function echoed line 
originally warning issued function unmodeled returned tainted value 
look php manual revealed handled care able transform benign character sequences dangerous ones transforming 
explicit sanitization prior call function fails reported bugtraq posting 
shows simplified version file preview static cgi php simple php blog 
sensitive sink function id title title title echo title 
vulnerability simplified 

entry get entry temp file name entry temp file name post file name echo temp file name 
simple php blog vulnerability simplified 
line receives variable temp file name initialized tainted value program paths construct line 
guarding condition true variable initialized entry line assigned tainted value get array line 
inside second branch temp file name tainted post variable indirectly call built function 
function returns taint value parameter modeled 
note pixy correctly detected vulnerability temp file name assigned untainted value just branches 

false positives false positives pixy reported caused global variables initialized dynamically database read inside included file 
mentioned previously considered static initializations manual preprocessing step 
uninitialized globals conservatively treated tainted warnings issued program points variables sent back user 
confident false positives eliminated include files automatically processed 
second largest group false positives contains warnings traced back file reads 
analysis conservatively regarded values originating files tainted 
cases turned attacker able inject malicious content files read 
conservative approach led detection previously unknown vulnerabilities 
ratio false positives vulnerabilities problem improved tracking files attacker may able inject tainted values 
alias analysis cover aliasing relationships arrays array elements global array content untainted statements located inside functions 
cases global array element untainted inside sanitization function followed output statement contains incorrectly tainted global 
interesting kind false positive warnings arose scanning 
module values originating user embedded output attributes html tags 
values thoroughly sanitized prior existing sanitization sufficient sure contain double quotes 
attribute fields delimited double quotes attacker input trapped inside attributes able harm 
custom sanitization regular expressions dangerous practice 
easy dangerous characters especially cases get complex implementor lacks necessary expertise 
pixy consider methods sanitization 
cases values undergone custom sanitization reported tainted 
manual inspection reveal ways circumventing protection 
remaining false positives due complex constructs responsible critical variable 
certain conditions possible branches construct taken leaving variable tainted 
find way induce bypassing condition 

related currently exist approaches deal static detection web application vulnerabilities 
huang address issue context php applications 
lattice analysis algorithm derived type systems typestate compared technique bounded model checking follow 
substantial fraction php files experiments rejected due problems applied parser 
contrast able parse full php language 
huang leaves important issues handling array elements limitations addressed section 
unfortunately comparing results possible due limited detail reports version numbers advisory id 
requesting copy tool authors informed plans prevents share researchers 
unpublished xie aiken addresses problem statically detecting sql injection program file loc variables vulnerabilities fp advisories reviews module bugtraq module bugtraq pl select server lib php gallery search php bugtraq login php bugtraq totals table 
known vulnerabilities discovered pixy 
program file loc variables vulnerabilities fp advisories simple php blog preview cgi php preview static cgi php bugtraq colors php serendipity personal php bugtraq view php bugtraq totals vulnerabilities php scripts 
applying custom architecture full fledged data flow analysis techniques operate ambitious conceptual level 
instance recursive function calls simply ignored handled correctly 
alias analysis performed lowers correctness approach 
multi dimensional arrays appear unsupported 
apply heuristic resolving simple cases include statements yield results practice 
easy incorporate approach prototype 
livshits lam applied analysis supported binary decision diagrams finding security vulnerabilities java applications :10.1.1.4.5048
differs underlying analysis part target language java typed language 
considerably eases challenges faced static analysis 
technique approximating string output php programs context free grammar 
primarily targeted validation html output author claims detection cross site scripting vulnerabilities 
taint information additional checks appears difficult distinguish malicious benign output 
discovered xss vulnerability reported observed false positive rate mentioned 
table 
unknown vulnerabilities discovered pixy 
tool currently supports basic features php excluding 
engler published various static analysis approaches finding vulnerabilities programming bugs context programs 
example authors describe system translates simple rules automata compiler extensions check program adheres rules 
extension authors techniques automatic extraction rules program 
tainting analysis identify vulnerabilities operating system code user supplied integer pointer values proper checking 
alternative approach aiming detection vulnerabilities introduces special type qualifiers analyzed programming language 
prominent tools applies concept things shankar detect format string vulnerabilities code 
remains questionable technique applied untyped scripting languages 

web applications popular widespread interaction medium daily lives 
time vulnerabilities endanger personal data users discovered regularly 
manual security audits targeted vulnerabilities labor intensive costly errorprone 
propose static analysis technique able detect taint style vulnerabilities automatically 
broad class includes types common vulnerabilities sql injection cross site scripting 
analysis data flow analysis understood established technique computer science 
improve correctness precision taint analysis conducted supplementary alias analysis literal analysis 
analyses interprocedural context sensitive flow sensitive providing high degree precision keeping number false positives low making tool useful real world applications 
implemented concepts pixy open source java tool able detect cross site scripting flaws php scripts 
course experimental validation discovered reported previously unknown vulnerabilities reconstructed known vulnerabilities observing moderate false positive rate false positive vulnerability average 
urgent need automated vulnerability detection web application development especially web applications growing large complex systems 
believe concepts provide effective solution problem offering benefits users providers web applications 

acknowledgments supported austrian science foundation fwf 
shepherd guidance preparing camera ready version markus insightful discussions theory data flow analysis interpretation 
aho sethi ullman 
compilers principles techniques tools 
addison wesley longman publishing boston ma usa 
engler 
programmer written compiler extensions catch security holes 
ieee symposium security privacy 
bugtraq 
bugtraq mailing list archive 
www securityfocus com archive 
cert 
cert advisory ca malicious html tags embedded client web requests 
www cert org advisories ca html 
cup 
cup lalr parser generator java 
www cs tum edu projects cup 
engler chelf chou hallem 
checking system rules system specific programmer written compiler extensions 
osdi 
engler chen hallem chou chelf 
bugs deviant behavior general approach inferring errors systems code 
sosp proceedings th acm symposium operating systems principles 
foster aiken 
theory type qualifiers 
pldi proceedings acm sigplan conference programming language design implementation 

huang 
huang 
lin 
tsai 
web application security assessment fault injection behavior monitoring 
www proceedings th international conference world wide web 

huang yu hang 
tsai 
lee 
kuo 
securing web application code static analysis runtime protection 
www proceedings th international conference world wide web 

huang yu hang 
tsai lee 
kuo 
verifying web applications bounded model checking 
dsn 

fast scanner generator java 
de 
jovanovic 
pixy static analysis tool detecting xss vulnerabilities 
www tuwien ac projects pixy 
vigna jovanovic 
client side solution mitigating cross site scripting attacks 
st acm symposium applied computing sac 
livshits lam 
finding security errors java programs static analysis 
proceedings th usenix security symposium aug 
minamide 
static approximation dynamically generated web pages 
www proceedings th international conference world wide web 
muchnick 
advanced compiler design implementation 
morgan kaufmann 
nguyen greene shirley evans 
automatically hardening web applications precise tainting 
ifip security 
nielson nielson hankin 
principles program analysis 
springer verlag new york 
php 
php hypertext preprocessor 
www php net 
berghe 
defending injection attacks context sensitive string evaluation 
advances intrusion detection raid 
shankar talwar foster wagner 
detecting format string vulnerabilities type qualifiers 
proceedings th usenix security symposium 
stephen 
php succeeding java isn www com au 
whaley lam :10.1.1.4.5048
cloning context sensitive pointer alias analysis binary decision diagrams 
pldi proceedings acm sigplan conference programming language design implementation 
xie aiken 
static detection security vulnerabilities scripting languages 
glide stanford edu research sec ps 
