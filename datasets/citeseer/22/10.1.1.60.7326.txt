fault tolerant massively multiagent systems jean pierre briot lip universit pierre marie curie paris rue du scott paris france lip fr jean pierre briot lip fr iut de cedex france univ fr 
order construct deploy massively multiagent systems address fundamental issues distributed systems possibility partial failures 
discuss issues propose approach fault tolerance massively multiagent systems 
starting idea application replication strategies agents 
criticality agents may evolve course computation problem solving resources bounded need dynamically automatically adapt number replicas agents order maximize reliability availability 
describe approach related mechanisms evaluating criticality agent parameterize number replicas 
report experiments conducted prototype architecture named 
possibility partial failures fundamental characteristic distributed applications 
fault tolerance research community developed solutions algorithms architectures concept replication applied instance data bases 
techniques applied explicitly statically design time 
approaches responsibility designer application identify explicitly critical servers robust decide strategies active passive replication 
configurations replicas placement 
new cooperative applications air traffic control cooperative commerce dynamic massive impossible identify advance critical software components application 
furthermore criticality vary run time information best allocate scarce replication resources 
cooperative applications increasingly designed set autonomous interactive entities named agents interact coordinate multiagent system 
applications roles relative importance agents greatly vary course computation interaction cooperation agents able change roles strategies 
new agents may join leave application open system 
addition applications may massive 
fact underlying distributed system massive unstable nature currently deployed technologies 
increases needs mechanism adaptive application 
approach consequence give capacity multiagent system dynamically identify critical agents decide strategies apply 
analog load balancing 
want automatically dynamically apply replication mechanisms agents needed 
guide adaptive intend various levels information system level communication load application agent level roles plans 
organized follows section presents related section presents fault tolerance concepts replication principles 
section presents framework developed replicate agents 
framework introduces novel features dynamic control replication 
section describes approach compute agent criticality order guide replication 
section describes implementation solution preliminary experiments 
related approaches address multi faced problem fault tolerance multiagent systems 
approaches classified main categories 
category focuses especially reliability agent multiagent system 
approach handles serious problems communication interaction coordination agents agents system 
second category addresses difficulties making reliable mobile agents exposed security problems 
second category scope 
family reactive multiagent systems systems offer high redundancy 
example system metaphor ant nests 
unfortunately design application terms reactive multiagent systems 
basically methodology 
systems suitable simulations 
apply simple redundancy scheme cognitive multiagent systems cause inconsistencies copies single agent 
need control redundancy 
introduces protect agents undesirable states 
represent control structure multiagent system 
fault tolerant massively mas need build models agent monitor communications order react faults 
sentinel associated designer functionality multiagent system 
sentinel handles different agents interact achieve functionality 
analysis beliefs agents enables sentinel detect fault occurs 
adding multiagent systems approach represent failure points multiagent system 
problem solving agents participate fault tolerance process 
propose proxies transparent agent replication enabling replicas agent act entity regarding agents 
proxy manages state replicas 
external internal communications group redirected proxy 
increases workload proxy quasi central entity 
reliable propose build hierarchy proxies group replicas 
point specific problems read write consistency resource locking discussed 
approach lacks flexibility reusability particular concerning replication control 
experiments done fipa os provide replication mechanism 
replication realized designer run time 
kaminka adapt monitoring approach order detect recover faults 
models relations mental states agents 
adopt procedural plan recognition approach identify inconsistencies 
adaptation structural relation models may change contents plans static 
main hypothesis failure comes incompleteness beliefs 
monitoring approach relies agent knowledge 
design multiagent systems complex 
behavior agent adaptive system open 
distributed computing toolkits include replication facilities build reliable application 
products flexible implement adaptive replication 
implements java active passive replication flexible way 
authors extended java reactive metalevel architecture 
replication transparent 
relies modified java interpreter 
realizes fault tolerant smalltalk machines active replication 
similar uses reflexive architecture provides different replication strategies 
provide adaptive mechanism apply strategies 
kraus proposes solution deciding allocation extra resources replicas agents 
proceed reformulating problem successive operational research problems knapsack bin packing 
approach results interesting restrictive hypothesis adaptive 
requirements techniques fault tolerance principles replication replication data computation effective way achieve fault tolerance distributed systems 
replicated software component defined software component possesses representation hosts 
main types replication protocols active replication replicas process concurrently input messages passive replication replicas processes input messages periodically transmits current state replicas order maintain consistency 
active replication strategies provide short recovery lead high overhead 
passive replication minimizes processor utilization activating redundant replicas case failures 
requires cpu resources active approach needs checkpoint management remains expensive processing time space 
limits current replication techniques toolkits include replication facilities build reliable applications 
quite suitable implementing adaptive replication mechanisms 
example strategy modified course computation indication new strategy ought applied change devised application developer runtime 
group structure left designed user task conceiving software appears tremendously complex 
designed specific novel framework replication named see details section allows dynamic replication dynamic adaptation replication policy passive active changing number replicas 
designed easily integrate various agent architectures mechanisms ensure dependability kept transparent possible application 
framework dynamic replication framework design reliable distributed applications include set distributed communicating entities agents 
agent replicated unlimited number times different replication strategies passive active 
note working integration replication strategies including quorum strategies 
address design particular strategies describes fault tolerant massively mas infrastructure enable switch suitable dependability protocol 
number replicas may adapted dynamically 
novel feature replication strategy reified may dynamically change replication strategy 
architecture agent task supervision group agent agent group agent agent agent fig 

application architecture includes group membership management dynamically add remove replicas 
provides atomic ordered multi cast replication groups internal communication 
messages agents communication external group logged replica sequences messages re emitted recovery purposes 
portability compatibility issues implemented java 
agent replication replication group opaque entity underlying application agent 
number replicas internal strategy specific agent totally hidden application agents 
replication group exactly leader communicates agents 
leader checks liveness replica responsible reliable broadcasting 
case failure leader new automatically elected set remaining replicas 
provides global naming 
agent global name independent current location replicas 
underlying system allows handle agent execution communication 
agent wrapped acts replication group manager responsible delivering received messages members replication group preserving transparency supported application 
input messages intercepted enabling message caching 
messages get processed order replication group 
agent communicate remote agent single agent replication group local proxy implemented interface 
distinct remote entity considered replication group leader 
reliability features brought agents instance server running location 
implements required replication services backed common global naming location service 
adaptive control replication provides needed adaptive mechanisms replicate agents modify replication strategy 
replicate agents system available resources usually limited 
example section consider distributed assistant agents resources allow duplicate agents 
problem determine critical agents needed number replicas agents 
resources allocated critical agents 
distinguish cases agent criticality static agent criticality dynamic 
case multiagent systems static organization structures static behaviors agents small number agents 
critical agents identified designer replicated programmer run time 
second case multiagent systems may dynamic organization structures dynamic behaviors agents large number agents 
agents criticality determined run time 
agent criticality dynamic organizational structures 
problem determine dynamically structures evaluate agent criticality 
propose new approach observing domain agents evaluating dynamically criticality 
detail approach dynamically evaluating criticality agent order perform dynamic replication best needed 
hypothesis principles want automatic mechanism generality reasons 
order efficient need prior input designer application 
designer choose approaches replication static dynamic 
proposed dynamic approach agent criticality relies kinds information fault tolerant massively mas system level information 
standard measurements communication load processing time 
currently evaluating significance measure activity agent 
semantic level information 
aspects may considered importance agents independence agents importance messages 
decided concept role captures importance agent organization dependencies agents 
note approach generic related specific interaction language application domain 
just suppose agents communicate agent communication language acl 
architecture order track dynamical adoption roles agents propose role recognition method 
approach observation agent execution interactions recognize roles agent evaluate processing activity 
dynamically compute criticality agent 
existing multiagent architectures observation mechanism centralized 
acquired information typically line explain improve system behavior 
considered application domains typically involve small number agents known organizational structures 
centralized observation architectures suited large scale complex systems observed information needs analyzed realtime adapt multiagent structure evolution environment 
propose distribute observation monitoring mechanism improve efficiency robustness 
distributed mechanism relies reactive agent organization 
reactive agents roles observe control domain agents build global information minimize communication 
roles assigned kinds agents domain agent monitors named agent monitors host monitors named host monitors 
associated domain agent host monitor associated host see 
monitoring agents agent monitors host monitors hierarchically organized 
agent monitor communicates host monitor 
exchange local information build global information global number messages global exchanged quantity information 
distribution observation mechanisms provided middleware 
implementation relies see section 
middleware machine runs server server provides observation module 
observation level agent level agent monitor domain agent domain agent agent monitor agent monitor agent monitor domain agent domain agent fig 

multiagent architecture host monitor sendmessage event control module collects events sent received messages data 
registers host monitor receive information events related associated domain agent 
interval time host monitor sends collected events data corresponding agent monitors 
agent monitor executes behavior read messages received host monitor activate role analysis see section compute domain agent criticality see sections determine number replicas see section 
criticality domain agent significantly modified notifies host monitor 
informs host monitors update global information 
turn agent monitors informed global information changes significantly 
sections describe role analysis activity analysis methods propose 
role analysis consider cases 
case agent displays explicitly roles interaction protocols 
roles agent easily deduced interaction events 
second case agents display roles fault tolerant massively mas interaction protocols 
agent roles deduced interaction events role analysis module 
analysis attention focused precise ordering interaction events 
role analysis module captures represents set interaction events resulting domain agent interactions sent received messages 
events determine roles agent 
illustrates various steps analysis 
role definition library designer observation pattern matching role recognition fig 

roles recognition interaction events roles represent agent interactions methods proposed state machines petri nets 
application state machines provide suitable representation 
role interaction model represented state machine 
transition represents interaction event sending receiving message 
shows example machine state represents interaction model role initiator 
interaction events represent exchanged messages 
distinguish kinds interaction events sendmessage 
attributes sendmessage interaction events similar attributes acl messages sendmessage communicative act sender receiver content reply 
communicative act sender receiver content reply 
order able filter various messages introduce wild card character 
example interaction event cfp content unconstrained 
interaction event match interaction event communication act cfp sender receiver content 
example scheduling meetings see section assistant agents contract net protocol schedule meeting 
interaction models cfp agent 
propose agent refuse agent 
reject agent accept agent 
inform agent fig 

machine state initiator initiator participant deduced contract net protocol 
initiator described 
description represents different steps sent received messages role 
description initiator interpreted follows call proposals message sent participants initiator fipa contract net protocol 
participants reply initiator proposed meeting times 
form message proposal refusal 
initiator sends accept reject messages participants 
participants agree proposed meeting inform initiator completed request schedule meeting confirm 
agent may simultaneously fulfill role 
agent monitor may active role recognition process 
activity analysis multiagent systems internal activity agents observed private 
observation restricted events 
evaluate degree agent activity system data collected system level 
considering kinds measures cpu time communication load 
currently evaluating significance measures indicators agent activity useful calculate agent criticality 
fault tolerant massively mas agent time interval measures provide time cpu cpi communication load cli 
cpi cli may measure agent degree activity follows cpi cli cl cl global communication load weights introduced user 
agent criticality analysis events measures system data interaction events provides kinds information roles degree activity agent 
information processed agent criticality module 
relies table defines weights roles 
table initialized application designer 
criticality agent fulfills roles ri rim computed follows wi aggregation ij weights kinds parameters roles degree activity 
introduced designer 
agent ai criticality wi compute number replicas 
replication agent replicated wi criticality sum domain agents criticality rm minimum number replicas introduced designer rm available resources define maximum number possible simultaneous replicas 
number replicas determined follows rounded rm wi rm number replicas update number replicas domain agent 
number replicas increases associated sends call proposal host monitors 
host monitor sends proposal non allocated resource 
agent monitor selects needed resources 
selection process relies mainly communication cost hosts 
number replicas decreases agent monitor selects replicas sends message corresponding host monitors cancel location resources 
experiments validate proposed approach realized integration multiagent platform dima 
integration provides generic fault tolerant multiagent platform 
order validate fault tolerant multiagent platform carried experiments 
measures obtained set pentium pcs running linux jdk linked fast ethernet mb 
simple example consider example distributed multiagent system helps scheduling meetings 
user personal assistant agent manages calendar 
agent interacts user receive meeting requests associated information title description possible dates participants priority agents system schedule meetings 
assistant agent important participant initiator prime participant meeting fails machine crashes may process 
application dynamic new meeting negotiations start complete dynamically simultaneously decision replication done automatically dynamically 
performances monitoring useful mechanism 
cost important 
experiment measures monitoring cost proposed architecture 
consider multiagent system distributed agents execute scenario agent fixed scenario 
number agents isan important factor framework specially designed massively multiagent systems 
realized kinds measures monitoring 
machine runs agents 
machines experiment repeat experiment times 
gives average execution time shows monitoring cost constant function 
increase number agents 
explained proposed optimization multiagent architecture communication agent monitors 
instance build global information global communication load host monitors communicate local information changes 
execution time robustness fault tolerant massively mas number agents fig 

monitoring cost considered assistant agents distributed machines 
agents may roles initiator participant 
define scenario initiators 
agents roles initiator participant 
consider agents role participant 
agents critical 
run experiment mn introduced faults 
simulate presence faults implemented failure simulator randomly stopping thread agent chosen randomly 
repeated times experiments variable number extra resources number replicas 
consider variables rate simulations succeeded fail shows success rate function replication rate 
experiments notice rate succeeded simulation interesting greater number extra resource reaches number critical agents 
number extra resources equal number critical agents 
critical agent replica 
preliminary believe results encouraging 
note results similar replication strategies 
rate rate simulations fig 

rate succeeded simulations number replicas massively multiagent systems distributed run interruption 
systems reliable proposed new approach evaluate dynamically criticality agents 
approach concepts roles degree activity 
agent criticality replicate agents order maximize reliability availability available resources 
validate proposed approach realized fault tolerant framework multiagent platform dima implement multiagent systems 
integration multiagent platform dima provides generic fault tolerant multiagent platform 
order validate fault tolerant multiagent platform small applications developed meetings scheduling crisis management system 
intended evaluating model architecture viability 
realized experiments role definition library see section role criticality defined designer runtime 
interesting improve monitor agent behavior learn new roles learn criticality observing agent interactions 
obtained results interesting promising 
experiments real life applications needed validate proposed approach 
number replicas fault tolerant massively mas authors members fault tolerant multi agent systems project useful discussions suggestions 

marin sens implementation performance evaluation adaptable failure detector 
international conference dependable systems networks washington usa 


improving fault tolerance replicating agents 
aamas italy 

fipa 
specification 
part agent communication language foundation intelligent physical agents geneva switzerland 
www cselt leonardo fipa index htm 

guerraoui 
lessons designing implementing 
proceedings objects oriented parallel distributed volume lncs pages nottingham 


briot 
active objects autonomous agents 
ieee concurrency 


briot 
dynamic adaptative replication large scale reliable multi agent systems 
proceedings icse international workshop software engineering large scale multi agent systems orlando fl may 
acm 


sentinel approach fault handling multi agent systems 
zhang lukose editors multi agent systems methodologies applications number lncs pages 
springer verlag 

kaminka pynadath tambe 
monitoring teams overhearing multi agent plan recognition approach 
journal intelligence artificial research 

kraus subrahmanian tacs 
probabilistically survivable mass aaai editor ijcai 


reflection 
oopsla workshop reflective programming java pages 
springer verlag 

odell dyke parunak bauer 
representing agent interaction protocols uml 
fourth international conference autonomous agents 

de silva popescu 
approach providing mobile agent fault tolerance 
maheshwari editor second international workshop mobile agents number lncs pages 
springer verlag 

silva silva 
fault tolerant execution mobile agents 
international conference dependable systems networks pages 

van renesse birman maffeis 
horus flexible group communication system 
communications acm 
