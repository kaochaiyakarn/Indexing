anonymity loves usability network effect roger dingledine nick mathewson free haven project arma net 
growing field literature studying usability impacts security 
class security software anonymizing networks overlay networks internet provide privacy letting users transact example fetch web page send email revealing communication partners 
position focus network effects usability privacy security usability factor size user base factor 
show anonymizing networks smart time system perfectly right choose system part usability users 
usability impacts security security software product developers security provides collaboration developers users 
software securely software hard suffers security result 
example suppose popular mail encryption programs heavy crypto secure correctly easier 
suppose 
choose 
decide protects secrets better 
friends send confidential email ll mistake encrypt badly 
certain friends correspondence get protection 
programs 
tech savvy friends sophisticated friends everybody get protection 
friends really judge able 
supporting usable option non savvy friends shoot foot 
crucial insight email encryption security collaboration multiple people sender receiver secret email protect confidentiality 
order protect security need sure system usable participants 
observation doesn mean better choose usability security course system doesn address threat model amount usability secure 
conversely people need system won correctly ideal security properties irrelevant 
hard programs protocols hurt security ways programs insecure modes operation bound modes 
optional security disabled re enabled 
example users ordinarily disable browser cookies privacy reasons wind re enabling access sites require cookies leaving cookies enabled sites 
badly labeled switches security worse prone accidental selection re vulnerable social attackers trick users disabling security 
example consider page long warning browser provides go website expired suspicious ssl certificate 
inconvenient security abandoned name day day efficiency people write difficult passwords keep forgetting share passwords order 
systems provide false sense security prevent users real measures protect breakable encryption zip archives example fool users thinking don need encrypt email containing zip archives 
systems provide bad mental models security trick users believing safe really example users interpret lock icon web browsers mean safely enter personal information meaning closer read information way named website usability important privacy described usability affects security systems aim protect data confidentiality 
goal privacy important 
anonymizing networks tor jap mixminion mixmaster aim hide said communicating users websites :10.1.1.107.2563
systems broad range users including ordinary citizens want avoid profiled targeted advertisements corporations don want reveal information competitors law enforcement government intelligence agencies need operations internet noticed 
accurately read information way able convince dozens hundreds cas configured browser named website able compromise named website 
computer compromised anonymity networks hiding users users 
eavesdropper able tell alice bob carol network able tell talking dave 
property summarized notion anonymity set total set people far attacker tell engaging activity interest 
larger set anonymous participants 
users join network existing users secure new users talk existing ones 
anonymity loves data confidentiality system pgp alice bob decide want get security :10.1.1.13.5636
long software properly third party intercept traffic break encryption 
alice bob get anonymity need participate infrastructure coordinates users provide cover 
organization build infrastructure sole 
single government agency build private network protect operations connections entering leaving network obviously linkable controlling organization 
members operations agency easier harder distinguish 
provide anonymity users network accept traffic external users various user groups blend 
practice existing commercial anonymity solutions anonymizer com set single hop proxies 
systems user connects single proxy relays user traffic 
single proxies provide comparatively weak security compromised proxy trivially observe users actions eavesdropper needs watch single proxy perform timing correlation attacks users traffic 
worse users need trust proxy security reveal user activities 
solution distributed trust infrastructure independently controlled proxies sure transaction privacy relies single proxy 
distributed trust anonymity networks users build tunnels circuits series servers 
encrypt traffic multiple layers encryption server removes single layer encryption 
single server knows entire path user user chosen destination 
attacker break user anonymity compromising eavesdropping server 
assuming participants equally plausible course 
attacker suspects alice bob carol equally alice anonymous attacker suspicious alice suspicious bob carol anonymity sets size 
imprecision research moving simple anonymity sets sophisticated measures attacker confidence 
catch phrase popular context authors crowds anonymity network 
despite increased security distributed trust anonymity networks disadvantages 
traffic needs relayed multiple servers performance worse 
software implement distributed trust anonymity network significantly difficult design implement 
issues architecture ownership network catch 
users keep anonymity set need act 
alice client acts completely bob client alice messages leave system acting completely bob attacker information 
worst case alice messages stand entering leaving network attacker treat alice separate network 
alice messages recognizable leave network attacker information break exiting messages messages user messages user get away linking messages senders groups trying guess individual messages 
partitioning inevitable alice speaks arabic bob speaks bulgarian force learn english order mask 
imply usability 
encryption systems users anonymizing networks may need choose systems usable find order get protection larger anonymity set 
case study usability means users users mean security ll consider example 
practical anonymizing networks fall broad classes 
high latency networks mixminion mixmaster resist strong attackers watch network control large part network infrastructure 
prevent global attacker linking senders recipients correlating messages enter leave system high latency networks introduce large delays message delivery times suitable applications email bulk data delivery users aren willing wait half hour web pages load 
low latency networks tor hand fast web browsing secure shell interactive applications weaker threat model attacker watches controls ends communication trivially correlate message timing link communicating parties 
clearly users need resist strong attackers choose high latency networks users need anonymize interactive applications choose low latency networks 
flexible users choose 
unknown threat model non interactive application email secure choose security usability 
security decide 
attacker turns strong ll prefer high latency network attacker weak extra protection doesn hurt 
users find high latency network inconvenient suppose gets actual users fact maximum anonymity set small needs 
case need pick low latency system high latency system protects protects low latency system give protection attackers 
decision especially messy developers implement anonymizing networks recommend approach safer predict users network get predict capabilities attackers see wild 
worse anonymity research field young doesn convincing techniques measuring comparing protection get various situations 
developers users divine level anonymity require expected attacker researchers don know parameter values recommend 
case study options designers faced security decision bow leave choice option protocol designers leave implementors decide implementors leave choice users 
approach bad security systems nearly bad privacy systems 
security extra options delegate security decisions able understand imply 
protocol designer decide aes encryption algorithm better encryption algorithm user supposed pick 
options code harder audit increasing volume code increasing number possible configurations exponentially guaranteeing non default configurations receive little testing field 
aes default independent implementations protocol long take notice implementation wrong 
users stay default configurations long reconfigure software necessary usable 
example suppose developers web browser decide support extension unknown security implications leave user adjustable option thinking users enable disable extension security needs 
reality extension enabled default nearly users leave secure extension disabled default users tend enable perceived demand extension security needs 
savvy security conscious users ones know web security developers wind understanding security implications decision 
real issue designers situation need choose insecure inconvenient default configuration meaning mistake designing application 
course users know individual security requirements application designers adding options beneficial especially users describe situation home enterprise shared versus single user host trying specify program situation 
privacy applications superfluous options worse 
different possible configurations eavesdroppers insiders tell users apart settings choose 
example type anonymous email network uses encrypted message format supports symmetric asymmetric ciphers 
different users prefer different ciphers different versions encryption programs implementing pgp different cipher suites users uncommon preferences versions stand rest get little privacy 
similarly type allows users pad messages fixed size eavesdropper correlate sizes messages passing network forces user decide size padding 
user guess padding size happen popular option provides attackers way tell users apart 
users needs genuinely vary adding options necessarily serve privacy 
practice default option usually prevails casual users needs prevail security conscious users best choice 
example anonymizing network allows user selected message latency type network users tend whichever setting default long works 
fraction users change default fact understand security implications need decide increased traffic analysis resistance comes variable latency worth decreased anonymity comes splitting away bulk user base 
case study mixminion mime argued providing observable options hurt privacy argued focusing hard privacy usability hurt privacy 
happens principles conflict 
encountered situation designing mixminion anonymous email network handle mime encoded data :10.1.1.107.2563
mime multipurpose internet mail extensions way mail client tells receiving mail client attachments character set 
standard mime permissive flexible different email programs distinguishable subsets format types encodings choose generate 
trying normalize mime converting mail standard works point trivial convert encodings quoted printable example impose standard order multipart alternative parts demanding uniform list formats multipart alternative messages normalizing html stripping identifying information microsoft office documents imposing single character encoding language impossible task 
possible solutions problem include limiting users single email client simply banning email formats plain bit ascii 
approaches limit usability turn users away mixminion network 
fewer users mean anonymity ask users better larger network messages distinguishable email client smaller network email formats look 
distinguishability inevitable anyway users differ interests languages writing styles alice writes astronomy messages mistaken bob writes botany basque 
attempt restrict formats 
limited mixminion bit ascii users wouldn sending images pdf files messages chinese follow evolutionary path led mime place encode messages variety distinguishable formats client software implementation having ad hoc favorites 
imposing uniformity place drive away users probably fail long run lead fragmentation dangerous trying avoid 
consider threat models 
take advantage format distinguishability attacker needs observe messages leaving network exploit prior knowledge suspected senders alice user owns copy feed message format information traffic analysis approaches half messages alice written english ll assume come different senders ones 
attack certain easy attackers defeat worst possible case attacker knows example copy sold provide vulnerable users protection weaker attackers 
compromised perform normalization warn user document types ms word reveal identifying information forbid particular format client software 
way users informed blend largest possible anonymity set users prefer distinguishable formats receive contribute protection certain attackers 
case study tor installation usability marketing proved important development tor low latency anonymizing network tcp traffic 
technical challenges tor solved ones needs address described design point crucial challenges adoption usability 
tor earliest stages user base small number fairly sophisticated privacy experience running unix services wanted experiment network say design don track users 
project gained attention venues including security conferences articles slashdot org wired news mainstream media new york times forbes wall street journal added users technical expertise 
users provide broader base anonymity high needs users receive support 
example proven difficult educate sophisticated users dns issues 
anonymizing tcp streams tor applications reveal connect performing hostname lookup 
stay anonymous users need configure applications pass hostnames tor directly socks hostname variant socks manually resolve hostnames tor pass resulting ips applications direct applications application specific proxies handle protocol needs independently 
easy unsophisticated user systems compromise privacy provide cover users configured correctly bob leaks dns request connect website observer tell anybody connecting alice website anonymously bob 
experienced users interest making sure inexperienced users system correctly 
tor hard configure weakness everybody 
tried solutions didn hoped 
improving documentation helped users read 
changed tor warn users provided ip address hostname warning usually resulted email exchanges explain dns casual user typically idea solve problem 
time writing important solutions users improve tor documentation configure various applications tor change warning messages refer users description solution insecure 
see webpage description problem application sending ips hostnames may leak information 
consider socks bundle tor support tools needs relying users find configure 
case study jap meter java anon proxy jap low latency anonymizing network web browsing developed deployed technical university dresden germany 
tor uses free route topology user choose enter network exit jap fixed route cascades aggregate user traffic single entry point single exit point 
jap client includes gui notice anonymity meter giving user impression level protection current traffic 
decide value meter report 
jap case number users traveling cascade time 
alas jap aims quick transmission bytes cascade falls prey timing correlation attacks described 
attacker watch ends cascade won distracted users 
jap team plans implement full scale padding user sending receiving packets time send usability reasons haven gone forward plans 
system anonymity sets don provide real measure security jap attacker watch ends cascade wins number users network real obstacle attack 
think meter great way security information user hope see variant deployed day high latency system mixminion amount current traffic system directly related protection offers 
bootstrapping confidence area human factors critical privacy bootstrapping new systems 
new systems start users initially provide small anonymity sets 
starting state creates dilemma new system improved privacy properties attract users believe popular high anonymity sets system popular attracting users 
new systems need users privacy need privacy users 
low needs users break deadlock 
earliest stages anonymizing network lifetime tend involve users need resist weak attackers know users network learn contents small anonymity set 
solution reverses early adopter trends security systems attracting users privacy applications attracting low needs users 
analysis relies users accurate perceptions anonymity set size 
market economics expectations bring trends privacy system people believe secure popular gain users things equal secure popular 
security depends usability perceived usability quality provider marketing public relations 
systems broken may better choice modestly promoted ones hype attracts users 
factor safety network perception social value current users 
user system socially accepted getting anonymity 
add anonymous thinks 
add random citizens cancer survivors privacy hard profile 
cancer survivors tor better human rights 
script worse normal users 
anonymity issue reasons 
impacts sustainability network network shut difficulty attracting keeping users anonymity set suffers 
second network attracts attention powerful attackers may mind revealing identities users uncover bad ones 
people incentive network reputable activities tradeoffs involved comes anonymity 
follow example network entirely cancer survivors welcome network course prefer wider variety users 
impact public perception security especially important bootstrapping phase network widely publicized uses network dictate types users attracts 
technical challenges guessing number users network addition social problems describe difficult typical user guess anonymizing network popular technical challenges 
stem fact anonymizing networks hiding going users 
example attacks solve attacker sign users artificially inflate apparent size network 
sybil attack increase odds attacker able successfully compromise user transaction trick users thinking network safer saw discussing jap feasibility toend attacks hard guess user contributing anonymity 
actively trying trick fail provide cover behavior sufficiently different active day re active night transactions different talks physics talk aids network design parameters low delay messages mean attacker able track transactions easily 
bringing users safety relies behaving users 
predict users behavior 
need behave way different rest users compute tradeoff risks 
lessons take away researching anonymity usability 
hand anonymity tricky technical standpoint re required get usability right anybody safe hard come design lack anonymity means lack users re stuck depressing loop 
hand loop optimistic side 
anonymity mean users headway usability long technical designs adequate ll users 
case declining design solution means leaving users secure network anonymizing network 
cancer survivors abuse victims continue communications research internet risking social employment problems human rights workers countries continue publishing stories 
temptation focus designing perfectly usable system building self defeating obstacles usability unforeseen 
believe security community needs focus continuing experimental deployment 

alessandro roger dingledine paul syverson 
economics anonymity 
rebecca wright editor financial cryptography 
springer verlag lncs january 

adam back ulf ller anton 
traffic analysis attacks trade offs anonymity providing systems 
ira moskowitz editor information hiding ih pages 
springer verlag lncs 

oliver berthold hannes federrath stefan 
web mixes system anonymous unobservable internet access 
federrath editor designing privacy enhancing technologies workshop design issue anonymity unobservability 
springer verlag lncs july 

cranor mary ellen editors 
proceedings symposium usability privacy security pittsburgh pa july 

george danezis 
traffic analysis continuous time mixes 
david martin andrei serjantov editors privacy enhancing technologies pet lncs may 
www cl cam ac uk users gd cmm pdf 

george danezis roger dingledine nick mathewson 
mixminion design type iii anonymous remailer protocol 
ieee symposium security privacy pages 
ieee cs may 

claudia diaz bart preneel 
measuring anonymity 
paul syverson roger dingledine editors privacy enhancing technologies lncs april 

roger dingledine nick mathewson paul syverson 
tor second generation onion router 
proceedings th usenix security symposium august 

john douceur 
sybil attack 
proceedings st international peer peer systems workshop iptps march 

brian levine michael reiter wang matthew wright 
timing attacks low latency mix systems 
ari juels editor proceedings financial cryptography fc 
springer verlag lncs february 

nick mathewson roger dingledine 
practical traffic analysis extending resisting statistical disclosure 
proceedings privacy enhancing technologies workshop pet volume lncs may 

ulf ller lance cottrell peter len 
mixmaster protocol version 
draft july 
www com mixmaster spec txt 

michael reiter rubin 
crowds anonymity web transactions 
acm transactions information system security june 

andrei serjantov george danezis 
information theoretic metric anonymity 
paul syverson roger dingledine editors privacy enhancing technologies lncs san francisco ca april 
