manuscript 
inserted editor model transformations tool integration laurence department computer science king college london strand london wc ls 
mail laurie net june model transformations increasingly recognised significant importance areas software development integration 
attention model transformations particularly focused omg queries views transformations qvt request proposals rfp 
motivate need dedicated approaches model transformations particularly data involved tool integration outline challenges involved number technologies techniques allow construction flexible powerful practical model transformations 
key words modelling transformations model transformations qvt tool integration years movement developing software models increased rapidly 
organizations increasingly opportunity move intellectual property business logic source code models allowing focus important aspects systems traditionally buried lost lange resulting standard programming languages 
models opened new possibilities creating analyzing manipulating systems various types tools 
increasing availability tools operate models raised new challenge individual tools tend operate models conform internal format meaning models created tool rarely easily tools 
users locked models single tool entire life cycle opportunity harness power individual abilities different tools part tool chain far largely missed 
model transformations key solving fundamental problem goes heart omg model driven architecture mda initiative 
existence practical model transformation technologies free users tool lock importantly facilitate seamless transfer models specialized tools development life cycle 
simple definition model transformation program mutates model words akin compiler 
course simple description accurately described model transformations faced relatively simple uninteresting problem solve 
reality model transformations required perform far complex tasks example integrating tools frequently required initial transformation model tool subsequent changes propagated manner 
furthermore standard programming languages libraries write simple model transformations challenging tedious error prone task 
model transformations need specialised support aspects order realise full potential user transformation developer 
aim give reader feel problem model transformations meant solve particular emphasis applicability data involved tool integration background scope model transformations including related qvt rfp number technologies techniques allow construction flexible powerful practical model transformations aid tool integration development life cycle 
laurence simple example shows metamodels similar modelling languages examples 
interests brevity formally define semantics languages assuming equivalent elements modelling language semantics stated 
modelling language ml supports directed associations package inheritance mechanism structuring models see example modelling language package inheritance 
purposes example package inherits package considered posses copy elements shows modelling language ml provide support package inheritance allows undirected associations 
large overlap metamodels models instances metamodel models conflicting features modelling language directly interchangeable 
representative real world modelling tools store manipulate models marginally different fashions preventing users interchanging models 
shows typical example package inheritance simple model different aspects separated separate packages aid comprehension 
package inherits relevant sub packages create package contains relevant parts model 
model package inheritance instance ml modelling language 
tool understands ml modelling language able interpret correctly package inheritance involved 
intuitively solution simple ml version model relevant model elements copied inherited packages 
shows model created hand redundant packages removed diagram interests brevity 
tedious task problem automate process 
attempt model transformations standard programming language 
relatively completely na attempt expressed fairly high level pseudo code look follows func transform element ml element element type element ml package package elements package element element elements package elements append transform package element backslash line indicates single logical line split multiple physical lines 
ml modelling language 
ml modelling language 
fig 
language metamodels 
model package inheritance 
model package inheritance 
fig 
example models 
parents temp element parents copy parent parents temp parent element parent elements package elements append transform parent element parents temp extend parent element parents return new package element name package elements elif type element ml class parents parent element parents parents append transform parent return new ml class element name parents elif type element ml association return new ml association element name transform element transform element true false func main model seq ml element void model element model model append transform element model transformations tool integration essential idea transform element instance ml language counterpart ml language elements inherited packages bought child packages package inheritance disappears 
approach immediate closely related problems elements easily duplicated transformation class specialized classes copies appear target model cycles model created associations classes cause transformation loop terminating 
concrete problem transformation squeezed function software engineering principles 
order overcome flaws relatively simple solution add increasing amounts machinery keep track elements transformed 
space permit detailed example necessary machinery aspects combined necessity machinery aspect transformation quickly lead substance underlying transformation swamped 
leads starting assumption model transformation model transformations sensibly written standard programming language object orientated oo 
enabling tool chain previous section motivated need model transformations exploring need perform transformation models stored different tools difficulties trying write transformation standard programming language 
classify transformation example unidirectional stateless transformation 
unidirectional transform instance ml instance ml 
stateless running transformation source model changed results creation entirely new target model exact duplicate exists 
transformation practical integrating different tools tackles part problem 
scenario tools specialize different aspects modelling development life cycle uml modelling tool ut java modelling tool jt 
scenario model just transformed different tools may edited multiple times tool 
example initial model may created ut transformed subsequently edited jt high level architectural changes applied ut expects see reflected jt 
similar linear scenario involving incremental model development explained becker 
general aim underlying scenarios allow user leverage different tools varying points development life cycle 
important note scenario deliberately limited compared general case 
calls changes ut propagated jt vice versa 
solution general case utilize bidirectional transformation propagate relevant changes jt ut true bidirectional transformations number challenges tackled current model transformation technologies consequently largely ignored challenges listed apply equally bidirectional transformations 
significant challenge raised scenario seen 
imagine model instance ml modelling language tool mt transform instance ml modelling language tool mt 
result transformation ml ml shown contains directed associations 
user changes model mt result model mt 
example previous section simply wipe mt create entirely fresh model 
acceptable limited circumstances added extra detail model mt wiped ut jt example 
sophisticated approach transformation attempt perform minimum alteration target model propagate changes leaving intact 
order transformation needs recognise elements model mt relate mt change appropriately 
initially fairly trivial example employee class obviously shared models 
consider bidirectional association mt non trivially related directed associations mt transformation recognise relationship 
discover mt model pair directed associations names appear correspond bidirectional association mt correspondences may pure coincidence user free name associations wish lead incorrect change propagation 
fact matter clever calculation avoid problems significant problem deletion element mt result appropriate deletion elements mt transformation record elements mt relate mt unable perform deletion reliably 
see problems problem change propagation harder imagined 
laurence personnel package ml language 
personnel package ml language 
fig 
models different types associations 
minimum information needs kept elements related transformation typically called tracing information 
classify transformation record utilise information propagate changes persistent transformation 
part required solution shall seen section 
method model transformations examples just simple method model transformations discerned significantly aid understanding general problem allows comparison different approaches describing approach fits method 
shall seen chapter model transformations come various different flavours method intentionally high level applicable majority practical approaches 
example simplistic approach encoded oo language method apply entire program rule approach method seen apply rule 
example intended help visualise parts 
searching model identify appropriate elements transform 

transforming elements 

retention manner tracing information recording elements model related transformation elements models 

detecting updates model involved transformation performing relevant operations transformations affected models 
whilst minimal approach model transformations need perform parts complete approach capable performing parts model transformation technology limits merely model model fails tackle problems relevant tool integration outlined section 
method comprises main parts necessary initial model 
identifying elements 
transforming 
creating tracing information 
altering model 
propagating changes 
fig 
transforming model 
parts correspond distinct phases execution 
parts partially intertwined surprising parts particular implemented separate phases required information part determined happens part 
background program transformations transformations computing context far new idea cropping contexts formal ways 
example compilers effectively program transformations hopefully preserve semantics input source code transform output binary 
literature available specific types program transformation compilation optimization abound practical guides classic dragon book theoretical validity applying transformations gives condensed history compiler transformation proofs presenting state art field 
program transformations typically unidirectional stateless transformations deal restricted subject area 
model transformations encompass wider scope see 
note due extreme difficulties involved rare sort transformation formally proved preserving semantics 
model transformations tool integration xslt xslt xml transformation technology gained significant amount attention past years 
xslt initially promising candidate realise model transformations representing models xml common exercise 
noted xslt highly adequate simple transformations intended recall xsl originally intended just xml html transformations serious shortcomings advanced transformations 
interestingly took years formal proof constructed xslt turing complete relatively timing need existence proof may suggest practical usages quickly hits limits sorts transformations xslt naturally express 
xslt lowest level model transformation framework citing general readability issues specifics lack acceptable error reporting 
final issue expressing model transformations xslt ideal xml documents represented tree structure models general case naturally representable graphs 
graphs represented trees link nodes difference representation lead unnatural representation types model transformations 
graph transformations particular type transformation gained lot traction theoretical circles late graph transformations see 
note term graph transformation potentially misleading context refer particular category rule transformations typically represented diagrammatically various types transformations operate graphs termed graph transformations 
graph transformations number attractive theoretical properties purposes fact models represented graphs particularly appealing 
early involving graph transformation models largely centred defining semantics different modelling diagram types continuing gogolla 
ster defined general model transformation approach graph transformation underlying mechanism allowing draw properties graph transformations model transformation context 
heckel see www com turing utm htm turing machine implementation proof 
continued reasoning confluence typed attributed graphs 
proposed model transformation approaches essentially simplified views graph transformations agrawal mature great system 
graph transformations prove interesting properties transformations fairly small minority useful transformations currently amenable analysis reducing usefulness analysis practical situations 
graph transformation approaches detailed section give little attention mechanisms structuring graph transformation systems despite fact large graph transformation systems appear need mechanisms large procedural programs see example structuring mechanism uml packages graph transformation system 
partly lack structuring mechanisms solutions graph transformation paradigm perceived users complex seen relatively little real world usage 
graph transformation systems support change propagation becker provide slightly limited support important aspect model transformations 
approaches various stand works published model transformations covered 
works area lano evans define transformations respect underlying semantics class diagrams 
cases transformations directly executable seen specifying model transformations 
group kent refine class diagrams ocl transformation specifications 
concentrated executability whittle logic programming language maude execute verify simple transformations 
qvt model transformations vital factor realization omg mda vision idea progressively facilitating software development models 
implicit vision models need manipulated various different forms 
example transforming models representing technology represent different technologies abstracting refining models merging models 
request proposals rfp issued omg mof queries laurence views transformations qvt seek standard way performing model transformations 
initial submissions rfp time initial writing remain 
intended enumerate individual submissions see gardner czarnecki propose detailed classification scheme transformation approaches 
sections detail important points extreme qvt spectrum briefly enumerating related approaches fall 
trl transformation rule language trl language essence standard rule imperative language specialized uml model transformations 
comes forms concepts transformation rule raised class status information recorded new class elements additional purposes create tracing information extra syntax provided accessing stereotype uml model element 
rules consist crude signature comprising types source target model elements imperative body 
syntax semantics actions essentially object constraint language ocl augmented side effects small handful necessary control structures 
benefit approach relative familiarity users knowledge largely imperative solutions traditionally lead efficient implementations 
trl capable expressing unidirectional stateless transformations due imperative nature rule actions 
language constraint solving model transformation system aiming declaratively specify persistent bidirectional transformations 
program consists number ocl constraints model elements involved transformation 
declarative approach taken aims rid implementer tedious verbose book keeping inherent imperative approaches 
relationship models need stated terms inputs outputs transformation potentially bi directional change propagation handled automatically change model cause constraints fail bringing engine life 
approach severe disadvantages practical standpoint 
example places burden user ensure constraints specified completely describe transformation failure result system produces arbitrary results runs memory attempts enumerate matching values 
due complex interaction constraints arguably easier constraint solving situation create non terminating program paradigms 
significantly constraint solving systems easily lead solutions take potentially unbounded time execute 
constraint programming detailed bart challenging relatively unexplored area research despite existing decades shown potential small tightly defined areas little precedent task order complexity model transformations 
approaches dstc qvt submission declarative solution specify unidirectional persistent transformations unclear tracing information creates propagating changes 
qvt partners author member submission hybrid solution offers declarative specifications imperative implementations 
solution automatically create tracing information largely imperative nature implementations complicates change propagation see suggested solution 
zivin atl wraps imperative bodies inside declarative shells specify unidirectional transformations imperative aspects important hybrid approaches qvt partners 
summary existing approaches majority current model transformations categorised declarative 
result simple observation imperative model transformation approach trl explicitly creates new elements target model effectively rules ability propagate changes 
explicitly creating altering elements declarative solutions assert existence state 
assertion existence element element doesn exist created engine existing element left importantly duplicates created situation alterations elements performed similar manner 
method works initial transformations subsequent updates transformations viewpoint discernible difference empty target model contains elements previous transformation 
point important note text uses declarative imperative suggestion fully declarative solution capable providing practical solution persistent model transformations fact case 
aspect solution needs declarative deals relationship elements model transformations tool integration source target models 
solutions currently capable doing entire computation specified declaratively 
despite fact details computation leads declaration relationship source target model elements irrelevant declaration 
technologies techniques model transformations previous section concluded observation current model transformation approaches classified declarative 
purpose develop appropriate technologies performing model transformations largely imperative framework change propagation feasible 
reason complicated simple wish explore untried approach model transformations stages exciting area exploring approaches possible best way discover appropriate approaches 
section presents draws qvt partners submission implemented partly partly converge programming language developed provide flexible workbench experimentation sort 
technologies techniques section provide basis creating unidirectional persistent transformations 
motivation explanation individual technologies techniques section presents example transformation shows different parts form coherent 
imperative language backtracking converge imperative language syntactically similar python semantics heavily inspired icon 
essence strongly dynamically typed expression imperative language 
chief problems standard imperative approaches comes identifying elements 
frequently arbitrary levels backtracking required identification generally required model element access storage minimised due relative expensive operations terms time space particularly model repository 
standard imperative approaches typically faces prohibitively large amounts book keeping implement necessary backtracking see section problem minimizing model element access considered 
converge solves utilizing icon functions known generators icon produce return value multiple invocations reduce book keeping necessary iterating models provide lazy evaluation model elements allow trivial expression limited form automatic backtracking 
simple example important feature follows 
imagine method classes successively generates classes model method leaf class succeeds generalized classes 
converge print non leaf classes follows sys writeln model get classes model leaf class essence operator joins expressions allow backtracking happen 
scenario get classes method generates class assigns theis leaf class method fails backtracking occurs classes resumed generate class 
succeeds class tested see 
control backtracks generator get classes call value passed sys writeln method print class screen 
statement continues resuming get classes generator exhausted 
extensible language programming languages model transformation languages fixed sense add feature set 
leads creation small domain specific languages fared better specific features embedded general purpose language domain specific embedded language 
stated earlier consensus best approach model transformations approach satisfactorily cover possibilities prudent build model transformation languages capable arbitrarily extended user 
converge allows compile time meta programming heavily influenced template haskell 
seen example page allows arbitrary transformation approaches tried common framework separately conjunction 
rule approach reasons example section considered failure tight coupling different sub parts transformation encoded multiple statements 
moving code separate functions require altering central piece code new concept introduced transformation 
practical approach taken laurence rule languages elan allow define multiple independent rules form guard action 
runtime rules fired depending guard traditional languages name rule 
problem encountered rule approaches piece data match rules 
point rules relative precedences order definition 
transformations request transformation chunk data knowing possible rules prefer executed 
assign names rules allow rules explicitly invoked caveat data passed rule satisfy guard 
having named rules opens potential interesting approaches transformation composition combining individual model transformations 
approaches discussed qvt partners serious attempt composing transformations means operators 
composition raises number interesting questions particularly merge results model transformations qvt composition 
hitherto little exploration consequences 
aspect orientation community bergmans aksit offer pointers scalable approaches composition 
pattern matching useful technique specifying transformations patterns 
patterns context seen analogous textual regular expressions perl patterns biggerstaff concise way expressing types constraints items generally specific pattern language 
patterns novel technique proved field practical means expressing transformations 
may unfamiliar concept readers simple example pattern language expressed default comes converge package name parents set package name personnel particular model pattern simple object pattern match successfully instance package model element 
name package value assigned variable object pattern contains set pattern parents slot 
match successfully set contains minimum object instance package model element literal name personnel elements set assigned words pattern match package generalizes personnel 
compare far verbose imperative code ocl constraints required specify pattern states 
pattern languages typically main problems due trade brevity expressivity generally computationally complete different types pattern languages useful different circumstances 
problem relatively easily solved arbitrary computations host language patterns 
second problem solved making particular pattern language fundamental part host language utilizing support creation allow users provide pattern languages appropriate 
change propagation practical approaches change propagation vital success model transformations particularly area tool integration 
approaches currently serious effort tackle problem 
example braun suggest bijective transformations sufficient solve problem limited practical useful transformations ml ml transformation possibly injective bijective 
similarly simply creating tracing information trl guarantee ability propagate changes 
approach developed allows creation unidirectional persistent transformations algorithm capable propagating simple types change 
change propagation inherently difficult area particularly corner cases usually find examples cause algorithm produce sub optimal results 
challenge provide solution works common scenarios 
essence approach combination tracing information calculation unique identifiers determine target elements relate source elements 
tracing information automatically created stored utilizing fact transformation rules classes instances serialize manner suitable particular environment operating 
important tools transformations may required persist memory points efficiency reasons serialized disk transferred different machine 
elements output model assigned identifiers identifiers set objects source model transformed calculation unchanged model return identical result 
example source element identifier referenced element model transformations tool integration identifier generate output element identifier form scheme allows source element involved different parts transformation whilst leading unique output identifier situation 
example transformation referenced generate identifier form note necessary convention ensuring unique identifiers certain contexts loop 
change propagated source target model basic algorithm follows 
transformation effectively rerun scratch unique identifiers generated source model elements part declarative specification existence state target model elements 
time new set tracing information created 
new tracing information compared old target model element referenced old tracing information new deleted 
precise effect deletion determined particular change propagation algorithm currently fairly simplistic element pointers elements removed 
changes propagated successfully certain changes source model lead excessively inefficient propagation stage ill formed target model currently correctly detected detection appears possible feasible 
direct analogy source code revision systems cvs drawn 
systems vast majority changes users files integrate repository correctly 
situations system unable automatically reconcile overlapping changes developers request users aid resolving conflict 
similar need model transformations currently explored 
example example simple transformation rule transforms ml packages ml packages complex aspect transformation section converge 
example shows technologies techniques previous sections working conjunction 
import class package package transformation class transformation source pattern ml package name parents elements target pattern ml package name elements ne func target ne parent parent transform element parent elements ne assert existence element full explanation quite involved aspects particular need explanation 
converge python style syntax blocks synonymous indentation 
package contains number transformation related components imported wholesale transformation constitute model transformations completely separate package created implemented partially entirely different required transformation features built directly language 
operator introduces macro splice call means named function called compile time fields source pattern target pattern target passed dictionary final parameter 
fields values syntax tree text source target patterns associated source functions form core generated routines identify create alter elements 
having analysed source target patterns free bound variables triangular brackets variables transformation function transparently alters target function variable source pattern function final value ne variable positioned correctly target pattern 
result macro splice transform fields compile time efficient transformation rule 
generated code larger considerably complex relatively simple code 
complexity due resulting transformation persistent capable propagating changes 
machinery responsible generated source target patterns largely invisible user 
user writing code standard imperative language adhere certain rules example seen target function call existence ensures explicitly altering ne 
importantly user explicitly alter target model 
final piece puzzle keyword signifies package package class instance transformation class class side effect simple automatically register transformation rule engine 
transform function called relevant transformation rules called overlaps rule guards resolved favour rule definition order 
familiar template haskell equivalent putting values operators 
laurence summary example shows transformation imperative language utilizing model transformations allows persistent transformations rule style created forcing relations models specified declaratively rest computation 
transformations sort fulfil requirements tool integration outlined section 
stages creating appropriate technologies model transformations 
far early decisively conclude different approaches promising 
main challenges community simply continue exploring different approaches model transformations 
attempted aid exploring imperative solution allows declarations models 
challenges remain example useful types transformation composition 
frequently changes persistent transformation need propagated ensure consistent models efficient execution possible minimise proportion transformation rerun 
appropriate algorithms change propagation resolve conflicts 
partial answers questions remain largely unanswered 
terms particular approach main challenges remain 
continue production quality implementation 
currently bootstrap version converge finished allows reasonable experimentation slow practical purposes 
faster scalable version nearing completion 
allow completion bootstrap compiler currently facilities hard coded compiler calling user code 
second main challenge continue writing transformations noting problems extending modifying approach appropriate 
model transformations inherently practical task real progress coming practical experience 
overview model transformations outlined play critical le enabling tool integration 
persistent model transformations shown allow advanced usage scenarios currently largely unfeasible 
review current model transformation approaches identified common weaknesses unexplored avenues 
identified new approach model transformations capable providing flexible efficient practical platform creating model transformations facilitate advanced tool integration 
utilising imperative paradigm capable backtracking allowing user specified transformation handle declarative aspects demonstrated approach provides solid framework carry continued experimentation practical means performing model transformations circumstances necessarily need considered languages initial design 
particularly tony clark advice encouragement past years reading early draft provided insightful comments earlier draft 
anonymous referees comments helped improve presentation markedly 
research partly funded tata consultancy services 

agrawal shi 
graph transformations domain specific models 
technical report institute software integrated systems vanderbilt university november 

aho sethi ullman 
compilers principles techniques tools 
addison wesley 

kent 
relational approach defining transformations metamodel 

quel hussmann cook editors uml unified modeling language th international conference pages 
springer verlag 

andries engels habel hoffmann kreowski plump sch rr taentzer 
graph transformation specification programming 
technical report university bremen 

clark evans kent sammut 
unambiguous uml submission uml infrastructure rfp september 
omg document ad 

clark reddy venkatesh 
pattern model driven approach model transformations november 
metamodelling mda 

bart constraint programming 
proceedings pages june 

becker haase westfechtel 
model posteriori integration engineering tools incremental development processes 

appear 

bergmans aksit 
deal encapsulation aspect orientation 
proceedings oopsla workshop advanced separation concerns object oriented systems october 

neven 
formal model expressive fragment xslt 
information systems 

zivin dup 
experiments atl model transformation language transforming xslt xquery 
model transformations tool integration nd oopsla workshop generative techniques context model driven architecture october 

zivin rard 
preliminary identification mda components 
generative techniques context model driven architecture nov 

biggerstaff 
pattern matching program generation user manual 
technical report tr microsoft research 

borovansk kirchner kirchner 
moreau vittek 
elan logical framework computational systems 
proc 
international workshop rewriting logic 

braun 
transforming object oriented models 
international workshop graph transformation visual modeling techniques 

clark evans kent 
initial submission omg rfp ad uml infrastructure ad uml ocl 

sun 
queries views transformations models mof ocl patterns august 
omg document ad 

czarnecki eisenecker 
generative programming 
addison wesley 

czarnecki 
classification model transformation approaches 
van emde boas agrawal zivin editors second workshop generative techniques context model driven architecture october 

dstc ibm 
mof query views transformations revised submission august 
omg document ad 

evans 
reasoning uml class diagrams 
second ieee workshop industrial strength formal specification techniques october 

gardner griffin koehler hauser 
query views transformations submissions recommendations final standard august 
omg document ad 

gerber lawley raymond steel wood 
transformation missing link mda 
corradini ehrig 
kreowski rozenberg editors graph transformation international conference pages october 

gogolla 
graph transformations uml metamodel 
broder corradini gorrieri heckel vaccaro wells editors icalp workshop graph transformations visual modeling techniques pages 
carleton scientific 

gogolla parisi presicce 
state diagrams uml formal semantics graph transformations 
broy coleman maibaum rumpe editors proceedings workshop precise semantics modeling techniques 
technische universit nchen tum 

gogolla 
integrated graph semantics uml 
bottoni minas editors proc 
int 
workshop graph transformation visual modeling techniques gt vmt volume electronic notes theoretical computer science 

griswold griswold 
icon programming language 
peer peer communications third edition 

heckel ster taentzer 
confluence typed attributed graph transformation systems 
corradini 
kreowski editors proceedings international conference graph transformation pages 
springer verlag october 

hudak 
building domain specific embedded languages 
acm computing surveys december 


proof turing completeness xslt xquery 
technical report sfb universit bingen june 

ster heckel engels 
defining validating transformations uml models 
ieee symposium visual languages formal methods october 

jones wyk 
proving correctness compiler optimizations temporal logic 
proc 
th acm symposium principles programming languages pages 
association computing machinery 

lano 
uml refinement abstraction transformations 
second workshop rigorous object oriented methods room bradford may 


model reuse metamodel transformations 
editor volume lecture notes computer science 
springer 

object management group 
request proposal mof query views transformations rfp 
omg document ad 

object constraint language specification 
omg document ad 


response mof query views transformations rfp august 
omg document ad 

zivin guillaume 
general framework xslt model transformations 
italy april 

qvt partners 
revised submission qvt rfp august 
omg document ad 

sch rr winter 
uml packages programmed graph rewriting systems 
proc 
theory application graph transformations november 


combining generative graph transformation techniques model transformation effective alliance 
generative techniques context mda october 

sheard jones 
template meta programming haskell 
proceedings haskell workshop 
acm 

sutherland 
sketchpad man machine graphical communication system 
proceedings spring joint computer conference pages 

clark 
issues surrounding model consistency qvt 
technical report tr department computer science king college london december 
laurence 
clark 
model transformations converge october 
workshop software model engineering 

van rossum 
python manual 
www python org doc ref ref html 


uml action semantics model transformation systems 



xsl transformations xslt 
www org tr xslt 

wall christiansen orwant 
programming perl 
reilly third edition 

whittle 
transformations software modeling languages automating transformations uml 

quel hussmann cook editors uml unified modeling language th international conference pages 
springer verlag 


graphical transformation language mda 
nd oopsla workshop generative techniques context model driven architecture october 
