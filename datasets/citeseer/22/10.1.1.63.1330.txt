tree assisted gossiping overlay video distribution ming zhou liu school computing science simon fraser university burnaby british columbia canada cs sfu ca 
readily deployable nature broad applications digital entertainment video streaming overlay networks received attention 
tree topology advocated due scalability suffers discontinuous playback highly dynamic network environments 
demand streaming asynchronicity client requests aggravates problem 
hand gossip protocols random message dissemination robust fail meet real time constraints streaming applications 
propose tag tree assisted gossip protocol addresses issues 
tag adopts tree structure time indexing accommodate asynchronous requests efficient pull gossip algorithm mitigate impact network dynamicity 
seamlessly integrates approaches realizes best features low delay regular tree topology robust delivery smart switching multiple paths making effective available bandwidth network 
evaluate performance tag various settings results demonstrate quite robust presence local global bandwidth fluctuations 
compared pure tree overlay vod system achieves lower stable segment missing rates highly dynamic network conditions 
keywords overlay networks video demand multicast tree gossip protocol contact author tel fax 
research supported canadian nserc discovery sfu president research 

application layer overlays emerged readily deployable promising alternative ip multicast multi point video distribution 
overlay network built unicast tunnels cooperative nodes certain buffering capabilities 
overlay node acts application layer proxy caches certain amount data receives data relayed active nodes overlay realize multicasting 
application layer solution largely avoids known practical political issues ip multicast deployment 
existing overlay construction algorithms tree structure advocated data delivering originates works efficiently ip multicast 
application level overlay dynamic nodes suffers severe problems 
particular bandwidth fluctuation failure node close root may cause buffer underflow large population downstream nodes situations uncommon overlay node join leave 
demand streaming asynchronicity client requests aggravates problems 
opposite tree protocol gossip protocols enable random data dissemination support regular overlay structure 
typical gossip process node randomly selects subset target nodes deliver available data segments receives segments pushed nodes 
known gossip algorithms achieve highly robust data distribution 
straightforward apply gossiping demand streaming fails achieve timely delivery 
furthermore push gossip cause excessive data duplications particularly severe high bandwidth videos 
tag tree assisted gossip protocol demand media streaming 
tag constructs maintains overlays tree overlay gossip overlay collectively deliver video streams clients 
design intelligent efficient overlay construction data delivering algorithms hybrid system 
seamlessly integrate distinct approaches realize best features low delay regular tree topology robust delivery smart switching multiple paths making effective available bandwidth network 
timing listing accommodates asynchronous requests demand streaming system 
substitute push delivery pull process greatly eliminates massive redundancy due random 
enhance tag system introducing avl tree indexing facilitates non sequential accesses 
evaluate performance tag various network configurations 
results demonstrate highly robust facing local global bandwidth fluctuations 
compared pure tree overlay vod system achieves lower stable segment missing rates dynamic network environments 
control overhead kept low levels suggesting tag scales large overlay networks 
rest organized follows 
overview tag section detailed protocol operations section 
section enhance tag introducing avl tree indexing 
performance tag evaluated section 
section concludes offers research directions 

overview tag tag system consists content server stores repository media files set autonomous nodes join leave system 
assume address content server publicly available advertising protocol sap node retrieve media stream server scalable solution expected limited server resources 
node tag system contributes certain buffer space caches received data node node retrieve data server active nodes expected data buffers 

tree assisted gossip overlay 
tag adopts tree assisted gossip protocol organize nodes locate partners cached data schedule data fetching 
fig 
shows overlay structure tree organizes nodes nodes form gossip partners exchange data 
divide buffer node parts forward buffer size backward buffer size node stores data segments pre fetched parent partners forward buffer caches played segments backward buffer supply children partners requests 
show example gossip partnership node fig 
stress salient features hybrid design adaptive receiver intelligently switch multiple suppliers parent gossip partners fanout constraint tree nodes relaxed efficient availability different paths nodes explored robust bandwidth fluctuation node failure particular path impact 
experimental results suggest features enabled gossip algorithm tree structure indispensable meet real time constraints 
straightforward employ tree structure gossip algorithm demand streaming mention integrating 
challenges addressed particular 
newly joined node inserted tree assigned gossip partners 
note nodes asynchronous join times limited buffer spaces 
similar issues addressed node fail leave system 

expected data segment fetch 
multiple suppliers non uniform bandwidth data availability playback deadline met 
detail tag operations sections offer efficient solutions issues hybrid system 

protocol operations ease exposition focus distribution single video stream solution easily extended multi stream case 
assume stream divided equal sized data segments unit playback time 
buffer size measured total number segments accommodate 
assume segment sequence number video playback node starts segment 
extensions support non sequential accesses addressed section 
timing condition list due data asynchronicity demand streaming parent child relationship gossip partnership directly set nodes outbound bandwidth constraint 
derive conditions nodes form parent child gossip relation serve foundation overlay construction maintenance 
fig 
depicts snapshot buffers nodes respectively time suppose currently played segment node joins system time maximum sequence number data segments buffer node tj bj ti bi ti minimum bi bj data segment sequence number 
buffer status nodes time fig 
necessary condition parent node equivalent ti tj tj bj ti join time node earlier node difference draining time backward buffer node opposite parent child relation data delivery bidirectional gossip partnership 
fig 
node forward data node condition met basically states part buffer backward buffer plus forward buffer node overlap forward buffer node similarly condition node forward data combining eq 
follows bi ti bi tj bj ti efficiently examine timing conditions tag link active nodes timing list sorted joining times 
list node predecessor node node joined system immediately node accordingly referred successor 
bidirectional link added predecessor successor 
fig 
depicts timing list structure nodes 

illustration index list structure dashed line facilitates construction delivery tree solid line gossip partnerships 
note construct maintain timing list content server needs keep track latest joined node 
bootstrapping stage content server node 
newly joined node contacts content server redirects node existing latest joined node predecessor successor relation formed detailed 
construction tag overlay table 
fields node overlay construction 
parent parent node delivery tree list children delivery tree predecessor predecessor timing list pre predecessor predecessor predecessor timing list successor successor timing list suc successor successor successor timing list list gossip partners tag system constructed nodes joining overlay asynchronously 
facilitate join process node maintains set status information shown tab new node performs join operations node sends message join content server content server records join time node redirects nodes latest joined node far immediate node node sets node successor node sets node predecessor 
predecessor predecessor successor successor relation set node predecessor node node invokes parent search partner search algorithm locate parent gossip partners sets corresponding relations 
algorithms rely timing list check timing conditions shown figs 
respectively 
traverse timing list staring predecessor node test condition encountered node second node violating condition nodes visited nodes satisfy condition select maximum bandwidth node parent 

parent search algorithm node traverse timing list staring predecessor node test condition encountered node second node violating condition nodes visited nodes satisfy condition randomly select nodes gossip partners 

gossip partner search algorithm node search algorithms number nodes involved bounded show experiments relatively small say cases 
number gossip partners important factor impact investigated experiments 
note node linked predecessor predecessor successor successor timing list helps recovering node failures 
predecessor list head content server successor list tail latest joined node special cases predecessor successor set head tail respectively 
maintenance tag overlay heartbeat protocol maintain parent child partner relationships 
node periodically sends echo message related nodes parent children partners successor predecessor index list 
leave node due intended departure abrupt failure easily detected 
failure recover operations executed affected nodes predecessor successor predecessor successor failed node contact form direct predecessor successor relationship viable node records pre predecessor suc successor parent gossip partners removes failed node children list gossip partner list children child invokes parent search algorithm locate new parent 
starting node predecessor child pre predecessor predecessor just failed node 
dynamic network operations periodically invoked node refine parent child relationship gossip partnership 
data delivering tag data segment available multiple suppliers commonly push mechanism data delivering may cause excessive redundancy 
resort pull mechanism node data available sends data offer message target node child gossip partner 
target node send back data request decides fetch data segment 

fields message data offer 
fields included data offer shown fig 

note sizes relatively small availability segment indicated bit 
reduce overhead data offer request piggyback echo messages requests set segments supplier batched 
node collect set data offers parent gossip partners exchange period key issue decide unavailable data segments fetched node 
constraints process data segment fetched playback deadline number data segment fetched partner delivery capability outbound bandwidth 
designed heuristic algorithm follows constraints tries maximize success ratio segment delivering 
starts examining segment earliest deadline second earliest 
case multiple suppliers available segment algorithm selects supplier offers number unavailable data segments 
example suppose segment suppliers offers unavailable segments unavailable segment expected segment selected flexible supplying data potentially fetch unavailable segments needed 
addition fewer suppliers imply segment relatively new gossiped soon possible minimize delay 

enhancement avl tree indexing basic tag system assume sequential accesses starts playback initial segment stream 
implementing vcr operations forward backward random seek non sequential access arbitrary starting position necessary 
section effective enhancement basic tag system support non sequential accesses 
suppose new node joins overlay time playback offset time node expects play segment conditions form parent children gossip partners hold replace naive solution search timing list candidates satisfying revised condition 
unfortunately worse case may result traverse nodes sorted timing list yielding unacceptably high cost 
earlier studies issue suggested centralized server maintains global tree structure timing data delivering 
solution easy implement scalable delivery tree ideal indexing structure height unbounded 
introduce avl index tree assist search timing list 
avl tree binary search tree balance property node tree height left right sub tree differ 
known avl tree nodes height satisfies log cost locating proper insertion point log implying joining failure recovery costs greatly reduced non sequential accesses 
worth noting avl indexing tree complement timing list independent data delivery tree list construction maintenance data scheduling dissemination algorithms remain unchanged 
detailed operations avl index tree non sequential accesses 
tab 
lists related information kept node 
table 
fields node avl indexing tree 
parent avl tree left child avl tree right child avl tree height left subtree avl tree height right subtree avl tree virtual join time value ti oi node parent parent avl tree joining operations playback offset avl index tree constructed growth timing list 
newly joined node playback offset operations performed node sends message join content server content server records virtual join time ti node redirects nodes root avl index tree virtual join time node node redirects left child avl index tree right child 
operations repeated corresponding child empty node inserted position leaf node inserted left child predecessor timing list successor 
similar operations new node join timing list data delivery tree performed steps section insert position node sets height sends message 
receiving report parent resets depending branch report comes calculate height max 
height changed node reports root avl tree reached detected update height subtree rotation performed root avl updated reported content server 
height avl tree logn cost joining operation bounded logn 
failure recovery assume node maintains relation heartbeat protocol failure detected nodes 
recovery operations performed ease exposition denote failed node node predecessor successor timing list respectively removes children list respectively mark links broken respectively send probe forwarded root avl tree root link marked broken encountered assume wp node traversed probe ws probe 
different cases addressed case probes encountering broken link 
prove see appendix wp ws respectively avl tree 
furthermore leaf node node right child avl tree 
operations performed connected right child sets wp ws sets wp case probe stops encountering broken link stops reaching root probe sent branch 
prove see appendix 
child directly connected substitute failed node case probe encounters broken link 
prove see appendix case leaf node avl tree operations needed report tree height new necessary perform re balancing operations step joining process 
timing list recovered steps described section fig 
shows example recovery process failed node 
suppose timing list predecessor node successor node 
avl tree construction algorithm respectively left subtree right subtree node 
step recovery algorithm nodes probe avl root nodes wp ws respectively failed node 
node serves substitute node fig 
double rotation performed re balance avl index tree fig 

avl tree node failed avl tree node substitution avl tree rebalancing 
illustration failure recovery failure recovery case 

performance evaluation evaluate performance tag various network settings focus important measures control overhead streaming quality sensitivity parameter settings 
compare tag overlay demand systems particular ostream pure tree system 
system configurations specified results section default configurations similar results observed configurations impact key parameters investigated section 
content server videos streaming kbps rate hour length 
length segment time unit second buffer node accommodate segments video stream equally split forward backward buffers 
size candidate set parent gossip partner search node gossip partners 
underlying network topology generated gt itm package emulates hierarchical structure internet composing interconnected transit stub domains 
network topology results consists transit domains transit nodes message transit node connected stub domains stub nodes 
total number nodes 
assume node represents local area network plenty bandwidth routing nodes network follows shortest path 
initial bandwidth assigned links follows mbps stub nodes mbps stub node transit node mbps transit nodes 
inject cross traffic experiments emulate dynamic network conditions 
mitigate randomness result section average runs experiment 
overhead join failure recovery consider control overhead tag particular overhead node joining leaving failing dynamic overlay 
interested local global overheads adopt measures maximum node cost represents maximum possible overhead node cost represents total control overhead system operation 
costs measured terms number messages exchanged operation reflecting bandwidth consumption execution time 
fig 
shows maximum node cost joining operation variations tag basic tag sequential accesses tag basic tag non sequential access tag tag non sequential accesses avl indexing tag na 
assume content server initial node system nodes join system poisson arrival inter arrival time seconds 
tag naive timing list searching algorithm employed 
tag tag tag na number active nodes message tag tag tag na number active nodes 
maximum node cost node join 

system cost node join 
intuitively joining node incurs maximum node cost mainly joining timing list initiating search parent gossip partners 
shown fig 
cost monotonically increases increasing overlay size initial part constant overlay size greater nodes 
tag na incurs extra overhead maintain avl index tree maximum node cost higher 
shown fig 
join cost tag na lower tag 
cost calculated affected nodes join operation related individual node cost number affected nodes 
tag join cost linear function system size number involved nodes proportional overlay size naive searching algorithm 
tag na logarithmic function note axis fig 
log scaled suggesting joining operation avl indexing scalable cost maintaining avl tree ignored large networks 
hand tag overhead constant limited number tail nodes timing list affected 
maximum node costs costs failure recovery operation shown fig 
respectively 
general trends quite similar joining operations costs failure recovery slightly higher tag variations 
nodes affected particular children failed node re locate parents 
message tag tag tag na number active nodes es tag tag tag na number active nodes 
maximum node cost failure recovery 
cost failure recovery summary joining failure recovery operations efficient tag tag na tag suffer high cost large overlay networks 
focus performance tag tag na experiments 
smr streaming quality playback continuity critical streaming applications adopt segment missing rate smr major criterion evaluating streaming quality 
data segment considered missing available node till play time smr system average ratio missed segments participating nodes simulation time 
reflects important aspects system performance delay capacity 
comparison simulate existing demand overlay streaming system ostream network buffer settings 
ostream employs pure tree structure node caches played data relays children asynchronous playback times 
centralized directory server maintain global information overlay facilitates node join failure recovery 
detailed ostream 

streaming quality bandwidth fluctuations investigate performance tag dynamic network environments local global bandwidth fluctuations 
emulate local bandwidth fluctuations randomly inject traffic network links available bandwidth link various time total available bandwidth network remains constant base setting cross traffic 
ostream tag tag na time seconds ostream tag tag na bandwidth reduction 
quality local bandwidth fluctuations 

quality different network bandwidths 
fig 
shows segment loss rates tag ostream time 
seen loss rate tag lower ostream quite stable generally 
video decoding point view loss effectively masked interleaving error concealment techniques 
hand loss rate ostream greatly fluctuates time peak value high resulting poor video quality 
ostream relies specific tree structure streaming bandwidth reduction internal link tree especially close root result loss multiplicity problem 
known available bandwidth local links dynamically changes available bandwidth network changes time hour daily basis working sleeping hours working days weekends 
second set experiments compare performance tag ostream different global network bandwidths 
segment loss rates depicted fig 
available bandwidth network gradually reduced base setting 
surprisingly tag ostream smr increases decreasing bandwidth 
increasing rate tag generally lower ostream especially reduction 
example reduction smr ostream reached segments lost missed playback deadline smr tag close 
ostream explores available bandwidth small subset network links tree links tag effective available bandwidth paths 
addition explained segment lost high level node ostream tree lost downstream nodes 
case tag segment multiple potential suppliers 
matter fact observed data segments delivered gossip process experiments confirms intuition gossip greatly enhances robustness system 

streaming quality node failures set experiments consider dynamic node failures 
assume global bandwidth reduction focus impact node failures 
fig 
presents segment missing rates function node failure rate ostream tag tag na 
seen failed node systems stable scenario 
tag segment missing rates slightly increase increasing failure rate generally 
missing rate tag na little higher tag 
hand nodes fail segment missing rate ostream high 
smr ostream tag tag na percentage failing nodes 
segment missing rate vs node failure rate 
investigate effect random seeking key operation supporting interactive streaming 
ostream tag na random seeking implemented letting node leave system re join new playback offset 
fig 
compares streaming quality ostream tag na scenario 
obviously tree assisted gossip enables quite robust delivering structure making re seeking operation tag na smoother ostream 
nodes perform smr tag na lower ostream reached difficult mask receiver 
smr ostream tag na percentage nodes 
streaming quality function position rate 
sensitivity parameter settings set experiments study sensitivities key parameters tag system particular number gossip partners size candidate set size buffers 
fig 
depicts streaming quality function number gossip partners tag tag na different system bandwidths 
seen segment missing rate reduces increasing number gossip partners 
consistent intuition system robust increasing number suppliers 
improvement partners marginal 
computation transmission overhead maintaining large number partners excessive believe reasonable choice default setting 
similarly fig 
choose default value size candidate set parent gossip partner searching 
shown previous results default settings lead reasonably low control overhead quite streaming quality various network configurations 
smr tag bandwidth tag na bandwidth tag bandwidth tag na bandwidth number partners smr tag bandwidth tag na bandwidth tag bandwidth tag na bandwidth size partial view 
segment loss rate function 
segment loss rate function number gossip partners 
candidate set size 
regarding buffer size desirable overlay node caches video streams impractical large size video streams 
choice buffer size closely related number active nodes overlay 
shown fig 
active nodes small buffer enable reasonably streaming quality node collaborations 
considering factors set buffer size video stream size experiments sufficient achieve low segment loss rates setting computation time scheduling algorithm ms suitable real time streaming 
smr tag na overlay size tag overlay size tag na overlay size tag overlay size tag na overlay size tag overlay size normalized buffer size 
segment loss rate function buffer size different overlay sizes 
normalized buffer size buffer size video length 
tag tree assisted gossip protocol demand streaming 
tag combined best features tree structure random message dissemination low delay regular tree topology robust delivery random switching multiple paths effective available bandwidth network 
performance tag extensively evaluated various network configurations 
results demonstrated highly robust presence local global bandwidth fluctuations 
compared pure tree overlay vod system tag achieves lower stable segment missing rates highly dynamic network environments 
possible research avenues tag include optimizing scheduling algorithm overlay organization dealing effectively failure multiple related nodes incorporating advanced coding techniques layered multiple description coding 
appendix failure recovery algorithm avl index tree assume predecessor successor timing list failed node respectively wp node traversed probe ws probe 
observations case probe encountering broken links 
avl index tree wp ws respectively 
furthermore leaf node node right child avl tree 
case probe stops encountering broken link stops reaching root probe message sent branch 
case case reaches broken link 
failed node case leaf node avl tree 
proof case case obviously non empty 
avl tree construction algorithm left subtree right subtree 
follows avl index tree wp ws respectively failed node 
suppose left child virtual join time greater timing list left child successor contradicts fact successor 
leaf node node right child case assume probe reaches node broken link failed avl tree proved case 
case successor empty probe sent right branch right child avl tree nodes right subtree successor timing list 
hand suppose non empty right child 
probe reach right subtree assume root minimum subtree covers left subtree node right subtree probe reach broken link 
follows right child virtual join time greater contradicts assumption successor failed node right child 
similarly prove left child probe reaches broken link note ignore case empty proof content server persists 
summary failed node single child case case suppose non empty 
virtual join time greater non empty successor avl tree construction algorithm 
proved case non empty right child right subtree probe encounter broken link right branch contracts fact broken link encountered 
similarly prove left child leaf node 
sripanidkulchai maggs zhang feasibility supporting large scale live streaming applications dynamic application points proc 
acm sigcomm portland usa aug 
chu rao zhang case system multicast proc 
acm sigmetrics santa clara ca usa 
xu bhargava peer peer media streaming proc 
ieee icdcs wien austria jul 
banerjee bhattacharjee scalable application layer multicast proc 
acm sigcomm pittsburgh pa aug 
wang chou sripanidkulchai distributing streaming media content cooperative networking proc 
nossdav usa may 
xu bhargava promise peer peer media streaming proc 
acm multimedia mm berkeley ca nov 
yang fei proactive approach reconstructing overlay multicast tree proc 
ieee infocom hong kong mar 
deshpande bawa garcia molina streaming live media peer peer network technical report stanford university 
tran hua peer peer architecture media streaming ieee select 
areas comm vol 
jan 
castro druschel 
kermarrec nandi rowstron singh splitstream high bandwidth multicast cooperative environment proc 
acm sosp new york usa oct 
rodriguez albrecht vahdat bullet high bandwidth data dissemination overlay mesh proc 
acm sosp new york usa oct 
rejaie ortega pals peer peer adaptive layered streaming proc 
nossdav monterey ca usa jun 
banerjee bhattacharjee srinivasan resilient multicast overlays proc 
acm sigmetrics san diego ca usa jun 
liu li 
zhang adaptive video multicast internet ieee multimedia vol 
pp 
jan feb 
eugster guerraoui 
kermarrec massoulie epidemics distributed computing ieee computer pages may 

kermarrec massoulie ganesh probabilistic reliable dissemination large scale systems ieee trans 
parallel distributed systems vol 
pp 
mar 
zhang liu li 
data driven overlay network live media streaming appear proc 
ieee infocom miami fl usa march 

chu ng guo sripanidkulchai zhan zhang early deployment experience overlay internet broadcasting system proc 
usenix annual technical conference jun 
jin bestavros cache relay streaming media delivery asynchronous clients proc 
international workshop networked group communication ngc boston ma usa oct 
cui li nahrstedt ostream asynchronous streaming multicast ieee select 
areas comm jan 
guo suh kurose towsley cast peer peer patching scheme vod service proc 
www budapest hungary may 
hua vod providing fault tolerant video demand streaming peer peer environment proc ieee icc paris france jun 
cui nahrstedt layered peer peer streaming proc 
nossdav monterey ca usa jun 
guo suh kurose towsley peer peer demand streaming service performance evaluation proc 
ieee icme baltimore md july 
bhargava demand media streaming internet proc 
ieee san juan puerto rico may 
zegura calvert bhattacharjee model internetwork proc 
ieee infocomm san francisco ca usa mar 
cormen leiserson rivest stein algorithms second edition mit press cambridge ma 
zhuang zhao joseph katz kubiatowicz bayeux architecture scalable fault tolerant wide area data dissemination proc 
nossdav new york jun 
guo chen ren chen jiang prop scalable reliable assisted proxy streaming system proc 
ieee icdcs tokyo japan mar 
shen hua chaining generalized batching technique video demand systems proc 
ieee ottawa canada jun 

