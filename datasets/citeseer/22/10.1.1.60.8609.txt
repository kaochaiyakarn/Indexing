fine grained dynamic voltage frequency scaling precise energy performance trade ratio chip access chip computation times choi ramakrishna soma pedram department ee systems university southern california los angeles ca pedram usc edu presents intra process dynamic voltage frequency scaling dvfs technique targeted non real time applications running embedded system platform 
key idea runtime information external memory access statistics order perform cpu voltage frequency scaling goal minimizing energy consumption controlling performance penalty 
proposed dvfs technique relies dynamically constructed regression models allow cpu calculate expected workload slack time time slot adjust voltage frequency order save energy meeting soft timing constraints 
turn achieved estimating exploiting ratio total chip access time total chip computation time 
proposed technique implemented xscale embedded system platform actual energy savings calculated current measurements hardware 
memory bound programs cpu energy saving performance degradation achieved 
cpu bound programs cpu energy saving achieved cost performance penalty 
demand low power consumption battery powered computer systems risen sharply 
extending service lifetime systems reducing power requirements key customer user requirement 
low power design critical design consideration high computer systems due expensive cooling packaging costs lower reliability associated high levels chip power dissipation 
dynamic voltage frequency scaling dvfs technique proven highly effective method achieving low power consumption meeting performance requirements 
key idea dvfs techniques dynamically scale supply voltage level cpu provide just circuit speed process system workload meeting total compute time throughput constraints reducing energy dissipation quadratically dependent supply voltage level 
number modern microprocessors intel xscale transmeta equipped dvfs functionality 
research supported part darpa pac program contract nsf 
dvfs techniques may reduce energy consumption executed task ensuring task meets deadline 
techniques directly applicable general purpose operating systems assume critical information tasks task arrival time deadline workload known advance 
workload task represented number cpu clock cycles required complete task regardless workload consists mainly cpu bound memory bound instructions 
information course critical determining idle time cpu 
interested dvfs policy general purpose computer systems differentiates cpu bound memory bound instructions workload 
intuition workload partitioning follows 
memory asynchronous processor clock 
task execution time dominated memory access time cpu speed slowed little impact total execution time 
result potentially significant savings energy consumption 
propose intra process dvfs technique non real time operation finely tunable energy performance trade achieved 
main idea lower cpu frequency cpu idle times turn due external memory stalls 
capture cpu idle time run time performance monitoring events provided performance monitoring unit pmu xscale processor 
proposed technique implemented embedded system platform actual energy savings calculated current measurements hardware 
platform cpu energy savings achieved programs performance degradation 
contrast cpu energy savings achieved programs performance degradation 
main contributions presents actual implementations intra process dvfs policy exploits dynamic events run time support compiler modification application program 
simple effective regression model proposed approximately determine cpu idle time due memory stalls estimating ratio total chip access time total chip computation time runtime 
evaluation proposed method performed actual hardware measurements number different applications 
remainder organized follows 
related described section 
section new dvfs policy 
details implementation including hardware software described section 
experimental results sections respectively 
prior previous dvfs related works may divided categories scaling granularity coarse grained fine grained 
coarse grained voltage scaling performed operating system os application level fine grained voltage scaling performed level individual blocks segments application task software program 
scheduling policies hard real time applications coarse granularity 
multi task scheduling os focus 
precisely scheduling performed task level os reduce energy consumption meeting hard timing constraints task 
coarse grained dvfs approaches assumed total number cpu cycles needed complete task fixed known priori 
number studies implement fine grained dvfs part compile time optimization modifying application program 
intra task voltage scheduling technique proposed application code divided segments worst case execution time segment obtained static timing analysis determine suitable voltage segment 
method software feedback loop proposed 
method deadline time slot provided 
authors calculate operating frequency processor time slot depending slack time generated current slot worst case execution time time slot 
checkpoint algorithm proposed scaling points identified line compiler 
compiler assisted dvfs techniques proposed frequency lowered memory bound region program little performance degradation 
dvfs approaches rely micro architecture embedded hardware assistance compiler simulator reported 
microarchitecture driven dvfs technique proposed cache drives voltage scaling 
ipc instruction cycle rate program execution direct voltage scaling 
performance monitoring unit pmu produce optimal frequency voltage levels performance degradation 
pmu captures dynamic program behavior cache hit ratio memory access counts execution time 
heuristic technique proposed voltage scaling done identifying memory bound regions program trace 
needs compiler support identify regions 
different voltage scaling approach called process cruise control dynamic events pmu xscale processor determine optimal frequency performance loss constraint 
particular authors defined optimal frequency domains memory vs instruction count space 
approach requires help line simulation compiler relies dynamic event counts pmu 
flexible sense frequency domains obtained extensive experiments micro benchmarks performance loss set performance loss fixed different applications 
stiff policy allow precise graceful control trade 
propose dvfs policy non real time application similar 
proposed dvfs approach performance events different way 
furthermore policy enables precise control energy performance trade regression method performance events recognize memory bound region runtime effectively 
performance energy trade offs performance degradation energy saving perform ideal dvfs accurately predict execution time task clock frequency 
execution time function instruction mix sequence unrolled instructions executed cycle instruction cpi 
risc instruction mix consists register type instructions instructions branch type instructions control instructions supervisor mode considered 
application compiled source code object code ratios instruction types instruction mix fixed control flow known compile time 
cpi instruction mix depends data dependency run time factors sdram access latency pci access latency running processes instruction latencies classified chip latencies data dependency tlb hits cache hits branch prediction latencies memory latency due cache misses pci latency due access frame buffer 
chip latencies caused events occur inside cpu data dependency 
synchronized internal clock may linearly reduced increasing cpu frequency 
chip latencies sdram pci latencies hand independent internal frequency affected changing cpu frequency 
accesses external devices sdram pcmcia flash card lcd display usb storage synchronized bus clock independent cpu frequency 
denote total execution time program chip computation time chip access time respectively 
obviously written onchip notice breakdown total execution exact target processor supports order execution instructions instruction caused chip access may executed chip access 
case overlap 
practice error introduced way quite small considering memory access time orders magnitude greater instruction execution time 
order execution cause large error equation 
cpu frequency changes change solely due increased execution time program due lowered clock frequency represents performance loss defined follows tf max fmax maximum frequency cpu fn frequency lower fmax tfn total task execution times cpu frequencies fn fmax respectively 
program different ratios result different cpu frequencies 
provides energy performance trade offs various applications 
example case crc djpeg lowering frequency introduces significant performance loss compared tasks implying programs cpu bound 
contrary known qsort memory bound observing little performance degradation lowered frequency 
observations conclude ratio program important degree energy saving performance penalty attained dvfs techniques 
general execution time program represented terms cpi number instructions executed cpu frequency 
precisely represented follows avg onchip onchip total number instructions instruction stream number chip accesses stream cpi onchip denotes number cpu clock cycles th instruction cpi denotes number memory clock cycles th access cpi avg onchip denotes average chip cpi cpu mem denote current clock frequency cpu clock frequency chip bus 
pointed mem assume different values depending external devices accessed 
example test system mhz clock frequency sdram access mhz speed pci peripheral devices 
note mem scaled 
performance loss qsort gzip djpeg crc frequency mhz performance loss changes cpu frequency 
definition value program defined ratio program 
represents degree potential energy saving larger cpu energy saving achieved dvfs technique 
consequently need accurate information order sustain effective dvfs technique 
equations optimal frequency value calculated follows fmax max cpu seen equation closely related program 
consequently accurate calculation quite important effectiveness proposed dvfs approach 
scaling granularity ideal dvfs instantaneously change voltage frequency values 
reality takes time change cpu frequency voltage due factors internal pll phase lock loop locking time capacitances exist voltage path 
xscale processor latency switching cpu voltage frequency sec mhz 
minimum quantum time scaling cpu frequency voltage orders magnitude larger switching latency 
time minimize overhead voltage frequency scaling far os concerned 
start time os quantum approximately msec linux os schedule processes dvfs decision points time os invokes scheduler schedule processes quantum decision cpu voltage frequency changed scale voltage frequency cpu 
events monitored pmu xscale difficult calculate exact program static manner compilation time chip latencies severely affected dynamic behavior cache statistics different access overheads different external devices 
unpredictable dynamic behaviors captured run time 
achieved unit available modern microprocessors 
target system cpu intel xscale supports monitoring performance events including cache hit tlb hit number executed instructions 
overhead accessing pmu read write usec ignored 
limitation events sense events monitored time number clock counts quantum 
dvfs policy performed experiments events give valuable clue events proven helpful experimental results number instructions executed instr ii number memory accesses mem 
cpi avg cpi avg cpi avg cpi avg mhz gzip mhz mpi avg mpi avg mhz mhz mpi avg mpi avg contour plots cpi avg versus mpi avg different cpu clock frequencies events instr mem extracted 
plots combination events executing gzip applications different frequencies mhz mhz fixed step mhz 
start quantum pmu reports instr mem 
parameter values calculate average cpu cycles instruction cpi avg instruction stream ratio instr 
similarly calculate average memory cycles instruction mpi avg 
plotted cpi avg axis mpi avg axis 
dot plot represents pmu report 
easily see fixed cpu clock frequency cpi avg linearly related mpi avg follows avg avg cpi mpi frequency dependent slope 
notice intercept equal average chip cpi cpi avg onchip independent frequency eq 
provide accurate estimation cpi avg onchip determined eq 
definition 
regression fine grained dvfs calculating regression equation proposed dvfs approach monitored event values estimate coefficient regression eq 
equation predict program 
voltage frequency scaling performed start quantum 
regression coefficients dynamically updated explained 
linear equation regression denote mpi avg cpi avg respectively 
coefficients quantum calculated pmu reports follows xi yi xi yi yi xi xi xi xi yi denote mpi avg cpi avg th quantum 
note choose carefully chosen small sensitive small changes program behavior may data points regression 
hand large may potentially filter important changes program behavior 
regression coefficients updated start quantum 
recall regression equation maintained frequency different different frequencies 
optimal frequency quantum calculated follows 
quantum quantum calculated avg cpi avg obtained target cpu frequency quantum calculated eq 
specified follows fmax fmax prediction error adjustment assumed quantum current quantum 
reality varies different quanta program execution 
due different chip latencies sdram pci device accesses 
furthermore different applications different distributions runtime 
situation worse quantum length varied example process performs operation write operations 
case cpu preempts process length quantum shortened compared standard quantum length approximately msec 
alleviate shortcomings modify proposed technique order handle non equal quantum times 
modification shown depicts consecutive quanta distinct value quantum lengths act tact tact specified expected execution time denoted exp texp texp respectively 
voltage frequency scaling performed respectively 
exp exp exp exp exp act act act act act st st st exp tact exp tact st st st ex texp tact tact exp tact st ex texp tact tact exp tact st st exp texp texp tact tact tact exp tact st exp texp texp tact tact tact exp tact st quantum sequence max expected pf loss st st actual slack generation execution time exp exp compensating error due misprediction frequency chosen quantum may exist positive negative slack time difference texp tact slack times come due misprediction quantum 
positive negative slack frequency quantum smaller larger compared case zero slack 
example time actual execution time tact tact expected time texp texp positive slack time texp tact added calculation frequency quantum error occurred previous quanta compensated 
eq 
calculating target frequency quantum modified follows fmax fmax tact notice positive negative slack denominator larger smaller zero slack case target frequency smaller larger course desired behavior 
implementation implemented proposed policy high performance xscale testbed runs linux 
programmable clock multiplier pll xscale processor generates internal cpu clock adjusted mhz steps mhz speeds available mhz 
lower bound results constraint memory bus speed mhz system 
bus speed third cpu clock speed 
yield minimum speed mhz 
running system cpu speeds slower mhz causes immediate halts 
main pcb testbed includes board variable voltage generator provides suitable operating voltage clock frequency level 
converter variable operating voltage generator control input voltage dc dc converter supplies operating voltage cpu 
inputs converter generated customized complex programmable logic device 
cpu clock speed changed minimum operating voltage level applied frequency avoid system crash due increased gate delays 
implementation minimum voltages measured stored table values automatically sent variable voltage generator clock speed changes 
voltage levels mapped frequency obtained extensive measurements summarized table 
measurements system samples second data acquisition system voltage drop precision resistor inserted external power line design test power line measure power consumption shown 
table 
frequency voltage levels system frequency voltage mhz power split resistor operating voltage sample khz data acquisition system 
software works wrote module proposed policy implemented module hooked scheduler voltage scaling occur context switch 
shows software architecture dvfs implementation 
context switch pmu values previous process read ideal frequency calculation quantum performed described section 
regression equation frequency maintained process consists long type variables resulting little space overhead implementing dvfs policy 
measured time overhead policy benchmark suite lmbench time overhead sec 
original context switch time nearly sec 
doubled context switch time overhead quite negligible comparison quantum time tens millisecond 
implementation supports proc file interface module performance loss level size window specified writing appropriate value proc file allows dynamically control desired level energy saving 
furthermore current values read proc file interface 
feature implemented gain accurate information cost higher overhead measure event values pmu timer interrupt ms platform 
feature disabled default exploited experimental results section 
kernel space linux scheduler external pf loss input ex battery status user request proc interface module pmu access module policy module dvfs module xscale processor software architecture dvfs implementation experimental results experiments performed applications including common unix utility programs gzip representative benchmark programs available web 
summarized table 
measurements performed times benchmark average performance loss average energy saving values reported 
size window set exhaustive experiments 
experimental results shows similar characteristics 
table 
summary test applications benchmarks description gzip compressing input file searching pattern files residing directory math floating point calculations bf symmetric block cipher variable length key blowfish bits crc bit cyclic redundancy check file djpeg decoding jpeg image file qsort sorting large array strings ascending order represents measured performance degradation target performance loss ranging steps 
seen obtained actual performance loss values close target values programs actual target qsort programs memory bound pf loss saturated corresponding data 
actual power consumptions including cpu dc dc converter power cases dvfs dvfs reported running gzip 
case program run maximum frequency mhz target pf loss consistent case 
applying proposed policy cpu energy saved cost performance loss 
measured energy savings benchmarks appear 
measurements conclude cpu energy saving achieved memory bound applications qsort performance loss 
energy saving saturates increase amount energy savings tolerating larger performance loss value 
cpu bound applications degree energy saving smaller approach allows finely tuned energy performance tradeoff 
example case djpeg program obtain cpu energy saving performance loss constraint energy saving performance loss constraint 
regression dvfs policy finely tunable energy performance trade proposed implemented xscale platform 
proposed dvfs approach program execution time decomposed parts chip computation chip access latencies 
cpu voltage frequency scaled ratio chip chip latencies process performance degradation factor 
ratio regression equation dynamically updated runtime event monitoring data provided embedded performance monitoring unit 
actual current measurements hardware demonstrated cpu energy consumption saving memory bound programs performance degradation 
cpu bound programs energy saving achieved fine tuned performance degradation ranging 
actual performance loss target loss bf crc djpeg gzip math qsort performance loss different target values power consumption mw power consumption mw avg 
power mw sec time sec gzip mhz dvfs maximum frequency time sec gzip pf loss avg 
power mw energy saving sec pf loss dvfs performance loss constraint cpu power consumption dvfs energy saving target loss bf crc djpeg gzip math qsort cpu energy saving various application programs horowitz gonzalez low power digital design ieee symp 
low power electronics pp intel processor intel xscale microarchitecture developer intel com design manuals htm se processor tm data book www transmeta com products embedded html yao demers shenker scheduling model reduced cpu energy ieee annual foundations computer science pp voltage scheduling problem dynamically variable voltage processors proc 
int symp 
low power electronics design pp quan hu minimum energy fixed priority scheduling variable voltage processors proc 
design automation test europe march pp hong qu potkonjak srivastava synthesis techniques low power hard real time systems variable voltage processor proc 
ieee real time systems symp 
december pp shin kim lee low energy intra task voltage scheduling static timing analysis proc 
design automation conf pp 

lee sakurai run time power control scheme software feedback loop low power real time applications proc 
asia pacific design automation conf pp 
azevedo cornea gupta dutt nicolau profile dynamic voltage scheduling program checkpoints copper framework proc 
design automation test europe conference march pp hsu kremer compiler directed dynamic voltage scaling memory bound applications technical report dcs tr department computer science rutgers university august 
hsu kremer single region vs multiple regions comparison different compiler directed dynamic voltage scheduling approaches proc 
workshop power aware computer systems february 
marculescu microarchitecture driven dynamic voltage scaling workshop complexity effective design 
grunwald ipc variation workloads externally specified rates reduce power consumption proc 
workshop complexity effective design 
process cruise control proc 
compilers architectures synthesis embedded systems october pp hennessy patterson computer architecture quantitative approach nd morgan kaufmann publishers mcvoy staelin lmbench portable tools performance proc 
usenix technical conf january pp 
www eecs umich edu 
