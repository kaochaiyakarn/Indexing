discussion refactoring research practice bart du bois pieter van gorp alon niels van hans serge demeyer name surname ua ac universiteit antwerpen belgium provide detailed overview field software restructuring refactoring formal practical point view 
summarizing refactoring current applications tool support discuss current research refactoring number essential research questions 
lastly highlight key directions refactoring research moving forward 
keywords refactoring survey reengineering model transformation 
intrinsic property software real world environment need evolve 
software enhanced modified adapted new requirements code complex drifts away original design 
major part total software development cost devoted software maintenance 
better software development methods tools solve problem increased capacity implement new requirements time frame making software complex 
cope spiral complexity urgent need techniques reduce software complexity incrementally improving internal software structure 
research domain addresses problem referred restructuring case object oriented software development refactoring 
reverse engineering taxonomy chikofsky cross restructuring defined follows restructuring transformation representation form relative abstraction level preserving subject system external behavior functionality semantics 
restructuring transformation tom mens tom mens ac universit de belgium appearance altering code improve structure traditional sense structured design 
restructuring creates new versions implement propose change subject system normally involve modifications new requirements 
may lead better observations subject system suggest changes improve aspects system 
definition refactoring basically process changing software system way alter external behavior code improves internal structure 
key idea redistribute classes variables methods order facilitate adaptations extensions 
structured follows 
section refactoring today software development processes tools 
section provide overview fundamental practical questions current research 
lastly indicative set fundamental questions previews trends refactoring research section 
current applications illustrate current applications refactoring discuss role refactoring today software development processes provide overview current tool support 
role refactoring today software development processes refactoring context agile development reengineering 
agile development processes extreme programming xp rely refactoring short iterative development cycles 
reason refactoring fit linear waterfall incremental spiral models software engineering 
remains open question activity refactoring included classical software development process 
describes refactoring fits software reengineering process 
context software reengineering restructuring convert legacy code modular structured form migrate code different programming language language paradigm 
integrated development environments ides smalltalk visualworks eclipse idea provide considerable support xp combination refactoring support unit testing core activities xp 
tool support possible refactor manually tool support considered crucial 
today wide range tools available automate various aspects refactoring 
depending tool kind support provided degree automation vary 
tools refactoring browser support semi automatic approach 
researchers demonstrated feasibility fully automated refactoring 
example guru fully automated tool restructuring inheritance hierarchies refactoring methods self programs 
automatic refactoring approaches proposed :10.1.1.34.6001
tendency integrate refactoring tools directly industrial strength software development environments 
example case smalltalk visualworks eclipse borland control center idea borland 
focus tools applying refactoring request user 
discuss section support available detecting refactoring applied 
proposes means metrics indicates refactorings applicable automatically detecting program invariants daikon tool 
approach dynamic analysis runtime behavior complementary approaches 

current research techniques implement refactorings 
mentioned section level automation varies refactoring tools 
requirements different tools may light weight complex powerful implementation techniques 
pattern matching techniques early adopters combination shell regular expression tools sed semantical analyzer compiler refactor code 
approach flexible manageable small increments 
metamodeling techniques tools explicit refactoring support rely parser construct model program sources check preconditions preserving behavioral properties execute refactorings model transformations 
extensive date overview refactoring tools refer www refactoring com 
imperative code centric development environments may implement refactorings java calls model classes represent java syntax tree 
disadvantage approach reasoning programs written third generation language java impractical 
tip introduce type constraint notation reason refactoring correctness open source eclipse ide 
declarative researchers investigating declarative formalisms implement refactorings reason behavior 
example demonstrated graph rewriting suited reason refactoring generate executable refactoring code declarative specifications 
uml context ocl expressions specify refactoring contracts code smells invariants pre post conditions associated refactorings 
logic meta programming transform reason object oriented programs 
soul validate integration bad code smell detection refactoring automatically suggesting smalltalk refactorings applied solve problematic code constructs described prolog rules 
compose refactorings scalable way 
support complex refactorings necessity large scale reengineering projects current development tools formalisms support primitive refactorings 
able implement tools complex refactorings scale industrial software possible easy compose primitive refactorings complex refactorings 
advantages complex refactorings may efficient equivalent series primitive refactorings 
example need check preconditions primitive refactoring sequence separately 
order identify useful complex refactorings number research methods 
evolved software systems investigated order detect composite refactorings analogously 
primitive design pattern transformations composed 
possible compositions expressed sequencing signifies applying transformations order set iteration means performing transformations iteratively set program elements concurrency signifies set transformations performed concurrently 
composition code smells studying resolution smell lead 
automatically suggesting uml refactorings sequencing primitive uml refactorings implemented evaluating ocl refactoring contracts 
advantage uml ocl standards broad audience tweak composition rules automatic refactoring tool 
analyze dependencies refactorings 
building complex refactorings crucial determine refactorings mutually independent refactorings applied sequentially 
parallel application refactorings leads unexpected conflicts 
particular example refactoring object oriented framework may lead conflicts instantiations 
merge techniques may useful 
formal basis detect resolve conflicts essential 
theoretical point view rely existing results parallelism graph transformation systems critical pair analysis 
detecting sequential dependencies refactorings important deal change propagation called ripple effect application refactoring may require refactorings applied 
specify refactorings language independent manner 
tool formal model refactoring sufficiently applicable different programming languages provide necessary hooks add behavior 
multiple language support desirable prevent reinventing wheel ides importantly allow tool users share tweaked bad code smell specifications possible 
famix metamodel reengineering multiple languages smalltalk ada 
extended version supporting advanced java refactorings mapped type graph uml metamodel 
apply refactorings higher levels abstraction 
refactorings useful higher levels abstraction source code low level design models 
researchers investigating refactoring high level models refactoring design patterns software architectures design models typically specified unified modelling language 
various attempts provide support refactoring uml models diagrams 
hierarchical graphs hierarchical graph rewriting provide interesting formalism representing program transformations higher level abstraction 
consistency artifacts level abstraction interaction diagrams class diagrams investigated integrated approach preserves consistency software artifacts diagrams code different levels abstraction missing 
design patterns provide means describe program structure high level abstraction 
refactorings introduce new design pattern instances software 
design patterns impose constraints software structure may limit applicability certain refactorings 
detect resort logic rules 
suggest graph transformation techniques restructure replace occurrences poor design patterns legacy program design pattern 
deal refactoring software architectures approach proposed refactoring rules directly graphical representation system architecture promising 
rules preserve behavior imposed causal relationship components behavior 
pragmatic approach taken architectural changes software systems performing sequence primitive refactorings refactorings case study refactorings second case study 
refactoring relate software engineering techniques 
alternatively framework developing language indepen fundamental alleviate evolution obstacles refactoring specifications merely techniques generic functions functional programming language 
engineering software systems 
aligning refactoring existing software engineering techniques program analysis refactoring useful implementation testing increases return investment dependent level programming languages limiting scope application essential problems bytecode refactoring executable code 
done developers compilers compiler solved requirements fulfilled 
generators focus lies optimizing performance techniques transform bytecode compatible definition refactoring 
depending application domain techniques improve aspects security power consumption code size memory usage 
system 
research runtime compilers combination refactoring adapt running applications changing requirements restarting 
program analysis goal program analysis determine properties program automatically compile time 
examples properties internal quality attributes problem areas code code duplication potential optimizations 
finding properties requires detection techniques discuss representative set 
software metrics map internal program properties real numbers purpose indicating current score quality attribute 
software metrics identify problem areas source code terms size complexity coupling cohesion 
metrics allow detect need refactoring software system 
computing software metrics refactoring measures change specific quality attributes 
software measurement theory assumes meaningful relations identified internal external quality attributes maintainability 
example defines polynomial measure provides single maintainability index 
base indicator external quality effect refactoring evaluated 
automation detection technique differences multiple versions software system analyzed 
proposes change metrics detect refactorings successive releases software system 
software visualization graphically exposes internal structure applications help restructuring software 
propose star diagrams purpose 
clone visualization duploc graphical tool detecting code duplication 
metamodeling refactorings dependent implementation language discussed section 
techniques applied making program analysis tools independent programming language 
program slicing analyzes dependencies system parts 
information exploited deal specific kind function procedure extraction 
techniques system dependence graphs guarantee refactoring preserves selected behavior interest 
similar formal approach taken algorithm proposed move selected set nodes control flow graph extractable preserving program semantics 
formal concept analysis deal restructuring 
uses concept analysis restructure object oriented class hierarchies usage hierarchy set applications 
result guaranteed behaviorally equivalent original hierarchy 
uses technique restructure software modules 
concept analysis identify objects semi automatically restructuring legacy data structures 
testing utmost concern refactoring behavior preservation transformation 
formal guarantees correctness refactoring tools see section systematic testing way verify preservation part program behavior 
practically automation unit integration tests allows regression tests run refactoring means feel safe incremental program transformation 
context refactoring legacy systems identifying system parts write tests important issue 
propose incrementally growing test base starting critical components 
suggest refactorings introduce tests 
conversely regression testing selection systems limit number tests run beneficial context short iterations software systems considerable test cases 
tests steer refactoring process 
dynamic slicing regression testing locate feature implementation order extract functionality 
introduce notion test refactoring test code analyzed find improvements production code 
show refactoring test code different refactoring production code ways distinct set bad smells involved improving test code involves additional test specific refactorings 
compare tools techniques formalisms refactoring 
evaluate certain refactoring tool formalism suitable need compared disciplined way 
achieved basis taxonomy relevant evolution criteria 
provides attempt define general taxonomy comparing software evolution tools 
applied taxonomy compare different refactoring tools 

trends behavior preserved refactoring 
refactoring implies program behavior preserved precise definition behavior rarely provided may inefficient checked practice 
problem intuitive definition observational behavior equivalence stating input obtain exactly output suffice 
application domains observable input output semantics thing relevant real time systems essential aspect behavior execution time certain sequences operations embedded systems memory constraints power consumption important aspects behavior need taken account safety critical systems concrete notion safety needs preserved refactoring 
ideal world refactorings able preserve properties 
practice properties need preserved software entities fact wide range different notions behavior preservation 
practical side may deal behavior preservation pragmatic way example means rigorous testing discipline 
complete set test cases pass refactoring evidence refactoring behavior preserving 
formal side may attempt determine sufficiently expressive formal language interesting program invariants relate set refactorings guarantees preservation expressible properties 
similar known courcelle monadic second order logic 
research literature different notions behavior preservation context refactoring 
define object preserving class transformations 
special kind graph transformations property language preserving set acceptable program inputs transformations 
provides framework restructuring theoretical basis formal language theory 
role refactoring model driven software development 
omg model driven architecture mda promises leverage uml profiles ocl mof related standards enable integrated evolution programming languages component models 
platform independence achieved explicitly separating platform dependencies platform specific model mapping platform independent model 
mda code generators model model model code transformations configurable called pattern template editors 
context refactoring issues require investigation 
described section consensus integrate program code models higher levels abstraction 
mda transformations ensure generated models code kept consistent 
regenerating full system refactoring may require resources incremental development 
secondly may want refactor system highest level abstraction 
lastly lack domain specific languages outperform current programming languages 
mda applications completed manually written program code 
refactorings models need mapped primitive source code refactorings 
due issues need formal basis precisely analyse dependencies transformations mda code generator 
advanced mda tools reverse engineer existing code models order facilitate platform migration 
obviously parsing approach works existing code conforms predefined structure 
refactoring transform existing code form mda tool understand 
research required extent approach works practice 
limited acceptance fourth generation language gl case tools indicate software developers require considerable flexibility programming higher levels abstraction 
consider mda code generators white boxes expose model transformations code generation templates 
investigated kind refactorings apply code generators adapt new platforms optimize performance generated code 
role refactoring aspect oriented software development aosd 
dealing refactoring aspect oriented context fold issue 
refactoring program better evolvability necessarily imply aspects instrumented program evolve 
environments eclipse provide support refactoring aspect oriented programming neglect evolution aspects particularly evolution pointcut constructs describing program points join points aspect code woven definitions new join points arise evolution 
clean separation concerns cause aspects unaware changes base program 
may result inconsistencies base program aspects 
developing pointcut language allowing expressive robust pointcuts 
language allows identifying join points defined patterns introducing tight coupling aspects base program 
second problems code tangling code scattering solved clean way introducing aspects 
extractions program crosscutting concerns error handling concurrency control 
aspects form refactoring 
kind extractions improvement aspect code commonly referred aspect oriented refactorings 
far tool support aspect oriented refactoring limited detection crosscutting concerns 
aspect browser helps finding managing crosscutting concerns aspect mining tool amt mine aspects existing system feature exploration analysis tool feat eclipse plugin helps exploring crosscutting concerns existing system 
currently murphy kiczales working project aims developing dialogue tool eclipse plugin providing support semi automated aspect oriented refactoring 
determine refactorings applied 
powerful techniques refactoring exploited maximum feedback usage acquired 
past practical forms feedback context object oriented re design patterns guidelines heuristics 
feedback refactoring acquired analyzing refactorings change software systems 
example studies refactoring introduce design patterns 
quality level investigate refactorings change internal software metrics 
track changes external software quality attributes maintainability performance empirical investigation required 
success empirical studies investigate value design heuristics maintenance context strengthen belief empirical research refactoring certainly worthwhile 
summarizing key successful problem solution mapping context evolving software systems lies combination knowing change software systems knowing refactorings affect software systems 

research software restructuring refactoring continues active 
commercial refactoring tool support growing rapidly lot open issues remain solved 
identified tackling behavior preservation gathering feedback apply refactorings integration mda aosd major trends refactoring research 
general need formalisms processes methods tools address refactoring consistent directed scalable flexible way 

coleman ash oman 
metrics evaluate software system maintainability 
ieee computer august 

managing application program maintenance expenditure 
comm 
acm 
swanson 
software maintenance management study maintenance computer application software data processing organizations 
addison wesley 
robert glass 
maintenance 
ieee software july august 
robert arnold 
tutorial software restructuring chapter software restructuring 
ieee press 
william griswold 
program restructuring aid software maintenance 
phd thesis university washington august 
william opdyke 
refactoring program restructuring aid designing object oriented application frameworks 
phd thesis university illinois urbana champaign 
martin fowler 
refactoring improving design existing programs 
addison wesley 
elliot chikofsky james cross 
reverse engineering design recovery taxonomy 
ieee software 
kent beck 
extreme programming explained embrace change 
addison wesley 
boehm 
software engineering 
ieee transactions computers 
serge demeyer st phane ducasse oscar nierstrasz 
object oriented reengineering patterns 
morgan kaufmann 
richard rajlich 
restructuring legacy code 
proc 
int conf 
software maintenance pages 
ieee computer society press 

smalltalk visualworks january 
eclipse 
eclipse january 

idea january 
roberts brant johnson 
refactoring tool smalltalk 
theory practice object systems 
xref tech 
january 
instantiations 
january 
moore 
automatic inheritance hierarchy restructuring method refactoring 
proc 
int conf 
oopsla acm sigplan notices pages 
acm press 

automatic reorganization object oriented hierarchies case study 
object oriented systems 
jens jahnke albert 
rewriting poor design patterns design patterns 
serge demeyer harald gall editors proc 
esec fse workshop object oriented reengineering 
technical university vienna 
technical report tuv 
benedikt schulz thomas berthold mohr walter zimmer 
computer aided design pattern object oriented systems 
technology object oriented languages systems pages 
ieee computer society press 
mel ide 
automated application design patterns refactoring approach 
phd thesis department computer science trinity college university dublin 
borland 
borland controlcenter january 
borland 
borland 
frank simon frank claus lewerentz 
metrics refactoring 
proc 
european conf 
software maintenance reengineering pages 
ieee computer society press 
ernst griswold notkin 
automated support program refactoring invariants 
proceedings international conference software maintenance pages 
ieee computer society press 
frank tip adam dirk 
refactoring generalization type constraints 
proceedings th acm sigplan conference object oriented programing systems languages applications pages 
acm press 
tom mens serge demeyer dirk janssens 
formalising behaviour preserving program transformations 
graph transformation volume lecture notes computer science pages 
springer verlag 
proc 
st int conf 
graph transformation barcelona spain 
paolo bottoni francesco parisi presicce gabriele taentzer 
specifying integrated refactoring distributed graph transformations 
applications graph transformation industrial relevance pages 
pieter van gorp niels van dirk janssens 
implementing refactorings graph rewrite rules platform independent metamodel 
holger albert editors proceedings st international fujaba days pages 
university kassel 
pieter van gorp hans tom mens serge demeyer 
automating source consistent uml refactorings 
proceedings th international conference uml unified modeling language 
tom 
automated support framework software evolution 
phd thesis vrije universiteit brussel september 
tom tom mens 
automatically identifying refactoring opportunities logic meta programming 
proc 
int conf 
software maintenance re engineering 
lance tokuda don batory 
evolving object oriented designs refactorings 
automated software engineering 
don roberts 
practical analysis refactoring 
phd thesis university illinois urbana champaign 
tom mens 
formal foundation object oriented software evolution 
phd thesis department computer science vrije universiteit brussel belgium september 
tom mens 
transformational software evolution assertions 
workshop formal foundations software evolution lisbon march 
demeyer ducasse nierstrasz 
finding refactorings change metrics 
proc 
conf 
object oriented programming systems languages applications volume acm sigplan notices pages 
acm press 
kostas kontogiannis 
methodology developing transformations maintainability soft goal graph 
proceedings th ieee working conference reverse engineering wcre pages 
ieee computer society press 
tom mens 
state art survey software merging 
ieee trans 
software engineering may 
tom mens 
conditional graph rewriting domain independent formalism software evolution 
proc 
int conf 
applications graph transformations industrial relevance volume lecture notes computer science pages 
springer verlag 
tom mens 
formal foundation object oriented software evolution 
proc 
int conf 
software maintenance pages 
ieee computer society press 
corradini ehrig montanari rossi 
handbook graph grammars graph transformation chapter concurrent semantics algebraic graph transformations pages 
world scientific 
heckel jochen ster gabriele taentzer 
confluence typed attributed graph transformation systems 
graph transformation volume lecture notes computer science pages 
springer verlag 
rajlich 
model change propagation graph rewriting 
proc 
int conf 
software maintenance pages 
ieee computer society press 
sander tichelaar stephane ducasse serge demeyer oscar nierstrasz 
meta model language independent refactoring 
proceedings 
ralf mmel 
generic refactoring 
proc 
third acm sigplan workshop rule programming rule pittsburgh usa october 
acm press 
pages 
christopher fraser david hanson todd proebsting 
engineering simple efficient code generator generator 
acm letters programming languages systems september 
tim lindholm frank yellin 
java virtual machine specification 
addison wesley 

energy conscious class transformations data dominant applications case study 
third pa ct symposium 
frans 
selective runtime compiler virtual machine 
presentation pact symposium university ghent september 
dave 
refactoring uml 
proc 
rd int conf 
extreme programming flexible processes software engineering pages 
sardinia italy 
marko thorsten sturm 
refactoring browser uml 
proc 
rd int conf 
extreme programming flexible processes software engineering pages 
sardinia italy 
paolo bottoni francesco parisi presicce taentzer 
coordinated distributed diagram transformation software evolution 
electronic notes theoretical computer science 
suny 
quel 
refactoring uml models 
proc 
uml volume lecture notes computer science pages 
springer verlag 
engels sch rr 
encapsulated hierarchical graphs graph types meta types 
electronic notes theoretical computer science 
niels van dirk janssens 
hierarchical program representation refactoring 
hartmut ehrig editors electronic notes theoretical computer science volume 
elsevier 
van der simmonds tom mens 
description logic maintain consistency uml models 
proceedings uml unified modeling language 
springer verlag 
gamma helm johnson vlissides 
design patterns elements reusable object oriented languages systems 
addison wesley 
lance tokuda don batory 
automated software evolution design pattern transformations 
proc 
rd int 
symp 
applied corporate computing october 
pieter van 
re engineering object oriented design patterns 
master thesis universiteit utrecht november 
jan bernhard rumpe 
refinement information flow architectures 
hinchey editor proc 

ieee computer society press 
chidamber chris kemerer 
metrics suite object oriented design 
ieee trans 
software engineering june 
norman fenton lawrence pfleeger 
software metrics rigorous practical approach 
international thomson computer press london uk second edition 
brian henderson sellers 
object oriented metrics measures complexity 
prentice hall 
radu 
detecting design flaws metrics object oriented systems 
li bertrand meyer pour riehle editors proceedings th international conference exhibition technology object oriented languages systems tools volume pages 
ieee computer society 
robert godin thierry miceli 
metrics help bridge gap improvement oo design quality automation 
proc 
international conference software maintenance pages october 
michele lanza 
object oriented reverse engineering coarse grained fine grained evolutionary software visualization 
phd thesis university berne switzerland 
coleman arnold hayes 
object oriented development fusion method 
prentice hall englewood cliffs nj 
william griswold chen robert david 
tool support planning restructuring data abstractions large systems 
proc 
th symp 
foundations software engineering volume acm sigsoft software engineering notes pages 
acm press october 
st phane ducasse matthias rieger serge demeyer 
language independent approach detecting duplicated code 
yang lee white editors proc 
int conf 
software maintenance pages 
ieee computer society press september 
filip van serge demeyer 
evaluating clone detection techniques 
proc 
int workshop evolution large scale industrial software applications elisa pages 
tip 
survey program slicing techniques 
journal programming languages 
binkley gallagher 
program slicing 
advances computing 

extracting reusable functions flow graph program slicing 
trans 
software engineering april 
lakhotia 

restructuring programs statements functions 
harman gallagher editors special issue program slicing volume information software technology pages 
elsevier 
raghavan susan horwitz 
semantics preserving procedure extraction 
technical report computer sciences department university wisconsin madison 
ganter wille 
formal concept analysis mathematical foundations 
springer verlag 
gregor snelting frank tip 
reengineering class hierarchies concept analysis 
proc 
foundations software engineering fse volume sigsoft software engineering notes pages 
acm press 
paolo tonella 
concept analysis module restructuring 
trans 
software engineering april 
arie van deursen tobias kuipers 
identifying objects cluster concept analysis 

wright graham 
extreme programming hostile environment 
int 
conf 
extreme programming 
yih chen david rosenblum phong vo 
testtube system selective regression testing 
international conference software engineering pages 
mehta george 
evolving legacy system features fine grained components 
icse 
acm 
arie van deursen leon moonen 
video store revisited thoughts refactoring testing 
proc 
rd int conf 
extreme programming flexible processes software engineering pages 
sardinia italy 
tom mens jim buckley rashid matthias zenger 
taxonomy software evolution 
proc 
workshop unanticipated software evolution march 
poland 
simmonds tom mens 
comparison software refactoring tools 
technical report vub prog tr programming technology lab november 
courcelle 
graph rewriting algebraic logic approach 
van leeuwen editor handbook theoretical computer science vol 
pages 
elsevier 
paul 
object preserving class transformations 
proc 
conf 
object oriented programming systems languages applications pages 
acm press 
paul 
maintenance object oriented systems structural evolution 
theory practice object systems 
david 
impact model driven standards 
th annual hawaii international conference system sciences hicss volume lecture notes computer science page 
ieee computer society press 
jon siegel omg staff strategy group 
developing omg model driven architecture 
technical report white revision object management group november 

pattern driven generator 


architect 
interactive objects 

www com march 
ivan 
de kracht van gl aan de van de rad race 
database systems 
kris johan 
arranging language features robust pattern crosscuts 
proceedings nd international conference aspect oriented software development pages 
ucsd 
aspect browser 
jan 
aspect mining tool 
martin 
feature exploration analysis tool 
jan gail murphy gregor kiczales 
dialogue aspect oriented refactoring 
pree 
design patterns object oriented software development 
wesley 
coad yourdon 
object oriented analysis 
yourdon press nd edition 
arthur 
object oriented design heuristics 
addison wesley publishing april 
joshua 
refactoring patterns appear 
addison wesley professional 
bart du bois tom mens 
describing impact refactoring internal program quality 
international workshop evolution large scale industrial software applications elisa icsm workshop 
brito abreu 
design quality evaluation object oriented software systems 
proc 
int conf 
software quality pages october 
fernando brito abreu melo 
evaluating impact object oriented design software quality 
proc 
rd int symp 
software metrics march 
briand daly 
experimental evaluation quality guidelines maintainability object oriented design documents 
empirical studies programmers esp 
