estimation distribution algorithm maximum entropy wright riccardo poli chris stephens langdon sandeep computer science university montana mt usa department computer science university essex colchester uk instituto de ciencias unam mexico df computer science university college london gower street london uk 
estimation distribution algorithms eda similar genetic algorithms replace crossover mutation sampling estimated probability distribution 
develop framework estimation distribution algorithms principle maximum entropy conservation schema frequencies 
algorithm type gives better performance standard genetic algorithm ga number standard test problems involving deception epistasis trap nk 
genetic algorithms maintain population potential solutions problem 
potential solution assumed fitness related solves problem 
population undergoes selection alternated crossover mutation 
selection increases frequency high fitness solutions decreases frequency low fitness ones add new solutions population 
crossover mutation extend sampling search space creating new solutions currently population 
estimation distribution algorithms take different approach sample search space 
population estimate probability distribution search space reflects considered important characteristics population 
new population generated sampling distribution 
introduces diversity new population preserving salient characteristics previous 
sampling process usually replaces crossover mutation operators genetic algorithm 
estimation distribution algorithms reviewed 
mimic algorithm uses second order statistics kullback leibler divergence 
maximum entropy principle historical roots physics widely approach estimating probability distributions data 
key idea associated probability distribution agree known apart express maximum uncertainty 
allows maximum possible freedom adjust distribution new data known 
practice observed data derive set constraints estimated probability distribution 
entropy estimated distribution maximized subject constraints 
assume length string representation alphabet symbols string position arbitrary finite set 
schema subset search space symbols string positions defined fixed string positions arbitrary variable 
schema commonly denoted string length special asterisk symbol denote string symbol possible position 
order schema number defined non asterisk positions 
frequency distribution search space schema corresponding schema frequency just sum relative frequencies elements schema 
traditional way explaining genetic algorithms building block hypothesis 
says ga builds high fitness solutions combining building blocks high fitness short low order schemata thought representing partial solutions problem 
point view came analysis holland schema theorem inequality take account effects schema construction 
exact schema theorems shown genetic algorithms combining building blocks 
relevant building blocks dynamical static high effective fitness necessarily high fitness general short 
traditional building block hypothesis order approximation certain restricted circumstances exact schema theorems understand role building blocks rigorous way aid understanding algorithms 
approach schema frequencies population selection constrain estimated probability distribution 
entropy distribution subsequently maximized distribution sampled produce new population 
fitness individuals new population measured normal way 
schema frequencies natural coarse grained quantities associated population strings 
schema frequencies sums string frequencies give reliable estimates properties fitness function string frequencies 
addition state algorithm completely described schema frequencies lead tractable models class algorithms 
average sampling maximum entropy distribution constrained low order schema frequencies preserves schema frequencies new population 
suggest algorithm problems preservation building blocks corresponding low order schemata algorithm important 
imagine extension algorithm take account dynamical evolution building blocks changing dynamically schemata frequency fixed 
give outline proposed algorithm 

generate initial random population 

generate initial collection schemata 

apply selection ga population 

calculate frequencies schemata schema collection 

sample maximum entropy distribution obtain new population 

go step 
steps elaborated section 
naturally expect performance algorithm sensitive schemata chosen step 
sampling maximum entropy distribution constrained schema family frequencies section give basic definitions show sample maximum entropy distribution constrained frequencies appropriate collection schema families 
term maxent distribution shorthand maximum entropy distribution 
results section proved appendix 
entropy finite set probability distribution entropy defined log base logarithm doesn matter long consistent 
assume base 
schema constraint consists set real number family schema constraints pair collection schemata function unit interval 
schema constraint form family feasible probability distribution satisfies schema constraints 
defined frequency population feasible 
lemma 
equal probability rule 
maximum entropy distribution subject schema constraints indistinguishable respect constraints schemata points equal probabilities 
single schema constraint requires sum probabilities schema points probability points complement probability 
number strings match total size search space rule extends observation 
theorem 
disjoint sets rule collection schema constraints schemata pairwise disjoint maxent distribution subject constraints follows immediately equal probability rule 
schema family collection schemata share common set defined positions 
denote schema family length string alphabet denotes position definite bit denotes position variable bit 
alphabets binary denotes schemata 
note schemata schema family pairwise disjoint disjoint sets rule applies constraints schema family 
assume search space written form ai finite alphabet legal symbols position write cartesian product assume implicitly factor product ai 
words factor corresponds set string positions sets form partition set string positions 
denote projections respectively 
schema schema obtained dropping string positions corresponding example corresponds string positions corresponds string positions 
say schema schema family variable positions corresponding variable 

note schema variable suppose maxent distribution subject family constraints variable naturally extended sets defining 
follows equal probability rule lemma maxent distribution subject constraints marginal distribution 
call distribution maxent distribution subject 
theorem 
non overlapping schemata rule 
tx ty collection schema constraints tx variable ty variable maximum entropy distribution independent product maximum entropy distribution subject tx maximum entropy distribution subject ty 
words 
example suppose corresponds string positions corresponds third string position corresponds string positions 
dd ddd 
suppose frequencies schemata families function apply non overlapping schemata rule schema families get maxent distribution subject 
apply rule decomposition get maxent distribution subject schema family constraints 
example 
theorem 
overlapping schemata rule 
tx tz ty collection schema constraints tx variable tz variable ty variable maxent distribution subject ty maxent distribution subject tx maxent distribution subject ty 
assume marginal distribution 
maxent distribution example ddd dd ddd 
suppose defined schemata probabilities sum schema disjoint union schemata implicitly defined similarly implicitly defined schemata order apply overlapping schemata rule implicit definitions agree 
overlapping schemata rule find maxent probability schema family dddd search space 
example 
constraints schema family dddd apply overlapping schema rule incorporate constraints assuming constraints dd defined implicitly agree 
case long constraints derived schema frequencies previous population 
example 
suppose additional schema family ddd order apply overlapping schemata rule constraints defined implicitly agree marginals probability distribution dddd derived reason expect case constraints derived schema frequencies previous population 
probability distribution dddd satisfies conditional independence condition reason expect constraints derived schema frequencies previous population satisfy conditional independence condition 
algorithms section give algorithms maxent sampling 
order schemata algorithm algorithm follows general framework section initial collection schemata step order schemata 
sampling maxent distribution done non overlapping schemata rule theorem 
hard see just umda uniform multivariate distribution algorithm 
umda algorithm simple estimation distribution algorithm preserves frequencies corresponding variable independently variables 
works problems significant interactions variables partial solutions order disrupted algorithm may difficulty solving problems fitness function significant interactions variables 
order contiguous schemata algorithm schema family contiguous defined positions sequential intervening variable positions 
preliminary test idea applying idea maximum entropy estimation distribution algorithms algorithm works contiguous order schemata 
contiguous schemata may expect best interactions variables tend variables located close string 
order string positions rearranged achieve property techniques test approach 
order contiguous algorithm follows framework section collection schemata step order contiguous schemata 
schemata may overlap 
selection selection method ga tested binary tournament truncation selection see section 
sampling maxent distribution step algorithm done repeatedly applying overlapping schemata rule theorem 
create new individual added new population initially start schema 
progressively refined overlapping schemata rule bits defined left 
positions fixed corresponding individual added new population 
positions fixed choosing schema randomly dd 
schema frequencies probabilities 
third position fixed overlapping schemata rule schema family dd 

fourth position chosen schema family dd 

take steps 
example 
new individual initially represented schema 
schema chosen family dd probabilities 
suppose chosen 
new individual schema 
schema chosen dd 
compatible schema chosen 
schemata compatible agree defined positions overlap 
schemata chosen probability probability 
note probabilities add 
chosen new individual schema 
schemata chosen way 
ask order schemata higher order schemata 
note chaining effect associated requirement compatible schemata chosen consecutive choices 
example schema high frequency procedure choose sequence zeros sequence ones 
addition higher order schemata topic research 
frequency order schema zero population selection step zero step 
algorithm described far schema zero frequency point 
implies algorithm eventually converge single individual 
behavior may undesirable added mutation procedure algorithm 
done modifying sampling procedure step described 
procedure parameterized mutation rate 
schema chosen order schema family probability equal mutation rate schema frequencies ignored schema chosen set compatible schemata equal probabilities 
schema chosen results compatible choices processing schema family 
case mutation procedure forced processing schema family 
note mutation applied sampling exact maxent distribution 
empirical results order contiguous schemata algorithm binary alphabet implemented java wright 
individuals populations implemented java schemata represented pair 
schema represented defined positions second represented definitions defined positions 
set operations implemented computer bitwise operations determine individual element schema 
example individual represented set defined positions schema definitions individual schema iff order contiguous algorithm expect algorithm building blocks match algorithm 
class test functions concatenated trap function 
concatenated trap functions designed building block hypothesis mind 
concatenated trap function order sum trap subfunctions order trap function order defined tk number ones binary string 
concatenated trap function defined dividing string func 
evaluations trap function ga nt func 
evaluations trap function string length string length fig 

trap benchmarks ga scales worse maxent order 
ga maxent non overlapping contiguous blocks length defining order trap function blocks 
value function sum trap functions 
note optimum string zeros string natural building blocks schemata zeros block positions variable 
building blocks contiguous schemata structure problem matches algorithm 
compared contiguous order algorithm conventional genetic algorithm 
experiments trap function algorithms mutation rate truncation selection truncation parameter 
words best individuals kept selection phase 
ga sensitive population size attempt choose reasonably appropriate population ga population size maximum entropy algorithm ga string length 
cases population sizes 
genetic algorithm crossover crossover rate 
algorithms run optimum string 
shows average runs number fitness evaluations optimum 
string length increases algorithm better point crossover ga second class fitness functions nk fitness functions 
functions sums simpler subfunctions 
case simpler subfunctions real valued functions depend bits 
subfunction defined table mapping bit strings length real numbers real numbers chosen randomly uniform distribution interval 
versions nk fitness functions 
adjacent version string divided overlapping contiguous blocks order function sum random subfunctions defined blocks 
random version string divided overlapping noncontiguous blocks bits 
ith block guaranteed contain bit positions remaining bits chosen randomly 
blocks contained bits 
string length nk fitness functions depending choice random numbers defining subfunctions case random version choice bits block 
results string length mutation rate avg 
max fitness nk adjacent fitness ga maxent avg 
max fitness nk random fitness ga maxent population size population size fig 

performance ga maxent order nk 
maxent significantly better types nk landscape 
truncation selection truncation parameter fitness evaluations 
result average runs 
procedure statistically test maxent algorithm better ga trials nk fitness function generated ga maxent algorithm run population sizes 

fitness best individual maxent runs compared fitness best individual ga runs 
nk adjacent maxent algorithm better fitness times ga better fitness times equal fitness times 
nk random maxent algorithm better fitness times ga better fitness times equal fitness times 
clearly results statistically significant 
major advantage approach potential modeling algorithms maximum entropy 
sampling step algorithm framework step depends frequencies schemata schema collection outcome random number generation 
model algorithm frequencies frequencies strings 
means model naturally coarse grained 
illustrated existing models algorithms gene pool recombination linkage equilibrium umda algorithm 
analysis umda quantitative genetics appears 
fixed point analysis explore phenomenon bistability umda mutation 
analyses fact population linkage equilibrium gene pool recombination 
order schema families step algorithm framework gene pool recombination case linkage equilibrium equivalent maximum entropy 
algorithm uses contiguous order schema families state population reduced frequencies schemata families model algorithm keeping track frequencies 
novel paradigm maximum entropy constructing estimation distribution algorithms 
preliminary experiments algorithm idea order schemata deceptive trap functions nk landscapes promising 
higher order schemata done 
crs grateful support project project 
aw rp wbl grateful hospitality instituto de ciencias initiated financial support 

pedro larra aga 
review estimation distribution algorithms chapter pages 
kluwer academic publishers 

jeremy de bonet charles isbell jr paul viola 
mimic finding optima estimating probability densities 
michael mozer editor advances neural information processing systems volume page 
mit press 

jaynes 
information theory statistical mechanics 
physical review 

john holland 
natural artificial systems 
university michigan press ann arbor michigan 

stephens 
schemata evolution building blocks 
evolutionary computation 

ricardo poli 
exact schema theory genetic programming variable length genetic algorithms point crossover 
genetic programming evolvable machines 

william langdon riccardo poli 
foundations genetic programming 
springer verlag 

stephens 
schemata building blocks size matter 
foundations genetic algorithms pages 
morgan kaufmann 

heinz hlenbein mahnig 
convergence theory application factorized distribution algorithm 
journal computing information technology 

heinz hlenbein mahnig 
fda scalable evolutionary algorithm optimization additively decomposed functions 
evolutionary computation 

heinz hlenbein 
equation response selection prediction 
evolutionary computation 

robert heckendorn wright 
efficient linkage discovery limited probing 
cant paz editor genetic evolutionary computation gecco lncs pages 
springer verlag 

kalyanmoy deb david goldberg 
analyzing deception trap functions 
foundations genetic algorithms pages 
morgan kaufmann 

martin pelikan david goldberg cantu paz 
linkage problem distribution estimation bayesian networks 
evolutionary computation 

stuart kauffman 
origins order 
oxford university press 

wright rowe poli stephens 
bistability gene pool ga mutation 
foundations genetic algorithms san mateo 
morgan kaufmann 

feinstein 
foundations information theory 
maple press york pa usa 

abe 
principle maximum entropy 
mathematical 
appendix section give justification equal probability rule nonoverlapping schemata rule overlapping schemata rule 
proof equal probability rule suppose points 
define probability distribution 
clearly satisfies schema constraints 
log concave function entropy greater entropy contradicting fact maximum entropy distribution 
define conditional entropy probability distribution log lemma chapter 
lemma 
equality iff probabilistically independent 
taken equation lemma chapter 
lemma 
equality probabilistically independent 
proof non overlapping schemata rule prove rule schema families correspond product decomposition general case follows induction case 
lemma shows equality iff 
sufficient show defined satisfies schema constraints 
tx 
proof ty similar 
lemma 
proof 
log log log log log log log log log lemma special case lemma chapter 
lemma 
equality iff equivalently 
proof overlapping schemata rule view lemmas sufficient show defined constraints satisfied 
tx recall marginal cases tz ty similar 

