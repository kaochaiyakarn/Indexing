formal aspects computing bcs new approach syntax variable binding murdoch gabbay andrew pitts cambridge university computer laboratory cambridge uk keywords syntax alpha conversion permutation actions set theory structural induction 
permutation model set theory atoms fm sets devised fraenkel mostowski supports notions name abstraction fresh name provide new way represent compute reason syntax formal systems involving variable binding operations 
inductively defined fm sets involving name abstraction set cartesian product disjoint union correctly encode syntax modulo renaming bound variables 
way standard theory algebraic data types extended encompass signatures involving binding operators 
particular associated notion structural recursion defining syntax manipulating functions capture avoiding substitution set free variables notion proof structural induction remain close informal practice computer science 

presents simple variant classical set theory turns convenient developing metamathematics formal systems involving variable binding operations 
main message wish get relatively small change classical set theory involving atoms urelements referred reap great benefits aspect metamathematics 
particular see set theory possible represent equivalence classes syntax trees elements inductively defined set just quotient set 
done way techniques structural induction recursion burstall promote computer science bur bur extend pleasant fashion conventional algebraic datatypes ones involving variable binding operations 
course different set theory close usual step undertaken lightly critique current state art 
oriented correspondence requests andrew pitts cambridge university computer laboratory thompson avenue cambridge cb fd uk 
mail andrew pitts cl cam ac uk dedicated rod burstall 
revised expanded version gabbay pitts gap 
gabbay pitts particular metatheory variable binding concerns machine assisted proofs structural operational semantics plo programming languages 

background theory practice specifying reasoning syntactical structures involve constructs understood 
theory involves indispensable concepts algebraic data types inductively defined sets definition structural recursion proof structural induction bur practice seen general purpose systems machine assisted proof gom pam 
algebraic binders machinery applied syntax involve binders case yields overly concrete representations large numbers essentially routine constructions proofs renaming bound variables capture avoiding substitution done redone object language case case basis 
large machine checkable proofs feasible take sophisticated approach 
approach involves representing object level variables variables metalanguage typed calculus 
shifts renaming substitution meta level properties established 
higher order syntax hoas approach pfe idea going back church chu martin mar way current logical frameworks proof assistants 
big drawback original form loses ability define functions syntax structural recursion prove properties structural induction absolutely essential tools especially applications operational semantics 
proposals overcome shortcoming mcm dps 
result systems technically interesting force designer algorithms proofs modulo conversion forms expression far familiar informal practice 
hoas approach nature disallows feature regard key practical importance ability manipulate names bound variables explicitly computation proof 
criticism applies approaches variable binding de bruijn nameless terms db categorical combinators cur machine implementations argue representations intended machine assisted human reasoning 
hoas approach moving conversion substitution meta level just promote leaving notions substitution defined structural recursion case basis user 
bad compromise show permits nice calculus bound names notions structural recursion structural induction variable binding constructs 
theory expressive power classical set theory axiom choice remains close informal practice forms expression 
focus conversion substitution primitive close spirit gordon melham gom axiomatise type untyped terms modulo conversion church higherorder logic 
take foundational approach necessary properties conversion part underlying set theory 
results notions structural recursion induction simpler gom cf 
example 

overview fraenkel mostowski permutation model set theory devised order prove independence axiom choice ac axioms zermelo fraenkel set theory atoms decades cohen proved harder result independence ac set theory atoms zf celebrated forcing method see section brief survey matters 
application permutation model set theory syntax variable binding far course introduce type names hoas style signature done example hms authors say main drawback hoas difficulty dealing metatheoretic issues concerning names 
consequence metatheoretic properties involving substitution freshness names 
proved inside framework postulated precisely problems names claim approach overcomes simple way 
set theory higher order logic church simple theory types chu basis approach described develop formulation 
new approach syntax variable binding original purpose 
motivate section consider paradigmatic example syntax involving variable binding lambda calculus show conversion terms expressed terms primitive operation permuting term variables free bound binding proposition 
motivates sets equipped permutation actions general setting discussing syntax basic notions including key notion finite support reviewed section fraenkel mostowski cumulative hierarchy sets finite support recalled section 
section introduces fm set theory axiomatisation fraenkel mostowski permutation model special features compared usual zermelo fraenkel set theory expressed terms set atoms freshness predicate meaning atom finite support object meaning finitely atoms holds 
far know quantifier novel dual character see lemma gives pleasant logical properties exploit rest 
main contribution occurs section define new notion atom abstraction fm set theory 
section show atom abstraction combination cartesian product disjoint union form inductively defined sets fraenkel mostowski permutation model represent syntax modulo conversion theorem 
standard theory algebraic data types extends encompass signatures involving binding operators 
particular notions structural recursion corollary induction theorem inductively defined fm sets respect indistinguishability variants close informal practice manipulating equivalence classes representatives explicitly named bound variables 
section discusses related section conclude mentioning ways theory developed applied 

renaming motivating example consider terms untyped lambda calculus bar ranges countably infinite set names variables 
definition 
countably infinite set fixed 
call elements atoms 
consider versions notion variable renaming terms textual substitution free occurrences capture avoiding substitution free occurrences transposition occurrences free bound binding example fresh 
assume reader familiar notions renaming see bar example 
third version possibly familiar fact basic firstly need know operations underlying signature terms supposed variable binders order define secondly define conversion result shows cf 
gun uses place purpose 
recall conversion usually defined congruence set terms identifies proposition 
relation conversion terms coincides binary relation inductively generated axioms rules 
occur gabbay pitts proof 
hard see preserves closed axioms rules defining 
contained 
converse follows proving congruence relating follows easily verified facts preserves occur proposition shows matters variable binding phrased terms elementary operation variable transposition complicated operation textual capture avoiding 
complicated transposition depend auxiliary definition free variables term 
note transposition instance general operation permuting atoms bijection result write permutation action permits formalise important abstractness property metatheoretic assertions involving notion variable validity assertions syntactical objects sensitive distinctions variable names particular names 
put formally equivariance property assertion terms validity course depends nature assertion particular expect free metavariable valid cf 
lemma 
notions belong rich mathematical theory sets equipped permutation action recall 
worth noting theory inapplicable try base development arbitrary injective renaming functions atoms atoms permutations 

permutation actions finite support perm denote group permutations elements perm bijections 
group multiplication takes bijections composes write composition followed 
group identity identity function denoted id may gather discussion particularly concerned elements perm transpositions write permutation interchanges leaving atoms fixed definition 
perm set consists set equipped action group perm function mapping pairs perm elements satisfying id perm usually refer perm set underlying set associated action clear context 
example 
examples sets equipped action group perm mention relevant 
set perm action applying permutation qua function atoms 
ii set terms defined equation possesses perm action defined induction structure new approach syntax variable binding iii note terms equivalent permutation follows induces action quotient set write equivalence class term 
iv perm set action endow powerset pow perm action defining pow perm sets endow disjoint union perm action defining vi unique function perm action emptyset 
vii say sub perm set restricts function perm 
case restricted action perm set 
set perm sets linearly ordered relation union perm action actions agree overlap general action perm set gives way regarding elements involving atoms construction action tells permuting atoms changes turns need theory variable renaming binding 
important part theory notion finite support 
generalises property syntax tree involves finitely atoms construction level element set equipped perm action 
definition finite support 
perm set element set atoms said support permutations perm fix element fix say finitely supported finite subset supporting 
perm set finite support property elements finitely supported 
proposition support object 
element perm set finitely supported finite subset supporting write supp necessarily unique finite set atoms call support leaving implicit perm set referred 
proof 
give proof emphasises role transpositions see equation predicate support play crucial roles theory develop 
give explicit formula supp terms action transpositions supp finite supp holds holds finitely 
cf 
definition quantifier definition show definition supp properties finite set atoms supporting supp 
ii supp 
iii finite set atoms supporting supp 
finitely supported finitely applications iii allows deduce supp finite set supporting 
need ii order prove iii 
property follows immediately definition supp equation 
suppose finite set atoms supporting 
supports gabbay pitts implies contained finite supp 
supp implies required 
prove property ii clearly suffices consider case suppose distinct atoms belonging supp 
definition supp set atoms finite find atom set distinct permutations equal 
equation required 
prove property iii suppose finite set atoms supporting supp perm satisfies 
prove may assume fixes element supported element fixed contrary assumption 
property assumption supp supp 
property ii permutation clearly fixes fixes element 
fixes supports combining equations yields required 
example 
consider perm sets example 
finite support property supp 
ii finite support property support term turns finite set atoms occurring free bound binding occurrences 
iii quotient set finite support property support equivalence class terms finite set atoms occurring freely representative class matter 
iv powerset pow necessarily finite support property 
example elements finite support pow subsets finite relative complement finite 
note perm set pow supported finite set atoms pow supported finite set pow perm 
perm action pow restricts subset pow fs finitely supported pow pow fs finite support property 
finite support property disjoint union form supported finite set atoms supporting form supported finite set atoms supporting 
vi empty set finite support property trivial reasons 
vii element linearly ordered set perm sets finite support property union supported finite set atoms supports containing 
fm set theory perm sets finite support property objects category morphisms called equivariant functions functions satisfying perm new approach syntax variable binding point develop theory name abstraction terms constructions category see pig appendix 
take set theoretic approach construct single large perm set fm finite support property theory expressed familiar set theoretic language 
benefit particular construction expressed language action permutations inherited ambient universe fm having define explicitly having prove associated finite support property 
compare approach denotational metalanguages initiated scott sco questions domain theoretic continuity implicit 
recall usual von neumann cumulative hierarchy sets sho pow limit ordinal generally set define cumulative hierarchy sets involving atoms pow limit ordinal denotes disjoint union sets pow powerset operation see iv example 
build notions permutation action finite support property set theoretic hierarchy perm set atoms replacing pow pow fs operation example iv fm fm pow fs fm fm fm limit ordinal properties noted example fm perm set finite support property fm sub perm set fm enabling union operation limit ordinals example vii 
generally consider union fm get large perm set perm class element finite support 
definition fm sets 
union fm ranges ordinals called fraenkel mostowski universe set atoms denoted fm 
suggestive names atm set functions giving inclusions disjoint union definition element fm form atm form set finitely supported set fm sets formed earlier ordinal stage cf 
example iv 
call elements form set fm sets elements form atm atoms slight abuse terminology 
just write perm action fraenkel mostowski universe satisfies atm atm set set pure fm sets 
element fraenkel mostowski universe fm tc denote transitive closure appropriate membership relation fm set 
note fm contains copy von neumann universe consisting fm sets tc disjoint atm 
call pure fm set 
usual set theoretic constructions carried fm build various sets 
particular set natural numbers usual constructions ordered pairs cartesian products disjoint unions power function sets 
precise develop properties fraenkel mostowski universe introduce suitable theory atoms fm sets classical order logic equality 
theory zermelo fraenkel set theory atoms see example 
signature containing binary relation symbol gabbay pitts membership constant set atoms axioms follows sets extensionality separation free induction collection pairing union powerset infinity 
atoms 
axiom sets expresses fact non atoms elements atoms empty axioms usual zermelo fraenkel set theory certain quantifications qx 
restricted qx 
range just sets sets atoms 
difference mathematically innocuous hard re machine checked versions zermelo fraenkel set theory develop theory fraenkel mostowski universe proof assistant 
author implementation theory isabelle generic theorem prover gab chapter iii gets round problem working founded setting replacing empty atoms called quine atoms qui section objects satisfying expense having alter axiom induction 
axioms capture basic set theoretic properties fm saying specific properties set atoms permutation action 
properties relevant intended application depend fact countably infinite element fm finitely supported sense definition 
capture properties axioms notation introduced definition finite pow fin fresh definition 
freely augment sparse language extensions involving new function relation symbols written font uniquely defined formulas 
particular definitions 
finite subsets 
define pow fin term denoting set finite subsets practically useful way formulating define pow fin set subsets containing empty set closed operations adding element subsets 
define pow cof term denoting set subsets relative complement pow fin 
permutation action 
define perm term denoting set permutations view action permutations perm defined recursion follows particular define term denoting result interchanging quantifier 
formula language finitely atoms formula expressing set atoms 
freshness relation 
define formula atom fresh respect follows reasonable definition freshness may immediately apparent proposition shows things holds support defined proposition 
new approach syntax variable binding proposition 
axioms fm set theory definition axioms plus axioms finite fresh 
modulo axioms axiom fresh equivalent asserting finite support property definition suitably formulated language pow fin perm particular fraenkel mostowski universe fm infinite set definition satisfies axioms interpret membership relation binary relation fm fm set constant element set atm fm 
proof 
prove note distinct atoms satisfying see proof property ii proof proposition 
deduce useful facts note define supp equation definition supp right hand side holds proof proposition yields supp pow fin finite supp 
conversely supp pow fin supp 
permutation perm finite pow fin fixes element supp satisfies permutation expressible composition finitely transpositions supp 
axiom fresh implies perm finite hard see atoms finite 
fresh holds supp defined finite set atoms supporting left right implication 
failure axiom choice 
literature careful presentations definition capture avoiding substitution quite choice function picking fresh variables see sto section example 
vague feeling concrete choices irrelevant fact choice functions inconsistent fm set theory axioms contradict axiom choice ac 
example axiom finite implies set subsets set non empty sets choice function argument fact graph function pow fin finitely supported shows 
shown axiom countable choice inconsistent fm set theory 
mechanised proof assistants set theory higher order logic include hilbert choice operator provide anonymous notations terms defined formulas see lap section 
operator prove ac add fm set theory inconsistency 
fully formal presentation fm set theory consistent useful augment language fm set theory notation axioms forming terms uniquely defined formula 
mentioned definition proceed semi formal fashion just introduce new notation fly uniquely defined formulas 
corollary allows bound support terms involving new notation support notation parameters 
consequence equivariance property cf 
equation important right 
lemma equivariance property fm set theory 
suppose formula fm set theory free variables contained list distinct variables provable fm set theory denotes simultaneous capture avoiding substitution xi free occurrences xi xi ranges 
proof 
induction structure properties constant relation symbols gabbay pitts language property trivial consequence usual properties equality properties follow definition permutation action definition 
corollary support defined notation 
suppose formulas fm set theory free variables contained indicated lists variables holds 
define term unique stands conjunction freshness formulas variable list 
supp supp supp xn 
xn 
proof 
suppose hold 
prove unique 
axiom fresh find lemma uniqueness part property hold definition lemma applied gives property 
example functions 
usual fm set partial function contains ordered pairs single valued fun holds fun collection separation fun holds domain definition uniquely defined fm set dom components elements dom 
similarly image img 
fun dom unique case usual define application notation stand corollary fun dom img fun dom mention piece notation associated functions 
fm sets function set fm set defined fun dom img definition introduced stand quantification finitely atoms 
nature set atoms fm set theory endows quantifier special properties proposition corollary show 
proposition freshness quantifier 
formula list distinct variables language fm set theory consider formulas fm set theory 
free variables contained list case formulas provably equivalent 
new approach syntax variable binding proof 
note axiom fresh fact sets closed finite intersection pow cof 
holds contains 
holds 
similarly holds intersection sets finite non empty holds 
suppose free variables contained holds 
equivariance property formulas fm set theory lemma deduce denotes result substituting free occurrences xi free occurrences xi xi ranges get implies 
imply 
corollary 

commutes propositional connectives formulas true provable fm set theory 
elements fm set empty support example pure sense quantification elements 
commutes existential universal xn xn 
proof 
properties quantifier follow easily dual nature established proposition 
property need note holds 
view proposition justified fresh atom case 
dual flavour quantifier exactly fit situations statement freshness variables required choose fresh variable particular property may need fact variable 
example reasoning conversion terms rules proposition top fashion satisfy side condition third rule picking fresh bottom fashion useful know fresh 
see examples phenomenon subsequent sections put quantifier 

abstraction sets proposition saw conversion terms formulated terms operation transposing variables term relation variable occur term 
view example ii equation proposition re express rule conversion abstractions proposition suggests generalise notion conversion syntax trees terms arbitrary objects fraenkel mostowski universe fm introduced definition 
binary relation fm defined hard see equivalence relation 
lemma shows equivalence classes fm sets 
gabbay pitts lemma atom abstractions 
fm set theory satisfies axiom collection fm fm set equivalence class pair 
call atom abstraction determined proof 
split proof cases 
case result follows easily verified implication suppose equivariance property lemma get leaves fixed 
left right implication just remains show applied conversely axiom fresh 
required 
corollary 
fm set theory satisfies supp supp 
proof 
note consequence equivariance property lemma holds 
property follows property easily verified fact haven required 
definition atom abstraction embodies form abstraction information hiding acts pair name component hidden anonymous 
embody notion abstraction function shows atom abstraction partial function construction domain definition partial function set atoms 
words notation example fun dom holds 
corollary dom supp special notation result applying partial function atom domain definition 
new approach syntax variable binding definition concretion atom abstractions 
result applying atom abstraction regarded partial function atom dom supp called concretion written form conversion holds atom abstraction concretion definition abstraction sets 
fm set collection axiom deduce existence fm set atom abstractions elements defined wonder condition included definition 
needed ensure concretion element fresh atom lands back xn note condition plus fact holds corollary proposition required 
proposition extensionality atom abstractions 
form conversion holds atom abstraction concretion xn extensionality principle holds proof 
find 
holds proposition 

abstraction set remarkably behaved 
particular preserves cartesian products disjoint unions function sets natural bijections proofs bijections see gab corollary 

inductively defined fm sets construct combination cartesian product disjoint union form inductively defined fm sets allow view sets syntax involving binders modulo conversion algebraic data types fm generalising classical theory syntax binders 
see need recall little theory inductively defined sets context fm set theory 
suppose definable function fm sets fm sets 
words suppose formula fm set theory indicated free variables satisfying gabbay pitts suppose unique 
suppose function monotone inclusions preserves unions countable ascending chains just require definable fm set theory consider countable chains fm sets definable fm set theory particular finite set atoms supporting set 
possesses pre fixed point call inductively defined fm set determined constructed familiar tarski formula inductively defined fm sets interested determined functions object part functors preserving inclusions 
words definable monotone function fm sets preserving definable countable chains definable function traditionally denoted acting functions fm sets preserves composition inclusion functions ix ix 
case initial algebra functor fm set function unique commutes 
paralleling construction lemma 
abstraction set operation definition monotone preserves unions definable countable ascending chains fm sets object part functor preserving inclusions 
proof 
fact preserves inclusions unions definable countable chains follows immediately characterisation fact corollary preserves implications commutes pure 
extend functor fm sets follows 
define give element preserves composition inclusion functions follow properties atom abstractions established section see gab section details 
new approach syntax variable binding known set functions built constants projections operations cartesian product disjoint union enjoy properties monotonicity preservation unions chains functoriality set functions form inductively defined sets initial algebra property 
starting point initial algebra semantics algebraic signatures usual zf set theory model von neumann hierarchy defined equation 
remains unchanged move larger cf 
fraenkel mostowski cumulative hierarchy fm replace zf fm set theory 
lemma shows larger setting fm sets abstraction set operation construction able form inductive fm set initial algebra property 
way able extend initial algebra semantics deal signatures binding particular get purely inductive representation quotient modulo equivalence set syntax trees signature 
treat case arbitrary binding signatures see gab section illustrate ideas respect paradigmatic example signature untyped calculus 
theorem inductive fm set 
consider fm set untyped terms inductively defined fm set fm set equivalence classes terms modulo equivalence relation conversion bijection inductively defined fm set proof 
follows combining characterisation proposition definition atom abstraction section terms equivalence relation equation 
passing bijectively equivalent set replace global quotienting local inductive quotienting simplifying step quotient sets quotient pleasant properties 
particular lemma gives simple characterisation functions atom abstractions terms functions pairs lemma 
functions fm unique function satisfying satisfies proof 
note exists applying proposition corollary holds assumption property 
satisfies proposition condition 
function satisfying property surjection conversely suppose condition hold 
proposition define fm set gabbay pitts single valued relation definition axiom fresh find property satisfying picking concretion definition property property satisfies proposition 
element furthermore property holds property holds case required 
locally fresh atoms 
satisfying property notation case variables bound expression element specified lemma 
property eliminator abstraction set construct satisfies conversion law xn case special case construct lemma unique element denote new bound variable expression satisfying new effect expression new denotes locally fresh atom expression meaningful value independent choice sense holds fresh atom example property element new fact bijection direction case new new expression formers case new part term calculus atom abstractions forms part functional programming language proposed authors pig 
returning inductively defined fm set introduced theorem property disjoint union components var app lam denote inclusion functions components disjoint union 
combining fixed point new approach syntax variable binding initial algebra properties lemma obtain principles structural iteration recursion induction inductive fm set representing terms modulo conversion 
compare recursion scheme gom section 
theorem structural iteration 
functions fm satisfying unique var app lam proof 
lemma condition means induces function fit give function coproduct function unique function initial algebra property 

note structural iteration principle proves existence total functions property far abstractions concerned specify function fresh bound variables 
slightly strengthen theorem requiring partial function dom condition sense 
supp case examples dom fact corollary structural recursion 
functions fm satisfying unique var app lam proof 
passage iteration primitive recursion initial algebras uses standard trick relying uniqueness part initial algebra property define consider var app lam note satisfies condition property satisfies 
function uniquely defined iteration theorem 
writing projection functions verifies identity function id satisfy conditions required function iteratively defined var app lam lam lam 
note triple functions suitable structurally iterative definition lam satisfies necessary condition property 
id easily verifies uniquely defined function required property 
theorem structural induction 
subset fm prove suffices show var app lam proof 
condition tells inclusion gabbay pitts factors property see third component disjoint union 
property 
structural induction principle correspond informal inductive arguments equivalence classes terms proceed picking representative names bound variables applying structural induction level syntax trees structural induction defined theorem leaving mute tedious proofs choices affect argument 
effect restricting objects finite support definition equivariant properties lemma fm set theory ensures choices guaranteed affect meaning provided freshness conditions property theorem satisfied 
rest section give simple examples theorems 
example capture avoiding substitution 
theorem take define var app lam note satisfies condition property 
theorem unique function value write sub satisfying sub var var sub app app sub sub sub lam lam sub properties follows bijection theorem elements equivalence classes terms function sub corresponds capture avoiding substitution function 
note clause abstractions lam specify result substitution simple case fresh order sub defined 
property capture free substitution free occurrences due free occurrences analogue property sub proved structural induction sub theorem making easily verified fact var applying proposition sub lemma element sub induces function 
way get substitution function satisfying sub 
compare substitution function section 
example size function 
theorem set natural numbers constant function addition function deduce unique function satisfying var app lam new approach syntax variable binding condition satisfied case pure fm set see 
proposition property conjunction equivalent lam corollary implies holds strengthen defining clause lam formalism developed allows express easily properties expect size function equivalence classes terms 
compare example complications encountered gordon melham defining similar function recursion axiomatisation conversion gom section 
example set free atoms 
theorem take set pow fin finite sets atoms pow fin singleton function pow fin pow fin pow fin union pow fin pow fin subtraction function 
note satisfies condition support finite set atoms pow fin just unique function pow fin satisfying var app lam conjunct 

argument previous example 
function gives structurally iterative definition finite set free atoms elements 
structural induction principle theorem show fact supp 
bijection theorem set names free variables equivalence class terms identified support corresponding element cf 
example iii 
particular supp corresponds subset closed terms modulo 
example binding occurrences atoms 
simple define function pow fin sending term finite set atoms occur binding position 
clearly set invariant conversion induce function 
correspondingly function ba pow fin fm picking finite set binding atoms elements sense satisfies ba var ba app ba ba ba lam ba note theorem define function case condition require pow fin certainly false 
argue contradiction see function exists fm picking atoms support ba ba property lam var satisfies ba ba ba ba contradicting choice theory adapted expressing usual forms recursion induction syntax time dealing freshness variables variable renaming systematically meta level 
course needs done establish utility structural recursion induction principles see section 
regard sheer simplicity examples compared analogous examples formalisms sign 
finish section mentioning extensions theory 
gabbay pitts binding signatures 
terms lambda calculus terms signature binary operation application unary binder abstraction 
results section extended deal general signatures consisting operators takes arguments argument ary abstraction binding signatures considered section 
function fm sets corresponding signature takes form summands factors generalising theorem show inductively defined fm set determined bijection set terms modulo conversion binding signature 
fm set initial algebra functor associated shape signature read principles structural recursion induction 
sorted signatures dealt fm sets mutually inductively defined functions 
see gab section details 
splitting set atoms 
support syntax involving finitely different sorts variables mild generalisation fraenkel mostowski universe fm definition 
partition set atoms countably infinite set infinite subsets pow fin working sets equipped action subgroup perm consisting permutations respect partition isomorphic product group perm repeat development sections forming universe sets hereditarily finite support respect action corresponding generalisation fm set theory fraenkel mostowski set theory sorts atoms fms set theory axioms give 
theory develop theory transpositions freshness predicate abstraction sets 
combination cartesian products disjoint unions form inductively defined sets universe just section 
example distinct sorts atoms naming type variables term variables respectively mutually inductively defined fms sets type tyvar fun type type type term var app term term lam type term spec term type gen term represent respectively types terms girard reynolds polymorphic lambda calculus gir rey modulo renaming bound type variables bound term variables 
disjoint union inclusion functions named explicitly indicate intended meaning 

related origin lies calculus fragment ml introduced second author stark pis sta explore properties respect semantic equivalence programs call value higher order functions dynamically created names see 
sta stark studies model calculus moggi dynamic allocation monads mog presheaf category set category finite ordinals injective functions 
crucial ingredients dynamic allocation monad object names new approach syntax variable binding inclusion functor set shift functor set set 
ingredients occur subsequent modelling calculus names set fms sta modelling variable binding syntax hof presheaf categories set considered 
somewhat overlooked model calculus mentioned pis examples full subcategory set objects pullback preserving functors 
equivalent known topos called topos category continuous sets topological group perm permutations countably infinite set subspace baire space see joh lemma mam section iii 
put concretely point objects topos perm sets definition element finite support definition morphisms equivariant functions defined section 
hand topos relates cumulative hierarchy fm sets defined equation usual von neumann cumulative hierarchy defined equation relates topos sets see category theory universes sets hand topos sheaf presheaf category set inclusion sending fm set atoms object names set abstraction operator shift functor mentioned 
presheaf toposes hof topos categories equipped faithful functor set support initial algebra semantics signatures binding 
topos associated fm set theory advantage related categories 
known toposes correspond theories extensional higher order intuitionistic logic las 
presheaf toposes general topos models classical intuitionistic higher order logic furthermore higher order structure function power objects amenable making calculations compared higher order structure presheaf categories 
looking single general purpose setting modelling variable binding syntax logic topos bit powerful familiar 
view establishing things nice categorical algebra de nameless style treating variable binding substitution 
contrast useful logic variable binding names occur explicitly 
motivation nameless style partly formalise existing common practice logic serve basis proving de bruijn formulations correct respect concrete representations 
crucial notion finite support leading quantifier fm set theoretic notion atom abstraction toposes apparently presheaf toposes pleasant properties 
worth emphasising chosen set theoretic presentation think accessible fundamental ideas names name abstraction underlie fm set theory topos 

developments fraenkel mostowski permutation model years old 
put new 
idea want treat syntax renamings variables hardly original hope demonstrated convincingly theory really takes combines idea subtle notion finite support inherent fraenkel mostowski model 
introduced useful fresh names new set forming operation name abstraction properties better suited modelling variable binding function space purpose 
things saw theory inductively defined notion abstraction correctly model equivalence classes variable binding syntax 
time remain pleasantly close familiar theory order algebraic data types witness theorems examples 
believe theory inductively defined fm sets useful setting developing programming language semantics structural operational semantics plo 
syntax directed rule inductive definitions relations quite contain side conditions freshness variables hope assimilated manipulated conveniently freshness predicate quantifier introduced 
approach particularly relevant labelled transi gabbay pitts tion semantics process calculi calculus relations mpw abg cag complicated forms binding names names restriction play key role analyses name abstraction functions hms des entirely satisfactory 
formalism permutation actions finite support rediscovered independently honda general framework processes hon 
features finite state transition systems checking bisimilarity calculus processes mop 
cardelli gordon taken ideas renaming quantifier part modal logic ambient calculus cag 
revised expanded version gap 
appeared theory described developed applied somewhat different directions 
author developed implementation fm set theory isabelle generic theorem prover pau 
required deal proof engineering reuse existing isabelle zf theory account may chapter iii author thesis gab chapter ii contains development fm set theory detailed 
secondly begun design ml style metalanguage freshml programming recursively defined functions inductively defined 
ingredients freshml described pig 
type atoms type constructor atom abstractions facilities defining recursive functions involving locally fresh names patternmatching atom abstractions cf 

freshml type system infers conventional typing information information freshness assertions crucial point type system ensures language facilities manipulating bound names typed programs ways insensitive renaming bound names 
abg abadi gordon calculus cryptographic protocols spi calculus 
information computation 
bar barendregt lambda calculus syntax semantics rev edn 
north holland amsterdam 
bur burstall proving properties programs structural induction 
computer journal 
bur burstall design considerations functional programming language 
proc 
state art conference copenhagen 
cag cardelli gordon logical properties name restriction 
typed lambda calculus applications th international conference vol 
lecture notes computer science 
springer verlag berlin 
cag cardelli gordon mobile ambients 
theoretical computer science 
chu church 
formulation simple theory types 
journal symbolic logic 
cur 
curien 
categorical combinators sequential algorithms functional programming 
birkh user basel 
db de bruijn lambda calculus notation nameless dummies tool automatic formula manipulation application church rosser theorem 

math 
des despeyroux higher order specification pi calculus 
ifip international conference theoretical computer science ifip tcs sendai japan 
dps despeyroux pfenning sch rmann 
primitive recursion higher order syntax 
typed lambda calculus applications rd international conference vol lecture notes computer science 
springer berlin pp 

fms fiore moggi sangiorgi fully model calculus extended 
eleventh annual symposium logic computer science 
ieee computer society press washington dc pp 

fourman 
sheaf models set theory 
journal pure applied algebra 
fiore plotkin turi syntax variable binding 
th annual symposium logic computer science 
ieee computer society press washington dc pp 
gab gabbay theory inductive definitions equivalence semantics implementation programming language 
phd thesis cambridge university 
gir girard interpr tation fonctionelle des coupures dans ordre sup 
phd thesis universit paris vii 
gom gordon melham hol 
theorem proving environment higher order logic 
cambridge university press cambridge uk 
gom gordon melham axioms alpha conversion 
theorem proving higher order logics th conference tphols vol 
lecture notes computer science 
springer berlin pp 
gap gabbay pitts new approach syntax involving binders 
th annual symposium logic computer science 
ieee computer society press washington dc pp 

goguen thatcher wagner wright initial algebra semantics continuous algebras 
journal association computing machinery 
new approach syntax variable binding gun gunter semantics programming languages structures techniques 
foundations computing 
mit press cambridge ma 
hms honsell miculan calculus inductive type theory 
technical report dipartimento di matematica informatica universit degli studi di udine 
hof hofmann semantical analysis higher order syntax 
th annual symposium logic computer science 
ieee computer society press washington dc pp 

hon honda elementary structures process theory sets renaming 
mathematical structures computer science 
axiom choice 
barwise editor handbook mathematical logic 
north holland amsterdam pp 

joyal moerdijk algebraic set theory 
number london mathematical society lecture notes mathematics 
cambridge university press cambridge uk 
joh johnstone quotients decidable objects topos 
math 
proc 
cambridge philosophical society 
jeffrey theory bisimulation local names 
th annual symposium logic computer science 
ieee computer society press washington dc pp 

lap lamport paulson specification language typed 
acm transactions programming languages systems 
las lambek scott higher order categorical logic 
cambridge university press cambridge uk 
mar martin intuitionistic type theory 
bibliopolis 
mam maclane moerdijk sheaves geometry logic 
topos theory 
springer new york 
mcm mcdowell miller logic reasoning higher order syntax 
th annual symposium logic computer science 
ieee computer society press washington dc pp 

mog moggi view programming languages 
technical report ecs lfcs department computer science university edinburgh 
mop montanari pistore calculus structured coalgebras minimal hd automata 
th international symposium mathematical foundations computer science bratislava republic vol 
lecture notes computer science 
springer berlin 
mpw milner parrow walker calculus mobile processes parts ii 
information computation 
milner tofte harper macqueen definition standard ml revised 
mit press cambridge ma 
pau paulson isabelle generic theorem prover 
vol 
lecture notes computer science 
springer berlin 
pfe pfenning elliott higher order syntax 
proc 
acm sigplan conference programming language design implementation 
acm press new york pp 

pig pitts gabbay metalanguage programming bound names modulo renaming 
backhouse oliveira editors mathematics program construction 
th international conference mpc ponte de lima portugal july 
vol 
lecture notes computer science 
springer heidelberg pp 

plo plotkin structural approach operational semantics 
technical report daimi fn aarhus university 
pam paulin mohring inductive definitions system coq rules properties 
bezem groote editors typed lambda calculus applications 
vol 
lecture notes computer science 
springer berlin pp 

pis pitts stark observable properties higher order functions dynamically create local names new 
mathematical foundations computer science proceedings th international symposium gda sk 
vol 
lecture notes computer science 
springer berlin pp 

pis pitts stark observable properties higher order functions dynamically create local names preliminary report 
workshop state programming languages copenhagen 
acm sigplan 
technical report yaleu dcs rr yale university department computer science pp 

qui quine set theory logic rev edn 
harvard university press ma 
rey reynolds types abstraction parametric polymorphism 
mason editor information processing 
north holland amsterdam pp 

sco scott type theoretical alternative iswim cuch 
theoretical computer science 
sho shoenfield axioms set theory 
barwise editor handbook mathematical logic 
north holland amsterdam pp 

sta stark names higher order functions 
phd thesis university cambridge 
published technical report university cambridge computer laboratory april 
sta stark categorical models local names 
lisp symbolic computation 
sta stark fully domain model calculus 
th annual symposium logic computer science 
ieee computer society press washington dc pp 

sto stoughton substitution revisited 
theoretical computer science 
