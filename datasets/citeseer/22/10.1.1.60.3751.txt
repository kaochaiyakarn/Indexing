optimized index structures querying rdf web storing querying resource description framework rdf data basic tasks semantic web application 
number storage systems provide assistance task 
current rdf database systems optimized indexes results poor performance behavior querying rdf 
describe optimized index structures rdf show process evaluate queries index structure describe lightweight adaptable implementation java provide performance comparison existing rdf databases 

years rdf emerged prevalent data format semantic web 
rdf graph data format schema self describing meaning labels graph graph describe data 
applications deal rdf need store data persistently perform queries data set 
systems jena sesame redland forth rdf suite provide storage infrastructure rdf data 
looking index structures systems systems index structure support typical query scenarios data web results poor query answering performance cases 
furthermore judge piece information usually need look context information 
example context consider source piece information 
want trust information coming gov information com vice versa 
notion context www org andreas stefan decker digital enterprise research institute deri national university galway ireland university road galway ireland firstname lastname deri org missing current rdf storage systems 
adapt database techniques rdf data storage indexing results improved query answering performance capabilities compared current rdf storage systems 
identifies combines techniques database area arrive system improved efficiency storing retrieving rdf 
specifically contributions define realize complete index structure including full text indexes rdf triples context 
describe yars lightweight open source implementation index structure java small footprint embedded application adapted special application needs 
remainder organized follows section reviews data model data queries introduces example 
section optimized index structures tailored speeding queries rdf data 
describe perform query processing join spj queries section 
section presents architecture implementation rdf store yars prototype system 
section evaluate yars section discuss related 
section concludes 

preliminaries section give example rdf data web define data model query language 
example foaf friend friend vocabulary describing people links things create foaf frequently describe person homepage machine readable format example data distributed semantic web 
shows small rdf graph describing authors foaf vocabulary 
foaf example originating different sources describing authors 
contexts graphs sw deri org foaf rdf www isi edu stefan foaf rdf 
data model defining standard rdf data model described various recommendations 
definition rdf triple rdf node set uri set blank nodes set literals triple called rdf triple element rdf triple called rdf node 
triple called subject predicate object 
rdf specification define notion context usually applications require context store various kinds metadata set rdf statements 
macgregor ko reported application stored information ships position argued quads suitable formalism capture context 
interpretation context depends application 
example information integration case context uri file repository triple originated 
capturing provenance fundamental necessities open distributed environments web quality data judged origin 
contexts useful application scenarios versioning access control 
www foaf project org definition triple context pair triple called triple context please note triple context equivalent quad 
syntax notation syntax rdf 
full description see 
self contained introduce basic syntactic primitives 
brackets denote uris quotes denote literals blank node identifiers start 
exists number syntactic shortcuts example introduce predicate object subject 
namespaces introduced prefix keyword 
figures show syntax contexts example depicted 
prefix foaf xmlns com foaf www org andreas foaf name andreas foaf mbox mailto andreas deri org foaf www deri org foaf knows decker cn stefan syntax context sw deri org foaf rdf 
prefix foaf xmlns com foaf decker cn stefan foaf name stefan decker foaf firstname stefan foaf mbox mailto stefan decker deri org syntax context www isi edu stefan foaf rdf 
offers extension rdf data model primitives variables grouping graphs 
variables denoted question mark 
rdf subgraphs subject object statement 
able represent lists nodes 
yars query language able express queries sets language extensions required 
extensions introduce namespaces ql yars set language extensions predicates ql ql select enable formulate queries 
query consists clause comprises set statements contain variables 
select clause determines format result set 
second set language extensions define query primitives listed 
context predicate denotes subgraph grouped subject occurring context provided object 
yars context predicate enables express notion context rdf data model 
example yars context predicate specifies want query statements originating sw deri org foaf rdf 
yars keyword predicate allows represent keyword containment requirement subjects 
yars keyword example requires variable needs contain string 
predicate yars prefix specify variable subject match prefix denoted object 
example yars prefix predicate example specifies statements foaf predicates query answering 
predicate yars count query occurrence counts statements quoted subject 
object variable bound occurrence count access pattern query evaluation 

index organization goal index support evaluation spj queries 
lowest level index structure enables fast retrieval quads combination subject predicate object context 
want avoid expensive joins possible trade index space retrieval time 
persistent indexes trees understood data structure support insert deletes lookups especially range lookups 
conceptually www org ql sw deri org yars ql select ql foaf name yars keyword yars prefix foaf yars context sw deri org foaf rdf query get foaf information person name containing specified source 
key value pairs retrieval key yields value disk operations 
index structure contains sets indexes lexicon covers string representations rdf graph 
quad indexes cover quads 
lexicon lexicon indexes operate string representations rdf nodes enable fast retrieval object identifiers oids rdf nodes 
oids represented stored disk bit 
rdf nodes multiple indexes mapping string values oids saves space 
processing comparing oids faster comparing strings 
lexicon consists different indexes indexes map strings oids keyword index inverted text index 
index indexes map oids string values rdf nodes vice versa 
oids assigned increasingly monotonically unique node inserted 
oid special oid denotes variable 
alternative keeping index compute hash node resulting number oid 
hash functions small probability collisions sha md produce bit keys oids increase index size considerably 
keeping separate index mapping string values oids storing mapping trees advantage able perform prefix queries node values index sorted 
table shows index created example graph provided 
key value andreas stefan stefan decker www org andreas decker cn stefan sw deri org foaf rdf www deri org www isi edu stefan foaf rdf xmlns com foaf firstname xmlns com foaf knows xmlns com foaf mbox xmlns com foaf name xmlns com foaf mailto andreas deri org mailto stefan decker deri org table oids node values example dataset index keyword index prevalent type queries today explore web data keyword queries 
speed type queries lexicon keeps inverted index string literals allow fast full text searches 
literal tokenized words 
word represents key index sorted list oids occurrences 
table shows index constructed example 
full list storage scheme described keep oids document identifiers hitlist 
keeping number hits helps determine join ordering query processing 
key hits list hits andreas decker stefan table keyword hitlist pairs literals inverted text index 
quad indexes section shows need restricted number indexes cover possible access patterns rdf data 
access patterns want avoid expensive joins possible 
need index allows lookup combination directly joining results lookups multiple indexes 
quad indexes notion access patterns 
definition access pattern access pattern quad combination specified variable 
example access pattern quad specified variables 
access pattern 
denotes quads subject equals nodes unspecified value 
compute total number access patterns just consider element quad exist possibilities node specified variable 
total number access patterns 
table shows possible access patterns quad lookups 
access pattern access pattern 







table possible quad patterns total different patterns cover possible access combinations 
naive implementation complete index quads need indexes access pattern 
implementing complete index naive way prohibitively expensive terms index construction time storage utilization 
section show cover access patterns just indexes 
combined indexes reduce number indexes needed leverage fact tree provide support range prefix queries 
combined index quad able support queries access patterns table 
example lookup access pattern 
resolves prefix query index 
need keep separate index reuse index 
combined indexes reduces number necessary indexes implement complete index quads 
table shows indexes access pattern cover 
ocs 






csp cp os 
table indexes needed cover access patterns 
simplify speed lookup operations access patterns implement index containing full quads key 
cp access pattern having index keep remaining elements quad linked lists value part 
means store quad key index key pocs index 
table shows pocs indexes example dataset 
example retrieve information predicate oid resolves xmlns com foaf name perform range query index pocs min min min max max max equivalent prefix query keys start oid 
result operation iterator keys specified predicate 
value value table pocs indexes example 
remaining quad indexes constructed accordingly 
occurrence counts large number applications data mining ranking user interface generation require collect statistical information data set 
allow applica tions quickly access basic statistical information able store occurrence counts directly index 
key inserted index generate additional keys denoting access patterns 
utilize unused value field tree index record occurrence counts access patterns 
quad index construct key contains node oids consisting key contains node oid contains second node oid contains node oids 
example consider quad www org andreas foaf knows decker cn stefan sw deri org foaf rdf resolves key insert index 
generate additional keys insert index key 
value part initialized access pattern value part incremented 
table illustrates index looks adding occurrence counts 
note value part key denotes quad remains empty 
value 
table index occurrence counts stored index 
determining result size access pattern simple looking corresponding access pattern key index 
value associated key number resulting quads access pattern example index lookup key yields total number quads index index table 
index lookup key returns number quads subject www org andreas lookup number quads subject predicate foaf knows 
counting storing occurrence counts quite expensive adding counts performed batch operation quad indexes constructed 

query processing section describes perform index lookups indexes process execute conjunctive queries 
index lookups indexing structure set lookup operations lexicon quad indexes support 
table lists atomic lookup operations 
example prefix lookup xmlns com foaf returns oid lower bound oid upper bound see table content index 
quad operation returns oids nodes needed subsequent steps query processing 
operations analogously details please consult table 
operation parameter index result deployed node value oid oid node value prefix range lower node value oid upper oid keyword inverted iterator oids index keyword inverted result size index access quad iterator list pattern indexes oids access quad result size pattern indexes table lookup operations index structure 
query plan section describes combine lookup operations different indexes able answer queries 
query processing stage results lexicon indexes combined results quad indexes results quad indexes 
simplest case query ask quads matching quad pattern involves looking oids node values specified query oids index constructing keys lower upper bounds determine result set ranging corresponding quad index derive matching quads 
example consider query asks quads literal stefan decker object stefan decker 
look oid literal index 
result oid construct set keys lower bound min min min upper bound ql select ql yars context yars prefix www cnn com query return statements contexts starting www cnn com 
max max max 
perform range query ocsp quad index resulting quads translated node values returned user 
consider query retrieve statements associated context prefix example return statements originate uris starting www cnn com 
shows query notation 
far considered queries involve particular quad pattern 
complex queries consist multiple quad patterns connected logical conjunctive queries evaluated joins 
able efficiently answer conjunctive queries perform query optimization step involves reordering quad patterns 
particular query execution step start quad pattern yields smallest result set subsequently combined quad patterns specified query 
common heuristics estimate size result set 
example heuristics estimate result size access pattern number variables specified access pattern 
relying heuristics operation accesses occurrence counts quad indexes accurately determine result size access pattern 
result plan evaluation list variable bindings oids 
result construction query language closure means results query expressed rdf fed query 
ql select clause query specifies template construct results 
type template set rdf lists variable bindings constitute answer query 
type template include rdf statements contain variables bound query execution 
result query processing set rdf statements values filled corresponding variables 
select clause specified query set lists variable bindings returned answer query 

architecture implementation goal implementation build system offers scalable query facilities suited aggregated rdf data collected web providing lightweight implementation systems need store retrieve rdf data semantic web application 
prototype system available download released bsd style license 
components basic architecture yars system depicted 
yars consists access interface storage component handles persistent inmemory indexes query handler perform query processing evaluation 
system implemented java web application runs inside tomcat application server uses jena parser parse incoming data queries 
size resulting war file including packages making yars applicable applications small footprint required 
excluding test cases external components system currently consists lines java code 
yars components data flow queries statements access interface defined access interface operations insertion put querying get deletion delete 
chose network sw deri org yars yars html interface possible standard browsers get operations versatile clients curl wget interface yars 
data format input results returned triples format 
support result format index structure return results streaming fashion need construct result set memory 
storage able implement index organization chose lightweight open source library includes implementation trees persistent storage data disk 
consist record manager offers caching transactions 
indexes candidates high number buffers lookups indexes frequent 
chose pre existing tree implementation developing tree similar reasons 
additional layer implement handling concatenated keys quad indexes 
text inverted index constructed held memory better access performance 
insert delete operations transactions 
indexes created batch operations index 

experimental results conducted performance evaluation synthetic dataset lehigh university benchmark containing triples experiments 
created dataset univ file size triples format mb 
considered rdf stores evaluation sesame redland jena 
shows sesame generally supersedes jena performance results include benchmarking 
tried install failed get running version 
concentrated efforts sesame rc redland 
test server pentium ghz machine gb main memory running debian 
yars sesame running inside tomcat servlet container vm memory size set gb index construction mb retrieval tests 
clients yars sesame programmed java 
contrast sesame yars redland provide access interface 
perl api add data repository perform queries 
curl se sourceforge net sesame lacks context support refrained reification sesame keep context information just stored triples 
context mechanism enabled redland store 
index construction index construction test loaded files triples format repository 
index creation time yars consists creating quad index excluding statistical information lexicon indexes inverted index comparable repositories construct indexes 
shows performance measurements index construction process 
seconds sesame mysql sesame native yars redland triples index construction times synthetic dataset able discuss results briefly introduce indexing methods various data stores 
redland stores indexes hash tables 
po index maps key value index maps sp index maps native store sesame included sesame distribution 
internally resources literals mapped oids separate indexes kept queries specifying expensive join performed 
yars keeps complete index quads statistics indexes 
keeping full indexes sophisticated index structure index construction times yars comparable systems 
yars trades index space query time 
table shows yars requires space sesame implementations 
sesame include notion context means index contains information 
triple store triples occur multiple files contexts just stored 
quad store triples stored times occur different contexts 
please note keep byte oids sesame byte oids roughly doubles index size 
system index size bytes redland sesame mysql sesame native yars table index size synthetic univ dataset 
queries queries associated lehigh benchmark take account reasoning created basic queries test different access patterns different characteristics 
please note perform query experiments plain rdf semantics take reasoning account 
query rdf type univ www university edu univ worksfor table quad queries evaluation 
query executed repository random mb file copied hard disk flush buffers 
issued query times included result wanted test index lookup time cache manager persistence layer 
query redland sesame sesame yars mysql native table performance results quad queries 
results obtained query tests reflect internal index structures various repositories 
query redland fast query hash index lookup po index 
sesame mysql performs quite probably due extensive optimizations mysql 
sesame native needs join results index index slow returning results 
yars performs just index lookup streams back results 
result size query triples 
queries returning smaller result sets usually triples quads 
performance results reflect index organization store 
yars keeps complete index quads quad queries mapped simple index lookup operations 
yars overhead resolving dependencies order different indices shown query 
soon stores multiple indexes table scans involved yars shows better performance 
query yars faster redland faster available sesame implementations 

related presents path indexing schema distributed rdf repositories sesame system discuss improve retrieval performance local storage 
indexing schema combined enable distributed indexes 
presents indexing techniques object oriented databases 
techniques focussing path expressions combination object oriented primitives inheritance classes 
index interpreted index path length allows multi directional queries index allows query properties pointing certain objects 
additional extension index structure supports context mechanism 
lore index scheme semistructured data 
data model root node exists rdf just directed labelled graph requirements 
lore uses various path indexes cover access patterns opposed complete index 
query facility offer tradition rdf stores jena sesame 
rdf repositories store data relational database offer limited reasoning capabilities 
contrast focus fast storage retrieval describe indexing techniques multi dimensional access methods tree similar 
multi dimensional indexing methods trees space filling curves entirely suited problem queries particular dimension 

query processing rdf important issue semantic web applications determined set indexes required efficient rdf query processing 
comparison rdf indexing approaches index restricted set access patters approach provides indexes access patterns rdf context 
utilize indexes string representations rdf graph efficiently answer queries characteristic data web 
thomas nel suggesting concatenated keys carlos discussion comments 
supported science foundation ireland sfi deri lion project sfi ce european union ist programme dip project fp 
alexaki christophides karvounarakis plexousakis tolle 
managing voluminous rdf description bases 
proceedings nd international workshop semantic web semweb conjunction www hongkong may 
beckett 
design implementation redland rdf application framework 
computer networks 
berners lee 
notation ideas web architecture 
www org designissues notation html 
bertino 
indexing technique object oriented databases 
proceedings th international conference data engineering kobe pages 
ieee computer society apr 
broekstra kampman van harmelen 
sesame generic architecture storing querying rdf rdf schema 
proceedings nd international semantic web conference sardinia pages 
springer 
comer 
ubiquitous tree 
acm computing surveys 
guha 
rdf database 
www guha com 
guha mccool fikes 
contexts semantic web 
proceedings rd international semantic web conference hiroshima nov 
guo pan heflin 
evaluation knowledge base systems large owl datasets 
proceedings rd international semantic web conference hiroshima pages 
lncs springer 
hayes 
rdf semantics 
recommendation feb 
www org tr rdf mt 
leslie jain 
efficient search multi dimensional trees 
proceedings th international conference large data bases zurich pages 
morgan kaufmann sept 
macgregor 
ko 
representing contextualized data semantic web tools 
proceedings st international workshop practical scalable semantic systems sanibel island florida oct 
manola miller 
rdf primer 
recommendation feb 
www org tr 
mchugh abiteboul goldman quass widom 
lore database management system semistructured data 
sigmod record 
melnik raghavan yang garcia molina 
building distributed full text index web 
proceedings th international world wide web conference hong kong pages 
stuckenschmidt 
houben broekstra 
index structures algorithms querying distributed rdf repositories 
proceedings th international world wide web conference new york pages may 
wilkinson kuno reynolds 
efficient rdf storage retrieval jena 
proceedings st international workshop semantic web databases located vldb berlin pages sept 

