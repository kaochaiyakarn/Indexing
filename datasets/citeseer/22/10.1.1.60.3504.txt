partial order reduction probabilistic branching time christel baier pedro argenio marcus institut informatik universidad nacional de universit bonn bonn germany argentina past partial order reduction successfully combat state explosion problem context model checking non probabilistic systems 
linear time branching time specifications methods developed apply partial order reduction context model checking 
results published give criteria applying partial order reduction verifying quantitative linear time properties probabilistic systems 
presents partial order reduction criteria markov decision processes branching time properties formulas probabilistic computation tree logic 
provide comparison results established far reduction conditions markov decision processes 
key words partial order reduction markov decision process pctl model checking probabilistic visible bisimulation ample set model checking technique allows fully automatic verification property specified temporal logic system modelled network finite state automata 
allows analysis qualitative properties request eventually answered 
example systems nature may lead occasional unanswered request 
consider instance protocol attempts access lossy medium bounded number times aborts 
property access eventually granted obviously false 
ensure quality service access granted 
purpose model checking extended email baier cs uni bonn de supported dfg project dfg nwo project voss ii email unc edu ar supported ec project ist pict baier argenio deal quantitative properties access eventually granted probability :10.1.1.49.6154
case systems modelled networks markov decision processes mdp short 
reason non probabilistic systems diversity methods devised tackle state explosion problem arises network automata composed 
particular approach partial order reduction observation execution order concurrent operations usually change validity property 
fixing particular order interleaving operations generating helps reduce number states transitions needs explored preserving properties interest 
baier gr er argenio developed independently partial order reduction criteria mdps preserve linear time properties formalized quantitative ltl properties 
approaches rely modifications peled ample set methods 
main contribution presentation partial order reduction criteria verifying branching time properties formalized means formulas probabilistic computation tree logic 
criteria applied ordinary transition systems reduce criteria suggested gerth non probabilistic branching time properties 
discuss connections reduction criteria process equivalences trace distribution equivalence suitable notions simulation bisimulation 
partial order reduction criteria verifying branching time properties strong lead minor savings states contribution impact practical theoretical aspects 
reduction shrink state space mdp transitions increase efficiency probabilistic model checking procedure 
relies solving linear programs number linear equalities state number outgoing transitions removing certain transitions efficient reduction algorithms operate syntactic descriptions processes simplifies linear program solved yield speed analysis 
second reduction criteria provide justification modifying probabilistic program analyzed hand atomic regions certain program fragments 
third context wide range research results discuss possibility adapt formal techniques reason non probabilistic systems probabilistic setting results theoretical interest prove existence conservative probabilistic extension partial order reduction criteria preserve branching time properties 
fact research model checking algorithms probabilistic systems started years ago question partial order reduction probabilistic systems possible open long time 
concept atomic regions known helpful avoid interleaving concurrent activities seen user driven reduction technique reduce state space 
baier argenio organization 
section briefly summarizes preliminaries concerning model markov decision processes 
section recalls criteria ample method linear time properties suggested 
main result section provide criteria preserve probabilistic branching time properties 
section explain connections reduction criteria process equivalences 
ends brief section 
preliminaries mdp state outgoing action labeled transitions associated probability distribution yields probabilities successor states 
assume state outgoing transitions different action labels 
corresponds socalled reactive model classification 
addition assume labelling function attaches state set atomic propositions assumed fulfilled state atomic propositions serve atoms formulate desired properties temporal logical framework 
definition markov decision process mdp mdp tuple act init ap finite set states act finite set actions act dimensional probability matrix init initial state ap finite set atomic propositions ap labeling function 
act denotes set actions enabled state set actions act state state require act sp action act 
particular assume terminal states 
intuitive operational behavior mdp follows 
current state actions act chosen non deterministically 
action executed leading state probability 
refer successor 
action called probabilistic action random effect state enabled successors 
called nonprobabilistic 
particular actions act non probabilistic notion mdp reduces ordinary transition system outgoing transition state action 
modelling realistic systems actions non probabilistic sense yield unique successor states 
paths 
infinite path mdp sequence act act si si si 
write paths form 
denotes starting state trace word alphabet ap obtained projection state labels 
finite paths denoted greek letter finite prefixes infinite paths state 
notations baier argenio trace infinite paths state length number actions 
scheduler denotes instance resolves nondeterminism states yields markov chain probability measure paths 
schedulers essential semantics pctl 
formal definition see 
probabilistic computation tree logic pctl 
pctl probabilistic variant ctl introduced markov chains markovian models non determinism 
follow approach de alfaro consider full logic pctl step operator 
define pctl state formulas denoted capital greek letter pctl path formulas denoted grammar true true ap atomic proposition 
denotes standard operator 
intuitive meaning path formula eventually hold continuously satisfied 
state subscript describes probability bound say real number interval 
holds state scheduler probability measure infinite paths starting fulfilling path formula meets probability bound skip formal definition semantics pctl 
write denote state formula holds state similarly denote path formula holds infinite path 
state formula said hold ifm initial state satisfies 
boolean connectives disjunction implication derived usual 
temporal operators eventually obtained standard way 
pctl denotes state formula fragment pctl path subformulas inp form ltl arises path formula fragment pctl state subformulas propositional formulas contain probabilistic 
quantitative ltl property mean pctl state formula ltl formula 
stutter actions 
correctness partial order reduction criteria temporal properties typically formulated means equivalence identifies states paths traces agree stuttering 
context stuttering refers repetition state labels 
partial order reduction shall need concept stutter actions actions effect state labels matter state taken 
formally action called stutter action iff states implies 
refer non probabilistic stutter step act non probabilistic baier argenio stutter action unique successor ample set method linear time properties section summarize main results recall argument techniques fail branching time properties 
starting point act init ap verified linear time property 
rough idea assign reachable state action set ample act construct reduced mdp results action sets ample act 
formally function ample act ample act states state space reduced mdp act init ap induced ample smallest set contains init state ample 
labeling function ap restriction original labeling function state set transition probability matrix ample 
state called fully expanded ample act 
ample sets small expect linear program solved simpler form firstly number variables smaller form variable state 
secondly linear programs solved contain inequalities reachable state fully expanded ample act 
independence actions 
main ingredient partial order reduction technique non probabilistic probabilistic setting adequate notion independence actions 
rough idea formalization actions belonging different processes executed parallel affect refer local variables require kind synchronization 
formal definition independence actions composed transition system captures semantics parallel composition processes run parallel relies recovering interleaving diamonds 
non probabilistic systems independence actions means state enabled execution affect enabledness successor outgoing transition vice versa addition action sequences lead state 
probabilistic setting additional requirement probabilistic effect definition independence actions cf 
actions called independent inm iff states act implies act adapt notations conditions purposes 
atomic propositions occur formula assumed occur ap 
simple step identify paths stutter equivalent improving reduction 
baier argenio implies act fig 

examples independent actions states sp different actions called dependent iff independent 
act act called independent iff actions independent 
called dependent applying definition non probabilistic actions states yields standard definition independence actions ordinary transition systems 
example fig 
shows fragment representing parallel execution independent actions 
example stand outcome experiment tossing dice stands tossing fair coin 
general stand stochastic experiments independent classical sense viewed actions mdp independent 
situations actions independent fixed probabilistic branching pattern 
actions fig 
independent 
notice state enabled 
successors transition state successor transition 
effect action sequences case state reached probability 
criteria linear time properties 
preserve linear time properties approaches series conditions see rely modifications peled conditions preserving ltl properties 
ensures reduced system sub mdp original 
stutter condition dependence condition cycle condition agree exactly peled conditions non probabilistic systems linear time properties 
suggests weaker condition uses concept de alfaro components style condition recall focus attention mdps terminal states 
explains require ample sets non empty 
baier argenio nonemptiness condition states ample act 
stutter condition ample act actions ample stutter actions 
dependence condition path 
sn inm dependent ample exists index ample 
cycle condition cycle 
sn exists state si fully expanded ample si act si 
branching condition 
fig 

conditions ample sets component condition component fully expanded state ample act components viewed mdp counterpart terminal strongly connected components markov chains 
consist state set nonempty action set act actions successor belongs underlying directed graph strongly connected 
mdps infinite traversal cycle probabilistic action occurs probability paths component entered actions scheduled left state visited infinitely surely 
conditions ensure equivalence ofm reduced system non probabilistic setting sufficient probabilistic setting reachability problems 
informally problem allow reduction ample set state consists actions say certain probabilistic action act contained ample set scheduler form schedule depending probabilistic outcome decide choose ample actions choose appropriate probabilities 
hand scheduler forced assign fixed probabilities actions outcome probabilistic experiment known 
explains better strategies reachability linear time properties remedy situation condition needed branching condition la ample ample act state branching condition la 
sn path inm ample probabilistic ample 
baier argenio fig 

sufficient pctl clearly weaker 
irrelevant ordinary transition systems viewed mdps actions non probabilistic 
observed agrees condition gerth combination ensures preservation branching time properties non probabilistic systems may fail verifying probabilistic branching time properties specified pctl counterexample fig 
illustrates observation probabilistic variant example demonstrate guarantee non probabilistic system reduced system ctl 
fig 
atomic propositions 
dark states labelled grey states white states 
independent stutter actions 
independent 
conditions fulfilled choosing singleton ample set initial state leads reduced mdp fig 

pctl holds form 
intuitive explanation phenomenon fact allows probabilistic branches non fully expanded states leading states pctl equivalent 
preserving branching time properties consequence previous example requirements need strengthened 
adopt stronger condition 
branching condition branching time properties ample act ample singleton consisting non probabilistic action 
notice condition collapses ordinary transition systems mdps actions non probabilistic 
conditions suggest reduction preserves probabilistic branching time properties yield conservative adaption conditions suggested fig 
grouped states probabilistic visible bisimilar explained definition 
baier argenio gerth non probabilistic systems ctl properties 
handle branching time properties cycle condition replaced weaker component condition 
combination conditions equivalent 
follows fact component states fully expanded ample sets states singletons consisting non probabilistic action 
component consideration cycle 
example contrast reduced system fig 
obtained choosing ample set initial state fulfills 
shown satisfy branching time properties 
remainder section concerned proof correctness approach stated theorem 
theorem correctness fulfilled satisfy pctl state formulas 
proof technique similar shown sufficient ctl properties non probabilistic transition systems 
additional difficulty reason probabilistic behaviors 
definition weight function cf 
finite sets andr distributions respectively weight function respect tor denotes function implies write denote existence weight function refer lifting ofr distributions 
sequel observation shown proposition transitivity ifr binary transitive relation set distributions definition viewed probabilistic variant called visible bisimulation introduced 
definition probabilistic visible bisimulation letm act init ap andm act init ap mdps set atomic propositions letr binary relation 
called probabilistic visible simulation init init pair onr conditions fulfilled 
distribution finite set mean function 
baier argenio action act conditions holds non probabilistic stutter action unique successor finite path form non probabilistic stutter actions act 
inm infinite path form consisting non probabilistic stutter actions ti finite path form 
inm non probabilistic stutter actions 
called probabilistic visible bisimulation ifr probabilistic visible simulation andr probabilistic visible simulation 
iff exists probabilistic visible bisimulation 
goal show wherem denotes full mdp reduced mdp results ample sets satisfying 
proposition completes argumentation 
proposition soundness pct step letm andm mdps definition andm satisfy pctl state formulas 
proof 
sketch 
proof obligation relies proving coarsest probabilistic visible divergence sensitive probabilistic branching bisimulation sound pctl 
different proof obligation provide direct proof claim show structural induction syntax pctl state path formulas probabilistic visible bisimulation pctl state formulas iff pctl path formulas iff denotes lifting ofr paths defined appropriate way 
skip details proof obligation relies standard arguments provided mdp model probabilistic non deterministic states alternate 
case allowed 
minor differences approach action labelled setting prove preservation result assumption probabilistic convergence considering divergence sensitive variant probabilistic branching bisimulation 
main argumentation preservation result notion probabilistic branching bisimulation 
baier argenio sequel assume conditions hold 
goal establish probabilistic visible bisimulation definition forming path relation letm mdp forming path finite path form 
sn non probabilistic stutter actions singleton action set fulfills dependence condition state si 
write iff exists forming path denotes lifting distributions weight functions definition 
formal definition forming paths refers non probabilistic actions agrees exactly definition forming paths non probabilistic setting properties established non probabilistic systems hold mdps 
observe relation transitive fig 

illustration prop 
reflexive general non symmetric 
second forming path length definition si addition forming paths enjoy property replicated independent operation performed 
probabilistic setting depicted fig 
formally stated proposition 
proposition properties forming paths states inm act 
forming path occur act 
non probabilistic stutter action act 
particular 
proof 
proof provided induction length forming path occur 
basis induction obvious induction step assume finite path si 
tm dependent exists baier argenio 
sn sn forming path 
induction hypothesis act sn sn dependence condition holds state sn singleton actions independent 
non probabilistic stutter action sn unique successor sn 
act sn see def 
successor sn act 
condition holds successor sn singleton action set independent holds state sn singleton action set 
ut unique successor ut probabilistic effect action sequences state sn ut sn sn state may deal weights ut sn remaining cases 
sn sn 
transitivity cf 
proposition get sn 
proof part provided similar arguments induction length forming path note part proposition applies actions act probabilistic non stutter actions 
addition non probabilistic stutter actions enabled occur forming path state definition 
state space ofm state space sequel forming path means forming path 
sn definition sn ample si 
proposition forming paths reduced mdp state 
forming path starting state states 
exists forming path fully expanded state 
act exists forming path state ample 
proof 
part immediate transitivity 
part follows fact finite path states fully expanded forming path conditions 
baier argenio finite state non emptiness condition cycle condition ensure existence forming path fully expanded state 
part derived proposition follows 
forming path fully expanded act 
occur proposition yields act ample 
appears consider longest prefix occur 

form particular ample 
proposition yields ready prove probabilistic visible bisimilar 
theorem ris probabilistic visible bisimulation 
proof 
clearly init init show conditions def 
hold conversely fulfilled inverse pair 
obvious actions forming path stutter actions 
states forming path labeling 
show condition def 
holds act 
non probabilistic stutter action situation condition definition 
assume probabilistic non stutter action nonprobabilistic stutter step case may apply part proposition yields act 
state reduced mdp part proposition yields existence forming path reduced mdp state ample 
transitivity see proposition obtain act 
may compose forming paths inm exists forming path obtain 
get part proposition get states 
yields situation condition def 

action ample 
forming path trivial fact part proposition case condition baier argenio def 
note 
divergence condition definition refers non probabilistic actions agrees third condition visible simulations non probabilistic systems condition established applying exactly arguments non probabilistic case 
theorem proposition completes proof theorem 
partial order reduction versus process equivalences section give brief overview connections partial order reduction criteria papers hand probabilistic process equivalences hand 
suitable notions stutter equivalence simulation bisimulation equivalence see conditions hold stutter equivalent see general 
conditions hold simulation equivalent see general bisimilar 
conditions hold bisimilar 
theorem underlying notion bisimulation probabilistic visible bisimulation defined def 
replaced divergence sensitive state variant probabilistic branching bisimulation defined style 
underlying notion stutter equivalence essentially agrees trace distribution equivalence reformulated model state labels action labels 
stutter equivalence paths identifies paths trace trace arise sequence labels repetition state labels trace trace infinite word ap ki ni 
andm said stutter equivalent scheduler form scheduler form probability measures agree measurable unions stutter equivalence classes paths starting initial state ofm andm respectively 
particular stutter equivalent mdps satisfy quantitative ltl properties 
underlying simulation relation formally defined variant probabilistic forward simulation introduced segala 
kind simulation allows state simulated distribution states single state 
example simulation equivalent 
intuitive argument state simulated distribution assigns probability states 
guarantee equivalence ofm trace distribution congruence suitable compositional reasoning 
baier argenio fact bisimilar state corresponds state inm yields example reduction satisfying wherem bisimilar stated 
illustrates reduction satisfying fig 

hold stated 
contain probabilistic actions viewed ordinary transition systems 
intuitive argument possibility mimic nondeterministic choice state probabilistic choice states note schedulers form upper state choose combine lower states arbitrary probabilities probabilistic forward simulation require fixed probabilistic distribution lower states mimic possible behaviors possible 
cycle condition replaced weaker component condition switch irrelevant explained section 
statement original formulation 
component condition requires notion probabilistic forward simulation allows certain infinite computations simulate single transition cycle condition simpler version simulation suffices transition simulated process matched finite computation tree simulating process 
approach works cycle condition formalization finite computation trees means sos rules 
deal possibly infinite computation trees rule captures semantics infinite behaviors added 
partial order criteria preserve probabilistic branching time properties 
theoretical relevance represents branching counterpart linear approach natural probabilistic extension reduction techniques ctl 
report experimental results expect results impact practical aspects explained 
results seen alternative symbolic bdd methods pctl model checker baier argenio prism applied combination symbolic methods static variant partial order reduction criteria 
practical side currently implementing model checker quantitative ltl pctl intend integrate partial order techniques 
directions include detailed discussion partial order reduction criteria process equivalences 
deeper look action labeled case study variants valmari conditions various non probabilistic process equivalences adapted probabilistic case 
baier gr er 
partial order reduction probabilistic systems 
proc 
st pages ieee computer society press 
christel baier 
algorithmic verification probabilistic systems 
universit mannheim 
habilitation thesis 
de alfaro 
model checking probabilistic nondeterministic systems 
fst tcs lncs pages 
clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems april 
argenio 
partial order reduction concurrent probabilistic programs 
proc 
st pages ieee computer society press 
de alfaro 
formal verification probabilistic systems 
phd thesis stanford university department computer science 
de alfaro 
stochastic transition systems 
proc 
th concur lncs pages 
desharnais 
labelled markov processes 
phd thesis mcgill university 
desharnais gupta jagadeesan panangaden 
weak bisimulation sound complete pctl proc 
concur lncs 
gerth kuiper peled penczek 
partial order approach branching time logic model checking 
proc 
rd pages 
ieee press 
hansson 
time probability formal design distributed systems 
series real time safety critical systems 
elsevier 
hansson jonsson 
logic reasoning time reliability 
formal aspects computing 
holzmann peled 
improvement formal verification 
proc 
formal description techniques forte pages berne switzerland october 
chapman hall 
baier argenio kurshan levin peled 
static partial order reduction 
proc 
tacas lncs 
kwiatkowska norman parker 
probabilistic symbolic model checking prism hybrid approach 
proc 

appear larsen skou 
bisimulation probabilistic testing 
information computation 
peled 
model checking representatives 
proc 
th cav lncs pages 
peled 
partial order reduction linear branching time logics process algebras 
pages 
peled pratt holzmann editors 
partial order methods verification volume dimacs 
american mathematical society 
puterman 
markov decision processes discrete stochastic dynamic programming 
john wiley sons new york 
segala 
modeling verification randomized distributed real time systems 
phd thesis massachusetts institute technology 
segala lynch 
probabilistic simulations probabilistic processes 
nordic journal computing 
valmari 
stubborn attack state explosion 
formal methods system design 
valmari 
stubborn set methods process algebras 
pages 
van glabbeek smolka steffen 
reactive generative stratified models probabilistic processes 
proc 
th lics pages 
ieee computer society press 

