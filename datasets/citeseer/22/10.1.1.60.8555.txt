bts byzantine fault tolerant tuple space das florian sc brazil das br generative coordination prominent coordination models implementing open systems due spatial temporal decoupling 
coordination community effort trying integrate security mechanisms model aiming improve robustness 
context presents bts coordination model provides byzantine fault tolerant tuple space 
byzantine faults commonly represent process crashes intrusions 
far know 
bts coordination model supports dependability level 

modern distributed systems ex 
peer peer networks web services grid computing open systems characteristics unknown number unreliable heterogeneous ex 
variable computation communication capacity participants 
coordination mechanisms processes interaction current distributed systems message passing communication paradigm suited open systems 
requirements anonymity possibility temporary disconnections unreliable communications imply need decoupled interactions 
alternative coordination models needed 
models generative coordination stands due flexibility simplicity 
model processes interact shared memory space tuple space generic data structures tuples inserted read removed reduced simple operation set 
coordination decoupled time participants need active time space need know 
independently coordination model open distributed systems interactions subject sorts failures security attacks 
events affect participants coordinated coordination infrastructure compromising entire system 
way improve system reliability interpret accidental malicious failures byzantine faults supported cnpq brazilian national research council process 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sac april france copyright acm 
da silva das florian sc brazil das br lau lung puc pr pr brazil lau br fault tolerance techniques coordination infrastructure resilient accidental crashes intrusions 
proposes byzantine fault tolerant tuple space coordination model called bts byzantine tuple space 
proposal shared tuple space simulation distributed system shared memory processes communicate message passing 
replication technique implementing simulation byzantine quorum systems 
development coordination infrastructure aims provide intrusion tolerance open systems 
environment considered unfavorable arbitrary number processes subject byzantine failures executing weak environment terms time guarantees 
construction reliable tuple space environment characteristics complements efforts coordination community aiming integrate security mechanisms generative coordination model :10.1.1.36.243
structured follows 
section presents overview generative coordination model 
section presents system model bts protocols byzantine quorum system build 
section discusses performance bts 
section describes related 
section ends concluding remarks 

generative coordination generative coordination model originally introduced linda programming language allows distributed processes interact shared memory space called tuple space generic data structures called tuples stored retrieved 
model tuple sequence typed fields may defined value 
tuple fields defined value called entry 
template usually denoted tuple undefined fields 
type tuple denoted type sequence types field entry template match denoted type defined field values equal corresponding field values basic operations defined data manipulation tuple space outputs entry tuple space removes tuple matches tuple space destructive read rd similar tuple read removed space non destructive read 
rd operations blocking tuple space matches specified template invoking process block matching tuple available 
common system called intrusion tolerant provide continuous safe service despite occurrence intrusions bounded number components 
extension model adopted inclusion non blocking variants read operations called inp rdp respectively 
operations way blocking versions return matching tuple specified template space signaling failure 
notice definitions tuple space works just associative memory tuples accessed contents address 

bts protocols section define system model byzantine quorum system replication technique bts protocols 
system model adopted system model assumes infinite set client processes 
interact set servers sn simulates fault tolerant tuple space 
communications client processes servers area held reliable authenticated point point channels deliver messages fifo order additionally processes equipped local clock compute messages timeouts 
clocks diverge synchronized 
terms processes failures assume arbitrary number clients bound servers subject byzantine failures deviate arbitrarily specification collusion corrupt system behavior 
process behaving said faulty 
process faulty said correct 
assume fault independence obtained systematic hardware software diversity vm 
tuple space implemented basic read write shared memory objects registers assume weak time assumptions build kind object :10.1.1.164.8106
way assume eventually synchronous system model executions system bound time gst global stabilization time message sent correct process correct process time gst received time 
important notice gst need know processes 
execution distributed algorithm said nice bound held process failures 
intuition model system works asynchronously respecting time bounds time eventually enters stable synchronous period tasks message transmissions instance performed timely way assume local computations require negligible time 
notice model resembles internet behavior 
byzantine quorum systems quorum systems valuable alternative implementing reliable shared memory objects systems processes communicate message passing 
way quorum system universe data servers collection server sets called quorums non empty intersection 
principle storage services shared variable stored servers read write operations done quo easily implemented ssl secure socket layer technology 
practice stable period long distributed protocol terminate 
rum servers 
existence intersections quorums enables development read write protocols maintains integrity shared variable operations performed different quorums system 
byzantine quorum systems generalization technique suited environments processes fail byzantine way 
formally byzantine quorum system set server quorums pair quorums intersect sufficiently servers consistency property quorum servers correct availability property 
servers simulate shared memory objects tuple space organized masking quorum system tolerates faulty servers 
specifically bts built asymmetric masking quorum system distinguishes types quorum systems different quorum sizes different operations 
due requirements asymmetric quorum system assume system composed types quorums qr qw read qr qr write qw qw servers respectively 
protocols section presents protocols executing tuple space operations bts model 
protocols non blocking variants operations rd derive blocking versions 
algorithms defined section assume server local copy tuple space denoted ts removed set denoted rs 
standard set operations applied manipulate tuple sets assume identical tuples exist 
implemented example appending id process created tuple plus sequence number opaque field read 
invocation output operation inserts tuple space 
operation implemented algorithm 
algorithm operation process server 
client procedure qw send server receive rs ts ts rs rs due generative model non deterministic nature reliable communication channels client need wait replies servers inserts tuple space 
server receives tuple inserted adds tuple space removed removal server pending belongs rs 
kind control necessary ensure tuple removed twice tuple space 
type write protocol called non requires message exchanges systems writer need know exact time write completes 
assume operation completes correct servers write quorum receives tuple 
disadvantage implementation strategy implies unordered semantics operation 
semantics weakest operation proved sufficient implement programs 
rdp non destructive read operation rdp tuple matches template done bts protocol algorithm 
algorithm rdp operation process server 
client procedure rdp sn send rd repeat wait receive ts qr tt return return server receive rd ts send ts protocol works basically client accessing read quorum servers trying get tuples match tem plate lines 
algorithm accessed server reply match set tuples match lines 
client collects matching tuples read quorum store array chooses tuple common match set servers denoted tt lines 
tuple special symbol returned meaning failure operation line 
inp operation inp requires complex protocol implementation bts 
complexity results fact tuple removed space distinct invocations inp 
requirement implies natural mutual exclusion processes trying remove tuples type 
proposal implement operation building blocks mutual exclusion mutual exclusion problem concerns management set processes want access indivisible resource accessed process time 
algorithm solves problem manage processes ensuring access resource time mutual exclusion property processes access resource time lockout property 
problem usually defined terms processes set trying execute privileged critical section code 
mutual exclusion algorithms generally defined terms operations enter critical section referring resource enter leaving section exit 
bts inp protocol mutual exclusion algorithm ensure unique process try remove tuple tuple destructive read critical section process 
byzantine paxos algorithm paxos algorithm interesting algorithms solving know problem consensus distributed systems algorithm sets processes may overlap better implementation quorum access client send message read quorum periodically servers receives responses complete read quorum 
problem set processes try reach agreement single value decided possibly conflicting proposed values 
different roles play algorithm proposers propose values acceptors try establish agreement chose single proposed value learners learn chosen value 
algorithm ensures single value proposed proposer chosen acceptors learned learners 
bts inp protocol uses byzantine variant paxos algorithm force correct servers agree decision removing tuple client 
building blocks read operation defined section inp implementation defined elegant way algorithm 
algorithm inp operation process server 
client procedure inp repeat enter type rdp exit type return paxos exit type return server type paxos ts rs rs ts ts protocol uses paxos algorithm invocation function paxos passing parameters process propose value set proposers set acceptors set learners proposed value 
returned value function value chosen acceptors learned learners call decided value 
parameters paxos function invocation client server side invocations lines proposer process critical section sf proposers servers ensuring exist correct proposer servers acceptors learners servers 
proposed values servers different explained 
protocol algorithm process tries remove tuple matches template get exclusive access tuple type reach critical section line 
reads line supposing tuple exists runs paxos algorithm remove line 
paxos completes servers reached decision deletion leaves critical section line 
paxos decided value operation result operation line 
runs described procedure loop lines 
tuple space matches exits critical section returns meaning failure operation lines 
server permission process enter critical section locks tuple type type true runs paxos algorithm line assuming initial proposer proposing 
decided value tuple line tuple removed process exists local tuple space copy added removed set rs lines ensuring removed 
removed tuple space local copy lines 
process remove tuple matching space decided value opening paxos black box see removal happens proposed reaches sufficiently servers servers suspects try elect proposer coordinator 
algorithm correctness derived directly observation eventually synchronous system model assumed section continuous execution algorithm process removes tuple realizes tuple removed 
described algorithm inp protocol block process execute line fail execute line failing release tuple type processes access 
order solve problem remove explicit resource release line client include local release server completes part protocol including command unlock type line 
simple modification mutual exclusion algorithm ensures client reaches critical section opportunity propose tuple deletion servers single execution paxos leaving critical section value decided 
modification algorithm optimize execution read operation line mutual exclusion protocol line 
client send template read servers mutual exclusion request server return permission enter critical section permission granted 
optimization eliminates access quorum system decreasing amount messages exchanged time needed execute inp 
shows nice execution inp protocol 
execution algorithm paxos mutual exclusion algorithm process sends message servers asking access critical section servers execute agreement decide order requesting process served 
byzantine paxos internal communication explained 
enter rd enter rdp propose accept rsp rd go propose paxos paxos accept inp protocol execution 
shows inp protocol non protocol section process removes tuple learns tuple removed process due paxos safety properties 
know correct servers remove local tuple spaces happens learn line 
blocking operations blocking operations rd implemented client simply repeating execution rdp inp obtains desired tuple 
implementation strategy optimal valid inherent tuple space nondeterminism 
servers ensuring correct server accepted value 

protocols analysis table presents operations protocols cost considering metrics message complexity communication steps 
message complexity measures maximum amount messages exchanged processes 
consequently gives insights communication system usage algorithm scalability 
communication steps accounts number sequential communications processes main factor time needed distributed algorithm execution terminate 
operation bts state machine rdp inp table tuple space protocols analysis values table considers nice execution operations 
cost bts protocols second third columns table 
protocols rdp operations simple consequently reduced cost terms metrics compared protocol operation inp 
operation cost dominated mutual exclusion paxos algorithm demands extra communication steps non linear message complexity see 
comparison purposes columns table presents protocols cost operations semantics implemented know state machine replication byzantine paxos algorithm inp protocol 
state machine approach standard replication model implementing general replicated services 
successfully implement technique ensure replica determinism starting state correct replicas execute operation sequence states executing operation 
ensure property request issued service executed order replicas 
requires consensus algorithm execution establish total order replicated service requests 
protocols ensure sequential consistency read protocol algorithm tuple space state machine implementation 
great disadvantage approach compared quorum bts protocols fact operation complex inp 
complexity due fact operations updates tuple space 

related replication models appropriate building byzantine fault tolerant services byzantine quorum systems state machine replication 
concept executing different operations different intersecting sets servers maintaining consistent replicated state servers system 
advantage quorum systems compared state machine approach need solve consensus replicated service invocation 
consequently lightweight protocols appropriate asynchronous systems 
byzantine quorum systems specific protocols operations defined generative model 
protocols inp operation requires consensus protocol needs message exchanges time assumptions eventually synchronous system model assumed complete 
works aiming replicate tuple space faulttolerance 
state machine approach quorum systems proposals regards occurrence byzantine failures main objective bts 
papers proposed integration security mechanisms access control generative model 
works justified model increasingly hostile environments internet 
proposals published try enforce predefined security policies interacting processes expected behavior concentrated maintaining confidentiality integrity tuples stored space 
works consider availability tuple space faulttolerance mechanisms main objective apply robust approach concerning intrusion tolerance 
bts copes problem byzantine resilient protocols replicated tuple space surviving faults attacks intrusions long third space replicas comprised 

concluding remarks proposed bts generative tuple space coordination model tolerates byzantine failures byzantine quorum system byzantine paxos consensus algorithm 
far know proposal offer dependability level main contribution 
protocols built shared memory object type strictly stronger terms wait free hierarchy register usually implemented quorum systems 
construction possible new approach integrates asymmetric byzantine quorum systems consensus algorithms 
approach complements works integrate security mechanisms generative model aiming hostile environments subject failures security attacks internet :10.1.1.36.243
despite fact protocols avoid poisonous incomplete writes faulty clients ensures tuples written correct ones available system long third servers faulty 
want despite fact bts protocols defined considering single tuple space support multiple tuple spaces 
implement put copy space server system execute protocols scope specified space 

attiya welch 
distributed computing fundamentals simulations advanced topics 
wiley series parallel distributed computing 
wiley interscience nd edition 
bakken schlichting 
supporting fault tolerant parallel programming linda 
ieee transactions parallel distributed systems mar 
busi gorrieri zavattaro 
data driven coordination model environments open untrusted agents 
electronic notes theoretical computer science volume 
busi gorrieri zavattaro 
expressiveness linda coordination primitives 
information computation academic press 
leonardi zambonelli 
mobile agents coordination models internet applications 
ieee computer feb 
castro liskov 
practical byzantine fault tolerance proactive recovery 
acm transactions computer systems 
castro rodrigues liskov 
base abstraction improve fault tolerance 
acm transactions computer systems 
de nicola ferrari pugliese 
klaim kernel language agents interaction mobility 
ieee transactions software engineering 
dwork lynch stockmeyer 
consensus presence partial synchrony 
journal acm 
powell 
fault intrusion tolerant file system 
proceedings rd int 
conference computer security pages 
gelernter 
generative communication linda 
acm transactions programing languages systems 
gifford 
weighted voting replicated data 
proceedings th acm symposium operating systems principles pages 
herlihy 
wait free synchronization 
acm transactions programing languages systems 
lamport 
part time parliament 
acm transactions computer systems 
lamport shostak pease 
byzantine generals problem 
acm transactions programing languages systems 
malkhi reiter 
byzantine quorum systems 
distributed computing 

martin alvisi 
fast byzantine consensus 
dependable systems networks dsn 

martin alvisi dahlin 
small byzantine quorum systems 
dependable systems networks dsn 
minsky minsky 
making tuple spaces safe heterogeneous distributed systems 
proceedings acm symposium applied computing pages 
schneider 
implementing fault tolerant service state machine tutorial 
acm computing surveys 
segall 
resilient distributed objects basic results applications shared spaces 
proceedings th symposium parallel distributed processing spdp pages 

intrusion tolerant architectures concepts design 
editors architecting dependable systems volume lecture notes computer science 
springer verlag 
vitek bryce 
coordination processes secure spaces 
science computer programming 
xu liskov 
design fault tolerant distributed implementation linda 
proceedings th symposium fault tolerant computing ftcs pages 
