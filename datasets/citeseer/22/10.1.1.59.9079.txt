proc 
th int 
conference digital audio effects dafx madrid spain september low level feature extraction plugin api alexander lerch development berlin germany lerch de presents easy platform independent plugin application programming interface api extraction low level features audio pcm format context music information retrieval software 
need advantages open defined plugin interface outlined overview api usage 

increasingly important branch music information retrieval mir research deals extraction musical content audio data way organizing searching music databases 
step extracting low level features musical audio signal serve building blocks constructing higher level semantically meaningful properties music 
low level feature defined values extracted audio signal describe property signal necessarily musically meaningful 
typical examples features spectral centroid energy envelope multiple frequency bands mfcc applications mir field require large number features extracted audio signal 
different applications research projects similar identical low level features implementation known algorithmically complex features 
lot redundant done reinvent wheel time 
furthermore integration implemented features new application usually time consuming source code available impossible case 
plugin considered library linked dynamically runtime previously defined interface 
host plugin means load library exported functions runtime 
commonly accepted plugin api enable reuse implemented features additional 
furthermore feature extraction plugins easily exchanged projects researchers companies required binary format protect intellectual property development gunnar eisenberg communication systems group technical university berlin germany eisenberg tu berlin de koen department ghent university belgium koen dafx party 
defined api speed development process implementation focus algorithmic aspects implementation issues api design 
api tries provide means developers enable advantages 

overview short overview related remainder deals aspects proposed feature extraction plugin api requirements considerations design architecture usage software development kit sdk license summary important properties api goals development maintenance outlined 
pointers detailed information provided 

related best knowledge currently widely accepted audio feature extraction plugin api mir community 
audio analysis synthesis framework emphasis mir allows user extend framework deriving base class tightly integrated framework 
define true feature extraction plugin api 

audio analysis toolkit provides plugin interface strong focus processing mpeg sound files 
licensed gnu general public license gpl enforcing publication source code plugin host implementations may prevent commercial context source code distribution appropriate 
mir related apis plugin apis commonly world audio signal processing virtual instruments 
apis mainly designed transforming proc 
th int 
conference digital audio effects dafx madrid spain september audio stream new audio stream effect processing generating audio stream reaction incoming midi events virtual instruments 
easily adaptable demands audio feature extraction 
examples apis linux audio developer simple plugin api virtual studio technology steinberg au audio units apple 
influences api designs api 
sdk additionally provides offline extension allowing audio data analysis 
extension basically feature extraction 
advantage compatibility available hosts see disadvantages definition dedicated feature extraction plugin api reasonable restriction capabilities offline interface definition able handle audio streams audio files 
furthermore easy handle store large complex feature sets 
complexity plug implementation api requires working audio file handles bidirectional communication plugin host non open license definition capabilities extensions control easily influenced requirements researchers 
open source projects allowed distribute source files sdk code case source code distribution possible user sign individual license agreement license holder 
feature extraction plugin api 
requirements considerations attempt specify application programming interface demands careful consideration required functionality capabilities usability simplicity 
usually compromise capabilities ease contradict 
non trivial technical requirements capabilities feature extraction plugin api defined support different possibly varying sample rates extracted features support multiple independent instances plugin support multidimensional features high probability unique plugin identification host registration process support calculation multiple features plugin required developer support sufficient timing information allow synchronization features different sample rates push style processing audio buffers data source files live streams 
restrictions agreed allow simple usage implementation api 
technical usability reasons memory allocated internally plugin outside plugin shared memory allocated host dafx plugin call host functions host poll status requests file handles api developer specified graphical user interface gui required run plugin data type float inputs outputs parameters thread safety api host ensure request results interfere running process call ensure cross platform compatibility integration programming languages possible plugin interface chosen defined programming language commonly researchers companies audio signal processing context compilers available nearly possible target platforms 
api software development kit sdk providing wrapper classes available 
classes allow easy access plugin host side easy implementation plugins inheriting base class plugin plugin side 

design architecture basically api provides types data inputs outputs called signal parameter 
data type float 
signal properties requested help structure depicted input result 
input signals commonly thought audio signals restricted constant sample rate 
parameters change plugin properties 
parameter properties defined means structure depicted 
structures provide extensive plain text information information range quantization useful data 
input signal passed plugin simply pushing new buffers data process function 
host poll new results time account thread safety issues mentioned 
plugins distinguished quintuple information library name plugin name string plugin vendor string vendor specific plugin id vendor specific plugin version info 
typedef struct tag char char char float float float float structure description result properties proc 
th int 
conference digital audio effects dafx madrid spain september sdk wrappers host side plugin side function method calls typedef struct tag char char char float float int structure description parameter properties 
usage feature extraction plugin requires actions summarized called create new instance plugin basic internal initialization 
functions allow host retrieve plugin specific information api version supported number channels supported sample rates 
information host decide supports type plugin call plugin correct way 
dafx call required initialize plugin non varying parameters input sample rate number audio channels 
cpu intensive calculations necessary internal initialization buffers filters done 
furthermore vendor specific user data handed plugin 
initialization fails plugin host destroy plugin instance 
retrieve information available plugin parameters calculated features functions 
figures provide insight available information 
function performs actual processing 
host simply needs maintain continuous stream audio data blocks handed plugin calling function 
additionally time stamp input data passed 
host check result available 
check size function called obtain result 
time stamp result returned 
audio data available processing called signal plugin processing done allow final processing left internal buffers needed 
destroys plugin instance 
functions ones proc 
th int 
conference digital audio effects dafx madrid spain september explained website depth documentation api general 

software development kit api consists header file containing typedef definitions data types passed interface functions plugin provide 
actual api sdk developed wraps functions plugins api classes 
wrappers plugin instance handled object 
specific plugin class derived plugin base class 
methods provided base class directly representing functions specified api reimplemented specific plugin class 
structure similar allows easy fast plugin development process 
methods plugin object called style stub functions provided sdk 
stub functions translating function calls method calls 
sdk provides wrapper class host development 
class allows easy handling plugin libraries plugin instances 
class mirrors methods provided plugin base class 
class appears actual plugin object created directly inside host linking library 
shows sdk wraps function calls simplifies usage plugin host 
parts programmed programmed clearly separated border host plugin side displayed 
note important functions methods displayed 

license order api accepted widely possible appropriate license provided api source code considered 
source code licensed bsd style license simple permissive widely spread license 
time bsd license compatible gnu gpl sources minor restrictions commercial applications 

summary api offers solution technical requirements low level feature extraction mir context platform independence simple interface open license 
api provides push style interface allowing live streams file streams 
supports multidimensional features extracted constant varying sample rates provides sufficient information time synchronization audio features provided sdk including example plugin host allow fast learning curve 
broaden acceptance usage mir applications possible establishment database plugins source binary format common usage planned 
ensure api related source code easily available project started sourceforge net 
sourceforge provides useful software management services cvs bug tracking mailing lists source code dafx depth information api available download encourage motivated developers mir field contribute project active project developer participating mailing list discussions 

stefan department communication research thomas sikora communication systems group technical university berlin ongoing support 
parts done context project funded flemish institute promotion scientific technical research industry 

george tzanetakis perry cook framework audio analysis organised sound vol 

silvia pfeiffer conrad parker presentation australian linux conference sydney january 
free software foundation gnu general public license available www gnu org licenses gpl html time checked july th 
richard available www 
org time checked july th 
steinberg ag virtual studio technology available steinberg de time checked july th 
apple computer audio units available developer apple com audio html time checked july th 
alexander lerch gunnar eisenberg koen available www sf net projects time checked july th 
open source initiative bsd license available www opensource org licenses bsd license php time checked july th 
