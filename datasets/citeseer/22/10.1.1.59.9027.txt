proportional replication peer peer networks showed peer peer networks having number replicas object proportional request rate objects node advantages 
complement results show distribution network wide advantages 
benefits proportional replication issue achieving proportional replication decentralized manner 
show local storage management algorithms lru automatically achieve near proportional replication system performance replica distribution achieved lru close optimal 
show lru responds change user access pattern quickly number accesses taken reach new steady state replica distribution lru close minimum possible cache replacement algorithm 
analytical models provided computing steady state network wide replica distribution transient period lru 
keywords peer peer file replication cache management lru network bandwidth proportional replication peer peer networks offer promise systems automatically scale capacity number users increases extremely robust automatically adapting failures nodes links changes usage patterns virtually cost 
loosely organized networks autonomous entities user nodes peers resources available peers represent new computing paradigm service consumers service providers 
example peer peer file sharing networks users share files wants download file user sharing file download directly user 
obtaining desired file may share file allowing users download 
file multiple replicas network popular files having replicas sources download file 
replication files provides robustness correlation popularity provides automatic scaling usage patterns 
music file sharing internet popular peer peer networking application characteristics associated music file sharing free riding short node lifetimes large variation user connection bandwidth user tewari leonard kleinrock computer science department university california los angeles los angeles ca lk cs ucla edu shared storage limits user storage allocated downloaded content usually associated peer topeer networking 
applications benefit peer peer networking 
example peer peer networking offload load service provider video server video demand service 
may conceive peer peer networking shared digital library application example state funded library schools state individual schools school districts dedicate fixed amounts storage application content brought user request kept storage available users sites 
applications presence intermediary similarity user group simplifies assumptions peer peer system unreasonable assume users similar behaved free riding little variation interests resources user long node lifetimes 
number users large user caches available long time durations centralized solution search problem may feasible 
ignore issue search costs peer peer system concentrating exclusively downloading aspects peer peer system 
showed number replicas object proportional request rate object user advantage sharing file download load file equal total download load node queueing delays convex node utilization average queueing delay seen downloader minimized 
focus system performance aspects show addition user centric advantages proportional replication distribution minimizes network bandwidth measured average number links traversed download 
system model discussed section proof optimality proportional replication network bandwidth section 
benefits proportional replication devote seeking distributed mechanisms achieve replication 
section discuss performance existing cache management algorithms lru lfu fifo 
simulations show algorithms achieve near proportional replica distribution 
construct cache management algorithm achieves proportional replication compare system performance algorithm system performance cache management policy lru 
simulations show performance lru slightly inferior optimal performance 
study behavior lru peerto peer environments detail section analytical model provided compute replica distribution lru achieve different situations estimate system performance 
user interests change time replica distribution adapt new request rates 
utility algorithm depends ability converge new steady state distribution quickly maintain adequate performance transient period 
address issue section simulations show change access pattern lru converges new steady state replica distribution faster cache management algorithm achieves linearly proportional replication 
provide preliminary analytical model estimating duration warm transient period time taken reach steady state replica distribution starting empty buffer replica distribution transient period lru 
model estimate transient performance lru cache management making similar extensions 
related briefly discussed section section concludes 
ii 
system model peer peer system model shown fig 

broadband network topology 
assumption network topology exponential expansion 
discussed commonly internet topology models fit description 
central server optional shown signify file disappears system result cache replacement 
simulations include central server replica file system maintained assigning peer origin server file keep file cache 
central server optional user cache user cache 
peer peer system user cache broadband network user cache user cache user cache user cache user cache user cache assume peers system terms peers users nodes interchangeably 
unique files system term file represents generic object may downloaded associated request rate file node request rates uniform nodes 
assume file equal size 
nodes finite local storage space store file replicas 
assume storage space node equal capacity store files 
file may multiple replicas system ni ni number replicas file system 
node find file looking 
specifics search mechanism important long download requests file equally distributed ni replicas file system 
estimate network bandwidth downloading file average number links shortest path nearest replica file 
notation various system parameters discussed number nodes system number unique files system node storage size number files request rate file node ni number replicas file system number nodes underlying link level topology ni average number links nearest replica file ni replicas file system 
iii 
benefits proportional replication discussed earlier showed selecting ni replica distribution offers significant user level benefits 
show distribution system level benefits 
focus average number links traversed download metric system performance provides estimate network bandwidth download consumes 
objective minimize network bandwidth download source nearest replica multiple replicas file available 
derive expression relation average number links nearest replica file number replicas file assuming replicas uniformly distributed network 
derived expression formulate solve optimization problem find optimum replica distribution ni briefly address assumption uniform distribution replicas show simulations peers request rates cache management automatically results uniform distribution replicas network 
link distance nearest replica popular topological models internet common topologies property exponential expansion number unique nodes reached hop distance exponentially related hop distance 
assume link level network topology exponential expansion 
clearly node link level topology participating peer 
assume participating peers uniformly distributed entire network 
theorem states main result average number link level hops nearest replica file logarithmically related ni number replicas file underlying link level topology exponential expansion 
theorem peer peer network size underlying link level topology exponential expansion number nodes reachable hops kd constants link level topology peers uniformly distributed link level topology large networks ni average number links traversed downloading file nearest source related number replicas file ni follows ni logd ni constant finite ni assuming ni replicas file uniformly distributed participating peers 
proof wish calculate expected number link level hops nearest replica file downloaded number replicas file network 
assuming node link level topology graph equally participant peer peer network nodes link level topology graph probability randomly selected node participant peer peer network sh number participating peers reachable hops 
underlying link level topology exponential expansion kd link level topology graph nodes constants link level topology reached hops 
kd nodes participating peers probability sh kd assuming replicas file uniformly distributed network probability finding file randomly selected node ni ni replicas file network 
addition notation defined earlier define ph probability nearest replica file available exactly link level hops fh probability peer link level hops file ph fh fh 
average link level hop hm distance nearest replica ni hp hm link level distance peers reached 
ni fh fh hm approximation probability finding file node independent probability finding file node write fh ni probability file hm probing nodes zero 
ni kd euler maclaurin summation formula ni kd ni dh 
kd bk bernoulli numbers ni th derivative rf remainder term summation function 
define kd logd vt km dh dt 
hm peer downloading file participating peer 
ni ni bk dt ln 
euler maclaurin summation formula get ni ni bk ln bk 
th derivative rg remainder term summation function 
bk odd neglect higher order terms remainder term euler maclaurin summation formulas 
required terms limits evaluate ni ni ni ln ni ni ln ni ni ln ni ni hm ni ln ni ni ln ni hm ni ln ni discussed earlier 
hm hm 
ni ni ln ni ln ln ni ni ni ln ni ln ni ln ln ni ln ni ln ln applying series summation write ni ln ni 
ln ni term dominate ni terms finite ni neglect terms show ni ln ni logd ni theorem establishes logarithmic relation average number link level hops nearest replica file ni number replicas file 
simulations indicate relation holds smaller values 
fig 
show simulation results peer topeer network peers underlying node power law random graph link level topology power law rank exponent parameters motivated participating peers chosen link level topology nodes uniformly random targeted number replicas placed participating peers selected uniformly random 
link distances shown average distance participating peer nearest replica 
topologies exponential expansion give similar results 
link distance nearest replica ln fraction nodes file log scale 
link distance nearest replica peers link topology node rank exponent network bandwidth optimization objective find optimum value ni number replicas file minimizes average number links traversed satisfying file requests ni optimization problem may stated subject min ni km constraint states total number replicas files exceed total storage available 
benefit derived having multiple replicas file node number replicas file number nodes 
replica file 
conditions give inequality constraints ni ni straightforward optimization problem state solution theorem theorem peer peer network underlying link level topology number links traversed downloading file nearest source related number replicas file ni ni logd ni storage capacity node equal network bandwidth measured average number links traversed download minimized number replicas ni file piece wise linear respect file request rate 
number replicas file ni proportional file request rate ni km ii number replicas number replicas ni max min km general case 
number replicas file request rate file request rate ii 
optimal replica distribution constraints file request rates ii general case proof classical approach solving constrained optimization problems method lagrange multipliers 
show result part 
ignore constraints specified show optimal solution satisfies constraints conditions specified part 
lagrangian constrained optimization problem ni minimizing ni ni logd ni ln ni substituting obtain ni applying constraint km remove unknown constant obtain optimum number replicas ni km km constraints satisfied proves part theorem 
condition rewrite problem maximization problem modified lagrangian 
ni ln ni including constraints rewriting ni constraint ni modified lagrangian ln ni ni ni km kuhn tucker conditions modified lagrangian ni ni ni ni ni imply ni ni respectively 
optimum solution ni max min km storage size large store files 
proves part ii theorem 
remaining discussion assume km optimal replica distribution 
sufficiently large km satisfied 
km optimal distribution higher request rate files located nodes file located nodes simply assume part peer peer system lacks download files 
high request rate files system satisfied 
uniform distribution replicas assumption uniform distribution file replicas network allows say probability finding file randomly selected node ni ni replicas file network 
section wish verify model peer peer system nodes fixed storage consequently cache management algorithm replicas uniformly distributed equilibrium peers file access pattern 
clarify mean equilibrium 
suppose file node origin server file initially 
nodes requests get files number replicas file increases 
storage limited nodes eventually delete replicas 
number replicas changes initial condition replica file time 
define system equilibrium number replicas file change average time interval drift zero 
generic un annotated network topology physical location associations discussing distribution replicas system difficult 
introduce coordinate system network 
relative particular node origin node think location nodes hop distance 
relative origin node node location specified polar coordinates 
radially different pattern possible file request patterns storage capacity uniform nodes topological difference nodes minimal 
ratio number replicas file number nodes hop origin node adequate measure file distribution 
example ratio hop distance conclude file replicas uniformly distributed network 
contrast ratio decrease increasing hop distance origin server chosen origin node conclude probability finding file higher nodes closer origin server 
simulation run topology instance generated number nodes located hop origin node easily computed 
statistics number nodes file collected simulation run sufficient length time reached equilibrium 
fig 
shows file distribution single origin server different files high request rate moderate request rate third low request rate 
simulation peers storage capacity store files total unique files system 
file request rates zipf exponent underlying topology node discussed earlier 
participating peers uniformly chosen topology nodes 
file replacement policy space needed newly requested file lru file replaced 
fraction nodes file low request rate medium request rate high request rate request ratio hop distance 
distribution files different hop distances origin server files different request rates simulation results shown fig 
number replicas compute fraction nodes file hop distance average value simulation iterations steady state replica distribution reached 
deviation fraction nodes file different hop distances measure uneven file distribution seen relative fraction nodes file variation fraction nodes file different hop distances small asymmetries larger hop distance appear participating peers hop distances 
conclude participating peers file request rates equilibrium replicas file uniformly distributed network 
iv 
cache replacement algorithms proportional replica distribution ideally wish peer peer system autonomic operate optimal near optimal performance external intervention opposed measuring file request rates periodically populating network zipf exponent adequate capture skew request rates peer peer systems web environments 
proportional number replicas centralized mechanism 
section discussed peer peer system peers finite storage space space needed newly requested file previously obtained file deleted lru file replacement policy replica file deleted 
plot steady state distribution number replicas file file request rate fig 
simulation 
see lru cache replacement policy obtains near linear proportionality high request rate files 
simulated common cache management algorithms fifo replace oldest file lfu frequently replace frequently file random delete randomly select file replaced results shown fig 
alongside results lru 
algorithms generate replica distribution similar lru lfu closer optimal distribution lru fifo random delete slightly lru 
number replicas file request rate 
number replicas vs request rate optimal lfu lru fifo random delete known cache management algorithms give exactly desired linear proportionality equilibrium analysis random delete space needs cache files randomly selected deletion provided insights possible ways constructing mechanisms achieve linear proportionality decentralized manner 
file request file available local cache results file brought cache 
replicas file created rate ni 
random deletion file removal rate proportional number replicas file system 
equilibrium replica creation rate equal replica deletion rate 
equilibrium distribution ni cni proportionality constant 
explains random delete give linear proportionality 
keen observer note replica creation rate achieve linear proportionality random delete file replacements 
deviation creation rate due replicas created file available local cache 
creating replica requested file available local cache rectify 
replica created local cache created different peer 
create extra random delete algorithm simulated results shown fig 

expected populate extra algorithm give linear proportionality number replicas 
writing peers caches defeats original objective extra download incurred request locally satisfied negate performance benefit derived replica distribution closer optimal 
better adjust file deletion rate proportional ni ni 
achieved file deleted selected uniform probability cache weighted ni 
node know total number replicas file network locally need devise methods achieve ni biasing file selection deletion 
know desired linear proportionality achieved ni 
global file request rates known locally devise algorithm selects file deleted probability proportional may get desired linear proportionality 
simulation results algorithm shown fig 

unfortunately real systems difficult obtain global file request rates locally algorithm practical 
number replicas optimal request rate 
optimal cache management algorithms evaluate benefits cost algorithms know average number links traversed download algorithms 
ni logd ni expression average number links traversed downloading file ni replicas compute average number links traversed download logd ni ln ln ni remove effects underlying network topology extract replica distribution dependent term define new system performance metric normalized network bandwidth ln ni compute normalized network bandwidth steady state replica distribution achieved different cache replacement algorithms simulations 
numbers listed table 
table normalized network bandwidth vs cache replacement algorithm algorithm lru lfu fifo optimal comparing performance different algorithms find significant advantage obtained lfu especially account added complexity keeping frequency counters lru optimal cache replacement algorithm offers significant advantage 
lru cache replacement strong candidate peer peer system study performance peer peer environment detail section 
lru cache replacement peer peer environment far simulations zipf distributed file request rate zipf exponent 
explore effect skew file request rates show simulation results number replicas file request rate fig 
file request rate distributions skewed file request rate distribution zipf distribution zipf exponent skewed request rate distribution request rates different files uniformly distributed lowest highest file request rates 
number replicas zipf optimal zipf lru zipf optimal zipf lru uniform optimal lru file request rate 
lru performance varying levels skew request rate distribution results suggest applications access patterns skew lru perform 
notice skew file request rates large optimal replica distribution defined lru file replacement achieves near optimal replica distribution 
analytical model network lru storage constructed follows 
probability finding file network sufficient find probability file storage random node 
construct model perspective particular file say file requests file move file top position storage request files moves file lower position 
set markov chain represent position file stack system state file th position top lru stack state implies file top position lru stack state storage capacity number files means file bottom position lru stack 
additional state state defined represent state file storage 
satisfied request file changes system state file moves top position storage 
satisfied request file changes system state higher state new file moves top position pushing files position 
satisfied requests file include storage owner requests file file requests eventually satisfied contributes transitions state states requests file nodes satisfied nodes share files contributes transitions state states state 
ik ik 
markov chain model position file node storage capacity model shown fig 
file request rate file total request rate including file requests nodes satisfied node ij rate file pushed position position requests files served node 
file requests nodes remote requests complicate expressions 
node sends file request file 
rate nodes send file request file peer peer network ipi pi probability file available node 
nodes file cache satisfy requests file sent peer topeer network 
assuming requests uniformly distributed nodes file request rate file served node file account requests nodes equals pi pi 
unfortunately computing ij harder 
rate file pushed total rate requests files served node including local remote requests 
pk pk probability finding file adjust rates possibility requested file may position case access file affect position file lru stack 
suggests technique circumvent complexity 
key idea steady state push rate file position equal rate file brought top positions lru stack probability finding file top positions unbounded 
conservation flow principle allows compute ij 
file brought top positions conditions local request file file top positions file may brought top position positions local cache available may brought remote node assume file may requested disappears system file requests satisfied ii remote request file file top positions remaining positions local cache show top positions remote request 
local requests contribute push rate probability file top positions local cache 
remote requests contribute additional pi pi probability file positions local cache top positions local cache 
ij pi pi obtaining required rates markov chain model calculating individual probabilities involved 
provide approximate expression pij probability file position lru stack terms push rates position follows ij pij kj probabilities defined terms pij ik 
pi starting iteratively solve eqs 
value pi converges 
complexity kn computations value pi converged iterations 
fig 
plot number replicas file obtained simulation mp product number peers system probability finding file local cache obtained eqs 
file request rates zipf exponent 
shown analytical model agrees simulation results 
system designers model estimate steady state replica distribution different system parameters predicted values estimate required network bandwidth cache size selecting appropriate size node user cache limit required network bandwidth desired value 
number replicas request rate simulation analysis 
validation steady state analytical model lru vi 
transient performance lru cache replacement policy saw earlier sections steady state lru popular cache management algorithms achieve replication access rates extremely skewed 
simulations fig 
started single replica file respective origin servers equilibrium distribution eventually achieved cases 
know reasonable cache replacement policies adapt file replication distribution user access patterns change 
need examine transient performance system assure transient period short performance transient period acceptable peer peer network crash example 
conducted number simulation runs study transient performance different cache replacement algorithms 
basic simulation setup identical section certain pre determined simulation iteration request rate distribution changed zipf distributed exponent exponent file request rates nodes 
fig 
shows number replicas file lru cache replacement increasing simulation iterations starting iterations prior change 
get sense scale axis note simulation iteration average node file request 
zipf exponent request rate distribution lowest file request rate requests node iteration 
average iterations popular file requested 
number replicas simulation iterations 
transient behavior lru request rate distribution changed iteration label curve represents number replicas fig 
note takes iterations reach new steady state simulation scenario 
zipf exponent request rate distribution average requests file iteration 
file lowest request rate original distribution replica iteration labeled zipf exponent request rate distribution replicas system 
new replicas created requests file take iterations create replicas 
iterations lru took reach new equilibrium distribution reasonable 
aforementioned simulation changed request rate distribution back original zipf exponent distribution simulation iterations change zipf exponent request rate distribution 
fig 
show number replicas file increasing simulation iterations starting iterations prior request rates revert back original distribution 
number replicas simulation iterations 
transient behavior lru request rate distribution changed iteration label see number replicas reaches neighborhood steady state values iterations say system performance close steady state performance 
note figs 
curve different file shows number replicas file iteration indicated axis 
rate convergence new steady state distribution appears independent individual request rates fig 

similar experiments performed fifo lfu optimal cache replacement algorithm discussed section 
presenting file details figs 
condense replica distribution information computing normalized network bandwidth defined section replica distribution iteration show fig 

th iteration request rate distribution changed zipf exponent zipf exponent th iteration changed back zipf exponent 
shown duration transient period fifo lru optimal cache replacement algorithm constructed section slightly longer transient period slightly worse performance transient period simulations assumed new file request rate distribution relayed algorithm nodes instantaneously 
normalized network bandwidth normalized network bandwidth simulation iterations lru optimal fifo lfu simulation iterations lru optimal fifo lfu 
transient performance different cache replacement algorithms see lfu adapt change request rate poorly better transient performance algorithms reverting back original request rate distribution achieved steady state distribution equal request rate distribution request rate distribution reverted back zipf exponent distribution replica distribution close steadystate distribution lfu zipf exponent distribution 
happened simulations infinite length window frequency counted upper bound maximum counter value due takes long time algorithm register change access patterns effectively replica distribution changed 
shorter window perform better shown necessarily better lru maintaining sliding window complex task 
results suggest lru may adequate choice cache replacement peer peer systems 
better understand transient behavior lru attempt develop analytical model transient behavior lru cache replacement 
approach analyzed transient performance lru database application derive expressions lru performance cache warm period starting empty cache reaching steadystate replica distribution 
saw previous section number replicas file steady state computed mp number peers network probability finding file cache 
wish compute time dependent probability finding file cache accesses starting empty cache 
note accesses lru replacement policy kicks desired probabilities defined derived section 
section interested computing probabilities cache full 
compute know probability file cache accesses 
accesses file cache previous accesses file request rate file note file cache additional term requests file nodes satisfied node complicated required warm transient analysis 
probability finding file cache accesses expressions apply cache full iteratively compute increasing values violated 
smallest value violated transient period 
values computed iteration compute number replicas file transient period estimate system performance defined section transient period 
compare replica distribution starting period simulation lru cache replacement output analytical model system parameters zipf distributed fig 

see fig 
transient performance predicted analysis matches simulation results cache warm period 
analytical model shows violated th iteration duration warm transient period simulation 
mp appears match number replicas file warm transient duration 
warm transient period plot replica distribution steady state probabilities section 
number replicas mp simulation sum simulation iterations analytical model iterations 
validation analytical warm transient model note values obtained iterative process shown fig 
close steady sum probabilities state probabilities computed previous section differences arise ignored additional term requests file nodes satisfied node 
warm transient model gives method estimating steady state system performance 
key observation warm transient period iterations transient period simulations shown fig 

general transient period related warm transient period 
know request pattern changed older files requested new set files active set arguments development apply exactly 
general case file request rate changes drastic calculations may apply duration transient period shorter defined cache completely populated new access pattern 
add directly demonstrates role cache size determining duration transient period 
increase cache size files earlier system computations show duration warm transient period increases iterations compared iterations 
intuitively see larger cache means entries clear distribution defined new access pattern 
request rate changes drastic expect transient period shorter 
recall section system performance sensitive replica distribution replica distribution close optimal distribution 
small changes system performance remain reasonable transient period 
vii 
related till popular application peer peer networking music video file sharing internet fraught problems free riding short node lifetimes unreliable content quality lack enforceable payment mechanism 
lot research gone analyzing solving problems 
absence problems finding peer desired file difficult task especially attempts build ideal peer peer system participants equal central servers 
lot gone designing effective mechanisms searching peer desired file 
analytical search performance unstructured peer peer networks relevant average distance nearest replica number hops needed find source desired file flooding searches 
particular derivation average distance nearest replica link level topology section steps derivation average distance nearest replica erdos renyi random graph overlay network 
download performance peer peer networks addressed 
study gains reducing download time splitting large file small pieces increase service capacity large file rapidly initial peer peer network 
provides analytical model selecting peers minimize download time current focuses file replication seeking goal 
file replication addressed context structured peer peer systems similar objectives replication improving download performance 
study system architecture issues :10.1.1.59.9412
presents analytical model decentralized caching system context web caching assumptions different model cached content limited lifetime scenario 
web caching addressed study network cache relevant assumptions uniformity imply system performance inferred behavior single cache find similarities analyses 
content distribution network replicates content multiple sites decrease access latency seen users optimal allocation system storage issue networks 
incorporates caching replacement investigation general model centralized control multiple sites issues replica placement focus research area 
peer peer networking proposed support web accesses cooperative mobile environments presents analytical model performance system 
analytical model section similar theirs extend analytical model stand lru cache 
discusses natural scaling achieved fact user requests create additional replicas improves system performance focused system ability find newly created sources 
viii 
showed average network bandwidth download minimized number replicas file network proportional request rate file ni ni number replicas file request rate file result benefits proportional replication complements earlier results node advantages replica distribution motivated inquiry ability cache replacement algorithms automatically achieve proportional replication 
cache replacement algorithms lru able achieve near proportional distribution 
simulation results indicate average network bandwidth download replica distribution achieved lru close performance achieved optimal replica distribution cases simulated 
analytical model developed computing steady state replica distribution lru general case 
user access patterns may change time investigated transient performance cache replacement algorithms 
time taken lru converge new steady state replica distribution change user access pattern close minimum required cache replacement algorithm 
developed analytical model transient behavior lru 
lru cache replacement algorithm attractive mechanism obtaining network wide benefits offered proportional replication peer peer networks 
adler kumar ross rubenstein suel yao optimal peer selection downloading streaming proc 
ieee infocom march 
antoniadis courcoubetis mason comparing economic incentives peer peer networks computer networks 
breslau cao phillips shenker web caching distributions evidence implications proc 
ieee infocom 
dan dias simple analysis lru buffer policy relationship buffer warm transient proc 
icde 
cl nain simple model analysis squirrel peer peer caching system proc 
ieee infocom 
dan towsley approximate analysis lru fifo buffer replacement schemes proc 
acm sigmetrics 
knightly stoica zwaenepoel denial service resilience peer peer file sharing systems proc 
acm sigmetrics june 
faloutsos faloutsos faloutsos power law relationships internet topology proc 
acm sigcomm 
rodriguez network coding large scale content distribution proc 
ieee infocom 
gopalakrishnan bhattacharjee keleher adaptive replication peer peer systems proc 
th icdcs 
gummadi measurement modeling analysis peerto peer file sharing workload proceedings acm sosp 
steinmetz stiller token accounting distributed pricing introduce market mechanisms proc 
peer peer computing 
kubiatowicz oceanstore architecture global scale persistent storage proc 
th asplos 
judge ammar content protection architecture decentralized peer peer systems proc 
ieee globecom 
kumar xu zegura efficient scalable query routing unstructured peer peer networks proc 
infocom 
kuhn schmid wattenhofer self repairing peer peer system resilient dynamic adversarial churn th iptps 
optimization storage capacity allocation content distribution computer networks vol 
pp 
february 
leonard rai loguinov lifetime node failure stochastic resilience decentralized peer peer networks proc 
acm sigmetrics 
modeling epidemic information dissemination mobile devices finite buffers proc 
acm sigmetrics 
chu levine availability locality measurements peer peer file systems proc 
scalability traffic control ip networks ii conferences 
liu liu xiao ni zhang location aware topology matching systems proc 
infocom 
massoulie coupon replication systems proc 
acm sigmetrics 
pan hou li retrieval freshness thresholds hierarchical caching systems computer networks 
crowcroft wilbur harris bhatti scalable distributed location proc 
iptps feb 
prabhakar randomized web cache replacement scheme proc 
ieee infocom 
qiu srikant modeling performance analysis bittorrent peer peer networks proc 
acm sigcomm 
rowstron druschel storage management caching past large scale persistent peer peer storage utility proc 
th sosp 
rubenstein sahu unstructured protocols survive flash crowds ieee acm trans 
networking april 
tse probabilistic methods web caching performance evaluation vol nos 
october 
stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications proc 
acm sigcomm 
zappala rejaie scalability swarming peer peer content delivery proc 
ifip networking 
tangmunarunkit govindan jamin shenker willinger network topology generators degree vs structural proc 
acm sigcomm 
tewari kleinrock analysis search replication unstructured peer peer networks proc 
acm sigmetrics 
tewari kleinrock search replication unstructured peer peer networks ucla computer science dept technical report ucla csd tr march 
tewari kleinrock fairness optimal download performance proportional replication peer peer networks proc 
ifip networking 
rizzo vicisano replacement policies proxy cache ucl cs research note rn 
yang fei model replica placement content distribution networks multimedia applications proc 
ieee icc may 
yang de service capacity peer peer networks proc 
acm infocom 
zhang hu assisted peer peer search partial indexing proc 
ieee infocom 
zhu yang class cache management dynamic web content proc 
ieee infocom 
