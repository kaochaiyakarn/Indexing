implementing refactorings graph rewrite rules platform independent metamodel pieter van gorp lab re engineering university antwerp pieter ua ac increasingly developers applying refactorings program transformations improve design existing source code software easily adaptable new requirements 
small changes object oriented software renaming class require lot updates source files tools automatically update affected files save developers lot time 
refactorings basic oo concepts redistribution classes variables methods class hierarchy today development environments hardcoded syntax trees programming languages java update middleware deployment descriptors 
facilitate building new refactorings extension existing ones new platforms suggest implement refactorings declarative specifications platform independent metamodel 
describes metamodel graph rewrite language architecture fujaba uml tool extended provide required infrastructure 
keywords refactoring metamodeling graph rewriting model transformation middleware code uml sdm 
context refactoring defined behavior preserving program transformation 
refactorings oo software redistribution classes variables methods class hierarchy mainly purpose facilitating adaptations extensions 
order maintain system integrity refactoring tool needs update source code affected refactoring 
needs sure refactoring executed guaranteed introduce inconsistencies 
regarding automatic updating source code current generation refactoring tools take account middleware deployment descriptors obviously leads deployment conflicts niels van formal techniques software engineering university antwerp niels ua ac dirk janssens formal techniques software engineering university antwerp dirk janssens ua ac 
furthermore give formal guarantees behavior preservation 
formal proofs rely correctness pre postconditions implemented refactorings 
existing refactoring implementations hardcoded constraints third generation programming languages 
fujaba open source uml case tool originally designed java code generation story driven modeling sdm specifications 
sdm visual programming language uml graph rewriting 
graph rewriting feasible formalism reason behavior preservation refactorings 
report extending fujaba implementing refactorings sdm specifications platform independent metamodel introducing inconsistencies middleware deployment descriptors 

metamodel requirements don roberts explains ph thesis building refactoring tool involves implementing program transformations 
tool able check invariants pre postconditions sequence refactoring ensure source consistency 
tool needs sufficiently expressive metamodel 
similarly developer may want trigger refactorings presence bad code smells solve 
section evaluate fujaba metamodel suitable purposes 
evaluation fujaba metamodel fujaba metamodel consists layers abstraction physically separated lazy parser see 
layer equivalent uml metamodel contains coarse oo constructs namespaces classes operations attributes excludes method body information required maintaining consistency parsed model rest code executing refactoring transformation 
second layer fujaba metamodel refines method body partial java syntax tree 
assignment constructs considered relatively platform independent occur fit refactoring purposes 
hand need understand difference conditionals loops matters new variable scope introduced 
hand fujaba method body syntax tree contain explicit ac fujaba metamodel 
equivalent standard uml modelelement entity 
reuse uml class layer metamodel 
subtypes part second layer 
reflect partial java syntax tree fit refactoring purposes 
cess update call information needed reason refactoring 
propose reuse layer fujaba metamodel new second metamodel layer minimal adequate refactoring 
running example illustrate need metamodel extension highlight tool requirements automating realistic java middleware refactoring scenario 
running example get cart items operation shopping cart class ejb implementation open source application 
enterprise javabeans ejb standard component model developing application tier web application 
ejb components managed container interfaces application server resources 
services object distribution resource transaction management security configured specifying deployment attributes xml deployment descriptor 
return return list link objects ejb interface method ejb transaction type type public collection try arraylist items new arraylist iterator details keyset iterator hasnext string key string integer value integer details get key try key item prod ci new item prod prod getname item value intvalue item items add ci catch exception sort items collections sort items new return items catch exception return collections empty list metamodel extensions refactoring motivating refactoring scenario suppose reading java order better understand system 
understand undocumented try block line line decide extract body new method name fits intention briefly share details design ejb component model general suggest method name 
know details attribute represents hash map product key strings integer amount items type cart 
line uses key product cart retrieve local item bean local item home object 
consequently home object checks application server cached instance involved item adds new object instance item bean instance pool 
bean retrieves data underlying database configured lazy loading 
line value object item encapsulating data retrieved bean 
line navigates product bean associated item bean constructs value object 
data value objects lines construct value object representing appropriate amount cart items product current loop iteration 
line value object added list items sample method supposed compose 
extracting lines method called 
loop look hasnext string key string integer value integer details get key try ci key value items add ci catch exception reengineering activity commonly referred refactor understand pattern 
view grammyuml metamodel 
added entity added link stereotypes highlight added uml metamodel 
note move declaration inside try block decide retrieving home interface bean resource intensive operation 
refactoring implementation consider internals extract method refactoring 
precondition refactoring states signature method needs created may result name conflict inheritance hierarchy containing class ii return statement extracted statements iii selected source fragment update local variable 
postcondition states exists method chosen name containing class ii local variable extracted fragment declared parameter new method iii formal parameter extracted statements parameter new method iv checked exceptions thrown extracted statements method called statements handled extracted statements listed signature new method original method extracted statements replaced method call new method 
able express constraints refactoring metamodel include return action precondition ii update action precondition iii local variable declaration action postcondition ii access action postcondition ii iii throw action handle action postcondition iv call action postcondition iv 
extract method example refactoring executed looking source code 
noted cause need metamodel extensions 
pull method refactoring example triggered class diagram requires reasoning method calls accesses updates attributes 
part precondition instance states method consideration accesses updates attributes part subclass 
line running example accesses attribute details calls keyset operation object 
sample method pulled superclass ejb inherit details attribute 
metamodel extension impossible check precondition 
similarly call behavior reasoning required part precondition methods defined subclass called 
proposed extensions grammyuml minimal backward compatible extension standard uml metamodel adequate reason refactoring compose primitive refactorings verify preservation behavioral properties trigger refactorings code smells 
fujaba metamodel layer largely equivalent uml standard grammyuml extensions apply fujaba 
primitives method body needed reason refactoring modeled variants standard uml action entity 
standard uml construct model call behavior fujaba 
accesses updates apply attributes parameters local variables 
part fujaba metamodel 
add construct associate type 
defines local variable defined 
scope reaches action containing 
try block line line instance implicitly defines scope items 
note anonymous local variables introduced details keyset line new line 
access update call behavior need notion return statement need able reason exceptions 
note fujaba second metamodel layer provide construct link construct object returned 
provide link construct reused subclasses stereotypes 
figures summarize proposed metamodel extensions 
grammyuml metamodel fragment model exception throwing catching returning flow control method 

implementing refactorings sdm section describe small experiment fujaba graph rewriting language 
sake understandability concentrate relatively simple pull method refactoring 
story driven modelling story driven modelling sdm visual language behavioral modeling uml activity diagrams uml collaboration diagrams graph theory 
small refactoring experiment identify shortcomings sdm expressing sample refactorings suggest problem overcome 
expressing pull method section recall pull method important preconditions accesses updates attribute defined subclass ii methods defined subclass called iii method signature exist superclass 
lack update access information metamodel implemented third precondition 
story diagram expressing precondition shown 
parameter node method method pulled 
diagram consists patterns story unbound superclass node representing class program bound superclass class containing method 
stories represent loop method method superclass story comparison signature signature method story 
signatures compared comparing names type parameter signature 
able bind correct parameter method story parameter index sdm qualified associations param link method story qualified index parameter 
story pattern precondition iii pull method example value index determined evaluating expression 
constraint defined fujaba environment currently possible visualize story diagram 
control flow procedure straightforward evaluation comparison parameter tried 
loop continues parameters compared 
parameters identical names types superclass contains method signature evaluation precondition returns false 
evaluation story fails method signatures different method superclass tried 
explains failure transition story story 
experienced sdm currently support nested loop break construction experiment implementing comparison pure java code 
precondition returns true execution step refactoring moves method containing class superclass 
story diagram expressed breaking methods association link method containing class creating new superclass 
sdm allows graph rewriting operations adding create destroy modifiers associations nodes 
diagram refactoring shown 
illustrate fujaba generates code story diagrams java code execute story 
public void execute target boolean fujaba success false iterator fujaba null umlclass container superclass null stub null method null try fujaba success false check object really bound ensure target null ensure correct type ensure target instanceof execution story diagram pull method type cast method target bind container umlclass container method ensure container null bind stub fujaba container fujaba success fujaba hasnext try stub fujaba bind superclass umlclass superclass stub ensure superclass null check isomorphic binding ensure container equals superclass delete link container method create link superclass method fujaba success true catch fujaba catch fujaba fujaba success false complete experiment java code diagrams reused small gui plugin fujaba allowed apply refactoring class diagram see 
extending sdm refactoring small experiment possible express feature refactoring sdm 
sdm supports statement activities problem expressing constraint graphically solved implementing constraint pure java code 
able express refactorings refactoring plugin fujaba efficient elegant way needs add new features sdm language 
paragraph suggest extension needed expressing sample refactorings useful applications 
course extensions needed implementation refactorings raise opportunity adding new constructs language 
extension propose possibility parameterized graph expressions sdm 
extremely useful expressing pre postconditions refactorings 
example precondition iii extract method requires check local variable updated inside extracted block 
means path node represents method body node node 
express constraint sdm need infinite number stories 
allow regular expressions links story diagram expression regular expression pattern sdm sufficient express possibilities 
mb nodes type ua node 
graph expression evaluated mb bound respective parameters 
path nodes satisfies regular expressions unbound nodes ua pattern determined 
path evaluation returns false 
sdm supports definition arbitrary path nodes story 
concept serve basis implementing regular expression extension 

architectural requirements ensure parsed source code regenerated appropriately new components required fujaba architecture 
call new components code refinement repository 
components complement lexer parser metamodel code generator 
code definition code development tool component stores required source code files model extracted way complete system regenerated transformation input model 
code require metamodel system properties preserve original code layout 
motivation sake simplicity want minimize amount extensions fujaba metamodel possible sacrificing source consistency 
want regenerate arbitrary method bodies conventional code generator need metamodel contains syntactically possible source code constructs cascaded method calls local variable declarations type casts type checks 
fragments source code statements get lost 
addition problem code generators assume fixed code layout instances particular metamodel element 
undesirable context refactoring developers don want lose layout time execute refactoring 
applications manage rapid evolution number alternatives today middleware component models want minimize add support new xml deployment descriptors refactoring framework 
developing application evaluate performance new component model code generators available may want execute refactorings evolve small running example realistic prototype 
code suffice extend fujaba parser integrate new source code syntax refactoring tool 
code need write new code generation template 
code suffice extend fujaba parser handle new source code syntax 
code need write new code generation template 
sample developed open source code generator poseidon uml tool 
generates skeleton classes deployment descriptors ejb component model javadoc annotated domain model sources 
poseidon visualizes domain model classes uml class diagrams 
poseidon model stored xmi file 
parsing updating xml deployment descriptors need update annotated java sources define input model 
obtain new deployment descriptors deleting regenerating 
additionally maintain consistency poseidon need update xmi file 
illustrates code facilitate integration set special purpose uml tools fujaba takes care generating model transformation code graph rewrite rules takes care generating middleware framework code stereotyped class diagrams visualized poseidon 
fragment illustrates structure xmi uml class xmi id name 
false false isabstract true 
uml classifier feature 
uml operation xmi id name false instance 
false isabstract false uml modelelement 
uml xmi id 
return return list link objects ejb interface method ejb transaction type type quot quot uml type uml xmi idref uml type uml uml modelelement uml parameter uml parameter xmi id 
kind return 
uml parameter uml parameter uml operation 
uml classifier feature 
uml class sake readability fragments suppressed dots 
code help keep track model fragment preserve information ejb interface method ejb transaction type including information dedicated metamodel 
course need write reuse xmi parser case conventional code generator 
architecture visualizes code builds dynamic code templates lexer input sources parsed model 
refactoring templates rebuild files updated model 
design implementation code scope 
closing note abstraction level refactoring metamodel depends set supported refactorings 
ultimate refactoring metamodel new refactorings continuously discovered 
code help defer inclusion metamodel entity semantics explicit part problem domain supported refactorings case 
example currently included type checks type casts metamodel 
code support update referred class name rename class refactoring executed 
need implement refactoring refactoring contract explicitly type casts include dedicated type cast action metamodel 
public collection try arraylist items new arraylist iterator details keyset iterator hasnext string key string integer value integer details get key try key item prod source code deployment descriptors build files parser parse preserve code refactoring model public try new try 
code generator generate reconstruct code public collection try arraylist items new arraylist iterator details keyset iterator hasnext string key string integer value integer details get key try key item prod role code architecture 
refinement repository definition refinement repository development tool component exposes model model refinement transformations mda code generator 
motivation explore extent refactorings expressed platform independent metamodels sacrificing consistency underlying sources configuration files 
case generated software important know dependencies domain entities derived component model specific classes 
refactorings domain entity trigger regeneration derived sources configuration files 
regeneration implemented existing black box code generators 
secondly manually written code generated classes needs updated 
suppose example rename cart problem domain sample 
covers high level refactoring decomposed primitive rename class refactorings 
execute high level refactorings refactoring tool need query code generator refinement repository order learn name dependency domain entities stereotyped ejb name model elements representing bean class local home class value object class 

experiment calls validation 
things need implement grammyuml parser java code refinement repository 
step extending open source code generator fujaba sdm 
selected standard jmi repository support various middleware component models 
project implement suggested sdm extensions lessons learned review mof qvt submissions 
interesting project extend fujaba lazy parser proposed metamodel extensions 
investigate uml diagram exchange format parsed grammyuml current xmi standard include information 
model driven refactoring grammyuml may cover additional refactorings additional formalisms additional languages 
working additional primitive oo refactorings high level composed refactorings supporting design architecture evolution 
evaluating emerging xquery standards implement refactorings xml representing grammyuml models 
goal compare graphical sdm memory implementation fujaba textual xml database implementation mainly terms expressiveness scalability 
interesting validation case new code architecture implementing refactorings programs 
approach preserve programmer code conventions concerning white spaces newlines preserve hand written forward declarations header files designed api documentation 

matthias lead engineer valuable feedback draft 

william opdyke 
refactoring program restructuring aid designing object oriented application frameworks 
phd thesis university illinois urbana champaign 
tom mens serge demeyer bart du bois hans pieter van gorp 
refactoring current research trends 
language descriptions tools applications 
university paderborn software engineering group 
fujaba 
www uni paderborn de cs fujaba august 
tom mens niels van dirk janssens serge demeyer 
formalising refactorings graph transformations 
fundamenta informaticae 
don bradley roberts 
practical analysis refactoring 
phd thesis university illinois urbana champaign 
sander tichelaar serge demeyer patrick steyaert 
famix information exchange model 
www iam unibe ch famix 


sourceforge net java html services cart ejb java html august 
java community process 
enterprise javabeans specification august 
serge demeyer st phane ducasse oscar nierstrasz 
object oriented reengineering patterns chapter pages 
morgan kaufmann 
pieter van gorp hans tom mens serge demeyer 
automating source consistent uml refactorings 
proceedings th international conference uml unified modeling language 
fischer 
story diagrams new graph rewrite language unified modeling language 
engels rozenberg editors proc 
th international workshop theory application graph transformation paderborn germany lncs 
springer verlag 
project team 

sourceforge net september 

poseidon uml 
www com september 
matthias 
vision document moving agile world 
www org july 
project team 

sourceforge net september 
tracy gardner catherine griffin koehler rainer hauser 
review omg mof query views transformations submissions recommendations final standard july 
