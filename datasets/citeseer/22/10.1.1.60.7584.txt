author ttanalyze tool analyzing malware ulrich bayer christopher engin software technical university vienna ulrich bayer malware researcher software 
contact details software vienna austria phone fax mail ub christopher assistant professor technical university vienna 
contact details technical university vienna austria phone fax mail chris tuwien ac engin assistant professor technical university vienna 
contact details 
technical university vienna vienna austria phone fax mail ek tuwien ac keywords malware analysis dynamic analysis binary analysis 
ttanalyze tool analyzing malware malware analysis process determining purpose functionality malware sample virus worm trojan horse 
process necessary step able develop effective detection techniques malicious code 
addition important prerequisite development removal tools thoroughly delete malware infected machine 
traditionally malware analysis manual process tedious time intensive 
unfortunately number samples need analyzed security vendors daily basis constantly increasing 
clearly reveals need tools automate simplify parts analysis process 
ttanalyze tool dynamically analyzing behavior windows executables 
binary run emulated operating system environment security relevant actions monitored 
particular record windows native system calls windows api functions program invokes 
important feature system modify program executes api call hooking breakpoints making difficult detect malicious code 
tool runs binaries unmodified windows environment leads excellent emulation accuracy 
factors ttanalyze ideal tool quickly getting understanding behavior unknown malware 
malware generic term denote kinds unwanted software viruses worms trojan horses poses major security threat computer users 
estimates financial loss caused malware high dollars year computer economics 
unfortunately problem malicious code grow malware writing quickly turning profitable business symantec 
malware authors sell creations malicious code compromise large numbers machines abused platforms launch denial service attacks spam relays 
indication significance problem people special interest computers aware worms nimda 
security incidents affect millions users regularly headlines mainstream news sources 
important line defense malicious code virus scanners 
scanners typically rely database descriptions signatures characterize known malware instances 
unknown malware sample wild usually necessary update signature database accordingly novel malware piece detected scan engine 
paramount importance able quickly analyze unknown malware sample understand behavior effect system 
addition knowledge functionality malware important removal 
able cleanly remove piece malware infected machine usually delete binary 
necessary remove residues left malicious code unwanted registry entries services processes undo changes legitimate files 
actions require detailed understanding malicious code behavior 
traditional approach analyze behavior unknown program execute binary restricted environment observe actions 
restricted environment debugger human analyst step code order understand functionality 
unfortunately anti virus companies receive new malware samples day 
clearly analysis malware samples performed completely manually 
automated solutions necessary 
way automate analysis process execute binary virtual machine simulated operating system environment 
program running interaction operating system native system calls windows api calls invokes recorded vast majority malware written microsoft windows discussion considers operating system 
analyst 
approach human analyst tedious task having manually go single malware sample received 
course case human analysis desirable automatic process 
initial results provides details program actions help guide analyst search 
current approaches automatic analysis suffer number shortcomings 
problem malicious code equipped detection routines check presence virtual machine simulated os environment 
environment detected malware modifies behavior analysis delivers incorrect results 
malware checks software hardware breakpoints detect program run debugger 
requires analysis environment invisible malicious code 
problem analysis environment monitor complete interaction system 
happens malicious code evade analysis 
possible exist thousands windows api calls arguments composed complex data structures 
furthermore malicious code interact directly operating system native system calls 
analysis environment comprehensive cover aspects interaction program environment 
describe ttanalyze tool automates process analyzing malware allow human analyst quickly get basic understanding actions unknown executable 
running binary ttanalyze results generation report contains information give human analyst impression purpose functionality analyzed sample 
report includes detailed data modifications windows registry file system information interactions windows service manager processes complete log generated network traffic 
list summarizes key features ttanalyze ttanalyze uses emulation run unknown binary complete operating system software 
malware executed directly processor 
solutions virtual machines debuggers api function hooking presence ttanalyze practically invisible malicious code 
analysis comprehensive system monitors calls native kernel functions calls windows api functions 
provides support analysis complex function call arguments contain pointers objects 
ttanalyze perform function call injection 
function call injection allows alter execution program analysis run code context 
ability required certain cases analysis precise 
remainder structured follows 
section related field malware analysis 
section discusses design implementation details proposed system 
section provides experimental evaluation effectiveness 
section briefly concludes outlines 
related analyzing unknown executables new problem 
consequently solutions exist 
solutions divided groups static analysis dynamic analysis techniques 
static analysis process analyzing program code executing 
process binary usually disassembled 
control flow data flow analysis techniques employed draw functionality program 
number static binary analysis techniques jha jha song bryant robertson vigna introduced detect different types malware 
static analysis advantage cover complete program code usually faster dynamic counterpart 
main weakness code analyzed may necessarily code run 
particular true self modifying programs polymorphic metamorphic techniques packed executables unpack run time disassembling denotes process transforming binary code corresponding assembler instructions 
molnar 
malicious code obfuscation techniques debray thwart disassembly step 
reason certain instruction set architectures notably intel difficult distinguish code data bytes file 
dynamic techniques analyze code run time 
techniques non exhaustive significant advantage instructions analyzed code executes 
dynamic analysis immune obfuscation attempts problems self modifying programs 
dynamic analysis techniques question arises environment sample executed 
course running malware directly analyst computer probably connected internet disastrous malicious code easily escape infect machines 
furthermore dedicated stand machine dynamic test run efficient solution overhead involved 
running executable virtual machine virtualized computer provided vmware vmware popular choice 
case malware affect virtual pc real 
performing dynamic analysis run infected hard disk image simply discarded replaced clean called snapshots 
virtualization solutions sufficiently fast 
difference running executable real computer restoring clean image faster installing operating system real machine 
unfortunately significant drawback executable analyzed may determine running virtualized machine result modify behavior 
fact number different mechanisms published robin irvine rutkowska explain program detect run inside virtual machine 
course mechanisms available malware authors 
pc emulator piece software emulates personal computer pc including processor graphic card hard disk resources purpose running unmodified operating system 
important differentiate emulators virtual machines vmware 
pc emulators run unmodified operating system execute statistically dominant subset instructions directly real cpu 
contrast pc emulators simulate instructions software 
instructions emulated software system appear exactly real machine program executed keep complete control 
difficult program detect executed inside pc emulator virtualized environment 
reason decided implemented ttanalyze pc emulator 
note observable difference emulated real system speed execution 
fact exploited malicious code relies timing information detect emulated environment 
possible emulator provide incorrect clock readings system appear faster processes attempt time execution speed issue currently addressed ttanalyze 
addition differentiating type environment dynamic analysis distinguish classify different types information captured analysis process 
systems focus interaction application operating system intercept system calls hook windows api calls 
example set tools provided russinovich allows analyst list running windows processes similar windows task manager log windows registry file system activity 
tools implemented operating system drivers intercept native windows system calls 
result invisible application analyzed 
intercept analyze windows api calls user functions 
hand tools hunt exist intercept arbitrary user functions including windows api calls 
typically realized rewriting target function images 
original function preserved subroutine callable trampoline 
unfortunately fact code needs modified detected malicious code implements integrity checking 
ttanalyze uses pc emulator complete control sample program 
intercept analyze native windows operating system calls windows api calls invisible malicious code 
complete control offered pc emulator potentially allows analysis performed fine grain 
similar functionality typically provided debugger code analysis stopped point execution process state registers virtual address space examined 
debugger system resort breakpoints known cause problems malicious code analysis 
reason software breakpoints directly modify executable detected code integrity checks 
malicious code wild processor debug registers computations breaking hardware breakpoints 
system description ttanalyze tool analyzing windows executables precisely files conforming portable executable pe file format microsoft 
program analysis executed inside pc emulation environment relevant windows api native system calls logged 
sections describe detail design implementation key components ttanalyze 
emulation environment mentioned previously ttanalyze uses pc emulator execute unknown programs 
designing system choose different forms emulation 
particular decide hardware complete pc emulated actual shelf operating system installed processor emulated implementation subset operating system interface provided 
virus scanners typically emulate processor provide lightweight implementation operating system interface native system calls windows api calls 
approach allows efficient analysis process 
unfortunately trivial operating system stub behave exactly actual operating system semantics real system simulated differ cases 
differences detected malware simply break code 
decided emulate entire pc computer system running shelf windows xp top 
analysis significantly slower compared virus scanner accuracy emulation excellent 
focus analysis behavior binary trade acceptable 
ttanalyze uses qemu open source pc emulator written fabrice emulator component 
qemu fast pc emulator properly handles self modifying code 
achieve high execution speed qemu employs emulation technique called dynamic translation 
dynamic translation works terms basic blocks basic block sequence instructions ends jump instruction instruction modifying static cpu state way deduced translation time 
idea translate basic block execute translate basic block translation block available 
reason efficient translate instructions single 
course qemu system modification 
transformed stand executable windows shared library dll exported functions ttanalyze 
second qemu translation process modified callback routine analysis framework invoked basic block executed virtual processor 
allows tightly monitor process analysis 
dynamic analysis run performed modified pc emulator boots virtual hard disk windows xp service pack installed 
lengthy windows boot process avoided starting qemu snapshot file represents state pc system operating system started 
analysis process analysis process started executing malware program emulated windows environment monitoring actions 
particular analysis focuses operating system services requested binary system calls invoked 
action involves communication environment accessing file system sending packet network launching program requires windows user mode process appropriate operating system service 
way process directly interact physical device includes physical memory 
reason stems design modern operating systems prohibit direct hardware access multiple processes run concurrently interfering 
reasonable monitor system services process requests order analyze behavior 
microsoft windows platforms monitoring system service requests entirely straightforward 
reason actual operating system call interface called native api interface undocumented meant directly applications 
applications supposed call functions documented windows api 
windows api large collection user mode library routines turn invoke native api functions necessary 
idea windows api adds layer indirection shield applications changes subtle complexities native api 
particular native api may change different windows versions different service pack releases 
windows system native api provided system file dll 
parts interface documented microsoft windows microsoft windows ifs kit microsoft ifs 
written unofficial documentation native api covers functions 
malware authors native api directly avoid dll dependencies confuse virus scanner operating system simulations 
reason ttanalyze monitors windows api function calls application native api function calls 
task monitoring operating system services invoked program requires solve problems 
able precisely track execution malware process distinguish instructions executed behalf malware process processes 
essential virtual processor run malware process instructions windows operating system windows user mode processes 
mechanism required enables ttanalyze determine processor instruction instruction belongs malware process 

need unobtrusive way monitoring accessed operating system services 
able determine native api call windows api call invoked modifying malware code 
hook api functions set debug breakpoints 
accomplish precise tracking malware process help cr processor register 
cr register known page directory base register contains physical address base page directory current process 
processor uses page directory translates virtual addresses physical addresses 
precisely determine location page directory performing memory accesses processor cr register 
windows assigns process unique page directory 
protects processes particular virtual memory address space ensuring process virtual memory space 
page directory address currently running process stored cr processor register 
consequently windows loads cr register context switch 
simply determine page directory address assigned malware process windows 
able efficiently determine current instruction belongs test subject analysis comparing current value cr register page directory address test subject 
determining physical address page directory test subject responsibility probe component located inside emulated windows xp environment 
probe serves sensor emulated environment consists kernel driver program run user mode 
task kernel driver locate page directory address belongs test subject report findings back user mode process 
user mode component informs ttanalyze 
note ttanalyze outside emulated environment communication probe ttanalyze take place virtual network connects emulated environment host system 
rpc server runs inside emulated pc 
kernel driver necessary page directory address stored memory region accessible windows nt kernel device drivers 
precisely page directory address attribute structure corresponds test subject 
structure windows internal data object plays key role way windows manages processes 
process system corresponding structure exists 
device driver walk list system processes consists members finds corresponding process test subject 
point appropriate page directory address windows api documented microsoft platform sdk microsoft platform sdk 
read 
note page table address test subject process obtained instruction executed 
process created suspended state 
successfully identifying page directory address test subject allowed run 
mentioned previously second problem analysis monitor invocation operating system functions 
task solved comparing current value virtual processor instruction pointer program counter register start addresses operating system functions surveillance 
comparison performed callback routine ttanalyze qemu invokes start translation block 
note start address function corresponds instruction translation block 
reason function call control transfer instruction control transfer instruction encountered qemu starts new translation block 
point ttanalyze invoked check current value program counter 
windows application typically accesses operating system functions dynamically linking system dlls calling exported functions 
extract addresses interesting functions simply library export tables 
example application calls windows api function implemented shared library kernel dll wants create file 
case determining start address easily possible looking corresponding entry kernel dll export table adding base address kernel dll dlls may loaded different base address 
function arguments system described previous sections position know operating system functions application 
example application invokes know file created 
unfortunately dispose details name created file 
obviously improve situation analyzing arguments operating system function calls 
extended analysis framework capability automatically invoke userspecified callback routines ttanalyze test subject calls monitored operating system functions 
callback routine analyst specify code process log arguments corresponding operating system function 
example test subject calls function ttanalyze callback routine invoked access argument specifies name file created 
able access argument value operating system function callback routine read emulated virtual system specifying memory address size 
see recall ttanalyze callback routine running different memory address space process analysis 
writer callback routine know size structure function arguments 
reading function call arguments fashion tedious error prone certainly reducing number callback functions 
address problem desire mechanism automatically generate required code reading values functions arguments virtual system 
goal parameter list callback routine mirror parameter list corresponding operating system function 
callback routine invoked function argument values automatically extracted virtual system correctly copied arguments callback routine 
fashion author callback function access arguments operating system function call simply reading arguments callback routine 
achieve goal generating necessary source code reading arguments function call virtual system developed generator component 
component stand program run independently ttanalyze 
task generate desired callback routine stubs precisely stubs include code handle arguments 
generator component requires input file containing declarations monitored operating system functions 
parsing function declarations generator able determine sizes structures functions arguments subsequently generate appropriate code reading 
grammar generator input file resembles grammar programming language 
difference grammar supports declarations statements 
slightly extended syntax ways 
term operating system function generic term windows api native api functions 

parameter declarations functions may include keywords inout 
keywords specifying direction parameter 
effects point time argument read 
inout parameters read system function call invoked parameters read function returns 
direction specification missing assumed default 

array declarations form possible 
declarations indicate variable front dynamic array size array specified function argument 
position size specifying argument function parameter list indicated value represents integer value larger zero 
postfix specifies size bytes postfix states size units array base type 
special form nt null terminated byte array strings treated null terminated byte arrays 
reason having annotate array arguments ttanalyze know determine number elements array run time order copy right amount data callback routine 
ttanalyze told argument specifies number array elements assume array terminated null element 
cases need indicated proper annotation 
example consider function int main int argc char argv 
function declared int main int argc char argv nt arg header file 
analysis manually annotate function prototypes windows header files 
particular assign appropriate qualifiers output array parameters 
problem deal reading values function arguments virtual system 
unfortunately immediately possible read virtual address space process emulated system 
understand problem consider physical main memory emulated pc system simply large malloc ed memory block host system 
ttanalyze read emulated main memory supplying physical address 
supplying virtual address context emulated system virtual address converted physical address 
unfortunately possibility exists content referred virtual address emulated physical memory emulated hard disk content currently paged 
case reading virtual system memory result error 
cases able directly retrieve content virtual address 
windows mmu memory management unit uses lazy evaluation possible save resources russinovich solomon 
lazy evaluation means wait perform task required 
particular process lifetime page tables include shared libraries process 
page tables updated processor memory shared library 
failing read argument operating system function call serious drawback 
ttanalyze able read memory contents specified virtual address 
solve problem memory content currently paged resort page fault handler emulated operating system 
precisely wish access address emulated physical memory force test subject read virtual address 
read operation invokes page fault handler emulated operating system loads appropriate memory page emulated physical memory 
handler done desired content easily obtained 
code injection previous section mentioned need ttanalyze force test subject perform read operations behalf 
ttanalyze change flow execution test subject 
achieved injecting read instructions instruction stream 
ability change flow execution program useful inserting read instructions 
call arbitrary functions exported dll windows api functions 
ability insert function calls improve quality analysis results situations file created opened windows api function native api equivalent creating opening file 
way reli ably differentiate opening creation file arguments function call 
differentiate situations insert function checks file exists 
situation arises windows api function called creating opening registry key 
file directory situations possible decide filename refers file directory function arguments 
unknown handles ttanalyze typically monitors windows api native api function calls return handles 
result ttanalyze knows resources handles refer 
handles inherited process obtained operating system function monitored 
cases function call insertion required extract information unknown handle 
ttanalyze uses emulation run test subject easy insert additional instructions read instructions qemu translation blocks 
function calls easy inject function call jump address function start preceded push function arguments return address stack 
main difficulty performing function call context emulated process arguments expected function need pushed emulated stack 
pushing necessary arguments requires serialize copy arguments host memory memory emulated system possibly involving complex function arguments contain pointers structures 
process opposite reading arguments emulated system host environment 
allows reuse generator component described section automatically generate necessary code push arguments emulated stack 
analysis report ttanalyze tool analyzing malware 
principle arbitrary functions monitored provide number callback routines analyze log security relevant actions 
run test sample recorded information summarized concise report 
report contains information 
general information section contains information ttanalyze invocation command line arguments general information test subject file size exit code time perform analysis 

file activity section covers file activity test subject files created modified 

registry activity section modifications windows registry registry values read test subject described 

service activity section documents interaction test subject windows service manager 
test subject starts stops windows service example information listed 

process activity section information creation termination processes threads interprocess communication 

network activity section provides link log contains network traffic sent received test subject 
evaluation demonstrate capability ttanalyze successfully monitor actions malicious code ran dynamic tests current malware samples 
compared output tool textual description sample 
descriptions provided lab lab 
goal evaluation determine extent analysis results match characterizations provided known anti virus vendor 
selection test subjects consulted list prevalent malware samples published december 
unfortunately possible obtain samples entries lists 
able select different malware programs represent mix different malicious code variants currently popular internet 
names list received number different samples 
samples packed different executable programs recognized valid windows pe executables 
pool chose working sample malware type 
scanned samples experiments online virus scanner provided sure recognized correctly 
malware name file registry process service email worm win email worm win email worm win email worm win email worm win sober email worm win net worm win bd net worm win bk net worm win net worm win table ttanalyze test results results experiments shown table table symbol indicates output tool exactly matches provided description 
surprising number cases indicated symbol output tool differed provided description 
interestingly manual analysis confirmed system producing correct results behavior provided textual description reproducible 
differences output tool virus descriptions reasons 
cases general behavior reported ttanalyze confirmed textual description details match precisely 
example sources reported agreement certain file created system directory file names different 
occur malicious code chooses random filenames name list options exhaustively covered malware description 
reason differences output textual description virus scanner identified executable member certain malware variant fact behavior particular malware instance slightly changed 
cases indicated symbol analysis failed recognize creation certain windows registry values 
reason registry entries created client server subsystem process exe behalf malicious code 
analysis recording actions malware observed interaction sample exe process 
inherent restriction ttanalyze design prohibits monitoring process 
monitoring actions processes interacting started malicious code cases successfully covered 
window vulnerability exists appearance new malware point appropriate signature provided anti virus companies new malware poses serious threat computer systems 
introduced ttanalyze system analyze behavior unknown program executing code emulated environment 
goal analysis process gain quick understanding actions performed malicious code general aim reducing window vulnerability 
tool records invocation security relevant operating system functions windows api functions native kernel calls 
sample program executed completely software virtual processor ttanalyze tightly monitor process requiring modifications code 
allows system easily handle self modifying code code integrity checks features commonly observed malware 
furthermore emulated system presents running processes exactly real system 
difficult malware detect analysis environment comparing solution virtual machine debugging environments 
ttanalyze uses complete unmodified version windows xp underlying operating system unknown program started 
ttanalyze provides perfectly accurate environment malicious code 
course testing ttanalyze real malware samples apparent dynamic analysis sufficient obtain complete picture behavior unknown executable 
reason single execution path examined particular analysis run 
address problem aim extend analysis multiple execution paths explored 
example process analysis cloned emulator encounters conditional branch 
branch predicate inverted process causing processes follow alternative paths program 
enable capture behavior executable different environments different inputs special circumstances executable run certain day year infamous michelangelo virus active birthday famous artist 


qemu fast portable dynamic translator 
usenix annual technical conference 
jha 

static analysis executables detect malicious patterns 
usenix security symposium 
jha song bryant 

semantics aware malware detection 
ieee symposium security privacy 
computer economics 

malware report impact malicious code attacks 
www com article cfm id 
hunt 

detours binary interception win functions 
rd usenix windows nt symposium 
lab antivirus software 

www com 
robertson vigna 

detecting kernel level binary analysis 
annual computer security application conference acsac 
debray 

obfuscation executable code improve resistance static disassembly 
acm conference computer communications security ccs 
microsoft 

microsoft portable executable common object file format specification 
www microsoft com system platform firmware 

microsoft ifs kit 

www microsoft com 
microsoft platform sdk 

www microsoft com 


windows nt native api 
new riders publishing 
molnar 

ultimate executables 

sourceforge net 
robin irvine 

analysis intel pentium ability support secure virtual machine monitor 
usenix annual technical conference 
russinovich 

freeware 
www 
com 
russinovich solomon 

microsoft windows internals windows server windows xp windows 
microsoft press 
rutkowska 

red 
detect vmm cpu instruction 
org papers html 
symantec 

internet security threat report 
www symantec com enterprise index jsp 


art computer virus research defense 
addison wesley 


stealth breakpoints 
st annual computer security applications conference 
vmware server desktop virtualization 

www vmware com 
windows device driver kit 

www microsoft com 


polymorphic viruses implementation detection protection 
vx 
org lib html 
