informatica survey programming languages platforms multi agent systems rafael bordini university durham uk mail bordini durham ac uk www dur ac uk bordini lars universit hamburg germany mail informatik uni hamburg de www informatik uni hamburg 
de mehdi dastani utrecht university netherlands mail mehdi cs uu nl www cs uu nl mehdi amal el university paris france mail amal lip fr www lip fr jorge gomez sanz universidad de madrid spain mail sip ucm es fdi ucm es jorge jo leite universidade nova de lisboa portugal mail di fct unl pt di fct unl pt gregory hare university college dublin ireland mail gregory ucd www cs ucd staff alexander universit hamburg germany mail informatik uni hamburg de www informatik uni hamburg de alessandro ricci universit di bologna italy mail deis unibo lia deis unibo ari keywords multi agent systems programming languages platforms received april surveys research programming languages development tools multi agent systems 
starts addressing programming languages declarative imperative hybrid followed integrated development environments platforms frameworks 
illustrate categories systems chosen extent european researchers contributed development 
current state systems described cases indications directions research 
je za mas 
research multi agent systems mas led development practical programming languages tools appropriate implementation systems 
putting new programming paradigm fast important top ics research multi agent systems particular essential requirement eventual technology transfer 
surveying mas literature reveal large number different proposals agent oriented languages ranging purely declarative purely imperative various hybrid approaches 
designed scratch informatica bordini directly encoding theory agency extend existing languages suit peculiarities new paradigm 
languages conventional ones proves useful problem modelled multi agent system understood terms cognitive social concepts beliefs goals plans roles norms 
agent programming languages underlying platform implements semantics 
agent frameworks exist tightly coupled specific programming language 
concerned providing general techniques relevant aspects agent communication coordination 
mature languages accompanied integrated development environment ide intended enhance productivity programmers automating tedious coding tasks 
typically provide functionalities project management creating editing source files refactoring build run process testing 
despite large number languages frameworks development environments platforms proposed implementing mas daunting task 
address problem managing inherent complexity mas helping structuring development research community produced number methodologies 
mas practitioners follow methodologies design phase find great difficulties implementation phase partly due lack maturity methodologies programming tools 
difficulties traced lack specialised debugging tools lack skills necessary mapping analysis design concepts programming languages constructs lack proficiency dealing specific characteristics different agent platforms lack understanding foundations practical characteristics agent oriented approach programming 
languages tools developed far tried large scale applications progress achieved years 
appropriate time reality check bird eye view field helping consolidate existing achievements guide developments 
surveys existing approaches situated mas programming area research programming languages development infrastructures chosen part extent european researchers contributed development 
part devoted presentation agent oriented programming languages structured existing paradigm build 
section declarative agent oriented languages section covers imperative languages section hybrid languages 
second part cover various implementations software infrastructure agents 
structured development environments mas section mas platforms frameworks section 
ends readings subject section final remarks section 
declarative languages declarative languages partially characterised strong formal nature normally grounded logic 
case declarative languages described flux minerva dali respect 
declarative languages grounded formalisms claim finds parts roots ambient calculus 
declarative languages allow easy integration imperative code reviewed section 
claim computational language autonomous intelligent mobile agents high level declarative agent oriented programming language 
part unified framework called hierarchical intelligent mobile agents building large scale adaptive systems ambients 
combines main advantages agent oriented programming languages representing cognitive aspects reasoning concurrent languages process algebra representing concurrency agent mobility 
claim language inspired ambient calculus agents hierarchically organised supporting design mobile multi agent systems mmas set connected hierarchies agents deployed network computers 
agent node hierarchy contains cognitive elements knowledge goals capabilities processes sub agents mobile move hierarchy remote 
addition agent dynamically acquire intelligent computational components sub agents seen sort inheritance 
mobility inheritance defined framework favour dynamic adaptability reconfiguration systems coping increasing complexity distributed cooperative applications 
main elements claim agents cognitive interaction mobility reconfiguration primitives 
formal semantics claim plotkin structural operational approach consisting transition relation initial state program state resulting execution atomic operation 
step agent execution message dealt running process executed goal processed 
detailed presentation semantics refer reader 
mmas deployed set connected computers language claim supported distributed platform called offers necessary mechanisms management agents communication mobility security fault tolerance load balancing 
implemented java survey languages platforms 
informatica compliant specifications standard omg object management group 
central system providing management functions 
agent system deployed computer connected platform 
environment developing complex applications showed expressiveness language robustness strength platform application information search web electronic commerce applications load balancing resource sharing application mobile agents application network digital libraries 
flux high level programming system cognitive agents downloaded www org 
consists implementation fluent calculus action representation formalism provides basic solution classical frame problem concept state update axioms addressing variety aspects reasoning actions relevance agents ramifications indirect effects actions qualifications unexpected action failure nondeterministic actions concurrent actions continuous change noisy sensors effectors 
agent program flux logic program consisting parts kernel providing agent cognitive ability reason actions acquired sensor data background theory providing internal model environment strategy specifies behaviour accordance agent reasons plans acts 
full expressive power logic programming design strategies facilitating formal proofs correctness strategies respect problem dependent specification 
progression possibly incomplete initial world model updated performance action main characteristics flux 
allows computationally efficient solution frame problem consequently efficient agent implementation fluent calculus 
information regarding flux obtained 
minerva agent system designed provide common agent framework strengths logic programming allow combination existing non monotonic knowledge representation reasoning mechanisms 
uses mdlp kabul specify agents behaviour 
minerva agent consists specialised possibly concurrent performing various tasks behaviour specified kabul reading manipulating common knowledge base specified mdlp 
mdlp multi dimensional dynamic logic programming basic knowledge representation mechanism agent minerva 
mdlp extension answer set programming asp knowledge represented logic programs arranged acyclic digraph 
digraph vertices sets logic programs edges represent relations program 
mdlp enjoys merits asp default negation 
default negation allows definition nonmonotonic behaviour facilitating representation reasoning incomplete knowledge 
mdlp allows simultaneous representation aspects hierarchies preferences evolution represented knowledge 
kabul knowledge behavior update language evolution logic programming style language allows specification updates knowledge base 
program kabul set statements statement type rule seen encoding agent behaviour 
epistemic effects actions update knowledge base agent represented mdlp program self update kabul program changing behaviour agent time 
conditions range external observations epistemic state agent concurrent execution actions 
allows combination reactive proactive behaviour sense external stimuli needed trigger behaviour agent combined rational features provided underlying mdlp knowledge representation framework formal precise asp semantics 
information regarding mdlp kabul minerva 
dali active logic programming language designed executable specification logical agents 
uses plain horn clauses semantics herbrand models 
intends provide constructs represent reactivity proactivity agent means rules 
dali agent logic program contains reactive rules events actions aimed interacting external environment 
reactive proactive behaviour dali agent triggered kinds events external internal past events 
events actions time stamped record occurred 
new syntactic entities predicates related events proactivity indicated special 
event occurs agent external world agent perceive decide react 
reaction defined reactive rule head external event 
internal events define behaviour dali agent making proactive independently environment allowing manipulate revise knowledge 
respect logic language welldefined formal semantics allowing definition reactions expressed terms rules 
rule respect consists head specifying communication event triggers reaction body specifying actions tuples tuple centre atomically executed reaction triggered 
basic action fails reaction atomically fails effects tuple centre state rolled back 
coordinating behaviour informatica bordini tuple centres changed adapted runtime dynamically changing reactions defined respect 
feature typically exploited deal dynamism openness mas applications 
tuple centre programmed reactions acts basic scheduler encapsulating policy adopted coordinate various autonomous agent tasks 
changing reactions coordinating behaviour system changes need change agent behaviour 
language tucson framework discussed section 
imperative languages purely imperative approaches agent oriented programming common mainly due fact abstractions related agent oriented design typically declarative nature 
programmers conventional non agent oriented imperative languages developing multi agent systems result practice agent notions implemented ad hoc manner 
example agent oriented language essentially imperative incorporating agent specific abstractions language available development environment jack 
jack agent language jal developed called agent oriented software 
jal ideas reactive planning systems resulting bdi agent architecture respect similar hybrid languages jason apl discussed section 
providing logic language jal extension java implementing features logic languages logical variables 
number syntactic constructs added java allowing programmers create plans belief bases graphical manner jal sophisticated ide provides tool purpose 
jal plans composed reasoning methods grouped capabilities compose specific ability agent supposed supporting degree modularisation 
structuring mechanism jal ability teams agents agent organisations notion increasingly important agent oriented design developments self organising systems 
jal formal semantics commercial platform jack extensive documentation supporting tools 
variety industrial applications research 
evaluation purposes free trial license jal obtained information available www agent software com 
hybrid approaches various known agent languages combine declarative imperative features 
section describe agent programming languages declarative time providing specific constructs allowing code implemented external imperative language 
constructs serve means legacy code 
languages chosen illustrate hybrid approach apl jason impact go af apl 
apl agent programming language triple programming language implementing cognitive agents beliefs goals plans mental attitudes generate revise plans achieve goals able interact environment share agents 
version apl designed utrecht university 
initial design apl programming language subject continuous development 
main features apl consists programming constructs implement mental attitudes agent deliberation process manipulates 
particular apl allows direct specification mental attitudes beliefs goals plans actions reasoning rules 
actions form basic building blocks plans internal mental actions external actions communication actions 
deliberation related constructs allow implementation selection execution actions plans agent belief base updated shared environment modified 
allows selection application reasoning rules plan base modified 
apl programming language designed respect number software engineering programming principles separation concerns modularity abstraction reusability 
supports integration prolog declarative java imperative programming languages 
interested readers find apl user guide www cs uu nl apl number illustrative toy problem applications blocks world axelrod tournament english auction system contract net protocol 
apl applied implementation high level control mobile robots 
particular apl controlling behaviour sony aibo robots implement mobile applications 
jason interpreter implemented bordini bner extended version agentspeak logic agent oriented programming language introduced rao 
language influenced beliefs desires intentions bdi architecture bdi logics 
semantics extended language call simply agentspeak bordini colleagues revised appears 
core interpreter available jason fact implementation operational semantics 
jason available open source gnu athttp jason sourceforge net 
documentation available url best mate survey languages platforms 
informatica overview jason 
features available jason inter agent communication belief annotation information sources ii annotations plan labels elaborate decision theoretic selection functions iii fully customisable java selection functions trust functions agent architecture perception belief revision inter agent communication acting iv straightforward extensibility legacy code means user defined internal actions clear notion multi agent environment implemented java simulation real environment testing purposes system deployed 
jason simple ide discussed section 
impact system developed subrahmanian main purpose providing framework build agents top heterogeneous sources knowledge transform legacy code agents communicate act 
legacy code im pact provides notion agent program written language called code calls 
code call seen encapsulation legacy code represented logically conditions queries results produced code 
clauses form agent programs determining constraints actions taken agents 
actions impact deontic notions agent actions certain time obligatory permitted forbidden agent programs semantics resemble logic programs extended deontic modalities 
semantics notion rational status sets generalisations notion stable models logic programming 
impact platform provides number features including agent deployment network registration available agent services yellow page facilities 
information impact platform available athttp www cs umd edu projects impact 
framework extended support temporal probabilistic reasoning 
overview impact language platform 
go 
multi paradigm agent programming language declarative subset function relation definitions imperative subset comprising action procedure definitions rich program structuring mechanism 
symbolic programming language april go 
extends knowledge representation features logic programming yielding multi threaded strongly typed higher order functional programming sense language 
inherited april threads primarily communicate asynchronous message passing 
threads executing action rules react received messages pattern matching pattern message reaction rules 
communication daemon enables threads different go 
processes communicate transparently network 
typically agent comprise threads directly communicate threads agents 
threads single go 
process agent communicate manipulating shared cell dynamic relation objects 
linda tuple stores elements coordinate activities different threads agent 
go 
strongly typed reduce programmer burden compiletime type checking improves code safety 
new types declared new data constructors introduced 
design go 
took consideration critical issues security transparency integrity regards adoption logic programming technology 
features prolog lack transparent semantics cut left 
prolog clause syntax defining relations declarative semantics defining procedures operational semantics 
go behaviour described action rules specialised syntax 
agent factory agent programming language af apl core programming language resides heart agent factory reviewed section 
af apl originally agent oriented programming put forward shoham revised extended bdi concepts beliefs plans 
syntax semantics af apl language derived logical model agent commits course action 
details model 
specifically model defines mental state agent comprised primary mental attitudes beliefs commitments 
af apl belief set comprised set declarations current state environment 
agents situated af apl programmer declare explicitly agent set sensors referred set effectors known actuators 
realized instances java classes define convert raw sensor data beliefs may added belief set agent 
similarly actuator realized instance java class responsibilities define action identifier referring action realized actuator contain code implements action 
collectively declarations termed embodiment configuration agent specified agent program 
integrated development environments integrated development environments ides focus programming language level intend enhance productivity automating tedious coding tasks 
looking current ides object oriented domain informatica bordini seen ides tend provide functionalities classified categories project management organising project structure developers needs creating editing source files providing structure views quick easy navigation online error detection auto completion refactoring enable fast reliable code restructuring operations build run process allowing execution applications ide testing supported unit testing test cases 
agent world situation differs conventional programming common ground respect agent programming languages agent architectures 
current agent ides exist agent languages specific agent frameworks 
additionally small proportion available agent frameworks offer ide support considering agentlink www agentlink org representative selection existing agent related software 
small number selected representative examples apl ide jason ide visual soar agent builder living systems developer 
apl ide allows developers load edit apl programs implement individual agents execute agent programs step step continuous fashion implement configure environment shared agents monitor internal state individual agents agent property window monitor exchange messages sniffer tool send external user message individual agent read system messages 
apl ide built top apl multi agent platform consists directory facilitator called agent management system message transport system delivers agent messages plugin interface allows agents execute actions shared environment 
apl platform allows implementation concurrent execution set apl agents 
apl development environment user guide documentation www cs uu nl apl 
jason distributed ide provides graphical interface editing multi agent system configuration file agentspeak code individual agents 
ide possible run control execution mode multi agent system distribute agents network simple way 
ide provides tool called mind inspector allows user inspect agents internal states system running debugging mode 
useful debugging agentspeak mas allows programmer inspect agents mental attitudes distributed system 
jack development environment commercial ide jack bdi agent platform developed agent oriented software jack agent language jal section 
allows agent developers files projects offering semantically organised tree view respect different kinds contained elements 
editing agent code supported rudimentary integrated editor example provides syntax highlighting jal 
advanced features auto completion error detection available 
ide provides graphical plan editor allows construction plan visual components similar statecharts 
code base project complete possible compile run application directly ide 
component agent framework non experts tool represent ide classical sense 
objective enable domain experts modify existing agent application 
conceived support development bdi agents platform independent bdi component language adapted smart 
rationale hide agent code layer provide interactive dialogues development 
transformer modules generate platform dependent code internal representation 
visual soar freely available ide soar agent architecture 
supports basic project management capabilities mainly facilitates soar agent programming syntax highlighting consistency checking functionalities 
additionally ide provides connection soar runtime environment allowing soar agents executed ide 
agent platform directly agent oriented programming aop originally defined shoham developed relies agent language extension shoham agent 
agent language intended direct programming agent developer ide consists variety different tools supporting aspects building agent applications 
ide conceived hide agent code possible offers graphical wizards tools possible 
provides simple project management functionalities integrates compiler tool 
successfully built agent applications directly executed ide 
agent factory development environment offers support basic project management editing assembling different agent constituents 
contains cohesive layered framework development deployment agent oriented applications 
centre framework agent factory agent programming language af apl described section 
af apl interpreter embedded distributed fipa compliant run time environment rte seen collection agent platforms 
ide tool named viper allows composition agent uml sequence diagrams sit heart protocol model 
addition tools provided support development af apl agents survey languages platforms 
informatica agent factory development environment includes suite tools facilitate testing debugging agent oriented applications 
living systems developer commercial ide living systems technology suite developed www com 
underlying agent platform supports java agents supporting specialised agent language 
ide designed eclipse www 
eclipse org plug providing sophisticated editing refactoring functionalities java code 
addition agent related aspects project management accordance agent features added 
facilitate development process agentbased applications ide extended fully support phases agent development methodology created 
agent platforms frameworks languages described underlying platform implements semantics agent programming language 
implemented frameworks exist strongly tied particular programming language 
frameworks concerned providing support aspects agent communication coordination 
section focus frameworks having chosen tucson jade desire illustrative examples 
tucson tuple centre spread network framework mas coordination model related infrastructure providing general purpose programmable services supporting agent communication coordination 
model tuple centres runtime programmable abstractions coordinating behaviour dynamically specified logic language called respect 
tuple centres example coordination artifacts see survey environment modelling mas class entities tools populating agent cooperative working environment shared collectively agents support coordination 
abstractions soda methodology see survey agent oriented software engineering basic building blocks designing social level environment mas 
tucson technology available open source project tucson sourceforge net 
completely java composed runtime platform installed hosts turn nodes infrastructure set libraries apis enable agents access services set tools mainly support runtime inspection control monitoring debugging tuple centres state coordinating behaviour 
heart tucson technology technology prolog engine fully integrated java environment available standalone library environment technology available sourceforge net 
adopted research projects distributed workflow management logistics learning tucson currently platforms building agent systems academic projects thesis developed engineering faculties bologna 
jade java agent development framework java framework development distributed multiagent applications 
represents agent middleware providing set available easy services graphical tools debugging testing 
main objectives platform support interoperability strictly adhering fipa specifications concerning platform architecture communication infrastructure 
jade flexible adapted devices limited resources pdas mobile phones 
jade widely years academic industrial organisations see ranging tutorials teaching support agent related university courses industrial prototyping 
example jade construct agent system decision making support organ transplant centres 
jade platform open source software distributed telecom italia laboratories terms license obtained jade com 
may international jade board responsible supervising management project 
currently jade board consists members motorola technologies ag france telecom 
software framework creation goal oriented agents belief desire intention bdi model 
framework realized rational agent layer sits top middleware agent infrastructure jade supports agent development established technologies java xml 
reasoning engine addresses traditional limitations bdi systems introducing new concepts explicit goals goal deliberation mechanisms see making results goal oriented analysis design methods kaos tropos easily transferable implementation phase 
build applications different domains simulation scheduling mobile computing 
example develop multi agent application negotiation treatment schedules hospitals 
successfully software engineering courses university hamburg 
system developed distributed systems information systems group university hamburg freely available license downloaded fromhttp sourceforge 
net 
framework additional development informatica bordini tools distribution contains introductory tutorial user guide illustrative example applications source code 
desire design specification interacting reasoning components compositional development method multi agent systems notion compositional architecture developed treur vrije universiteit amsterdam 
approach agent design main aspects process composition knowledge composition relations knowledge process composition 
component agent approach agent complex reasoning process built interaction components representing subprocesses reasoning process 
reasoning process structured number reasoning components interact 
components may may composed components components decomposed called primitive components 
functioning agent system functionality primitive components plus composition relation coordinates interaction 
specification composition relation may involve example possibilities information exchange components control structure activates components 
desire approach applications load balancing electricity distribution diagnosis systems 
information documentation tools supporting development implementation multi agent systems desire available athttp www vu nl wai tools html 
reading complemented related literature 
spread text pointing detailed explanations systems described recommend survey agent programming languages provides detailed view congolog agent impact concurrent metatem book programming languages multi agent systems published 
contains detailed description selection practical programming languages tools support mas programming implement key mas concepts unified framework 
extensive overview agent technology available includes comprehensive collection papers technologies methodologies current research trends mas domain 
mentioned criteria choice systems part extent european researchers contributed development 
course various agent languages platforms tools referred 
collection agent related software agentlink iii website www agentlink org 
systems described focus implementation phase 
current research trends include attempt implementation easier bridging analysis design phase directly implementation 
examples research efforts development kit sourceforge net mase cis ksu edu projects htm 
final remarks programming multi agent systems rapidly turning new discipline 
described examples languages systems currently developed area 
draw main topics survey languages ides platforms 
languages 
research agent oriented programming languages declarative approaches 
declarative solutions logic 
purely imperative languages unusual agents literature essence inappropriate expressing high level abstractions associated agent systems design 
hand saw agent oriented programming languages tend allow easy integration legacy code written imperative languages 
interestingly characteristics underlying agent architectures determine appropriate interpreters compilers 
ides 
existing ides provide basic support project management creating editing files building running systems fail support sophisticated features categories 
addition agent ides covers aspects refactoring testing agent applications 
reason living systems developer ides developed scratch rely existing reliable technology 
general ide support developing agent systems weak existing agent tools offer level usability state art objectoriented ides 
main reason currently unavoidable tight coupling agent ides agent platforms results lack agreement unified programming language multi agent systems 
trend observable ides contrast object oriented ides partly try away underlying programming language favour graphical means programming wizards statecharts 
platforms 
closed frameworks desire strongly platform provide complete solutions tucson 
usually offer agent architecture system model useful novel developers communication survey languages platforms 
informatica range robust services directory facilitators agent management services monitoring facilities 
drawback closed frameworks limit development 
example design approach framework may fit certain domain problems 
reason researchers tend open solutions 
currently popular solution jade underlying agent infrastructure combined higher level approach program agents behaviour 
dealing general frameworks tied platform defining agents run required services resources automated possible part free developer low level details location configuration files concrete syntax 
despite existing frameworks ide support 
concerning paradigm communication offer important issue choosing framework adopt 
tucson representative tuple centred communication jade message passing desire data flow processes 
various approaches mentioned survey indicate done 
major challenges faced research community conception development specialised debugging tools particular cognitive agent languages integration agent tools existing ides starting scratch separation mas frameworks agent platforms framework deploying systems variety platforms 
dissemination mas programming paradigm programmers better understanding foundations practical characteristics 
believe developments surveyed show lively interest area research 
despite large number open issues challenges expect experience gathered developing mas tools take closer mature programming paradigm 
arguably concrete ways allowing wider audiences practice systematic way various techniques mas research community developed decades 
gratefully acknowledge help support agentlink iii particular technical fora motivated authors producing joint survey provided conditions discussion guide area research 
acknowledge valuable comments suggestions provided anonymous referees 
alferes brogi leite pereira 
evolving logic programs 
flesca greco leone editors proceedings th european conference logics artificial intelligence jelia volume lnai pages 
springer 
caire poggi 
jade java agent development framework 
bordini chapter pages 

zambonelli editors 
methodologies software engineering agent systems 
kluwer 

overview current trends european aose research 
journal informatica 
volume 
bordini dastani dix el editors 
multi agent programming languages platforms applications 
number multiagent systems artificial societies simulated organizations 
springer 
bordini bner jason manual release edition aug 
jason sf net 
bordini bner 
jason golden agent oriented programming 
bordini chapter pages 
moldt lamersdorf 
goal representation bdi agent systems 
bordini dastani dix el editors programming multi agent systems second int 
workshop volume lnai pages 
springer verlag 
brazier jonker treur 
principles compositional multi agent system development 
proceedings conference information technology knowledge systems pages 
austrian computer society 
funk 
multi agent system organ transplant management 
moreno editors applications software agent technology healthcare domain pages 
birkh user verlag 
informatica bordini cardelli gordon 
mobile ambients 
nivat editor foundations software science computational structures volume lncs pages 
springer 
clark mccabe 
go 
multiparadigm programming language implementing multi threaded agents 
annals mathematics artificial intelligence 
collier 
agent factory framework engineering agent oriented applications 
phd thesis university college dublin 
costantini 
logic programming language multi agent systems 
flesca greco leone editors proceedings th european conference logics artificial intelligence jelia volume lnai pages 
springer 
dastani de boer dignum 
meyer 
programming agent deliberation approach illustrated apl language 
proceedings second international joint conference autonomous agents multiagent systems aa mas pages 
acm 
dastani van dignum meyer 
programming language cognitive agents goal directed apl 
dastani dix el editors programming multiagent systems international workshop pro mas volume lncs pages berlin 
springer verlag 
dastani van 
meyer 
programming multi agent systems apl 
bordini chapter pages 

analysis design mase 
proceedings midwest artificial intelligence cognitive science 
miami university press 
omicini ricci 
multi paradigm java prolog integration 
science computer programming 
press 
dix kraus subrahmanian 
agents dealing time uncertainty 
gini ishida castelfranchi johnson editors proceedings international joint conference autonomous agents multiagent systems aa mas pages 
acm press 
dix zhang 
impact multi agent framework declarative semantics 
bordini chapter pages 
el 
unified framework programming autonomous intelligent mobile agents 
ller editors proceedings third international central eastern european conference multi agent systems volume lnai pages 
springer verlag 
el 
claim computational language autonomous intelligent mobile agents 
dastani dix el editors programming multiagent systems international workshop pro mas volume lncs pages 
springer verlag 
el 
programming mobile intelligent agents operational semantics 
proceedings international conference intelligent agent technology pages 
ieee computer society 
el 
framework hierarchical intelligent mobile agents building large scale adaptive systems ambients 
ishida gasser nakashima editors proceedings massive multi agent systems workshop number lnai pages 
springer verlag 
fletcher jones jarvis dance 
implementing industrial multi agent systems jack tm programming multiagent systems international workshop volume lnai pages 
springer verlag 
gomez sanz 
agent oriented software engineering 
ller editors proceedings third international central eastern european conference multi agent systems volume lncs pages 
springer verlag 
de boer van der hoek ch 
meyer 
agent programming apl 
int 
autonomous agents multi agent systems 
padgham 
component agent framework non experts toolkit 
klusch editors software agent applications platforms development kits 
birkh user publishing 
klein el 
resource sharing load balancing agent mobility 
proceedings international conference enterprise information systems pages 
press 
survey languages platforms 
informatica lehman laird rosenbloom 
gentle soar architecture human cognition 
sternberg editors invitation cognitive science vol 

mit press 
leite 
evolving knowledge bases volume frontiers artificial intelligence applications 
ios press 
leite alferes pereira 
min dynamic logic programming agent architecture 

meyer tambe editors intelligent agents viii agent theories architectures languages volume lnai pages 
springer 
luck inverno 
understanding agent systems 
springer series agent technology 
springer nd edition 
martelli sterling 
logicbased specification languages intelligent software agents 
theory practice logic programming 
mccabe clark 
april agent process interaction language 
wooldridge jennings editors intelligent agents ecai workshop agent theories architectures languages volume lnai pages 
springer 
milojicic busse campbell friedman lange ono oshima tham white 
omg mobile agent system interoperability facility 
proceedings mobile agents volume lnai pages 
springer 
omicini 
tuple spaces tuple centres 
science computer programming nov 
omicini zambonelli 
coordination internet application development 
int 
autonomous agents multi agent systems 
ller lamersdorf 
dynamic patient scheduling hospitals 
ller editors coordination agent technology value networks 
berlin 
plotkin 
structural approach operational semantics 
technical report daimi fn department computer science university 
lamersdorf 
bdi reasoning engine 
bordini chapter pages 
rao 
agentspeak bdi agents speak logical computable language 
proceedings modelling autonomous agents multi agent world number lnai pages 
springer verlag 
rao georgeff 
bdi agents theory practice 
proceedings international conference multi agent systems pages 
aaai press mit press 
collier hare 
viper visual protocol editor 
nicola ferrari meredith editors proceedings international conference coordination models languages volume lncs pages 
springer verlag 
ross collier hare 
af apl bridging principles practices agent oriented languages 
bordini dastani dix el editors programming multi agent systems second int 
workshop volume lncs pages 
springer verlag 


self organisation emergence mas overview 
journal informatica 
volume 
shoham 
agent oriented programming 
artificial intelligence 
subrahmanian dix eiter kraus ross 
heterogenous active agents 
mit press 
el 
adaptative mobile multi agent systems 
proceedings international central eastern european conference multi agent systems lnai 
appear 
el 
mobile agents platform architecture mobility security elements 
bordini dastani dix el editors programming multi agent systems second int 
workshop pro mas volume lnai pages new york 
springer verlag 
el 
commerce agent oriented approach 
revista de artifical 
informatica bordini thielscher 
flux logic programming method reasoning agents 
theory practice logic programming 
appear 
thielscher 
reasoning robots art science programming robotic agents volume applied logic series 
springer 
moreira wooldridge bordini 
formal semantics speech act communication agent oriented programming language 
appear 
weyns holvoet 
role environments multiagent systems 
journal informatica 
volume 

jack tm intelligent agents industrial strength platform 
bordini chapter pages 
