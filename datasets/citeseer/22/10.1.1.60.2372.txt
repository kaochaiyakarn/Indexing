predicting short transfer latency tcp trace validation martin arlitt hp labs university calgary palo alto ca martin arlitt hp com contexts may useful predict latency short tcp transfers 
example web server automatically tailor content depending network path client opportunistic networking application improve scheduling data transfers 
techniques proposed predict latency short tcp transfers online measurements characteristics current tcp connection connections client 
analyze predictive abilities techniques traces variety web servers show achieve useful accuracy cases 
show previously described model predicting short transfer tcp latency improved simple modification 
trace analysis evaluates prediction techniques diverse user communities 
useful predict latency duration short tcp transfer deciding initiate 
network bandwidths round trip times rtts loss rates vary orders magnitude transfer latency data item vary similarly 
examples predictions useful include web server automatically select high bandwidth versions content aim keeping user download latency threshold 
web server shortest remaining scheduling better predict response times predict network transfer latency cases primary contributor response time 
application opportunistic networking choose schedule data send estimate duration transfer opportunity predictions data items balachander krishnamurthy labs research florham park nj bala research att com jeffrey mogul hp labs palo alto ca jeff mogul hp com effective opportunity 
possible ways define short tcp transfers 
models tcp performance typically distinguish long flows achieved steady state short flows long leave initial slow start phase 
alternatively define short terms arbitrary threshold transfer length 
defining short terms slow start behavior arbitrary predictable duration slow start depends unpredictable factors cross traffic packet loss definition transfer length 
similarly transfer length defined terms number data packets sent depends unpredictable factors mtu discovery interactions application buffering socket level buffering 
simplicity define short terms number bytes transferred 
techniques previously proposed automated prediction transfer time short tcp transfer 
techniques glean input parameters characteristics tcp connections round trip time rtt congestion window size cwnd normally exposed server application 
call characteristics tcp 
characteristics previously described model predicting short transfer latency 
techniques observations actual latency past transfers client similarly located clients assume past performance predictor performance 
packet level traces captured near variety real web servers evaluate ability techniques tcp historical observation predict short transfer latencies 
show previously described model quite fit observations simple modification model greatly improves fit 
describe experiment suggesting limited data set rtt observations discriminate modest accuracy dialup non dialup paths 
complements previous predicting throughput obtained long tcp transfers 
characterized techniques formula history tcp approach formula 
latency prediction techniques start assumption application wishing predict latency short transfer early possible data transferred 
assume prediction done server connection initiated client approaches extended client side prediction data evaluate scenario 
examine prediction approaches initial rtt approach server possible measurement connection rtt provided interval initial syn ack packet client subsequent ack 
short transfers rtt measurement sufficient predict subsequent data transfer latency client 
approach proposed mogul brakmo discussed 
describe section 
transfers approach server predict data transfer bandwidth request measured transfer bandwidths client 
approach context web servers proposed describe section 
prediction initial rtts suppose wants predict transfer latency response length specific connection prior information client network path having decision content send client 
assume want server generate extra network traffic cause extra delays 
information glean tcp connection late 
shows timeline packets sent typical non persistent connection 
assume client tcp implementation allow client application send data way handshake true common stacks 
timeline server decision immediately seeing get bearing packet client 
possible infer network path characteristics relative timing client ack get packets packet pair method 
initial rtt predictor uses path rtt measured server syn ack packet client subsequent ack packet 
packets near minimum length provide direct measurement rtt absence packet loss 
client server syn syn ack ack get ack reply reply fin ack rtt timeline typical connection rtt useful predictor transfer latency 
hop network technologies impose high delay low bandwidth 
example dialup modems add ms rtt usually limit bandwidth kb observe rtt lower ms infer path involve modem 
see section quantitative evidence 
similar inference popular low bandwidth wireless media 
bandwidth large total transfer time short responses depends rtt 
request header indicating client connection speed reliably predict latency transfers 
cardwell showed transfers smaller limiting window size expected latency transfer segments tcp packet losses approximated transfer latency depends client delayed ack policy reason able values see details 
depends server initial value values see details 
number bytes sent 
tcp maximum segment size connection 
note median web response sizes definition response specification typically smaller limiting window size see section 
bandwidth limits packet losses increase latency 
words know rtt response size predict lower bound transfer latency 
rtt predict transfer latency soon possible 
time server sees request client rtt measurement purpose 
client returns rtt measurement server prediction 
measurement current connection mean measurements deal noise exponentially smoothed mean reduce noise favoring fresh values minimum measurement account variable queueing delays maximum measurement conservative 
requires client state simplest implement variant evaluated 
prediction previous transfers krishnamurthy wills originally described notion measurements previous transfers estimate connectivity clients 
prime motivation retain poorly connected clients avoid web site pages take long download 
better connected clients enhanced versions pages 
approach largely passive examines server logs measure inter arrival time base object html requests requests embedded objects typically images 
exponentially smoothed means measurements classify clients 
network aware clustering scheme initial classification mechanism client seen client cluster site 
krishnamurthy wills diverse collection server logs multiple sites evaluate design krishnamurthy implementation modified version apache server test impact various server actions clients different connectivity 
transfers approach study simplification krishnamurthy wills design 
measurements web server logs gave information page structure investigate algorithm ability predict download time entire page including embedded objects 
extracted object relationship information packet traces evaluated response latency page latency 
hand server logs provide timing information second resolution means log evaluation provide fine grained timing resolution got packet traces 
defining transfer latency far vague defining transfer latency define time departure response byte server arrival response byte client 
perfect clock synchronization packet traces host involved duration impossible measure 
define transfer latency time departure response byte server arrival server acknowledgment response byte 
depicts interval case non persistent connection 
tends inflate latency measurement approximately rtt path delays asymmetric attempt correct inflation 
effectively measuring upper bound transfer latency 
methodology followed methodology step collect packet traces near variety web servers different diverse user populations 
step extract necessary connection parameters including client ids raw traces create intermediate traces 
step evaluate predictors simple simu driven intermediate traces 
prediction mechanisms analyzed necessarily specific web traffic limited trace study web traffic obtained significant diverse traces traffic 
useful capture traffic near busy mail servers get relevant data set mail transfers tend short 
defining short tcp transfers terms number data bytes sent analyzed plausible thresholds bytes bytes bytes focuses byte threshold 
distributions support choice 
trace sets collected trace sets different environments north america 
reasons confidentiality identify sets short names collected corporate network collected university collected corporate research lab cases traces collected public internet intranet collected relatively near exactly publicly accessible web server 
collected full packet traces tcpdump limited traces include tcp connections local web server 
wanted collect traces covering entire week site storage limits restrictions meant collect series shorter traces 
order cover representative periods course week may chose gather traces hours day am am monday wednesday friday pm pm tuesday thursday am pm saturday sunday local times respect trace site mst pdt 
additionally gathered hour midnight midnight traces university thursday aug tuesday aug 
traces representative 
certainly prefer traces diverse sample servers clients network paths necessary validate approach 
goal predict latencies seen client server pairs internet find method server predict latencies encounter near 
true servers client populations differ ones traces results apply 
logistical privacy constraints prevent exploring wider set traces analysis tools available bro ids org network analysis imc test analyses traces 
results section imply equation predictor works sites 
trace methodology discover server response latencies sufficiently predictable deciding implement prediction adaptation server 
trace analysis tools start processing raw full packet binary traces generate tuple request response exchange 
write new program process raw traces took advantage bro powerful tool originally meant network intrusion detection 
bro includes policy script interpreter scripts written bro custom scripting language allowed processing relatively simple policy script lines including comments 
currently version bro 
bro reduces network stream series higher level events 
policy script defines handlers relevant events 
identify analysis states tcp connection established timing syn ack established error occurred 
analysis states transaction waiting reply waiting reply waiting ack reply transaction complete 
script follows existing bro practice term reply lieu response state names 
progression states occurs follows 
client syn packet received data structure created retain information connection starts established state 
corresponding syn ack packet received server modeled connection enters timing syn ack state established state client acknowledges syn ack 
wait request events occur connection 
request received data structure created retain information transaction starts waiting reply transaction state 
reply event state waiting reply 
server finished sending response transaction state set waiting ack reply 
entire response acknowledged client state set transaction complete 
design allows script properly handle persistent pipelined connections 
analysis uses additional state error occurred example tcp connection reset packet missing causing gap tcp data 
subsequent packets connection error occurred state ignored rtt bandwidth estimates recorded transactions completed connection error occurred 
successfully completed successfully traced request response exchange script generates tuple includes timestamp arrival time client outstanding response data client ip address response length content type status code position response persistent connection estimates initial rtt mss response transfer latency response transfer bandwidth 
latency estimated described section bandwidth estimate computed latency estimate length 
tuples form intermediate trace convenient analysis orders magnitude smaller original raw packet trace 
subsequent analysis examine responses status code ones carry full length bodies 
proxies robots web servers receive requests multi client proxy servers robots search engine crawlers kinds clients tend frequent requests single human clients 
requests proxies robots skew stream average connection bandwidth predictable bias results favor prediction mechanisms 
pruned traces remove apparent proxies robots identified separate bro script analyzed pruned unpruned traces 
order avoid tedious error prone techniques distinguishing robots proxies tested heuristics automatically detect clients request including header probably comes proxy 
converse true proxies headers 
request including header probably comes robot 
robots headers 
client ip address generates requests agent headers short interval probably proxy server multiple clients browser 
dynamic ip address reassigned different client time scale affects accuracy heuristic 
ignore user agent headers artifact particular browser 
results tests revealed header widely reasonable method identifying robots traces 
test results indicated simply excluding clients issued user agent header result excessive pruning 
analysis headers suggested components personal firewalls add header requests 
result decided prune clients include header automatically identified multi client proxy example added squid inktomi traffic server proxy 
adopted similar approach pruning clients sent multiple agent headers 
require agent headers known browsers mozilla 
browsers typically form agent header structured format 
identify type browser browser version client os header analysis 
see requests different browsers browser versions client oss coming ip address limited duration trace consider proxy exclude client prune trace 
opted err slightly side excessive pruning striving accuracy order reduce chances biasing results favor predictors 
trace characteristics table shows various aggregate statistics trace set provide context rest results 
reasons space omit day day statistics show usual daily variations load peak weekend peaks week 
table shows totals pruned versions trace set 
table shows total response bytes response count mean response size just status responses subsequent analyses 
add names trace sets pruned pruned version trace set named 
pruning reduces number clients trace number responses peak request rate 
cumulative fraction cumulative fraction response size bytes trace set trace set trace set trace set trace set trace set cdf status response sizes response latency seconds trace set trace set trace set trace set cdf status response latencies mean values table convey story 
figures respectively plot cumulative distributions response size latency status responses plots exclude traces cdfs nearly identical trace excludes cdfs nearly identical unpruned traces 
traces show quite different response size distributions 
responses trace somewhat smaller typically reported web traces responses trace lot larger 
differences appear mean response sizes table 
trace unusual part users site download entire technical reports tend larger individual html embedded image files 
includes vertical lines indicating byte byte byte thresholds 
note median size median size median traces bytes 
status codes status code total total total total mean resp 
mean peak total total mean resp 
trace name 
clients resp 
bytes resps 
size bytes req 
rate req 
rate resp 
bytes resps 
size bytes sec sec pruned sec sec sec sec pruned sec sec sec sec pruned sec sec sec sec pruned sec sec sec sec pruned sec sec shows response durations significantly longer trace possibly longer response sizes 
fraction clients trace set trace set trace set mean bandwidth client bits sec pdf mean bandwidth client calculated distinct client mean bandwidth transfers client 
shows distributions pruned traces similar distributions shown 
trace larger fraction users 
apparent slight excess high bandwidth clients result larger responses larger transfers generally increase tcp efficiency available bandwidth 
looked distribution tcp maximum segment size mss values traces 
trace virtually mss values close standard ethernet limit bytes traces mss values near limit rest close bytes 
shows vertical line bytes indicating approximately dominant mss value lies response size distribution 
trace anomalies monitoring architectures available differed collection sites 
example sites port mirroring copy packets monitored link mirrored link 
site separate links tapped packets bound web server second packets sent server 
monitoring infrastructures subject variety measurement errors port mirroring multiplexes bidirectional traffic monitored link unidirectional mirror link 
table trace characteristics cause packets appear trace different order arrived monitored link 
reordering typically affects packets occurred close time 
example trace connections syn syn ack packets reverse order 
bro script corrects 
port mirroring temporarily buffers packets monitored link sent mirrored link 
buffer overflow causing packets dropped 
environments multiple network links transfer packets web server 
monitor links capture request response transactions 
cases capture half transaction connections affected trace 
ideally traced packet timestamped precise instant arrives 
trace collection systems buffer packets briefly places attaching timestamp packets collected nearby points packet monitors members pair simplex links introduces timestamp errors due imperfect clock synchronization 
erroneous timestamps cause errors analysis affecting rtt estimates latency estimates 
estimated number packets lost measurement system watching gaps tcp sequence numbers 
overestimate losses due reordered packets estimates reported table quite low 
table shows estimates separate bro script packet retransmission rates path client server implied packets cover part tcp sequence space seen 
retransmissions normally reflect packet losses internet invalidate model equation 
knowing rates help understand initial rtt approach applicable 
note table includes connections complete response table includes total total measurement retransmitted 

pkts trace name packets 
system lost pkts 
packets retransmitted packets direction connections including errors 
able connections listed table partly saw packets direction connections 
analysis script flagged connections error occurred possibly due unknown problems monitoring infrastructure 
predictions initial rtt results section summarize results experiments techniques predict transfer latency initial rtt 
address questions 
rtt se correlate latency 

equation predict latency 

improve equation 

effect modem compression 

sensitive predictions parameter choices 
single way define means latency predictor provide predictions 
evaluate prediction methods criteria including correlation predicted measured latencies mean median difference actual predicted latencies 
rtt correlate latency 
measured transfer bandwidth bits sec sampling ratio measured rtt sec scatter plot bandwidth vs rtt trace unnecessary invoke full complexity equation predict latency rtt 
investigate examined correlation rtt se bandwidth latency 
example shows scatter plot bandwidth vs initial rtt status responses trace 
order avoid scatter plots randomly sampled actual data plot sampling table packet loss rates measured transfer bandwidth bits sec sampling ratio measured rtt sec bw vs rtt trace mss length kb ratios shown figures 
graph shows apparent weak correlation initial rtt transfer bandwidth 
corresponding scatter plots show weaker correlations 
stronger correlation focused transfer lengths mss bytes shown 
technique measuring latency probably accurate responses mss sent just packet 
single packet responses may suffer excess apparent delay measured server receives final ack delayed acknowledgment client 
subsequent analyses exclude responses lengths mss measurement difficulties 
kb threshold represents plausible choice defining short transfer 
trace samples correlation correlation name included bandwidth latency mss length kb trace samples correlation correlation name included bandwidth latency mss length kb table correlations rtt vs bandwidth latency quantified evaluation simplistic ap proach statistical analysis simple program 
results shown table lengths limited bytes respectively 
tables show rows pruned unpruned versions basic traces 
included status responses length mss samples included column shows count trace 
columns show computed correlation initial rtt transfer bandwidth transfer latency 
bandwidth correlations negative inverse relationship 
data set including response lengths bytes correlations exceeds lower 
limit response lengths bytes correlations improve eliminates samples 
tried excluding samples initial rtt value quantile theory high rtts correlate lossy network paths slightly improves rtt vs bandwidth correlations example excluding records rtt msec reduces number kor shorter samples improves correlation worsens latency correlations example 
note contrary expectation traces pruned proxies robots predictable table true trace general pruning slightly improve predictability 
fact results pruned unpruned traces see consistent difference predictability 
equation predict latency 
expect rtt correlate latency expect better results sophisticated model derived cardwell 
validated model equation simplified version transfers internet apparently connected clients probe utility poorly connected clients 
rtt estimates included samples just connection initial rtt 
analyzed ability equation predict transfer bandwidths latencies initial rtt belief traces include poorly connected clients 
shows example scatter plot measured latency vs predicted latency trace 
include status responses mss length 
superimposed curves plot 
log log plot linear equations result curved lines 
point line represents measured latency sec sampling ratio predicted latency response sec real vs predicted latency trace prediction latency generally worse example want avoid exposing web users unexpectedly long downloads 
points plot line curve implying example sec excess 
significant number seconds high 
extended program compute statistics predictive ability equation 
status trace record length mss bytes equation predict latency compared latency recorded trace record 
computed correlation actual predicted latencies 
computed residual error value difference actual predicted latencies 
table shows results analysis parameter assignment worked fairly traces 
trace samples correlation median mean name included latency residual residual residual values measured seconds mss length kb table quality predictions equation table median residuals negative implying equation overestimates transfer latency underestimates 
mean residuals positive equation underestimates wrong absolute terms overestimates 
samples generally follow line steeper slope suggesting equation especially underestimates higher latencies 
possible reason lower bandwidth links rtt depends packet size 
typical kb modem link syn packet see rtt somewhat msec byte data packet see rtt sev eral times larger 
effect cause equation underestimate transfer latencies 
improve equation 
equation systematically underestimate higher latencies exactly error want avoid realized modify equation reduce errors 
experimented modifications including linear multiplier simple approach function rtt mss length temp rtt mss length return temp temp temp term proportional square original prediction 
heuristic result rigorous theory 
trial error proportionality constant compensation weight worked best worked better worked best 
traces got best results set 
discuss sensitivity parameters section 
measured latency sec sampling ratio predicted latency response sec modified prediction results trace shows modified prediction algorithm systematically higher latencies significantly changing accuracy lower latencies 
example equation predicts latency seconds modified prediction seconds 
modified algorithm significantly samples believe avoid especially connections suffer packet loss see table 
table shows modifications equation generally worsen correlations compared table definitely improves residuals median error msec mean error msec traces parameter choices tuned unpruned traces 
trace samples correlation median mean name included latency residual residual residual values measured seconds mss length kb table predictions modified equation text content modem compression people dialup modems 
observed accurately model path bandwidth account compression typically done modems 
image content types compressed correction done text content types 
responses normally carry mime content type label allowed analyze trace subsets text image subsets 
table shows distribution coarse content type distinctions traces 
speculated latency prediction model equation incorporates response length improved reducing length value compression expected 
server making predictions knows content types responses plans send 
servers compressed content coding text responses obviate need correct predictions responses modem compression 
responses traces 
directly predict compression ratio varies responses modems reliably determine clients traces modems 
feasibility analysis model assumes constant compressibility factor text responses tested plausible values factor 
assumed rtt msec implied non modem connection rtts msec implied possible modem 
real system information derived client address identify modem users reliably 
section classify clients hostnames add delay effective latency prediction 
table shows results text content types modified prediction algorithm equation correcting possible modem compression 
set traces traces 
tested wide range values see text benefit different compared results content types see table residuals text samples generally higher 
content type unknown text image application video audio table counts frequency content types excluding rarely seen types trace samples correlation median mean name included latency residual residual residual values measured seconds mss length kb table predictions text content types trace samples compression correlation median mean name included factor latency residual residual residual values measured seconds mss length kb table predictions text compression table shows results text content types assumed modems compress factor shown third column 
note got best results compression factor correcting compression 
traces correcting compression give better results 
set parameters worked best worked best worked best 
experimented assuming path involve modem corrected compression initial rtt msec turned got best results assumed text responses corrected compression 
table shows trace correcting modem compression improves mean residuals table 
evaluated compression factors integers evaluate full range values section 
image content shown table image content types dominate traces 
web site designers choices rich simple content image types text types 
designers include optional flash animations flash content relatively little 
compared predictability transfer latencies image content types clear difference compared results content general 
sensitivity parameters sensitive prediction performance parameters question framed ways results server vary parameter values 
parameters chosen traces server server 
optimal values constant time client subpopulation content type response length 
optimal parameter values depend performance metric 
reasons space focus questions 
shows absolute values mean median residuals vary traces 
optimal parameter choice depends wants minimize mean median example yields optimal mean msec median msec 
median reduced msec cost increasing mean half second 
shows optimal parameters vary traces 
results traces similar omitted reduce clutter 
appears single choice optimal traces choices yield relatively small mean medians traces 
example yields optimal near optimal mean residuals decent results 
training testing different data results far parameter choices trained data sets results tested 
real prediction system requires advance training evaluated predictions training testing different data sets 
trace collection carefully designed regard pairs data sets completely mean residual secs median residual secs trace trace trace trace trace trace mean residual secs trace trace trace mean median sensitivity residual absolute values parameters mss length kb note different axis scales identical adjacent time 
data sets chose days training data set days testing data set 
collected data different hours day day week differences training testing sets testing sets includes weekend days suspect pairs data sets sufficiently similar 
data set train parameters tested data set traces similar 
trained parameters testing results residual rank trace comp best name weight training residual resid 
residual values measured seconds mss length kb table training testing different data table shows results training vs testing 
tested trained parameter combinations possible choices choices twelve equally spaced choices trained parameters minimize absolute value mean residual training 
columns testing results show results trained parameters rank testing results mean residual parameters residual best possible parameter combination testing data 
results suggest degree training successfully select parameter values vary significantly site site 
traces median residual secs mean median trace trace trace success making useful predictions university site success research site 
difference observed result closer match datasets compared time day week discrepancies train test comparisons 
tried training just day tue may testing day got significantly better slightly worse table supports need match training testing data sets carefully 
server decision algorithm understand server initial rtt approach practice presents pseudo code generating predictions 
example context web server adapting content predicted transfer latency basic idea apply contexts 
server choices response length request invoke times starting largest candidate moving size finds small predicted latency choice left 
arguments function rtt mss client ip address known soon connection open 
response content type length specific candidate response server send 
function shown heuristic guess client connected modem probably compress text responses 
simply assume rtts msec additional information client dns name autonomous system number identify 

function rtt mss length 
rtt text 
length 

length 

length 
return prediction probably leaves slow start 
length mss 
return prediction data packet send 

return rtt mss length estimate mean compression ra tio modems text files vary server observation history pseudo code decision algorithm detecting speculated server discriminate non clues client fully qualified domain name 
obtained clients trace grouped clues implied geography network technology 
note categorized method categorizations certainly wrong 
category 
ile median mean ile geography america america europe asia pacific africa dialup regional canada europe dsl local regional europe cable canada europe times seconds bold entries sec 
table rtts geography connection type table shows initial rtts vary geography connection type 
connections cat dialup connections rtts msec cable dsl connections rtts msec 
results unaffected geographical subdivision support hypothesis threshold rtt msec discriminate fairly dialup connections 
know results apply traces 
predictions previous bandwidths results section compare prediction variants equation compares predictions older transfers approach 
address questions 
predict latency previous bandwidth measurements 

combination approaches improve individual predictor 
note transfers approach specifically predict latency transfer client server history client 
problem goal provide best user experience client initial contact web site 
initial contacts server transfers approach predict latency options including prediction 
predict latency history previous clients example exponentially smoothed mean previous transfer bandwidths 
assume clients similar network locations routing information similar bandwidths new client belongs cluster clients known bandwidths history cluster prediction 
krishnamurthy wang describe technique discover clusters client ip addresses 
krishnamurthy wills showed set chosen web pages various characteristics clustering pays prediction accuracy improvements ranging 
speculate approach traces 
initial rtt technique predict client latency transfers technique predict subsequent latencies client 
call hybrid technique 
analyze purest form transfers making prediction contact clients consider mean clients hybrid techniques 
previous bandwidth predict latency 
statistical analysis prediction ability variants pure technique 
case predictions maintained history transfer lengths mss 
table correlation mean weighted trace samples previous mean name included bandwidth bandwidth bandwidth best correlation trace shown bold table correlations measured vs bandwidths shows results 
columns show trace name number samples analysis 
columns show correlations bandwidth latency trace record respectively bandwidth client mean previous bandwidths client exponential weighted mean followed krishnamurthy values better specific traces 
results suggest form mean best variant prediction technique choice simple means weighted means varies traces outperform predictions just previous transfer 
krishnamurthy preferred weighted mean follow lead rest 
pruning traces expected decrease predictability bandwidth values traces 
effect magnified transfers technique initial rtt technique relies especially intra client predictability 
table showed correlations bandwidth measurements predictions 
predict response latency combine bandwidth prediction known response length 
table shows weighted mean bandwidth technique predicts latencies 
table includes responses length mss table excludes responses longer kbytes 
short responses long responses may limited different parameters rtt bottleneck bandwidth respectively hypothesized sense predict short response latencies long response history 
residuals table better corresponding values table correlations improved 
correlations table better modified equation shown table trace 
mean residuals table larger magnitude table pos trace samples correlation median mean name included latency residual residual mss length trace samples correlation median mean name included latency residual residual mss length kb table latency prediction weighted mean bandwidth sible correct bandwidth predictor fix 
previous bandwidth approach consistently latency applications better 
shows example scatter plot 
web server content adaptation application excessive increases chances connected user fail receive rich content harmful sending excessive content poorly connected user 
measured latency sec sampling ratio predicted latency response sec mss length real vs bandwidth predicted latency trace combining predictors initial rtt approach accurate predicting contact latencies thresholds transfers approach speculated hybrid predictors yield best results 
hybrid modified equation predictor client contact transfer smoothed mean client previous bandwidths subsequent transfers 
transfers accuracy hybrid nearly indistinguishable accuracy transfers approach statistics table imply small fraction transfers traces contacts 
summary conducted study traces different user communities demonstrate different approaches predict latency short tcp transfers 
making minor modification previously described formula greatly reduce absolute prediction errors 
showed predictions observation past history generally yield better correlations formula predictor formula predictor lower mean prediction errors 
show formula predictor improved handle specific case text content modem compression affect latency 
reported results study relationship round trip time modems suggesting relationship exploited improve prediction accuracy 
quantified real application web server improve performance prediction techniques 
technical report provides additional analysis details fit 
acknowledgments vern paxson help bro especially writing draft bro script improving bro meet needs jerry shan lots help statistical analysis mike oliver spatscheck help support data collection 
rick jones morley mao milojicic shah chris tuttle carey williamson anonymous reviewers helpful comments 
arlitt krishnamurthy mogul predicting short transfer latency tcp extended version 
tech 
report hpl hp labs sep 
cardwell savage anderson modeling tcp latency 
proc infocom tel aviv mar pp 

cheng lzle cardwell savage voelker monkey see monkey tool tcp tracing replaying 
proc 
usenix annual tech 
conf 
boston ma june pp 

cheshire latency quest interactivity nov 
www org papers ps 
cheshire latency survey results latency stupid 
www org html 
fielding gettys mogul frystyk masinter leach berners lee rfc hypertext transfer protocol june 
dovrolis ammar predictability large transfer tcp throughput 
proc 
sig comm philadelphia pa aug 
krishnamurthy wang network aware clustering web clients 
sigcomm stockholm aug pp 

krishnamurthy wills improving web performance client characterization driven server adaptation 
proc 
www honolulu hi may pp 

krishnamurthy wills zhang design implementation evaluation client characterization driven web server 
proc 
www budapest may pp 

lai baker nettimer tool measuring bottleneck link bandwidth 
proc 
usits san francisco ca mar pp 

microsoft knowledge base article internet explorer sends get requests data mime handler activex control 
support microsoft com default 
kb en 
microsoft exchange design architecture microsoft 
www microsoft com deploy ex aug 
microsoft knowledge base article get requests sent retrieve plug served content 
support microsoft com default kb en 
mogul brakmo method dynamically adjusting multimedia content web page server accordance network path characteristics client server 
patent june 
mogul brakmo lowell moore transport api 
proc 
nd workshop hot topics networks cambridge ma november 
paxson bro system detecting network intruders real time 
computer networks dec 
development core team 
language environment statistical computing 
foundation statistical computing vienna austria 
isbn 
schroeder harchol balter web servers overload scheduling help 
acm trans 
internet feb 
su chin goel de lara user mobility opportunistic ad hoc networking 
proc 
wmcsa lake district uk dec pp 

