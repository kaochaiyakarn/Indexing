expressive owl reasoning logic programs markus kr tzsch pascal hitzler michael sintek denny aifb universit karlsruhe germany dfki gmbh kaiserslautern germany 
web ontology language owl standard modeling ontologies web 
description logics fragment firstorder logic 
traditionally logic programming alternative ontology modeling paradigm frequently large research projects industrial applications means logic reasoning engine ontobroker triple query inference transformation language system 
naturally desirable investigate interoperability paradigms 
studying expressive owl dl reasoning reduced evaluation horn logic programs 
building kaon algorithms transforming owl dl disjunctive datalog give detailed extent owl dl employed standard logic programming systems 
en route derive novel simplified characterization supported fragment owl dl 
quest ontology modeling languages semantic web semantic web vision 
resource description framework rdf rdf schema recommended february modeling basic ontologies time web ontology language owl recommended standard complex ontologies 
naturally choices ones possible 
logic programming approaches particular logic supported different systems ontobroker flora triple widely ontology modeling research industry 
reflected charter rule interchange format working group formed november part semantic web activity charter refers explicitly member submissions including semantic web rule language swrl web rule language wrl 
adheres conceptual design decisions underlying owl dl logic 
owl dl official variants owl description logics basically decidable fragment order predicate logic borrows formal semantics 
semantics logic programming languages ontobroker semanticweb org flora sourceforge net triple semanticweb org www org rules wg charter logic differs order logic certain ways results procedural flavor closed world semantics 
owl standard logic programming paradigms differ modeling styles formal semantics ways go syntactic issues 
choice modeling language heavily treatment implicit knowledge means reasoning support 
ideal universe single ontology representation language desirable goal realistic expect currently evolving semantic web highly heterogeneous terms knowledge represented terms ontology language paradigms 
desirable embark creation integrated reasoning tools cope knowledge represented different paradigms establish language interoperability practical sense 
surprisingly studies currently undertaken 
study language interoperability delicate issue 
ideally general logic established different ontology languages embedded semantically 
date unclear satisfactory logic possible put logic practical 
pursuing search common generalization different paradigms embark complementary quest large fragments mapped semantically languages sense dealt procedurally corresponding tools 
precisely ask extent ontologies paradigm processed correctly engine paradigm 
investigate owl logic programming engines xsb prolog understood basic underlying paradigm ontobroker flora triple 
structured follows 
section overview contribution historic context 
section provide novel characterization owl language fragment translate logic programs discuss issues arising context 
section provide comprehensive example illustrates translation 
language interoperability approach discussed section 
close section 
owl dlp better straightforward candidate owl dl fragment processed logic programming system dlp description logic programs introduced studied detail 
dlp naive horn fragment owl dl limited expressiveness compared owl dl appears suitable core paradigm practical purposes 
sets horn clauses dlp ontologies expressed logic programs negation owl semantics differs somewhat reading logic programming semantics perspectives compatible certain extent 
interoperability perspective dlp limited small fragment owl dl 
xsb sourceforge net larger owl fragment owl dlp mapped clausal form means sophisticated algorithms developed kaon owl reasoner 
result transformation disjunctive datalog function symbols done way resulting disjunctive datalog programs processed standard datalog fashion loosing owl dl semantics original knowledge base 
order improve owl dlp order find larger fragment processable logic programming system natural starting point owl dl fragment translated horn clauses means kaon translation algorithms 
fragment called horn shiq 
basically analyze horn shiq fragment regarding question extent dealt standard logic programming system xsb prolog 
owl logic programs discuss transformation owl dl specifications horn logic programs provided kaon algorithm described knowledge bases function negation free disjunctive datalog 
usage algorithm purpose casting owl dl horn clauses restricted ways 
hand algorithm devised handle description owl dl corresponds 
means nominals supported excluded treatment 
hand disjunctive datalog program obtained transformation general processable logic programming system horn programs 
problem incompatibility horn logic reasoners various causes discussed individually 
obviously ensure created rules disjunction head clause contains non negated literal 
fragment case surprisingly large discussed 
section review results derive substantially simpler alternative characterization 
restriction eliminates disjunctions rule heads leaves possibility having rules empty heads known integrity constraints 
section discusses model constraints strict horn logic setting 
problem equality predicate encountered owl dl specifications logic programming systems usually provide built equality 
section show taken account translation 
sophisticated algorithms kaon enable deal owl dl specifications kaon semanticweb org function negation free disjunctive datalog rule function symbol free formula form bm 
turn equivalent formula bm conjunctive clausal normal form 
fol formula contain quantifiers functions symbols cast datalog rule means standard algorithms 
time writing conceived support concrete domains implemented program 
fig 

algorithm disjunctive datalog 
fragment dlp 
particular system supports arbitrary existential quantifiers discussed section 
kaon transformation algorithm sketch transformation algorithm kaon works principle 
details 
general workflow transforming knowledge base disjunctive datalog program depicted fig 

steps algorithm roughly described follows 
transitivity axioms roles replaced adding axioms form standard method eliminating transitivity axioms resulting knowledge base satisfiable original knowledge base employing fact regarded subset order logic step uses standard algorithms transform knowledge base conjunctive normal form 
involves eliminating existential quantifiers skolemization function symbols introduced knowledge base 
step obtained set clauses partially saturated adding logical consequences 
crucial step algorithm compute consequences allow reduction function free datalog 
computational complexity exptime np disjunctive datalog come surprise transformation step exponential size input 
details step sophisticated refer interested readers details proofs 
function symbols safely eliminated step 
ensure process preserves satisfiability knowledge base add linear number auxiliary axioms 
easy syntactically transform resulting set clauses disjunctive datalog program step 
due transformations steps output algorithm general semantically equivalent input 
major reasoning tasks reduced satisfiability checking sufficient transformation preserve satisfiability 
combining datalog program axioms order logic generally destroys completeness reasoning resulting knowledge base order satisfiable model model original owl ontology 
combination nonmonotonic reasoning paradigm table 
positions concept left polarity right 
pol pol pol ip ci pol ip pol ci pol pol pol pol pol pol incompleteness leads unsoundness 
fortunately number axioms safely add soundness completeness discussed section 
general completeness reasoning presence additional axioms restored applying transformation algorithm knowledge base 
horn shiq turn question knowledge bases transformed exclusively rules contain disjunctions head 
class knowledge bases introduced horn shiq derive novel characterization greatly simplifies presentation 
generally description horn shiq exploits insight normal form transformation yields horn clauses relevant clause obtained saturation step horn 
suffices identify axioms produce horn clauses step transformation algorithm 
defining horn shiq needs consider details normal form transformation implemented kaon 
particular kaon performs structural transformation introduces new names subformulae 
example axiom transformed axioms new concept name 
done care translations help retain large class clauses 
details structural transformation general preserve satisfiability 
repeat definition horn shiq requires introduce couple auxiliary concepts 
subconcepts description logic concept denoted specifying position 
formally position finite sequence integers denotes empty position 
concept denotes subconcept position defined recursively table left 
consider positions defined table set positions concept understood accordingly 
concept position polarity pol position defined table right 
notation state definition horn knowledge bases 
definition definition 
pl pl denote mutually recursive functions map concept non negative integer specified table sgn sgn 
define function pl assigns shiq concept position non negative integer setting table 
definition pl pl 
pl pl pl pl ci maxi sgn pl ci sgn pl ci sgn pl ci ci maxi sgn pl ci sgn pl sgn pl sgn pl sgn pl pl pl pol pl pol concept horn pl position including empty position 
extensionally reduced knowledge base kb horn horn axiom kb 
suitable criterium checking single axioms knowledge bases definition particularly suggestive description class horn knowledge bases 
readily seen formulae pl yields values smaller equal possible positions formula 
hand definition overly detailed pl calculates exact number positive literals introduced transforming sub formula 
order derive convenient characterization observe require value pl smaller equal positions concept sub concepts higher values value subconcept decisive cases calculation pl pl 
generally restrict concepts pl value 
consider different classes concepts having pl value occuring positive negative position formula 
appropriate classes concepts defined table notation simplified omitting concepts obviously equivalent included 
example exploit commutativity associativity 
intuitively classes define exactly concepts value pl smaller equal respectively 
particular denotes class horn concepts 
show formally 
lemma 
concept pl pl 
proof 
observe condition cepts occur negative concepts type iff find position reflects fact con proof proceeds knowledge base reduced abox contains literal concepts 
achieved introducing new names complex concept terms 
table 
grammar defining horn 
denote sets concept names role names 
induction structure concepts 
base cases claim obvious 
easy see iff hypothesis equivalent pl pl conversely iff equivalent pl definition pl easy see equivalent pl remaining cases similar arguments symmetric 
exemplify required reasoning considering case clearly pl hand find iff iff pl definition pl clearly equivalent pl cases shown analogously 
crucial result characterization 
proposition 
concept iff find position pl pl 
proof 
proof proceeds lemma consider specific cases induction 
assume 
iff induction hypothesis definition pl obtain pl conversely assume pl hold positions addition pl pl pl implies pl pl 
loss generality assume pl 
definition pl pl easy see implies pl 
lemma case simpler values combined max operation 
cases shown analogously 
sum results corollary 
corollary 
extensionally knowledge base kb horn iff axioms kb finds argue definition easy comprehend original characterization 
example readily seen axiom form horn 
obvious considering original definition 
note corollary depends table require definition position polarity functions pl far knowledge bases excluded transitivity treatment 
reason transitivity axioms replaced axioms axioms transformed clausal normal form 
additional axioms lead non 
refrain form giving precise description readily obtained combining results processing transitivity axioms described 
integrity constraints restricting horn shiq transformation algorithm produce rules form bn head 
rules correspond clauses form bn regarded integrity constraints asserting statements bi true simultaneously 
typical example disjointness conditions classes owl dl statement translates 
logic programming systems support rules impose real restrictions translation 
see case recall logical consequences horn program obtained considering herbrand model atomic statement consequence horn program entailed model 
hand role integrity constraints disallow certain interpretations knowledge base 
case horn logic means integrity constraints eliminate model making theory inconsistent effect reasoning 
necessary extend logic programming systems special capabilities support integrity constraints 
just translate clauses bn rules form bn freshly introduced nullary inconsistency predicate 
query system answer true model model necessarily violates constraints 
entailed knowledge base consistent queried usual 
equality equality plays important role description logics 
reason description logics classical order semantics unique name assumption 
possible syntactically different logical constants denote element model 
stated explicitly form abox statements concluded indirectly reasoning 
occurs number restrictions appear knowledge base axioms conclude denote element 
standard treat number restrictions translating logical formulae include equality statements 
example statement nr translates xn xn xn xn consequent denotes disjunction pairwise equality statements rules empty head typically appear queries 
table 
horn axioms describing equality 
concept name role name variables 
way kaon treats number restrictions closely tied support equality 
unfortunately equality reasoning presence functions symbols problem formidable difficulty inevitable source non termination 
common logic programming systems typically provide native support general equality predicate 
known axiomatically describe equality predicate horn logic long finitely predicate symbols considered 
corresponding clauses depicted table 
order ensure rules impair decidability slightly extend explained section 
general restriction required proofs completeness reasoning 
dl safe version rules equality reasoning possible logic programming systems 
implementation example precompiled binary distribution kaon implementation available online downloaded free charge research academic purposes 
kaon infrastructure managing reasoning ontologies accessible api fixed user interface 
includes methods obtaining basic disjunctive datalog program incorporate specific adjustments logic programming systems described previous section 
provide additional wrapper application part kaon owl tools 
collection command line tools applicable tasks ranging satisfiability testing conversion owl specifications atex processable logical formulae 
briefly discuss usage demonstrate algorithm concrete example 
general reads ontology owl rdf owl xml format transforms logic program prolog syntax 
invoked arguments transformation support skolemization existential quantifiers form non horn clauses defining form dlp horn shiq 
switch uses full capabilities kaon produce disjunctive datalog input 
flogic option syntactically adjusts output logic system 
particular involves usage logic object oriented syntactic features denoting subclasses 
exact semantic interpretation syntax depend reasoning engine em kaon semanticweb org org 
typical approach axiomatize similar syntactical constructs underlying non monotonic logic programming paradigm regard classes relations logical terms predicates 
contrast original semantics logic called structures employed classical monotonic negation 
order avoid lengthy discussions intended semantics employ known prolog syntax examples merely programs adjusted logic reasoners ontobroker flora triple 
concrete example transformation consider ontology table top 
translation horn logic middle lower parts table 
consider middle part shows rules directly created translation 
rules clearly represent part axiom case person axiom 
rules obtained complicated reasoning steps parent obtained axioms 
rules fairly number axioms include predicates form appear original knowledge base 
predicates introduced elimination function symbols 
intuitively holds iff 
predicates satisfied finite number constants arbitrary application functions needed lead undecidability 
rules represent inconsistency constraints means predicate discussed section 
rules bottom table define various auxiliary predicates needed correctness translation 
order restrict definitions finite number terms introduce predicate specifies individuals program applies 
case just individuals abox 
define discussed 
introduce predicate hu defining terms considered program individuals immediate successors function symbol 
remaining rules yield equality theory section restricted terms hu 
resulting program allows conclude abox statements 
example derive parent elaine sir lancelot lancelot du lac asking queries requires special care generated program semantically equivalent original knowledge base 
discuss aspect section greater detail 
realized interoperability transformation owl dl horn logic programs far check satisfiability knowledge base logic programming system 
section describe programs rules safely added output transformation loosing soundness completeness reasoning 
discussion affects querying asking query equivalent adding query rule empty head program checking satisfiability 
table 
example ontology horn shiq top translation horn logic consisting translated rules middle auxiliary axioms bottom 
tbox abox parent haschild person person haschild person haschild haschild haschild elaine sir lancelot lancelot du lac lancelot du lac elaine person 
person person 
parent haschild 
parent 
haschild 
haschild 
haschild parent 
haschild 
person 
haschild 
haschild haschild 



hu 
hu 
hu 
hu hu 
hu hu hu 
hu hu 
person parent hu hu hu hu 
haschild elaine 
sir lancelot 
lancelot du lac 
remarked earlier general adding axioms transformed program requires invoke transformation algorithm 
reason axioms usually involved saturation step transformation described section 
adding axioms transformation impairs saturation elimination function symbols yield incompleteness 
adding ground facts discuss circumstances ground literals positive negative added transformed knowledge base 
ground facts form affect saturation step transformation algorithm associated inferences drawn final logic program 
generally disregard abox axioms transformation add 
illustrated section transformed program needs contain auxiliary axioms individual occurs abox 
adding axioms introduce new individuals add axiom form program 
adding auxiliary facts corresponds registering new individuals reasoning program 
crucial generated datalog program refer registered individuals 
rule obtained transformation uses variables finitely depend predicate generated rules deduce facts known individuals reasoning non registered individuals bound incomplete 
see section restriction known individuals ensures decidability 
ability add resulting disjunctive datalog cause refer usual order semantics negation 
logic programming setting translated read integrity constraint disallows query asking provable 
discussed section results derived situation horn logic programming system fully agree semantics order logic cases 
aware hinges fact asks positive information integrity constraint interpreted logic program states true false classical sense 
especially negated abox statements nonmonotonic negation failure logic programming systems 
situation facts form involved cases 
note description logics statements allowed abox lack support negations affect soundness completeness transformation algorithm 
observed adding knowledge base unproblematic role simple transitive 
remarked section elimination transitivity axioms performed algorithm yield logically equivalent knowledge base 
ensured formulae regularly belong 
fortunately additional expressiveness horn logic allows recover transitivity axioms case negative non simple roles 
transitivity simply expressed rule 
discussed section slightly extend rule dl safe ensure decidability 
addition rule obviously sound 
hand attempting remove transitivity axioms preprocessing step replacing axioms form transformation destroy completeness algorithm 
reason transformed transitivity axioms play important role saturation step draw consequences justify elimination function symbols 
complex rules queries turn complex rules queries 
discussion previous section clear individuals added program registered statements form 
failing generally results incompleteness 
taken account arbitrary ground horn rules safely introduced program 
situation rules queries include variables complicated registering individuals sufficient case 
reasoning remains sound complete considers rules dl safe 
intention restrict scope rules known individuals occur finite herbrand universe transformed program 
formally define dl safe rule function free horn rule bn variable occurs rule atom bi hu body rule 
definition slightly deviates original require presence hu arbitrary non dl atom reason formulation refers datalog atoms safe definition wider framework logic programming arbitrary non dl atoms guarantee safeness 
easy see definition restrict expressiveness dl safe rules hu general safe predicate available program known individual satisfies predicate 
known combination owl dl arbitrary horn rules undecidable 
restricting dl safe rules ensure completeness reasoning needed obtain decidable formalism 
easy see dl safe rules introduce major termination problems allow finitely possible variable assignments 
fact dl safe rule generated program unfolded finitely ground rules treated propositional logic specification 
addition normal horn rules logic programming systems support certain kinds nonmonotonic negation operators 
described kind negation failure exact definition failure may vary cyclic proofs account 
ask extent generated program allows sound complete interaction nonmonotonic formalisms 
formal semantics systems defined respect order logic clear sound complete means setting 
clearly nonmonotonic negation sound respect semantics negation description logics query knowledge 
hand nonmonotonic negation top knowledge base provided results interpreted appropriate way 
example query safely find logic programming system fails construct proof knowledge modules logic program 
termination addition question semantic interoperability take account logic programming system able generated program 
problem determining satisfiability decidable class knowledge bases consider mean particular system decide cases 
generated program logic programming system turns simple sld resolution may run loops evaluating generated programs 
program refers finitely individuals obvious termination problem principle 
modern systems xsb prolog usually employ tabling detect loops modified bottom strategies ontobroker suffices obtain termination setting 
offline processing seen certain facts including abox assertions negated abox assertions named classes added knowledge base translation performed kaon translation algorithms 
feature put practical query answering allows translate knowledge base offline means kaon algorithms invoked knowledge basic form added system queried 
benefit offline translation apparent involved worst case complexities kaon translation algorithms exptime resulting datalog polynomial 
basic functionality approach follows horn shiq knowledge base transformed offline datalog 
abox assertions named classes added datalog knowledge base known 
querying allow retrieval instances named classes performed touching datalog knowledge base 
principle possible query instances certain complex classes tbox knowledge involves addition owl axiom original horn shiq knowledge base turn necessitates invoke kaon translation algorithm 
think process enhanced incremental algorithms remains investigated 
employing transformation algorithm kaon gave detailed description considerable fragment owl dl processed logic programming systems 
derived enhanced characterization horn shiq description logic translation possible explained generated datalog programs standard logic programming paradigm sacrificing soundness completeness reasoning 
primary contribution study clarify extent kaon enables semantic interoperability ontology modeling paradigms description logics logic programming interoperability realized practice 
described procedure may find practical applications research projects 
contribution leaves various open questions investigated 
kaon transformation algorithms merging owl logic databases 
possibly contribute establishing powerful integrated hybrid systems logic programming description logic tradition 
practical systems large scale applications developed different ontology language paradigms dealt interoperable way 
sophisticated kaon algorithms significantly enlarge class ontologies processable logic programming system 
extended scope reflected increased worst case complexity rules possibility semantically equivalent transformation allows nontrivial semantic interactions paradigms 
interaction yield ways transfer knowl www project de edge heterogeneous systems case dl safe rules encompass extensions current ontology modeling languages 
acknowledgments 
authors wish boris motik clarifying discussions crucial writing 
furthermore support german federal ministry education research bmbf project european commission contract ist sekt gratefully acknowledged 

brickley guha rdf vocabulary description language rdf schema 
recommendation feb www org tr rdf schema 
mcguinness harmelen owl web ontology language overview recommendation feb www org tr owl features 

kifer lausen wu logical foundations object oriented frame languages 
journal association computing machinery 
sintek decker triple query inference transformation language semantic web 
proc 
int 
semantic web conf 
iswc sardinia italy 

horrocks patel schneider boley grosof dean swrl semantic web rule language combining owl ruleml 
member submission may www org submission subm swrl 
angele boley de bruijn fensel hitzler kifer lausen studer web rule language wrl 
member submission sept www org submission subm wrl 
lloyd foundations logic programming 
springer berlin 
horrocks parsia patel schneider handler semantic web architecture stack towers 
fages eds proc 
principles practice semantic web reasoning 
rd int 
ws dagstuhl castle germany sept 
volume lecture notes computer science springer berlin 
hitzler haase kr tzsch sure studer dlp isn bad 
proc 
ws owl experiences directions galway ireland november 

grosof volz decker description logic programs combining logic programs description logics 
proc 
www budapest hungary may acm 
volz web ontology reasoning logic databases 
phd thesis universit karlsruhe th germany 
hitzler studer sure description logic programs practical choice modelling ontologies 
st ws formal ontologies meet industry 

hustadt motik sattler data complexity reasoning expressive description logics 
proc 
th int 
joint conf 
artificial intelligence ijcai 

hustadt motik sattler description logic disjunctive datalog programs 
dubois welty williams eds proc 
th int 
conf 
knowledge representation reasoning kr 

motik reasoning description logics resolution deductive databases 
phd thesis universit karlsruhe th germany submitted 

motik hitzler sure studer converting owl dlp statements logic programs 
european semantic web conference demos posters 
may system available athttp org 
