java csp solvers automated analyses feature models david sergio pablo antonio ruiz cort 
de sistemas inform university av 
de la reina mercedes spain sergio lsi es feature models different stages software development recognized important asset model transformation techniques software product line development 
automated analysis feature models recognized key challenges automated software development context software product lines 
previous explained feature model transformed constraint satisfaction problem 
cardinalities considered 
cardinality feature model translated constraint satisfaction problem 
connection possible shelf tools automatically accomplish tasks calculating number possible feature configurations detecting possible conflicts 
addition performance test shelf java constraint solvers 
best knowledge time performance test solvers feature modelling proposes years software reuse quality constants aims software development 
significant progress programming languages methodologies forth problem remain 
software product line spl development approach develop software systems systematic way intends solve problems 
roughly speaking spl defined set software products share common set features 
spl approach useful organizations product oriented project oriented 
organizations operate particular market segment 
spl engineering consists main activities domain engineering called core asset development application engineering called product development 
activities complementary provide feedback 
domain engineering deals core assets production pieces products shared spl products 
hand application engineering deals individual system production 
partially supported spanish science education ministry mec contracts tic feature analysis important task domain engineering expected produce feature model fm main output 
fm defined compact representation possible products spl 
furthermore commonly accepted fms different stages spl effort order produce assets requirements documents portlets applications pieces code 
fm important focus research field model transformation 
automated analyses fms important challenge spl 
previous transform fm considering cardinalities constraint satisfaction problem csp 
way possible shelf constraint satisfaction solvers automatically accomplish tasks calculating number possible configurations detecting possible conflicts 
contribution twofold explain fm cardinalities translated csp ii show result performance test shelf java constraint solvers choco 
best knowledge test measures performance constraint solvers context feature analyses 
remainder structured follows section introduce feature models 
section constraint programming outlined details translate fm csp 
section focuses results experiment 
summarize describe section 
feature models feature model fm compact representation possible products spl 
fms model set software systems terms features relations 
designing software system terms features natural doing terms objects classes 
consequently software system composed set features 
fms publications proposals extend improve modify original fm diagram 
despite years research consensus fm notation 
desirable common notation scope give fm notation 
proposed czarnecki formalized context free grammar integrates previous extensions 
fm basically tree structure dependencies features 
represents general metamodel fm metamodel 
likewise represents fm james project 
james collaborative web system modeled terms features clear example spl 
products derived fm 
having web service interface optional mandatory user management module modules core system core 
binary root relations set solitary cardinality feature grouped 
cfm meta model depends constraint excludes fm composed root james optional set constraints refer global constraints depends excludes 
root composed optional set relations 
relations different types binary relations include mandatory optional cardinality relations set relations 
feature different types composed zero relations 
binary relation composed solitary feature child feature parent feature relation core examples solitary features set relation composed grouped features calendar db pda examples grouped features 
addition solitary feature set relations comprise cardinalities 
note graphical representation possible represent cardinality set relations fact means cardinality likewise graphical representations commonly cardinalities solitary features see notes 
constraint programming constraint programming established field research successfully applied engineering areas electronics operational engineering 
words prof freuder constraint programming represents closest approaches computer science holy grail programming user states problem computer solves 
constraint programming defined set techniques algorithms heuristics deal constraint satisfaction problems csp extent db ldap james gui core modules pc pda calendar forum repository congress management 
james system solitary feature cardinality solitary feature cardinality solitary feature cardinality feature group group cardinality cardinality requires excludes solve problem means constraint programming problem formulated csp 
csp consist set variables domains variables set constraints restricting values variables 
definition csp 
csp tuple form finite set variables finite set domains variable constraint defined problem stated csp possible shelf csp solvers able provide solutions problem 
internally solvers implemented algorithms heuristics investigated decades 
mapping fm csp fm dependencies translated csp 
provide way cardinality fms 
section give details transform fm cardinalities csp novel contribution 
rules translating fms constraints listed 
variable feature csp 
domain variable depends cardinality associated variable 
default domain feature part cardinality relation domain variable added core 
constraint selecting root feature added products root feature root 
final csp fm conjunction constraints rules 
experimental results csp solvers possible automatically perform operations fm calculating number possible combinations features retrieving configurations criteria calculating number features configuration relation diagram notation constraint mandatory optional cardinality set depends excludes ifthen ifthenelse ifthenelse sum ifthen ifthen 
feature models related constraints validating fm detect possible finding optimum product basis criteria cheapest fewest features forth calculating commonality factor feature variability factor fm 
main ideas concerning constraint programming fm analyses stated experimental results left 
section experimental comparison java csp solvers automatically analyse fms 
choco solvers commercial tools csps 
major commercial vendors ilog versions csp solvers java 
commercial solution declined ilog solvers licenses empirical comparison 
best knowledge reliable stable open source java csp solver choco constraint system 
selected solver popular research community know available free directly internet 
selected solver offers free license academic purposes 
solvers similar characteristic terms variables constraints allowed implementation mapping done straightforward manner 
fdv variables fdv stands finite domain variables represent features variables choco implementation 
experiments experiments intend demonstrate solver provides best performance automated analyses fms 
addition studied robustness areas vulnerability solver 
order evaluate solvers fms 
represent small medium size real systems larger generated randomly experiment 
formulating csp platforms proceeded execution 
table summarizes characteristics experiments 
experiment fm 
simple fm representing home integration system 
experiment fm represents collaborative web system 
experiment medium size fm flight booking system done 
generated larger fms randomly experiments double aim representing complex systems greater number features dependencies evaluating solvers performance limit situations 
considered necessary compare performance small medium large fms order evaluate solver performance results different situations 
table 
experiments experiment features dep process generate fm randomly recursive method input parameters height levels maximum number children relations node maximum cardinality number maximum number elements set relation number dependencies 
firstly features relations generated random values 
secondly dependencies created pairs features randomly establishing random dependency includes excludes 
took care generate misconceptions child depends parent 
exposed operations performed 
experiments performed operations finding configuration satisfy constraints product ii finding total number configurations fm 
simplest operation second difficult terms performance necessary retrieve possible combinations 
comparison focused data obtained executions order avoid exogenous interferences possible 
total number executions calculate average time 
data extracted tests number features solution obtained solver 
average execution time obtain solution measured milliseconds 
total number solutions potential number products represented fm 
average execution time obtain number solutions measured milliseconds 
order evaluate implementation measured performance effectiveness 
implemented solution java 
ran tests win xp professional machine equipped ghz intel pentium iv microprocessor mb ddr mhz ram memory 
results experimental comparison revealed interesting results see figures 
evidence mention average faster choco finding solution 
important observe approach feasible necessary time obtain response really low milliseconds worst case 
faster choco finding total number solutions small csps noticeably slower choco big ones see 
curious result probably depends solver obtain number solutions 
choco simple method know number solutions concrete problem solver implementation needs find solutions count 
simple variation implies important difference performance 
instance test needs create fill solutions produces great time loss 
hand choco weakness method find number solutions returns solutions avoid memory deficit problems 
user wants obtain solutions simple iteration take 
smaller experiments faster choco presume trend continue optimized aspect 
test performed experiment find return solutions solvers find number solutions solutions 
result decisive choco required minute perform task proving slower situation 
memory usage relevant data experiments noticed general choco uses memory remarkable difference solvers 
identified interesting characteristic solvers 
firstly ja cop allows user obtain easily executions interesting information choco experiment features sol 
time sol 
solutions time sol 
choco choco time ms 
experimental results choco solvers time get solution test 
comparing choco getting solution choco time time get number solutions test 
comparing choco getting number solutions choco choco number backtracks search number decisions taken find solution 
second place worrying bug working big problems choco 
cases executions csps representing big fms generated exception choco bool imposes important limitation choco 
translate cardinality feature model constraint satisfaction problem 
performed comparative test shelf csp java solvers offered interesting performance 
test showed faster choco finding number solutions 
gives details executions choco number backtracks number decisions 
choco important bug working big fms open source alternative especially small medium size problems 
solvers similar memory usage 
choco useful experiments executions times really low milliseconds 
challenges remain 
plan extend experiments order scale proposal compare results 
bigger experiments features dependencies needed plan perform experiments 
furthermore think compare proposal different representations sat bdds complement results 

batory 
feature models grammars propositional formulas 
software product lines conference lncs pages 

batory 
tutorial feature oriented programming ahead tool suite 
summer school generative transformation techniques software engineering 

batory 
scaling step wise refinement 
ieee trans 
software eng 

ruiz cort 
automated reasoning feature models 
lncs advanced information systems engineering th international conference caise 

ruiz cort 
constraint programming reason feature models 
seventeenth international conference software engineering knowledge engineering july 


modularization feature models 
european workshop model transformation september 

bosch 
design software architectures 
addison wesley th edition 

clements 
software product lines practices patterns 
sei series software engineering 
addison wesley august 

czarnecki eisenecker 
generative programming methods techniques applications 
addison wesley may 
isbn 

czarnecki eisenecker 
formalizing cardinality feature models specialization 
software process improvement practice 

az 
supporting production strategies refinements production process 
published sofware product line conference 

az 
user facing web service development case product line approach 
benatallah ming chien shan editors technologies services th vldb international workshop vldb tes volume lncs pages 
springer verlag 

fernandez 
james project 
available sourceforge net 

freuder 
pursuit holy grail 
constraints april 

pohl 
communicating variability software product family customers 
journal software systems modeling 

wai chun ong zhang 
handling variant requirements domain modeling 
journal systems software 

kang cohen hess novak peterson 
feature oriented domain analysis feasibility study 
technical report cmu sei tr software engineering institute carnegie mellon university november 


constraints driven scheduling resource assignment 
acm transactions design automation electronic systems july 

laburthe jussien 
choco constraint programming system 
available choco sourceforge net 

prehofer 
feature oriented programming new way object composition 
concurrency computation practice experience 
