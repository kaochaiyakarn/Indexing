synthesis distributed algorithms asynchronous automata javier esparza institut formale methoden der informatik universit 
stuttgart germany liafa universit paris vii place jussieu case paris cedex 
apply theory asynchronous automata synthesis problem closed distributed systems 
safe asynchronous automata implementation model characterise languages accept 
analyze complexity synthesis problem framework 
theorems zielonka morin develop implement synthesis algorithm 
apply developed algorithms classic problem mutual exclusion 
address problem automatically synthesising finite state closed distributed system specification 
seminal papers area ec mw synthesis algorithms temporal logic specifications developed 
algorithms tableau procedures satisfiability problem ctl ltl 
approaches suffer limitation synthesis algorithms produce sequential process distributed implementation tuple pn communicating processes 
solution suggested works synthesise sequential solution decompose 
distribution aspects concurrency independency events part ctl ltl specification bisimulation invariant solution may impossible distribute keeping intended concurrency 
fact happens solutions ec mw mutual exclusion problem better approach problem consists formally specifying properties system satisfy architecture components communicate 
approach studied pr open systems environment adversary system components question system strategy guarantees specification possible behaviours environment 
realization problem properties architecture decide exists implementation shown undecidable arbitrary architectures decidable non elementary hierarchical architectures vs ltl specifications 
kv extends decidability result upper bound ctl specifications linear architectures 
best knowledge synthesis procedures implemented tested small examples 
study realization problem simpler case closed systems original class systems considered ec mw 
problem studied unlabelled petri nets see bd product transition systems see cmt notions implementation 
attack problem asynchronous automata zie dr 
asynchronous automata seen tuple concurrent processes communicating certain way safe labelled petri nets 
approach specification consists parts regular language alphabet actions containing finite executions synthesised system able execute tuple local alphabets indicating actions processes synthesised involved action executed processes involved willing execute 
synthesis problem consists producing called safe asynchronous automaton associated processes alphabets language included conditions remove trivial solutions 
main advantage approach respect bd cmt generality unlabelled petri nets product transition systems seen strict subclasses safe asynchronous automata 
contributions theoretical nature 
refinement zielonka theorem zie celebrated central result theory mazurkiewicz traces 
refinement characterises languages recognised safe asynchronous automata call implementable languages 
result allows divide synthesis problem parts specification decide exists implementable language obtain safe asynchronous automaton language 
second contribution find part undecidable restrict attention np complete subclass solutions reasonable heuristics developed 
third main contribution development heuristics solve practice application mutual exclusion problem evaluation results 
heuristic uses result morin mor speed synthesis procedure zielonka zie 
heuristics synthesise elegant new far realistic shared variables solutions mutex problem ec mw results pr open systems generally applicable provide better automatically generated solution mutual exclusion problem 
larger expressivity asynchronous automata compared unlabelled petri nets product transition systems result announced proof 
provide proofs appendix constructive sect 

lution synthesised petri nets second realistic synthesised petri nets product transition systems 
structured follows 
section introduces asynchronous automata zielonka theorem 
sect 
characterisation implementable languages 
section describes synthesis problem heuristics construction solution discusses complexity issues 
section shows synthesis procedure mutual exclusion problem 
section reserved 
proofs postponed appendix 
preliminaries start definitions notations automata regular languages 
finite automaton tuple finite set states finite alphabet actions sets initial final states respectively transition relation 
write denote 
language recognised defined usual 
language regular recognised finite automaton 
language prefix closure language containing words prefixes 
language prefix closed equal prefix closure 
languages define shuffle shuffle uk vk ui vi 
recall regular languages closed boolean operations prefix closure regular language regular shuffle regular languages regular 
asynchronous automata nonempty finite alphabet actions proc nonempty finite set process labels 
distribution proc function proc 
intuitively assigns process set actions involved actions executed process participating 
convenient represent distribution domain function dom proc assigns action processes execute 
call pair dom distributed alphabet 
distribution induces independence relation follows dom dom 
actions independent process involved 
intuition independent actions may occur concurrently 
asynchronous automaton distributed alphabet finite automaton distributed communicating local automata 
states automaton tuples local states local automata 
definition 
asynchronous automaton aa distributed alphabet dom finite automaton exist formal description automaton proc dom dom fig 

simple asynchronous automaton family sets local states qk proc relation dom qk dom qk action satisfying properties proc qk initial final states dom qk qk dom dom qk denotes th component qk dom denotes projection dom 
language recognised asynchronous automaton language recognises finite automaton 
functions contains element aa called deterministic 
shows asynchronous automaton 
intuitively set qk represents set states sequential component 
transition states depends projections states dom local states components irrelevant execution changes local state processes dom 
particular transition global states states projections dom coincide 
easy see consequence asynchronous automaton satisfies independent forward diamond rules id fd 
observe accepting conditions asynchronous automata global need know local states processes order determine tuple local states final state 
zielonka theorem zielonka theorem characterises languages accepted asynchronous automata 
distributed alphabet dom say trace language closed independence relation associated dom theorem 
zie dom distributed alphabet recognised finite asynchronous automaton distribution dom regular trace language 
recognised asynchronous automaton recognised deterministic asynchronous automaton 
proof theorem constructive 
zielonka defines effectively computable equivalence relation finite index 
definition appendix 
tl infinite automaton having set states wa transitions 
asynchronous automaton theorem quotient tl size automaton single exponential size minimal deterministic automaton recognising double exponential size proc 
shows order decide language regular trace language suffices compute minimal automaton recognising check satisfies id proposition 
dom distributed alphabet regular 
conditions equivalent 
regular trace language 
minimal deterministic finite automaton recognising satisfies id 
proposition provides fast test check regular language deterministic automaton trace language 
note input regular expression non deterministic automaton question pspace complete mus 
implementable specifications mentioned regular languages specification set global behaviours distributed system behaviour finite sequence actions 
setting asynchronous automata realistic implementation model 
reason best explained means example 
dom dom consider language 
intuitively dom implemented contains executed independently prevent implementation executing ab ba belong asynchronous automaton fig 
recognises reason choose global final states excluding 
notice remove set states automaton longer asynchronous satisfy fd 
context runs automaton represent behaviours distributed system acceptable declare posteriori sequence actions observed behaviour state reaches non final 
example shows restrict attention asynchronous automata states reachable initial states final 
call automata safe mentioned synthesis closed distributed systems studied unlabelled petri nets bd product transition systems mor cmt implementation models 
models seen subclasses safe asynchronous automata action relation satisfies additional condition 
case petri nets contain element 
case product transition systems product form family relations qk qk proc rest section obtain equivalent theorem proposition safe asynchronous automata 
definition 
regular trace language called implementable satisfies prefix closedness safe branching wa wb wab theorem 
dom distributed alphabet recognised finite safe asynchronous automaton distribution dom implementable trace language 
recognised safe asynchronous automaton recognised safe deterministic asynchronous automaton 
proposition 
dom distributed alphabet regular 
conditions equivalent 
implementable language 
minimal deterministic finite automaton recognising safe satisfies id fd 
result provides inexpensive test check specification dom implementable compute minimal automaton recognising check satisfies id fd states final 
checks linear time complexity size minimal automaton size independence relation generated dom 

testing specification implementable pspacecomplete input regular expression non deterministic automaton 
easily shown checking id fd pspace complete 
safe asynchronous automata studied zielonka zie 
safe means weaker reachable states reachable path state final 
difference definitions safe vanishes recognised language prefix closed 
maz property safe branching called 
difficult show implementable languages proper superset petri net languages languages product transition systems see zie 
see sect 
fact allow derive implementations case studies 
synthesis problem setting synthesis problem distributed alphabet dom regular language lspec represented deterministic finite automaton safe asynchronous automaton aa aa 
addition require actions appear aa interested trivial solutions aa partial solutions processes executing actions 
definition language uav denote actions appearing set actions appearing asynchronous automaton just 
able formulate problem 
synthesis problem distributed alphabet dom deterministic finite automaton safe asynchronous automaton aa aa aa 
theorem 
synthesis problem undecidable 
undecidability synthesis problem stated theorem attack modest np complete problem see develop reasonable heuristics 
requires introduce notion subautomaton 
say subautomaton 
subautomata synthesis problem search language aa languages subautomata 
precisely examine languages subautomata obviously included determine language asynchronous automaton 
languages safe asynchronous automata implementable fact consider problem problem 
subautomata synthesis distributed alphabet dom deterministic finite automaton safe subautomaton satisfying id fd 
positive solution instance problem implies positive solution instance synthesis problem 
theorem 
subautomata synthesis problem np complete 
summarize approach 
choose set actions system distribution 

describe behaviours system regular language lspec 
usually give lspec base language shuffle local behaviours filter undesired behaviours behaviours lead processes critical section 

construct usually minimal deterministic finite automaton satisfying lspec 

find safe subautomaton satisfying id fd 
see sect 

apply theorem obtain safe asynchronous automaton aa satisfying aa 
see sect 
constructing subautomaton automaton finding safe subautomaton satisfying id fd np complete worst case exponentially expensive 
experiments natural heuristics helpful problem 
destructive starting initial automaton remove states transitions prevent properties safety id fd hold 
non final states remove conflict fd exists state remove transition involved conflict removing solve conflict similar id process removal want preserve 

constructive starting empty subautomaton add states transitions find safe subautomaton satisfying id fd 
apply breadth traversal greedy strategy selects transitions labelled new action names 
time avoid adding transitions leading violations id fd rules add states 
strategies find subautomaton satisfying properties 
general heuristic produce larger solution second 
larger solutions represent behaviours better implementations synthesis problem 
unfortunately large subautomaton serve input zielonka procedure may blowup state space solution 
second heuristic usually preferred experimental results sect 
witness fact 
constructing asynchronous automaton proof zielonka theorem provides algorithm automatically derive asynchronous automaton implementable language obtained note apply theorem language safe automaton sat id fd implementable 
previous subsection 
start giving version algorithm 
version tailored easily add heuristic describe second half section 
loosely speaking algorithm proceeds unfolding minimal deterministic automaton recognising asynchronous automaton obtained 
data structure algorithm maintains deterministic reachable automaton states final 
transitions coloured green red black 
algorithm keeps invariants 
automaton deterministic recognises 
green transitions form directed spanning tree directed tree initial state root containing states 
unique word path spanning tree 

notice transition green 

transition red 

transitions black 
initially minimal deterministic finite automaton recognising implementable language set green transitions computed means say breadth traversal starting initial state 
colours computed satisfy invariants 
algorithm current automaton red transitions algorithm stops 
chooses red transition proceeds follows deletes transition state algorithm adds black transition algorithm 
creates new final state 
adds new green transition 
transition adds new transition 
new transition coloured red black 
proposition 
algorithm described terminates output safe deterministic finite asynchronous automaton recognising implementable language unfortunately see case studies algorithm produce automata states necessary 
implemented heuristic allows early automaton synthesised far happens solution guides algorithm choice red transition 
need test distributed alphabet dom automaton checks asynchronous automaton respect dom checks existence sets qk relations 
asynchronous test produce witness transition fact 
fortunately morin provides mor precisely test theorem 
mor deterministic automaton dom distribution 
family equivalences proc states denote dom dom de dom de dom dom asynchronous automaton dom iff conditions hold states action ds proc dom ds difficult show equivalences proc computed polynomial time means fixpoint algorithm theorem provides polynomial test check asynchronous 
interested asynchronous automaton accepting language initial automaton weaker version theorem suffices family equivalences satisfying de de satisfies ds necessarily ds exists asynchronous automaton recognising language notice passes test easily derive sets qk local states functions action qk contains equivalence classes classes iff contains representatives case studies proof mor proves fact stronger theorem equivalence satisfying de de ds obtain asynchronous automaton language equivalent family easy compute yields implementation sets qk large possible 
pass test implies red transition involved failure heuristic propose red transition processed algorithm 
find transition applying morin test subautomaton ag containing green black transitions cases 
test fails prove red edge involved failure ds ag green black dom red contradiction red transition ds fail final automaton obtained applying unfolding procedure contradiction final automaton asynchronous passes test theorem 
test successful iteratively add red transitions subautomaton ag ds violated 
case find red transition candidate unfolding algorithm 
asynchronous automaton satisfying specification optimize proposition 
automaton state aq subautomaton having initial state obtained selecting states transitions reachable asynchronous implies aq asynchronous 
corollary 
obtain smaller asynchronous automaton asynchronous automaton aa choose smaller size subautomata aq aq aa 
information computed unfolding procedure easy find states language equivalent initial state 
case study mutual exclusion mutual exclusion mutex short situation appears processes trying access private common resource 
distributed solution mutex problem collection programs process concurrent execution satisfies properties mutual exclusion case processes simultaneous access resource absence starvation process requests access resource request eventually granted deadlock freedom 
consider problem processes 
actions req enter exit req enter exit intended meanings request access enter exit critical section giving access resource 
indices specify process executes action 
fix distribution 
obviously wish processes req enter exit req enter exit 
want req req need extra processes contains req req contains req req 
choose req enter exit enter req enter exit enter 
define regular language mutex specifying desired behaviours system 
want mutex maximal language satisfying conditions 
mutex included shuffle prefix closures req enter exit req enter exit processes execute req cyclic order 
add exit exit solution change 

mutex enter exit enter dual version 
process exit enter 
guarantees mutual exclusion 

mutex req enter enter enter enter dual 
request process process enter critical section 
guarantees absence starvation 

mutex exists action wa mutex 
guarantees deadlock freedom 
condition needs discussed 
current framework deal proper liveness properties process requests access critical section access eventually granted 
certainly shortcoming current framework 
example enforce absence starvation putting concrete bound number times process enter critical section request process 
largest language satisfying conditions regular closure properties regular languages minimal automaton recognising easily computed 
deadlock free recognises largest language satisfying conditions 
turns minimal automaton mutex fig 
appendix safe satisfies id fd 
proposition recognised language implementable 
allows apply zielonka construction yields safe asynchronous automaton states 
applying heuristic morin test obtain minimal automaton recognising mutex having states asynchronous automaton 
families local states transitions constructed morin theorem 
processes local states processes states 
ask solution simplified smaller family local states making minimal automaton asynchronous 
amounts finding larger family proc equivalences satisfying properties theorem 
done merging equivalence classes checking resulting equivalences satisfy properties 
implemented procedure turns exists solution states 
top shows resulting asynchronous automaton translated pseudocode legibility 
com denotes command com executed single atomic step 
represented processes variables range 
construction algorithm satisfies mutual exclusion absence starvation deadlock freedom 
processes requests independently 
results bd easy show mutex petri net language 
product language sense cmt 
results case largest automaton obtained removing states contained infinite path 
pseudocode derived hand wouldn difficult process 
initialization synthesised mutual exclusion algorithm process process repeat forever repeat forever ncs ncs await await cs cs repeat repeat initialization synthesised mutual exclusion algorithm ncs ncs process process ncs ncs case goto case goto case goto case goto case goto await await case goto cs case goto cs case goto cs case goto cs case goto cs await case goto cs case goto cs cs cs case goto cs case goto ncs cs cs goto ncs cs cs goto ncs case goto ncs fig 

solutions mutual exclusion problem processes cmt allow derive solution fig 

case asynchronous automata advantage 
mutual exclusion revisited mutex algorithm previous section requires update variables entering critical section single atomic action difficult implement 
possible obtain solution avoids problem 
observe problem lies distribution chosen 
enter enter involved enter actions means implementation enter enter requires update single atomic action 
look different distribution 
take req enter exit req enter exit 
unfortunately mutex implementable anymore new distribution 
minimal automaton fails satisfy fd state enter enter enabled enter enter converging state close diamond 
apply heuristic sect 
table 
experimental results problem input zielonka zielonka heuristic heuristic size time size time size time size time mutex mutex mutex mutex mutex mutex mutex mutex find subautomaton satisfying id fd deadlock free containing actions 
zielonka construction yields safe asynchronous automaton states 
fortunately heuristic yields asynchronous automaton states see fig 

distributed processes specification merging local states possible obtain pseudocode shown fig 
bottom 
variables range respectively 
labels associated commands suggest type example means request process means exit critical section second process 
notice command corresponding label executed atomically program pointers components advance result goto command 
components asymmetric due fact heuristic solved fd conflict removing enter transition 
algorithm starvation free second process request access critical section receive soon possible 
language mutex petri net language language product transition systems procedures bd cmt applied 
processes consider mutual exclusion problem arbitrary number processes choose alphabet req 
exist distributions actions 
choose generalizations distribution 
pi req enter pi req vi pi generalize regular specification problem 
mutual exclusion property specified 
experiments table 
column give parameters problem 
second column give size minimal automaton accepting regular specification number processors distribution 
tool amore amo construct minimal automata recognising regular specification 
columns size represents global state space solution asynchronous automaton time computation time seconds 
dash symbol represents fact system run memory finding solution 
third fourth columns give results applying respectively second heuristic sect 
followed zielonka procedure 
fifth sixth columns give results applying respectively second heuristic sect followed heuristic sect 

experiments performed machine ghz cpu gb ram 
remarks proposed apply theory asynchronous automata problem synthesising closed distributed algorithms 
observed right implementation model safe asynchronous automata characterised languages 
defined synthesis problem framework proved undecidable focused attention npcomplete subclass solutions 
implemented zielonka algorithm observed leads large implementations natural relevant case studies smaller implementations exist 
derived heuristics synthesis problem feasible practice 
heuristics automatically generate mutual exclusion algorithms 
rest section discuss number issues 
obtaining elegant solutions solutions mutex problem elegant variables larger domains appearing literature human finds difficult understand correct 
notice case virtually computer generated outputs html text program code computer generated proof formula logic 
solutions correct relatively small 
notice solution mutex problem sense optimal solution excludes behaviours strictly forbidden mutual exclusion absence starvation 
specifying temporal logic notice approach compatible giving specifications ltl temporal logic formulas finite strings language finite words satisfying formula known regular automaton recognising language effectively computed 
dealing liveness properties currently approach deal liveness properties 
loosely speaking eventually properties transformed properties form happens 
dealing liveness properties requires consider theory asynchronous automata infinite words known see chap 
dr 
approaches bd cmt take transition system specification consider liveness properties 
approach mt deal liveness properties synthesise controllers satisfying certain conditions clocked controllers 
conditions appear reformulation results distributed controllers synthesis 
acknowledgments volker mi morin madhavan mukund holger petersen anonymous referees useful comments 
partially supported epsrc gr 
amo amore 
www informatik rwth aachen de research amore html bd badouel ph 
darondeau 
theory regions 
lectures petri nets basic models lncs 
cmt castellani mukund thiagarajan 
synthesizing distributed transition systems global specifications 
proc 
lncs 
dr rozenberg eds 
book traces 
world scientific 
ec emerson clarke 
branching time temporal logic synthesize synchronization skeletons 
science computer programming 
kv kupferman vardi 
synthesizing distributed systems 
proc 
th ieee symp 
logic computer science 
maz mazurkiewicz 
trace theory 
lncs 
mor morin 
decompositions asynchronous systems 
concur lncs 
mp petersen 
note commutative closure star free languages 
information processing letters 
mt thiagarajan 
decidable class asynchronous distributed controllers 
proc 
concur lncs 
mukund 
global specifications distributed implementations 
synthesis control discrete event systems darondeau lavagno eds kluwer 
mus 
ber die 
phd thesis 
institut informatik universit stuttgart 
mw manna wolper 
synthesis communicating processes temporal logic 
acm transactions programming languages systems toplas 
pr pnueli rosner 
synthesis asynchronous reactive module 
proc 
th icalp lncs 
peled wilke wolper 
algorithmic approach checking closure properties temporal logic specifications omega regular languages 
tcs 
sak 
decision problem rational trace languages 
proc 
latin lncs 
zie zielonka 
notes finite asynchronous automata 
inform 
th 
appl 

zie zielonka 
safe executions recognizable trace languages asynchronous automata 
lncs 
appendix proofs proof proposition proof 
regular exists minimal deterministic final automaton say recognising 
prove satisfies id states pair independent actions 
minimality sequence path initial state final state closed exist states final deterministic 
minimality implies syntactically equivalent final iff final easy definitions 
proof proposition proof 
implementable language regular trace language proposition minimal automaton satisfies id easy see prefix closure implies states final safe branching implies fd minimality implies reachability states 
easy definitions 
preliminaries proof theorem start giving ingredients zielonka construction zie minor modifications trace equivalence alphabet independence relation induces natural equivalence relation iff obtained sequence permutations adjacent independent letters 
formally iff sequence words vk vk exist words ui letters ai bi satisfying vi vi ai bi 
recall usual syntactical equivalence generated language iff partial order events traces define set events occurrences actions 
total order linear order letters define partial order mazurkiewicz trace equivalently 
prefixes suffixes traces proc define pref dom suff pref 
resp 
subword corresponding positions pref suff resp 
proc denote pi 
suff dom pref implies lemma 
proc 
zielonka equivalence fix regular trace language zie zielonka constructs deterministic asynchronous automaton accepting language construction equivalence finite index generated sake simplicity denote 
denote equivalence class respect 
equivalence includes information regarding syntactic equivalences time stamping enter details 
know properties hold see zie proposition 
proposition 
proposition 
proc 

proposition 

dom pi pi pi ta pi dom 
zielonka construction regular trace language zielonka equivalence generated zielonka asynchronous automaton defined aa proc qk proc qk pk action dom km pk pkm pk ta pkm ta initial global state final global states pn proc proved aa finite deterministic asynchronous automaton recognising construction safe asynchronous automaton implementable language want construct safe deterministic asynchronous automaton slightly changing zielonka automaton restricting global states reached executing sequences actions definition regular trace language construct equivalence satisfying propositions 
build asynchronous automaton aa difference restrict 
precisely pk proc pn action ta dom km pk pkm pk ta pkm ta pn unchanged correctness prove aa safe finite deterministic asynchronous automaton recognising suppose construction sound 
zielonka construction aa finite deterministic asynchronous automaton pn note intermediary states execution prefix closed 
states reachable 
construction states final 
aa safe 
easily deduce aa thing prove soundness definition transition functions aa fact prefix closed theorem consistency result theorem 
implementable language 
ta dom pi pi proof 
lemma ta dom ta dom ta hypothesis ta implies dom ta dom ta prefix closed obtain dom ta hypothesis pi pi dom prop 
pi ta pi dom 
repeatedly applying prop 
get dom ta dom 
prop 
deduce dom ta dom dom proving implies easily checked dom dom 
dom dom dom dom dom 
applying safe branching iteratively dom dom si sm dom obtain dom dom say 
sm iff si 

condition safe branching ensured hypothesis proof proposition proof 
sketch 
starting minimal automaton satisfies invariants implied inclusion syntactical equivalence generated regular language 
easy see invariants preserved algorithm 
prove termination 
invariant words associated states belong pairwise different equivalence classes finite index step executed finite number times 
moment executed anymore iteration algorithm executes steps decreasing number red transitions 
eventually automaton contains green black transitions algorithm terminates 
show termination automaton safe deterministic finite asynchronous automaton recognising implementable language follows fact termination contains state equivalence class intersects transitions 
quotient infinite automaton tl asynchronous automaton constructed proof zielonka theorem 
proof theorem start giving definitions 
arbitrary language fixed independence relation define closure respect denoted smallest inclusion trace language including define prefix closure denoted prefix smallest inclusion prefix closed language including lemma 
dom distributed alphabet languages 
trace language 
proof 
contradiction suppose exists 
exists hand trace language shown contradiction 
give proof theorem synthesis problem undecidable proof 
variant zielonka theorem theorem bijection languages accepted safe asynchronous automata implementable languages dom 
prove problem undecidable problem 
regular language distribution dom implementable language prove problem undecidable reduction post correspondence problem pcp known undecidable alphabets 
instance post correspondence problem encoded homomorphisms solution instance word 
technical reasons letters encode sets ab aab 
choose alphabet 
dom distribution induces independence relation 
simplify presentation denote 
consider languages wf wg reduction sak see mp wf wf wg wg 
proved see mp exist regular languages lf lg closures respect exactly complements closures wf wg respectively lf wf lg wg 
instance pcp choose regular language lfg prefix lf lg prove instance solution problem lfg solution 
prove lfg showing lf lg 
ba corresponds encoding bac bac bca cba wf 
lf wf bac lf 
choose lf bac lf cba lf lf 
similarly choose lg cba lg lg 
deduce cba lf lf lg lg lf lg lf lg 
lf lg cba 
suppose pcp instance solution say 

prove problem lfg solution 
denote prefix solution implementable language lfg 
regular language finite 
trace language trace language concatenation letter dependent actions prefix closure operator preserve closure independence relation 
prefix closed language construction 
show satisfies safe branching prove wy wz implies independence relation necessarily belongs 
suppose definition wy wc prefixes elements note elements set number 
exist wcw wcw number yw cw number contains commutes sx sx sx ax ax ax ax ax ax pos neg pos neg pos neg ac sc ac ac ac ac sc ac ac ac ac fig 

automaton appears position exists belongs lfg wf wg lf lg lf lg lf lg 
appear encoding element appears appears construction inverse implication problem lfg solution prove pcp instance solution suppose solution problem implementable language lfg 
exists appears lfg definition lfg necessarily vd lf lg 
trace language lfg deduce lf lg 
apply lemma obtain lf lg 
easy see lf lg wf wg wf wg 
implies wf wg equivalent pcp having solution 
proof theorem proof 
prove np hardness subautomaton synthesis polynomial time reduction sat problem boolean formulae conjunctive normal form 
formula conjunctive normal form variables xn clauses cm 
give deterministic finite automaton satisfiable admits safe subautomaton satisfying id fd 
independence relation way alphabet actions contains action variable xi action positive negative literal xi xi action clause cj extra action 
ai axi axi acj choose axi axi 
state space contains initial state state variable xi ai states posi neg positive negative literals associated variable xi axi pos axi neg state scj clause cj posi acj scj positive literal xi cj acj scj negative literal xi cj 
literals posi appearing clauses define self loops posi posi 
scj scj acj 
initial final states constructed automaton deterministic safe 
satisfy fd places posi axi axi axi state axi posi axi subautomaton satisfying fd contain ax xi posi 
prove satisfiable admits safe subautomaton satisfying id fd 
direct implication satisfiable exists assignment variables evaluating true clauses true 
choose subautomaton reachable part removing states incoming transitions associated literals evaluated false posi removed xi false removed xi true 
deterministic safe automaton satisfying fd conflicts states id clause cj validated path scj acj acj self loops scj 
see fig 
automaton having subautomaton boldface lines true true false converse implication subautomaton satisfying properties want show satisfiable 
previous ax xi contain transitions posi axi prove assignment validate xi true posi belongs false 
cj clause 
acj path scj necessarily involving node nodes posi 
literal associated xi validates clause cj 
proved problem np hard easy show np distribution dom deterministic finite automaton non deterministic machine guess subautomaton guessing subset edges verify polynomial time required properties safeness id fd satisfied 
ax exit enter req enter exit req asynchronous automaton mutex global view exit enter req enter req req exit req req enter enter exit exit req exit enter req enter req exit asynchronous automaton mutex global view req enter exit req enter enter req exit req enter req exit exit req enter enter exit req req enter req enter fig 

solutions mutex problem asynchronous automata req 
