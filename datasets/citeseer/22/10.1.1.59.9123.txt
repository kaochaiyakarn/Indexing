strong conditional oblivious transfer computing intervals ian blake vladimir dept elec 
comp 
eng university toronto toronto canada comm utoronto ca dept comp 
sci university toronto toronto canada cs utoronto ca 
consider problem securely computing greater gt predicate generalization securely determining membership union intervals 
approach problems point view conditional oblivious transfer cot introduced di ostrovsky rajagopalan 
cot oblivious transfer occurs iff predicate evaluates true parties inputs 
working semi honest model computationally unbounded receiver 
propose stronger simple intuitive definition cot call strong cot scot 
ii simpler efficient round protocol securely computing gt gt scot 
iii simple efficient modular construction reducing scot membership union intervals ui scot gt scot producing efficient round ui scot 
falls area constructing efficient secure multi party protocols interesting functionalities 
basic functionality common significant value improvement corresponding protocol 
start presenting problems investigate motivation 
base functionality consider greater gt basic commonly 
secure evaluation gt famous researched problems cryptography 
exist vast number applications relying auction systems price negotiations 
typical example secure distributed database mining 
setting follows parties having private database wish determine properties perform computations joint database 
interesting properties computations transaction classification rule mining involve evaluating large number instances gt 
large size databases minor efficiency gain computing gt results significant performance improvements 
lee ed asiacrypt lncs pp 

springer verlag berlin heidelberg blake functionalities memberships set intervals conjunctions disjunctions studied useful 
immediate uses lie appointment scheduling flexible timestamp verification expression evaluation areas computational geometry biometrics 
certain kinds set membership problems studied freedman nissim pinkas represented succinctly instances problems consider 
example problem membership set consisting integers large interval represented conjunction small instances interval memberships low bit 
cases solutions may significant advantages general set intersection solution 
setting computationally unbounded receiver alice appealing oblivious transfer general computations 
numerous papers consider unconditional security parties particular receiver :10.1.1.17.7459
practical round computation unbounded party alice currently hard achieve 
best known general approach offers polynomial efficiency computing nc circuits 
time alice bounded efficient yao garbled circuit approach cost linear size circuit 
solve posed problems difficult setting unbounded alice achieving performance slightly worse best known approach easier bounded alice setting 
contributions outline presenting preliminary definitions constructions sect 
start discussion conditional oblivious transfer cot sect 

wish strengthen current definition respects 
firstly observe definition require privacy sender private input 
secondly propose justify cot receiver obtains possible secret messages depending learning value opposed approach receiver receives message necessarily reveals value approach significantly adds flexibility cot functionalities allows powerful compositions cot protocols 
propose definition strong conditional oblivious transfer scot incorporates observations minor points 
sect 
discuss previous gt problem main tool efficient protocol computing gt scot built homomorphic encryption scheme 
exploit structure gt predicate novel way arrive solution efficient flexible best previously known fischlin model unbounded alice 
additionally construction offer transfer bit secrets practical applications extra cost invocation protocol opposed necessary invocations fischlin protocol 
results additional significant efficiency gains 
strong conditional oblivious transfer computing intervals sect 
show bandwidth gt cot solution protocols efficiently computing scot interval membership scot scot membership union intervals ui scot 
modularity protocols constructed fischlin solution efficiency loss described previous paragraph 
leak private inputs sender know efficient way extend solutions compute functionalities 
ui scot compute conjunction disjunction memberships unions intervals 
compare summarize resource requirements schemes fischlin di table sect 

definitions preliminaries start introducing necessary terminology notation refer reader goldreich depth discussion 
working setting semi honest participants randomness computation 
party functionality mean possibly random process maps inputs outputs 
denote view randomness input messages received party executing protocol party respective inputs view 
note view isa random variable random coins stress constructions analysis fixed security correctness parameters mind asymptotic notions 
example talking view party view mean ensemble view views 
denote statistical closeness ensembles random variables computational indistinguishability wesay function negligible positive polynomial exists 
say probability overwhelming negligibly different 
homomorphic encryption 
constructions semantically secure public key probabilistic additive homomorphic encryption 
informally scheme probabilistic randomized encryption function uses randomness encrypt plaintext possible ciphertexts 
allows re randomization random encryption plaintext computed ciphertext public key 
rely unlinkability encryptions message 
encryption scheme operations defined possibly different domains holds 
scheme called additively multiplicatively homomorphic homomorphic respect corresponding operation additive scheme allows compute 
commonly schemes homomorphic 
example elgamal scheme multiplicatively homomorphic goldwasser micali correctness parameter specifies allowed probability error protocols 
blake schemes additively homomorphic 
unfortunately known exists scheme algebraically additively multiplicatively homomorphic 
note additively homomorphic scheme allows multiplication known constant computing cx repeated addition 
paillier cryptosystem 
protocols require additional property encryption scheme large plaintext size bandwidth 
paillier scheme satisfies requirements instantiate protocols 
completeness omit number theoretic justification 
key generation rsa modulus pq large primes 
integer order modulo integer 
public key pk secret key sk lcm lambda function 
encryption encrypt compute enc mod zz decryption decrypt ciphertext compute mod mod mod takes input element set sn mod 
re randomization re randomize ciphertext multiply random encryption compute cr mod zz underlying security assumption called composite residuosity class problem intractable called assumption 
potentially stronger rsa assumption quadratic residuosity assumption 
refer interested reader details 
strong conditional oblivious transfer notion cot introduced di ostrovsky rajagopalan context timed release encryption 
variant oblivious transfer ot introduced rabin 
intuitively cot participants receiver sender private inputs respectively share public predicate 
secret wishes transfer iff information transferred private input value predicate remain computationally hidden definitions start describing ways strengthening existing definition goal increasing modularity widening applicability scot protocols 
construction ui scot example requires building blocks proposed features 
strong conditional oblivious transfer computing intervals sufficient proposed timed release encryption scheme definition lacks requirement secrecy sender private input 
new definition include requirement 
secondly prefer approach 
proposed setting sender possesses secrets wishes send send 
cot definition allows scot protocols property revealing receiver 
proposal strengthens definition scot protocol trivially modified satisfy cot definitions opposite efficiently hold note follows requirements scot protocol trivially modified scot protocol 
hold cot 
important property constructions 
minor point require statistical opposed perfect correctness security allow easier analysis protocols wider applicability scot notion 
definition 
sender receiver participants protocol 
security parameter correctness parameter error probability 
di ds respective domains parties private inputs sender secrets 
di di ds ds 
assume domains known parties 
input di input di ds 
di di predicate 
consider scot functionality functionality fq scot empty string empty string models consider computing functionality 
parties may malicious semi honest party may may computationally limited wish give definition refers possible models rely existing definitions secure computations models 
refer reader goldreich depth presentations definitions security interesting models 
definition 
strong conditional oblivious transfer say protocol strong conditional oblivious transfer protocol respect model securely implements functionality fq scot model 
note general definition covers case probabilistic 
clearly secure multi party computation ot kilian cot implies scot 
solution inefficient 
course combinations possible nontrivial secure scot protocols parties computationally unlimited 
blake practical interesting settings model unlimited receiver semi honest polytime sender deterministic discuss constructions model wish explicate definition setting 
definition 
receiver sender inputs secrets unary parameters predicate discussed 
say strong conditional oblivious transfer protocol predicate semi honest model computationally unlimited receiver polytime sender transfer validity 
overwhelming probability obtains obtains 
security 
obtains essentially information transferred secret exists simulator simr appropriate domains simr view simr view security 
gets efficiently computable information exists efficient simulator sims appropriate domains sims view 
justification wish point interesting scot protocols 
sufficiently long secrets chosen randomly completion scot protocol know value non transferred secret 
viewed convenient way share value secret received may serve proof value possible cot able provide proof 
gt scot protocol research specifically addressing gt problem quite extensive 
considered special case context general secure multi party computation solution known celebrated 
general approach impractical 
circuit computing gt quite small best currently known round solution model computationally bounded alice 
people searched efficient solutions special classes problems different models efficient gt solutions implicitly appeared 
naor nissim general approach securely computing functions low communication overhead 
application solution gt quite efficient message length oblivious transfers needs log log strong conditional oblivious transfer computing intervals number rounds tolerated probability error 
sander young yung showed functionalities nc including gt computed round polytime protocol 
solution secure unbounded alice 
unfortunately natural shallow gt circuit optimal approach requires modular multiplications log communication input size gm modulus 
fischlin proposed solution significantly reduced number modular multiplications reducing message size maintaining minimal round efficiency 
best previously known solution gt problem model unbounded alice 
number modular multiplications required complete protocol allowed error probability 
message complexity bits log 
fischlin extends protocol cost approximately doubling communication computation costs satisfy definition gt scot exception leaking value predicate 
extension extended fully satisfy definitions expense approximately doubling communication computation costs 
construction constructions semantically secure additively homomorphic encryption schemes large message domains 
ease clarity presentation enable resource analysis instantiate protocols original paillier scheme 
paillier scheme received attention literature variants including elliptic curve version appeared 
efficient implementations may improve results 
gen enc dec instance generation encryption decryption algorithms respectively scheme 
definition receiver sender inputs respectively common parameters 
di ds 
ds ds loss generality di di section numbers need represent binary vectors 
specified xi denote ith significant bit bit binary representation including leading zeros applicable 
clear context may mean vector xn enc enc enc enc xn 
write enc pk clear context 
clarity presentation describe setup phase outside protocol 
stress run part move particular parties inputs fixed 
circuit formula fischlin protocol 
blake setup phase 
sets paillier encryption scheme group size pq running gen generating secret public keys sk pk 
chooses number bits max ds 
view ds subset perform operations elements ds modulo observation 
envision practical parameter choices gt protocols 
choose satisfy security correctness requirements encryption scheme 
practice log set ds log bits bandwidth encryption scheme sending secrets 
ds needs larger may practical split blocks size ds run gt scot times 
choosing parameters manner simplifies comparison results follow approach sect 

observation 
negligible minority elements ds group size protocols interested binary comparisons 
trivially reduce 
furthermore assume enforced mapping instance 
mapping done entirely similarly assume 
case reduced case example setting max di ds ensuring sent 
gt scot construction 
intuition step immediately proof corresponding security theorem 
construction 
computing functionality gt scot 
runs setup phase encrypts bit xi generated pk sends pk enc enc xn 
computes encryption difference vector di xi yi 
encryption flag vector fi xi xor yi xi yi xi yi 
encryption vector fi 
encryption vector di ri ri 
random encryption vector sends random permutation enc 
obtains enc decrypts determines output follows contains single ds output abort 
theorem 
protocol construction gt scot protocol semi honest model assuming semantic security employed encryption scheme 
proof 
sketch show protocol correctly computes desired functionality 
easy see homomorphic properties encryption scheme allow perform necessary operations 
particular step possible yi known strong conditional oblivious transfer computing intervals observe flag vector vector ones positions differ 
furthermore vector structure starts zero zeros sequence non ones 
overwhelming probability non zero elements multiples zz fraction multiples zn negligible chosen randomly independently ind position ind 
position differ dind determines gt 
transformation step randomizes coordinates setting ind value dind overwhelming probability zz multiplying ri randomizes perfectly 
overwhelming probability transformation step permutation maps 
permutation multiple event occurs negligible probability chosen randomly independently 
permutation preserves randomness properties elements vector easy verify performs mapping looking 
random re encryption step hides information may contained randomness encryption 
random permutation step hides index determining di 
easily follows observation probability exactly element size ds decrypted vector negligible 
overwhelming probability terminates outputs correct value 
security semi honest trivially holds semantic security properties employed encryption scheme 
prove security unlimited semi honest constructing protocol view simulator simr input output protocol 
simr generate distribution statistically close view real execution enc randomness generate pk sk setup phase random encryptions message defined protocol construction 
simr proceeds follows 
generates random string appropriate length match 
uses compute keys sk pk including 
computes candidate pick random 
replaces random element received outputs vector random encryptions coordinates pk previously arguments randomness elements carries secret randomness re encryption easy see simr generates distribution statistically close view note simulation perfect transfer secret possible real execution negligible probability 
observe gt scot protocol immediately implies solution gt semi honest model 
running gt scot blake secrets si known say immediately yields desired functionality 
gt transformation step unnecessary re randomization step required 
resource analysis evaluate message modular multiplication efficiency construction paillier encryption scheme 
note include relatively small computational cost key generation consistent compared results 
length inputs binary size plaintext domain paillier scheme 
message complexity construction nlog nlog bits 
weight number ones binary representation encrypt bit log multiplications required 
observe necessary perform expensive randomized encryption intermediate steps allows multiplications steps step log step si log log step protocol 
note perform transformation step example computing gt need log multiplications step 
decryption takes log multiplications 
total protocol requires log modular multiplications log gt 
stress transferring log bit secrets requires resources 
observe encryption re encryption multiplications precomputed encryption scheme initialized 
compare efficiency approach fischlin appropriate parameters 
note practice known attack paillier system better factoring modulus clearly factoring attacks effective gm scheme modulus size 
having assumed see sect 
assume security paillier gm schemes modulus size approximately 
compared scheme offers factor improvement message complexity log vs nlog bits 
pay higher cost number modular multiplications log vs 
additionally multiplications times slower working modulus length twice goldwasser micali encryption scheme employed 
comparisons summarized table sect 

scot unions intervals section new efficient protocols scot scot membership interval ui scot scot membership union intervals generalizations gt scot 
build protocols gt scot solution 
gt scot approaches fischlin protocol suitable constructions strong conditional oblivious transfer computing intervals solution simpler produces efficient protocols terms multiplication communication complexity 
constructions denote instance scot functionality secrets parties inputs scot 
sect 
show reduce ui scot scot scot gt scot 
model secure reductions provide secure protocols underlying oracles replaced secure implementations see goldreich composition theorem 
furthermore model oracles implementations may run parallel implementations provides secure round protocols scot ui scot 
ui scot protocol loss generality assume domain secrets ds additive group zz ds additions secrets done ds specified 
scot setting input di represents interval resp 
transferred resp 
input di 
diagram illustrates idea reduction scot gt scot interval splits di parts wishes transfer central part side parts di 
idea represent secrets sums independently random random taken separately elements ds transferred gt scot 
construction 
reducing scot gt scot 
randomly chooses ds sets ds satisfy 
reduction parallel invoke oracles gt scot gt scot 

obtains ds gt scot oracle executions outputs theorem 
protocol construction securely reduces functionality scot gt scot semi honest model 
proof 
sketch transfer validity property reduction trivially holds 
receive messages oracle executions reduction secure semi honest show construct simr simulating stress gt scot black box particular addition ds unrelated corresponding operation gt scot implementation 
blake ensemble view sent gt scot oracles ai bj 
transferred se 
simr independently random elements ds sum construction independently random sum simr perfectly simulates view wish reduce ui scot polynomially intervals scot 
input represents set disjoint intervals ii xi xi di secrets ds 
wishes transfer ii transfer 
number intervals set avoid leaking pad known upper bound adding empty intervals 
represent ii intersection regular cutout intervals illustrated diagram 
sk bottom line represents input set intervals domain lines represent constructed intervals correspond set 
si secrets transferred ui scot construction sij intermediate secrets created ui scot transferred existing scot protocol 
input intervals disjoint cut thin diagram parts constructed intervals intersect belongs constructed intervals 
reduce ui scot scot need choose sij ds si 
observation need satisfy si si sj observe second condition equivalent requiring sj sj construction 
reducing ui scot scot 
chooses ds sets sk si si si 
reduction parallel invoke oracles scot si si ii 
obtains ak ds oracle executions outputs ai 
theorem 
protocol construction securely reduces functionality ui scot scot semi honest model 
proof 
sketch transfer validity property reduction trivially holds 
receive messages oracle executions reduction secure semi honest show construct simr simulating view rk rk oracle sent sk sk strong conditional oblivious transfer computing intervals elements ds defined step construction 
transferred secret 
simr ds restriction ri 
simr perfectly simulates view ensembles wise independent random numbers sum value qi xi yi cot protocol 
build qi xi yi cot sense oracles corresponding qi scot 
input xn yn 
wishes send secret iff qi xi yi 
idea introduce gt scot example extending domain secrets ds group zz ds represents ds sum random secrets si runs qi scot si ri qi xi yi ri conjunction holds si transferred sum ds 
number predicates hold ri transferred randomize sum obtained construction 
reducing qi xi yi cot qi scot 
chooses rn sn sets sn si 

parallel invoke oracles qi scot si ri qi xi yi 
obtains qi scot oracle executions sets ai 
outputs ifv ds outputs 
theorem 
protocol construction securely reduces functionality qi xi yi cot qi scot semi honest model 
proof simple proof similar previous ones omitted 
corollary 
exists construction laws efficient round protocols computing conjunction disjunction memberships sets intervals secure computationally unlimited resource analysis continue expand resource analysis sect 

recall correctness security parameters 
discussed observation choose log 
determines secrets domain ds size noted sect 
include cost key generation compared solutions 
easy see construction calls underlying bit gt cot oracle 
implementation gt scot ui scot requires sending kn log bits performing kn log multiplications group size bit gt scot oracle implementation fischlin gt results full factor blowup communication server sends traffic 
factor blowup computation necessary scheme 
table summarizes cost comparable modular multiplications communication protocol relation 
blake gt predicate bit gt scot ui scot mod 
mult 
comm 
mod 
mult 
comm 
mod 
mult 
comm 
log nc nc log kn kn log log protocol log log log log kn log kn log see obvious way transform schemes gt scot include corresponding resource calculations 
simple intuitive stronger definitions scot 
flexible efficient scheme securely computing gt predicate gt scot semi honest setting unbounded receiver 
showed simple modular reductions ui scot gt scot 
addition results noticed natural efficient variants protocols resilient natural attacks malicious receivers 
devising versions protocols secure malicious model interesting aspect consideration 
acknowledgments 
second author travis steven myers especially charles rackoff insightful discussions 
marc fischlin pascal paillier useful comments relating schemes 

beaver micali rogaway 
round complexity secure protocols 
proc 
nd acm symp 
theory computing pages 

christian cachin jan camenisch joe kilian joy muller 
round secure computation secure autonomous mobile agents 
proceedings th international colloquium automata languages programming 

david chaum claude cr ivan damg ard 
multiparty unconditionally secure protocols 
proc 
crypto pages 
springer verlag 
lecture notes computer science vol 


di ostrovsky rajagopalan 
conditional oblivious transfer time released encryption 
proc 
crypto pages 
springer verlag 
lecture notes computer science vol 


desmedt 
unconditionally secure authentication schemes practical theoretical consequences 
proc 
crypto pages 
springer 
lecture notes computer science vol 


marc fischlin 
cost effective pay multiplication comparison method 
rsa security cryptographer track pages 
springer verlag 
lecture notes computer science vol 

strong conditional oblivious transfer computing intervals 
michael freedman nissim benny pinkas 
efficient private matching set intersection 
proc 
eurocrypt pages 
springer verlag 
lecture notes computer science vol 


steven galbraith 
elliptic curve paillier schemes 
journal cryptology 

oded goldreich 
foundations cryptography volume basic applications 
cambridge university press 

goldwasser micali 
probabilistic encryption play mental poker keeping secret partial information 
proc 
th acm symp 
theory computing pages san francisco 
acm 

shai halevi 
efficient commitment schemes bounded sender unbounded receiver 
journal cryptology journal international association research 

clifton 
privacy preserving distributed mining association rules horizontally partitioned data 
acm sigmod workshop research issues data mining knowledge discovery dmkd 

kilian 
founding cryptography oblivious transfer 
proc 
th acm symp 
theory computing pages chicago 
acm 

yehuda lindell benny pinkas 
privacy preserving data mining 
proc 
crypto pages 
springer verlag 
lecture notes computer science vol 


yehuda lindell benny pinkas 
proof yao protocol secure party computation 
cryptology eprint archive report 
eprint iacr org 

moni naor nissim 
communication preserving protocols secure function evaluation 
proceedings third annual acm symposium theory computing pages 
acm press 

moni naor benny pinkas sumner 
privacy preserving auctions mechanism design 
st acm conf 
electronic commerce pages 

pascal paillier 
public key cryptosystems composite degree residuosity classes 
proc 
eurocrypt pages 
springer verlag 
lecture notes computer science vol 


rabin 
exchange secrets oblivious transfer 
technical report tr harvard aiken computation laboratory 

phillip rogaway 
round complexity secure protocols 
phd thesis mit 

tomas sander adam young moti yung 
non interactive nc inproceedings th ieee symposium foundations computer science pages new york 
ieee 

yao 
protocols secure computations 
proc 
rd ieee symp 
foundations comp 
science pages chicago 
ieee 

yao 
generate exchange secrets 
proc 
th ieee symp 
foundations comp 
science pages toronto 
ieee 
