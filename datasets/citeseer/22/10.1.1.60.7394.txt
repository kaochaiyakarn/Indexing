control flow graph aspect mining jens krinke hagen germany krinke acm org aspect mining tries identify crosscutting concerns existing systems supports adaption aspect oriented design 
describes automatic static aspect mining approach control flow graphs program investigated recurring execution patterns different constraints requirement patterns exist different calling contexts 
case study done implemented tool shows discovered crosscutting candidates perfectly style 

notion tangled code refers code exists times software system encapsulated separate modules traditional module systems crosscuts system 
software difficult maintain understand extend 
aspect oriented programming provides new separation mechanisms complex crosscutting concerns 
major problem re engineering legacy code aspect oriented principles find isolate crosscutting concerns 
task called aspect mining 
detected concerns re implemented separate aspects improving maintainability extensibility reducing complexity 
aspect mining provide insights enable classify common aspects occur different software systems logging timing communication 
approaches static program analysis techniques proposed aspect mining 
developed dynamic program analysis approach mines aspects program traces 
program execution program traces generated reflect run time behavior software system 
traces investigated recurring execution patterns 
different constraints specify execution pattern recurring 
include requirement silvia breu nasa ames research center usa silvia breu gmail com patterns exist different calling contexts program trace 
dynamic analysis approach monitors actual run time program behavior potential behavior static program analysis 
explore differences static dynamic analyses aspect mining started develop static analysis variant approach 
early results experienced things results static dynamic analysis different due various reasons 
crosscutting concerns perfectly style result delegation coding style guides 
point obvious second point discussed 
section contains dynamic aspect mining approach 
static aspect mining approach dynamic variant section 
section contains case study section discusses results concludes section discusses related 

dynamic aspect mining basic idea dynamic analysis algorithms observe run time behavior software systems extract information execution programs 
dynamic aspect mining approach introduced analysis program traces mirror system behavior certain program runs 
program traces identify recurring execution patterns describe certain behavioral aspects software system 
expect recurring execution patterns potential crosscutting concerns describe recurring functionality program possible aspects 
order detect recurring patterns program traces classification possible pattern forms required 
introduce called execution relations 
describe relation method executions program trace 

classification execution relations definition execution relations analysis approach program traces 
intuitively program trace sequence method invocations exits 
consider entries exits method executions easily keep track relative order method executions started finished 
focus method executions want analyze objectoriented systems logically related functionality encapsulated methods 
formally program trace tp program method signatures np defined list 
tn pairs ti np ent ext ent marks entering method execution ext marks exiting method execution 
program traces easier read ent ext points represented respectively redundant name information discarded trace structure implies name ext belongs 
shows example trace 

example trace crosscutting concerns reflected different execution relations program traces method executed preceding method execution terminated line executed line inside execution preceding method call line executed line 
distinguish cases say outside inside execution relations program traces 
distinction sufficient aspect mining 
example execution ofb line methods executed inside execution andf lines ff information methods comes lost 
define formally np called outside execution relation ext ent sublist tp tp set outside execution relations program trace tp relation reversed outside execution relation tp 
set outside execution relations program trace tp denoted tp 
np called inside execution relation ent ent sublist tp called inside execution relation ext ext sublist tp tp set inside relations program trace tp tp set inside execution relations 
drop tp clear context 
example trace shown get set outside execution relations set outside execution relations directly trace simply reversing sets inside execution relations inside execution relations follows 
execution relation constraints recurring execution relations program traces seen indicators general execution patterns 
decide circumstances certain execution relations recurring patterns traces potential crosscutting concerns system constraints defined 
constraints implicitly formalize crosscutting means 
technical reasons encode method execution nested method executions method invocation method exit 
absence method executions represented designated empty method signature 
definition execution relations extended sublist program trace tp induces relations defined additional relations involving 
table summarizes conservative extension 
shows sublist trace left side execution relations follow sublist right side 
execution relations added annotated asterisk 
program trace remains defined method signatures np execution relations consist method signatures np 
trace sublist np relation np ext ent ent ent bol ent ext ext ext eol ent ext bol eol denote list table 
extended execution relations sets include execution relations involving 
define constraints dynamic analysis 
formally execution relation called uniform np holds exists composition 
set execution relations satisfy requirement 
constraint easy explain 
consider outside execution relation defined recurring pattern execution preceded execution argumentation outside execution relations analogous 
uniformity constraint applies inside execution relations 
inside execution relation recurring pattern program trace executes method method inside body 
drop relations define analysis constraint execution relation called crosscutting np holds occurs single calling context program trace tp inside execution relations calling context surrounding method execution outside execution relations calling context method invoked method executed 
set execution relations satisfy requirement 
execution relations called aspect candidates represent potential crosscutting concerns analyzed software system 

aspect mining algorithm constraints described implemented relatively straightforward algorithm compute sets uniform crosscutting execution relations represent aspect candidates 
running example uniformity narrows potential aspect candidates sets execution relations enforce crosscutting constraint obtain final sets aspect candidates comply uniformity crosscutting 

static aspect mining experience dynamic approach implemented similar static analysis 
analysis extracts execution relations control flow graph analyzed program 
particular immediately extract uniform crosscutting execution relations previous step extract unconstrained execution relations 
extraction different outside inside execution relations 
inside outside execution relations 
inside execution relations 
kind execution relations extract method invocations immediately entry invoked methods control flow graph 
relation uniform path method starts method call 
possible simplification just considers single entry single exit regions starting methods entry nodes 
relation means method method invocation inside single entry region starting entry node method definition crosscutting stays crosscutting method invocation uniform execution relations 
outside execution relations 
extract pairs method invocations exists path invocation method invocation method method invocation 
pair uniform outside execution relation paths invocation method contain invocation invocation 
possible simplifications require invocation post dominated invocation invocation 
second simplifications require invocation method followed invocation single exit regions containing invocation 
experiences implemented static mining top soot framework compute size relations size relations relations candidates table 
inside execution relations size relations size relations relations candidates table 
outside execution relations control flow graph analyzed program 
tool traverses control flow graphs extracts uniform crosscutting inside outside execution relations 
test case analyzed version 
tables show results 
execution relations tool identified candidates uniform crosscutting relations outside relations candidates relations 
interesting candidates inside outside 
furthermore lot candidates just small amount crosscutting candidates just crosscut methods 
discuss identified candidates detail 
due large amount identified candidates largest candidates category 

inside relations largest candidate consists uniform crosscutting execution relations 
invoked method current 
obvious method access current factory object needed methods system 
clearly crosscutting aspect 
second largest candidate consists relations method view 
accessor method returns currently active view 
crosscutting 
holds third fourth candidate consist relations 
relevant methods owner accessor methods 
fifth candidate things different consists relations method undo checks current object represents undo able action 
things change sixth candidate consisting candidates method 
method informs operation change displayed content 
candidate crosscutting concern refactored aspect 

outside relations largest discovered candidate consists uniform crosscutting execution relations method iterator 
closer look invocations reveals crosscutting incidental operation performed element container 
second largest candidate somewhat interesting consists invocations call execute invocations method 
invocation anomaly 
invocations classes representing operations change probably change 
largest candidates consisting relations incidental crosscutting concerns related methods drawing list add view 
interesting see view part large inside candidate 
sixth largest candidate seen crosscutting concern refactored aspect 
consists relations method 
immediately called methods change displayed 
interesting see method appeared candidate candidate larger relations 

discussion initial evaluation static aspect mining tool shown identified crosscutting candidates concerns aspects 
different results previous dynamic aspect mining 
approaches give interesting insights crosscutting behavior analyzed program 
seen example method execute probably discover crosscutting anomalies anomaly discovered execution relation pattern 
results preliminary small amount analyzed candidates single test program 
previous results dynamic approach hypothesis results change general 
mean aspect mining hard times identify candidates really aspects 
continue directions 
large scale analysis discovered candidates large set programs static dynamic analysis 

development filter extracts candidates discovered candidates 

comparison aspect mining approaches 

related exists small set automatic aspect mining approaches 
approaches specify pattern searched source code 
uses concept analysis identify aspectual views programs 
extraction elements attributes names classes methods variables formal concept analysis group elements concepts seen aspect candidates 
approaches rely clone detection techniques detect tangled code form crosscutting concerns evaluated clone detection techniques identify crosscutting concerns 
evaluation shown typical aspects discovered 
identifies initial re factoring candidates control comparison 
initial identification phase builds code clone detection program dependence graphs 
step filters undesirable re factoring candidates 
looks similar data dependencies subgraphs representing code clones 
phase identifies similar candidates coalesces sets similar candidates re factoring candidate classes 
breu krinke 
aspect mining event traces 
proc 
international conference automated software engineering pages 
van deursen van 
evaluation clone detection techniques identifying cross cutting concerns 
proc 
international conference software maintenance 
griswold kato yuan 
aspect browser tool support managing dispersed aspects 
technical report cs department computer science engineering uc san diego 
kiczales lamping mendhekar maeda lopes 
loingtier irwin 
aspect oriented programming 
european conf 
object oriented programming ecoop 
rashid 
mining aspects 
workshop early aspects aspect oriented requirements engineering architecture design aosd sat 
workshop 
shepherd pollock 
framework automatic mining refactoring aspects 
technical report university delaware 
tarr ossher harrison sutton jr degrees separation multi dimensional separation concerns 
st intl 
conf 
software engineering icse pages 
mens 
mining aspectual views formal concept analysis 
proc 
ieee international workshop source code analysis manipulation 
rai gagnon hendren lam sundaresan 
soot java bytecode optimization framework 
proc 
cascon 
zhang 
jacobsen 
quantifying aspects middleware platforms 
nd intl 
conf 
aspect oriented software development aosd pages 
