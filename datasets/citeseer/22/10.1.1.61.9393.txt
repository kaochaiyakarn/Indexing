international journal information security manuscript 
inserted editor paolo giorgini fabio massacci john mylopoulos nicola zannone requirements engineering trust management model methodology reasoning date receipt acceptance inserted number proposals aim incorporate security engineering mainstream software engineering 
capturing trust security requirements organizational level opposed system level mapping security trust management policies open problem 
proposes set concepts founded notions ownership permission trust intended requirements modeling 
extends tropos agent oriented software engineering methodology support security requirements engineering 
concepts formalized shown support automatic verification security trust requirements datalog 
discussion concrete illustrate proposal health care case study 
keywords requirements engineering agent oriented software security engineering trust models business organizations verification validation software privilege management 
modern systems health care banking industry military systems store manipulate large amounts sensitive data distributed setting giving birth major security research areas trust management tm privilege management infrastructure pmi :10.1.1.41.4201
order protect regulate access widely distributed data number advanced policy languages expanded revised version 
partly supported projects astro ist fp fet ip ist fp ip pat sr pat stamps 
department information communication technology university trento italy giorgini massacci jm zannone dit unitn algorithms systems managing security credentials developed years 
look connection systems requirements entire system find large gap 
managing high level user requirements key issue successful cost effective development systems managing security requirements completely ignored 
interested answering question define disciplined methodology support designers capture high level trust privilege management requirements implementation 
working answer note simply rely software engineering methodologies 
structured processes capturing highlevel functional requirements detailing system implementation processes exist tm pmi 
traditional approaches software requirements engineering treat security non functional requirement introduces quality constraints system operate 
software engineering practice inclusion security features system usually done functional design 
critical problem mainly security mechanisms fitted pre existing design may able accommodate conflict 
spurred number researchers model security requirements integrate models standard software engineering methodologies 
example proposes extension unified modeling language uml modeling security related features confidentiality access control 
basin focus modeling rbac policies integrating policies model driven software development process main task secure configuration systems 
major limitations proposals treat security system oriented terms 
words intended model computer system policies security mechanisms supports 
paolo giorgini trust left entirely outside picture 
trust important aspect making decisions security particularly influences specification tm policies organizational level focus 
trust related belief honesty competence reliability fundamental concept human behavior 
trust build collaboration humans organizations necessary antecedent cooperation 
trust leads constructive cooperative behavior fundamental long term relationships 
past years number trust policy languages developed model trust distributed systems 
gap frameworks requirements analysis process 
consider trust design security measures imposed system heavier handed necessary implementation may introduce pointless protection mechanisms just hinder operations trusted domain perceived system designers 
hand implementation system may implicitly assume trust relationships users users system simply 
understand problem trust management security engineering need model social organizational settings terms relationships relevant actors including system 
modeling digital protection mechanism satisfactory 
instance introduces security tagging represents need particular implementation security protection mechanism messages exchanged uml collaboration diagram 
analysis security requirements real health care authority suggests better worse medical data available form 
setting cryptographic mechanisms critical physical locks avoiding unauthorized access sensitive medical data focusing digital solutions having little room specify physical protection requirements organizational opposed software level 
contrary analyzing structure organizations system allows designers understand information protected depending nature information identify security mechanisms better protect 
need focus requirements engineering methodologies allow modeling organizations actors enhance notions trust permission order build pmi tm implementation takes account system organization 
extent tropos agent soft example folder patient waiting kidney transplant high profile center contains documents copies reports drawings surgeons clinicians referring hospitals patient 
documents far sensitive patient date place birth waiting list registration number medical information system 
ware engineering methodology particularly suited model organizational setting system 
authors shown tropos lacks ability capture time functional security features organization 
introduce process integrates trust security facets system engineering concepts notations traditional requirements specification 
building propose solution augmenting tropos framework take entitlement trust delegation permission account 
goal introduce pmi tm requirements engineering framework 
essentially avoid designing entire system retrofitting pmi tm top late proper fit 
intuition modeling security trust need distinguish actors want access resource fulfillment goal execution plan actors capabilities actors entitled 
call proposal eco model capabilities objectives 
second point distinguish functional dependency trust delegation relationships 
intuitively functional dependency describes agreement actors delivering resource fulfilling goal executing plan 
uses functional dependencies traditional re functional model organization software systems 
trust relation describes belief actor behavior actor trustee misuse resource task expected 
example trust cleaning lady fulfilling goal cleaning room doing snooping papers 
delegation describes formal passage permission actors may done electronically digital certificates print signed letter issued regulation order agreed verbal contract 
devise pmi tm structure propose proceed steps 
build functional requirements model show functional dependencies actors 
develop trust requirements model study trust relations actors correspond security requirements 
built pmi tm implementation designer define credential delegation certificates comparing relations captured models check actor provides service authorized 
conceptual models developed translate formal specification 
allows framework support automatic verification high level functional trust security requirements suitable delegation logic mechanized requirements engineering trust management datalog particular dlv system 
essentially want guarantee functional trust security requirements contradictory 
propose algorithm map pmi tm implementation framework role rt framework 
section discuss related 
introduce simple health care information system running example 
provide brief description tropos methodology describe basic concepts diagrams modeling security 
show running example modeled framework 
formalization security concepts analyze running example formal framework 
introduce negative authorizations describe implementation trust rt framework tool supporting framework 
conclude directions 
related modeling requirements key challenges secure systems meet see devanbu stubblebine call arms icse number researchers call 
proposals roughly classified main streams 
object level modeling uses shelves requirement framework uml tropos model framework number security requirements 
analysis features framework draw security aspects system derive implementation 
meta level modeling takes requirements framework enhances linguistic constructs capture security requirements 
analysis features implementation framework revised accommodate new features 
advantage object level approach reasoning security virtually cost free view point user new language learn bad features modeling framework immediately usable 
framework equipped formal semantics formal reasoning procedures inherited 
formal framework indistinguishable requirements 
major disadvantage link security functional requirements lost introduced ad hoc predicates relationships designer 
particularly difficult modeling general relationships rules processing personal data authorized person data processed 
datalog plus vel disjunction latin 
meta level approach trades readiness expressiveness 
addition suitable constructs model compact intuitive 
main advantage coupled possibility designing analysis features tailored security domain 
key disadvantage addition new features carefully planned new framework needs definition analysis semantics reasoning procedures 
minimize problem sensible approaches try design framework way new features inherit old framework capabilities 
early requirements research list number works object level field 
liu propose methodological framework dealing security privacy requirements agent oriented modeling framework 
introduce softgoals security privacy model corresponding notions dependency analysis determine level security guaranteed system 
general taxonomies security privacy established 
serve general knowledge repository knowledge goal refinement process 
field privacy policy languages similar approach taken notions subject object purpose 
show hippocratic database notions mapped secure tropos 
requirements process model reuse reusable template organize security policies organization catalog filled reusable personal data security requirements 
uml community basin modeling language uml called secureuml 
approach focused modeling access control policies policies integrated software development process 
side meta level approaches number works propose capture security requirements standard software engineering methodologies 
proposes extension unified modeling language uml 
proposal uses standard uml extension mechanisms stereotypes tags constraints profiles represent security requirements 
instance tags secrecy integrity authenticity represent respective requirements messages described uml collaboration sequence diagrams 
mcdermott fox adapt uml cases capture analyze security requirements 
introduce notion abuse case result interaction harmful system actors 
define concept misuse case inverse case describes function system allow 
analogous proposal put forward van lamsweerde introduce notion anti goals goals attackers :10.1.1.3.5409
common limitation approaches focus system paolo giorgini organization take account trust relations possibility implementing security requirements organizational solutions opposed technological ones 
previous shown key missing concept separation notions providing service ownership service 
look requirements refinement process proposals find certain stage leap system security features consisting high level functionalities refinement shows encryption access control authentication 
modeling process clear encryption access control authentication necessary 
placed meta level modeling field 
avoid disadvantages approach focused modular addition dropping newly proposed features return tropos original methodology 
particular step direction closing gap functional trust requirements trust management architecture emerging standard way implement security distributed systems 
running example section describes high level functional security requirements building medical system running example 
systems particularly challenging model tight possibly conflicting functional security requirements 
current italian privacy legislation medical information system manages patient information including information medical treatments received provides views information variety actors 
system provide patient medical data consent obtained patient question 
patients may refuse share personal data trust system feel control data 
sections model analyze requirements methodology order determine correctness consistency entire set requirements 
particular give practical example application methodology show capabilities supporting system designers refining redefining requirements vulnerabilities flaws detected 
del www htm 
readers familiar italian may look ross anderson suggestion privacy policy british medical association look similar case study carried university trento 
particular challenging aspect showing system organization fulfills need know principle private sensitive data held actors human software need meet functional requirements 
year law requires organizations draw deploy security policies procedures guarantee principle 
ability model functional security requirements essential 
start identifying main actors stakeholders patient legitimate owner personal data depends hospital receiving appropriate health care hospital provider medical treatments depends patients order access personal information clinician physician hospital provides specialized medical health advice needed provides appropriate medical treatment health care authority hca owner medical treatments main goals fair allocation resources quality provided services citizens authority opposed citizens belonging regional authorities 
standpoint functional requirements clinicians need fast access patients medical data provide effective care 
similarly hca needs reliable access data allocate effectively available resources guarantee patient receive quality medical care 
hca wants sure system way clinicians patients act scope roles 
details unroll course 
certain apparently minor details framework capture owner goal provide medical treatments play major role identifying correct authorization trust management implementation 
secure tropos embedding trust security primitives chosen state art requirements engineering methodology 
competing alternatives chosen tropos methodology applied model security properties 
main feature tropos role early requirements analysis phase precedes prescriptive requirements specification 
main advantage phase capture piece software developed 
tropos tailored describe organizational environment system system 
uses concepts actor requirements engineering trust management table comparing tropos model secure tropos model tropos model secure tropos model actor properties actor properties objectives objectives capabilities actor relationships actor relationships functional dependencies functional dependencies delegations permission trust relations goal plan resource social dependency 
actors strategic goals represent agents organizational human software roles positions 
plan task represents way fulfilling goal 
resource represents physical informational entity 
dependency actors indicates actor depender depends dependee accomplish goal execute plan deliver resource 
remainder generically speak providing services executing plans fulfilling goals delivering resources order simplify exposition 
unfortunately tropos designed cooperating systems mind 
dependency actors means dependee take responsibility fulfilling functional goal depender dependee implicitly authorized 
happen actor depends service dependee owner service authorized provide service 
example patient depends hospital getting medical treatments 
hand hca legitimate owner medical treatments 
hospital authorized hca providing health care 
furthermore tropos dependency intentional relationship depender wants service provided dependee willing able provide 
implicitly assumes dependee capability provide service 
assumption strong depend know knows willing able provide service don directly know 
example patient depends local hospital medical treatments 
hand clinicians able provide medical treatments 
hospital depends clinicians providing medical treatments patients 
making explicit legitimate owner service entitled provide service able provide service baseline secure tropos 
intuitively added tropos concepts relationships representing trust permission delegation 
explicit concept capability 
complete model adopt notion objectives goals proposed tropos methodology 
table compares tropos model proposed extension 
identify relations actor service express actors properties relations actors services express social relationships actors 
particular secure tropos support desires represent objectives actors ownership represent actors provisioning represent capabilities actors 
secure tropos supports tropos functional dependencies delegations permission trust relations modeling transfer responsibilities actors 
basic idea owner full authority concerning access disposition access resource execution plan fulfillment goal 
delegate actors 
distinction owning providing service goal plan resource allows model situations example patient legitimate owner personal data medical system provides access data 
note possible goal sense entitled decide fulfill provide fulfillment 
example hospital provide medical treatments eventually delegating doctors authorized 
hca authorized entity 
delegates permissions hospitals eligibility checks payment collection 
notice distinction trust delegation 
delegation marks formal passage authority domain analysis 
contrast trust capture social relationship actors formalized contract 
essentially trust relation actors indicates believe actor misuse service 
general trusting actor service actor sure service properly 
example certificate entitlement medical care eventually issued patient hca 
certificate needs digital 
example hca plastic card patient social security number 
certificate patient prove hospital hca delegated permission get medical treatments 
example hospital trusts clinicians provide medical care authorized patients 
trust relation represents belief hospital clinician behave agreement hospital policies important mixed public private system italian 
person show clinic public private particular region absence agreement hospital hca certain care facilities available individual question 
paolo giorgini represent technological measure prevent clinician provide people previously authorized hospital 
notice contrast hca hospital relationships 
hca trusts clinicians fulfill hospital requirements 
certain hospitals simply delegated signed agreement costs 
may cases stakeholders happy social protection mechanisms cases system supported security mechanisms needed 
distinction trust delegation allows model scenarios actors delegate permission services actors trust 
inconsistencies triggered kind scenario alert system designer system secure suggest introduce mechanism order ensure actors services misused monitoring patterns 
formal model just offers support spot inconsistencies decision mechanisms adopt taken designer 
necessary machinery start requirements modeling analysis 
software development tropos consists steps early requirements analysis concerned understanding problem studying existing organizational setting late requirements analysis system described operational environment relevant functions qualities architectural design system global architecture defined terms subsystems interconnected data control flows detailed design interactions actors specified terms inputs outputs control 
mainly focus requirement phases various activities contribute acquisition requirement model refinement subsequent models 
actor modeling identifies actors environment system actors analyzes goals 
late requirements actor modeling focuses definition system 
functional dependency modeling identifies actors depend obtaining services actors able provide services 
permission trust modeling identifies actors trust actors services actors services 
permission delegation modeling consists identifying actors delegate actors permission services 
graphical representation model obtained modeling activities actor goal plan resource fig 
graphical representation secure tropos entities tropos secure tropos df df dp dp fig 
graphical notation actors relationships different kinds actor diagrams functional model trust model trust management implementation 
diagrams actors represented circles goals plans resources respectively represented ovals hexagons rectangles fig 

social relationships graphical notation requirements engineers design phase 
shown tropos counterpart fig 

notice functional dependencies assume level trust actors concerns ability provide services 
say hospital functionally depends clinician means hospital delegate provisioning service clinician ii trusts clinician able take responsibility 
sake simplicity keep relations 
split relation components explain certain monitoring patterns seen actual systems 
social relations qualified valid certain condition holds 
stakeholders identified objectives capabilities social relations analysis proceeds order enrich model details 
goal modeling consists refining requirements decomposition eliciting new relations 
graphical representation goal modeling goal diagrams represent perspective specific actors 
modeling case study activity early requirements phase actor modeling 
analyzing running example identified actors 
hca environment actor high level goals provide medical treatments citizens check equity resource distribution 
patient actor goal having ac conditions horn clausal form order easily implement formal framework 
requirements engineering trust management hca personal information patient provide medical treatments check equity resource distribution personal information provide medical treatments fig 
early requirements trust model personal information df patient hospital provide medical treatments personal information request consulting provide consulting provide medical treatments check equity resource distribution hospital clinician fig 
early requirements functional model personal information clinician hca medical treatments 
actors hospital clinician 
analysis proceeds introducing social relations actors 
figures show respectively trust model functional model trust management implementation 
trust model fig 
hca owns goal providing medical treatments entitled decide fulfill goal care delivered 
hca trusts hospital providing medical treatments 
turn hospital trusts clinician achieving goal 
hospital trusts clinician provide medical treatments authorized patients patients registered local hca 
explains trust relation hca hospital checking equity resource distribution 
patient owns personal information trusts hca hospital misuse 
hospital trusts clinician information 
functional model fig 
patient depends hospital providing medical treatments turn hospital depends clinician fulfillment goal 
provide accurate medical care may argue everybody entitled care leave matter hca 
politically correct correspond accurate model domain 
hca personal information patient provide medical treatment check equity resource distribution personal information hospital provide medical personal treatment information clinician fig 
early requirements tm implementation clinician request specific professional consultancy hospital turn requests clinicians 
clinician needs patient personal information requests hospital 
turn hospital depends patient getting information 
hca depends patient personal information order perform duties 
trust management implementation fig 
hca delegates permission check equity resource distribution provide medical treatments hospital 
turn hospital delegates permission provide medical treatments clinician 
clinician entitled provide medical treatments 
provide accurate medical care patient clinician need personal information 
hca needs patient personal information perform duties 
side patient signs hospital hca form allows processing information 
problem patient delegates information hospital clinician job mismatch kind delegation 
patient delegate personal information hospital possibility re delegating things go level needed 
hospital got right delegates personal information concerning specific patient clinician assigned patient 
example goal diagram fig 

goal provide medical treatments decomposed access patient record examination prescribe medical treatments 
provide accurate medical care clinician needs patient medical data access clinician consent donor 
modeled decomposing goal access patient record get patient consent get patient information 
analysis reveals existence additional social relations actors functional dependency clinician patient getting patient consent functional dependency clinician hospital getting patient information 
goal examination decomposed physical examination paolo giorgini patient clinician get patient consent hospital access patient record get patient information physical examination provide medical treatments examination laboratory tests fig 
goal diagram clinician hca patient check authorized resources provide authorization token check equity resource distribution resources limits check authorization token fig 
goal diagram hca medical treatments medical diagnosis hospital tests clinician depends hospital medical diagnosis 
interesting issues come refining goal check equity resource distribution fig 

goal decomposed subgoals check authorized resources resource limits 
turn check authorized resources decomposed provide authorization token patient relies hca check authorization token 
refinement reveals hca entirely depend hospital check equity resource distribution checking authorization token 
hca trusts delegates permission hospital subgoal 
late requirements analysis phase introduce medical information system mis model 
social relations actors revised actor representing system 
figures show trust model functional model trust management implementation respectively 
analysis reveals clinician directly depend hospital patient personal information hospital store information mis actors clinician need information performing duties directly retrieve mis 
main objectives mis provide access patient records maintain updated patient records 
goals mis depends hca personal information patient provide medical treatments check equity resource distribution personal information provide medical treatments fig 
late requirements trust model personal information update personal access patient patient information record record patient hospital provide medical treatments mis hospital personal information clinician mis request consulting provide consulting provide medical treatments check equity resource distribution fig 
late requirements functional model hca personal information patient provide medical treatments check equity resource distribution personal information provide medical treatments hospital clinician hca personal information dp clinician mis fig 
late requirements tm implementation clinician hospital 
particular mis depends clinician medical data hospital vital statistics data 
fig 
shows goal refinement access patient record 
goal decomposed authenticate requirements engineering trust management mis authenticate clinician access patient record get patient consent patient record hospital clinician fig 
goal diagram medical system get patient consent patient record 
analysis reveals clinician relies mis get patient consent 
clinician authenticated mis requires patient consent hospital disclosing record 
goals achieved mis delegates permission patient record clinician required record 
formalization built formal semantics framework datalog example worked access control trust management :10.1.1.11.3049
datalog language facts rules 
facts called extensional predicates 
contrast relations computed applying rules called intensional predicates 
words extensional predicates appear body clauses ground facts 
intensional predicates ones appear head body clauses 
intuitively extensional predicates correspond drawings requirements engineer intensional predicates derived system 
extensional intensional predicates model concepts relations eco model listed table 
batch predicates model functional model 
actor capabilities fulfill service provides 
intuition provides holds instance provides corresponding instance predicates requests aims hold actor objective getting extensional predicate intensional predicate 
relation depends holds actor depends actor fulfillment service predicates fulfills true service provided actor satisfies holds actor sure delivers service predicates redundant identifies actor really provides service start point chain identify actors confident service provided 
table predicates actors primitive properties provides actor service requests actor service owns actor service actors derived properties actor service aims actor service fulfills actor service satisfies actor service actors primitive relationships depends actor actor service trust perm actor actor service delegate perm actor actor service actors derived relationships trustchain perm actor actor service predicates trust model 
extensional predicate owns holds actor owns service predicate trust perm holds actor trusts actor service called trust depth 
suggested li delegation logics trust depth positive integer unbounded depth :10.1.1.11.3049
trust depth represents actor takes account judgment actor 
particular depth equal means actor trusts actor trust trustee judgment depth equal means actor trusts actor actors trustee trusts directly 
unbounded trust means actor trusts unconditionally 
practice depth sufficient 
unbounded qualified depth useful trust general practitioner doctors recommended doctors recommended 
unbounded trust relative particular goal providing care registered physicians 
allow blanket trust language 
delegation logic trust linked particular goal plan resource :10.1.1.11.3049
case rt languages rt family 
predicate trustchain essentially intensional version trust model trust chains actors 
trustchain literals take arguments trust computed applying rules see appendix 
trust management framework credentials delegation extensional predicate delegate perm holds actor delegates permission service actor called delegation depth 
trust relations delegations depth 
way view depth number re delegation steps allowed depth means re delegation allowed depth means step allowed depth means unbounded re delegation allowed 
delegation trust depth goal services unsatisfactory practical approximation 
actual paolo giorgini delegation trust relationships qualified 
example trust highly head clinical department direct 
example delegation authorization head clinical department absence senior aide duty 
basic idea service authority concerning access disposition service delegate authority actors 
depth positive integer unbounded depth 
intuition eventually entitled pass 
fairly standard contractual relations small depth 
easily accommodated simply decomposing goal subgoals providing care refined providing care head medical department providing care member department 
want delegate put designer computed system 
summary represents implicitly chains delegation permission starting owner service 
refer appendix list rules derive literals 
critical phase system development process analysis requirements order detect inconsistencies requirements 
order cope issue adopt verification process model system secure tropos primitives complete extensional description system verify correctness consistency system requirements 
step requirements analysis process modeling phase 
phase addresses identify actors objectives capabilities social relations transfer actors 
application secure tropos methodology complex case studies shown introduced primitives right ones model system requirements 
phase requires system designers represent system requirements expressed form actors properties relations extensional predicates 
requirements engineer drawn model extensional predicates may want verify correctness consistency functional trust security requirements 
unfortunately extensional description system perform accurate analysis 
getting right intuitive model need complete model rules call axioms 
essentially axioms define semantics framework explicit information needed requirements verification 
table provides description axioms supported secure tropos formalization appendix comprehensive description system intensional predicates derived system designers able verify model complies table axioms functional requirement model batch axioms determines actors responsibilities functional dependencies drawn system designer 
trust requirement model batch axioms builds trust network full set trust chains actors 
trust management implementation batch axioms identifies actors actors fulfill services actors confident objectives satisfied 
goal refinement batch axioms propagates actors objectives capabilities goal refinement 
table properties availability requirements batch properties verifies current model actor satisfy objectives functional dependency ends actors appropriate capabilities rights 
authorization requirements batch properties verifies actors delegate permission service rights trust trusted actors access fulfill service actors fulfill service entitled 
desirable properties 
essentially want check consistency model guarantee functional trust security requirements 
provided set properties representing compliance system authorization availability requirements 
properties simultaneously satisfied system inconsistent 
words properties verified system secure 
table describes properties supported secure tropos formalization appendix want properties different axioms true model designer may perfectly happy design say satisfies part properties defined 
may applications acceptable alternatives costly 
cases failure properties demands presence additional security mechanisms guarantee security protection 
instance actor delegate permission service untrusted actor designers introduce mechanisms monitor check delegatee misuse service 
formalizing case study secure tropos formal framework implemented dlv system order allow automatic verification requirements consistency 
fig requirements engineering trust management trust perm pat rec owns pat rec 
trust perm hca hospital rec rec 
trust perm hospital mis rec rec 
trust perm mis rec rec 
fig 
trust relations dlv system ures appendix respectively axioms properties formal framework form dlv statements 
remainder section show application requirements verification process assisted dlv system particular analysis aids system designers refining system requirements 
basic property system designers want verify clinicians assigned certain patient trusted access information patient 
property easily implemented dlv system constraint 
trustchain perm pat cli rec owns pat rec cli cli pat 
essentially constraint checks trust chain arbitrary trust depth patient clinician patient record clinician assigned hospital patient 
analyze trust model concerning patient personal information fig 

list trust relations actors formalization fig 


patient trusts completely hca 
hca trusts completely hospital 
hospital trusts completely medical system 
medical system trusts completely clinicians 
verify correctness consistency organizational model system designers may instantiate model introducing occurrences actors 
suppose system occurrences patient clinician 
instances inherit relations associated meta classes dlv system completes model computing trust chains patient clinician instance pair 
dlv system verify property reports inconsistency clinicians authorized access personal information patient 
ideally authorize clinicians assigned patient access data 
analysis reveals clinicians authorized patient information 
inconsistencies removed restricting trust relation medical system clinician follows trust perm mis cli rec cli pat owns pat rec 
refined result guarantees patient consent sought agent clinician colleagues able access patient information patient notified access 
complies requirements drawn section clinician request consultation colleagues hospital fig 
patient give permission access data 
applying verification process new model dlv system reveal inconsistencies 
system designers erroneously introduce occurrences behave correctly 
instance introduce occurrence clinician directly requires consultation colleague occurrence clinician delegate patient information permission hospital 
case dlv system spots inconsistencies properties verified 
proves correctness model able detect incorrect behaviors 
possible additional queries aimed verifying number security principles need know policies done liu security requirements model alloy 
privilege requires actors assigned permissions needed perform assigned duties functions 
example check clinician medical records patients property owns pat rec cli rec cli cli pat 
negative authorizations practical examples policies requirements health need negative authorizations non functional requirements negative goals goals fulfillment fulfillment goals functional requirements 
tropos accommodates notion positive negative contribution goals fulfillment goals 
need lift framework delegation trust 
notice having negative authorization requirements model mean negative certificates 
form negative certificates real life negative authorizations help designers shaping perimeter positive trust positive certificates avoid delegation certificates may give powers desired 
framework previous sections closed world assumption lack authorization considered negative authorization 
essentially actor tries access object certificate issued government pending criminal trials court decision public office paolo giorgini table negative authorization predicates primitive negative authorization actor actor service prohibition actor actor service derived negative authorization actor actor service actor actor service positive authorization system actor denied access 
approach major problem lack authorization actor prevent actor receiving authorization actor 
suppose actor access service 
decentralized authorization administration actor possessing right service delegate authorization service wrong actor 
actors may right service possible enforce certainty constraint actor access service 
propose explicit negative authorization approach handling type constraint 
explicit negative authorization expresses denial actor access service 
approach negative authorizations take precedence positive ones 
user positive negative authorization object user prevented accessing object 
essentially negative authorizations model handled blocking authorizations actor receives negative authorization positive authorization blocked 
distinguish predicates table extensional features put designer prohibition 
intuition holds actor delegates permission denial service actor prohibition holds actor forbids service actor actor says service assigned actor assume actor denial actor service delegation chain owner exists delegation chain owner done positive authorizations provide corresponding intensional predicates 
predicates derived system build denial chains prohibition chains 
fig 
appendix presents axioms build chains translation dlv specifications fig 
appendix 
framework supports automatic verification security requirements presence negative authorization 
fig 
appendix presents set properties 
example properties 
example basic property want check actor owns service prohibits actor intermediate actors statement corresponds fig 

represented dlv system constraint owns 
suppose patient requires new clinician distrusts old 
medical system update information give patient data old clinician 
applying constraint scenario dlv system reports inconsistency unauthorized actor access private data 
rt implementation section presents implementation approach rt framework 
see alternative systems 
choice especially motivated semantics logic translation rt framework founded 
rt entities individuals issue credentials requests 
rt represents roles attributes 
entity plays role entity entitled attribute representing role 
role form entity role name 
rt allows entity assert entity certain attribute credentials 
particular rt supports kinds credentials 
refers way define entities entitled play role attribute 
type credential simple assignment form credential means entity says entity attribute second takes form means authorizes entities authorized play role play role third type form called linked role 
credential means gives permission play role entities playing role playing role 
type form fk 
fk entity role linked role starting fk called intersection 
kind credential represents conjunction credentials 
rt framework logic semantic foundation datalog essentially defined function roles sets entities 
base translation semantics 
fig 
presents algorithm map framework rt 
lines deal predicate owns lines predicate delegate 
particular line defines owner service entitled provide service corresponds ax framework 
line represents owner right delegate permission service actors 
second part algorithm line states delegatee entitled provide service line delegation depth requirements engineering trust management owns delegate perm fig 
secure tropos rt delegatee entitled re delegate permission services example patient allows clinician read medical data order receive accurate medical care 
express policy framework delegate perm pat cli rec pat cli owns pat rec intuition holds instance clinician instance statement translated rt framework pat rec pat clinician fact owns pat rec occurs extensional description system find credentials rt framework pat rec pat pat rec pat rec statements correspond respectively openness privacy principle data owner access information stored database right owner delegate permission read information actors 
statement pat clinician cli stating cli clinician patient pat conclude pat rec cli cli entitled access record rec 
st tool framework features described supported st tool 
basically st tool case tool possible draw verify secure tropos models 
screen fig 
divided main areas menu secures tropos elements top graphical editor middle menu choosing different representations models bottom properties viewer editor left 
essentially st tool allows system designers draw secure tropos diagrams selecting top menu fig 
st tool desired secure tropos elements edit verify properties left menu 
tool allows automatic transformation secure tropos graphical models formal specifications 
particular tool supports transformation datalog specification 
resulting specification automatically displayed selecting corresponding panel menu 
specification automatic verification models 
st tool provides user friendly interface dlv system datalog solvers smodels 
tool permits system designers select security properties want verify complete models additional ad hoc datalog statements related specific domain 
designers confident model tool passes entire set specifications extensional description model axioms selected properties additional datalog statements external solvers 
selected solver completes analysis output parsed displayed user readable format tool 
main contribution bridge gap functional trust requirements system tm pmi architecture 
particular proposed requirements specification analysis framework clear separation trust delegation relationships 
distinction possible capture high level security requirements immediately bogged considerations dit unitn cs ust hk www tcs hut fi software smodels www cs utexas edu users tag html paolo giorgini cryptographic algorithms security implementation 
analogous supposed happen discussing functional requirements get immediately trapped discussions implementation details java patterns coding techniques 
framework supports automatic verification system requirements specified formal modeling language 
formal framework delegation logics rt :10.1.1.11.3049
differences frameworks 
main difference distinguish trust delegation trust seen mental state beliefs delegation effective transfer rights 
framework differs rt consider delegation trust depth rt support unbounded 
reason limiting delegation depth control trust transitive relationship 
dlv system check system consistency 
defined trust management implementation framework rt framework 
research progress 
remains done refine proposed framework 
usefulness tested real case studies 
currently working direction incorporating explicitly roles adding time features 
secure tropos supports static notion trust 
time features allow support dynamic aspect system dynamic notion trust 
investigating effects supporting hierarchies objects hierarchies actors 

abiteboul hull vianu foundations databases 
addison wesley 
agrawal srikant xu hippocratic databases 
proc 
vldb pp 

morgan kaufmann 
anderson security policy model clinical information systems 
proc 
symp 
sec 
privacy pp 

ieee press 
ant requirements taxonomy reducing web site privacy vulnerabilities 
requirements eng 

axelrod evolution cooperation 
basic books 
barnes managing paradox organizational trust 
harvard business review 
basin model driven security uml models access control infrastructures 

blaze feigenbaum ioannidis keromytis role trust management distributed systems security 
secure internet programming 
st building organizational trust 
proc 
th annual imp conf 

giorgini giunchiglia mylopoulos tropos agent oriented software development methodology 

castelfranchi principles trust mas cognitive anatomy social importance quantification 
proc 
icmas pp 

ieee press 
chu feigenbaum lamacchia resnick strauss referee trust management web applications 
computer networks isdn systems 
chung nixon dealing non functional requirements experimental studies process oriented approach 
proc 
icse pp 

acm press 
damianou policy framework management distributed systems 
ph thesis university london 
devanbu stubblebine software engineering security roadmap 
proc 
icse software eng 
track pp 

ebert requirements requirements understanding upstream impacts 
proc 
re pp 

ieee press 
ellison lampson rivest thomas simple public key certificates 
internet draft progress 
giorgini massacci mylopoulos requirement engineering meets security case study modelling secure electronic transactions visa mastercard 
proc 
er lncs pp 

springer 
giorgini massacci mylopoulos zannone filling gap requirements engineering public key trust management infrastructures 
proc 
lncs pp 

springer 
giorgini massacci mylopoulos zannone requirements engineering meets trust management model methodology reasoning 
proc 
lncs pp 

springer 
giorgini massacci mylopoulos zannone modeling security requirements ownership permission delegation 
proc 
re pp 

ieee press 
giorgini massacci mylopoulos zannone modelling social individual trust requirements engineering methodologies 
proc 
lncs pp 

springer 
jim sd trust management system certified evaluation 
proc 
symp 
sec 
privacy pp 

ieee press 
secure systems development uml 
springer 
leone pfeifer faber eiter gottlob scarcello dlv system knowledge representation reasoning 

li grosof feigenbaum delegation logic logic approach distributed authorization 
tis sec 
li mitchell winsborough design role trust management framework 
proc 
symp 
sec 
privacy pp 

ieee press 
liu yu mylopoulos security privacy requirements analysis social setting 
proc 
re pp 

ieee press 
massacci mylopoulos zannone hippocratic databases secure tropos computer aided re engineering approach 

appear 

massacci 
eds proceedings symposium requirements engineering information security 
massacci zannone security requirements engineering methodology practice requirements engineering trust management compliance italian data protection legislation 
comp 
standards interfaces 
massacci zannone detecting conflicts functional security requirements secure tropos john allied irish bank 
tech 
rep dit university trento 
mcdermott fox abuse case models security requirements analysis 
proc 
acsac pp 

ieee press 
mcknight meanings trust 
tech 
rep mis research center 
sandhu coyne feinstein role access control models 
ieee comp 

eliciting security requirements misuse cases 
requirements eng 

sommerville software engineering 
addison wesley 
legal requirements reuse critical success factor requirements quality personal data protection 
proc 
re pp 

ieee press 
embedding security practices contemporary information systems development approaches 
inform 
management comp 
sec 

van lamsweerde de janssens system goals intruder anti goals attack generation resolution security requirements engineering 
proc 
pp 

yu designing privacy competing requirements 
proc 

yu modelling strategic relationships process reengineering 
ph thesis university toronto formal framework order complete verify model datalog 
datalog program set rules form ln called head positive literal ln literals called body 
intuitively ln true model true model 
datalog negation treated negation failure 
words evidence atom true considered false 
refer discussion complexity soundness completeness issues concerning datalog 
axioms properties supported formal framework 
axioms axioms define semantics framework complete extensional description system 
particular formal framework supports phases requirements analysis process described including goal modeling 
firstly introduce predicates goal task refinement resource decomposition table 
predicate service holds service 
predicate holds predicate holds derived decomposition holds derived decomposition 
mentioned services refined classification goal plan resource 
actual language writing requirements notion sub plan relation part resources table goal refinement predicates goal refinement service service service service service service service service service service fig 
axioms functional requirement model ax aims requests ax aims depends aims trust requirement model ax trustchain perm trust perm ax trustchain perm trustchain perm trustchain perm min ax trustchain perm trustchain perm trust management implementation ax owns ax ax delegate perm min ax fulfills aims provides ax satisfies fulfills ax satisfies depends satisfies goal refinement ax ax fulfills si si fulfills si ax fulfills fulfills ax satisfies si si satisfies si ax satisfies satisfies fig 
axioms 
fig 
presents axioms 
meaning immediate 
fig 
presents axioms specific framework 
ax say actor objective fulfill service objective objective actor depends functionally delegated fulfillment objective 
ax complete trust network actors 
ax propagates trust relations depth 
essentially trusts certain depth trusts smaller depth 
ax states actors full authority services ax propagates permission depth 
essentially entitled certain depth entitled smaller depth 
ax says delegatee entitled provide service 
ax states actors permission service belongs objectives capability provide fulfill service 
ax states actors fulfill service confident service satisfied ax propagates confidence dependency relations 
ax treat cases goal refinements various predicates differently re evaluated refinements 
order accommodate negative authorizations formal framework axioms added modified 
fig 
shows list axioms 
ax modified support negative authorizations take precedence policy 
ax build denial chains ax build prohibition chains 
paolo giorgini trust management implementation ax delegate perm min ax ax min ax prohibition ax prohibition fig 
negative authorization axioms availability requirements requests 
satisfies authorization requirements delegate perm 
delegate perm 
trustchain perm owns 
trustchain perm fulfills owns 
trustchain perm fulfills 
authorization requirements negative authorizations owns 
owns 
fulfills fig 
desirable properties design properties intensional description system derived designers may want verify system complies trust security requirements 
provide set properties representing high level security requirements system designers include model 
properties different axioms desirable design features may true particular design hand 
fig 

mean time holds desirable holds 
datalog represented constraint fig 
presents properties verify correctness consistency security requirements 
implements availability requirements 
checks actor confident objectives satisfied 
properties focus verification authorization requirements 
verifies agent delegates service entitled 
essentially actors rights delegate service 
verifies delegator trusts delegatee actors delegate agents trust 
rights privileges trusted actors responsible actors may delegate right 
forms delegation chain 
actor chain fails meet requirements associated delegated right chain broken actors failure permitted perform action associated right 
states actors authorized service owner authority concerning access disposition service 
states actor fulfills service owned actor trusted legitimate owner 
means actors authorized service owner fulfill service 
checks actors provide service entitled 
batch presents properties verifying security requirements presence negative authorizations 
verify owner service forbids actor fulfill service 
aims requests 
aims depends aims 
trustchain perm trust perm 
trustchain perm succ trustchain perm 
trustchain perm succ trustchain perm trustchain perm 
trustchain perm trustchain perm trustchain perm 
owns 
succ 
succ delegate perm 
delegate perm 
fulfills aims provides 
satisfies fulfills 
satisfies depends satisfies 

fulfills decomp fulfills fulfills 
fulfills fulfills 
satisfies decomp satisfies satisfies 
satisfies satisfies 
fig 
axioms dlv system requests satisfies 
delegate perm 
delegate perm trustchain perm 
owns trustchain perm fulfill owns trustchain perm fulfills 
fig 
properties dlv system succ delegate perm pat cli rec 
delegate perm pat cli rec 

succ 

prohibition 
prohibition 
fig 
axioms negative authorizations dlv system mapping formal framework dlv system figures respectively axioms fig 
properties fig 
corresponding dlv statements 
notice axioms ax ax fig 
directly implemented dlv system requires priori knowledge number service decomposed 
introduce predicate number service decomposed 
instance service decomposed decomp 
map formal framework dlv system need copy axioms ax ax predicate 
lack space fig 
show case equal 
fig 
shows implementation axioms dlv system negative authorization considered framework 
