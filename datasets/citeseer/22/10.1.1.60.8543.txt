precise alias analysis static detection web application vulnerabilities number importance web applications increased rapidly years 
time quantity impact security vulnerabilities applications grown 
manual code reviews time consuming errorprone costly need automated solutions evident 
address problem vulnerable web applications means static source code analysis 
novel precise alias analysis targeted unique semantics commonly scripting languages 
enhance quality quantity generated vulnerability reports employing novel iterative phase algorithm fast precise resolution file inclusions 
integrated concepts pixy static analysis tool aimed detecting cross site scripting vulnerabilities php scripts 
demonstrate effectiveness techniques analyzed web applications discovered vulnerabilities 
high analysis speed low number generated false positives show techniques conducting effective security audits 
categories subject descriptors logics meanings programs semantics programming languages program analysis software engineering software program verification validation general terms verification security languages keywords alias analysis data flow analysis static analysis program analysis web application security scripting languages security cross site scripting php 
web applications important communication channels various kinds service providers clients internet 
increased importance web applications negative impact security flaws applications grown 
vulnerabilities may lead compromise sensitive information reported continuously permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
plas june ottawa ontario canada 
copyright acm 

jovanovic christopher secure systems lab engin technical university vienna chris ek tuwien ac costs resulting damages increasing 
main reasons phenomenon time financial constraints limited programming skills lack security awareness part developers 
existing approaches mitigating threats web applications divided client side server side solutions 
client side tool known authors application level firewall offering protection case suspected cross site scripting xss attacks attempt steal user credentials 
server side solutions advantage able discover larger range vulnerabilities benefit security flaw fixed service provider instantly propagated clients 
server side techniques classified dynamic static approaches 
dynamic tools perl taint mode try detect attacks executing audited program static analyzers scan entire web application source code vulnerabilities deployed 
previous pixy open source tool statically detecting taint style vulnerabilities particular xss vulnerabilities php code 
pixy features high precision data flow analysis engine flow sensitive interprocedural context sensitive performs alias analysis literal analysis taint analysis 
characteristics enabled generate comprehensive precise results provided approaches 
improve key points novel precise alias analysis targeted unique semantics commonly scripting languages 
preceding alias analysis taint analysis generate false positives false negatives conjunction aliases 
contrast previous approach new alias analysis generates precise results conceptually difficult aliasing problems 
decision develop new alias analysis belief straightforward adaptability existing solutions problem domain questionable targeted non scripting languages java 
belief backed observation analyze aliases context scripting languages 
enhance quality quantity generated vulnerability reports tool usability integrating novel iterative phase algorithm fast precise resolution file inclusions 
include statements contain static file names resolved easily 
php include statements composed arbitrary expressions requiring sophisticated resolution techniques 
empirical results demonstrating tool detect xss vulnerabilities real world programs 
echo wrote get content 
simple php script vulnerable xss 
analysis process fast completely automatic produces low false positive rate 
rest structured follows 
section introduces general class vulnerabilities pixy aims detect 
section overview analysis infrastructure 
section provides details alias analysis section explains workings include resolution algorithm 
summary empirical results section 
discussion related section section briefly concludes 

taint style vulnerabilities xss attacks analysis infrastructure enhancing targeted detection taint style vulnerabilities 
tainted data denotes data originates potentially malicious users cause security problems vulnerable points program called sensitive sinks 
tainted data may enter program specific places spread program assignments similar constructs 
set suitable operations tainted data untainted sanitized removing harmful properties 
important types vulnerabilities cross site scripting sql injection script injection seen instances general class taint style vulnerabilities 
overview vulnerabilities livshits lam 
main purposes xss attacks steal credentials cookie authenticated user 
web request contains authentication cookie treated server request corresponding user long explicitly log 
manages steal cookie able impersonate owner current session 
browser automatically sends cookie web site created javascript cookie sent arbitrary locations 
fortunately access rights javascript programs restricted sandbox model 
javascript program access cookies belong site code originated 
xss attacks circumvent sandbox model injecting malicious javascript output vulnerable applications 
case malicious code appears originate trusted site complete access sensitive data related site 
example consider simple php script user posting message board displayed submitting 
posting content retrieved get parameter 
supplied specifically crafted url results user cookie sent com vulnerable com post php 
content script document location com steal php document cookie script attacker trick user clicking link example sending victim email 
general xss vulnerability web application malicious content javascript received application properly stripped output sent back user 
speaking terms sketched class taint style vulnerabilities xss roughly described properties entry points program get post cookie arrays 
sanitization routines type casts destroy potentially malicious characters transform harmless ones casts integer 
sensitive sinks routines display data screen echo print printf 

analysis overview built alias analysis pixy tool performs data flow analysis php code detect xss vulnerabilities 
data flow analysis understood topic computer science compiler optimizations decades 
general sense purpose data flow analysis statically compute certain information single program point coarser units functions 
instance classical constant analysis computes program point literal values variables may hold 
data flow analysis operates control flow graph cfg program 
parse tree constructed php input file java lexical analyzer java parser cup 
parse tree transformed linearized form resembling address code basic blocks stored separate control flow graph encountered function 
file inclusions resolved iterative stage preprocessing step described section 
preprocessing step employs literal analysis computing names files referenced include statements 
note file inclusion transitive process 
include statements files previously included resolved 
alias analysis discussed section computes alias relationships variable program point 
information utilized taint analysis determining taint values variables reporting tainted variables enter sensitive sinks 

alias analysis static detection vulnerabilities precise results achieved considering possible alias relationships variables 
variables aliases certain program point values stored memory location 
variables aliases aliases regardless actual path taken program run time 
variables aliases program paths called may aliases 
give short aliases php demonstrate alias information required precise results highlight differences php aliases pointers programming languages 
problem definition specify workings alias analysis responsible computing desired information 
aliases php php aliases variables introduced operator 
operator applied directly assignments combination formal actual function parameters perform call 
shows simple example creating alias relationship variables line 
demonstrates taint analysis requires access alias information 
information taint analysis able decide assignment line affect aliased variable result fact eventually holds tainted value leads xss vulnerability line 
analogously lack aliasing information cause false positives 
note name literal analysis classical term constant analysis order prevent confusion php constants 
nice untainted untainted evil tainted echo xss vulnerability 
simple aliasing php 
echo function globals 
contrast pointers 
past extensive devoted area alias analysis mention 
overview existing solutions open issues hind 
important aspect note semantics fundamentally different pointers languages php manual devotes chapter explaining highlighting differences pointers 
essence pointers special variables contain memory addresses php symbol table aliases directly address memory locations 
php provide separate data type 
variables nature containing scalar values 
difference occurs combination parameter passing illustrated 
entering function line formal parameter aliased actual parameter 
symbol table aliases assignment line re leaving unmodified 
passing modifying pointer way pointer corresponding point returning function call line 
best knowledge issues superficially addressed previous works far 
php mutable opposed 
mentioned xie aiken fact php scripting language leads problems static analysis implicit dynamic type information lack explicit variable declarations 
liu briefly mention applied existing pointer analysis algorithms python programs unfortunately providing details 
intraprocedural alias analysis shows program snippet annotated alias information valid execution corresponding code line 
ones represent alias may alias information separately 
program line exist aliases 
assignment line variables aliases 
encode fact adding new alias group alias information 
alias groups unordered disjoint sets variables aliases 
line second group created redirecting new group extended variable result statement line 
merge information entering different paths construct line 
intuitively clear aliases created inside construct converted may aliases 
skip 
skip 
intraprocedural analysis information 
sets variables encode may aliases means unordered variable pairs 
alias group split may alias pairs 
reason asymmetric encoding alias may alias information simplifies algorithms necessary interprocedural analysis appendix 
appendix shows combination operator algorithm merging alias information meeting point different program paths construction strongly connected components 
note combination operator simply compute aliases intersection may alias union steps performed parts algorithm 
instance straightforward procedure combine information lines result empty may alias information deviates correct result shown line 
separate tracking alias may alias information may alias information motivated resulting precision gain 
consider case variables aliases tainted 
encountering operation analysis able correctly 
analysis possesses may alias information conservative decision leave tainted 
interprocedural php concepts going details interprocedural alias analysis give brief overview php concepts necessary understanding sections 
terms scoping types variables php local variables appear local scope functions global variables located global scope outside function 
note formal function parameters belong class local variables 
inside functions global variables accessed ways 
method global keyword 
statement global effect local variable aliased global variable way access global variables directly special globals array visible point program 
array global variables re referenced inside functions global keyword offer possibility 
interprocedural alias analysis main problem arising interprocedural analysis handling recursive function calls 
instance called function contains copies local variables variable incarnations 
cases possible decide statically deep recursive call chains depth may depend dynamic aspects values originating databases user input 
static analysis faced infinite number variable incarnations 
mean underlying lattice satisfy ascending chain condition infinite height analysis terminate cases 
solution problem inside functions analysis tracks information global variables local variable incarnations 
global scope global variables considered 
vital rule leads finite number variables analysis forms basis rest 
encountering function call analysis questions arise 
alias information propagated callee 

alias information valid control flow returns caller 
give overview answers questions 
detailed treatment 
callee point view analysis provide information aliases global variables 
aliases callee formal parameters 
aliases global variables callee formal parameters 
caller point view information obtained function returned aliases global variables 
aliases global variables caller local variables 
note aliases caller local variables modified callee 
similarly aliases callee local variables function entry 
sections discuss issues detail ordered increasing complexity necessary concepts 
detailed algorithms appendix aliases global variables alias relationships global variables important caller callee 
hand callee know global variables aliased time function call performed 
hand caller informed global aliasing information modified callee 
aspects treated straightforward way similar method applied sharir pnueli classic treatment interprocedural analysis 
example 
extend notation prefixing variable names name containing function 
global variables considered contained special main function abbreviated 
calling function line aliasing 
empty alias information propagated function 
function entry call line simply apply intraprocedural techniques 
mentioned function tracks information global variables local variables 
information local variables removed prior propagation 
information global variables propagated inside function global aliases modified statement line 
line modified information returned function restores alias information local variables 
may aliases global variables occurred example treated analogously 
aliases callee formal parameters aliases formal parameters appear exists alias relationship corresponding actual call parameters 
instance function call parameters bp bp 
corresponding actual parameters aliases time call function 
result formal parameters bp bp aliases function entry 
skip skip function globals globals skip skip function globals globals skip 
aliases global variables 
function function bp bp skip bp bp 
aliases formal parameters 
treatment may aliases formal parameters additional considerations necessary 
recalling pairs unordered identify types pairs exist time function call local local global global local global 
distinguish cases depending elements may alias pair actual call parameter 
course element may alias pair parameter induce aliases formal parameters 
table provides overview possible cases may alias pairs resulting callee 
table shows may aliases formal parameters function signature bp bp result different calls function column different may aliases time function call second column labeled entering may aliases 
example case second row table shown 
may alias pair consists local variables reaches call function line 
local variables actual call parameters 
initially results may alias pairs bp bp bp bp 
pairs propagated callee contain local variables caller 
appendix shows exact algorithm applied 
aliases global variables callee formal parameters detecting aliases global variables callee formal parameters consider cases actual call parameter parameter alias global variable 
function call entering may aliases resulting relevant may aliases resulting irrelevant may aliases local local local bp local local local local local bp bp bp local bp local global global global bp global global global global global bp global bp global bp bp local local global bp global global local global bp local local global local global bp bp bp global bp local table 
may aliases formal parameters resulting calls function signature bp bp function 
skip function bp bp skip bp bp 
may aliases formal parameters 
function globals function bp bp skip 
may aliases formal parameters global variables 
global variable trivial alias global variable 
may alias global variable 
fortunately cases quite simple handled means applied previous section 
shows example case 
call function line variable alias global variable 
actual call parameter means formal parameter bp alias function entry 
aliases global variables caller local variables mentioned previously aliases local variables caller changed callee 
aliases caller local variables global variables modified callee ways 
local variable aliased global variable time function call global variables redirected global variable local variable 
global variable redirected away local variable 

local variable aliased formal parameter call global variables redirected formal parameter local variable 
note cases implies number subcases depending may aliasing performed 
basic rule interprocedural analyses forbids propagation aliasing information local variables functions 
mechanism necessary able collect information changes aliasing relations global variables local variables 
purpose notion shadow variables 
shadow variables analysis uses types special variables solving problem mentioned 
type called formal shadows shadows introduced function 
shadow formal parameter function shadow aliased corresponding formal parameter function 
instance consider function signature ap ap 
analysis introduces shadows ap fs ap fs function aliases formal parameters 
ap fs memory location ap ap fs memory location ap 
analogously second type shadows global shadows shadows introduced function 
global variable shadow function shadow aliased corresponding global variable function 
instance global variables program function assigned shadow variable gs shadow variable gs 
definitions lead properties shadow variables shadow variables local variables 
shadow variables accessed programmer fresh variables introduced analysis 
implies re referenced initialization performed analysis 
intuitively shadows function purpose representing local variables caller aliased formal parameter function time call 
analogously represent local variables caller aliased global variable time function invocation 
provides means determine aliases caller local variables global variables modified function calls 
skip function gs gs globals skip gs gs skip gs gs function gs gs globals globals skip gs 
aliases local variables global variables 
illustrate value shadow variables consider shows code snippet covered case 
time call function line local variable alias global variable 
inside called function line global variable re referenced global variable 
shadows analysis able determine longer aliased control flow returns function remember propagating local variables callee allowed 
shadow analysis able extract vital fact information flowing back function shadow aliased 
recalling purpose shadows know shadow indirectly representing alias time call 
deduce aliased longer 
note fact global variable alias global variable returned caller 
detailed algorithm covering cases appendix due space limitations abstain discussion cases 
interested reader referred web site comprehensive collection examples test algorithms practice 
examples clearly demonstrate ability analysis solve difficult aliasing problems 
limitations currently employed analyses provide support objectoriented features php 
means object member variables appear elements alias relationships 
statements contain arrays array elements considered 
restriction appear impart results experiments 
note limitation applies alias analysis literal taint analysis invest significant efforts tracking attributes arrays elements 
limitations reason analysis unsound may generate false negatives 
instance taint value propagated alias relationships array elements detected 

resolving includes virtually web applications written scripting languages php divide code source files 
files consolidated run time means file inclusion 
major difference compared file inclusions languages names included files need represented static literals 
names composed arbitrary expressions 
necessary compute information value expressions able take account included files static analysis 
straightforwardly applying simple preprocessor programs suffice leave significant number includes unresolved 
basically task resolving includes performed literal analysis 
straightforward approach include successfully resolved files fly literal analysis 
results problem having modify lattice running data flow analysis conceptually demanding difficult implement 
issue performance desirable immediately resolve literal includes need perform fully fledged literal analysis 
solution apply iterative stage preprocessing step fast precise easy implement 
stage transitively resolve include files names directly literals strings 
second stage include statements perform literal analysis code resulted stage 
second stage may lead inclusion additional files may contain simple literal includes 
continue iteration stage handle literal includes 
process eventually terminates resolvable includes left 
php permits definition recursive include relationships rarely practice 
simple approximative solution problem include file 
unfortunately highly imprecise real world applications include files multiple times recursive includes 
practice analogous calling function multiple times calling recursively 
include resolution process build include graph determine encountered include recursive 
case real recursive includes approximate statements treating ops 

empirical results concepts enhance pixy prototype system introduced previous performed series experiments demonstrate ability detect previously unknown cross site scripting vulnerabilities 
pixy run current versions open source php programs 
contrast java programs clearly defined entry point execution starts main function web applications written php usually different entry points 
entry points correspond files visible browser location bar surfing web application 
provided entry points input files pixy automatically resolved file inclusions 
table shows summary results including number entry points total lines code analyzed 
determine line count factor files analyzed multiple times different contexts 
example entry file php includes file php twice lines php counted twice 
entry files transitively included files analyzed minute ghz pentium processor gb ram prototype presents opportunities perfor mance tuning 
analysis run took longer minutes 
total discovered exploitable xss vulnerabilities latest versions analyzed programs 
cases informed authors issues posted security advisories bugtraq mailing list 
false positive rate relatively low alleviated fact false positives similar recognition easier see section 
pixy reported programming bugs relevant security function calls arguments 
bugs influence program security counted vulnerabilities false positives 
results clearly show analysis capable efficiently finding previously unknown vulnerabilities real world applications 
case study detailed descriptions discovered vulnerabilities corresponding bugtraq postings 
section take closer look interesting vulnerability discovered 
vulnerability complex especially inspected original form 
relevant code spans different source files functions includes value flows parameters arrays variables different scopes 
finding vulnerability assistance automated analysis tool quite 
shows code simplified condensed form 
sensitive sink line receives tainted value input held function second formal parameter message 
function called line actual parameter 
inside branches preceding construct set empty string line untainted built variable line php string concatenation operator 
value global variable set call function multi tb line 
closer look function reveals tainted parameter post urls function multi tb tainted 
post urls split array line 
array traversed loop starting line 
inside loop assembled elements array tb urls 
effect post urls controlled directly attacker including appropriate parameter request means described data flow chain eventually leads control critical message variable line 
mentioned section global keyword effect local variable aliased corresponding global variable 
help alias analysis able detect value flow post urls leaving described vulnerability undetected 
false positives majority reported false positives due impossible program paths 
shows simplified example case taken dcp portal 
analysis reported sensitive sink line receives tainted input value returned call function 
return value function may equal global variable site name line 
global variable initialized untainted value line condition line evaluates true 
closer inspection revealed fact condition evaluates true practice 
mean underlying database seriously corrupted hardly remain unnoticed administrators 
particular case responsible false positives 
soon determined reason reports easy identify remaining ones false positives 

multi tb post urls message function message message echo message function multi tb post urls 
global tb urls split post urls foreach tb urls tb url tb url 
vulnerability simplified 
row mysql fetch array result site name row site name echo 
function id opt global site name 

return site name 
false positive due impossible path simplified 
described sharir pnueli types context sensitive interprocedural analyses call string analysis functional analysis 
functional analysis usually provides precise results call string analysis 
general analyses faster se performance largely depends call graph analyzed program 
entry point turned functional analysis created large number contexts interprocedural analysis 
address problem decided perform taint analysis instance call string analysis call strings experiments 
resulting twelve false positives eliminated simply switching back functional analysis 
believe imposed performance penalty performing functional analysis effectively reduced refining internal mechanisms analysis workset order merging equivalent contexts 
false positives caused variable array indices 
instance predefined php variables server php self server host untainted controlled attacker 
value variable entries server server conservatively assumed tainted exist entries controlled attacker 
literal analysis resolve variable array indices eliminate type false positive 
program entry files loc time sec file vulnerabilities false positives bugtraq id dcp portal beta dev totals include lib post fname php include post path php 
harmless dangerous unresolvable inclusion 
remaining false positives resulted custom sanitization regular expressions 
prototype regard sanitization reliable difficult cover possible attack vectors easy omit certain dangerous characters 
manual inspection reveal ways circumventing protection applied cases 
file inclusion effectiveness table summarizes observations concerning applied file inclusion algorithm 
second column lists average number iterations necessary processing entry files program transitive inclusions 
entry file required iterations entry processed seconds 
third fourth columns show average number literal non literal includes resolved file 
demonstrates non literal includes occur frequently literal includes result need intelligent resolution algorithm able handle non literal cases 
significant number inclusions missed leading false positives false negatives 
non literal includes resolved assemble names files included dynamic input user input cookie fields post values file contents 
close manual inspection cases advisable represent potential security leaks 
attacker control names files included possible inject arbitrary scripts arbitrary php code program 
cases encountered harmless similar structure inclusion shown 
example impossible include remote file located attacker server name included file starts lib protocol specifier 
permit path traversal attacks path strings containing elements 
instance attacker trick statement including server passwd file returned verbatim php 
threat mitigated provided suffix php resulting restriction files extension included 
case include statement second shown encountered 
attacker cause inclusion arbitrary remote script name php 
placing file web server attacker control providing file url post parameter path code contained inside file written attacker executed privileges running php server 

related currently exist approaches deal static detection web application vulnerabilities 
huang table 
summary vulnerability reports 
address issue context php applications 
lattice analysis algorithm derived type systems typestate compared technique bounded model checking follow 
alias analysis include file resolution performed 
technical report xie aiken addresses problem statically detecting sql injection vulnerabilities php scripts 
applying custom tier architecture fully fledged data flow analysis techniques operate ambitious conceptual level 
instance recursive function calls simply ignored alias analysis performed 
authors briefly mention approach resolve include statements yield results practice 
unfortunately comparing approach difficult due lack detailed description 
instance problem recursive non literal includes addressed explicitly 
livshits lam applied analysis supported binary decision diagrams developed whaley lam finding security vulnerabilities java applications 
differs underlying analysis flow insensitive part target language typed 
considerably eases challenges faced static analysis 
minamide technique approximating string output php programs context free grammar 
primarily targeted validation html output author claims detection xss vulnerabilities 
taint information additional checks appears difficult distinguish malicious benign output 
discovered xss flaw reported observed false positive rate mentioned 
basic features php supported excluding 
engler published various static analysis approaches finding vulnerabilities programming bugs programs 
authors describe system translates simple rules automata compiler extensions check program adheres rules 
extension authors techniques automatic extraction rules program 
tainting analysis identify vulnerabilities operating system code user supplied integer pointer values proper checking 
alternative approach aiming detection taint style vulnerabilities introduces special type qualifiers analyzed programming language 
prominent tools applies concept things shankar detect format string vulnerabilities code 
remains open question technique applied untyped scripting languages 

web applications popular wide spread interaction medium daily lives 
time vulnerabilities endanger personal data users discovered regularly 
manual security audits targeted vulnerabilities costly error prone 
previous proposed precise static analysis technique able detect program iterations resolved literal includes resolved non literal includes unresolved includes dcp portal beta dev broad class taint style vulnerabilities automatically 
analysis data flow analysis understood established technique computer science 
tackled issues specific scripting languages php languages harder analyze statically 
enhanced previous integrating novel alias analysis shadow variables 
contrast alias analysis applied previously new approach able generate precise solutions difficult aliasing problems 
iterative stage preprocessing step automatic resolution file inclusions 
tested concepts running improved analysis tool web applications 
empirical results show able efficiently automatically detect vulnerabilities low false positive rate 
urgent need automated vulnerability detection web application development especially web applications growing large complex systems 
believe techniques improve state art solutions problem offering benefits users providers web applications 
alfred aho ravi sethi jeffrey ullman 
compilers principles techniques tools 
addison wesley longman publishing boston ma usa 
lars ole andersen 
program analysis specialization programming language 
phd thesis university copenhagen 
ken dawson engler 
programmer written compiler extensions catch security holes 
ieee symposium security privacy 
bugtraq 
bugtraq mailing list archive 
www 
securityfocus com archive 
cert 
cert advisory ca malicious html tags embedded client web requests 
www cert org advisories ca html 
david chase mark wegman ken zadeck 
analysis pointers structures 
pldi proceedings acm sigplan conference programming language design implementation 
cup 
cup lalr parser generator java 
www cs 
tum edu projects cup 
dawson engler benjamin chelf andy chou seth hallem 
checking system rules system specific programmer written compiler extensions 
osdi 
dawson engler david yu chen seth hallem andy chou benjamin chelf 
bugs deviant behavior general approach inferring errors systems code 
sosp proceedings th acm symposium operating systems principles 
jeffrey foster manuel alexander aiken 
theory type qualifiers 
pldi proceedings acm sigplan conference programming language design implementation 
michael hind 
pointer analysis haven solved problem 
paste proceedings acm sigplan sigsoft table 
summary file inclusions average numbers 
workshop program analysis software tools engineering 
yao wen huang shih kun huang po lin chung hung tsai 
web application security assessment fault injection behavior monitoring 
www proceedings th international conference world wide web 
yao wen huang fang yu christian hang chung hung tsai lee sy yen kuo 
verifying web applications bounded model checking 
dsn 
yao wen huang fang yu christian hang chung hung tsai der tsai lee sy yen kuo 
securing web application code static analysis runtime protection 
www proceedings th international conference world wide web 

fast scanner generator java 
de 
jovanovic christopher engin 
pixy static analysis tool detecting web application vulnerabilities short 
ieee symposium security privacy 
jovanovic christopher engin 
pixy static analysis tool detecting web application vulnerabilities technical report 
www tuwien ac projects pixy 
engin christopher giovanni vigna jovanovic 
client side solution mitigating cross site scripting attacks 
st acm symposium applied computing sac 
secure systems lab 
secure systems lab technical university vienna 
www tuwien ac 
william landi barbara ryder 
safe approximate algorithm interprocedural aliasing 
pldi proceedings acm sigplan conference programming language design implementation 
liu scott stoller michael tom ellen liu 
object abstraction 
oopsla proceedings th annual acm sigplan conference object oriented programming systems languages applications 
benjamin livshits monica lam 
finding security errors java programs static analysis 
proceedings th usenix security symposium august 
minamide 
static approximation dynamically generated web pages 
www proceedings th international conference world wide web 
steven muchnick 
advanced compiler design implementation 
morgan kaufmann 
nguyen greene shirley evans 
automatically hardening web applications precise tainting 
ifip security 
flemming nielson hanne nielson chris hankin 
principles program analysis 
springer verlag new york nj usa 
php 
php hypertext preprocessor 
www php net 
chris vanden berghe 
defending injection attacks context sensitive string evaluation 
advances intrusion detection raid 
umesh shankar talwar jeffrey foster david wagner 
detecting format string vulnerabilities type qualifiers 
proceedings th usenix security symposium 
sharir pnueli 
approaches interprocedural data flow analysis chapter 
prentice hall 
bjarne steensgaard 
points analysis linear time 
popl proceedings rd acm sigplan sigact symposium principles programming languages 
larry wall tom christiansen randal schwartz stephan potter 
programming perl nd ed 
reilly associates sebastopol ca usa 
john whaley monica lam 
cloning context sensitive pointer alias analysis binary decision diagrams 
pldi proceedings acm sigplan conference programming language design implementation 
robert wilson monica lam 
efficient context sensitive pointer analysis programs 
pldi proceedings acm sigplan conference programming language design implementation 
xie alex aiken 
static detection security vulnerabilities scripting languages 
glide stanford edu research sec ps 
algorithms function combine input input output output may aliases union may alias pairs input input alias group input auxiliary graph create strongly connected component consisting group members alias group input auxiliary graph create strongly connected component consisting group members edge drawn exists promote double edge normal single edge graph add may alias pair containing corresponding nodes output information strongly connected component contains double edges add alias group containing corresponding nodes output information return output information 
algorithm combination operator 
call pair create placeholder variable formal parameter add actual parameter alias group may alias pair contains actual parameter copy pair replace actual parameter new pair formal parameter placeholder add new pair set may aliases remove local variables belong caller remove alias groups may alias pairs element replace placeholders corresponding formal parameters 
algorithm adjusting alias information propagated callee 
information entering call node contains aliasing information locals caller extracted contains aliasing information globals taken information callee initialized steps compute add aliases global variables local variables results information local exit call node shadows aliases alias group contains local variable global variable mark group visited shadow global alias called function merge alias group containing alias group containing considering implicit element groups global may alias shadow called function add may alias pair may alias pairs denotes local alias shadows may aliases may alias pair containing local global global alias may global shadow callee add may alias pair local alias shadows aliases may aliases local actual call parameter determine corresponding formal shadow fs find alias group considering implicit element groups group marked visited mark group visited shadow fs global alias callee merge alias group containing alias group containing considering implicit element groups global may alias shadow callee add may alias pair may alias pairs denotes local alias local may alias lma global alias may shadow called function add may alias pair lma alias 
algorithm computing alias information function call 
