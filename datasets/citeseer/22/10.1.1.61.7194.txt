efficient parallel computation pagerank christian tter paul alexandru wolfgang nejdl research center university hanover deutscher expo plaza hanover germany nejdl de 
pagerank inherently massively parallelizable distributable result web strict host link locality 
show gau seidel iterative method applied parallel ranking scenario order improve convergence 
introducing dimensional web model adapting pagerank environment efficient methods compute exact rank vector large scale web graphs minutes iteration steps intrinsic support incremental web crawling need page sorting reordering sharing global rank information 
search engines enabling technology finding information internet 
provide regularly updated snapshots web maintain searchable index retrieved web pages 
size currently reaching billions pages publicly accessible hosts amounts rapidly increasing 
searching huge datasets usually receive quite pages response query relevant 
gave birth lot ordering ranking research popular algorithm google pagerank recursively determines importance web page importance pages pointing 
improvements centralized computation pagerank researched detail approaches distributing computers caught researchers attention :10.1.1.18.5084
introduce new approach computing exact pagerank parallel fashion 
obtain exact results faster existing algorithms improving orders magnitude algorithms generating exact page rank scores 
achieve modeling web graph dimensional fashion url hostname primary criterion separating reasonably disjunct partitions distributed incremental web crawling pagerank computation 
remainder organized follows 
reviewing pagerank algorithm common web graph representation techniques existing parallel versions pagerank section introduce dimensional lalmas 
eds ecir lncs pp 

springer verlag berlin heidelberg chr 
tter 
nejdl web graph model section 
refined pagerank algorithm section show convergence improvements gau seidel method solving linear systems efficiently applied parallelized pagerank scenario 
experimental results discussed section 
section concludes discussion 
related pagerank main concept pagerank paradigm propagation importance web page going hyper links 
page set considered pages associated rank score forming rank vector set links contained iff page points page points outgoing links 
iteration step repeated scores stabilize certain defined degree formula consists portions jump component left side summation walk component right side weighted usually 
uniformly distributed fraction importance page offer linked pages iteration intuitively random surfer follows outgoing link current page walk probability get bored select random page jump probability 
main utility guarantee convergence avoid rank sinks 
random walk fact interpretation markov chain associated web graph having state vector see equation transition probability page 
write equation matrix terms follows equation represents linear system representation matrix computation jacobi iterative method 
enables consideration stationary iterative solvers gau seidel method converges times faster jacobi said efficiently parallelizable 
parallel gauss seidel implementations certain scenarios described block diagonally bordered matrices admit approach designed static matrix modification specific preprocessing sorting step required take longer real computation 
web highly dynamic links change week disregarding preparation step veil real processing efficient parallel computation pagerank time 
steady reorganization coordinates huge link matrix simply imposes unjustified management overhead 
web graph representation computing pagerank vector large web graph materialized inmemory matrix definitely feasible 
common solution store links format destination page id degree source page ids resembles 
pages link link matrix sparse results lower memory requirements link structure magnitude bytes average outdegree const 
course compression techniques intelligent approaches disk swapping improve space requirements relying particular data order presence caches 
permanent growth web techniques soon hit memory limits single computer unacceptably slow computation process 
see thorough discussion optimizations 
propose new strategy keeping web graph rank information completely ram networked machines separation global host local information page 
parallel pagerank algorithms existing approaches pagerank parallelization divided classes exact computations approximations 
parallel computations 
scenario web graph initially partitioned blocks grouped randomly lexicographically sorted page balanced number links 
standard iterative methods jacobi equation krylov subspace performed pieces parallel 
partitions periodically exchange information depending strategy expose suboptimal convergence speed jacobi method result heavy inter partition computing rank page requires access associated source page ranks partitions 
pagerank approximations 
main idea approaches sufficient get rank vector comparable equal pagerank 
ranking pages higher level formations inter connection linkage hosts domains server network addresses directories orders magnitudes faster 
inner structure formations page level computed independently parallel manner line model 
try take best approaches exactness straight pagerank computation speed approximation centralized re ranking 
chr 
tter 
nejdl dimensional web host link locality bharat shown different types web links dominating web structure intra site links inter site ones 
site domain yahoo com host yahoo com directory web server www com 
general define site interlinked collection pages identified common name domain host directory control authority authority may course sites 
due web sites hypertext navigable nature site contains internal external links 
fact links intra host intra domain 
assumed block structure visualized kamvar small parts domain level graph link matrix 
plots point black link page pi pj clear 
performed plot setting graph scale 
outcome interesting clear top level domain dominant structure see 
example com represents complete structure high connectivity net org jp domain shows 
inspect com domain see dotplot depicts diagonally dominant structure 
diagonal represents links target pages near source page inter host pages 
results primarily caused lexicographical order urls hostnames reversed com yahoo www index html 
urls necessary 
analyze impact hostname induced link locality redraw dotplot normalized fashion dot greyscale value depicts cumulative percentage links specific raster cell 
addition sort pages lexicographically group host permute hosts randomly avoid lexicographical crawl order dependent sorted com subgraph normalized fig 
linkage efficient parallel computation pagerank relationship 
clear diagonal dominance visible graph scale 
numbers tuples obvious web designed dimensional hostnames namespaces aimed disambiguate different local contexts paths dir index html 
previous approaches web graph partitioning resulted having unique id associated page eventually sorted lexicographically crawling order exploit specific graph properties 
single page id provides compact representation web graph visualized matrix dotplot shown 
requires continuous reorganization sorting newly added removed pages course incremental crawling 
mixture hosts url ids render host longer characterizable closed interval ids losing advantage link locality 
may introduce gaps numbering reduce sorting costs subsequent pages gap filled 
distributed scenario cause extensive network repeatedly moving pages partition 
propose different page identification scheme affiliation page specific host independently pages hosts 
specifically propose tuple consisting independent positive integers dependent url hostname identifying remaining local components path query string 
addition new local pages specific host new hosts easy renumbering longer necessary 
implementation specific note expect current web graphs sufficient store tuples uint byte integers 
address maximum hosts maximum pages host bytes 
small hosts reduce local part bit cutting memory footprint 
partitioned pagerank consider impact partitioning scheme pagerank algorithm 
analysis unifies common algorithms solving linear systems gau seidel jacobi 
apply analysis propose improved parallel pagerank algorithm discuss optimization issues 
unifying jacobi gauss seidel observed gau seidel iteration method compared jacobi method speed pagerank convergence factor uses scores current iteration soon available chr 
tter 
nejdl opposed jacobi iteration gau seidel variant requires iterating links strictly ascending order 
glance major drawback want apply distributed partitioned web graph 
clarify impact restriction link order derive common base algorithm jacobi equation gau seidel equation algorithms define intermediate ranking vector combines vectors previous current iteration depending state ranked page set available pages contains pages ranked iteration contains pages score touched iteration setting gau seidel method jacobi method iteration methods jacobi gau seidel simplified joint formula equation know iteration iteration iteration depends order links way determined 
iteration method worst case convergence properties jacobi best case gau seidel depending order elements random order vs strictly ascending order providing iteration running time jacobi iteration 
generalize impact rules small fraction links concerned strictly ascending order convergence speed remains magnitude standard gau seidel 
case order able parallelize gau seidel algorithm assign inter host inter partition links small fraction 
reformulating pagerank optimization reformulate mentioned unified page rank equation new dimensional page numbering scheme 
page variables replaced page tuples px py px representing page host py local 
account separation inter intra host links formula reads follows efficient parallel computation pagerank host host host host solely requires access local intra host rank portions efficiently computed scores stored ram 
local problem ranking intra host pages solvable fast non parallel gau seidel iteration process 
need intra host vote parallelization parallelize host level necessitating inter host communication limited exchange external votes 
approach produces ranks original pagerank scalable parallel pagerank algorithms 
mainly due parallelization gau seidel algorithm take advantage web host oriented block structure 
reaching optimal performance communication cost optimization 
votes hosts partition server easily conveyed ram votes hosts different partitions require network communication 
gross total exchanging external votes network underestimated 
graph setup exchanged partitions 
bigger web graphs rise easily lead network congestion information transmitted vote 
opposed approaches vote consisted target page id source page id score simply reduce transmitting single value page score link structure change iteration cycle 
generally link structure pages exchange votes partitions pages needs determined graph changes case incremental web crawling sent specific target partition 
source page need specified order compute pagerank score target page id see equation 
additionally grouping list target pages host need transmit target host id 
notably partition transmit single value target page link page votes local pages link specific page aggregated single value simple effective approach appear previous host host chr 
tter 
nejdl table 
inter partition links votes type amount percent total links inter partition links inter partition votes set partitions containing links partitions 
transferring sum votes partition single value reduces network load dramatically 
optimization show reduction vote exchanges dnr graph 
table depicts difference inter partition links votes quota links 
computational load balancing 
order keep convergence behavior centralized pagerank parallel scenario inter partition votes exchanged iteration see discussion consequences doing 
keep computation time low intra partition computations network communication terminate time 
intra partition computation directly proportional number pages partition see equation means available servers equally fast graph partitioned adequately performance servers 
slow factors influence running time different network throughput rates cheap nics system boards nominal speed 
strategy load balancing parallel pagerank heterogeneous environment running small test graph new servers measure computation speeds balance real graph accordingly 
case memory overflows due bad balancing parameters avoided manual interaction find parameters necessary 
experiments converted stanford dnr graph new tuple representation resulting pages links distributed hosts averaged pages maximum pages host inter host link percentage see table 
pagerank experiments sorted available hosts page count descending order distributed pages host wise round robin manner partitions equal size graph just fitted smallest server ram 
unfortunately pages dnr converted url associated numbers slightly differ ones 
fig 
partitioned dotplot amount pages efficient parallel computation pagerank table 
link distribution type amount percent total intra host inter host inter partition intra partition page distribution partition fig 
pages partition number pages host global partition partition partition partition partition partition partition partition top hosts sorted size fig 
partitioned host distribution link percentage inter partition link percentage inter partition link percentage partition fig 
inter partition link distribution pages host distribution strictly exponential resulted equal page link distribution see figures 
remarkably intra partition ratio inter host links inside partition negligible inter partition link rate nearly equals inter host ratio 
means hosts arbitrarily shifted partition necessary fast re balancing incremental web crawling 
implementation implemented partitioned parallel pagerank java network central coordinator instance 
coordinator responsible arranging iteration process partition level know rank scores link structure simpler coordinator 
computation nodes announce chr 
tter 
nejdl coordinator communicating hosts cover 
iteration process started soon nodes ready 
coordinator broadcasts global host structure known nodes instructs iterate 
node subgraph changes sends lists external outgoing link targets corresponding nodes 
iteration step node compute votes reformulated pagerank equation partition divided processed parallel 
nodes aggregate outgoing inter partition votes target page send directly nodes responsible target pages order specified 
node reports local rank status sum number pagerank scores coordinator order compute global residual succeeded coordinator decides continue iterating broadcasting iterate command residual reached threshold 
addition new pages incremental crawling may happen time 
addition covers new hosts coordinator selects node current balancing 
node responsible pages host 
assignment broadcasted nodes case dangling links previously uncovered host 
results conducted experiments linux machines amd dual opteron ghz gb ram intel dual xeon ghz gb residual computation time global residual iteration partition machine partition machine partition machine partition machine partition machine partition machine partition machine partition machine iteration residual vote propagation time partition partition partition partition partition partition partition partition iteration partition machine partition machine partition machine partition machine partition machine partition machine partition machine partition machine iteration fig 
partitioned pagerank convergence vote calculation network communication times partitions machines efficient parallel computation pagerank ram intel xeon ghz gb ram 
connected mbit ethernet lan load experiments 
divided graph partitions distributed servers available memory machine holds partitions performed unbiased pagerank computations 
examined convergence behavior rank distribution elapsed time globally partition 
partition results matched perfectly global counterpart confirmed assumptions see 
pagerank computation converged iterations entire computation took minutes seconds accounted rank computation rest network gigabit ethernet connection network communication costs probably go magnitude computation costs 
compared running times centralized pagerank computation disk networked servers parallel pagerank times faster iteration 
recomputation ignoring network transmission times faster 
experiments interesting algorithm performs massive parallel machine 
efficient method perform pagerank calculation parallel arbitrary large web graphs 
accomplished introducing novel dimensional view web having host id discriminator adapting gau seidel method solving linear systems scenario 
additionally optimizations distributed computation vote aggregation utilizing partitioning scheme fast re balancing course incremental crawling 
goal combine approach pagerank specific enhancements reduce convergence time extensive memory demanding scenarios 

arvind arasu novak andrew tomkins john tomlin 
pagerank computation structure web experiments algorithms 

krishna bharat bay wei chang monika rauch henzinger matthias ruhl 
links mining linkage web sites 
proc 
ieee intl 
conf 
data mining pages 

sergey brin rajeev motwani lawrence page terry winograd 
data engineering bulletin 

andrei broder ronny lempel maghoul jan pedersen 
efficient pagerank approximation graph aggregation 
proc 
th international world wide web conference pages 
chr 
tter 
nejdl 
yen yu chen gan torsten suel 
efficient techniques computing pagerank 

junghoo cho hector garcia molina 
evolution web implications incremental crawler 
proceedings th international conference large databases 

eiron kevin mccurley john tomlin 
ranking web frontier 
proc 
th intl 
conf 
world wide web pages 

david leonid pavel 
fast parallel pagerank linear system approach 
technical report yahoo 
research labs 

haveliwala 
efficient computation pagerank 
technical report stanford library technologies project 

kamvar haveliwala christopher manning gene golub 
exploiting block structure web computing pagerank 
technical report stanford university 

kamvar haveliwala gene golub 
adaptive methods computation pagerank 
technical report stanford university 

kamvar haveliwala christopher manning gene golub 
extrapolation methods accelerating pagerank computations 
proc 
th intl 
conf 
world wide web pages 

sung jin kim sang ho lee 
improved computation pagerank algorithm 
proc 
european conference information retrieval ecir pages 

ranka fox 
parallel gauss seidel algorithm sparse power system matrices 
proc 
acm ieee conf 
supercomputing pages 

amy langville carl meyer 
deeper inside pagerank 

chris lee gene golub zenios 
fast stage algorithm computing pagerank 
technical report stanford university 


parallel pagerank computation gigabit pc cluster 
proc 
th international conference advanced information networking application 

frank mcsherry 
uniform approach accelerated pagerank computation 
proc 
th international conference world wide web pages new york ny usa 
acm press 


web server survey 

lawrence page sergey brin rajeev motwani terry winograd 
pagerank citation ranking bringing order web 
technical report stanford digital library technologies project 

simha james browne 
distributed pagerank systems 
proc 
th ieee intl 
symp 
high performance distributed computing hpdc page 

shu ming shi jin yu guang wen yang ding xing wang 
distributed page ranking structured networks 
proc 
international conference parallel processing icpp pages 

haveliwala crawl webbase project 

yuan wang david dewitt 
computing pagerank distributed internet search system 
proceedings th vldb conference 

jie wu karl aberer 
web retrieval march 

zhu ye xing li 
distributed pagerank computation iterative aggregation disaggregation methods 
proc 
th acm international conference information knowledge management 
