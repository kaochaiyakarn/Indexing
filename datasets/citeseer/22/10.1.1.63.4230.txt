supple automatically generating user interfaces krzysztof gajos university washington seattle wa usa cs washington edu order give people ubiquitous access software applications device controllers internet services necessary automatically adapt user interfaces computational devices hand cell phones pdas touch panels 
previous researchers proposed solutions problem limitations 
proposes novel solution treating interface adaptation optimization problem 
asked render interface specific device supple system searches rendition meets device constraints minimizes estimated effort user expected interface actions 
contributions precisely defining interface rendition problem demonstrating user traces customize interface rendering particular user usage pattern presenting efficient interface rendering algorithm performing experiments demonstrate utility approach 
categories subject descriptors design tools techniques user interfaces user interfaces graphical user interfaces guis general terms algorithms design human factors keywords adaptive user interfaces user interface generation optimization constraint satisfaction decision theory user trace 
ubiquitous computing promises seamless access wide range computational tools internet services regardless user physical location 
example person enters room room wall display input facilities allocated individual allowing permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
iui january madeira portugal 
copyright acm 
daniel weld university washington seattle wa usa weld cs washington edu control aspects immediate physical environment interact applications forming persistent computational environment 
hand user remote location phone pda mobile device similar effect 
critical aspect vision premise application email client room lighting controller able render interface device user disposal 
furthermore rendering interface reflect needs usage pattern individual users 
wide range device types form factors input methods personal needs interaction styles unscalable human programmers create interfaces type device kind user 
automated solution necessary 
number researchers identified challenge solutions proposed 
promising current solutions handle device constraints general manner accommodate wide range display sizes interaction styles available today ubicomp environments 
example interface generators pebbles project rough assumptions screen size pda deal situations desirable rendition interface fit available area 
relies hand crafted templates relies interface designer explicitly specify widgets size constraints 
tools greatly simplify process designing user interfaces platforms cope situations device constraints anticipated advance interface functionality generated dynamically 
previous systems address individual needs differences users rendering interfaces 
supple system take different approach treating interface generation optimization problem 
asked render interface specified functionally specific device specific user supple searches rendition meets device constraints minimizes estimated cost user effort person activity 
example section depicts different interfaces supple deemed optimal respect cost function derived device user models devices screen size different interaction methods shows interfaces rendered single device response different user traces 
important note earlier light level int light power bool light bank light 
light 
classroom vent int screen bool power bool projector input string data data video tree depiction functional interface specification classroom appliance controller 
compute optimal layout choose individual widgets rendering ui 
summary presents contributions provide precise definition interface generation constrained decision theoretic optimization problem 
general approach allows generate optimal user interfaces declarative description interface device characteristics available widgets user device specific cost function 
include user traces essential component cost function 
allows supple generate different interface renditions response different usage patterns 
efficient rendering algorithm dynamically render interface seconds examples 
evaluate effectiveness rendering algorithms preliminary experimental study 

interfaces devices users intuitively adaptive interface renderer requires inputs interface specification device model user model represent terms user traces 
describe components turn 
concrete refer examples interface controlling appliances university classroom ftp client 
example chosen plausibly imagine different display devices interaction techniques purpose controlling physical environment 
ftp example chosen interactive nature 
university classroom appliances controlled electronically 
sets lights brightness controller switch 
vent controller lcd projector possible inputs video data inputs mechanized screen projection 
interface appliances needs rendered touch panel classroom 
addition faculty requested capability control classroom directly pdas laptops 
ftp client interface main views 
initially user asked login information user name password host name 
submitting information user interface allows browse local remote file systems upload download files choose ascii binary transfer modes 
user choose log time brought back login view 
functional interface specification earlier model uis adopt functional representation says functionality interface expose user features 
rendering algorithm section decision 
illustrates formal specification classroom interface 
interface defined ci set interface elements ci set interface constraints specified designer 
interface elements included description correspond units information need conveyed interface user controlled appliance application 
element defined terms type 
formally define possible types int float string bool vector nil int float string bool primitive types 
example power switches classroom interface defined booleans 
denotes derivative type parent type set constraints values type 
example light intensity vent speed defined derivatives int type added constraints legal values light intensity vent speed 
elements type vector denote ordered sequence zero values tpe 
specification ftp client variable holding currently selected files type vector string 
represents container type sequence elements 
example interior nodes specification tree instances container type 
nil denotes action type returns value consequence supple 
elements action type classroom example frequently ftp client interface 
example login window defined action container type holding parameters see rendering 
ci component interface description represents interface constraints functions map full partial rendering defined true false 
example classroom interface constraints added ensure lights rendered widgets 
local remote file browsers ftp client similarly constrained 
furthermore additional information provided element label indication element read list values information generate labels values power switch specified boolean individual values represented rendering 
device capabilities model display device tuple cd set available ui widgets cd denotes set device specific constraints functions evaluating suitability particular widgets particular contexts 
describe elements detail 
widgets objects turn ui elements components rendered ui 
disjoint classes widgets wp wc wp render primitive types wc containers providing aggregation capabilities layout panes tab panes 
interface constraints device specific constraints cd simply functions map full partial set element widget assignments true false 
example constraint reflect available screen size 
reflect certain aspects device capabilities interaction requirements providing supple appropriate widget libraries 
example primary mode interaction rendered ui going touch widgets big manipulated finger may 
remaining components device model functions reflect estimated user effort associated manipulating individual widgets certain contexts 
device specific matching function measures appropriate widget manipulating state variables type 
effort required manipulate widgets may depend value user wants choose element 
example widget text field arrows side light level control convenient choosing new value close current 
reason value may depend widget choice values 
sw lv ent wc function specific container widgets estimates user effort required navigate rendered interface 
particular particular ways denoted sw lv ent users transition container widgets 
consider widget representing interface element transitions sibling switching sw user manipulates elements belong different children leaving lv child manipulated followed element child entering ent opposite leaving 
different types container widgets transitions predicted increase user effort different ways 
example suppose represents tab pane widget sw denotes cost switching children high maneuver requires clicking tab pane 
leaving tab widget requires extra interactions tab pane incurs cost lv 
entering tab pane usually requires extra effort tab user access previously selected 
case pop window entering leaving require extra effort click required pop window entry click required dismiss extra effort required switching children rendered side side 
modeling users traces best rendering depends user interface users different needs may disagree best rendering 
estimate effort involved manipulating interface requires usage model 
goal research adapt user interfaces users devices chose user traces source information intended interface 
user trace set trails term trail refers coherent sequences elements manipulated user elements interface description widgets rendering 
important property trail subsequent events refer different interface elements sequence events indicates transition user 
assume trail ends interface closed reset 
define trail sequence events ui tuple ei vnew ei interface element manipulated vnew refer old new value element assumed appropriate 
assumed root trace information accumulates interface adapting needs particular user 
course done carefully frequent changes interface distracting 
format trace independent particular rendering information gathered device create custom rendering user chooses access application different device 
course interface needs rendered user chance generate traces 
simple smoothing technique ensures algorithm works correctly empty sparse user traces 
note designer interface may provide typical user traces 
fact different traces provided user may offered choice kind usage pattern engage interface rendered way best reflects needs 

rendering optimization objective render interface element widget 
define legal rendering mapping satisfies interface device constraints ci cd 
course may legal renderings seek best minimizes expected cost user effort 
cost function note conflicting goals ui design easy learn fast novices suitable experts ease error recovery hope estimate user effort involved manipulating particular rendering interface 
general define form ei ei ei estimate effort navigating widgets corresponding subsequent interface elements referenced trail 
cost rendering sum costs user operation recorded trace 
order equation reformulate defined terms primitive navigation function part device model 
furthermore equation requires re analyzing entire user trace time new cost estimate necessary wish transform cost function algebraic form allows incremental computation element element basis 
recall interface specification hierarchy interface elements 
assume rendition shortcuts inserted sibling branches tree describing interface unambiguously determine path elements interface 
denote path elements ei ej ei ej ei ek ek 
ej choose navigation cost function equation form ei ei sw ek child ek ek child ek ek lv ek child ek ek child ek ek ent ek child ek ek formula iterate intermediate elements path distinguishing kinds transitions described previous section 
ek ek children ek consider sibling switch children ek 
ek grand child ek path moving interface description hierarchy say leave ek 
path moving hierarchy entering ek 
cost navigation defined easy see total navigation related part cost function dependent times individual interface elements path interactions recorded user trace 
define appropriate count functions sw ent lv 
smoothing uniform distribution adding constant count ensures avoid pathological situations weights 
current implementation chosen match function independent particular values assigned widgets user interaction 
match function depends choice widget interface element consider alternative cost models see approach extends cases 
relaxing assumption tree structure key element ongoing research 
vars constraints 
propagate vars constraints fail return 
vars vars bestcost return 
vars 
bestcost cost 
vars 
return 
var vars 
value var 
alue var value 
vars constraints 
var 
vars 
return table branch bound optimization applied rendering problem 
variables vars represent widget element assignments passed 
constraints variable contains interface device constraints 
may state component cost interface element sw sw ent ent lv lv total cost rendering reformulated terms component elements cost computed incrementally element rendering constructed 
simple optimization values count functions precalculated interface trace combination 
ready define problem formally 
specifically define interface rendering problem tuple description interface device model specifying size constraints available widgets user trace 
solution rendering problem legal rendering minimum cost 

rendering algorithm table shows algorithm solving problem 
algorithm branch bound constrained search guaranteed find optimal solution 
function referenced line procedure admissible heuristic pruning partial solutions cost guaranteed exceed best solution far 
function looks unassigned variables adds costs best available widgets variables ignoring constraints 
search directed subroutine 
variables eventually considered order processed affect completeness researchers constraint satisfaction demonstrated order significant impact solution time 
experimented variable ordering heuristics bottom chooses variable corresponding deepest widget interface specification tree leads construction interface starting basic elements get arranged complex structures 
top chooses top unassigned variable causes algorithm decide general layout populate basic widgets 
final heuristic minimum remaining values mrv proven highly effective constraint satisfaction problems idea focus constrained variable fewest number possible values remaining 
optimized algorithm implementing full constraint propagation step search 
constraint propagation ensures variable assignment potential widgets considered unassigned variables consistent constraints 
allows quickly detect paths yield legal solution 
example suppose large slider widget chosen vent speed constraint propagation immediately realize way fit widget light intensity 
furthermore allows accurate estimates final cost complete interface allowing efficient branch bound pruning 
shown section optimization proved effective 
arriving algorithm implemented simulated annealing 
algorithm fast producing legal solution guarantee optimality 
furthermore optimized systematic algorithm local search lost speed advantage 
algorithm inherently discrete aspects ui better modeled continuous values 
example length list widget listing local remote files ftp client interface vary reasonably entries 
system addresses problem providing discretized approximations lists elements 
alternative optimization method capable handling continuous parameters complexity worthwhile 

evaluation section presents preliminary evaluation supple 
report computational efficiency 
show interface renderings generated automatically different devices different usage patterns include multi window interface generated ftp client application 
describe experiment asked human experts design user interfaces constraints imposed system 
performance table summarizes results performance study 
constraint propagation algorithm took seconds find best solution nearly minutes complete 
enabling full constraint propagation brought numbers second best solution seconds complete 
varying variable ordering produced mixed results mrv proved table performance results classroom interface rendered different touch devices chosen particularly challenging constraining search space 
potential renderings explore 
numeric values represent time seconds 
columns list optimizations options propagation forward checking fc full different variable orderings bottom minimum remaining values mrv top described section 
column device shows time necessary arrive best rendering 
second column reports time taken till search completed confirming better rendering 
results collected ghz computer mb ram running red hat linux sun java sdk 
behave predictably completing search seconds top bottom outperformed device 
adapting device characteristics figures show different renditions classroom interface 
figures show interface rendered different devices display size 
device interaction pointer 
second uses touch screen 
shows interface rendered device smaller screen size 
order fit interface available screen space convenient widget choosing input projector light controllers placed individual tabs tab pane 
shows classroom interface rendered cell phone 
top page addition widgets controlling equipment vent contains link page containing controls lights 
shows steps necessary manipulate brightness lights 
order produce different renderings classroom interface varied device model 
cases functional interface specification empty user trace 
adapting usage patterns shows classroom interface rendered smaller device 
renditions obtained conditions difference user trace 
rendition empty trace generated heavy light controls recorded 
second rendition uses convenient widgets portion available space easy navigate individual light controls 
classroom interface rendered devices size pointer device touch panel device classroom interface rendered wap cell phone simulator sony ericsson successive screen shots illustrate steps necessary manipulate brightness level lights 
classroom interface rendered smaller device empty user trace trace reflecting frequent transitions individual light controls 
second rendering available space 
interface ftp client application 
initial login window 
main window transferring files local remote locations 
logging login window rendered application adds user host names respective lists values changes reflected new rendering login window 
interactive interface shows different windows rendered ftp client application 
shows initial login window 
information entered correct login button pressed login window replaced main window 
pressing logout button takes user back login window 
successful login application records user names host names entered user adds list values corresponding state variables interface description 
subsequent renditions login window reflect change 
windows rendered disposed dynamically request application supplies description renderer 
case rendering takes second 
conceptual user study order compare supple performance human designers conducted informal user study asked human experts graduate students computer science taken hci course design user interfaces classroom similar size widget selection constraints imposed supple 
gave subjects functional description appliances library ui widgets 
widgets printed cut subjects task arrange widgets prescribed area 
tab pane widget rendered booklet allowing subjects fill contents tab pane 
subjects different size constraints 
obtained designs size constraint 
results size constraints depicted varied revealed interesting differences subjects subjects supple 
due space constraints brief summary observations study 
subject came design identical supple rendering empty user trace 
subject felt light controls rendered 
rendered controls lights single tab pane widgets 
argued users want manipulate lights time important render convenient widgets sliders 
subsequently interface simulating usage pattern hypothesized subject recorded trace 
ran supple new user trace obtained rendering equivalent produced subject 

related follows decades research model user interface design 
terminology szekely retrospective supple falls category automated design tools 
similar systems uses domain model describe kinds structure information exchanged user application 
tools supple explicit task dialogue model traces provide information intended usage system 
importantly earlier including systems personal universal controller puc uses decision trees render interfaces 
noted despite advantages decision trees number problems 
importantly technique interfaces rendered single pass decisions taken level individual widgets groupings making effective tradeoffs available screen size widget quality nearly impossible 
system xweb limited fact leaf widgets prespecified layout chosen dynamically 
optimization constraint techniques long history user interface research primarily presentation maintaining consistency 
optimization new ways gadget 
gadget particular lay elements dialog box chose widgets capable creating complex interfaces ones display elements 

contributions formally define interface rendering problem decision theoretic optimization problem 
second framework includes input trace typical user behavior allowing renderings 
third efficient branch bound rendering algorithm implemented supple system 
fourth describe experiments showing speed supple quality resulting interfaces supple ability customize individual users 
despite progress remains done 
need explore limits approach 
extending supple handle wider range devices displays phones 
demonstrated supple capable generating interfaces different kinds applications relatively simple 
aspire complex applications microsoft word outlook require sophisticated data models attributes 
plan remove section assumption renditions tree structured allow supple add shortcuts duplicate commonly functionality 
approach extend related done adaptive web sites mobile portals 
principle partitioned dynamicity may alleviate user confusion 
wish extensions cost function accounting actual old new values user traces incorporating number established ui evaluation metrics 
particular metric layout appropriateness uses fitts law usage traces evaluate quality precise widget layout pane help fine tune rendering 
visual search models evaluate complexity view interface suggested different visual search models reflect behavior users different levels expertise 
spatial information physical location individual lights useful addition interface specification shown project 
automatic interface adaptation complements explicit enduser customization wish investigate tion languages mechanisms 
particular enable users easily influence supple interfaces rendered 
exploring mechanisms allowing users customize functionality interface presence placement pre specified ui widgets 
ultimately utility approach determined adoption 
suspect ui designers skeptical uncomfortable functional specification preferring fine control layout provided existing methods 
ui critiquing tool supple useful designers suggesting aspects interface need review 
users come automatic adaptation trace driven personalization combination explicit customization designers forced take notice 
step regard detailed user study evaluation 

authors anonymous subjects participated preliminary study 
acknowledge mark adler alan borning gaetano borriello lau jeffrey nichols steven wolfman alexander yates thorough comments earlier drafts 
research funded part office naval research national science foundation iri iis dl career award 

agrawala 
rendering effective route maps improving usability generalization 
fiume editor siggraph computer graphics proceedings pages 
acm press acm siggraph 
anderson domingos weld 
adaptive web navigation wireless devices 
proceedings seventeenth international joint conference artificial intelligence 
anderson horvitz 
web montage dynamic personalized start page 
proceedings eleventh international conference world wide web pages 
acm press 
borning 
constraint tools building user interfaces 
acm transactions graphics tog 
bunt conati 
role adaptive support play adaptive system 
proceedings iui portugal 
cardelli 
building user interfaces direct manipulation 
acm symposium user interface software technology pages 
eisenstein vanderdonckt puerta 
adapting mobile contexts user interface modeling 
workshop mobile computing systems applications monterey ca 
fogarty hudson 
gadget toolkit optimization approaches interface display generation 
proceedings uist vancouver canada 
kim foley 
providing high level control expert assistance user interface presentation design 
proceedings sigchi conference human factors computing systems pages amsterdam netherlands 
acm press 
lin landay 
tool early stage design prototyping multi device user interfaces 
proceedings th international conference distributed multimedia systems international workshop visual computing pages 
nichols myers higgins hughes harris rosenfeld 
generating remote control interfaces complex appliances 
chi letters acm symposium user interface software technology uist paris france 
olsen nielsen 
cross modal interaction xweb 
proceedings th annual acm symposium user interface software technology pages san diego california united states 
lee fox hanrahan winograd 
service framework ubiquitous computing environments 
proceedings ubicomp pages 
puerta eisenstein 
universal language user interfaces 
unpublished available www org 
russell norvig 
artificial intelligence modern approach 
prentice hall 
sears 
layout appropriateness metric evaluating user interface widget layout 
software engineering 
smyth 
personalized adaptive navigation mobile portals 
proceedings ecai pais lyons france 
szekely 
retrospective challenges model interface development 
bodart vanderdonckt editors design specification verification interactive systems pages wien 
springer verlag 
weld anderson domingos etzioni gajos lau wolfman 
automatically personalizing user interfaces 
ijcai acapulco mexico august 
wexelblat maes 
footprints history rich tools information foraging 
chi pages 
wiecha bennett gould greene 
tool rapidly developing interactive applications 
acm transactions information systems tois 
