computational information theoretic soundness completeness formal encryption pedro ad center logic computation ist lisbon portugal pad math ist utl pt consider expansions abadi rogaway logic indistinguishability formal cryptographic expressions 
expand logic order cover cases partial information encrypted plaintext revealed 
consider computational purely probabilistic information theoretic interpretations 
general systematic treatment expansions logic symmetric encryption 
establish general soundness completeness theorems interpretations 
applications specific settings covered earlier works purely probabilistic time pad computational settings called type key revealing type key length revealing encryption schemes computational complexity 
partially supported fct bd 
additional support feder fct project mat feder fct project quant log mat 
partially supported osd onr cip sw uri software quality infrastructure protection diffuse computing onr 
additional support nsf cns 
partially supported osd onr cip sw uri software quality infrastructure protection diffuse computing onr osd onr cip sw uri trustworthy infrastructure mechanisms experimentation diffuse computing onr 
additional support nsf ccr cns 
bana department mathematics university pennsylvania philadelphia usa bana math upenn edu andre scedrov department mathematics university pennsylvania philadelphia usa scedrov math upenn edu 
designing verifying security protocols complex problems certain level idealization needed order provide manageable mathematical treatment protocols notion security 
idealizations necessarily omit properties real system lead leaks security 
protocols quite simple case security properties supposed achieve subtle hard formulate 
checking protocols really satisfy properties may impossible task 
difficulties typically arise subtleties cryptographic primitives combining 
security protocols required properly multiple instances carried parallel case malicious intruder may combine data separate sessions order confuse honest participants 
number methods different levels idealizations analyzing security protocols main approaches highly treatment help formal logic detailed description computational complexity probability theory 
decades major directions cryptography developed apart 
formal approach uses simple manageable formal languages describe cryptographic protocols 
approach amenable automation suitable computer tools accuracy unclear 
computational approach harder handle mathematically involves probability theory considers limits computing power 
computational approach proofs done hand approach accurate widely accepted 
research efforts relate symbolic model cryptographic techniques computational model probabilistic polynomial time computability including 
efforts developing rigorous mathematical treatment relationship models 
approach concerned uses simple formal structure building messages formal keys bits repeated pairing encrypting constructing set formal expressions 
formal expressions interpreted computational framework symmetric encryptions 
interpretation ensemble probability distributions set finite bit strings assigned formal expression 
formal computational models security stated means certain notion equivalence 
formal model equivalence symbolic expressions defined inductively structure expressions 
computational model equivalence ensembles probability distributions standard notion computational indistinguishability 
question happens formal equivalence interpretation 
true formal equivalence symbolic expressions implies computational indistinguishability interpretations say soundness holds 
direction true computational indistinguishability interpretations symbolic expressions implies expressions formally equivalent say completeness holds 
related includes seminal abadi rogaway prove soundness case called type symmetric encryption schemes 
completeness case proved micciancio warinschi horvitz gligor 
extensions method include public key encryption composite keys plaintext aware encryption schemes signature schemes 

extends applicability abadi rogaway ar logic 
expanding original ar logic show adjust formal notion equivalence order maintain soundness completeness symmetric encryption scheme hosts interpretation computational information theoretic leaks partial information 
show distinctions security levels computational information theoretic encryption schemes faithfully reflected symbolic model 
order provide general treatment consider interpretations purely probabilistic information theoretic encryption schemes computational encryption schemes 
general probabilistic framework includes special cases computational purely probabilistic encryption schemes time pad 
advantage presentation need formulate general statements twice true computational information theoretic models 
prove general soundness completeness theorems logics formal symmetric encryptions 
theorems essentially claim soundness holds certain subset formal expressions soundness valid expressions similarly regarding completeness 
expected necessary assume soundness greater subset expressions completeness order derive theorems 
reason probabilistic model detailed description symbolic indistinguishability distributions tuples random variables follow indistinguishability corresponding pairs tuples 
contrast equivalence tuples formal expressions derived pairwise equivalence 
rest organized follows 
start presenting abadi rogaway formalism logics formal encryption 
section introduce fundamentals computational model 
sections discuss soundness completeness type encryption schemes time pad 
section general probabilistic framework includes computational information theoretic encryption schemes special cases 
prove general soundness completeness results demonstrate soundness completeness type type type otp encryption schemes corollaries general theorems 
main technical contribution 
section concludes discussion possible expansions logic relations existing models 
want abadi guttman herzog sters micciancio mitchell warinschi valuable comments informative discussions 
done author visiting student university pennsylvania 

ar logic formal encryption abadi rogaway logic formal encryption simple treat complex reveal subtleties occur protocol 
formalism expression represents multitude messages exchanged protocol 
thought data adversary collected observing protocol 
language expressions built keys blocks bits pairing encryption 
start presenting original definitions introduced 
sections extend ar definition equivalence deal different notions security 
definition 
keys 
infinite discrete set symbols blocks nonempty subset 
define set expressions exp grammar exp keys blocks exp exp enc enc exp keys denote keys set keys occurring define set subexpressions expression sub smallest subset expressions containing sub sub sub sub sub 
say subexpression denote sub 
say key encrypts expression expression induces binary relation keys iff encrypts say subset keys cyclic restriction cyclic 
reader aware different notions 
definition expressions considered cyclic 
expressions unambiguous means means define set visible subexpressions expression vis smallest subset expressions containing vis vis vis vis vis 
ready define set recoverable keys expression recoverable keys adversary recover looking expression 
define keys vis keys 
details refer example 
say encryption term undecryptable keys 
non recoverable keys expression important subset denoted keys 
set keys contains keys encrypt outermost undecryptable terms 
formally expression define keys keys vis keys keys example 
expression 
case keys 
course necessary keys 
set recoverable keys keys adversary sees non encrypted decrypt recovering decrypting twice revealed 
keys 
abadi rogaway defined equivalence notion set expressions 
equivalence expresses fact adversary distinguish certain messages 
abadi rogaway introduced notion assuming adversary distinguish undecryptable formal ciphers 
want express fact partial information may revealed plaintext encrypting key need adjust definition equivalence 
discuss specific cases called key revealing encryption schemes time pad sections adjust equivalence notion formal case give general treatment adjustments section 

computational model computational model cryptography message sequence bits strings order able build longer messages shorter ones assume injective pairing function strings strings strings 
plaintexts ciphertexts keys nonempty subsets strings fixed particular element plaintexts 
definition encryption scheme 
computational symmetric encryption scheme parameters coins keys algorithm security parameter parameters keys strings coins ciphertexts encryption function keys strings plaintexts keys coins dk ek plaintexts dk ek plaintexts 
computable polynomial time size input counting coins 
computational equivalence 
computational setting assume adversary access computers limited computational power 
notion security adversary small probability getting valuable information encrypted messages expressed mathematically having little chance tell different ciphertexts apart 
messages fact ensembles security parameter random variables key generation encryption random adversary trying distinguish random ensembles 
order express means little chance distinguish ensembles need notions negligible function computational indistinguishability definition 
function said negligible nc nc 
definition 
parameters sequences random variables values strings 
dist dist denote probability distributions 
say ensembles dist dist computationally indistinguishable probabilistic polynomial time adversary pr dist pr dist negligible function 
know meaning indistinguishability ensembles define security adversary distinguish certain encryption oracles 
key keys encryption oracle ek algorithm input strings outputs ek 
oracle ek input strings outputs ek seminal ar defined different notions security 
defined type security follows definition 
say computational encryption scheme type secure probabilistic polynomial time adversary distinguish pair oracles ek ek pair oracles ek ek randomly generated 
probabilistic polynomial time algorithm querying ek ek ek ek pr pr ek ek ek ek negligible function 
intuitively formula says adversary pairs oracles ek ek ek ek keys randomly generated prior handing pair adversary know 
adversary kinds probabilistic polynomial time computations including queries oracles 
query oracles messages depend previously answers oracles 
keys oracles encryption change adversary queries oracles 
game adversary decide pair oracles interacting 
adversary wins game decide correct probability bigger equivalently distinguish 
difference negligible function say pairs indistinguishable adversary encryption type secure 
type security meant express adversary tell oracles encrypt plaintexts adversary submits encrypt tell encryptions pair done key keys separately generated 
ar done security level 
possible relax power encryption scheme obtain different notions security 
definition 
say computational encryption scheme type secure probabilistic polynomial time adversary distinguish oracles ek ek randomly generated 
probabilistic polynomial time algorithm querying ek ek pr ek pr ek negligible function 
require encryption different keys possible detected case type security 
notion convenient discuss expansion abadi rogaway logic match case stick moment 
see applied types security 

soundness completeness type schemes order prove relation formal computational worlds need translate formal expression computational theory handle 
translation call interpretation results sequence random variables distributions indexed security parameter 
valid formal expression security parameter interpretation assigns random variable values strings 
intuitively interpretation works follows blocks interpreted strings key interpreted running key generation algorithm pairs translated computational pairs formal encryptions terms interpreted running encryption algorithm 
ar interpretation algorithmic way include appendix 
denote distribution ensemble 
formal equivalence expansion logic type schemes formal equivalence meant express adversary certain messages look 
original ar treatment type security encryption terms encrypted non recoverable keys looked adversary 
formal encryption terms encrypted keys expression replaced box resulting pattern agreed pattern expression key renaming expressions said equivalent 
type secure encryption scheme adversary may distinguish encryption terms encrypted different keys box replacement boxes indexed encrypting keys 
patterns defined way pat keys blocks pat pat pat keys keys pattern expression type case defined follows definition 
expression pattern pattern obtained replacing undecryptable term definition 
say valid expressions equivalent denote key renaming function bijection keys keys pattern pattern pattern denotes pattern obtained replacing occurrences keys including occurrences indexes 
example 
expression 
keys case pattern 
defining example pattern 
replace pattern turns pattern equivalent 
definitions soundness completeness theorems proved theorem 
expressions keys keys cyclic respectively 
type secure encryption scheme 
implies 
direction implies arbitrary expressions conditions hold keys blocks exp pair equivalent respect ii iii discuss conditions completeness part detail 
condition requires different types objects blocks keys pairs encryption terms distinguishable achieve completeness ensured tagging object type suggested 
call condition ii weak confusion freeness 
condition fact equivalent weak key authenticity introduced horvitz gligor case type schemes essentially means decrypting wrong key detectable probabilistic sense 
condition iii requires encryption different keys detectable 
type condition definition allows encrypting different keys may detectable require 
soundness order achieve completeness formal equivalence introduced need assume encryption different keys detectable 
purely computational condition implies condition iii require probabilistic polynomial time algorithm pr pr ek ek ek ek negligible function 
prove similar theorems length revealing type encryption schemes key length revealing type encryption schemes 
state theorems follow corollaries general theorems 

soundness completeness time pad computational possible important notions indistinguishability 
example may say distributions indistinguishable identical 
consider interpretations formal expressions check soundness completeness case 
example consider specific implementation time pad 
strings pairing function strings strings define pairing 
denotes concatenation strings separated commas stands denotes length string 
number indicate long second string pair separates strings blocks strings 
just tag shows meaning string block 
key generation 
case otp length encrypting key match plaintext need separate key generation length 
kn random variable prk values equally distributed keys strings ends 
keys keys keys core denote string get cutting tag 
encryption 
domain encryption function dome elements keys strings ek core tag informs string ciphertext 
notice encryption probabilistic ek random variable words constant random variable 
notice tag plaintext dropped part encrypted 
decryption 
decryption function dk defined naturally value dk bits indistinguishability 
mentioned call distributions indistinguishable identical 

interpretation time pad case otp lengths messages keys vital importance 
notion reflected formal view defined section 
expand logic talk length expression 
definition 
assume length function keys 
keys symbols 
length block defined 
added match length tag 
define length function expression exp induction 
valid expressions defined expressions length encrypted subexpressions match length encrypting key key twice encrypt 
condition necessary prevent leaking information properties otp 
definition 
define valid expressions otp exp otp exp implies key encrypts 
interpretation otp defined similarly type case minor changes regarding tagging messages security parameter interpretation outputs random variable formal expression 
full details check algorithm appendix 

formal equivalence expansion logic time pad case type encryption schemes find suitable equivalence relation formal expressions 
assign different boxes encryption terms different length 
boxes indexed keys see example 
define patterns pat keys blocks pat pat pat keys 
case time pad patterns equivalence expressions defined way definition 
valid expression pattern pattern obtained replacing undecryptable term denotes formal length fact 
definition 
say expressions equivalent denote otp exists length preserving key renaming function pattern pattern 
soundness completeness theorems proven theorem 
valid expressions exp otp keys keys cyclic respectively 
otp implies probability distributions 
valid expressions exp otp 
probability distributions otp completeness theorem otp side condition theorem 
note analogue condition theorem immediate due tagging 
ii analogue follows tagging decrypting wrong key result meaningless text 
analogue iii meaningless case just encrypt key 

general treatment symmetric encryption provide general probabilistic framework symmetric encryption contains computational information theoretic description special cases 
keys plaintexts ciphertexts elements discrete set strings 
case computational treatment information theoretic description 
elements sequences corresponding parametrization security parameter 
fixed subset plaintext strings represents messages allowed encrypted 
subset keys strings chosen possible encrypting keys 
order able build longer messages shorter ones assume injective pairing function strings strings strings 
range pairing function called pairs pairs ran 
symmetric encryption scheme constituents key generation 
key generation represented random variable keys discrete probability field prk 
scheme key generation allowed 
encryption 
keys plaintext ek random variable discrete probability field pre 
values random variable strings denoted ek decryption 
encryption assume keys function dk satisfying dk ek plaintext 
notion indistinguishability important case computational information theoretic treatments cryptography 
expresses small probability tell probability distributions apart 
indistinguishability 
assume equivalence relation called indistinguishability defined distributions strings 
denote relation 
say random variables values strings equivalent indistinguishable distributions equivalent denoting equivalence random variables 
require followings random variables distribution indistinguishable ii constant random variables indistinguishable constants iii random variables strings strings followings hold denotes projection components strings strings iv strings strings indistinguishable random variables independent independent indistinguishable random variables strings strings functions preserve indistinguishable random variables indistinguishability needs satisfy properties encryption decryption specify definition encryption schemes 
example 
simplest example indistinguishability holds random variables distributions identical 
example 
standard notion computational indistinguishability special case general definition 
case strings strings random variables computational interest form strings independent components security parameter de noting th component strings required independent random variables indistinguishability phrased ensemble probability distributions components random variables 
definition 
encryption scheme quadruple ki ki set key generations index set encryption decrypts ciphertexts encrypted indistinguishability defined 
require probability distribution ki distinguishable constant strings distributions ki kj distinguishable distribution distinguishable distribution independently generated ki kj indistinguishability relation satisfying properties stated needs random variables values strings ki key generation distribution ki indistinguishable distribution ki eki eki indistinguishable random variables ii dki dki indistinguishable ran dom variables 
probability ki joint probability ki necessarily independent 
similarly 
equivalence expressions treatment abadi rogaway defined equivalence expressions replacing encryption terms encrypted non recoverable keys expression box expressions declared equivalent encryption terms replaced received patterns looked key renaming 
method implicitly assumes adversary distinguish undecryptable terms 
want allow leaking partial information need modify definition equivalence 
introducing notion equivalence expressions postulate equivalence notion set keys equivalence set valid encryption terms 
word valid defined precisely meant encryption terms expressions sense 
equivalence set valid expressions defined help reason postulating equivalence set keys want allow key generation processes probabilistic setting 
able distinguish formal keys generated different key generation processes 
assume equivalence relation set keys equivalence class contains infinitely keys 
keys definition 
bijection keys keys called key renaming function keys 
expression denotes expression obtained changing keys images 
set exp big suit purposes 
example require certain messages encrypted certain keys 
define set valid expressions definition 
set valid expressions subset exp exp keys blocks contained exp ii exp sub exp number pairs elements sub exp iii key renaming function exp iff exp set valid expressions set valid encryption terms enc exp equivalence valid expressions meant incorporate notion security model want expressions equivalent look adversary 
think encryption secure partial information revealed undecryptable terms look adversary 
partial information say repetition encrypting key length revealed adjust notion equivalence accordingly 
introducing equivalence relation set valid encryption terms order capture ciphertexts adversary distinguish words partial information length key 
adversary retrieve ciphertext 
assume equivalence relation set valid encryption terms property key renaming function 
required key renaming function induces renaming denote 
example 
consider encryption schemes adversary recognize encryption terms encrypted different keys 
case need define encryption terms equivalent encrypted key 
example 
authors find useful define length function exp specifying keys blocks 
encryption terms considered indistinguishable adversary length 
case define equates encryption terms length element contain encryption terms specific length 
definition 
formal logic symmetric encryption triple exp exp set valid expressions equivalence relation keys equivalence relation require elements infinite sets key renaming function relative exp exp exp ii iii replacing encryption term valid expression equivalent valid encryption term results valid expression 
define equivalence expressions assign valid expression element set patterns pat defined way definition 
set patterns defined grammar pat keys blocks pat pat pat keys definition 
valid expression pattern pattern obtained replacing undecryptable term keys denotes equivalence class containing say valid expressions equivalent denote key renaming pattern pattern pattern denotes pattern obtained renaming keys box indexes equivalence classes 
example 
case elements contain encryption terms encrypted key correspondence keys index boxes keys elements keys 
expression example pattern definition example 
equivalent definition equivalence 

proper equivalence ciphers order soundness completeness proofs need restrictions restrictions proofs 
condition natural purposes called proper equivalence defined 
condition soundness 
completeness proper equivalence need assume relationship call assumption independence defined definition 
definition 
say equivalence relation proper finite set keys contains element form contains element keys words contains element encrypted key representative key appears may appear encrypting key subexpression 
example 
equivalence example example proper 
propositions needed proving general soundness completeness results 
order able state introduce set key keys valid expression 
full proofs proposition 
exp proper 
equivalence relation equivalence class key infinitely elements 
proposition 
exp proper 
key renaming function relative key key 
important proposition proposition 
expv proper 
ni li ni set valid encryption terms finite set keys li 
denote set equivalence classes respect elements element keys ii li iii keys keys key key set containing key case keys keys 
form 
sets conditions proposition denote nonempty set satisfy conditions ii iii proposition 
useful property satisfied applications need completeness result definition 
say independent finite set keys finite set encryption terms key appears element key renaming function key renaming example 
trivial equating keys equivalence example example independent cases 

interpretation idea interpretation describe messages built blocks strings keys pairing encryption 
valid formal expression interpretation assigns random variable values strings 
give specific interpreting function just say function interpretation satisfies certain properties 
assume function fixed advance assigns formal key key generation algorithm 
strings constant random variable blocks rest determined way run key generation algorithm assigned key keys 
outputs key generations translate formal expressions rules time see key output corresponding key generation 
blocks just 
see pairing pair interpretations expressions inside formal pair 
see formal encryption run encryption algorithm key string output key generation encrypting interpretation formal expression inside formal encryption 
randomness comes initial key generation running encryption algorithm independently time encounter formal encryption 
precise definition quite technical included appendix 
try clear example example 
interpretation strings 
instances randomness coming generating key twice encrypting twice 

soundness completeness interpretation assigns random variable distribution formal valid expression set valid expressions equivalence equates expressions formal adversary supposedly distinguish equivalence equates random variables distributions probabilistic adversary supposed able distinguish 
question formal probabilistic equivalence related interpretation 
say soundness holds implies say completeness holds implies key soundness theorem boxes definition formal equivalence elements 
clear extreme case equivalence encryption terms defined encryption terms equivalent iff soundness holds trivially interpretations completely impractical assume formal adversary see inside encryption 
immediate soundness holds interpretation encryption terms implies results boxes keeping interpretation soundness holds new 
concrete situation aim introduce boxes achieve soundness sustain practicality 
way avoid having boxes require completeness see obtaining completeness requires boxes 
theorem claims equivalence conditions 
trivial condition implies condition ii 
claim ii implies summarized way soundness holds pairs valid expressions special relation described ii soundness holds expressions certain acyclicity 
words implies certain specified pairs implies pairs valid expressions certain acyclicity 
definition see section 
theorem 
expv formal logic symmetric encryption expv keys cyclic assume proper 
ki general encryption scheme interpretation expv 
conditions equivalent soundness holds implies 
ii ni li set valid en terms finite set keys li element followings hold nij expv ni ni nil keys occur denote expression obtained replacing nij ni 
proof theorem motivated soundness proof 
full proof 
idea proof starting acyclic expressions cre ate expressions mb nb mi received mi replacement encryption terms described condition ii 
acyclic ity ensures encrypting key replaced encryption terms occur 
similarly form ni ni 
mb nb differ key renaming 
condition ii mi mi ni ni 
mb nb theorem follows 

laud addresses possibility getting rid acyclicity assumption 
order obtain soundness expressions cycles leaves undecryptable terms encrypted keys cycles untouched replace encryption terms boxes 
proceeded way treatment 
laud points replacing encryption terms boxes means adversary decrypt reasonable assumption general included acyclicity assumption 
example 
soundness theorem earlier type encryption schemes special case theorem 
case expv exp equivalence relation example proper mentioned example equivalence relation trivial keys equivalent 
elements correspondence keys say keys boxes labeled keys 
gives interpretation computational setting 
set ni li condition ii theorem take cli li condition ii satisfied proposition holds full proof proposition 
consider expression key keys 
suppose expressions ml exp ml assume occur denoting expression get replacing mi contained mj holds 
condition ii general soundness theorem satisfied soundness holds type case 
example 
indicate formal logic symmetric encryption receive soundness special case theorem interpreting time pad implementation section 
formal equivalence introduced time pad section derives equivalence encryption terms length 
soundness part theorem special case general theo rem 
define encryption terms equivalent iff encryption terms encrypting key 
equivalence keys defined help length function keys keys equivalent iff length 
boxes indexed encrypting keys 
set ni li condition ii take cli li li li means li 
hard check setting condition ii soundness theorem satisfied 
example 
discussion type schemes recall example cited micciancio warinschi 
assumed encryption scheme views plaintext sequence basic message blocks ciphertext block longer corresponding plaintext 
practical encryption schemes cbc ctr satisfy property 
interpretation assumed block symbols key symbols mapped bit strings size equal basic message block 
equivalence encryption terms type case defined equivalence holds iff formal length encryption terms 
gives proper equivalence 
hard see condition ii general soundness theorem satisfied 
clear order able define equivalence encryption terms length length function needed track change length pairing encrypting 
easy previous example 
general necessarily true formal length function defined 
problem length function assigns specific length expression interpretation expression random variable may varying length 
example case time pad keys may generated uniformly length outcome key generation varies require encrypting key long plaintext length encryption term vary 
encryption scheme fixed security parameter size ciphertext depends size plaintext possible introduce length function formal expressions assign sequence length expression element sequence corresponding value security parameter 
length function defines equivalence relation boxes indexed sequences length function chosen soundness follow 
way dealing length index boxes type tree replaced encryption term encryption terms equivalent type trees identical herzog 
example 
type encryption schemes equivalence encryption terms defined equivalence holds iff encrypting keys lengths encryption terms agree proper equivalence 
condition ii general theorem holds 
completeness result 
condition ii equivalent authors call weak key authenticity 
full proof theorem available 
theorem 
expv formal logic symmetric encryption assume proper independent 
interpretation ki 
completeness holds conditions satisfied keys blocks expv pair equivalent respect keys blocks able pairs encryption terms distinguish ii iii pairs valid encryption terms mi li ni follows 
proof consists separate parts 
shown conditions ii imply valid expressions key renaming apart boxes patterns boxes patterns positions 
condition iii implies picking boxes pattern key renaming applying indexes boxes obtain corresponding boxes pattern theorem follows prove pairwise equivalences boxes construct leaves keys outside boxes untouched maps indexes boxes indexes boxes 
observe condition iii theorem trivially satisfied box encryption terms equivalent completeness holds certain choice implies ness holds results fewer boxes complete 
say key completeness boxes 
example 
completeness part earlier theorem type encryption schemes clearly special case theorem formal language introduced type schemes proper independent 
example 
formal logic otp example proper independent 
furthermore condition theorem satisfied due tagging section 
condition ii satisfied tagging reason ultimately decrypting wrong key result invalid endings 
condition iii satisfied pairs encryption terms encrypted different keys otp keys twice equivalence implies corresponding lengths encryption terms implies 

formal logic introduced example complete 
example 
case type encryption schemes assume length revealed distributions ek ek distinguished different length call condition strictly length revealing corresponding condition iii satisfied case 
encryption scheme conditions ii satisfied completeness holds formal logic interpretation boxes indexed length encryption term 
type system completeness holds assume system satisfies conditions ii just reveal key length really reveal strictly key revealing strictly length revealing 

studied expansions abadi rogaway logic indistinguishability formal cryptographic expressions 
showed case symmetric encryption subtle distinctions security levels computational information theoretic encryption schemes faithfully reflected formal symbolic setting 
introduced general probabilistic framework includes computational information theoretic encryption schemes special cases 
established soundness completeness theorems general framework new applications specific settings information theoretic interpretation formal expressions time pad computational interpretations type key revealing type key length revealing encryption schemes computational complexity 
theorems apply weak encryption schemes apply strong cca secure encryption schemes 
chosen ciphertext attacks attacks exploiting malleability lie outside abadi rogaway formal setting message space parsimonious 
exploring various expansions formal setting allow certain operations bit strings xor pseudorandom permutations exponentiation order extend soundness completeness techniques richer formal settings 
particular definition patterns appears subtle richer settings 
understand methods fit methods 
considering analogs results asymmetric encryption 
foresee major obstacles direction 
plan extend methods investigate formal treatment cryptographic primitives 
interesting see methods combined methods 
problems related keys lie scope deserve attention 
addressing problems current jonathan herzog preparation 
abadi 
formal eavesdropping computational interpretation 
proc 
th international symposium theoretical aspects computer software tacs volume lncs pages sendai japan 
springer 
abadi rogaway 
reconciling views cryptography computational soundness formal encryption 
journal cryptology 
preliminary version ifip tcs 
backes pfitzmann waidner 
composable cryptographic library nested operations 
proc 
th acm conference computer communications security ccs pages washington usa 
acm press 
full version available iacr eprint archive report january 
bana 
soundness completeness formal logics symmetric encryption 
phd sis university pennsylvania 
available www math upenn edu bana pdf 
available iacr eprint archive 
canetti 
universally composable security new paradigm cryptographic protocols 
nd ieee symposium foundations computer science focs pages las vegas nv usa 
ieee computer society 
full version available iacr eprint archive report 
cortier warinschi 
computationally sound automated proofs security protocols 
proc 
th european symposium programming esop volume lncs pages edinburgh uk 
springer 
dolev yao 
security public key protocols 
ieee transactions information theory 
preliminary version focs 
goldwasser micali 
probabilistic encryption 
journal computer systems sciences 
preliminary version stoc 
herzog 
computational soundness standard assumptions formal cryptography 
phd thesis massachussets institute technology 
available theory lcs mit edu papers herzog phd pdf 
herzog liskov micali 
plaintext awareness key registration 
advances cryptology crypto volume lncs pages santa barbara ca usa 
springer 
horvitz gligor 
weak key authenticity computational completeness formal encryption 
advances cryptology crypto volume lncs pages santa barbara ca usa 
springer 
lakhnech 
completing picture soundness formal encryption presence active adversaries 
proc 
th european symposium programming esop volume lncs pages edinburgh uk 
springer 
laud 
encryption cycles views cryptography 
proc 
th nordic workshop secure systems number pages sweden 
university studies 
laud corin 
sound computational interpretation formal encryption composed keys 
proc 
th international conference information security cryptology volume lncs pages seoul korea 
springer 
lincoln mitchell mitchell scedrov 
probabilistic polynomial time framework protocol analysis 
proc 
th acm conference computer communications security ccs pages san francisco ca usa 
acm press 
maurer 
indistinguishability random systems 
advances cryptology eurocrypt volume lncs pages amsterdam netherlands 
springer 
micciancio 
adaptive security symbolic encryption 
proc 
nd theory cryptography conference tcc volume lncs pages cambridge ma usa 
springer 
micciancio warinschi 
completeness theorems abadi rogaway logic encrypted expressions 
journal computer security 
preliminary version wits 
micciancio warinschi 
soundness formal encryption presence active adversaries 
proc 
st theory cryptography conference tcc volume lncs pages cambridge ma usa 
springer 
warinschi 
computational analysis needham schroeder protocol 
proc 
th ieee computer security foundations workshop csfw pages pacific grove ca usa 
ieee computer society 
yao 
theory applications trapdoor functions 
rd ieee symposium foundations computer science focs pages chicago il usa 
ieee computer society 
appendix algorithmic interpretation expressions type systems algorithm interpretation keys convert return algorithm convert keys return blocks return convert convert return convert return algorithmic interpretation expressions time pad algorithm keys kl return algorithm keys return blocks return return return definition interpretation formal expressions 
ki general symmetric encryption scheme index set ki denoting probability fields key generation pre denoting probability field randomness encryption 
exp set valid expressions 
valid expression probability space prm defined recursively prk keys prb blocks pr prm prn pr pre prm 
just trivial probability space elementary event tensor product stands product probability 
suppose function keys ki assigning key generations keys keys keys bijection enumerating keys keys 
keys pr keys 
keys pr pr keys function keys strings defined called interpreting function satisfies properties valid expressions blocks arbitrary keys keys 

keys keys 
keys keys denote distribution 
clearly definition necessarily defined depending dome simply assume dome cause problem possibility restrict set valid expressions elements interpretation defined 
