partitioning dynamic load balancing numerical solution partial differential equations james teresco karen devine joseph flaherty department computer science williams college ma usa cs williams edu discrete algorithms mathematics department sandia national laboratories albuquerque nm usa sandia gov department computer science rensselaer polytechnic institute troy ny usa cs rpi edu summary 
parallel simulations partitioning load balancing algorithms compute distribution application data processors 
effectiveness distribution greatly influences performance parallel simulation 
decompositions balance processor loads keeping application communication costs low preferred 
wide variety partitioning load balancing algorithms developed effectiveness depends characteristics application 
chapter review partitioning algorithms strengths weaknesses various pde applications 
discuss current efforts improving partitioning algorithms applications architectures 
distribution data cooperating processes key factor efficiency parallel solution procedures partial differential equations pdes 
distribution requires data partitioning procedure distributed data structures realize decomposition 
applications constant workloads static partition static load balance computed serial parallel pre processing step computation 
applications adaptive finite element methods workloads unpredictable change computation requiring dynamic load adjust decomposition computation proceeds 
partitioning approaches attempt distribute computational equally minimizing interprocessor communication costs 
communication costs governed amount data shared cooperating processes communication volume number partitions sharing data number messages 
dynamic load balancing procedures operate parallel distributed data execute quickly minimize data teresco devine flaherty movement making new data distribution similar possible existing 
partitioning problem defined detail section 
numerous partitioning strategies developed 
various strategies distinguished trade offs partition quality amount data movement partitioning speed 
characteristics application computation communication ratio cost data movement frequency repartitioning determine strategies appropriate 
example geometric algorithms recursive bisection space filling curve partitioning provide high speed medium quality decompositions depend geometric information particles spatial coordinates element centroids 
graph algorithms provide higher quality decompositions connectivity application data higher cost 
strategies relative trade offs described detail section section 
partitioning procedures implemented directly applications application specific data structures 
approach provide high execution efficiency usually limits application single procedure burdens application programmer partitioning concerns 
number software libraries available provide high quality implementations partitioning procedures provide flexibility switch available methods free application programmer details 
software packages described section 
existing methods successful research challenges remain 
new models hypergraphs accurately model communication 
multi criteria partitioning improve efficiency different phases computation different costs 
resource aware computation achieved adjusting partitioning parts computation processing memory communication resources needed efficient execution modern hierarchical heterogeneous computer architectures 
current research issues explored section 
partitioning dynamic load balancing problems common approach parallelizing pde solution procedures assigns portions computational domain cooperating processes parallel computation 
typically process assigned processor 
data distributed processes process computes solution local data subdomain 
inter process communication provides data needed process owned different process 
model introduces complications including assigning data subdomains partitioning data distributed dynamic load balancing ii constructing maintaining distributed data structures allow efficient data migration access data assigned processes partitioning dynamic load balancing iii communicating data needed solution process 
focus chapter issue data partitioning 
partitioning problem computational pde simulation associated certain objects computation 
particle simulations computation associated individual particles adjusting distribution particles processors changes processor load balance 
mesh applications associated entities mesh elements surfaces nodes decompositions computed respect entities combination entities nodes elements 
partitioning problem division objects groups subdomains assigned cooperating processes parallel computation 
simplest partitioning algorithm attempts assign equal numbers objects partitions minimizing communication costs partitions 
partition subdomain consists data uniquely assigned partition union subdomains equal entire problem domain 
example shows dimensional mesh elements divided subdomains 
communication partitions consists exchanges solution data adjacent objects assigned different partitions 
example finite element simulations ghost elements representing element data needed assigned subdomain updated communication neighboring subdomains 
data distribution commonly parallelization pde applications assumed loss generality rest chapter data layouts possible 
mitchell full domain partition example process assigned disjoint subdomain refined mesh 
process coarser mesh generated rest problem domain giving process view entire domain 
layout reduces amount communication needed update subdomain boundary values adaptive multigrid cost extra degrees freedom computation 
similar idea applied parallel solution procedures bank holst reduce communication costs elliptic problems 
objects may weights proportional computational costs objects 
nonuniform costs may result variances computation time due different physics solved different objects degrees freedom element adaptive refinement small time steps taken smaller elements enforce timestep contraints local mesh refinement methods 
similarly nonuniform communication costs may modeled assigning weights connections objects 
partitioning goal assigning equal total object weight subdomain minimizing weighted communication cost 
teresco devine flaherty subdomain subdomain subdomain subdomain fig 

example dimensional mesh left decomposition mesh subdomains right 
dynamic repartitioning load balancing problem workloads dynamic computations evolve time partitioning approach works static problem slowly changing problem may efficient highly dynamic computation 
example finite element methods adaptive mesh refinement process workloads vary dramatically elements added removed mesh 
dynamic repartitioning mesh data called dynamic load balancing necessary 
dynamic repartitioning needed maintain geometric locality applications crash simulations particle methods 
crash simulations example high parallel efficiency obtained subdomains constructed geometrically close elements 
similarly particle methods particles influenced physically near particles distant ones assigning particles processes geometric proximity particles reduces amount communication needed compute particle interactions 
dynamic load balancing goals partitioning additional constraints procedures operate parallel distributed data ii execute quickly dynamic load balancing may performed frequently iii incremental small changes workloads produce small changes decomposition cost redistribution mesh data significant part dynamic load balancing step 
expensive procedure may produce result better faster procedure obtain lower quality decomposition workloads change short time 
partition quality assessment partitioning dynamic load balancing goal partitioning minimize time solution corresponding pde solver 
number statistics may computed decomposition indicate suitability application 
obvious measure partition quality computational load balance 
assigning amount processor necessary avoid idle time processors 
accurate way measure imbalance instrumenting software determine processor idle times 
imbalance reported respect number objects assigned subdomain sum object weights case non uniform object computation costs 
computational load balance ensure efficient parallel computation 
communication costs considered 
task corresponds minimizing number objects sharing data subdomain boundaries number adjacencies bounding surface subdomain approximates amount local data communicated perform computation 
example element decompositions mesh applications communication cost approximated number element faces boundaries subdomains 
graph partitioning metric referred edge cuts see section similar metric subdomain surface index percentage element faces subdomain lie subdomain boundary 
variations surface index estimate cost interprocess communication 
maximum local surface index largest surface index subdomains global surface index measures percentage element faces subdomain boundaries 
dimensions surface indices thought surface volume ratios concepts surface volume expanded conventional notions volume subdomain elements subdomain boundaries considered surface global surface index approximates total communication volume maximum local surface index approximates maximum communication needed subdomain 
number people pointed flaws minimizing edge cut global surface index statistics 
number faces shared subdomains necessarily equal communication volume subdomains element easily share faces elements neighboring subdomain element data communicated neighbor 
second interconnection network latency significant component communication cost interprocess connectivity number processes process exchange information solution phase significant factor performance total volume communication 
third communication balanced necessarily minimized 
teresco devine flaherty fig 

example number elements subdomain boundary accurate measure communication costs 
shading indicates subdomain assignments 
element indicated needs send value neighbors subdomain value need communicated 
balanced communication load corresponds small maximum local surface index 
measure partition quality internal connectivity subdomains 
having multiple disjoint connected components subdomain known subdomain splitting undesirable 
domain decomposition methods solution linear systems converge slowly partitions property 
additionally relatively small disjoint part subdomain merged neighboring subdomain boundary size decrease improving surface indices 
subdomain aspect ratio reported important factor partition quality particularly iterative methods conjugate gradient cg multigrid solve linear systems 
provide definitions subdomain aspect ratio useful ratio square radius smallest circle contains entire subdomain subdomain area 
show number iterations needed preconditioned cg procedure grows subdomain aspect ratio 
furthermore large aspect ratios lead larger boundary sizes 
geometric locality elements important indicator partition effectiveness applications 
mesh connectivity provides reasonable approximation geometric locality simulations represent geometric locality simulations 
simulation automobile crash example bumper far apart mesh quite close geometrically 
geometric locality important particle methods natural representation connectivity available 
quality metrics connectivity appropriate types simulations 
partitioning dynamic load balancing partitioning dynamic load balancing taxonomy variety partitioning dynamic load balancing procedures developed 
single procedure ideal situations alternatives commonly 
section describes approaches grouping geometric methods global graph methods local graph methods 
geometric methods examine coordinates objects partitioned 
graph methods topological connections objects 
geometric graph methods operate global 
local graph methods operate neighborhoods processes existing decomposition improve load balance 
section describes methods relative merits discussed section 
geometric methods geometric methods objects spatial coordinates objects computational weights computing decomposition 
example mesh partitioning mesh entities coordinates nodal coordinates element centroids surface element centroids 
geometric methods assign objects physically close partition way balances total weight objects assigned partition 
goal particularly effective applications objects interact geometrically close particle methods crash simulations 
recursive bisection recursive bisection methods divide simulation objects equally weighted sets bisection algorithm applied set number sets equal number desired partitions 
description implies number partitions power minor changes algorithm needed allow arbitrary number partitions 
known geometric bisection method recursive coordinate bisection rcb developed berger 
rcb sets computed cutting problem geometry plane orthogonal coordinate axis see left 
plane direction selected orthogonal longest direction geometry position computed half object weight side plane 
twist rcb jones unbalanced recursive bisection algorithm halves problem geometry set objects assigns processes half proportionally total object weight half 
teresco devine flaherty cut cut cut cut cut cut fig 

example rcb cuts coordinate axes left rib cuts principal axis inertia right 
rcb recursive inertial bisection rib uses cutting planes bisect geometry 
rib direction plane computed orthogonal long directions actual geometry coordinate axis see right 
treating objects point masses direction principle inertia geometry computing eigenvectors matrix assembled point masses 
space filling curves second class geometric utilizes dimensional traversal linearization order objects groups objects 
determining dimensional ordering subdomains formed contiguous segments linearization 
technique produces formed subdomains ordering preserves locality objects close linearization close original coordinate space 
linearization achieved space filling curves sfcs 
sfcs provide continuous mappings dimensional dimensional space 
linearize spatially distributed data partitioning storage memory management computational geometry 
sfcs typically constructed recursively single stencil 
level refinement replaces segments sfc new copy curve stencil subject spatial rotations reflections 
sfc come arbitrarily close point space 
importantly partitioning sfcs preserve locality edwards defines formally 
orderings different degrees complexity locality possible commonly morton hilbert orderings included 
morton code peano ordering simple sfc traverses quadrant children pattern order ii iii iv 
pattern refinement identical ancestors rotations reflections performed 
ii iv iii partitioning dynamic load balancing fig 

template curve morton ordering left level refinement center adaptive refinement right 
large jumps linearization particularly curve transitions quadrant ii quadrant iii morton ordering preserve locality 
jumps apparent dimensions 
simplicity morton ordering viable circumstances provides base ordering sfcs 
ii iv iii fig 

template curve hilbert ordering left level refinement center adaptive refinement right 
hilbert ordering uses peano hilbert sfc order quadrants 
uses bracket template rotations inversions keep quadrants closer neighbors 

hilbert ordering locality preserving tends useful partitioning 
sfc orderings applied directly objects objects spatial coordinates 
object assigned unique key representing object position sfc 
key number range specifies point sfc passes closest object 
object ordered keys ordering done global sorting binning traversing octree representing sfc 
dimensional ordering partitioned appropriately sized pieces objects piece assigned subdomain 
teresco devine flaherty sfc partitioning warren salmon gravitational simulations 
morton ordering acknowledged hilbert ordering improve locality 
oden browne edwards hilbert sfc ordering finite element meshes 
oden choose cuts sfc balance computational hp adaptive computation 
pilkington baden apply sfcs dynamic load balancing uniform mesh computational workloads vary 
looked sfcs partitioning structured grids undergo adaptive refinement 
octree partitioning implements sfc partitioning octree data structures commonly mesh generation 
mitchell refinement tree partitioning uses nodal connectivity adaptively refined meshes coordinate values generate sfc mesh elements approach strictly geometric method resulting decompositions qualitatively identical sfc produced decompositions 
global graph partitioning popular powerful class partitioning procedures connectivity information spatial coordinates 
methods fact partitioning problem section viewed partitioning induced graph objects serve graph vertices connections objects graph edges 
example shows induced graph mesh elements objects partitioned serve vertices graph shared element faces define graph edges 
fig 

example dimensional mesh left induced graph 
way partition graph obtained dividing vertices subsets vk vk vi vj subset subset partitioning dynamic load balancing subset subset fig 

way partitioning graph 
shows possible decomposition graph induced mesh 
vertices edges may weights associated representing computation communication costs respectively 
goal graph partitioning create subsets vk equal vertex weights minimizing weight edges cut subset boundaries 
edge eij vertices vi vj cut vi belongs subset vj belongs different 
edges cut 
algorithms provide optimal partitioning np complete heuristic algorithms generally 
graph partitioning related back mesh partitioning problem creating subdomains mesh corresponding subset vi 
right shows partitioning mesh graph partitioning 
number algorithms developed partition graphs 
developed static intended preprocessing step dynamic load balancing procedure 
multilevel procedures operate parallel dynamic load balancing 
greedy partitioning applied graph partitioning mesh partitioning problem 
graph partitioned greedy algorithm gr builds subdomain starting vertex adding adjacent vertices subdomain target size reached 
procedure chooses unassigned vertex builds subdomain 
reports success procedures 
greedy procedures components commonly multilevel described 
teresco devine flaherty fig 

example greedy partitioning small mesh 
numbers indicate order elements added subdomain constructed 
spectral partitioning known static graph partitioning method recursive spectral bisection rsb 
rsb laplacian matrix graph constructed 
diagonal entry lii degree vertex non diagonal entries lij edge eij exists graph 
eigenvector associated smallest non zero eigenvalue divide vertices sets 
median value 
xi xi median vertex assigned set assigned second set 
bisection procedure repeated subgraphs number sets equal number desired partitions 
rsb generally produces high quality partitions 
eigenvector calculation expensive rsb primarily static partitioning 
strategies additional eigenvectors compute partitions stage proven effective reducing cost partition 
multilevel partitioning far successful global graph algorithms static partitioning multilevel graph evidenced number static graph partitioning packages available :10.1.1.106.4101:10.1.1.38.376
multilevel methods operation cycle multigrid solvers initial solution computed coarse representation graph obtain better solutions finer representations 
multilevel graph partitioning involves major phases coarsening construction sequence smaller graphs approximate original ii partitioning coarsest graph iii uncoarsening projection partitioning coarsest graph finer graphs local optimization applied improve partitioning step 
simple example procedure small graph levels coarsening shown 
partitioning dynamic load balancing fig 

multilevel partitioning induced graph 
vertex matching leads coarse graph 
second round vertex matching produces coarse graph 
coarsest graph partitioned 
graph level partitioning optimized 
second level uncoarsening round local optimization partitioning produces final way partitioning shown 
coarsening procedures typically vertex matching algorithm identifies vertices combined create coarse vertices 
set edges coarse vertex taken union edges combined vertices 
sum combined vertices weights coarse vertex weight 
way structure workloads input graph preserved coarse representations 
matching level done randomly selecting unmatched vertices heuristics :10.1.1.106.4101
example heavy edge matching combines vertices sharing edge heaviest edge weight sug teresco devine flaherty vertices strongest affinity combined 
coarsest graph partitioned 
graph small spectral method efficiently :10.1.1.106.4101
faster greedy methods produce lower quality coarse partitions local optimizations uncoarsening phase improve partition quality 
local optimization may point attempt encourage incrementality 
geometric procedure sfc may coarse partitioning 
coarse decomposition projected finer graphs refinements partitions graph level 
typically local optimization technique reduces communication metric maintaining improving load balance 
local optimization approaches kernighan lin kl graph bisection algorithm linear time implementation fiduccia fm 
techniques series vertex moves partition measuring gain improvement metric move moves high gain accepted 
karypis kumar perform iterations kl procedure noting gain usually achieved iteration 
hendrickson leland continue kl procedure allow discovery sequences moves individually making decomposition worse may lead net improvement 
allows procedure escape local minima 
walshaw define relative gain value vertex intended avoid collisions vertices opposite sides boundary selected move 
parallel implementation multilevel graph allowed dynamic load balancing 
methods produce high quality partitionings higher cost geometric methods 
graph inherently incremental modifications local methods described effective dynamic repartitioning 
local graph methods adaptive computation dynamic load balancing may required frequently 
applying global partitioning strategies adaptive step costly relative solution time 
number dynamic load balancing techniques intended fast incrementally migrate data heavily lightly loaded processes developed 
referred local methods 
global partitioning methods local methods limited view application workloads 
consider workloads small overlapping sets processors improve balance set 
heavily loaded processors set transfer objects heavily loaded processors set 
sets defined parallel architecture processor partitioning dynamic load balancing connectivity connectivity application data 
sets overlap allowing objects move sets iterations local method 
small changes application workloads occur say adaptive refinement iterations local method correct imbalances keeping amount data migrated low 
dramatic changes application workloads iterations local method needed correct load imbalances cases invocation global partitioning method may result better cost effective decomposition 
local methods typically consist steps computing map nodal weight shifted heavily loaded lightly loaded processors ii selecting objects nodes moved satisfy map 
different strategies step 
strategies computing map amount data shifted processes diffusive algorithm cybenko 
processor connectivity application communication patterns describe computational mesh equation representing workflow solved order finite difference scheme 
stencil scheme compact information neighboring processes method local 
variations strategy developed reduce data movement improve convergence 
hu blake take global view load distributions computing diffusion solution minimizing flow edges graph processes 
method parallel graph partitioning libraries 
diffusion methods coupled multilevel graph see section improve effectiveness 
techniques accelerating convergence diffusion schemes include higher order finite difference schemes dimensional exchange 
watts second order implicit finite difference scheme solve diffusion equation scheme converges global balance fewer iterations requires communication iteration 
dimensional exchange hypercube architecture assumed 
algorithm architectures logically mapping architecture hypercube 
processes exchange neighbors dimension hypercube looping dimensions workloads balanced 
demand driven models common 
models operate ways underloaded processes request overloaded neighboring processes ii overloaded processes send underloaded neighbors 
result similar diffusion algorithms nodes transferred subset neighbors distributed neighbors 
version model shown effective ii majority load balancing performed underloaded process overloading receiving process avoided 
diffusion algorithm neighbors teresco devine flaherty defined physical processor network logical data connections 
iterative tree balancing procedure groups processes trees requests moving processes trees 
global view accelerates convergence diffusion increases average number neighboring processes process application communication graph 
second step local method deciding objects graph nodes move satisfy workload transfers computed step 
typically variants kl fm local optimization algorithms refinement multilevel partitions 
object gain specific goal achieved transferring object process computed 
options gain function 
commonly weight graph edges cut subdomain boundaries minimized 
goals include minimizing amount data migrated minimizing number process neighbors optimizing subdomain shape combination goals 
set objects producing highest gain selected migration 
selection continues actual workload transferred roughly equal desired workload transfers 
algorithm comparisons number theoretical empirical comparisons various partitioning strategies performed 
selection method effective application depends trade offs incrementality speed quality tolerated application 
pde solver uses single decomposition computation consider strategies produce high quality partitions concern execution speed partitioner 
solver uses frequent adaptivity want consider strategies execute quickly incremental emphasis partition quality 
procedure readily provide adjacency information restricted geometric methods 
section summarizes cites key results 
rcb geometric method coordinate information needed 
incremental suitable dynamic load balancing 
executes quickly 
moderate quality decompositions 
cutting planes help keep number objects subdomain boundaries small shaped meshes 
unfortunate cuts highly refined regions complex domain geometry lead poor decompositions 
produces uniform subdomain aspect ratios rcb large variation object density 
partitioning dynamic load balancing conceptually simple straightforward implement parallel 
maintains geometric locality 
simple determine intersections objects subdomains parallel contact detection smoothed particle hydrodynamics simulations subdomains described simple 
rib geometric method coordinate information needed 
incremental may unsuitable dynamic load balancing 
executes quickly rcb 
slightly higher quality decompositions rcb lower quality spectral multilevel graph partitioning 
unfortunate cuts highly refined regions cause poor decompositions 
conceptually simple straightforward implement parallel 
maintains geometric locality 
simple determine intersections objects subdomains parallel contact detection smoothed particle hydrodynamics simulations 
sfc geometric method coordinate information needed 
incremental suitable dynamic load balancing 
executes quickly 
slightly lower quality decompositions geometric bisection methods 
conceptually simple straightforward implement parallel 
choice sfc depends locality requirements hilbert usually best 
global ordering induced sorting sfc keys exploited order data improve cache performance computation provide automated translations global process numbering schemes 
possible determine intersections objects subdomains parallel contact detection smoothed particle hydrodynamics simulations 
greedy partitioning graph method connectivity information required 
incremental may unsuitable dynamic load balancing 
executes quickly 
medium quality decompositions better rib respect subdomain aspect ratio 
tends leave subdomains partitions computed 
difficult implement parallel 
maintain geometric locality 
spectral graph partitioning teresco devine flaherty graph method connectivity information required 
incremental may unsuitable dynamic load balancing 
van developed modifications include incrementality 
executes slowly 
high quality decompositions 
difficult parallelize geometric methods 
maintain geometric locality 
suitable primarily static partitioning 
multilevel graph partitioning graph method connectivity information required 
incremental may unsuitable dynamic load balancing 
metrics may include migration cost improve incrementality 
executes slowly 
high quality decompositions 
difficult implement parallel 
maintain geometric locality 
local graph methods graph method connectivity information required 
incremental suitable dynamic load balancing 
usually execute quickly iterations may needed global balance 
sophisticated techniques expensive 
high quality decompositions starting decomposition 
straightforward implement parallel incorporated multilevel strategies 
useful post processing step methods improve partition quality 
software software packages available provide static dynamic load balancing applications 
packages application developers access variety high quality implementations partitioning algorithms 
packages include supporting functionality data migration tools unstructured communication tools commonly needed applications load balancing 
packages saves application developers effort learning implementing partitioning algorithms allowing compare partitioning strategies applications 
packages available open source software see bibliography entries packages cited distribution details 
static partitioning software typically pre processor application 
ways stand tool function call application 
stand mode input files describe problem partitioning dynamic load balancing domain partitioned format files determined partitioning software 
computed decomposition written files 
application read decomposition files distribute data appropriately 
function call interfaces static allow called directly applications pre processing phases application 
graph partitioning packages developed static load balancing include chaco metis party 
tools run serial stand function interfaces 
stand mode users provide input files describing problem domain terms graph listing vertices objects edges vertices vertex edge weights possibly coordinates 
function call interfaces accept graph description problem arrays compressed sparse row csr format 
modes applications convert application data appropriate graph format 
necessity dynamic load balancing software uses function call interfaces file interfaces unacceptable balancing computation 
similarly dynamic load balancing software executed parallel assuming existing distribution data parallel execution required maintain scalability application 
types dynamic partitioning software available algorithm specific libraries toolkits partitioning utilities 
widely algorithm specific libraries 
provide multi level diffusive graph partitioning 
serial counterparts accept input csr format extensions describing existing partition assignment vertices arrays describing application data graph compressed format built application 
includes support multiple weights vertex edge enabling multi constraint multi objective partitioning see section 
allows multiple vertex weights multiphase applications see section network description allow partitioning heterogeneous computing systems see section 
load balancing toolkits zoltan drama incorporate suites load balancing algorithms additional functionality commonly needed dynamic applications 
zoltan drama include geometric implementations toolkits graph interfaces 
enable comparisons various methods providing common interface allowing applications select method single parameter 
provide support moving data processors establish new decomposition 
zoltan toolkit provides parallel dynamic load balancing data management services wide range applications including particle simulations mesh simulations circuit simulations linear solvers 
includes geometric bisections methods rcb rib space filling curve methods octree refinement tree graph partitioning teresco devine flaherty 
graph partitioning libraries zoltan design data structure neutral zoltan require application build particular data structures zoltan 
callback function interface provides simple general way applications provide data zoltan 
applications provide simple functions returning lists objects partitioned coordinates objects relationships objects 
zoltan calls functions obtain application information needed build data structures 
application implements callback functions switching load balancing methods requires changing parameter 
zoltan includes number utilities simplify development dynamic applications 
data migration tools assist movement data processors move old decomposition new 
zoltan information application data structures update migration 
callback functions pack unpack data communication buffers migration tools perform communication needed data migration 
zoltan unstructured communication package provides simple mechanism complex communication processors freeing application developers details individual message sends receives 
distributed data directory provides efficient scalable utility locating data memory space processes 
key kernels contact detection simulations finding partitions owning points regions space included zoltan geometric methods 
drama dynamic re allocation meshes parallel finite element applications toolkit provides parallel dynamic load balancing support services mesh applications 
drama assumes basic data structure mesh enables partitioning mesh nodes elements 
mesh input drama array arguments 
zoltan drama provides number partitioning strategies including recursive bisection methods graph partitioning interfaces 
drama includes robust cost model partitioning 
model accounts computation communication costs determining effective decompositions 
assumes mesh data structure drama includes sophisticated support data migration zoltan 
migrates input mesh new location migrated mesh serve starting point application data migration 
drama provides support heterogeneous computing architectures network description see section 
includes extensive support contact detection crash simulations 
load balancing tools tied closely specific applications exist 
example plum system provides dynamic load balancing applications adaptively refined meshes 
goal minimize loadbalancing overhead adaptive computations 
balances respect coarse mesh adaptive simulation element weights pro partitioning dynamic load balancing number elements coarse element refined 
uses external partitioning library compute decomposition uses similarity matrix remap partitions way minimizes data movement old new decompositions 
example library produces decompositions structured adaptive mesh refinement applications 
assuming refined mesh represented tree uniform grids uses sfc algorithm distribute grids processors evenly distribute attempting minimize communication grids 
load balancing systems included parts larger parallel run time systems see charm 
current challenges parallel simulations environments sophisticated partitioning algorithms address new issues application requirements 
software design allows algorithms compared reused important step carefully designed libraries support applications benefit application developers serving test beds algorithmic research 
existing need additional functionality support new applications 
partitioning models accurately represent broader range applications including non symmetric non square highly connected relationships 
partitioning algorithms need sensitive state art heterogeneous computer architectures adjusting assignments relative processing memory communication resources 
hypergraph partitioning development robust partitioning models important load balancing research 
graph models see section considered effective models mesh pde simulations limitations larger classes problems electrical systems computational biology linear programming 
new problems highly connected heterogeneous symmetric mesh pde problems 
alternative graphs hypergraphs model application data :10.1.1.40.9288
hypergraph hg consists set vertices representing data objects partitioned set hyperedges connecting vertices allowing larger sets vertices associated edges hypergraph model overcomes limitations graph model 
key limitation graph model edge cut metric approximates communication volume induced decomposition see section 
approximation adequate traditional finite element finite difference simulations sufficient highly teresco devine flaherty connected unstructured data 
hypergraph model number hyperedge cuts equal communication volume providing effective partitioning metric 
describe greater expressiveness hypergraph models graph models :10.1.1.40.9288
edges graph model non directional imply symmetry relationships making appropriate problems represented square structurally symmetric matrices 
systems non symmetric structure represented symmetrized model adding new edges graph skewing communication metric 
directed graph model adopted improve accuracy communication metric 
likewise graph models represent rectangular matrices arising linear programming 
hendrickson propose bipartite graphs 
matrix vertices mi 
represent rows vertices nj 
represent columns 
edges eij connecting mi nj exist non zero matrix entries aij 
graph models number edge cuts approximates communication volume 
hypergraph models hand imply symmetry relationships allowing structurally non symmetric rectangular matrices represented 
example rows rectangular matrix represented vertices hypergraph 
matrix column represented hyperedge connecting non zero rows column :10.1.1.40.9288
improved communication metric expressiveness hypergraph models lead impressive results 
hypergraph partitioning report reductions communication volume compared graph partitioning matrices traditional finite difference applications :10.1.1.40.9288
broader range matrices including examples linear programming circuit simulations stochastic programming hypergraph partitioning produced reductions average 
time compute hypergraph decomposition greater required compute graph decomposition 
hypergraph partitioning effectiveness demonstrated areas including vlsi layout sparse matrix decompositions database storage data mining 
serial hypergraph available hmetis patoh 
research parallel hypergraph partitioning includes disk implementation partitioning markov matrices distributed memory implementation zoltan 
parallel implementation needed hypergraph partitioning viable large simulations 
additionally incremental hypergraph algorithms analogous diffusive graph algorithms needed dynamic applications 
multi criteria partitioning partitioning dynamic load balancing load balancing research focused cases having single load balanced 
multi phase simulations different loads phase simulation 
example simulation include fluid flow solid mechanics phases 
crash simulations typically finite element solve phase contact detection phase 
finite element simulation matrix assembly matrix solve phases may significantly different load characteristics depending physics problem 
approach balancing multi phase simulations separate decompositions phase mapping data decompositions needed 
approach great success crash simulations static graph decompositions finite element phase dynamic geometric decompositions contact detection data transferred decompositions needed phases 
idea having single decomposition balanced respect multiple loads attractive 
decomposition mapping data needed phases reducing application communication costs 
object balanced vector weights associated th component represent object workload phase single decomposition generated balances vector component 
walshaw developed multiphase graph partitioner 
assuming components weight vector represent vertex participation phase say type vertex phase vertex participates 
balance type vertex separately maintaining partition information lower types stationary vertices partitioning higher types 
computing partition vertices type vertices type partition represented single partition assignment fixed particular partition edges stationary vertices vertices type maintained represent data dependencies phases 
standard graph partitioner partition type vertices attempting minimize cut edges graph partitioner assign type vertices partition type vertices connected keeping inter phase communication costs low 
multi constraint graph partitioning model karypis metis uses vertex weight vectors create multiple load balancing constraints 
model compute multiphase decompositions decompositions respect multiple criteria workloads memory usage 
approach built multi level framework commonly graph partitioning see section modifications coarsening coarse partitioning refinement steps teresco devine flaherty accommodate multiple vertex weights 
coarsening metric single constraint partitioning select vertices combined metric combines vertex neighboring vertex sharing heaviest edge weight 
multi constraint partitioning ties combinations metric value broken balanced edge metric attempts weights combined vertex close value possible uniform weights easier balance coarse partitioning refinement steps 
greedy recursive graph bisection algorithm compute coarse partition level recursion subdomains created removing vertices initially contains entire domain adding initially empty 
multi constraint case vertices selected ability reduce heaviest weight 
refinement kl fm procedures 
multi constraint partitioning queues vertices moved maintained weight neighboring partition vertices selected ability reduce maximum imbalance weights reducing number edges cut 
enforce balance constraints multi constraint partitioning additional shifting vertices processors regard increases edge cut weight needed refinement 
geometric preferred applications boman pursued multi criteria partitioning geometric specifically rcb 
implementation included zoltan 
rcb consists series dimensional partitioning problems objects ordered linearly coordinate values corresponding direction cut 
approaches objects vector weights vi representing load balance criteria 
imposing multiple constraints boman formulate dimensional problem optimization problem objective find cut min max vi vi monotonically non decreasing function component input vector typically norm 
objective function unimodal respect words starting increasing objective decreases point objective starts increasing point defines optimal bisection value 
note objective may locally flat constant unique minimizer 
optimal cut computed coordinate direction cut producing best balance accepted 
general computing multi criteria decompositions difficult number criteria number partitions increases 
result partition quality degrade 
likewise multi criteria partitions expensive compute single criterion partitions extra cost partitioning dynamic load balancing may justified improved load balance reduction data transfer 
resource aware balancing cluster grid computing hierarchical heterogeneous computing systems increasingly common target environments large scale scientific computation 
heterogeneity may exist processor computing power network speed memory capacity 
clusters may consist networks multiprocessors varying computing memory capabilities 
grid computations may involve communication slow interfaces vastly different architectures 
modern supercomputers large clusters hierarchical network structures 
characteristics environment change computation due increased multitasking network traffic 
maximum efficiency software adapt dynamically computing environment particular data distributed manner accounts non homogeneous changing computing networking resources 
projects begun address resource aware load balancing heterogeneous hierarchical dynamic computing environments 
octree structures conduct partitioning dynamic execution environments 
account dynamic nature execution environment collect run time measurements wait times processors involved computation 
wait times measure long cpu remains idle processors finish task 
objects assigned load factors proportional wait times respective owning processes 
octant load subsequently computed sum load factors objects contained octant 
octree algorithm balances load factors weight factors number objects contained octant 
walshaw cross conduct multilevel mesh partitioning heterogeneous communication networks 
modify multilevel algorithm seeking minimize cost function model heterogeneous communication network 
model gives static quantification network heterogeneity supplied user network cost matrix 
implements complete graph representing processor interconnections 
graph edge weighted function length path corresponding processors 
sinha framework adaptive system sensitive partitioning load balancing heterogeneous dynamic clusters 
network weather service nws gather information state capabilities available resources compute load capacity node weighted sum processing memory communi teresco devine flaherty cations capabilities 
reported experimental results show system sensitive partitioning resulted significant decrease application execution time 
dynamic resource utilization model drum aggregating information network computing resources execution environment 
minimally monitoring drum collects dynamic information computing networking capabilities usage information determines computing communication powers percentage total assigned processes 
drum uses tree structure represent underlying hierarchical network topologies clusters clusters clusters multiprocessors 
drum dynamic monitoring power computations achieved optimal load distribution heterogeneous clusters 
node network node cpu cpu cpu cpu cpu cpu cpu cpu memory memory processes compute way partitioning smp independently computes way rib partitioning fig 

hierarchical balancing algorithm selection way smp nodes connected network 
teresco implemented hierarchical partitioning procedures zoltan 
procedures guided drum 
hierarchical partitioning allows combination zoltan load balancing procedures different levels subtrees hierarchical machine models 
tradeoffs execution time imbalance partition quality surface indices interprocess connectivity hold greater importance heterogeneous environments making different methods appropriate certain types environments 
example consider cluster smps connected ethernet shown 
costly graph partitioning done partition subdomains assigned smps minimize communication slow network interface possibly expense computational imbalance 
fast geometric algorithm partition independently smp 
teresco reports multilevel graph partitioning achieves fastest computation times benefit hierarchical load balancing particularly maintaining strict load balance smps 
migration minimization costs dynamic load balancing include preparation input partitioner ii execution partitioning algorithm iii migration application data achieve new decomposition 
migration step partitioning dynamic load balancing expensive leading efforts reduce cost 
described section selection appropriate load balancing procedures contributes reduced migration costs 
incremental procedures rcb sfc octree diffusive graph partitioning preferred data migration costs controlled 
unified partitioning strategy computes multilevel graph decomposition scratch remap diffusive decomposition selects better decomposition terms load balance migration costs 
clever techniques application reduce data migration costs 
example straightforward way partitioning dynamic load balancing parallel adaptive computation shown left 
initial mesh partitioned computation proceeds checking periodically determine solution resolution sufficient 
mesh enriched adaptively load rebalanced computation continues 
alternatively rebalancing done mesh enriched error indicators predict refinement predict appropriate weights mesh enrichment right 
predictive balancing approach improve computational balance refinement phase leads data migration redistribution occurs smaller mesh 
predictive balancing individual processors may nearly elements scheduled refinement leading memory overflow processors fact total amount memory available processors sufficient computation proceed refinement 
error indicators predict resulting refinement sufficient accuracy predictive balancing step achieves balanced partitioning refined mesh 
cases corrective load balancing step local methods outlined section may beneficial 
partition initial mesh compute done ok evaluate error ok refine mesh rebalance load done partition initial mesh compute done evaluate error ok rebalance predicted load refine mesh fig 

non predictive left predictive right program flows typical parallel adaptive computation 
done ok teresco devine flaherty techniques load balancing procedures reduce migration costs 
similarity matrix plum represents maximal matching old decomposition new 
old new partitions represented nodes bipartite graph edges old new partitions representing amount data share 
maximal matching numbers new partitions provide greatest overlap old new decompositions data movement 
similar strategies adopted zoltan 
load balancing objectives adjusted reduce data migration 
heuristics local refinement see section select objects movement lowest data movement costs 
select heavily weighted objects satisfy balance criteria lightly weighted objects 
hu blake compute diffusive decompositions achieve load balance subject minimization data movement 
extends idea allowing greater load imbalance data movement costs high minimizes metric combining load imbalance data migration reduce actual time solution load imbalance homogeneous heterogeneous networks 
acknowledgments authors people collaborations discussions andrew bauer diane bennett rob erik boman paul campbell laura dean luis robert bruce hendrickson steve robert sharma ungar vaughan 

flaherty moore wang high order adaptive methods parabolic systems 
physica 
parallel domain decomposition load balancing space filling curves 
proc 
international conference high performance computing pages 
bank holst new paradigm parallel adaptive meshing algorithms 
siam 
comput 
barker evaluation framework dynamic load balancing highly adaptive irregular parallel applications 
proc 
supercomputing phoenix 
barnard parallel multilevel recursive spectral bisection 
baker editors proc 
supercomputing san diego 
barnard simon fast multilevel implementation recursive spectral bisection partitioning unstructured problems 
concurrency practice experience partitioning dynamic load balancing 
log travelling salesman heuristic spacefilling curves 
operation research letters 
bauer efficient solution procedures adaptive finite element methods applications elliptic problems 
phd thesis state university new york buffalo 
berger partitioning strategy nonuniform problems multiprocessors 
ieee trans 
computers 
new metric dynamic load balancing 
appl 
math 
modelling 
space filling curves generation application band reduction 
ieee trans 
inform 
theory 
boman devine hendrickson report parallel repartitioning optimal solver performance 
technical report sand sandia national laboratories albuquerque nm 
boman devine hendrickson mitchell john vaughan zoltan data management services parallel applications 
url www cs sandia gov zoltan 
flaherty shephard szymanski teresco quality partitions produced iterative load balancer 
szymanski editors proc 
third workshop languages compilers runtime systems pages troy 
bui jones heuristic reducing fill sparse matrix factorization 
proc 
th siam conf 
parallel processing scientific computing pages 
siam 
caldwell kahng markov design implementation heuristics vlsi partitioning 
acm experimental 
campbell devine flaherty teresco dynamic octree load balancing space filling curves 
technical report cs williams college department computer science 
cao gilbert teng partitioning meshes lines planes 
technical report csl xerox parc 
ftp xerox com pub gilbert index html 
decomposing irregularly sparse matrices parallel matrix vector multiplications 
lecture notes computer science 
hypergraph partitioning decomposition parallel sparse matrix vector multiplication 
ieee trans 
parallel dist systems 
chang sussman saltz workload partitioning strategy parallel data aggregation 
proc 
th siam conf 
parallel processing scientific computing 
siam 
chatterjee lebeck recursive array layouts fast parallel matrix multiplication 
acm symposium parallel algorithms architectures pages 
cheng 
wei 
improved way partitioning algorithm stable performance 
ieee trans 
computer aided design teresco devine flaherty 
cybenko dynamic load balancing distributed memory multiprocessors 
parallel distrib 
comput 
dagum automatic partitioning unstructured grids connected components 
proc 
supercomputing conference pages los alamitos 
ieee computer society press 
de devine flaherty loy shephard load balancing parallel adaptive solution partial differential equations 
appl 
numer 
math 
devine boman hendrickson teresco flaherty new challenges dynamic load balancing 
technical report technical report cs williams college department computer science 
appear appl 
numer 
math 

devine flaherty parallel adaptive hp refinement techniques conservation laws 
appl 
numer 
math 
devine hendrickson boman st john vaughan zoltan dynamic load balancing library parallel applications user guide 
sandia national laboratories albuquerque nm 
tech 
report sand 
open source software distributed www cs sandia 
gov zoltan 

meyer monien parallel decomposition unstructured fem meshes 
proc 
parallel algorithms irregularly structured problems pages 
springer lncs 
monien load balancing strategies distributed memory machines 
editor parallel distributed processing computational mechanics systems tools pages edinburgh 
saxe 
walshaw shape optimized mesh partitioning load balancing parallel adaptive fem 
parallel comput 
edwards parallel infrastructure scalable adaptive finite element methods application squares collocation 
phd thesis university texas austin 
dynamic load balancing 
proc 
th siam conference parallel processing scientific computing pages 
siam 
flaherty chang teresco boman devine model resource aware load balancing heterogeneous clusters 
technical report cs williams college department computer science 
cluster 
simple efficient automatic fem domain 
computers structures 
simon top software tool mesh partitioning parallel processing 
comp 
sys 
engng 
automatic partitioning unstructured meshes parallel solution problems computational mechanics 
int 
numer 
meth 
engng 
fiduccia mattheyses linear time heuristic improving network partitions 
proc 
th ieee design automation conference pages 
ieee partitioning dynamic load balancing 
flaherty loy shephard szymanski teresco adaptive parallel framework partial differential equations 
griffiths higham watson editors numerical analysis proc 
th dundee biennial conf number pitman research notes mathematics series pages 
addison wesley longman 
flaherty loy shephard szymanski teresco parallel structures dynamic load balancing adaptive finite element computation 
appl 
numer 
math 
flaherty loy shephard szymanski teresco adaptive local refinement octree load balancing parallel solution dimensional conservation laws 
parallel distrib 
comput 
flaherty loy shephard szymanski teresco predictive load balancing parallel adaptive finite element computation 
editor proc 
pdpta volume pages 
flaherty loy shephard teresco software parallel adaptive solution conservation laws discontinuous galerkin methods 
cockburn shu editors galerkin methods theory computation applications volume lecture notes science engineering pages berlin 
springer 
steger finding clusters vlsi circuits 
proc 
ieee intl 
conf 
computer aided design pages 
garey johnson stockmeyer simplified np complete graph problems 
theoretical computer science 
garey johnson computers intractability guide theory np completeness 
freeman 
hagen kahng fast spectral ratio cut partitioning clustering 
proc 
ieee intl 
conf 
computer aided design pages 
hagen kahng new approach effective circuit clustering 
proc 
ieee intl 
conf 
computer aided design pages 
hendrickson graph partitioning parallel solvers emperor clothes 
proc 
irregular volume lecture notes computer science pages 
springer verlag 
hendrickson devine dynamic load balancing computational mechanics 
comput 
methods appl 
mech 
engrg 
hendrickson graph partitioning models parallel computing 
parallel comput 
hendrickson leland chaco user guide version 
technical report sand sandia national laboratories albuquerque 
open source software distributed www cs sandia gov chaco html 

hendrickson leland improved spectral graph partitioning algorithm mapping parallel computations 
siam 
comput teresco devine flaherty 
hendrickson leland multilevel algorithm partitioning graphs 
proc 
supercomputing 
horton multi level diffusion method dynamic load balancing 
parallel comput 
hsieh abel evaluation automatic domain partitioning algorithms parallel finite element analysis 
structural engineering report school civil environmental engineering cornell university ithaca 
hu blake optimal dynamic load balancing algorithm 
preprint dl laboratory warrington wa ad uk 
hu blake emerson optimal migration algorithm dynamic load balancing 
concurrency practice experience 
jagadish linear clustering objects multiple attributes 
proc 
acm sigmod pages 
jones computational results parallel unstructured mesh computations 
comp 
sys 
engng 
krishnan charm portable concurrent object oriented system 
acm sigplan notices 
karypis kumar multilevel algorithms graph 
technical report department computer science university minnesota 
karypis aggarwal kumar shekhar multilevel hypergraph partitioning application vlsi domain 
proc 
th conf 
design automation pages 
acm 
karypis kumar metis unstructured graph partitioning sparse matrix ordering system 
tech 
report university minnesota department computer science minneapolis mn 
open source software distributed www users cs umn edu karypis metis 

karypis kumar fast high quality multilevel scheme partitioning irregular graphs 
siam 
comput 
karypis kumar parallel way partitioning scheme irregular graphs 
siam review 
karypis kumar parallel graph partitioning sparse matrix ordering library version 
university minnesota department computer science engineering army hpc research center minneapolis 
open source software distributed www users cs umn edu karypis metis 

kernighan lin efficient heuristic procedure partitioning graphs 
bell system technical journal 
reddy distributed load balancing design performance analysis 
kuck research computation laboratory 
loy adaptive local refinement octree load balancing parallel solution dimensional conservation laws 
phd thesis computer science dept rensselaer polytechnic institute troy 
lonsdale drama library parallel dynamic load balancing finite element applications 
proc 
ninth siam conference parallel processing scientific partitioning dynamic load balancing computing san antonio 
library distributed license agreement www de drama drama html 

octree partitioning hybrid grids parallel adaptive viscous flow simulations 
int 
numer 
meth 
fluids 
parallel load balancing dynamic execution environments 
comput 
methods appl 
mech 
engrg 
schulz parallel load balancing dynamic execution environments 
proc 
th aerospace sciences meeting exhibit number reno 
mitchell refinement tree partitioning adaptive grids 
proc 
seventh siam conf 
parallel processing scientific computing pages 
siam 
mitchell full domain partition approach distributing adaptive grids 
appl 
numer 
math 
mitchell refinement tree partition parallel solution partial differential equations 
nist journal research 
moon jagadish faloutsos saltz analysis clustering properties hilbert space filling curve 
ieee trans 
knowledge data engng 
morton computer oriented geodetic data base new technique file sequencing 
technical report ibm 
oden feng domain decomposition adaptive hp finite element methods 
proc 
seventh intl 
conf 
domain decomposition methods state college pennsylvania 
biswas plum parallel load balancing adaptive unstructured meshes 
parallel distrib 
comput 
biswas parallel adaptive scheme unstructured grids sp 
proc 
rd international workshop parallel algorithms irregularly structured problems santa barbara 
orenstein spatial query processing object oriented database system 
proc 
acm sigmod pages 
hypergraph models algorithms clustering 
data mining knowledge discovery 
ac publication 
distributed environment load balancing adaptive unstructured meshes 
phd thesis computer science dept rensselaer polytechnic institute troy 
browne edwards common data management infrastructure adaptive algorithms pde solutions 
proc 
sc san jose ca 
browne partitioning dynamic adaptive grid hierarchies 
proc 
th annual hawaii international conference system sciences volume pages 
oden problem decomposition adaptive hp finite element methods 
comp 
sys 
engng 
patrick anderson mapping multidimensional space dimension computer output display 
ieee trans 
computers teresco devine flaherty 
peano sur une qui une aire plane 
mathematische annalen 
pellegrini user guide 
technical report labri universit bordeaux 
library available www labri fr 

pellegrini roman experimental analysis dual recursive bipartitioning algorithm static mapping 
technical report universite bordeaux 
pilkington baden dynamic partitioning non uniform structured workloads spacefilling curves 
ieee trans 
parallel distributed systems 
nar hendrickson graph partitioning complex objectives 
proc 
th int parallel distributed processing symp 
san francisco ca 
hendrickson vaughan gardner transient dynamics simulations parallel algorithms contact detection smoothed particle hydrodynamics 
parallel distrib 
comput 
pothen simon liou partitioning sparse matrices eigenvectors graphs 
siam mat 
anal 
appl 
advances computational mechanics parallel distributed processing chapter party software library graph partitioning pages 
civil comp press 
library distributed free research academic license de fachbereich ag monien research part party html 

sagan space filling curves 
springer verlag 
karypis kumar multilevel diffusion schemes repartitioning adaptive meshes 
parallel distrib 
comput 
karypis kumar new algorithm multi objective graph partitioning 
tech 
report university minnesota department computer science army hpc center minneapolis 
karypis kumar unified algorithm loadbalancing adaptive scientific simulations 
proc 
supercomputing dallas 
karypis kumar wavefront diffusion algorithms dynamic repartitioning adaptive meshes 
ieee trans 
parallel distrib 
syst 
karypis kumar parallel static dynamic graph partitioning 
concurrency computation practice experience 
shephard dey flaherty straightforward structure construct shape functions variable order meshes 
comp 
meth 
appl 
mech 
engng 
shephard flaherty de parallel automated adaptive procedures unstructured meshes 
parallel comput 
cfd number pages 
sur 
simon partitioning unstructured problems parallel processing 
comp 
sys 
engng partitioning dynamic load balancing 
sinha adaptive system partitioning amr applications heterogeneous clusters 
cluster computing 
sohn simon harp scalable parallel dynamic partitioner adaptive mesh computations 
proc 
supercomputing orlando 
homepage 
user uu se research html 
open source software distributed user uu se research download html 

chandra application centric characterization domain sfc parallel samr 
ieee trans 
parallel distrib 
syst 
comparison partitioning schemes blockwise parallel samr algorithms 
proc 
th international workshop applied parallel computing new paradigms hpc industry academia volume lecture notes computer science pages london 
springer verlag 
taylor study factorization fill parallel implementation finite element method 
int 
numer 
meth 
engng 
teresco flaherty hierarchical partitioning dynamic load balancing scientific computation 
technical report cs williams college department computer science 
submitted proc 
para 

teresco ungar comparison zoltan dynamic load adaptive computation 
technical report cs williams college department computer science 

parallel disk algorithm multilevel way hypergraph partitioning 
proc 
th international parallel distributed processing symposium ipdps page santa fe 
van improved spectral bisection algorithm application dynamic load balancing 
parallel comput 
chen ozone retrofit methodology fast generation optimization largescale mesh partitions minimum interface size criterion 
comput 
methods appl 
mech 
engrg 
dimensional data distribution method parallel sparse matrix vector multiplication 
preprint dept mathematics utrecht university 
walshaw cross multilevel mesh partitioning heterogeneous communication networks 
tech 
rep im comp 
math 
sci univ greenwich london se ls uk 
walshaw cross multilevel mesh partitioning heterogeneous communication networks 
generation comput 
syst 
originally published univ greenwich tech 
rep im 
walshaw cross dynamic mesh partitioning load balancing parallel computational mechanics codes 
editor computational mechanics high performance computing pages 
teresco devine flaherty saxe publications stirling 
invited chapter proc 
parallel distributed computing computational mechanics germany 
walshaw cross everett localized algorithm optimizing unstructured mesh partitions 
intl 
supercomputer applications 
walshaw cross everett parallel dynamic graph partitioning unstructured meshes 
parallel distrib 
comput 
walshaw cross multiphase mesh partitioning 
appl 
math 
modelling 
originally published univ greenwich tech 
rep im 
walshaw parallel library user guide version 
university greenwich london uk 
library distributed free research academic license cms gre ac uk walshaw 

warren salmon parallel hashed oct tree body algorithm 
proc 
supercomputing pages 
ieee computer society 
watts practical approach dynamic load balancing 
master thesis 
watts taylor load balancing technique multiphase computations 
proc 
high performance computing pages 
society computer simulation 
wheat fine grained data migration approach application load balancing mp mimd machines 
phd thesis university new mexico department computer science albuquerque 
wheat devine maccabe experience automatic dynamic load balancing adaptive finite element computation 
el shriver editors proc 
th hawaii international conference system sciences pages 
reeves strategies dynamic load balancing highly parallel computers 
ieee parallel distrib 
sys 
wolski spring hayes network weather service distributed resource performance forecasting service metacomputing 
generation comput 
syst 
xu lau decentralized remapping data parallel applications distributed memory multiprocessors 
tech 
rep tr dept computer science university paderborn paderborn germany 
