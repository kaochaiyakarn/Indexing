petri net semantics bpel christian stahl humboldt universit zu berlin institut informatik unter den linden berlin stahl informatik hu berlin de pattern petri net semantics business process execution language web services bpel 
semantics complete covers standard behaviour bpel exceptional behaviour faults events compensation 
business process specified bpel transformed petri net 
contents bpel transformation bpel petri nets transformation approach 
objects 
transformation bpel elementary activities empty 
wait 
assign 
reply 
asynchronous invoke 
synchronous invoke 
throw 
terminate 
transformation bpel structured activities sequence 
flow 

switch 
pick 
transformation bpel link semantic source activity 
target activity 
activity source target element 
summary dead path elimination 
transformation bpel scope state places 
scope 
process 
transformation bpel event handler alarm event handler 
message event handler 
transformation bpel fault handler pattern 
pattern embedded scope 
pattern embedded process 
implicit fault handler 
implicit fault handler embedded scope 
implicit fault handler embedded process 
user defined fault handler 
user defined fault handler embedded scope 
user defined fault handler embedded process 
transformation bpel compensation handler idea transformation 
activity compensate 
compensate embedded compensation handler 
compensate embedded fault handler 
compensate scope embedded compensation handler compensate scope embedded fault handler 
implicit compensation handler 
user defined compensation handler 
user defined compensation handler embeds compensate user defined compensation handler embeds compensate scope 
user defined compensation handler embeds compensate 
classification patterns 
results 

list figures pattern bpel receive case initiate 
pattern bpel receive case initiate 
pattern bpel empty 
pattern bpel wait condition 
pattern bpel wait expression 
pattern bpel assign variable 
pattern bpel assign variable 
pattern bpel reply case initiate 
pattern bpel reply case initiate 
pattern bpel asynchronous invoke case initiate 
pattern bpel asynchronous invoke case initiate 
pattern bpel synchronous invoke case initiate 
pattern bpel synchronous invoke case initiate 
pattern bpel throw 
pattern bpel terminate 
pattern bpel sequence embeds activities 
pattern bpel flow embeds activities 
pattern bpel 
pattern bpel switch case branches 
pattern bpel pick case initiate contains onmessage branches 
pattern bpel pick case initiate contains onmessage branches 
pattern activity source links 
pattern activity target links case 
pattern activity target links case 
pattern activity source target links case 
pattern activity source target links case 
pattern bpel scope 
pattern bpel process 
pattern bpel alarm event handler branches 
pattern bpel message event handler case initiate contains onmessage branches 
pattern bpel message event handler case initiate contains onmessage branches 
pattern embedded scope 
pattern embedded process 
pattern implicit fault handler embedded scope pattern 
pattern implicit fault handler embedded process pattern 
pattern user defined fault handler catch branches embedded scope 
pattern user defined fault handler catch branches embedded process 
compensate pattern embedded compensation handler 
compensate pattern embedded fault handler 
compensate scope pattern embedded compensation handler 
compensate scope pattern embedded fault handler 
pattern implicit compensation handler 
pattern compensation handler compensate 
pattern compensation handler compensate scope 
pattern compensation handler activity compensate 
business process execution language web services bpel part ongoing activities standardize family technologies web services 
textual specification cgk appeared subject revisions 
language contains features previous languages instance ibm wsfl ley microsoft xlang tha 
textual specification course suitable formal methods computer aided verification 
computer aided verification particular model checking possible decide crucial properties composability processes soundness controllability possibility communicate process process terminates desired state 
formal treatment necessary resolve ambiguities inconsistencies language occurred particularly due unification different concepts wsfl xlang 
groups proposed formal semantics bpel 
existing attempts finite state machines ffk fbs process algebras fer state machines fr 
successful unravelling weaknesses informal specification different significance formal verification 
semantics state machines feature complete 
petri nets provide broader basis computer aided verification state machines 
approaches typically support bpel interesting features fault handling compensation handling event handling 
consider petri net semantics bpel 
semantics complete covers standard exceptional behaviour bpel formal feasible model checking 
petri nets elegant technologies theory workflow nets theory controllability mar sch long list verification techniques sch tools sr sch directly applicable 
petri net semantics provides patterns bpel activity 
compound activities contain slots patterns 
way possible translate bpel processes automatically petri nets 
high level petri nets data aspects fully incorporated aspects ignored switching low level petri nets 
structured follows sec 
explain general concepts bpel 
sec 
introduce principles petri net semantics bpel 
sections transform bpel elementary activities sec 
structured activities sec 
semantics links sec 

bpel specific structured activity scope transformed sec 

explain transformation complex components scope event handler fault handler compensation handler sections 
drawn sec 

bpel bpel language describing behaviour business processes web services 
business process described different ways executable business process business protocol 
executable business process focus models behaviour interface partner participant business interaction 
business protocol contrast models interface message exchange partner 
rest internal behaviour hidden 
term bpel process executable business process specified bpel 
execute bpel process means create instance process executed 
specification internal behaviour business process bpel provides kinds activities 
activity elementary activity structured activity 
set elementary activities includes empty doing wait waiting time assign copying value place receive waiting message partner invoke invoking partner reply replying message partner throw signalling fault terminate terminating entire process instance 
structured activity defines causal order elementary activities 
nested structured activities 
set structured activities includes sequence activities ordered sequentially flow activities ordered parallel loop switch selects control path depending data pick selects control path depending timeouts external messages 
important structured activity scope links activity transaction management 
provides fault handler compensation handler event handler correlation sets data variables 
process special scope 
precisely scope business process 
fault handler component provides methods handle faults may occur execution enclosing scope 
contrast compensation handler reverse effects happened execution activities 
help event handler external message events specified timeouts handled 
correlation set identifying instance bpel process message content 
correlation set identifier precisely collection properties messages instance contain 
initialized incoming outgoing message 
important concept bpel links 
link define order concurrent activities flow 
source activity target activity 
source may specify boolean expression status link 
target may specify boolean expression evaluates status incoming links 
bpel provides dead path elimination lr status outgoing links source activity executed anymore set negative 
consider instance activity branch taken switch activity 
type writer font bpel constructs 
forthcoming sections transform bpel algebraic high level petri nets rei specific class high level petri nets 
assume basics petri nets known reader 
section introducing formalism 
explain specific concepts algebraic high level petri nets necessary 
transformation bpel petri nets goal translate bpel process petri net 
translation guided syntax bpel 
bpel process built plugging language constructs 
translate construct language petri net 
net forms pattern respective bpel construct 
pattern interface joining patterns done bpel constructs 
patterns parameter constructs inner constructs 
respective pattern able carry number inner constructs equivalent bpel 
aim keeping properties constructs patterns 
collection patterns forms petri net semantics bpel 
transformation approach detailed look general pattern design 
depicts pattern bpel receive activity 
receive responsible receiving partner request 
identify request sent receive pattern instance process bpel receive specifies correlation set 
pattern fig 
presents receive correlation set initialized 
precisely attribute initiate set 
pattern bpel receive correlation set initialized incoming message initiate set depicted fig 

discuss details receive pattern give general comments notion patterns 
firstly common graphical notations petri nets 
places transitions labelled identifier depicted contrary common notation inside respective petri net node 
addition nodes second label depicted outside node initial 
label show purpose node net 
secondly variable small letters arc inscriptions fault symbolizes single variable variable capital letters symbolizes variables 
thirdly transitions transition guard 
transition fire guard boolean expression evaluated true 
guard depicted braces transition belongs guard 
general pattern framed dashed box 
inside frame structure corresponding bpel construct modelled 
interface established nodes depicted directly frame 
positive control flows top bottom communication processes flows horizontally 
fig 
positive control flow starts token initial ends token finish failed 
outside frame external objects obj 
object place scope pattern variable correlation set process pattern channel 
activity pattern receive pattern fig 
relates places 
label top object defines sort role defined bottom object 
serif free font labels 
guard initial messagetype propertytype obj cs obj channel receive final cs running cs cs guard fault cs stopped failed messagetype pattern bpel receive case initiate 
obj variable sort domain tokens lying arriving place 
object role independent sort 
pattern depicted fig 
activated executed steps 
firstly message taken channel obj correlation set obj read 
values saved variables cs respectively 
second step information analyzed 
message saved variable fault occurs mismatch values receive correlation set correlation set message error 
variable holds old value obj fault holds fault information 
cases pattern finished 
meaning place stopped failed fig 
needs explained 
bpel process forced positive control flow fault occurs activity terminate activated 
bpel specification cgk tells informally requirements scope 
instance activity receive interrupted terminated prematurely cgk 
specification describe realize requirements 
modelling decisions model pattern bpel scope extended pattern see sect 
details equivalent construct bpel 
scope needs stopped pattern controls procedure 
idea remove tokens arc obj depicted vertical line read arc web 
patterns embedded scope pattern patterns bpel activities event handler contain subnet called component 
contrast patterns bpel compensation handler fault handler contain component need stopped 
sta proved process stopped components 
case fig 
component established transitions interface stopped 
call negative control flow activity 
order explain component works consider scope contains just receive throws fault 
leads place failed marked token object consists fault name 
place joined place pattern pattern gets control scope 
stops inner activity scope consequently token produced receive place 
transition fires stopped marked 
place joined place pattern 
contrast transitions consume token stopping receive pattern control flow pattern 
result token produced stopped 
assume obtains priority 
destroy model asynchronous behaviour changing possible set runs 
asynchronous behaviour patterns model aspect sending signal needs time 
consider instance receive patterns executed sequentially 
possible receive finished second receive activated exactly moment signal sent 
patterns possibility taken account 
alternatively different modelling approach possible transition receive pattern positive control flow enabled fault occurred surrounding scope pattern 
fact modelled place marked fault occurred 
course destroy asynchronous character bpel process 
mentioned bpel possible define activity receive correlation set initialized incoming message 
bpel receive specifies attribute initiate set 
means correlation set set read 
constructs specify initiate built patterns 
depicts bpel receive case initiate 
contrast pattern shown fig 
takes message channel correlation set initialized function extracting correlation set message 
message stored variable fault thrown explained fig 

objects objects message channel correlation set variable clock patterns detail 
message sent received message channel bpel 
bpel process instance channel defined porttype operation direction communication input output 
automatically mapped concrete address 
model message channel defined messagetype obj channel receive guard initial final running guard fault stopped failed propertytype obj messagetype obj variable pattern bpel receive case initiate 
role channel sort messagetype 
information bpel channel definition encoded role 
channel depicted right pattern structure process sends request partner 
process requested partner depicted left side 
correlation set identifying instance bpel process message content 
correlation set identifier precisely collection properties messages instance contain 
initialized incoming outgoing message 
model correlation set defined role sort propertytype 
correlation set initialized read see fig 

token permanently respective place 
correlation set initialized incoming outgoing message 
function see fig 
extracts correlation set incoming outgoing message token sort propertytype produced respective object 
define function refer modelling data aspects detail 
bpel variable holding data message 
activity gets copy variable value variable overwritten just part value 
model variable place defined role variable data holds modelled token 
variable sort data messagetype 
get copy variable value read arc overwriting means token consumed edited produced loop respective patterns 
order realize access non initialized variables variable zero 
done syntactical reasons bpel semantics changed 
furthermore need timer model waiting instance 
decided system clock modelled place 
token value time incremented continuously 
clock defined globally process pattern constructs process read 
outgoing arcs respective object 
reading token just means watching time 
clock defined role clock sort time 
transformation bpel elementary activities empty pattern bpel empty depicted fig 

doing activity semantics modelled firing transition 
pattern component established transitions 
wait empty initial final stopped pattern bpel empty 
wait activity allows business process specify delay certain period time certain deadline reached cgk 
build patterns wait condition visualized figures 
model waiting wait initial final stopped time obj clock pattern bpel wait condition 
transition guard control flows respective boolean expression holds 
fig 
pattern bpel wait condition depicted 
initial marked deadline saved variable lower equal current time saved variable guard holds transition fire 
furthermore pattern component established transitions 
pattern bpel wait condition visualized fig 

little bit complex pattern 
having read time stamp control flow wait certain period time saved variable 
sum wait initial timestamp final stopped time obj clock pattern bpel wait expression 
lower equal current time stamp guard holds 
fire 
pattern component established transitions 
assign bpel activity assign copies value variable variable copies value expression variable 
abstraction wsdl see sec 
necessary model actions assign specified cgk 
pattern depicted fig 
copies value variable 
purpose obj read value saved variable second step transition guard specifying occurrence mismatched assignment error evaluated 
holds fault thrown 
obj updated value case fig 
pattern component established transitions 
pattern bpel assign copies value expression variable depicted fig 

transition guard specifies occurrence mismatched assignment error 
holds fires fault thrown 
fires old value variable obj read 
specifies function replaces respective part expression pattern component established transitions 
reply assign guard initial final running guard fault stopped failed messagetype obj variable messagetype obj variable pattern bpel assign variable 
assign guard initial final fault obj guard stopped failed messagetype variable pattern bpel assign variable 
bpel reply allows business process send message holt variable reply message received activity receive 
similar construct receive specifies attribute initiate 
built patterns fig 
shows initiate fig 
shows initiate 
similar respective receive pattern figures 
take look fig 

message taken variable correlation set read 
step transition guard specifying propertytype obj messagetype obj channel reply cs initial final cs running cs cs guard guard fault cs stopped pattern bpel reply case initiate 
failed messagetype obj variable occurrence conflicting request error evaluated 
holds fault occurs 
message sent 
contrast pattern fig 
takes message variable correlation set initialized 
figures pattern component transitions 
propertytype obj messagetype obj channel reply initial final running guard guard fault stopped pattern bpel reply case initiate 
asynchronous invoke failed messagetype obj variable just reply activity asynchronous invoke sends message stored variable 
contrast reply activity message sent reply received message sent request partner 
activity specifies attribute initiate 
built patterns 
visualized fig 
initiate fig 
initiate 
difference respective reply pattern 
asynchronous invoke pattern variable placed left side channel right side reply pattern way round 
explained sec 
process called channel placed right side 
activity reacts partner request corresponding channel placed left side pattern 
messagetype obj variable invoke guard initial cs propertytype obj final cs running cs cs guard fault cs stopped failed messagetype obj channel pattern bpel asynchronous invoke case initiate 
messagetype obj variable invoke initial guard final running guard fault stopped failed propertytype obj messagetype obj channel pattern bpel asynchronous invoke case initiate 
synchronous invoke semantic synchronous invoke activity send request partner wait result 
fact sequential execution asynchronous invoke receive activity 
pattern bpel synchronous invoke composition known patterns 
specifies attribute initiate 
built patterns 
case initiate visualized messagetype obj variable propertytype obj messagetype obj variable initial invoke guard cs final cs running cs cs cs running guard guard guard cs cs fault fault cs cs cs stopped failed propertytype obj messagetype obj channel messagetype obj channel pattern bpel synchronous invoke case initiate 
fig 

pattern component established transitions 
messagetype obj variable propertytype obj messagetype obj variable invoke guard initial final running running guard guard guard fault fault stopped failed propertytype obj messagetype obj channel messagetype obj channel pattern bpel synchronous invoke case initiate 
case correlation sets set initiate depicted fig 

model assume correlation sets defined sending message receiving message initialized 
throw business process generate internal fault activity throw 
respective pattern depicted fig 

puts name fault place failed firing 
pattern need place final signalling fault scope finished pattern 
reason control flow needs passed successor activity enclosing scope 
pattern component established transitions 
terminate throw initial fault stopped failed pattern bpel throw 
section pattern bpel terminate see fig 

activity terminate executed terminate process instance 
model process transferred state terminated pattern terminate initial final terminate terminate terminate stopped pattern bpel terminate 
ing termination process 
scenarios possible process state terminated terminate activity executed done termination process started transferring process state terminated 
pattern component transitions 
contrast throw pattern need place final pattern activity terminate 
consider activity terminate embedded fault handler executed 
active fault handler fully executed order guarantee firstly removing tokens secondly ensure finishing patterns 
having executed fault handler termination process gets control stopping process 
activity throw executed inside fault handler generated fault stops respective fault handler 
fault immediately enclosing scope 
furthermore needed terminate activities executed fault handler concurrently 
model deadlock 
transformation bpel structured activities transform bpel structured activities 
structured activity embeds activity 
embedded activity call inner activity bpel activity 
inner activity visualized patterns 
model important see interfaces inner activity enclosing activity joined 
interface embedded pattern visualized information pattern hidden 
frame places initial final stopped needed neglink visible 
interface concept allows plugging patterns done bpel 
notation simplification generalization inner activity 
means inner activity bpel construct throw pattern bpel throw final place 
neglink abbreviation negative link 
optional place part link pattern interface structured activity pattern interface embeds activity source link 
help neglink status source links inner activity executed anymore set negative 
consider instance activity branch taken switch activity 
words neglink place modelling dead path elimination lr 
neglink depicted pattern suppose respective activity contains activity source link 
patterns structured activities larger basic activity pattern 
extend graphical notation order simplify respective petri nets places identifier joined 
sequence bpel sequence contains activities performed sequentially cgk 
general pattern sequence carry number inner activities depicted fig 

mentioned places identifiers joined initial sequence initial inneractivity final inneractivity initial inneractivity 
possible interleavings initial marked neglink inneractivity 
executed sequentially status source links embedded sequence set negative 
token sequence embedded activities stopped 
places stopped joined places stopped places inner activities 
flow sequence neglink initial inneractivity inneractivity final stopped pattern bpel sequence embeds activities 
flow provides environment performing activities concurrently 
finished synchronized 
general pattern bpel flow carry number inner activities shown fig 

initial neglink marked 
look possible scenarios inner activities executed concurrently synchronized status source links embedded flow set negative 
pattern component established transitions 
token flow embedded activities stopped 
neglink flow inneractivity initial final sync running stopped pattern bpel flow embeds activities 
fired token lying running consumed activated 
furthermore place inner activity marked 
inneractivity 
stopped concurrently 
firing synchronizes 
bpel supports iterative performance specified iterative activity 
iterative activity performed boolean condition longer holds true cgk 
link cross boundary activity respective pattern visualized fig 
contain place neglink 
firstly data stored variable read 
possible scenarios depending evaluation guards guard describes fault case cond describes loop condition fault occurs selection failure loop condition hold 
third scenario loop condition holds 
inneractivity performed loop repeated 
pattern component established transitions 
reading message holt variable possible shown 
variable sort messagetype 
switch initial data obj variable final running cond guard inneractivity cond guard fault guard pattern bpel 
bpel switch 
consists ordered list conditional branches defined case elements followed optionally branch 
case branches switch considered order appear 
branch condition holds true taken provides activity performed switch 
branch condition taken branch taken cgk 
fig 
pattern switch consists case branches shown 
scenarios possible place initial place neglink marked 
initial marked scenario data stored variable read 
possible sub scenarios depending evaluation guards guard describes fault case cond describes condition respective case branch 
reading message holt variable possible shown 
stopped failed data obj variable switch neglink inneractivity initial guard cond final running guard cond cond inneractivity guard fault pattern bpel switch case branches 
fault occurs selection failure condition case branch evaluated 
condition holds fires inneractivity performed status source links embedded inner activities performed anymore set negative token place 
condition second case branch evaluated 
case branch conditions hold branch performed 
neglink place inner activities token produced 
neglink marked scenario status stopped failed source links embedded switch activity set negative 
pattern component established transitions 
pick pick waits message event timing event 
activity defines messagetype obj channel pick neglink guard guard initial fault inneractivity cs cs cs onmessage final timestamp cs cs stopped failed time obj propertytype obj obj clock messagetype variable pattern bpel pick case initiate contains onmessage branches 
called onmessage branches number called branches 
known activity wait alarm event occurs delay certain period time reached certain deadline reached 
onmessage branch specifies attribute initiate 
built patterns 
general pattern bpel pick defining onmessage branches number branches case initiate visualized fig 

depending initial marking initial neglink marked scenarios possible 
scenario initial marked time stamp read 
message alarm event occurs 
transition guard specifying occurrence correlation violation fault holds fault thrown 
message written variable inneractivity performed status source links embedded inner activities performed anymore set negative token place 
case alarm occurred performed status source links embedded inner activities performed anymore set negative token place 
second scenario neglink marked values source links embedded pick activity set negative 
pattern component established transitions 
equivalent pattern case initiate depicted fig 

messagetype obj channel pick neglink initial inneractivity onmessage guard guard fault final timestamp stopped failed time obj propertytype obj obj clock messagetype variable pattern bpel pick case initiate contains onmessage branches 
transformation bpel link semantic synchronizing subtasks flow bpel provides construct called links 
link specifies elements source target activity 
source activity may specify transition condition target activity may specify join condition furthermore link depends value attribute 
join condition hold bpel standard fault occurs 
fault suppressed target activity executed anymore values outgoing links links activity source embedded target activity set negative 
fault suppressed means thrown pattern surrounding scope 
link set possible check set 
decided model link complementary places outlink outlink fig 
instance 
outlink low level place marked process pattern outlink sort boolean 
note link places outside frame respective pattern synchronize activities 
link place object 
extend graphical notation order simplify petri nets place depicted dotted line fig 
replication place depicted solid line identifier 
notation avoid crossing edges net 
source activity fig 
source link pattern visualized 
depend value attribute 
suppose pattern structured activity embeds activity source link 
possible scenarios initial neglink marked 
case positive control flow token initial embedded activity activated 
executed place marked fires 
set links means firing 
variables get value transition condition produced 
fault occurred values links set negative surrounding scope 
fires 
neglink marked activity branch executed anymore 
case dead path elimination values source links set negative 
firing outlink outlink set false 
furthermore token produced interface activity contains place neglink 
conditions boolean expressions 
target activity false neglink false initial activity final link activity outlink outlink outlink outlink outlink outlink stopped pattern activity source links 
pattern target activity shows depicted fig 

suppose pattern structured activity embeds activity source link 
depending initial neglink marked possible scenarios 
initial marked interleavings join condition modelled guard holds activity executed hold fault saved variable fault thrown 
token neglink executed values source links embedded set negative 
link place joined respective link place source pattern fig 
inlink outlink inlink outlink inlink outlink inlink outlink 
contrast fig 
depicts pattern case 
join condition hold target activity executed control flow continued activity 
furthermore source links embedded shown fig 
values set negative producing token 
inlink inlink inlink inlink neglink activity final initial link activity pattern activity target links case 
inlink inlink inlink inlink neglink link activity activity final initial fault pattern activity target links case 
stopped failed stopped activity source target element pattern activity source target links 
need patterns fig 
shows fig 
shows 
results patterns visualized figures 
new arcs 
possible scenarios similar patterns subsections 
token neglink initial marked 
inlink inlink inlink inlink outlink outlink outlink outlink false neglink false link activity activity final initial false false outlink outlink outlink outlink pattern activity source target links case 
case depicted fig 
results figures expected 
stopped inlink inlink inlink inlink outlink outlink outlink outlink false neglink false activity final initial link activity fault outlink outlink pattern activity source target links case 
summary dead path elimination summarize modelling dead path elimination 
general dpe realized place neglink patterns bpel scope source target structured activities 
explain happens neglink place respective pattern marked source activity values target links set negative 
source activity embeds activity source link status link set negative 
target activity embeds activity source link status link set negative 
neglink places patterns enclosed sequence flow marked respective pattern source link 
patterns pick switch behave just flow sequence 
stopped failed case positive control flow neglink place pattern branch performed anymore marked 
scope pattern neglink place embedded activity marked source activity 
neglink place pattern bpel process process enclosed activity 
pattern bpel place neglink link allowed cross activity 
patterns bpel elementary activities place neglink activity enclosed elementary activity 
transformation bpel scope section want transform bpel scope structured activity 
scope encloses activity linked transaction management 
wrapper activity fault handler compensation handler handlers defined default 
optionally scope may enclose event handler 
order transform scope link elements 
addition pattern model scope stopped pattern controls procedure 
furthermore state places subnet sets status links scope fault handler finished 
scope pattern encloses variables correlation sets 
state places give outline states scope 
states business agreement protocol state diagram cgk pp 

modelling transaction management important know event taken place 
instance fault occurred scope compensated 
state modelled state place 
detail state place marked scope respective state 
state exists complement state modelled complement place 
terminate terminate defined globally process pattern scope state places active long positive control flows scope scope state active 
state active reached soon scope inner activity activated 
inner activity event handler finished scope changes state active 
token place active consumed pattern scope place marked 
means activity terminate activated signalled scope forced fault occurred 
completed scope changes state completed inner activity executed event handlers finished 
inner activity activated scope reaches state completed 
scope completed changes state completed 
state queried inside scope compensation handler scope compensated completed 
scope state completed leave state 
compensated scope changes state compensated compensation handler activated time 
activating inner activity scope reaches state compensated left compensation handler executed 
scope compensated 
state queried compensation handler scope 
scope leave state compensated 
ended scope changes state ended finished faulty stopped control flow scope hierarchy enclosing scope 
activation inner activity scope changes state ended 
state left control flow inside pattern inside fault handler pattern 
pattern state ended reached activation activity terminate signalled signal stops scope fault occurs compensation handler executed executed 
fault handler pattern state changed ended scope fault immediately enclosing scope 
note user defined fault handler caught fault fault handled scope stays state ended 
furthermore state ended removing tokens fault handler pattern pattern 
token symbolizes fault handled anymore 
scope leave state ended 
faulted scope stopped signalled fault state faulted 
state needed distinguish occurrence fault fault handling positive control flow 
activation inner activity scope reaches state faulted 
fault signalled pattern stops scope signalled faults removed 
scope changes state faulted 
fault handler activated 
subsequently signalled faults faults occur state state faulted occur fault handler executed 
scope leave state faulted 
terminated process scope changes state terminated soon terminate activity activated 
mentioned places defined globally process pattern scope access 
process pattern activated reaches state terminated 
change state terminate activity activated 
state terminate process pattern leave state 
scope explained scope wrapper activity fault handler compensation handler optionally alarm event handler message event handler 
depicts pattern scope enclosing elements 
source link embeds activity source links 
idea pattern follows firstly scope activates inner activity event handlers sets state places 
scope inner activity finished event handlers scope finished 
addition scope name saved variable scopename saved compensation handler immediately enclosing scope token place push 
possible starting process pattern places push scopename token produced see transition fig 
sec 

details concept push places sec 

behaviour called positive control flow scope 
pattern gets control scope case fault occurs 
fault handler started pattern compensation handler invoked activity terminated terminated push neglink initial ch push scope faulted ended completed compensated faulted ended active completed compensated active propertytype messagetype variable inneractivity fault active terminate active terminate faulted ended compensated ended faulted ft stopped initial finish finish initial alarm eh message eh ch cleaned final final ft fault stopped rethrow ended ended ft fault rethrow push ch completed completed compensated fh push compensated pattern bpel scope 
clean ch fh compensation handler fault handler cleaned ch stopped compensated ch failed false stopped false scopename compensated push push final compensate embedded fault handler compensation handler immediately enclosing scope 
furthermore scope influenced immediately enclosing scope scopes encloses 
interface sending receiving signals 
looking interface places initial final stopped neglink fig 
known 
places ch push joined respective places compensation handler 
places joined places fault terminate pattern 
mentioned places terminated terminated defined process pattern 
places completed joined respective places compensation handler fault handler 
places push push joined respective places compensation handler immediately enclosing scope 
variable correlation set left fig 
visualize objects defined scope 
visible scope 
possible interleavings status source links embedded scope set negative neglink marked positive control flows initial marked 
pattern component established transitions 
marked 
scope pattern stopped state ended 
fires 
scope pattern state active 
scope state terminated terminated 
enabled immediately enclosing scope signals enabled immediately enclosing scope signals activation activity terminate 
contrast place marked fault signalled occurred enclosed scope 
token place activation activity terminate occurred enclosed scope signalled 
pattern starts procedure place marked scenarios possible depending inneractivity executed scenario scenario scenario inneractivity stopped joining places 
stopping inner activity place marked 
firing stops event handlers pattern continues execution 
scenario inneractivity finished signalled finish event handlers 
place marked scope pattern state active enabled anymore 
scope pattern stopped firing 
take look fault handler linked scope structure especially links set 
place marked fault handler caught fault processing continues scope 
help places respectively status links source activity scope set value transition condition negative 
furthermore status links source activity enclosed scope executed fault set negative 
happens place marked model 
status links checked 
explain possible scenarios considering example firstly consider link set source 
marked status set negative firing 
secondly consider link set join condition respective target activity evaluated 
marked fires 
token influence control flow anymore 
third scenario token link set source activity second scenario executed enclosed scope 
link set fires consume token 
process bpel process special case scope 
detail scope bpel process 
depicts pattern process embeds similar elements scope fig 

fact patterns look similar process pattern complex 
hand smaller interface process enclosing scope 
hand links source activity embedded process executed fault set process stopped 
interface subset scope interface 
left variables correlation sets defined visible inside process 
furthermore channels clock defined process 
possible scenario initial marked 
firing initializes source links state places inner activity event handlers scope embedded process respective place push consider scope scope embedded process push place push 
ch push initial process messagetype terminated faulted ended completed compensated ended active completed compensated active channel terminated faulted propertytype push messagetype variable inneractivity time clock faulted fault active active terminate faulted ended compensated ended stopped ch cleaned initial finish initial finish fault final rethrow alarm eh message eh final final pattern bpel process 
completed completed compensated fh push compensated clean ch ended ended fault rethrow ch fh compensation handler fault handler cleaned ch final compensated ch failed final compensated transformation bpel event handler section transformation bpel event handlers 
process scope associated set event handlers invoked concurrently corresponding event occurs cgk 
bpel distinguishes alarm message event handlers 
alarm event handler defines branches started timeout event occurs message event handler defines onmessage branch executed message arrives 
kinds branches known bpel pick activity see sec 

respective patterns sections respectively 
note event handler activity 
change interface adding place finish 
scope inner activity finished event handler receives signal finish asking event handler finish execution inner activity finish 
alarm event handler depicts pattern bpel alarm event handler branches 
general pattern branches expected 
idea pattern follows gets started alarm event handler reads time stamp copied branch 
branch modelled pick pattern see sec 

alarm signalled respective branch inner activity executed 
receiving signal finish branches running executed finished synchronized 
firing branches activated 
alarm occurs respective branch chosen fires 
inneractivity inneractivity executed 
long control flows scope running marked 
scope inner activity finished token produced finish transition fig 
sec 
fires 
finish procedure place finishing marked 
specification demands delay procedure active branches completed 
token branch removed inner activity executed 
firing branches synchronized event handler finished 
due involved concurrency conflict branch right marked transition guard evaluated true 
order pattern need consider scenarios marked finish signal received 
impossible receive finish see process pattern fig 

scenarios distinguished token place running finishing 
marked signal finish received token running consumed firing transition 
activated anymore 
branch stopped concurrently branches synchronized 
finish procedure running token finishing consumed firing transition finish 
activated anymore 
branch finish token removed 
branches initial finish alarm event handler time obj clock running finishing finish finish finish finish finish wait wait pattern bpel alarm event handler branches 
stopped scenario 
note signals finish received concurrently possible place finish marked stopping procedure 
words event handler guarantee tokens removed stopping procedure 
message event handler message event handler defines onmessage branches specifies attribute initiate 
built patterns 
pattern bpel inneractivity inneractivity stopped final finish initial message event handler finish finishing running messagetype obj channel messagetype obj channel finish finish finish finish cs propertytype obj wait wait cs propertytype obj cs cs cs cs cs cs cs cs messagetype obj variable messagetype obj variable pattern bpel message event handler case initiate contains onmessage branches 
message event handler defining onmessage branches case initiate visualized fig 

general pattern branches expected 
easily seen pattern bpel message event handler quite guard guard guard guard fault fault inneractivity inneractivity stopped failed final similar alarm event handler fig 

firstly branches activated 
message received inner activity respective branch executed 
receiving signal finish branches running executed finished get synchronized 
onmessage branch modelled pattern bpel pick 
contrast pick branch receive message executed 
interleaving pattern similar fig 

order message event handler need consider scenarios alarm event handler 
realization similar fig 
possible place finish marked stopping procedure 
equivalent pattern case initiate depicted fig 

onmessage branches differ fig 

add places transitions 
net elements identifier fig 

look left branch fig 
order explain differences fig 
branch receives message correlation set obj initialized 
transition fires token object type messagetype produced place 
message received firing 
produces token object type messagetype propertytype place 
case correlation set initialized read 
note transition guard guard distinguish receiving scenario message scenario 
easily done evaluating objects described 
scenario set needs evaluated standard fault signalling propertytype correlation set equal propertytype defined received message occur correlation set just initialized message 
contrast scenario correlation set initialized occur 
message correlation set evaluated 
finish initial message event handler finish finishing running messagetype obj channel finish messagetype obj channel finish finish finish propertytype obj cs propertytype cs wait wait obj cs cs cs cs pattern bpel message event handler case initiate contains onmessage branches 
cs cs cs cs messagetype obj variable guard guard guard guard messagetype obj variable fault fault inneractivity inneractivity stopped failed final transformation bpel fault handler section shows transform fault handler component bpel scope 
sole aim undo partial unsuccessful scope fault occurred cgk 
firstly control flow corresponding scope finished 
secondly fault handler tries match fault catch activities fault name associated fault data 
fault matched handled 
fault handler enclosing scope 
case scope fault occurred considered ended abnormally fault caught handled rethrow fault handler cgk 
order finish control flow scope component embedded activity pattern 
furthermore scope contains called pattern triggers stopping scope signalling signal inner activity scope 
stopping scope pattern signals fault fault handler 
transformation pattern described sec 

distinguish implicit user defined fault handler 
transformation constructs explained sec 
respectively 
section need take look pattern 
take look interplay scope inner activity enclosed scope 
purpose useful commitment pattern look embedded scope embeds scope called child scope furthermore child scope words parent scope pattern activity thrown fault fault handler enclosing scope finish positive control flow inside scope 
handle fault 
fault handler implicit user defined behaves way 
keep division extend scope called pattern equivalent construct bpel 
pattern receives fault finishes enclosing scope signals fault scope fault handler 
furthermore pattern realize bpel terminate activity entire process 
start transformation pattern scope fig 
sec 

introduce pattern embedded process pattern fig 
sec 

pattern embedded scope depicts pattern scope 
look interface fig 
differs patterns 
top important places ft marked wants stopped fault fault occurred enclosing activity token failed place fault handler ft faulted fault active terminate active terminate faulted ended compensated ft faulted faulted fault stopped ended rethrow kill pattern embedded scope 
ended stopped ch cleaned fault handle terminate terminate activity embedded activated terminate terminate activity embedded activated 
place fault results joining failed places activities enclosed interface places top state places places right remove tokens compensation handler ch cleaned positive control flow stopped 
bottom places activate patterns ft ft fault signalling wants fault signalling occurrence fault rethrow signalling occurrence fault execution fault handler activate fault handler contrast signals scope terminated fault fault handler handled fault handler activate parent scope parent scope fault handler respectively 
stopped stopped place explain important scenarios pattern 
describe special behaviour bpel behaviour modelled pattern 
fig 
subnet consisting places transitions plays key role 
subnet token fault signalled fault leads sending signal 
detail variable holds fault information 
token fault nondeterministically chosen 
nondeterminism suitable modelling nearly impossible realize signals arrive 
result firing place marked 
leads token place stopped means control flow scope child scope finished successfully 
proof see sta 
course point fault occur finished 
remaining tokens place fault removed firing holding fault information remaining faults 
pattern realized special arc reset arc dfs having little circle source 
arc consumes tokens making difference tokens place 
words emptied 
scenario scope fault thrown 
fault handler finish inner activity 
child scope signals realization state terminated active 
place marked scope pattern fires 
changes state active token produced ft pattern 
firing transition sequence scope stopped changes state faulted 
scenario places ft marked 
scenario scope executed embedded activities signals fault 
alternatively fault occurred scope scope scenarios scope finished 
fault handler activated tries handle fault 
realization state active 
fault occurs inner activity scope place failed marked place fault marked 
contrast fault respective token produced place scope joined fault 
means scenarios place fault marked 
transition sequence fired 
result finished 
changed state active faulted 
furthermore fault marked 
fault occurs fault token chosen nondeterministically 
scenario embed activity terminate active 
means entire bpel process finished calling fault handler compensation handler 
realization state active 
activity terminate embedded token produced place scope joined terminate pattern 
note possible stops inner activity fault handler executed 
activity terminate embedded scope token produced place terminate joined terminate place terminate pattern 
words scenarios place terminate marked 
implementation activity terminate realized components 
firing transition sequence changes state active stops 
contrast scenarios scope changes state ended 
furthermore marked propagating terminate signal scenario analogue scenario 
difference fault handler activated 
realization place terminate marked 
scope state active fault handler activated 
fires token produced signals terminate signal parent scope scope left active fault handler finished 
termination started 
scenario analogue scenario terminate activity embedded parent scope realization finish inner activity 
done sending signal token place state active fault occurred terminate 
scope active produces token place terminate pattern 
changes state active 
transition sequence fired 
finished 
changed state ended token place stopped joined stopped place signalling finished 
scenario analogue scenario 
difference fault handler activated 
realization state active fault handler executed 
furthermore place marked transition post set enabled 
propagation signal wait long fault handler running 
fault handler handle fault control flow go immediately scope control flow stopped token 
contrast fault handler handle fault fault state ended 
scope enabled firing transition place stopped marked signalling finished 
scenario scope contain user defined fault handler 
fault causing finish 
handled fault handler 
execution fault handler fault signalled handled fault handler inner activity throws enclosing scope 
fault handler finished realization fault initiates scenario 
state faulted ended fault handler active 
occurs token produced fault 
scenario faults removed 
token fault 
fault occurred handling fault respective number tokens fault 
transition fired result token produced place rethrow 
state faulted 
fault thrown executing fault handler token produced rethrow 
scenario scope contain user defined compensation handler inner activity executed 
fault occurs compensation handler 
fault caught compensation handler activity throwing fault enclosed scope 
fault fault handler realization starting execution compensation handler changes state compensated 
fault occurs token place failed respective activity inside compensation handler 
place joined fault pattern fault marked 
mentioned scenario token place fault possible 
enabled variable holds information fault nondeterministically chosen 
firing changes state ended tokens compensation handler removed token place 
fault parent scope fault handler place 
faults tokens place fault removed firing 
pattern cleared 
pattern embedded process take look pattern embedded process pattern see fig 
sec 

depicted fig 

comparing fig 
differences established patterns interfaces places ft terminate missing fig 
process parent scope 
furthermore fig 
new place final final place process pattern 
look possible scenarios fig 
respect changes compared fig 

keep numbering scenarios sec 
fig 

scenarios listed differ respective scenario sec 

process 
scenario occur process parent scope 
scenario description see scenario sec 

realization continue explanation place terminate marked 
firing transition sequence control flow finished 
token final process finished 
scenario description see scenario sec 

realization place terminate marked fault handler active 
execution fault handler process finished 
terminate signal needed 
token terminate removed firing 
scenario process deadlock see scenario sec 

opinion bug bpel caused petri net model 
faulted faulted faulted fault fault active ended active terminate faulted ended compensated kill final rethrow pattern embedded process 
ended stopped ch cleaned scenario scenarios occur process parent scope 
scenario see scenario sec 

process fault parent scope 
process finished 
realization description see scenario sec 

scenario bpel allows compensation executed process instance attribute set 
compensation handler process active 
execution compensation handler fault occur handled 
fault process 
furthermore fault handler activated 
finished faulty 
realization description see scenario sec 

fired fault fault handler parent scope 
token produced place final process finished 
implicit fault handler scope embeds implicit fault handler 
fault handler activated scope finished 
fault handler works follows see cgk firstly runs available compensation handlers immediately enclosed scopes reverse order completion corresponding scopes 
detailed activity compensate executed 
secondly fault parent scope 
fault executed outgoing links scope functions source set true 
links set false 
furthermore outgoing links source activity embedded scope executed anymore fault set false finish scope model pattern 
fault handler reduced tasks firstly child scopes compensated fault handler initiates compensation process help activity compensate 
secondly fault 
thirdly links set 
implicit fault handler behaviour fault handler standard fault patterns merged pattern illustrated fig 
sec 

special case implicit fault handler embedded process pattern shown fig 
sec 

implicit fault handler embedded scope section implicit fault handler embedded scope 
pattern depicted fig 

look interface fig 

places ft fault rethrow ones depicted interface bottom pattern see fig 

ft fault marked order activate activity compensate places rethrow hold information fault 
contrast place holds black tokens 
places ft marked fault shall handled 
places fault activate implicit fault handler 
fault thrown execution fault handler place rethrow marked 
ended ended known state places scope 
right places ch fh ch invoke compensation handler receive signal compensation handler finished 
places joined fh ch compensation handler pattern see fig 
sec 

model outgoing links set false 
means links source activity executed anymore links source activity executed 
modelling decision described sec 
ft fault compensate ended rethrow stopped ended ended pattern implicit fault handler embedded scope pattern 
places bottom forward results fault handling place place name pattern parent scope 
place stopped stopped place scope token place sets links true false source activity scope token place sets links false source activity embedded scope exact realization places explained sec 

explain important scenarios implicit fault handler done patterns sec 

describe special behaviour bpel behaviour modelled fig 

scenario scenario completes scenario described sec 

finished implicit fault handler activated invokes compensation handlers child scopes reverse order completion corre ch fh ch sponding scopes 
fault scope realization completion scenario pattern see sec 
places fault marked 
compensate activated 
activity executed compensation handler invoked token place ch fh 
compensation handler invokes compensation handler 
compensation finished token produced place ch 
reasons unusual order invocations sec 

execution activity compensate place marked 
firing scope changes state ended 
fault handler executed links source activity scope set true token outgoing links source activity embedded scope set false token 
furthermore fault scope token place 
scenario analogue scenario execution compensation handler fault occurs scope consequently fault handler finished scope realization fault pattern scope behaves described scenario sec 

result place rethrow marked continue point 
apart place rethrow token place caused fault 
activity compensate deadlocked waiting answer compensation handler send anymore 
firing activity compensate fault handler finished 
furthermore changes state ended 
variables hold information fault fault execution fault handler failed links source activity set false token place ones source activity embedded fault occurs execution fault handler token place rethrow 
fault chosen nondeterministically removed firing state ended 
scenario fault handler finish signals standard fault 
control flow fault handler invokes compensation handlers child scopes reverse order completion corresponding scopes 
finishing scope signalled realization way finished described scenario sec 

result ft marked 
point continue 
activity compensate activated executed described scenario 
transition fires setting links scenario 
fault place stopped marked 
scenario analogue scenario execution compensation handler fault occurs fault handler active 
fault handled fault handler activated sent 
consequently process runs deadlock 
realization fault leads token place rethrow scenario sec 
place marked 
activity compensate waiting signal compensation handler signalled fault 
firing fault token removed 
deadlock situation activity compensate ran abolished fault consequently model deadlock 
implicit fault handler embedded process implicit fault handler embedded process pattern 
pattern illustrated fig 

fact differences pattern fig 
described sec 

want restrict ourself explain differences 
fault handler embedded process compensate child scopes parent scope fault 
fault process finished 
fault handler react standard fault occur reason 
furthermore outgoing links set hand process source link hand links source activity embedded process set false process finished 
looking interface fig 
places known place final functions final place process pattern 
fault process finished execution fault handler 
token produced place final 
explain possible scenarios implicit fault handler embedded process 
list differences fig 

keep numbering section 
scenario see scenario sec 

fault process finished 
realization places fault marked 
activity compensate executed 
fires place final marked 
process finished 
scenario see scenario sec 

fault process finished 
realization places rethrow marked 
firing activity compensate stopped place final marked 
process finished 
scenario scenarios occur process parent scope 
user defined fault handler section transformation bpel user defined fault handler contains finite number catch branches optional branch 
catch branch inner activity executed respective branch chosen 
fault information signalled fault compared catch branch 
matching catch branch able handle fault respective fault compensate ended rethrow ended ended pattern implicit fault handler embedded process pattern 
branch chosen inner activity executed 
executed 
case branch defined catch branches chosen user defined fault handler behaves implicit fault handler runs available compensation handlers immediately enclosed scopes reverse order completion corresponding scopes 
fault parent scope 
user defined fault handler embeds special branch catches fault 
branch equal implicit fault handler 
pattern user defined fault handler embedded scope illustrated fig 
sec 

corresponding pattern embedded process fig 
sec 

final ch fh ch user defined fault handler embedded scope depicts general pattern user defined fault handler embedded scope 
consists catch branches branch 
furthermore branch catches standard fault 
branch embedded defined 
reasons simplicity illustrated pattern 
branch chosen transition guards catch holds 
evaluation depends firstly fault name fault information stored variable secondly information branch saved respective transition guard 
interface fig 
top right equal interface pattern implicit fault handler see fig 
sec 

bottom new place 
catch branch executed scope finished 
control flow goes scope executed 
realized token place scope final place identical 
comparing pattern pattern implicit fault handler patterns differ catch branches 
consider possible scenarios happen bpel behaviour modelled pattern 
scenario control flow finished 
finished 
means fault signalled scenario analogue scenario scenario described sec 

scenario fault occurs execution fault fault matches catch branch 
inner activity branch inneractivity executed 
execution activity fault handler scope finished control flow continues executed 
realization continue scenario sec 
ends 
places fault marked 
variable holds fault information saved token place 
data evaluate transition guards 
guard catch hold 
fires inneractivity executed 
execution place marked fires 
links source activity set true token place links source activity embedded set false token place 
furthermore finished positively token place 
scenario analogue scenario difference fault occurs execution inneractivity 
fault handler finished furthermore realization fault occurs execution inneractivity token place 
pattern behaves described scenario sec 

result place rethrow marked 
variables hold fault information fault fault firing inneractivity stopped tokens inside pattern removed 
furthermore scope changes state ended 
links difference source activity scope embedded set false places marked fault token place 
rethrow ended ft ended fault catch ch fh inneractivity compensate compensate pattern user defined fault handler catch branches embedded scope 
ch ended ended stopped fault occurred execution inneractivity token place rethrow 
variable holds fault information fault chosen nondeterministically 
firing ended marked remaining tokens remaining faults removed firing 
scenario fault occurs execution scope scope fault contrast scenario fault match catch branch branch defined contrast fig 

fault handler behaves implicit fault handler described sec 

realization scenario places fault marked 
variable contains fault information transition guard holds 
fires remaining realization analogue scenario described sec 

case fault occurs execution fault handler analogue scenario described sec 

user defined fault handler embedded process look user defined fault handler embedded process pattern 
pattern depicted fig 

pattern differences shown fig 

bring differences 
caused fact process parent scope rethrow fault 
fault process finished 
fault handler react standard fault occur reason 
furthermore outgoing links set hand process source link hand links source activity embedded process set false process finished 
interface fig 

restrict ourself bringing differences scenarios described sec 

keep numbering scenarios 
scenario scenario occur process parent scope 
scenario see scenario sec 

process 
control flow continued 
process finished 
realization described sec 

difference firing token produced place final process finished 
scenario see scenario sec 

process 
control flow continued 
process finished 
realization described sec 

difference firing token produced place final process finished 
scenario see scenario sec 

process 
control flow continued 
process finished 
realization described sec 

difference firing token produced place final process finished 
ended ended rethrow fault catch ch fh inneractivity compensate pattern user defined fault handler catch branches embedded process 
ch ended ended final transformation bpel compensation handler section transform compensation handler 
case fault occurs reverse effects caused execution scope inner activities 
general compensation handler invoked compensate activity names scope compensation performed scope compensation handler invoked 
compensation handler scope available invocation scope completes normally cgk 
invoking compensation handler installed equivalent empty activity cgk 
furthermore compensation handler invoked scope fault occurred 
order invoke compensation handler elementary activity compensate needed 
section explains transformation activity 
fault handler bpel distinguishes implicit user defined compensation handler 
implicit compensation handler runs available compensation handlers immediately enclosed scopes reverse order completion corresponding scopes 
contrast user defined compensation handler wrapper activity executed handler activated 
transform components sections 
explain idea transformation 
clarify interplay patterns introduce design decisions 
purposes simplification commitment respective pattern introduced enclosed scope sec 
child scope parent scope idea transformation go detail explain patterns introduce idea transformation 
compensation handler invoked activity compensate embedded parent scope compensation handler fault handler 
hand compensate invoke compensation handler explicitly 
hand activity compensate invoke compensation handlers child scopes reverse order execution 
case activity compensate needs know order child scopes executed 
sta suggested embed stack compensation handler 
stack stores names child scopes enclosing scope executed 
scope finishes execution puts token compensation handler stack parent scope 
token object consists scope name scopes finish nearly time tokens ordered nondeterministically inside stack 
executing implicit compensation handler means clear stack element element 
token stack saves name scope compensated child scope compensation handler invoked identified 
model disadvantage drastically increases state space 
avoid suggest approach 
stack compensation handler contains just complementary places push scopename push scopename child scope 
means scope finished produces addition token place final token push consumes token pushed see transition fig 
sec 

compensation handler parent scope activated invokes child scopes executed scopes produced token respective push scopename place inside compensation handler 
order compensation handler invokes compensation handlers child scopes chosen nondeterministically 
reasonable modelling possible order chosen concurrent system difficult decide signals arrives 
embed information child scope compensated inside compensation handler causes problem activity compensate embedded compensation handler access places push scopename 
activity compensate embedded fault handler access respective places 
order solve problem activity compensate invokes compensation handler enclosing scope 
way gets access scope names invoked 
looking bpel specification invocation allowed 
fault handler activated compensation handler activated anymore 
model modelling decision special structures invoke compensation handler child scopes 
order show semantic preserves properties bpel proved sta invocation influence compensation handler 
repeat proof document interested reader referred sta 
note proof done compensation handler embeds stack structure subnet contains stack push places 
ensure scope remains correct state 
compensation handler invoked activity compensate scope changes state compensated 
compensation handler invoked order get access push scopename places scope change state compensated 
activity compensate transformation bpel compensate 
bpel specification distinguishes explicit invocation compensation handler child scope compensate scope sequential invocation child scopes compensate 
furthermore activity compensate embedded compensation handler fault handler 
different components 
component transformed pattern sections 
compensate embedded compensation handler compensate embedded compensation handler sequentially invoke compensation handler child scopes 
pattern idea activate subnet 
subnet invokes child scopes waits signal child scope compensated 
pattern visualized fig 

compensate initial final running comp done stopped compensate pattern embedded compensation handler 
interface depicted places initial final stopped comp done 
places known activity patterns 
understand places helpful look fig 
sec 

inner activity compensation handler pattern pattern depicted fig 

places comp done places fig 

furthermore place comp place name compensation handler fig 
identical 
place initial marked fires subnet invoking child scopes activated token place comp 
compensation child scopes token place done produced fires 
expected transitions establish pattern component 
place marked compensation handler see sec 

compensate embedded fault handler presents pattern activity compensate embedded fault handler 
pattern invokes compensation handler enclosing scope order get access names child scopes compensated 
fault occurs compensation activity compensate receives signal child scopes compensated 
results token place ch 
compensate initial final running ch fh ch stopped compensate pattern embedded fault handler 
comparing pattern pattern fig 
patterns differ labels places labelled ch fh ch identical places fh ch compensation handler depicted fig 
sec 

interface structure patterns 
details see sec 

compensate scope embedded compensation handler presents pattern activity compensate scope embedded inner activity user defined compensation handler see fig 
sec 

model directly invokes compensation handler producing token object consists scope name place 
compensation handlers child scopes compare token names enclosing scopes 
guarantee invocation unique 
compensated compensation handler signals execution compensate pattern 
comparing pattern pattern fig 
sec 
patterns differ labels 
place labelled place labelled 
place place user defined compensation compensate scope scopename initial final running scope scopename stopped compensate scope pattern embedded compensation handler handler see fig 
sec 
identical 
furthermore place place user defined compensation handler identical 
take look fig 

firing variable scope saves name child scope compensated 
compensation handler identifies signal executed 
scope compensated compensation handler produces token object consists scope name place compensated 
place compensated compensation handler place fig 
identical 
variable scopename holds variable scope holds name child scope compensated 
boolean expression holds enabled fire 
help transition guard achieve compensate pattern finished token invoked scope received 
activities compensate scope compensate scope executed concurrently 
compensate scope embedded fault handler section transform activity compensate scope embedded user defined fault handler see sec 

pattern fig 

pattern differs fig 
sec 
labels ch compensated 
compensate scope scopename initial final running scope scopename ch compensated stopped compensate scope pattern embedded fault handler 
places respective place name compensation handler 
identically 
implicit compensation handler show transformation bpel implicit compensation handler 
pattern fig 

start outline idea 
compensation handler invoked tests state enclosed scope 
scope completed compensation handler finished 
scope compensated fault thrown 
scope completed compensated handler executed 
child scopes completed compensation handler invoked 
order invocation chosen nondeterministically 
child scopes compensated compensation handler finished 
signalled pattern invoked compensation handler place 
look interface 
top frame places ch fh important places state places see sec 

usually compensation handler invoked token place ch 
fault handler enclosed scope embeds activity compensate needs know child scopes executed token push push push push fh compensated completed compensated completed ch scope clean scope scope fault fh call comp ch call pattern implicit compensation handler 
placed place fh 
place marked child scope signals successful compensation 
child scope exist places push scopename push scopename 
example token push scope completed 
push marked 
scopename scopename cleaned scopename failed ch compensated token push push scope compensated 
right frame places clean cleaned analogue places stopped 
remove tokens pattern fault occurs execution compensation handler 
token place failed signals fault 
place place fault pattern enclosed scope 
places bottom invoke compensation handler child scope place ch child scope signal compensation handler finished 
compensation handler invoked token place ch fh token produced place compensated ch 
explain possible scenarios detailed look invocation child scopes 
done help transitions 
child scopes compensated place marked 
example invoke child scope firing means invoke compensation handler token place save information scope invoked token place push 
place places ch child scopes joined 
ensure signal invoke scope assigned purpose token variable holds name scope look happens child scope sufficient explain behaviour means fig 

place marked place ch compensation handler marked places identical 
looking post set place ch seen transition fire guard scope holds 
variable scope holds name enclosed scope holds name scope compensated 
compensated token holding name produced place compensated place compensation handler parent scope 
go back parent scope place marked 
token object contains name compensated child scope variable holds value 
depending compensation handler invoked token ch fh fires child scope invoked child scopes compensated 
possibilities invoke compensation handler 
scope encloses user defined compensation handler inner activity embeds activity compensate 

scope encloses user defined compensation handler inner activity embeds activity compensate scope 

scope encloses implicit compensation handler 

scope encloses user defined fault handler catch branch embeds activity compensate scope 

scope encloses user defined fault handler catch branch embeds activity compensate uses compensation handler invoke compensation handlers child scopes 
possibilities scenario bpel realization pattern 
scenario looking possibility cases distinguished completed compensation handlers child scopes invoked reverse order completion corresponding scopes 
activity empty executed 
compensated bpel standard fault thrown 
realization place ch marked evaluating transition guard scope guarantees compensation handler child scope activated time see explanation 
assumed completed compensated states compensated completed 
transition guard holds fires case variables scope hold scope name 
compensation handler activated changes state compensated 
compensation handlers scopes invoked firing order detailed description see 
enabled variable scopename holds name scope compensation handler finished firing 
signalled scope token compensated 
token object consists name scope place compensated place name activity compensate identical 
realization scenario taken account activity compensate takes name scope compensated respective push place 
place marked scope completed 
realization scenario happens corresponding bpel process designed incorrectly 
designer ensure scope compensated 
compensation scope state completed compensated 
handler invoked fires fault thrown 
variable fault holds name fault 
furthermore occurrence fault results token 
scenario scenario analogue scenario 
realization compensation handler invoked directly name taken place push compensation handler 
possible completed state completed compensated 
fires 
model execute activity empty 
variable scopename holds name scope produced place compensated 
scenario analogue scenario 
scenario analogue scenario 
scenario fault handler invokes child scopes reverse order completion corresponding scopes 
compensation handler corresponding scopes distinguish cases described scenario 
realization order get access child scopes compensated activity compensate invokes compensation handler 
results token place fh 
firing push places accessed 
compensation handlers child scopes invoked described scenario 
differences fires child scope signals compensation 
furthermore child scopes compensated fired placing token place ch 
place ch place name compensate activity inside fault handler identical 
similar component patterns activities pattern bpel implicit compensation handler embeds subnet remove tokens 
places clean cleaned 
labelled stopped scenarios possible remove tokens see sec 
details 
control flow finished case 
ensured removing tokens places fh call ch call respectively 
tokens removed activated anymore 
user defined compensation handler looking user defined compensation handler distinguish different kinds handlers compensation handler embeds activity compensate sec 
compensation handler embeds activity compensate scope name sec 
compensation handler embeds activity activity compensate sec 

bpel specification allow embed kinds activity compensate compensate invokes child scopes activity compensate scope name invoke child scope twice 
user defined compensation handler embeds compensate depicts pattern user defined compensation handler embeds activity compensate 
purposes simplification compensate inner activity handler embedded activity 
reader important see handler activity compensate connected 
interface pattern structure pattern implicit compensation handler fig 

fires token produced initial place activity compensate place comp 
bring differences fig 
take look possible scenarios fig 

distinguish scenarios described sec 

scenario differs 
scenario scope completed compensation handler invoked 
handler activates inner activity compensate 
activity runs available compensation handlers immediately enclosed scopes reverse order completion corresponding scopes 
effect described scenario sec 

realization place ch marked firing starts handler 
token place ch call identifies handler invoked place ch 
activity compensate executed 
places comp identical 
pattern reaches marking ch call comp fig 

invocation child scope compensation handlers analogue depicted implicit push push push push fh ch compensated completed compensated completed scope clean scope scope fault fh call comp ch call pattern compensation handler compensate 
compensation handler fig 

child scopes invoked fired produces token place 
token place ch call read removed inner activity completely executed 
firing name enclosing scope saved variable scopename 
value variable produced compensate scopename cleaned scopename failed scopename ch compensated place compensated 
addition concept removing tokens clean cleaned fig 
remove tokens inner activity 
firing produces token place inner activity place 
inner activity procedure started results token stopped place inner activity place cleaned 
user defined compensation handler embeds compensate scope pattern fig 
presents user defined compensation handler embeds compensate activity compensate scope 
simplification decided compensate activity 
interface main structure pattern known section 
differences fig 
firstly places ch call marked child scope signals compensated successfully token produced place comp 
secondly places respectively corresponding places activity compensate scope identical 
changes caused fact activity compensate scope needs access places 
places fault handler embeds activity compensate 
scenarios described sec 

realization scenario differs 
realization fired token place ch call identifies handler invoked place ch 
activity compensate scope executed 
token compensation handler invoked directly 
furthermore response signalled directly activity compensate scope place 
draw scenario possible remove tokens pattern 
consider activities compensate scope compensate scope embedded flow invoking compensation handlers scopes concurrently 
furthermore compensation handler throw fault fault handler compensation handler running 
pattern scope token produced place clean compensation handler 
result compensate activities stopped compensation handler running 
compensation handler completed token produced compensation handler 
token removed anymore 
fact extend compensation handler pattern avoid scenario current version 
user defined compensation handler embeds compensate compensation handler embeds activity compensate need simple modification implicit compensation handler pattern push push push push fh ch compensated completed compensated completed scope clean scope scope fault fh call comp ch call pattern compensation handler compensate scope 
fig 
sec 

resulting pattern depicted fig 

contrast pattern implicit compensation handler post set contains initial place inner activity 
place ch call post set needed pattern 
remove tokens inneractivity case compensate scope scopename cleaned scopename failed scopename ch compensated fault places clean cleaned stopped identical 
looking possible scenarios scenario differs push push push push fh compensated completed compensated completed ch scope clean scope scope fault fh call comp pattern compensation handler activity compensate 
scenario scope completed compensation handler invoked 
inneractivity scopename cleaned scopename failed scopename ch compensated handler activates inner activity executed 
handler finished 
realization firing activates inner activity 
executed name enclosing scope stored variable scopename produced place compensated 
sections approach formal semantics bpel petri nets 
want summarize properties petri net patterns classify net type section 
section give short summary results modelling decisions 
section closes preview 
classification patterns bpel process transformed petri net algebraic high level petri net patterns model data variables correlation sets clock fault information 
distinguish different arc types standard arcs read arcs reset arcs 
reset arcs type reset net 
reset arc expressive construct 
reset net properties decidable net arcs dfs 
show read arcs reset arcs unfolded semantically equivalent low level construct 
firing rule transition fire 
read arc short notation loop 
reset arc pattern remove tokens place fault 
draft idea arc modelled high level construct turn unfolded low level construct possible safely approximate maximal number tokens number faults produced place fault 
number activities enclosing scope throw fault 
scope encloses finite number activities 
consequently bounded 
place fault high level place bounded number tokens fault greater unfolding reset arc means replace fault places tokens possible 
furthermore transition pre set post set fault replaced transitions 
seen easily reset arc causes increase net size 
value narrowed instance case sequence 
unaffected number inner activities fault thrown fault thrown control flow sequence blocked 
calculating best possible place fault ongoing research 
drive unfolded high level petri net detailed algebraic high level petri net contains standard arcs data 
results feature complete petri net semantics bpel 
petri net semantics consists patterns bpel construct pattern exists 
semantics properties instance bpel process transformed petri net 
semantics abstracts connection bpel process partner processes 
interface bpel process transformed set message channels places petri net 
petri net patterns model data definition functions edit data 
furthermore specify transition guards specify circumstances necessary specific fault occur 
activity limited correlation set synchronous invoke limited correlation sets 
translate specific concepts bpel petri net semantics design decisions order positive control flow fault occurs activity terminate active extended activity pattern component 
component remove tokens respective pattern 
furthermore extended scope pattern called pattern equivalent construct bpel 
scope needs stopped pattern controls procedure 
sta proved scope process stopped components 
modelling compensation handler met problem implicit compensation handler invoke compensation handlers child scopes reverse order execution 
necessary save executed scopes 
purpose design decision scope executed token produced place push compensation handler parent scope compensation handler activated invokes compensation handler child scopes executed respective push scopename place marked 
order invocation chosen nondeterministically nondeterminism covers possible orders 
addition detected deadlock scenario bpel see section details 
translation bpel petri nets 
translation follows feature complete petri net semantics 
transform bpel process petri net 
obviously laborious takes time generate petri net bpel process manually 
tool support necessary transform bpel process automatically petri net 
tool parser bpel pn hin takes bpel process input 
process transformed petri net petri net semantics 
output tool petri net data format model checker lola sch 
current version bpel pn limited low level petri nets 
means decided data messages data modelled black tokens directed attention control flow 
consequently high level constructs transition guards variables left 
selecting control petri net semantics solved evaluation data modelled nondeterministic choice 
moment tool lola analyze petri nets respective bpel process consists activities 
process embeds nested scopes 
lola able verify temporal property transformed bpel process 
results ss 
models generated version parser seen brute force models 
generated models significantly larger typical manually generated models 
due fact petri net patterns complete applicable context 
particular process modelled features unused 
instance basic activity throw error error handling mechanisms surrounding compound activity left 
ongoing projects aim improved translation petri net patterns different degree abstraction available bpel activity 
static analysis bpel code want select pattern applicable context 
believe model sizes drastically removed 
way alleviate state explosion problem inherent model checking 
goal technology chain starting bpel process performs static analysis 
analyzed information translator selects pattern activity feasible analyzed context synthesizes petri net model 
petri net model model checker evaluates relevant properties 
analysis results counter example paths translated back bpel source code 
results diploma thesis 
possible help received people axel martens wolfgang reisig michael weber supervised diploma thesis 
took time listen problems give support useful hints 
additional go dirk carsten peter long helpful discussions bpel 
address daniela weinberg careful reading document constructive suggestions improvement 
colleagues discussions hints concerning pleasant familiar atmosphere chair 
cgk curbera goland klein leymann roller thatte weerawarana 
business process execution language web services version 
technical report bea systems international business machines microsoft may 
dfs finkel ph 
schnoebelen 
reset nets decidability undecidability 
spies sch tz editors proc 
th int 
coll 
automata languages programming icalp aalborg denmark july lecture notes computer science pages 
springer 
dirk 
complete operational semantics web service business process execution language 
technical report humboldt universit zu berlin june 
fbs xiang fu su 
analysis interacting bpel web services 
www proceedings th international conference world wide web pages 
acm press 
fer andrea ferrara 
web services process algebra approach 
pages 
acm 
ffk jes arias luis nchez fern ndez delgado 
formal verification bpel ws business collaborations 
proceedings th international conference electronic commerce web technologies ec web lncs 
springer august 
uwe gl mona 
specification validation business process execution language web services 
state machines volume lecture notes computer science pages 
springer 
fr dirk wolfgang reisig 
asm semantics bpel negative control flow 
rger editors proc 
th international workshop state machines paris march lecture notes computer science 
springer verlag march appear 
hin sebastian 
implementation einer semantik bpel ws 
diplomarbeit humboldt universit zu berlin 
ley frank leymann 
wsfl web services flow language 
ibm software group whitepaper may 
ibm com webservices pdf wsfl 
pdf 
lr frank leymann dieter roller 
production workflow concepts techniques 
prentice hall 
mar axel martens 
verteilte gesch modellierung und mit von web services 
dissertation verlag stuttgart 
rei wolfgang reisig 
petri nets algebraic specifications 
theor 
comput 
sci 
anne lisa wells henry michael lassen mads jacob frank martin michael ren christensen kurt jensen 
cpn tools editing simulating analysing coloured petri nets 
proceedings th international conference applications theory petri nets eindhoven netherlands june volume lecture notes computer science wil van der aalst eike best eds pages 
springer verlag june 
sch karsten schmidt 
lola low level analyser 
nielsen simpson editors international conference application theory petri nets lncs page ff 
springer verlag 
sch karsten schmidt 
business processes 
technical report humboldt universit zu berlin december 
sr peter stephan 
ina kjeld mortensen editor tool demonstrations st international conference application theory petri nets pages 
department computer science university aarhus june 
ss karsten schmidt christian stahl 
petri net semantic bpel ws validation application 
editor proceedings th workshop algorithms tools petri nets pages 
universit paderborn october 
sta christian stahl 
transformation von bpel ws 
diplomarbeit humboldt universit zu berlin april 
tha satish thatte 
xlang web services business process design 
microsoft initial public draft may 
www 
com team xml xlang 
van der aalst 
application petri nets workflow management 
journal circuits systems computers 
web michael weber 
allgemeine konzepte zur software unterst typen 
phd thesis humboldt universit zu berlin 
url rz hu berlin de weber michael pdf weber pdf 

