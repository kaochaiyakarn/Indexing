effective practices software engineering free libre open source software development kevin crowston syracuse university school information studies syracuse ny usa crowston syr edu information school university washington seattle wa usa washington edu review literature free libre open source software floss development software development distributed teams generally develop theoretical model explain performance floss teams 
proposed model model effectiveness teams coordination theory collective mind extend model elaborating team practices relevant effectiveness software development 
propose set propositions guide research 
categories subject descriptors software engineering management programming teams general terms management keywords collective mind theory coordination theory free open source software team effectiveness 

presents research approach studying software engineering team centered task 
research employs interdisciplinary approaches drawing information systems distributed small groups research examine effective practices software development teams specifically engaged development free libre open source software floss 
belief understanding social socio technical practices floss development teams provide insights useful understanding software engineering human practice field 
free libre open source software floss broad term embrace software developed released open source license allowing inspection modification software generally available charge free beer 
free software meaning derivative works available license terms free speech libre 
chosen acronym floss common oss acknowledge dual meaning 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
november newport beach california usa 
copyright acm 
james syracuse university school information studies syracuse ny usa syr edu redistribution software source 
thousands floss projects spanning wide range applications 
due size success influence linux operating system apache web server known hundreds widespread including projects internet infrastructure sendmail bind user applications mozilla programming languages perl python gcc 
popular dominate market segment code generally quality 
key approach fact floss software developed self organizing distributed teams 
developers contribute world meet face face infrequently coordinate activity primarily means computer mediated communications cmc 
teams depend processes span traditional boundaries place ownership 
research literature software development distributed emphasizes difficulties distributed software development case floss development presents intriguing counterexample 
surprising floss process appears eschew traditional project coordination mechanisms formal planning systemlevel design schedules defined development processes 
floss development important phenomena deserving study 
floss increasingly important commercial phenomenon involving kinds software development firms large small startup 
millions users depend systems linux internet heavily dependent floss tools scacchi notes little known people communities coordinate software development different settings software processes practices organizational contexts necessary success 
eu nsf workshop priorities floss research identified need learning open source modes organization production applied areas concerted effort open source 
certainly floss growing component software engineering overlap floss development traditional house proprietary development increasing 
clear firms seeking leverage floss code competitive positions opportunities learn social socio technical practices floss development teams improve effectiveness software engineering human team practice 
recognize floss community comprises teams practices significant differences practices overlap proprietary software engineering initiator release coordinator passive users 
hypothesized floss development team structure 
especially developers pursuing agile software development 

current research floss nascent research literature floss addressed variety questions 
researchers examined implications floss economic policy perspectives 
example authors examined implications free software commercial software companies implications intellectual property laws floss 
second various explanations proposed decision individuals contribute projects pay 
authors mentioned factors personal interest ideological commitment development skills enhancement reputation 
authors investigated processes floss development focus 
raymond bazaar metaphor known model floss process 
merchants bazaar floss developers said autonomously decide contribute project development 
contrast traditional software development likened building cathedral progressing slowly control master architect 
popular bazaar metaphor broadly criticized 
bazaar metaphor disregards important aspects floss process importance project leader control existence de facto hierarchies danger information overload possibility conflicts cause loss interest project forking 
empirical begun illuminate structure function floss development teams 
gallivan analyzes descriptions floss process suggests teams rely variety social trol mechanisms trust 
authors described teams having hierarchical onion structure shown 
centre core developers contribute code oversee design evolution project 
core usually small exhibits high level interaction difficult maintain core group large 
active users surrounding core developers 
individuals contribute sporadically reviewing developers modifying code contributing bug fixes 
developer group larger core core developers required level interaction lower 
surrounding developers active users subset users latest releases contribute bug reports feature requests code 
core passive users 
border outer circle indistinct nature variety floss distribution channels difficult impossible know exact size user population 
involvement project changes individuals may move role role 
core developers deep understanding software development processes poses significant barrier entry 
barrier particularly troubling reliance floss projects volunteer submissions fresh blood 
important note description project team case studies 
model face validity extensively tested 
major stream research examines factors success floss general systematic comparison multiple projects 
popularity floss attributed speed development reliability portability scalability resulting software low cost 
turn quality software speed development attributed factors developers users software availability source code 
floss projects originate personal need attracts attention users inspire contribute project 
developers users software understand system requirements deep way eliminating ambiguity characterizes traditional software development process programmers know needs 
course mode requirements gathering may limit applicability floss model 
second floss projects source code open modification enabling users developers developing fixes enhancements 
result floss bugs fixed features evolved quickly 
active users play important role 
research suggests percent time cost non floss software projects consumed mundane testing 
floss process enables hundreds people organizational context context supports reinforces competent task reward system education system information system group design design prompts reinforces competent task structure task composition group group norms performance processes group synergy assistance group interacting ways reduce process losses create synergistic process gains parts process 
argued distributed nature floss development may lead robust maintainable code 
developers consult easily may fewer assumptions code write robust code highly modularized 
noteworthy literature floss written developers consultants directly involved floss community 
contributions significant point economic relevance floss striking aspects new development process 
studies animated spirit hype skepticism 
documented case studies discuss successes failures 
exceptions proposed models descriptive small number cases 
indicative relative novelty issue lack clear theoretical framework describe interpret floss phenomenon 
intended fill gaps providing theoretically model floss development practices 

team effectiveness software development interested studying practices floss projects effective 
chosen analyze developers comprising team 
literature floss conceptualized developers forming communities useful perspective understanding developers choose join remain project 
purpose study view projects entities goal developing product members interdependent terms tasks roles user base satisfy addition having attract maintain process criteria effectiveness level effort brought bear team task amount knowledge skill applied task appropriateness task performance strategies team material resources sufficiency material resources required accomplish task time 
normative model group effectiveness 
group effectiveness task output acceptable receive review capability members maintained strengthened members needs satisfied frustrated group experience members 
aspects floss projects suggest analyzing teams 
dickson pg 
defined team individuals see seen social entity interdependent tasks perform members group embedded larger social system community organization perform tasks affect customers coworkers 
perspective draw model effectiveness teams conceptual basis study 
model initially sets factors factors point practices important team effectiveness 
crowston coordination theory collective mind extend model elaborating team practices relevant effectiveness software development 
section describe theories applicability floss development develop set propositions 
team effectiveness model researchers social organizational psychology studied teams performance decades developed plethora models describing explaining team behavior performance 
widely normative models proposed shown 
model broadly similar models 
model especially fitting intended purpose identifying factors related team effectiveness broadly defined inclusion team process factors 
outputs 
model input process output framework 
output explained model team clearly key variable study distinguish effective teams identify practices related effectiveness 
attractive feature model effectiveness conceptualized multiple dimensions just task output includes team continued capability satisfaction individual team members personal needs relevant outputs 
types output correspond effectiveness measures floss projects identified crowston proposed measures including system quality task output developer satisfaction satisfaction individual needs number developers developer turnover progress project stages development alpha beta production indicative continued ability team 
measures de emphasised management oriented information systems literature 

definition effectiveness floss teams measured creation quality software continued team performance team member satisfaction 
inputs 
model includes sets input factors organizational context reward educational information systems group design task structure team composition team norms 
organizational context factors possibly important floss teams typically mix members variety organizational contexts contextual factors may control projects 
result include factors theorizing 
plan focus initially team design includes promising factors explore task structure team composition team norms floss teams perform task software development anticipate seeing important differences way teams structure task 
analyze structures coordination theory discussed 
review anticipate seeing differences practices related team composition 
particular prior research suggested importance having contributions members different roles core members developers active users 
proposition teams members contributing roles effective 
anticipate differences development team norms particular way new member contribute teams discussed 
process 
intermediary factors model process criteria indications process working level effort brought bear team task amount knowledge skill applied task appropriateness task performance strategies group 
prior noted distributed teams need expend task effort effective suggesting importance variable 
effort required interaction participants distant unfamiliar basili 
additional effort required distributed translates delays software release compared traditional face face teams mockus 
proposition teams members contributing higher level task effort effective 
amount knowledge skill applied critical possibly difficult measure directly control project 
proposition teams members knowledgeable skilled effective 
coordination theory analyze task performance strategies discussed 
factors 
proposes factors moderate relationship process output material resources inputs process team synergy 
material resources things team requires order carry task example computers team collaboration systems source code management tools cvs fully fledged collaborative environments sourceforge collab net 
groups studying access sufficient resources aspect intend focus 
review software development clear practices development maintenance shared mental models play important role enabling team synergy 
apply collective mind theory conceptualize models discussed 
remainder section discuss supporting theories extend model coordination theory collective mind theory 
coordination theory coordination theory analyze structure tasks coordination mechanisms teams 
software process researchers stressed importance coordination software development 
example kuwabara states coordination crucial element sustaining collective effort giving linux integrity unfolds seemingly chaotic infinitely creative process creation 
knowledge view firm emphasizes coordination mechanisms important integrating knowledge individuals organization products rules routines 
coordination theory provides theoretical framework analyzing coordination processes 
model malone crowston define coordination managing dependencies analyzed processes terms actors performing interdependent tasks tasks require create resources various types 
example software development developers require bug reports order create patches bugs 
view actors organizations face coordination problems arising inte dependencies constrain tasks performed 
interdependencies tasks tasks resources need resources 
interdependencies may inherent structure problem components system may interact constraining particular component designed may result assignment tasks actors resources engineers working component face constraints changes propose interfering 
implication view important management strategy software development minimize dependencies creating software modules worked independently 
proposition teams task structures practices minimize dependencies effective 
overcome coordination problems created dependencies actors perform additional malone crowston called coordination mechanisms xiao call coordination practices example particular expertise necessary fix bug task actor dependency developer expertise identified bug routed 
dependency may range available mechanisms project teams expected differ choice mechanisms 
single best set mechanisms fit selected mechanisms team practices expected implications effectiveness 
proposition teams coordination practices manage dependencies effective 
collective mind second theory apply collective mind theory functioning shared mental models 
shared mental models defined cannon bowers knowledge structures held members group enable form accurate explanations expectations task turn coordinate actions adapt behavior demands task group members 
shared mental models individuals different teams backgrounds may interpret tasks differently making collaboration communication difficult diminishing individual contributions collective goal 
shared mental models expected lead better team performance general software development particular 
curtis note fundamental problem building large systems development common understanding requirements design project group 
go say transcripts group meetings reveal large amounts time designers spend trying develop shared model design 
crowston intend apply robert collective mind theory analyze issue 
chosen theory reasons 
previous conceptions group mind controversial imply existence super individual entity 
contrast collective mind described individual disposition heed emphasis behaviors 
member team desire means act ways goals needs team team exhibit behavior described collectively intelligent individuals intelligent team se 
second roberts suggest collective mind beneficial situations need high reliability non routine interactive complexity combination complex interactions high degree coupling characteristics software development 
elements theory fit cleanly model discuss 
roberts identify overlapping individual behaviours collective mind contribution individual member team contributes team outcome process factors representation individuals build personal mental models team task view important factor team synergy subordination individual puts team goals ahead individual goals team norm corresponds team design input 
conceptualized separately concepts overlap reinforce degree 
example difficult imagine contributions highly talented motivated individuals weak representations team needs structure 
actions go group setting issue collective mind carefully appropriately intelligently done 
extent team display collective mind 
proposition teams highly developed shared mental models effective 
proposition teams members subordinate personal goals team goals effective 
proposition teams higher levels socialization conversation narration display highly developed shared mental models 

proposed data collection section briefly describe data plan collect test propositions previous section 
mentioned earlier particularly interested practices adopted effective development teams 
practices hard study taken granted escape intense observation 
go notice goes wrong 
line teams observation facilitated team interactions cmc system structured captured results 
retrospective comparisons easily comparing data captured different times unbiased possibly selective informants 
problem ensuring interactions complete picture team making sense vast pool data created course developers interactions answer interesting questions practices 
explore concepts identified conceptual development section proposal collect wide range data project demographics developer demographic data interaction logs code project plans procedures developer interviews observation participant observation 
table 
summary concepts proposed model corresponding phenomena 
concepts specific phenomena team effectiveness code quality project usage user satisfaction project recognition continued system development group membership turnover developer satisfaction developer recognition team design task structure process activities dependencies actors roles composition team experience cross membership team norms performance socialization new members process criteria number developers level effort developers quantity quality appropriate coordination mechanisms team communication patterns team synergy shared mental models representation socialization narration collaboration remainder section briefly review source 
table shows mapping data source analysis 
project demographics 
plan collect basic descriptive data project topic intended environment programming language data self reported developers guide potential users sourceforge net cases inferred 
collect data indicative effectiveness project team level activity number downloads proxy development status user ratings user ratings 
sourceforge explicitly tracks figures projects may inferred 
developer demographic data 
collect list developers project assigned roles plus demographic information available 
sourceforge collects skills ratings developers minority developers rated interesting reflection known developer collect developer pgp key examine web trust reflection developer social network see www com code sig dot examples 
developer interactions logs 
voluminous source data collected archives cmc tools support team interactions floss development 
data useful unobtrusive measures team behaviours 
mailing list archives examined email primary tool support team coordination 
archives contain huge amount information linux kernel list receives messages month 
mailing lists extract date sender individual recipient names sender original message case response text message 
bug tracking systems apache linux kernel mozilla bugzilla sourceforge tracker extract data bug submitted bugs fixed steps bug fixing process 
examine features request archives logs interaction tools chat sessions 
source code 
major advantage studying open source software access source code 
projects source code control system cvs stores intermediate versions source changes 
logs able extract data kinds contributions understand software structure date name contributors understand role individual developers 
raw code poses numerous challenges interpretation 
example projects assign authorship cvs tree 
intend leverage analysis carried researchers 
project plans procedures 
projects stated release plans proposed changes 
data available project documentation web page status file keep track agenda working plans 
example scacchi examined requirements documentation floss projects 
examine explicitly stated norms procedures rules part project process submit handle bugs patches feature request 
procedures reported project web page dev apache org guidelines html 
developer attitudes opinions 
data sources listed provide extensive pool data indirect 
interviews surveys important get rich data developers perceptions interpretations 
plan conduct interviews key informants selected projects 
interviews conducted mainly email plan attend floss conferences year reilly open source convention interview floss developers face face 
part interviews protocol employ critical incident technique developers asked describe personally experienced specific incidents important effect final outcome 
explore developer initial experiences participation floss social structure norms team processes knowledge exchange socialization especially role observation leaves traces interaction logs knowledge members participation impressions project effectiveness 
interviews verify archives interaction data give fair reasonably complete record day day interactions 
phases project web survey elicit attitudes opinions large sample developers 
observation 
initial pilot study developers interact extensively conferences 
nardi whittaker note importance face face interactions sustaining social relations distributed teams 
freebsd developer henning kamp stated phone calls occasionally solve complex problems 
interactions small fraction total may crucial understanding team practices 
plan attendance developer conferences opportunity observe document role face face interaction floss teams 
intend carry virtual ethnographic study developer socialization interaction 
student involved project virtually joined development teams permission project leaders knowledge members currently participating normal activities observing recording activities 
way study learn hand socialization coordination practices teams 
track teams various stages development status planning production stable stage observing new members join teams contribute team output 

conceptual model set propositions concerning practices distributed floss development teams 
developing theoretical framework consolidating number theories understand dynamics distributed team contribution study distributed teams learning organization literature 
distributed teams potentially provide benefits separation members distributed teams creates difficulties coordination collaboration learning may ultimately result failure team effective 
applying techniques information systems distributed small groups research software engineering hope allow better understand software engineering human centered activity 
understanding practices teams software engineers working distributed environment important improve effectiveness distributed teams traditional non traditional organizations exist 
results study serve guidelines team governance task coordination communication practices mentoring improve performance foster innovation 
authors research team school information studies syracuse university kevin crowston james information school university washington 
information schools interdisciplinary faculties researching information policy information behavior information management information systems information technology information services 
partially supported nsf 
open source business strategy 
di bona stone eds 
open sources voices open source revolution reilly san francisco 
langer collins distributed arrangements research framework 
information society 

bessen open source software free provision complex public goods research innovation pages 
open source software development special type academic research critique 
monday 
second look cathedral bazaar 
monday 
cannon bowers reflections shared cognition 
journal organizational behavior 

carmel agarwal tactical approaches alleviating distance global software development 
ieee software march april 

critical incident technique 
ed 
qualitative methods analysis organizational research practical guide sage london 
cox town council 
available slashdot org features shtml 
accessed march 
crowston defining open source software project success 
proceedings th international conference information systems seattle wa 
crowston coordination collective mind software requirements development 
ibm systems journal 

crowston open source software projects virtual organizations competency software development 
iee proceedings software 

open source software development 
nd workshop software engineering internet los angeles 
ramp challenge open source software projects department computer science university british columbia vancouver bc canada booth coordinating open source software development 
proceedings th ieee workshop enabling technologies infrastructure collaborative enterprises 
curtis krasner field study software design process large systems 
cacm 

curtis walz studying process software design teams 
proceedings th international software process workshop experience software process models kennebunkport maine united states 
di bona stone 
eds 
open sources voices open source revolution 
reilly associates sebastopol ca 
dougherty interpretive barriers successful product innovation large firms 
organization science 

edwards epistemic communities situated learning open source software development 
epistemic cultures practice workshop ntnu trondheim 
xiao coordination fast response organization 
academy management conference denver 
fielding apache group case study internet collaboration virtual communities 
available www ics uci edu fielding talks overview htm 
franck reconciling investors governance structure open source lehrstuhl hrung und universit rich 
lawrie meanings open source centre software reliability department computing science university newcastle newcastle tyne united kingdom gall hajek jazayeri detection logical coupling product release history 
proceedings international conference software maintenance icsm 
gallivan striking balance trust control virtual organization content analysis open source software case studies 
information systems journal 

ghosh free libre open source software survey study 
report floss workshop advancing research agenda free open source software 
available www nl floss report htm 
groups context model task group effectiveness 
administrative science quarterly 

glass open source linux hype 
ieee software 

goodman current thinking groups setting stage new ideas 
goodman associates eds 
designing effective groups bass san francisco ca 
dynamically competitive environments organizational capability knowledge integration 
organizational science 

graves inferring change effort configuration management databases 
dickson teams organizations research performance effectiveness 
annual review psychology 

design teams 
ed 
handbook organizational behavior prentice hall englewood cliffs nj 
linux workplace 
ieee software 

roberts slaughter fielding economic incentives participating open source software projects 
proceedings third international conference information systems 
mozilla look back ahead 
available www mozilla org mozilla html 
grinter splitting organization integrating code conway law revisited 
proceedings international conference software engineering icse acm los angeles ca 
mockus grinter empirical study global software development distance speed 
proceedings international conference software engineering icse toronto canada 
herrmann motivation software developers open source projects survey contributors linux kernel university kiel kiel germany pages 
jarvenpaa leidner communication trust global virtual teams 
organization science 

koch schneider effort operation coordination open source software project gnome 
information systems journal 

open source software development distributed innovation 
oxford review economic policy 

development sociotechnical systems model mechanical harvesting 
human relations 

kraut chan butler coordination virtualization role electronic networks personal relationships 
organization science 

kraut streeter coordination software development 
communications acm 

kuwabara linux bazaar edge chaos 
monday 
lee cole linux kernel development model open source knowledge creation haas school business university california berkeley berkeley ca 
business case linux 
ieee software 

lerner tirole open source movement key research questions 
european economic review 

ljungberg open source movements model organizing 
european journal information systems 
malone crowston interdisciplinary study coordination 
computing surveys 

markus virtual organization 
sloan management review 

mockus fielding case studies open source software development apache mozilla 
acm transactions software engineering methodology 

moody rebel code inside linux open source movement 
perseus publishing cambridge ma 
moon sproull essence distributed case linux kernel 
monday 
mortensen fuzzy teams boundary disagreement distributed collocated teams 
kiesler eds 
distributed mit press cambridge ma 
nardi whittaker place face face communication distributed 
kiesler eds 
distributed mit press cambridge ma 
team dimensions identity measurement relationships advanced research resources organizations washington dc 
managing boundary open project 
santa fe institute sfi workshop network construction markets 
reilly lessons open source software development 
communications acm 

pfaff society open source open source software better society proprietary closed source software 
available www msu edu user writings anp oss html 
prasad hard look linux claimed strengths available www com opinions html 
raymond cathedral bazaar 
monday 
khoo powers situated learning cross functional virtual teams 
ieee transactions professional communication feb mar 

scacchi understanding requirements developing open source software systems 
iee proceedings software 

schach jin wright heller offutt maintainability linux kernel 
available www vanderbilt edu preprints linux longitudinal preprint pdf 
accessed dec 
shepard lamb kelly testing taught 
communication acm 

code quality analysis open source software development 
information systems journal 

stewart exploratory study factors influencing level vitality popularity open source projects 
proceedings third international conference information systems 
stewart impacts ideology trust communication open source software development teams 
second international conference information systems new orleans la 
evolution linux credits file methodological challenges data open source research 
available www es articles pdf 
accessed november 
open source software 
available www opensource org html 
cohen ii linux os competitive analysis 
available www opensource org html 
software engineering 
di bona stone eds 
open sources voices open source revolution reilly san francisco 
walsh managerial organizational cognition notes trip memory lane 
organization science 

wayner free 
harpercollins new york 
webb unobtrusive measures organizational theory reminder 
administrative science quarterly 

roberts collective mind organizations flight decks 
administrative science quarterly 

maintaining awareness distributed team collaboration implications leadership performance 
kiesler eds 
distributed mit press cambridge ma 
young red hat software new economy model helped improve industry 
di bona stone eds 
open sources voices open source revolution reilly san francisco 
