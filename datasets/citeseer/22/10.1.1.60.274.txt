software engineering framework context aware pervasive computing karen henricksen crc enterprise distributed systems technology school information technology electrical engineering university queensland dstc edu au indulska school information technology electrical engineering university queensland itee uq edu au growing interest context awareness technique developing pervasive computing applications flexible adaptable capable acting autonomously behalf users 
context awareness introduces various software engineering challenges privacy usability concerns 
conceptual framework software infrastructure address known software engineering challenges enable practical exploration social usability issues facilitating prototyping fine tuning context aware applications 

motivation widely acknowledged pervasive computing introduces radically new set design challenges compared traditional desktop computing 
particular pervasive computing demands applications capable operating highly dynamic environments placing minimal demands user attention 
context aware applications aim meet requirements adapting selected aspects context current location time activities user 
years variety prototypical context aware applications developed context aware guides tourists information relevance current location 
ongoing efforts construct instrumented environments monitor activities occupants context sensors objec reported funded part cooperative research centre enterprise distributed systems technology dstc australian federal government crc programme department industry science resources 
tives allowing elderly live independently possible ensuring emergencies quickly detected 
despite flurry interest context aware applications transition laboratory marketplace 
largely result high application development overheads social barriers associated privacy usability imperfect understanding truly compelling commercially viable uses context awareness 
presents software engineering framework addresses challenges simplifying design implementation tasks associated context aware software facilitating types rapid prototyping experimentation required order overcome obstacles 
framework set novel conceptual foundations including context modelling approaches describe context different levels granularity preference abstraction pair complementary programming models 
introduced sections integrated software infrastructure pervasive systems section 
section presents results case study carried evaluate conceptual framework infrastructure section concludes discussion key topics research 

context modelling techniques research field contextawareness adopted infrastructure centred view assumed complexity engineering context aware applications substantially reduced solely infrastructure responsible gathering managing dissemination context information 
variety solutions acquire interpret context information sensors manage integrated repositories context information easily queried applications proposed 
solutions important argue infrastructure centred view tends lead abstractions describing programming context natural ones 
earlier observed proposed infrastructures built context models informal lacking expressive power 
goal develop framework integrates set defined context modelling programming abstractions types infrastructural support described 
developed conceptual foundations framework starting context modelling primary interest 
set goal creating tools support engineer variety tasks implementation followed approach advocated coutaz rey employing context models refined incrementally software engineering life cycle 
sections separate closely integrated modelling approaches developed support exploration specification application context requirements ii management context information stored context repository iii specification classes context close way programmer human user view context 
briefly discuss features context information differentiate context modelling problem information modelling problems 

characteristics context information context information originate wide variety sources leading extreme heterogeneity terms quality persistence 
previous research context awareness focuses fairly homogeneous sets context information usually sensed information location data rich context models integrate sensed static user supplied profiled derived information useful 
classes information display distinctive characteristics example sensed context usually highly dynamic prone noise sensing errors user supplied information initially reliable allowed users date 
context modelling abstractions accommodate types 
problem imperfect context information recognised causes described 
context modelling solutions address part problem allowing context information associated quality metadata certainty freshness estimates 
approach completely ade address modelling ambiguous information arises multiple sources context information report different information ambiguity resolved allow information aspect context completely unknown explicitly represented 
context modelling abstractions unique address issues 

graphical modelling approach developed context modelling approach context modelling language cml tool assist designers task exploring specifying context requirements context aware application 
cml provides graphical notation describing types information terms fact types classifications sensed static profiled derived relevant quality metadata dependencies different types information 
cml allows fact types annotated indicate ambiguous information permitted multiple alternative location readings historical information retained 
supports variety constraints general cardinality relationships specialpurpose snapshot lifetime constraints historical fact types 
initially formulated cml independently established information modelling technique 
afforded flexibility express desired concepts flexible way 
results initial exploration 
subsequently chose reformulate modelling concepts extensions object role modeling orm 
orm chosen closeness original modelling approach superior formality expressiveness comparison solutions er presence mapping relational model allowing straightforward representation context model relational database desired 
example context model shown illustrates cml graphical notation 
model captures user activities form temporal fact type covers past activities ii associations users communication channels devices iii locations users devices absolute relative represented derived fact type 
ellipsis depicts object type value parentheses describing representation scheme object type box denotes role played object type fact type 
model shows user device locations sensed populated alternative facts user device multiple recorded locations correct 
additionally fact user device location associated certainty measure takes form probabil ity estimate 
user activity shown model dependent user location 
details cml modelling constructs reader referred 

relational representation leverage mapping orm relational model create relational representation context information suited context management tasks enforcement constraints captured cml storage database querying context aware applications 
extension halpin relational mapping procedure incorporate context modelling constructs cml described previous repeated 
result mapping example context model shown set basic relations shown 
relational mapping leads representation context captures fact types relations atomic facts tuples database 
order support reasoning contexts adopt closed world assumption 
operates roughly follows 
assume set relations belonging context model instantiation model represents set tuples belonging relation dom set constant values permitted instantiation model 
assertion form cn ci dom true tuple cn false 
stands simple interpretation accommodate uncertain context information 
extend deal unknowns represented null values tuples ambiguity represented alternative facts valued logic 
assertion cn cn constrained evaluates third logical value unknown tuple cn matching tuple constants ci replaced special null value tuple ambiguous alternative facts 
assertion false true unknown 

situation abstraction graphical notation cml suited defining context information contextaware application relational analogue natural choice context storage management serves natural programming abstraction 
describe context information finer granularity required full definition alternative facts tuples see 
describing contexts determine application behaviour 
light developed situation abstraction way define high level contexts terms fact abstraction cml 
situations combined promoting reuse enabling complex situations easily formed incrementally programmer 
situation abstraction similar proposed dey abowd application considerably expressive 
situations expressed novel form predicate logic balances efficient evaluation expressive power 
defined named logical expressions form vn name situation vn variables logical expression free variables correspond exactly set vn 
logical expression combines number basic expressions logical connectives special forms universal existential quantifiers 
permitted basic expressions equalities inequalities assertions form tn described previous section 
problems associated evaluating unconstrained quantified expressions terms efficiency relation called unsafe expressions employ restricted forms quantification ensure quantified variables immediately bound xi tn xi tn xi tn logical expression tn assertion described assertion middle expressions serves restrict possible values variables xi evaluated values 
evaluation situation binding values variables vn context instance occurs usual semantics logical operators valued logic modifications described universal existential quantifiers closed world interpretation assertions outlined previous section 
typically variable bindings supplied context aware application describe selected aspects application context identities participants call case communication application context instance set additional context information available context management system separate application set context information captured cml model 
note symbol acts separator special semantics 
channel located near iff located communication channel id engaged dependson located iff person device location probability person device person activity starttime endtime person location probability person device name located near id engaged activity name mode permitted located requires device located communication mode name located location name synchronous key sensed fact type static fact type profiled fact type derived fact type temporal fact type ambiguous alternative fact type key uniqueness constraint snapshot uniqueness constraint alternative uniqueness constraint dependency quality annotation device synchronous person device probability nr certainty 
example context model constructed context aware communication application described section 
relational mapping model shown 
note relation represents derived context information implemented view ordinary relation 
example situations related communication application described way case study section shown 
assume fact context model 
occupied predicate indicates person currently engaged activity generally interrupted meeting call basis temporal relation 
predicate examines exactly activity facts current time returned function overlaps recorded time interval providing special treatment facts recorded start time 
similarly satisfied person communication channel devices required order located close proximity additionally permission devices 
predicate holds communication channel provided mode channel recorded relation synchronous indicated appearance synchronous relation 
simple urgent predicate satisfied occupied person activity person activity activity meeting activity call person channel device channel device person device person device channel mode channel mode synchronous mode urgent priority priority high 
example situation predicates context aware communication application 
assume context model shown 
priority variable value high 

preference model growing recognition common usability challenges associated context aware software related largely lack transparency user control applications actions consequent need improved techniques eliciting capturing user requirements preferences 
date little research addressing issues 
exception byun cheverst explored integration user modelling techniques context aware applications order automatically elicit adapt user requirements 
appears promising argue explicit means representing user preferences required 
explicit representation allows users formulate preferences desired provides tool exposing preference information providing transparency users able understand motivation applications actions corrections necessary 
explicit representation preferences compatible automated learning techniques similar byun cheverst 
surveyed variety preference modelling approaches area context awareness fields decision theory information systems document retrieval aim identifying preference abstraction exploit software engineering framework support highly dynamic customisable context aware behaviour 
context aware systems preferences viewed type context modelled manner context information approach taken cc pp 
solution suitable expressing simple requirements set languages acceptable presenting information user sophisticated context dependent preferences 
encountered difficulties attempt borrow preference modelling solution field approaches evaluated offered natural way incorporate context determinant preferences 
accordingly developed novel preference modelling technique situation abstraction 
designed support straightforward composition preferences users express set simple possibly conflicting requirements combine form exhaustive preference descriptions compatibility automated preference elicitation techniques 
preference model supports ranking set candidate choices communication channels interactions users case communication application context 
preference takes form named pair consisting scope scoring expression 
scope describes context preference applies terms situations 
scoring expression assigns score candidate choice score numerical value range increasing scores represent increasing desirability special values 
represents veto indicating candidate score assigned selected corresponding context represents indifference absence preference 
score represents obligation candidate score assigned selected corresponding context repre sents undefined score signalling error condition 
preferences grouped sets combined policies single score produced choice reflects preferences set 
user feedback exploited adapt policy better meet user requirements example redistributing weights assigned individual preferences add new preferences set 
presents example preferences 
preference name shown left scope scoring expression preceded keywords rate respectively 
preference forbids synchronous channels telephone videoconferencing channels user access requisite devices 
preferences imply synchronous channels preferred choice urgent calls assigns highest possible score assigns asynchronous channels email sms score 
noted preference format shown exposed directly users 
users typically select standard preferences come applications construct combine preferences graphical editing tools supply libraries predefined situations scoring policies 
situations preferences evaluated run time context instance set choice specific variable bindings 
preferences program flexible context aware behaviour covered section 

programming models crucial role appropriate abstractions programming models development flexible context aware applications long recognised little progress area 
context aware applications programmed traditional software engineering techniques embed context information directly source code leading largely static behaviour applications difficult maintain 
similarly programming models proposed stick note model generally applicable narrow application domains 
sections describe general programming models conjunction situation preference abstractions 
branching model offers novel flexible means insert preference dependent decision points normal flow application logic 
contrast triggering model widely previously programming adaptive context aware applications reformulated exploit situation abstraction means describing context changes 

branching branching model supports context dependent choice set alternatives 
example uses model context aware information retrieval choice appropriate communication channels interactions users 
applications contextdependent choices typically realised case statements 
primitive solutions result tight binding context model application logic making difficult change context model sensing infrastructure user requirements evolve 
overcome problem exploit preference model described section model branching 
user preference information forms link context chosen action preferences assign ratings alternatives context application parameters ratings application selects invokes actions associated 
solution extremely flexible preference information expressed application neutral format enables modification fine tuning required run time facilitates sharing preferences applications allowing set context aware applications provide consistent coordinated behaviour 
implemented support branching model form java programming toolkit 
selected methods provided toolkit shown 
rate method parameters set choices preference composite preference encompassing diverse set user requirements valuation binding variables contained preference constant values application context context object wrapper repository context information 
uses compute mapping choices scores application act desired 
methods select single best best choices basis scores assigned supplied preference 
similarly returns set choices numerical scores lie specified threshold returns set choices assigned obligation score 
methods companion method shown returning set choices automatically invokes action associated choice 
experiences toolkit implement context aware communication application described section 

triggering support asynchronous style programming actions automatically invoked response context changes provide trigger mechanism channel callee channel rate urgent priority channel rate urgent priority channel rate 
example preferences context aware communication application 
scores rate choice preference valuation context cx choice choice preference valuation context cx choice int choice preference valuation context cx choice score threshold choice preference valuation context cx choice choice preference valuation context cx built situation abstraction 
context changes described changes situation states 
possible states true false unknown distinct state transitions 
triggers associated transitions sequences transitions written tn tn transitions sets alternative triggers written tn needs occur order invoke trigger 
follow event condition action eca model trigger includes precondition invocation specified action evaluated detection trigger event 
event specified terms situations 
model associates trigger lifetime start times 
example triggers shown 
events conditions actions prefixed respectively 
actions described natural language simplicity usually take form invocations relevant source code 
trigger effect notifying user emma may engagement defined meeting phone call missed calls 
second trigger assumes pair users involved phone call monitors ability current telephone lines invoking adaptation channel condition ceases hold 
triggers additional preconditions detection specified event condition simply expression true 

software infrastructure run time support programming models related tasks management context 
selected methods branching toolkit 
preference information provided software infrastructure 
section brief overview architecture infrastructure partial implementation developed proof concept 
infrastructure organised loosely coupled layers shown 
context gathering layer acquires context information sensors processes information techniques interpretation data fusion bridge gap raw sensor output level abstraction frequency updates required context management system recall earlier sections stores atomic facts 
event notification scheme achieve loose coupling sensing processing components reception layer 
minimises problems associated component failures disconnections evolution sensing infrastructure 
context reception layer provides bidirectional mapping context gathering management layers 
translates inputs fact representation routes queries appropriate components 
context management layer responsible maintaining set context models instantiations relational representation described section 
typically application distinct model applications perform related tasks may share models 
intention context management layer distributed provide query performance tolerance failures disconnections currently implement single shared repository built relational database 
query layer provides applications adaptation layer convenient interface query alse occupied emma may true notify missed calls rue emma may rue michelle williams true negotiate new communication channel context management system fact situation abstractions 
supports synchronous queries asynchronous notifications situation changes described section 
adaptation layer manages common repositories situation preference trigger definitions evaluates behalf applications services query layer 
single repository shared logical grouping applications group typically comprises applications residing single device belonging user 
application layer provides toolkit support programming models 
core functions branching toolkit described section 
triggering toolkit provides methods dynamically creating new triggers activating deactivating existing triggers 
currently working prototype implements basic functions context management query adaptation application layers focusing branching functionality 
mentioned earlier context management system relational database implements fact types constraint types cml 
implementation query layer relatively simple performing direct mapping fact situation queries sql queries directly executed relational database 
asynchronous notification feature implemented required branching model 
adaptation layer currently stores preference situation information textual form files edited directly application developer sophisticated users 
fully implemented branching toolkit described section evaluation toolkit underlying abstractions section 

case study context aware communication developed context aware communication application testbed experimenting branching 
example triggers 
preference models context modelling techniques 
application functions integrated communication platform choice communication channels interactions users mediated context aware agents 
agent manages records history interactions user variety communication channels including telephone email text messaging videoconferencing 
sequences related interactions organised threads termed dialogues 
user requires interaction person communication agent invoked 
agent cooperation agents participants consults contexts preferences party order recommend appropriate channel 
main parameters choice implemented branching model user activities priority interactions relationships participants available communication devices 
designing application conducted informal study investigate patterns interpersonal communication factors users cited choices communication channel 
results study constructed context model cml list situations covered main classes context believed users need specify preferences 
defined set default preferences application users modification desired 
steps carried iterative fashion encountered preferences required new types context information situations express terms fact model extended context models accommodate 
driven practical considerations example modelling context cml necessary consider modelled information gathered users sensors required level quality 
mapped context model manually context management system generated set sample context data simulation purposes implemented communication application branching toolkit 
results case study positive 
cml situation abstraction nat application application application context manager programming toolkit adaptation manager situation repository query interface model model model receptor receptor receptor receptor interpreter preference repository context repository aggregator interpreter interpreter trigger repository sensor sensor sensor sensor sensor ural easy experience mapping cml model relational database painless 
encountered unexpected results preference model relation preferences assigned frequent indifferent scores 
occurred preference scopes incompletely covered set possible contexts example users specified preferences relation urgent interactions 
result agents fail suggest suitable communication channel 
fortunately simple solutions problem augment preferences provide complete coverage possible contexts program application provide better handling indifferent scores 
adopted solution require changes source code developing applications intend design follow second solution robust 
experiences pro key 
architecture 
synchronous communication asynchronous communication application layer adaptation layer query layer context management layer context reception layer context gathering layer gramming toolkit positive plan extend toolkit provide improved handling indifferent veto scores 
case study showed conceptual framework software architecture extremely successful terms original goal facilitating development context aware applications flexible adaptable autonomous 
multi layered context modelling techniques branching model mean able easily evolve underlying context model changing source code developer users easily adapt fine tune choice communication channels simply editing preferences 
features facilitate types experimentation necessary gain better understanding compelling uses context information explore usability problems de scribed section 
similarly customisable preferences means considerable degree autonomy achieved communication agent removing control user 

set develop conceptual models supporting software infrastructure capable facilitating variety software engineering tasks involved development context aware software 
believe successful goal argue remains considerable scope area 
particular need better understanding software life cycle associated context aware software design tools address challenges unique context aware applications 
just area example gray salber proposed design framework supports informal exploration types characteristics sensed context information required application focusing quality service 
tools methodologies needed address additional problems design suitable privacy policies application functionality conforms order protect context information possible abuses user interfaces address known usability challenges balance application autonomy user control 
abowd atkeson hong long kooper pinkerton 
cyberguide mobile context aware tour guide 
wireless networks 
brown 
stick document framework creating context aware applications 
electronic publishing pages palo alto 
brown chen 
context aware applications laboratory marketplace 
ieee personal communications october 
brown jones 
context aware retrieval exploring new environment information retrieval information filtering 
personal ubiquitous computing december 
byun cheverst 
exploiting user models context awareness support personal daily activities 
um workshop user modeling context aware applications july 
chen kotz 
context aggregation dissemination ubiquitous computing systems 
th ieee workshop mobile computing systems applications wm csa june 
cheverst davies mitchell 
context crystal ball rewards pitfalls 
personal ubiquitous computing february 
cheverst davies mitchell friday 
experiences developing deploying context aware tourist guide guide project 
th international conference mobile computing networking mobicom pages boston august 
coutaz rey 
recovering foundations theory 
th international conference computer aided design user interfaces may 
dey abowd 
context aware system supporting reminders 
nd international symposium handheld ubiquitous computing volume lecture notes computer science pages 
springer 
dey salber abowd 
conceptual framework toolkit supporting rapid prototyping context aware applications 
human computer interaction 
gray salber 
modelling sensed context information design interactive applications 
th ifip international conference engineering human computer interaction volume lecture notes computer science pages 
springer 
halpin 
information modeling relational databases conceptual analysis logical design 
morgan kaufman san francisco 
helal winkler lee ran mann 
enabling location aware pervasive computing applications elderly 
st ieee conference pervasive computing communications com fort worth march 
henricksen 
framework context aware pervasive computing applications 
phd thesis school information technology electrical engineering university queensland submitted september 
henricksen indulska rakotonirainy 
modeling context information pervasive computing systems 
st international conference pervasive computing pervasive volume lecture notes computer science pages 
springer 
henricksen indulska rakotonirainy 
generating context management infrastructure context models 
th international conference mobile data management mdm industrial track melbourne january 
jameson 
modeling context user 
personal ubiquitous computing february 
lei sow davis banavar ebling 
design applications context service 
acm sig mobile mobile computing communications review october 
nilsson 
composite capabilities preference profiles requirements architecture 
working draft july 
stanford 
pervasive computing deliver elder care 
ieee pervasive computing january march 
