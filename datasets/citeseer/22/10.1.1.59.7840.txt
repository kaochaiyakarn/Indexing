self organization overlay networks sven hm otto von university magdeburg germany iti cs uni magdeburg de university karlsruhe th germany boehm ipd uni karlsruhe de 
overlay networks important kind infrastructures 
range applications requirements broad 
consequently research objective overlay networks organize adapt runtime 
article describes current state project gives overview steps envisioned 
briefly show necessity self organization overlay networks 
experience provide list overlay network system parameters relevant dynamic adjustment 
designing mechanisms self adaptation overlay networks observed interference semantic level interference 
deal phenomena overlay network architecture envisioned separate functionality self organization system core functionality preserve system integrity 
achieve propose self tuning mechanisms explicit pre postconditions conflict resolution reflection 
discuss alternative implementation techniques concrete approach aspect oriented programming mixin layers 
conclude insights organic overlay networks emergent behavior 
peer peer paradigm gain momentum near due scalability reliability economic efficiency 
distributed hash tables dht follow paradigm store administer huge sets key value pairs highly distributed manner central coordination 
virtual network structure dhts independent underlying physical network 
called overlay networks overlay networks potential applications area www internet computing 
experience article starts explaining overlay networks able adapt runtime 
short broad range application requirements characteristics environment may change time 
calls self adaptation self organization 
article describes current status project aiming self organizing overlay networks steps envisaged 
remaining article term overlay network refer class distributed systems 
absence coordinator runtime adaptation trivial 
peer adapt behavior individually concert peers 
speak self adaptation overlay network mean adaptation participating peers 
refer entire process self adaptation selforganization synonymously self tuning system 
previous attempts implement self tuning mechanisms revealed daunting complexity task 
mechanisms integrated interfere core functionality 
interference may take place implementation level semantic level 
kinds interference different explain 
discusses applicability various software engineering principles notably reflection aspect orientation components meta data techniques implement self tuning overlay networks modular efficient manner 
propose concept reflective framework top overlay networks 
solution separate functionality self organization system core functionality preserve consistency conditions 
achieve propose self tuning mechanisms pre postconditions explicit reflection 
sketch potential ways implementing self tuning mechanisms inside reflective framework discuss pros cons current state project 
furthermore concrete implementation approach aop mixin layers 
discuss preliminary results regarding organic overlay networks emergent behavior 
remainder follows sections introduces overlay networks 
section reviews relevant software engineering methods 
section introduces self tuning overlay networks describes open problems 
section presents concept reflective framework top overlay networks describes integration self tuning mechanisms 
section discusses open questions regarding implementation 
section presents approach implementing self tuning mechanisms 
section outlines section concludes 
overlay networks dhts current overlay networks constitute dhts 
structure data administered overlay networks simple key value pairs 
peer pairs 
hash function applied keys distributes data peers 
overlay network variants differ topology key space definition proximity 
chord organizes key space circular dimensional vector space 
pastry uses plaxton mesh 
overlay networks provide interface identical ordinary hash table 
content addressable networks important kind overlay network gained experience overlay networks implementing 
key space dimensional coordinate space 
peer responsible zone key space 
means external characteristics network latency nl transfer rate tr network topology nt connectivity table 
external system characteristics 
internal characteristics peers np workload wl data density dd unreliable peers table 
internal system characteristics 
peer stores key value pairs keys fall zone 
query evaluated forwarding messages peer peer greedy fashion peer responsible query point reached 
range applications overlay networks broad see comprehensive list objective design implementation overlay network supports 
overlay network applications requirements quite diverse change time 
example mobile groupware demands secure reliable communication cope resource constraints mobility 
web annotation service requires flexible load balancing mechanism fair distribution 
order fit requirements face environmental changes network traffic workload connection interrupts available resources overlay networks adapt organize dynamically runtime 
fact means individual peers alter behavior 
experience mentioned applications groupware mobile ad hoc networks web annotation service revealed number system characteristics influence behavior overlay networks high 
distinguish external characteristics internal characteristics cf 
tables 
external characteristics characteristics environment internal ones environment independent 
furthermore see indicators allow peer derive current status regard characteristics 
example number incoming queries time serves indication current workload 
table lists indicators corresponding characteristics 
behave way acceptable application overlay networks adapt changes environment 
identified system parameters listed table indicators react 
example 
peer detects increase workload observing indicator rate incoming queries 
rate incoming queries exceeds threshold peer try increase degree replication options 
number peers processing queries increases 
rate queries processed original peer decreases 
side effect availability data increases 
contrast rate decreases replication degree reduced save resources reduce overhead replica maintenance 
conventional overlay networks participation voluntary 
peers free decide resources provide overlay indicators characteristics query response time tresp nl tr nt wl unanswered queries forwarded messages np wl dd incoming queries time nl tr np wl dd table 
relationship indicators system characteristics 
indicators parameters size contact cache tresp tresp replication strategy replication degree tresp communication channels reliability threshold table 
relationship parameters indicators 
network 
obviously soon leads free riding 
free riders peers try benefit system query overlay network participate forward answer queries 
refer free riders unreliable peers 
various approaches free riding proposed reputation schemes 
part implemented lightweight reputation mechanisms 
serve example issues review peer generates positive feedback peer performed useful 
peer may generate negative feedback certain situations 
feedback distributed swarm manner 
time stamped order expire time 
peer uses feedback stored reputation repository decide deems peer reliable number positive feedback objects higher reliability threshold 
peer ignores feedback attached incoming message deem sender reliable 
scheme self tuning mechanism determines behavior performance characteristics overlay network 
part core functionality applications contexts need groupware local area networks 
software engineering methods self organization implementing self adaptive overlay networks paradigms important reflection 
reflection widely accepted method implement self introspection self adaptation 
reflection introduced context programming languages 
reflective programming languages enable programmer reason language constructs classes methods observe modify 
concept applied software systems general reflective software systems structural behavioral properties explicit able reason introspection alter structure behavior adaptation 
refine internal structure behavior form meta data 
spectrum possible adaptation mechanisms reaches simple parameter adjustments increasing value complex structural changes modifying methods classes 
theoretical practical done area reflective systems 
knowledge research reflective systems 
hand systems beehive focus dynamic adaptation protocol level 
argue system benefit reflection observing internal state current workload reacting invoking load balancing mechanism 
note introspection adaptation done individual peers 
centralized view system 
currently unclear reflective architecture implemented top overlay networks 
software engineering methods help implement reflective architecture 
separation concerns 
implement self organization paradigm separation concerns essential 
idea separate basic functionality special purpose concerns synchronization real time constraints 
argue separation programs easier write modify 
separation important self organization overlay networks experience shows self organization mechanisms strongly tangled core functionality order implement light weight reputation mechanism see section modify classes code positions implement new classes 
numbers tell aim self organization context proper software engineering support 
problem daunting self tuning mechanisms applied 
aspect oriented programming 
aspect oriented programming aop strongly related reflection approach support separation crosscutting concerns 
idea aop implement crosscutting concerns aspects 
prevents known phenomena code tangling scattering 
core features implemented components common design implementation methods 
pointcuts advices aspect weaver brings aspects components 
pointcuts specify join points aspects components 
advices specify code applied points 
aspectj language extension compile time aspect weaving 
propose investigate dynamic weaving mechanisms 
dynamic weaving flexible consumes resources 
aop candidate implement self organizing overlay networks aop enables programmer separate introspection adaptation code eclipse org aspectj peer core 
prevents mentioned code tangling scattering 
furthermore aop allows flexibly alter self tuning mechanisms weaving new aspects compile time runtime 
component techniques 
component models mixin layers facilitate modularization crosscutting concerns class object method level composition components 
mixin layers appropriate technique implement software systems feature oriented fashion 
basic idea features implemented collaboration class fragments 
mixin layer static component encapsulating fragments different classes mixins fragments composed consistently 
mixin layers established implementation technique component layered designs 
advantages high degree modularity easy composition 
ahead generalizes concept mixin layers kinds software artifacts documentation uml diagrams makefiles 
overlay network product line ahead derive tailor overlay networks order fit application requirements specific environments 
ahead design rule checks allow semantic checking composition overlay networks different components 
self tuning overlay networks section describes problems related self tuning overlay network 
mechanism observes system characteristics see tab 
indicators see tab 
adapts system parameters see tab 
related characteristics 
self tuning mechanisms described serve running example article 
simple allow better focus issues essential 
number incoming queries 
number incoming queries indicator 
infer average computational load network traffic inside overlay network 
overlay networks number queries exceeds threshold peer replicate parts data repository peers 
words corresponding system parameter example degree replication 
network transfer rate 
network transfer rate technical system characteristic 
decreases dramatically connection interrupted peer alternative communication protocols media 
corresponding system parameter example replication degree increasing increases availability data allows cope changes transfer rate 
identified self tuning overlay networks crosscutting concern 
trivial integrate self tuning mechanisms due crosscutting nature 
implementations interfere implementation peers core functionality 
want apply example mechanisms overlay network add code introspection system characteristics transfer rate workload 
code tangled code core communication listing accepting connections receiving messages 
classes methods implemented analyze changes characteristics 
addition replication code crosscuts wide parts core functionality 
problems occurred integrating lightweight reputation mechanism see section 
modify numerous implementation units classes code points new classes 
remaining article refer effects implementation level interference 
problem semantic interference arises 
semantic interference means mechanisms conflict opposite direction 
think examples integrating self tuning mechanisms peers conflicts occur current system configuration include replication components 
mechanisms adjust system parameter replication degree 
mechanism may increase decreases 
system behavior meaningful concurrent mechanisms waste resources system state instable 
summing challenges arise implementing self organizing overlay networks implement self tuning mechanisms modular way 
possible apply mechanisms crosscutting system core 
avoid semantic interference 
reflective self tuning overlay networks section introduces reflective architecture overlay networks order integrate self tuning mechanisms 
list discuss alternative methods add self tuning mechanisms reflective framework 
methods standard discussion applicability overlay networks original 
reflective architecture depicts architecture system envisioned including system core reflective framework plugged self tuning mechanisms 
reflective architecture separates base level meta level reifies meta data 
specialty architecture proposed encapsulation self tuning mechanisms pluggable units 
plugged self tuning mechanisms operate reified meta data alter peers structure behavior 
avoid interference semantic implementation level 
encapsulate self tuning intend components component entities aspects 
recall components large scale software building blocks encapsulate complex self tuning mechanisms 
avoids interference problem implementation level 
avoid interference note refer plugging mechanisms peers instance 
semantic level intend integrate conditions self tuning mechanisms see fig 

similar approaches exist domain component techniques ahead design rule checks 
want investigate reuse approaches overlay networks 
similar ahead design rule checks distinguish pre postconditions 
preconditions state prerequisites apply self tuning mechanism postconditions state conditions hold self tuning mechanism kicked 
system core configuration self tuning mechanisms cond 
cond 
cond 
consistency checker meta data reflective framework system core reification core components fig 

reflective overlay network example 
think self tuning mech number incoming queries network transfer rate 
plugging may cause conflicts core replication entity 
adjust parameter replication degree 
pre postconditions avoid conflicts mechanism defines precondition state requires replication entity core 
mechanisms provide postcondition declares adjust replication de gree 
reflective framework detect conflicts processing conditions 
reflective framework manages self tuning process 
provides interface application programmer add remove configure self tuning mechanisms 
provides reifies information structure underlying system current system state behavior 
candidates reification context characteristics tables indicators table parameters table 
subsequent step consistency checker compares pre postconditions internal representation system core 
detects conflicts kinds informs application callback mechanism 
implementation issues section discusses alternatives reflect modifications reified parameters self tuning mechanisms peers aspect oriented programming component techniques architectural reflection 
describing alternatives briefly talk strengths weaknesses 
aspect oriented programming 
aop weave dynamically code self tuning mechanisms points inside components system core 
illustrates 
self tuning mechanisms provide aspect implementations dark gray box written specific aspect language 
configuration unit uses aspect weaver weave core components overlay network bent arrows 
depending plugging method weaving takes place load time runtime 
provide new aspect aspect self tuning mechanisms cond 
cond 
cond 
configuration unit aspect weaving meta data reflective framework system core core configuration core components fig 

self tuning aspect weaving provide new component new old self tuning mechanisms cond 
cond 
cond 
configuration unit restructuring components meta data reflective framework system core core configuration core components fig 

self tuning component composition component techniques 
configuration feasible composition components 
called configuration unit core components 
words exchanges components applies new ones removes existing ones 
shows replacement existing component white box bottom left new gray box 
elegantly encapsulate behavioral strategies components 
instance overlay network peer pursue different caching policies neighbors cache data frequently accessed remote peers cache data peer change caching policy exchanging respective component interface 
architectural reflection 
architectural reflection uses design information evolutionary rules evolve structure behavior software systems 
idea combine approach self tuning mechanisms 
self tuning mechanism provide consistency conditions evolutionary rules 
note evolutionary rules different consistency conditions 
consistency conditions prevent conflicts self tuning mechanisms 
evolutionary rules turn describe adapt structure behavior peers 
hypothesize overlay network specific evolutionary rules describe specific structure behavior characteristics overlay networks precise way generic rules 
depicts overlay networks enhanced architectural reflection 
application programmer obtain information overlay network internal state structure meta interface 
meta objects bear information 
programmer defines evolutionary rules inside self tuning mechanism specify characteristic observed adapt corresponding parameter 
rules form condition adaptation 
configuration unit processes rules observes characteristics specified block 
conditions true executes clause 
modifies reified meta objects 
configuration unit reflects modifications base level 
currently know method superior specific context 
aop dynamic weaving able modify system core expression statement level 
advantage implement self tuning mechanisms crosscutting concerns modular units 
disadvantage weaving process complex 
result decreased performance higher resource consumption 
advantage reuse aspects overlay networks implemented domains 
candidates middleware domain synchronization logging authorization load balancing encryption 
trap control flow self tuning mechanisms rules rules rules cond 
cond 
cond 
configuration unit reflect modifications reflection evol 
rules meta data reflective framework system core reification core components fig 

self tuning architectural reflection advantage modern component mod els components easy compose 
interact system core method class object level contrast statement level aop 
exceptions component languages currently immature 
crosscutting nature self tuning mechanisms implemented highly modular way 
may lead interference 
component models provide dynamic composition 
modern component models base technology build pla 
similarly dynamic weaving approach architectural reflection extremely flexible 
application programmer decides expression statement level control flow trapped base data reified evolutionary rules specify new system behavior structure 
disadvantage higher memory consumption store design information weaker performance design information processed reified reflected runtime 
open question specify check evolutionary rules context overlay networks 
preliminary implementation results section experiences implementing self tuning mechanisms 
preliminary approach combines aop mixin layers 
attempts implement self tuning contact caching reputation mechanism load balancing 
implementation mechanisms observed dissemination meta data fundamental self tuning mechanisms 
examples meta data information current load remote contacts feedback objects reputation mechanism rsa keys application specific information synchronization signals parallel processing applications see discussion 
due absence central coordinator meta data propagated decentralized manner 
see strategies cache incoming meta data fifo random lru 
caching strategies propagate right direction greedy forwarding kleinberg distribution multicast 
dissemination strategies 
system core implementation 
chord grid weave aop mixin layers caching aspect aspect aspect weaver aspect select select dissemination aspect composed caching strategy composition composition composed dissemination strategy compose caching layers mixin layer mixin layer mixin layer generator mixin layer mixin layer mixin layer dissemination layers fig 

generating applying strategies mixin layers aop 
furthermore observed strategies differ details threshold additional constraints 
observations considerations section investigated combined component aspect oriented architecture 
utilize aop mixin layers enable implement broad range caching dissemination strategies top overlay network 
strategies essential implement higher level mechanisms 
gives overview approach 
paragraphs discuss approach roles aop mixin layers 
aop 
mainly aop aspectj separate code metadata caching dissemination strategies core implementation overlay network 
left side depicts schematic design dissemination caching strategies implemented aspects 
seen aspects separated clearly 
allows design generalized protocol implementation depend type overlay network increases reusability ability plugging strategies 
mixin layers 
design phase observed need small modifications caching dissemination strategies specify different protocol characteristics 
example algorithmic point view caching strategy random differs fifo order items removed 
furthermore features common strategies keep track peer certain item sent 
implementing new strategy form separate aspect variant inefficiently errorprone approved code reused 
decided combine approach aspect oriented strategies mixin layer implementation 
mixin layers implement variants different caching dissemination strategies ahead tool suite configuration generation process 
doing decompose mechanisms caching dissemination fine grained layers 
design able compose layers generate different strategy variants 
aop apply configured strategies core overlay network peers 
depicts schematic overview configuring applying strategies peers generator ahead composer composes strategies user specification 
composed strategies applied peer core aspects aspectj weaver 
mixin layers need multiple aspects 
need applying caching strategies applying dissemination strategies 
depicts stack mixin layers implemented random dissemination fifo caching 
enclosing grey boxes mixin layers 
included rounded boxes inner mixin classes 
depicts inheritance relations inner classes 
relations associations external classes omitted 
base layer includes needed data structures metadata provide base application specific data storing cached meta data attach meta data messages strategy base classes interfaces 
tangible strategies example random dissemination fifo caching implement interfaces provide desired algorithm 
layer refines metadata base adding time stamps meta data object 
layer prevents meta data cache messages storing equal meta data objects 
creates logging dump analyze experiments 
dissemination strategy dissemination strategy dissemination strategy caching strategy caching strategy caching strategy meta data meta data metadata cache metadata cache meta metadata metadata data cache list experiment logging random dissemination fifo caching entries timestamped metadata base fig 

stack mixin layers fifo caching random dissemination 
advantage mixin layers easily derive combine new variants strategies 
introduce new caching strategy implement interface 
doing remove currently strategy apply new 
way easily combine caching strategies dissemination strategies 
different application specific self tuning mechanisms require different combinations caching dissemination strategies 
advantage able reuse base data struc tures existing strategy implementations 
imagine proximity fifo caching strategy combines fifo caching contact information peer 
useful order limit range meta data contacts peer 
cache entry generated immediate contact caching strategy fifo 
cache entries dropped 
proximity fifo caching strategy reuses code simple fifo strategy 
discussion 
implementation concept implement complex self tuning mechanisms argue 
current considered se mantic interference dynamic plugging 
propose extended version ahead design rule checks implement consistency conditions 
allow dynamic plugging aspects applying self tuning components mixin layer stacks dynamically 
aspect frameworks prose 
consistency conditions processed runtime parsing corresponding files 
summary combination aop mixin layers appropriate approach implement modular self tuning 
additionally investigate component techniques architectural reflection seamless integration design rules reflective architecture 
organic overlay networks emergent behavior modelling self organizing overlay networks design implementation issues investigate potential organic character state self organizing overlay networks 
model self organizing overlay networks characteristics organic systems central coordination instance individual peers autonomous peers interconnected massively causal dependencies peers behavior may non linear 
observation leads question self organizing overlay networks behave organic sense emergent behavior 
naturally interested model behavior peers interactions general achieve emergent order 
means global behavior overlay network shows ordered pattern easily derived local behavior described states rules peers 
find indices emergence order experimenting 
particular try adopt ideas flocking models social interaction models implement self tuning mechanisms 
results show organic behavior achieved simulating swarms top 
currently want apply results simple load balancing mechanism 
load balancing algorithm described global entity policy 
distributed individual peers form behavioral rules 
desired global behavior balanced load emerges behavior autonomous peers 
main goal find identify called phase transitions 
phase transitions spontaneous changes behavior triggered minimal parameter adjustments 
experiments indications phase transitions culture model top 
interested parameters overlay network trigger phase transitions adjust parameters shift instance load distribution overlay network ordered state balanced load 
insights want build efficient complex self tuning mechanisms reputation mechanism 
investigate parallel execution different self tuning mechanisms impact emergent global behavior phase transitions robustness failures 
overlay networks useful broad range applications cope different changing environments 
calls self organization 
article provides overview current status ongoing project targets self organizing overlay networks 
described design decisions problems currently face 
instance self tuning mechanisms may interfere system core 
interference occur implementation semantic level 
discussed different methods deal problem context overlay networks 
furthermore compared different techniques implement self tuning mechanisms 
approach aop mixin layers 
part directions ongoing organic overlay networks emergent behavior 
set current ongoing experiments swarm algorithms overlay networks supposed reveal insight organic overlay networks 
want build new self tuning mechanisms trigger emergent order 

feature oriented aspect oriented programming 
technical report department computer science otto von university magdeburg germany 

axelrod 
dissemination culture model local convergence global polarization 
journal conflict resolution 

batory 
scaling step wise refinement 
ieee tse 

hm buchmann 
counter free riding peer peer data structures 
proc 
coopis 

buchmann 
piggyback meta data propagation distributed hash tables 
proc 
miami florida may 

rule strategic reflection observing modifying behavior architectural level 
proc 
ase 

datta hauswirth aberer 
web trust enabling commerce 
proc 
ieee conf 
commerce 

dijkstra 
discipline programming 
prentice hall 

dowling cahill 
component architecture meta model self adaptive software 
proc 
int 
conf 
metalevel architectures separation crosscutting concerns 

gribble ninja architecture robust internet scale systems services 
computer networks 

hughes coulson warren 
framework developing reflective dynamic networks 
proc 
computing 

kelly 
control new biology machines social systems economic world 
basic books 

kiczales aspect oriented programming 
proc 
ecoop 

kiczales rivieres 
art metaobject protocol 
mit press 

maes nardi editors 
meta level architecture reflection 
north holland 

mezini ostermann 
variability management feature oriented programming aspects 
acm sigsoft 

alonso gross 
just time aspects efficient dynamic weaving java 
proc 
aosd 

sirer 
design implementation generation name service internet 
proc 
acm sigcomm 

rao load balancing structured systems 
workshop peerto peer systems 

ratnasamy scalable content addressable network 
proc 
acm sigcomm 

reynolds 
flocks herds schools distributed behavioral model 
computer graphics 

kon campbell 
reflective middleware desk hand 
ieee distributed systems online 

rowstron druschel 
pastry scalable decentralized object location routing large scale peer peer systems 
proc 
middleware 

smaragdakis batory 
mixin layers object oriented implementation technique refinements collaboration designs 
acm 

smith 
reflection semantics procedural language 
technical report mit laboratory computer science 

stoica chord scalable peer peer lookup service internet applications 
proc 
acm sigcomm 


dynamic aop runtime weaving java address 
workshop dynamic aop 

yates editor 
self organizing systems emergence order 
plenum new york 
