addressing cheating distributed wesley mariano alejandro buchmann buchmann dvs informatik tu darmstadt de databases distributed systems group darmstadt university technology germany massively multiplayer online games risky business offer potential profits conventional computer games require costly investment necessary hardware infrastructure 
nearly today costs come client server architecture load possibly thousands players handled provider backend 
distributed peer peer techniques load shifted completely partially players machines 
load control game may fall hands clients 
architecture presents spectrum options reduce running costs simultaneously attempt retain provider control game particular control cheating 
categories subject descriptors computer communication networks network architecture design computer communication networks distributed systems general terms design security keywords distributed systems massively multiplayer online gaming cheating 
success internet online games popular 
players playing pc games quake counter strike internet 
gk enabling technologies electronic commerce permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
october hawthorne new york usa 
copyright acm 
promising segments online games market massively multiplayer online games 
grown factor years having currently subscribers europe roughly number players asia 
traditionally built relying client server architectures 
point view client player side acts simple front accepts player input forwards server 
processing game state completely done server side changes sent back clients show graphical representation game world 
traditional computer games development game prelude real launching running game service backend 
able handle thousands players simultaneously large amounts computing power network bandwith required server side 
costs supplying servers connectivity easily reach hundreds thousands dollars month 
factor players owners powerful machines average computer user 
fact considering amount resources required nearly proportional number simultaneous players peer peer architecture traditional client server 
peer peer architectures save costs due utilization resources client side 
shows ways applying techniques reduce costs time maintaining subscription business model providing protection cheating 

motivation simply chance client server architecture striking advantage giving game providers full control games 
business model subscriptions provider wants decide players may join game paying fees 
subscriptions provide recurring profits serve effective solution piracy 
important aid cheat prevention server sole authority game global state validates action request sent clients carrying 
architecture compared system straightforward implement 
downside systems cost scalability 
instance cost acquiring servers simultaneous players bandwidth costs number players dollars month 
considering block world wow sold hundreds thousands copies days imagine actual costs multiple mentioned 
reason correctly pre estimating number players crucial 
underestimating result major customer dissatisfaction due poor availability performance game servers overestimating means wasted money due idle resources 
successful titles wow backed funded publishers profits high lowering costs may primary issue 
success barely predictable popular titles costs may endanger feasibility project 
furthermore lower upfront costs may remove entry barriers game publishers allowing enter market 
scalability especially issue server architectures possibilities grow customer base severely limited 
distributed architectures server side grids object request brokers may solution scalability problem 
exist commercial middleware solutions internet communications engine ice butterfly net todays developers reluctant applying external solutions rely building 
distributed server architectures provider pay bandwidth cpu cycles 
way significantly reducing costs shift part cpu network load client done systems 
solution problem predicting amount players additional player joins game brings additional resources system 
course challenges come architectures loss authority game state system consistency availability persistent data storage higher complexity name important 
primary focus problems related loss authority consistency issues touched 

cheaters delving different approaches gives short issue cheating 
multiplayer game players proximity may know cheating may handled players anonymity internet serious threat game provider business 
cheaters try gain unfair advantage players example duplicating game items item cheat generally short cutting achievements take enormous time effort honest players 
totally destroy game economics online game valuable rare items widely available powerful high level characters usually rare occurrence may seen 
honest players soon notice keep cheaters cheats accelerate collapse economic system playing game 
mentioned system server sole authority global game state 
theory impossible players gain advantage performing malicious alterations state 
practice design flaws implementation bugs may allow successful cheating scope 
environment single authority global game state distributed peer nodes 
consequently node able alter local state arbitrarily 
kind cheating interest context players acquire information intended 
player knows position enemy hiding wall example 
see enemy shouldn know position 
system server easily restrict flow information client 
player hear see notice enemy receive information position 
system information distributed peer nodes difficult prevent leakage information 
client information able disclose rules 
worse cheaters called 
name implies sole intention people hurt players experience possible 
may performed breaking game rules players player chat may exploit possible cheats hurt players killing avatars stealing items 
worst case scenarios may relevant usual worst case usually may rare occurrence actively try happen raising chance 
rule grief done done 
points protection cheaters mission critical task 
special attention turned issue 

related propose scheme uses lock stepped commitment protocol secret information prevent look ahead suppress correct cheats 
subsequently optimized version protocol requires synchronous lock stepping players come range interaction 
authors argue outside player sphere interest immaterial player upcoming decisions 
true multiplayer games 
common massively multiplayer online role playing games player fight computer controlled monsters players 
falsely claim killed lots acquiring experience points wealth 
furthermore players interaction range collaborate cheating players range 
falling back game wide lock step infeasible context thousands players typical 
simple logging scheme mentioned detect forgery hidden items 
similarities logging scheme section encompass entire game state 
approach focuses verification auditing replay log history 
neo protocol developed improvement 
addresses broader range cheats time reduces latency 
achieve responsiveness prevents players slow connections enter game areas players fast located 
protocol described neo solve problem players interacting environment players range 
problem mentioned solution deferred implementation special computational component left 
buro presents server architecture addresses cheat popular real time strategy games rts 
chambers show kind attack addressed peer peer architecture 
cheat utmost significance rts games far relevant 
architecture relies distributed simulation player client computes complete game state individually 
infeasible massively multiplayer context 
hybrid peer peer client server architecture 
server part responsible managing subscriptions authentication storing backups virtual world game running distributed fashion clients 
game world split segments player located segments 
similar region controller approach section uses replicated simulation architecture state segment replicated clients players region 
players tend crowd special locations cities trading points spawning areas 
expect players regions replicated simulation approach scale long regions static 
problem compounded inability players interact regions encouraging clustering 
exist proposals distributed gaming architectures mercury mimaze 
explicitly address problems originating cheating 

approaches section presents alternatives traditional approach rely offers cost savings better scalability time retaining business model resistance cheating 
thought complete solutions serve identify spectrum possible directions research 
approach distributed state dissemination handles processing action requests traditional systems relies state updates clients delivery system order save bandwidth 
computation global game state performed server side responsible cheat prevention 
mutual checking scheme global game state maintained distributed fashion clients 
global state replicated multiple clients try detect cheaters comparing local versions 
servers needed managing assignment state clients subscription management storing persistent data 
log auditing approach distributes global game state computation clients 
try prevent cheating validating state updates applying 
tries detect cheating analyzing signed log files state transitions caused updates 
log auditing done periods low activity relieves load peak times synchronization costs 
approach trusted computing acts assumption players able manipulate client software way 
prevention detection cheats caused clients unnecessary providing ideal environment distributed online games 
distributed state dissemination primary cost running game bandwidth approach push cost clients 
clients area informed events messages sent client forwards event notification onwards 
may impact latency clients 
simple approach saves bandwidth players clustered area 
players area notifications receives approach benefit saving server bandwidth situations generally 
furthermore server maintains global state clients possibility incorrectly alter game state 
unfortunately approach introduces number complications 
problem cause major disruption game quality service dropping delaying notifications 
worse server signs messages confuse target clients making display incorrect information players 
competitive setting players fight especially damaging 
signed messages prevent forged packets principle practice scheme tenable 
modern server cost creating bit rsa signature certainly 
order magnitude slow server send notifications thousands nodes 
mutual checking basic idea approach may trust single client trust consensus multiple clients 
reason client participate computing global game state client runs player computer tampered 
reverse engineering client may hard way completely prevent 
exploit fact players honest report cheater notice disrupting game experience 
players agree state game world cheated 
approach game client acts server certain region game world region controller rc 
game world partitioned different regions region controlled multiple controllers 
assigning rcs regions task best performed server offered game provider 
player logs system client assigned group rcs currently responsible avatar region 
furthermore server assigns region player computer act rc 
login server provides means prevent non joining game enforcing subscription business model 
players tend gather certain regions dis tribution avatars game world may uneven 
mean certain regions empty 
prevent rcs overloaded large numbers players region size dynamic 
server keeps track regions tries keep number players number rcs region certain intervals splitting merging regions size 
rearranging regions reassign rcs newly created regions 
client player avatar located certain region sends action requests issued player rcs responsible region 
rc validates requests request legal computes state region 
rcs check arrived state sending hash current state sending necessary state updates back client 
client compares answers received different rcs updates state accordingly 
scheme addresses different kinds threats 
illegal action requests issued client easily detected rcs 
client rcs accept requests rcs detect deviation game state comparing 
colluding rcs try maliciously penalize client detected client receive different updates malicious benign servers 
course malicious clients rcs hide deviation correct game state certain amount time sending forged messages 
latest state written persistent storage regular basis client disconnects deviations detected rcs agree lost cheating wouldn effect 
mentioned preventing leakage information difficult system 
client rc region region player avatar currently located needs colluding rc get glimpse hidden information region 
state foreign region managed client tempting alter state direct benefit player 
implement approach described nontrivial problems solved 
difficult issue consistency 
inevitable deviations game state occur due network delays 
disagreements current state region resolved kind consensus consensus scheme loose allow certain deviations caused latency time strict prevent cheating sufficiently high probability 
participants may cheater tries manipulate result worse tries participants come different results breaking consistency 
consensus problem instance byzantine generals problem 
solution problem generally introduces significant messaging overhead 
unfortunately cheat prevention communication efficiency conflicting issues 
randomly selected rcs responsible region coerce perform successful cheat 
hand rcs agree messaging overhead cause 
non trivial challenge dynamic region assignment 
hand regions arbitrary shape difficult implement may cause fragmentation game world due constant splitting merging regions 
regions fixed size tiles squares hexagons may flexible handle uneven distribution avatars people gathering single region 
log auditing attempting prevent cheating real time suffering synchronization costs try detect cheaters 
idea cheater detected account closed 
furthermore effects cheat detected partially rolled back 
primary concern system hackers may possess multiple accounts stolen honest players 
keeping audit history actual criminal located tracing cheat beneficiary 
course similar real world fraud 
expected organized crime groups may form attempt money benefits 
implement detection scheme propose region controller 
time rc responsible area 
started rc receives initial game state random seed unique log file name central server farm 
clients join provided log file name 
rc proceeds run deterministic event driven state machine 
clients send commands signed sequence packets referring packet including log file name 
predetermined interval rc log current state digest signed player commands returned central server farm 
procedure illustrated 
relevant note real system may need slave rcs follow current state 
purpose replace failing rcs system 
need synchronization overhead forwarding commands 
furthermore due nature rc possible replay server computation case failure relieving backup rcs needing compute state real time non failing case 
clients system identical clients typical system 
capability cheating 
furthermore load signing player commands high low laptop sign bit rsa times second 
significantly higher injection rate player commands 
rc new cheating capabilities 
similar mutual checking mc rcs section rc collaborate client order provide client unfair additional information game state 
mc scheme rc introduce delays disconnect clients run 
new attacks rc include falsifying returned game state falsifying player commands confusing clients 
believe threats addressable 
discussed turn 
threat falsifying game state rc reports bogus game state example experience awarded player 
entire rc running client client event updates player commands player commands double check updates correct region controller initial game state final game state digest commands double check updates correct event driven state machine correct output reproduced rerunning trusted machine initial state player commands 
falsified game state detected 
double check pushed untrusted randomly chosen clients mc system 
system synchronization overhead game time 
furthermore double check performed trusted server farm periods low activity complaint received 
second threat falsifying player commands rc alters commands players example forcing player trade away valuable items 
player commands signed audit catch wrong command provided digest 
chaining player commands prevents intentional omission commands 
final threat rc sends confusing client information similar distributed state dissemination scheme 
scenario costs signing state updates high 
rc responsible clients required sign state updates 
save bandwidth server farm updates need stored receiving client 
game session client ask trusted central server farm summary game state wishes dispute result provide signed logs cheating rc 
trusted computing trusted computing tc highly controversial initiative trusted computing group 
discussing social political implications tc subject 
computer games industry significant influence tc deployed broad base remain niche market 
decision hardware manufacturers eventually customer game developers may day find tc available computers want 
things tc provide interest providers online games 
possibility software signed producer trusted may run tc enabled computer specially secured environment operating system 
second possibility tc enabled computer prove trustworthiness systems 
thing guarantee client software manipulated second enables game providers identify trusted game clients central server farm message passing audit checking internet 
depending fraction online game clients trustworthy different possibilities game developers arise 
easiest case clients trusted 
game completely distributed worrying possible attacks due manipulated clients main problem distributed computation client side 
achieving consistency simplified compared mutual checking approach game object needs trusted primary owner 
course multiple secondary copies necessary deal high fluctuation nodes sytem discussing availability issues scope 
certain percentage clients trustworthy game significantly benefit distribution 
trusted clients adopt role region controller rc see subsection 
players encouraged enable tc features computer lowering subscription fees offering access exclusive game content 
trusted clients store player data locally tc doesn improve reliability really alternative storing data separate persistent storage 
frequency data periodically written persistent storage reduced 
client crashes loses connection server information stored locally resuming game 
case severe failures local data lost need backup state restored persistent storage 
enforcing subscription model tc straightforward single server run game provider may act entry point system 
rcs run trusted system allow players active subscription join game 
public discussion shows trusted computing comes dangers autonomy privacy user 
online game providers point view ideal solution provided security functional circumvented 
example platform called trusted video game console microsoft 
built hardware security mechanisms prevent untrusted client software running 
sophisticated hackers able circumvent mechanisms cat mouse game started microsoft trying ban modified online service live hackers trying protect modifications detected 
fortunately appear applying necessary modifications requires certain degree expertise average user possess 
regardless clearly shows major pitfall tc systems security mechanisms broken trust may fully restored 
fall security system success online game relies may fall 

due high upfront running costs developing deploying risky business 
sufficient funding game experience may easily failure 
approaches show possible ways reduce resource consumption server side costs applying techniques peer peer systems 
special attention paid retaining control global game state necessary avoid cheating lock players valid subscriptions 

nathaniel brian neil levine 
cheat proof playout centralized distributed online games 
proceedings ieee infocom volume pages april 
ashwin bharambe sanjay rao srinivasan seshan 
mercury scalable publish subscribe system internet games 
proceedings st workshop network system support games pages 
acm press 
michael buro 
orts hack free rts game environment 
proceedings international joint conference ai 
bio reis rafael de oliveira cl fernando geyer garcia martins jorge luis victoria barbosa 
hybrid peer peer client server model massively multiplayer games 
proceedings acm sigcomm workshops pages 
acm press 
bio reis rodrigo real garcia martins rafael de oliveira jorge luis ria barbosa cl fernando geyer 
scalable cheat resistant distribution model internet games 
th ieee international symposium distributed simulation real time applications 
chris chambers wu chang feng wu chi feng saha 
mitigating information expose cheaters real time strategy games 
proceedings nossdav 
chris daniel zappala virginia lo james marr 
low latency cheat proof event ordering peer peer games 
proceedings th international workshop network operating systems support digital audio video pages 
acm press 
laurent gautier christophe diot 
distributed synchronization multiplayer interactive applications internet 
unpublished 
laurent gautier diot 
design evaluation mimaze multi player game internet 
proceedings ieee international conference multimedia computing systems page 
ieee computer society june 
henning 
ice massively multiplayer middleware 
acm queue magazine february 
ibm 
butterfly net powering generation gaming computing demand 
intel 
digital media massively multiplayer online gaming 
daniel james gordon walton brian robbins dunin greg mills john welch jon steven 
persistent worlds whitepaper 
alex jon dunin jennifer maclean brian robbins david john welch 
online games white 
bjorn knutsson lu wei xu bryan hopkins 
peer peer support massively multiplayer games 
infocom march 
leslie lamport robert shostak marshall pease 
byzantine generals problem 
acm trans 
program 
lang 
syst 
emmanuel laurent gautier christophe diot 
mimaze multi player game internet 
proceedings th international conference virtual system multimedia november 
microsoft 

www com 
jessica mulligan koster 
developing online games insider guide 
pearson education 
tcg 
trusted computing group 
www org 
bruce sterling woodcock 
analysis subscription growth 
www com 
