technical report lightweight causal cluster consistency anders boris marina department computer science engineering chalmers university technology teborg university se teborg sweden teborg technical report computer science engineering chalmers university technology teborg university technical report issn department computer science engineering chalmers university technology teborg university se teborg sweden teborg sweden april lightweight causal cluster consistency anders boris marina effort providing layered architecture services supporting multi peer collaborative applications proposes new type consistency management aimed applications large number processes share large set replicated objects 
applications peer peer collaborative environments training entertaining purposes platforms distributed monitoring tuning networks rely fast propagation updates objects require notion consistent state update 
cope requirements ensure scalability propose cluster consistency model 
proposed model dynamic set processes called coordinators may concurrently propose updates subset objects form cluster 
updates applied order interest coordinators cluster 
interested process receive update messages referring replicated objects option updates delivered unordered order coordinators 
propose layered architecture providing cluster consistency 
general architecture applied top standard internet communication layers offer modular layered set services applications need 
faulttolerant protocol implementing causal cluster consistency predictable reliability running top decentralised probabilistic protocols supporting group communication 
experimental study conducted programming evaluating layered architecture protocols executing top standard internet transport services shows approach scales imposes load system provides high probability reliability guarantees 
keywords large scale group communication consistency collaborative environments peer topeer systems internet application layer services applications collaborative environments allow possibly large set concurrently joining leaving processes share interact set common replicated objects 
processes deal state changes objects sending update messages 
providing infrastructure support applications systems places demands multi peer communication reliability time consistency scalability guarantees especially presence failures variable connectivity peers system 
designing set service layers lightweight distributed protocols provide appropriate dissemination coordination consistency services multi peer collaborative applications introduce consistency model builds scalable information dissemination schemes provide probabilistic reliability guarantees 
required methods communication consistency deal interests users processes may form groups vary size behaviour 
lightweight non hierarchical protocols scalability potential cost probabilistic guarantees reliability focus earlier research distributed computing emphasis proving feasible robust solutions considering aforementioned variations needs behaviour 
look delivery service updates provides delivery optimistic causal order guaranteeing event delivered causally precede delivered event 
events obsolete need delivered may dropped 
optimistic causal order algorithms aim minimising number lost events 
order detect events missing algorithms rely vector clocks 
grow linearly group size implying limitation size process groups respect scalability 
propose consistency management method denoted causal cluster consistency providing optimistic causal delivery update messages large set processes 
causal cluster consistency takes account applications number processes interested performing updates low compared number processes interested receiving updates maintaining replicas respective objects 
number processes entitled perform updates time restricted corresponds maximum size vector clocks 
set processes entitled perform updates may change dynamically 
proposed approach line inspired approaches information dissemination aim called predictable reliability guaranteeing event delivered non faulty destinations high probability guarantee :10.1.1.17.7959
layer architecture implementing cluster consistency lightweight communication algorithms turn run standard internet transport services 
method designed tolerate bounded number process failures combined push pull recovery method 
implementation experimental evaluation proposed method potential respect reliability scalability building evolved large scale lightweight probabilistic group communication protocols 
implementation evaluation carried real network competition concurrent network traffic users 
structure 
section background information related causal ordering lightweight probabilistic group communication 
section notation definitions 
section introduces layered architecture achieving causal delivery layered protocol implementing 
section discusses implementation experimental evaluation proposed protocol running top standard internet transport services 
concludes discussion contribution 
background systems collaborative environments allow multiple processes perform updates shared replicated objects 
order perform processes systems rely protocols provide scalable group communication support maintenance membership information fast dissemination updates events system 
applications building systems benefit event delivery service satisfies causal order relation satisfies happened relation described 
lot carried achieving reliable causal delivery occurrence faults 
schemes recover lost messages lead long latencies events short delivery latencies needed 
particular latency large groups large worst case causal reliable delivery service needs add timestamp information event size grows quadratically size group 
relaxed requirements optimistic causal ordering suitable systems events associated deadlines 
causal order semantics require event delivered causally preceding events delivered optimistic causal order ensures events delivered causally precede delivered event 
optimistic causal delivery algorithms aim minimising number lost messages 
approaches information dissemination lightweight probabilistic group communication protocols :10.1.1.17.7959
protocols allow groups scale processes providing reliability expressed high probability 
shown probabilistic group communication protocols perform context collaborative environments 
se approaches provide ordering guarantees 
vector clocks allow processes determine precise causal relation pairs events system :10.1.1.47.7435
detect missing events origin 
size timestamps grow linearly number processes ensure scalability may need introduce bound growing parameter 
relevance inspiration research peer peer systems particular methods structures share information system cf 
position atomic data access data management :10.1.1.140.3129:10.1.1.47.7435:10.1.1.142.752:10.1.1.105.3673:10.1.1.10.1904
notation problem statement 
denote group processes ongoing joining leaving processes set replicated objects 
processes maintain replicas objects interested 
partitioned disjoint clusters ici denote cluster process write interested objects causal cluster consistency allows processes maintain state replicated objects applying updates optimistic causal order 
processes assumed known processes may propose updates objects time 
processes may propose updates called coordinators denote set coordinators set coordinators change dynamically time 
term events referring update messages sent received processes cluster 
propagation events done multicast communication 
assumed processes cluster receive event multicast multicast need provide ordering 
lightweight probabilistic group communication protocol appears literature suitable 
refer protocols 
assumed provide properties event delivered destinations high probability 
decentralised lightweight group membership process join leave multicast group decentralised way processes need know members group 
cluster apply vector timestamps type 
coordinator processes assigned unique identifiers 
process assigned identifier said identifier 
time stamp vector entry corresponds th event send process owns index process owned index processes may leave new processes may join 
vector time stamp said smaller vector time stamp 


case write 
multicast event write te corresponding timestamp denote multicast events causally precedes te te said concurrent te te te te denote index owned creator event index event id event index te index assumed process maintains cluster tailored logical vector clock brevity referred cct vector clock denoted cct vector clock defined consist vector time stamp sequence number 
write referring timestamp referring sequence number timestamp latest delivered event sequence number multicast event performed section describing implementation causal cluster consistency explain values 
note look single cluster time write simplicity tp respectively 
layered architecture optimistic causal delivery section proposes studies layered protocol achieving optimistic causal delivery 
assume coordinators cluster assigned vector entries coordinators cluster know 
satisfy requirements choose decentralised fault tolerant cluster management protocol map process unique identifier cct vector clock decentralised way inform processes mapping 
section introduces layered approach section presents analyses method ensuring fault tolerance enhancing throughput protocol 
protocol description layers uses order multicast events inside cluster cf 
pseudocode description algorithm 
second layer implements optimistic causal delivery service 
consistency protocol inspired causal consistency protocol ahamad adapted enhanced provide optimistic delivery service cluster consistency model recovery procedure events may missed due 
process cluster interested observing events optimistic causal order true coordinator maintains queue events denoted arriving event determine event timestamp te exist events causally precede ii delivered iii deliverable optimistic causal order property 
precisely define set delivered deliverable events deliver te te te event ids recovery calculated follows deliver ids index te index te 
exist events enqueued time interval may obsolete interval process may need pull missing events see 
delivers application 
process delivers event referring cluster logical cct vector clock clock updated setting max te 
process checks events hp recovered events dequeued delivered 
coordinator owning jth vector entry multicasts event update incrementing 
creates vector timestamp delivers events high probability may processes need recover events 
protocol done pull scheme process missing event requesting 
process invokes recovery procedure event hp risks obsolete 
issues recovery messages missing events precede time obsolete depends delay amount time passed start dissemination assumed larger duration estimated number hops event needs reached destinations time takes send recovery message receive 
hp obsolete delivers causally preceding events hp causally preceding recovered events respecting causal relation 
simple way recovery contacting sender event 
purpose sender maintain recovery buffer stores event recovery messages expected example case te 
method enhances throughput fault tolerance recovery subsection accompanied analysis guarantees required resources 
properties protocol 
protocol provides delivery service guarantees event reach destinations high probability achieve high message stability 
recovery events needs performed number processes receive event expected low 
means process expected receive low number recovery message multicasts event 
processes encounter process failures link failures timing failures reliable point point communication succeeds recovering causally preceding missing events provide causal order message loss 
lemma straightforward analysis 
lemma execution layer protocol guarantees causal delivery events disseminated cluster processes links slow fail 
event recovery procedure fault tolerance throughput mentioned delivers events high probability may processes need recover version described previous subsection recovery done sender event maintains recovery buffer events sent 
simple scheme give point recovery rate events 
throughput fault tolerance protocol increased introducing redundancy 
case processes required keep history observed events 
process sending recover message needs contact fixed number processes order receive respective update 
recovery failing processes redundancy 
obvious reasons desirable bound size buffer 
analysis get recovery buffer size number processes contact recovery succeeds high probability 
algorithm layer protocol var hp set received events delivered set recovered events delivered fixed size recovery buffer fifo replacement 
creates create timestamp te te te seq te insert recovery buffer receives te insert recovery buffer delivered deliver hp delivered deliver delivered obsolete delay time terminate timeout time terminate eid deliver ids hp eid recovery send recover eid source eid arbitrary processes cluster delay time recover timeout time recover deliver hp delivered deliver deliver hp delivered deliver receives recover source eid identifier eid buffer respond receives insert recovery buffer delivered deliver hp delivered deliver delivered obsolete deliver update max te remove hp deliver application describe model suitable determine probability availability events deliverable may need recovery arbitrary system consisting cluster processes communicate layer protocol 
denote system denote time determined number rounds event stays observe relation buffer system single server queueing system new events admitted queue random process 
common queueing systems service time time needed processes get event layered protocol model depends arrival times events 
service time event stays long queue needs stay buffer order guarantee delivery recovery queue stable issue 
estimate probability length queue exceeds choice length recovery buffer ai denotes arrival time event ei server processes event time si ai observe length buffer greater maximum length queue time interval ai si safely deliver ei 
consider ta ts denoting interval length random variable xi denoting event time ta process inserts new event system 
assume xi occur independently pr xi pr xi number admitted events system represented random variable ti xi random process describing arrival rate new events binomial distribution expected number events queue arbitrary time interval ta ts equals npt 
clearly length recovery buffer large expected encounter large number events recovered 
bound chernoff bound buffer size probability events need recovery recovery buffers arbitrary processes low 
theorem event admitted system executing layered protocol event required stay rounds 
processes system admits new event round probability guarantee availability recovery buffer arbitrary process probability strictly greater npt size buffer chosen greater equal npt proof chernoff bound binomial distributions case pr npt npt choosing result follows 
possible generally assume process admits new event system probability pi 
buffer size length guarantees availability event probability strictly greater experimental evaluation section formula described theorem order estimate safe buffer sizes 
pi estimating estimation time 
denote time 
event needed rounds delivered processes high probability ii plus rounds missed process detected missing receipt causally related event note relevant high load low loads algorithms reliable iii plus time interval time terminate time recover algorithm takes issuing recovery messages 
furthermore considering processes may fail crashing protocol help having process needs recover event contact number processes guarantee recovery high probability 
consider processes may fail independently probability pf 
xf random variable denoting number faulty processes system 
xf pfn 
applying chernoff bound theorem get lemma system processes may fail independently probability pf consider arbitrary process subset size greater equal probability strictly greater non failed process subset 
implies process requesting recovery pfn processes ensures non faulty reply 
corollary system processes may fail independently probability pf fixed arbitrary process needs recover events layer protocol get reply high probability requests recovery processes 
notice requesting recovery needing propagate recovery messages point view cases high loss due networking problems flood network recovery messages 
compared method recovery originator event method may need times messages recovery 
comes advantage tolerating failures process departures distributing load recovery system 
regarding events replacement recovery buffer simplest option fifo replacement 
option aging scheme number steps event generated 
shown aging scheme results improved performance reliability point view 
employ scheme need sacrifice transparency layers course possible assume information passed underlying dissemination service consistency service 
worth noticing dissemination algorithm uses aging method remove events process buffers guarantees message stability implies reliability improved fact fewer processes may need ask recovery events 
messages second delay ms size bytes throughput low communication failures event loss updater gossip tcp updater gossip tcp full updater gossip tcp processes latency low communication failures event loss updater gossip tcp updater gossip tcp full updater gossip tcp processes message size low communication failures event loss updater gossip tcp updater gossip tcp full updater gossip tcp processes throughput latency increasing number cluster members experimental evaluation experiments described section study effect clustering respect scalability 
evaluate reliability throughput effects optimistic causality layer layer protocol comparing gain message event loss throughput optimistic causality layer 
section refer message event lost received delivered violating optimistic causal order 
refer optimistic causality layer causality layer brevity 
evaluation layer protocol data received network experiment computers chalmers university technology 
computers running linux solaris operating systems 
hardware varied machines sun ultra sun blade workstations pc pentium processors multiprocessor pc memory ranging mb mb 
computers distributed different subnetworks university network 
depending network load ip ping message kb size average round trip time ms ms 
exclusive access computers network experiment coexist users concurrently running applications potentially intensive network 
implemented layered architecture object oriented modular manner 
implementation causality layer follows description sections group communication objects framework 
implementation follows outline dissemination algorithm described membership algorithm 
message transport tcp udp 
connection oriented communication timeout specified ensure communication round approximately duration processes 
experiment evaluates number group coordinators affect throughput latency message sizes 
results test application act coordinator ordinary group member 
test application runs rounds duration protocol 
process acts updater produces new event probability experiment product kept constant 
configuration parameters experiment set satisfy goal event reaching processes high probability 
set order eliminate event loss dissemination layer able focus performance measures consistency layer 
fanout termination time event hops 
allowed keep track members avoid side effects membership scheme experimental study 
maximum number events transported gossip message limited events number group members transported limited 
size history buffer set events high prevent high probability event delivered causality layer multiple times 
gossip messages sent connection oriented communication 
allowed tune duration gossip round experiments approximately rate failures communication links 
round process sends gossip messages concurrently multi threading round time adapted fixed time interval longer ms expected maximum message delay 
compares instances layer protocol 
full updater experiment processes acted coordinators updater updater experiments number coordinators restricted respectively 
protocols tuned adjusting connection timeout average connection loss rate exceed 
causality delay ms total number events needing recovery latency layer recovery causal layer recovery causal layer recovery causal layer probability create new event latency recovery events layer recovery causal layer recovery probability create new event total number attempts recover event percentage known events lost percent recovery attempts event loss layer recovery causal layer recovery causal layer recovery causal layer probability create new event message loss event recovery success layer recovery causal layer recovery probability create new event percentage successful recovery attempts event latency loss recovery behaviour varying load causality layer 
layer recovery method described section 
data shows impact size vector clock message size 
protocols constant number coordinators message sizes decreased slightly growing group size dissemination distributes load forwarding events better large group sizes large groups smaller percentage processes performs event initial gossip rounds 
full updater protocol messages grow larger number coordinators 
behaviour directly influences observed results respect latency throughput 
growing group size protocols constant set coordinators experience logarithmic increase message delay throughput remains constant 
message delay full updater protocol increases linearly throughput decreases 
second experiment studies effects induced causality layer recovery scheme layer protocol 
compares gossip protocol layer protocol recovery 
recovery done ways originator described section curves marked recovery ii arbitrary processes described section curves marked recovery equals similar fan dissemination protocol 
recovery buffer size analysis section timeout periods set number rounds 
experiment number processes fixed evaluated system varying values able study reliability consistency layer varying load system 
read diagrams left right larger values imply increased load system having rightmost side approximately new events multicasted round 
load increases dissemination layer reorders events quite lot rightmost side starts experience message loss due buffer overflows putting causality layer protocols stress 
measurements show causality layer reduces amount lost ordered events difference significant number events disseminated system high 
recovery scheme events delivered optimistic causal order recovery 
increasing event probability latency grows slowly manifesting scalability 
causality layer adds small overhead delaying events order respect causal order 
recovery scheme add significant overhead respect latency significantly reduces number lost events 
instances possible observe faster event delivery recovery scheme 
reason recovering missing events causally subsequent events hp need held time delivered 
shows total number attempts recover events system shows success rate recovery attempts 
expected number recovery attempts increase load system increases events needing recovered load low 
causes event recovery fail reply arrives late ii process es asked event iii reply request messages lost 
unexpectedly low success rate recoveries method low load reach processes gossip messages lost early propagation event 
keep mind system load low number missing events recovery attempts small 
load number recovery attempts increase success rate starts converge predicted outcome 
discussion proposed lightweight causal cluster consistency hierarchical layer structure multi peer collaborative applications 
general architecture applied top standard internet transport layer services offer layered set services applications need 
causal cluster consistency conforms dynamic interest model processes replicated objects 
processes observe updates correspond interest optimistic causal order 
dynamic set processes may concurrently propose updates state replicated objects 
proposed approach reliable ordered message delivery pairs approaches information dissemination aim predictable reliability event delivered required order non faulty destinations high probability guarantee 
layer protocol causal cluster consistency running top decentralised probabilistic protocols supporting group communication 
experimental study conducted programming evaluating proposed architecture layered protocol uses standard internet transport communication shows approach scales imposes load system provides high probability reliability guarantees 
includes complementing service architecture consistency models total order delivery respect objects 
considering object ownership caching topic worth studying 
ahamad burns 
casual memory definitions implementation programming 
distributed computing 
brand haridi 
multicast dks overlay networks 
proceedings th international conference principles distributed systems volume lncs pages 
springer verlag 
eugster guerraoui 
data aware multicast 
proceedings th ieee international conference dependable systems networks dsn pages 
baldoni prakash raynal singhal 
efficient causal broadcasting 
international journal computer systems science engineering 
birman schiper stephenson 
lightweight causal atomic group multicast 
acm transactions computer systems aug 
birman hayden xiao budiu minsky 
bimodal multicast 
acm transactions computer systems may 
birman joseph 
reliable communication presence failure 
acm transactions computer systems feb 
carlsson 
dive multi user virtual reality system 
proceedings ieee annual international symposium pages seattle sept 
eugster guerraoui 
kermarrec 
lightweight probabilistic broadcast 
proceedings international conference dependable systems networks dsn pages july 
ganesh 
kermarrec 
peer peer lightweight membership service large scale group communication 
proceedings third international cost workshop volume lncs pages 
springer verlag 

dynamic fault tolerant cluster management 
technical report computer science engineering chalmers university technology apr 
benford 
multicast network architecture large scale collaborative virtual environments 
proceedings second european conference multimedia applications services techniques volume lncs pages 
springer verlag 

buffer management probabilistic peer peer communication protocols 
proceedings nd symposium reliable distributed systems srds pages 
ieee oct 
singhal 
necessary sufficient conditions information causal message ordering optimal implementation 
distributed computing 
lamport 
time clocks ordering events distributed system 
communications acm volume pages july 
lynch malkhi :10.1.1.47.7435
atomic data access distributed hash tables 
proceedings st international workshop peer peer systems iptps volume lncs pages 
springer verlag 
mattern :10.1.1.47.7435
virtual time global states distributed systems 
proceedings international workshop parallel distributed algorithms pages 
miller thorpe 
advent simulator networking 
proceedings ieee volume pages aug 
motwani raghavan 
randomized algorithms 
cambridge university press june 
pereira rodrigues monteiro 
kermarrec 
network friendly epidemic multicast 
proceedings nd symposium reliable distributed systems srds pages 
ieee oct 
ratnasamy francis handley karp shenker 
scalable content addressable network 
acm sigcomm computer communication review volume pages 
raynal schiper toueg 
causal ordering abstraction simple way implement 
information processing letters sept 
rodrigues baldoni raynal 
deadline constrained causal order 
proceedings third ieee international symposium object oriented real time distributed computing mar 
rowstron druschel 
pastry scalable decentralized object location routing large scale peer peer systems 
proceedings th ifip acm international conference distributed systems platforms middleware volume lncs 
springer verlag nov 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
proceedings acm sigcomm conference pages new york aug 
acm press 
zhao huang stribling rhea joseph 
tapestry resilient global scale overlay service deployment 
ieee journal selected areas communications 

