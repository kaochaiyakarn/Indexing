vulnerability taxonomy methodology applied web services chris vanden berghe james riordan frank ibm zurich research laboratory vbc rij zurich ibm com katholieke universiteit leuven frank cs kuleuven methodology vulnerabilities likelihood certain system 
attempts capture formalize intuition allows security professionals predictions security problems 
method exploits realization vulnerabilities system related set properties define system 
modeling selection relevant properties correlating body knowledge historic vulnerabilities systems lived obtain heuristic likelihood vulnerabilities reappear new system 
predictive nature methodology serves early warning systems widely deployed 
example apply methodology web services providing tool focus efforts securing web services 
service oriented architectures major evolutionary step creation distributed systems 
ee net embraced trend provide tools support web services ws practical implementations principles service oriented architecture soa 
architecture introduces service layer software components regarded logical level abstraction software 
abstraction allows creation rich highly distributed applications enabling dynamic discovery loose coupling heterogeneous components span organizational boundaries 
flexibility highly distributed applications enables new interesting possibilities 
time creates numerous security challenges need addressed ultimate success technology 
need quickly recognized resulted numerous standards addressing various aspects soa security 
examples include ws security family standards xacml liberty alliance specifications 
specifications targets necessarily disjoint collection security needs service layer 
contrast security concerns regarding implementations operation received far attention 
disparity largely rooted youth ws relative importance classes security failure 
simply deployed active instances ws generate adequate body knowledge real world security failures vulnerabilities 
methodology predicated principal assumptions usefully think security vulnerabilities properties system system 
second see fundamentally new vulnerabilities soa variations existing systems 
assumptions develop general purpose methodology generating predictive vulnerability taxonomies apply ws 
vulnerability types arise architectures depending properties individual components 
testcase example apply methodology ws illustrates resulting taxonomy reason practical security ws 
indicates degree ws components prone classes vulnerability providing insight optimal finite resources securing ws 
structured follows 
section aspects soa ws important ones 
section give brief overview practical security security layer focus 
section provides insights taxonomies general vulnerability taxonomies particular 
section lays explains methodology creating vulnerability taxonomies example ws 
section details actual results application ws 
section presents related section concludes summary findings 
web services section overview security relevant aspects ws 
start outlining principles service oriented architecture soa 
followed description ws relation soa 
discuss implementation related aspects ws 
service oriented architecture soa software development methodology aimed improving manageability today increasingly complex systems 
understanding methodology principles reasoning essential understanding ws security ws practical implementation general soa concept 
object oriented component software development methodologies successively increased ability develop manage complex applications 
abstraction components increases re usability software functionality 
notion powerful interfaces components tend tightly coupled inflexible 
scale distributed applications spanning organizational boundaries require developers understand control component application 
integration components coming wide variety organizations daunting task 
soa seen extension ideas component software development aimed increasing flexibility application integration 
introduces concept service layer provides framework address complexity integration highly distributed heterogeneous systems 
conceptually soa represents model loosely coupled pieces application functionality published located consumed combined network 
exposed functionality called service 
services adhere principles deliver self contained composable functionality advertised terms task performed service 
focus performed performed 
addition possible service part larger application 
loosely coupled discovered invoked dynamically 
traditional applications depend tight interconnections subsidiary components changing existing systems exceedingly difficult 
loosely coupled systems require coordination allow flexible reconfiguration enabling services organizational boundaries 
defined interfaces coarse grained interactions 
coupling systems generally difficult important keep interfaces simple number interactions minimal 
keeps dependencies services manageable 
addition facilitates thorough testing service interactions easier understand 
network addressable location transparent 
ability invoke service network key concept soa 
allows applications services best suited needs independently location 
interoperable 
necessary characteristic heterogeneous systems communicate cooperate 
service consumer provider agree mediating protocol data format map platform specific characteristics 
web services ws practical implementations soa principles 
term defined conceptual technical sense 
conceptually ws xml soa standard internet transport protocols technical sense ws refers specific collections standards tools practices implement ws concept 
different styles ws exist soap web services rest web services xml rpc 
soap ws common form 
specific soap ws wsdl service descriptor soap messaging protocol uddi directory protocol 
ws term transport protocol includes higher level protocols beep industry organization created mission promote interoperability ws recommends style ws additional restrictions interoperability reasons 
higher layer ws protocols addressing issues workflow business processes security built atop core specifications 
main advantage particular flavor ws wide adoption availability supporting tools 
complexity protocol stack major disadvantage 
rest web services xml rpc provide complex alternative soap web services widespread 
rest web services adhere concepts representational state transfer architectural style 
model services seen resources addressable uris 
accessing managing services done exclusively verbs get post delete put specified semantics 
data transmitted form xml 
rest web services light weight design uris standard resource representations xml jpeg possess additional desirable properties improved performance due better caching opportunities 
xml rpc considered light weight protocol ws adhere aforementioned properties soa 
example xml rpc publish application functionality service abstraction merely convenient way open functionality web 
focus soap ws wide acceptance 
hold ws flavors fundamental concepts largely shared 
web services implementation universally accepted set tools developing ws platform deployment defeat purpose ws 
toolkits exist platforms 
safe say ws developed higher level languages deployed managed execution environments 
concrete examples ws implementations ee application servers net framework 
widespread provide tool support soap web services 
development toolkits ee net provide wizard tools take care deploying selected functionality ws publish ws directory services 
application servers handle message parsing cryptographic transformations data type mapping transparent dispatching 
specifics differ platforms ws details away applications 
subsequent discussion ws implementation related properties limited properties shared common implementations opposed aspects specific implementation rendering results widely applicable 
practical security focuses layer security addresses real world vulnerabilities caused system implementation deployment management 
refer layer practical security 
occupies position complementary related security specifications ws 
specifications determine way system behave implementation determines way behave 
concerned concrete specific vulnerabilities sense speak abstractions 
reader security vulnerability announcement list bugtraq eventually struck certain sense vu 
average day new vulnerabilities published seldomly fundamentally new discovered 
variations differ specifics implicitly underlying reason system vulnerable 
foundation subsequent analysis think vulnerabilities manifest implicitly underlying reason existence systems 
propose model describes reasons terms collection properties 
analogous epidemiological practice ascribing disease population individual 
epidemiology applies distinct manners 
code analysis testing resources limited time cost 
utilized maximum effect 
knowledge sorts problem occur places quite valuable 
properties seen characteristics complete process design development maintenance system 
determination property sets important potentially difficult 
properties influence security system limited technical implementation oriented properties development tools 
include issues security awareness users system 
properties ultimately describe system completely possible 
influence map properties vulnerabilities necessarily injective group properties may required influence presence vulnerability 
example buffer overflows commonly attributed low level programming language result combination low level programming languages lack testing poor development processes cetera 
correspondingly assume strict causality merely correlation programming language create buffer overflows just particularly suited creating programs written checked buffer overflows 
predict vulnerabilities new technology assume recurrent nature continue minor variations 
example anticipate code standard selection predicate language data hierarchical model xml xpath problems similar code standard selection predicate language data relational databases sql xpath injection problem ws 
considerations regarding practical security developed methodology predicting vulnerabilities systems 
detailing methodology section introduce general concepts related vulnerability taxonomies 
vulnerability taxonomies classification items events commonplace activity universal agreement semantics terms surrounding classification 
commence defining concepts providing general observations classifications 
discuss vulnerability taxonomies general vulnerability taxonomies ws particular 
classifications taxonomies classification refers operation result 
defines operation possibilities intellectual operation extension concept level generality subdivided narrower extensions corresponding concepts lower level generality operation objects events set divided subsets perceived similarities properties operation objects events assigned classes types previously defined 
priori classification starts concept refines subconcepts 
definition extension concept refers direct specific meaning 
second posteriori classification starts actual objects events proceeds grouping properties taxonomic characters 
types classification produces hierarchy classes 
final possibility actual process assigning objects events pre defined classes 
taxonomy classification including bases principles procedures rules 
definition introduced simpson seminal classification animals widely accepted vulnerability classifications 
definition suggests taxonomy classification sense describes principles classification done procedures followed order classify new objects 
resulting class taxonomy called taxon pl taxa 
goal classification turn chaos regularity 
necessary handle large amount information humans confronted 
known attempt perform systematic classification dates back aristotle bc worked classification animal species 
systematic classification exclusive domain biological sciences 
changed th century classifications started appear diverse branches science 
key building taxonomy choice taxonomic characters objects events classified 
taxonomic characters relevant readily objectively observable objects classified 
gives overview desirable properties building taxonomy 
widely accepted deterministic exhaustive mutually exclusive objective useful 
properties partially contradictory taxonomy exhaustive adding catch category doing generally renders useful 
important overlooked issue thing ultimate taxonomy 
form taxonomy adapted intended usage 
practice means intended usage scope viewpoint taxonomy stated explicitly 
define scope part universe included taxonomy 
determines classified 
example scope flowers certain country 
equally important viewpoint determines looks things scope consequently properties relevant 
example viewpoints yield totally different relevant classification properties taxonomy flowers 
vulnerability taxonomies perceived similarities vulnerabilities published security mailing lists bugtraq indication utility vulnerabilities 
ideally report features distinct vulnerability instance naturally classes vulnerability instances similar properties 
abstraction facilitates understanding origins vulnerabilities allows development avoidance mitigation methods vulnerabilities 
key challenge production taxonomy selection properties optimally contribute understanding 
discussed properties depend scope viewpoint 
vulnerability taxonomy implies implicit limitation scope vulnerabilities 
examples scopes limited vulnerabilities unix operating systems cryptographic vulnerabilities application level vulnerabilities setting scope viewpoint taxonomy determines vulnerabilities classify look :10.1.1.5.7001
instance viewpoint developer system administrator attacker particular vulnerability quite different 
vulnerability taxonomies proposed 
proposed scope vulnerabilities operating systems 
subsequent taxonomies differed scope viewpoint 
shortcoming aforementioned taxonomies intended usage explicit aim general purpose 
probably vulnerability taxonomy universally accepted original classification biology reasons 
scope vulnerabilities highly dynamic modes daily computer usage evolving rapidly 
addition computer vulnerabilities inherently difficult describe negative terminology describing 
related fact exist conceptual models break 
way describes vulnerability strongly tied viewpoint 
realizations common vulnerability taxonomies generating taxonomy difficult see discussion section 
taxonomy depends vulnerabilities viewpoint taxonomy creator viewpoint generally determined intended taxonomy 
related vulnerabilities manifest packages share common property 
generating vulnerability taxonomy scope ws incurs additional difficulty ws fully deployed 
central assumption sufficient body knowledge regarding related systems allow accurate prediction classes vulnerability problematic ws 
key benefit predictive taxonomy guide investment limited resources securing ws 
proposed methodology methodology produces predictive vulnerability taxonomies correlation properties system components influence selection historical vulnerabilities 
predicated principal assumptions introduced section 
meaningful think vulnerabilities properties system addition particular version particular program vulnerabilities new systems variants sense vulnerabilities existing older systems 
discussion correlative properties process selected 
inputs drive process 
architectural refinement system analyzed functional components 
components need sufficiently fine granularity express possible attack scenarios 
need uniform respect selected properties component 
second representative collection vulnerabilities associated selected properties influence properties vulnerabilities 
naturally selection properties refinement architecture collecting vulnerabilities iterative interdependent steps methodology 
inputs allow correlation components vulnerabilities common properties 
result table detailing likelihood vulnerability variant component 
remainder section detail general steps methodology illustrate example ws 
details go clarification methodology provided section 
architecture selection properties predictive capabilities produced taxonomy determined accuracy selected properties describe system respect vulnerabilities 
selection properties paramount 
predefined exact means selecting properties target influence security system 
task facilitated fact merely need coverage perfect selection 
selection irrelevant properties problem effect correlation 
selection strongly correlated properties problematic may lead resulting influence properties 
endeavor avoid problem utilization basis attempt security experience select properties causally related 
heuristic statistical rigor advantage tractable 
complex system comprised different components diverse properties 
order capture methodology necessary refine analyzed system components properties defined true false irrelevant dependent subcomponent 
complex system different components prone different vulnerabilities 
refinement offers advantage capture sorts problems complex system apt system appear 
useful list pairs components connections indicate composition simultaneous presence components 
connections security relevant properties properties physical connection encryption logical connection trust relationship render system secure 
clarify selection properties example ws 
ws complex highly distributed architecture input methodology simple refinement suffices 
depicted ws refinement comprised service requester directory service service provider backend systems connections components 
intermediaries explicitly modeled seen service provider acting service requester 
ws architectural refinement step selection relevant properties describing components 
divide categories paradigm related implementation related 
category contains properties related underlying concepts ws soa 
examples properties category include support dynamic discovery binding services xml messaging cross platform support 
second category involves properties related actual implementations 
properties equally important uniformly applicable difficult find different implementations different properties 
order ensure general applicability produced taxonomy important choose properties common implementations 
example ws implementations highlevel languages server application containers provide system level services memory transaction management 
consider high level languages shared property 
result property selection step matrix properties architecture 
rows contain different properties columns contain different components architecture 
property component cell describing degree property component 
different values property property opposite property 
selection assessment vulnerabilities major step methodology selection vulnerabilities 
recalling assumption new vulnerabilities largely variants existing vulnerabilities opposed fundamentally new vulnerabilities necessary identify representative base existing vulnerabilities 
new vulnerabilities discovered average day necessary discriminate 
set criteria coverage relevance availability information 
coverage context refers need broad complete range vulnerabilities 
goal estimate likelihood variants selected vulnerabilities appear new system 
necessary ensure selection limited 
buffer overflows account major part published vulnerabilities need proportional representation class vulnerabilities selection 
second criterion relevance 
vulnerabilities relevant security layer interest 
layer interest practical security applications selected vulnerabilities centered application level 
likewise vulnerabilities similar systems higher chance relevant new system 
example vulnerabilities corba bear greater relevance dcom architecturally dissimilar system 
final criterion availability information particular vulnerability 
best sources obtaining vulnerability information security databases mailing lists bugtraq 
available information sparse obscured inhibiting understanding vulnerability 
best select vulnerabilities complete information available 
selection step yields list vulnerabilities needs assessed order determine influence property vulnerability 
properties influence likelihood vulnerability appears increase decrease 
assessment necessarily partially biased method aims capture experience security professional 
cases assessment trivial property prerequisite conversely inhibitor vulnerability 
cases relation whatsoever property vulnerability 
cases influence clear different professionals may come different 
mitigated having fine grained scoring system averaging results questionnaire resulting standardized score 
result vulnerability selection assessment step matrix vulnerabilities properties 
cell qualitatively describes influence property vulnerability 
qualitative description mapped quantitative value order perform correlation 
ws example values positive negative meaning respectively influence 
instance text communication facilitates understanding manipulation transmitted data increases likelihood input validation vulnerabilities influence positive 
similarly high level programming languages managed computing environments diminishes likelihood buffer overflow vulnerabilities influence negative 
correlation properties vulnerabilities purpose step compute estimate likelihood variant vulnerability different components system combining information resulting previous steps matrices vulnerabilities properties properties architecture 
obtain quantitative estimate assign numerical values matrices 
ws example matrix map values property property opposite property values respectively 
similarly second matrix values positive negative mapped 
possible determine likelihood particular vulnerability particular component 
means simple linear composition equal weights obtained multiplication matrices vulnerabilities properties properties architecture 
results desired description matrix vulnerabilities architecture 
values matrix mathematical probabilities bounded indications likelihood higher values indicating higher likelihood 
simple components values indicate relevant vulnerabilities component 
recall simultaneous presence components modeled connections components 
case meaning values different indicate likelihood vulnerability may exploited link components 
example input received trusted link apt validated received untrusted link 
likelihood exploit input validation vulnerability trusted link greater 
especially important ws obvious attack flow user attacks ws realistic attack scenario 
leveraging existing taxonomies similar construction combine results previous correlation step existing vulnerability taxonomies 
combination may viewed summarization results previous step respect viewpoint existing vulnerability taxonomies 
specialization existing vulnerability taxonomies vulnerability taxonomy system study 
taxonomy represented matrix vulnerabilities categories 
matrix rows represent particular vulnerabilities columns represent taxonomy different classes 
cells matrix describe vulnerability instance class values true false 
vulnerabilities generally belong class uniformly case 
mapping values true false normalizing weight vector simple matrix multiplication obtain desired result architecture vulnerabilities vulnerabilities categories normalizing vector architecture categories 
normalizing vector accounts different number vulnerabilities class 
ws example bugtraq classification selected bugtraq source vulnerability data 
coarse grained having classes reasonable purposes 
applying methodology ws section detail application methodology ws salient results obtained 
focus details coarse scale process explained previous section 
architectural model properties continue selection vulnerabilities 
produced result matrix touch results validated 
highlight interesting findings 
architecture properties ws architecture model introduced briefly section depicted 
coarse grained model design functional components connections clients service requester ordering system 
directory services service locator uddi dns 
ws providers actual providers service clients ws providers 
backend systems backend systems ws providers database 
links components logical links ws requesters communicate directly ws providers directory services indirectly backend systems 
loopback connection represents ability ws provider requests ws providers aggregate results return service requester 
property selection follows architecture model 
selected properties divided categories properties related ws paradigm properties related implementations ws systems 
properties category derived definition soa ws discussed section section ws designed enable interactions diverse systems considered cross platform 
ws allow dynamic discovery ws providers directory services 
ws support dynamic binding service requester provider 
ws implementation soa service oriented 
ws xml messaging communication 
ws contrast web applications especially suited machine machine interaction 
ws message centric messages describe performed performed 
ws limited particular transport protocol transport agnostic 
second category properties related implementation ws clearly defined definition implementation dependent 
selected properties shared popular ws implementations ws typically implemented systems managed execution environment java net 
ws highly layered structure 
ws heavy general purpose libraries components 
creation configuration deployment ws done wizard 
interaction ws components typically takes place stateless synchronous transport protocols 
ws particularly efficient extensive xml parsing 
ws standards highly complex 
different connections ws architecture different trust levels 
property architectural component described assessed property presence opposite property 
vulnerabilities second step methodology selection vulnerabilities representative body knowledge historical vulnerabilities 
bugtraq source vulnerabilities largest publicly available vulnerability databases 
selected suitable subset criteria set section coverage relevance availability information 
availability information criterion create subset 
important vulnerability descriptions incomplete inconsistent 
discarded vulnerabilities descriptions provide adequate information understand root causes assess property influences 
set vulnerabilities adequate information discarded relevant ws 
focus software vulnerabilities particular distributed systems 
discarded example vulnerabilities physical security systems locks 
remaining vulnerabilities selected subset retain coverage representative vulnerabilities different class need remain subset 
resulted final set vulnerabilities 
vulnerabilities categorized influence selected property vulnerability positive influence negative influence influence 
result matrix final step methodology combination vulnerability properties properties architecture matrices linear correlation obtain vulnerability architecture matrix 
applied technique described section bugtraq classification group results classification architecture 
result matrix depicted 
columns result matrix represent component architecture depicted 
recall functional components client web service directory backend components possible connections components 
rows represent different vulnerability classes defined bugtraq access validation error boundary condition error input validation error design error failure handle exceptional situations unknown 
validation classification architecture predictive nature methodology poses specific challenges validation 
possible approach entails applying established technology prior knowledge vulnerabilities particular technology 
comparison results historical vulnerabilities discovered technology allows validation methodology 
approach scope authors interests lies early understanding applied security problems ws 
date publicly available data vulnerabilities ws adequate validate approach 
technology maturing rapidly expect data available soon 
section discuss result matrix indicates anticipated unanticipated retrospectively clear outcomes 
perform functional validation fully acknowledge means complete 
discussion results number may draw result matrix 
focus discussion salient context real world ws deployment 
ws provide interface allows direct interaction core business processes 
traditionally interfaces closed outside world consequently run trusted necessarily trustworthy environment 
ws changes situation allowing direct interaction core systems exposing significantly larger range threats 
previous assumptions need reevaluated 
result matrix shows consistently high values input validation class components connections components 
indicates input validation errors ws components exploited connections components 
discuss subclasses input validation input format input origin 
conclude discussion attack flows implications derived matrix values describing connections components 
input format unfounded assumptions regarding format input lead vulnerabilities 
vulnerabilities commonly known input format validation errors input validation part reason errors exist 
loosely coupled composable nature ws requires input validation various stages complete ws process 
unfortunately fact form data different meanings different layers ws implies input validated different layers 
proper validation requires data normalization order important data normalized checked nimda worm exploited series vulnerabilities stemmed fact validation check performed character encoding normalization applied 
support input validation essential tools libraries currently support limited 
example best method avoiding sql injection archetypical input validation error prepared statements effect enforcing separation control data channels 
equivalent context ws xpath injection currently standard support prepared xpath 
origin data unfounded assumptions relate origin input opposed format 
induced vulnerabilities include direct spoofing origin corruption directory services leading incorrectly contacted party cross site scripting 
caused inadequate input validation 
likelihood vulnerability subclasses increased composable nature ws 
special mention subclass vulnerabilities involving bounce attacks attacker tricks trusted party making bad request including cross site scripting 
likelihood greatly exacerbated standard libraries xml handling support inclusion external data sources external entities 
example attacker may set name string xi include href passwords txt xmlns xi www org interpreted instruction include password file 
attack flows recall matrix values connections components values components indicate likelihood connection having vulnerability indicate easily certain vulnerability exploited connection 
way property combination properties render vulnerability properties exploitation vulnerability certain connection difficult 
example property nature relationship communicating components 
trust relationship received input typically trusted subjected proper access controls sufficiently validated 
notion attack certain connection naturally leads concept attack flows 
attack component system staged component needs vulnerable attack path attacker victim needs permit attack launched 
raises question components certain component attacked 
consider boundary condition error category example 
errors typically caused buffer reserved memory exceeded unexpectedly long input lead execution arbitrary code attacker 
programs written prone variety vulnerability 
ws components generally written higher level languages executed managed environments generally vulnerable boundary condition errors 
expect ws entire system similarly invulnerable 
case 
backend components ws architecture generally written prone boundary condition errors observe result matrix shown 
ws component may vulnerable may pass attack vulnerable backend component 
assume client attacker determination vulnerability backend system exploitable involves determination exists suitable path client backend 
suitable understand having properties exploitation feasible 
direct path client backend system attack staged indirectly components 
obvious scenario connect ws vulnerable attack pass attack vulnerable backend 
data suggests obvious scenario may problematic properties connection client ws difficult exploit type vulnerability connection 
due combination properties untrusted nature connection 
difficult stage scenario attacker uses path directory service directory service attacker successful 
follows relatively high values connections table important realization stemming analysis initial expectations concerning vulnerabilities system accurate 
consider component wise vulnerabilities paths exploited 
furthermore important consider attack flows client attacker web service component target 
related key difference approach existing taxonomies see section taxonomic character systematic methodology deriving new taxonomies 
taxonomic character likelihood vulnerabilities appear system 
implies taxonomy predictive previous focused classifying existing vulnerabilities 
methodology systematic classes selected ad hoc defined process 
orthogonal defect classification methodology analysis software defects serving early indicator health software development process 
related methodology proposed involves systemic analysis software defects 
techniques applied purpose differ widely 
certain attributes detected defects defect type defect trigger statistics created compared expectations defects certain phase development process 
test case ws knowledge taxonomy focusing ws system contrast web applications addressed component 
vulnerability classes specialized web applications finer grained 
example input validation error class bugtraq classification split classes sql injection encoding errors similarities ws web applications lead expect classes relevant ws 
developed methodology predicting vulnerabilities systems 
methodology vu feeling security expert confronted new system 
assesses likelihood variants historic vulnerabilities appear combination properties describing system 
architectural refinement provides indication vulnerabilities appear appear 
allows reason security system widely deployed address security problems early stage 
applied methodology ws 
practical significance importance ws despite current lack wide deployment 
results ws example promising step full validation methodology 
test case application methodology revealed critical steps 
hand selection properties difficult 
defined minimal set properties describes system aspects 
particular aspect balance achieved selecting set properties rich describe system compact clear remain tractable 
hand selection vulnerabilities trivial 
information vulnerability databases incomplete hindering understanding root causes described vulnerabilities 
limitation methodology linear mapping equal weights derive likelihoods 
linearity strong simplification implying properties equally important 
alternative weighing schemes provide accurate models cost higher complexity 
methodology provides valuable heuristic identifying sources insecurity system 
abbott chin webb linden 
security analysis enhancements computer operating systems risos project 
technical report institute computer sciences technology national bureau standards april 
ross anderson 
cryptosystems fail 
proceedings acm conference computer communications security pages november 
aslam 
taxonomy security faults unix operating system 
phd dissertation purdue university august 
aslam ivan eugene spafford 
taxonomy security faults 
th nist ncsc national information systems security conference pages september 

protection analysis final report 
technical report information sciences institute university southern california may 
matt bishop 
taxonomy unix system network vulnerabilities 
technical report cse university california davis may 
ram chillarege michael halliday diane bonnie ray man yuen wong 
orthogonal defect classification concept process measurements 
ieee transactions software engineering november 
microsoft 
distributed component object model dcom 
webpage www 
microsoft com com tech dcom asp 
richard demillo aditya mathur 
grammar fault classification scheme application classification errors tex technical report serc tr purdue university november 
roy thomas fielding 
architectural styles design network software architectures 
phd dissertation university california irvine 
chapter representational state transfer rest 
security focus 
bugtraq mailing list 
webpage www securityfocus com archive 
object management group 
common object request broker architecture corba 
webpage www omg org 
ivan 
software vulnerability analysis 
phd dissertation purdue university may 
liberty alliance 
liberty alliance project 
webpage www org 
daniel lowry 
taxonomy computer attacks applications wireless networks 
phd dissertation virginia polytechnic institute state university april 
alberto 
classification typology taxonomy 
quality quantity may 
james mcgovern sameer michael stevens 
java web services architecture 
morgan kaufmann april 
microsoft 
microsoft net 
webpage www microsoft com net 
oasis 
extensible access control markup language xacml 
webpage www 
oasis open org committees tc home php wg abbrev xacml 
oasis 
security assertion markup language 
webpage www oasis open org committees tc home php wg abbrev security 
oasis 
universal description discovery integration web services uddi 
webpage uddi org 
oasis 
web services security wss 
webpage www oasis open org committees tc home php wg abbrev wss 

open web application security project 
webpage www com 
george simpson 
principles animal taxonomy 
technical report columbia university new york 
sun microsystems java platform enterprise edition ee 
webpage java 
sun com ee 
paul syverson 
taxonomy replay attacks 
proceedings computer security foundations workshop 

xml remote procedure call xml rpc 
webpage www com 

soap 
webpage www org tr soap 

web services description language wsdl 
webpage www org tr wsdl 

xml path language xpath 
webpage www org tr xpath 
ws 
web services interoperability organization ws 
webpage ws org 

