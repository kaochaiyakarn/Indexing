preliminary version scannerless boolean parsing adam computer science uc berkeley scannerless generalized parsing techniques allow parsers derived directly unified declarative specifications 
unfortunately order uniquely parse existing programming languages character level disambiguation extensions usual context free formalism required 
explains scannerless parsers boolean grammars context free grammars extended intersection negation specify languages unambiguously describe interesting constructs block structure 
sbp package implements parsing technique publicly available java source code 
key words boolean grammar scannerless glr scannerless parsing introduced practical general combined lang tomita generalized lr parsing algorithm visser 
unfortunately context free grammars programming languages ambiguous character level motivated empirically chosen disambiguation constructs follow reject prefer avoid associativity precedence 
conjunctive boolean grammars conjunctive grammars augment juxtaposition language union operators context free grammars additional language intersection operator 
boolean grammars extend conjunctive grammars email cs berkeley edu called character level preliminary version 
final version published electronic notes theoretical computer science url www elsevier nl locate entcs permitting language complement operator subject basic formedness constraints noted visser arrives similar result opposite direction reject productions act conjunction negation 
goes reconstruct simple negation intersection terms negated conjunction primitive noting feature give rise unforeseen applications disambiguating boolean constructs examine disambiguation constructs explain recast boolean expression 
prefer avoid attributes effectively context sensitive choice ambiguous parsings turning ambiguous context free grammar unambiguous context sensitive grammar 
replace prefer avoid ordered choice operator abbreviation intersecting lower priority expression complement higher priority expression associativity precedence features expanded simple context free expressions span multiple nonterminals example 
example addition multiplication expressions defined real numbers natural numbers 
subsumption production included operations natural numbers assume higher priority corresponding operations reals 
sort rich priority specification expressed manner similar ordered choice operator expressions intersected complement higher priority expressions involve productions multiple nonterminals 
uses reject attribute trivially translated intersection complement rejected expression 
follow restriction written boolean expression considers character boundaries pairs adjacent characters input tokens 
perspective follow restriction amounts intersecting expression set strings valid follow boundary 
sbp scannerless boolean parser sbp package implementation lang tomita generalized lr parsing algorithm employing johnstone scott algorithm handling productions circularities 
example nonterminal defined produce exactly complement example expands input alphabet sbp typically set individual unicode characters topological space 
interesting consequence sbp parse sentences constructed non discrete alphabets 
parser grammars built programmatically manipulated simple api 
sample metagrammar included supports alternation intersection complement intersect complement subexpressions regular expressions repetition separator maximal character repetition ordered choice promotion operators character ranges whitespace insertion ws 
examples dangling classic example grammatical ambiguity called dangling construct 
straightforward application negation intersection exclude expressions trailing clause branch statement leaving intended interpretation valid parse expr expr 
expr expr expr expr complement empty character class idiom match character 
indentation block structure disambiguation boolean grammatical constructs number applications 
example parses language block structure imposing formedness constraint blocks 
technique employed inspired 
grammar simple fragment language 
grammar uses conjunction negated term exclude identifiers names happen keywords just 
statement expr expr block expr ident ident keywords keywords boolean language operations impose additional struc operators simply test supplied practical capability ture 
defining nonterminal syntactic blocks intersecting production requires line block indented line 
lastly ordered choice operator prefer tall left associative productions 
indent block indent statement statement block rule matches code blocks start new line 
rule requires newline followed number spaces followed 
production intersected formedness production newline followed 
similar sort rule match balanced parentheses rule matches text begins indentation contains disjoint instance indentation shorter instance 
context block production describe block containing line indentation line block 
related original scannerless generalized parser designed improved parser asf sdf framework 
implementation glr algorithm ansi support visser disambiguation rules 
glr parsers available require tokenizer 
include glr extensions bison 
parsing expression grammars peg include limited form intersection complement corresponding algorithm effective parsing character level grammars 
interesting context free grammars pegs parsed way 
directions current implementation written java 
generates parse tables saved restored currently provides support character level parsers lack disambiguation capabilities necessary parse programming languages level interpreting tables 
emitting compilable source code equivalent parsing tables important step improving performance sbp 
parser sbp deliberately excludes support semantic actions preferring keep grammar definitions implementation language neutral 
consequence parsing requires space linear input entire parse tree modulo portions removed drop operator constructed part consumed 
important direction possibility constructing lazy parse forests incrementally consumed discarded process running concurrently parser 
availability source code sbp available terms bsd license research cs berkeley edu project sbp 
daniel salomon gordon cormack 
scannerless nslr parsing programming languages 
sigplan pp 
acm press 
lang bernard 
deterministic techniques efficient non deterministic parsers 
automata languages programming springer 
tomita 

efficient augmented context free parsing algorithm 
computational linguistics 
van deursen heering klint eds language prototyping algebraic specification approach amast series computing volume world scientific september visser eelco 
syntax definition language prototyping 
phd thesis university amsterdam september 
van den brand visser 
disambiguation filters scannerless generalized lr parsers 
compiler construction cc lecture notes computer science 
springer verlag 
visser 

scannerless generalized lr parsing 
technical report programming research group university amsterdam 
alexander 
conjunctive grammars 
journal automata languages combinatorics alexander 
lr parsing boolean grammars 
developments language theory 
alexander 
boolean grammars 
developments language theory 
alexander 
existence boolean grammar simple procedural language 
proceedings afl 
johnstone adrian scott elizabeth 
constructing reduced derivation trees 
university london csd tr johnstone adrian scott elizabeth 
generalised reduction modified lr parsing domain specific language prototyping 
proc 
th annual hawaii international conference system sciences hicss ieee computer society new jersey january 
scott george necula 
fast practical glr parser generator 
proceedings conference compiler constructor cc april 
bryan ford 
packrat parsing simple powerful lazy linear time 
international conference functional programming october pittsburgh bryan ford 
parsing expression grammars recognition syntactic foundation 
symposium principles programming languages january venice italy 
sourceforge net kernighan brian ritchie dennis programming language second edition prentice hall 
isbn 
