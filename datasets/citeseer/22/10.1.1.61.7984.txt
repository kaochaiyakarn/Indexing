constraint collision contact handling impulses jan bender universit karlsruhe ira uka de www ira uka de new method handling collisions permanent contacts rigid bodies 
constraint methods computing contact forces friction provide high degree accuracy 
computation transformed optimization problem solved techniques linear quadratic programming 
impulse methods compute impulses prevent colliding bodies 
determination impulses simple fast 
impulse methods efficient accurate constraint methods resolve contact colliding bodies time 
method uses constraint approach 
handle multiple contacts colliding bodies time 
collision contact non penetration constraint defined 
constraints satisfied iteratively computing impulses 
iteration loop impulses dynamic static friction determined 
new method provides accuracy constraint method efficient easy implement impulse 
keywords physically animation rigid bodies collision contact friction alfred schmitt universit karlsruhe ira uka de www ira uka de resolution collisions permanent contacts friction important part dynamic simulation rigid bodies 
rigid body defined mass position centre mass velocity inertia tensor actual orientation represented unit quaternion angular velocity 
exist main approaches collision contact handling impulse constraint approach 
impulse method works follows 
pair colliding bodies pair closest points determined impulse computed applied resolve collision points 
due impulses new collisions occur 
computation collision impulses continued loop collisions resolved 
determination impulses runs fast method efficient 
bodies resting general multiple contacts time contact handled simulation step 
results motion bodies 
exist approaches cope problem high degree accuracy required existing contacts resolved 
done constraintbased methods 
methods define constraint contact occurs 
defined constraints unilateral formulated linear complementarity problem lcp 
contact forces computed solving lcp 
alternatively constraints written quadratic program solved quadratic programming algorithms 
goal method combine advantages constraint impulse approaches 
avoid problems motion bodies resting achieve higher degree accuracy constraint approach chosen method 
transforming collision contact resolution optimization problem non penetration constraints satisfied iteratively computing impulses 
advantage impulses computation simple fast 
impulses change velocities bodies directly numerical integration needed determine velocity change due contact forces 
previous analytical methods define determination contact forces linear complementarity problem 
colliding rigid bodies accelerating away normal force needed prevent interpenetration 
normal acceleration normal force zero 
handle contacts way 
david baraff heuristic approach compute contact forces analytically 
victor milenkovic harald solved problem computing non positions momenta accelerations quadratic programming 
impulses resolve collisions contacts friction determined necessary impulses solution quadratic programs 
accelerate simulation objects victor milenkovic proposed simplified physics linear programming 
danny kaufman algorithm simulation large sets non convex rigid bodies 
contacts solved simultaneously quadratic programming 
solution linear number contacts detected iteration 
david baraff algo rithm determine contact forces friction solving optimization problem 
algorithm faster simpler robust methods optimization techniques 
brian mirtich john canny proposed impulse method handle collisions contacts friction 
identify occurrence contact velocity threshold 
simulation block resting plane small impulses applied different corners block prevent interpenetration 
impulses lead motion 
case static friction block slides erroneously inclined plane due vibrations 
model introduced reduce error 
eran impulse approach collision contact handling 
proposed new order simulation loop cope vibration problem 
collisions processed velocities rigid bodies updated 
new velocities contact handling done positions updated 
change order physically correct sufficiently small time step size results plausible 
collision response dynamic simulation system rigid bodies needs collision detection 
collision detection controls time step size dynamic simulator determine time impact 
point time colliding bodies just contact penetrate 
especially case bodies resting colliding bodies contact point 
case collision contact collision detection determines contact points contact normal pair colliding bodies 
contact normal directed second body 
collision detection discussed detail 
collision response dynamic simulation system handle collisions resting contacts 
collision occurs bodies contact velocity contact point greater zero 
relative velocity bodies contact point equal zero bodies resting contact 
cases impulse computed prevent bodies 
assume gravity external force acts bodies 
case contact bodies contact point body second body ua ub corresponding point velocities 
velocity point rigid body computed ua 
relative velocity contact points defined urel ua ub 
relative point velocity normal direction rel urel determined differentiate cases 
rel greater zero bodies sep impulse need applied 
bodies resting contact collision occurs 
criterion resting contact rel tolerance collision detection acceleration gravity 
criterion proposed brian mirtich 
difference resolving collision handling resting contact duration collision infinitesimal resting contact lasts simulation step 
resolution collisions done simulation step contacts handled simulation step see 
collision resolution done loop applied impulses prevent bodies cause collisions 
loop ends pair contact points satisfies criterion collision 
collisions resolved impulses resting contacts computed simulation step done interpenetration 
resolution collisions discussed handling resting contacts 
collision resolution impact law newton approximation collision process friction 
simulation step collision contact handling states relative velocity pair contact points direction normal collision rel urel coefficient urel rel normal velocity collision 
bodies collide impulse applied body equal impulse opposite direction applied second body prevent interpenetration 
impulses act direction normal resolve collision impulses change relative velocity contact points urel rel urel arbitrary points rigid body vectors centre mass points 
velocity change ux point impulse applied point determined matrix kx kx xc yc body dynamic ux kx xc yc cross product matrices vectors identity matrix 
impulse normal direction changes relative velocity pair contact points urel determined kn urel ka kb resulting impulse pn applied point impulse pn point order resolve collision 
occur multiple collisions time colliding bodies multiple pairs contact points pair impulse computed applied 
general collision impulses depend process continued iterative loop collisions resolved correctly 
collision resolution multiple pairs contact points works follows 
relative velocity rel pair contact points collision computed newton law 
computation collision impulses done iterative loop 
th iteration pair contact points tested relative velocity urel pair reached corresponding collision velocity rel true computation continues contact 
impulse determined equation eliminate actual velocity difference urel prevent colliding bodies sticking ensured iteration sum impulses applied pair contact points positive normal direction pn 
condition holds iteration satisfied anymore th iteration pn lowing impulse hold 
fol applied contact points pn ensure sticking prevented pn pn pn 
iteration loop ends pair contact points reached corresponding collision velocity 
friction occurs bodies collide depends collision impulse normal direction 
friction impulses computed iteration loop collision impulses 
computation static dynamic friction friction law coulomb 
dynamic friction occurs relative tangential velocity urel urel urel colliding bodies contact point zero 
simulate dynamic friction impulse computed acts opposite direction tangent urel urel 
friction impulse pair contact points th iteration computed coefficient dynamic friction 
impulse applied contact points ensured turn relative tangential velocity urel opposite direction friction impulses allowed decelerate bodies 
maximal allowed friction impulse determined max kt urel 
impulse eliminates relative tangential velocity completely 
impulse max taken account resulting impulse dy namic friction pt pt max pt pt max 
case impulse max applied relative tangential velocity vanishes static friction may occur 
coefficient static friction 
th iteration relative tangential velocity urel pair contact points zero condition satisfied sum tangential impulses pt sum normal impulses pn static friction occurs colliding bodies 
sum friction impulses pt exactly impulse eliminated relative tangential velocity colliding bodies contact point 
long condition satisfied corresponding pair contact points marked static friction 
friction impulses computed iteration process marked contact eliminate relative tangential velocity 
impulse computed equation eliminates urel exactly impulse applied simulate static friction 
case pair contact points marked static friction friction strong maintain sticking bodies start slide position 
happens condition satisfied anymore 
corresponding mark removed iteration steps impulses dynamic friction applied 
guarantee contacts static friction occurs relative tangential velocity collision resolution iteration process continues condition satisfied 
contact handling collisions resolved pairs contact points tested satisfy criterion resting contacts 
contact handling works similar resolution collisions 
difference case resting contact bodies remain contact simulation step 
impulse normal direction computed prevents interpenetration step order satisfy non penetration constraint 
assume time collisions resolved pair contact points criterion resting contact satisfied 
simulation continue regarding non penetration constraint general rigid bodies due external forces acting bodies shown 
distance contact points simulation step size determined 
rac rbc vectors centres mass col interpenetration bodies rigid bodies corresponding contact points time contact 
directions vectors simulation step size computed numerically integrating differential equation 
fourth order runge kutta method numerical integration 
gravity external force position centre mass rigid body simulation step determined resulting vectors added new centres mass distance contact points simulation step computed rac rbc 
numerically integrating differential equation new direction contact normal determined 
distance new contact normal compute penetration depth simulation step dn 
impulse eliminates exactly penetration depth simulation step determined solving non linear equation 
method simplification 
impulse determined causes change relative velocity contact points normal direction dn nt kn dn 
impulse applied time 
general contact points linear motion resulting impulse possibly resolve contact directly approximation 
contact completely resolved computing impulses equation iterative loop dn zero tolerance 
practice time step size normally frames second 
tests desired impulse computed iteration steps small tolerance 
advantage simplification equation required impulse linear solved easily 
case multiple resting contacts occur time system iterative computation impulses solves emerging dependencies contacts 
iterative process guaranteed rigid bodies contact stick due computed impulses 
condition satisfied impulses determined equation 
analogous resolution collisions impulse computed equation applied pn satisfy condition iteration step 
stack bodies lies floor body top pushes bodies floor iterations needed handle contacts 
eran proposed algorithm called shock propagation reduce number iterations needed situations 
contact graph describe dependencies contacts system rigid bodies 
body represented node graph 
static bodies marked root nodes 
contact bodies corresponding nodes connected edge 
number iterations shock propagation starts bodies corresponding nodes connected root nodes 
contacts level contact graph handled 
bodies level assigned infinite mass way shock propagation method traverses contact graph level level 
traversal ends contacts resolved simulation continue 
way contact handling systems stacks efficient 
determination impulses simulate dy namic friction works exactly way described resolution collisions 
relative tangential velocity pair contact points zero condition satisfied static friction occurs 
distance contact points simulation step size dt dn 
case dt zero length impulse applied tangential direction 
tangent determined normalising vector dt 
friction impulse eliminates distance contact points tangential direction determined pt tt kt dt 
impulse static friction simulated 
assures contact points position simulation step 
iteration process ends interpenetration prevented contacts distance tangential direction dt simulation step zero contacts static friction occurs 
results method collision contact handling implemented 
different models simulated test method 
blocks different coefficients friction dropped inclined plane 
blocks higher coefficient stopped movement due static friction able hold positions simulation erroneous sliding 
distances blocks needed stopping case static friction compared analytically computed stopping distances verify simulation delivers correct results 
measure performance collision contact handling model cubes created 
cubes fall funnel order cause collisions contacts see 
performance tests run pc ghz intel pentium processor 
cubes side length coefficient set cubes falling funnel 
coefficients static dynamic friction 
resting contacts resolved penetration depth simulation steps performed time step size shock propagation simulation order produce accurate results 
results performance tests figures 
simulation rigid bodies collisions resting contacts time step average 
simulation method needed ms average resolution collisions 
average time needed contact handling ms time step size maximal allowed penetration depth small accurate results achieved 
simulation cubes friction times slower real time 
result accurate simulation 
plausible results required parameters changed simulation runs faster 
model simulated top see 
top spins spherical body turns spins stem 
top turns due friction top plane spins 
simulation model trivial 
example showing capabilities method concerning frictional effects 
model simulated different coefficients friction 
top turned problems 
simulations small friction coefficient longer spherical body turned due time time number collisions number contacts computation times collision contact handling lower friction 
simulation dynamic simulation method bender implemented simulate joints iteratively computing impulses 
computation joint contact impulses iterative loop iterative processes easily combined 
way collisions contacts system articulated rigid bodies resolved 
office toy shown simulated test collision impulses propagated correctly balls 
ball coefficient 
balls left hit rest balls stopped balls right bounced 
collision balls right velocity balls left collision 
energy system measured simulation verify conserved 
results showed energy constant small numerical error simu lation 
top office toy method collision contact handling friction 
method constrained approach able handle collisions resting contacts rigid bodies 
method works iteratively computing impulses 
equations determine impulses simple numerical integration done compute resulting velocities 
method easy implement 
results shown method fast complex frictional effects simulated 
contacts simulated faster shock propagation algorithm 
method handle multiple contact points colliding bodies time 
erroneous motion occurs accu rate results achieved 
method successfully integrated dynamic simulation system articulated rigid bodies 
ken shoemake 
animating rotation quaternion curves 
siggraph proceedings th annual conference computer graphics interactive techniques pages 
acm press 
nick gould philippe toint 
quadratic programming bibliography 
richard jong shi pang richard stone 
linear complementarity problem 
academic press 

numerical simulation time dependent contact friction problems rigid body mechanics 
june 
david baraff 
analytical methods dynamic simulation non penetrating rigid bodies 
computer graphics 
victor milenkovic harald 
optimization animation 
sig graph proceedings th annual conference computer graphics interactive techniques pages new york ny usa 
acm press 
harald victor milenkovic 
fast impulsive contact suite rigid body simulation 
ieee transactions visualization computer graphics 
victor milenkovic 
position physics simulating motion highly interacting spheres polyhedra 
siggraph proceedings rd annual conference computer graphics interactive techniques pages new york ny usa 
acm press 
danny kaufman timothy dinesh pai 
fast frictional dynamics rigid bodies 
acm trans 
graph 
david baraff 
fast contact force computation rigid bodies 
siggraph proceedings st annual conference computer graphics interactive techniques pages new york ny usa 
acm press 
brian mirtich john canny 
dynamic simulation 
proceedings workshop algorithmic foundations robotics pages natick ma usa 
peters brian mirtich john canny 
simulation rigid bodies 
si proceedings symposium interactive graphics pages ff new york ny usa 
acm press 
brian vincent mirtich 
impulse dynamic simulation rigid body systems 
phd thesis university california berkeley 
eran robert ronald fedkiw 
nonconvex rigid bodies stacking 
acm transactions graphics july 
rachel weinstein joseph ron fedkiw 
dynamic simulation articulated rigid bodies contact collision 
ieee transactions visualization computer graphics volume pages 
rg sauer sch mer 
constraint approach rigid body dynamics virtual reality applications 
vrst proceedings acm symposium virtual reality software technology pages new york ny usa 
acm press 
jan bender dieter alfred schmitt 
impulse dynamic simulation system vr applications 
proceedings virtual concept france 
springer 
