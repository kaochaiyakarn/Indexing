quality service aspects metrics grid computing daniel dept computer science 
informatica sistemi george mason university univ roma tor fairfax va usa rome italy cs gmu edu ing uniroma grid computing promises computing paradigm enterprise application having shown quite effective computing paradigm resource intensive scientific applications 
large scale grids complex systems composed large number components belonging disjoint domains 
planning capacity guarantee quality service qos environments challenge global service level agreements sla depend local slas slas established components grid 
components generally autonomous join grid part loose federation 
investigates relevant issues considered designing grid applications deliver appropriate qos definition metrics relationship resource allocation slas qos related mechanisms 
grid computing mainstream computing paradigm resource intensive scientific applications promises computing paradigm enterprise applications 
survey forrester research indicates companies surveyed stage piloting implementation grid financial analysis modeling typical business applications scientific engineering calculations 
grid enables resource sharing dynamic allocation computational environments composed components different domains increasing access data promoting operational flexibility collaboration allowing service providers efficiently scale meet variable demands 
factors contribute increase productivity utilization enterprise infrastructure 
large scale grids complex systems composed large numbers components belonging disjoint domains 
planning capacity guarantee quality service qos environments challenge global service level agreements sla depend local slas slas established components grid 
components generally autonomous join grid supported part national geospatial intelligence agency nga contract nma 
partially funded perf project supported italian program 
part loose federation 
partial slas satisfied global sla satisfied 
understand achieved global partial slas specified met essential understand architecture grid impact grid resource allocation slas dependencies grid qos metrics relationships qos slas mechanisms main mechanism achieve qos 
address issues example driven approach 
consider insurance decides adopt grid infrastructure run complex rich risk assessment models allow competitive increase customer retention acquisition 
motivating example define grid related qos metrics relationship qos slas mechanisms achieve qos large scale grid systems 
section provides brief grid architecture focusing multi layer characteristics 
section presents motivating example 
section analyzes grid related qos metrics discusses metric different meaning depending layer considered 
section discusses impact resource allocation grid slas 
section identifies main mechanisms applied level grid architecture achieve desired qos levels 
section presents concluding remarks 
grid computing 
grid defined hardware software infrastructure provides dependable consistent pervasive inexpensive access high computational capabilities 
main computing paradigm scientific applications promises successful platform commercial environments 
trend confirmed alliance leading companies amd software emc data synapse force networks fujitsu siemens computers hp ibm intel nec network appliance novell oracle sas sun microsystems different purpose research develop standards open grid technologies develop enterprise grid solutions accelerate deployment grid computing enterprises 
various types service providers sps web hosting sps content distribution sps application sps storage sps enterprise applications involved processes benefit grid solutions sharing computational resources storage resources large datasets knowledge expertise 
enterprises data grid share large datasets storage resources internal external world wide networks 
computing grid share cpu cycles mainframes servers workstations dynamic fashion 
approach enables scaling computational power enterprise service provider workload demand grows 
grid allows integration coordination resources belonging different domains characterized different resource management security policies providing secure virtual environment 
main goal dynamically created virtual environments defined virtual organizations vos provide nontrivial quality service customers enterprise users faster response changing business needs better utilization service level performance lower operating costs 
creation vos interoperability means common protocols defining basic mechanisms sharing relationships exploited 
anatomy grid authors specify building blocks grid protocols services application programming interfaces apis software development kits 
protocols open standard order facilitate extensibility interoperability portability 
standard protocols easy define standard services provide enhanced capability 
apis possible design grid applications 
grid uses internet infrastructure architecture multilayered nature 
layers fabric connectivity resource collective application 
shows relationship grid layers architecture internet protocols 
grid protocol architecture application application internet collective resource protocol transport internet architecture fabric link grid layered architecture 
fabric layer provides resources shared access mediated grid protocols 
resources may physical entities computational network resources storage systems sensors logical entities distributed file systems clusters geographically distributed systems 
resource implements specific management functionality integrated grid environment 
example computational resources include mechanisms start programs monitoring controlling execution query functions determine state resource resource characteristics 
vendor support functionality state query service grid platform provide capability try discover resource structure state information pack standard form 
connectivity layer functionality provides communication authentication protocols required grid specific transactions 
communication protocols allow exchange data fabric layer resources include transport routing naming protocols ip icmp tcp udp dns ospf rsvp 
authentication protocols provide secure mechanisms verifying identity users resources rely existing standards tls ssl kerberos 
secure environments high levels qos require services mechanisms single sign delegation integration various local security solutions kerberos unix security user trust relationships 
grid security infrastructure gsi public key suite protocols authentication data encryption authorization 
gsi relies tls kerberos technologies generic authorization access control interface gaa api resource layer defines protocols apis secure negotiation initiation monitoring control accounting payment sharing operations individual resources 
layer facilitates information gathering control functionality level individual resources 
grid resource information protocol grip grid resource registration protocol examples information gathering management protocols 
grid resource access management gram protocol grid ftp examples resource management access protocols 
protocols resource level invoke fabric layer functionality access control resources 
collective layer defines protocols apis allow interaction collections resources 
level provides services include directory services discover resources software discovery services allocation reservation scheduling brokering services monitoring diagnostics services data replication services community accounting payment services collaboration workload management systems collaboration frameworks services community authorization services 
top grid stack resides application layer comprises user applications operating vo 
applications designed services apis provided grid platform implementation grid protocol stack 
main grid platforms globus toolkit product research development efforts globus alliance ibm grid toolbox open solution proposed ibm globus toolkit ibm member globus alliance 
researchers computational scientists heavy users grid technologies 
success stories 
grid portal development kit open source application create science portals 
cactus open source problem solving environment designed scientists engineers 
biology workbench web tool allows biologists search popular protein nucleic acid sequence databases 
entropia system analyze aids drug candidates solve particular instance optimization problem nug 
analysis petabytes data produced large collider lhc physics experiments require marshalling tens thousands processors hundreds terabytes disk space hold intermediate results 
scientific instruments telescopes electron generate raw data streams archived subsequent batch processing 
quasi real time analysis greatly enhance instrument capabilities 
scientists want aggregate data computing power human expertise 
enterprise grid alliance open independent vendor neutral community addressing near term requirements deploying commercial applications grid environment 
focusing exclusively needs enterprise users enable businesses realize benefits grid computing faster response changing business needs better utilization service level performance lower operating costs 
ibm designs develops grid solutions different kinds commercial applications line game providers insurance companies business decision maker companies petroleum industries 
oracle grid technology center developed oracle globus toolkit easily integrate oracle globus technologies 
sas joined grid computing forum gcf develop applications grid environment 
motivating example motivate discussion illustrate concepts remaining sections consider large insurance ic offers types insurance products automobile boat home business 
primary goal ic increase profit minimizing risks attracting retaining customers 
insurance business paid customers function risk posed insurance policy 
traditionally insurance companies combination data minimal amount personal data establish risk associated policy premium 
risk assessment yields excessive risk increase insurance may lose customers 
effort increase profits insurance motivating scenario moving highly customized risk assessment model ram 
approach larger number information sources customer queried obtain richer set inputs ram 
contrary previous model places customer large category non smoking male straight college students age new model provides risk rating specific customer john doe non smoking male straight college student age years old ph student computer science department berkeley member association computing machinery acm member programming team won regional prize acm sponsored programming contest credit record undergoes physical exam year perfect health clean record federal state local law enforcement agencies 
clearly customized models sophisticated significantly data intensive 
models decomposed parallel tasks run various resources provided computing grid 
ic plans establish web portal prospective customers obtain insurance policy quotes 
users able request different types quotes immediate non immediate delayed 
immediate requests simpler rams return results seconds 
non immediate requests return results minutes user online rams complex ones immediate requests 
delayed requests may take hours process fairly sophisticated rams 
case users notified mail link web page contains details quote 
customers obtain potentially lower willing wait longer sophisticated complex rams execute 
ic want invest additional computing resources run new models decides computing grid harness unused cycles computers desktops mainframes connected worldwide network 
grid supports ic application schedule resources type computing requirements different types rams needed evaluate categories requests 
new customized rams draw inputs large number public private data sources 
sources include health insurance companies law enforcement agencies financial organizations departments motor vehicles professional scientific organizations federal state local government agencies weather related sources assess risk home business insurance policies 
user logs new application certificate single sign 
delegation user proxy features grid security infrastructure gsi risk assessment application access user private data behalf user various databases owned managed set organizations selected user 
way customer selectively trades access private data lower 
fig 
page illustrate scenario insurance quote requested customer ic web portal 
notation patterned data mining example grid services distributed system integration 
web portal application contacts factories ram db service providers request creation instance ram database evaluate risk policy 
instances specified lifetime extended application needed 
ram object instantiated appropriate database 
ram evaluated generate queries various database services belonging financial organizations law enforcement agencies health insurance organizations shown 
results populate database database service provider 
ram instance queries database uses results provide insurance quote web portal application 
qos metrics grid environment section address issues involve understanding qos metrics context grid environments 
ic scenario illustrate concepts discussed 
classify qos metrics grid dimensions 
dimension type qos metric second layer metric grid architecture discussed section 
consider types metrics latency type metric related time takes execute task measured time units 
latency metrics defined different granularities 
example ic case may interested average time takes complete immediate quote requests th percentile time respond non immediate requests 
examples illustrative qos metrics application layer 
example latency metric elapsed time return delayed quote user 
sophisticated rams typically complex parallel jobs decomposed tasks allocated different computing resources grid 
example qos metric collective layer average time perform reservation allocation computing resources order run ram 
resource layer may interested measuring time takes access specific computing resource gram protocol 
example latency metric connectivity layer time takes perform authentication behalf customer financial organization gsi 
fabric layer may interested measuring time taken database server health insurance organization reply query 
throughput measured units accomplished unit time 
possible throughput metrics depending definition unit 
application layer may interested number delayed quote requests processed second 
collective layer may interested number queries second handled directory services locate resources different vos 
examples throughput metrics resource layer include effective transfer rate kbytes sec grid ftp protocol transfer files different computes nodes involved running rams ii number queries sec processed database server law enforcement agency needed ram application 
connectivity layer may interested measuring throughput kbytes sec secure connection instance ram model database web quote portal 
create ram service lifetime 
insurance quote risk assessment model ram provider 
query 
create db service lifetime ram factory ram database database factory 
create instance 
query 
results 
results 
create instance database service provider quote request scenario 

query 
results 
results 
query financial organization database service financial db law enforcement organization database service police db health insurance organization database service medical db application customized risk assessment model collective application checkpointing failover staging collective generic reservation allocation computing storage resources resource access data access computers reservation allocation data storage resources connectivity authentication authorization processing resource discovery data storage discovery information source discovery delegation single sign fabric mainframes servers desktops storage systems networks table mapping ic application various layers grid architecture 
service provides financial information customer 
example throughput metric fabric layer number cpu cycles second obtained machine involved processing task part parallel ram evaluation job 
availability defined fraction time resource application available 
multilayer context described grid architecture notion availability differs layer 
application layer may define availability type request 
example availability immediate quote request application fraction time application available 
collective layer may define availability terms services directories brokering services needed locate computing resources run ram instance 
availability resource layer may measured example fraction time specific computing node available allocation ram instance 
connectivity layer may define availability percentage time proxy authentication request succeeds authenticating user request law enforcement agency 
example availability metric fabric layer fraction time computing node available execution ram instance 
noted qos metrics higher layers expressed terms qos metrics type lower layers grid architecture 
instance elapsed time process delayed quote request depends different latency metrics including time needed reserve compute cycles duration evaluation ram ii time allocate resources iii time authenticate database servers outside insurance iv time obtain inputs external databases time transfer data files different nodes parallel job run ram vi time execute ram 
important consider fact different types qos metrics interact 
example load increases may difficult allocate resources evaluate ram requests may rejected decreasing availability application 
table shows mapping ic application various layers grid architecture 
grid resource allocation slas service level agreements sla contracts service providers users 
contracts specify acceptable levels various qos metrics usually associate cost penalties non compliance desired level service 
important challenge grid environments enforcing slas resources establish vo shared variety users 
key aspects definition grid environment non trivial qos provided 
application level slas mapped lower level slas 
negotiating slas lower level resources take consideration different service providers database service may offer services different levels fast slow response time different costs 
interesting optimization problem grid environment select service providers services service providers way global sla application layer achieved minimum cost 
consider evaluation ram requires nc millions cpu cycles finished tmax time units computation cost exceed cmax dollars 
assume available computing resources collective layer reserve allocate evaluation ram 
si speed resource cycles sec ci cost dollars second resource consider evaluation ram broken independent parallel tasks 
possible allocations depending computing resources selected 
number computing resources nci number cycles allocated computing resource execution time allocation cost allocation 
allocations may feasible terms satisfying global execution time sla tmax global maximum cost cmax 
constraints apply resource allocation problem 
nci nc max nci tmax nci si si ci cmax equation indicates feasible solution allocate nc cycles compute resources 
equation execution time constraint equation 
tasks run parallel total execution time maximum run time tasks 
eq 
indicates total cost exceed cost constraint cmax 
easy show cost constraint solution minimizes total execution time allocates cycles faster resources proportion speed nci nc si sj 
possible optimization problems solved connectivity layer allocation mechanism cost considered 
optimization problem find feasible solution satisfies cost constraint cmax minimum execution time consider numerical example illustrate problem nc cycles tmax sec cmax 
speed cost values compute resources table 
solve resource speed cycles sec cost sec table input parameters optimization example 
combination resource allocations optimization problem finding allocation cycles compute resources minimizes execution time satisfying cost constraint 
solutions shown table obtained ms excel solver tool 
scientific package matlab mathematica 
column table shows compute nodes columns indicate number cycles allocated optimal solution exists columns shows resulting execution time cost 
allocations table feasible violate execution time constraint maximum seconds 
third fifth allocations violate maximum cost constraint 
best solution shown row table lowest possible execution time seconds cost 
dual optimization problem find feasible solution minimizes cost time satisfies execution time constraint tmax input parameters previous example yield solution shown table 
allocations rows table feasible violate execution time constraint maximum execution time seconds 
allocations rows provide minimum possible cost preserving execution time sla 
note compute resource allocation higher cost relative 
feasible meet execution time sla resource 
hand allocation table uses compute resource goal minimize response time meeting cost constraint 
table compares feasible allocations time cost optimization problems 
table shows percentage maximum cost maximum execution time allocation 
example compute nodes execution time optimization yields solution execution time equal tmax maximum cost cmax 
cost optimization problem solved cost cmax results execution time equal tmax 
size solution space optimization problem grows combinatorial way number available resources 
computation scheduled number resources total number possible allo cations examined 
resource broker adopt heuristics evaluate optimal solution 
real environment complex example just described 
computation may structure reflects interdependencies tasks 
resources network bandwidth service providers data storage nodes may considered 
communication delays coordination overheads taken account cases 
general considerations addressed framework resource allocation grid computing 
qos related mechanisms section presents multi level view main mechanisms achieve qos grid environments 
layer grid architecture provide qos functionalities allocation cycle allocation nci sec table solutions optimization example minimizing total execution time 
allocation cycle allocation nci sec table solutions optimization example minimizing total cost 
time optimization cost optimization allocation tmax cmax tmax cmax table comparison cost time optimization solutions 
achieve global qos 
table summarizes main qos mechanisms applicable layer grid architecture 
layers mechanisms application sla specification adaptation reservation admission control collective allocation reservation resource brokering admission control resource local resource management allocation reservation admission control connectivity sign authentication delegation diffserv intserv fabric scheduling reservation preemption measurement signaling table multi layer view grid qos mechanisms design applications requires standard language describe complex user oriented slas best insurance quote requires interfaces find grid services satisfy customer requests 
example ram application able translate request best insurance quote sla specification indicating delayed service requested set services characteristics consumed 
ram application able adapt grid status resources needed application modified dynamically means online control interfaces 
sensors allow application detect adaptation needed computation resources available increase degree parallelism solve ram instance 
decision procedures allow application express rich set resource management policies 
capability application layer provide detailed description slas allows fine grained resource selection grid reducing latency increasing availability throughput 
complex application level slas mapped resource oriented sla specifications collective layer 
example customer request best quote requires ram batch job spans grid infrastructure available trusted databases queried collect rich set input parameters ram lower premium provided 
delayed ram requests stringent latency requirements resource reservation required tasks scheduled low priority jobs 
customer request give insurance premium quote real time requires reservation allocation set resources fastest service providers access external data 
resource broker dynamically determine set resources able satisfy required sla minimum cost 
operation intrinsic latency outlined section maximizes ic throughput reduces ic costs reduces customer perceived latency 
allocation reservation main qos related mechanisms level 
knowing advance availability resources needed application allows collective layer apply global admission control mechanisms prevent resources allocated qos goals achieved 
helps prevent overloading resources avoids congestion 
resource layer provide gis information resource broker collective layer provide interfaces mechanisms reserve allocate resources 
detailed resource description date information allows resource broker perform fine grain selection find local slas meet desired quality service low cost 
example resource broker know exactly amount processing cycles memory available node number active processes list pending jobs order select appropriate computing resources solve real time ram instance 
knowing version os installed help optimize execution ram sub task 
knowledge network state information helps select nodes best establish low latency communication databases 
information provided local resource manager processed request broker combined resource usage costs find example computing resource capable executing ram task capable transferring task output time ti ei ti lowest cost 
guarantee resource availability maximize throughput reduce latency admission control mechanisms provided local resource managers prevent congestion pool local resources unavailability popular functionalities 
connectivity layer provide mechanisms satisfy slas terms security requirements communications latency network availability 
connectivity infrastructure allow users create services dynamically capable interacting secure fashion services 
authentication resources belonging different domains law enforcement database key issue vo participants able join dynamically trust members 
fundamental negotiate different resource accesses basis different policies guarantee data integrity privacy confidentiality ic accesses processes confidential information users 
mechanisms meet security slas mandatory impact negatively performance grid 
goal share network different priority flows time provide qos may achieved coupling intserv diffserv services architecture named intserv diffserv 
fabric layer vendors implement scheduling mechanisms resources cpu storage boxes network bandwidth take account different classes requests different slas 
example workstation mainframe shared immediate ram sub task delayed ram sub task able schedule appropriately higher priority process satisfy stringent sla 
providing reservation services resource enable resource level reserve allocate resource 
grid nodes provide local resource manager detailed description status availability load state pending jobs scheduled jobs standard format 
resources able issue signals critical state entered enable implementation exception handling fault tolerant mechanisms improve service availability 
concluding remarks grid architectures provide interesting service oriented platform scientific commercial applications 
platforms provide dynamic resource sharing open standards providing quality service achieved 
investigated relevant issues considered designing grid applications deliver appropriate qos commercial applications definition metrics relationships resource allocation slas qos related mechanisms 
capacity planning performance modeling analysis open interesting problems grid architectures 
main problem lies fact resources shared dynamic way 
allocation scheduling mechanisms global local level play important role performance grid applications 
model takes account priority local resource owners global computations heterogeneous networked environment considered performance prediction parallel applications networks workstations 
static dynamic heuristic scheduling mechanisms heterogeneous multiprocessors process parallel jobs represented arbitrary task graphs addressed static dynamic processor scheduling disciplines heterogeneous parallel architectures 
studies nature potential applied extensions new assumptions grid environments 
relevant consider local resources designed plug play grid environment way qos mechanisms local global level interact seamlessly 
qos aware software components developed framework software components useful designing software grid 
authors jonathan useful edits 
biomedical informatics research network 
www net 
enterprise grid alliance 
www org 
european union data grid 
www eu datagrid org 
global grid forum 
www org 
griphyn grid physics network 
www griphyn org 
international virtual data grid laboratory 
www org 
network earthquake engineering simulation 
www org 
nug project 
www unix mcs anl gov nug 
particle physics data grid 
www ppdg net 
project 
www org 
open group preliminary specification open single sign service pluggable authentication 

abramson sosic giddy hall 
nimrod tool performing parametrised simulations distributed workstations 
fourth ieee international symposium high performance distributed computing hpdc washington 
ali rana walker jha 
grid service discovery qos properties 
computing informatics 
allcock chervenak foster kesselman tuecke 
data management transfer high performance computational grid environments 
parallel computing journal may 
allcock chervenak tuecke 
gridftp protocol specification 
humphreys johnson rhea 
constructing asci computational grid 
ninth ieee international symposium high performance distributed computing hpdc 
berman wolski schopf shao 
application level scheduling distributed heterogeneous networks 

cactus 
cactus 
www org 
casanova dongarra 
netsolve network server solving computational science problems 
technical report cs knoxville tn usa 
chervenak foster kesselman salisbury tuecke 
data grid architecture distributed management analysis large scientific datasets 
journal network computer applications 
olson papka stevens 
access grid immersive group group collaborative visualization 
th international immersive projection technology workshop 
czajkowski foster kesselman 
grid information services distributed resource sharing 

entropia 

entropia www org 
foster kesselman 
grid blueprint new computing infrastructure 

foster kesselman nick tuecke 
grid services distributed system integration 
ieee computer 
foster kesselman nick tuecke 
physiology grid open grid services architecture distributed systems integration 
foster kesselman tuecke 
anatomy grid enabling scalable virtual organizations 
lecture notes computer science 
foster roy sander 
quality service architecture combines resource reservation application adaptation 
th international workshop quality service ieee 
foster kesselman tsudik tuecke 
security architecture computational grids 
acm conference computer communications security pages 
frey tannenbaum livny foster tuecke 
condor computation management agent multi institutional grids 
proceedings tenth international symposium high performance distributed computing hpdc ieee press 
gasser mcdermott 
architecture practical delegation distributed system 
proceedings ieee symposium research security privacy electrical electronics engineering ieee computer society press 

grids gets big term confusing 
trends may 

globus alliance 
www globus org 

globus toolkit 
www unix globus org toolkit 


org projects 
howell kotz 
authorization 
pages 
ibm 
ibm grid toolbox 
www ibm com grid developers shtml 
leigh johnson defanti 
distributed architecture supporting scalable persistence interoperability collaborative virtual environments 


mapping service level agreements distributed applications 
ieee internet computing 

performance availability internet data centers 
ieee internet computing 

framework resource allocation grid computing 
proc 
th ieee acm international symposium modeling analysis simulation computer telecommunication systems mascots 

qos grid computing 
ieee internet computing july august 
rao 
performance prediction parallel applications networks workstations 
proceedings computer measurement group conference san diego ca usa 
ruan 
framework qos aware software components 
proceedings acm workshop software performance san francisco ca usa 
saha porto almeida tripathi 
static dynamic processor scheduling disciplines heterogeneous parallel architectures 
parallel distributed computing 
sato 
design implementations ninf global computing infrastructure 

southern california information science institute 
generic authorization access control interface 
www isi edu info 
welch foster czajkowski kesselman pearlman tuecke 
security grid services 
press editor twelfth international symposium high performance distributed computing hpdc june 
workbench 
workbench sdsc edu 
