efficient monitoring algorithm fast news alert dramatic increase xml data deliver information web 
personal weblogs news web sites discussion forums publishing rss feeds subscribers retrieve new postings 
subscribers rely news regularly pull articles web sites aggregated effect news puts enormous load sites 
propose blog aggregator approach central aggregator monitors retrieves new postings different data sources subsequently disseminates subscribers alleviate problem 
study blog aggregator monitor data sources quickly retrieve new postings minimal resources provide subscribers fast news alert 
studies collection rss feeds show proper resource allocation scheduling blog aggregator provides news faster best existing approach reduces load monitored data sources significant amount 

dramatic increase xml data deliver information web 
particular personal weblogs news web sites discussion forums delivering date postings subscribers rss protocol 
essence rss pull protocol individual subscribers regularly contact web sites retrieve new postings programs news 
popularity rss feeds news grows started put enormous load sites services 
news feeder contacts subscribed web site constantly hour sites experienced enormously high loads 
instances ka cheung sia junghoo cho cho cs ucla edu ucla computer science department los angeles ca data sources aggregator subscribers 
framework information aggregator 
sites shut rss feeds completely due increased traffic handle 
surge traffic may handled simply increasing bandwidth small number sites operated big organizations 
majority sites operated individuals small organizations solution unrealistic technical expertise financial resources manage large scale web site 
fact growing popularity personal weblogs called blogs due fact individuals posted interesting articles traditional media caught news 
personal sites nature designed handle large volume traffic fail traffic exceeds certain level 

blog aggregator potential solution problem propose study aggregator approach shown central aggregator collects new postings original rss feeds users retrieve new postings indirectly central aggregator 
approach number advantages existing architecture 
offloading traffic sites underlying sites shielded direct user traffic suffer increased popularity slash dot effects 
aggregator scale users subscribe 
upgrading single aggregator clearly easier manageable upgrading hundreds thousands sites managed independent individuals 
having delegated scalability issues aggregator individual sites focus generating high quality content 

collecting important user statistics possible collect statistics users access rss feeds improve experience rss feed users 
example aggregator may monitor popularity individual blogs set users subscribe information recommend users suggestions hot rss feeds may interesting users 

challenges contributions clearly beneficial important challenge aggregator able quickly retrieve new postings sites minimize delay publication posting site appearance aggregator users go directly original sites obtain postings 
study minimize delay incurring excessive overload sites 
problem delay minimization similar traditional web crawling problem literature web crawlers maintain date local copy remote web pages 
main differences distinguish current problem crawling problem goal retrieve new postings early goal web crawler maintain existing copies web pages fresh 
difference optimization goal distinct leading significantly different retrieval policy 
expected retrieval intervals significantly different systems traditional web crawlers acceptable index new web page say month creation applications rss protocol personal weblogs imperative retrieve new postings hours minutes publication 
see difference fundamentally changes model generation new postings provides new opportunities improvement 
investigate potential proposed aggregator approach rss feeds 
particular contributions section describe formal framework problem 
particular propose periodic inhomogeneous poisson process model generation postings rss feeds 
section investigate optimal ways retrieve new postings individual rss feeds 
section examine general characteristics rss feeds available web data collected months rss feeds 
evaluate effectiveness retrieval policies experimental data 
experiments show policy significantly reduces retrieval delay compared best existing policies 

framework primary goal develop mechanisms allow users access new postings quickly rss feeds overloading web sites 
potentially exist ways approach problem 
extend rss protocol current rss protocol provide efficient mechanism subscriber retrieve new postings retrieval 
extending protocol possible return pm may th may significantly reduce redundant downloads 
may adopt new push protocol sources actively notify subscribers new postings entirely avoid periodic checking web sites subscribers 

build new layer service existing protocol may build new layer service alleviate problem 
described example may build rss feed aggregator collects new postings web sites lets users access centrally 
changes widely adopted standard changing existing rss protocol practically difficult especially push protocol web sites take additional responsibility keeping track visit time subscribers items users subscribed 
rest primarily focus aggregator approach 
experiment section measure potential savings described changes rss protocol see changes worth effort 
general protocol similar extension proposed help web caches widely due limited browser supports 

architecture terminology shown consider distributed information system consists data sources single aggregator number subscribers 
data sources constantly generate new pieces information referred new postings 
aggregator periodically collects postings source 
subscriber turn retrieves new postings aggregator 
resource constraints assume aggregator sources limited computational network resources retrieval new postings 
example aggregator may dedicated line allows aggregator contact sources times day 
model resource constraint assuming aggregator contact sources total times period 
notion period clear discuss posting generation model 
note model retrieval assumed amount resources 
straightforward extend model variable cost case 
retrieval delay primary goal aggregator minimize delay appearance posting source retrieval aggregator 
notion retrieval delay formalized follows 
definition consider data source generates postings times tk 
ti represent posting generated time ti causes confusion 
aggregator retrieves new postings times delay associated posting ti defined ti ti minimum value ti total delay postings source defined ti ti ti 
illustration show example evolution delay 
ignore 
data source generates postings marked dashed lines 
retrievals scheduled aggregator marked solid lines 
shows delay associated data source time 
note generation delay increases twice rapidly typically range fore 
increase delay new postings pending source retrieved aggregator 
delay freshness age posting generated data source retrieved time time time 
illustration delay freshness age metrics multiple sources generate new postings may important minimize delay source 
example source subscribers may beneficial minimize delay source 
difference importance captured weighted definition definition assume source oi associated weight wi 
total weighted delay observed aggregator defined wi oi delay minimization problem definitions formalize problem delay minimization follows 
notation tij jth posting generation time oi ij jth retrieval time oi aggregator 
problem posting generation times tij find retrieval times ij minimize total delay wi oi constraint aggregator schedule total retrievals 

posting generation model note practice aggregator know posting generation times tij solve delay minimization problem aggregator learn general posting pattern source past history guess posting times pattern 
context web crawlers researchers proposed homogeneous poisson process rate number postings weekly number postings sep jan oct nov dec week homogeneous poisson model number postings hours hours posting count oct oct sun mon tue wed thu fri sat hours oct am periodic inhomogeneous poisson model 
posting rate different resolution 
model context 
roughly homogeneous poisson process stateless time independent random process events occur probability rate time point 
context may apply model assuming data source oi generates new posting rate time instance 
oi 
researchers shown model appropriate especially time granularity longer month 
example shows total number postings appearing roughly rss feeds monitored details dataset described experiment section 
horizontal axis time vertical axis shows number postings appearing week monitoring period 
small fluctuations total number postings reasonably stable roughly postings week matches homogeneous poisson assumption 
homogeneous model researchers derived optimal re download algorithms web crawlers 
unfortunately time granularity shorter month exists strong evidence homogeneous poisson model longer valid 
example show total number postings appearing rss feeds count number granularity hours 
clear time granularity time independence property homogeneous poisson model hold 
posting rate goes wide fluctuation depending time day day week 
graph shows certain level periodicity posting rates 
day significantly higher number postings night 
similarly activities weekdays weekends 
observation propose inhomogeneous poisson model posting rate changes time 
depending similar patterns values repeated time model classified 
periodic inhomogeneous poisson model assume values repeated time period nt 
model may approximation similar rate patterns repeated time burst activities day followed period inactivity night 

non periodic inhomogeneous poisson model generic model assumption periodicity changes 
exists satisfies nt 
periodicity observe rss posting pattern mainly periodic inhomogeneous poisson model rest 

comparison previous crawler research briefly compare delay metric metrics literature web crawlers 
web crawler optimization commonly metrics freshness age 
freshness zero metric indicating local copy page original web sites 
age monotonic increasing metric indicating time elapsed modification reflected local copy 
main difference metrics delay metric metrics mainly concerned changes existing web pages delay metric retrieval new postings 
assuming publication new posting corresponds change existing web page show time evolution delay freshness age metrics respectively 
note delay metric increases rapidly new postings published age metric increased just linearly time goes 
difference combined fundamental difference posting generation model allows significant improvement see 
metrics quality metric try model freshness perceived users improve effectiveness search results 
metrics directly applicable context specifically optimized web search context 

expected retrieval delay aggregator know exact times new postings generated esti mate expected delay posting generation model source 
general expected delay computed follows general inhomogeneous poisson model lemma data source rate total expected delay postings generated follows dt 
proof small time interval dt time dt postings generated 
postings retrieved time associated delays total delay postings generated dt 
simpler homogeneous poisson model formula simplified formula 
corollary posting rate remains constant time period total expected delay postings generated period 
retrieval policy study aggregator schedule retrieval points ij minimize total expected delay 
approach scheduling problem steps resource allocation data sources total retrievals period aggregator decides times contact individual source oi 
decision quickly new postings appear source important source retrieval scheduling aggregator decides times contact oi decides exactly times contact oi 
example aggregator decided contact twice day may schedule retrieval points uniform intervals say midnight noon may schedule retrievals day new postings 
section study resource allocation problem 
section investigate retrieval scheduling problem 

resource allocation policy task section allocate retrievals data sources minimize total expected delay 
task simple homogeneous poisson process model resource allocation done average posting generation rate weight source adequately captured homogeneous poisson model 
complex inhomogeneous model consider retrieval scheduling problem 
theorem consider data sources oi posting rate importance weight wi 
aggregator performs total retrievals period scenario weighted total delay postings wid oi minimum source oi contacted frequency proportional wi mi optimal number retrievals period oi mi wi proportionality constant satisfying wi proof consider data source oi retrieved mi times day 
homogeneous poisson model show oi total delay postings oi minimum retrievals sched uniform interval 
case oi mi total weighted delay mi minimized le multiplier method 
mi 
rearrange equation get mi iwi 

retrieval scheduling just discussed allocate resources data sources weights average posting rates 
assuming postings retrieved times source discuss exactly times schedule retrievals 
clearly decision time day source proof follows special case cauchy inequality stating sum squares square sums equality holds numbers equal 
expected generate largest number postings periodic inhomogeneous poisson model capture daily fluctuation posting generation rate 
start discussion simple case retrieval allocated period section 
extend analysis general cases section 

single retrieval period consider data source periodic posting rate nt 
postings retrieved period theorem shows best retrieval time instantaneous posting rate equals average posting rate period theorem single retrieval scheduled time data source posting rate period total delay source minimized satisfies condition dt proof loss generality consider postings generated single interval 
notation represent delay retrieval scheduled 
postings generated retrieved delay dt 
postings generated retrieved interval time delay dt 
dt dt minimum dd dt dt 
dt 
rearranging equations get dt illustrate implication theorem simple example 
example shows data source goes period high activity period low activity :10.1.1.29.2817
pattern repeated 
postings retrieved period 
posting rate time 
data source going periods high activity low activity theorem retrieval scheduled changes takes average value 
result matches intuition retrieval scheduled right period high activity 
expected total delay case compared worst case retrieval scheduled right period high activity delay get factor improvement 

multiple retrievals period generalize scenario consider case multiple retrievals scheduled period 
theorem schedule retrievals time data source posting rate periodicity total delay minimized satisfy equation dt retrieval point interval retrieval point previous interval 
proof loss generality consider expected total delay postings generated dt dt dt tdt tdt 
minimum dt 
dt time 
optimal schedule retrievals period data source posting rate sin 
rearranging equation get dt 
illustrate graphical meaning theorem example 
example shows data source posting rate sin 
postings retrieved source times period 
assume decided th retrieval point need determine th point 
note righthand side equation corresponds dark shaded area 
left hand side equation corresponds light shaded area 
theorem states total delay minimized selected areas 
example suggests methods computing optimal retrieval points 

exhaustive search pruning retrieval points determined remaining retrieval points derived automatically equation 
possible plans evaluated exhaustively trying choices retrieval points assuming certain level discretization time 
choose plan minimum delay 

iterative refinement initially place retrieval points uniform intervals 
iteratively adjust retrieval points comparing areas graph 
example dark area larger light area move slightly left compensate 
precise formulations need shift retrieval points extended version 
experiments find methods lead reasonable performance finding optimal retrieval points time granularity minutes 

experiments section evaluate performance retrieval policies real data collected rss feeds 

description dataset rss feeds essentially xml documents published web sites news agents bloggers ease syndication web site contents subscribers 
shows typical rss feed 
contains different postings item tag summaries description tag 
posting associated timestamp dc date stating generated 
postings arranged reverse chronological order new postings prepended front old postings pushed downwards removed 
majority current implementations rss feed contains postings 
consistent architecture mentioned new postings added feed time notifying subscribers subscribers poll rss feeds regularly check updates 
started archiving list rss feeds collected web september downloading times day 
feeds posting month period september december 
focus subset rss feeds experiments 
rdf rdf channel rdf slashdot org image rdf images slashdot org topics gif title slashdot title url images slashdot org topics gif url link slashdot org link image item rdf slashdot org article pl sid rss title music downloads soon piracy title link slashdot org article pl sid rss link description research released music listeners ar population said description dc creator timothy dc creator dc date dc date dc subject music dc subject slash department cars surpass slash department slash section slash section slash slash slash comments slash comments item 
sample rss feed show distribution posting rates rss feeds axis number postings generated months axis number feeds rate 
axes shown log scale 
months feeds generated postings day average 
distribution roughly follows straight line log log scale plot suggests follows power law distribution 
number rss feeds number postings feeds 
distribution posting rate rss feeds 
learning posting rates order implement resource allocation policy aggregator estimate average posting rate source 
intuitively posting rate estimated observing postings generated source particular period time 
refer period estimation estimation window 
clearly exists tradeoff choosing size estimation window window small estimated rate may inaccurate due randomness posting generation window large posting rate changes time estimated rate past history may different current posting rate 
explore tradeoff learn optimal estimation window length run experiment day past day history data estimate posting rate source decide optimal number retrievals day source 
repeat process entire month data measure average delay month period 
shows average delay postings different values 
graph shows estimation curve fit data indicates best matching power law curve ax 
average delay minutes resource allocation retrievals day size estimation window days 
effect estimation window width 
window gets longer average delay decreases 
believe improvement due increased accuracy estimated posting rate 
window size days observe improvement suggests achieve reasonably accurate estimation rate day data 
fact delay increase day window suggests posting rate source change significantly time 
investigate changes posting rate plot graphs calculate posting rate source day trace coordinate 
calculate posting rate succeeding day trace 
coordinates draw scatter plot 
posting rate remains day intervals dots aligned line shows graph 
select day traces draw similar scatter plot 
graph shows stability posting rates month period experimental data 
figures different colors dots depending proximity diagonal line 
group dark red top dots closest diagonal group light yellow top dots closest diagonal group green rest graphs show dots close line dots tightly clustered narrow band graph obtained postings retrieved times day source average 
results similar different numbers retrievals day 
posting rate week oct group group group posting rate week oct consecutive periods posting rate week dec group group group posting rate week oct periods separated months 
correlation posting rate measured different time 
result indicates posting rates sources stable month period data 

learning posting patterns order implement resource scheduling policy aggregator learn posting pattern source precisely shape source 
section showed similar posting patterns repeated day result daily periodicity people activity 
day period posting pattern 
posting pattern source learned past history 
learn pattern overlap hourly posting counts everyday week data source obtain cumulative graph similar shown 
cumulative count graph source 
number postings hour 
aggregated posting pattern rss feeds 
observe weekly fluctuation posting rates mainly focus daily pattern section 
similar estimation average posting rate may exist similar tradeoffs deciding data overlap small value may lead inaccuracy large value may reflect changes posting patterns 
address issue different values obtain cumulative graph apply retrieval scheduling policy measure average delay experiments 
result experiment shown 
graph shows size impact final delay delay change significantly 
result result posting rate estimation conjecture past day history data choice learning posting rate pattern source 
average delay minutes retrieval scheduling length past history weeks 
effect different learning period posting patterns 

posting pattern clusters investigation find large number sources similar posting patterns 
exploit similarity decide group sources small number clusters similar posting patterns find optimal retrieval scheduling cluster source belongs 
means method cluster posting patterns 
week data construct individual posting pattern feed 
feed represented dimension vector dimension represents percentage daily postings generated particular hour 
means clustering algorithm applied dataset cluster centroids representative pattern cluster 
test different values find choice patterns clusters tend similar 
frequently occurring pattern shown 
horizontal axis shows time day hour vertical axis shows fraction postings generated hourly period 
re sult shows quite diverse posting patterns exist rss collection 
example locations peaks quite different clusters occurring morning afternoon 
shows feeds show bursty behavior posting generation limited time window am pm pm am 
posting pattern clusters experiments section determine optimal retrieval schedule rss feed 
feeds feeds feeds feeds feeds feeds 
major posting patterns 

effectiveness retrieval policy study effectiveness proposed retrieval policies 
measure improvement individual retrieval decisions compare performance retrieval policies 
uniform scheduling sources retrieved number times retrieval points scheduled uniform intervals 
result policy considered baseline 

retrieval scheduling sources retrieved number times retrieval points optimized scheduling algorithm 

resource allocation retrieve postings different numbers times depending source retrieval points scheduled evenly 

combined sources retrieved different number times 
retrieval points optimized scheduling algorithm 
earlier results week data learn posting rates posting patterns remaining days simulate retrievals compute average delay different resource constraints 
results shown 
horizontal axis shows average number re day vertical axis shows average delay resource constraint 
average delay minutes scheduling retrieval scheduling resource allocation combined number retrievals day feed 
performance retrieval policies different resource constraints 
result shows retrieval scheduling reduces delay compared uniform scheduling 
resource allocation reduces delay 
combined observe reduction delay 
resource allocation retrieval scheduling policies effective reducing average delay note improvements obtained different mechanisms 
resource allocation policy resources taken away sources low posting rates sources low importance allocated sources high posting rates high importance 
decrease average delay increasing maximum delay sources low posting rates policy 
contrast retrieval scheduling policy improves delay simply selecting best retrieval time resources maximum delay affected policy 
illustrate point table shows average maximum delays previous strategies assuming retrieval day source average 
see maximum delay strategy retrieval scheduling strategy uniform strategy resource allocation shows significant increase maximum delay 
result important keep tight bound maximum delay may decide employ retrieval scheduling policy 

comparison prior section compare result retrieval policy policies proposed literature 
particular compare op strategy average delay min max delay min standard deviation table 
statistics breakdown posting delay retrieval day 
crawling policies described 
comparison implement policies measure resulting average delay show results table 
obtaining delays assume retrieval day feed 
rows cgm age cgm freshness show delays optimal age policy optimal freshness policy respectively 
combined policy previous section 
strategy average delay min cgm age cgm freshness table 
comparison cgm policy table see optimal freshness policy shows significantly worse delay policies 
high delay freshness policy decides ignore sites high posting rates documented 
optimal age policy shows significantly better delay freshness policy shows delay combined policy 
improvement policy comes fact exploit daily fluctuation posting rates specifically optimized delay metric 

savings protocol changes briefly investigate potential savings bandwidth protocol change allows retrieval new postings user visit 
data shows average size posting bytes rss feed returns postings average 
postings feed find postings new day average 
users retrieve new postings day protocol change avoid downloading postings average reducing bandwidth consumption 
clearly savings policies derived assumption posting rate remains time source significant users retrievals day 
estimate shows clear benefit protocol change suggests change may worthwhile pursue 

related exists large body literature web crawler research 
spirit problem setting crawler research similar exact models goals significantly different 
example assume homogeneous poisson model describe webpage changes consider fluctuations change rate discussed section develop strategies optimize freshness age existing web pages 
propose periodic inhomogeneous poisson model capture daily fluctuations generation new postings study problem delay optimization appropriate context 
sophisticated goal metrics proposed improve freshness perceived users done carefully optimizing crawling strategy query load user click data 
studies specifically designed search engines goal metrics crawling strategies directly applicable context 
studies page assumed change identically download believe sophisticated change model periodic inhomogeneous poisson model improve results studies 
proposes divergence metric similar delay metric interestingly final optimization ends quite different fundamental difference underlying architecture 
assumes source cooperative architecture data sources actively notify clients changes assume pull architecture passive data sources periodically contacted clients 
researchers studied publisher subscriber systems proposed strategies efficient dissemination information systems 
body mainly focuses efficient filtering incoming data stream large pool existing subscriber profiles differently body aggregator passively waiting new data come aggregator actively pulls different data sources collect new postings 
assuming increased size protocol header negligible compared size postings 
google alerts provides ways users subscribe set news sources get notified new articles email 
unfortunately details google implementation closely guarded secret believe provides formal foundation delay minimization problem investigates important issues context open literature 

proposed investigated problems related rss aggregator retrieves information multiple rss sources automatically 
loads bandwidth consumed rss sites allows users central access new information 
particular developed new rss monitoring algorithm exploits non uniformity generation new postings able collect new data efficiently minimal resources 
results demonstrated aggregator provide news alert significantly faster best existing approach resource constraints 
addition empirical analysis shown weeks worth data learn predict characteristics data generation existing rss feeds 
shows incorporating modified mechanism rss avoids retrieval redundant postings significantly reduces bandwidth consumption 
ability provide timely information web users high commercial value web service provider attracting user traffic mining user behavior 
believe providing aggregated information portal promising direction pursue growth information users internet 
franklin 
efficient filtering xml documents selective dissemination information 
vldb conference 
cybenko 
dynamic web 
www conference 
chen dewitt tian wang 
niagaracq scalable continuous query system internet databases 
sigmod conference 
cho garcia molina 
synchronizing database improve freshness 
sigmod conference 
cho garcia molina 
effective page refresh policies web crawlers 
acm tods 
cho garcia molina 
estimating frequency change 
acm toit august 
cho 
effective change detection sampling 
vldb conference 
coffman jr liu weber 
optimal robot scheduling web search engines 
journal scheduling 
cohen kaplan 
refreshment policies web content caches 
infocom conference 
ramamritham shenoy 
adaptive push pull disseminating dynamic web data 
www conference 
fabret jacobsen llirbat pereira ross 
filtering algorithms implementation fast publish subscribe systems 
sigmod conference 
gal eckstein 
managing periodically updated data relational databases stochastic modeling approach 
journal acm 
google alerts 
www google com alerts 
gruhl guha liben nowell tomkins 
information diffusion blogspace 
www conference 
roussopoulos 
update propagation strategies improving quality data web 
vldb conference 
roussopoulos 
balancing performance data freshness web database servers 
vldb conference 
liu pu tang 
continual queries internet scale event driven information delivery 
ieee tkde 
olston widom 
best effort cache synchronization source cooperation 
sigmod conference 
pandey olston 
user centric web crawling 
www conference 
rss specification 
blogs law 
harvard edu tech rss 
rss growing pains 
www infoworld 
com article html 
microsoft flip flop may signal blog clog 
news com com microsoft flip flop may signal blog clog html tag 

www com 
yahoo 
yahoo com 
shah ramamritham 
efficient resilient approach filtering disseminating streaming data 
vldb conference 
sia cho 
efficient monitoring algorithm fast news alert 
technical report ucla 
slashdot effect 
en wikipedia org wiki slashdot effect 
taylor karlin 
stochastic modeling 
academic press rd edition 
wolf yu sethuraman 
optimal crawling strategies web search engines 
www conference 
yan garcia molina 
sift information dissemination system 
acm tods 
