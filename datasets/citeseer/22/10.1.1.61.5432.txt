java implementation component model explicit symbolic protocols sebastian pavel jacques noy pascal jean claude royer project team cole des mines de nantes inria rue nantes cedex france fr umr cnrs universit vry val tour vry place des de agora vry france univ fr 
component software engineering cbse emerged discipline system development 
important issues cbse composition incompatibility detection dynamic adaptation addressed help formal component models behavioural interface description languages explicit protocols 
issue fill gap high level models implementation 
suggests relying symbolic transition systems stss 
describes component model explicit symbolic protocols stss implementation java 
implementation controllers encapsulate protocols channels devoted possibly remote communications components 
keywords cbse behavioural idl explicit protocols symbolic transition systems java controllers channels increase complexity software systems years component software engineering cbse approach emerged discipline yields promising results trusted shelf components cots improved component reusability semi automatic composition adaptation components architectures expressive middleware 
major drawback mainstream industrial approach cbse mainly focused programming low level features making difficult reason problematic issues hidden cbse promising results 
meta descriptive approaches omg model driven architecture aspect oriented software development promote return models clear separation functional business non functional technical real time constraints synchronizing policies aspects system 
orthogonally architectural description languages coordination languages increasingly promoted cbse community 
interesting regard ability systems provide better simpler reasoning mechanisms activity formally grounded equipped tools 
important issue designing component model related definition component interfaces interface description languages idls 
initially addressed industrial component infrastructures statically compile time generate skeletons stubs distributed components 
issue turned core challenging issues cbse component validation trusted components dynamic adaptation negotiation choreography 
limit idls signature types demonstrated 
instance type correct communicating components may deadlock compatible protocols 
widely accepted idls take account behavioural protocols yielding behavioural idls 
protocols may piece documentation components design process compose check connections components build adapters component interfaces match 
formal models dealing idls protocols proposed 
components exchange data provided required services formal models take data account managing potential state explosion problems 
suggest symbolic transition systems stss basis 
expressive formalism possible control state explosion guards complex typed parameters associated transitions 
show stss explicit protocols hierarchical component model supporting multiple interfaces heterogeneous services synchronous asynchronous communications 
important property model protocols verified construction 
java implementation model code primitive component synthesized sts protocol java code 
controller intercepts communications calls related service inner java code protocol 
subcomponents compound component communicate channels dealing guarded synchronous asynchronous communications 
organized follows 
sect 
describes component model 
sect 
introduces simple case study illustrate presentation 
sect 
explains model implemented java deal explicit protocols explicit component binding mechanisms 
sect 
presents related approaches sect 
concludes 
sts oriented component model component model model builds adl ontology architectures configurations components ports connectors roles bindings component ports connector roles 
specificities model heterogeneous interfaces incorporating typed services different kinds explicit behavioural protocols symbolic transition systems 
rely simple binding mechanism complex connectors 
time consider way messages 
dealing static architectures 
briefly elements details model 
details extensions formal model kind component specification achieve component analysis 
primitive components primitive components type name named interfaces behavioural protocol underlying data type implementation component relies achieve services provides service corresponds function method implementation 
interfaces 
components interact named interfaces corresponding communication port 
interface corresponds set services service name unique interface type corresponds type values received emitted service 
service provided required communication synchronous asynchronous 
consider reliable message sending synchronous call asynchronous messages realized mailboxes decoupling message receipt execution 
approach gives precise discussion need asynchronous communications 
specificity approach operations related mailboxes transparent level abstraction 
graphical notation interfaces services fig 

omit service types conciseness see comprehensive grammar 
boxes correspond synchronous services circles asynchronous ones 
black symbols denote required services emissions white ones denote provided services receipts 
syntax interfaces inspired various component graphical notations mainly adl port symbols process algebras lotos input output event schemes 
textual notation interfaces respect java language sect 

keywords corresponding service kinds require required synchronous services provide provided synchronous services notify required asynchronous services react provided asynchronous services 
protocols 
known drawback component models lack component behavioural protocols 
known purely static signature interfaces sufficient detect inconsistencies interacting component protocols 
behavioural pieces information components needed perform tasks dynamic adaptation negotiation 
protocols expressed different formalisms automata behavioural types process algebras temporal logics 
chose symbolic transition systems framework 
symbolic transition systems sts initially developed solution state transition explosion problem value passing process algebras substitutions associated states symbolic values transition labels 
stss see example fig 
generalisation associating symbolic state transition system data type description 
description may algebraic specifications model oriented specifications java classes 
stss related statecharts see details simpler far semantics concerned 
implementation 
implementation part components encapsulated datatype element kind behavioural protocol relies achieve operations corresponding transitions 
assumption datatype implement interface services way compliant protocol 
purely formal specification approach implementation algebraic datatype 
case derivation mechanisms originating graphical data type gat formalism possible obtain semi automatically compliant datatype 
implementation part java application see sect 

translation gat datatypes java code 
code analysis performed check protocol compliance 
scope 
syntax 
graphical syntax component fig 

textual syntax depends target language 
instantiation java language sect 

component type implementation protocol symbolic transition system interface interface name fig 

components syntax provided synchronous required synchronous service names service kinds provided asynchronous required asynchronous semantics 
various operational denotational semantics defined variants stss see 
semantics component corresponds semantics sts may expressed configuration graph see 
configuration graph lts values associated states usual notions traces reachability tree reachability graph naturally extended sts configuration transitions 
formal framework enables component analysis 
compound components compound components component assemblies set identified typed subcomponents set bindings component interfaces 
communication binary sender receiver oriented rendezvous process algebras 
matching services bound interfaces done name matching achieved renaming bound interfaces required service resp 
corresponds provided service name resp 

service types kinds asynchronous synchronous correspond 
order compound components interface compound bindings exports defined interface subcomponents interfaces 
interface subcomponents compound component bound exported 
syntax 
compound component may graphical form fig 
textual form see sect 
java version 
composite type fig 

compound syntax composite interface semantics 
formally semantics composites obtained adapting synchronous product sts 
flight reservation system example order demonstrate proposal simplified flight ticket reservation system 
reservation system see fig 
contains component bank component counter component 
responsible proposing available flights corresponding particular request 
bank manages bank accounts clients 
counter important component receives requests clients coordinates search confirmation interacting payment calling bank services confirmed flight 
coordinator counter exposes interfaces 
interfaces connect counter bank respectively interact clients 
types associated interfaces fig 

bank bank order order counter counter fig 

simplified ticket reservation system connected bank counter form compound component called 
client component know internals component 
communicate interfaces exposed 
interaction client system implemented counter component exposed interface 
architecture built requests coming client transferred counter 
order facilitate understanding sts protocols associated components propose graphical description 
protocol described fig 
represents allowed behaviour associated component 
protocol consists states transitions states corresponding messages received emitted component 
addition protocol specifies messages ordering 
example booking cancellation message exchanged message received 
messages guarded boolean expression square brackets 
processed corresponding guard depending message parameters true 
received messages preceded sign 
price price flight flight fig 

sts protocol flight flight flight flight flight client flight sign precede sent message sign denotes asynchronous message 
textual description graphical descriptions protocols useful human understanding dynamic systems 
automated computation requires textual representation 
defined minimal component language relatively close java describe interfaces protocol basic component 
fig 
depicts definition component proposed language 
definition basic component comprises interface sections define services interface component 
second section defines operations representing guards transitions fig 

section describes sts protocol want associate component 
protocol section contains list states protocol including initial state final states list transitions 
protocol associated final state meaning execution runs forever 
definition compound components slightly different 
order obtain compound component example write code fig 

declaring subcomponents connect primitives put correspondence components interfaces 
primitive assumption regard type connection local remote employed connect implementation components runtime 
information deployment time 
interface section defines interfaces exposed compound component 
component interface provide void flight flight require void price price require void react void flight flight client react void flight flight guards boolean flight flight protocol states initial transitions flight client flight flight flight fig 

textual description compound counter counter bank bank connect counter connect bank counter interface export counter fig 

textual description proposed example interface exposed counter subcomponent combination interfaces subcomponents new interface compound possible 
model implementation general idea depicted fig 

purpose attach sts protocol defined component referred bare component 
attaching protocol result component referred controlled component functionality initial addition mechanism check impose specified protocol 
bare component connect architecture simple binding mechanisms correspondent local rmi connections correspondent remote 
controlled component connect special connection communication channels see section 
functional code implementation interface protocol sts precompiler fig 

general idea protocol communication controller functional code guidelines follow order implement component java discussed 

approach propose order attach protocol component described 

bare components simple solution implement component java package feature provided language 
order achieve hard boundaries need components approach close 
approach imposes restrictions 
component class represents component interface 
second interface classes public classes package 
third interface classes public methods 
fourth internal invisible outside component boundaries 
clear advantage approach access component possible clearly specified interfaces 
hand restrictions impose great impact component interface implemented 
execution component instance may objects active entities protocol implementation integrate protocols expressed stss identified major approaches 
modify code bare component order behave specified protocol 
solution aop bytecode altering techniques create new java class hierarchy implementing component protocol 
second approach modify initial code creates framework classes initial code 
instantiated framework component functionality initial integrating specified protocol 
fig 

controlled choose implement proposal second approach see fig 

order associate protocol component runtime single complementary active entity plays role controller component name controlled component association bare component protocol 
role controller intercept messages sent received actual component decide messages allowed forbidden 
achieved implementing logical state pattern 
fig 
depicts simplified view implementation class 
controller class implements runnable interface java interface defining required operations set 
logical state pattern implemented steps 
possible states protocol declared private variables controller 
second public class implements runnable private static final int zero private static final int private static final int private int zero current state public void price price 
public void 
public run true final state 
switch case zero break process case break process 
fig 

code actions taken component receive request protocol state defined run method 
actions taken component send message defined methods implementing required operation component 
fig 
presents body methods 
checks realized forwarding message 
check related component current state 
second guard check 
checks successful message forwarded correspondent employing special entity called channel see subsection details 
message correctly received protocol passes new state state definition sts execution blocks 
channel connections order connect components architecture propose employ channels 
channel represents anonymous connection mechanism 
directed messages flow source messages sent sink messages received 
channels synchronous asynchronous mobile conditions addition coordination role channel sophisticated connection schemes 
example channel integrate buffers adapt interface protocol 
example consider components local architecture static 
channel public void price price protocol compatibility error guard true block false pack actual message obj new object try write obj catch guard correspondent false 
block transition successful 
change current state 
fig 

implementation code employed connect remote component instances possibly dynamically created runtime 
connect interfaces need different channels 
channel oriented interface interface 
second channel oriented form 
created inside scope compound channel ends transmitted parameters communicating components subcomponents instantiation time 
fact channels exported outside composite scope ensures exclusively connected components 
created class called channel 
class implements interfaces 
interface defines operation write related channel source 
interface defines operations read commit cancel related channel sink 
execution behaves differently depending communication type 
communication synchronous sender blocks write method receiver reads commits cancels depending evaluation associated guard message 
communication asynchronous write method blocks message saved buffer built inside channel entity 
channel class reused different connections controller classes created bare component architecture 
done manually course automated solution possible 
fact language define interfaces protocol component contains information allow tool automatically create required classes application 
pre compiler sablecc framework developed 
pre compiler takes input description component primitive compound classes generates necessary controller classes 
related decade formal models behavioural descriptions proposed context software architectures 
propose different analysis mechanisms component architectures address issue protocols account implementation mandatory issues seamless cbse development processes 
concurrent object oriented community oldest proposals deals explicit protocols 
parallel object oriented language communication way synchronous messages 
consideration sequential nature lack protection unscheduled accesses object oriented languages authors proposed synchronous message transfer place rpc mechanism 
offers potential concurrency may seen restricted form asynchronous communication mailboxes bounded message 
support language object oriented required operations explicitly 
receivers explicitly code 
known component languages explicit communications components try separate communications operation implementation behavioural protocols 
far protocols concerned relies rational expressions extended variables guards 
object implemented process unix environment communicates control unique arbiter 
action sequencing implemented nondeterministic finite automaton equivalent accepting language sense regular expression protocol object 
apart graphical presentation protocols expressive power stss 
authors techniques relate concurrent java programs behavioural description fsp finite state processus process algebra 
really account fsp protocols programming language goal able fsp development process analyse models threaded concurrent java programs coding 
approach extended analysis software architectures web services bpel ws translated fsp analysis 
reverse approach darwin adl address system construction darwin corba idl translation 
behavioural protocols taken account 
holds different related approaches 
authors propose integrate protocols ejbs different levels 
protocols labelled fsms finite state models enriched specific datatypes instance handle lists allowed receivers related guards 
notion consistency specified implemented protocol 
consistency nierstrasz regular types 
main differences possible complex datatypes protocols consider hierarchical models address development phase 
sofa component model considers component types templates 
component instance template 
sofa introduces notion interface compound primitive architectures usual means connect services subcomponents architecture 
description language introduces behavioural protocols employs class connectors 
similarly components connectors described frame required provided interfaces architecture implementation 
behaviour protocols regular expressions denoting traces sequences events required provided internal calls 
protocols may associated interface frame architecture 
presents model behaviour protocol description hierarchical components 
define notion component substitution behavioural compliance protocols 
protocol conformance verified design time protocols explicitly taken consideration implementation level 
hierarchical component model supporting multiple interfaces asynchronous synchronous services 
main feature model explicit protocols symbolic transition systems 
improves capabilities formal analysis component systems model checking theorem proving 
java implementation model 
component corresponds controller encapsulating sts part java application provided defined component interface 
controller responsibility intercepting communications triggering right service inner java code depending state protocol 
communications realized notion channel 
construction known provide benefits mobility remote connections reusability 
addition channels implementation ensure message arrives correspondent notify sender guard correspondent side false 
acknowledgment 
partly supported aci informatique project 


logic temporal glue mixed specifications 
volume electronic notes theoretical computer science pages 
springer verlag 

allen 
formal approach software architecture 
phd thesis carnegie mellon university 

arbab scholten de boer 
channel coordination model components 
technical report voor wiskunde en informatica 

integration formal datatypes state diagrams 
fase volume lecture notes computer science pages 
springer verlag 

atallah 
component programming application management 
briot geib yonezawa editors object parallel distributed computation volume lncs pages 
springer verlag berlin 

bergstra ponse smolka editors 
handbook process algebra 
elsevier 

bertino editor 
proceedings european conference object oriented programming ecoop number lecture notes computer science sophia antipolis cannes france june 
springer verlag 

calder 
modal logic full lotos symbolic transition systems 
computer journal 

canal 
dynamic adaptation component behaviour 
pages 

canal editors 
int 
workshop coordination adaptation techniques software entities 

available es 

chiba 
load time structural reflection java 
bertino pages 

choppy 
royer 
global semantics views 
rus editor international conference amast volume lecture notes computer science pages 
springer verlag 

christine choppy pascal jean claude royer 
informal requirements coop concurrent automata approach 
wing woodcock davies editor fm volume lecture notes computer science pages 
springer verlag 

emerson 
temporal modal logic volume handbook theoretical computer science chapter pages 
elsevier 
van leeuwen editor 

far 
gu 
integrating behavioral protocols enterprise java beans 
kilov editors eleventh oopsla workshop behavioral semantics serving customer pages 

foster kramer 
model verification web service compositions 
ase pages 
ieee computer society 

gagnon 
sablecc object oriented compiler framework 
phd thesis school computer science mcgill university montreal november 

gamma helm johnson vlissides 
design patterns 
addison wesley professional computing series 
addison wesley 
www aw com 

honda vasconcelos kubo 
language primitives type disciplines structured communication programming 
esop volume lecture notes computer science pages 
springer verlag 

lin 
symbolic approach value passing processes chapter pages 
elsevier 


aspect oriented programming aspectj 
sams publishing indianapolis 

magee dulay eisenbach kramer 
specifying distributed software architectures 
proceedings esec pages 
ieee 

magee kramer 
concurrency state models java programs 
wiley 

magee tseng kramer 
composing distributed objects corba 
proceedings third international symposium autonomous decentralized systems pages berlin germany 
ieee 

mar chal 
royer 
checking asynchronously communicating components symbolic transition systems 
tari meersman editors coopis doa odbase volume lecture notes computer science pages 
springer verlag 

medvidovic taylor 
classification comparison framework software architecture description languages 
ieee transactions software engineering 

nierstrasz 
regular types active objects 
proceedings eighth annual conference object oriented programming systems languages applications pages 
acm press 

noy pavel 
royer 
formal component model explicit symbolic protocols java implementation 
technical report ecole des mines de nantes 

papadopoulos arbab 
coordination models languages 
engineering large systems volume advances computers pages 
academic press august 

plas 
behavior protocols software components 
ieee transactions software engineering november 


royer 
formal adl full data types temporal glue 
technical report laboratoire de 
available www univ fr publications fr php 


royer 
gat approach specify mixed systems 
informatica 


royer xu 
analysing mailboxes asynchronous communicating components 
schmidt meersman tari editors coopis doa odbase volume lecture notes computer science pages 
springer verlag 

turner editor 
formal description techniques estelle lotos sdl 
wiley 
isbn 

van den bos 
parallel object language protocols 
norman meyrowitz editor oopsla conference proceedings pages 
acm press 

yellin strom 
protocol specifications component adaptors 
acm transactions programming languages systems 

