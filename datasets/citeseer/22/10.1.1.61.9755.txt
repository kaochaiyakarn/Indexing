generation platform analyzing executables reps balakrishnan lim teitelbaum comp 
sci 
dept university wisconsin reps cs wisc edu tt com 
years growing need tools analyst understand workings cots components plugins mobile code dlls memory snapshots worms virus infected code 
static analysis provides techniques help problems obstacles overcome kinds potentially malicious programs symbol table debugging information entirely absent 
relied 
understand memory access operations necessary determine set addresses accessed operation 
difficult memory operations explicit memory addresses instruction easy indirect addressing address expressions difficult 
arithmetic addresses pervasive 
instance value local variable loaded slot activation record address arithmetic performed 
notion type hardware level address values distinguished integer values 
memory accesses aligned word sized address values potentially misaligned reads writes 
developed static analysis algorithms recover information contents memory locations manipulated executable 
combining analyses facilities provided idapro codesurfer toolkits created codesurfer prototype tool browsing inspecting analyzing executables 
executable codesurfer recovers intermediate representations similar created compiler program written high level language 
codesurfer supports scripting language kinds sophisticated pattern matching capabilities 
facilities provide platform development additional tools analyzing security properties executables 
market forces increasingly pushing companies deploy cots software possible source code typically unavailable outsource development custom software required 
great deal legacy code design documents usually date source code unavailable non existent continue left deployed 
important challenge coming decade identify bugs security vulnerabilities systems 
methods needed determine third party legacy application programs perform malicious operations induced perform malicious operations able judgments absence source code 
portions appeared 
research programming languages software engineering computer security led new kinds tools analyzing code bugs security vulnerabilities 
tools static analysis determine conservative answer question program reach bad state principle tools great help analyst trying detect malicious code hidden software important detail aforementioned tools focus analyzing source code written high level language 
source code available number reasons analyses start source code provide right level detail checking certain kinds properties cause bugs security vulnerabilities malicious behavior invisible tools 
see contrast addresses problem finding bugs security vulnerabilities programs source code unavailable 
goal create platform carries static analysis executables provides information analyst understand workings potentially malicious code cots components plugins mobile code dlls memory snapshots worms virus infected code 
second goal platform create tools analyst employ determine information program contains inadvertent security vulnerabilities program contains deliberate security vulnerabilities back doors time bombs logic bombs 
goal provide information activation mechanisms payloads latencies 
developed tool called codesurfer serves prototype generation platform analyzing executables 
codesurfer provides security analyst powerful flexible platform investigating properties possible behaviors executable 
uses static analysis recover intermediate representations irs similar compiler creates program written high level language 
analyst able codesurfer gui provides mechanisms understand program chains data control dependences ii codesurfer scripting language provides access intermediate representations codesurfer builds iii path inspector model checking tool uses sophisticated pattern matching engine answer questions flow execution program 
codesurfer designed provide platform analyst understand workings potentially malicious code major challenge tool assume executable untrustworthy symbol table debugging information relied 
algorithms codesurfer provide ways meet challenge 
version codesurfer targeted executables techniques language independent applied types executables 
addition possible extend codesurfer static analysis provides way obtain information possible states program reaches execution running program specific inputs 
static analysis techniques explore program behavior possible inputs possible states program reach 
feasible program run aggregate descriptors represent collections memory configurations 
symbol table debugging information situations information available trusted instance source code program invoke compiler trust compiler supply correct symbol table debugging information 
techniques extend naturally source code available treat executable code just ir collection irs obtainable source code 
mapping information back source code similar source code tools perform preprocessor kind issues arise debugging optimized code complicate matters 
remainder organized follows illustrates advantages analyzing executables describes codesurfer gives overview model checking facilities coupled codesurfer discusses related 
advantages analyzing executables section discusses analysis works executables provide accurate information analysis works source code 
analysis works source code fail detect certain bugs vulnerabilities due phenomenon see execute cause mismatch programmer intends executed processor 
source code fragment taken login program illustrates issue memset password len free password login program temporarily stores user password clear text dynamically allocated buffer pointed pointer 
minimize lifetime password sensitive information code fragment shown zeroes buffer pointed returning heap 
unfortunately compiler performs useless code elimination may reason program uses values written call call memset removed leaving sensitive information exposed heap 
just hypothetical similar vulnerability discovered windows security push 
vulnerability invisible source code detected examining low level code emitted optimizing compiler 
second example analysis executable better typical analyses involves pointer arithmetic indirect call int void int diff char char offset int char diff points indirect call existing source level analyses know ill prepared handle code 
conventional assumption arithmetic function pointers leads undefined behavior source level analyses assume indirect function terms analysis works source code source level analyses shorthand analyses irs built source code call call function ignore arithmetic operations assume indirect function call assumption code ansi compliant 
contrast analysis described balakrishnan reps correctly invoked function 
furthermore analysis detect arithmetic addresses creates address point function address perform function call bug subtle deliberately introduced security vulnerability 
third example involves function call passes fewer arguments procedure expects parameters 
compilers accept unsafe code easy way implementing functions take variable number parameters 
compilers effectively means call site passes parts local variables calling procedure remaining parameters effect passed assignment parameter callee overwrite value corresponding local caller 
analysis works executables created capable determining extra parameters source level analysis approximation unsound approximation 
final example shown fig 

code left uses uninitialized variable triggers compiler warning compiles successfully 
source code analyzer assume local value value 
assembly listings right show code compiled including variants prolog 
microsoft compiler cl uses second variant int callee int int int local local return return int main int int int callee value 
return standard prolog prolog local push ebp push ebp mov ebp esp mov ebp esp sub esp push ecx mov ebp var mov ebp var mov eax ebp var push eax mov ecx ebp var push ecx call callee 
fig 

example unexpected behavior due compiler optimization 
box top right shows variants code generated optimizing compiler prolog callee 
analysis second reveals necessarily contains value 
includes strength reduction esp allocates space replaced instruction arbitrary register case ecx 
analysis executable determine optimization results local initialized value 
summarize advantage analysis works executables executable contains actual instructions executed provides information reveals actual behavior arises program execution 
information includes memory layout details positions offsets variables runtime stack activation records ii padding structure fields 
register usage execution order actual parameters optimizations performed artifacts compiler bugs access information crucial instance security exploits depend platform specific features structure activation records 
vulnerabilities escape notice tool information adjacency relationships variables 
contrast number reasons analyses source code provide right level detail checking certain kinds properties source level tools applicable source available limits usefulness security applications analyzing code open source projects 
analyses source code typically unchecked assumptions program ansi compliant 
means analysis account behaviors allowed compiler arithmetic performed pointers subsequently indirect function calls pointers move ends arrays subsequently dereferenced programs typically extensive libraries including dynamically linked libraries dlls may available source code form 
typically analyses performed code stubs model effects library calls 
created hand contain errors may cause analysis return incorrect results 
programs modified subsequent compilation perform optimizations insert instrumentation code 
may modified insert malicious code 
modifications visible tools analyze source 
source code may written language 
complicates life designers tools analyze source code multiple languages supported quirks 
source code primarily written high level language may contain inlined assembly code selected places 
source level analysis tools typically skip inlined assembly code push analysis sites inlined assembly code 
source code available substantial amount information hidden analyses start source code cause bugs security vulnerabilities malicious behavior invisible tools 
source level analysis tool strives greater fidelity program executed duplicate choices compiler optimizer approach doomed failure 
analyzing executables absence source code able apply techniques ones encounters challenging program analysis problem 
perspective compiler community consider problem ir recovery needs recover intermediate representations executable similar available started source code 
perspective model checking community consider problem model extraction needs extract suitable model executable 
solve ir recovery problem obstacles overcome kinds potentially malicious programs symbol table debugging information entirely absent 
relied 
understand memory access operations necessary determine set addresses accessed operation 
difficult memory operations explicit memory addresses instruction easy indirect addressing address expressions difficult 
arithmetic addresses pervasive 
instance value local variable loaded slot activation record address arithmetic performed 
notion type hardware level address values distinguished integer values 
memory accesses aligned word sized address values potentially misaligned reads writes 
past years working create prototype generation platform analyzing executables 
tool set developed extends static vulnerability analysis techniques directly executables absence source code 
tool set builds advances static analysis program executables ii new techniques software model checking dataflow analysis 
main components tool set codesurfer path inspector codesurfer recovers irs executable similar irs source code analysis tools create respects irs codesurfer builds precise 
codesurfer provides api irs 
library answering generalized reachability queries weighted pushdown systems 
library provide mechanism defining solving model checking dataflow analysis problems 
extend codesurfer analysis capabilities codesurfer api extract model executable run model 
path inspector software model checker built top codesurfer 
supports safety queries program possible control configurations 
addition writing scripts traverse irs codesurfer recovers tool set extended capabilities decompilation code rewriting 
fig 
shows components fit 
codesurfer idapro disassembly toolkit codesurfer system toolkit originally developed building program analysis inspection tools analyze source code 
components glued piece called connector uses static analyses value set analysis vsa aggregate structure identification asi recover information contents memory locations manipulated executable 
codesurfer executable ida pro parse executable build cfgs initial estimate code vs data procedures call sites malloc sites connector vsa asi codesurfer build sdg browse fleshed cfgs fleshed call graph killed may killed variables cfg nodes points sets reports violations user scripts path inspector decompiler code rewriter fig 

organization codesurfer companion tools 
executable disassembled idapro 
addition disassembly listing idapro provides access information statically known memory addresses offsets idapro identifies statically known memory addresses stack offsets program renames occurrences quantities consistent name 
database define set data objects terms initial run vsa carried objects called locs locations 
vsa analysis instruction determines approximation set values loc hold 
information procedure boundaries executables information procedure boundaries 
idapro identifies boundaries procedures executable 
calls library functions idapro discovers calls library functions algorithm called fast library identification recognition technology 
idapro provides access internal resources api allows users create plug ins executed idapro 
codesurfer uses plug idapro called connector creates data structures represent information obtains idapro see fig 
vsa asi implemented data structures vsa results additional static analysis phase called affine relation analysis ara program point identifies affine relationships hold values registers see 
idapro identify targets indirect jumps indirect calls call graph control flow graphs constructs complete 
information computed vsa augment call graph control flow graphs fly account indirect jumps indirect calls 
created connector 
idapro connector combination able create data structures dlls link data structures represent program 
infrastructure permits program analysis carried including analysis code library functions called 
codesurfer symbol table debugging information 
results vsa asi provide substitute absent untrusted symbol table debugging information 
initially set locs determined static memory addresses stack offsets instructions executable 
run asi refines set locs run vsa 
irs codesurfer recovers extracted directly executable code run machine entire program analyzed including libraries linked program approach provides higher fidelity platform software model checking irs derived source code software model checkers 
codesurfer supports scripting language provides access irs codesurfer builds executable 
provides way connect codesurfer analysis tools model checkers see implement tools top codesurfer decompilers code provides analyst mechanism develop additional analyses needs create 
memory access analysis connector analyses codesurfer great deal ambitious relatively sophisticated disassemblers idapro 
technical level codesurfer addresses problem stripped executable identify procedures data objects types libraries uses instruction libraries interprocedural calling context machine register loc statically compute accurate approximation set values may contain executes instructions may defined values instructions may values defined execution provide effective means access information interactively program control 
value set analysis 
vsa combined numeric pointer analysis algorithm determines approximation set numeric values addresses value set loc holds program point 
information computed vsa augment call graph control flow graphs fly account indirect jumps indirect function calls 
vsa related pointer analysis algorithms developed programs written high level languages determine approximation set variables addresses pointer variable hold vsa determines approximation set addresses data object hold program point 
time vsa similar range analysis numeric static analysis algorithms approximate integer values variable hold vsa determines approximation set integer values data object hold program point 
insights shaped design vsa non aligned access memory access address aligned byte word boundary spans parts words provides way forge new address parts old addresses 
important vsa discover information alignments strides memory accesses indirect addressing operations appear possibly non aligned accesses 
prevent loops traverse arrays appearing possible attacks analysis needs relational information values locs assigned loop related values locs loop branch condition see 
desirable vsa track integer valued address valued quantities simultaneously 
crucial analyzing executables integers addresses indistinguishable execution time compilers address arithmetic indirect addressing implement features pointer arithmetic pointer dereferencing array indexing accessing structure fields 
information integer values lead improved tracking quantities information address values lead improved tracking integer valued quantities 
vsa produces information precise obtained conventional numeric analyses compilers including constant propagation range analysis integer congruence analysis 
time vsa provides analog pointer analysis suitable executables 
aggregate structure identification 
major stumbling blocks analysis executables difficulty recovering information variables types especially aggregates structures arrays 
codesurfer uses iterative strategy recovering information round refines notion program variables types 
initially vsa uses set variables locs obtained idapro 
idapro relatively limited information available time applies variable discovery heuristics knows statically known memory addresses stack offsets limited generally leads coarse grained approximation program variables 
run vsa completes value sets locs instruction provide way identify approximation memory accesses performed instruction 
information refine current set locs running variant asi algorithm identifies commonalities accesses different parts aggregate data value 
asi originally developed analysis cobol programs context asi ignores type declarations program considers aggregate merely sequence bytes length aggregate broken smaller parts depending aggregate accessed program 
context asi analysis executables asi applied results vsa hand asi requires points range stride information available executable information available vsa run 
asi exploits information available vsa values locs hold sizes arrays iteration counts loops generally leads accurate set locs initial set locs discovered idapro 
instance consider simple loop implemented source code int executable idapro determine variables size bytes size bytes provide information substructure byte variable 
contrast addition byte variable asi correctly identify bytes array byte quantities 
connector uses refinement loop performs repeated phases vsa asi see fig 

asi results refine previous set locs refined set locs analyze program round vsa 
number iterations controlled command line parameter 
asi provides information greatly increases precision vsa analyze contents dynamically allocated objects memory locations allocated malloc new 
see recall initial set locs identified idapro 
loc abstraction exploits fact accesses program variables high level language complied static addresses globals fields struct valued globals static stack frame offsets locals fields struct valued locals 
fields dynamically allocated objects accessed terms offsets relative base address object idapro knows 
contrast vsa considers malloc site memory region consisting objects allocated memory region serves representative base addresses objects 
lets asi handle offset object base address similar way handles stack frame offset net result asi able capture information fine grained structure dynamically allocated objects 
object fields discovered way locs round vsa discover approximation contents 
asi complementary vsa asi addresses issue identifying structure aggregates vsa addresses issue approximating contents memory locations 
asi provides improved method facility idapro uses techniques takes account statically known memory addresses stack offsets 
asi requires information hand available idapro sizes arrays iteration counts loops 
fortunately exactly information available vsa carried means asi conjunction vsa obtain improved results round vsa results asi refine loc abstraction vsa run generally producing precise results 
codesurfer value sets locs program point determine point sets killed possibly killed locs emitted format suitable input codesurfer 
codesurfer tool code understanding code inspection supports graphical user interface gui api scripting language provide access program system dependence graph sdg information stored codesurfer irs 
sdg consists set program dependence graphs pdgs procedure program 
vertex pdg corresponds construct program instruction call procedure actual parameter call formal parameter procedure 
edges correspond data control dependences vertices 
pdgs connected interprocedural edges represent control dependences procedure calls entries data dependences actual parameters formal parameters data dependences return values receivers return values 
dependence graphs invaluable applications highlight chains dependent instructions may widely scattered program 
example instruction useful know data dependence predecessors instructions write locations read instruction predecessors control points may affect instruction gets executed 
similarly may useful know instruction successors instructions read locations written instruction control dependence successors instructions execution depends decision control point 
codesurfer gui supports browsing surfing sdg variety operations making queries sdg slicing chopping 
gui allows user navigate program source code dependences manner analogous navigating world wide web 
codesurfer api provides programmatic interface operations lower level information individual nodes edges program sdg call graph control flow graph node sets killed locs 
writing programs traverse codesurfer irs implement additional program analyses api extend codesurfer capabilities 
addition sdg codesurfer irs include syntax trees control flow graphs cfgs call graph vsa results sets killed possibly killed locs instruction information structure layout global memory activation records dynamically allocated storage 
backward slice program respect set program points set program points affect computations performed forward slice respect set program points affected computations performed members 
program chop set source program points set target program points shows affect points 
chopping key operation information flow analysis 
codesurfer provides unique capabilities answering analyst questions 
instance worm codesurfer analysis results obtain information worm target discovery propagation activation mechanisms locating sites system calls finding instructions arguments passed dependences backwards instructions identify values come 
techniques described able recover quite rich information memory access operations answers codesurfer furnishes questions account movement data memory just movement data registers prior :10.1.1.147.495
goals capabilities assumptions words order goals capabilities assumptions underlying codesurfer 
constraint symbol table debugging information limits complicated task creating codesurfer results vsa asi provide substitute information 
allowed create tool symbol table debugging information absent untrusted 
executable input goal check executable conforms standard compilation model runtime stack maintained activation records ars pushed stack procedure entry popped stack procedure exit global variable resides fixed offset memory local variable procedure resides fixed offset ars actual parameters pushed stack caller corresponding formal parameters reside fixed offsets ars program instructions occupy fixed area memory self modifying separate program data 
executable conforms model codesurfer creates ir 
conform model violations discovered corresponding error reports issued 
goal codesurfer provide tool security analysis ii general infrastructure additional analysis executables 
practical measure system produces error report choice accommodate error analysis continue error optimistically treated false positive ir produced analyst determine error report false positive ir valid 
analyzer care program compiled high level language hand written assembly code 
fact pieces program may output compiler multiple compilers different high level languages hand written assembly code 
easiest talk information vsa asi capable recovering terms features high level programming language allows vsa asi capable recovering information programs global variables local variables pointers structures arrays heap allocated storage pointer arithmetic indirect jumps recursive pro indirect calls function pointers virtual function calls dlls run time code generation self modifying code 
compiler optimizations vsa asi difficult computation critical data resides registers memory register operations easily memory operations 
major assumption idapro able disassemble program build adequate collection preliminary irs 
cfg created idapro may incomplete due indirect jumps ii callgraph created idapro may incomplete due indirect calls incomplete irs trigger error reports 
cfg call graph fleshed information recovered course vsa asi iteration 
fact relationship vsa asi iteration preliminary irs created idapro similar relationship points analysis algorithm compiler preliminary irs created compiler front 
cases preliminary irs fleshed course analysis 
model checking facilities model checking involves sophisticated pattern matching techniques answer questions flow execution program model program possible behavior created checked conformance model expected behavior specified user query 
essence model checking algorithms explore program state space answer questions bad state reached execution program 
model checking codesurfer irs build weighted pushdown system models possible program behaviors 
generalize model checking technology known pushdown systems software model checking mops systems 
compared ordinary unweighted capable representing powerful kinds abstractions runtime states go capabilities 
instance provides way address certain kinds security related queries answered mops 
library implements symbolic algorithms solving reachability problems 
follow standard approach pds model interprocedural cfg codesurfer irs 
stack symbols correspond program locations single pds state pds rules encode control flow follows rule control flow modeled intraprocedural cfg edge call returns return procedure exit node configuration pds symbol top stack corresponds current program location rest stack holds return site locations allows pds model behavior program runtime execution stack 
encoding interprocedural cfg pds sufficient answering queries reachable control states path inspector see reachability algorithms determine undesirable pds configuration reachable 
supports weighted rule weighted element user defined semiring 
weights allows perform interprocedural dataflow analysis semiring extend operator compute weights sequences rule firings semiring combine operator take meet weights generated different paths 
weights rules conservative data transformers approximation set reachable concrete configurations obtained means counterexamples reported may infeasible 
advantage answering reachability queries conventional dataflow analysis methods merge values states associated program point regardless states calling context 
queries posed respect regular language stack configurations 
conventional merged dataflow information obtained 
codesurfer conjunction path inspector tool 
path inspector provides user interface automating safety queries concerned possible control configurations executable reach 
path inspector checks sequencing properties events program answer questions possible program bypass authentication routine indicates program may contain trapdoor login program bypass code writes log file indicates program may trojan login program 
path inspector questions posed questions existence problematic event sequences checking query problematic path exists displayed path inspector tool 
lists program points may occur problematic path 
items linked source code analyst navigate point path corresponding source code element 
addition path inspector allows analyst step forward backward path simultaneously stepping source code 
code stepping operations similar single stepping operations traditional debugger 
path inspector uses automaton approach model checking query specified finite automaton captures forbidden sequences program locations 
query automaton combined program model cross product construction reachability algorithms determine error configuration reachable 
error configuration reachable witnesses see produce program path drives query automaton error state 
path inspector includes gui instantiating common reachability queries displaying counterexample paths disassembly listing 
current implementation transitions query automaton triggered program points user specifies manually result sets codesurfer queries 
versions path inspector support sophisticated queries transitions triggered matching ast pattern program location query states instantiated pattern bindings 
related previous analyzing memory accesses executables dealt memory accesses conservatively generally register assigned value memory assumed take value 
vsa better job previous tracks integer valued address valued quantities program data objects hold particular vsa tracks values data objects just hardware registers forced give precision load memory encountered 
basic goal algorithm proposed debray similar vsa find approximation set values register hold program point find approximation set values data object hold program point data objects include memory locations addition registers 
analysis set addresses approximated set congruence values keep track low order bits addresses 
vsa algorithm effort track values registers 
consequently lose great deal precision load memory 
cifuentes give algorithm identify intraprocedural slice executable program def chains 
algorithm attempt track values registers cuts short slice load memory encountered 
pieces closely related vsa algorithm data dependence analysis assembly code algorithm pointer analysis low level intermediate representation guo 
algorithm performs intraprocedural analysis clear algorithm fully accounts dependences memory locations 
algorithm guo partially flow sensitive tracks registers manner treats memory locations flow insensitive manner 
algorithm uses partial transfer functions achieve context sensitivity 
transfer functions parameterized unknown initial values clear algorithm accounts possibility called procedures corrupting memory locations represent 

driver specific rules october 
microsoft www microsoft com tools drv 

braun 
data dependence analysis assembly code 
int 
parallel proc 

balakrishnan reps analyzing memory accesses executables 
comp 
construct pages 

balakrishnan reps teitelbaum 
see execute 
ifip working conf 
verified software theories tools experiments 

ball rajamani 
slam toolkit 
computer aided volume lec 
notes comp 
sci pages 

bouajjani esparza maler 
reachability analysis pushdown automata application model checking 
proc 
concur volume lec 
notes comp 
sci pages 
springer verlag 

bouajjani esparza 
generic approach static analysis concurrent programs procedures 
princ 
prog 
lang pages 

bush pincus 
static analyzer finding dynamic programming errors 
software practice experience 

chen dean wagner 
model checking lines code 
network dist syst 
security 

chen wagner 
mops infrastructure examining security properties software 
conf 
comp 
commun 
sec pages november 

cifuentes 
intraprocedural static slicing binary executables 
int 
conf 
softw 
maint pages 

clarke jr grumberg peled 
model checking 
press 

codesurfer www com products codesurfer 

corbett dwyer hatcliff laubach pasareanu robby zheng 
bandera extracting finite state models java source code 
int 
conf 
softw 
eng pages 

cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixed points 
princ 
prog 
lang pages 

coutant 
doc practical approach source level debugging globally optimized code 
prog 
lang 
design impl 

das lerner 
esp path sensitive program verification polynomial time 
prog 
lang 
design impl pages new york ny 
acm press 

debray muth 
alias analysis executable code 
princ 
prog 
lang pages 

dwyer avrunin corbett 
patterns property specifications finite state verification 
int 
conf 
softw 
eng 

engler chelf chou hallem 
checking system rules system specific programmer written compiler extensions 
op 
syst 
design impl pages 

ferrante ottenstein warren 
program dependence graph optimization 
trans 
prog 
lang 
syst 

finkel willems wolper 
direct symbolic approach model checking pushdown systems 
elec 
notes theor 
comp 
sci 

fast library identification recognition technology sa nv li ge belgium www com htm 

guo bridges raman august 
practical accurate low level pointer analysis 
nd int 
symp 
code gen opt pages 

havelund 
model checking java programs java pathfinder 
softw 
tools tech 
transfer 

hennessy 
symbolic debugging optimized code 
trans 
prog 
lang 
syst 

henzinger majumdar 
lazy abstraction 
princ 
prog 
lang pages 

horwitz reps binkley 
interprocedural slicing dependence graphs 
trans 
prog 
lang 
syst january 

howard 
bad news news 
october 
msdn microsoft msdn microsoft com library default asp url library en html secure asp 

idapro disassembler www com 

kidd reps lal 
library weighted pushdown systems 
www cs wisc edu 

lal reps balakrishnan 
extended weighted pushdown systems 
computer aided 

ller seidl 
analysis modular arithmetic 
european symp 
programming 

ramalingam field tip 
aggregate structure identification application program analysis 
princ 
prog 
lang pages 

reps 
precise interprocedural chopping 

softw 
eng 

reps jha 
weighted pushdown systems application interprocedural dataflow analysis 
static analysis symp 

reps jha 
weighted pushdown systems application interprocedural dataflow analysis 
sci 
comp 
prog 
appear 


system 
www fmi uni stuttgart de tools 


model checking pushdown systems 
phd thesis technical univ munich munich germany july 

wagner foster brewer aiken 
step automated detection buffer overrun vulnerabilities 
network dist syst 
security february 

wall 
systems late code modification 
giegerich graham editors code generation concepts tools techniques pages 
springer verlag 

wilson lam 
efficient context sensitive pointer analysis programs 
prog 
lang 
design impl pages 

zellweger 
interactive source level debugging optimized programs 
phd thesis univ california berkeley 

