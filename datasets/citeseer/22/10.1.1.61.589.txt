fast functionally accurate simulation toolset cellular architecture juan del zhu hu guang gao department electrical computer engineering university delaware newark delaware hu udel edu reports experience lessons learned design implementation experimentation instruction set level simulator ibm short architecture 
simulation tool named functionally accurate simulation toolset fast designed purpose architecture design verification early system application software development testing 
fast architecture team system software developers application scientists 
report preliminary results illustrate case studies fast performs terms design objectives improved 

increasingly clear huge number transistors put chip reaching continues grow longer effectively utilized traditional microprocessor technology integrates single processor chip 
new generation technology emerging integrating large number tightly coupled simple processor cores chip empowered parallel system software technology coordinate processors scalable solution 
reports experience lessons learned design implementation experimentation instruction set level simulator ibm architecture integrates single chip processing cores equal number sram memory banks floating point units 
simulation tool named functionally accurate simulator toolset fast designed goals architecture design verification early system software development testing early application software development testing 
purposes cycle accurate function accurate simulator slow system consisting fully populated chips 
currently fast efficiently handles systems consisting single processing core chip fully populated system built nodes connected mesh 
important aspects fast simulator highlight tradeoffs faced design implementation 
design decisions unique features architecture 
instance employs data caches 
chip memories organized levels global interleaved memory banks uniformly addressable scratch memories local individual processing cores 
fast architecture team system software developers application scientists 
report preliminary results illustrate case studies fast performs terms design objectives improved 

chip architecture latest version cellular architecture designed serve dedicated compute engine running high performance applications 
supercomputer attached number gigabit ethernet links host system 
host system provides familiar computing environment application software developers users 
built tens thousands processing nodes arranged mesh network 
processing node consists chip external dram small amount external interface logic 
chip employs multiprocessor chip design large number hardware thread units half floating point units embedded memory interface chip ddr sdram memory bidirectional inter chip routing ports node chip memory chip memory chip memory chip memory processor sp tu fp sp tu gm gm chip sp sp sp sp sp tu fp gm tu tu tu fp crossbar network gm gm gm tu fp gm node sp tu gm switch gigabit ethernet mesh ata hd see 
chip processors thread units floating point unit sram memory banks kb 
kb instruction cache shown shared processors 
chip data cache 
portion sram bank configured scratchpad memory sp 
remaining sections sram form global memory gm uniformly addressable thread units 
chip resources connected port crossbar network sustains intra chip traffic communication provides access routing ports connect chip nearest neighbors mesh network 
intra chip network facilitates access special devices gigabit ethernet port serial ata disk drive attached node 
architecture represents major departure mainstream microprocessor design aspects 
chip integrates processing logic embedded memory communication hardware piece silicon 
provides resource virtualization mechanisms 
instance execution non preemptive hardware virtual memory manager 
means single application run time set nodes 
additionally os interrupt user program running thread units user explicitly specifies preemption exception occurs 
means level memory hierarchy chip visible programmer 
processing core standpoint thread unit simple bit single issue order risc processor small instruction set architecture instruction groups operating moderate clock rate mhz 
incorporates efficient support thread level execution 
instance thread executing instructions number cycles indefinitely asleep woken thread hardware interrupt 
additionally integration processing logic memory leveraged rich set hardware supported memory atomic instructions 
similar instructions common shelf microprocessors atomic instructions block table simulation parameters component units params unit threads single order issue mhz floating point mac divide square root cache kb sram chip kb dram chip mb crossbar ports gb port switch ports gb port memory bank operate remaining banks proceed servicing requests 
functionality provides higher memory bandwidth 

fast design implementation fast execution driven binary compatible simulator multithreaded system 
accurately reproduces functional behavior count hardware components thread units chip chip memory banks mesh network see table 
actual number simulated chips limited practical reasons memory corresponding chips need allocated host machine 
fast developed modular approach additional features easily incorporated existing design 
help architecture team verification chip design simulator executes instructions models architecture exceptions reproduces memory map produces histograms instruction mix detailed traces instructions executed 
purpose early system application software design evaluation addition fast accounts memory interconnect contention supports intra chip communication switch device incorporates debugging facilities 
overview simulator internals provided 

instruction execution fast simulates stage pipeline employed architecture see 
stage pipeline instruction see table fetched program instruction buffer pib decoded 
fast may account access pib subsequent delay instruction read instruction cache memory occur 
branch prediction incorrect execution thread unit stalls cycles pipeline table instruction set summary core integer branch floating point load store add subtract load store multiple multiply divide add subtract immediate multiply add multiply divide conversions compare immediate square root trap condition immediate logic immediate shift immediate shift left immediate insert extract move condition branch condition branch link exotic control bit gather permute bits count leading zeros cache invalidate count population move spr load op return interrupt multiply accumulate sleep supervisor call fetch pib cache decode spm memory register alu file global dram mem stage instruction pipeline commit flushed 
fast reflect operation branch predictor regards conditional branches correctly predicted 
second pipeline stage instruction input operands read register file 
instructions floating multiply add fma register operands read cycle 
fma instructions input operands extra cycle may required read third operand register file read ports 
third stage instruction executed 
instructions integer floating point branch memory operations modeled execution times expressed pairs execution time alu represents delay result table instruction timing instruction type branches count population integer multiplication integer divide remainder floating add mult 
conv 
floating mult 
add floating divide double floating square root double floating mult 
accumulate memory operation local sram memory operation global sram memory operation chip dram operations struction available 
instruction timing reported table information provided chip designer team 
instance integer division said take cycle alu subsequent instruction able result cycles 
delay execution independent instructions proceed normally 
result instruction instruction available pipeline stall 
compiler programmer responsibility cover delays possible appropriate instruction scheduling 
result committed fourth stage exception generated 
context switch causes execution continue address specified interrupt vector 
results put away conflicts may occur register file write ports 
events expected happen frequently fast account 
terms instruction execution fast allows thread units fetch decode execute instructions independently sequence events dictated thread instruction stream 
care need taken special instructions 
sleep instruction wakeup signal inter thread interrupt imply synchronization threads 
instance thread unit asleep execute instruction 
time simulator update clock counter 
wakeup signal received clock counter set remote thread executed store wakeup memory area plus delay 
handle synchronizations threads shall commit instructions simulated chip clock reaches time point instruction executed thread 
words instructions executed asynchronously committed synchronized fashion 
processor processor buffer crossbar memory buffer memory 

interconnection chip crossbar 
exception handling exceptions thread specific events 
caused instructions trigger call synchronous interrupts disabled 
instance attempt execute instruction invalid opcode generates illegal interrupt 
known asynchronous caused events timer alarm disabled 
disabled exception type generated sequence events held pending subsequent ones lost 
instruction execution multiple exceptions classes may occur 
fast checks exceptions execution stage 
results put away enabled exception exists fast generates interrupt priority order specified architecture 

segmented memory space chip hardware supports shared address space model chip sram chip dram banks addressable thread units processors chip 
threads see single shared address space 
architecturally thread unit associated kb sram bank 
memory bank partitioned configured sections called global interleaved section local scratchpad section 
global sections form chip global memory interleaved fashion free holes uniformly addressable thread units 
scratchpad memory global memory chip dram memory addressable thread chip access uniform 
having different latencies memories separate address space resulting level hierarchy 
furthermore virtual memory manager architecture memory hierarchy directly exposed programmer 
fast simulator accurately reproduces memory map implementing mentioned non uniform shared address space 
includes address upper limit special purpose registers define highest existing location scratchpad memory global memory dram memory respectively 
memory specific parameters number banks size bank latency bandwidth easily configurable 
additionally considers protection boundary special purpose registers pbx 
registers define regions scratchpad interleaved dram memory written supervisor state effectively provide basic mechanism protect kernel malign user code 

execution trace instruction statistics appropriate command line option toolset generates execution trace program 
mechanisms select instructions stored trace 
user specify time interval clock cycles program execution traced enclose instructions output trace macros 
macros access special purpose registers control simulator functionality chip design 
output consisting text file active thread system contains detailed information clock cycle instruction executed source target register values address memory location touched instruction applicable specific information regarding events delayed execution instruction contention crossbar network operand available 
fast may collect instruction statistics execution interval produce histograms instruction mix 
similarly procedure available tracing user specify interval clock cycles macros start collecting statistics respectively 
combined report node individual reports active threads generated 

memory interconnect contention latest additions fast simulator module accounts contention crossbar network memory system 
illustrates data path processors memory banks chip 
memory instruction executed processor results network packet delivered crossbar network appropriate memory bank global sram chip dram 
load operations memory replies packet containing data retrieved memory 
fast models sources contention packets issued threads processor queued slot fifo processor buffer retrieved crossbar 
thread issues memory operation fifo full pipeline stall space available crossbar retrieves packets input ports delivers packets output ports cycle 
cycle packets delivered output port crossbar blocks arbitrarily crossbar memory bank slot fifo memory buffer packets held processed memory 
buffer full crossbar stops delivering packets destination 
time stops retrieving packet input tries send packets blocked output port memory latencies taken account 
sram memory banks perform load store operation cycle gb bank 
dram memory sustain lower bandwidth 
dram memory consists banks bank subdivided 
service requests simultaneously cycles 
memory service incoming request held pending memory buffer 
dram bandwidth gb single loads stores 
multiple transfers load multiple ldm store multiple stm instructions dram bandwidth gb 

switch device fast optional modes simulating switch message accurate packet accurate simulation 
faster accurate copies message directly destination node 
models hardware mechanisms involved transferring packets double word double word mesh network 
model testing 
mainly account interaction switch crossbar network 
words reading writing memory sending receiving messages generate corresponding packets crossbar 
performance estimations obtained fast simulations regarded accurate 

debugger fast integrates user friendly assembly level debugger 
debugging mode commands set breakpoint continue execution breakpoint execution inspect modify values regis ters memory useful method tedious 
eliminate hazard mapping statements source code assembly instructions vice versa source level debugger necessary tool 
gnu debugger gdb partly ported architecture 

simulator internals simulated system starts running main simulator functions called 
maximize performance function specifically handles system consisting single processing core chip fully populated system built nodes 
decision simply system configuration 
simulations main function starts loop iterates active threads nodes 
thread unit attempts execute instruction 
new instruction calls routines take care instruction fetch instruction decode read input operands register file instruction execution invoked 
thread unit asleep stalled waiting operand due resource hazard waiting commit previous instruction return 
back main function chip clock moved forward just allow thread unit commit current instruction 
clock updated crossbar memory banks proceed flush packets memory operations performed time 
second loop iterates threads regardless status 
thread units check exception occurred corresponding interrupt serviced appropriate context switch 
interrupt triggered try commit instruction 
stage threads compare chip clock internal clock 
execution chip reaches time step thread commit instruction results put away 
thread waits 
status switch updated execution returns main loop 
process repeated thread units node execute instruction supervisor state 
simplify communication components simulator representation simulated system kept single multilevel data structure 
chip level contains information regarding thread units floating point units chip sram chip dram memories caches crossbar model switch 
thread level accounts general special purpose accumulator registers addition timing information value stored general purpose register available decoded instruction program counter exception flags thread status third level data structure statistics counters 
libc 
experience user application compiler regression test multithreaded benchmarks gnu cc assembler linker software fast goal fast fold fast designed purpose architect design verification section 
part fast provides basic platform early system software development testing section 
fast users application development testing 
cycle accurate timing information provided simulator proven useful performance estimation application tuning section 

design verification purpose architecture design verification execution trace generated fast compared output vhdl simulator reproduces gate level 
initial verification design carried procedure set short programs intended test instruction set architecture 
cellular architecture design target embedded market 
hardware implementation single chip embedded system accomplished fpga multiprocessor emulation system 
concurrently development earlier version fast simulator known implemented 
simulation tool binary compatible hardware emulation system brought design verification started immediately 
test suite consisting programs specifically designed test isa run actual hardware platform results compared produced simulator 
initial testing revealed bugs chip design fixed chip architect 

system software development 
fast part software available application development platform see 
programs written fortran compiled porting gcc suite 
assembler linker necessary libraries produce bit elf executable loaded fast executed 
standard math libraries 
addition wrote tnt runtime system cnet communication libraries manage hardware resources thread units switch respectively 

thread library reported design thread model maps directly architecture assisted native thread runtime library called tnt tiny threads 
development debugging evaluation tnt library fast capability accurately simulate large number hardware threads practical time proven useful 

spin lock thread library important components efficiently implemented 
multithreaded environments especially architectures threads chip spin lock indirect synchronization mechanism known key factor scalability 
reason conducted study spin lock algorithms architecture 
implemented programs known spin lock algorithms test set tickets array queue list queue 
programs consist short critical section single variable update enclosed calls procedures acquire release lock corresponding algorithm 
entire process lock critical section unlock repeated times part loop body 
run programs fast memory contention enabled measure execution time overhead due contention crossbar 
expected results show list queuing locks efficient algorithms see 
contrarily shared memory multiprocessors array queuing lock methods perform data cache 
words accesses array queue expensive memory operation seen test implementations 
test set algorithms linear exponential backoff perform better 
surprisingly list queue locks generate amount memory traffic crossbar threads spin locally scratchpad memory see 
means interfere normal execution program additional memory accesses 
result experience implementation mutexes tnt library list queue locks 
test set const backoff test set linear backoff test set exp ticket exp backoff anderson graunke mcs msc cas number threads execution time spinlock programs ms number threads test set const backoff test set linear backoff test set exp ticket exp backoff anderson graunke mcs msc cas execution delay spinlock programs ms 
communication library switch module fast simulate system configurations 
feature developed communication library implemented layers accessible interface 
lowest level packet transfer layer accesses switch directly hiding hardware details layers 
second layer built top packet transfer layer provides user level remote memory read write inter chip synchronization primitives remote procedure call mechanisms 
process porting library architecture previous layers 

application development evaluation demonstrate fast functionally accurate stable useful software development performance estimation write benchmarks programs confirm trends predicted simulator match architecture capable 

table toy called random access benchmark important benchmark included hpc challenge benchmark suite 
uses metric known giga updates second evaluate random access capabilities memory system 
context experience table toy verify fast reflects memory system accurately 
kernel operations table toy summarized follows tmp stable load tmp table load val tmp xor tmp xor table val store pseudo random locations chosen ideally thread units access dif ferent locations avoid conflicts 
placed chip sram chip dram accessed thread units 
substitution table allocated thread scratchpad mem ory 
key point operations load xor store atomic multithreaded execution 
shows obtained node thread running parallel 
advantage xor memory atomic instruction xor memory guarantee atomicity needed data dependences removed kernel loop 
number memory updates number xor instructions issued 
updates performed sram curve scales number threads increases due large chip memory bandwidth 
hand chip dram memory bandwidth limited 
consequently dram curve flattens number threads exceeds 
cases maximum achievable memory bandwidth reached 
appears pseudo random numbers generated table toy result threads accessing memory bank time 
bandwidth limitation due crossbar network conflicts accessing memory banks 
prove hypothesis write separate microbenchmarks deterministic access pattern memory banks 
microbenchmark new toy thread issues store operations cycles 
addition thread targets sram bank 
processor issues store operations cycles chip sram memory 
represents peak throughput crossbar achieved conflicts memory bank addressed thread unit different see 
microbenchmarks test chip dram memory subsystem different ways 
new toy thread targets dram thread identifier 
threads access threads access forth 
dram table toy chip sram table toy chip dram number threads node table toy crossbar maximum throughput new toy number threads node new toy service request cycles service requests parallel 
confirms expected result 
long threads active dram throughput increases linearly rate thread 
new toy thread executes consecutive stores cycles store targets dram 
means thread issue operations memory faster memory handle 
shows small number active threads contention tolerated crossbar dram memory system deliver peak throughput 
contention increases performance drops 

matrix matrix multiply example application developer expect learn fast toolset report tuning experience matrix matrix multiply program problem size exercise simulator accurate time counter histograms file instruction mix execution trace deter new toy new toy number threads node new toy mine cause delays bottlenecks may prevent program achieving higher performance 
baseline straightforward sequential code matrices stored dram 
program compiled achieves mflops 
trace file main reasons low performance poor data re usage long latency access dram 
order improve performance unroll outermost loops times manually prefetch data re schedule instructions hints trace files generated fast 
resulting code data fed floating point unit pipelined manner load latencies hidden 
implementation achieves mflops speedup compared baseline version 
parallelized tuned mxm program multiple thread units 
shown curve parallel version scales linearly threads flats bandwidth limitation 
drops memory contention high 
believe higher performance achieved employing techniques 
purpose experiment 

multi chip benchmarks verify correctness accuracy fast simulation communication libraries developed assorted set multithreaded benchmarks 
includes implementations matrix matrix multiply laplace solver heat conduction sobel edge detection 

related analyze understand impact various architectural parameters components study application performance get detailed statistics academia industry developed number simulators 
simulation frameworks matrix matrix multiply number threads mflops matrix matrix multiply prefetching node tecture research design exploration simplescalar liberty concentrate accurately modeling architecture design normally cycle accurate 
fast functional simulator cycle accurate simulation slow system consisting chips 
full system simulators capable running commercial workloads unmodified operating system simos 
compute engine attached host system 
host system provides familiar computing environment application developers 
fast simulates compute engine running custom microkernel conventional os services provided native os running host system 
new generation simulators capable simulating smt cmp architectures developed gems 
appear simulation frameworks extensions simplescalar simos normally simulate way smt cmp processors multiprogramming thread level speculation commercial workloads fast designed simulate model cmp system consisting nodes processing cores 
architecture designed purpose running massively parallel applications deal complexity scientific engineering multithreading workloads 
probably closest related fast simulator 
simulators similar architectures simulate 
significant differences 
instance fast detects dependences conflicts instructions exe papers published hpca 

directly produces performance estimates 
hand simulator timing information 
performance estimates generated performance tools cache simulator trace analyzer post process execution trace produced simulator 

summary presents fast functionally accurate simulation toolset ibm architecture fast flexible efficient 
best knowledge simulation tool capable simulating multithreaded cellular architectures reasonable accuracy practical speed 
report preliminary results illustrate case studies fast tool chain accomplishes purpose architecture design verification early system application software development testing 
plan increase amount profile information fast produces including text data symbols incorporate integer counters facilitate performance analysis multithreaded programs 
acknowledgments acknowledge support ibm particular henry warren 
eti support 
acknowledge government sponsors 
members helpful discussions 
hpc challenge benchmark 
url icl cs utk edu hpcc 
alm si cas casta os donath ho lieber moreira snir warren jr demonstrating scalability molecular dynamics application petaflops computer 
international journal parallel programming august 
austin larson ernst 
simplescalar infrastructure computer system modeling 
computer february 

powerpc architecture emulator may 
url sourceforge net 
reinhardt 
full system simulation 
sixth workshop computer architecture evaluation commercial workloads pages anaheim california february 
held conjunction th international symposium high performance computer architecture 
peterson elnozahy shafi simpson zhang 
full system simulator powerpc architecture 
acm sigmetrics performance evaluation review march 
burger austin 
simplescalar tool set version 
technical report computer sciences department university wisconsin madison madison wisconsin june 
del zhu hu gao 
tiny threads thread virtual machine cellular architecture 
fifth workshop massively parallel processing page denver colorado april 
held conjunction th international parallel distributed processing symposium 
del zhang 
software development kit 
technical note revised department electrical computer engineering university delaware newark delaware march 

computing speed life blue gene supercomputer 
citi distinguished lecture series rice university texas september 

personal communication february 
hughes pai ranganathan adve 
simulating shared memory multiprocessors ilp processors 
computer february 
magnusson larsson werner 
full system simulation platform 
computer february 
martin beckmann marty xu moore hill wood 
general execution driven multiprocessor simulator gems toolset 
submitted computer architecture news 
mellor crummey scott 
algorithms scalable synchronization shared memory multiprocessors 
acm transactions computer systems february 
moreno wellman bose 
trace driven performance exploration powerpc oltp workload wide superscalar processors 
workshop computer architecture evaluation commercial workloads las vegas nevada february 
held conjunction th international symposium high performance computer architecture 
kendall 
general portable library high performance computing 
proceedings sc high performance networking computing dallas texas november 
url www org sc proceedings 
rez 
case quantitative comparison micro architecture mechanisms 
proceedings th annual international symposium microarchitecture pages portland oregon december 


url sourceforge net 
rosenblum bugnion devine herrod 
simos machine simulator study complex computer systems 
acm transactions modeling computer simulation january 
leung gao 
iterative emulation platform chip designs 
proceedings ieee international conference field technology pages japan december 
tullsen 
simulation modeling simultaneous multithreading processor 
proceedings nd annual computer measurement group conference pages san diego california december 
august 
microarchitectural exploration liberty 
proceedings th annual international symposium microarchitecture pages istanbul turkey november 
