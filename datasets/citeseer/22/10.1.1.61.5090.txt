versioning evolution framework rdf knowledge bases ren auer heinrich university leipzig leipzig germany auer informatik uni leipzig de www home page www informatik uni leipzig de auer approach support evolution online distributed reusable extendable ontologies rdf data model 
approach works basis atomic changes basically additions deletions statements rdf graph 
atomic changes aggregated compound changes resulting hierarchy changes facilitating human reviewing process various levels detail 
derived compound changes may annotated meta information classified ontology evolution patterns 
introduced ontology evolution patterns conjunction appropriate data migration algorithms enable automatic migration instance data distributed environments 
goal envisaged generation web called semantic web smoothly interconnect personal information management enterprise application integration global sharing commercial scientific cultural data vision ontologies play important role defining relating concepts describe data web 
distributed dynamic environment semantic web crucial keep track changes documents ensure consistency data document evolution enable concurrent changes 
areas software engineering databases web publishing versioning revision control mechanisms developed successfully applied 
software engineering versioning track provide controls changes project source code 
database systems versioning usually provided database log history actions executed database management system 
web publishing web distributed authoring versioning webdav standard released extension hyper text transfer protocol supporting versioning intention making world wide web readable writable medium 
revision control semantic web data unfortunately developed technologies insufficient 
software engineering web publishing revision www org sw activity control unique serializations enabled data models 
unique serializations available semantic web knowledge bases usually consisting unordered collections statements 
database logs hand cope multitude different interrelated objects data model databases tables rows columns cells contrast just statements rdf data model 
approach versioning distributed knowledge bases grounded rdf data model support ontology evolution 
ontology versioning understand keep track different versions ontology possibly allow branching merging operations 
ontology evolution additionally shall identify formally represent conceptual changes leading different versions branches 
basis information ontology evolution support migration data adhering distinct ontology version 
structured follows approach works basis atomic changes determined additions deletions certain groups statements rdf knowledge base section 
atomic changes aggregated complex changes resulting hierarchy changes facilitating human reviewing process various levels detail section 
derived compound changes may annotated meta information user executing change time change occurred 
simple owl ontology capturing information enabling distribution change sets section 
assuming control evolution clarified changes compatible concurrent branch root ontology 
compatibility concept applying change ontology level statements section 
enable evolution ontologies regard higher conceptual levels statements introduce evolution patterns section give examples appropriate data migration algorithms section 
give account successful implementation approach summarize related give outlook planned directions section 
atomic changes rdf graphs introduce notion atomic changes rdf graphs need recall preliminary definitions 
main building blocks semanticweb paradigm universal resource identifier uri rdf counterparts uri quite technical definitions omit 
definition literal literal string combined language identifier plain literal datatype typed literal 
definition blank node blank nodes identifiers local graph 
set blank nodes set uri set literals pairwise disjoint 
set blank nodes arbitrary 
definition statement statement triple uri blank node subject 
uri predicate 
uri literal blank node object 
definition graph graph set statements 
set nodes graph set subjects objects triples graph 
consequently blank nodes graph members subset set nodes graph consists blank nodes 
definition graph equivalence rdf graphs equivalent bijection sets nodes graphs 
maps blank nodes blank nodes 

lit lit literals lit nodes 
uri uri uri uri nodes 
triple triple definitions want discuss possible changes graph 
rdf statements identified smallest manageable piece knowledge 
view justified fact way add remove update resource literal changing statement opposite hold 
adopt view require smallest manageable pieces knowledge closed regarding usage blank nodes 
want able construct larger changes smaller ones order additions deletions statements graph may matter distinguish positive negative atomic changes 
definition atomic graph graph atomic may split nonempty graphs blank nodes disjoint 
obviously graph blank node atomic consists exactly statement 
statement contain blank node subject object atomic graph 
definition positive atomic change atomic graph cg said positive atomic change graph sets blank nodes occurring statements cg disjoint 
rationale definition aim applying positive atomic change cg graph positive atomic change graph applied yield new graph result 
purpose introduce partial function apl arguments graphs 
definition application positive atomic change cg positive atomic change graph function apl defined arguments cg holds apl cg cg symbolized cg say cg applied graph result application positive atomic change cg yielding just identifying union cg course graph may changed adding statements leading notion negative atomic change 
definition negative atomic change subgraph cg said negative atomic change cg atomic contains statements blank nodes occur statements cg 
analogously case positive changes introduce function apl cg pertains negative atomic changes 
definition application negative atomic change cg negative atomic change graph function apl defined arguments cg determined apl cg cg symbolized cg say cg applied result definitions require changes involving blank nodes independent graph sense blank nodes change remaining graph overlap 
crucial changes exchangeable different rdf storage systems concrete identifiers blank nodes may differ 
may negative effect large subgraphs interconnected blank nodes deleted completely added slightly modified 
change hierarchies evolution knowledge base typically results multitude sequentially applied atomic changes 
usually small may contain single statement 
hand cases multiple atomic changes form larger logical change 
consider example case arrival information german nationality person results adding fact knowledge base right spelling persons name 
shown example result atomic changes 
information changes belong lost enable human users observe evolution knowledge base various levels detail 
achieved constructing hierarchies changes graph 
achieve goal atomic changes called changes level changes higher levels defined inductively 
set atomic changes 
general changes simply called changes defined sequences set 
set changes changes 
schematic visualisation change hierarchy 
black dots represent atomic changes gray triangles compound changes 
smallest set containing empty sequence closed respect condition 
ck changes 
ck changes 
annotated change expression form change annotation object 
restriction imposed annotation object attached change 
section simple ontology schema may capturing change annotations 
changes level denoted ch defined inductively 
change level ch changes 

ck changes ch 
ck ch 
change level exactly ch ch level level 
application functions app app may extended function app argument graph second argument change 
app recursively defined level second argument apply change level graph 
sequence changes smaller level changes components consecutively applied intermediate graphs 
demonstrated change example 
applied graph containing information people results new revision consists may resolved atomic changes may applied proposed definitions 
example change hierarchy consider update description person resource changed resource classified auer cx german labels changed label removed auer cx rdfs label auer label added auer cx rdfs label ren auer represents compound change atomic changes 
may visualized 
call change level compound change 
visualized may viewed tree changes atomic changes leafs 
enables review changes various levels detail statement level ontology level domain level facilitates human reviewing process 
advantage addition improved change examination basis knowledge transaction processing may implemented 
assuming relational database management system supporting transactions triple store knowledge bases compound change may encapsulated database transaction 
repository blocked write accesses 
compound changes nested arbitrarily deep compound change example triggered user interaction 
call top level compound change upper compound change 
multiple possibly semantically related compound changes collected patch easy distribution example peer peer environment 
change conflict detection tracking additions deletions statements described section enables implementation linear undo redo functionality 
distributed web environments usually people knowledge engineers domain experts contribute changes knowledge base 
setting highly rollback distinct earlier changes 
course possible arbitrary changes 
consider case statements added graph change removed change 
rollback change possible longer took place 
opposite case statements removed knowledge base added rollback deletion possible 
definitions clarify atomic changes compatible distinct knowledge base sense 
definition compatibility positive atomic change graph positive atomic change cg compatible graph iff cg equivalent subgraph definition compatibility negative atomic change graph negative atomic change cg compatible graph iff cg equivalent subgraph positive negative atomic change cg compatible graph may easily applied simply adding respectively removing statements cg possibly blank node identifiers renamed cg occurs notion compatibility may easily generalized compound changes 
changes belonging compound change ordered compound change may broken corresponding sequence atomic changes 
cn 
consider compound change example corresponding sequence atomic changes 
definition compatibility compound change graph compound change cg compatible graph iff atomic change corresponding sequence atomic changes cn compatible results atomic change ci sequence compatible intermediate graph application results compatibility especially interesting prior version supports decision change may rolled back 
compatibility concept deals possible conflicts level statements 
remaining part section point directions cope incompatibilities higher conceptual levels statements 
impact distinct change patterns instance data studied 
change patterns include elementary operations owl ontology adding deleting classes properties instances 
effects instances categorized change patterns result information preserving translatable information loss changes 
compound change contains atomic change matching change pattern categories indicated user possible solutions offered cf 
section details ontology evolution patterns 
graph represents web ontology language owl knowledge base furthermore description logic reasoner may check model consistent change applied 
ideally evolution enabled knowledge base editor provides interface dynamically plug functionality check applicability distinct change respect certain graph 
changes distribute changes graph client server peer peer setting consistent representation changes needed 
propose represent changes instances class log change 
statements added deleted atomic changes represented reified statements referenced properties log added log removed change instance 
property log relates change instance compound change instance higher level 
achieve goal enhanced human change review possible annotate changes information user making change date time change took place human readable documentation change effects may just mention 
table summarizes important properties attached log change 
complete owl ontology schema capturing change information provided sf net 
property description example action string uri identifying predefined action classes 
resource changed user string uri identifying editing user 
auer cx datetime timestamp xsd datetime format change took place 
documentation string containing human nationality added readable description change 
name typing corrected correspondingly 
optional uri identifying compound change change belongs 
table 
properties representing annotating changes evolution patterns versioning change tracking strategy far applicable arbitrary rdf graphs enables representation annotation changes higher conceptual levels pure rdf statements 
section demonstrate may extended support consistent owl ontology instance data evolution 
owl ontologies consist classes arranged class hierarchy properties attached classes instances classes filled values properties 
classify changes operating owl ontologies specific patterns reflecting common change intentions 
positive atomic change rdf type owl objectproperty example classified object property addition predicate statement change rdf type object owl objectproperty 
complementary category object property deletions negative atomic changes predicate object 
categories changes described formally generally notion evolution patterns 
definition evolution pattern positive negative evolution pattern triple set variables graph pattern characterizing positive resp 
negative change variables appropriate data migration algorithm 
graph patterns essentially graphs certain uri replaced placeholders variables 
precise definition omitted 
example consider positive atomic change adding cardinality restriction property nationality attached class person person owl subclassof rdf type owl restriction owl onproperty nationality owl maxcardinality corresponding evolution pattern class property maxcardinality graph pattern class owl subclassof restriction restriction rdf type owl restriction restriction owl onproperty property restriction owl maxcardinality maxcardinality data migration algorithm class property maxcardinality iterate instances class remove property values property exceeding maxcardinality 
facilitating review changes knowledge base classification changes evolution patterns enables automatic migration instance data settings instance data distributed 
general evolution patterns constructed sequences positive negative evolution patterns 
modification owl maxcardinality restriction sequentially applying changes belonging negative evolution pattern positive evolution pattern 
taxonomy change patterns owl ontologies possible effects instance data 
point view change patterns sufficient capture change intentions enable automatic instance data migration 
intentions changes explicit precisely describing effects instance data providing instance data migration algorithms 
illustrate possible intentions class deletions re classifications subsections 
class deletions deletion entity ontology corresponds deletion statements graph uri referencing entity occurs subject predicate object 
deletion distinct class result serious effects instances class specifically typed direct subclasses independent top level classes properties having class domain universally applicable properties having class range lose restriction cases effects desired rigorous mitigated 
deleting class cope aspects classes usage 
happens instances class 
instances class preserved may instances superclass labeled ir 
explicit direct superclass instances may classified instances implicit superclass owl thing 
instances may deleted id 
deal subclasses 
subclasses may deleted sd reassigned class hierarchy sr kept independent top level classes sk 
adjust properties having class domain range 
domain range properties having class domain range may extended changed superclass pe restricted changed subclass pr 
possibility delete properties pd 
combinations evolution strategies obviously sense 
id sd pr deleting instances subclasses restricting domain range directly attached properties heavily needed see ir sr pe merge class superclass id sd pe cut class id sd pd delete complete subtree including instances directly attached properties 
different intentions deleting class merge superclass cut class delete subtree 
different class deletions illustrate different intentions delete class result different combinations data migration strategies different evolution patterns 
example complex ontology evolution pattern reclassification complete sub class tree 
reclassification distinction categories concrete entities easy resulting different modeling possibilities required stay owl dl representation classes instances 
modeling usage stage selected representation strategy classes instances may turn suboptimal reclassification required 
classes class tree class instances directly attached properties may converted instances 
done defining functional property preserve hierarchical structure encoded subclass superclass relationship 
classes ci subtree add ci rdf type ci direct subclass delete statement ci rdfs subclassof delete statements ci rdfs subclassof cj correspondingly add ci cj 
conversely assuming class functional property domain range instances cycles 
instances may converted subclasses follows statement converted rdfs subclassof triple add rdf type 
class deletions reclassification ontology evolution patterns move property property may moved class referenced class labeled log 
restriction property may increase number allowed values decrease number required values 
narrow restriction property may decrease number allowed values increase number required values 
split class class may split new classes related property labeled log 
join classes classes referencing functional property may joined 
examples show basic change patterns sufficient capture intentions ontology changes 
support independently synchronously evolving schema instance data visualized example splitting class propose annotate compound schema changes respective evolution patterns 
corresponding data migration algorithms migrate instance data agreeing version ontology 
provide complete library ontology evolution patterns 
annotation compound changes ontology evolution patterns easily achieved framework section 
move property class class referencing property represented example follows 
ontology evolution instance data migration example splitting class 
prefix rdf www org rdf syntax ns prefix rdfs www org rdf schema prefix log sf net rdf type log log log log log log removed log added rdf type rdf statement rdf subject rdf predicate rdfs domain rdf object rdf type rdf statement rdf subject rdf predicate rdfs domain rdf object data migration strategies main advantages ontologies distributed environment world wide web reuse structural information schemata encoded ontology 
ontology representing structural information evolves ontologies containing data bound structural information adopted 
automate task possible desirable instance data migration algorithms evolution patterns available 
subsections give examples data migration algorithms common evolution patterns log log 
moving property assuming change graph belonging evolution pattern log moving directly attached property class class property relating 
data migration algorithm follows foreach triple rdf type find triple foreach triple add triple del triple moves property values instances related instances 
splitting class splitting class requires move properties appropriate data migration algorithm log evolution pattern may log data migration add triple rdf type owl class foreach triple rdf type create new instance identifier add triple rdf type add triple foreach moved property class created line instance corresponding instance created relation established property lines log data migration algorithm moved property lines 
related summary versioning strategy described implemented web application development framework provides comprehensive web user interface collaborative knowledge base authoring application programming interface php developers 
change knowledge base optional versioning comment attached describing change review humans 
user interface versioning module enables users review changes chronologically compatibility current version indicated distinct changes may rolled back 
changes may filtered user ontology date 
compound changes may expanded atomic change level indicating added respectively removed statements 

reviewing changes 
approaches targeting support ontology evolution versioning roughly divided categories approaches aware trace changes result new version compare ontologies compute differences mappings 
kiryakov falling category define formal model tracking changes graph data models 
higher level evaluation classification updates scope 
studied discussed depth example 
contribution way easily relate low level changes statement level higher level changes level complex operations 
falling second category automatic techniques heuristic comparisons finding similarities differences versions developed 
develop merging method ontologies bottom approach offers structural description merging process 
approaches complementary applicable ontology editors storage systems support finely grained change tracking 
ontology evolution gives overview current developments 
method specifying complex changes means complex changes atomic changes graph 
method especially suited implemented ontology editors storage systems 
dynamic distributed environment sets changes may independently spread originating ontologies 
user ontology may decide single change accepts 
assistance decision provided compatibility concept ontology change 
annotation changes owl ontologies corresponding ontology evolution patterns enables automatic data migration independently stored instance data agreeing changed ontology 
context development exhaustive library ontology evolution patterns appropriate data migration algorithms planned 

ren auer 
web platform collaborative semantic web development 
ren auer chris miller editors proceedings workshop scripting semantic web number ceur workshop proceedings heraklion greece 

tim berners lee james hendler ora lassila 
semantic web 
scientific american may 

ying ding dieter fensel michel klein 
ontology management survey requirements directions 
technical report ist ontoknowledge project deliverable 

michel klein dieter fensel kiryakov noy heiner stuckenschmidt 
wonderweb deliverable 
versioning distributed ontologies december 

graham jeremy carroll 
resource description framework rdf concepts syntax 
recommendation www org tr rdf concepts 

fridman noy michel klein mark musen 
tracking changes ontology evolution 
sheila mcilraith dimitris plexousakis frank van harmelen editors proceedings third international semantic web conference iswc hiroshima japan november volume lecture notes computer science pages 
springer 

kiryakov 
tracking changes rdf repositories 
mez rez richard benjamins editors ekaw volume lecture notes computer science pages 
springer 

eric prud hommeaux andy seaborne 
sparql query language rdf 
working draft www org tr rdf sparql query 

stojanovic 
methods tools ontology evolution 
phd thesis institut angewandte informatik und formale universit karlsruhe th 

gerd stumme alexander maedche 
fca merge bottom approach merging ontologies 
proceedings th international joint conference artificial intelligence seattle usa august san francisco ca kaufmann 
