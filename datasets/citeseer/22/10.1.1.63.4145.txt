hypertext model traceability link conformance analysis jonathan maletic ethan munson marcus tien nguyen department computer science kent state university kent ohio department eecs university wisconsin milwaukee milwaukee wi department computer science wayne state university detroit mi cs kent edu munson cs edu cs wayne edu tien cs edu number techniques semi automated traceability link recovery source code documentation proposed support reverse engineering maintenance legacy systems 
step supporting long term maintainability systems 
crucial issue recovering traceability links analyzing general conformance time 
system changed evolution validity conformance links may change 
conformance analysis performed identify possible non conformance links 
presents holistic view combine link recovery conformance analysis facilitated formal hypertext model 
hypertext model supports complex linking structures multi links supports versioning individual links 
model preserves maintains time results reverse engineered traceability links 
extensive effort software engineering community research commercial brought forth improve explicit connection documentation source code 
number integrated development environments case tools particularly focused issue 
tools techniques great strides documentation source code traceability development new software systems 
unfortunately recovery types links legacy systems maintaining validity links system evolved quite problematic 
need tools techniques recover documentation source code traceability links legacy systems particularly important variety software engineering tasks 
include general maintenance tasks impact analysis program comprehension encompassing tasks reverse engineering systematic reuse 
major obstacle facing construction useful tools type link recovery link maintenance links rarely explicit exception semantic meaning prose documentation 
relating sort natural language analysis documentation source code obviously difficult problem 
solution problem utilize advanced information retrieval technique latent semantic analysis extract meaning semantics documentation source code 
information identify traceability links similarity measures 
method utilizes comments identifier names source code produce semantic meaning respect entire input document space 
supported determining importance information existing software 
implies assumption comments identifiers reasonably named alternative bares little hope deriving meaning automatically manually 
represent links relationships formal hypertext model easily supported underlying xml representations seen 
hypertext model supports maintains finegrained versioning links facilitate process conformance analysis identifies possible sources inconsistency software documents 
providing fine grained hypertext revision control framework address versioning documents relationships simultaneously 
necessary linking limited entire documents possibly single documents 
general problem traceability discussed followed method link recovery 
hypertext model described 
goal describe issues bridged support reverse engineering evolution software systems 
traceability inconsistency conformance analysis related known processes requirements traceability inconsistency management 
large amount research conducted areas 
general approach assumes source external documentation available explicit relationships exist 
requirements traceability importance software development process described 
number requirements tracing tools developed integrated software development environments 
research seeks develop model requirements traceability defines types requirement documentation entities traceability relationships 
dick extends traceability relationships support consistency analyses 
inconsistency management impact analysis studied late 
inconsistency management viewed process composed activities detection overlaps software artifacts detection inconsistencies diagnosis inconsistencies handling inconsistencies history tracking inconsistency management process specification inconsistency management policy 
activities taken depend type inconsistency addressed 
latent semantic indexing utilize information retrieval method latent semantic indexing drive link recovery process 
distinct advantage link recovery method rely predefined vocabulary grammar documentation source code 
allows method applied large amounts preprocessing manipulation input drastically reduces costs link recovery 
latent semantic indexing lsi vector space model vsm method inducing representing aspects meanings words passages reflective usage 
applying lsi natural language text shown lsi captures significant portions meaning individual words passages sentences paragraphs short essays 
central concept lsi information word contexts particular word appears appear provides set mutual constraints determines similarity meaning sets words 
typical text analysis lsi uses corpus create term document matrix 
applies singular value decomposition svd term document matrix construct subspace called lsi subspace 
new document vectors query vectors obtained orthogonally projecting corresponding vectors vsm space spanned terms lsi subspace 
mathematical formulation lsi term combinations frequently occurring document collection tend precluded lsi subspace 
fact examples suggests argue lsi noise reduction true frequently occurring terms mutually related sensible 
formalism svd complex lengthy 
interested reader referred details 
intuitively svd rectangular matrix decomposed product matrices 
component matrix describes original row entities vectors derived orthogonal factor values describes original column entities way third diagonal matrix containing scaling values components matrix multiplied original matrix reconstructed 
columns left right singular vectors respectively corresponding monotonically decreasing value diagonal elements called singular values matrix columns matrices largest singular values construct rank approximation xk uk kvk columns orthogonal ir rank matrix xk constructed largest singular triplets singular value corresponding left right singular vectors referred singular triplet closest rank approximation squares sense documents represented lsi subspace user compute similarities measures documents cosine corresponding vectors length 
measures clustering similar documents identify concepts topics corpus 
type usage typical text analysis tasks 
lsi representation map new documents queries lsi subspace find existing documents similar relevant query 
usage typical information retrieval tasks 
traceability recovery process traceability recovery process centers lsi partially automated 
user input necessary degree user involvement depends type source code user task 
mentioned recovering links source code documentation may support various software engineering tasks 
different tasks users typically require different types information 
example times completeness important 
user needs recover correct links means recovering incorrect ones time 
times precision preferred user restricts search space recovered links correct ones means finding 
system tries accommodate needs separately course 
way accommodate user needs offering multiple ways recovering traceability links 
depicts major elements traceability recovery process 
process previous 
user involvement source code links similarity measures preprocessing external tation lsi subspace 
traceability recovery process process occurs selecting source code documentation files 
user selects dimensionality lsi subspace 
lsi subspace generated user determines type threshold determining traceability links 
building corpus vector space term frequencies svd corpus lsi input data consists source code external documentation 
order construct corpus suits lsi simple preprocessing input texts required 
source documentation need broken proper granularity define documents represented vectors 
general applying lsi natural text paragraph section granularity document 
sentences tend small chapters large 
source code analogous concepts function structure module file class obviously statement granularity small 
choice granularity level influenced particular software engineering task 
previous experiments involving lsi source code functions documents procedural source code class declarations oo source code 
goal cluster elements source code semantic similarity mapping documentation 
application part documentation may refer different structures source code class hierarchy classes set functions methods data structure 
order allow flexibility simplicity turn better support automation define file document 
obviously files large 
situations files broken parts roughly size average document corpus 
ensures documents close number words may map vectors similar lengths 
course cases break files unfortunate causing documents source code appear related wrong manual sections 
trade willing take favor simplicity low cost preprocessing 
situation unacceptable user option re combining number documents new identify existing documents similar 
far documentation concerned chosen granularity determined division sections documents defined original authors usually summarized table content 
important note process grammar parsing source code necessary 
lsi predefined vocabulary predefined grammar morphological analysis transformations required 
argue mnemonics words constructing identifier may occur documentation 
certainly true 
fact reason chose internal documentation comments constructing corpus 
course assumption developers define identifiers rationale mind completely randomly 
defining semantic similarity measure give detailed explanation process mathematical background definitions necessary 
definition 
process source code document simply document contiguous set lines source code text 
typically document file source code program entity class function interface definition 
external document contiguous set lines text external documentation manual design documentation requirement documents test suites 
typically external document section chapter entire file text 
definition 
external documentation set documents em 
total number documents documentation 
definition 
software system set documents source code external dn em 
total number documents system 
definition 
file fi composed number documents union files size file fi number documents file noted fi 
lsi uses set dn em input determines vocabulary corpus 
number words terms vocabulary 
frequency occurrence terms documents entire collection term weighted combination local log weight global entropy weight 
term document matrix constructed 
user selected dimensionality svd creates lsi subspace 
term document matrix projected lsi subspace 
document di correspond vector xi projected lsi subspace 
definition 
documents di dj semantic similarity measured cosine corresponding vectors sim di dj cos xi yi value measure value representing identical 
important aspect consider granularity documents 
external documentation usually composed paragraphs sections chapters 
natural choices determining definition external document particular cases 
organization source code differs programming language 
simplest way determine documents granularity file decomposition 
obviously suffice tasks 
choosing classes functions interfaces source code documents time desirable 
goals framework flexible possible full parser possible language impractical 
developed simple lexical parser divide java source code documents different granularity levels functions methods interfaces classes 
link representation model software documents source code external documents relationships documents modeled network web nodes links node represents document part larger document link represents relationship documents 
common graph representations various software engineering processes software configuration management common hypertext model 
section discusses nature document relationships describes hypertext model represents relationships support conformance analysis 
software document relationships relationships software documents broadly divided categories conformance non conformance need conform 
conformance relationships represent logical semantic dependencies documents particular requirement motivating specific design feature 
relationships support concepts navigational organizational tasks document links individual pages 
non conformance relationships directly relevant conformance analysis maintenance automated standard browser management technology 
conformance relationships divided causal non causal 
causal conformance relationships causal relationships short represent relationships carry implied logical ordering documents involved 
example testing bug reports produced implementation available necessarily case requirement documents written designs certainly logical relationship design depend requirements 
conformance analysis important characteristic causal relationships causation establishes partial ordering time entities 
partial order time violated possible conformance documents broken 
causal relationship considered relation entities happens causes happen 
mathematically causal relationship transitive irreflexive anti symmetric 
non causal conformance relationships non causal relationships short exist documents parts agree causality clearly identified 
example multiple versions document different languages agree need causal relationship 
changes entities non causal relationship may cause logical semantics relationship invalid conformance analysis able account relationships 
mathematically non causal relationship transitive reflexive symmetric 
regardless type document relationships variable arity fine granularity 
variable arity simple binary relationships common software documents common relationships connect entities 
entity multiple causes sufficient cause 
turn produce multiple effects 
causal relationships may multiple sources multiple targets 
instance items listed particular requirement specification non functional affect design algorithm 
pattern holds true non causal relationship example documents languages may need agree 
fine granularity document relationships exist documents single document 
software documents lengthy common relationships connect relatively small sections material functions classes paragraphs subsections 
document relationships fine grained 
summary software document relationships divided broad classes non conformance causal conformance non causal conformance variable arity connect fine grained entities software documents 
hypertext model conformance analysis performed domain linked documents natural hypertext model basis representing relationships 
different hypertext systems variations notion hypertext model defined set intellectual works inter intra relationships represented links combination user interface viewing instances works navigating instance instance links 
artifact drawn medium text image video 
wide variety terms describe hypertext systems including document card frame node object component 
hypertext model link hyperlink class entity defined association set works anchors 
notion anchor varies system system anchors denote regions interest form endpoints links 
hypertext model links important properties arity directionality 
arity link specifies number endpoints 
hypertext representations html support binary endpoint links 
sophisticated hypertext representations xlink permit arity links variable numbers endpoints called multi links multi headed links 
link directionality takes forms navigational logical 
navigational directionality refers direction link may traversed 
example html links unidirectional supporting traversal source link destination history mechanisms browsers provide form reverse navigation 
link traversed backwards destination source bi directional 
logical directionality semantic quality independent link traversed 
example logical direction link represents relationship causes source cause destination logical directionality widely discussed hypertext literature 
research depends heavily separating logical navigational directionality 
hypertext document relationships hypertext model basis representing software documents relationships 
software document sense hypertext model 
software documents internal structure provided xml possible define anchor corresponding defined structural unit 
anchors may defined contiguous selections approach document object model range 
links divided classes corresponding classes document relationships identified earlier non conformance causal non causal 
links fundamentally ary practice binary links common 
links named types requires agree item set types fixed variety software processes supported 
non conformance links intended support navigational organizational relationships little relevance determine agreement documents table contents index links 
navigational directionality user specifiable 
participate conformance analysis process 
non conformance link identifier extensible set attributes 
source anchors target anchors 
causal relationship representation causal link represents causal relationship causal links directional connecting set source anchors set target anchors 
source target sets link denoted il ol respectively 
link source target sets element link binary 
directionality link represent causal semantic dependency navigational directionality user specifiable 
shows graphical representation causal link 
circles represent anchors diamond represents link 
directed edges connect source anchors link connect link target anchors 
non causal link represents non causal relationship designated symbol non causal links participate conformance analysis logically non directional 
navigational directionality specified user 
rl denote set nodes connected non causal link illustrates representation undirected edge connects anchor non causal link 
conformance graph conformance graph tuple lc ln ed en set documents nodes lc finite set causal link nodes ln finite set non causal conformance link nodes ed finite set directed edges en finite set nondirected edges 
node lc represents causal link 
node ln represents non causal link 
directed edge ed connects source anchor causal link causal link target anchor 
nondirected edge en connects anchor non causal link 
important relationship represented node edge case graph representations dependencies 
shows example conformance graph 
document nodes links causal links lc 
ln contains 
causal links incoming outgoing edges directed anchors connected nondirected edges 
conformance graph acyclic respect conformance links cycles imply node causes 
satisfy unique producer condition gunter defined pnet 
conformance links may degenerate non causal links connect anchors causal links non empty source target sets 
additional restrictions conformance graph structural relationships nodes 
timestamp strategy research developed method partially automate detection conformance problems timestamps links anchors manner similar build optimization tool 
anchor assume anchors links class 
non causal relationship representation objects version control 
new versions anchors created time material anchor altered way 
link versions change set anchors connected link altered 
anchors links unique ids version information including version id version creator modification timestamp 
addition links validation timestamp records time link validated human inspection 
link gets updated new version validation timestamp copied previous version validation predates creation version 
conformance ratings conformance analysis method compares anchor modification timestamps link validation timestamps produce heuristic conformance rating seriousness conformance problems 
conformance ratings scale zero conformance non conformance validated empirically 
conformance rating link determined ways depending link causal non causal 
causal links timestamps relevant maximum version timestamp source anchors minimum version timestamp destination anchors maximum version timestamp destination anchors tvalid validation timestamp link 
case analysis order timestamps defining conformance ratings case shown table 
example tvalid destinations newer sources link relationship validated human changes 
rating zero 
contrast tvalid destinations changed validation rating 
arrived ratings human judgment 
correct useful formula ratings remains open question probably require empirical research 
causality available provide clues turn formulaic approach 
assume noncausal link connects anchors ti timestamp th anchor 
exists ti ti tvalid number anchors conformance rating cr 
cr 
adjustable parameter representing minimum rating timestamps suggest problem exists 
supported formal conformance analysis model number desirable properties support automated analysis 
bridging gap showed link recovery method successfully applied existing software systems associated documentation 
recovered links represented hypertext model 
number interesting problems point 
determine type recovered links non conformance causal conformance non causal conformance relationships including arity link direction 
need determine initial assignment conformance ratings link 
arity links semantic similarity measure 
pick threshold measure document result multiple links tied document 
document semantically similar document 
assume links recovered navigational nature need determine causal non causal 
directionality links partially determined type documents linked 
requirements documents general cause design documents turn cause implementation 
combined types heuristics deal large number situations 
user intervention required remaining cases 
initial assignment conformance ratings links remains open problem 
links recovered evidence meaningful semantic relationship documents modest level conformance 
statistics drawn lsi provide evidence level conformance approach require empirical validation 
cases human inspection probably required validate recovered links 
issues arise problem maintaining links evolving system 
developers large system time motivation inspect link affected set document changes 
timestamp approach conformance analysis described earlier designed address just problem conformance ratings solely existence changes underlying semantics changes 
lsi derived statistics construct semantic signatures correct problem 
semantic signature document vector real values uk columns vi term vector document values semantic signature represent extent particular document semantics match strongest semantic themes document collection 
semantic signatures enhance conformance analysis 
lsi performed software project documents semantic signatures computed document recorded 
document modified semantic signature recomputed 
semantic signature changes substantially evidence document semantics changed important way conformance problems 
new documents added project semantic signatures generate candidate traceability links developer evaluation 
course project scope features changed substantially new lsi computation performed semantic signatures regenerated 
presents means combine traceability link recovery conformance analysis inconsistency management 
vital step long term maintainability reverse engineered legacy systems 
utilizing ir approach take advantage derived semantic similarity measure determine conformance rating retrieved links 
additionally hypertext model supports multi links conformance analysis 
supported part national science foundation ccr ccr 
lethbridge assessing relevance identifier names legacy software system proceedings annual ibm centers advanced studies conference cascon december pp 

antoniol canfora de lucia information retrieval models recovering traceability links code documentation proceedings ieee international conference software maintenance icsm san jose ca october pp 

antoniol canfora de lucia merlo recovering traceability links code documentation ieee transactions software engineering october pp 

antoniol canfora de lucia merlo recovering code documentation links oo systems proceedings th ieee working conference reverse engineering wcre atlanta ga october pp 

berry large scale singular value computations international journal supercomputer applications pp 

maletic marcus supporting document data views source code proceedings acm symposium document engineering mclean va november pp 

conklin hypertext survey ieee computer pp 

deerwester dumais furnas landauer harshman indexing latent semantic analysis journal american society information science pp 

dick rich traceability proceedings automated software engineering edinburgh scotland pp 
dumais improving retrieval information external sources behavior research methods instruments computers pp 

feldman program maintaining computer programs software practice pp 

analysis requirement traceability problem proceedings international conference requirements engineering colorado springs colorado pp 

grundy hosking mugridge inconsistency management multiple view software development environments ieee transactions software engineering pp 

gunter abstracting dependencies software configuration items acm transactions software engineering methodology pp 

automatic change support trace model proceedings automated software engineering edinburgh scotland pp 
landauer dumais solution plato problem latent semantic analysis theory acquisition induction representation knowledge psychological review pp 

maletic marcus supporting program comprehension semantic structural information proceedings rd international conference software engineering icse toronto ontario canada may pp 

maletic automatic software clustering latent semantic analysis proceedings th ieee international conference automated software engineering ase cocoa beach florida october pp 

marcus maletic identification high level concept clones source code proceedings automated software engineering ase san diego ca november pp 

marcus maletic recovering source code traceability links latent semantic indexing proceedings th ieee acm international conference software engineering icse portland may pp 

munson software concordance bringing hypermedia software development environments proceedings de sistemas 
june pp 

nguyen gupta munson issues versioned hypermedia software development systems proceedings brazilian symposium multimedia hypermedia systems pp 

nguyen gupta munson versioned hypermedia improve software document management proceedings conference hypertext hypermedia college park maryland pp 

nuseibeh easterbrook russo leveraging inconsistency software development ieee computer pp 

pinheiro goguen object oriented tool tracing requirements ieee software pp 

pohl pro art enabling requirements proceedings international conference requirements engineering colorado springs colorado pp 

ramesh jarke model requirements traceability ieee transactions software engineering pp 

reiss desert environment acm transactions software engineering methodology pp 

salton mcgill modern information mcgraw hill 
inconsistency management software engineering survey open research issues handbook software engineering knowledge engineering chang ed pp 

spirtes glymour scheines causation prediction search mit press 
castro comprehensive traceability model support design interactive systems proceedings ecoop workshops pp 

document object model range online www org tr dom level traversal range ranges html 
watkins neal requirements tracing ieee software pp 

whitehead analysis hypertext versioning domain university california irvine phd thesis 
