appear th international symposium microarchitecture minos control data attack prevention orthogonal memory model introduce minos microarchitecture implements biba low water mark integrity policy individual words data 
minos stops attacks corrupt control data hijack program control flow orthogonal memory model 
control data data loaded program counter control flow transfer data calculate data 
key minos tracks integrity data protects control flow checking integrity program uses data control transfer 
existing policies contrast need differentiate control non control data priori task impossible coercions pointers data types integers language 
implementation minos red hat linux pentium emulator stable usable linux system network currently running web server 
emulated minos systems running linux windows stopped actual attacks 
microarchitectural implementation minos achieves negligible impact cycle time small investment die area minor changes linux kernel handle tag bits perform virtual memory swapping 
control data attacks form overwhelming majority remote attacks internet especially internet worms 
cost attacks commodity software users year totals billions dollars 
propose general microarchitectural mechanism protect commodity systems attacks hardware protects integrity control data 
control data data loaded program counter control flow transfer data calculate data 
includes just return pointers function pointers jump targets variables base ad crandall frederic chong university california davis computer science department crandall chong cs ucdavis edu dress library index library routine dynamic linker calculate function pointers 
minos requires changes architecture changes operating system binary rewriting need specify mine policies individual programs 
minos bit word memory augmented single integrity bit physical memory level general purpose registers 
integrity bit set kernel kernel writes data user process memory space 
integrity set low high trust kernel data control data 
biba low watermark integrity policy applied hardware process moves data uses operations 
biba low water mark integrity policy specifies subject may modify object object integrity greater subject subject reads object integrity lowered minimum object integrity 
implementation biba low water mark integrity policy know applied policy file operations ran self revocation problems 
monotonic behavior classic sort problem low watermark policy minos careful definition trust 
intuitively control transfer involving untrusted data system vulnerability 
minos detects exactly vulnerabilities consequently avoids false positives extensive testing 
chose implement entire system demonstrating compatibility just handful benchmarks 
data words added example gate applied integrity bits operands determine integrity result 
data word integrity loaded general purpose registers 
hardware exception traps kernel low integrity data control flow purposes instruction jump call return 
minos secures programs attacks hijack low level control flow overwriting control data 
def trust linux implementation stops remote intrusions control data corruption 
protect local control data attacks designed raise privileges line remote vulnerabilities clear 
virtually remote intrusions control data attacks 
exceptions directory traversal urls example www com system cmd exe cmd control characters inputs scripts cause inputs interpreted scripts unchanged default passwords 
kinds software outside scope architecture responsible protecting 
elaborating motivation minos 
followed related works section compare minos existing historical methods add security architecture software 
describe architectural support necessary system considering implementation order superscalar microprocessor levels chip cache section followed section discussing implementation minos red hat linux pentium emulator implementation microsoft windows xp 
section explains evaluation methodology shows control data protection deeper issue buffer overflows library format strings 
results section show minos effective low water mark integrity policy stable performance overhead virtual memory swapping tag bits negligible 
security assessment minos section attempts analyze security minos approach possibly advanced attacks available today 
followed recommendations research 
motivation control data attacks form overwhelming majority remote attacks internet especially internet worms major constituent local attacks designed raise privileges 
vulnerabilities allow control data return pointers stack virtual function pointers library jump vectors long jmp buffers programmer defined hooks overwritten 
data read procedure call return jump transfer control flow attacker control program 
cost control data attacks commodity software users year totals billions dollars 
code red worm spread buffer overflow microsoft internet information services iis server worm estimated caused damage 
infected approximately machines fourteen hours num ber compared worms theoretical possibilities 
june month code red microsoft publicly stated new windows xp operating system contained buffer overflows thorough code inspection 
months buffer overflow universal plug play functionality ca 
control data protection problems microsoft software common occurrence batch dozen ta 
suggests persistence buffer overflow problem control data protection problems general due lack effort software developers 
major linux distribution security errata lists contain dozens control data protection vulnerabilities 
problem architecture problem 
inevitable large complex systems written entirely going memory corruption bugs 
architecture failure protect integrity control data amplifies memory corruption vulnerability opportunity remotely hijack control flow process 
integrity policy chosen confidentiality availability components full security policy critical control data protection 
chose biba low water mark policy integrity policies property access controls accesses subject past need specified 
thorough explanation property refer reader 
related key distinction minos orthogonality memory model 
minos integrity property physical memory space minos applicable flat memory model machines 
minos equally easy implement architectures complex virtual addressing 
flat memory model memory viewed linear array untyped data words 
programmer constrained architecture treat data word particular type 
obvious security disadvantages low level control reason flat memory model survived computer architecture better designed secure architectures 
commodity operating systems windows linux bsd memory model languages built 
success linux dozens architectures facilitated minimal requirements paged memory management unit mmu port gcc compiler 
adi dsp paged mmu run embedded version linux called mmu currently intended variety architectures mmu 
historical trend similar lead flat memory model shows hardware security mechanisms orthogonal universally applicable survive 
network router market necessitate portability flat memory model architectures xscale von neumann mode mips operating systems leaving vulnerable buffer overflows vu control data attacks 
similar minos published developed independently parallel 
focus compression techniques performance overhead minos focus system level 
policies different minos policy 
capability systems early attempt secure entire systems 
capability key allows program access object 
capabilities forged restrictions values may manipulated 
special interest loosely system today ibm 
global persistent address space shared processes files data 
pointers tagged operating system manipulated controlled set instructions 
unix programs compiled pointer usage conforms certain constraints 
conformity common commodity software 
uses type approach able compile run programs efficiently obey measures coercion pointers types integers redefinition new operator data structure longer lifetime shorter lifetime pointer heap data stack 
rules commonly broken 
worth noting intel type capabilities architecture memory management similar ada scoping rules 
ada scoping rules certainly orthogonal flat memory model 
aimed enable new applications running trusted software untrusted host operating system main memory trusted 
efforts combat software piracy tcpa initiatives protecting data person machine address control data attacks 
code injection attacks subset control data attacks considered hardware solutions embedding processor specific constraints binaries semantics preserving rewriting techniques 
architectures require major portions program memory encrypted moved 
course attempts combat control data attacks code injection software techniques 
notable stackguard places canary return pointer stack detect stack smashing attacks 
return pointers type control data independent analysis code red ii worm stackguard prevented code red ii function pointer stack return pointer 
attempts protect integrity pointers encrypting program compiled type information 
pointers function pointers may sum base pointer integers 
agree coercion pointers data types forces control data protection mechanisms minos fundamental trade security compatibility existing code 
secure execution program shepherding software technique prevents attempts hijack control flow security policy binary rewriting techniques 
performance problems related virtual memory orthogonal memory model helped inspire minos concept 
mondrian memory protection architectural mechanism facilitates access controls individual words data readable writable executable :10.1.1.19.4473
considerable storage performance overhead access controls dependent context 
word may writable context program permissions loaded applied speculatively 
minos orthogonality memory model 
need pointer arithmetic control data limited applications 
middleware gnu linker loader ld uses pointer arithmetic relocate shared libraries dynamic linking user space unprivileged context 
moving library functionality kernel space undesirable alternative terms portability security 
non executable pages available bit pentium architectures attackers methods subverting 
furthermore describe attack called need stack frame forging techniques 
interesting related minos handles virtual memory swapping tag bits 
implementation evaluated stores tag bits building linked list tagged pointers page disk reserved portions byte pointer storing pointer head list disk sector header 

minos order execution microprocessor core 
size compatibility settings 
ignored bit loads stores 
discusses implementations virtual swapping tag bits line 
uses software transfer data tags intermediate buffer large hold memory tag bits writes larger buffer disk 
uses special hardware unpacking 
architecture goal minos architecture provide system security negligible performance degradation 
achieve goal describe microarchitecture small investments hardware tag bits minos critical path 
basic level bit word data augmented integrity bit 
results maximum memory overhead neglecting compression techniques paid moore law days 
real cost try address section added complexity processor core 
argue complexity justified security benefits gained high compatibility minos commodity software 
increasing transistor densities decreasing performance gains investments reliability security sense 
shows basic data flow core processor 
bit added common data bus 
data addresses transmitted integrity bit transmitted parallel 
reorder buffer load buffer extra bit tag store integrity bit 
reservation stations integrity bits operand 
integrity result determined applying gate integrity bits operands 
integrity bit operations done parallel normal operations critical path need new speculation mechanisms 
cache modern microprocessor pentium example typically kb optimized access time 
maintain low access time store integrity bit bit word rd bit 
total storage overhead cache size bytes 
chip cache hand large mb optimized hit rate bandwidth 
keep area overhead low layout simple technique parity bits byte integrity bit cache line 
floating point mmx bcd similar extensions ignore integrity bits write back memory low integrity 
control data jump pointers function pointers calculated bcd floating point 
possible exception mmx fast memory copies instructions just preserve integrity bits 
instruction cache trace cache branch target buffer check integrity bits inputs need store integrity bits check 
data low integrity simply allowed instruction cache branch target buffer 
cache processor core area increases negligible compared cache produce estimate increase die area minos looking cache 
intel process store mbits mb transistors 
mb cache extra integrity bits process transistors minos add transistors additional kb 
prescott die area reported contribution extra storage required minos cache entire die area half percent 
die cost model assuming wafers defect penny dollar 
bit microprocessor special addressing modes address gb dram chip 
requires mb store integrity bits outside microprocessor 
propose separate dram chip call integrity bit 
coexist bus controller store integrity information data dram 
dram fills requests data stored integrity bits data bus 
banking strategy mirrors conventional dram chip guaranteed integrity bit ready time conventional data 
bus widened bits 
data bus driven devices dma port assumes high integrity 
hardware support needed minos identical needed soft error rate reduction mechanism proposed 
discusses uses tag bits 
powerpc tag bit bits running microcode programs 
bit linux implementation minos support may possible similar microcode approach 
implementation section describe hardware emulation platform operating system implementation 
hardware emulation emulated minos pentium emulator called proof concept 
performance reasons architectural support necessary real minos system 
software minos emulator achieves instructions second ghz pentium 
emulates full system including booting bios loading kernel hard drive 
dma port extensions floating point mmx bcd sse supported 
floating point bcd instructions ignore integrity inputs outputs low integrity 
single integrity bit added bit word physical memory space 
port dma assumed high integrity 
pentium byte bit word addressable suffices store integrity bit bit word 
compilers align control data bit words performance reasons 
low integrity byte written high integrity bit word high integrity byte written low integrity word entire resulting word low integrity 
applies bit manipulation data 
necessary keep low integrity data going integrity 
misaligned bit writes forced low integrity prevent attackers building arbitrary high integrity bit values striping 
instruction operation applies low water mark integrity policy inputs determine integrity result 
bit immediate loads low integrity processor running special compatibility mode memory load store bit values low water mark integrity policy applied addresses load store 
sun java sdk run minos gave large number false positives running hello world program jit bit immediates generate control data 
added compatibility mode architecture kernel bit immediates high integrity rest policy remains 
security reasons better jit slightly modified compatible minos bit immediate loads set high integrity may possible generate arbitrary high integrity bit values 
attempt run setuid program compatibility mode squash real uid gid similar ptrace 
possible full compatibility mode data high integrity find programs necessary 
string operations pentium memory copy go segment 
give kernel ability mark data low integrity copies process memory space reserved rd bit pentium segment descriptor entry interpreted mean data written segment forced low integrity 
rd bit segment descriptor set integrity bit simply copied 
special segment descriptor string operations causes source destination stride words value copied segment bits integrity information word block 
way kernel copy integrity information entire kb page byte buffer copy integrity information byte buffer integrity bits entire page enable virtual memory swapping 
operating system changes segment descriptors added linux kernel cover linear address space existing segment descriptors flat memory model implemented pentium 
small modifications kernel data enters process memory space minos gate wraps tail turns levels shade dwell 
interrupt traps kernel attempt transfer control flow low integrity data 
ideally control data come original elf binary dynamically linked libraries marked low integrity 
unfortunately gnu ld system call shared objects opting read system call mmap relocate keep library mechanisms separate kernel 
discovered pthreads library creates lightweight processes clone system call passes function pointers call pipes 
lastly legitimate programs plug ins jits implemented normal library code mechanisms 
consequently chose define trust implementation terms long data part system 
minos kernel keeps timestamp called establishment time libraries trusted files established created treated forced low integrity 
sophisticated user friendly definitions trust installation procedures devised concerned architecture 
static binaries created establishment time trusted control flow children marked high integrity executable elf binary mounted executable file sync ed disk 
communication process passes data process sharing memory space forced low integrity go virtual file system inode established modified establishment time inode structure stores information objects filesystem files pipes sockets 
attacker data comes network stay low integrity system goes disk comes back 
need modify filesystem hard drive 
specifically read system call forces data read process low integrity ctime time inode change time modification inode set time establishment time system file descriptor points pipe lightweight processes share memory space 
read system call linux reading files console network pipes sockets just 
impossible superuser change ctime backward time 
ctime kernel keep track inode changes fault tolerance purposes 
exception pipes lightweight processes added compatibility pthreads diminish security lightweight processes share memory space anyway 
concise description linux virtual filesystem available 
argument variables forced low integrity 
system calls force data read low integrity 
reads network socket forced low integrity exception 
remote attacker data enter system low integrity lifted high integrity establishment time requirement data goes virtual file system disk back process 
mmap ed files mapped kernel check done see file meets establishment time re original binary mounted user forced low integrity 
virtual memory swapping linux kernel swaps page puts page swap cache changes page table entries processes page swap entries writes page disk 
process page finds swap cache wait read back disk 
page deleted swap cache processes swap entries get new mapping 
kilobyte block size swap device matches kilobyte page size pentium modified 
reads pages swap device kept asynchronous read speculatively clusters 
swapping mechanisms finely tuned chose method handling tag bits add complexity 
minos enabled kernel writes page disk bytes copies integrity tag bits buffer 
process trades swap entry page mapping receive mapping integrity bits page restored byte buffer ed done lazily request actual read operation remains asynchronous 
performance overhead negligible demonstrate section 
windows implementation installed microsoft windows xp beta version xp called windows whistler iis emulator changed hardware emulation reads network device port low integrity 
secure attacker input network goes disk comes back overwrites control data windows source code track 
virtual memory swapping disabled 
versions windows run jit compatibility mode full time 
experimental methodology important metrics system minos false positive rate effectiveness stopping attacks intended performance overhead 
minos system months various testing exploit analysis encountered false positives twice fixed 
happened freshly compiled program mounted execution flushed disk 
binary program kernel file buffers low integrity marks data 
gcc stress test 
linux web server month compiler 
solution sync newly mounted binary executables disk 
source false positives java just time jit compiler discussed section 
shows amount low integrity data system full run gcc benchmark spec inputs 
just demonstrate monotonic behavior usual criticism biba mark integrity policy observed minos 
data goes integrity stay physical memory die get replaced data 
run full set spec benchmarks statically compiled binaries network dynamic linking interesting cause false positive 
shows amount low integrity data system month apache web server 
graph constitutes instructions system including kernel false positives 
usable system network access remote shell send mail surf web lynx debug programs gdb 
studies secure architectures common assert effectiveness approach performance evaluation numbers benchmarks 
minos chose evaluation method ology similar seen computer security research community 
feel real attacks give insight design decisions 
see reasoning approach consider papers motivate return pointer protection code red example code red code red ii overwrite return pointer function pointer stack 
implementations mechanisms real systems discover certain assumptions hold 
return pointers lifo manner linux example 
implementation centric evaluation methodology uncommon 
software attempt enforce security policy control flow evaluated effectiveness demonstrating defense real exploits 
performance false positive rate tested benchmarks 
intrusion detection system tested known attacks 
protection mechanism format string attacks tested known attacks stopped 
method disrupting binary code injection attacks tested known attacks 
microarchitecture minos designed avoid performance overheads operating system save tag bits virtual memory swapping 
cost extracting replacing bits negligible compared seek time read time hard drive bytes added slab allocator cause performance problems memory memory scarce 
ran spec benchmarks memory interesting completion inputs varying amounts memory 
run full set spec benchmarks megabytes ram 
lock various amounts memory ram benchmark share rest kernel 
benchmarks compiled gcc option 
run ghz pentium mb ram mb swap space physical hard drive root filesystem 
operating system red hat services including network disabled 
extracting replacing integrity bits simulated memcpy ing bytes 
order obtain reproducible results necessary reboot system data points linux changes clustering algorithm time spread load different physical blocks disk 
exploits attacks section describes exploits tested minos actual attacks minos detected stopped 
exploits real linux vulnerabilities red hat chosen high number control data protection problems particular version red hat distribution 
rpc exploit bid remote format string attack nfs locking mechanism overwrites return pointer stack return arbitrary code stack 
traceroute exploit bid local exploit vulnerability free called twice pointer data malloc ed multiple command line arguments flag 
buffer overflow format string vulnerability 
su exploit bid uses vulnerability glibc locale functionality possible link mmap bogus language module library program exploit format string vulnerability 
section elf binaries contains pointers destructors need run program exits victim arbitrary write primitive exploit 
local attack possibly exploited remotely 
remote format string exploit wu ftpd bid basically write arbitrary value arbitrary location 
exploit different vulnerability wu ftpd bid exploits error file functionality manner similar double free exploit traceroute 
challenging remote exploit catch remote attack news server bid news message posted canceled 
buffer overflow exploited data goes filesystem comes back 
created seventh exploit exploits format string vulnerability wu ftpd basically overwrite rename char char global offset table got entry pointer char char procedure linkage table plt entry 
subsequent request rename file executes binary file 
details 
exploits hypothetical linux vulnerabilities created hypothetical attacks local attacks 
designed test setjmp longjmp string integer conversion str int vulnerabilities pointer arithmetic str int virtual function pointers virt environment variables 
exploit standard format string exploit size specifiers see section 
windows exploits actual attacks code red ii worm released just code red worm built entirely different code base 
attacks microsoft iis web server 
buffer overflow caused string form xxxxxx get request ascii characters converted unicode making longer length calculated 
beta version windows xp called whistler catch code red ii 
microsoft sql server installed version attacked germany remote stack buffer overflow vulnerability authentication bid 
vulnerability sql slammer worm exploited 
subsequent attacks sql port machine exploit came different places fairly certain individual attackers instances worm 
vulnerability iis vulnerability code red ii exploited daily emulated machine listen ports typically 
dcom vulnerability bid buffer overflow rpc interface vulnerability bid buffer overflow security component 
exploited blaster worms respectively 
downloaded exploit code vulnerabilities attacked windows xp machine 
versions windows xp server appear vulnerable upnp buffer overflow vulnerability ca 
actual linux attack linux web server attacked south korea minos process exactly way supposed 
analysis done launching gdb attaching stopped process 
attack exploited vulnerability wu ftpd 
exploit exploit vulnerability quite interesting 
fake nop sled lot jumps change alignment way opcodes decoded apparent attempt analysis hard 
results exploit tests exploits tested stopped minos 
integrity addresses bit loads checked code red ii caught 
early project identified ways low integrity data high integrity information flow 
statements table 
exploits attacked minos 
exploit name real vulnerability 
remote 
vulnerability type caught 
rpc remote format string traceroute local multiple free calls su possibly format string wu ftpd remote format string wu ftpd remote heap remote buffer overflow remote wu ftpd format string windows dcom remote buffer overflow windows remote buffer overflow local long jmp buffer str int local buffer overflow local buffer overflow virt local arbitrary pointer local buffer overflow local hypothetical format string attack table 
exploits attacked minos 
attack known exploit 
remote 
vulnerability type caught 
linux wu ftpd remote heap code red ii remote buffer overflow sql server remote buffer overflow give attacker control value high integrity data information flow 
supposed pathological cases case bit data way functions scanf sprintf handle control characters translations strings integer values atoi conversion ascii unicode exploited code red ii 
virtual memory swapping spec benchmarks tested performance minos enabled kernel performance unmodified kernel indistinguishable 
interesting case mcf uses lot memory large working set 
shows cliff amount ram available crosses threshold working set size benchmark 
minos enabled kernel starts thrashing megabytes unmodified kernel extra byte allocation page swap 
easily ameliorated investing ram 
security assessment demonstrated minos stops broad range existing control data attacks address security minos attacks developed subversion minos mind 
useful way think attacks advanced simple buffer overflows developed consider vulnerabilities lead corruption corruptions lead primitives arbitrary write primitives higher level attack techniques 
compare security minos specifically similar architecture different policy current best practices 
estimation current best practices execute permissions pages random placement library routines memory return pointer protection stackguard 
classes control data attacks considered attacker overwrite control data untrusted data undetected 
attacker cause program load store control data wrong place 
attacker cause program load control data right place wrong time 
tags pointers pointers modified controlled set instructions attacker overwrite control data pointers control data securing classes attacks 

virtual memory swapping performance results architecture large address space bits memory need reused securing third kind attack 
secure control data attacks pointer protection enabled protections disabled linux simply programs written linux semantic information distinguish pointers data 
uses strong runtime type checking protect integrity pointers pointers may coerced data types integers 
protect temporal problems programs may unchecked data structures longer lifetime shorter lifetime stack heap programs may redefine new operator 
constraints necessary totally secure programs classes control data attacks 
current best practices disallows execution arbitrary code non executable pages tries thwart return libc attacks protecting integrity return pointers stack putting libraries random locations memory 
unfortunately 
assumed protections default red hat linux installation able hijack control flow ftp server daemon attack named described detail 
takes advantage fact statically compiled binary uses procedure linkage table plt call library functions know mapped 
minos stops kind attack minos protects integrity control data just return pointers stack 
possible security problems foresee minos copying valid control data control data falls second class dangling pointers control data falls third class generating arbitrary high integrity values legitimate control flow falls class 
minos prevents attacks overwrite control data untrusted data 
attacks copy high integrity data control data minos need check integrity addresses bit loads stores done policies 
see infeasible consider example doug lea malloc glibc stores management information heap uses calculate pointers chunk prev size previous chunk size chunk bytes mem user data starts 
malloc usable space bytes size chunk size field divisible bit free store previous chunk 
addresses chunks calculated size pre size integers note violation constraint pointers may coerced integers 
sizes may read directly user input expect low integrity 
means heap pointers low integrity integrity sizes checked checked attacker fact modify heap pointers undetected 
sizes bounds checked supposed consistent size chunk 
heap pointers low integrity control data pointers control data heap low integrity loaded stored pointers 
example control data pointers control data heap virtual function pointers plugin hooks 
create lot false positives 
integrity addresses loads stores control data integrity operands operation checked producing false positives 
policy minos second able 
second policy attempts assuming low integrity values compare operation logical bounds checked safe lifted high integrity 
bit malloc header extracted logical size field bounds check attacker write arbitrary integer size field high integrity 
arbitrary copy primitives appear harder achieve arbitrary write primitives 
possibility overwrite source destination pointers memcpy void void size arguments writable memory 
strcpy char char function manipulates data byte level integrity addresses checked minos 
believe arbitrary copy attacks problem propose sandboxed plt splits pointers critical library functions system got pieces xor bit hash value library symbol 
attacker need just arbitrary copy primitive arbitrary copy xor time 
calls run special sandboxing code check validity 
believe dangling pointers practical exploit minos attacker put arbitrary data location valid control data expected high integrity data practical terms need arbitrary copy primitive 
note arbitrary read primitive arbitrary write primitive trivial example format string vulnerability give attacker arbitrary copy primitive minos data goes filesystem comes back low integrity 
method generating high integrity arbitrary values exploit format string vulnerability format specifiers supplied pointer string characters long controlled increment 
fortunately arbitrary value low integrity minos implementation count characters kept adding bit immediates initially zero integer policy treats bit immediates low integrity 
say minos totally secure control data attacks possible program assert slight modifications library mechanisms key areas secure minos system high degree assurance away primitives arbitrary copies controlled increments constitute code changes centralized locations change memory model expected applications 
research minos catches attacks precise moment control flow hijacked memory layout identical vulnerable system forensic information preserved 
plan investigate collaboration researchers possible detect unknown polymorphic worms way 
linux kernel exploitable integer overflow brk function allowing users get root privileges vu shell 
minos approach extended kernel kinds data 
biba low water mark integrity policy minos allows general defense control data attacks complicated program specific security policies difficult adapt new applications exploits 
results show deployed minos enabled linux windows systems stably provide real services catch actual attacks real time discovering previously unknown attacks 
popularity control data attacks believe minos approach great potential lead secure systems variety domains 
acknowledgments supported nsf itr ccr nsf career award davis fellowship fred chong united states department education summer research award davis gsa crandall 
people discussed project read earlier versions including diana franklin mark john oliver felix wu matt bishop anonymous reviewers 
developers project 
open source ia emulation project home page sourceforge net 
cert www cert org 
minos cs ucdavis edu 
security focus vulnerability notes www securityfocus com 

inferno robert translation 

security www ru eng se cure information system pdf 
ackley palmer 
randomized instruction set emulation disrupt binary code injection attacks 
proceedings th acm conference computer communication security pages 
acm press 
biba 
integrity considerations secure computer systems 
mitre technical report tr apr 

linux kernel 

understanding linux kernel nd 
edition 
reilly sebastopol ca 
cowan barringer beattie hartman 
automatic protection printf format string vulnerabilities 
proc 
th usenix security symposium aug 
cowan beattie johansen wagle 
tm protecting pointers buffer overflow vulnerabilities 
proc 
th usenix security symposium aug 
cowan pu maier walpole beattie wagle zhang hinton 
stack guard automatic adaptive detection prevention buffer overflow attacks 
proc 
th usenix security symposium pages jan 
crandall chong 
security assessment minos architecture 
workshop architectural support security anti virus oct 
fraser 
low water mark integrity protection cots environments 
proceedings ieee symposium security privacy page 
ieee computer society 
intel 
press release march 
jp 
advanced doug lea malloc exploits phrack 
amarasinghe 
secure execution program shepherding 
th usenix security symposium aug 
potkonjak 
enabling trusted software integrity 
proceedings asplos san jose ca 
ko fraser badger 
detecting countering system intrusions software wrappers 
proceedings usenix security conference pages jan 
levy 
capability computer systems 
butterworth heinemann 
lie thekkath mitchell lincoln boneh mitchell horowitz 
architectural support copy tamper resistant software 
proceedings asplos ix pages 
moore shannon brown 
code red study spread victims internet worm 
internet management workshop 
national security agency 
final evaluation report ibm application system 

advanced return lib exploits pax case study phrack 
patterson hennessy 
computer architecture quantitative approach rd 
ed 
morgan kaufmann san mateo 
pollack cox kahn lai 
supporting ada memory management 
proceedings asplos pages 
acm press 
staniford paxson weaver 
internet spare time 
proceedings usenix security symposium pages 
suh clarke van dijk devadas 
aegis architecture tamper evident tamper resistant processing 
proceedings th annual acm international conference supercomputing mar 
suh lee devadas 
secure program execution dynamic information flow tracking 
proceedings asplos xi oct 
trusted computing group 
tcg specification architecture overview 

calder varghese 
hardware binary modification support code pointer protection buffer overflow 
th international symposium microarchitecture 
news 
microsoft stamps xp buffer overflows 
weaver emer mukherjee 
techniques reduce soft error rate high performance microprocessor 
proceedings st annual international symposium computer architecture page 
ieee computer society 
witchel cates :10.1.1.19.4473
mondrian memory protection 
proceedings asplos oct 
yang zhang gao 
fast secure processor inhibiting software piracy tampering 
proceedings th annual ieee acm international symposium microarchitecture page 
ieee computer society 
