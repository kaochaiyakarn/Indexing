software practice experience softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities steve chapin center systems assurance syracuse university syracuse ny summary buffer overflow vulnerabilities widespread security problems 
numerous incidents buffer overflow attacks reported solutions proposed solution complete highly practical 
kind vulnerability called format string overflow popular buffer overflow format string overflow attacks dangerous 
article surveys representative techniques exploiting buffer overflow format string overflow vulnerabilities currently available defensive measures 
describe buffer overflow detection technique range checks referenced buffers run time 
augment executable files type information automatic buffers local variables parameters functions static buffers global variables data bss section maintain sizes allocated heap buffers order detect actual occurrence buffer overflow 
describe simple implementation currently protect vulnerable copy functions library 
key words buffer overflow format string overflow array pointer range checking linux elf 
buffer overflow vulnerability currently serious security problems 
various buffer overflow techniques discovered numerous incidents buffer overflow attacks reported date 
solutions proposed solution completely eliminates buffer overflow vulnerability compatible existing environment performs 
kind vulnerability called format string overflow 
correspondence center systems assurance syracuse university syracuse ny mail ecs syr edu chapin ecs syr edu received may copyright john wiley sons revised august accepted august chapin popular buffer overflow format string overflow attacks dangerous effect buffer overflow attacks 
vulnerability buffer overflow format string overflow due characteristics language 
example array class object represented pointer 
difficult compiler check operation overflow array 
allows functions string format functions 
number arguments known compile time string format function rely format string run time 
characteristics geared convenience performance favored numerous legacy applications 
vulnerabilities eliminated programmers careful programming rigorous checking array bounds 
unrealistic assume programmers follow strict programming practice decrease benefits convenience performance just unrealistic assume programming mistakes 
article presents known techniques exploiting buffer overflow format string overflow vulnerabilities currently available defensive measures 
exploitation techniques buffer overflow format string overflow vulnerabilities studied published focuses particular technique details examples 
discuss collectively considering core ideas buffer overflow format string overflow 
exploitation techniques article means exhaustive impossible representative techniques show important classes attacks 
classification loosely categorize buffer overflow exploitation techniques data structures associated algorithms frequent targets exploits 
data structures code pointers function activation record function pointers programmers introduced implicitly compiler system libraries 
discuss internal data structure dynamic memory allocator malloc code pointer influence code pointers 
defensive techniques buffer overflow divided run time techniques compile time analysis techniques 
run time techniques include array pointer range checking techniques techniques check certain points integrity systems integrity memory space 
compile time analysis techniques analyze source codes detect possible buffer overflow 
discuss advantages disadvantages run time compiletime techniques 
describe buffer overflow detection technique range checks referenced buffers run time 
augment executable files type information automatic buffers local variables parameters functions static buffers global variables data bss section maintain sizes allocated heap buffers order detect actual occurrence buffer overflow 
discussion format string overflow vulnerability follows similarly smaller scale 
examples article assume linux operating system architecture 
copyright john wiley sons softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities void func char string char buffer strcpy buffer string int main int argc char argv func argv return 
simple buffer overflow vulnerability 
calling function 
pushes parameters stack 
pushes return address function prologue called function 
pushes frame pointer 
frame pointer assigned stack pointer value 
stack pointer advanced room local variables function epilogue called function 
stack pointer assigned frame pointer value 
saved frame pointer popped assigned frame pointer 
return address popped assigned instruction counter 
function calling mechanism 

buffer overflow vulnerability exploits buffer overflow vulnerability program exploited overwrite important data adjacent buffer eventually leading changing normal program behavior 
string longer strcpy modifies buffer memory area 
memory area buffer holds important information return address 
overflowing buffer alter return address program flow 
example shows knowledge structure memory space copyright john wiley sons softw 
pract 
exper 
chapin algorithm associated buffer overflow vulnerability change intended program behavior 
buffer overflow exploitation requires 
buffer overflow vulnerability program consists buffers operations overflow 
example buffer strcpy 

knowledge memory structure program algorithms associated 
example layout function activation record stack function calling mechanism 
knowledge memory structure accompanying algorithm offer opportunity alter program behavior buffer overflow vulnerability provides means achieve 
techniques section basically discuss requirements 
categorize buffer overflow exploitation techniques data structures exploits target follows 

function activation record return address saved frame pointer 
function pointers function pointer variables function pointers implicitly system 
internal data structure dynamic memory allocator malloc data structures code pointers malloc 
focus exploiting code pointers order spawn root shell 
data structures primary target cases rarer practice exploits alter code pointers illustrative immediately take control target system 

exploits function activation record 
stack smashing attack popular technique exploiting simple vulnerability vulnerable strcpy 
overflows buffer attack string consists shellcode memory address shellcode copied 
shellcode array character coded assembly instructions performs execve bin sh spawn shell 
memory address address shellcode needs aligned overwrite return address 
result function returns jump shellcode spawn shell 
process root privilege root shell 
illustrates 
local exploitation attack performed small program spawns vulnerable program attack code command line argument environment variable 
remote exploitation attack code delivered channel vulnerable function accepts string 
exploit succeed need know address buffer memory address overwrite return address 
address buffer stack usually unknown ways find guess 
example observe running vulnerable program debugger 
set input similar environment copyright john wiley sons softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities stack grows address grows addr buffer addr buffer shellcode nop return addr saved frame ptr buffer msb lsb argv addr buffer shellcode nop addr buffer shellcode 
stack smashing attack exploits program 
shows stack frame strcpy buffer argv 
assume stack grows address buffer significant byte little endian architecture 
program follow path yield address buffer 
observed value provide starting point guessing right value 
guessing value easier prepending op shellcode small margin error guessing exact address matter 
general successful exploitation may require detailed information target program run time behavior 
information discovered various ways including 

documentation manuals technical reports 
source code 
reading binary file core dump utility programs nm 
operating system facilities proc file system ptrace 
running programs debugger dynamic information return address stack address shared library function observed guessed running program similar environment programs usually follow deterministic algorithms 
example stack grow pattern input program 
program normally maps shared libraries order starting address yielding addresses 
copyright john wiley sons softw 
pract 
exper 
nop chapin return addr saved frame ptr buffer bogus ret addr placeholder shellcode 
frame pointer overwrite exploit showing stack frame attack 
attack code overwrites buffer significant byte saved frame pointer 

frame pointer overwrite technique similar stack smashing attack alters function activation record different way 
fact function locates return address frame pointer function epilogue 
altering frame pointer trick function popping wrong word return address 
directly change frame pointer register alter saved frame pointer stack 
note stack smashing attack alter return address directly change program counter 
illustrates exploit 
buffer overflowed saved frame pointer altered overflowed function returns normally calling function calling function wrong frame pointer 
caller returns pop word choosing program counter example address shellcode 
attack code consists shellcode bogus return address address shellcode byte alters significant byte saved frame pointer 
need change saved frame pointer small margin altering significant byte suffices 
example buffer local variable adjacent saved frame pointer 
assuming little endian byte ordering significant byte saved frame pointer byte buffer 
vulnerability exploitable 
stack smashing attack need know exact address buffer prepending op shellcode 
exploit need know address placeholder implies need know exact address buffer 
function wrong frame pointer locate local variables correctly may crash exploitation takes effect 
note instability inherent exploits usually corrupt state process overflowing buffers 
copyright john wiley sons softw 
pract 
exper 
lsb buffer overflow format string overflow vulnerabilities void main int argc char argv char buf char buf buf argv buf argv func buf void func char char buf sprintf buf 
vulnerable program non terminated memory space exploit 
buf buf overflowed sprintf size buf bigger size buf 
buf null terminated buf overflowed maximum size string size buf sum size buf buf buf null terminated 
stack smashing attack example overwrites buffer return address 

non terminated adjacent memory spaces buffer overflow attacks exploit unsafe string functions library strcpy 
safe subset string functions limits copy operation number programmers 
functions definitely safer give false sense security carefully 
technique section shows exploit 
example unsafe way 
problem null terminate output string source string longer maximum size 
main buf buf overflowed null terminated source strings longer limits func takes buf source string buf smaller buf users think buf safe long buf overflowed 
true buf null terminated 

return libc return libc exploitation techniques alter return address control directed library function shellcode 
shows example copyright john wiley sons softw 
pract 
exper 
chapin return addr addr system saved frame ptr buffer overflow bin sh placeholder padding overflow right returning system stack pointer parameter return addr right returning system system treats stack way 
return libc example exploits program 
exploits vulnerable program spawn shell overwriting return address address system 
attack code includes address system parameter system pointer string bin sh 
exploit needs know exact address string bin sh address system 
string bin sh supplied command line argument environment variable 
cases library linked dynamically finding address system requires finding address space library mapped find offset system library 
address library mapped proc directory running program debugger 
offset system library read library object file 
scheme valid shared libraries mapped random addresses 
attack depends string functions strcpy delivering attack code attack code contain null byte 
fact defensive techniques map shared libraries addresses contain null bytes 
return effective small modification observation 
elf program contains procedure linkage table plt call shared library functions 
calling shared library function corresponding plt entry real address function real address known compile time 
shared libraries plt fixed location chance having null bytes 
plt entry real address bypass protection 
requirement system function shared library wish direct control called program entry plt 
copyright john wiley sons softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities saved frame ptr buffer bin sh addr system return addr addr setuid padding stack pointer param system param setuid ret addr setuid overflow right returning right returning setuid setuid treats stack way 
return libc example chains functions row setuid called regain root privilege system called spawn shell 
saved frame ptr buffer shellcode data segment data segment return addr addr strcpy padding stack pointer param strcpy param strcpy ret addr strcpy 
return libc example shellcode 
returned strcpy strcpy copies shellcode data segment returns data segment 
possible call functions row supplying valid address return address placeholder 
function chaining illustrated setuid system called row 
library function chained shellcode 
exploit strcpy copies shellcode data segment returns shellcode 
shellcode executed non stack area technique bypasses non executable stack patch project 
copyright john wiley sons softw 
pract 
exper 
chapin function epilogue frame pointer add esp ret return addr saved frame ptr buffer stack pointer param func addr epilogue addr func padding param func param func addr epilogue addr func padding bytes available parameters func 
stack pointer lifting method 
instruction function epilogue moves stack pointer second instruction return 
program returns func return address overwritten 
stack pointer right program returns func func returns epilogue add instruction epilogue return instruction epilogue returned func 
generally chaining multiple functions way limited due difficulty placing return addresses parameters 
example calling second function possible functions need parameters system crash returns return address placeholder occupied parameter setuid 
methods show chain multiple functions limitation moving stack pointer accommodate parameters time function chain called 
method stack pointer lifting method exploits function epilogue frame pointer program compiled optimization flag turned 
function epilogue frame pointer 
pops local variables increasing stack pointer total size local variables 
return address popped idea function returns epilogue returning function chain order lift stack pointer skip parameters 
illustrates 
copyright john wiley sons softw 
pract 
exper 
function epilogue frame pointer leave ret buffer overflow format string overflow vulnerabilities return addr saved frame ptr buffer addr epilogue address func fake frame ptr param func param func addr epilogue addr func fake frame ptr addr epilogue fake frame ptr padding points points rtn pop lift rtn rtn pop pop lift rtn lift pop lift stack pointer value right named operation addr epilogue address func fake frame ptr param func param func addr epilogue addr func fake frame ptr addr epilogue fake frame ptr padding pop pop frame pointer 
frame faking method 
instruction function epilogue leave assigns stack pointer frame pointer value effectively lifting stack pointer restores previous frame pointer stack 
lifting stack pointer popping frame pointer named lift pop diagram 
second instruction return named rtn 
corrupted function pops frame pointer returns epilogue epilogue lifts stack pointer pops frame pointer returns func func begins execution pushing frame pointer 
lifts stack pointer pops frame pointer returns epilogue epilogue lifts stack pointer pops frame pointer returns func 
second method frame faking method exploits function epilogue uses frame pointer program compiled optimization 
function epilogue frame pointer 
stack pointer assigned current frame pointer value 
previous frame pointer popped assigned frame pointer 
return address popped stack pointer assigned frame pointer value changing frame pointer lift stack pointer 
method function returns epilogue function 
illustrates 

exploits function pointers discuss exploitation techniques target function pointers return address 
function pointers convenient low level constructs programs 
implicitly compiler procedure linkage table copyright john wiley sons softw 
pract 
exper 
chapin char buffer int char null void main int argc char argv strcpy buffer argv void argv 
vulnerable function pointer initialized data section 
elf binaries virtual function pointer programs 
function pointers memory space just stack opens possibilities exploitation 

user function pointers heap data section section discusses technique overflows non stack area 
shows program allocates buffer function pointer data section 
program vulnerable strcpy overflow buffer alter function pointer 
function pointer overwritten code pointer address shellcode system 
attack takes effect function pointer called 
example corrupted function called right attack code delivered strcpy immediate 
function pointer global variable corrupted inside function called 
contrast exploits target return address function scope 

section technique exploits function pointers created implicitly gnu compiler gcc provides number language extensions include function attributes specify special attributes making function declarations 
example declare destructor function follows static void void attribute destructor function declared destructor automatically called main completed exit called gcc implements storing pointers destructor functions section walked process exits 
exploit overflow buffer overwrite entry section code pointer section exists destructor functions declared programmer 
shows vulnerable program technique shows sections executable file 
copyright john wiley sons softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities static char buffer int main int argc char argv strcpy buffer argv return 
vulnerable program exploit 
overflow buffer placed data section overwrite entry section 
supply argv bytes destructor pointer stored bytes section padding characters address shellcode 
idx name size ma lma 

data 
got 
bss alloc 

sections vulnerable program 
note data section precedes section bytes got section bytes bss uninitialized static data section follows got sections variables bss overflow got sections 
apparent buffer data section adjacent section overflow section 

global offset table exit handler functions setjmp longjmp buffer shows section got section holds global offset table stores addresses need resolved run time addresses objects shared libraries library 
particular global offset table contains addresses shared library functions 
mentioned section programs call procedure linkage table entry real function shared library 
entry procedure linkage table jump instruction corresponding global offset table entry holds real address shared library function 
clear got section vulnerable copyright john wiley sons softw 
pract 
exper 
chapin static char buffer int main int argc char argv strcpy buf argv printf buf return 
vulnerable program got exploit 
overflow buffer data section overwrite printf entry got 
specifically supply argv bytes padding characters address shellcode 
section 
destructor functions functions got section called automatically 
order attack take effect corrupted entry got called program overflow 
example exploit vulnerable program overflowing buffer data section overwrite got entry printf called strcpy 
destructor functions programmers register exit handler functions library function 
exit handler functions automatically called exit called main returns implemented similarly destructor functions table function pointers maintained 
table pointers exit handler functions vulnerable section got section 
vulnerable program may exploited table pointers located far buffer 
table pointers exit handler functions library object library usually mapped address space far away reached directly buffer data section library statically linked 
discuss exploit section discuss overwriting data indirectly pointers 
setjmp longjmp uses buffer jmp buf save register values performing nonlocal goto 
jmp buf saves program counter exploit overflowing jmp buf overwriting saved program counter example address shellcode 
exploit take effect longjmp called overwritten jmp buf 

virtual function pointer technique exploits table function pointers pointer table vtable respectively created implicitly compiler 
vtable implement virtual functions programs 
pointers virtual functions defined class stored vtable 
object instantiated class contains pointer vtable calls virtual functions 
example call virtual function pointer third entry vtable compiled code 
illustrates 
copyright john wiley sons softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities object variables addr virtual func addr virtual func 
conceptual view allocated object vtable corresponding class 
buffer shellcode 

example virtual function pointer exploit 
object overflowed bogus vtable shellcode pointer overwrites 
call exploit overflows variable object order alter point supplied bogus vtable 
bogus vtable contains pointers shellcode virtual function called shellcode executed 

exploits malloc internal data structure section discusses vulnerability dynamic memory allocator gnu library doug lea malloc memory blocks called chunks allocated deallocated dynamically malloc free managed linked lists 
memory block carries management data size pointers chunks typical linked list data structure 
vulnerability user data management data adjacent chunk 
comparable vulnerability stack local variables return address adjacent 
just alter return address overflowing stack variable alter management data overflowing heap variable 
referred problem problem storing management information band 
return address management data code pointers altering directly change program control 
exploit management data ultimately change code pointers 
copyright john wiley sons softw 
pract 
exper 
chapin user data bk fd size prev size user data bk fd size prev size chunk addr returned user 
memory block chunk managed malloc 
shows memory block includes internal data structure size chunk size adjacent chunk forward pointer backward pointer chunks 
free chunks managed doubly linked lists called bins contains chunks certain size range 
free chunk taken bin macro unlink called adjust forward backward pointers neighboring chunks 
free chunk placed bin macro called locate correct bin locate neighboring chunks adjust forward backward pointers neighbors 
examples exploit unlink macro 

unlink exploit unlink macro exploit shown 
idea fd bk field free chunk altered unlink called code pointer overwritten address shellcode 
exploit take effect corrupted code pointer called 
vulnerable program example calls free chunk physically adjacent corrupted chunk free turn calls unlink order merge bigger free chunk free chunk 
copyright john wiley sons softw 
pract 
exper 
chunk buffer overflow format string overflow vulnerabilities define unlink bk fd bk bk fd fd fd bk bk bk fd fd corrupted chunk shellcode code pointer bk fd size prev size shellcode bk fd fd shellcode bk bk code pointer bk fd size prev size 
unlink macro exploit 
fd field free chunk altered point code pointer minus bk field altered point shellcode 
note exploit word shellcode overwritten 
instruction shellcode jump overwritten word 

exploit shows macro exploit 
idea alter fd field free chunk point fake chunk called place free chunk free list code pointer overwritten vulnerable program example calls free size range corrupted free chunk addition need able alter word example jump instruction shellcode corrupted code pointer overwritten 
indirect alteration pointer section discuss techniques exploit pointers overwrite indirectly code pointers discussed earlier 
exploit need able overwrite pointer copyright john wiley sons softw 
pract 
exper 
fd fd chapin fake chunk fd code pointer bk fd size prev size fd fd fd define idx bk fd max size goes locate bin right size bin contain corrupted free chunk fd bk mark idx fd bk fd fd fd fd bk fd bk bk bk fd fd fd bk bk fd code pointer bk fd size prev size bk fd bk bk bk bk fd size prev size bk fd 
macro exploit 
fd field free chunk altered point fake chunk loop exits fd points fake chunk 
note bk field fake chunk points code pointer altered 
exploit size fake chunk larger size loop 
copyright john wiley sons softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities void char argv char char buffer strcpy buffer argv strcpy argv 
program vulnerable indirect return address exploit indirect exit handler exploit 
overwrite code pointer pointer 
vulnerability hard find real programs 
hand vulnerability subtle harder discover 
memory space target process vulnerable alter memory area far overflowed buffer 

altering return address indirectly exploit similar stack smashing attack overwrites return address indirectly pointer 
exploit need copy operations vulnerable program 
illustrates exploit overwrites return address stackguard canary word detected stackguard 

exploiting exit handler functions indirectly noted section pointers exit handler functions located far away altered directly 
program exploit pointers exit handler functions 
indirect return address exploit pointer altered point exit handler table return address 
exploit alter return address stackguard detect 

exploiting global offset table indirectly global offset table overwritten indirectly exploiting vulnerable program vulnerable printf 
overwrite got entry printf address system printf print string called system print string called 
exploit need create shell script file named print current working directory performs actual attack 
rest string string passed program arguments script file harm copyright john wiley sons softw 
pract 
exper 
chapin shellcode shellcode shellcode return addr canary saved frame ptr buffer strcpy return addr canary saved frame ptr padding shellcode canary saved frame ptr return addr return addr padding strcpy buffer argv strcpy argv 
indirect return address exploit program 
strcpy overflows buffer overwrites pointer address return address second strcpy overwrites return address address shellcode argv points attack code thick round box argv points string address shellcode 
void char argv char char buffer strcpy buffer argv strcpy argv printf print string 
program vulnerable indirect got exploits 
contains special shell character 
exploit alter return address stackguard detect 
note exploit require executable stack heap 
uses address plt entry system real address system bypass project address system contain zero bytes pax address system unknown advance due random mapping shared libraries 
alternatively exploit illustrated alters got entry printf points shellcode 
exploit alter return address bypasses copyright john wiley sons softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities got return addr saved frame ptr buffer system printf system printf return addr saved frame ptr padding system printf system printf return addr saved frame ptr got printf got printf padding system printf system system strcpy strcpy buffer argv strcpy argv 
global offset table entry printf altered indirectly points system argv points attack code thick round box argv points address system 
stackguard 
bypasses non executable stack project shellcode copied got section 

defensive techniques buffer overflow 
run time detection systems 
stackguard stack smashing attack overwrites buffer return address 
stackguard gnu compiler extension inserts canary word return address buffer attempt alter return address detected inspecting canary word returning function 
programs need recompiled stackguard order protected 

gnu compiler extension protects return address 
function called copies away return address non area restores return address returning function 
return address copyright john wiley sons softw 
pract 
exper 
chapin got return addr saved frame ptr buffer printf strcpy return addr saved frame ptr got printf shellcode printf strcpy buffer argv return addr saved frame ptr got printf shellcode got printf got printf shellcode got printf strcpy argv 
global offset table entry printf altered indirectly points shellcode argv argv point attack code thick round box 
stack altered effect original return address remembered 
stackguard programs need recompiled 

implementation vulnerable copy functions library strcpy 
addition original functionality functions imposes limit involved copy operations overwrite return address 
limit determined notion buffer extend stack frame 
maximum size buffer distance address buffer corresponding frame pointer 
implemented shared library preloaded intercept library function calls 
programs protected recompilation statically linked library compiled run frame pointer needs walk stack saved frame pointers stack 
protects library functions stackguard protect functions 

linux kernel patch project stack smashing attack injects attack code stack executed function returns 
core features linux kernel patch project stack segment non executable 
feature map address space shared libraries addresses contain zero bytes copyright john wiley sons softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities order defend return libc attacks 
address function delivered null terminated string function strcpy zero byte middle function address terminate copying 
impose performance penalty require program recompilation kernel 
occasions require stack executable include nested functions language extension gnu compiler linux signal handler emulated linux kernel patch 
programs require executable stack run individually included utility program 

pax pax page protection mechanism marks data pages non executable 
linux kernel patch project pax protects heap stack 
execution permission bit pages processor pax overloads supervisor user bit pages augments page fault handler distinguish page faults due attempts execute code data pages 
result imposes run time overhead due extra page faults 
pax available linux kernel patch 
project pax completely transparent existing programs programs require heap stack executable 
example interpreter java cache machine instructions heap execute performance 
pax map loaded library random location address space order defend return libc exploits address library function known advance 
systems provide non executable stack heap linux 
share disadvantage project pax programs requiring executable stack heap run transparently 

range checking systems advantage array bounds checking approach completely eliminates buffer overflow vulnerability 
expensive solution particularly pointer array intensive programs pointer array operation checked 
may suitable production system 
pointer array access checking technique austin source source translator transforms pointers extended pointer representation called safe pointer inserts access checks pointer array dereferences 
safe pointer contains fields base address size scope pointer 
fields access checks determine pointer valid range 
changes pointer representation compatible existing programs 
array bounds pointer checking technique jones kelly extension gnu compiler imposes access check pointers arrays 
changing pointer representation maintains table valid storage objects hold information base address size information concerning heap variables entered table modified malloc deleted table modified copyright john wiley sons softw 
pract 
exper 
chapin free 
information stack variables entered deleted table constructor destructor function inserted inside function definition point stack variables enter leave scope 
access check done substituting pointer array operations functions perform bounds checks table addition original operation 
native pointers technique compatible existing programs 
purify hastings joyce commercially available run time memory access error checking tool 
advantage purify inserts access checking code object code requiring source code access 
checks memory access memory allocation deallocation function calls maintains states memory blocks allocated initialized catch temporal errors dangling pointers 
array bounds checked marking ends memory block returned malloc 
purify lacks type scope information available source level detect errors buffer overflow malloc memory block 

static analysis techniques static analysis techniques advantages run time techniques 
incur run time overhead narrow vulnerabilities specific source program analyzed yielding secure program deployed 
pure static analysis produce false alarms due lack run time information 
example gets reads input string stdin size string known compile time 
case warning issued possible buffer overflow 
fact legitimate copy operations accept strings unknown sources command line argument channel flagged possible buffer overflows vulnerable 
action vulnerabilities identified open attack 
integer range analysis wagner technique detects possible buffer overflow vulnerable library functions 
string buffer modeled pair integer ranges lower bound upper bound allocated size current length 
set integer constraints predefined set string operations character array declaration vulnerable library functions assignment statements involving 
integer constraints technique analyzes source code checking string buffer find inferred allocated size large inferred maximum length 
annotation assisted static analysis technique evans lclint uses semantic comments called annotations provided programmers detect possible buffer overflow 
example annotations strcpy contain assertion destination buffer allocated hold characters readable source buffer 
technique protects annotated functions integer range analysis protects library functions 
requires programmers provide annotations 
copyright john wiley sons softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities 
combined static run time techniques obvious advantage approach access run time information contextual information specific source program analyzed static analysis 
solutions approach perform static analysis source programs insert run time checks safety determined compiletime information 
compared range checking systems approach minimizes run time overhead eliminating unnecessary run time checks 
ccured necula translates source program ccured program 
extends pointers ccured pointer types safe sequence dynamic constraint type inference algorithm inserts run time checks class pointers operations static analysis determine safety 
cyclone jim safe dialect extends pointer type efficient run time check performed depending pointers null pointer indicates null pointer check unnecessary fat pointer carries bounds information enable bounds checks 
enhancements cyclone include prevention dangling pointers programmer supplied annotations region analysis scoped dynamic memory management region frees region block automatically free protecting functions tagged union stacked parameters printf carry type information 
disadvantage programs ported cyclone 

intrusion detection techniques system call trace anomaly detection techniques compare sequence system calls executed program predefined normal sequence system calls introduced forrest 
techniques assumption serious attack underlying operating system facilities accessed system calls 
buffer overflow attacks discussed spawn process executing exec system system call deviate normal sequence system calls 
approach highly effective detecting attacks 
detect various kinds intrusions trojan horses just buffer overflow attacks 
model normal program behavior sequence system calls ignoring aspects program behavior 
simplified model detect intrusions bypassed example mimicry attacks attack behave predefined model sequence system calls executed attack deviate model 
techniques introduced different way define normal behavior affects accuracy run time overhead 
forrest define normal program behavior set fixed length system call sequences referred grams sekar built observed sequence system calls learning stage 
sekar define normal program behavior finite state automata built observed sequence system calls learning stage 
finite state automata number advantages gram include copyright john wiley sons softw 
pract 
exper 
chapin 
fsa provides compact way model program grams quite large 

matching fsa faster looking may large grams 

fsa accurate 
example invalid subsequence system calls regarded normal trigrams include 
fsa problems 

accuracy grams depends size 
small valid system call sequences 
big inclusive effective detecting anomalies 
fsa 
learning fsa sequence system calls difficult 
example difficult find sequence system calls occurrences state 
sekar obtain necessary state information program counter addition system calls 
occurrences state associated program counter 
wagner dean provide ways define normal program behavior static analysis observing sequence system calls learning stage 
static analysis yield accurate model normal program behavior program learning static analysis uncover possible paths program program learning program paths rarely executed 
methods defining normal program behavior 
trivial model set system calls called program 
method accurate ignores sequencing information system calls 
inclusive effective set includes system calls method scale large programs 

callgraph model non deterministic finite automaton built control flow graph program 
fsa sekar built static analysis produce false alarms 
callgraph model imprecise express calling context term horwitz function calls 
example function returned return calling function say 
callgraph treats functions call return points include impossible paths exploited 

stack model non deterministic push automaton expresses function calls system calls program 
approach solves calling context problem 
matching expensive system call multiple choices transition state input 
naively listing possible transitions list grow exponentially 

digraph model digram method 

lightweight range checking system describe solution range checks referenced buffers run time 
small extension gnu compiler augments executable file data structure copyright john wiley sons softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities function array variable arrays start addr addr ptr offset 
type table consists function array variable arrays 
describes type information automatic buffers local variables parameters functions static buffers global variables data bss section 
data structure called type table looked run time 
provide wrapper functions vulnerable copy functions library strcpy look type table calling real functions 
sizes heap buffers maintained separate table intercepting malloc free 
type table keeps information functions automatic static variables illustrated 
look type table find size automatic buffer follows 
locate stack frame contains buffer chasing saved frame pointers stack 

look type table function allocated buffer return address stack frame key 

look type table buffer pointer function entry frame pointer offset variable entry address buffer 
local type table constructor function appended object file global type table process built run time 
modified compilation process appending constructor function illustrated 
main reason constructor function include dynamically linked object files 
advantages approach 
compilation transparent makefile source distribution 
type table appended object files compatible native object files 
type table built run time statically dynamically linked objects protected 
important approach insensitive attack chosen detects actual occurrences buffer overflows characteristic range checking systems defensive techniques bypassed discussed section 
copyright john wiley sons softw 
pract 
exper 
size 
chapin src src preprocess cpp compile cc src ctor src ctor obj ctor obj ctor obj ctor type table ptr shared lib table table table obj ctor obj ctor obj ctor process 
executable file process 
src cc wrapper parse statements compile assemble static void ctor attribute constructor local table tab append global table global ctor tab 
dashed line compilation stage cc gcc intercepted preprocessed source file precompiled debugging option turned 
debugging statements resulting assembly file parsed produce constructor function 
constructor function right attributed runs main gcc extension language 
copyright john wiley sons softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities approach lightweight check vulnerable copy functions library 
complete range checking systems section highly effective efficient detection security relevant buffer overflows 
run time overhead incurred wrapper function high particularly length input string short example strcpy character string input yielded overhead 
overhead real world programs negligible example test run original program took minutes seconds type table appended took minutes seconds overhead 
programs called wrapped library functions times 

format string overflow vulnerability string format functions library take variable number arguments format string required 
format string contain types data printable characters format directive characters 
access rest parameters calling function pushed stack string format function parses format string interprets format directives read 
example printf parses format string format retrieves parameters stack string pointer integer addition printing string format 
number types parameters pushed stack match directives format string 
number directives number parameters string format function underflow stack activation record 
number directives exceed number parameters overflow stack 
wrong directive corresponding parameter string format function misinterpret parameter 
users control format string exploit behavior string format functions alter memory space process printf shown safe format string static 
printf vulnerable format string supplied users 
format string overflow attacks similar buffer overflow attacks alter memory space execute arbitrary code different kind attack exploits vulnerability functions string format functions 

format string overflow exploitation techniques show exploit format string overflow vulnerability 

viewing memory printf prints values consecutive words stack digit padded hexadecimal numbers 
walk stack way view contents stack 
printf copyright john wiley sons softw 
pract 
exper 
chapin format format string ptr return addr saved frame ptr local variables 
activation record printf format parameters format string pointer string pointer integer 
format function uses internal stack pointer access parameters stack encounters directives format string 
void char user printf user 
vulnerable function user supplied user format string 
printf expecting printable characters 
safe called printf user 

overwriting word memory directive writes integer value number characters written format function far location pointed corresponding parameter 
printf writes small integer value 
pop internal stack pointer points format string processed assuming format string stored stack prior function 
illustrates 
printf printf writes characters characters 
control number characters written value write minimum field width specifier copyright john wiley sons softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities internal stack ptr processing internal stack ptr msb lsb format string ptr return addr saved frame ptr local variables 
writing integer value arbitrary memory location 
value specifier large 
implementations library handle arbitrarily large value width specifier 

overflowing buffer minimum field width specifier similar stack smashing attack overflows buffer overwrites return address address code pointer 
overflows buffer minimum field width specifier format directive 
function overflowed parameter user due stack smashing attack exploit program 
format string sprintf interpreted copied 
example format string content result printing characters due minimum field width specifier effect overflows 
shows exploit overflows overwrites return address address shellcode 
copyright john wiley sons softw 
pract 
exper 
chapin user void func char user char char user sprintf shellcode nop bf ff return addr saved frame ptr shellcode nop bf ff return addr saved frame ptr shellcode nop bf ff shellcode nop bf ff shellcode nop bf ff integer value characters shellcode nop bf ff user sprintf 
program vulnerable minimum field width specifier exploit 

overwriting code pointer format directive interpreted mentioned write arbitrarily large integer value minimum field width specifier exploiting directive 
write arbitrary value fits byte large 
write arbitrary integer value write byte time significant byte significant 
example write writing 
illustrates 
note writing times string format function number characters written far strictly increasing value write 
copyright john wiley sons softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities printf int foo int foo int foo int foo msb lsb foo foo foo foo 
stage word overwrite 
bytes written write directive inner square box 
writes characters stdout writes hexadecimal foo 
parameter integer dummy parameter value unimportant 
parameter foo address want overwrite 
write advance address byte 
second writes characters stdout total characters far 
writes hexadecimal foo 
overcome minor modification write significant byte important 
example write writing 
bytes significant overwritten write 
shows attack code overwrites code pointer stage overwrite 

defensive techniques format string overflow 
run time detection systems 
exploits previous section show serious format string attack needs walk stack get attack code usually format string attackers control 
order usually necessary directives format string number parameters pushed stack 
extension gnu library provides argument counting string format functions 
programs need recompiled modification 
calls string format functions source code substituted safe functions copyright john wiley sons softw 
pract 
exper 
chapin pad write pairs dummy addr pairs stack pop msb lsb return addr integer return addr integer return addr integer return addr integer 
format string ptr return addr saved frame ptr local variables printf read characters number characters written stdout internal stack pointer return addr integer return addr integer return addr integer return addr integer 
format string ptr return addr saved frame ptr local variables reading int addr pairs characters written stdout return addr integer return addr integer return addr integer return addr integer 
format string ptr saved frame ptr local variables processing pad write pairs 
pure format string overflow exploit 
stack popping directives move internal stack pointer points dummy integer address pairs 
printf reaches pad write code pairs overwrites address specified dummy address pairs internal stack pointer pointing dummy address pair 
overwrites return address example 
copyright john wiley sons softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities provides macro feature gnu preprocessor macro accepts variable number arguments function 
example printf expanded macro protected printf pretty function pretty function error reporting extra parameter actual number parameters format function counting format string 
safe format functions verify number directives format string exceed number actual parameters 
protects string format functions library protect user written format functions format functions case possible find actual number parameters compile time 

implementation safe subset library format functions 
safe format functions check format string format string writable segment contains directives regarded attack 
implemented shared library preloaded intercept vulnerable format functions library programs need recompiled 
downside built heuristics generate false alarms legitimate format string writable segment directives 
ineffective programs linked library statically 

checks directives checks destination pointer points return address saved frame pointer stack 
protect 
protect programs statically linked library compiled run frame pointer 

static analysis technique 
static analysis type qualifiers static analysis technique shankar extends type system extra type qualifiers tainted untainted 
programmers specify untrusted objects tainted trusted ones untainted 
declarations denote return value getchar trusted command line arguments program 
hand format string printf come trusted source 
tainted int getchar int main int argc tainted char argv int printf untainted const char fmt copyright john wiley sons softw 
pract 
exper 
chapin untainted object assigned tainted object vice versa 
types annotated tainted untainted technique 
small number key objects annotated types expressions inferred annotated objects 
technique requires programmers efforts way familiar 

variety techniques exploit buffer overflow format string overflow vulnerabilities change normal program flow altering code pointers 
code pointers include return address virtual function pointer setjmp longjmp buffer function pointer variables tables function pointers global offset table destructor function table exit handler table 
code pointers altered directly overflowing buffers indirectly altering data structures function activation record malloc internal data pointer variables 
saw format string overflow attacks dangerous buffer overflow attacks 
code pointers exploited buffer overflow attacks exploited format string overflow attacks 
stressed techniques ways exploit buffer overflow format string overflow vulnerabilities tandem yield complicated attacks 
code pointers data structures named article just real world programs 
code pointers targets 
generally speaking objects influence meet purpose targets 
example target file name pointer want read file 
attack single step situation allows 
example read target process memory format string overflow attack subsequently perform actual attack buffer overflow attack knowledge memory space 
various kinds defensive techniques buffer overflow attacks discussed 
range checking systems completely eliminate buffer overflow vulnerability slowest particularly pointer array intensive programs 
run time systems stackguard focus behavior known attacks enables perform checking efficiently 
faster range checking systems attacks detected 
pure static analysis techniques incur run time overhead 
compile time information generate false alarms 
characteristic static analysis techniques uncover contextual information source program analysis 
combined static run time techniques take advantage static run time techniques 
described buffer overflow detection technique range checks referenced buffers run time 
sum discussion buffer overflow format string overflow exploitation reveals complex defend vulnerabilities 
defensive technique benefit combined static run time approach sound complete defense 
think solution building block direction 
copyright john wiley sons softw 
pract 
exper 
buffer overflow format string overflow vulnerabilities 
aleph 
smashing stack fun profit 
phrack 

anonymous 
free 
phrack 

austin tm breach se sohi gs 
efficient detection pointer array access errors 
acm sigplan conference programming language design implementation acm orlando fl june 

singh tsai transparent run time defense stack smashing attacks 
proceedings usenix annual technical conference usenix san jose ca june 

memory bugs specific proof concept statically linked binaries heap overflows 
community com heap txt 

dp understanding linux kernel reilly associates sebastopol ca 

bugtraq mailing list 
www securityfocus com archive 

kil 
bypassing stackguard 
phrack 

cert coordination center 
www cert org 

conover security team 
heap overflows 
www org files articles txt january 

cowan pu maier hinton walpole beattie wagle zhang stackguard automatic adaptive detection prevention buffer overflow attacks 
proceedings th usenix security symposium usenix san antonio tx january 

cowan barringer beattie hartman automatic protection printf format string vulnerabilities 
proceedings th usenix security symposium usenix washington august 
cowan wagle pu beattie walpole buffer overflows attacks defenses vulnerability decade 
proceedings darpa information survivability conference exposition hilton head sc january 

evans guttag horning tan ym 
lclint tool specifications check code 
sigsoft symposium foundations software engineering acm december 

forrest hofmeyr sa somayaji longstaff ta 
sense self unix processes 
proceedings ieee symposium security privacy ieee oakland ca may 

hastings joyce purify fast detection memory leaks access errors 
proceedings winter usenix conference usenix 

horwitz reps binkley interprocedural slicing dependence graphs 
acm transactions programming languages systems january 

jim morrisett grossman hicks cheney wang cyclone safe dialect usenix annual technical conference usenix monterey ca june 

jones kelly 
backwards compatible bounds checking arrays pointers programs 
proceedings third international workshop automatic debugging sweden may 

object believed embody magical powers 
www net downloads papers howto txt 


frame pointer overwrite 
phrack 


linux pl 

evans statically detecting buffer overflow vulnerabilities 
proceedings th usenix security symposium usenix washington august 
chapin sj 
type assisted dynamic buffer overflow detection 
proceedings th usenix security symposium usenix san francisco ca august 

box org software html 

mudge 
write buffer overflows 
pht com advisories html 
necula gc weimer ccured type safe retrofitting legacy code 
ninth acm symposium principles programming languages acm portland january 


advanced return lib exploits pax case study 
phrack 
copyright john wiley sons softw 
pract 
exper 
chapin 
pax 
https net 

overwriting section 
www net downloads papers txt 


smashing 
phrack 


www com software 

scut team 
exploiting format string vulnerabilities 
www team net releases tar gz september 
sekar fast automaton method detecting anomalous program behaviors 
proceedings ieee symposium security privacy ieee oakland ca may 

shankar talwar foster js wagner detecting format string vulnerabilities type qualifiers 
proceedings th usenix security symposium usenix washington august 

solar designer 
non executable stack patch 
www com linux 

solar designer 
getting non executable stack fix 
bugtraq mailing list www securityfocus com archive august 


www com sk 

stallman rm 
porting gnu cc version 
free software foundation boston ma 

analysis format string bugs 
tripod com format bug analysis pdf february 

tis 
executable linkable format version 
ftp download intel com design tis elf zip 


advantage non terminated adjacent memory spaces 
phrack 

wagner foster js brewer ea aiken step automated detection buffer overrun vulnerabilities 
network distributed system security symposium san diego ca february 

wagner dean intrusion detection static analysis 
proceedings ieee symposium security privacy ieee oakland ca may 

defeating solar designer non executable stack patch 
bugtraq mailing list www securityfocus com archive 
copyright john wiley sons softw 
pract 
exper 

