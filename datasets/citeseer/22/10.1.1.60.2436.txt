learning static parallel portfolios algorithms marek cs umass edu shlomo zilberstein shlomo cs umass edu department computer science university massachusetts amherst ma approach improving performance combinatorial optimization algorithms generating optimal parallel portfolio algorithms ppa 
ppa collection diverse algorithms solving single problem running concurrently single processor solution produced 
performance portfolio may controlled assigning different shares processor time algorithm 
method finding static ppa share processor time allocated algorithm fixed 
schedule shown optimal respect training set instances 
draw bounds performance ppa random instances evaluate performance empirically collection state art sat algorithms 
results show significant performance gains factor fastest individual algorithm realistic setting 

complex problems single algorithm superior instances 
satisfiability sat example problem algorithms developed single algorithm dominates performance 
objective leverage collection algorithms produce method outperforms single algorithm collection 
illustrate motivation depicts relative performance sat algorithms simon 
obvious algorithms outperforms significant number instances 
performance difference varies seconds time bound original data set solving instance 
propose combination algorithms takes advantage fact 
assume function depicts algorithm performance performance profile gather necessary performance information test set 
instances number sat instances various difference runtimes algorithms 
runtimes seconds denoted zchaff 
parallel portfolio algorithms ppa collection algorithms solving problem 
problem instance algorithms launched execute interleaved manner single processor 
practice computational resources may act bottlenecks processor time memory space communication throughput 
focus processor time limiting factor computation 
computing power distributed algorithms maximize performance set training instances 
consider parallel portfolios decision optimization algorithms 
algorithms preemptable significant overhead stopped resumed negligible overhead 
optimization algorithms anytime dean zilberstein 
anytime algorithms may interrupted finishing calculation return solution lesser quality 
ppa decision algorithms expected time needed solve problem instances optimized 
ppa optimization algorithms available time constant quality solution optimized 
prior knowledge algorithms performance instances may enhance performance portfolio suitable algorithm instance 
usually impossible decide precisely solving instance 
performance may determined similarity instances known performance 
way easily computable features instance may help approximately determine performance algorithm 
main obstacle decide computation instance feature enhance classification precision 
problem usually known algorithm portfolio selection gomes selman leyton brown andrew mcfadden shoham :10.1.1.13.1927
gomes selman gomes selman provides empirical evaluation composing randomized search algorithms processors portfolios 
results indicate may beneficial combine randomized algorithms high variance run parallel 
single processor random restarts produce results 
successful algorithm portfolio selection approach taken leyton brown 
approaches training set problem instances estimate probabilistic model performance 
statistical regression determine best algorithm instances combinatorial auction winner determination 

framework section define main concepts learning algorithms creating parallel portfolios 
define framework applicable decision optimization algorithms 
analysis solution techniques classes problems similar 
problem domain set possible problem instances probability distribution denoted probability distribution encountering instances stationary 
algorithm function maps input problem instance solution 
notice algorithms assumed deterministic 
accommodate decision optimization algorithms define notion profit correspond performance algorithm instance 
decision algorithm depends computation time optimization algorithms depends quality solution 
ppa performance optimized regard training set instances randomly drawn profit real valued number indicates utility solution generalization decision optimization algorithms 
decision algorithm stands time needed reach solution 
optimization algorithms stands quality solution achieved fixed amount time 
profit function represents profit solution instance achieved specified algorithm 
problem selection best ppa formally arg maxp set ppa available algorithms random variable represent instance 
additional measures performance defined 
performance ppa depends processor share assigned algorithm 
share assigned algorithm point time determined resource allocation function 
resource allocation functions algorithms portfolio comprise schedule 
consider constant allocations extended wider class functions shown 
definition 
resource allocation function raf algorithm re defines share processor power instance time calculation 
extend notion profit determined algorithm instance resource allocation function 
precise form function depends optimization decision algorithm 
definition 
resource profit function algorithm pe re definition 
static parallel portfolio algorithms tuple finite list algorithms resource profit functions 
schedule list resource allocation functions algorithms correspond algorithms resource allocation functions fulfill resource limitation constraint rj 
refers number instances refers number algorithms intrinsic characteristics ppa result problem instance may algorithms provide solutions 
ppa profit instance maximal profit individual algorithms 
contrast ensemble learning classifiers vote ensemble result sum votes 
definition 
profit ppa equal maximal value profits algorithms achieve instance 
mathematically max pj rj 
optimization problems assume computation time fixed quality obtained solutions important 
anytime algorithms characterized performance profile 
performance profile function maps directly resource profit function 
proposition follows schedulability assumption 
proposition 
time allocated execution function represent performance profile schedulable optimization algorithm 
resource profit function maximizes obtained quality 
function concave twice continuously differentiable decision problems available time unlimited preferable ppa solves problems fast possible 
proposition follows schedulability assumption 
proposition 
schedulable decision algorithms time find solution optimized resource profit function algorithm time solve instance function concave twice continuously differentiable 
randomly initialize arg maxs arg maxw general cma 

classification maximization algorithm section algorithm find locally optimal schedules ppa 
task finding static schedule may formulated non linear mathematical optimization problem maximize max pj rj subject rj xi rj 
problem solvable standard non linear programming techniques inner max operator objective function discontinuous 
solve propose decompose solution process phases classification maximization 
classification maximization algorithm 
classification phase computing classification matrix matrix splits instance set subsets ij 
xi ij wij 
mj ij 
addition matrix fulfill wij 
classification function induced classification matrix defined xl ij xl xi wij 

mj cardinality 
words classification determines best algorithm instance regardless schedule real calculation 
classification matrix problem may reformulated maximize subject rj rj xi wij 
rj 
wij 

basic idea algorithm 
classification phase cma finds optimal fixed maximization phase find optimal fixed generally approach known block coordinate descent gauss seidel optimization bertsekas 
approach leads local maximum performance may enhanced randomly choosing starting classification executions 
general structure cma shown 
elaborate individual phases 
classification classification phase performed analytically proposition states 
proposition 
solution optimal profit fixed achieved wij pj rj xi max pk rk xi 
words optimal classification corresponds schedule 
proof 
proof necessary optimality condition contradiction 
assume optimal solution satisfy 
wi classification sub optimal profit 
arg maxj pj rj xi breaking ties arbitrarily 
clearly setting wi wij invalidate classification constraints 
holds monotonicity implies profit decreased 
solution fulfills condition optimal profit 
proof sufficient optimality condition similar 
maximization maximization phase need definitions 
definition 
set resource profit functions pj homogeneous profit function expressed pj 
resource profit functions homogeneous maximization phase equivalent solving mj maximize rj xk subject rj rj 
dj mj 
problem 
maximize subject rj rj dj rj 
easily solved order necessary conditions fact problem involves maximization concave function convex set 
theorem 
theorem 
algorithms ppa schedulable 
solution globally optimal fulfills rj dk rk dj proof 
theorem follows second order optimality conditions 
lagrangian function equivalent minimization problem rj dj rj 
equation theorem follows algebraic manipulations necessary optimality criteria 
schedulability assumption fulfills convexity criterion 
local maximum 
function convex local maximum global 
decision problems decision problems profit function formulated proposition maximization phase may specified follows 
theorem 
ppa decision algorithms 
mean optimal schedule maximization phase cma fixed classification fulfill mo ro rp xk mp xk proof 
theorem 
theorems complete definition cma 
general suboptimal algorithm 
possible extend calculate optimal schedules complexity mn extension described 

theoretical generalization bounds section describes generalization properties static ppa approach 
schedules training set instances important able predict ppa may perform set problem instances 
prove worst case bounds 
may practical regard constants show interesting asymptotic generalization behavior 
proofs considerably shortened due lack space complete proofs please refer 
bounds section motivated probably approximately correct pac learning mitchell 
main goal show number training instances learn performs instances unreasonably large 
training instances drawn randomly bounds hold certain probability 
function denote profit arbitrary 
set meant represent set profit functions 
random variable corresponding problem instances corresponding probability distribution 
measure profit training set empirical mean profit defined fm xi 
define types properties generalization optimality 
ppa learning algorithm generalizes profit instances close profit training set 
ppa learning algorithm optimal optimal ppa training set close optimal result set instances 
properties formally defined definition 
definition 
say ppa learning algorithm mean generalizes outputs fm 
globally optimal algorithm arg sup 
call learning algorithm mean optimal outputs 
cases learner polynomial number training instances achieve bound 
theorem probabilistically bounds expected performance sample size theorem 
resource profit functions schedulable homogeneous 
maximal values corresponding functions 

generalization probability sup fm exp proof 
rough sketch proof 
significantly detailed version may 
basic problem showing theorem number possible ppa schedules infinite possible bound probability number 
main idea proof original vc theorem devroye lugosi 
randomization regard ghost sample 
theorem follows similar line reasoning mentioned vc theorem 
notice theorem implies learner mean generalizes 
cma algorithm optimal generalization bounds applicable 
show prove lemma allows extend theorem applicable mean optimality 
lemma 
ppa maximizes empirical mean profit 
sup fm fm fm fm fm sup fm corollary states actual mean optimality algorithm finds optimal schedules regard training sample instances 
corollary 
algorithm maximizes empirical mean profit 
mean optimal static schedule definition 
assumptions theorem hold exp proof 
corollary follows directly application lemma theorem 
theorem 
assumptions theorem hold 
algorithm finds static schedule ppa maximizing empirical mean profit find mean optimal ppa probability max ln ln samples 
proof 
proof problem devroye 
bound samples follows corollary shown 
applying bound 
application md exp ln holds ln examined applicability ppa static schedules combining state art algorithms satisfiability problem sat 
sat problem determine formula propositional logic satisfied interpretation 
general framework problem solving planning kautz selman 
performance results algorithms taken simon 
results runs algorithm instances 
cutoff execution time seconds 
purpose evaluation solution time seconds instances solved second limit 
choice value significant impact results 
set available instances simon denoted set instances solvable available algorithm denoted best performing algorithm group zchaff average execution time seconds performance fastest algorithms set summarized table 
tested cma cases cma calculated ppa significantly outperforms best algorithm instance set zchaff 
performance ppa derived analytically available performance data individual algorithms 
case mean execution time decreased standard deviation decreased 
case mean execution time decreased standard deviation decreased 
impressive results mainly caused instance solved algorithm reducing long runtime instances 
results summarized table 
specific obtained table 
available algorithms calculating optimal schedules listed algorithms non zero processor share 
interesting zchaff fastest algorithm fraction processor uses small ppa 
intuitive reason zchaff fast instances hard solve rest little slower algorithms 
certainly fact set obtaining optimal ppa evaluation adds significant bias method 
address issue evaluated generalization properties experimentally 
due limited number calculation instances results limited significance 
randomly chose subsets instances cma find pe var pe pe var pe zchaff relsat relsat sato table results best performing algorithms sat ex ppa best static schedule runs cma 
profit negative value runtime seconds 
algorithms back satz zchaff performance table summary calculated cma different starting classification 
best obtained cma 
locally optimal obtained different initialization 
locally best algorithm set 
evaluated performance set algorithms 
instance sets size 
instance sets size 
results table 
training sets best ppa significantly outperformed zchaff test set 

main idea ppa concurrently run algorithms problem tune performance controlling distribution processor time individual algorithm 
focus static schedules processor shares constant execution 
case possible devise fast suboptimal algorithm calculation schedules 
results sat problem show approach holds promise practical applications 
possible interesting enhancements basic approach 
shown table performance training set test set schedules obtained cma performance zchaff fastest sat algorithm denoted 
possible find optimal non static schedules change resource allocation function allowed discrete intervals 
optimality regard expected computation time 
schedules may obtained solving corresponding markov decision process generally complex calculation static schedules 
shown optimal regard expected computation time 
show significant improvement static schedules sat problem 
interesting enhancement incorporate evaluation function predict performance algorithm instance 
prediction functions effectively zilberstein allen leyton brown different contexts 
plan evaluate method impact parallel portfolios algorithms 
zilberstein allen 

dynamic composition information retrieval techniques 
journal intelligent information systems 
bertsekas 

nonlinear programming 
athena scientific 
dean 

intractability time dependent planning 
proceedings workshop reasoning actions plans 
devroye lugosi 

probabilistic theory pattern recognition 
springer 
gomes selman 

algorithm 
artificial intelligence 
kautz selman 

unifying sat graph planning 
proceedings ijcai 
leyton brown andrew mcfadden shoham 

boosting metaphor algorithm design 
cp pp 

mitchell 

machine learning 
mcgraw hill book 

learning parallel portfolios algorithms 
master thesis university bratislava slovakia 


statistically optimal combination algorithms 
local proceedings 
simon 


website www lri fr simon php 
zilberstein 

operational rationality compilation anytime algorithms 
ph thesis university california berkley 

