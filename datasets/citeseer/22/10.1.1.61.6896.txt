provable security efficient rsa pseudorandom generator ron josef wang dept computing macquarie university australia josef hwang ics mq edu au september pseudorandom generators rsa inversion wayness problem extensively studied literature years 
generators attractive feature provable pseudorandomness security assuming hardness rsa inversion problem 
despite extensive study efficient provably secure rsa generators output asymptotically log bits multiply modulo rsa modulus slow practical applications 
bring theory closer practice simple modification proof security fischlin schnorr rsa prg shows obtain rsa prg outputs bits multiply provable pseudorandomness security assuming hardness studied variant rsa inversion problem constant fraction plaintext bits 
result gives positive answer open question posed gennaro cryptology regarding finding prg beating rate log bits multiply cost reasonable assumption rsa inversion 
key words pseudorandom generator rsa provable security lattice attack 
background 
rsa pseudorandom bit generator rsa prg works iterating rsa encryption mapping xe mod public rsa modulus length bits public exponent coprime secret random initial seed value zn compute intermediate state values xi mod 
outputting significant bits state value xi iteration 
pseudorandomness rsa prg especially case studied extensively researchers 
best security proof far applies case small number bits log output iteration 
consequently small public exponent proven rsa prg variants output log bits multiply modulo slow practical applications 
far aware currently efficient rsa proven pseudorandomness security 
approach 
approach studying provable security efficient variants rsa prg observations 
observe existing security proofs rsa prg attempted prove security assuming hardness classical rsa wayness problem rsa modulus mod random zn find 
stronger hardness assumption hope prove security efficient practical variants rsa prg 
careful choosing stronger hardness assumption ensure substantial evidence hard problem undoubtedly studied extensively experts 
leads second observation 
second observation decade coppersmith variant rsa wayness problem studied explicitly small solution rsa ssrsa problem 
random bit rsa modulus coefficients univariate polynomial ae zn degree ae mod random integer find note interested instances uniquely determined 
celebrated lattice attack coppersmith shows small ssrsa problem solved polynomial time constant lattice attack fails known attack factoring run lattice attack times guess significant bits sufficiently large lattice attack slower factoring log suffices best known attack ssrsa problem factor importantly hardness assumption supported explicit evidence literature ssrsa problem studied experts studies yielded efficient algorithm ssrsa problem 
result 
simple modification proof security rsa prg fischlin schnorr shows assuming hardness certain specific ssrsa wayness problem suffices prove pseudorandomness rsa prg outputting ls bits iteration 
specific ssrsa wayness problem posed rsa inversion known plaintext bits ls bits ms bits zn find small constant obtain throughput output pseudorandom bits multiply modulo rsa modulus significant improvement log bits multiply throughput obtained previous proof security relative rsa assumption 
believe answers positive open question raised gennaro asked obtain prg beats rate log bits multiply cost stronger reasonable assumption rsa inversion 
organization 
section discuss additional related 
section contains definitions notations 
section review rsa prg construction proof security fischlin schnorr 
section presents modified security proof rsa prg assuming hardness ssrsa problem 
section estimate concrete parameters associated prg performance proven security level security assumptions 
section investigate potential performance improvements stronger hardness assumption 
section discusses applications result 
section concludes open problems 
additional related related prg constructions divided classes 
class contains related hardness assumptions 
known blum blum shub bbs generator structure rsa prg uses rabin squaring iteration function 
similar security results rsa prg known generator need known assumption prove security efficient variants generator see section 
construction goldreich rosen improving earlier astad uses exponentiation iteration function security proven assuming hardness factoring rsa modulus throughput bits multiply modulo bit modulus compared bits multiply construction 
micali schnorr rsa constructions throughput bits multiply pseudorandomness security proven assuming pseudorandomness rsa function small inputs notation decisional version ssrsa problem construction prove pseudorandomness assuming weaker assumption wayness rsa small inputs hardness ssrsa inversion problem 
prg boneh achieves throughput bits multiply fact may smaller prime modulus provable pseudorandomness security relies pseudorandomness assumption wayness assumption 
similar ssrsa assumption conjectured hardness associated modular inverse hidden number problem failure lattice attacks system non linear equations sufficiently large solutions 
second class achieve provable pseudorandomness different wayness assumptions 
construction impagliazzo naor hardness subset sum problem 
construction potentially efficient concrete security lattice subset sum attacks difficult estimate requires carefully chosen large parameters small number bits output function evaluation 
practical quad construction proposed similar ideas security proof hardness solving random system multivariate quadratic equations finite field mq problem 
compare practical performance construction quad section 
best prg hardness discrete log dl problem due gennaro improving earlier patel sundaram 
throughput bits multiply safe prime modulus length bit assuming discrete log problem modulo hard bit exponents 
factoring bit rsa modulus dl modulo bit prime solved subexponential time log achieve security square root dl attacks comparable difficulty factoring bit rsa moduli log throughput gennaro construction asymptotically log bits multiply compared bits multiply construction modulus length wish mention lattice attacks blackburn class having iterative structure rsa prg 
attacks show rsa prg insecure number bits output iteration larger general case results obtained ms bits output iteration prime moduli believe appropriate modifications hold ls bits rsa moduli 
general case attacks low dimension lattices rigorously proven 
heuristic extension attacks high dimension lattices coppersmith method suggests rsa prg insecure asymptotically omit details calculations 
lower bounds insecure values greater factor upper bounds security proof applies 
closing remaining gap best attack best proof interesting open problem 
preliminaries notation 
integers denote remainder mod lr denote significant bits binary representation similarly ln bit length denote significant bits binary representation zn mn denote approximation additive error mn probability distributions 
denote probability distribution denote assignment random element sampled distribution denotes set denote assignment uniformly random element sampled denote probability distributions finite set 
say algorithm distinguisher runs time distinguishing advantage prs prs 
statistical distance distributions 
gives upper bound distinguishing advantage distinguisher regardless run time 
pseudorandom bit generators 
definition pseudorandom generators concrete pseudorandomness 
definition prg 
pseudorandom generator family prg collection functions gn sn indexed 
prg function index space sn prg seed domain efficiently subsets security parameter 
require probabilistic distinguisher algorithm running time distinguishing advantage pseudorandom distribution dp random distribution dr bit strings defined follows dp sn gn dr 
algorithm runs time distinguishing advantage dp dr say distinguisher prg 
rsa inversion problem 
classical rsa inversion problem defined follows 
definition rsa problem 
fixed integer 
denote set bit rsa moduli pq primes bits gcd 
rsa inversion problem zn find say algorithm inversion algorithm rsa runs time succeeds probability choice zn random coins lattices 
bn set linearly independent vectors ir set 
cn called dimensional full rank lattice basis bn 
basis bn lattice define associated basis matrix ml full rank matrix ith row ith basis vector bi quantity det ml independent called determinant lattice denoted det 
basis lattice known lll algorithm outputs polynomial time reduced basis consisting short vectors 
result bounding length vectors :10.1.1.30.1345
lemma 
lattice dimension basis matrix bl lower diagonal form diagonal elements greater equal 
euclidean norm vectors lll reduced basis det 
high level overview fischlin schnorr security proof rsa prg 
recalling rsa prg construction 
definition pseudorandom generator 
generator family defined follows 
prg function index space set bit rsa moduli pq primes bits gcd 
index prg seed domain zn 
assume multiple seed zn prg function gn zn defined gn si lr xi xi 
clear result builds fischlin schnorr result essentially black box way result understood knowing internal details reduction 
section provide high level overview basic security reduction rsa prg case ls bits output iteration rsa assumption 
sake completeness provide appendices main ideas proofs main lemmas 
notation fischlin schnorr security result stated concretely follows 
theorem fischlin schnorr 
distinguisher converted inversion algorithm rsa problem run time log log 
proof 
distinguisher run time distinguishing advantage adv pseudorandom distribution dp obtained iterating times outputting ls bits iteration random distribution dr bit strings dp gn zn dr 
construct rsa inversion algorithm follows 
step note pseudorandom distribution dp taken random choice modulus random seed zn 
remainder proof wish fix find lower bound distinguishing advantage dr pseudorandom distribution dp taken just random choice zn fixed dp gn zn 
averaging argument refer appendix proof 
lemma 
exists subset gn size gn distinguishing advantage distributions dp dr gn 
assume gn happens probability distinguishing advantage dp dr step omitted assumes fixed add step believe essential meaningful security proof demonstrate efficient algorithm rsa inversion contradicting rsa assumption evaluate success probability random choice modulus fixed efficient algorithm exists built prime factors 
convert iteration distinguisher iteration distinguisher hybrid argument fact mapping permutation zn 
note hybrid argument underlying reduction known explicitly included 
refer appendix proof 
lemma iterations iteration 
distinguisher pseudorandom distribution dp random distribution dr converted iteration distinguisher distributions lr zn zn 
main part fischlin schnorr reduction conversion distinguisher inversion algorithm recovers rsa preimage help additional information significant bits ax bx randomly chosen known zn rough approximations ax bx stated precisely follows needed understanding result refer reader appendix sketch proof result 
lemma distinguisher inverter 
distinguisher distributions see lemma converted inversion algorithm zn lr ax mn ax zn lr bx mn bx zn log log outputs probability inv choice zn zn random coins runs time inv log 
mn denotes approximation additive error mn putting 
input xe rsa inversion algorithm runs follows 
applies lemmas convert distinguisher distinguisher distributions works fraction 
applies lemma convert inversion algorithm chooses random zn 
know extra information lr ax mn ax lr bx mn bx required just exhaustively searches ng possible values runs input xe guessed possibility succeeds recover note find approximation mn ax correct additive error search uniformly spaced possibilities 
log log log ng guessing possibilities lr ax mn ax lr bx mn bx search 
run time bound ng log log 
fraction correct guessed value extra information succeeds probability choice conclude success probability inv claimed 
interpret theorem follows 
suppose assume expected run time inv inv rsa inversion algorithm tl 
theorem convert distinguisher rsa inverter contradicting hardness assumption output bits iteration log log tl 
asymptotically take tl poly assume poly time rsa algorithm get log bits iteration 
assume tl cn log constant run time number field sieve factoring algorithm log 
case 
modified security proof ssrsa problem explain modify reduction solve studied ssrsa problem resulting improved prg efficiency security tradeoff 
goal remove search factor ng run time bound reduction proof theorem 
simplest way provide inversion algorithm correct values extra information required inversion algorithm lemma 
leads consider known inversion problem call definition problem 
rsa modulus zn lr ax mk ax zn lr bx ml bx zn find mn denotes approximation additive error mn 
say algorithm inversion algorithm runs time success probability random choice zn random coins definition 
search factor ng removed fischlin schnorr reduction hardness inversion problem log log suffices simultaneous security significant rsa message bits distributions lemma pseudorandomness tighter reduction theorem relative rsa problem 
theorem 
distinguisher converted inversion algorithm problem log log run time log log 
proof 
inversion algorithm proof theorem applying lemma runs inversion algorithm just correct values lr ax mn ax lr bx mn bx input eliminating search ng possible values 
defer section cryptanalysis problem lattice method introduced coppersmith leads conjecture problem hard constant 
assumption reduction implies security efficient variants 
unfortunately new problem consequently conjecture hardness currently supported extensive research 
show fact max note smaller max largest secure value conjectured problem hard specific ssrsa problem specific univariate polynomial degree call define follows definition problem 
rsa modulus sl lr sh zn find mk denotes significant bits binary representation 
say algorithm inversion algorithm runs time success probability random choice zn random coins definition 
see problem specific type ssrsa problem note equivalent finding small solution consisting bits randomly chosen integer equation mod degree polynomial sh sl known 
ssrsa problem theorem 
attacker 
construct attacker proof 
input sl lr sh zn attacker runs follows choose uniformly random zn 
compute integer coprime denotes symmetrical residue modulo def def 
known exists computed efficiently time continued fractions see lemma 
observe cx cx cn cx 
sh notice approximates additive error consequently rational number approximates cx additive error fact 
follows sign applies sign applies 
obtains candidates lr cx lr cx cn lr lr lr lr cn computes known sl lr candidates lr cx candidates similarly writing bc bcn bc bc nx bc obtain bc bc bc sign bc sign computes candidates bc corresponding candidates lr lr bc nx bcn lr lr bc lr bcn 
candidates computed computes candidate approximations cn cx approximates additive error cn approximates cx additive error similarly candidates bc computed computes candidate approximations bc bcn additive error bc choose uniformly random compute cx collecting information obtains candidates cx lr cx mn cx ab lr mn 
note valid instance 
furthermore exactly correct distribution triple cx ab uniformly random zn zn uniformly random choice zn zn 
instance distribution exactly correct uniform uniform zn 
simple calculation shows statistical distance uniform distribution uniform distribution zn negligible runs candidate instances 
runs outputs cx probability easily recovered ac note run time bounded succeeds probability required 
completes proof 
combining theorems conclude corollary 
distinguisher converted inv inversion algorithm problem log log log inv 

reduction theorem problem extends small modifications case details version 
resulting prg gives better rate best odd exponent assuming hardness ssrsa 

fischlin schnorr outline alternative security reduction worked detail optimized rabin iteration function schoenmakers general computational xor lemma 
alternative reduction inherent exponential run time factor know eliminate stronger ssrsa assumption rsa inversion 
concrete parameters estimated performance obtain upper bound pseudorandom string length security level assumed expected run time lower bound tl breaking log problem 
recall ssrsa problem log ssrsa problem conjectured take time tl min tf tc tf lower bound factoring tc poly time coppersmith attack ssrsa 
asymptotically constant tl tf tf subexponential poly 
exact bound modulus length depends value tf tc 
estimate concrete values number field sieve nfs factoring run time model pentium ii processor instructions time unit assume nfs run time tf cf exp ln ln ln constant determined estimated run time instructions taken factor bit number rsa 
assume conservatively coppersmith attack run time ssrsa tc cf table computed modulus length neglecting log overhead time largest values distinguisher run time instructions distinguishing advantage contradicts assumed lower bound tl tf tc expected run time inv ssrsa attacker 
assumed value throughput bits multiplication modulo approximately maximised 
results summarised table 
shown rightmost columns improved provable performance achievable stronger fs rsa assumption see section 
log rate throughput rate throughput bit bit mult mbit bit mult mbit table estimate achievable performance provable instructions distinguishing time achieve advantage assuming hardness ssrsa problem assuming hardness problem see section 
throughput columns estimated throughput wei dai crypto benchmarks page pentium ghz processor extrapolation assuming classical arithmetic 
estimates suggest bit achieve rate cycles byte mbit ghz clock pentium processor outputting bits provable instructions distinguishing run time ssrsa assumption 
close practical requirements stream cipher applications times faster basic blum blum shub generator outputting bit iteration modulus length 
compared provably secure quad prg construction mq problem prg lower throughput difficult fair comparison figures performance figures reported cycles byte pentium practical choice parameters smaller security proof applied 
possible advantage construction significantly smaller static parameters non secret parameters defining pseudorandom generator length kbit static parameters longer mbit allow construction implemented code memory requirements 
hand construction longer state hardness factoring insecure potential quantum attacks mq problem may secure attacks 
potential improvements cryptanalysis fs rsa problem observed section problem known gives direct proof security rsa prg ssrsa problem 
interesting problem coppersmith lattice attack methods see problem may hard larger values corresponding ssrsa problem possibly leading improved efficiency rsa prg 
section describe lattice attack believe essentially optimal show succeed 
value larger max largest value corresponding ssrsa problem section secure leading improved throughput rsa prg stronger assumption 
attack problem works follows 
reduce problem solving modular equations small unknowns 
zn lr ax mn ax zn lr bx mn bx mod ax ax bx bx consist ms bits ax bx respectively 

conclude ax letting obtain ax integer similarly obtain bx integer 
treating equations ax bx congruences modulo eliminate unknown variable multiplying second congruence ab subtracting obtain single linear polynomial variables having desired small unknowns zero modulo mod ab known 
substituting mod obtain degree univariate polynomial having small unknown zero modulo mod known 
find small zero bivariate modular polynomial lattice method coppersmith simplified graham subsequent works 
integer polynomials construct family polynomials hi indexed pair integers refer block index block call inner index hi 
observe polynomials hi zero modulo mod ni mod 
follows integer linear combination polynomials hi zero modulo denote upper bounds derived respectively 
set lattice search linear combinations polynomials hi sufficiently small coefficients zero integers just modulo linearly independent polynomials take resultant obtain single univariate polynomial equation integers easy solve 
precisely lemma due originally graham see :10.1.1.30.1345
bivariate polynomial ci jz zj define norm ci lemma 
polynomial having monomials 
mod holds square basis matrix bl lattice rows columns indexed pairs integers increasing range block index inner index block index block appears second block 
th row place coefficients polynomial hi 
order monomials hi th column th row bl contains coefficient monomial zi hi 
notice ordering polynomial hi non zero coefficient monomial zi basis matrix bl lower diagonal form entry bl th position diagonal bl 
follows determinant lattice product diagonal elements bl 
straightforward calculation gives function def det function def denotes dimension run lll algorithm basis bl lattice hope returns sufficiently short linearly independent polynomials having zero denote polynomials corresponding vectors reduced basis returned lll 
lemma see section lemma applies diagonal elements lower diagonal basis matrix bl greater 
know norms det recalling zero modulo order apply lemma conclude condition det 
plugging condition obtain factor def independent order increases 
furthermore see 
increasing parameter leading terms dominate ratio approaches asymptotically value large obtain asymptotic attack success bound attack success condition 

analysis proves asymptotic condition satisfied polynomials returned lll algorithm zero zero univariate polynomial resultant respect variable 
non zero deg zeros easily computed recover 
possible zero polynomial case attack fails 
common applications coppersmith method multivariate modular polynomials step attack heuristic 
performed numerical experiments confirmed validity heuristic practice experiments resultant non zero bound satisfied 
table gives smallest values experimental attack succeeded successive runs independent randomly chosen run 
note approach asymptotic bound increase 
rexp time table attack experimental results pentium ghz processor 
cases set 
column rexp smallest value attack succeeded independent runs smallest value proven success bound satisfied asymptotic success lower bound large 
conjecture bound attack essentially optimal lattice attacks 
give intuition conjecture note linear information components contain bits information known 
obtain information degree polynomial mod 
problem analogous ssrsa problem unknown bits 
coppersmith original ssrsa algorithm degree polynomials succeeds number unknown bits expect problem solved success condition attack 
rabin exponents assume attack previous section optimal problem hard bound violated allow approach modular squaring required iteration 
shown appropriate modifications proof lemma holds replace iteration function xe absolute rabin function fa def min choose pq blum rsa modulus mod choose prg seed mn mn def denotes subset elements having jacobi symbol 
fa permutes set mn proof lemma holds 
refer table performance prg variant assumed best attack takes time min tf tf time needed factor stress assumption new needs study 
applications point applications result security efficient variants 
stream cipher 
direct application construction efficient stream cipher known construction ciphertext obtained xoring prg output message bit stream secret key seed prime factors 
easy show indistinguishability security stream cipher equivalent pseudorandomness security prg computational efficiency cipher essentially prg 
efficient rsa ind cpa public key encryption random oracles 
application construction efficient semantically secure ind cpa rsa public key encryption schemes random oracles idea proposed efficient rsa prg variants blum goldwasser 
setting public encryption key secret key mod standard rsa 
encrypt bit message public key picks random seed zn expands pseudorandom bit string gn computes stream cipher construction 
ciphertext xm xi prg state value ith iteration 
xm xem knowing rsa trapdoor key easily recover obtaining gn ind cpa security scheme follows hardness ssrsa inversion problem suffices pseudorandomness 
due fact exploited blum goldwasser case pseudorandomness security reduction particular lemma easily extends case state xm known distinguisher referring proof lemma appendix simply distinguisher knows xi easily compute additional input xm em distinguisher reduction 
short messages length computational efficiency scheme rsa ind cpa schemes random oracles advantage achieves provable ind cpa security studied inversion problem random oracles 
furthermore scheme encrypt long bit messages efficiency additional security assumptions 
scheme secure chosen ciphertext attacks open problem efficiently strengthen security level random oracles 
goldreich describes randomized rsa scheme construction page identical scheme parameters proves security assuming large hard core conjecture rsa informally conjecture states distinguishing ls bits zn independent random bits hard inverting rsa function 
goldreich states page randomized rsa commonly believed secure leaves important open problem find additional support belief 
result progress direction showing variant randomized rsa secure assuming hardness studied ssrsa inversion problem 
shown efficient variant rsa prg provably secure assuming hardness studied variant rsa inversion problem plaintext bits known 
see avenues improvement 
assumption section prg rate prove secure small 
rate improved different proof similar inversion assumption question factor reduction run time factor log significantly reduced allow bits generated security level modulus length result shows factor improved optimal inversion algorithm non linear information processing distinguisher answers recovering 
interesting open problem construct additional efficient cryptographic primitives ssrsa problem 

authors scott igor enlightening discussions encouragement anonymous referees useful comments 
supported australian research council discovery dp dp dp 
chor goldreich schnorr 
rsa rabin functions certain parts hard 
siam journal computing 
bellare rogaway 
optimal asymmetric encryption encrypt rsa 
euro crypt volume lncs pages berlin 
springer verlag 
ben chor shamir 
cryptographic security single rsa bits 
proc 
th stoc pages new york 
acm press 
gilbert 
quad practical stream cipher provable security 
eurocrypt volume lncs pages berlin 
springer verlag 
blackburn gomez perez gutierrez 
reconstructing noisy polynomial evaluation residue rings 
journal algorithms 
appear 
blackburn gomez perez gutierrez 
predicting nonlinear pseudorandom number generators 
mathematics computation 
bl mer may low secret exponent rsa revisited 
calc volume lncs pages berlin 
springer verlag 
bl mer may new partial key exposure attacks rsa 
crypto volume lncs pages berlin 
springer verlag 
blum blum shub 
simple unpredictable pseudo random number generator 
siam journal computing 
blum goldwasser 
efficient probabilistic public key encryption scheme hides partial information 
crypto volume lncs pages berlin 
springer verlag 
blum micali 
generate cryptographically strong sequences pseudo random bits 
siam journal computing 
boneh durfee :10.1.1.30.1345
cryptanalysis rsa private key ieee trans 
info 
theory 
boneh halevi graham 
modular inversion hidden number problem 
asiacrypt volume lncs pages berlin 
springer verlag 
gennaro graham nguyen 
paillier cryptosystem revisited 
proc 
ccs new york november 
acm 
coppersmith 
small solutions polynomial equations low exponent rsa vulnerabilities 
cryptology 
coppersmith 
finding small solutions low degree polynomials 
calc volume lncs pages berlin 
springer verlag 
dai 
crypto benchmarks 
www eskimo com benchmarks html 
durfee nguyen 
cryptanalysis rsa schemes short secret exponent asiacrypt 
asiacrypt volume lncs pages berlin 
springer verlag 
ernst may de 
partial key exposure attacks rsa full size exponents 
crypto volume lncs pages berlin 
springer verlag 
fischlin schnorr 
stronger security proofs rsa rabin bits 
journal cryptology 
gennaro 
improved pseudo random generator discrete logarithm problem 
journal cryptology 
goldreich 
foundations cryptography volume cambridge university press cambridge 
goldreich 
foundations cryptography volume ii 
cambridge university press cambridge 
goldreich rosen 
security modular exponentiation application construction pseudorandom generators 
cryptology 
goldwasser micali 
probabilistic encryption 
computer system sciences 
goldwasser micali tong 
establish private code public network 
proc 
focs pages 
ieee computer society press 
astad shamir 
discrete logarithm modulo composite hides bits 
comp 
syst 
sci 
graham 
finding small roots univariate polynomials revisited 
cryptography coding volume lncs pages berlin 
springer verlag 
impagliazzo naor 
efficient cryptographic schemes provably secure subset sum 
journal cryptology 
knuth 
algorithms 
addison wesley reading ma 
lenstra lenstra lov sz 
factoring polynomials rational coefficients 
mathematische annalen 
lenstra 
security matching aes security public key systems 
asiacrypt volume lncs pages berlin 
springer verlag 
lenstra 
selecting cryptographic key sizes 
cryptology 
micali schnorr 
efficient perfect polynomial random number generators 
cryptology 
nguyen 
insecurity digital signature algorithm partially known nonces 
cryptology 
nguyen stern 
faces lattices cryptology 
cryptography lattices volume lncs pages berlin 
springer verlag 
patel sundaram 
efficient discrete log pseudo random generator 
crypto volume lncs pages berlin 
springer verlag 
shoup 
library doing number theory version 
available shoup net 
schoenmakers 
concrete security blum blum shub pseudorandom generator 
cryptography coding volume lncs pages berlin 
springer verlag 
vazirani vazirani 
efficient secure pseudo random number generation 
proc 
focs pages 
ieee computer society press 
proof lemma pr pn pr gn zn 
uniform adv pn pn 
suppose contradiction set gn size 
gn gn contribute average right hand side gn gn contribute right hand side contradicting adv required 
proof lemma hybrid argument 
consider hybrid distributions dh dh dh bit blocks random remaining pseudorandom 
dh sm zn xj sj sj lr xj 
note dh dp dh dr 
pi prs dh 
note advantage written pi pi pi pi pi pi 
exist distinguishing advantage neighbouring hybrid distributions dh dh input distinguisher runs input si si sm si chosen independently random sj lr xj xi xj xe 
easy see comes distribution sees distribution dh comes sees distribution dh fact mapping xe permutes zn xi uniform zn distributions dh 
note performs evaluations mapping xe takes time log 
distinguisher required 
proof lemma completeness sketch main ideas proof lemma 
details refer reader proof simultaneous security bits give outlined page extension proof 
lemma proved steps 
step convert distinguisher distributions xe lr zn xe zn jth bit predictor oj 
letting denote jth ls bit oj xe lj probability zn random coins oj notice oj requires input xe ls bits 
general conversion distinguisher predictor originally due yao see lemma 
idea consider hybrid distributions defined string ls bits equal lj remaining bits random independent follows similar proof lemma distinguishing advantage neighbouring hybrid distributions differing jth bit 
jth bit predictor oj input xe lj chooses random bit random bits sj sr runs input lj sj sr 
returns oj returns oj returns 
difficult show output bit oj equals probability second step convert jth bit predictor oj inversion algorithm recover extra information zn lr ax mn ax zn lr bx mn bx 
basic idea binary division process estimate ax additive error interval significant bit ax ax obtain estimate ax additive error half error bn 
ax ax ax ax ax ax 
starting rough approximation ax additive error order significant bits ax apply binary division process times obtain approximation un ax error rounding un nearest integer recovers ax exactly easily recovered known 
explain recover ls bits ax jth bit predictor oj 
suppose oj perfect bit predictor success probability 
case obtain ls bit ax known homomorphic property rsa compute yt ax query yt returns desired bit 
case notice extra information lr ax gives lj ax 
relation lj ax lj lj ax ax compute lj ax provide input oj ax obtain jth bit ax 
combining lj ax obtain lj ax 
continue process obtain lj ax recover 
handle case imperfect predictors oj success probability query predictor oj stage attempting recover bit ax times pairwise independent inputs majority vote estimates bit ax obtained outputs oj inputs 
pairwise independence queries oj possible prove chebychev inequality error probability majority vote bit reduced queries 
details follow 
queries pairwise independence queries form ct ix lj ct ix ct values set mt mt 
pairwise independence ct follows pairwise independence zn 
compute estimate ls bits lj ct ix needed input oj convert output bit oj query ct ix lj ct ix estimates bit ct ix prediction bit ax fact ct ix ax bx integer lj ax known previous stage initially lj ax lj bx known input compute lj ct ix know tax bx estimate correct high probability obtained replacing equation tax bx approximations input approximation tax better due binary division process 
answer ith query oj gives estimate ct ix correct estimate correct query really ct ix lj ct ix oj successful refer reader details error probability analysis 
convert estimate ct ix estimate desired bit tax reduce equation modulo obtain lj ct ix lj lj ax lj bx lj mod 
substituting lj ax lj ax ax lj ct ix lj ct ix ct ix dividing observing lj mod obtain relation ax terms ct ix known quantities ax ct ix lj ct ix lj lj ax lj bx lj mod 
summarize full inversion algorithm 
extra information compute estimates ax bx additive errors respectively 
lj lj ax lj lj bx 

binary division 
log compute improved estimate half error magnitude ratio ax 
log set mt define integer set mt 
log set mt log define multiset choosing independent uniformly random elements set mt 
compute estimate st lj lj ax estimate lj ax 
obtain pairwise independent estimates bit ax querying oj predictor times 
compute multiplier ct ct ix estimate tax bx 
compute estimate ct lj st lj lj lj ct ix relation lj ct ix lj tax bx 
run oj input ct ix ct obtain output bit estimate ct ix 
compute estimate ct st mod ax relation ct ix ax bx 
compute majority value estimates estimate bit ax 
compute estimate st lj ax 
nn rounded nearest integer equal ax recovered efficiently follows nn success probability 
shown pages choice parameters version page algorithm succeeds probability success probability analysis carried case extends modification arbitrary case see page errors occur due incorrect oj answers estimation errors explained 
run time reduction 
number times runs predictor oj log log log log log run oj performs constant number additions multiplications divisions numbers length bits take time 
run time log claimed 

