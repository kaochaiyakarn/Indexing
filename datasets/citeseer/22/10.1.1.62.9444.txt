man gossip overlay topology management rk jelasity babaoglu university bologna dipartimento di scienze dell informazione zamboni bologna italy jelasity babaoglu cs unibo 
overlay topology plays important role systems 
topology serves basis achieving functions routing searching information dissemination major impact efficiency cost robustness 
furthermore solution problems sorting clustering nodes interpreted topology 
propose generic protocol man constructing maintaining large class topologies 
proposed framework topology defined help ranking function 
nodes participating protocol ranking function order set nodes preference choosing neighbor 
simple abstraction possible control self organization process topologies straightforward intuitive flexible manner 
time man protocol involves local communication increase quality current set neighbors node 
show bottom approach results fast convergence high robustness dynamic environments 
protocol applied standalone solution component recovery bootstrapping protocols 
large dynamic fully distributed systems peer peer networks nodes peers organized connected network able communicate implement functions services 
neighbors nodes connected knows relation define overlay topology distributed system question 
topology dynamically change time time point defines possible interactions nodes 
desirable typically difficult ensure nodes aware participating node system 
reason partially supported emerging technologies unit european commission project bison ist ist 
mta hungary 
brueckner 
eds lnai pp 

springer verlag berlin heidelberg jelasity babaoglu set participating nodes changes quickly due large number nodes feasible maintain complete list nodes 
means nodes aware limited subset nodes efficient robust algorithms necessary create maintain optimize topology 
overlay topology forms basis major impact functions 
known functions searching routing information dissemination data aggregation need special topologies performance high efficiency 
furthermore solutions problems including sorting clustering readily expressed topologies 
example case sorting looking linear structure represents total ordering relation 
functions numerous topologies suggested protocols construct repair proposed 
motivated observations consider topology management general purpose function desirable distributed systems 
specifically target large scale highly dynamic systems 
key requirements topology management environments include robustness scalability flexibility simplicity 
great advantage topology manager flexible allow changing managed topology run time demand having develop new protocol possible topology scratch 
topology general abstraction express solutions problems enhance support functions functionality allow increase efficiency deploying fully distributed application dramatically 
need running topology component application area system changed run time necessary 
protocol supports quickly changing topologies possible automatically evolve topologies example evolutionary process 
propose generic protocol man aim fulfilling requirements outlined 
desired topology described single ranking function nodes apply order subset potential neighbors preference selected neighbor 
local gossip messages man gradually evolves current topology desired target structure help ranking function 
show experimentally protocol scalable fast convergence times grow logarithm network size 
properties allow man practical different topologies created demand dynamic systems set nodes properties change rapidly 
additionally general formulation ranking function allows deal wide range different topologies 
concerned mainly exploring basic properties oft illustrate practicality realistic applications 
briefly outline applications sorting clustering distributed hash table dht 
related includes gossip protocols gained notable popularity various contexts :10.1.1.13.2446
suggest novel application man gossip overlay topology management gossip communication model solve topology management problem 
issues related topology management received considerable attention 
examples vast literature include dhts unstructured overlays superpeer topologies :10.1.1.105.3673:10.1.1.16.4785:10.1.1.28.5987
topology construction kermarrec propose protocol evolve topology reflects proximity van steen propose method jump start pastry :10.1.1.6.1346
specific solutions man generic framework construct maintain large class different topologies quickly simple scalable manner 
problem assume random overlay network interested constructing desirable topology connecting nodes network right neighbors 
topology defined different ways typically depend properties nodes geographical location semantic description stored content storage capacity need formal framework simple powerful able capture interesting structures 
proposal ranking function defines target topology allowing nodes sort subset nodes potential neighbors preference selected neighbor 
formal definition define basic concepts 
consider set nodes connected routed network 
node address necessary sufficient sending message 
nodes maintain addresses nodes partial views views short sets node descriptors 
addition address node descriptor contains profile contains properties nodes relevant defining topology id geographical location addresses contained views nodes define links overlay network topology simply topology 
note parameter defines node degree overlay network uniform nodes 
define topology construction problem 
input nodes view size ranking function order list nodes preference node 
ranking function takes parameters base node set nodes ym outputs set orderings nodes 
task construct views nodes view node denoted contains exactly elements ranking entire node set nodes contains ranking starts elements 
call topology target topology 
presence churn nodes constantly join leave overlay network talk maintenance target topology construction 
formal definition define problem staying close possible target topology 
actual figures merit characterize maintenance largely application dependent case 
jelasity babaoglu way obtaining ranking functions distance function defines metric space set nodes 
ranking function simply order set increasing distance base node 
define example distance topologies different characteristics 
simplify language notation nodes profiles interchangeably 
line ring 
profile node real number 
distance function line 
case ring profiles interval distance defined min ranking defined distance function described 
mesh tube torus 
dimensional topology defined easily generalized arbitrary dimensions get example mesh torus 
profiles dimensional real vectors 
distance mesh manhattan distance 
calculating dimensional distance described coordinates returning sum distances 
applying periodic boundary condition ring results tube coordinate dimensional torus coordinates 
binary tree 
low diameter topology constructed binary tree profiles binary strings length excluding zero string 
distance defined shortest path length nodes undirected rooted binary tree 
string root 
string am children am anda am 
strings starting leafs 
topology interest previous ones short logarithmic diameter 
important ranking functions defined global distance function ranking function general concept distance 
ranking functions define sorting proximity topologies belong category 
examples section 
proposed solution topology construction problem interesting small number nodes large 
randomized gossip approaches similar settings problem domains information dissemination data aggregation proven successful 
solution topology construction gossip communication scheme 
protocol node executes protocol shown 
protocol consists threads active thread initiating communication nodes passive thread waiting incoming messages 
nodes maintains view 
view set node descriptors 
call merge view view returns union view view 
random time consecutive interval time units buffer merge view buffer merge buffer rnd view send buffer receive buffer merge view view buffer active thread man gossip overlay topology management fig 

man protocol forever receive buffer merge view buffer merge buffer rnd view send buffer buffer merge view view buffer passive thread key methods 
method uses current view return address 
applies ranking function order elements view 
returns descriptor ordering belongs live node 
method buffer applies ranking function order elements buffer 
subsequently returns elements buffer ranking order 
underlying idea manner nodes improve views views current neighbors new neighbors closer target topology 
nodes concurrently neighbors subsequent topologies gradually closer closer 
means views neighbors keep serving useful source additional better links iteration 
need explain origin role buffer rnd view 
buffer contains random sample nodes entire network 
provided peer sampling service 
peer sampling service described implemented similar fashion nodes periodically exchange random views update local views creating new random sample 
random views define approximately random overlay network 
buffer rnd view current set neighbors random overlay network 
peer sampling service extremely robust failure maintains connected network high probability 
role random buffer important large diameter topologies 
case node low quality neighbor set rest nodes high quality neighbor set forming large diameter topology ring node needs perform exchanges reach optimal set neighbors speed finding neighborhood related diameter topology 
random buffer adds long range links help speeding convergence 
protocol synchronous convenient refer cycles protocol 
define cycle time interval time units parameter protocol 
note cycle node updated average 
jelasity babaoglu cycles cycles cycles cycles fig 

illustrative example constructing torus nodes starting uniform random topology 
clarity nearest neighbors node displayed 
illustrates results protocol construct small torus visualizations done 
example clear cycles sufficient convergence target topology evident cycles 
see man proves extremely scalable time complexity protocol remains order magnitude nodes 
optimizations increase performance protocol applying known techniques described 
set connection limit interval time units cycles allow node receive connection 
node initiates connection interval means cycles node communicates twice 
second apply hunting trying peer node actively keeps looking nodes current view exceeded connection limit interval 
preliminary experiments indicate techniques noticeably improve convergence speed man possibility optimization note node need send entire buffer containing union fresh descriptor old view random buffer 
fact contacted node closest items buffer sufficient sort buffer applying ranking function peer sending items 
nodes ranking function easily emulate ordering point view node 
simulation experiments simulation results produced open source simulator developed university bologna 
examine distance ranking functions define ring torus binary tree topologies defined section 
motivation man gossip overlay topology management choice ring large diameter topology relevant sorting application section binary tree logarithmic diameter torus relevant proximity problems dimensional grid 
network sizes examined initialize profiles nodes regular manner case ring topology assign numbers nodes likewise torus binary tree binary strings length log 
regularity critical success protocol 
contrary important applications sorting arbitrary set numbers argue section 
controlled setting allows monitor dynamics protocol informed manner distance function equivalent hop count target topology defined links connect nodes distance target links 
experiments focus dynamics number target links 
measure performance convergence factor defined factor number target links increases cycle 
note constant convergence factor means exponential increase 
newscast protocol implementation peer sampling service works similarly man maintaining dynamic random overlay provide random peers 
newscast protocol extremely scalable robust communication cost similar man cache size newscast cycle length identical man section focus convergence starting random network views initialized random nodes start run protocol time 
section examine effect churn nodes continuously joining leaving network 
results shown 
results clearly indicate logarithmic relationship network size convergence speed 
illustrated especially plots comparing convergence factor different network sizes function time 
see constant shift convergence time network size increased multiplicative factor 
quite interestingly initial convergence depend view size depend characteristics target topology 
topology converged nodes incorrectly linked climbing converged structure consecutive cycles man means phase convergence time depend target topology 
accordingly binary tree topology observe rapid convergence 
fact logarithmic convergence evolved structure allows efficient routing low diameter 
similar arguments hold torus convergence time logarithmic grows square root network size worst case 
cases observe fast convergence smallest view size 
case ring different target topology large diameter grows linearly network size remaining misplaced jelasity babaoglu convergence factor convergence factor convergence factor ring cycles torus cycles binary tree cycles number missing target links number missing target links number missing target links cycles cycles binary tree binary tree binary tree ring ring ring torus torus torus fig 

comparison convergence speed initial phase final phase network sizes ring torus binary tree topologies 
results displayed averages runs show single run case cycles man gossip overlay topology management nodes reach destination slower 
convergence cycle small percentage target links missing andc 
smaller network sizes observe full convergence cycles independently characteristics target topology 
self healing section consider scenarios churn nodes constantly leaving joining network 
introduce simple extension protocol increase adaptivity subsequently experimentally evaluate proposed solution 
age view update extend protocol simple technique handle dynamic environments 
key idea remove old descriptors view cycle 
result expect decrease number dead links descriptors describing nodes longer network 
decreasing number dead links expect increase quality views live nodes 
implement idea node descriptors stored view contain age field 
field initialized zero node adds descriptor buffer send increased view entries time node communicates 
merging view buffer sent node removes oldest descriptors view 
merge operation modified prefer item removing duplicate items 
experimental results test efficiency solution performed experiments different scenarios involving churn 
experiments network size andc 
cache size newscast applied peer sampling service cycle length identical man churn modeled removing percentage randomly selected nodes network cycle replacing new nodes initialized random links 
ranking function defined dimensional ring 
due churn node profiles initialized random bit integer regularly section 
reason define connected ring applied direction dependent version ranking function described section 
results experiments illustrating various settings healing parameter churn rates shown 
note churn rates considered high 
set cycle length parameter gnutella trace described churn rate cycle 
light especially churn extremely high 
jelasity babaoglu proportion target links proportion target links healing parameter proportion target links churn churn churn churn churn churn healing parameter nodes nodes older cycles healing parameter proportion target links healing parameter nodes older cycles different scale fig 

experimental results presence churn 

point plots generated running respective scenario cycles sure proportion correctly identified target links converges converged value 
observation nodes high churn rates decrease quality views network quite significantly 
high churn rates network contains newcomers 
consider convergence times section note newcomer cycles necessary optimize view reasonably expect better performance measurement 
restrict nodes old get different picture 
andh observe quality network churn rates especially notable expected lifetime node network cycles 
fact number nodes older cycles third network 
observe aggressive healing fact damages network churn 
setting consistently worse setting 
positive effect self healing observed comparing case healing 
consistently results significant performance improvement 
general appears best choice extreme churn slightly better 
man gossip overlay topology management final note interesting observe performance fact bad application healing method 
due fact scenarios number dead links guaranteed decrease 
see consider case proportion dead links network remove nodes replacing new nodes links random live nodes 
due removal number dead links average decreases increases number links pointed nodes average nc 
assume nodes network degree true ranking function 
dynamics converges 
fact emphasizes importance bootstrapping method especially presence extreme churn 
application examples primary goal section underline generality approach outlining main ideas man solve potentially important applications 
clustering sorting far considered artificial settings understand behavior man better 
particular profiles nodes initialized regular manner 
practice hardly happen 
typically properties nodes follow specific distribution 
distribution dense clusters separated unrepresented regions profile space 
informally applying man setting simple distance ranking function resulting topology clustered disconnected nodes cluster eventually linked 
illustrative example dimensional cases 
applications clustering semantic geographic definition proximity property exploited find desired clusters 
case sorting problem connect node nodes directly follow total ordering relation need prevent clustering 
achieved direction dependent ranking 
separate set nodes ranked groups left right base node 
order sets underlying desired ordering 
merge ordered sets node index sets assigned index final ranking choosing randomly possibilities 
applying dimensional ranking function possible practically reduce sorting problem dimensional topology construction problem studied extensively section 
section exactly sorting method ranking function 
direction dependent ranking easily extended problems example creating connected topology dimensions reflects geo jelasity babaoglu dimensional distance dimensional direction dependent dimensional distance dimensional direction dependent fig 

illustrative example converged topologies obtained distance direction dependent ranking 
line displayed spiral convenience 
closest links shown node dimensional example respectively 
graphical proximity 
case node divides space quarters classifies node ranked categories accordingly 
node sorts nodes class underlying distance function produces ranking similarly dimensional case node index quarters assigned index randomly 
effect direction dependent ranking illustrated small examples 
case distance direction dependent ranking nodes mapped points forming plotted structures equal length intervals dimension letter shaped clusters dimensions 
profile nodes defined dimensional coordinates respectively 
observe clustering effect distance ranking direction dependent ranking perfect sorting dimension connected topology dimensions 
dht illustration briefly simplistic way evolving distributed hashtable dht topology man ranking function target topology defined xor distance 
distance hops man gossip overlay topology management cycles succesful fig 

hop count success routing function time cycles 
point represents result routing algorithm random node random node 
cycle experiments shown small random translation 
node id random bit integers network size size routing table pastry inspired topology ring 
:10.1.1.16.4785
define xor distance set binary numbers number bit positions different digit 
ranking function responsible evolving long range links 
idea topology node know nodes differ digits resulting link set pointing id varying length common prefix including long prefixes known way achieving efficient routing 
backup evolve sorted ring topology instance man described maximize probability routing successful 
routing table composed neighbors topologies hop target selected numeric difference id target table entries interpreting id numbers 
require strictly decreasing difference avoid loops 
links ring topology suitable links available xor topology 
distance decreased target routing attempt failed 
illustrates convergence routing performance topology evolved starting random routing tables 
observe number missed targets quickly insignificant cycle cases shown hop count successful unsuccessful routes remains low 
note example assuming perfect topology worst case hop count 
note approach mainly illustration 
protocol building chord dht represents realistic example :10.1.1.105.3673
jelasity babaoglu protocol topology management man simple general fast 
simplicity easier implement debug understand 
generality allows applied shelf component prototyping production solution implemented final desired topology known 
fact ranking function generated dynamically users monitoring service corresponding topology created fly 
speed possible construct topology quickly scratch recovery massive failures bootstrapping protocols demand topology maintenance fact equivalent continuous re creation topology example due massive churn 
current application man jump starting existing dht implementations providing robustness presence massive failures extreme churn 
continuing study man level better understand behavior characterize scope performance 
particular important characterize class topologies easy difficult man note arbitrary topologies expressed appropriate ranking function fact general ranking functions function ranks neighbors target topology highest suitable 
means open questions possible ranking functions optimal problem convergence speed convergence depend different topologies 
protocol certainly efficiency problems observed similar performance different important topologies empirical results promising 

alan demers dan greene carl hauser wes irish john larson scott shenker howard sturgis dan swinehart doug terry 
epidemic algorithms replicated database maintenance 
proceedings th annual acm symposium principles distributed computing podc pages vancouver british columbia canada august 
acm press 

patrick th 
eugster rachid guerraoui anne marie kermarrec laurent 
epidemic information dissemination distributed systems 
ieee computer may 

rk jelasity rachid guerraoui anne marie kermarrec maarten van steen 
peer sampling service experimental evaluation unstructured gossip implementations 
hans arno jacobsen editor middleware volume lecture notes computer science pages 
springer verlag 

rk jelasity alberto montresor babaoglu 
gossip aggregation large dynamic networks 
acm transactions computer systems august 

yehuda koren 
embedder 
www research att com yehuda index programs html man gossip overlay topology management 
laurent anne marie kermarrec ganesh 
network awareness failure resilience self organising overlays networks 
proceedings nd symposium reliable distributed systems srds pages florence italy 

maymounkov david mazi res 
kademlia peer peer information system xor metric 
proceedings st international workshop peer peer systems iptps cambridge ma 

alberto montresor rk jelasity babaoglu 
chord demand 
proceedings fifth ieee international conference peer peer computing pages konstanz germany august 
ieee computer society 

gopal prabhakar raghavan eli upfal 
building low diameter peer peer networks 
ieee journal selected areas communications jsac august 


sourceforge net 

antony rowstron peter druschel 
pastry scalable distributed object location routing large scale peer peer systems 
rachid guerraoui editor middleware volume lecture notes computer science pages 
springer verlag 

stefan saroiu krishna gummadi steven gribble 
measuring analyzing characteristics napster gnutella hosts 
multimedia systems journal august 

ion stoica robert morris david karger frans kaashoek hari balakrishnan 
chord scalable peer peer lookup service internet applications 
proceedings conference applications technologies architectures protocols computer communications sigcomm pages san diego ca 
acm acm press 

robbert van renesse kenneth birman werner vogels 
astrolabe robust scalable technology distributed system monitoring management data mining 
acm transactions computer systems may 

maarten van steen 
epidemic protocol managing routing tables large peer peer networks 
proceedings th ifip ieee international workshop distributed systems operations management number lecture notes computer science 
springer 

beverly yang hector garcia molina 
designing super peer network 
proceedings th international conference data engineering icde los alamitos ca march 
ieee computer society press 
