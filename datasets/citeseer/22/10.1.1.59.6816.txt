architecture integrate planning execution dynamic environments oscar eva departamento de ciencias de la computaci artificial universidad de spain ua es departamento de sistemas inform computaci universidad polit cnica de valencia spain upv es describe architecture system domainindependent planning dynamic environments incomplete information 
architecture permits agents simultaneously environment causes planning difficult task planner knowledge world obsolete short time 
approach designed overcome problem highly coupled system composed incremental planning executor 
system includes important features order deal real world domains sensing actions monitoring mechanism planning time limited situations numeric functions versatile graphical simulator 
problem classical planning involves generating sequence actions applied initial state allows achieve set goals 
research classical planning carried non realistic assumptions static deterministic completely accessible environments 
order overcome simplifications new approaches universal conformant conditional probabilistic planning arisen 
approaches plan execution monitoring just simple mechanism executes received plan checks happens planned 
case unexpected event occurs necessary compute new plan scratch try repair old plan 
general plan generation autonomous systems mobile robots separated execution 
planned actions executed unpredictable dynamic environments plans fail 
information acquired execution time 
reactive planning integrates plan generation execution trying constitute suitable platform deal realistic problems 
reactive planning agent defined combination planner plus reactor approach basis 
objectives objective develop planner integrated execution monitor reactor 
main methods carry integration planning reaction planner executed resulting plan sent reactor 
method easy implement presents big lack reactiveness 
plan fails necessary execution compute new plan 
planning concurrently reaction planner receives world information reactor certain times planner aware world changes rest time 
integrated planning reaction planner continually incorporates information reactor plans 
method hard carry guarantees plan date 
integrated planning reaction model 
system method see 
nowadays exist systems proposals integrate planning execution just interleave planning execution stages 
systems rogue pascale provide features want achieve system domain independent 
current systems designed specific domains control mobile robots time restrictions 
limited time available run time problems planner able provide reactor solution incomplete solution needed 
uncertainty management 
incomplete knowledge world necessary obtain information sensing actions execution 
realistic graphical simulation plan execution 
feature useful order alleviate problems portability system real environments 
autonomous operation 
systems need user collaboration control rules system architecture system composed agents working environment 
agents classified planning agents external agents 
agents type composed planner reactor see 
charge computing executing plans achieve goals vary time 
planning agent structure 
initially planning agent knowledge state world environment model 
normally knowledge incomplete inaccurate 
reactor asks planner actions required domain 
deadlines return plan action requests delayed planner computed plan 
reactor requests action planner replies immediately order fulfill time constraints 
reactor translates action set low level actions see example sends environment 
high level action considered atomic action reactor recovery mechanism reach valid planning state action execution fails intermediate stage 
case reactor updates information planner world notifies unexpected outcome planner 
example 
high level action move moving robot room room translated sequence low level actions compute angle battery available rotate degrees battery available collision position step forward external agents represent agents capable modifying environment people natural phenomena knowledge planning agents 
responsible unexpected events planning agent detects plan execution 
graphical simulation execution carried means virtual robot simulator tool 
tool allows control mobile robots define objects handled sensors monitor environment see 
able represent graphically domains allows agents act simultaneously environment 
environment simulation mobile robot domain 
problem modelling despite existence languages represent uncertainty sensing actions sadl choosen pddl standard language describing planning domains 
pddl representation support features works trying extend language 
extensions pddl trying maintain original syntax possible 
pddl describes initial conditions problem conjunctive set literals fluents numeric functions express facts initial state known planning agent 
order express partial knowledge initial conditions define tree valued logic fact unknown planning agent appear state specification 
explicitly included state 
literal known false appear preceded statement see example 
example 
going show description incompletely specified initial state means blocksworld classical planning domain 
domain involves stacking group blocks certain order robot arm 
state description expresses block clear know block top block init ontable clear pddl describe way represent sensing actions 
standard way define kind actions authors mark observable effects action 
explicitly indicate literals observed necessary conditions carry observations 
authors define outcomes sensing action mutually exclusive set effects 
order keep intact pddl syntax chosen representation identifies sensing actions 
sensing action executed planning agent wants check piece information true 
action successfully executed fact confirmed effects action see example 
example 
sensing action uses robot check person location loc 
action return loc loc depending state world unit cost battery sensing action check person parameters robot robot person loc location precondition robot loc effect loc decrease battery robot additionally possible include numerical effects example represent cost executing sensing action 
sensing actions check numerical values fluents 
reason planner approximate value fluent works value 
necessary check validity approximations periodically example battery consumption robot expected robot get stuck reaching recharge room 
reactor responsible monitoring fluent values notifying planner discrepancy 
anytime planning reactive environment feasible find complete plan starting execution 
reason planner integrated planning agents follows design principles anytime algorithms 
planner quickly computes incomplete plan order provide reactor action 
reactor executing actions planner refines incomplete plan 
refinement continues complete plan obtained unexpected event invalidates current plan 
planner provides reactor action action removed current plan world knowledge updated action effects 
action new current plan executable new initial plan computed 
allows rule computed plans fixed valid plans 
shows stages planning algorithm briefly described subsections 
preprocess stage stages planning algorithm 
preprocess stage compulsory stage planners 
stage consists instantiating possible actions means assigning possible values parameters operator 
calculus permits speed planning stages 
process usually done dynamic environments number possible actions literals change new objects appear giving rise new possible actions literals 
fortunately process time consuming appearance new objects quite unusual 
creation initial plan step compute initial plan build relaxed planning graph rpg 
rpg graph graphplan expansion delete effects ignored 
level rpg literal level contains literals true current state 
expansion rpg finishes literal level containing top level goals reached possible apply new action 
main difference regard relaxed graph heuristic planners rpg focused optimizing problem goal function problem metric number actions 
achieved literal stored approximate value minimum cost needed reach literal current state literals current state cost 
cost action computed increase action produces metric function value 
way cost positive effects action calculated cost action plus maximum cost preconditions 
cost computation entail increase computational complexity rpg expansion solved polynomial time improves quality solutions extracted numeric domains 
initially rpg expanded account sensing actions 
reason literal achieved sensing planning agent necessary information infer literal 
top level goals achieved expansion sensing actions included graph expanded 
sensing action inserted observable effects inserted graph true world 
execution monitor confirm supposition case sensing action executed 
second step extract incomplete plan rpg 
plan represented tuple nodes sets subgoals edges correspond application single action 
node top level goals gi true current state 
node literal maximum cost selected 
expansion place costly literals generates informed plans 
action minimum cost produces costly literal selected 
new node formed action preconditions hold 
algorithm shows process gi gi argmin cost li li argmin cost ai ai eff ai li li prec li endwhile return algorithm takes account top level goal fulfills objective incomplete plan rapidly computed action directly executable starting point refinements 
refinement stage initial plan computed refinement stage begins 
plan improved reactor executing previous actions 
unexpected event plan invalid new initial plan calculated new current state 
refinement process tries insert sequence actions achieve non solved subgoal 
process repeated subgoals achieved getting complete plan result 
firstly stage checks actions plan executable 
plan complete totally executable 
subgoal solved costly precondition non executable action 
suppose action ai action executed literal costly precondition 
step compute plan achieve starting state precedes ai 
state sj precedes action ai state obtained successive application actions ai app eff eff sj app app app app aj application plans initial states sj leads new states contain literal new states possible reach states sj si keeping new achieved literal possible alternatives observed 
number possible alternatives quite large 
necessary compute alternatives pruned 
plan example reach starts action see alternative better starts state 
alternatives improve best solution far pruned 
plans computed quickly 
best alternative selected checking conflicts causes 
conflicts appear previously achieved subgoal deleted new sequence actions inserted plan 
alternatives cause possible alternatives achieve precondition third action ai plan 
number conflicts lowest cost regard problem metric selected 
described system planning dynamic environments incomplete information 
architecture system allows agents simultaneously environment possible check behavior planning agents unexpected events occur 
system includes useful features realistic domains support sensing actions execution monitoring planning time limited situations numeric functions detailed graphical simulation 
despite advantages approach offers real environments necessary take account planning algorithm complete 
results obtained previous version functional execution support ipc see www dur ac uk long competition html show algorithm competitive generates solutions wide range domains 
lot done 
system completely implemented results available 
necessary develop simulations known classical domains logistics blocksworld ferry depots find new domains take advantage new system features 
nowadays domains include sensing actions uncertainty addition research done order evaluate resulting plans presence sensing time limited situations 
interesting know quality plan cases planner unaware facts environment unexpected events occur execution 
interesting extension planning algorithm support probabilistic domains 
probabilistic domains provide planner additional information helping planner choose alternatives succeed 
furthermore probabilistic planning currently active research area international planning competition shows 
partially funded projects tic tic dpi upv 
bertoli cimatti dal pistore extending pddl nondeterminism limited sensing iterative conditional inproc workshop pddl 
drummond swanson bresina levinson reaction search proceedings ijcai 
fox derek pddl extension pddl expressing temporal planning domains jair 
golden weld representing sensing actions middle ground revisited knowledge representation reasoning 
haigh veloso interleaving planning robot execution asynchronous user requests papers aaai spring symposium 
hoffman nebel ff planning system fast planning generation heuristic search jair 
lesp rance ng integrating planning reactive high level robot programs proc 
cognitive robotics workshop 
littman younes ipc probabilistic planning track faq www cs rutgers edu topics ipc pt 
en rob tica virtual robot universidad polit cnica de valencia 
ref 
peot smith conditional nonlinear planning proc 
aips 
pollack horty life making plans plan management dynamic multi agent environments ai magazine 
hertzberg schneider stochastic model actions plans anytime planning uncertainty international journal intelligent systems 
washington incremental planning truly integrated planning reaction inproc 
washington segmenting reactions improve behaviour planning reacting agent inproc 
