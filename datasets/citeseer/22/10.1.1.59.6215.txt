copy paste model provenance curated databases peter buneman university edinburgh edinburgh united kingdom inf ed ac uk march james cheney university edinburgh edinburgh united kingdom inf ed ac uk provenance information describing origin construction location ownership aspects history object 
previous provenance concentrated understanding provenance described data interest derived queries data sources case data warehouses 
focus important class databases curated databases 
databases constructed maintained great deal human effort manually transferring data sources databases web pages files inserting comments transcriptions literature 
exploit data model data stored deterministic trees provides simple notion location data 
characterize dataflow provenance information data comes 
consider simple language insertion deletion copy paste operations discuss provenance behavior 
introduce query language express relational queries update language extends copy paste language bulk operations show languages equivalent expressive power equivalent provenance behavior 
discuss relationship provenance conscious languages existing database query languages 
attempt model ultimately support process scientific scholarly databases constructed maintained 
distinguishing features databases 
represent investment great deal human effort content manually inserted edited 
second derived data sources value lies reorganisation classification cleaning annotation existing data sources 
term curated describe databases abound biology 
example lists people described curators annotators numerous valuable small scale databases related nuclear protein database maintained people working part time 
fact discussion curator database provided part stimulus 
curated databases distinguished data warehouses databases derived existing data 
essentially views collection existing databases largely constructed evaluating queries source data 
databases valuable way organise integrate data typically little manual correction annotation data warehouse 
important issues curated databases provenance knowledge piece database come constructed 
essential scientist assessment quality data 
date efforts define describe provenance concentrated determining provenance database constructed query data warehouse :10.1.1.6.1848:10.1.1.1.9079
appears little understanding track provenance data structures involved 
mydb mandrake mydb mandrake notes notes mydb mandrake contact marks udb evolution simple curated database udb mydb mandrake contact tel constructed manipulated hand 
reader invited web search population country 
chances number sites give form july est 
certainly extracted hand cia world factbook extremely valuable curated database 
attribution seldom deliberate attempt hide origins data copied document database copying activity typically user controlled copy paste operation means obtaining communicating provenance information 
record provenance hand time consuming clear record 
going describe data model basic update language allow describe simple method creating databases copying sources adding new structures second allow provide precise description provenance 
fact allow describe aspects provenance may interest assessing data quality 
show simple update language pattern matching extended bulk update language explore connections query languages 
investigate consequences practical query languages optimisation wants define record provenance information 
example consider example familiar academics 
act advisor number students attempt keep simple database 
professor retirement inherit copy records database 
fix entries notes confused notes 
copy contact details student university database records academic performance 
student tells new telephone number correction 
shall assume sources wrapped way represented trees manipulated kind tree editing program xml editor 
shows sequence simple changes construction database 
edge labels indicate location information placed 
decide risk having resolve name clashes locate students names uninformative identifiers 
note places data structures copied subsequently updated 
argue may best way doing things 
example marks subtree better represented form source data kept date 
contact subtree updated copying 
extra machinery may needed deal issues 
point sort data manipulation commonplace attempt understand 
data model going adopt tree model databases 
xml trees shall assume child unique name siblings xml shall assume tree model 
second minor convenience formalism 
requires stronger assumption data edges node carry different labels element canonical location database 
fairly safe assumption practice 
constructed relational database location consist table name key value tuple identifier attribute name 
model acedb interesting semi structured model biology assumed languages file database synchronization efficient database 
course model unix style directories 
fully keyed xml document property 
sorts variants deterministic model data 
consider node labelled trees trees edges nodes possibly terminal nodes labelled 
arguably realistic adopted basis parsimony variations lead radical revisions basic approach 
formally trees finite prefix closed subsets set edge labels 
paths trees written symbol concatenate paths 
empty path written 
copy paste operations basic operations construct modify tree copy subtree location meaningful exist tree 
add edge path creating location meaningful exist exist tree operation applied 
delete edge emanating meaningful path exist tree 
deletes paths example transformations described expressed sequence atomic operations think operations place large tree 
initial ellipses 
describe paths needed url locate node 
long expressed basic syntax operation easily executed point click tree editor 
reason studying model tree transformation give precise formulation provenance 
fact meanings ascribe term shall shortly examine 
start need describe sequence operations moves data tree 
example resulting tree find node 
mydb mandrake contact address conclude copied operation 
udb address 
transactions describe modification database log sequence operations performed modification fine grained 
example possible interchange order changing combined effect provided process tried read write relevant parts tree events 
normal database conventions shall call sequence events executed indivisible unit transaction 
able describe effects transaction fashion independent precise order events transaction 
important reason wanting want extend copy paste create locations copy 
mydb 
mydb mandrake 
mydb 

mydb mandrake 
change edge label edge creation copying deletion 
mydb mandrake 
mydb mandrake 
mydb mandrake notes 
mydb mandrake notes 
mydb mandrake notes create locations copy 
mydb mandrake contact 
mydb mandrake marks 
mydb mandrake contact 
udb 
mydb mandrake marks 
udb update leaf data edge deletion insertion 
mydb mandrake contact tel 
mydb mandrake contact tel copy paste operations language bulk operations freedom rewrite sequence operations order equivalent query optimisation 
operations translated logs regard query equivalence identical logs query rewriting effectively impossible 
give semantics transactions need introduce formalism 
starting alphabet node labels tree prefix closed subset finite strings 
set trees 
input output interpretation io basic operations partial function trees trees 
example io defined io provided exist io io defined similarly 
define syntax transactions simple core language skip meaning sequence operations defined compositionally io io io meaning skip identity function 
definitions describe input output behaviour transaction 
want describe node come 
example application node come general 
undefined undefined path result basic operation tells came 
come path input introduced operation denoted fail exist output performing operation 
extended compositionally sequence basic operations 
note node introduced transaction label label individual operation 
extend compositionally define io mean respectively io sequence operations constitutes note depends path input tree 
definition provenance sense fact hold immediate consequence definitions io exists 
return example transaction gives rise mappings 
mydb 

mandrake 

marks 
udb 

notes 
notes 
contact 
udb 
tel undefined 
mapping property extended give provenance node 
example 
mydb mandrake contact address appears output longest prefix path table 
mydb mandrake contact maps 
udb conclude node copied 
udb address 
conclude 
mydb mandrake notes meeting possibly appear output longest prefix path maps general log gives rise unique minimal finite mapping form provenance node constructed 
construction basis result 
define transactions equivalent trees io io sides defined equal sides undefined 
similarly define provenance equivalence theorem equivalence provenance equivalence core language decidable ptime 
possible construct transactions equivalent input output behavior differ provenance 
sequences io io example provided quite machinery model transaction deletes tuple inserts identical tuple equivalent provenance equivalent identity transformation 
forms provenance suppose tree constructed sequence transactions 
en 
respect sequence various kinds provenance wish know 
example see erroneous data structure repeatedly copied modified want ask transaction created data 
alternatively want know transactions modified structure possible interpretations provenance src 
en transaction 
en created node location created 
mod 
en subsequence transactions modified part subtree cpy 
en subsequence transactions copied current position 
functions defined inductively src 
en en en en src en 
en mod 
en en en en mod 
en en mod 
en en cpy 
en en en en cpy 
en en en definition mod denotes merge subsequences 
example suppose group individual operations transactions follows 



suppose knowledge provenance information transactions take initial state world created large transaction 
src 
mydb 

src 
mydb mandrake 

notes mod 
mydb 
mod 
mydb mandrake 

course aspects provenance want record 
example cpy want know addition transactions copied node copied 
easily defined terms point providing precise semantics provenance transactions support analysis bulk updates query languages sections 
tree query language explore connection language atomic updates conventional query languages 
looking languages 
query language designed data model introduced second language obtained generalizing basic update language performs bulk updates 
main result languages express data transformations equivalent query languages differ greatly kinds provenance express 
conventional query languages allow aggregation allow fusion equal values 
relational algebra example projection union natural join combine values place 
true sql select distinct 
union similar constructs query languages 
operations provenance single value unique 
ultimately account aggregating fusing operations single source characterization provenance interesting restrict 
requirement imposed data model generating edges node labels required different 
tree query language query language comprehensions satisfies criteria 
uses disjoint union succeeds edge sets top levels trees combined disjoint 
comprehensions language required forms pattern matching flow information explicit variable bound association exactly location input 
comprehensions involving multiple bindings require label result value dependent label variables pattern matches 
accommodate consider labels internal structure addition atomic labels label variables 
skolem functions 
ln produce new labels existing ones 
query language expressions follows 
ln 
en expression produces value root input subtree 
expressions dereference construct perform disjoint union trees respectively 
expression evaluates stores temporary location alias conditional operation usually special case comprehension tests evaluates true evaluates 
comprehension expression 
en constructs tree iterating input trees evaluating possible substitution edge labels ai note tree variables particular way compare trees comprehensions 
atomic values edge labels may compared 
hand dereferencing temporary value created bindings comprehensions described path expression ln 
result affect expressiveness allow tree variables syntactic sugar expressions follows tree variables introduced comprehensions example bs 
abbreviations freely rest 
abbreviate ln en 
ln en 
examples illustrate power tree query language consider situation students just wish construct view matches pre existing structure mydb 
order avoid processing subtree individually assume university database udb mapping student identifiers names similar udb udb contact information marks 
order avoid name conflicts offering readable subtree names label subtree sid name sid student identifier university databases name student surname 
necessary ensure records processed name collisions 
query produces desired result notes contact udb marks udb udb iterate subtree 
label student identifier label position udb representing student surname construct subtree labeled value 
subtree corresponding contains old notes stored contact marks subtrees information copied university database 
view transforms data students preferred format 
view advantage udb udb udb updated view reflect updates 
hand ability manipulate data stored view limited 
example wish fix telephone number view update change udb mistaken contact information add view follows contact marks marks quite verbose potentially fragile 
update contact information filter subtree build new subtree copy elements old file verbatim filling new value contact 
addition subtree reconstructed explicitly query easy transcription errors typos creep 
addition shall see provenance information lost queries views simulate local updates 
example logical connection new advising record old 
provenance semantics queries describe provenance semantics queries similar described copy paste operations section 
copy paste language view provenance partial function mapping paths output sources input meaning data location comes current transaction 
main difference queries construct new output tree usually copying parts input output copy paste operations modify input tree place produce output tree 
addition query expressions frequently allocate intermediate values temporary storage perform computation deallocate temporary values 
contrast allocation deallocation operations explicit copy paste language 
describe provenance semantics queries ways 
illustrate provenance behavior expression pictorial examples show compile query relative tree sequence copy paste operations builds result query specified location 
specifies exact behavior queries respect provenance 
figures show provenance information propagated query expression form 
provenance behavior empty tree expression trivial shown 
expression simply copies input tree output output path obviously comes corresponding path input 
dereferencing operator provenance output path provenance disjoint union operation provenance path provenance cases mutually exclusive 
provenance path provenance undefined 
operation provenance location result provenance location intermediate value copied location original tree 
provenance behavior comprehension operation 
seen quite complex essentially calculated assigning provenance new edges introduced comprehension propagating provenance instance ideas precise showing query translated series copy paste operations tree 
assume tree containing input data including paths pi containing input subtree po wish store output query 
execution may need adjust po define function po constructs copy paste transaction evaluates query provenance examples simple expressions query provenance comprehension relative pi places result po 
assume pi po independent locations tree example pi po root paths query interpreted relative pi query interfere output po executed controlled ways 
consider closed queries queries free edge variables 
clearly empty tree expression corresponds doing po skip skip empty command sequence 
expression copies input output po po pi 
po edge occurring tree execute pi po pi transaction constructs pi translation expression similar pi po pi root tree 
construct single edge subtree insert po compute po po po po 
disjoint unions just construct po po po po 
comprehensions cases 
comprehension empty binding list form closed true false 
false construct true po skip false hand comprehension form bs bs possibly empty sequence comprehension bindings followed condition translate command pi pi bs po bs po appear tree pi commands executed children pi 

intuitively construct new location child ai arbitrary order perform corresponding comprehension ai substituted 
order comprehensions performed matter different label produced case 
expressiveness relations encoded deterministic trees natural way relation names labels level tuple identifiers keys second level field names third level single edges data fourth level 
show simulate positive relational algebra tree queries compare edges subtrees 
example translate conditions meaning point equal single edge subtrees points respectively query expressions follows qe qe technically query expressions calculate intersection edge sets intersection edge set respectively 
single child expressions nonempty respectively 
comprehension qc simulate tree query language expressive positive relational algebra relational query construct tree query relational representation relation instance representation 
translation follows 
selection operation translated field label constant 
similarly translated 
projection operation translated 

product translated disjoint sets attributes 
perform union need labels ensure disjointness disjoint union distinct skolem functions 
interesting question relationship queries copy paste transactions 
easy simulate input output behavior atomic copy paste operation queries 
write query expression copy paste transaction expression simulates effect input skip provenance behavior copy ac vs 
query update ac define insertion deletion define functional update follows 
input output behavior transactions simulated queries provenance behavior copy paste operations richer queries 
reason point view provenance copy paste operations local place query operations accomplishing effect involve lot unaffected data 
example copy paste operation disturb tree query equivalent constructs new edges illustrates difference approaches 
difference provenance information siblings nodes path root updated part tree lost 
bulk tree update language far considered paradigms modifying trees copy paste language captures individual steps person take obtaining modifying data query language similar standard database query languages 
copy paste language possesses clear notion dataflow provenance require data manipulations broken individual insertions deletions copy paste operations 
level detail suitable realistic large scale data processing optimization 
hand query language suitable large scale processing optimization provenance semantics complicated expressive 
query operations modify data place difference traditional input output view expressiveness difference provenance taken account 
consider extension copy paste language allow bulk operations expressive power tree query language preserves provenance information 
need introduce new notation 
write abbreviation prefixed write targets 
read targets unaffected 
example consider path patterns ln li edge labels edge variables skolem function applications tree queries 
ordinary paths empty path written 
repeated variables allowed path patterns example illegal 
path patterns written indicate variables mentioned case denotes path resulting replacing ai say path matches exist edge labels 

write match set tuples edge labels matching path operations added copy paste language form bulk tree update language new condition form tree queries 
conditional operation tests condition true executed happens 
flattening operation expands meaning provenance behavior pattern matching bulk update operations 
match 
words flattening operation stores subtree path matches underneath distinct location depend locations 
mapping operation performs subtree matching expands 
match 
name generation operation new generates fresh edge label occurring tree proceeds execute 
example operation useful translating tree queries bulk updates 
infinitely fresh edge labels tree picking unused label ordering 
new affect tree introduces fresh label name 
provenance semantics pattern bulk updates easy understand considering translations queries sequences atomic copy paste operations 
examples operations provenance behavior shown 
dotted lines indicate mapping paths output tree source locations input tree 
rest section shall give examples practical uses bulk update operators show bulk update operations io equivalent course provenance equivalent tree queries 
examples consider construct mydb case students bulk updates tree queries 
copy records perform update mydb operation copies subtree mydb erasing provided subtree name conflicts mydb 
copies obscure student identifiers students renamed just keep ugly naming scheme 
rename notes student subtrees doing mydb mydb notes notes notes contact marks subtrees student inserted follows mydb contact marks similarly filled map operation follows mydb contact udb marks udb ad hoc modifications need replacing date telephone number current performed atomic copy paste operations original example 
contrast previous example tree queries construct view data compatible shown local copy data independent incorporating local copies information stored remote databases possibly local corrections 
ways doing 
wanted keep date information university database form exploiting dynamic tree evaluation 
overlaying corrections view problematic situations wants scientific accuracy data receiving database updated people simply want integrity data rely presence integrity remote database 
expressiveness bulk updates tree queries ways performing large scale operations trees 
viewed defining functions trees queries construct output tree input tree updates modify input tree produce output tree 
techniques equally expressive 
section show functions trees definable queries updates 
see queries expressive updates need show bulk update operations definable queries basic copy paste operations shown definable queries 
write query simulates update reading updating 
need distinguish input output trees able handle 
atomic updates translated conditionals translated comprehensions 
translation new new operation 
flattening operation abbreviation expanded follows mapping operation translated follows shows function trees definable updates definable queries 
wish show reverse direction updates simulate queries 
subtle comprehensions 
section assume input stored pi write po update constructs output po 
show constructs comprehensions translated po skip po new po po po new po po po po po new po po po dealing comprehensions requires observations 
mappings new build subtree contains results comprehension leaves statements deal conditions 
second flattening collect results desired target location 
define 
en po defined follows new new 
new 
en po po po ei bs po po ei po po bs idea bs po creates tree po path contains comprehension result case 
note ranges ei may depend earlier ones need create different versions ei different iterations earlier note resulting tree stored totality top level ei untouched construction waste lot space polynomial factor original input size 
shown theorem query update languages express partial functions trees 
easy see query language polynomial data complexity theorem query update languages polynomial data complexity 
update language trivial result tree languages unrestricted looping fresh identifier generation updating negation interpreted deletion typically high expressive power high data complexity part unrestricted loops updates construct data exponential size relative input convenience abbreviation new command constructs result temporary storage stores location 
update language carefully avoids pitfall 
implications real query update languages bring things back earth discuss implications results real query update languages situations provenance important 
sql core sql query language close relationship tree query language 
simple cases sql queries equivalent provenance equivalent example select select similar situation occurs tree query language 
sql obvious drawbacks support failing union generate deterministic tree implementations generate internal tuple identifiers stored tables 
similarly sql update language seen simple fragment bulk update language express sql insertion insert values new 
subquery insertion operations handled 
sql deletion operations delete appear representable bulk updates loop update statement delete current 
believe easy fix adding deletion primitive form deletes subtree express deletion 
sql update operations update set ln en translated tree updates 
ln en 
copy paste language analyze provenance core sql 
sql query language course widely construction data warehouses 
experience sql queries updates curated databases indirect queries updates usually driven forms interface data values copied 
case appropriate wrappers need built obtain proper analysis provenance 
xquery discussion sql transfers xml query languages particular xquery 
issue simply identify places language fusion aggregation take place 
serious issue language model 
xml provides canonical model location document 
best hope assume document keyed say key specification xml schema 
experience non textual data implicit underlying system keys seldom explicit schema constraints 
observations apply xml updates 
need minimum scheme providing persistent identifier element document 
shell script language design shell scripting languages bash perl frequently routine system administration tasks involving data management file level 
typical operations include copying file location creating deleting file directory testing property files filenames equal performing operation filename directory 
languages criticized ad hoc buggy unpredictable widespread popularity points real need justifies despite problems 
problems software quality issues underlying hard problem shell scripts usually wants thing file folder directory structure 
ordinary loops conditionals easy write programs behavior dependent order iteration directory 
desirable loops manage large file structure automatically easy mistakes result overwriting single location times 
bulk update language viewed simplified shell scripting language desirable property programs fail case name collision missing path produce unique result 
hand file systems usually track provenance information example creation modification dates permissions ownership 
may interesting examine correspondence 
goal investigation develop shell scripting language creates propagates richer provenance information goes existing file systems 
believe analysis kind essential full understanding provenance curated databases 
main limitation fails take account aggregation fusion equal values regarded special case 
clearly needs incorporated picture complete 
important topic provenance recorded 
efficient annotation system described bhagwat record provenance step back 
keep longer provenance trails depends extent source data keeps provenance information extent keeps archives 
substantial literature coarse grained workflow provenance connection grid computing 
purpose provide accurate record complex computationally expensive process scientific simulation analysis 
unfortunately approaches require preservation inputs process 
case inputs changing database recording state database time workflow executed usually impossible record incomplete 
described offers possibility isolating elements database needed process recording just elements location database 
main purpose support labor intensive database curation 
agenda challenging 
copy paste typically performed web pages kind forms interface text xml editor data may handled intermediate stages operating systems window managers shells 
extent sources intermediaries targets wrapped order capture information needed record details copy paste operation 
challenge web services system architecture user interface design database systems 
grateful christoph koch val tannen fruitful discussions 
serge abiteboul angela ioana manolescu tova milo 
dynamic xml documents distribution replication 
proceedings acm sigmod international conference management data pages 
serge abiteboul paris kanellakis 
object identity query language primitive 
sigmod rec 
central intelligence agency 
world factbook 
www cia gov cia publications factbook 
bairoch 
swiss prot protein sequence database supplement trembl 
nucleic acids research 
bhagwat laura wang tan gaurav 
annotation management system relational databases 
vldb pages 
buneman khanna wang tan 
characterization data provenance 
proc 
international conference database theory 
springer 
peter buneman susan davidson fan hara wang tan 
keys xml 
computer networks august 
peter buneman sanjeev khanna wang tan 
archiving scientific data 
acm transactions database systems march 
bickmore 
nuclear protein database npd sub nuclear localisation functional annotation nuclear proteome 
nucl 
acids res 
richard durbin jean thierry 
elegans database 
documentation code data available anonymous ftp servers lirmm lirmm fr mrc cam ac uk ncbi nlm nih gov nathan foster michael greenwald jonathan moore benjamin pierce alan schmitt 
combinators bi directional tree transformations linguistic approach view update problem 
acm sigplan sigact symposium principles programming languages popl long beach california 
kementsietsidis diego milano 
mondrian annotating querying databases colors blocks 
technical report university edinburgh 
paul groth michael luck luc moreau 
protocol recording provenance service oriented grids 
proceedings th international conference principles distributed systems grenoble france december 
holm nelson 
heart connection hypermedia unified 
commun 
acm 
woodruff stonebraker 
supporting fine grained data lineage database visualization environment 
proc 
international conference data engineering pages 
cui widom 
practical lineage tracing data warehouses 
proc 
international conference data engineering pages 
jun zhao chris wroe carole goble robert stevens dennis quan mark greenwood 
semantic web technologies representing science provenance 
third international semantic web conference hiroshima japan november 

