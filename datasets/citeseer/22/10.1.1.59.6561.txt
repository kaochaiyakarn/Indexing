tandem tr computers done 
jim gray june revised november analysis failure statistics commercially available fault tolerant system shows administration software major contributors failure 
various approaches software fault tolerance discussed notably process pairs transactions reliable storage 
pointed faults production software soft transient transaction mechanism combined persistent provides fault tolerant execution key software fault tolerance 
disclaimer official tandem statement fault tolerance 
expresses author research topic 
early version appeared proceedings german association computing machinery conference office automation erlangen oct 
table contents 
hardware availability modular redundancy 
analysis failures fault tolerant system 
implications analysis mtbf 
fault tolerant execution 
software modularity processes messages 
fault containment fail fast software modules 
software faults soft hypothesis 
process pairs fault tolerant execution 
transactions data integrity 
transactions simple fault tolerant execution 
fault tolerant communication 
fault tolerant storage 
summary 
acknowledgments 

computer applications patient monitoring process control online transaction processing electronic mail require high availability 
anatomy typical large system failure interesting assuming usually case operations software fault caused outage shows time line outage 
takes minutes realize problem restart obvious solution 
takes operator minutes system state analysis 
restart 
large system operating system takes minutes get started 
database data communications systems restart 
database restart completes minutes may take hour restart large terminal network 
network users take tasks performing 
restart saved system perform transient load restart peak load 
affects system sizing 
conventional managed transaction processing systems fail weeks mourad 
minute outage outlined translates availability systems 
availability sounds wonderful hospital patients steel mills electronic mail users share view hour outage days unacceptable 
especially outages usually come times peak demand mourad 
applications require systems virtually fail parts system may fail rest system tolerate failures continue delivering service 
reports structure success system tandem nonstop system 
mtbf measured years orders magnitude better conventional designs 
hardware availability modular redundancy reliability availability different availability doing right thing specified response time 
reliability doing wrong thing 
expected reliability proportional mean time failures mtbf 
failure mean time repair mttr 
availability expressed probability system available availability mtbf mtbf mttr distributed systems parts may available 
situations weights availability devices database available terminals system available 
key providing high availability modularize system modules unit failure replacement 
spare modules configured give appearance instantaneous repair mttr tiny failure seen delay failure 
example geographically distributed terminal networks frequently terminal broken 
system limited availability terminal availability 
terminal communications line failures largely independent provide site availability placing terminals communications lines site 
essence second atm provides instantaneous repair high availability 
increase transaction throughput locations heavy traffic 
approach taken high availability automated teller machine atm networks 
example demonstrates concept modularity redundancy allows module system fail affecting availability system redundancy leads small mttr 
combination modularity redundancy key providing continuous service components fail 
von neumann analytically study redundancy construct available highly reliable systems unreliable components neumann 
model redundancy needed get system mtbf years 
certainly components reliable transistors thinking human neurons vacuum tubes 
obvious von neumann machines required redundancy factor current electronic systems factor achieve high availability 
key difference von neumann model lacked modularity failure bundle wires implied total system failure 
model redundancy modularity 
contrast modern computer systems constructed modular fashion failure module affects module 
addition module constructed fail fast module functions properly stops schlichting 
combining redundancy modularity allows redundancy 
quite economy 
give example modern discs rated mtbf hours hard fault year 
systems duplex pairs discs storing information independent paths controllers discs 
postulating mttr hours assuming independent failure modes mtbf pair mean time double failure hour window years 
practice failures quite independent mttr hours observes high availability 
generalizing discussion fault tolerant hardware constructed follows hierarchically decompose system modules 
design modules mtbf excess year 
module fail fast right thing stops 
detect module faults promptly having module signal failure requiring periodically send am alive message reset watchdog timer 
configure extra modules pick load failed modules 
takeover time including detection module failure seconds 
gives apparent module mtbf measured 
resulting systems hardware mtbf measured decades centuries 
gives fault tolerant hardware 
unfortunately says tolerating major sources failure software operations 
show ideas applied gain software fault tolerance 
analysis failures fault tolerant system studies computer systems fail 
knowledge focused commercial fault tolerant system 
statistics fault tolerant systems quite bit different conventional mainframes mourad 
briefly mtbf hardware software operations times higher reported conventional computing systems fault tolerance works 
hand ratios sources failure conventional systems 
administration software dominate hardware environment minor contributors total system outages 
tandem computers line fault tolerant systems bartlett 
analyzed causes system failures reported tandem month period 
sample set covered systems represents system hours system years 
interviews sample customers believe reports cover total system failures 
failures caused customers environment 
failures caused vendor reported 
measured period failures reported including fire flood 
gives system mtbf years reported years mtbf systematic reporting taken consideration 
week mtbf typical conventional designs 
interviewing large customers keep careful books system outages got accurate picture operation 
averaged year mtbf consistent years reporting 
addition failure statistics reporting expected areas environment operations 
skew data multiplying mtbf numbers analysis reports accurate 
third failures infant mortality failures product having recurring problem 
fault clusters related new software hardware product having bugs 
subtracts systems having infant failures non disc failures remaining failures interesting analysis see table 
system mtbf rises years years 
system administration includes operator actions system configuration system maintenance main source failures 
software hardware maintenance largest category 
high availability systems allow users add software hardware maintenance system operating 
large online maintenance works 
extends system availability orders magnitude 
occasionally years figures goes wrong 
number somewhat speculative system failed undergoing online maintenance hardware software added ascribed failure maintenance 
clear maintenance person typed wrong command wrong module introducing double failure 
usually evidence circumstantial 
notion mere humans single critical mistake decades clearly people careful design tolerates human faults 
system operators second source human failures 
suspect reporting failures 
system fails operator tell 
operators reported failures 
system configuration getting right collection software microcode hardware third major headache reliable system administration 
software faults major source system outages 
tandem supplies lines code customer 
despite careful efforts bugs software 
addition customers write quite bit software 
application software faults probably reported 
guess reported 
true application programs contribute outages software rises total 
come environmental failures 
total communications failures losing lines local exchange happened times addition fire flood 
outages caused cooling air conditioning reported 
power outages major source failures customers emergency backup power north american urban power typically month mtbf 
tandem systems tolerate hours lost power losing data communications state mttr zero customers generally report minor power outages hour 
power outages reported smallest contributor system outages hardware discs communications controllers 
measured set included discs disc hours 
saw disc failures subtracts infant mortality failures disc failures 
case gets mtbf excess hours pair controllers 
approximates year mtbf calculated earlier section 
implications analysis mtbf implications statistics clear key high availability tolerating operations software faults 
commercial fault tolerant systems measured year hardware mtbf table 
believe reporting outages caused hardware 
calculating device mtbf hardware faults sample set 
resulted double failure interruption service 
hardware fault tolerance works 
hardware reliable due better design increased levels integration reduced numbers connectors 
contrast trend software system administration positive 
systems getting complex 
study administrators reported critical mistakes years operation 
gives operations mtbf years 
operators certainly mistakes fatal 
administrators clearly careful practices 
top priority improving system availability reduce administrative mistakes making self configured systems minimal maintenance minimal operator interaction 
interfaces ask operator information ask perform function simple consistent operator fault tolerant 
discussion applies system maintenance 
maintenance interfaces simplified 
installation new equipment fault tolerant procedures maintenance interfaces simplified eliminated 
give concrete example tandem newest discs special customer engineering training installation obvious scheduled maintenance 
secondary implication statistics contradiction new changing systems higher failure rates 
infant products contributed third outages 
maintenance caused third remaining outages 
way improve availability install proven hardware software leave 
adage says broken don fix 
hand tandem study high percentage outages caused known hardware software bugs fixes available fixes installed failing system 
suggests install software hardware fixes soon possible 
contradiction change change asap 
consensus risk change great 
installations slow install changes rely fault tolerance protect major release 
worked yesterday probably tomorrow 
separate software hardware maintenance 
software fixes outnumber hardware fixes orders magnitude 
believe causes difference strategy hardware software maintenance 
forego hardware maintenance studies show may short term disastrous long term 
install hardware fixes timely fashion 
possible maintenance scheduled minimize impact possible mistake 
software appears different 
study recommends installing software fix bug causing outages 
study recommends waiting major software release carefully testing target environment prior installation 
adams comes similar adams points bugs chance rediscovery slim 
statistics suggest availability major goal avoid products immature suffering infant mortality 
fine leading edge technology avoid bleeding edge technology 
implication statistics software fault tolerance important 
software fault tolerance topic rest 
fault tolerant execution analysis software accounts system outages 
quite mtbf years 
volume tandem software lines growing year 
continues improving coding practices code testing little hope getting bugs software 
conservatively guess bug lines code remains program goes design reviews quality assurance beta testing 
suggests system bugs 
bugs cause system failures system tolerates software faults 
keys software fault tolerance software modularity processes messages 
fault containment fail fast software modules 
process pairs tolerate hardware transient software faults 
transaction mechanism provide data message integrity 
transaction mechanism combined process pairs ease exception handling tolerate software faults 
section expands points 
software modularity processes messages hardware key software fault tolerance hierarchically decompose large systems modules module unit service unit failure 
failure module propagate module 
considerable controversy modularize software 
starting burroughs continuing languages mesa ada compiler writers assumed perfect hardware contended provide fault isolation static compile time type checking 
contrast operating systems designers advocated run time checking combined process unit protection failure 
compiler checking exception handling provided programming languages real assets history favored run time checks plus process approach fault containment 
virtue simplicity process processor misbehaves 
process provides clean unit modularity service fault containment failure 
fault containment fail fast software modules process approach fault isolation advocates process software module fail fast function correctly detect fault signal failure operating 
processes fail fast defensive programming 
check inputs intermediate results outputs data structures matter course 
error detected signal failure 
terminology christian fail fast software small fault detection latency 
process achieves fault containment sharing state processes contact processes messages carried kernel message system 
software faults soft hypothesis developing step fault tolerance process pairs need software failure model 
known hardware faults soft hardware faults transient 
memory error correction checksums plus retransmission communication standard ways dealing transient hardware faults 
techniques variously estimated boost hardware mtbf factor 
conjecture similar phenomenon software production software faults soft 
program state reinitialized failed operation retried operation usually fail second time 
consider industrial software system gone structured design design reviews quality assurance alpha test beta test months years production hard software bugs ones fail retry gone 
residual bugs rare cases typically related strange hardware conditions rare transient device fault limit conditions storage counter overflow lost interrupt race conditions forgetting request semaphore 
cases resetting program quiescent state re executing quite environment slightly different 
worked minute ago 
assertion production software bugs soft go away look known systems programmers 
bohr atom solid easily detected standard techniques boring 
may elude years execution 
may perturb situation just disappear 
analogous heisenberg uncertainty principle physics 
tried quantify chances tolerating re execution 
difficult 
poll yields quantitative 
experiment went follows error log dozen systems examined 
constructed collection fail fast processes 
processes detects fault stops lets brother continue operation 
brother software retry 
brother fails bug 
measured period software faults remainders 
related study reported mourad 
mvs xa functional recovery routines try recover software hardware faults 
software fault recoverable 
study software faults system software functional recovery routines 
routines success rate continuing system execution 
mvs extend system software mtbf factor 
nice quantify phenomenon 
systems designers know experience exploit hypothesis improve software fault tolerance 
process pairs fault tolerant execution think fail fast modules produce reliable unavailable system modules stopping time 
fault tolerant hardware configuring extra software modules gives mttr milliseconds case process fails due hardware failure software 
modules mtbf year dual processes give acceptable mtbf pair 
process triples improve mtbf parts system operators orders magnitude worse mtbf 
practice fault tolerant processes generically called process pairs 
approaches designing process pairs lockstep design primary backup processes synchronously execute instruction stream independent processors kim 
processors fails simply continues computation 
approach gives tolerance hardware failures gives tolerance 
streams execute programming bug lockstep fail exactly way 
state checkpointing scheme communication sessions connect requestor process pair 
primary process pair computation sends state changes reply messages backup prior major event 
primary process stops session switches backup process continues conversation requestor 
session sequence numbers detect duplicate lost messages resend reply duplicate request arrives bartlett 
experience shows checkpointing process pairs give excellent fault tolerance see table programming checkpoints difficult 
trend away approach delta persistent approaches described 
automatic checkpointing scheme state checkpoints kernel automatically manages checkpointing relieving programmer chore 
described borg messages process saved message kernel backup process 
takeover messages replayed backup roll forward primary process state 
substantial computation storage required backup primary state copied backup message log replay discarded 
scheme send data state checkpointing scheme high execution cost 
delta checkpointing evolution state checkpointing 
logical physical updates sent backup 
adoption scheme tandem cut message traffic half message bytes factor 
deltas virtue performance making coupling primary backup state logical physical 
means bug primary process corrupt backup state 
persistence persistent process pairs primary process fails backup wakes null state amnesia happening time primary failure 
opening closing sessions checkpointed backup 
called stable processes lampson 
persistent processes simplest program low overhead 
problem persistent processes hide failures 
primary process fails database devices manages left mess requestor notices backup process amnesia 
need simple way resynchronize processes common state 
explained transactions provide resynchronization mechanism 
summarizing pros cons approaches lockstep processes don tolerate 
state checkpoints give fault tolerance hard program 
automatic checkpoints inefficient send lot data backup 
delta checkpoints performance hard program 
persistent processes lose state case failure 
argue transactions combined persistent processes simple program give excellent fault tolerance 
transactions data integrity transaction group operations database updates messages external actions computer form consistent transformation state 
transactions acid property atomicity actions transaction happen 
commits aborts 
consistency transaction see correct picture state concurrent transactions updating state 
integrity transaction correct state transformation 
durability transaction commits effects preserved failure 
programmer interface transactions quite simple starts transaction asserting begintransaction verb ends asserting verb 
system rest 
classical implementation transactions uses locks guarantee consistency log audit trail insure atomicity durability 
shows concept generalizes distributed fault tolerant system 
transactions relieve application programmer handling error conditions 
things get complicated programmer system calls cleans state resetting back transaction 
transactions simple fault tolerant execution transactions provide reliable execution data availability recall reliability means doing wrong thing availability means doing right thing time 
transactions directly provide high system availability 
hardware fails software fault transaction processing systems go system restart minute outage described 
possible combine process pairs transactions get fault tolerant execution avoid outages 
argued process pairs tolerate hardware faults software 
kinds process pairs difficult implement 
easy process pairs persistent process pairs amnesia primary fails backup takes 
persistent process pairs leave network database unknown state backup takes 
key observation transaction mechanism knows undo changes incomplete transactions 
simply abort uncommitted transactions associated failed persistent process restart transactions input messages 
cleans database system states resetting point transaction began 
persistent process pairs plus transactions give simple execution model continues execution hardware faults 
key encompass data management system fault tolerance 
programmer writes fail fast modules conventional languages cobol pascal fortran transaction mechanism plus persistent process pairs program robust 
unfortunately people implementing operating system kernel transaction mechanism device drivers write conventional application programmers 
reason tandem integrated transaction mechanism operating system transaction mechanism available software possible 
fault tolerant communication communications lines unreliable part distributed computer system partly numerous partly poor mtbf 
operations aspects managing diagnosing failures tracking repair process real headache gray 
hardware level fault tolerant communication obtained having multiple data paths independent failure modes 
software level concept session introduced 
session simple semantics sequence messages sent session 
communication path fails alternate path tried 
paths lost session endpoints told failure 
timeout message sequence numbers detect lost duplicate messages 
transparent session layer 
sessions thing process pairs session switches backup process pair primary process fails bartlett 
session sequence numbers called bartlett resynchronize communication state sender receiver requests replies idempotent 
transactions interact sessions follows transaction aborts session sequence number logically reset sequence number transaction intervening messages canceled 
transaction commits messages session reliably delivered exactly spector 
fault tolerant storage basic form fault tolerant storage replication file media independent failure characteristics example different disc spindles better disc tape 
file mtbf year files mtbf copies mtbf tandem system failure statistics show factors dominate point 
remote replication exception argument 
afford storing replica remote location gives improvements availability 
remote replicas different administrators different hardware different environment 
software 
analysis table protect failures non software failures 
gives excellent protection remote replication guards software faults 
ways remotely replicate data exact replicas updates replica done soon possible periodic updates 
gray describes representative systems took different approaches long haul replication 
transactions provide acid properties storage atomicity consistency integrity durability 
transaction journal plus archive copy data provide replica data media independent failure modes 
primary copy fails new copy reconstructed archive copy applying updates committed archive copy 
durability data 
addition transactions coordinate set updates data assuring apply 
allows correctly update complex data structures concern failures 
transaction mechanism undo changes goes wrong 
atomicity 
third technique fault tolerant storage partitioning data discs nodes limiting scope failure 
data geographically partitioned local users access local data communication net remote nodes 
gray gives examples systems partition data better availability 
summary computer systems fail variety reasons 
large computer systems conventional design fail weeks due software operations mistakes hardware 
large fault tolerant systems measured mtbf orders magnitude higher years weeks 
techniques fault tolerant hardware documented 
quite successful 
high availability system hardware minor contributor system outages 
applying concepts fault tolerant hardware software construction software mtbf raised orders magnitude 
concepts include modularity defensive programming process pairs tolerating soft faults 
transactions plus persistent process pairs give fault tolerant execution 
transactions plus communications sessions give fault tolerant communications 
transactions plus data replication give fault tolerant storage 
addition transaction atomicity coordinates changes database communications net executing processes 
allows easy construction high availability software 
dealing system configuration operations maintenance remains unsolved problem 
administration maintenance people doing better job reason expect 
hope better people 
hope simplify reduce human intervention aspects system 
acknowledgments people helped analysis tandem system failure statistics robert bradley jim cathy fitzgerald pat dean judd steve franco carl harald duane wolfe 
presenting analysis assumptions integrate contradictory stories different observers events 
take full responsibility 
robert bradley gary gilbert bob horst dave carl carol minor franco bob white comments clarified presentation 
special due joel bartlett especially cristian tried hard accurate precise 
adams adams optimizing service software products ibm res 
dev vol 
jan 
bartlett bartlett nonstop kernel proceedings eighth symposium operating system principles pp 
dec 
borg borg message system supporting faulttolerance acm os review vol 

transaction monitoring encompass proc 
th vldb september 
tandem computers tr 
robustness crash distributed database non shared memory multi processor approach proc 
th vldb sept 
tandem computers tr 
aspects high volume production online banking system proc 
int 
workshop high performance transaction systems asilomar sept 
cristian cristian exception handling software fault tolerance ieee trans 
computers vol 

dp performance analysis tandem memo 
gray gray distributed database systems case studies appear ieee tods tandem tr 
reuter principals transaction oriented database recovery acm computing surveys vol 
dec 
kim kim highly available systems database applications acm computing surveys vol 
march lampson lampson ed lecture notes computer science vol 
chapter springer verlag 
mourad mourad andrews reliability ibm xa operating system digest th annual int 
sym 
fault tolerant computing june 
ieee computer society press 
schlichting schlichting schneider fail processors approach designing fault tolerant computing systems acm tocs vol 
aug 
spector multiprocessing architectures local computer networks phd thesis stan cs stanford 
von neumann von neumann probabilistic logics synthesis reliable organisms unreliable components automata studies princeton university press 

