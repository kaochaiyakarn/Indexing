rationale semantically enhanced library languages presents rationale novel approach providing expressive maintainable cost effective special purpose languages semantically enhanced library language sel language sell dialect created language library subsetting result tool understands syntax semantics underlying language library 
resulting language expressive specialpurpose language provide semantic guarantees special purpose language 
sell rely tool chain user community major generalpurpose programming language 
examples sells safe parallel real time pivot program analysis transformation infrastructure 
part rationale discusses practical problems various popular approaches providing special purpose features compiler options preprocessors 
need specialized languages 
researchers need experiment new language features concurrency features facilities integration databases graphics developers gain couple orders magnitude reductions source code size corresponding reductions development time defect rates special purpose languages intended domains 
unfortunately special purpose languages typically hard design tedious implement expensive maintain despite obvious utility tend die young 
special purpose library obvious alternative special purpose language 
library express exploit semantic guarantees host submitted bjarne stroustrup department computer science texas university college station tx labs research bs cs tamu edu language provides 
basic idea semantically enhanced library languages sel languages simply sells augmented library general purpose language expressive special purpose language subsetting extended language tool provide semantic guarantees 
guarantees provide better code better representations sophisticated transformations possible full base language 
example provide support parallel operations containers library 
analyze program ensure undesirable access elements containers occurs task simplified enforcing ban languages features happened undesirable context 
perform high level transformations parallelizing advantage known semantics libraries 
library sell benefit extensive educational tools library infrastructure base language 
cost designing implementing sell minuscule compared special purpose language small user base 
examples iso standard supported pivot infrastructure program analysis transformation 
focus templates provide key mechanism statically type safe expression advanced ideas 
called special purpose language called domain specific language 
distinctions terms appear relevant discussion please consider terms equivalent context 
organization 

state ideals support software development maintenance 

usually fatal problems face new programming languages 

discuss alternative approaches dialects macro languages 

focus sell approach way supported pivot 

sketch design sells type safe parallel real time 

ideals specific problem area design specialpurpose language exactly matches desired syntax semantics domain desires programmers language 
ideal world general purpose language match special purpose language applied specific problem area 
special purpose language done perfectly correspondence fundamental concepts application domain language constructs 
language constructs minimal directly reflect terminology field common major textbooks 
new ideal 
fortran job task arithmetic cobol successfully attacked business processing needs time 
thousands languages designed specific domains designed try able effectively express ideal specific domain 
lisp simula originate main approaches directly express application domain concepts directly code functional object oriented approaches 
languages numerous offspring set concepts represented library related functions classes 
general purpose near general purpose languages ideal perfect language task takes form libraries 
expect designed special purpose language 
concise notation 
consider simple common useful example note algebraic notation operators 
notation important concise expression key ideas community 
particular notation years history mathematics scientific community 
essentially languages handle variables denote scalar values integers floating point numbers 
vectors matrices things get difficult general purpose language doesn builtin vector matrix types people write kind code expect performance achieved introduce temporary variables probably need loop fusion doing element operations minimal number loops 
matrices vectors sparse want take advantage known properties vectors upper triangular library code needed code pushes modern general purpose language limit mainstream languages efficiently handle example 
move require computation large vectors matrices computed parallel hundreds processors 
advanced library requires support non trivial run time support system 
go take advantage semantic properties operations remembering result operation leaves elements identical 
simpler add operation doesn involve reading elements examples preceding numerical calculation symbolic evaluation phase say doing symbolic differentiation lead immense improvements accuracy performance 
leave domain libraries considered useful 
reasoning examples realistic ones led creation host special purpose languages various forms scientific calculation 
ideal notation offered general purpose language just 
basis comprehension fast compilation performance exploiting type information semantic properties reasoning programs implementation associated tools programmer productivity making facilities accessible professionals need program field expertise don want professional programmers physicists engineers animators graphical designers 
clarity code greatly ease maintenance 
note ideals strengths special purpose general purpose languages conflict 
definition general purpose language aims allowing programmer express just 
hand specialpurpose language gains strength allowing programmer express sense specific domain 
comes program analysis optimization great strength special purpose language 
example optimizer tries symbolic differentiation program language focused exclusively scientific computation worry programmer trying differentiate draw function graphics system 
convenient graphical interfaces associated special purpose languages 
extreme example direct representation ideas special purpose language 
interfaces equal effect code general purpose language guis examined 
problems fun design new programming language 
doing initial implementation trying new language clever examples 
plain hard bring implementation level needed users care language design subtleties 
building supporting tools debuggers profilers hard intellectually stimulating people design programming languages 
real users need basic numeric libraries basic graphical facilities libraries interfacing code written languages hand holding tutorials detailed manuals doing things interesting educational doing repeatedly tedious expensive 
porting implementation tool base key applications new machines platforms compilers repeatedly tedious career death people 
basically designing implementing maintaining supporting language tremendously expensive 
large user community shoulder long term parts 
net effect order new languages developed year languages unsupported year 
language death doesn just happen bad languages 
example find collection languages high performance computing parallel programming 
appealing aspects brilliant insights supported enthusiastic research group years stable funding 
major today 
supported organization outside developed 
dead interestingly survivor charm library language 
addition really ambitious language design projects thousands researchers dialects associated tools research 
dialects built scratch compiler key support tools modified serve new dialect 
essentially unsupported graduation funding expiration tenure promotion transfer maintenance responsibilities change fashion change part tool chain change management consolidation operations languages designed research claim aimed non research claim language designers harbor dreams wide languages 
new languages dialects see non research 
ones generally maintenance organizations 
just prejudice learn change 
perfectly reasons lack enthusiasm maintenance organizations 
example supply reasonably priced support personnel tends severely limited 
designers researchers typically rarely want maintainers typical maintainer salary conditions career prospects 
new language dialect tool chain needs kept current sync tools 
cost doing minor dialect typically higher major language cost amortized millions users 
reasons solid economic management terms proponents new language dialect 
example largest application ml rewritten non research language uses interesting rule language seen early precursor aspect oriented programming 
tool chain problems don just happen mom pop languages 
seen major organizations abandon ada just reason 
similarly education major problem 
language isn taught universities schools programmers scarce organizations afford re train new hires 
furthermore new programmers overly impressed favorite language resists training 
seen organizations abandon fortran reason 
effects mutually reinforcing 
special purpose languages proprietary di love proven wrong counter example please tell ll exceptional success 
get large user base tool set worry decline 
minor research languages simply gain tool support availability wide range platforms users mainstream languages take granted 
new language really minor dialect existing language design implementation effort recreating facilities debuggers profilers database interfaces gui interfaces tend lie outside main interest language designers 
reconstruction standard facilities provided languages lots little ideas people add improvements 
unfortunately little improvements tend isolate users 
isolates read locks users provides better support competition little gratuitous replication incompatibility 
compatibility just hard typically 
users take sustain infrastructure 
course depends lot things generally requires people single application 
fact typically takes small 
significantly people took create initial design implementation language 
usual people paid revenues sales teaching special purpose language comes pressure widely useful 
special purpose language starts offer facilities general computation general data structures access external systems database facilities graphics facilities result summarized special purpose programming language wants grow general purpose programming language typically precursor language death instability lack design focus added cost retreat commercially viable niche covers small part special purpose language natural application domain 
accompanied lot commercial hype tendency hide obscure genuine technical information 
probably special purpose languages suffer edge effect problems 
edge effect known falling cliff effect comes programmer needs isn supported special purpose language 
example programmer language specifying interactive graphics want say viewed sufficient distance groups objects may considered object 
graphics system provided feature case didn difference real time response factor 
programmer 
definition special purpose language edges 
students novices effect nuisance professionals working large projects airline control application graphics example chosen result abandonment special purpose language favor alternative graphics library written general purpose language 
programmer changing tools isn option 
pure special purpose language new primitive operation object added 
application programmer may effect basic model special purpose language 
seen time adding simple feature vary day ask local expert wait overnight tool build half year wait release 
kind delay kill project considered risks choosing designing tools 
library tool allows programmer add code written general purpose language problem minor 
final nail special purpose languages designed relatively easy emulate facilities general purpose language 
value special purpose language really language implementation particular syntax programmers devoted syntax 
value design programming model techniques possibly special data structures sustaining applications 
typically specialpurpose language implementation details separated language directly general purpose language 
easier key components written general purpose language 
needed direct nice programming interface general purpose language 
definition nice reflects experience gained special purpose language 
please note language rarely killed problems mentioned 
typically language combination problems 
list intended complete necessary fatal special purpose languages survive fail reasons listed 
exhaustive list problems probably couldn compiled scope 
case study detailed study new languages provide solid evidence observations useful 
doubt dampen enthusiasm designing new languages 
ll just small example proceed alternative approach providing new facilities programmers 
unrecognized precursor aspect oriented programming 
basically extension define actions triggers actions 
example retirement policy associated employee class rule employee retirement policy age status retired cout name retire simple easy teach 
furthermore implementation small increment relatively easy maintain 
superset general purpose language edge effects 
reasonably large telecom operations system application 
tutorials academic papers manuals experience reports implementation provided 
find web 
practical purposes died 
reasons basically porting training costs high compared benefits 
mean dead 
completely unused 
necessarily 
see surprised wasn project 
probably couple research groups trying 
despite ideas appear fundamentally sound despite avoiding edge effects embedded general purpose language despite having implementation sustain major application suffered various problems mentioned section failed gain major outside originating organization 
alternatives cases designing new language economically viable solution problem provide special purpose facilities 
language looks years maintenance porting education expensive result death best stagnation tool chain user community 
technical economical choice designing new language mistake 
language design efforts resources reinventing wheels die having provided poor return investment 
resources better spent improvements existing major language libraries tools 
furthermore new languages divide community creating barriers communication new ideas infrequently generating hype trigger language wars distrust new ideas 
problems fault new language new ideas explored exploited 
bring ideal direct expression ideas code wider 
assume situations designing new language undesirable effects spread ideas 
alternatives task provide programmers improved tools expression ideas code 
popular approaches 
compiler options pragmas 
libraries 
preprocessed languages 
dialects effective approach cases ways deemed successful 
consider fundamental practical strengths weaknesses 
possible approaches 
example consider 
dynamically typed languages 
new general general purpose language dynamically typed languages considered 
main reason interest compile time guarantees 
basically dynamically typed languages constitutes different world statically typed world focus 
dealing world scope 
consider building new general purpose language providing facilities complete special purpose language expressed directly mechanism general purpose language 
holy general purpose language design 
fact years stream offering facilities defining extended syntax embedded parsers associating semantics newly defined constructs 
languages scope 
part reason providing language means organizations needing special purpose language 
problem ironically languages suffer problems special purpose languages small user communities insufficient support 
success rate general purpose languages lower rate special purpose languages 
compiler options pragmas people add compiler options pragmas rarely think language design 
particular worlds pragma ignored compiler 
new pragma compiler option introduces new dialect 
consider building system specifying system configuration porting system documenting system trying understand application code 
assume moment options pragmas back door language extension 
simply insufficient doing really interesting direction better expression ideas 
special purpose languages require additions 
require restriction certain undesirable language features 
compiler options crude mechanism 
options tend apply indiscriminately example want eliminate goto 
option eliminate gotos acceptable ones breaking loops highly optimized matrix implementation essential ones implementation state machines generated highlevel modeling library language 
needed distinguish uses undesirable language feature user code implementation trusted components 
compiler options best left conventional uses backwards compatibility switches pragmas best avoided 
libraries libraries provide expressive power notational convenience approximate built language features 
hard ensure consistent library set libraries 
harder ensure consistent subset library common bundled single unit distribution 
language features interfere library attempts achieve 
standard library classical example 
provides behaved containers programmers arrays prevents meaningful guarantees program 
ambitious try achieve terms generality performance libraries elaborate brittle 
example template meta programming libraries aiming general support high performance numerical computation reach goal cost complete obscurity implementation details visible users debugging 
library breaks zero overhead principle search generality 
library eliminate basic problems host language semantics 
example aliasing problems persists library provide guarantees needed confidence transformations optimizations 
library partially defined terms implementation specified entity separate host language implementation 
fundamental problem common problem serious comparison special purpose language 
preprocessed languages generating code higher level language lowerlevel popular decades 
example early compilers generated assembly code early compilers generated code gui builders cad systems idl processors modeling languages generate code languages java 
language source preprocessed host language 
resulting languages language processors referred names preprocessors macros wizards builders meta languages 
way distinguishing implementation language implemented techniques facility defined translation techniques get error message target language compiler 
preprocessor compiler 
example criteria original translators assembler compilers macros microsoft wizards rely preprocessors 
templates right edge receive compiler support significantly concepts 
compiler error messages fail refer original template source spectacularly badly 
consequence programmers consider templates macros avoid avoid uses consider nontrivial 
consider preprocessed languages abstraction facilities integrated language 
language generator macro language modeling language defined preprocessor special purpose language 
requires documentation training tool support 
particular need preprocessor matching tool chain compiler 
preprocessor integrated tool chain shipped implementation implies lock slow upgrades 
uncommon preprocessor current version compilers tools underlying language 
main reason preprocessor implementer doesn get access compilers significantly users 
commonly leads users having painful choice preprocessor latest greatest compiler tools 
creates friction preprocessor users non preprocessor users collaborate 
debugging compatibility portability problems persist old compilers don just die 
take large organization better part decade get graded latest version just fall release 
example took forever decade get template implementations mainstream 
users rely decade old compilers 
preprocessed language tends problems interacting type system host language 
having type system host language purpose preprocessed language elegantly express things expressed elegantly host language 
error detection error reporting problems just obvious examples 
concepts type system types developed improve templates support generic programming template metaprogramming example mechanism addressing problem mismatch type systems higherlevel language lower level host language 
higher order types fills role specification abstractions functional languages 
preprocessed language share problems special purpose language stand implementation 
fact tools complete definition precise separate host language grow special purpose languages 
conversely implementation type system support integrated host language cease separate languages abstraction mechanisms host language templates prominent example 
addition preprocessing languages tend suffer problems libraries code conforms conventions preprocessed language guarantees language rely offer weakens 
dialects take popular general purpose language add desired features compiler run time support system private dialect 
may popular way creating new language 
result quite special purpose language special purpose features embedded general purpose language 
working production quality general purpose language implementation hard 
people simultaneously making modifications implementation 
furthermore compilers debuggers libraries tools required parts implementations major implementations target platforms 
consequently people extend language way minor messy implementation modifying part tool chain need target platforms care 
reasonable cases essential allow people focus efforts design implementation new facilities want 
unfortunately effect major vendors adopt new dialect designers left private language 
implies usual private language costs usual mortality rate 
addition essentially impossible remove undesirable features dialect 
doing destroy compatibility basically move language away dialect classification special purpose language classification 
sell approach analysis sections paints grim picture problems applying language design implementation techniques support software development 
leave field big corporations deep pockets design development apply marketing muscle live results may 
alternative withdraw cosy design rest world likes interference input 
alternative point way dodge horns dilemma 
superset add libraries provide application specific facilities 
subset subtract features outside library implementation provide semantic guarantees result subset superset language called semantically enhanced library language 
subsetting aim clean regular language 
sell aim narrower application domain host languages chance result simpler host 
consider approach terms expressiveness really express things library special purpose language tools get stuck developing maintaining messy tool chain 
claim answers large range problems low cost prefer sell approach traditional approaches mentioned sections 
obviously sell approach completely new fact attempt synthesize worked best traditional approaches dodge worst problems 
please note don claim approaches making special purpose features available alternatives 
absurd 
claim success rate new languages measured survival language decade outside group originated low costs higher realized 
argument expressiveness libraries pair old bell labs 
library design language design 
language design library design need 
words expressiveness library depends ability general purpose language define libraries 
functional programming object oriented programming generic programming prominent schools thought give prominent role library building 
skills needed write library similar skills needed high systems programming application building 
furthermore write library rely existing infrastructure compilers debuggers libraries education 
result libraries cheap produce compared alternatives 
tools part easily lead debugging tool chain maintenance problems characteristic dialects 
avoid need tool expressing constraints high level transformations minimally invasive tool chain 
keep tool problems control need general tool doing fit tool chains 
need general purpose tool analysing source code performing source level transformations relies standard interface compilers 
principle general purpose programming language host language sell approach 
unsurprisingly favorite chosen host language virtues stretching broad range application areas performance large lively user community support compilers libraries tools essentially platforms :10.1.1.26.9545
abstraction facilities provide adequate support object oriented programming generic programming traditional procedural programming multi paradigm programing combining elements 
classes plus templates plus overloading basis expressiveness performance 
obviously improvements possible compatibility constraints imposed huge user community wide range application areas 
particular hope standard offer concepts type system types general flexible facilities remedies minor 
unfortunately compatibility constraints low level system components precludes obvious weaknesses overly implicit conversions incl 
array pointer conversion unchecked unions 
brief overview pivot pivot general framework analysis transformation programs 
pivot designed handle complete iso especially advanced uses templates including proposed features 
compiler independent 
lots tools static analysis transformation programs 
handle iso standard specialized particular forms analysis transformation combination tools :10.1.1.26.9545
design pivot focussed advanced uses templates generic programming template metaprogramming experimental libraries basis language extension 
static types central libraries sell approach requires representation deals types class citizens allows analysis transformation properties 
community discussed heading concepts receive language support iso standard 
central part pivot fully typed syntax tree called ipr internal program representation source ipr generator compiler ipr object code ipr applications idl xml information 
overview pivot infrastructure get ipr program need compiler compiler knows program represent completely syntactic type information useful form 
particular simple parser doesn understand types credible general job 
interface compiler appropriate specific compiler minimally invasive fashion 
compiler specific ipr generator produces ipr translation unit basis 
applications interface code ipr interface 
run compiler time able store merge translation units compiler intervention produce persistent form ipr called external program representation 
ipr complete arguably minimal 
traversal code represented ipr done ways including ordinary graph traversal code visitors iterators tools rose 
needs application ipr determines traversal method suitable 
currently pivot support annotation language 
pivot programs annotate ipr nodes facility programmer embed annotations source text 
providing facility easy programmers starts depend annotations created new special purpose language 
want explore done sell approach relying standard conforming source text 
examples sells proof eating presenting sell presentation general idea sells 
details illustrate idea sell complete sells 
safe inherits host opportunities type violations adds 
possible hard write type safe code 
easy know type violations exist program especially large program written maintained programmers variety backgrounds variety ideas constitutes safe code 
support type safe dialect maintains essential expressiveness efficiency 
particular want sure type violations code 
really sure provide tool combination tools detect violations 
absence tools rely humans follow rules 
probably better state art software development organizations second best 
consider major code 
buffer overruns reading writing outsider range array 
dereferencing uninitialized pointer zero valued pointer pointer deleted object 
misuse union write union variable type read 
misuse cast cast int pointer type object type exist new pointer points 
misuse void assign int void cast void double 
deleting object twice deleting object pointer deletion 
obvious approach avoiding problems provide library set libraries saves programmer having error prone features 
example arrays programmer range checked vector union user tagged union type 
casts exception type safe dynamic cast void rarely useful outside low level easily encapsulated uses simply avoided 
counted pointers memory leaks won happen depending cyclic data structures handled 
pointers checked don access invalid pointers double deletion easily detected 
basically errors detected run time systematically turned exceptions making safe dynamically type safe language 
exceptions may favorite language feature useful contexts universally reporting run time type violations languages deemed type safe 
fairly easily write code doesn suffer obvious type safety problems 
outlined sell superset created adding checked vectors smart checked pointers tagged union type 
gained users persist unsafe features unsafe ways 
example write safe code just double int int char new char double new double shape pc new circle point delete pc rotate pc draw pc void vp delete vp delete return obviously subsetting enforcement part sell design detect eliminate unsafe uses host language 
please note tool distinguish banned features uses features implementation extensions direct user 
case dumb tool compiler option banning uses pointer prevent vector uses pointers internally 
pivot catch uses pointers outside supporting classes 
done code rewritten look unique ptr vector double messy int vector int string vector double scoped ptr shape pc new circle point ok checked run time caught run time pc rotate pc draw pc return unique ptr vector double better ignoring messy magic constants safe problems real world programming areas dealt performance compatibility 
code hints significant concern performance library design scoped ptr deletes object scope prevents keeping object 
similarly unique ptr cooperates vector ensure elements transferred messy destroyed part exit 
didn just rely counted pointers garbage collector deal resource problems 
pivot better 
default uses pc messy checked validity assuming scoped ptr null pointer 
bit simple flow analysis eliminate second check clever analysis reveal checking necessary see pc properly initialized assigned pivot 
kind analysis experimentally private languages dialects 
pivot apply library raw 
compatibility harder problem 
known safe 
rewrite recompile code system 
layout compatibility data structures required 
safe just illustration full blown sell 
parallel emergence cheap multiprocessors clusters multi core chips concurrency increasingly important 
languages dialects designed address concurrency needs high performance scientific computing 
build library offers parallel operations containers spirit stl 
example void double double find range criteria sort cout ordinary serial output elements imagine elements program runs serious supercomputer blue gene fact 
find execute parallel processors run time system deems reasonable finding elements meets criteria 
find finds lots elements sort processors 
sophisticated library combined advanced run time support system 
pivot help 
starters produce information run time support system needs function 
secondly provide classical flow analysis aliasing information 
programmed recognize usage patterns allow algorithm substitution initial matrix algebra example alert programmer problems opportunities 
real time problems real time code embedded systems combine concerns reliability performance constrained circumstances 
problems solutions overlap safe unique require operation performed known constant time 
naturally real time embedded systems written rule see address 
unusable 
free store general new delete 
exceptions assuming inability easily predict cost throw 
class hierarchy navigation dynamic cast absence constant time implementation add suitable support library 
fixed size array class conversion pointer knows size 
safe pointer classes 
memory allocation classes guarantee constant time allocation deallocation allowed pools stacks 
pivot eliminate dangerous operations listed user code 
principle job 

programs sort program analysis 
programs tend relatively small allow dynamic linking 
pivot allow exceptions error reporting verify exception caught calculate upper bound throw 
special hard example tool verify resource consumption acceptable bounds 
general lots pivot context embedded systems 
depends specific application boundary sell application support 
example uncommon embedded program permissive facilities startup phase 
sell define startup means called start apply stringent rules outside 
half outlines problems facing programmers providing special purpose language defined common ways separate language compiler options libraries pre processor general purpose language dialect 
picture painted leading suggested alternative semantically enhanced library languages sells sell approach offers practical economical alternative common ways implementing extensions dialects specialpurpose languages 
libraries limits problems compatibility tool chains 
adding tool support enhances appeal libraries 
gabriel dos reis students reading drafts making detailed suggestions 
anonymous reviewers making major suggestions require papers 
ping rus steven saunders tim smith gabriel nathan thomas nancy amato lawrence rauchwerger adaptive generic parallel library wkshp 
lang 
comp 
par 
comp 
pp 
falls kentucky aug 
otto karl haveraaen eelco visser design transformation system domain specific optimisation programs 
www org 
ibm www research ibm com 
william mark cg system programming graphics hardware language 
proceedings siggraph 
fernandez silkroute framework publishing relational data xml 
acm trans 
database syst 
erich gamma design patterns 
addison wesley 
michael gibbs bjarne stroustrup fast dynamic casting 
software practice experience 
vol issue 

international organization standards international standard iso iec 
programming languages nd ed 
wiley 
isbn 
trevor jim cyclone safe dialect usenix annual technical conference pages monterey ca june 
lengauer domain specific program generation 
revised papers dagstuhl seminar 
march 
lncs 
diane litman anil mishra peter patel schneider modeling dynamic collections interdependent objects path rules 
proc 
th annual acm conference object oriented programming systems languages applications oopsla 
october 
www research att com sw tools www bell labs com project 
george necula cil intermediate language tools analysis transformation 
cs 
berkeley edu cil 
pivot program analysis transformation infrastructure developed texas university 
steven saunders lawrence rauchwerger adaptive platform independent communication library proc 
acm sigplan symp 
prin 
prac 
par 
prog 
ppopp pp 
san diego ca jun 
tamu edu groups research 
markus daniel quinlan 
source architecture user defined optimizations 
proc 
joint modular languages conference volume lecture notes computer science pp 
springer verlag june 
rose 
schupp gregor musser 
liu 
semantic behavioral library transformations 
information software technology october 

jeremy siek andrew lumsdaine matrix template library generic programming approach high performance numerical linear algebra 
vol 
lecture notes computer science 
jeremy siek douglas gregor ronald garcia jaakko rvi andrew lumsdaine 
concept 
technical report iso iec sc jtc wg january 
stroustrup programming language special ed addison wesley 
isbn stroustrup design 
users journal 
may 
stroustrup dos reis concept design 
technical report iso iec sc jtc wg april 
stroustrup examples applications www research att com bs applications html 
compilers www research att com bs compilers html 
tod arrays vol 
lecture notes computer science 
wilson lu editors parallel programming 
addison wesley 

isbn 
