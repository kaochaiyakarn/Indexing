context assist personal file retrieval craig soules august cmu cs school computer science computer science department carnegie mellon university pittsburgh pa submitted partial fulfillment requirements degree doctor philosophy 
thesis committee prof gregory ganger chair prof jamie callan dr jim gemmell microsoft research prof christopher olston craig soules funded part past members companies pdl consortium including apc emc hewlett packard hitachi ibm intel microsoft network appliance oracle seagate sun symantec usenix 
material research sponsored part air force research laboratory agreement number 
ii context assist personal file retrieval father 
iv context assist personal file retrieval personal data growing increasing rates fueled growing market personal computing solutions dramatic growth available storage space platforms 
users longer limited store faced problem organizing data find 
unfortunately data sets grow complexity organizing sets grows 
problem driven sudden growth search tools aimed personal computing space designed assist users locating data disorganized file space 
despite sudden growth area local file search tools inaccurate 
inaccuracies long standing problem file data evidenced attribute naming systems relied content analysis provide meaningful attributes files automated organization 
file search tools lagged search tools designed world wide web wide spread 
interestingly despite significant increases non textual data web images movies web search tools continue effective 
web contains key information currently unavailable file systems context 
capturing context information links describing data web inter related web search tools significantly improve quality search content analysis techniques 
describes connections context enhanced search tool utilizes temporal locality file accesses provide inter file relationships local file system 
identified inter file relationships provide context information similar available world wide web 
connections leverages context improve quality file search results 
specifically user studies connections see improvements precision recall fewer false positives false negatives content search live deployment users experienced reduced search time connections compared content search 
vi context assist personal file retrieval acknowledgments possible help support individuals 
adviser greg ganger taught read write pursue research 
constant encouragement near ability find time students working true pleasure 
members committee jamie callan jim gemmell chris olston helped shape direction filled gaps knowledge helped steer solutions 
anind dey invaluable helping design execute online user study 
graduate school fortune large number excellent colleagues 
arrived garth goodson john strunk mike jiri schindler helped get feet 
years progressed discussions interactions students cmu particularly mike abd el malek john griffin david petrou brandon salmon steve schlosser eno jay wylie enjoyable educational 
satyanarayanan opening eyes research 
parallel data lab great source feedback industry sponsors fostered strong collaborative environment students 
garth gibson founding pdl current director bill continuing excellent tradition 
pdl brought contact number staff members life far frustrating 
particularly joan karen linda help years 
life friends pittsburgh 
close friends bryan jacobs jeremy richardson kept life interesting entertaining 
people note include sarah dan arp erik court heller reagan heller maureen dan reed wil kevin peterson rachel schlosser reed taylor shawn wall marshal warfield ben 
instructors students interacted oom yung doe members mechanical engineering team bryan smith 
mother soules support years 
vii viii context assist personal file retrieval contents figures xiii tables xv landscape today 
context 
thesis statement 
problem breakdown 
temporal locality 
connections 
evaluating utility 
contributions 
outline 
background related organization hierarchies attributes 
attribute naming systems 
world wide web 
summary organization 
search content analysis techniques 
file system search 
web search 
summary search 
inter file relationships 
context aware computing 
data organization retrieval 
personalized search 
data mining 
machine learning 
summary context aware computing 
wrap 
ix context assist personal file retrieval context enhanced search architectural overview 
content search 
context enhanced search 
alternate methods 
identifying inter file relationships 
basic successor models 
probability graphs 
relation graphs 
trade offs 
summary identifying inter file relationships 
searching relationships 
weight cutoff 
path length 
trade offs 
ranking results 
basic breadth expansion basic bfe 
web ranking algorithms 
super nodes 
trade offs 
wrap 
connections tracing 
linux 
microsoft windows 
database layout interaction 
content search tools 
wrap 
utility evaluation methodology 
offline study 
online study 
overview 
offline results 
online results 
wrap 
performance evaluation indexing performance 
space utilization 
querying performance 
contents xi wrap 
sensitivity analysis parameter sensitivity 
indexing parameters 
search parameters 
ranking algorithms 
alternate content analysis 
existing user input 
graph growth result quality 
wrap 
contributions limitations 

bibliography xii context assist personal file retrieval figures architecture content search 
architecture context enhanced search 
generalized successor model 
relation graph example 
linux tracer components 
average precision recall curve queries offline user study 
breakdown non text versus text queries 
growth relation graph space utilization 
growth number links node relation graph 
growth number nodes relation graph 
sensitivity isolation level 
sensitivity access filter 
sensitivity window size 
sensitivity edge direction 
sensitivity path length 
sensitivity weight cutoff 
sensitivity weight cutoff 
sensitivity alpha 
pagerank methodology comparison 
hits methodology comparison 
super node detection 
super node distribution 
super node detection weight cutoff 
combining context alternate content analysis tools 
strict boolean identify content results 
pseudo relevance feedback identify content results 
applying existing user input directory hierarchy 
effect graph growth result quality 
effect graph growth result quality new classification 
xiii xiv context assist personal file retrieval tables traced calls linux 
traced calls microsoft windows 
log entries generated online user study interface 
precision recall set cutoffs offline user study 
overview cutoff results 
list query terms queries 
reported demographic information 
results online user study 
average query performance machine 
xv xvi context assist personal file retrieval perfect world file systems omniscient helping users organize locate access data find want want acting personal assistant 
unfortunately far ideal today 
fact information management largest problems computing today seen amount time money effort spent companies individuals addressing problem 
problem continues grow 
computers pervasive users generate store data increasing complexity organization retrieval 
increases network connectivity improved data accessibility simplified data sharing trade users having organize retrieve data locations 
landscape today despite increasing complexities interface today file systems different years ago 
provide mapping name piece associated data file leaving users task organizing data way find needed 
may sufficient past increases power capacity personal computers drastically increased amount data generated average user simultaneously removing need delete old data 
computers move libraries move pieces furniture librarians 
file system assist user organizing finding data understand data stores 
file contents represent 
file 
user access file 
file relationship files user tasks 
able answer questions system able accurately determine satisfy user information need 
potential solution problem attribute naming 
attribute naming systems allows users classify file multiple attributes 
place attributes provide system understanding file properties giving chance answer questions posed 
unfortunately remains problem generating useful accurate attributes unrealistic inappropriate require context assist personal file retrieval users proactively provide accurate useful classifications 
attribute naming systems viable methods automatically classify files fact requirement led systems employ search tools hierarchical file systems change underlying methods organization 
prevalent automated classification method today content analysis examining contents pathnames files determine attributes describe 
systems attribute naming semantic file system content analysis automate attribute assignment 
search tools google desktop content analysis map user queries ranked list files 
file contents answer questions posed files containing structured indexable content text 
problem finding additional sources information provide information automatically system 
context context interrelated conditions exists occurs 
examples file context include concurrently accessed files user current task user physical location actions data user associates file 
study showed users organize search data context 
example user may group files related particular task single directory search file remembering files accessing time 
contextual relationships may impossible gather file contents 
context information answer outstanding questions system answer properly organize search data 
proposes utilize context help users retrieval data increasing data sets 
thesis statement thesis develop methods automatically gathering attributes context information applying organization search 
specifically thesis automatically gathered context information provide attributes files file content analysis 
increase information turn improve effectiveness file indexing search tools 
thesis validated steps show additional context file attributes form inter file relationships automatically identified file system activity 
confirm feasibility context enhanced search developing working search tool connections combines context content information provide file search results 
problem breakdown show added context attributes provided connections improve quality file search results user studies compare context enhanced search traditional content search 
problem breakdown thesis shows context information automatically identified system utilized improve quality file search tools 
requires source context methods gathering information identifying context individual files system utilizes context file search methodology evaluating quality system 
specifically uses temporal locality source context 
describes connections context enhanced search tool uses inter file relationships identified temporal locality identify additional relevant results user queries increasing recall re rank results place relevant results earlier increasing precision 
temporal locality temporal locality way individuals recall events items 
doing keys downloaded file got back meeting know working report read connecting items accessed nearby time connections leverage connections behave similar ways 
meeting report connections locate related items downloaded file related 
despite potential temporal locality 
examples connections required start point meeting report locate desired files 
connections identifies starting points leveraging existing content search tools results provided tool starting points 
connections enhances results identifying files closely related starting points 
furthermore connections uses strength relationships identify results relevant current search 
important content search imperfect starting points may invalid identifying set strongly related results help eliminate incorrect starting points content results appear relevant strongly related context ranked higher results 
connections connections gathers information temporal locality system level traces file system 
employs traces build relation graph describes relationships user files 
query time connections runs content search identify starting points accessed relation graph locate additional related files re rank results 
context assist personal file retrieval key questions building connections connections translate system level information user beliefs data temporally related connections utilize relationships locate related data set starting points connections re rank complete set results 
additional questions include mechanics connections gathers file system traces stores relation graph 
evaluating utility performance metrics run time transactions second utility measured objectively 
results search specific user data context quality results subjective user 
evaluates connections user studies 
study looks recall precision metrics traditionally evaluate quality information retrieval systems 
recall measures ratio correct results returned total correct results system 
precision measures ratio correct results returned total number results returned 
higher recall correct results returned user higher precision fewer incorrect results returned user 
comparing recall precision systems show effectively reduces false negatives false positives 
second study examines questions user experienced utility 
specifically connections context enhanced search result successful faster searches 
logging user behavior content context enhanced search tools surveys regarding success retry rates study answer questions user perceived utility 
contributions course proving thesis provides key contributions set algorithms identifying temporal inter file relationships extend re rank results traditional content search tools 
framework implementing evaluating techniques adding context knowledge traditional content search tools 
connections working context enhanced search tool linux windows utilizes mentioned algorithms framework 
analysis connections studies shows increased effectiveness context information file search 
performance analysis connections showing computational overheads context enhanced search small 
outline key advantages connections context enhanced search abilities locate relevant items searches increasing average recall locate relevant items contain little parsable contents multimedia files increasing recall precision significantly non text searches ability distinguish relevant results set textual results closely ranked confidence values providing slightly increased average precision textual searches 
key limitations connections context enhanced search requires large warm period months learn user behavior useful search large potential false positives means successful algorithms locate data user created modified gather keywords context relies content analysis provide relevant starting points graph perform expansion re ranking environments may difficult impossible 
discussion limitations possible ways combat chapter 
outline remainder dissertation organized follows 
chapter describes related research led important ongoing areas motivates potential enhance 
chapter outlines framework combining temporal context content analysis describes algorithms identifying searching ranking results context 
chapter describes details connections design implementation 
chapter describes user studies methodologies uses evaluate utility context enhanced search experienced users 
chapter evaluates performance space utilization overheads connections context enhanced search 
chapter provides discussion sensitivity algorithm parameter settings qualitative effects changing underlying components connections source content information 
chapter concludes describes potential areas 
context assist personal file retrieval background related thesis builds research file systems information retrieval human computer interaction 
chapter describes systems research laid related approaches problem data organization retrieval similar problems different complementary angles 
chapter broken sections organization search context aware computing 
describe key pieces related summarize contributions relate context enhanced search 
organization hierarchies attributes shortly advent persistent storage devices came need digital filing systems 
file systems provided flat namespace quickly replaced hierarchical scheme designed mirror physical filing systems 
system collections files collated single named directory 
directories recursively collated parent directories forming tree named directories eventually lead user particular file 
today file systems nearly identical file systems hierarchical named directory trees :10.1.1.114.9535
unfortunately seen library systems storage systems grow larger larger strict hierarchical filing schemes fail 
hierarchical file systems provide level cross tree linking augment strict hierarchy links difficult maintain face file updates removals making imperfect solution problem 
believe point personal storage rapid growth available storage removing need file removal combined increased uses personal computing resulting files created creating scenario current hierarchical file systems longer sufficient 
realization led idea attribute naming 
attribute naming systems files tagged particular keywords tuples identify categorical information file 
example thesis tagged author craig soules keyword context enhanced search files assigned attributes system leverage attributes provide automated organization virtual directory hierarchy improved search mechanisms 
context assist personal file retrieval attribute naming systems systems implement attribute naming semantic file system 
semantic file system maintained traditional hierarchy set category keyword tuples file 
users access files traditional hierarchy virtual directories created particular category 
example user create virtual directory category author created directory existing keyword category craig soules 
virtual directories created recursively allowing user hone particular file set files 
tuples semantic file system assigned directly users automated background tasks called transducers examined contents files identify accurate attributes 
semantic file system implements way traditional hierarchy merged attribute naming researchers explored wide variety organizational schemes 
example multi structured naming uses venn diagrams describe attributes file namespace 
flexible scheme allows integration flat hierarchical namespaces 
hac file system extends ideas semantic file system allowing users associate arbitrary content queries virtual directories saving specific results query directory modified user manually 
allows users create directories particular topics quickly starting search modifying results suit desired organization 
file system allowed users applications create external indexes files particular attribute 
example email application create index associates email file author email allowing users quickly search sort files particular author emails 
prospero provides user namespaces generated combination hierarchies user programmed queries called filters 
allows users place shared documents different paths personal namespace hopefully making easier locate data 
presto document system uses attribute tagging scheme similar semantic file system virtual directories provides variety graphical user interfaces designed assist user organizing finding data attributes 
attributes assigned user basis allowing personalization data organizations combining ideas semantic file system prospero degree 
pstore system proposes combine techniques previous naming systems semantic information file relationships dependencies access patterns 
propose design storing retrieving data acquisition semantic clues left open question 
world wide web search content analysis techniques world wide web largest distributed naming system existence 
help manage namespace web combines hierarchical naming scheme hyperlinks 
hyperlinks provide form attribute naming assigning keywords document document hierarchy 
users explore web locate data looking attributes various hyperlinks 
hyperlinks provide secondary organization web linking documents topic hierarchical location 
hyperlinks provide intuitive navigational structure key advances broad usability world wide web accurate search tools topic discussed section 
extensions web semantic web provide mechanisms embedding self describing attributes data pages 
attributes resemble closely attribute naming systems realm file systems storing attributes data describe pointers data done hyperlinks 
similarly harvest gathers attribute information pages stores separately document contents allowing search tools access attributes exclusively 
reduces network overheads indexing allows page creators add additional attributes gathered directly content 
summary organization proposals exist attribute naming commercial file systems implemented features features non 
world wide web proposals exist extending web pages attribute information proposals place years extensions commonplace 
believe reason attribute naming unable gain traction fold 
implementation attribute naming complex traditional hierarchies evidenced extended time market projects 
second place existing attribute naming systems rely mechanisms sources attribute information user input content analysis transducers 
unfortunately user input time consuming unpleasant users performing task 
result community efforts external search tools content analysis basis tools 
search content analysis techniques search tools take attributes keywords display results believe relevant keywords 
section outlines search tools file systems world wide web describes context potential improve results traditional content search systems 
context assist personal file retrieval file system search file system search tools today unix tool grep 
grep scans contents files particular terms expressions reporting line 
tools find added traverse namespace match terms expressions file pathnames 
functionality indispensable tools grep scan entire contents files invocation leading poor performance searching large data sets 
glimpse addresses problem combining grep index keywords 
user performs search glimpse consults index indicates subset files contain keyword 
runs grep hopefully smaller subset files 
narrowing widening size subsets index potentially considering sections large files user system administrator trade index size search performance 
kind indexing performance commonplace search tools 
search tools grep grown modern information retrieval tools current research content analysis techniques grown accurate complex 
tools lemur combine latest advancements content analysis provide accurate ranked results 
tools perform best experts generate queries full power expressive query interfaces 
underlying techniques systems directly relevant results generate form basis context enhanced search 
result improvements tools complementary approach accurate context enhanced search discussed chapter 
furthermore finding ways tie content analysis tools closely context analysis result improvements query accuracy discussed chapter interesting area 
commercial tools released harness modern information retrieval techniques including google desktop yahoo 
desktop search windows desktop search 
emergence commercial tools indicates increases user data sets creating demand accurate search facilities personal computers importance issue 
focus information retrieval systems specifically plain text analysis search tools understanding content structure examples code provide directed search particular usages terms finding function calls vs function definitions 
kinds structure specific analysis techniques integrated existing plain text analysis 
example tools apple spotlight google desktop allow external tools parse specific document types postscript instant messenger logs integrate contents rest index 
web search search content analysis techniques structure web potential browsing information easy remains problem locating appropriate starting point browsing 
result visited websites today web search engines 
original web search engines lycos yahoo 
altavista applied techniques today file system search 
combined user submitted information text analysis word frequency inverse document frequency structural analysis heavier weights words titles headers 
discussed web contains important source attributes hyperlinks 
systems hyperlinks webglimpse 
webglimpse hyperlinks define neighborhoods set pages particular link distance currently viewed page 
idea webglimpse allowed users narrow search current neighborhood 
key insight webglimpse neighborhood part user context leveraging user may find looking quickly 
shortly advent webglimpse techniques emerged link structure entire web combine content link analysis web search hits pagerank 
key insight hits web primarily contains kinds pages hubs authorities 
hubs pages contain links outward authorities page list auto manufacturers 
authorities pages referred hubs official ford web site 
recursive definition inherent design hits algorithms 
user performs search hits locates starting set pages traditional content analysis techniques 
starting set hits gathers super set pages single hop starting set 
runs recursive algorithm assigns hub authority rankings page super set 
pagerank uses hyperlinks treating structure web markov model 
calculates stationary probabilities model assigns probabilities node pagerank importance particular page 
probability indicates likelihood user randomly browsing web land page pages incoming links important pages high importance 
user performs search system locate pages match content rank pagerank 
google web search engine combines pagerank traditional content analysis novel techniques 
text hyperlinks classifications linked page making linker assigned attributes hyperlinks 
second watch behavior users access results search gather implicit user feedback 
example user performs search begins browse results clicking link second third pagerank actual merging content analysis pagerank systems google published 
context assist personal file retrieval clicking final link looking 
information may possible improve ranking pages match query terms 
groups begun exploring ways exploit graph structure web propagate information related pages 
closely related relevance score propagation term frequency propagation propagate attributes page pages graph structure hyperlink structure site map 
study area shown attribute propagation improve retrieval accuracy web 
surprising similar algorithms improve retrieval accuracy local file systems 
challenge local file systems identifying graph structure accurately map relationships files 
summary search years information retrieval grown simple expression matching entire field study 
file systems content analysis specifically text analysis bulk existing systems 
world wide web biggest improvements search quality haven come directly content analysis user provided classifications form hyperlinks 
hyperlinks provide content analysis context 
merriam webster dictionary defines context parts discourse surround word passage throw light meaning 
web keywords hyperlink identify context linked website identifying creator link thinks linked site user clicking link think linked site 
unfortunately current file systems include hyperlinks making difficult impossible apply search techniques world wide web 
tackles problem extent identifying inter file relationships user access patterns 
hyperlinks relationships contain keywords leveraged similar ways 
sections describe areas file systems utilizes inter file relationships context aware computing uses various forms context achieve similar goals 
inter file relationships explicit linking files exists file systems today prefetching cache hoarding indirectly identify inter file relationships 
file prefetching aims hide storage latencies predicting user access reading cache request 
cache hoarding attempts predict user access hide network latencies provide access network data disconnected operation requires similar prediction algorithm 
file system allocation policies attempt improve locality related files metadata placing files directory nearby disk 
context aware computing researchers groupings match access patterns users applications 
directories capture context users applications 
way address problem prediction schemes temporal locality spatial locality correlate common user access patterns individual user contexts :10.1.1.113.3119
systems keep history file access patterns successor models access models predict access accesses 
sequence accesses matches stored successor models system assumes user context matches model prefetches specified data 
explores variety techniques similar prefetching cache hoarding enhance file organization search 
details existing algorithms generating successor models contributions algorithms context enhanced search described chapters 
context aware computing context aware systems utilize context information tailor services particular users 
context computer system definitions including information location gps relational distance environmental conditions weather lighting time time day relational accesses 
context aware computing falls label ubiquitous computing 
research projects utilize context aid organization search 
potential benefits personal file search clear study user search behavior showed individuals context guide search specific content keywords 
data organization retrieval approach context data organization integrate attribute naming closely system user interface 
projects haystack provide interfaces designed quickly group tag files attributes 
systems provide mechanisms integrating various forms application assistance provide context similar ubiquitous computing described 
file context generally separate contents researchers leveraged content similarity identify contextual groupings files 
scatter gather uses content similarity techniques scatter collection clusters 
user select particular clusters interest gathered single sub index refined clusters 
process repeated recursively user information need satisfied 
commercial search tool utilizes similar form content similarity 
combines clustering novel drill interface allows users hone particular groupings quickly 
potential source context information existing metadata hierarchical file systems access time permissions 
projects treat metadata context assist personal file retrieval attributes help organize search user data 
lifestreams search tool ranks search results latest access time file 
provides user visual representation temporal context files 
seeing files accessed nearby time users may able quickly locate searching 
stuff seen uses context information stored file system access time thumbnails author enhance content search presentation results 
predecessor commercial windows desktop search 
personalized search way leverage context identify user current context clue retrieving information relevant task hand 
sampling relevant related 
mentioned earlier ubiquitous computing focused identifying user current context assist tasks communication 
project aimed file search agent identifies context user contents accessed files 
feeding relevant keywords files content search engine agent supply user set files potentially related current activity 
jimminy system extended idea information user environment physical location locate relevant notes information help user current task 
czerwinski uses content currently viewed web pages retrieve additional pages similar contents 
tool combines automated retrieval interface provides thumbnails related pages allowing users quickly scan potentially useful items 
identified user context combination local data set gathered content index data web activity searches visited urls 
profile direct searches particular topics interest user 
lumiere project identified user current context actions uses data provide user help information 
developing training bayesian network predicting common user tasks system identify user may need help appear attempting unsuccessfully suggest actions assist user task 
simplified version integrated microsoft office assistant 
drawback approach amount training data required successfully determine user context 
problem exacerbated case context search interaction user file system restricted structured interface 
possible exploit kind application context prediction common user applications enhance context search described thesis left area 
data mining context aware computing data mining broad field covers activities attempt identify behaviors correlations data sets 
definitions web search techniques pagerank context enhanced search fall domain data mining 
outside link analysis closely related context enhanced search area identifying association rules time series data 
focuses finding sets items minimum support number transactions data contain set 
theoretically set association rules files form graph inter file relationships context enhanced search 
problem approach just traditional successor models aims find prevalent relationships may important search 
possible modify existing approaches broadly capture context done successor models left possible 
fruitful application clustering data mining collate search results returned user similar systems 
potential drawbacks search increased number results returned user 
proper ranking reduce false positives clustering techniques may reduce effect false positives helping users quickly eliminate sets closely related irrelevant results 
machine learning machine learning focuses classifying items attributes associated items identified pre classified training data 
difficulty applying machine learning problem inter file relationships gathering accurate training data users unwilling unable properly identify accurate relationships large set files 
machine learning play important role refining existing information submitted queries 
example just web systems user submits query interactions user results set traced identify results accurate 
data train system help identify correct results queries 
summary context aware computing context powerful tool accurately identifying user information need especially world wide web contextual clues readily available 
unfortunately local file system relational context available web exist 
result researchers focused utilizing available content information including content similarity file system attributes 
context assist personal file retrieval uses temporal locality provide relational context missing local file systems 
place inter file relationships complementary source context enhance described 
wrap need improved data organization search increased years focus researchers shifted techniques extend flexibility personalization local file storage search 
context tool believe significantly improve quality systems studies back idea strongly 
combines techniques various existing systems introduce new form context relationships local file search 
place contextual relationships potential extend replace sources context related systems 
context enhanced search context potential forms uses dissertation focuses contextual relationships identified user access patterns enhance traditional content search 
chapter begins description specific architecture context enhanced search discusses trade offs inherent design 
describes algorithms required architecture 
architectural overview architecture context enhanced search designed goals mind 
goal interface user remain unchanged moving content search context enhanced search 
simplifies offline analysis tools querying result analysis systems 
simplifies online studies underlying search tool changed user visible interface change 
second goal content analysis search decoupled additional context analysis search 
reasons 
keeping components separate benefits contextual relationships clearer 
intertwined possible modifications content analysis component improve results undetectable fashion measured benefits strictly attributed context analysis 
second separation easier test system varied content analysis methods underlying mechanisms agnostic surrounding context analysis techniques 
third decoupling simplifies analysis performance space utilization overheads context analysis presenting clear delineation analysis techniques 
fourth benefits gained decoupled framework may possible contextual relationships tasks additional modifications 
remainder section overviews design existing content search tools describes added components required context enhanced search meet requirements described discusses trade offs design choices 
context assist personal file retrieval applications file system content search user results query content search architecture content search illustrates traditional content search tool 
users interact search tool submitting queries defined query language 
search tool consults file contents pre computed index derived file contents ranks results returns ranked list results user 
search tools query language list keywords 
advanced search tools provide extensive descriptive query languages exploited query experts shown improve results user queries 
goals context enhanced search mimic interface content search tools important system allow form query desired underlying content search tool 
performance reasons content search tools perform content analysis offline storing results analysis pre computed index consulted query time 
context enhanced search match query speed content search closely possible judicious offline indexing 
applications tracer file system context enhanced search results relation graph user context enhanced search results architecture context enhanced search architectural overview content search query illustrates changes required provide context enhanced search framework existing content search tools keeping separated internal workings tools 
just user submits queries system defined query language 
queries submitted content search tool processes request fashion returning ranked list results 
results fed relation graph stores contextual relationships 
relationships identified user accesses gathered transparent tracing component sits applications file system 
relation graph uses contextual relationships extend content results additional contextually related results re rank entire set results returning user 
design meets previously stated goals 
query language interpreted content search tool remains unchanged allowing context enhanced search support unmodified query languages 
traces gathered independently queries processed offline create query optimized relation graph 
design provides strict decoupling content context analysis performing serial 
additional components required context analysis tracer relation context assist personal file retrieval graph introduce required algorithms 
method identifying contextual relationships traces 
second method extending provided content results additional contextual results relationships 
third method ranking results provided contextual relationships 
sections provide details algorithms 
alternate methods chose requirements context enhanced search basis goal thesis provide ultimate answer combining context search explore potential benefits combination 
result approach flexible easy measure approaches merging content context provide accurate search results 
section describes approaches 
architecture described extends results content search system extend content index contextual links propagate content attributes files related neighbors 
success weight propagation world wide web described chapter suggests approach successful personal file systems accurate relationship structure 
furthermore query speed system better relation graph manipulation steps included indexing 
drawback approach integrating relation graph content index incremental updates far difficult 
separating components difficult distinguish attributes generated content context reindexing file contents scratch 
possible tag context attributes directly remove re indexing increase indexing time attributes re propagated re indexing 
potential design integrate contextual relationships network models content search tools :10.1.1.27.7690
systems documents connected terms probabilistic links 
issued queries result directed acyclic graph dag connect query specific query terms relevant documents 
context add additional layer dag connects documents documents 
tying content context closely possible extend existing query languages incorporate context information directly potentially improving search accuracy 
furthermore closer ties content context improve query speed 
kind tight coupling breaks requirements system difficult isolate advantages various changes system 
am leaving technique 
identifying inter file relationships identifying inter file relationships algorithm required context enhanced architecture takes traces user activity input identify contextual relationships individual files 
propose methods similar employed successor models identify probabilistic graph inter file relationships temporal locality 
basic successor models mentioned chapter prefetching cache hoarding successor models identify common patterns user actions 
belief common patterns match user tasks user repeating previously seen task perform actions match identified pattern 
basic successor models try identify file access history information 
models successor successor prediction single previously seen sequence 
successor model time system sees access file generate permanent prefetching rule 
example access file sequence system create rule prefetches access successor model system update prefetching rule seen sequence 
example access sequence seen successor system update rule prefetch 
complex models create prefetching rules cumulative history information case choosing successor seen times accesses file 
key objective models identify access performed system 
result models built capture short term behavior system 
conversely interested long term behaviors capture common user tasks 
probability graphs long term approach developed griffioen appleton identifies probability graph traces system activity 
file system represented node graph links indicate successive accesses seen trace 
probabilities transitions calculated weight link divided total outgoing weight node 
probability graph identify data prefetching interested successive accesses 
result choices generating graph directed task 
system creates single graph entire system closely models accesses seen shared storage subsystem 
system examines accesses short periods time generally milliseconds larger periods time effective prefetching 
system focused predicting read ahead considers exec open calls relying common application behavior reading entire contents file open context assist personal file retrieval call 
considers temporally ordered connections file leads file reverse link little prefetching prediction 
relation graphs differences objectives file prefetching led consider super set graph creation algorithms may better suited identifying relationships user tasks just successive accesses 
explore space relation graphs developed parametrized model provides knobs affect graph creation isolation level window size edge direction access filter 
isolation level specifies attributes separate threads control 
example isolation level set user id meaning interleaved accesses users create links files 
alternately isolation level set process id avoiding interleaved accesses separate processes 
isolation level specify attributes result formation separate graphs 
example system may want separate graphs user files inode owner id window size specifies unique file accesses consider creating links graph 
window size defined variables count limits number trace entries considered time limits temporal distance accesses trace 
files accessed window connected links graph determined edge direction access filter described 
window maintained fifo queue files files re accessed window generating additional links 
traditional probability graphs window size set count examining successive accesses time milliseconds 
relation graphs count time generally larger accurately capture full user tasks 
edge direction specifies relationships strictly ordered 
edges directed maintain temporal ordering probability graphs 
edges undirected causal nature temporal ordering lost potentially allowing tasks captured accurately 
example user reading piece code writing code file indicates information flow forward time indicating graph causality lost 
access filter specifies system calls interest relationships formed 
specifically categorizes files associated system classes input output 
file classified input placed window 
file classified output link created inputs window output link exists weight link incremented 
example traditional probability graphs exec open calls considered classified input output form relationships 
possibility consider read write calls read calls classified inputs write calls classified outputs causal relationship assumed read write 
approach result sequence read read time trace isolation level access filter context model context model context model identifying inter file relationships input window output generalized successor model relation graph write forming links illustrates framework modified successor models showing components described fit system 
left trace accesses seen system scanned time order right set relation graphs created traces 
entry passed isolation level de multiplexer decides context model access belongs 
context model entry passed access filter 
access filter marks file entry input output 
classifications allow filter specify causal relationship files trace 
access filter classify file input output dropped 
file classified input placed input window limited window size 
file output link added files input window output file link exists weight incremented shown dashed arrows relation graph 
distinction input output files maintain temporal ordering case directed links 
classifying files inputs outputs removes causal relationships different access types write calls point read calls temporal causality specified link direction 
interesting note setting parameters correctly original probability graphs created 
specifically created single context model input window size access filter considers exec open calls context assist personal file retrieval inputs outputs directed links 
trade offs flexible design relation graphs capture certain kinds relationships 
section outlines draw backs trade offs inherent relation graph model 
behavioral knowledge relation graph summary user actions semantic knowledge contained original sequence user actions lost 
specifically flattening long sequences actions single graph may result loss causal relationships context sequence may get hidden stronger contexts overlapping sets files 
example sequence events may common behavior application user files flattened graph connection may diminished connection particularly heavily connected files 
potentially choosing appropriate window size may help diminish problems associated kind application behavior insufficient 
search ranking algorithms described sections try alleviate problem better understanding particular application behavior reduce effects 
potential areas automatically identify application behavior briefly described chapter 
hyperlinks design relation graph similar graph pages world wide web web fails capture keywords relevant links graph 
information graph valuable added value finding methods convert links hyperlinks links associated keywords 
breadth potential techniques tangential nature goal thesis examining capture assign utilize keywords left 
hysteresis problem maintaining relation graph difficult perform hysteresis link weights attributed particular time 
impossible decay weights link basis entire graph decayed update infrequently accessed files eventually lend weight rankings 
hysteresis problem traditional probability graphs difficulties fully addressed 
searching relationships result approach discussed thesis eliminate links graph search time 
appear pose problems storage space discussed chapter potential problem user context file may change time 
shift context result reduced accuracy relation graph discussed chapter 
decision avoid link weight normalization ramifications searching ranking algorithms briefly discussed sections 
fact choices design algorithms account potential problem 
existing systems relation graph built trace data potential problems existing systems 
trace information may available systems rendering technique impossible 
second traces gathered currently method retro fit relation information existing system 
means files accessed located contextual clues 
possible attempt retrofit identified behaviors existing traces untraced files predicted user behavior result inaccurate relationships 
summary identifying inter file relationships despite drawbacks discussed relation graphs provide computationally simple effective method identifying storing inter file relationships 
cases design relation graph side flexibility simplicity order provide computationally feasible implementation allowing room exploration variety techniques 
may better techniques starting provides intuition areas worth closer examination produce gains 
searching relationships second algorithm required context enhanced search method extending results content search additional contextually related files 
goal search find files contextually relevant keywords user 
conceptually files located content search relevant user information need shown previous file search 
files contextually related results relevance user information need 
approach finding contextually related files take results content search input perform breadth expansion relation graph inputs starting points graph 
expansion complete resulting nodes form smaller result graph contains nodes search links 
context assist personal file retrieval relation graph example algorithm limits number files result graph parameters weight cutoff path length 
limiting search serves important functions 
reduce computational complexity ranking algorithm limiting number files consider 
second reduce number false positives results returned user 
weight cutoff goal weight cutoff avoid incorrectly formed connections files 
incorrect connections form cases user context switches user starts working unrelated file reason launcher applications shell launches application opens file shell unrelated file configuration files text editor configuration file unrelated files edited 
weight cutoff deals primarily user context switches ignoring transient lightweight links 
initially lightweight defined scalar value number times link seen 
relation graph link weights normalized see section single number capture concept lightweight nodes graph 
example user accesses file frequently file infrequently time invalid links created file may outweigh valid links created file result weight cutoff uses link weight ratios act online normalization method 
link assigned ratios weight compared outgoing weight source node weight compared incoming weight sink node 
ratios compared cutoff ratio 
ratios fall beneath cutoff link ignored search 
addresses example total weight file significantly higher total weight file ranking results illustrates example relation graph 
assuming starting point search consider link case outgoing incoming ratios 
weight cutoff set link ignored search 
choice drop links ratios beneath cutoff avoid cutting incoming links node 
example consider link 
case outgoing ratio incoming ratio 
link outgoing ratio beneath cutoff may best keep link way locate node search 
presents trade decision err side keeping links forces system rely ranking algorithm cull false positives incorrect nodes search 
path length goal path length avoid including files relation graph far removed context original content search results 
specified maximum number steps take content result node breadthfirst expansion 
ranking algorithm generally rank distant files low results omitting ranking process cases significantly reduce computational overhead ranking algorithm 
trade offs alternative search parameters consider entire relation graph search trust ranking algorithm provide user relevant data 
advantage approach doesn proactively remove potential paths interest search space 
assuming false positives successfully pruned ranking approach improve quality returned results 
disadvantage approach query processing time system grow size relation graph 
introducing parameters search space system limit effect graph size query performance tuning weight cutoff path length number content results considered 
gives system tunable knobs direct trade accuracy performance 
ranking results search algorithm identified result graph ranking algorithm orders files graph user relevant results 
traditionally content systems methods term frequency inverse document frequency identify files accurately represent specified keywords context context assist personal file retrieval enhanced search resulting documents contain keywords making techniques insufficient 
solution problem combine confidence provided search results link structure result graph identify relevant documents 
considered basic approaches 
followed path weights propagate confidence values content results contextually related files 
second existing web ranking algorithms utilize link structure rank results 
basic breadth expansion basic bfe basic bfe uses rankings provided content search guide rankings contextually related items 
close relations relations multiple paths receive weight distant relations incoming paths 
intuitively matches user activity file rarely association content matched files receive low rank vice versa 
link weights assigned frequency different applications access files different rates performing similar tasks basic bfe tries limit variability algorithms 
specifically uses alpha parameter described equations designed reduce link weight variability 
set nodes result graph path length generate result graph tunable parameter 
assigned weight wn content search scheme 
file ranked content analysis wn 
algorithm run iterations 
em set incoming edges node enm em percentage outgoing edge weight edge assuming ith iteration algorithm wmi enm em wn enm value wmi represents weight pushed node iteration algorithm dictates trust specific weighting edge 
runs algorithm total weight node wn wni sum wn represents contributions contextual relationship paths node plus contribution original content ranking 
set nodes sorted weight highest lowest create final ranking 
example algorithm works assume graph result graph path length weight cutoff content ranking results search returns wd wb 
consider wb 
pass algorithm wb updated wd case wd affects value wb second pass formula wd wb final weight wb sum weights 
web ranking algorithms dissertation considers web ranking algorithms pagerank hits 
algorithms considered objective exhaustive study available ranking algorithms show value context enhanced search understand classes algorithms succeed structure relation graph 
pagerank pagerank ranking algorithm google web search engine 
takes graph hyperlinks web calculates principal eigenvector stochastic transition matrix describing graph 
eigenvector describes probabilities reaching particular node random walk graph 
probability referred page pagerank 
dissertation uses implementation power method described calculate pagerank file relation graph 
unfortunately google method merging content search results pagerank clearly documented implemented possible uses file pagerank 
implementation pr ignores content rankings uses pagerank rank files result graph 
second implementation pr applies file pagerank content ranking take product original ranking pagerank new ranking runs basic bfe algorithm 
third implementation pr runs basic bfe algorithm applies pagerank final results 
hits hits algorithm attempts locate authority hub nodes graph 
authority nodes incoming links hub nodes hub nodes outgoing links authority nodes 
web authorities analogous pages linked times particular topic official cnn web site hubs ir score combined pagerank give final rank document context assist personal file retrieval analogous pages lists links authorities page links news websites 
hits identifies authorities hubs steps 
runs content search locate initial set nodes 
second creates sub graph relation graph locating nodes incoming outgoing links starting nodes 
third runs recursive algorithm locate principal eigenvectors pair matrices derived link structure 
eigenvectors indicate authority hub probabilities node 
dissertation considers separate implementations hits 
implementation hits original runs unmodified version hits relation graph 
second implementation hits new begins result graph derived section runs third part hits algorithm 
evaluation chapter examines hub authority rankings implementation 
super nodes due behavior interaction applications relation graphs generated algorithms section contain nodes strongly connected little relevance user 
example bash login shell maintains history file tracks executed commands 
updated time user performs action strongly connected files time 
super nodes mislead graph ranking algorithms believing neighbors relevant 
example web ranking algorithms designed find authority pages heavily referenced pages web match closely behavior exhibited super nodes 
try reduce misleading nature super nodes examined ways modifying basic bfe ranking algorithm detect weaken relevance pr detect clique detect stddev detect percentile detect 
pr detect algorithm uses pagerank algorithm try detect super nodes 
mentioned web ranking algorithms tend rank super nodes highly supernodes mimic behaviors authority nodes web 
pr detect similar pr scheme described section product original rank pagerank pr detect takes quotient 
clique detect algorithm uses clustering coefficient graph formed node neighbors try detect super nodes 
clustering coefficient graph measure close node neighbors forming clique 
equation gives formal definition clustering cn graph formed node neighbors 
mn set neighbors node full discussion adverse affects super nodes chapter 
simplicity purposes links relation graph treated undirected creating graph node neighbors 
cn mn mn mn mm mn mn ranking results node clustering coefficient defined ratio number links neighbors number links exist neighbors formed clique 
intuition approach super nodes form poor cliques neighbors neighbors unrelated connected 
ideally product node clustering coefficient original rank reduce relevance super nodes 
stddev detect algorithm uses number links connected node try detect super nodes 
approach system calculates average number links going node relation graph standard deviation 
penalizes links coming going nodes exceed average standard deviations number deviations node notated respectively 
specifically applies penalty deviation average modifying equation equation wmi enm em wn enm reduces effect super nodes reducing relevance incoming links effect relevance neighbors 
potential drawback approach standard deviation relies assumption distribution link counts gaussian 
percentile detect algorithm stddev detect uses number links connected node try detect super nodes penalizes nodes link counts part th percentile 
specifically applies penalty shown equation wmi enm em wn inm enm normal case penalty nodes 
nodes th percentile outgoing incoming links penalized nodes th percentile penalized 
exploring algorithms reducing effect super nodes relevance chose modify basic bfe algorithm 
main reason basic bfe algorithm outperformed ranking schemes evaluation believed modifying best performing scheme best possible result 
algorithms examined clique detect stddev detect percentile detect applied web ranking algorithms 
clique detect algorithm applied unmodified stddev detect percentile detect modify link probabilities running pagerank hits 
examination applications left 
context assist personal file retrieval trade offs despite breadth ranking algorithms described collection explored far exhaustive 
exploration context enhanced search continues distinction behavior differentiates web search file system search may clearer helping identify existing web techniques successfully applied file system search 
furthermore related web ranking techniques relevance propagation studied may useful integrate techniques closely algorithms described 
wrap chapter describes architecture set algorithms implementing search goal able explore effects applying context utility performance personal file system search 
set algorithms provides various parameters enable thorough exploration space search goal understanding techniques effective satisfying user queries 
chapter describes implementations architecture describing details components gather store data required search 
connections evaluate context enhanced search built connections implementation search architecture described chapter 
key components implementation tracer gathers system call traces system database storing querying relation graph content analysis system 
tracing run connections linux microsoft windows requires separate tracing infrastructure system 
cases tracing component logs file system calls file read indexing component connections specific details implementation differ 
linux linux implementation connections developed explore parameter space algorithms described chapter 
tracing component designed capture information possible providing widest array information 
architecture illustrates linux tracing infrastructure 
linux tracer implemented kernel module intercepts calls application file system interposing wrapper calls kernel system call table 
runs versions linux kernel patch required kernels export system call table loaded modules 
tracing module similar design linux tracing tools linux trace toolkit 
call seen timestamp generated space reserved trace buffer call 
call completed missing arguments return value filled stored buffer 
certain threshold data gathered data flushed buffer trace file stored file system 
virtual device driver provides applications interface control tracer deciding allow file descriptor reconstruction tracer watches process management calls fork exec 
context assist personal file retrieval control device reserve file system applications linux kernel tracer trace buffer flush trace file store linux tracer components calls traced setting size trace buffer starting stopping tracing 
key difference module tracing tools linux module block applications avoid missing trace entries discarding entries 
reduce system performance chose err side having complete information 
furthermore trace buffer mb blocking extremely infrequent 
overheads linux tracer similar tracing systems measuring system call events 
state reconstruction watched calls listed table 
linux file system interface follows posix guidelines data accesses file descriptors 
connections recreate system process state scanning trace match file descriptors file names 
traced process management file descriptor management calls purpose 
scanning trace connections maintains set active processes file descriptors working directory associated 
process management calls connections tracks file descriptors passed child processes fork calls implicit close calls caused process execve exit working directory updates chdir calls 
file descriptor management calls connections tracks file name newly created file descriptors combining system call description tracing file descriptor management open creat opens file returning file descriptor close closes file descriptor dup dup copies file descriptor data access read reads data file file descriptor write writes data file file descriptor truncate removes data file directory management link creates link file directory mkdir creates new links creates link device interface rename file rmdir directory symlink creates soft link file unlink file readdir reads entries directory readlink reads contents soft link metadata management access chmod read write permission bits file chown write ownership file utime read write timestamps file stat lstat fstat read file metadata process management fork clone fork process exit exit process execve execute file contents process chdir change working directory process change root directory process table traced calls linux context assist personal file retrieval working directory process name passed open creat calls uses dup close calls track active file descriptors process 
filtering access filter described chapter choose filters available system calls 
linux version connections implements access filters open read write calls 
open filter treats executed files execve files accessed open calls inputs outputs similarly traditional probability graphs 
read write filter treats files accessed read calls inputs files accessed write calls outputs 
calls filter uses data access directory management metadata management calls treating calls read information inputs calls write information outputs 
specifically files accessed read access utime stat calls starting file link rename symlink calls treated inputs files accessed write truncate chmod chown newly created file link rename symlink calls treated outputs 
microsoft windows linux implementation microsoft windows implementation connections designed specifically online study described chapter 
tracing infrastructure designed minimize overheads target specific information required parameter settings online study 
architecture trace microsoft windows machines connections uses publicly available tracing tool developed jacob lorch runs windows windows xp windows server 
general architecture similar linux tracer flexibility calls trace trace events passed user space applications 
reduce overheads tracing size trace files connections uses modified version removes calls associated file system 
due frequency windows accesses system files connections modified provides option filter file system calls tracing layer user defined set directories 
state reconstruction watched calls listed table 
data accesses microsoft windows file handles similar behavior posix file descriptors 
linux tracer performs state reconstruction trace time 
specifically keeps internal table seen file handles 
handle table seen tracing resolved full file path special filename trace entry map file database layout interaction system call description read reads data file file handle write writes data file file handle create new process executable file filename indicates full file path newly seen file handle table traced calls microsoft windows handle resolved path 
removes need connections track file handles duplicated passed child processes 
reconstructing entire system state connections keeps mapping pid file handle pairs file names updated filename entries 
file names entries identified consulting file handle table 
filtering windows version connections implements read write filter acts similarly linux read write filter 
read write filter treats files accessed read calls inputs files accessed write calls outputs 
possible implement filtering schemes purpose microsoft windows implementation online study described chapter optimized chosen parameters 
database layout interaction connections implements relation graph store retrieve relationships 
implements tables fast tree implementation maintains acid properties 
connections maintains tables database 
fileid table maps full file paths stored arbitrary strings node ids stored byte integers 
table maps node ids full file paths 
note data storage fileid tables shared separate indexes index node id file path 
table maps node ids structure describing outgoing links node 
table maps node ids structure describing incoming links node 
pagerank table maps node ids pagerank node graph stored byte floating point value 
structure store link information tables array tuples containing byte weight byte node id file name reconstruction simplified implementation user defined directory filtering 
context assist personal file retrieval indexing connections updates tables reflect new inter file relationships identified algorithm described chapter 
fileid tables updated new files accessed user node ids assigned sequential order 
trace analysis connections maintains cache identified relationships 
trace analysis complete indexing system runs low memory tables updated cache 
table fully updated connections uses run pagerank analysis updating values pagerank table 
querying connections consults tables run searching ranking algorithms described chapters 
step query convert list results content analysis file names node ids fileid table 
second step run search algorithm consulting tables perform weight cutoff performing breadth expansion 
third step run ranking algorithm table case basic bfe hits pagerank table case pagerank 
fourth step convert node ids back file paths return user 
content search tools connections context enhanced search algorithmically agnostic underlying content analysis tool current implementation designed take input indri version 
indri toolkit research driven content analysis system developed primarily web search 
chose indri uses latest techniques information retrieval performed trec conference years publicly available code base provides confidence values ranked results provides mechanism tag documents searchable metadata 
indri flexible query language allows exploration alternate content analysis techniques having change underlying tools designed web indri performs link analysis making ideal candidate connections 
drawback indri web oriented design assumptions data contents utility information file names paths 
connections required modifications indri indexing process identifying files contained indexable content avoid polluting index binary data indexing file contents file name path especially important case file contents indexed 
identify files content indexable unix file command 
file program identifies file contents combination file system metadata information identify special file types empty files magic number tests identify file types common header formats content analysis identify files console readable contents 
files identified containing parsable text includes indri parsable formats text pdf ms powerpoint ms word html xml 
content search tools included content indexing process 
files file name path included index 
index file name path indri searchable metadata feature 
modified indri indexing process take path file decompose set words broken non alphanumeric character boundaries 
words included file metadata heading providing searchable index querying 
queries agnostic underlying content analysis technique queries provided set keywords kn optional set file types 
example user searching photos birthday party keywords birthday party file types jpeg gif bmp methodology mapping keyword queries underlying query technique described techniques explored chapter 
weight combine kn combine kn equation describes connections default mechanism mapping keyword queries indri underlying query language 
combine operator considers keywords equal weight satisfying query 
weight operator considers portion query different specified weights 
case keywords considered equally files contents half weight files names 
file type filter applied search boolean operation file matching file types displayed 
band kn equation describes connections maps keyword queries indri query simulates behavior glimpse 
query uses boolean operator find files contents matching keywords query 
just glimpse query ignores filenames entirely 
file type filter applied search boolean operation file matching file types displayed 
content analysis technique explored uses query translation described equation adds indri implementation pseudo relevance feedback 
feedback uses content similarity identify additional keywords relevant top ranked results 
additional keywords modify re rank content results passed relation graph 
parameters required number results consider content similarity maximum number additional terms generate connections uses indri default values respectively 
context assist personal file retrieval wrap connections flexible cross platform context enhanced search tool designed specifically comparing context enhanced search traditional content search 
chapters evaluate connections offline analysis methods online user study 
utility evaluation performance search tool aspects 
utility search tool users find looking second speed performs 
chapter deals utility context enhanced search terms result quality user experience chapter performance overheads context enhanced search chapter evaluates sensitivity system changes underlying parameter settings algorithms 
utility includes results user studies offline study performed linux users online study performed windows users 
advantage offline analysis wider array schemes compared far user interaction required online analysis 
advantage online analysis aspects user interaction tool studied opposed strict recall precision metrics 
chapter divided sections 
section describes evaluation methodology studies including user information gathered metrics 
second section overviews results study describing advantages context enhanced search 
methodology methodologies user studies differ significantly 
study refer offline study designed gather information required traditional information retrieval metrics recall precision 
study focused metrics evaluated independently user behavior providing way analyze sensitivity system different parameters algorithms 
second study refer online study designed gather information required answer questions related user interaction system time average success rate average search time focusing utility experienced user 
offline study compare utility content search context enhanced search offline study borrowed adapted evaluation techniques information retrieval :10.1.1.27.7690
traditionally content search tools evaluated large public corpora data archived context assist personal file retrieval newswire data collections publicly accessible websites 
queries generated experts evaluated individuals familiar material 
oracle results compared results generated system evaluation 
unfortunately subtle differences file system search especially search difficult evaluate 
data personal owner create meaningful queries act expert evaluating query generating oracle results 
second nature queries searching old data demand traces exist long period time connections provide context enhanced results traces describe usage desired data 
third queries data accessed trace period provide information accuracy context enhanced search 
know context enhanced search assist cases preferable users generate queries data accessed trace period placing additional constraints query generation process 
metrics recall precision measure effectiveness search system matching oracle results 
system recall number relevant documents retrieved divided total number specified oracle 
system precision number relevant documents retrieved divided total number documents retrieved 
unfortunately user system knows data act oracle queries users study willing examine file systems find correct results query 
account technique taken information retrieval known pooling :10.1.1.27.7690
pooling combines results number different search techniques generating set results coverage relevant files 
users specify correct results smaller set generating oracle results query 
potential disadvantage pooling may valid results included set user marked correct user 
fortunately potentially skew recall systems comparison higher appear include higher percentage correct results relative comparison systems valid measured standard 
study pooled results number different runs connections wide variety indexing searching parameters including default settings evaluated users 
users chose relevant documents pooled set files create oracle 
compare recall precision different systems techniques 
technique examine recall precision curve system 
curve plots precision systems standard recall levels increments :10.1.1.27.7690
recall level curve plots highest precision seen 
recall level achieved query precision level specifically parameters explored section 
methodology reported 
calculate user averaged recall precision values set queries precision query recall level calculated precision queries user averaged individual user results averaged users 
examining curve shows system ranks results generates 
second technique examine recall precision system fixed numbers results 
search systems results user time page results requiring prompting user results 
example result cutoffs may map pages results users may give try different query 
examining recall precision low result cutoffs indicates quickly user locate relevant data system 
examining recall precision returned result shows relevant results located system 
case results examined recall reaches results returned system considered 
experimental setup gather context data traced desktop computers computer science researchers period years 
users submitted evaluated queries points time months tracing years tracing total queries 
evaluation queries discarded connections indri returned correct results leaving total usable queries 
queries keyword query format connections mapped indri technique described chapter 
default parameter settings connections relation graph search algorithm path length weight cutoff 
default ranking algorithm basic bfe setting percentile detect super node detection algorithm traces generated relation graphs user months traces entire years traces default parameters second relation window directed edge style read write operation filter 
match content index context index built content indexes indri state user data initial months tracing second state user data entire years tracing 
chose index files user specified home directories assumption users create store files location 
furthermore indexing data opposed entire file system reduces indri false positive rate 
assuming system returns results hasn reached recall reaching cutoff 
chose settings performing sensitivity analysis described section 
chose settings performing sensitivity analysis described section 
context assist personal file retrieval online study online study moves away traditional information retrieval metrics precision recall focuses metrics measure user improvements 
choice aspects online system 
system interface designed act traditional file search tool wanted minimize additional interactions required user 
having user mark correct results system effort intensive allowed impossible get accurate precision recall numbers search 
second gathering results required pooling quite computationally intensive search tool performed poorly users far 
metrics online study uses metrics measure user search tool utility 
metric relevant search successful user find looking 
user find searching tool useful 
second metric amount time spent examining results 
indicates quickly system find correct results user systems identical success rates system allows user succeed half time system useful 
third metric number results examined scanning results 
similarly amount time spent searching number results examined fewer successful searches user looking effort 
fourth metric retry rate unsuccessful searches performed sequence successful search completed 
user performing unsuccessful search try search slightly different synonymous keywords 
metric helps measure accurately system match keywords provided user data desire 
setup online study run phases 
phase users results content search mimicking behavior traditional file system search tools phase allowed users familiar interface tool altering expectations tool returned results 
second phase users results context enhanced search phase measured utility returned results point users familiar search interface 
third phase users results content search phase measured effect switching back content search ensuring utility seen phase due increased familiarity tool 
users informed techniques studied study methodology informed length phases phase active 
entry description open start time query 
view viewing particular range results 
click double clicking copying particular result 
survey user specified success failure re query attempts 
table log entries generated online user study interface overview keyword queries agnostic underlying retrieval technique discussed chapter able provide query interface microsoft windows transparently run query connections indri 
users submitted query results displayed sets results prev buttons navigation 
users double click results open file copy result location clipboard 
user closed result list final window open surveying determine query success failure offering chance perform new query 
simultaneously query interface logged user actions gather information required calculate metrics described 
table lists different log entries generated query interface 
user submits query interface generates open entry marking time query 
interface displays set results user directly query prev button clicked generates view entry specifying results displayed 
user double clicks copies result interface generates click entry specifying result accessed 
user completes survey interface generates survey entry specifying success failure user attempted query 
entries sufficient calculate metrics described 
survey entry logs success rates specified user 
amount time spent examining results particular query estimated subtracting timestamp open entry entry log survey entry entry log 
number results examined calculated values number items accessed user logged click entries number items viewed user logged view entries 
retry rate calculated number successful queries required query attain success 
survey entry registers failure checked retry combination retry second query log containing open entry minute retry considered re query 
overview objective studies explore utility context inter file relationships applied search 
section discusses direct comparison connections context context assist personal file retrieval cutoff recall precision indri connections indri connections returned result table precision recall set cutoffs offline user study enhanced search indri content search user studies 
offline results illustrates benefits adding context information traditional content search shown precision recall curve user averaged queries indri connections 
recall level connections context enhanced search improves precision 
paired test queries shows value precision recall level average increase precision indicating precision connections higher indri 
result fold 
precision higher user find looking quickly correct results user sooner 
second recall achieved higher precision level user find pertains query 
advantages context enhanced search seen looking precision recall different results cutoffs 
table lists user averaged precision recall indri connections queries different result cutoffs 
shows improvements provided context enhanced search connections improves recall precision cutoff 
particularly interesting results cutoff results returned result 
cutoff connections improves precision making user see correct result page returned system 
returned result connections improves recall maintaining level precision 
means false positive rate results connections able return results user interested queries 
user find data relevant topic 
key advantages connections rely file contents identify relevant data 
able locate relevant results desired results contain parsable contents images music 
shows precision recall curve indri connections just queries precision overview recall connections indri recall precision indri connections average average precision recall curve queries offline user study context assist personal file retrieval precision recall connections indri overview non text searches precision recall connections indri overview text searches breakdown non text versus text queries correct results include non files 
cases connections ability locate files contain parsable content increases precision recall levels 
conversely shows user averaged precision recall curve indri connections just queries correct results include files parsable textual contents 
cases benefits connections far significant increasing precision 
connections benefits derived ability correctly identify relevant non results relationships formed repeated user behavior help identify relevant results set files 
find significantly correct results text searches shown slight improvement precision recall able provide slightly accurate ranking cases improvement precision lower recall levels 
benefits connections cases stem ability locate results relevant user specified keywords contain keywords infrequent 
connections locates files user accesses files contain specified keywords 
identifying new results relevant placing correctly rankings connections able successfully combine new results content results providing higher recall higher precision 
technique far effective case desired data keywords non text data cases queries user specified keywords match contents desired files 
examples behavior individual queries discussed 
overview category query indri connections description num results results non text queries text queries table overview cutoff results context assist personal file retrieval category query query file types description num terms optional non text postal service mp queries songs artist led mp storage systems homework ps comic strips gif jpg png continuous reorg visit day eps bmp wmf ai pdf games attack florence rome venice noel mother text able ps pdf queries pasis read write ps pdf erasure code ps pdf optimistic versioning ps pdf usenix anaheim california pdf bus schedule pdf winters wedding marriage train sport noah evans fellowship machine learning magpie latex guide project management austin cover letter dan ellard protocol relocation package srds lazy verification table list query terms queries individual queries overview get sense context improving individual query results consider queries isolation 
table shows precision recall query cutoff results table lists query terms query 
case typed queries queries content system returned results correct type remember returned results basis context enhanced search just matching type 
important remember queries identical recall precision cutoff results queries higher recall context enhanced search results considered cutoff 
queries connections able dramatically improve recall precision query 
particularly true case non textual queries traditional content analysis techniques limited available information 
example queries user searching music files downloaded web 
user downloaded files mozilla browser read cached copies pages user visiting 
cached html pages indexed indri lead connections identify desired files 
behavior exhibited mozilla browser accounts success queries 
fortuitous standard mozilla cache large capture day worth activity allowing indexed behavior mozilla lends temporal relationships results indicate application specified relationships fruitful area 
example connections able leverage context identify non textual data shown query 
case user searching image poster created 
images text poster cases taken create text images cases figures papers contextual clues 
files read update poster creating relationships allowed connections identify poster related images 
similar connection user homework assignment desired images seen query 
queries users searching documents related particular topic project 
despite documents content indexable connections able improve recall precision queries 
reason indri desired documents show far document cutoff 
leveraging usage information connections determine files relevant rank higher results 
example query user searching papers related particular project 
cases word pasis appeared pathname desired file directly referenced text terms read write common user documents 
conversely pasis show text related referenced project multiple times forcing rank related documents higher desired documents 
connections able leverage usage patterns strengthen desired documents relationships formed files pasis context assist personal file retrieval directories resulting pdf created built 
similar result seen query user looking information magpie project 
query desired files related authored 
files content indexable just user searching poster indicated files contain desired keyword author name returned content system 
example query user appears interested scripts generate results authored 
feedback loop generating results creating graph refining scripts seen traces allows connections identify scripts part context contain relevant keywords reside separate directory 
queries benefits connections increased precision related increased recall 
example queries user searching images text related particular parts trip took italy 
queries connections identified relevant documents returned indri identified primarily user formed naming scheme identical recall precision cutoff results 
results included number additional related images created time names include query term 
examining queries connections unable improve search effectiveness cases reduced provides interesting insights 
query relevant files located indri mailbox files 
meta files composed smaller sub units data 
trace data distinguish relationships individual sub units files misleading edges making difficult connections provide accurate results 
problem indicates need level application assistance storing individual emails separate files 
important aspect files contain large number links due diversity context individual emails results returned connections significantly modified original indri ranking 
cutoff performance systems similar 
query desired files related individual user knows 
case content results dominated email cache files resulting poor recall precision systems cutoff 
connections slightly higher recall relevant files updated conjunction accesses relevant files 
specifically files appear contain contact information includes requested individual 
updates related contacts files conjunction accesses files returned content 
turn pushes relevance files 
query search terms multiple meanings user data 
user specified training refer schedule happened working project related machine learning contained word training disjoint uses single word indicate level result clustering useful presenting results users 
clustering contextually related results overview ranks disjoint sets potentially adjusted include results cluster 
online results online study run total months phases months month month respectively 
users located means distribution lists bulletin board systems carnegie mellon university 
users signed study tool phases study 
demographics users listed table 
table describes statistics gathered phase study 
part table lists total number queries number query sequences 
query sequence combines queries series retries 
second part table lists average time spent pages viewed results clicked query sequence phase 
third part table lists success rate sequence number successful sequences percentage successful sequences included retries average number queries successful sequence 
data study show significant improvements context enhanced search results suggest possible take 
phase study success rate lower phase 
phases underlying query technique suggests phase users may felt unfamiliar tool time better querying tool improvement success rate drop number pages viewed 
second success rates context enhanced phase second content phase 
similar success rates context content phases suggest windows environment context significantly increasing number files user find 
anecdotal evidence user surveys indicate largely due kind data stored searched users 
users study searching content indexable data microsoft word files failures coming tool inability search web email data 
third despite having success rates phases different retry rates 
user data indexed content user content queries required refinement achieve success 
context may reducing need refinement identifying set files relevant user keywords presenting correct results user need query term refinement 
important reduce time required individual query reduce number queries required find piece data reducing time page views result clicks query sequence 
reduction time effort goals search engine data needed studies confirm results available data suggestive results similar offline study 
users offline study included online study 
context assist personal file retrieval gender count male female computer skill count computer profession count age count computer count personal business hours day spent computer count table reported demographic information overview metric phase phase phase content context enhanced content total queries query sequences time spent seq 
pages viewed seq 
results clicked seq 
sequence success rate successful sequences sequence retry rate queries success wrap table results online user study results studies context information improve quality user searching 
shown offline results context improve recall precision searches finding data user interested ranking accurately 
particularly largest benefits connections ability locate documents non parsable contents images music increased recall related documents directly contain requested keywords 
similar benefits context enhanced search suggested results second study user data content indexable system able find results user interested rank appropriately required user input 
results answer implicit question posed thesis statement connection automatically gathered context information provides information file turn improves effectiveness file indexing search 
context assist personal file retrieval performance evaluation traditional content search performance costs include time required scan file data create index space required store index time required query index 
similarly added performance costs context enhanced search additional indexing time required build relation graph traces additional disk space required store relation graph additional time required search relation graph query 
chapter measure overheads discuss source overheads describe potential methods reducing overheads 
performance experiments run linux intel xeon ghz gb ram seagate rpm gb disk drive 
cases configured mb buffer cache mb log cache 
traces experiments described chapter offline experiment 
indexing performance connections indexing phase consists content analysis merging file system traces relation graph 
startup cost content indexing high incremental costs low users accept 
furthermore content indexing times vary widely technique seconds gigabyte area related tangential ongoing number groups analyzed 
indri reported indexing times just minutes gigabyte 
context analysis startup cost record temporal relationships exists initially 
evaluate incremental cost context indexing measured time required merge day traces corresponding machine relation graph months traces 
average indexing time single day traces seconds standard deviation seconds 
longest observed indexing time seconds 
overheads low believe users find acceptable 
machine constantly powered worst case minute day indexing time low run background little impact foreground 
context assist personal file retrieval size mb space utilization months machine machine machine machine machine machine growth relation graph space utilization space utilization connections combination space required indri content index space required maintain relation graph 
similarly indexing times size content indexes vary widely technique area related tangential ongoing number groups analyzed 
indri reported index sizes original data size 
relation graph representation user files connected size grow larger number files user file system 
limit represents worst case scenario file related file system 
questions answer space required maintain relation graph graph nodes edges growth characteristics ratio 
examine questions ran months traces system connections indexing algorithms measured number nodes edges total space utilization day 
figures illustrate size relation graph average number links connected node link density number nodes relation graph respectively traced machine month tracing added graph 
noticable result context index quite small 
user data average number links node space utilization months machine machine machine machine machine machine growth number links node relation graph sets ranging gb gb size largest index size smallest data set 
naive design connections relation graph database expected storage overhead node size mappings nodeid bytes file name approximately bytes back expected storage overhead edge space required store link bytes weight bytes incoming outgoing node 
totals average number links node graph 
estimate reported sizes example examining machine estimate months mb measured size mb 
cause expected size actual size side effect storage mechanisms 
indexing tables incurs small overhead expected data size 
second uses sector sized pages nodes links single link require bytes store link information 
high variability link counts inefficiency accounts additional space database indicating important aspect consider design space conserving link database 
regards growth characteristics graph indicates link density worst case linear growth fairly stable 
warm period different user average number links graph indicating hysteresis important result quality context assist personal file retrieval node count thousands machine machine machine machine machine machine months growth number nodes relation graph graph size maintenance 
reason non exponential graph growth user working set size change time 
worst case nodes system connected users access files concurrently manage small subset files 
result linear growth graph size constant ratio nodes links 
exception machine drastic spike number nodes months combined corresponding drop average number links node 
caused large number new files added machine user joined ongoing new project 
user access files initially added ratio nodes links dropped ratio actively accessed files remained 
querying performance third overhead introduced context enhanced search increase query time caused searching relation graph re ranking results 
measure overhead measured execution time queries separating time required content querying context querying 
average query time seconds second content querying seconds context querying 
despite increase query time second query time may small machine time table average query performance machine wrap users willing accept 
furthermore examining query times individual relation graphs indicates improvements link storage significant improvements query performance 
table lists average context query time machine default relation graph generated months traces machine 
interestingly profiling query engine indicates machines time spent file time machine time indicating efficient disk link structure layout provide significant improvements query time 
lower performance machine caused cache misses relation graph size machine large queries fit entirely mb database cache 
increasing cache size mb mb reducing load time link structure single mb disk read reduces average query time machine seconds 
wrap performance analysis indicates overheads connections small little effect deployment system 
results indicate largest improvements performance gained changes structure link database 
finding layout clusters closely related items reduces space required store link information may possible reduce time involved searching updating relation graph 
context assist personal file retrieval sensitivity analysis chapter uses traces data gathered offline study examine algorithms connections providing insight contextual relationships formed potential pit falls system 
begins sensitivity analysis specific algorithms connections discusses effect changes underlying content analysis tool effect user input contextual clue effect graph growth time result quality 
parameter sensitivity design objectives connections flexibility 
providing large number tuning knobs allows experimentation provides understanding contextual relationships formed relationships contain useful information search 
ran sensitivity analysis answer questions 
sensitive parameter settings change far knobs turned affect result quality 
second parameters set outside sensitivity bounds changes occur graph affect result quality 
just retrieval system tension connections false negatives 
false positives connections usually caused supernodes nodes highly connected relation graph creating irrelevant relationships lead incorrect results 
false positives largest impact precision appear early results low recall levels precision measured number examined results 
false negatives connections usually caused parameters restrictive preventing system relevant paths relation graph missing relevant results 
false negatives largest impact precision high recall levels reasons 
lost results usually connected nodes relation graph relevant lowest ranked correct results 
second missing results prevent system achieving high recall levels dropping precision levels 
super node detection techniques reduce sensitivity system parameter settings reducing effect false positives created super nodes large deviations parameter settings significantly increase link counts relevant nodes look super nodes defeating advantages super node context assist personal file retrieval precision recall user id process id access tree indri sensitivity isolation level detection techniques 
result combined super node detection parameters surprisingly insensitive change best performing settings result similar performance super node detection 
ran full matrix parameter settings parameter combinations section examines trade offs parameter individually settings listed section baseline 
exception default super node detection technique 
chosen percentile detect effectively reduces effect super nodes case parameters set incorrectly 
graphs section contains indri search results second comparison point 
better highlight differences parameter settings graphs shown precision scale goes 
indexing parameters indexing parameters determine links formed relation graph include isolation level access filter window size edge direction 
relevant links built time tension parameters ignoring irrelevant links avoid false positives including links may stronger time appear irrelevant 
precision read read filter open filter read write filter ops filter indri parameter sensitivity recall sensitivity access filter isolation level illustrates results different isolation levels provided connections user id default level process id access tree 
process id access tree isolation user id isolation important inter process interactions user invokes intent direct application behavior 
example user reading pdfs working word document working report context fully captured process level isolation technique 
interestingly access tree isolation broadly connects files relation graph process id isolation performs slightly better 
process id access tree isolation capture relationships output file process tree input file 
access tree isolation introduces false positives application specific files cause super nodes strongly connected graph 
result additional false positives drive precision 
intricate isolation levels may outperform techniques offered connections methods identify complete user tasks application specific behaviors successful 
access filter illustrates results different access filters available connections read read open read write default filter ops 
filters read write filter performs best 
largely due fact introduces fewest number false positives 
filters potential increase recall read write filter increased noise reduces context assist personal file retrieval effectiveness increased recall 
interestingly intuitively read read connections considered useful practice large number read read connections normal system operation introduce problems lead significantly reduced precision 
increase extra links flattens link count distribution making valid nodes look supernodes vice versa 
renders super node detection ineffective detector begins lump valid nodes invalid nodes similar link counts 
second increase link weights irrelevant connections reduce impact valid connections 
problem connections techniques completely eliminate irrelevant links 
alpha parameter helps reduce effect incorrect link counts assumes relative link weights approximately correct assumes links weight relevant uses weight 
read read links invert assumption irrelevant links weight 
example problems created read read links consider files core submit ps returned results read read search query 
file core debugging memory dump failed application relevant search 
file submit ps marked relevant search user 
read write case core file rarely linked relation graph written infrequently files content point core strength returned 
read read case core file heavier links relation graph mark supernode 
caused lengthy debugging session spans large number relation windows 
debugging session accesses files unrelated core relevant search terms cause creation misleading links disjoint contexts 
search misleading links lead relevant content results irrelevant core file 
particular case web cache files auto save files mail cache files music files trace files pdf files number miscellaneous files connected core caused concurrent tasks listening music checking email browsing web 
connected files marked relevant content search adding core file list results 
problem exacerbated connections core unrelated files added results 
conversely addition read read links relation graph little effect connectedness submit ps relevant links identified user created compiled document 
result read read case core ranked higher results submit ps weight links cases higher inversion link weights mentioned 
despite deficiency search applications results targeted specifically user information need false positives cause frustration failure read read links may useful organizational tasks 
example read read links user different contexts core submit ps precision parameter sensitivity recall seconds seconds minute minute minute indri sensitivity window size fall user select set files relevant 
system information group manage data 
exploring options viability read read links ways search area 
open filter reduced precision caused large numbers application specific relationships 
applications read large number applicationspecific files operation irrelevant user 
open calls read write result combination read write write read relationships 
particular read read relationships causes problems discussed 
ops filter reduced precision caused irrelevant relationships formed extra information trace 
frequency system calls access increase number ephemeral links graph 
increase average link counts impacts super node detection particularly stddev detect scheme increasing number false positives 
furthermore increase links weight cutoff restrictive link smaller percentage total node weight cutting relevant links reducing precision 
despite problems connections matches beats indri filtering schemes 
indicates context information available trace contains useful relationships task determine best method identifying 
window size illustrates results different window sizes context assist personal file retrieval precision recall undirected directed indri sensitivity edge direction seconds seconds default setting minute minutes minutes 
smaller window size fewer connections nodes relation graph resulting fewer reachable nodes 
result false negatives reducing precision system high recall levels 
reason windows sizes small seconds perform applications batch behavior auto saves combination second window path length steps capture user behavior connecting web cache files downloads 
larger window sizes files densely connected 
increase link counts eventually begins reduce effectiveness super node detection minutes resulting lower precision low recall levels 
edge direction illustrates difference directed default setting undirected links connections 
drawback undirected links discarding temporal ordering relationships trace introduces large number additional links relation graph 
just open filter read read relationships increases number irrelevant application specific links relation graph undirected links create large number irrelevant application specific links write read connections inverted read write connections 
normally invalid read write connections caused reading application specific files ignored read files returned correct content analysis incoming links nodes 
undirected links effectively double number links graph making precision parameter sensitivity recall path length path length path length path length path length indri sensitivity path length weight cutoff restrictive just ops filter cutting relevant links 
result increase false positives false negatives reduce precision recall levels 
search parameters search parameters path length weight cutoff determine links taken relation graph forming result graph 
relation graph err including information difficult identify difference ephemeral links new important links link creation time 
tension search parameters including relevant nodes relation graph ephemeral links links super nodes 
path length illustrates effect varying path length parameter connections 
default path length connections illustrated graph path lengths perform similarly 
drawback small path length information gathered relation graph properly inform ranking algorithm 
result large number false negatives reduce precision system particularly low recall levels 
drawback large path length increase followed paths lead super nodes results large numbers false positives 
supernode detection mitigates degree path length increases sufficiently context assist personal file retrieval precision weight cutoff weight cutoff weight cutoff weight cutoff weight cutoff indri recall sensitivity weight cutoff penalties associated super nodes increased correspondingly continue effective 
despite potential pitfalls context enhanced search matches beats content search path lengths 
weight cutoff figures illustrate effect varying weight cutoff respectively 
default weight cutoff connections cutoff performs similarly 
drawback overly low weight cutoff result graph include large number ephemeral links links leading super nodes resulting high numbers 
case number false positives high affect precision high recall levels 
drawback overly high weight cutoff result graph restrictive ignore informative links resulting false negatives reduces precision system high recall levels 
ranking algorithms ranking algorithms basic bfe pagerank hits determine order nodes result graph user 
objective algorithms identify relevant results strength relationships result graph relation graph 
easier search parameters remove links links super nodes basic bfe algorithm includes precision weight cutoff weight cutoff weight cutoff weight cutoff weight cutoff indri parameter sensitivity recall sensitivity weight cutoff methods detecting super nodes reducing effectiveness 
basic bfe illustrates effect varying alpha parameter basic bfe algorithm 
default alpha setting setting performs similarly 
case alpha low link weights ignored ranking 
result relevant links pass weight pushing relevant results higher rankings reducing precision low recall levels 
interestingly increasing weight cutoff reduces negative effect low alpha parameters indicating link weights inaccurate unimportant relevant links important task identify relevant links 
case alpha high link weight variability caused application behavior favors super nodes increasing false positives reducing rank relevant nodes weaker links reducing precision recall levels 
pagerank illustrates effect pagerank rank results context enhanced search different techniques discussed chapter pr pr pr 
pagerank applied pr performance similar content search 
pagerank designed find authority pages undesirable local file system search 
authority relevant web web search include expansion phase connections 
ranking pages include queried terms incoming hyperlinks terms irrelevant pages particularly high pagerank included results 
context assist personal file retrieval precision recall alpha alpha alpha alpha alpha content sensitivity alpha nodes usually sinks graph nodes incoming links outgoing links cases irrelevant application specific files written rarely read web cache files super nodes 
applying pagerank initial ranking referred non uniform prior relevance value results content search applying basic bfe pr result similar basic bfe 
indicates context information relevant content rankings tendency outweigh non uniform priors applied content rankings discussed section 
conversely pagerank applied basic bfe pr accurate rankings provided pagerank tend cancel ranking improvement provided basic bfe 
result highly ranked results basic bfe pushed ranking giving precision similar pagerank 
hits illustrates effect hits rank results search authority hub rankings different techniques hits expanded hits 
hits expanded hits basic bfe 
reasons hits reduced performance similar pagerank application specific files imbalanced incoming outgoing links authorities hubs respectively particularly super nodes outweigh importance relevant nodes 
method super node detection schemes push relevant results lower rankings 
especially evident looking results expanded hits auth precision parameter sensitivity recall basic bfs sn pagerank prior pagerank post pagerank content pagerank methodology comparison precision goes results introduced 
super node detection illustrates effect different supernode detection techniques default indexing search parameters 
graph shows interesting results 
parameters tuned best settings basic bfe outperforms pr detect clique detect schemes 
parameter settings sufficiently mitigate effects super nodes detection techniques incorrectly identify valid nodes super nodes falsely penalize 
second pagerank poor super node detection scheme 
pagerank tends rank authority nodes highly authority nodes portion super nodes graph 
super nodes large number incoming outgoing links meaning sinks authorities relation graph fact ranked quite poorly pagerank 
result kind super node boosted pagerank enhancing effects super nodes 
third global information relation graph stddev detect percentile detect useful local information result graph clique detect parameter settings tuned properly 
algorithms local information clique detect assume nodes result graph super nodes potentially penalize correct results 
result clique detect performs stddev detect settings 
fourth percentile detect performs closely maps distribution context assist personal file retrieval precision basic bfs sn hits auth hits hub expanded hits auth expanded hits hub indri recall hits methodology comparison super nodes graphs 
shows distribution link counts default year relation graphs traced machines 
heavy tailed nature distribution shows super nodes contained heavily connected nodes success th th percentile identify penalize super nodes 
illustrates effect super node detection techniques weight cutoff parameter dropped 
case indexing search parameters entirely mask super node effects causing performance basic bfe drop significantly 
stddev detect clique detect perform able properly identify mitigate super nodes 
percentile detect performance drops parameters need tuned effect super nodes specific graph 
increasing beta parameter case improve performance percentile detect 
mitigating effect super nodes detection techniques connections able provide wide range parameter settings improve quality search results 
results indicate inaccuracies relation graph formed misleading application behavior user behavior 
exploring techniques identify user desired action application behavior inaccurate links culled relation graph search time potentially improving search quality 
precision alternate content analysis alternate content analysis basic bfs pr detect clique detect stddev detect percentile detect indri recall super node detection indri provides detailed confidence information ranked results file system search tools today provide ranking information microsoft fast find glimpse rank order provided confidence information google desktop msn desktop 
see context enhance tools consider questions benefit derived context rank order provided content results rank order naive confidence curve applied order achieve benefits similar achieved full confidence information 
answer questions compared original connections system uses full confidence information alternate implementations 
ignores confidence ranking information assumes equal confidence results returned indri 
second ignores provided confidence information applies linear confidence function provided rank order 
equation describes confidence ci calculated nodes results 
rank order node 
effectively result receives confidence linear spacing particular equation choosen provide linearly decreasing confidences property confidences sum 
detailed examination space require complex model 
context assist personal file retrieval percentage files ranked results 
percentage links super node distribution ci results comparison shown 
interesting aspects results 
little information rankings content analysis tool connections informed accurate ranking decisions solely context information 
second difference rank order information information small 
surprising primarily due low precision content rankings identifying relevant items set user actions connections able provide better rankings pushing items higher list 
third recall precision connections dominated entirely context ranking 
queries content analysis systems achieve level recall provide rankings results past point 
lack information content rankings may contribute advantage context rankings lower recall levels 
explore effect alternate content analysis methods explored alternate content rankings ranking uses strict boolean identify results ranking uses pseudo relevance feedback alter content results rankings 
shows results boolean identify rank content precision alternate content analysis basic bfs pr detect clique detect stddev detect percentile detect indri recall super node detection weight cutoff results opposed indri original inference network approach 
unsurprisingly boolean provides lower precision low recall levels indri default ranking 
adding context information 
context ranking relies provided content confidences errors content rankings manifest lower benefits context example benefit boolean opposed seen original system 
second total number correct results returned boolean similar indri original results number related results significantly smaller 
causes sharp drop connections boolean related information connections find additional results 
shows results pseudo relevance feedback original content results opposed indri original inference network approach 
pseudo relevance feedback takes results original content search techniques identifies additional keywords results included user provided keywords 
full set keywords queried get final result list 
interestingly pseudo relevance feedback performs similarly original content rankings 
caused assumption pseudo relevance feedback ran pseudo relevance feedback results finding additional terms described chapter 
context assist personal file retrieval precision recall full information rank order information content combining context alternate content analysis tools provided feedback results relevant query 
unfortunately results inaccurate relevance feedback finds additional terms irrelevant query 
contrast connections find temporal commonality low ranked results increase ranking relevant results reduces relevance high ranked results contextually irrelevant 
change pseudo relevance feedback underlying content results sharp effect total number correctly located items connections 
addition pseudo relevance feedback increases content similarity returned results turn appears reduce context spread 
words contextually related results don content similarity results dropped reducing number additional hits connections locate 
matches increase improvement seen recall increase items single context provide connections information improve rank items 
results provide 
context information provides useful information ranking results personal file search 
knowledge content rankings context enhanced search outperforms content search 
second focusing content results strongly particular aspects query terms finding results results similar content limit effectiveness context enhanced search 
cases term relevant different contextual groups connection identify additional relevant items contextual group precision original context original boolean context boolean existing user input recall strict boolean identify content results starting points group 
existing user input traditional semantic file systems attributes come sources content user input 
discussed content analysis basis search user input notoriously difficult obtain 
file systems contain source user input path name file 
file name information enhance content analysis section discusses clustering aspect directories try enhance context analysis 
see effective directory hierarchy capturing user context created version connections generated relation graph connecting files directory equally weighted links 
directory relation graph evaluate effectiveness existing user input context 
directory information relation graph enhance content search combining directory information temporal locality provide additional benefits 
graphs precision recall systems connections temporal locality connections directory hierarchy indri 
result directory hierarchy information reduces precision system recall level performing worse content search 
reduction caused context assist personal file retrieval precision original context original prf context prf recall pseudo relevance feedback identify content results different user behaviors 
users actively organize files directories 
example user downloads directory contains large number unrelated files 
file directory content result large number false positives created closely related items graph 
second users organize files way search way 
example user organize set papers conference search topic vice versa resulting large number false positives 
graph growth result quality connections perform hysteresis decaying link weights time potential misleading information stored graph eventually weight effect result quality 
explore possibility continued gather traces users additional months time study 
traces built relation graphs machine month interval lifetime traces default settings described section 
month relation graph contained months traces month relation graph contained months traces re ran queries respective relation graphs see changes graph time affect precision recall searches 
precision graph growth result quality temporal context content directory context recall applying existing user input directory hierarchy illustrates precision recall curves time periods examined results months matching results 
queries issued months expected graph months provide accurate results complete context queries issued having additional potentially faulty information 
case graph contains trace information months missing information describes files relevant query created accessed graph generated query issued 
result false negatives lead lower system precision 
examining graphs trace information clear system precision slowly degrades time 
possible explanations behavior 
possibility addition links time adds noise graph impossible discern relevant irrelevant relationships indicating amount hysteresis critical live system techniques 
possibility time additional results graph newly created accessed files relevant query addition results artificially reducing precision system standard results measured generated months 
experiment possibility able get users repeat study queries results gathered graph data months 
having users re context assist personal file retrieval precision recall months months months months months months months months effect graph growth result quality evaluate results regenerate oracle results possible measure benefit new results added additional nodes graph 
illustrates precision recall curves just user queries different systems indri content search month graph compared original oracle results created months month graph compared original oracle results month graph compared new oracle results generated months 
just month graph precision drops significantly compared original oracle results 
compared new oracle results precision system returns nearly level month graph 
result indicates context query important results query may change time graph continues capture valuable information long periods time slight drop precision especially low recall levels indicates hysteresis improve results reducing effect ephemeral irrelevant links time may critical implementing working system 
wrap sensitivity analysis provides important 
algorithms described chapter robust improper parameter settings underlying algorithms precision content months old months old months new wrap recall effect graph growth result quality new classification graph growth time 
second better starting points connections accurately identify correct contextual results content analysis tools continue improve context enhanced search tools 
third sources user input potentially valuable considered carefully included contextual clues 
fourth detrimental effects additional history information small longterm archival data stores need address currently open problem hysteresis reduce index sizes prevent eventual dilution context information 
context assist personal file retrieval context powerful tool assisting users organize locate data 
identified key way users think locate personal data world wide web resulted significant improvements search quality 
thesis describes connections context enhanced file system search tool 
connections identifies contextual inter file relationships temporal locality file accesses taken system level traces 
relationships connections extends re ranks results traditional content search tools 
offline analysis connections shows improvements precision recall live user study suggests connections reduces amount user input time required successfully locate desired data 
confirms thesis automatically gathered context information provides attributes files content analysis increase information improves effectiveness file indexing search tools 
sensitivity analysis connections algorithms components shows potential pitfalls connections design advantages surprisingly robust imperfect parameter settings 
performance analysis connections shows benefits context enhanced search achieved minimal space utilization performance overheads 
largest contribution show relevance context information personal file search 
despite simplicity algorithms integrating context information significantly improves large class queries showing potential combining context information traditional content analysis techniques 
remainder chapter describes additional contributions limitations describes areas lead advancements 
contributions limitations thesis contributes key advances personal file search 
provides algorithms identifying utilizing temporal inter file relationships personal file search 
analysis algorithms parameter trade offs lays groundwork advances enhancements space 
furthermore algorithms non optimal show content insufficient completely satisfy large class personal data queries 
cases relevant query results include data context assist personal file retrieval contain user specified keywords particular case non text queries surprising number non text queries 
algorithms succeed identifying files context including result set 
second thesis provides framework implementing experimenting context enhanced search 
importantly framework provides explicit separation content context analysis 
new techniques context content analysis emerge quickly easily combined compared existing search tools 
extending chain techniques framework existing content context chain allow combinations multiple context analysis techniques directly integrating techniques 
third thesis provides connections working context enhanced search tool linux windows 
connections directly identify contextual relations providing database file inter relationships applications drop replacement existing search tools 
connections context enhanced search advantages traditional search 
connections locates relevant data searches increasing average recall particularly examining returned results 
increase users locate desired data combined accurate ranking algorithms provides opportunity improved precision 
second connections able locate relevant files contain little parsable contents increasing average recall precision significantly users search results include non text data 
third ability locate relevant files keywords extends locating relevant content parsable files contain user specified keywords search increasing recall precision textual searches 
despite connections advances advantages limitations addressed improve effectiveness search 
requires month traces algorithms improve effectiveness state user access patterns provide additional information 
second successful algorithms locate data user created modified connections ineffective read data sets data created connections installed 
third hyperlinks links identified connections contain associated keywords 
limit available information reduces effectiveness algorithms rely contextual clues improve search 
potential approaches deal second limitations potential advancements connections discussed 
shown temporal locality powerful form context leveraged improve file indexing search 
despite benefits shown form temporal locality considered crude 
connections employs system level information captures application behavior direct user actions 
result application significantly affect witnessed temporal relationships 
obvious settings read read access filter introduces significant numbers false positives 
techniques super node detection alleviate problems long term solution requires better understanding application translation user intent file system activity 
direction research explore forms application profiling help capture translation better inform connections validity formed relationships 
sources context help inform connections relationship validity provide additional sources relationships 
application assistance way enhance application profiling remove sources faulty relationships 
better understanding link relevance settings read read employed allowing connections locate files user accesses current limitation user created modified files 
furthermore application provided keywords assigned created links potentially opening door application web ranking algorithms harness hyperlink text 
furthermore application assistance useful application cache file accesses web caches email caches text document buffer caches provide detailed information sub document relationships individual emails imap folder links cached web page paragraphs document 
areas consideration include hints user interfaces environmental factors mobile computing user specified contexts 
connections currently keeps gathered context information permanently number sources context time information kept grow integrating hysteresis connections important task 
year span slight degradations connections performance noticeable current focus long term archival storage projects lasting lifetime data degradations eventually render context enhanced search untenable addressed 
currently connections identifies relationships information gathered single computer today users interact machines 
actions performed set data computer relevant accessing searching data computer 
examining context information shared machines interesting area 
similarly users share data question arises regarding inter user context sharing 
alice accesses data bob alice actions assist bob organizing searching data 
bob able identify alice doing obfuscate information providing relevant contextual hints 
contextual information continues relevant accurate questions regarding continue grow 
connections prototype shows form context improve utility local file search opening door explore questions 
context assist personal file retrieval bibliography abdul allan croft diaz larkey li metzler turtle wade 
umass trec notebook 
text retrieval conference 
abdul emmanuel li liu wade allan 
umass trec hard qa 
text retrieval conference pages 
agrawal imielinski swami 
mining association rules sets items large databases 
acm sigmod international conference management data pages 
agrawal srikant 
fast algorithms mining association rules 
international conference large databases 
altavista www altavista com 
amer long 
paris burns 
file access prediction adjustable accuracy 
international performance conference computers communication 
ieee 
american library association 
anglo american cataloguing rules 
american library association 
apple spotlight www apple com features spotlight 
van 
score distributional threshold optimization adaptive binary classification tasks 
pages 
baeza yates ribeiro neto :10.1.1.27.7690
modern information retrieval 
acm press 

solution selection fusion problem distributed information retrieval 
pages 
berners lee cailliau luotonen nielsen secret 
worldwide web 
communications acm august 
berners lee hendler lassila 
semantic web 
scientific american 
context assist personal file retrieval bowman danzig manber schwartz 
scalable internet resource discovery research problems approaches 
communications acm 
bradley fayyad reina 
scaling clustering algorithms large databases 
international conference knowledge discovery data mining pages 
brin page 
anatomy large scale hypertextual web search engine 
computer networks isdn systems 
callan croft harding 
inquery retrieval system 
international conference database expert systems applications pages 
card ts tweedie 
design implementation second extended filesystem 
dutch international symposium linux 
chen kotz 
survey context aware mobile computing research 
dartmouth computer science technical report tr 
november 
clarke craswell 
overview trec terabyte track 
text retrieval conference 
nist 
www com 
collins thompson callan 
initial results structured queries models half terabyte text 
text retrieval conference 
nist 
cutting karger pedersen tukey 
scatter gather cluster approach browsing large document collections 
acm sigir international conference research development information retrieval pages 
acm 
czerwinski dumais robertson van dantzich 
visualizing implicit queries information management retrieval 
chi pages 
dourish 
talk talk context 
personal ubiquitous computing february 
dourish edwards lamarca salisbury 
uniform document interaction document properties 
acm symposium user interface software technology 
dumais cutrell sarin 
stuff seen system personal information retrieval re 
acm sigir international conference research development information retrieval 
acm press 
bibliography faloutsos ranganathan manolopoulos 
fast subsequence matching time series databases 
acm sigmod international conference management data pages 
fertig freeman gelernter 
lifestreams alternative desktop metaphor 
acm sigchi conference pages 
ganger kaashoek 
embedded inodes explicit grouping exploiting disk bandwidth small files 
usenix annual technical conference pages january 
ganti ramakrishnan gehrke powell french 
clustering large datasets arbitrary metric spaces 
international conference data engineering pages 
gemmell bell drucker wong 
fulfilling memex vision 
acm multimedia pages 
acm 
gemmell williams wood bell 
passive capture ensuing issues personal lifetime store 
workshop continuous archival retrieval personal experiences pages 

practical file system design file system 
morgan kaufmann 
gifford jouvelot sheldon toole jr semantic file systems 
acm symposium operating system principles 
published operating systems review october 
google desktop desktop google com 
yahoo desktop desktop yahoo com 
gopal manber 
integrating content access mechanisms hierarchical file systems 
symposium operating systems design implementation pages 
acm 
griffioen appleton 
reducing file system latency predictive approach 
summer usenix technical conference pages 
usenix association 
www com 
guha rastogi shim 
cure efficient clustering algorithm large databases 
acm sigmod international conference management data pages 
context assist personal file retrieval horvitz breese heckerman 
lumiere project bayesian user modeling inferring goals needs software users 
conference uncertainty artificial intelligence pages 
swami 
set oriented mining association rules relational databases 
international conference data engineering pages 
kamvar haveliwala manning golub 
extrapolation methods accelerating pagerank computations 
world wide web conference 
acm 
kelly 
implicit feedback inferring user preference bibliography 
sigir forum 
kleinberg 
authoritative sources hyperlinked environment 
journal acm 
acm september 
kroeger long 
predicting file system actions prior events 
usenix annual technical conference pages 
usenix association 
lei duchamp 
analytical approach file prefetching 
usenix annual technical conference 
usenix association 
lemur toolkit www org 
lorch smith 
tool building system tracer windows nt windows 
msdn magazine october 
linux cross linux 
lycos www lycos com 
manber smith gopal 
webglimpse combining browsing searching 
usenix annual technical conference 
usenix association 
manber wu 
glimpse tool search entire file systems 
winter usenix technical conference pages 
usenix association 
manmatha feng 
modeling score distributions combining outputs search engines 
pages 
mauldin 
retrieval performance ferret conceptual information retrieval system 
acm sigir international conference research development information retrieval pages 
acm press 
mckusick joy leffler fabry 
fast file system unix 
acm transactions computer systems august 
bibliography metzler turtle croft 
indri trec terabyte track 
text retrieval conference 
mitchell 
machine learning 
mcgraw hill 
neuman 
prospero file system global file system virtual system model 
usenix workshop file systems pages may 
park 
chen yu 
effective hash algorithm mining association rules 
acm sigmod international conference management data pages 
qin 
liu 
zhang chen 
ma 
study relevance propagation web search 
acm sigir international conference research development information retrieval 
quan huynh karger 
haystack platform authoring user semantic web applications 
international semantic web conference 
rhodes 
physical context just time information retrieval 
ieee transactions computers 
acm press august 
rhodes starner 
remembrance agent continuously running automated information retrieval system 
international conference practical application intelligent agents multi agent technology pages 
russinovich 
inside 
windows nt magazine january 

blending hierarchical attribute file naming 
international conference distributed computing systems pages 
zhai 
relevance propagation topic distillation uiuc trec web track experiments 
text retrieval conference 
song 
wen shi xin 
liu qin zheng zhang xue 
ma 
microsoft research asia web track terabyte track trec 
text retrieval conference 
steffen 
interactive examination program 
winter usenix technical conference pages 
usenix association 
alvarado ackerman karger 
perfect search engine study orienteering behavior directed search 
conference human factors computing systems pages 
acm 
dumais horvitz 
personalizing search automated analysis interests activities 
acm sigir international conference research development information retrieval 
acm 
context assist personal file retrieval information retrieval platform ir dcs gla ac uk 
toivonen 
sampling large databases association rules 
international conference large databases pages 
watts strogatz 
collective dynamics small world networks 
nature 
merriam webster online www com 
windows desktop search www microsoft com windows 
microsoft msdn microsoft com data ref 
xu croft 
query expansion local global document analysis 
acm sigir international conference research development information retrieval pages 
xu karlsson tang 
semantic aware file store 
hot topics operating systems pages 
usenix association 

measuring characterizing system behavior kernel level event logging 
usenix annual technical conference 
yahoo www yahoo com 
