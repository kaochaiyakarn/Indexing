efficient identification overlapping communities jeffrey mark goldberg malik ismail rensselaer polytechnic institute th street troy ny usa 
email goldberg cs rpi edu 

efficient algorithm finding overlapping communities social networks 
algorithm rely contents messages uses communication graph 
knowledge structure communities important analysis social behavior evolution society individual members 
knowledge helpful discovering groups actors hide communications possibly malicious reasons 
idea communication graphs identifying clusters actors new traditional approaches exception produce disjoint clusters actors de facto postulating actor allowed belong cluster 
algorithm significantly efficient previous algorithm produces clusters comparable better quality 
individuals actors social community tend form groups associations reflect interests 
common actors belong groups 
groups may may publicized known general social community 
groups fact hidden intentionally communicational microcosm 
group attempts intentionally hide communication behavior multitude background communications may planning undesirable possibly malicious activity 
important discover groups attempt undesirable activity 
novel efficient algorithm finding overlapping communities data communicated 
primary motivation finding social communities information order filter hidden malicious groups criteria see 
knowledge communities crucial analysis social behavior evolution society individual members 
need automated tool discover communities presence absence communications highlighted sheer research partially supported nsf conducting discovery looking volumes actual contents communications trying interview actors regarding social groups belong think belong 
idea communication graphs identifying clusters users new 
guiding principle classical clustering algorithms distance algorithms algorithms partitioning algorithms matrix algorithms employ svd technique 
main drawback approaches produce disjoint clusters actors de facto postulating actor allowed belong cluster 
severe limitation social communication networks 
serious need exists efficient tools produce overlapping communities clusters 
mathematical formulation problem determining clusters may possibly overlapping introduced defines cluster locally optimal subgraph respect metric 
briefly review notion cluster section 
locally optimal subgraphs may overlap formulation allows overlapping clusters 
algorithm finding locally optimal subgraphs consists parts initialization rare creates seed clusters improvement repeatedly scans vertices order improve current clusters arrives locally optimal collection clusters 
focus provide new efficient algorithm initializing seed clusters performing iterative improvements 
specifically main contributions procedure list aggregate la initializing clusters procedure iteratively improves set clusters 
combined algorithm develops overlapping subgraphs general graph 
algorithm significant improvement algorithms 
particular algorithm applied large node networks 
computational experiments comparing new algorithm show new algorithm order magnitude faster simultaneously produces clusters comparable better quality 
clusters adopt idea formulated group actors social network forms community communication density function achieves local maximum collection groups close call groups close identical changing membership just actor 
different notions density functions proposed consider experiment notion specifically density group defined average density communication exchanges actors group 
group community adding new member removing current member group decreases average communication exchanges 
call cluster corresponding subgraph graph representing communications social network 
definition reduces task identifying communities graph clustering 
clustering important technique analyzing data variety applications areas data mining bioinformatics social science 
traditionally see example clustering understood partitioning data disjoint subsets 
limitation severe unnecessary case communities function social network 
definition allows actor member different clusters 
furthermore algorithm designed detect overlapping communities 
algorithms link aggregate algorithm la algorithm performs discovering communities initial guess example initial guesses outputs clustering algorithm rare opposed random edges communication network 
discuss different efficient initialization algorithm 
rank removal algorithm rare begins ranking nodes criterion procedure la order vertices added false dj dj vi dj dj dj vi added true added false vi return page rank 
highly ranked nodes removed groups small connected components formed called cluster cores 
cores expanded adding removed node cluster density improved adding 
approach successful discovering clusters main disadvantage inefficiency 
due part fact ranks connected components need recomputed time portion nodes removed 
runtime rare significantly improved ranks computed 
remainder rare refers rank removal algorithm improvement stated 
clusters refined seed algorithm needs find approximate clusters 
algorithm clean clusters 
mind new seed algorithm link aggregate la focuses efficiency capturing initial clusters 
pseudocode 
nodes ordered criterion example decreasing page rank processed sequentially ordering 
node added cluster adding improves cluster density 
node added cluster creates new cluster 
note node cluster 
clusters small relevant particular application dropped 
runtime may bounded terms number output clusters follows theorem 
runtime la 
proof 
ci set clusters just ith iteration loop 
time takes ith iteration ci deg vi deg vi number edges adjacent vi 
edge adjacent vi put classes cluster ci endpoint edge cluster outside 
information density cluster vi added may computed quickly compared current density 
deg vi zero iteration takes time 
total runtime asymptotically order deg vi ci deg vi deg vi ci deg vi deg vi 
improved iterative scan algorithm original algorithm explicitly constructs cluster local maximum density metric starting seed candidate cluster updating adding deleting node time long metric strictly improves 
algorithm stops improvement obtained single change 
original process consists iterating entire list nodes cluster density improved 
new algorithm pseudocode format right 
order decrease runtime observation 
nodes capable increasing cluster density members cluster removed members cluster immediate neighborhood defined nodes adjacent node inside procedure seed seed increased true increased increased false return cluster 
visiting node iteration may skip nodes belonging groups 
neighborhood cluster smaller entire graph significantly improve runtime algorithm 
note algorithm strictly original algorithm potentially node absent neighbor cluster nodes examined 
node chance join cluster original algorithm skipped 
issue node chance join cluster iteration algorithm provides potential decrease increase runtime 
decrease occurs cluster neighborhood small compared number nodes graph 
case sparse graph 
case building neighborhood set takes relatively short time compared time savings skipping nodes outside neighborhood 
increase runtime may occur cluster neighborhood large 
finding neighborhood expensive plus time savings small nodes absent large cluster dense graph property 
case original algorithm preferable 
experiments algorithm mail web rare la algorithm newsgroup fortune rare la table 
algorithm performance real world graphs 
entry cell average value wad 
entries parentheses average number clusters average number nodes cluster 
fourth entry runtime algorithm seconds 
mail graph represents mails rpi community single day nodes 
web graph network representing domain www cs rpi edu nodes 
newsgroup graph edges represent responses posts alt conspiracy newsgroup nodes 
fortune graph network connecting companies members board directors nodes 
series experiments run order compare runtime performance new algorithm predecessor 
cases seed algorithm run obtain initial clusters refinement algorithm run obtain final clusters 
baseline seed algorithm rare followed proposed improvement consists seed algorithm la followed algorithms run series random graphs average degrees number nodes range 
simple model pairs communication equally 
runtime edges node original rare rare la number nodes runtime edges node rare la number nodes runtime edges node rare la number nodes runtime edges node number nodes runtime edges node number nodes runtime edges node number nodes fig 
runtime previous algorithm procedures rare compared current procedures la increasing edge density 
left comparison initialization procedures rare la la improves edge density increases 
right comparison refinement procedures expected results decreased runtime sparse graphs benefits decrease number edges large 
runtime cluster edges node rare la number nodes runtime cluster edges node number nodes fig 
runtime cluster previous algorithm rare followed current algorithms la followed 
plots show algorithms linear cluster 
rare la mean density edges node number nodes rare la mean density edges node number nodes fig 
performance average density algorithm compared previous algorithm 
runtime edges node number nodes rare la mean density edges node number nodes rare la fig 
runtime performance previous algorithm rare followed current algorithm la followed preferential attachment graphs 
runtime edges node la pagerank la random order number nodes mean density edges node la pagerank la random order number nodes fig 
runtime performance la different ordering types 
algorithms take input density metric attempt optimize metric 
experiments density metric chosen wad called average degree defined set nodes wad set edges endpoints runtime algorithms 
new algorithm remains quadratic seed algorithm refinement algorithm run times improved significantly sparse graphs 
upper left plot original version rare plotted recalculates node ranks number times precomputing ranks single time 
la times faster original rare algorithm twice fast graphs edges node 
plots right demonstrate tradeoff time spent computing cluster neighborhood time saved needing examine node 
appears tradeoff balanced edges node 
graphs dense original algorithm runs faster dense graphs preferable 
shows quadratic nature algorithm number clusters 
runtime cluster plotted resulting curves linear 
runtime consideration examining new algorithm 
important quality clustering hindered runtime improvements 
compares average density clusters old improved algorithms 
higher average density indicates clustering higher quality 
especially sparse graphs average density approximately equal old new algorithms older algorithms show slightly higher quality random graph cases 
graph model relevant communication networks preferential attachment model 
model simulates network growing natural way 
nodes added time linking nodes proportion degree nodes 
popular nodes get attention edges common phenomenon web real world networks 
resulting graph edges concentrated nodes 
algorithms run graphs model links node number nodes ranging 
demonstrates surprising change algorithm rare run type graph 
rare removes high ranking nodes correspond nodes large degree 
nodes added back clusters tend adjacent clusters takes considerable amount time iterate edges determine connect cluster 
algorithm la hand starts considering high ranking nodes clusters formed saving large amount time 
plot right shows quality clusters compromised significantly faster new algorithm la confirms constructing clusters order ranking page rank yields better results random ordering 
la performs better terms runtime quality 
surprising result random ordering obtained quickly ranking process 
nodes random ordering connected 
cause single node clusters formed early stages la high degree nodes examined clusters check adding node increase cluster density 
time consuming 
nodes ranked high degree nodes examined clusters created 
clusters attract nodes starting number new clusters resulting algorithm completing quickly 
algorithms tested real world data 
results shown table 
cases web graph new algorithm produced clustering higher quality 
described new algorithm discovery overlapping communities communication network 
algorithm composed procedures la tested random graph models real world graphs 
new algorithm shown run significantly faster previous algorithms keeping cluster quality roughly better 
addition demonstrated la procedure performs better nodes ranked opposed random order 
surprisingly ranking process initially takes time procedure runs quickly 
directions ongoing test different metrics apply algorithms variety networks ranging social communication networks protein networks ranging sizes hundreds nodes nodes 
variety options parameter settings available user useful provide practitioner exhaustive database test cases giving guidelines set parameters depending type input graph 

goldberg ismail preston 
finding communities clustering graph overlapping subgraphs 
proceedings applied computing pages february 

goldberg ismail wallace 
discovering hidden groups communication networks 
nd nsf nij symposium intelligence security informatics 

berry goldberg 
path optimization graph partitioning problem 
discrete applied mathematics 

brandes wagner 
experiments graph clustering algorithms 
lecture notes science di battista zwick eds 

drineas kannan frieze vempala vinay 
clustering large graphs matrices 
proc 
acm siam symposium discrete algorithms soda 

flake tarjan 
graph clustering techniques minimum cut trees 
technical report nec princeton nj 

jain dubes 
algorithms clustering data 
prentice hall 

kernighan lin 
efficient heuristic procedure partitioning graphs 
bell system technical journal 

newman 
structure function complex networks 
siam reviews june 

page brin motwani winograd 
pagerank citation ranking bringing order web 
stanford digital libraries working 
