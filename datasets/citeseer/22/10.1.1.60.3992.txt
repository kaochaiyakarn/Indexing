step indexed syntactic logical relations recursive quantified types amal ahmed harvard university cambridge ma amal eecs harvard edu 
sound complete proof technique syntactic logical relations showing contextual equivalence expressions calculus recursive types impredicative universal existential types 
development builds step indexed model recursive types appel mcallester 
discovered direct proof transitivity model go leaving status model question 
show extend appel mcallester model obtain logical relation prove transitive sound complete respect contextual equivalence 
augment model support relational reasoning presence quantified types 
step indexed relations indexed just types number steps available evaluation 
stratification essential handling various circularities recursive functions recursive types impredicative polymorphism 
resulting construction elementary existing logical relations require complex machinery domain theory admissibility syntactic minimal invariance closure 
proving equivalence programs important verifying correctness compiler optimizations program transformations establishing program behavior independent representation type 
representation independence principle guarantees implementation abstraction exchanged client modules able detect difference 
program equivalence generally defined terms contextual equivalence 
say programs contextually equivalent observable behavior placed program context unfortunately proving contextual equivalence difficult general involves quantification possible contexts 
result finding tractable techniques proving contextual equivalence 
method logical relations 
logical relations specify relations typed terms structural induction syntax types 
instance logically related functions take sestoft ed esop lncs pp 

springer verlag berlin heidelberg ahmed logically related arguments related results logically related pairs consist components related pairwise 
logical relations may denotational models operational semantics language :10.1.1.32.1976
known syntactic logical relations flavor focus 
prove soundness logical relation prove fundamental property called basic lemma says typed term related 
simple type systems fairly straightforward prove fundamental property absence nontermination 
addition recursive functions complicates matters establishing fundamental property requires proving additional unwinding lemmas show terminating computation recursively defined function approximated finite 
challenging addition recursive types impredicative quantified types logical relation longer defined induction types 
showing existence relational interpretation recursive types requires proving nontrivial minimal invariance property :10.1.1.32.1976
appel mcallester proposed radically different solution problem recursive types 
defined intensional types operational semantics language indexed number available execution steps 
extra information sufficient solve recursive equations types 
appel mcallester relational model recursive types build 
advantage step indexed logical relations avoid complex machinery domain theory admissibility syntactic minimal invariance closure biorthogonality 
approach promising unary step indexed models scaled advanced features impredicative quantified types general mutable store functions recursive types impredicative quantified types 
appel mcallester proved fundamental property model equi recursive types conjectured model sound respect contextual equivalence 
show claim correct precise show soundness calculus iso recursive types essence model 
discovered expected proof transitivity appel mcallester model go 
definitively show model transitive tried find counterexample 
note transitivity appel mcallester model remains open problem 
section consider calculus iso recursive types sound complete logical relation language 
show direct proof transitivity appel mcallester model fails discuss peculiarities step indexed approach 
section extend logical relation support quantified types 
proofs lemmas 
impredicative may instantiated type including 

step indexed syntactic logical relations recursive quantified types examples illustrate logical relation accompanying technical report 
consider call value calculus iso recursive types dubbed rec calculus 
presents syntax small step operational semantics language supports booleans pairs addition recursive types 
define operational semantics rec relation closed terms evaluation contexts lift primitive rewriting rules standard right innermost outermost call value interpretation language 
say term irreducible value val stuck expression operational rule applies 
abbreviation val 
types bool 
expressions tt ff fold unfold values tt ff fold eval ein ee fold unfold iftrue iffalse app unfold unfold fold ctxt fig 
rec syntax operational semantics typing judgments rec form context defined follows value context track set variables scope closed types rec static semantics entirely conventional see show selected rules 
abbreviated judgment value context empty 
theorem rec safety 
value exists ahmed var fn 
fold fold 
app 
unfold unfold 
fig 
rec static semantics selected rules rec contextual equivalence expression single hole 
typing judgments contexts form indicates type hole 
definition rec contextual approximation ctx equivalence ctx 
ctx mean 
terms contextually equivalent contextually approximate ctx def ctx ctx 
rec logical relation step indexed logical relation rec model types appel mcallester henceforth am 
claimed prove model sound respect contextual equivalence 
proved case 
may somewhat misnomer am model status transitivity unclear shall show 
models relational interpretation rv type set triples form natural number called approximation index step index closed values 
intuitively rv says computation running steps approximates type 
model differs am model rv additionally require additional constraint enables prove transitivity logical relation 
restricting model terms typed essential completeness respect contextual equivalence noted 
defer explanation don require till section 
gives definition logical relation shaded parts definitions analog am model 
meta variable denote sets tuples form closed values 
step indexed syntactic logical relations recursive quantified types rel def nat 
def rv sem 
rv bool bool tt ff rv rv rv rv 
rv rc rv 
fold fold fold 
rv 
rv 
rc ef 
ef ef ef rv rg rg rg rv def 

rg rc def fig 
rec relational model shaded appel mcallester set define approximation set written asthe subset elements indices define rel closed syntactic type set sets nat properties typed type closed respect decreasing step index 
meta variable denote type substitutions 
partial maps type variables pairs semantic substitution closed syntactic type syntactic substitution definitions ensure rel rec may contain free type variables interpretation type parametrized type substitution ftv dom 
abbreviations ahmed 
sem syn 

abbreviation 
consider relational interpretation rv type 
case note rv booleans 
values related type bool number steps tt ff 
pairs 
pairs related type steps vi related steps type 
functions 
functions suspended computations interpretation terms interpretation types computations see 
functions related map related arguments related results 
specifically related type steps point left execute arguments va related type steps va related computations type steps 
recursive types 
expect values related type 
steps related type 

show equivalent required definition 
note definition rv 
rv 
prove type substitution lemma see allows conclude rv 
rv 
rv 

rv 
rv 
rv 
type subst rv 
exactly required definition rv 

computations 
closed expressions related computations type ife steps irreducible term ef step irreducible furthermore values related remaining steps 
surprising definition terminate steps may terminate number steps say may greater ramifications transitivity am model shall return point shortly 
step indexed syntactic logical relations recursive quantified types logical relation 
mean mappings variables closed values related steps related steps computations type logically equivalent written logically approximate 
prove type valid type relational interpretation belongs rel rv rel 
involves showing typedness closure decreasing step index 
prove number nontrivial lemmas see technical report 
specifically prove logical relation defined compatibility substitutivity properties see 
allow show rec typing rules preserve logical relation prove lemma 
lemma rec fundamental property reflexivity 

transitivity appel mcallester model ignore shaded parts try prove lemma resulting definitions 
proposed lemma transitivity appel mcallester 
proof attempt suppose rg 
show rc 
suppose ef ef 
show ef ef ef ef rv 
instantiate rg 
rc 
instantiate ef ef 
ef ef ef ef rv 
need premise 
instantiate 
consider ways proceed 
instantiate rg 
rc 
problem instantiate ef point stuck show may greater show ef ef 
ii instantiate problem show rg 
know may greater note restrict attention closed terms open terms status transitivity am model unclear unable find counterexample 
ahmed things attempt order rectify problem am model unshaded parts 
problem encountered may greater get change definition rc require terminate steps 
unfortunately step back examine resulting meaning see requires terminate exactly number steps 
clearly logical relation useful concerned reasoning timing leaks information flow setting 
formulations involving step indices second bounds number steps terminate lead models terms required terminate exactly number steps 
want logical relation considers programs equivalent modulo number steps take change definition rc 
fix problem transitivity moving typed setting rv implies 
assuming definitions including shaded parts try prove transitivity 
lemma rec transitivity 
model including shaded parts 
proof 
start point got stuck 
rg conclude 
reflexivity fundamental property lemma follows 
show rg holds 
may instantiate know rg 
rest proof relatively straightforward accompanying technical report 
seemingly asymmetric typedness requirement 
definitions may left reader impression require terms side logical relation typed 
case 
particular notice definition typed 
picked step index moved quantifier asymmetry model rc pertains bound result asymmetry working specific definition rv need know type limit converse true value interpretation level rv require 
add requirement interest symmetry simply lead additional proof obligations shuffled 
complicate definitions get quantified types rel replaced rel presence quantified types wish relate values different types 
rec soundness prove logical relation sound respect contextual equivalence define means contexts logically related 
step indexed syntactic logical relations recursive quantified types definition rec logical relation contexts 
def prove compatibility lemmas contexts allows prove 
lemma rec reflexivity contexts 

theorem rec soundness ctx 
ctx 
proof 
suppose 
exist vf vf 
show 
applying lemma wehave 
instantiate 

instantiate rg 
rc 
instantiate vf vf 
exists 
rec completeness show logical relation complete respect contextual equivalence notion ciu equivalence introduced mason talcott 
closed terms closed type said ciu equivalent termination behavior evaluation context term 
relation extended open terms closing substitutions closed instantiations 
note evaluation contexts simply subset general contexts closed terms placed evaluation context 
definition rec ciu approximation ciu equivalence ciu 

ciu def 
ciu def ciu ciu theorem rec ctx ciu 
ctx ciu 
prove ciu equivalent terms logically related need lemma shows logical relation respects ciu equivalence 
pitts proves similar property calls equivalence respecting 
lemma rec equivalence respecting closed values 
rv ciu rv 
ahmed proof 
induction nested induction structure closed type 
theorem rec ciu 
ciu 
proof 
suppose rg 
show rc 
suppose ef ef 
show ef rv 
ciu wehave 
applying lemma 
instantiate rg 
rc 
instantiate ef rv 
ef 
ef ef vf instantiate ciu follows rg 
remains show vf rv 
follows lemma applied vf rv ciu follows ciu 
type abstraction extend rec impredicative universal existential types call extended language calculus 
syntactic extensions support quantified types follows types 


values 

pack expressions 
unpack xin note terms decorated types case rec 
operators remain untyped syntax order preserve operational semantics 
instance term suspended computation normally written runs suspended computation 
extend rec operational semantics follows evaluation contexts 
unpack eas xin inst 
unpack unpack pack xin typing judgments form context context defined follows type context track set type variables scope 
modify typing rules adding typing judgment 
gives typing rules additional terms prove soundness typing rules show value type substitution hold prove type safety 
step indexed syntactic logical relations recursive quantified types 

pack pack 

inst fig 
static semantics 
unpack unpack xin theorem safety 
value exists contextual equivalence typing judgments contexts form represents type hole indicating 
definition contextual approximation ctx 
ctx mean 
logical relation case rec relational interpretation type rv set triples form 
additional property addition typedness second value tuple closure decreasing step index set rel satisfy 
motivate property take reader back proof completeness rec specifically lemma establishes relational value interpretation rv equivalence respecting 
proof lemma requires induction nested induction structure closed type 
case get proof corresponding lemma may free type variables 
cases consider inner induction 
assuming required show rv sem ciu 
rel 
add requirement directly definition rel 
informal justification presence quantified types instantiate type variable relational interpretation choosing 
show relation pick satisfies certain properties equivalence respecting 
modified definition rel 
notion ciu equivalence restricted closed values 
ahmed ciu def 
rel def nat 

ciu relational interpretation universal existential types 
values related type 
steps exists syntactic type semantic interpretation rel rv second value left unrestricted 
intuitively suffices showing logical equivalence terms pick type proving pick type proving 
relational interpretation universal types dual existential types 
rv 





rel rc rv 
pack pack pack 

rel rv rd rd rd rel rg rg rg rv def 
rd rg rc fig 
relational model relational interpretation types computations defined exactly 
definition logical relation appears 
prove type valid type rv rel 
specifically show typedness closure decreasing step index lemma 
lemma rel equivalence respecting 
rd 
rv ciu rv 
show fundamental property logical relation prove new set compatibility lemmas value type substitutivity 
step indexed syntactic logical relations recursive quantified types lemma fundamental property reflexivity 

soundness completeness prove logical relation sound respect contextual equivalence 
proof structure rec theorem ctx 
ctx 
establish completeness rely notion ciu equivalence define follows 
definition ciu approximation ciu 

mapping type variables closed syntactic types dom 
ciu def 
theorem ctx ciu 
ctx ciu 
ciu 
example simple existential packages lack space simple example pierce illustrate logical relation prove contextual equivalence 
additional examples involving existential packages recursive types higher order functions technical report 
notation set tuples form 
define closure ciu approximation type follows ciu example consider existential packages type pack int pack tt 
bool show 
show 
symmetric 
suppose 
unwinding definitions show rv pack int pack tt rv 
bool 
tt 
take bool bool note rel bool defn bool 
suppose show int tt rv bool bool follows tt bool bool tt rv bool tt defn rv follows tt follows defn 
ahmed int rv bool bool follows note bool bool bool bool 
rv bool 
suppose note rv bool defn rv 

defn subtle reasoning tt 
show int rc bool bool int rc bool bool int tt rc bool bool note int ff tt ff 
remains show ff ff rv bool bool immediate 
related logical relations developed denotational semantics typed calculi 
early examples logical relations operational semantics include tait proof strong normalization simply typed calculus girard method reducibility candidates prove normalization system pitts developed syntactic logical relations calculus recursive functions quantified types recursive types 
support recursive functions denotational techniques pitts closure biorthogonality 
relations closed immediately shown equivalence respecting admissible 
comparison directly require relations equivalence respecting closed decreasing step index effectively gives admissibility 
birkedal harper crary harper extended syntactic logical relations recursive types support polymorphic types adapting pitts minimal invariance technique purely syntactic setting 
melli vouillon construct realizability model language recursive types polymorphism intuitions ideal model types 
relational model orthogonality relation quadruples terms contexts 
note show completeness move typed setting 
issue merits investigation relationship different notions approximation syntactic projections interval types step counts 
contextual equivalence may proved bisimulations 
pierce bisimulation recursive quantified types 
examples point comparison see show logical relations somewhat easier proving contextual equivalence 
logical relations pierce note bisimulation derive free theorems types 
step indexed logical relation recursive impredicative quantified types 
construction far elementary step indexed syntactic logical relations recursive quantified types existing logical relations types 
hope scale support dynamically allocated ml style mutable 

plotkin lambda definability logical relations 
memorandum sai rm university edinburgh edinburgh scotland 
statman logical relations typed calculus 
information control 
pitts relational properties domains 
information computation 
tait intensional interpretations functionals finite type journal symbolic logic 
girard interpr tation des coupures de arithm ordre sup 
th tat universit paris france 
pitts parametric polymorphism operational equivalence 
mathematical structures computer science 
pitts existential types logical relations operational equivalence 
lecture notes computer science 
crary harper syntactic logical relations polymorphic recursive types 
draft 
pitts typed operational reasoning 
pierce ed advanced topics types programming languages 
mit press 
birkedal harper relational interpretations recursive types operational setting 
theoretical aspects computer software tacs 

melli vouillon semantic types fresh look ideal model types 
popl venice italy 

melli vouillon recursive polymorphic types parametricity operational framework 
lics chicago illinois 

appel mcallester indexed model recursive types foundational proof carrying code 
acm toplas 
ahmed appel indexed model impredicative polymorphism mutable 
available www cs princeton edu appel papers pdf 
ahmed semantics types mutable state 
phd thesis princeton university 
ahmed step indexed syntactic logical relations recursive quantified types 
technical report tr harvard university 
pierce types programming languages 
mit press 
mason talcott equivalence functional languages effects 
journal functional programming 
pierce bisimulation type abstraction recursion 
popl long beach california 

macqueen plotkin sethi ideal model recursive types 
information computation 
wadler theorems free 
acm symposium functional programming languages computer architecture fpca london 
