automatic generation buffer overflow attack signatures approach program behavior models buffer overflows common target network attacks 
primary mechanism worms forms automated attacks 
techniques developed prevent server compromises due buffer overflows defenses lead server crashes 
attacks occur repeatedly common automated attacks protection mechanisms lead repeated restarts victim application rendering service unavailable 
overcome problem develop new approach learn characteristics particular attack filter instances attack variants 
doing approach significantly increases availability servers subjected repeated attacks 
approach fully automatic require source code low runtime overheads 
experiments effective attacks produce false positives 
past years alarming increase automated attacks launched worms zombies 
key characteristic automated attacks repetitive multiple instances attack may launched victim machine quick succession 
vast majority automated attacks due buffer overflows account quarters cert advisories years 
current technology defending buffer overflows uses form guarding randomization 
techniques detect attacks system resources files compromised protect victim process integrity compromised prior time detection 
reason safest approach recovery terminate victim process 
repetitive attacks approach cause repeated server restarts effectively research supported part onr nsf ccr 
liang sekar department computer science stony brook university stony brook ny sekar cs sunysb edu rendering service unavailable periods attack 
instance relatively low rate attacks second services dns ntp unavailable experiments 
contrast approach called arbor adaptive response buffer overflows filters attacks compromise integrity server allowing server continue run interruption 
doing arbor dramatically increases capacity servers withstand repetitive attacks 
builds core idea outlined program behavior models recognize inputs carry buffer overflow attacks discarding 
compared earlier technique automated patch generation subsequent works approach predicts attacks earliest possible stage point network input 
enables reliable recovery approach 
contrast previous approaches recognize buffer overflow attacks close point memory corruption recover 
important benefit approach generates generalized vulnerability oriented signature single attack instance signature deployed sites block attacks exploiting vulnerability 
overview approach arbor observation attacks network services arrive inputs server processes 
shelf buffer overflow exploit prevention technique specifically address space randomization asr 
techniques stackguard 
arbor compares characteristics benign inputs inputs received time attack synthesizes signature matches attack input benign ones 
generated signature deployed victim process filter instances attack variants 
may distributed servers version software entire community cooperating servers may protected attack single attack sample 
main steps approach signature generation recovery discarding input described detail 
automatic signature generation proceeds steps 

identifying characteristic features attacks 
buffer overflow attacks associated excessively long inputs input length obvious criterion signatures 
buffer overflow attacks overwriting pointers execution attacker provided binary code 
presence binary data inputs second useful criterion signature generation 
rely possible characteristics data code sequences repeat attacks 
previous worm signature generation relied characteristics note polymorphic worms intelligent attackers easily modify characteristics 
contrast length binary data characteristics essential features buffer overflow attacks 

program context improve signature accuracy 
server programs accept inputs different characteristics different contexts 
instance text data may acceptable authentication phase protocol binary data may accepted subsequently 
simple signature presence binary characters input data correctly authentication phase subsequently cause legitimate inputs dropped 
increase accuracy signatures incorporate context input processed signature 
contexts arbor produce false positives useful 
ii 
light weight recovery discarding input 
discarding input necessary server process take recovery actions releasing resources set aside processing attack bearing request returning control point program awaits service request 
trying infer exact set application specific recovery actions observe networked servers expect handle transient network errors cause input operations fail 
arbor leverages error recovery code perform necessary clean actions 
specifically input matches attack signature input dropped error code signifying network error reported server 
benefits approach effectiveness real world attacks 
collected remote buffer overflow attacks published securityfocus com 
development exploit code challenging task considered attacks working exploit code available red hat linux experimental platform 
arbor effective generating signatures attacks 
preserving service availability 
experiments show availability key servers named exposed repeated attacks improved order magnitude arbor 
applicable black box cots software 
approach require modifications protected server access source code 
low runtime overheads 
arbor introduces low runtime overheads 
high quality signatures generated single attack sample 
signatures general capture attack variations exploit underlying vulnerability 
signatures rely essential characteristics buffer overflow attacks attack variations involve changes exploit code attack details captured 
specific avoid matches benign inputs 
attack inputs usually times larger benign inputs false positives observed experiments 
ability generate general signature single attack sample distinguishes approach previous signature generation approaches 
arbor signatures distributed internet protect servers running copy software 
approach defend fast spreading worms 
entire community servers instances attack including servers lack buffer overflow exploit prevention capabilities 
note arbor signatures deployed firewall inline network filter rely program context information available address space server process 
positive side arbor able handle encryption intercept inputs decryption 
instance arbor handle ssl encryption intercepting ssl read returns decrypted data read return encrypted data 
contrast network layer filtering approach able access decrypted data 
organization rest organized follows 
section provides technical description approach 
evaluation approach section 
related discussed section followed summary section 
approach description illustrates approach 
implemented inline line components 
inline components reside address space process protected approach protected process optimized performance line components perform timeconsuming tasks signature generation 














inline components hook execution environment protected process library interception 
primary reason library interception opposed system call interception allows interception richer class events 
instance server programs buffered library functions getc scanf 
case calls getc result system call input may returned buffer library 
approach relies system call interception consequently input operations program 
disadvantage library interposition bypassed successful attack 
arbor relies observations successful attack drawback impact 
input filter intercepts input actions protected process 
inputs returned actions compared list signatures currently deployed filter 
inputs matching signatures discarded error code returned protected process 
input associated tcp connection input filter breaks connection preserve semantics tcp protocol 
behavior model central component arbor 
enables approach leverage knowledge embedded program making filtering decisions requiring manual encoding application specific syntax semantics input contents 
library interception learn behavior model protected process 
princi program input library interceptor input filter behavior model inline components process detector logger model inputs new signatures 
architecture arbor 

sample program model 
alert analyzer line components ple model incorporate standard library functions 
practice incorporate calls input operations system call wrappers 
logger records inputs offline analysis 
saves entire behavior model periodically say minutes disk model rebuilt scratch process restarts 
behavior model saved close time attack reused 
ensures actions associated successful attack compromise behavior model 
line components include detector analyzer 
detector responsible attack detection 
promptly notifies analyzer begins process generating attack signature 
generated signature deployed input filter 
enables instances attacks dropped compromise integrity availability protected process 
behavior model approach inferring program context making filtering decisions 
employ program behavior model guide search useful program context 
approaches extracting automata models programs potentially purpose 
finite state automaton fsa technique due simplicity 
illustrates fsa approach 
fsa model similar control flow graph program 
fsa captures security sensitive operations program leaving details internal computation 
states fsa correspond program locations memory addresses operations invoked edges labeled operation names 
readability line numbers place memory addresses 
edge state state fsa labeled call program invokes location previous call program location 
point fsa model constructed sequence library calls intercepted system access source code 
details learning technique 
logger logger records information regarding intercepted operations subsequent analyzer 
information logged current implementation calling context operation includes set callers runtime stack point call return code operation values integer type arguments 
input operations fraction binary non ascii characters input logged 
logger operates process space protected server server crash lead loss corruption buffered log data 
protect possibility logger flushes buffer input operation 
input filter signatures generated arbor deployed input filter 
input matches deployed signature dropped error code returned process 
external set indicate input output error 
servers built expect network errors invoke appropriate recovery actions quickly fully recover error proceed process request 
server uses tcp reporting error server notifying client may lead inconsistencies caused violation reliable message delivery semantics tcp 
avoid problem input filter closes tcp connection bad input received 
arbor determine file descriptor associated network connection calls 
detector detector monitors execution status protected process 
intrusion attempt raises alert terminates process 
approach uses existing technique address space randomization asr implement detector 
asr addresses program objects including code data objects randomized 
buffer overflow attacks reported far overwriting pointer values return address stack 
due asr attacker know value overwrite know location objects code injected attacker memory 
result attacks cause programs crash due invalid memory access 
note asr needs deployed protected process 
detector component shown denote asr external process intercepts signals received protected process 
implementation uses ptrace mechanism linux 
detector intercepts memory access related signal sigsegv reports attack 
note asr interacts fsa behavior models ways 
particular base addresses var ious code segments randomized absolute memory locations associated fsa states change execution server 
compensate fsa technique needs decompose memory address pair name offset name identifies segment name executable shared library offset denotes relative distance base segment 
nature asr described quantity remains invariant executions asr protected server 
analyzer analyzer generates signatures distinguish inputs benign ones 
main aspects signature generation arbor discussed 
obtaining context information arbor relies types contexts current context historical context 
current context input operation captures calling context operation 
helps distinguish different input operations program 
example read operations purpose may different invoked different parts program 
implementation current context defined program location input operation performed state fsa model sequence return addresses implementation top program stack 
explicitly remembering list callers compute single bit hash value 
recall order cope asr absolute addresses decomposed segment offset pairs 
historical context takes account fsa states precede input operation 
rationale historical context follows 
network protocols involve sequence steps 
attack may sending unexpected sequence messages message isolation indistinguishable arbor legitimate messages previously seen 
historical context enables utilize program context information steps recognize unexpected sequences messages 
addition providing ability handle truly multistep attacks historical context helps arbor handle cases attack really delivered step previous steps legitimate 
typically happens due fact server program performs input actions single location regardless type request read 
happen server uses wait read process loop structure server waits availability input uses call read entire input step internal buffer uses internal code parse contents buffer carry request 
current context remains input operations servers types messages lumped single category decreasing likelihood deriving length character distribution signature 
problem mitigated historical context 
specifically note input actions occur program location processing requests sure carried different functions generally different sections code 
quite processing step involve function calls intercepted arbor allowing distinguish different types messages 
consider server protocol message followed message type 
arbor tell time reading message historical context seen processing request enables avoid confusing types messages message types 
factor turn enable signature discovery 
synthesizing signatures inputs received closest time detection ones attack bearing 
reason signature generation algorithm searches suspect input reverse temporal order inputs 
asr typically detects attacks millisecond search limited previous ms servers 
search carried stages 
stage uses current context 
fails historical context second stage 
stage analyzer identifies current context input compares input length binary character percentage context past inputs received context 
speed process fsa model stores maximum input size maximum fraction binary characters seen previous benign input actions context 
result arbor generates current context signatures ms 
current context input operation multiple historical contexts 
part signature discovery identify particular historical context yields best signature 
general historical context represent path fsa simplicity limited current implementation refer just single context precedes input operation steps 
technique starts keeps incrementing historical context distinguish benign inputs attack input identified exceeds certain threshold implementation 
note search requires examination information previous benign inputs recorder input logger 
input identified malicious context size significantly larger maximum size bmax benign inputs seen far signature generated 
initially signature may specify size threshold order minimize likelihood false positives 
approach exploited attacker send series attacks successively smaller size requiring system generate signatures 
tackle problem approach adaptive setting threshold max bmax attack attempts 
signature generation percentage binary characters done similar way 
format signatures follows function name name offset hash distance dist function name name offset hash size filtering size bin bin pct distance specify program context size bin specify conditions characterizing attack 
illustrate signature formats examples 
read fe bin meaning operation invoked thes segment program offset base segment set return addresses stack hash value fe fraction non ascii characters input returned read non zero needs dropped 
read xb fe xf distance time cd size meaning read operation invoked offset xb fe ins segment program set return addresses stack hash value xf time function called offset cd segment steps earlier return addresses stack hash value input larger bytes dropped 
evaluation section experimentally evaluate effectiveness arbor runtime overheads availability 
experiments carried red hat linux red hat linux 
discuss false positives false negatives 
effectiveness signature generation evaluation focus real world attacks 
developing exploit programs involves significant amount effort limited selection attacks working exploit code available os platform red hat linux 
selected eleven programs shown 
chosen widely attack max benign input size attack attack program vulnerability effective 
length current historical benign benign contexts context context size ratio bin ratio wu ftpd cve apache ssl cve bugtraq id samba epic cvs bugtraq id oops 
effectiveness approach signature generation 
programs result obvious bugs fixed providing sophisticated attacks 
include wu ftpd ftp server apache web server network time protocol server internet relay chat server samba server supports file print sharing cvs server source code versioning 
remaining programs passive syslog capture daemon chosen message subfield overflow increase message length posing problem length signature detection 
oops freeware web proxy server chosen represents hardest example arbor providing useful current historical context information 
examples moderately popular programs ftp server gtk gui gnu secure shell server popular internet relay chat client 
examples chosen exercise different types memory errors including stack overflow heap overflow format string bugs 
shows results obtained programs organized groups nature signatures generated 
group current context generate effective length signatures 
programs receive inputs larger attack bearing input corresponding contexts different 
second group consists samba epic read inputs single location 
means current context remains message types 
messages nature long arbor generate length signature 
attacks sequence messages signatures generated historical context 
third group current context historical context help synthesize length signature 
case message type historical context applicable 
attack involved overflow subfield message length size benign requests 
similar situation applied case cvs 
attacks characterized large fraction non ascii characters benign inputs consisted ascii characters 
signatures character distributions generated 
group consists oops proxy web server 
nature simply passes requests external web server 
result reads input requests program location 
input requests independent 
result useful current historical context available 
result ar bor failed generate signature 
results see program context important generating accurate signatures 
context information length signatures generated attacks 
increases current historical context 
contexts length character distribution criteria successful signatures generated attacks 
evaluation runtime overhead analysis offline process tuned signature generator performance 
reason study performance experiments 
runtime overhead due inline components cpu intensive benchmark compilation version apache server 
overhead modest program partial logging full logging compilation httpd 
performance overheads 
availability httpd httpd arbor attack rate second availability named named arbor arbor 
availability degradation repetitive attacks improved logging fraction operations normal conditions switching full logging periods attacks 
instance program operations logged normal operation brings overheads 
partial logging logging turned period time say milliseconds turned period say milliseconds 
potential downside partial logging attack occurs associated input data may logged 
corrected right away logger reconfigured perform full logging attack 
effect slight delay signature generation 
note behavior model updated partial logging effect model 
improvement server availability compares availability key servers face repetitive buffer overflow attacks apache web server httpd domain name server named network time server 
availability attack rate measured ratio server throughput attack rate expressed fraction server throughput attacks 
experiments attacks carried clients server accessed legitimate fashion client 
servers protected approach input filter dropped requests reported error server 
unprotected server server crash processing input attacker 
server restarted automatically crash 
case httpd normal request accesses simulated webstone 
servers wrote scripts repeated requests server 
absence protection named need restarted attack quite expensive 
result approach achieved factor improvement ability withstand repetitive attacks value server availability protected servers withstand attacks rates times higher unprotected servers 
case httpd apache web server uses multiple attack rate second processes serve requests attacks cause worker processes die main server 
means attacks require server restart new process created replace process crashed due attack 
normal recovery process efficient 
result availability improvement due arbor closer 
false positives encounter false positives experiments approach generates signatures attack input size exceeds previously encountered benign input sizes context 
column attack benign size ratio shows significant difference benign attack input sizes providing safety factor false positives 
seen programs bin ratio providing margin safety false alarms 
reduce possibility false positives combine length character distribution single signature 
samba epic maximum size indicates corresponding historical context witnessed presence benign requests 
similarly apache context corresponding attack witnessed benign requests 
reassuring false positive stand point possibility due insufficient diversity clients 
analysis apache revealed contexts corresponding legitimate attack inputs fact difference calling function appeared frames higher call stack 
redefined context top return addresses maximum benign request size increases gives confidence respect false positives 
currently investigating ways provide increased assurances regarding false positives 
way adaptive definition current context varies number return addresses 
second way derive confidence metric signature number benign samples seen context 
false negatives section analyze scenarios signature generation may expected fail 
attacks delivered multiple packets 
attack fragmented multiple packets may necessary server perform multiple input operations read attack input 
input operation may return small amount data fall size threshold attack signature 
address limitation observe typically server perform read operations loop complete request received 
result input operations calling context input operations 
approach currently concatenates results sequence input operations able deal fragmented attacks 
possible servers may read fragmented requests different parts program 
case sophisticated approach assembling inputs needed 
concurrent servers 
concurrent servers possible operations associated processing different requests may confused expected difficult synthesize accurate signatures 
observe arbor incorporates search identifying attack bearing inputs inputs 
concurrency simply increases number requests need considered search unduly increase false negatives 
attacks experiments involved concurrent servers 
message field overflows 
attacks characterized fact input message maximum limits subfields message 
attacks pose problems cases 
server reads different message fields different program locations signature generated 
behavior common text protocols hand written parsing code 
instance sendmail uses repeated calls getc read input uses conditionals loops parsing 
servers may perform block read buffer subsequently process data contained buffer 
cases signature may generated presence non ascii characters done case 
protocol involved binary protocol approach fail 
dos attacks aimed evading character distribution signatures 
typical buffer overflow attack contains binary characters represent pointer values executable code 
attacker replace characters ascii characters chosen preserve character distribution benign inputs 
case character distribution signature fail 
attack effect injected code execution cause victim process crash 
attacker goal simply dos strategy successfully evade signatures 
reason prefer length signatures arbor 
addressing limitations 
motivated difficulties faced arbor developed cov ers complementary approach signature generation 
address fragmentation problem aggregates inputs read multiple program locations single session 
address concurrency problem uses technique correlate effects attacks back specific inputs 
handle message field overflows relies manual specification message formats 
principal drawback covers need manual involvement 
contrast arbor accepts false negatives cases achieve fully automatic signature generation 
related key ideas sketched 
preliminary experimental results high level exposition approach 
due length limitations provide technical description approach detailed experimental evaluation included full length 
detection memory errors exploits describe techniques preventing stack smashing attacks 
techniques address space randomization provide broader protection memory error exploits 
instruction set randomization os features non executable data segments prevents foreign code injection attacks 
techniques provide comprehensive detection memory errors attack approaches victim process terminated memory error exploitation detected leading loss server availability periods intense attacks 
approaches recovering memory errors automatic patch generation apg proposed interesting approach uses source code instrumentation diagnose memory error automatically generate patch correct 
stem improved apg eliminating need source code access emulation 
approach force error return current function attack detected 
difficulty strategy application may handle error code result may recover 
contrast approach forces error returns input functions server applications expect handle errors 
recovery reliable approach 
failure oblivious computing uses cred detect memory errors runtime 
bounds write detected corresponding data stored separate section memory 
subsequent bound read return data 
approach attacks harm allows recovery 
main drawback approach typically slows programs factor 
uses source code transformation runtime logging memory updates 
attack detected updates network input operation undone process restarted point 
approach limits logging global variable updates performance reasons 
limits light weight recovery requiring total application restart cases 
xu developed approach diagnosing memory error exploits signature generation 
approach uses post crash forensic analysis address space randomized programs 
signature consists bytes jump address included buffer overflow attack 
minimize false positives suggest program contexts specifically current context idea described 
compared approaches arbor benefit generates vulnerability oriented signatures opposed exploit specific signatures attack variants exploit vulnerability 
fully automatic works black box cots software low runtime overheads recovers quickly reliably attacks 
covers presents technique complements arbor generate robust signatures deployed network deal message subfield overflows robust fashion 
achieved cost requiring manual effort specifying message formats arbor fully automatic 
network level detection buffer overflows detect buffer overflow attacks network packets recognizing jump addresses network packets 
requires addresses externally specified detects automatically leveraging nature stack smashing attacks memory layout linux 
suggested robust approach detecting buffer overflow attacks execution attack payload 
develops new technique anomaly detection packet payloads detect wider range attacks 
technique higher false positive rate techniques 
shield uses manually generated signatures filter buffer overflows attacks 
network signature generation earliest approaches worm detection relied characteristics worms classify network packets benign attack bearing 
avoids classification step receives attack traffic 
signatures generated techniques rely longest byte sequence repeats attack packets 
polymorphic meta morphic attack change code propagates cause signature generation techniques fail 
mitigate problem polygraph generate multiple shorter byte sequences signatures 
improves approaches incorporating protocol semantics signature generation algorithm 
doing able handle broader class attacks previous signature generation approaches primarily focused worms 
techniques operate network level approach works host level 
means approach able exploit internal state server processes current historical context generate robust signatures 
importantly approach able generate general vulnerability oriented signature single attack sample previous approaches require multiple attack samples synthesize generalized signature 
generality signature provided previous approaches largely determined attack samples available 
hybrid approaches signature generation project uses software diversity attack detection 
rule algorithm learn characteristics suspect inputs 
approach generates effective signature code red effectiveness broader class attacks evaluated 
track flow information network inputs data attacks jump address code injection attack 
signatures generated somewhat simplistic uses leading bytes jump address signature lead false positives especially binary protocols 
signatures consist machine code derived victim program code 
signatures produce false positives large overly specific 
suggested heuristics generalizing heuristics evaluated 
flips uses detect anomalous inputs 
anomaly confirmed accurate attack detector implementation instruction set randomization content signature generated techniques similar network signature generation techniques 
advantage arbor relatively simple infrastructure library interposition 
contrast flips rely relatively complex infrastructures runtime instruction emulation binary transformations 
summary approach solves key problems encountered automatic filtering attacks 
automatically discovers signatures distinguish attack bearing data normal data 
signatures synthesized carefully observing input data internal behavior protected process 
second automatically invokes necessary recovery actions 
simply discarding data transient network error simulated application recovery code utilized safely recover attack attempt 
approach cots software access source code 
arbor effective generating signature real world attacks experiments demonstrating effectiveness blocking buffer overflow attacks 
false positives observed experiments 
arbor currently stand system extended ability communicate systems allowing send generated attack signatures attack payloads system administrators systems protected approach systems block recurrences attack having witnessed single attack instance 
believe central idea program context information refine input classification applicability class buffer overflow attacks topic ongoing research 
pax team 
pax net 
randomized instruction set emulation disrupt binary code injection attacks 
ccs 
sekar 
address obfuscation efficient approach combat broad range memory error exploits 
usenix security 
sekar 
efficient techniques comprehensive protection memory error exploits 
usenix security 
chiueh hsu 
rad compile time solution buffer overflow attacks 
icdcs 
costa containment internet worms 
sosp 
cowan stackguard automatic adaptive detection prevention buffer overflow attacks 
usenix security 

protecting stack smashing attacks 
published world wide web url www trl ibm com projects security ssp 
feng anomaly detection call stack information 
ieee 
jha miller 
efficient context sensitive intrusion detection 
ndss 
hsu chiueh 
centralized tcp ip architecture networking security 
acsac 
jim cyclone safe dialect usenix annual technical conference 
jones kelly 
backwards compatible bounds checking arrays pointers programs 
intl 
workshop automated debugging 
kc keromytis 
countering code injection attacks instruction set randomization 
acm ccs 
kim karp 
automated distributed worm signature detection 
usenix security 
crowcroft 
creating intrusion detection signatures honeypots 
hotnets ii 
liang sekar 
servers buffer overflow attacks 
presentation arcs workshop 
liang sekar 
automatic synthesis filters discard buffer overflow attacks step realizing systems 
usenix annual technical conference short 
liang sekar 
fast automated generation attack signatures basis building self protecting servers 
ccs 
wang keromytis stolfo 
flips hybrid adaptive intrusion prevention 
raid 
necula weimer 
ccured type safe retrofitting legacy code 
popl 
newsome polygraph automatically generating signatures polymorphic worms 
ieee 
newsome song 
dynamic taint analysis automatic detection analysis signature generation exploits commodity software 
ndss 
network detection polymorphic buffer overflow vulnerabilities 
ieee ifip network operation management symposium 
reynolds line intrusion detection attack prevention diversity generate test generalization 
hawaii intl 
conference system sciences 
rinard dynamic technique eliminating buffer overflow vulnerabilities memory errors 
acsac 
lam 
practical dynamic buffer overflow detector 
ndss 
sekar fast automaton method detecting anomalous program behaviors 
ieee 
keromytis 
network worm vaccine architecture 

boyd keromytis 
building reactive immune system software services 
usenix annual technical conference 
singh automated worm fingerprinting 
osdi 
smirnov chiueh 
automatic detection identification repair control hijacking attacks 
ndss 
tang chen 
defending internet worms signature approach 
infocom 
toth 
accurate buffer overflow detection payload execution 
raid 
wagner dean 
intrusion detection static analysis 
ieee 
wang shield vulnerability driven network filters preventing known vulnerability exploits 
sigcomm 
wang stolfo 
anomalous payload network intrusion detection 
raid 
xu ning kil zhai 
automatic diagnosis response memory corruption vulnerabilities 
ccs 
xu sekar 
efficient transformation ensure memory safety programs 
fse 
barford jha 
architecture generating semantics aware signatures 
usenix security 
