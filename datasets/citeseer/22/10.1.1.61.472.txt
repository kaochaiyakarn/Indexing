automating source consistent uml refactorings pieter van gorp hans tom mens serge demeyer lab re engineering university antwerp belgium pieter hans serge demeyer ua ac win www uia ac lore service de nie universit de belgium tom mens ac 
increased interest refactoring uml tool vendors seek ways support software developers applying sequence refactoring 
problem tools uml metamodel repository inadequate maintain consistency model code gets refactored 
propose set minimal extensions uml metamodel sufficient reason refactoring common oo languages 
instance specifying pre postconditions ocl able compose primitive refactorings verify preservation program behavior trigger refactorings code smells 
way provide mda tools ability improve existing uml designs keeping synch underlying code base 
intrinsic property software real world environment need evolve 
software enhanced modified adapted new requirements code complex original design slowly 
surprising major part total software development cost devoted software maintenance 
may surprising better software development methods tools reduce enlarge maintenance cost 
explained observation better methods tools mainly accommodate requirements increasing rate change consequently effects erosion 
cope design erosion need techniques reduce software complexity incrementally improving internal software structure 
research domain addresses problem referred restructuring 
domain object oriented software development term refactoring defined behavior preserving program transformation 
refactorings redistribution classes variables methods class hierarchy order facilitate adaptations extensions 
especially trend agile software development refactoring receives widespread attention van gorp mens demeyer consequently integrated development environments ides incorporating refactoring features tools 
building practical refactoring tool straightforward think refactorings typically expressed design level aware detailed code level issues 
example software designer rename class improve readability traceability refactoring tool sure cause name collisions updated correctly including special type casts exceptions 
example software designer pull method reused subclasses refactoring tool verify variable inside method body allow remove copies method tools decide equality methods 
final example software designer decide reuse piece code extracting separate method refactoring tool ensure variables referred turned method parameters function results 
software designers think refactorings design level quite natural exploit uml unified metamodel expressing refactorings 
advantage refactoring uml level software designers don worry syntaxes possible programming languages java smalltalk including dialects versions 
tool vendors hand exploit uml implement behavior preserving code transformations maximal reuse implementation languages 
new model driven architecture mda standard especially relevant uml designed serve basis code re generation 
unfortunately standard uml metamodel inadequate maintaining consistency design model corresponding program code 
mainly uml metamodel considers method body implementation specific 
typical uml tools consider method bodies protected areas supplied manually preserved code re generation 
protected areas inconsistencies introduced uml model gets refactored 
consider simple rename class refactoring uml metamodel atomic operation class names may protected areas type declarations type casts exceptions updated accordingly 
elaborate refactorings pull method cause severe problems necessary preconditions accessing attributes verified 
refactorings frequently extract method close impossible express require precise model statement list method body 
clear uml metamodel nearly sufficient express effect refactorings source code 
proof construction show possible solve discussed problem define small extension uml metamodel allows verify pre postconditions representative refactorings pull method extract method 
goal experiment define ultimate uml refactoring extension provide concrete suggestions extension realized 
automating source consistent uml refactorings show extension applied ocl empowered case tool compose sequences primitive refactorings detect refactoring applied 
structured follows 
section introduces design criteria met refactoring extension uml concrete suggestion extension realized discusses advantages drawbacks alternatives 
section cover sample refactorings illustrate refactoring pre postconditions specified ocl 
enables runtime verification behavior preservation refactoring engine 
section illustrates applications automated uml refactorings composition refactorings detection code smells 
giving overview related refactoring general uml context section presents section comes section 
uml metamodel extension source consistent refactoring argues current uml metamodel inadequate maintaining consistency refactored design model corresponding program code 
concrete suggestion extending metamodel 
uml designed extensible modelling language clear touching metamodel may great impact supporting tool suites designed carefully 
focus uml reasons 
tool compatibility understandability perspective selected uml latest official version available development 
fundamentally target uml represents family uml versions precise action semantics package 
package fills gaps identified uml metamodel necessarily optimal refactoring purposes 
want investigate uml extension sole purpose supporting refactoring advantages fully executable uml uml 
especially relevant uml proposals include action semantics package 
context mda investigating action semantics package desirable abstraction level refactoring 
criteria list design criteria feel met uml version aimed supporting refactorings 
criteria evaluate uml extension called grammyuml uml version 
illustrate difficult trade offs involved designing uml metamodel extension integration code smell detectors refactoring community common concept code smells indicate problematic code fragments refactored 
order automatically suggest possibly execute refactorings set detected code smells uml tool van gorp mens demeyer metamodel adequate describing code smells exchanging detector :10.1.1.1.9287
consistency maintenance model code source code considered primary software artifact today refactoring tools refactoring implementations means integrated repository uml tools 
mda tools provide infrastructure needed solve consistency problem configurable parser model code generator 
refactoring uml models feasible uml metamodel sufficiently expressive capture effects refactorings underlying sources 
protected areas generated mda tools contain invalid refactoring uml models 
minimal additions uml specification describes extension mechanisms lightweight profile mechanism heavyweight mof approach 
profile mechanism restricted adding attributes constraints existing model elements mof allows addition new model elements 
lightweight extension easier existing tools accommodate repository better keep extension minimal possible 
maximal effect careful selection places metamodel extended possible minimal extension maximal effect applicable diagram type 
instance extension applied behavioral elements common behavior package immediately available diagram types extension behavioral elements collaborations package applicable sequence collaboration diagrams 
backward compatibility extending reusing existing model element changes semantics avoided 
conservative extensions guarantee existing uml models remain valid 
common oo languages key benefits uml metamodel abstracts away language syntax loosing basic oo constructs classes methods attributes 
extending core balance achieving precision refactoring maintaining language independence 
grammyuml refining method body heavyweight extensions demonstrated uml metamodel represents body method unspecified datatype inadequate refactoring 
cope problem propose additive language independent extensions uml metamodel form foundation grammyuml 
relate method contained statements 
add specialisation modelelement 
relate type classifier 
relate surrounding scope 
relate action actual arguments argument automating source consistent uml refactorings fig 

grammyuml metamodel simple adequate refactoring 

refine value attribute argument association type modelelement 
add specialization action 
refine target attribute type modelelement 
extensions applied foundation core package 
allow model statements method body typed local variables scope 
extensions applied behavioral elements common behavior package 
association argument modelelement allows specify parameter attribute passed actual argument action 
note return values arguments cascaded method calls modeled implicit local variables 
actions representing method body symbolize language specific construct 
definition extensions refining constructs belong language independent foundation uml metamodel 
plain action concept uml suitable representing primitive programming statements 
statements apply target target attribute action type 
extensions rectify problem 
lightweight extensions experience famix metamodels know notion access call update behavior augmented notion type casting stable basis reason refactoring consistency 
easily integrate access update behavior metamodel extension defining stereotypes 
similarly model type checks type casts stereotype 
reason call behavior part uml 
van gorp mens demeyer formedness rules uml metamodel formedness rules express invariant constraints metamodel elements methods signature class 
grammyuml additive extension existing uml metamodel remain valid introducing extra 
straightforward express new refactoring ocl natural language 
stereotyped parameter attribute 

argument specify parameter attribute 

stereotyped attribute defined subclass 

parameter defined method 
uml metamodel action semantics action semantics package consists set programming language abstractions modeling creation destruction objects flow data components control flow conditionals loops constructs concurrency asynchronous behavior 
grammyuml extensions package included uml 
evaluation section briefly evaluate refactoring focussed extension uml version 
uml contains sufficient information trace effect refactorings inside method bodies specify ocl code smells statement level information 
stronger uml adequate express control data flow action semantics specification 
grammyuml contain detailed information 
conversely type checks type casts modeled grammyuml metamodel 
recall rename class example section lead incorrect refactoring behavior 
illustrates difference complexity grammyuml uml showing entities needed reason local variables program statements 
uml decided heavyweight extensions adding seperate entities seperate packages variable actions 
lack common supertype stereotype similar types hard extensions type check construct adding entities packages 
lastly grammyuml conservative extension uml 
uml isn backward compatible uml entities renamed deleted model argument added semantics covered entities 
automating source consistent uml refactorings fig 

left grammyuml metamodel fragment 
right uml metamodel fragment 
control flow constructs component pins may required control data flow analysis grammyuml shows refactoring metamodel higher level abstraction 
automating uml refactorings refactoring contracts section show extensions subsection sufficient reason refactoring common oo languages 
introduce concept refactoring contracts set constraints describe effects refactorings 
ocl describe refactoring contracts sample refactorings realistic complexity extract method pull method 
ocl constraints user defined properties sake readability due space considerations left 
reader exercise contact authors 
refactoring contracts refactoring contract consists sets constraints refactoring precondition describes model restrictions need satisfied applying refactoring ii postcondition states model properties guaranteed refactoring iii code smells describe problematic model constructs improved refactoring 
carefully selecting pre postconditions contract certain behavior properties guaranteed 
refactoring contracts preservation access update call behavior 
extract method extract method refactoring turns sequence statements method class new method aim refactoring remove code duplicated multiple methods class raise intentionality long method 
van gorp mens demeyer precondition method may give name conflict inheritance hierarchy context method def pre extract method name string boolean self owner exists class class exists method method name name postcondition exists ii local variable attribute formal parameter statements passed iii occurence statements replaced method call ocl similar precondition specification ii iii require complex model traversals 
second part postcondition ocl nicely illustrates method body information collected 
context method def pass variables parameters method method boolean action select select tr tr tr tr parameter forall tr parameter exists parameter parameter name tr name parameter type tr type parameter type tr parameter type automating source consistent uml refactorings action select forall pass variables parameters code smells goals extract method refactoring handle duplicated code code smell described 
example show ocl expression checking sequences statements equality form expression postcondition iii extract method refactoring 
sake completeness mention interpretation duplication isn 
example sequences integers denoting entries sequence compared 
context method def check statement match src sequence action integer extract sequence action integer boolean extract size true src extract check statement match src extract false endif endif shorthand client call check statement match src sequence action extract sequence action boolean check statement match src extract pull method pull method refactoring moves method implementation md class superclass sc 
move methods carrying signature sibling classes removed 
aim refactoring centralize functionality common super class 
precondition sc exist may root class ii signature may exist superclass sc iii implementation shouldn refer variables defined iv implementation shouldn refer method accessible sc 
van gorp mens demeyer context method def pre pull method boolean self owner superclass notempty self owner superclass exists method method self self self postcondition signature exists superclass sc ii signature implemented body equivalent iii methods signature equivalent body removed direct subclasses sc iv holds implicit methods signature different body preserved sc direct subclasses context method def post pull method method boolean self owner owner superclass self check statement match self action action owner exists self check statement match self action action code smells leave specification code smells pull method exercise reader 
table fowler book relate code smells refactorings 
evaluation shown feasible ocl describe refactoring contracts grammyuml metamodel 
ocl defined constraints integrated mda case tools various ways 
obvious application effectively proposed pre postconditions ocl pre postcondition constraints uml operation represents refactoring consideration left open case tool vendors 
applications automated uml refactoring compose primitive refactorings roberts analysed composite refactorings sequences primitive refactorings detail 
example page illustrate ocl refactoring contracts compose primitive refactorings 
class extends sc method automating source consistent uml refactorings class extends sc method classes common superclass sc method implementation 
method pulled superclass 
precondition pull method refactoring described subsection violated 
conditionals match implementation methods isn identical 
consider primitive refactorings described opdyke roberts add method possible find sequence refactorings solve mismatch pre postconditions guarantee behavior preservation 
extract conditional classes method name extract method postcondition refactoring ensures occurence statements replaced method call 
results identical implementations pull method performed 
implementations access method defined superclass sc violates precondition pull method 
combining pre postconditions extract method refactoring know exist inheritance tree 
satisfies precondition add method refactoring applied sc requires method signature superclass sc 
applying add method refactoring postcondition guarantees exists sc 
postconditions extract method add method refactorings satisfy precondition pull method refactoring applied 
summarizing implementing ocl refactoring contracts proposed uml case tool vendors support automatic refactoring composition 
need implement mechanism refactoring code smell contract fired precondition completely satisfied finds refactorings postcondition rectify violated precondition 
note meets state art mda algorithm implemented vendor specific manner due lack model transformation standard 
formal uml specification model transformations needed deduce refactoring ensures postcondition contract vice versa 
van gorp mens demeyer integrate code smell detectors demonstrated ocl adequate specify design metrics uml metamodel 
section showed extended metamodel enables collect metrics data inside method body describe code smells fowler refactoring contracts 
step agree value says code smells bad needs refactored stored context refactoring contracts specific language application 
applying logical ocl code smell ocl precondition contract grammyuml model instance results list methods 
desired transformed exceed 
allowed transformed preserving behavior precondition refactoring solves problem satisfied 
applying refactoring model validated ocl postcondition contract 
related fowler refactorings specified source source transformations 
concept model driven refactoring historically investigated context design model restructuring 
suny instance explored integrity class diagrams statecharts maintained refactoring 
authors plain uml metamodel describe refactoring pre postconditions ocl 
due limitations uml metamodel unable formalize relation class structural statechart behavioral diagrams 
extended metamodel grammyuml solve problem 
van der investigates design diagram inconsistencies detected specifying rules description logic decidable fragment firstorder predicate logic 
explicit formal relation uml diagrams program code model evolutions investigate apply analysis design phase fit process roundtrip engineering 
complementing diagram consistency rules refactoring contracts problem overcome 
introduced notion refactoring contracts shown contracts formalized ocl expressions uml metamodel extension 
opdyke describe primitive refactorings preconditions met ensure transformation preserves program behavior 
roberts extended augmenting refactoring definitions postconditions showing refactorings composed 
mens logic metaprogramming integrate code smells automatic refactoring tool 
prolog logic rules detect bad smells program code suggest refactorings remove smells 
raised risk published software engineering institute initial values aligned project priorities 
automating source consistent uml refactorings abstraction level language independent metamodel smalltalk syntax tree 
evolution conflicts arise parallel changes parts program code design different developers give rise inconsistencies 
detect resolve inconsistencies uml metamodel needs extended versioning information evolution information 
propose extension 
give extensive overview different notions behavior 
actively researching formalization program behavior going access call preservation language preservation 
better notions behavior may lead refinements initial contracts section grammyuml metamodel remain stable 
applied grammyuml source code refactorings 
grammyuml may greatly facilitate research evolution different uml diagrams linked method body foundation core package behavioral information behavioral elements common behavior package 
relation elegant formal basis link class diagrams sequence diagrams 
fowler book presents refactorings publication 
elaborate ocl refactoring contracts refactorings validate fitness grammyuml metamodel 
discussed extension uml metamodel allows express pre postconditions representative refactorings pull method extract method 
precisely extension allows ocl empowered case tool verify non trivial pre postconditions ii compose sequences refactorings iii ocl query engine detect code smells 
course experiment limited sense prove uml extension works possible refactorings verify best possible way extend uml 
shown feasible desirable uml way refactor designs independent underlying programming language 
issues crucially important coming generation mda tools allow seamless integration modelling coding 
visualizes role uml refactoring metamodel mda tools 
metamodel instances visualized uml class diagrams 
uml describe custom code smells ocl demonstrated section 
developers parse existing program sources uml applicability checker automatically execute sequences appropriate refactorings 
mda tool preserves occurrences metamodel entities surrounding text regenerate executable system 
result extracted uml design improved loosing consistency source 
van gorp mens demeyer developer initial source refactored source parser generator grammyuml model transformation engine grammyuml model applicability checker grammyuml metamodel ocl refactoring contract refactoring transformations uml fig 

grammyuml tool context 
gray areas highlight uml artifacts contributed 

swanson 
software maintenance management study maintenance computer application software data processing organizations 
addison wesley 


managing application program maintenance expenditure 
comm 
acm 


software maintenance management changes decade 
journal software maintenance evolution research practice 

hanna 
maintenance burden remedy 
datamation pages 

glass 
maintenance 
ieee software july august 

robert arnold 
software restructuring pages 
ieee press 

william griswold 
program restructuring aid software maintenance 
phd thesis university washington august 

william opdyke 
refactoring program restructuring aid designing object oriented application frameworks 
phd thesis university illinois urbana champaign 

martin fowler 
refactoring improving design existing code 
addison wesley july 

don wells laurie williams editors 
proceedings second xp universe agile universe conference xp agile universe volume lecture notes computer science 
springer august 

proceedings th international conference extreme programming flexible processes software engineering xp 
www xp org may 

object management group 
model driven architecture mda document number july 

object management group 
unified modeling language uml version september 

interactive objects 

www com march 



www com products march 

object management group 
unified modeling language uml version march 

partners 
rd revised submission omg rfp ad unified modeling language infrastructure version 
www partners org january 
automating source consistent uml refactorings 
consortium 
unambiguous uml rd revised submission uml infrastructure rfp 
www org january 

tom tom mens 
identifying refactoring opportunities logic meta programming 
proceedings th european conference software maintenance reengineering 
ieee computer society press 

eva van emden leon moonen 
java quality assurance detecting code smells 
proceedings th working conference reverse engineering 
ieee computer society press october 

serge demeyer sander tichelaar patrick steyaert 
famix information exchange model 
url www iam unibe ch famix 

tom mens niels van dirk janssens serge demeyer 
formalising refactorings graph transformations 
fundamenta informaticae 

filip van serge demeyer 
evaluating clone detection techniques 
international workshop evolution large scale industrial software applications elisa 

don bradley roberts 
practical analysis refactoring 
phd thesis university illinois urbana champaign 

cia 
formal definition object oriented design metrics 
master thesis vrije universiteit brussel belgium faculty sciences collaboration ecole des mines de nantes france universidade nova de lisboa portugal 

software engineering institute 
cyclomatic complexity 
www sei cmu edu str descriptions cyclomatic body html 

suny damien yves le jean marc quel 
refactoring uml models 
uml volume lncs lecture notes computer science pages 
irisa springer verlag 

van der simmonds tom mens 
description logic maintain consistency uml models 
proceedings uml unified modeling language 
springer verlag 

tom mens lucas patrick steyaert 
supporting disciplined reuse evolution uml models 

muller editors proceedings uml unified modeling language volume lecture notes computer science pages 
springer verlag 
france 

tom mens theo hondt 
automating support software evolution uml 
automated software engineering journal february 

tom mens serge demeyer bart du bois hans pieter van gorp 
refactoring current research trends 
language descriptions tools applications 


maintenance object oriented systems structural evolution 
theory practice object systems 
