attrition defenses peer peer digital preservation system tj giuli stanford university ca david rosenthal stanford university libraries ca peer peer systems attrition attacks include traditional network level denial service attacks application level attacks malign peers conspire waste loyal peers resources 
describe defenses lockss peer peer digital preservation system help ensure applicationlevel attrition attacks powerful adversaries effective simple network level attacks network level attacks intense widespread prolonged impair system 
denial service dos attacks difficult distributed systems resist 
distinguishing legitimate requests service attacker requests tricky devoting substantial effort doing easily self defeating 
term dos introduced needham broad meaning time come mean high bit rate network level flooding attacks rapidly degrade usefulness victim system 
addition dos term attrition include moderate low bit rate application level attacks impair victim system 
mechanisms described aimed equipping lockss lots copies keep stuff safe peer peer digital preservation system resist attrition attacks 
system libraries worldwide publishers titles endorsed 
cooperation peers reduces cost increases reliability preservation eliminates need backup greatly reduces operator interventions 
loyal non malign peer participates lockss system reasons achieve regular content agrees consensus peers holding copies content obtain needed repair 
goal attrition adversary prevent loyal peers successfully de petros maniatis intel research berkeley ca mary baker hp labs palo alto ca roussopoulos harvard university cambridge ma consensus peers obtaining requested repairs long undetected storage problems natural bit rot human error corrupt content 
types resource waste may inconvenient lasting effect system 
prior defended lockss peers attacks seeking corrupt content 
system remained vulnerable application level attrition malign peers abuse protocol prevent network peers auditing repairing content 
developed set defenses adapted systems combination context provides novel effective protection attrition 
defenses include admission control desynchronization redundancy 
admission control effected rate limitation hand reputation effort balancing ensures legitimate requests serviced malicious request floods 
desynchronization ensures progress continues suppliers needed service currently busy 
redundancy ensures attacker system targeting peers time 
defenses may immediately applicable applications believe systems may benefit subset defenses analysis effectiveness defenses broadly useful 
presents new design lockss protocol contributions 
demonstrate simulation new design ensures application level attrition matter powerful attacker effective simple network flooding 
retaining previous resistance adversaries 
second show flooding attacks continuously prevent communication majority peers months affect system significantly 
attacks orders magnitude powerful observed practice :10.1.1.21.6570
third resource manage ment lies crux attrition attacks defenses extend prior evaluation deal numerous concurrently preserved archival units content competing resources 
resource provisioning essential defending attrition attacks 
show practical amount provisioning defend lockss system arbitrarily powerful attrition adversary 
rest describe application 
continue outlining application behave different levels attrition attack 
give overview lockss protocol describing incorporates attrition defenses 
explain results systematic exploration simulated attacks resulting design showing successfully defends attrition attacks layers network level application protocol 
describe new lockss protocol compares previous related 
application section provide overview digital preservation problem academic publishing 
justify set design goals required solution problem setting stage lockss approach subsequent sections 
academic publishing migrated web placing society scientific cultural heritage variety risks confused provenance accidental editing publisher storage corruption failed backups government corporate censorship vandalism 
lockss system designed provide librarians tools need preserve community access journals web materials 
solution meet stringent requirements 
law copyrighted web content preserved owner permission solution accommodate publishers interests 
requiring publishers example offer perpetual access digital signatures content reluctant give permission 
second solution extremely cheap terms hardware operating cost human expertise 
libraries afford solution involving handling securely storing offline media afford cheap theshelf pcs provide sufficient storage tens thousands journal years 
third existence cheap reliable storage assumed affordable storage unreliable 
fourth solution long time horizon 
auditing content stored digital signatures example assumes cryptosystem remain unbroken secrecy integrity availability keys decades 
fifth solution anticipate adversaries capable powerful attacks sustained long periods withstand attacks degrade slowly gracefully providing unambiguous warnings 
sixth solution require central locus control administration withstand concentrated technical legal attacks 
different architectures proposed preserving web journals 
centralized architecture trusted third party archive requires publishers third party permission certain circumstances republish content 
obtaining permission involves formidable legal business obstacles 
contrast distributed architecture lockss system consists individual archives subscribing second party libraries 
readers access local library copy subscription provides access publisher copy 
publishers see risk business willing add permission subscription agreement 
important note goal minimize number replicas consistent content safety 
strive minimize replica cost maintaining large number replicas 
trade extra replicas fewer lawyers easy decision relative costs 
lockss design extremely conservative making assumptions infrastructure 
believe appropriate digital preservation system conservative assumptions certainly possible 
increasing risk increase amount content preserved computational power 
limited amounts reliable write memory allow audits local hashes reliable public key infrastructure allow publishers sign content peers audit signatures 
conservatively assumptions underlying optimizations violated warning time write memory corrupted private key leak 
optimizations require distributed audit mechanism fallback 
peer operator avoid local failures better system works conservative design principles lead focus mechanisms minimize dependence efforts 
application digital preservation academic publishing mind tackle problem auditing repairing replicas distinct archival units aus year run line journal target application preserved population peers libraries face attrition attacks 
au preserves peer starts correct replica obtained publisher web site satisfy local read requests local pa assist peers replica repairs 
rest refer aus peers replicas journals libraries 
system model section adversary model security goals framework defenses 
adversary model conservative design philosophy leads assume powerful adversary important abilities 
pipe ability prevent communication victim peers extended periods flooding links garbage packets sophisticated techniques 
total information awareness allows control monitor resources instantaneously 
unconstrained identities purchase spoof unlimited network identities 
insider information provides complete knowledge victims system parameters resource commitments 
masquerading means loyal peers detect long follows protocol 
unlimited computational resources polynomially bounded computations invert cryptographic functions 
adversary employs capabilities effortless effortful attacks 
effortless attack requires measurable computational effort attacker includes traditional dos attacks pipe 
effortful attack requires attacker invest system computational effort 
security goals goals lockss system high probability consensus peers reflects correct au readers access data 
contrast attrition adversary goal decrease significantly probability events preventing peers auditing replicas long time long undetected storage problems bit rot occur 
severe narrowly focused pipe attacks wild days weeks :10.1.1.21.6570
goal ensure lockss system degrades gracefully broader attacks sustained months 
pipe attackers protocol messages extent 
seek ensure conditions 
peer manages resources prevent exhaustion matter effort exerted identities requesting service 
second deciding requests service peer gives preference requests behave properly ostensibly legitimate 
third stage protocol exchange ostensibly legitimate attacker expends commensurate effort imposes defenders 
defensive framework seek curb adversary success modeling peer processing inbound messages series filters costing certain amount apply 
message rejected filter effect peer allowing estimate cost eliminating classes messages consideration 
filter increases effort victim needs defend limits effectiveness adversary capability 
series filters sound cost applying filter input stream passed preceding filter low permit system progress 
filters include volume filter reciprocity filter series effort filters 
volume filter models peer network connection 
represents physical limits rate inbound messages adversary force peer 
unavoidable filter adversary push data victim network card rate greater card throughput 
soundness requires volume filter restrict volume messages processing costs filter downstream low 
condition enforced traffic shaping low tech choice configuring peers network cards 
reciprocity filter takes inbound messages maximum rate exported volume filter limits rejecting sent peers appear misbehaving 
peer reciprocity filter favors peers engage requests average rate engages 
filter penalizes peers known long evaluate behavior 
sense reciprocity filter implements self clocking invariant inbound traffic exiting filter mirrors volume traffic originated peer 
average number requests passed filter matches number requests inflicted peer 
effort filters focus balance effort expended peer correspondent peer cooperating individual content audit request 
filters ensure computational effort imposed potential victim peer ostensibly legitimate correspondent matched commensurate effort borne correspondent 
example attacker trick victim peer cryptographically hashing large amounts data performing hash effort equivalent hash 
result filters enforce invariant legitimacy costs attacker allows attacker inflict victim 
furthermore effort filters ensure peer detect low cost attacker abandoned legitimacy 
summary filters take input stream pro timeline poll showing message exchange poller voter 
tocol messages reduce levels consistent legitimate traffic terms volume volume filter number individual messages source reciprocity filter effort induced message effort filters 
malicious interactions pass filters ultimately affect victim peer adversely ensured impose manageable additional burden victim peer guaranteed cost attacker burden process 
guarantee essential correct operation peers cases meaningful adversary resource constrained 
show section effective strategy effortful attacks emulate legitimacy minimal effect utility system 
effortless attacks traditional distributed dos ddos attacks effective maintained long time peer population degrade system significantly section 
lockss replica auditing repair protocol lockss audit process sequence opinion polls conducted peer au replicas 
intervals typically months peer poller picks random sample peers knows preserving au invites peers voters poll 
voter individually hashes nonce replica au produce fresh vote poller tallies 
poller disagrees votes assumes replica corrupt repairs disagreeing voter 
roles poller voter distinct peer plays 
general structure poll follows timeline 
poll consists phases vote solicitation evaluation 
vote solicitation phase poller requests obtains votes voters sample population possible 
poller begins evaluation phase compares votes replica hashed content block time tallies 
hashes disagree poller may request repair blocks voters reevaluate block 
eventual tally repairs poller agrees majority sends receipt voters immediately starts new poll 
peers interleave progress polls voting peers polls spreading poll period chosen polls au occur rate higher undetected storage errors 
vote solicitation outcome poll determined votes inner circle peers chosen start poll poller list au 
list contains peers agreed poller polls au peers static friends list maintained poller operator 
poll considered successful result minimum number inner circle votes quorum typically may change application needs fault tolerance 
ensure poll succeed poller invites poll larger inner circle quorum typically twice large 
try inner circle peer fails respond invitation refuses poller contacts different inner circle voter retrying reluctant peer vote solicitation phase 
individual vote solicitation consists messages see poll pollack vote 
duration poll poller establishes encrypted tls session voter individually anonymous diffie hellman key exchange 
protocol message conveyed tls session keeping tcp connection message message resuming tls session new 
poll message invites voter participate poll au 
invited peer responds pollack message indicating refusal participate poll time acceptance invitation compute vote predetermined time allowance 
voter commits reserves local resources effect 
message supplies voter random nonce vote construction 
compute vote voter uses cryptographic hash function hash nonce supplied poller followed replica au block block 
vote consists running hashes produced block boundary 
voter sends vote back poller vote message 
messages contain proofs computational effort introduced dwork sufficient ensure protocol stage requester service invested exchange supplier service see section 
peer discovery poller uses vote solicitation phase poll obtain votes current poll discover new peers list solicit inner circle votes polls 
discovery effected included vote messages 
voter picks random subset current list includes vote message 
poller accumulates 
concludes inner circle chooses random sample outer circle 
proceeds solicit regular votes outer circle peers manner identical inner circle peers 
purpose votes obtained outer circle voters show behavior newly discovered peers 
perform correctly supplying votes agree prevailing outcome poll added poller list poll outcome poll computed inner circle votes 
vote evaluation poller accumulated votes obtain inner outer circle voters begins poll evaluation phase 
phase poller computes parallel block hashes voter computed voter replica agreed poller vote agrees poller block hash vote computed poller 
hash computed poller au block possibilities majority inner circle votes agree poller case poller considers audit successful block proceeds block 
second majority inner circle votes disagree poller case poller regards replica au damaged obtains repair disagreeing voters repair messages block hoping find majority 
third majority agreeing disagreeing votes poller deems poll inconclusive raising alarm requires attention human operator 
evaluation phase poller may decide obtain repair random voter required corresponding block met agreement 
purpose repairs prevent targeted free riding refusal repairs voters expected supply small number repairs commit participate poll penalized section 
poller hashes au blocks raising alarm concludes poll sending evaluation receipt voter message containing cryptographic proof evaluated received votes 
poller updates list removing voters votes determined poll outcome inserting agreeing outer circle voters peers friends list details see 
poller restarts poll au scheduling conclude interval 
lockss defenses outline attrition defenses lockss protocol admission control desynchronization redundancy 
defenses raise system costs loyal peers attackers favor legitimacy 
constant amount provisioning loyal peers continue operate necessary rate regardless attacker power 
systems resources protect performance known worst case behavior unix file system 
prior applied defenses redundancy aspects admission control including rate limitation effort balancing combat powerful attacks aiming modify content detection intrusion detection system false alarms 
combine previous defenses new ones defend attrition attacks 
admission control purpose admission control defense ensure peer control rate considers poll invitations favoring invitations operate roughly rate penalizing 
implement admission control mechanisms rate limitation hand reputation effort balancing 
rate limitation limits rate attempt service requests peers overwhelmed floods ostensibly valid requests 
rate limitation suggests peers initiate satisfy requests faster necessary fast possible 
readers access local lockss peer audit repair protocol subject users unpredictable request patterns 
protocol proceed pace providing interesting test case rate limitation 
identify possible attacks deviation necessary rate polling 
poll rate adversary seeks trick victims decreasing back behavior increasing recovery failed poll rate calling polls 
poll flood adversary seeks multitude identities invite victims polls possible crowd legitimate poll requests reduce ability loyal peers audit repair content 
vote flood adversary seeks supply bogus votes possible exhaust loyal resources useless expensive proofs invalidity 
peers defend adversaries setting rate limits autonomously varying response peers actions 
responding polls perceived contention calling polls frequently aggravate problem backing lower rate polls achieve adversary aim slowing detection repair damage 
describe similar attack context tcp retransmission timers 
peers react poll rate adversary opportunity attack 
price fixed rate operation absent manual intervention peer may take intervals recover catastrophic storage failure 
poll flood adversary tries get victims resources commit excessively adversary 
prevent commitment peers maintain task schedule promises perform effort generate votes call polls 
effort computing vote solicited incoming poll message accommodated schedule invitation refused 
furthermore peers limit rate consider poll invitations establishing secure session checking schedule 
peer sets rate limit considering poll invitations rate poll invitations sends essentially self clocking mechanism 
explain rate limit enforced hand reputation description 
evaluate defenses poll flood strategies section 
vote flood adversary fact votes supplied response invitation putative victim poller solicit votes fixed rate 
unsolicited votes ignored 
hand reputation peer locally maintains uses hand reputation history peers 
au preserves peer maintains known peers list containing entry peer encountered past tracking exchange votes entry holds reputation grade takes values debt credit 
debt grade means supplied fewer votes supplied credit grade means supplied fewer votes supplied grade means exchanges votes 
entries known peers list decay time debt grade 
protocol interaction poller voter modify grade assigned depending respective behaviors 
voter supplies valid vote valid repairs blocks poller requests poller increases grade assigns voter debt credit credit credit voter correspondingly decreases grade assigns poller 
poller voter misbehave voter commits supplying vote poller send valid evaluation receipt peer decreases grade debt 
similar reciprocative strategy feldman penalizes peers reciprocate 
reputation system reduces free riding possible peer maintain credit grade providing valid votes 
peers randomly drop poll invitations arriving previously unknown peers known debt grade 
discourage identity drop probability imposed unknown higher imposed known indebted 
invitations known credit grade dropped 
invitations unknown indebted subject rigid rate limit admits invitation consideration voter enters refractory period 
known peers list refractory periods maintained au basis 
refractory period voter automatically rejects invitations unknown indebted 
consequently refractory period voter admits invitation unknown indebted peers plus invitation fellow peers credit grade 
credit grades decay time total liability peer number invitations admit refractory period limited small constant number 
duration refractory period inversely proportional rate limit imposed peer au poll invitations considers 
victim peer clock sped poll intervals refractory period shortened increasing effectiveness poll flood attacks 
victim call polls faster rate victim peers making invitations accepted 
halving refractory period hours little effect see section 
doubling rate issuing invitations affect peers significantly invitations accepted 
attack network time protocol doubles victim clock rate months easy detect 
continuous triggering refractory period victim voter accepting invitations unknown peers loyal limit choices voters poller peers know poller 
reduce impediment diversity institute concept peer introductions 
peer may introduce oth ers peers considers loyal peers introduced way bypass random drops refractory periods 
introductions bundled regular discovery process section 
specifically poller randomly partitions peer identities vote message outer circle introductions 
poll invitation introduced peer treated coming known peer grade 
unobstructed admission consumes honored validly voting unused introductions accumulate 
specifically consuming peer peer au introductions peer au forgotten introductions peer 
furthermore introductions peers entered left list removed maximum number outstanding introductions capped 
effort balancing peer expends effort react protocol message sender message generate transmit attrition attack need consist flow ostensibly valid protocol messages exhaust victim peer resources 
real world attackers may powerful resources finite markets arisen allocate pools compromised machines competing uses 
raising computational cost attacking target system absolutely relative reduce frequency attacks 
simulations conservative unconstrained adversary ample power attack 
design realistic 
adapts ideas pricing processing discourage attacks resource constrained adversaries effort balancing protocol 
inflate cost request requiring include proof computational effort sufficient ensure total cost generating request exceeds imposed receiver verifying effort proof satisfying request 
favor memory bound functions mbf schemes client puzzles purpose spread memory system performance smaller cpu performance 
applying effort filter step multi step protocol defends attack patterns strategies attacker stops part way protocol having spent effort process effort inflicted victim second reservation strategies cause victim commit resources attacker making resources unavailable useful tasks third wasteful strategies service obtained result consumed requester expected protocol attempt minimize attacker tal expended effort 
mount attack cheaply soliciting expensive vote 
discourage poller include provable effort vote solicitation messages poll total exceeds amount described paragraph effort required voter verify effort produce requested vote 
producing vote amounts fetching au replica disk hashing shipping back poller hash block vote message 
voters mount attack cheaply generating bogus vote response expensive solicitation returning garbage block hashes waste merely poller solicitation effort effort verify hashes 
poller evaluates vote block time costs effort hashing block detect vote disagrees au replica may mean vote bogus poller voter replicas au differ block 
voter include vote message provable effort sufficient cover cost hashing single block verifying effort 
extra effort solicitation messages referred required cover generation provable effort 
mount reservation attack sending valid poll message cause voter reserve time computing vote anticipation message poller sends 
voter accepts poller invitation reserves block time compute vote 
time voting voter sets timeout waits poller send done 
timeout expires voter reschedule remainder block time 
attack exploits voter inability reallocate timeout period operation asking vote sending 
discourage include sufficient introductory effort poll messages match opportunity cost voter experienced waiting timeout 
mount wasteful attack soliciting expensive votes discarding unevaluated 
discourage require poller evaluating vote supply voter unforgeable evaluation receipt proving evaluated vote 
voters generate votes evaluate similar processes generating validating effort proofs hashing blocks local au replica 
conveniently generating proof effort chosen mbf mechanism generates bits unforgeable byproduct 
voter remembers byproduct poller uses evaluation receipt send voter 
receipt matches voter remembered byproduct voter knows poller performed necessary effort regardless poller loyal malicious 
effects logical filters incoming stream poll invitations single peer 
rectangles represent poll invitation streams different peers time interval 
show streams shaped combination filters adding filter time illustrate filter incremental effect 
peer poll invitation stream vertical gray bands represent individual invitation requests 
section shows effort balancing fares types attacks mounted 
omit evaluation attacks voters rendered ineffective rate limits described 
filters revisited illustrates defenses rate limitation hand reputation effort balancing enforced serial filters incoming traffic see section protect lockss peers attrition attackers 
peers initially standing maintain steady balance requested votes time interval note asks votes close succession instance peer expending credit contrast requests votes close succession justified grade downgraded debt grade reciprocity filter eventually subject refractory period 
behaves legitimacy regards rate invitations sends misbehaves supplying correct effort proofs result downgraded debt grade effort filter 
subsequent invitations subject refractory period 
initially unknown subject refractory period behaves ostensibly legitimately upgraded credit grade freeing refractory period 
peers request votes reasonable occasionally send simultaneous traffic spikes exceed link capacity thinned volume filter peers traffic 
peers misbehaving peers share refractory period invitation accepted refractory period 
desynchronization desynchronization defense avoids kind inadvertent synchronization observed distributed systems typically randomization 
examples include tcp sender windows bottleneck routers clients waiting busy server periodic routing messages 
peer peer systems peer requesting service find simultaneously available supply service read write fault tolerant system may encounter problem 
absent attack moderate levels peer prevent system delivering services 
situation poll flood attacker may need increase peer slightly large effect 
simulations poll flood attacks earlier version protocol showed effect 
loyal suffered needed find quorum voters simultaneously vote au 
chosen random directed subversion hard adversary 
needed free resources specified time face resource contention peers competing voters aus 
malign peers constraints invite victims futile polls 
peers avoid problem soliciting votes individually synchronously extending period quorum votes collected evaluated 
poll sequence party interactions single multi party interaction 
redundancy survival access au relied replicas attrition attack focus replicas cutting communication needed audit repair 
lockss peer preserving au maintains replica serves local clients 
massive redundancy helps resist attacks ways 
ensures successful attrition attack target replicas typically large number peers 
second forces attrition attack suppress communication activity targeted peers continuously long period 
attack targeted peers recover auditing repairing peers shown section 
massive redundancy allows peers poll choose sample list bigger quorum continue solicit votes random times entire duration poll typically months voters accept 
margin rate peers call polls rate suffer undetected damage provides redundancy time 
single failed poll little effect safety caller replica 
simulation section give details simulation environment metrics evaluate system effectiveness meeting goals 
evaluation metrics measure effectiveness defenses attrition adversary metrics access failure probability measure success attrition adversary increasing probability reader obtains damaged au replica compute access failure probability fraction replicas system damaged averaged time points experiment 
delay ratio measure degradation attrition adversary achieves compute delay ratio mean time successful polls loyal peers system attack divided measurement attack 
coefficient friction measure cost attack loyal peers measure coefficient friction defined average effort expended loyal peers successful poll attack divided average poll effort absent attack 
cost ratio compare cost effortful attack adversary defenders compute cost ratio ratio total effort expended attackers attack defenders 
environment adversaries run experiments simulator provides facilities modeling computationally expensive operations computing mbf efforts hashing documents 
allows experimenters pick range network models trade speed accuracy 
simplistic network model accounts network delays congestion side effects pipe adversary artificial congestion suffices current focus application level effects 
peers link bandwidths uniformly distributed choices mbps latencies uniformly distributed ms nodes system divided categories loyal peers adversary 
loyal peers uncompromised peers execute protocol correctly 
adversary nodes collaborate execute adversary attack strategy 
conservatively simulate adversary cluster nodes ip addresses compute power needs 
adversary complete instantaneous knowledge adversary state magically copy aus 
assumptions adversary relevant attrition 
distill cost attack efforts adversary shoulder masquerade loyal peer experiments completely outside network loyal peers 
loyal peers ask vote polls asks loyal peers vote polls 
differs lockss adversaries studied 
simulation parameters evaluate preservation collection aus distributed population loyal peers 
simplicity stage exploration assume au gbytes large au practice 
peer maintains aus 
peers replicas aus simulate diversity local collections expect evolve time 
simplifications allow focus attention common performance attrition resistance machinery ignoring time performance varies aus vary size popularity 
note simulated aus total size annual au intake large journal collection stanford university libraries 
adding equivalent today low cost pcs year consolidating old pcs rendered obsolete affordable deployment scenario library 
set costs primitive operations hashing encryption cache ram accesses match capabilities low cost pc 
simulations constant loyal peer population nodes run simulated years runs data point 
peer runs poll aus average months 
poll uses quorum peers considers agreement having maximum disagreeing votes 
parameters empirically determined previous iterations deployed beta protocol 
set fixed drop probability unknown peers indebted peers 
set fixed drop probability indebted peers cost verifying introductory effort cumulative introductory effort expended effortful attack dropped invitations voter effort consider adversary eventually admitted invitation 
adversary try indebted identities average times admitted admission probability set introductory effort total effort required poller time adversary gotten poll invitation admitted defects rest poll expended average effort behaved place 
memory limits java virtual machine prevent simulating aus peer single run 
simulate au collections layering aus peer runs adding tasks caused layer aus task schedule peer accumulated preceding layers 
effect layer simulation aus peers running realistic workload aus 
effect overestimate peer aus higher layers estimate aus lower layers aus layer compete resources left lower layers aus lower layers unaffected resources higher layers 
validated technique simulations smaller collections simulations inflated au preservation costs cause similar levels peer load negligible differences 
currently exploring parameter space heuristics help determine parameter values 
refractory period day allows invitations unknown indebted peers accepted day interval contrast peer requires average votes poll self clocking able accept average poll invitations interval 
consequently day refractory period allows total invitations poll period times rate poll invitations expected absence attacks 
results probability access failure summarizes success attrition attack 
start establishing baseline rate access failures absent attack 
assess effectiveness baseline effortless attacks consider network level flooding attacks volume filter section sybil attacks reciprocity filter section 
section assess baseline effortful attacks corresponding effort filter 
case show effect increasing scales attack access failure probability relevant supporting graphs including delay ratio coefficient access failure probability aus year aus years baseline poll interval months year years years years years mean access failure probability axis log scale increasing intervals axis variable mean times storage failure years disk absent attack 
show results collection sizes aus points aus lines points 
show minimum maximum values year data set variance representative measurements omit clarity 
friction effortful attacks cost ratio 
mechanisms defending attrition adversary raise effort required loyal peer 
achieve bound access failure probabilities willing provision system accommodate extra effort 
provisioning system constant factor defends application level attrition attacks unlimited power sections 
baseline lockss polling process intended detect recover storage damage detected locally causes bit rot human error attack 
simulated peers suffer damage rates block disk years aus disk 
aggressively inflated rate undetected damage instance rate detected failures study ide drives large disk farm 
experience ide drives deployed lockss peers covers times disk years reliable data collection suggests lower detected failure rates 
plots access failure probability versus interval 
shows interval increases relative mean interval storage failures access failure probability increases damage takes longer detect repair 
access failure probability similar au collection way au collection omit intermediate collection sizes clarity 
comparison purposes rest experiments baseline access failure probability au collection access failure probability aus attack duration days access failure probability axis log scale observed repeated pipe attacks varying duration axis log scale covering peers 
au collection correspond interval months storage damage rate block disk years 
parameters machine preserving aus average load machine preserving aus average load 
targeting volume filter pipe adversary models packet flooding sophisticated attacks 
adversary suppresses communication proportion total peer population coverage lockss peers 
pipe attack local readers may access content 
adversary subjects victim period pipe lasting days 
attack followed day period communication restored victim pattern repeated entire experiment 
lower probability peer contact peer adversary schedules attacks little overlap peers periods 
performed experiments adversary schedules attacks victims periods completely overlap low overlap adversary caused damage results low overlap adversary 
plots access failure probability versus attack duration varying coverage values 
expected access failure probability increases coverage attack increases attack covering peer population effective attack 
extreme day attack au collection raises access failure probability tolerable limits services open internet 
attacks coverage access failure probability peaks attack duration days decreases larger durations 
day delay ratio aus attack duration days delay ratio axis log scale imposed repeated pipe attacks varying duration axis log scale coverage population 
absent attack metric value 
coefficient friction aus attack duration days coefficient friction axis log scale imposed pipe attacks varying duration axis log scale coverage population 
tack damaging coverage values adversary focuses smaller number peers longer time rest peers continue polling 
day attacks cycle victims interrupt polls wasting peers time reputations day attacks short interrupt polls 
attack coverage grows day attack disables significant portion network peers free attack great difficulty finding available peers access failure probability increases day attack 
figures plot delay ratio coefficient friction respectively versus attack duration 
find attacks longer days raise delay ratio order magnitude 
similarly coefficient friction repeated attacks days negligibly greater 
long attacks completely shut victim internet coefficient reach making pipe cost effective strategy attrition adversary 
attack durations grow days adversary succeeds decreasing total number successful polls 
example attacks population day duration reduce number successful polls number absent attack 
average machine load remains times baseline load result designing protocol limit increases resource consumption attack 
fewer successful polls access failure probability aus attack duration days access failure probability axis log scale attacks increasing duration axis log scale admission control adversary peer population 
scale size graph match figures facilitate comparison 
nearly constant resource consumption increasing attack durations drives average cost successful poll coefficient friction 
targeting reciprocity filter reciprocity adversary attacks admission control defenses aiming reduce likelihood victim admitting loyal poll request triggering victim refractory period possible 
adversary sends cheap garbage invitations varying fractions peer population varying periods time separated fixed period days 
adversary sends invitations poller addresses unknown victims 
eventually admitted cause victims enter refractory periods drop subsequent invitations unknown indebted peers 
shows attacks little effect 
access failure probability raised duration attack reaches entire duration simulations years full population coverage au collection 
attack intensity loyal peers longer admit poll invitations unknown indebted loyal peers supported 
causes discovery operate slowly loyal peers waste resources introductory effort proofs rejected peers refractory period 
wasted effort sustained years raises coefficient friction friction caused pipe raises average machine load 
delay ratio largely unaffected adversary 
consequently effect adversary increasing load loyal peers tolerable practical level provisioning 
switch attention effect adversary suppression invitations unknown indebted peers introductions tended mitigate 
repeated experiments aus adversary attacks peer population introductions disabled 
introductions shorter attacks cause higher coefficient friction closer pipe attacks longer attacks largely unaffected 
comparison suppressing introductions attack durations days raises coefficient friction vs pipe contrast suppressed introductions attack durations months raises coefficient friction vs pipe 
absence introductions attack markedly worse terms load increase 
major consequence unknown indebted invitation suppression introductions victims call polls exclusively composed voters friends list accept poll invitation fellow friend 
reliance increases attack lasts longer 
undesirable allows adversary predict closely membership poll poller friends promoting focused poll disruptions 
main function introductions ensure unpredictability poll memberships 
note techniques blacklisting commonly defeat denial service attacks context email spam server selection invite voters believe accept significantly reduce friction caused admission control attack 
explore defenses compatible goal protecting subversion attacks operate biasing opinion poll sample corrupted peers 
targeting effort filters attack filters downstream reciprocity filter adversary get fast possible 
consider attack brute force adversary continuously sends poll invitations valid introductory efforts get past random drops invitations arrive credit identities steady attack state frequent considered legitimate 
unknown peers suffer random drops peers debt adversary launches attacks indebted addresses 
conservatively initialize adversary addresses debt grade loyal peers 
give adversary oracle allows inspect loyal peers schedules 
avoids wasting introductory efforts due scheduling conflicts loyal peers 
reciprocity filter adversary defect stage protocol exchange providing introductory effort poll message tro providing remaining effort message re defection coeff 
cost delay access friction ratio ratio failure intro remain ing table effect brute force adversary defecting various points protocol coefficient friction cost ratio delay ratio access failure probability 
point upper numbers correspond au collection lower numbers correspond au collection 
coefficient friction refractory period hours coefficient friction brute force attacks aus 
refractory period varies hours 
defecting 
table shows brute force adversary cost effective strategy lowest cost ratio metric participate fully protocol doing raise loyal peers preservation cost coefficient friction factor large collection equates average machine load 
defend increase cost lockss peers provision resources reasonable amount 
baseline probability access failure rises cost identical incurred defenders cost ratio 
fortunately continuous attack brute force adversary effort expenditure unable increase access failure probability victims greatly rate limits prevent bringing advantage resources bear 
similar behavior earlier prevents different unconstrained adversary modifying content 
measured effectiveness refractory period rate limiting poll flood attacks brute force adversary defect strategy best cost benefit ratio brute force strategies 
shows coefficient friction brute force attack aus refractory period varies hours 
shorter refractory period poll invitations attacker accepted victims greater rate driving coefficient friction 
refractory period hour average machine load victim peers 
aus consume peer processing time average peer support aus attack 
refractory period hours peers average load supporting aus 
hand graph shows lengthening refractory period hours greatly reduce coefficient friction 
furthermore increasing refractory period decreases probability peer accepting legitimate poll invitations unknown indebted peers voters accept fewer invitations unit time 
long refractory period discovery process finding new voters causes increased reliance poller friends list 
similar behavior occurs introductions removed protocol see section 
shorter refractory period increases probability voters accepting invitations legitimate unknown increases damage poll flood attack 
choice hours limits harm attacker accepting legitimate poll invitations unknown indebted peers discovery process function 
analysis conservatively assume brute force adversary uses attacking identities debt grade victims 
space constraints lead omit experiments adversary may credit grade 
adversary polls victim supplied victim vote defects ways described 
recovers grade victim supplying appropriate number valid votes succession 
vote supplies introduce new bypass victim admission control defecting 
attack requires victim invite polls sufficiently rate limited effective brute force 
limited decay hand reputation debt grade 
leave details extended version 
related section describe significant ways new lockss protocol differs previous efforts 
list describes nature types denial service attacks related applies defenses similar 
protocol described derived earlier covered background lockss system 
protocol redundancy rate limitation effort balancing bimodal behavior polls won lost friend bias soliciting percentage votes peers friends list prevent powerful adversaries modifying content detection system false alarms 
target protocol vulnerability attrition attacks reinforcing previous defenses admission control desynchronization redundancy 
major difference prior protocol described treatment repair 
previous protocol voting repair separated phases 
determined repair necessary requested complete copy document publisher available peer previously supplied votes 
problems 
requested repairs needed signaling vulnerability content adversary 
second repair mechanism exercised content recovery needed 
mechanisms exercised emergencies 
left system vulnerable free riding peer supply votes defect poller requested costly repair 
address problems restructuring repair mechanism described section integrate block repairs including repairs actual evaluation votes 
third significant difference protocol supports desynchronization defense 
previous protocol loyal needed find quorum voters simultaneously vote au 
poller obtains votes time duration poll evaluates outcome poll accumulated requisite votes 
attrition adversary draws wide range detecting measuring combating network level ddos attacks capable stopping traffic peers :10.1.1.21.6570
observes current attacks simultaneously high intensity long duration high coverage peers :10.1.1.21.6570
redundancy key survival dos attacks pipe appears peers failed peer 
systems redundancy mask storage failure :10.1.1.115.4299
byzantine fault tolerance related lockss opinion polling mechanism goal managing replicas face attack 
provides stronger guarantees requires third replicas faulty misbehaving 
distributed system lockss system spread internet assume upper bound number misbehaving peers 
aim system performance degrade gracefully increasing numbers misbehaving peers fail suddenly critical threshold reached 
routing multiple redundant paths distributed hash tables dhts suggested way increasing probability message arrives intended recipient despite nodes dropping messages due pipe 
rate limits effective slowing spread viruses 
suggested limiting rate peers join dht defense attempts control part hash space 
suggests dhts need rate limit joins stores defend attrition attacks 
study suggests increased latency causes affect users behavior :10.1.1.127.6039
effort balancing defense spam may considered application level dos attack received bulk attention area 
effort balancing defense draws pricing processing concepts 
measure cost memory cycles cpu cycles turing tests 
crosby show worstcase behavior application algorithms exploited application level dos attacks nonces bounded verification time mbf avoid risk 
lockss system avoid strong peer identities infrastructure changes rule techniques excluding malign peers secure overlay services 
related hand reputation gametheoretic analysis peer behavior feldman show reciprocative strategy admission control policy motivate cooperation selfish peers 
admission control improve usability overloaded services 
example propose admission control strategies help protect long running web service sessions related sequences requests abrupt termination 
preserving responsiveness web services face demand spikes critical lockss peers need manage resources progress necessary rate long term 
treat demand spikes hostile behavior 
context daswani admission control rate limiting mitigate effects query flood attack superpeers unstructured file sharing peer peer networks 
mironov provide compliance enforcement context distributed computation receipt technique similar 
random auditing challenges hashing proposed means enforcing trading requirements distributed storage systems 
dhts waves synchronized routing updates caused joins departures result instability periods high churn 
bamboo desynchronization defense lazy updates effective :10.1.1.10.5979
immediate goals 
observe protocol symmetric attrition adversary asymmetric 
may adaptive behavior loyal peers exploit asymmetry 
example loyal peers modulate probability acceptance poll request 
effect raise marginal effort required increase loyal peer attack effort increases 
second need understand defenses attrition dynamic environment new loyal peers continually join system time 
third need consider combined adversary strategies adversary weaken system attrition attack preparation type attack 
defenses equip lockss system resist attrition 
application level attrition attacks adversaries resource constraints sustained years defeated reasonable provisioning 
provisioning natural application may significantly reduce required amount 
second strategy provides unconstrained adversary greatest impact system behave large number new loyal peers 
third network level attacks affect system significantly intense communication peers widespread target peers sustained months 
digital preservation unusual application goal prevent things happening 
lockss system resists failures attacks powerful adversaries normal defenses longterm secrets central administration 
techniques developed may primarily applicable preservation hope conservative design assist building systems better meet society need reliable defensible systems 
lockss project simulator hosted sourceforge carry bsd style open source licenses 
implementation protocol production lockss system progress 
acknowledgments grateful kevin lai joe hellerstein geoff ed lucy bansal help 
owe shepherd carla ellis anonymous reviewers help improving 
especially thankful reich director lockss program 
supported national science foundation andrew mellon foundation 
opinions findings recommendations expressed authors necessarily reflect views funding agencies 
abadi burrows manasse wobber moderately hard memory bound functions 
ndss 
cheriton active internet traffic filtering real time response denial service attacks 
usenix apr 
arl association research libraries 
arl statistics 
www arl org stats pub intro html 
back denial service counter measure 
www org pdf 
archiving electronic journals 
www 
org preserve htm 
castro druschel ganesh rowstron wallach secure routing structured peer peer overlay networks 
osdi 
castro liskov practical byzantine fault tolerance 
osdi 
session admission control mechanism peak load management commercial web sites 
ieee trans 
computers 
cox noble honor thieves peer peer storage 
sosp 
crosby wallach denial service algorithmic complexity attacks 
usenix security symp 

daswani garcia molina query flood dos attacks gnutella 
acm conf 
computer communications security 
dean client puzzles protect tls 
usenix security symp 

douceur sybil attack 
st intl 
workshop peerto peer systems 
dwork goldberg naor memory bound functions fighting spam 
crypto 
dwork naor pricing processing 
crypto 
electronic frontier foundation 
archive 
www eff org ip 
feldman lai stoica chuang robust incentive techniques peer peer networks 
acm electronic commerce 
floyd jacobson synchronization periodic routing messages 
acm trans 
networking 
malicious bots threaten network security 
ieee computer jan 
giuli baker scalable flow network simulator 
technical report arxiv cs pf cs department stanford university nov 
mironov distributed computations 
lecture notes computer science 
cd 
www pc active nl asp 
www com news 
heidemann papadopoulos framework classifying denial service attacks 
sig comm 
keromytis misra rubenstein sos secure overlay services 
sigcomm 
kubiatowicz bindel chen czerwinski eaton geels gummadi rhea weimer wells zhao oceanstore architecture global scale persistent storage :10.1.1.115.4299
asplos 
knightly low rate tcp targeted denial service attacks vs mice elephants 
sigcomm 
mahajan bellovin floyd ioannidis paxson shenker controlling high bandwidth aggregates network 
comp 
comm 
review 
malkhi reiter byzantine quorum systems 
distributed computing 
maniatis giuli roussopoulos rosenthal baker impeding attrition attacks systems 
sigops european workshop 
maniatis roussopoulos giuli rosenthal baker preserving peer replicas rate limited sampled voting 
sosp 
mckusick joy leffler fabry fast file system unix 
acm trans 
computer systems 
mills internet time synchronization network time protocol 
ieee trans 
communications oct 
moore voelker savage inferring internet denial service activity :10.1.1.21.6570
usenix security symp 

needham denial service 
acm conf 
computer communications security 
reason human error 
cambridge university press 
rhea geels roscoe kubiatowicz handling churn dht :10.1.1.10.5979
usenix 
rodrigues liskov byzantine fault tolerance long lived systems 

rosenthal roussopoulos giuli mani atis baker hard disks digital preservation 
imaging sci 
tech 
archiving conference 
rosenthal reich permanent web publishing 
usenix freenix track 
saroiu gummadi dunn gribble levy analysis internet content delivery systems :10.1.1.127.6039
osdi 
savage wetherall karlin anderson practical network support ip traceback 
sigcomm 
snoeren partridge jones kent strayer ip traceback 
sigcomm 
somayaji forrest automated response system call delays 
usenix security symp 

spam arrest llc 
take control inbox 
com 
characterizing large storage systems error behavior performance benchmarks 
phd thesis cs div univ california berkeley berkeley ca usa oct 
online scholarly journals 
library journal 
www com index asp layout 
wallach survey peer peer security issues 
intl 
symp 
software security 
williamson throttling viruses restricting propagation defeat malicious mobile code 
annual computer security applications conf 

notes appears proceedings usenix annual technical conference anaheim ca usa april 
pages 
lockss trademark stanford university 
