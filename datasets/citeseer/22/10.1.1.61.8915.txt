time programming language metatheory benjamin pierce peter sewell stephanie weirich steve zdancewic department computer information science university pennsylvania computer laboratory university cambridge 
close world mechanically verified software commonplace 
world theorem proving technology routinely software developers programming language researchers alike 
crucial step achieving goals mechanized reasoning language metatheory 
time come bring theorem proving programming language communities address problem 
proposed challenge concrete set benchmarks intended measuring progress area stimulating discussion collaboration 
goal push boundaries existing technology point achieve mechanized metatheory masses 
mechanized metatheory masses significant obstacle achieving goal verified software reasoning languages software written 
formal models programming languages impossible state prove meaningful properties software tools compilers 
essential develop appropriate tools modeling programming languages mechanically checking metatheoretic properties 
infrastructure provide facilities proving properties operational semantics program analyses type checkers program transformations optimization compilation 
proofs programming languages straightforward long tedious just interesting cases 
complexity arises management details deep conceptual difficulties small mistakes overlooked cases invalidate large amounts 
effects amplified languages scale hard keep definitions proofs consistent reuse ensure tight relationships theory implementations 
automated proof assistants offer hope significantly easing problems 
despite encouraging progress years availability mature tools acl coq hol position adapted challenge 
isabelle lego nuprl pvs twelf commonplace 
believe time right join efforts communities bringing developers automated proof assistants large pool eager potential clients programming language designers researchers 
particular intend answer questions 
current state art formalizing language metatheory semantics 
recommended best practices groups typically proof assistant experts embarking formalized language definitions small large scale 

improvements needed tool support commonplace 
community contribute 
past months attempted survey landscape proof assistants language representation strategies related tools 
collectively applied automated theorem proving technology number problems including proving transitivity algorithmic subtype relation kernel proving type soundness featherweight java proving type soundness variants simply typed calculus substantial formalization behavior tcp udp sockets api :10.1.1.35.8290
carried case studies variety object language representation strategies proof techniques proving environments 
experimented lightweight tools designed easier define typeset formal informal mathematics 
experts programming language theory relative novices respect computer aided proof 
experiments relevant technology developed point widely language researchers 
seek push threshold making proof tools common practice programming language research mechanized metatheory masses 
tool support formal reasoning programming languages useful levels 
machine checked metatheory 
classic problems type preservation soundness theorems unique decomposition properties operational semantics proofs equivalence algorithmic declarative variants type systems results typically proved hand small medium size calculi proved full language definitions 
envision papers conferences principles programming languages popl international conference functional programming icfp routinely accompanied mechanically checkable proofs theorems claim 

definitions oracles testing animation 
developing language implementation formal definition definition oracle testing 
requires tools decide typing evaluation relationships differ tools embedded proof assistant 
cases definition directly prototype 

support engineering large scale definitions 
move full language definitions scale standard ml larger pragmatic software engineering issues increasingly important potential benefits tool support 
large definitions need elegant concise notation pressing witnessed care taken day researchers informal mathematics 
lightweight tool support full mechanized proof useful domain sort checking typesetting definitions informal proofs automatically instantiating definitions performing substitutions goal stimulate progress area providing common framework comparing alternative technologies 
approach design set challenge problems dubbed challenge chosen exercise aspects programming languages known difficult formalize variable binding term type levels syntactic forms variable numbers components including binders proofs demanding complex induction principles 
challenge problems past theorem proving community focus attention specific areas evaluate relative merits different tools ranged scale benchmark suites small problems grand challenges floyd hoare moore 
hope challenge similarly stimulating effect 
problems drawn basic metatheory callby value variant system enriched records record subtyping record patterns 
challenge provides informal mathematics definition type system operational semantics outline proofs metatheory 
language moderate scale toy calculus full blown programming language keep involved attempting challenges manageable 
intent challenge cover broad range issues arise formalization programming languages course programming language features control flow operators state concurrency covered sample problem believe system capable formalizing problems able formalize features 
expect challenge set grow evolve community addresses problems discovers 
initial challenge disseminated wide audience theorem prover programming language researchers 
process collecting evaluating solutions 
results related information mechanized metatheory available web site 
challenges explicitly address points regard pragmatic issues equally critical clear formulate useful challenge problem larger scale 
www cis upenn edu proj mmm longer run hope site corresponding mailing list serve forum promoting advancing current best practices proof assistant technology making technology available broader programming languages community 
encourage researchers try challenge favorite tools send solutions inclusion web site 

brian aaron bohannon matthew fairbairn nathan foster benjamin pierce peter sewell dimitrios geoffrey stephanie weirich steve zdancewic 
mechanized metatheory masses challenge 
theorem proving higher order logics th international conference oxford uk august 

yves bertot pierre 
interactive theorem proving program development volume eatcs texts theoretical computer science 
springer verlag 

luca cardelli simone martini john mitchell andre scedrov 
extension system subtyping 
information computation 
summary tacs sendai japan pp 


luca cardelli peter wegner 
understanding types data abstraction polymorphism 
computing surveys december 

robert constable stuart allen mark bromley rance cleaveland james cremer robert harper douglas howe todd knoblock paul mendler prakash panangaden james sasaki scott smith 
implementing mathematics nuprl proof development system 
prentice hall englewood cliffs nj 

pierre louis curien giorgio ghelli 
coherence subsumption minimum typing type checking 
mathematical structures computer science 
gunter mitchell editors theoretical aspects object oriented programming types semantics language design mit press 

louise dennis 
inductive challenge problems 
www cs nott ac uk lad research challenges 

robert floyd 
assigning meanings programs 
schwartz editor mathematical aspects computer science volume proceedings symposia applied mathematics pages providence rhode island 
american mathematical society 

gent walsh 
benchmark library constraints 
technical report technical report apes 
available cs strath ac uk 
shorter version appears proceedings th international conference principles practices constraint programming cp 

gordon melham editors 
hol theorem proving environment higher order logic 
cambridge university press 

ian green 
dream corpus inductive conjectures 
dream dai ed ac uk dc lib html 
lists seas upenn edu 
tony hoare 
verifying compiler grand challenge computing research 
acm 

holger hoos thomas stuetzle 
satlib 
www intellektik informatik de satlib 
atsushi igarashi benjamin pierce philip wadler 
featherweight java minimal core calculus java gj 
acm sigplan conference object oriented programming systems languages applications oopsla october 
full version acm transactions programming languages systems toplas may 

matt kaufmann strother moore panagiotis 
computer aided reasoning approach 
kluwer academic publishers 

zhaohui luo robert pollack 
lego proof development system user manual 
technical report ecs lfcs university edinburgh may 

robin milner mads tofte robert harper david macqueen 
definition standard ml revised edition 
mit press 

strother moore 
grand challenge proposal formal methods verified stack 
bernhard maibaum editors formal methods crossroads 
panacea foundational support th anniversary colloquium unu iist lisbon portugal volume lecture notes computer science pages 
springer 

strother moore george porter 
apprentice challenge 
acm trans 
program 
lang 
syst 

tobias nipkow lawrence paulson markus wenzel 
isabelle hol proof assistant higher order logic volume lecture notes computer science 
springer verlag 

sam owre rajan john rushby natarajan shankar srivas 
pvs combining specification proof checking model checking 
international conference computer aided verification cav new brunswick new jersey volume lecture notes computer science pages 
springer verlag july 

frank pfenning carsten sch rmann 
system description twelf metalogical framework deductive systems 
harald ganzinger editor automated deduction cade th international conference automated deduction trento italy july proceedings volume lecture notes artificial intelligence pages 
springer verlag 

geoff sutcliffe christian 
tptp problem library 
journal automated reasoning 
