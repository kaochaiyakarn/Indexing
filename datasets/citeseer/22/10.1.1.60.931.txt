securing data storage review current research paul stanton department computer science university illinois urbana champaign protecting data malicious computer users continues grow importance 
preventing unauthorized access personal photographs ensuring compliance federal regulations ensuring integrity corporate secrets applications require increased security protect data talented intruders 
specifically files preserved disk requirement provide secure storage increased importance 
presents survey techniques securely storing data including theoretical approaches prototype systems existing systems currently available 
due wide variety potential solutions available variety techniques arrive particular solution important review entire field prior selecting implementation satisfies particular requirements 
provides overview prominent characteristics systems provide foundation making informed decision 
initially establishes set criteria evaluating storage solution confidentiality integrity availability performance 
criteria explains relevant characteristics select storage systems provides comparison major differences 

proliferation stored data environments organizations face increasing requirement temporarily permanently retain information 
storage medium housing information prime target attack malicious intruder 
outsider successfully penetrate data storage intruder potentially gain information violates privacy discloses valuable secrets prevents access legitimate users deleterious effects attack truly 
organization takes storage security measures data store single point attack intruder 
avoidance obviously unfavorable condition generated detailed field computer research 
universities actively pursued options securing stored information consequently developed potential schemes ensuring information confidentiality integrity availability substantially degrading performance 
see relational diagram ongoing research 
major problem associated storing large amounts data properly weigh costs benefits associated security measures 
secure systems increased measures protect data additional measure comes cost terms convenience processing time 
order effectively select best security scheme users understanding primary security features available storage security community able compare systems 
developing understanding aspects help motivate direction research assist selection appropriate storage solution set specific requirements 
remainder organized follows 
section provides standardized set criteria evaluate secure storage systems 
section provides survey storage systems 
section provides classification comparison surveyed systems section concludes 
red black sfs ro mit sfs ro sfs nyu penn state plutus hewlett packard plutus pasis university business organization name project name indirect coordination direct coordination seagate plutus nasd carnegie mellon suny stony brook iscsi haifa ibm almaden scared scared uc santa cruz farsite microsoft relational diagram current research 
criteria evaluation johns hopkins univ oceanstore uc berkley sirius stanford section establishes common set criteria evaluating storage security system 
different ways approach storage systems purposes establishing common confidentiality integrity availability performance selected 
approach criteria exhaustive detail necessary describe evaluation criteria prior assessing individual systems 
confidentiality integrity availability commonly referred computer security arena performance added ensure systems achieve appropriate balance security processing ability 
prior discussing aspect detail important understand attributes mutually exclusive fact secure system attributes satisfied 
confidentiality security perspective ensuring confidentiality implies access data specifically authorized 
different systems control authorization process various ways 
step authorizing access information properly identify users authentication 
storage system define means user properly identified prior gaining access having appropriately identified user system allow access specified data associated user 
proper authorization access storage system imply access entire system fact contrasting principle privilege generally applied 
data owners method allowing access information appropriate delegation authorization scheme 
addition managing authorization data confidentiality implies system encrypt data prevent information attacks 
system require users servers apply cryptographic keys 
differing design decisions user managed sever managed keys significant impact storage technique 
order share information multiple users access appropriate keys centralized group server hands keys individual file owners provide keys additional users effects performance user convenience analyzed 
discussion key management intended detail cryptography understanding keys distributed applied essential understanding larger system 
cryptographic operations computationally expensive aspect accessing securely stored data understanding particular system manages keys appropriate 
additional critical discussion concerning key management involves keys revoked 
owner administrator determines revoke particular user access data keys user longer allow access system allow access versions files 
cost associated revoking user manifests re encryption effort required secure confidentiality 
possible physically revoke user keys prevent user ability perform operations copies produced system render keys revoked user obsolete re encrypt data new key 
resulting argument turns tradeoff security performance 
primary methods securing data key revocation lazy aggressive revocation 
lazy revocation system data revoked user previously authorization access valid user attempts access file 
essentially cost time leaves data vulnerable revoked user unspecified period time 
contrast aggressive revocation immediately re encrypts files revoked user potentially access 
re encrypted new keys distributed personnel affected changed encryption adding additional weight key distribution scheme clearly option requires time 
lazy re encryption sacrifices measure security save time aggressive revocation sacrifices time improve security 
integrity integrity broadly topic includes maintaining data consistency face accidental malicious attacks data 
purposes scope integrity analysis limited methods prevent malicious alteration destruction information 
resulting expectation user accesses stored information data subjected unauthorized modification 
systems enforce integrity ensuring data comes expected source 
stored data discussion integrity implies files changed disk 
integrity enforcement procedures fall categories data modification prevention data modification detection 
similar confidentiality modification prevention requires users receive authorization prior changing files requires files changed approved manner 
integrity varies confidentiality confidentiality worried data compromised integrity includes ensuring correctness data 
detection schemes generally assume attacks inevitable suitable ways assess damage done recover damage apply lessons learned prevention mechanisms 
availability considers availability terms time space representation 
information needs available authorized user acceptable time period available storage space understandable representation 
system allow adversary prevent authorized access information denial service attack 
important note goals availability conflict degree confidentiality considered security domain 
performance level security system performance conflict 
order provide requisite layers security avoid harmful attacks system performance suffers 
goals efficient system secure environment intrinsically conflict 
additional security measure requires computationally expensive processing detracts system ability perform operations security measures overhead system 
evaluated storage techniques attempts minimize performance cost associated particular measures system 
dominant performance cost associated encryption due computationally expensive nature 
fundamentally different approaches storage security encrypt wire encrypt disk place burden encryption different aspects system 
riedel provide detailed explanation tradeoffs 

survey survey briefly describes storage security approaches confidentiality integrity availability performance framework 
sections refer encrypt wire systems sections refer encrypt disk systems 
nasd network attached secure disks 
traditional distributed file systems client wanting access data request file server 
server verify client authorization distribute file appropriate criteria met 
server interact file access request client server quickly bottleneck 
nasd primary goal relieve server bottleneck interacting user time providing capability key capability key user access appropriate disk directly server interaction 
disks intelligent possess internal ability process capability key handle file access requests directly 
authentication server file server clients disk disk disk 
client requests authentication 
server responds 
client request file server 
file server responds capability object 
request directly drive 
response disk nasd confidentiality 
servers nasd design provide authentication actual file server 
nasd specify authentication scheme recommends existing method similar kerberos 
receipt authentication user sends request file server 
server verifies authenticity request provides user capability key corresponds user rights file access 
obtaining capability key user communicate directly data disk access requests session 
capability object critical aspect pertaining confidentiality integrity system 
file manager agreeing client access request privately sends capability token capability key client form capability object 
token contains access rights granted request key message authentication code mac consisting capabilities secret key shared file server actual disk drive 
clients direct request nasd drive providing capability object 
drive uses secret key shares file server interpret capability token verify user access rights service request 
mac interpreted drive server shared secret key modifications arguments false arguments result denied request 
integrity 
novel concept associated nasd placing part data integrity requirement disks 
intelligent disks interpret capabilities objects encrypt data transmit results clients 
ensure integrity client disk uses hash mac combination allowed authorize client access encrypt send data client 
client verify integrity transmission decryption process 
availability 
fact nasd allows direct access disk promotes scalability system throughput scales linearly number clients disks 
file server trusted initially provide capability keys server presents single point attack 
server compromised way prevent denial service attack 
performance 
motivating factor nasd ability scale bandwidth linearly number disks system benefits partially offset cost cryptography 
large performance problem associated nasd dual cost cryptographic operations incurred due encrypt wire scheme 
data transmission encrypted prior sent decrypted destination disk client client disk 
attempt reduce performance penalty nasd uses hash mac cryptographic approach standard mac 
traditional mac algorithm client secret key computation 
contrast hash mac uses raw data file precompute series message digests generic file 
hash mac applies client secret key message digests client requests file 
result secret key required small subset computation significantly decreasing latency associated fly cryptography 
experiments demonstrated latency cryptographic operations bounded increase time service request compared request cryptography 
pasis survivable storage pasis survivable storage system designed address problems associated compromised servers system assumes compromised servers exist addresses protect data environment 
pasis employs threshold scheme distribute trust storage nodes prevent data security breaches faced compromised server 
threshold scheme encodes replicates divides information pieces data stored different locations 
order data transparent users pasis requires client side agent interpret user level commands associated responses various pasis servers connected storage nodes 
confidentiality 
pasis strives prevent data compromise storing elements file different locations single compromised server disclose relevant information 
cryptography ensure confidentiality pasis uses ramp threshold scheme divides data shares shares reconstruct original data fewer shares reveals information original 
cryptography threshold scheme combined increase level protection cryptography layered top pasis 
long shares visible intruder information compromised 
integrity 
pasis helps provide data integrity relying specific set pasis servers provide required shares data 
having set shares allows client agent reconstruct original data shares come various servers network 
order prevent data integrity intruder compromise servers servicing request alter data 
client agent receive requisite shares unable recreate original file due malicious intervention request rebroadcast 
availability 
similar argument pasis integrity enhancements system requirement shares retrieve data increases data availability face failed servers 
number servers required surviving subset servers upper bound servers compromised unavailable system successfully service request 
similarly write operation system administrator determine number shares required accept write 
shares successfully written number provide correct data 
clearly successfully written shares provide greater availability subsequent file access requests 
pasis provides increased data availability single users directly address concurrent access concurrent modifications files 
implies additional mechanism layered top pasis guarantee atomicity turn implies potential message passing overhead latency multiple users access file simultaneously 
performance 
relative comparison traditional distributed file system pasis hindered increased number message passes receive information 
traditional system sends request single server pasis broadcast requests servers combine resultant messages client machine 
difficult quantify overhead associated pasis great performance trade offs associated selecting different values 
values customized particular file 
example increasing value increases likelihood shares available means shares file stored increasing potential theft 
benefit flexibility allows users select appropriate values file store system 
research pasis designers discovered significant performance cost accessing small files negligible penalty large files 
self securing storage self securing storage medium introduces new aspect storage security disks trust host machine operating system 
treats requests suspect 
driving security motivation system negate effects clever intruder able successfully penetrate operating system disguise adversarial efforts 
disks require small set fundamental operations managing file system embedded instruction set internally versioning auditing data metadata 
uses daemon client machine service file access requests remote procedure calls translate specific requests system transparent users 

confidentiality 
provide method authentication assumes self securing disks conjunction file server uses standard authentication protocols 
access requests properly sent serviced additional verification 
integrity 
focus system designed confidentiality ensuring data integrity 
underlying theme design confidentiality eventually system 
analyzing history systems studying success intruders researchers carnegie mellon university assumed compromised servers unfortunate reality 
primary focus storage research preventing intruder damaging stored data capturing intruder actions detection diagnosis 
uses comprehensive versioning protocol creates new version file metadata file access 
establishes detection window data metadata comprehensively versioned 
addition versioning obvious write activity changes data file access results update file log improper access questioned 
period detection window largely defined amount space available keeping overhead multiple versions proven approximately weeks research 
considerable research resulted combination journal structure multi version trees efficiently keep requisite information space efficient manner 
time detection window intrusion occurs system guarantee integrity data point intrusion 
additionally verifying access logs individual files files safely recovered anomalies exist 
files questionable accesses post intrusion period may result lost data user guaranteed receive tainted file 
critical aspect systems may allow user access file modified intrusion prevent integrity violation 
system administrator establishes detection window set user prevent access data versioned 
precludes intruder altering file undetectable fashion 
availability 
comprehensive versioning self securing storage inherently ensures data available users 
immediately system administrator detects intrusion files reliably restored access prior intrusion 
legitimate changes intrusion prior detection may result lost data lost data minimized 
includes inherent intrusion detection scheme analyze access history files system administrator deems appropriate 
instance intruder attempts change contents password file administrator watching intrusion detected immediately 
minimizing deleterious effects intrusion system naturally increases data availability 
performance 
considering costs maintaining versions file access designers searched space time efficient means achieving comprehensive versioning 
journal metadata multi version binary trees meet objectives 
system proven operate comparable speed traditional nfs current file lookup 
back time access lookup time dependent number versions traversed 
bounded system administrator determination checkpoint file system 
cfs cryptographic file system cfs archaic relevant discuss cfs formed theoretical stepping stone researchers establish system design goals 
primary motivation cfs eliminate requirement user system level cryptography place requirement file system 
manual application cryptographic operations error prone incompatible 
system level solutions lacked portability caused embedded encryption techniques lacked compatibility due specialized server authentication software left potential security holes data temporarily stored clear text 
cfs proposed pushing file encryption client file system 
crypto mount point unix mask cfs specific operations allowing file system treat encrypted files 
system designed local distributed individual user physically hand cryptographic keys file 
confidentiality 
method controlling authorization file owner selectivity passing requisite keys users 
user responsibility ensure keys distributed secure manner correct intended personnel 
method scalable rely trusted server 
owner file encrypts symmetric key prior writing file system 
file system users access clear text data 
special provisions ensuring data encrypted wire operate assumption file leaves client machine encrypted form modified server file system transmitted authorized client proper key information secure 
cfs mounts virtual file system crypt standard unix files system directs system calls related encrypted files mount point 
users create directories crypt mount point associated key encrypt data stored directory 
integrity 
cfs converts standard nfs system calls cfs specific calls daemon client machine 
daemon issues rpcs file server client establishes proper connection server 
attempt send rpc directly file server bypassing cfs daemon denied requirement rpcs client generated privileged port 
helps prevent malicious user having access modify files direct mechanism provide additional integrity protection 
cfs relies assumption file server access unencrypted data ensure data integrity 
availability 
files remain encrypted file server mechanism prevent adversary denying legitimate user accessing files server compromised 
system underlying file system sharing semantics allow concurrent access multiple users 
keys properly distributed cfs provides comparable standard availability unix 
performance 
cfs runs user level interfaces underlying file system remote procedure calls 
implies potential significant context switch overhead addition added cost des cryptographic operations 
cfs proved times slower standard nfs reading writing large files twice slow creating small files slower mix standard operations 
sfs ro secure file system read sfs ro relies self certifying path names provide high availability read data distributed environment 
sfs ro uses concepts sfs predecessor strives better performance providing read data require server cryptographic operations 
concept ensure data integrity producing multiple copies read material traditionally copying resulted degradation security 
confidentiality 
sfs ro relies mutual authentication protocol users server performed self certifying pathnames public key file embedded 
creator file ability assign key offering wide range cryptographic options 
properly encrypt files administrator bundles contents file system database signed digital signature containing private portion asymmetric key 
signed database replicated distributed untrusted machines threat compromise 
order access files user provide location storage server dns hostname ip address 
cryptographic hash server location public portion asymmetric key file creator encrypted database 
database creator provide public key potential users separate sfs ro system 
granted permission files mutual authentication users access files providing appropriate handle comprised cryptographic hash file blocks 
groups handles recursively hashed stored hash trees handle root inode provides ability verify content individual file blocks reducing number handles required system 
knowing handle root inode provides client ability verify contents file recursively checking hashes 
integrity 
sfs ro relies critical elements sfs database generator sfs read server daemon client 
traditional directories converted database digitally signed secure client environment 
database distributed number servers run sfs ro server daemon 
server daemon simply receives requests clients look return data 
sfs client runs client machine conduit standard file system protocol nfs server 
receipt file transmission converts sfs ro database chunks traditional inodes blocks typical file system expect see 
additionally client posses private key verify digital signature data passed server sfs ro trust server 
verification process ensures data integrity 
sfs ro uses timestamp protocol help detect integrity violations 
user creates database time recorded 
additionally creator establish time resign database time upper lower bound 
users files maintain record current timestamp compare data receive prevent rollback attack 
availability 
primary goals sfs ro extend access read data global environment 
accomplish file system creator copy securely generated database server running sfs daemon 
result system scales number servers multiplied number connections server 
system designed multiple copies read material distributed multiple machines logical deduce destruction server affect availability file 
performance 
cryptographic operations performed client machines creator establishes database secure non networked environment users receive encrypted data decrypt client machines 
cryptographic operations proved costly aspect comparison traditional nfs 
small files sfs ro twice slow nfs primary additional cost due timestamp verification ensure integrity 
sfs ro incurs additional latency compared nfs nfs run kernel sfs ro rely system calls 
larger files proportion system calls data passed smaller slow approximately improved small files considerable performance penalty 
sfs ro began perform favorably large files mb proving faster nfs 
secure network attached disks secure network attached disks designed prevent unauthorized personnel accessing stored files encrypting data allowing decryption client machine 
eliminates potential threat posed compromising system administrator access rights posed physically capturing disk 
individual drives lack sufficient information decrypt data rely key management scheme provides authorized user sufficient keys decrypt files remote client machine 
confidentiality 
critical functionality lies mechanism storing keys 
file consists sized secure data objects individually encrypted symmetric object key 
file metadata pointer key object file considered file 
key object metadata fields unique key file id user id creator file digital signature user modify file 
digital signature modifier file provided assure users key object modified authorized user verify key object signature matches authorized write file 
key object file consists tuples coincide legitimate users original file 
tuple contains user id field object symmetric key access secure data objects listing user permission write key object coinciding permission write original file 
object key encrypted public portion user asymmetric key way decrypt object key user private key user client machine 
prevents intruder able access symmetric key encrypted stored data 
addition key objects manages authorized users maintaining certificate object tuples containing valid user ids user public key hashed message authentication code key provide verify user digital signatures timestamp system updates user performs write operation prevent replay attacks 
integrity 
provide integrity enhancement stores non linear checksum original data encrypted data user verify file maliciously changed storage 
checksum updated authorized user modification file 
users verify integrity writes analyzing file key object file metadata checking digital signature provided 
availability 
lock box keys critical aspect available users access files 
unfortunately stored single trusted server presents single point attack adversary 
server compromised way prevent denial service attack 
additionally system specified key revocation policy leaves decision implementation active lazy revocation file owner 
performance 
computationally expensive encryption decryption tasks performed client machines avoid potential bottleneck server 
decryption process slow performed relatively faster client machines 
offer user options designers implemented separate schemes providing digital signatures trade security performance 
file creator determine granularity verify digital signature finer granularity security provided vice versa 
developers proven empirical studies digital signature process far costly 
secure method digital signatures provided block write verified block read suitable standard 
secure options verifying digital signature hashed mac public key proved comparable system security 
plutus plutus scheme operates similarly primary goal plutus provide highly scalable key management providing file owners direct control authorizing access files 
data encrypted disk cryptographic key management operations performed clients alleviate server cryptographic overhead 
users customize security policies authentication mechanisms files client key distribution scheme 
places responsibility key management user forcing file owner ensure proper secure distribution keys wish authorize access 
prospective user contact owner order get appropriate key 
riedel argue task performed acceptable cost user convenience 
confidentiality 
provide liberty owner customization ensuring confidentiality plutus relies intricate scheme multiple levels keys 
data level plutus uses block structure encrypt individual block unique symmetric key 
block keys encrypted accessed file key common files 
owner creates file key file created distributes users 
plutus uses asymmetric file verify key file sign key protocol differentiate readers writers respectively see 
keys sign verify cryptographic hash file block contents provide integrity 
requesting file server passes encrypted encrypted block contents user 
user unlocks file key decrypts block respective file block key 
proliferation keys plutus complicate key revocation scheme 
multiple files file system related access rights traditional directory encrypted key key revocation cause mass re encryption key management problems 
designers implemented clever key rotation scheme minimizes effects 
plutus uses lazy revocation revoked user read files accessible time revocation 
problem arises due re encrypting file different files group require different keys 
primary motivation place minimize number keys designed rotation scheme ensures new encryption key related keys files 
system performs re encryption latest keys valid users generate previous versions latest key 
result valid users regenerate proper key file latest key 
new key disseminated currently valid users revoked users 
filename key foo bar 
directory inode pointer inode inode 
client machine symmetric file key inode header public file verify key file file block key file block key file block key file block key filename keys name keys optional prevent intruder gaining information unencrypted directory file verify sign keys public distributed qualified users inode block inode block inode block inode block file file block key file block key file block key file block key public file sign key plutus key system inode block inode block inode block inode block integrity 
plutus trust file server rely distinguish writers readers 
uses types keys file sign keys file verify keys respective determination 
attempting read write user verifies digital signature hashed contents file keys 
user obtains unexpected results user determine file illegally modified 
availability 
entire design plutus intended provide scalability 
placing key management responsibility clients trusted server prevents server bottleneck due computationally expensive cryptographic operations 
plutus relies heavily limit number cryptographic keys 
consist files identical sharing attributes protected key 
allows users privileges access file group owner line avoiding requirement user contact owner directly get key file access 
concept rely hierarchical structure grouping strictly product associated files permission attributes 
plutus provide greater scalability clever key rotation process minimize key management responsibilities associated key revocation system requires file owner provide copy file symmetric key user 
help minimize file owner user communication eliminate original responsibility owner distribute keys 
performance 
designers plutus construct system 
performance file system comparable unmodified system server perform extraneous operations file access 
cost client system cryptographic operations performed demonstrated times slower sfs 
authors credible argument justify decrease performance worst case scenarios derive figures 
comparison takes account single file read write combination take advantage design enhancement offered plutus 
plutus designed scalability relieve server bottleneck may arise multiple file access requests standard sfs 
reason average latency protracted favor plutus 
sirius securing remote untrusted storage sirius designed provide cryptographic read write file access top existing untrusted networked file system nfs cifs yahoo 
software daemon system intercepts file access system calls converts accordingly 
concept able establish secure file sharing environment significantly modifying performance existing network storage medium 
sirius provide security existing system requiring hardware modifications developers view system gap measure provide additional security existing systems 
times organizations afford upgrade current systems continue operate limited security time option upgrade security measures available sirius provide interim solution 
confidentiality 
files encrypted secure environment prior stored server server server administrator access unencrypted data 
additionally computationally costly encryption operations performed relatively lightly loaded client machine fact data encrypted obviates requirement establish secure channel send file server 
file owner maintains master encryption key mek master signing key 
file unique symmetric file encryption key provided users file signing key provided authorized writers file 
system provides freshness guarantee maintaining metadata freshness file directory 
files separated parts md file metadata file file data file 
metadata file contains block file owner mek block valid user authorized write file block hash metadata file contents signed owner 
owner user key maintained file metadata person decrypt file 
user key revocation quick efficient file owner removes revoked user key block metadata file creates new re encrypts file new key updates remaining users key blocks new 
result immediate revocation 
integrity 
addition added measures sirius keeps certain file system specific metadata unencrypted file system perform standard integrity checking operations 
sirius keeps access control information encrypted file data 
facilitates legacy file system standard backup procedures system recover crash needed access information available file 
sirius uses freshness guarantee ensure users current version file preventing rollback attack 
user designated interval user timestamps metadata freshness file 
availability 
design decision modifications underlying file server prevents sirius defending denial service attacks attacker conceivably compromise server delete files 
sirius ability intervene circumstance requires users backup files multiple servers limit effects attack 
order add users perspective reader writer file send public key file owner public portion mek encrypt key add files metadata 
new user key added metadata user access file 
key passing mechanism addressed system 
previously addressed sirius supports active key revocation user access rights revoked user longer form access file freshness guarantee 
sirius attempts improve secure networked file system designs allowing fine grained file access providing ability file owner read read write access shared files 
systems allow access entire directories distinguish readers writers 
performance 
time file accessed file system return associated metadata file original support appropriate authorization checking 
metadata file cached prevent overhead looking sending metadata file subsequent retrievals file 
additionally sirius file system calls require checking freshness file resulting increased network traffic additional file 
cost associated sirius mb data read due decryption cost 
similarly cost writing mb file due signature generation 
storage system encryption location nasd wire trusted server pasis wire key revocation policy active timestamps key issued time wire cfs disk manual active revocation sfs ro disk revocation list disk plutus disk sirius disk lazy active revocation options decision lazy revocation revoked user retains file permissions time revocation active revocation 
classification confidentiality measures integrity policy capability keys hash mac separate checksums authentication send data server secure disk data dispersed threshold scheme storage nodes compromised keys handed users file owner self certifying pathnames user control key dissemination 
users secure distribution combination master encryption key file encryption keys detection scheme comprehensive versioning privileged port combined encryption self certifying pathnames timestamps non linear checksum original text stored encrypted file stored encrypted requires augmentation ensure integrity freshness guarantee timestamp availability policy scalable users subject dos shares available recreate original intrusion detection diagnosis provide version limited manual distribution keys dos server compromised multiple distributed copies ro files potential dos server compromised uses requires file owner distribute keys scalable internet requires file owner distribute table system description table provides summary characteristics described previous sections 
estimated performance overhead increase system security significant overhead small files negligible overhead large files comparable nfs slower nfs standard workload times slower nfs small files comparable files mb secure option comparable system security times decrease sfs single file access times slower nfs small files times slower mb files security measure confidentiality integrity availability performance total encrypt disk encrypt wire threshold scheme timestamps digital signatures checksums lazy revocation active revocation key distribution server manual key distribution key mechanism self certifying pathnames comprehensive versioning table quantitative comparison security measures table uses scale assign values level security particular security attribute 
denotes security measure affect attribute denotes measure enhances security denotes measure significantly enhances security 
performance scale modified include values due vastly differing performance costs 
denotes measure significantly slows system performance denotes significant performance penalty indicates limited performance penalty systems suffer performance degradation result added security measures 
figures empirical data derived authors research system important note subjective representation 
plutus key rotation scheme enhances performance 
security measure nasd pasis cfs sfs ro plutus sirius encrypt disk encrypt wire threshold scheme timestamps digital signatures checksums lazy revocation active revocation key distribution server manual key distribution key mechanism self certifying pathnames comprehensive versioning table security measure applications surveyed systems digital signatures considered authors determined expensive table maps security measures systems 
denotes system applies security measure form 
nasd pasis cfs sfs ro plutus sirius quantitative score quantitative comparison secure storage systems quantitative values derived summing total scores security measure applies system 
numbers provide measure comparison consider purpose system conjunction evaluation 
instance pasis survivable storage systems part larger secure storage system 
authors mention design conjunction survivable storage system provide best security 
additionally sfs ro receives high quantitative score limited read applications 

systems share common goal protect stored data effects malicious adversary 
common ground design approaches reach goal vary tremendously 
systems aim prevent adversary having access data assume intrusions inevitable try limit amount damage intruder introduce 
systems separate data multiple storage servers eliminate single point attack rely centralized trusted servers effectively manage cryptographic keys 
systems store encrypted data require encryption prior transmitting messages wire 
examples large fundamental differences provide options potential users storage security medium 
difficult direct comparisons systems varied approaches potential users select applicable solution specific problems 
secure solution combination systems described 
fact majority designers systems recommend solution part larger security plan 
example user accept additional cryptographic latency reason avoid encrypting data applying threshold scheme 
result provide security encryption relying trusted server increase degree availability 
problem layering performance penalty 
design requirement analyze tradeoffs security performance 

mehmet jay wylie wang gregory ganger 
correlated failures survivable storage systems 
cmu scs technical report cmu cs 
may 

scott zachary peterson ethan miller scott brandt 
intra file security distributed file system 
proceedings th ieee symposium mass storage systems technologies pages college park md april 
ieee 

matt blaze cryptographic file system unix acm conference communications computing security fairfax va november 

brian cornell peter dinda fabian wayback user level versioning file system linux 
usenix annual technical conference boston ma jun jul 
william freeman ethan miller 
design decentralized security system network attached storage 
proceedings th ieee symposium mass storage systems technologies pages college park md march 

kevin fu 
group sharing random access cryptographic storage file systems 
massachusetts institute technology jun 

kevin fu frans kaashoek david mazieres 
fast secure distributed read file system 
proceedings th usenix symposium operating systems design implementation pages sand diego ca oct 

gregory ganger pradeep khosla mehmet michael garth goodson vijay craig soules john strunk jay wylie 
survivable storage systems 
darpa information survivability conference exposition anaheim ca june pages vol 
ieee 

garth gibson david nagle khalil amiri fay chang howard gobioff erik riedel david jim zelenka filesystems network attached secure disks cmu computer science technical report cmu cs 
july 

howard gobioff david nagle garth gibson embedded security network attached storage cmu scs technical report cmu cs june 

howard gobioff garth gibson doug tygar security network attached storage devices cmu scs technical report cmu cs 

eu jin goh hovav shacham dan boneh 
sirius securing remote untrusted storage 
proceedings internet society isoc network distributed systems security ndss symposium 
garth goodson jay wylie greg ganger mike reiter 
decentralized storage consistency versioning servers 
carnegie mellon university technical report cmu cs september 

garth goodson jay wylie gregory ganger michael reiter 
efficient consistency erasure coded data versioning servers 
carnegie mellon university technical report cmu cs april 

garth goodson jay wylie gregory ganger michael reiter 
protocol family versatile survivable storage infrastructures 
carnegie mellon university parallel data lab technical report cmu pdl december 

mahesh erik riedel ram swaminathan qian wang kevin fu 
plutus scalable secure file sharing untrusted storage 
conference file technology fast pp 
mar apr san francisco ca 
published usenix berkeley ca 

david mazieres michael kaminsky frans kaashoek 
separating key management file system security 
th acm symposium operating systems principles pages dec 

david mazieres dennis shasha building secure file systems byzantine storage 
proceedings annual symposium principles distributed computing pages monterey ca 

david mazieres dennis shasha 
don trust file server 
proceedings th workshop hot topics operating systems 

ethan miller darrell long william freeman benjamin reed 
strong security distributed file systems 
proceedings th ieee international performance computing communications conference pages phoenix april 
ieee 

ethan miller darrell long william freeman benjamin reed 
strong security network attached storage 
proceedings conference file storage technologies fast pages monterey ca january 

kumar reddy charles wright andrew erez zadok versatile user oriented versioning file system 
rd usenix conference file storage technologies fast 
adam pennington john strunk john griffin craig soules garth goodson greg ganger 
storage intrusion detection watching storage activity suspicious behavior 
th usenix security symposium washington aug 
available carnegie mellon university technical report cmu cs september 

benjamin reed edward randal burns darrell long 
authenticating network attached storage 
ieee micro january 

erik riedel mahesh ram swaminathan 
framework evaluating storage system security 
proceedings st conference file storage technologies monterey ca jan 

craig soules garth goodson john strunk gregory ganger metadata efficiency versioning file systems 
nd usenix conference file storage technologies san francisco ca mar apr 
john strunk garth goodson adam pennington craig soules gregory ganger 
intrusion detection diagnosis recovery self securing storage 
cmu scs technical report cmu cs may 

john strunk garth goodson michael craig soules gregory ganger self securing storage protecting data compromised systems 
th symposium operating system design implementation san diego ca oct 
theodore ming tao wong 
decentralized recovery survivable storage systems 
carnegie mellon school computer science ph dissertation cmu cs 
may 

charles wright jay dave erez zadok 
cryptographic file systems performance don know hurt 
ieee security storage workshop oct 

charles wright michael erez zadok 
secure convenient cryptographic file system 
usenix annual technical conference jun 

jay wylie mehmet vijay michael ken cory williams gregory ganger pradeep khosla 
selecting right data distribution scheme survivable storage system 
technical report cmu cs 
carnegie mellon university may 

jay wylie michael john strunk gregory ganger han pradeep khosla 
survivable information storage systems 
ieee computer august 

erez zadok 
stackable file systems security tool 
columbia university cs techreport cucs dec 

