distance sensitive bloom filters adam kirsch michael mitzenmacher division engineering applied sciences harvard university kirsch eecs harvard edu bloom filter space efficient data structure answers set membership queries chance false positive 
introduce problem designing generalizations bloom filters designed answer queries form close element closeness measured suitable metric 
data structure natural applications networking database applications 
demonstrate appropriate data structures designed locality sensitive hash functions building block specifically analyze performance natural scheme hamming metric 
bloom filter simple space efficient randomized data structure allows answer set membership queries small constant probability false positive 
bloom filters numerous uses particularly distributed databases networking see 
initiate new direction study bloom filters considering distance sensitive bloom filters answer approximate set membership queries sense metric space finite set parameters filter aims effectively distinguish inputs inputs constructions allow false positives false negatives 
comparison standard bloom filter corresponds case positive constant gives false positives 
establish framework constructing distance sensitive bloom filters metric admits locality sensitive hash family see :10.1.1.121.5868
potential benefits type data structure speed space provide quick answer performing comparisons entire set performing full nearest neighbor query require space original data 
example distributed setting client processes filter determine sending nearest neighbor query server worthwhile querying server filter indicates sufficiently close neighbor query request skipped 
course applications supported part nsf graduate research fellowship nsf ccr ccr 
supported part nsf ccr ccr 
assume familiarity bloom filters see background 
consequences tradeoffs false positives false negatives need considered carefully 
example possible application distance sensitive bloom filter consider large database identifies characteristics people large number fields 
vector characteristic values may want know person database matches large fraction characteristics 
imagine useful employment databases seeking candidate matching list attributes 
may wish provide distance sensitive bloom filter way advertising utility database providing little information actual content 
similarly data structure may useful criminal identification provide quick spot test suspect custody matches characteristics suspects unsolved crimes 
networking example spie system ip traceback represents packet headers seen small interval time bloom filter 
authors packet headers usually remain consistent packets travel routers 
distance sensitive bloom filter allow small changes packet header bits allowing bloom filter answer queries appropriately 
general example suppose collection sets set represented bloom filter 
example bloom filter represent packet traces sketch document 
relative hamming distance bloom filters size created hash functions measure similarity underlying sets see 
construct distance sensitive bloom filter top collection bloom filters attempt quickly easily answer questions form sets collection close query set general construction may prove useful distributed applications bloom filters 
reason pay special attention case relative hamming metric distant potentially exciting application distance sensitive bloom filters context dna sequences 
hope filter effectively handle queries chosen edit distance metric order answer questions form dna sequence close database unfortunately edit distance currently appears difficult adequately handle framework known hash function edit distance attempting connect edit distance hamming distance various reductions 
similar problems arise computer virus detection ad hoc variations bloom filters setting 
potential applications problem appear subject study 
manber wu considered problem handling single character error bloom filters context password security 
nearest neighbor problems including clearly related problem setting equivalent :10.1.1.121.5868
similar spirit property testing specifically introduced notion tolerant property testing task design structure input set allow quick subsequent testing closeness set algorithm test closeness object property 
main contributions 
introducing formal problem developing bloom filter variants effectively determine queries close item particular set 
developing connection problem locality sensitive hashing 
examining detail case relative hamming metric 
initial results strong hope 
example relative hamming metric distance sensitive bloom filter efficient effective constant log 
differentiate query strings differ strings constant fraction bits query strings share log fraction bits string prefer constant 
experiments suggest limitation distance sensitive bloom filters sufficiently useful practice 
leaves additional open problems 
obvious question bloom filters provide appropriate paradigm problem alternatives standard bloom filters received study 
major reasons initiating study bloom filters provide natural theoretical framework bloom filters widely accepted understood practitioners 
general approach section gives general approach designing distance sensitive bloom filters metric spaces admit locality sensitive hash family 
definition 
family sensitive respect metric space 
say family locality sensitive hash lsh family omitting meaning clear 
turns approach effectively expressed generalize definition 
definition 
metric space pl ph non increasing 
hash family called pl ph distance sensitive respect pl pr ph 
note definition really generalize definition locality sensitive hash family may set pl ph get pl ph distance sensitive hash family 
ready general distance sensitive bloom filter construction essentially standard partitioned bloom filter random hash functions replaced distance sensitive hash functions 
pl ph distance sensitive hash function fix elements array consisting disjoint bit arrays total km bits parameters 
weakly pairwise independent hash family 
initialize filter choose hk independently 
choose independently define gi hi 
define gi hi 
set bits zero 
set gi 
remains specify filter effectively determine query close standard bloom filter answer queries form simply check hash locations set bits hi set return case return 
setting consider close element case hash locations set 
consider set hash locations set specifically symmetry suffices consider number hash locations set 
easy see gi 
gi independent identically distributed bits bin qu qu bin denotes binomial distribution trials common success probability 
derive upper lower bounds qu 
proposition 
abuse notation define minx denote indicator function 
pl qu proof 
lower bound write ph nk qu pr pr max pr max pl pl step follows fact pl non increasing 
upper bound write qu pr pr pr 
pr pr ph pr pr pr ph pr ph qu pr ph ph nk real valued random variables write st stochastically dominates st pr pr 
corollary follows readily proposition 
corollary 
bin pl st st bin ph nk corollary suggests filter configured properly particularly close particularly far qu substantially larger qv 
binomial distributions reasonably concentrated expectations intuition suggests existence threshold depend particular strings follows particularly close particularly far effectively determine cases applies comparing example consider corresponds technique standard bloom filter 
specifically suppose filter queried parameters responds hash locations 
scheme corollary immediately tells pr filter incorrect pl pr filter incorrect ph setting simply example 
real application important assess relative severity false positives false negatives experimentally determine value optimizes tradeoff observed frequencies types errors 
continuing note bound false positive probability unfortunately weak general setting due fact probability particular hash location set occurrence event hi hi fixed bounded requires ph certainly preferably 
practice weakness may avoided depends set underlying metric particular ph smaller may able bound ph easily similar issues arise nearest neighbor problems issue clearly warrants study 
relative hamming metric give insight problem concrete focus special case alphabet relative hamming metric ui vi indicator function ui denote ith character 
loss generality suppose 
obvious alternative approach situation simply choose character locations independently uniformly random string characters sketch string 
check string distance input sketches checked see match slightly fraction locations 
schemes require checking characters find potential match may suitable applications aim spirit standard bloom filter constructions constant number character lookups data structure making approach unsuitable may useful practice 
give general analysis distance sensitive bloom filter show analysis yield performance tradeoffs nearly standard bloom filter 
show limiting goals appropriately analysis yields results suitable practice important case 
results simple experiments demonstrate potential practicability scheme 
recall parameters goal effectively distinguish strings call close call far define log km 
number items total size filter bits number hash functions number locations read hash function 
bits yield location hash table natural way 
specifically define hash family case follows choose choosing uniformly independently defining ui ui considering ui ui number binary 
essentially thing added level pairwise independent hashing 
precisely pairwise independent hash family define hash family follows choose choosing uniformly independently independently defining ui ui 
definitions construct filter described section 
easy verify pl ph distance sensitive hash function pl ph cz 
canonical example locality sensitive hash family 
proposition immediately yields result 
corollary 
consider qu qu section gave intuition results form allow properly configured filter effectively distinguish close far theorem formalizes intuition 
theorem 
fixed random choices constructing filter pr exp exp pr exp exp 
correct choice threshold practice may depend relative importance false positive false negatives choice allows provable statements give insight performance tradeoffs involved designing filter specifically bounds order magnitude exponent allow asymptotic analyses sections 
proof 
inequality 
corollary 
kqu pr pr pr exp azuma hoeffding inequality 
second inequality kqu kn second step follows corollary fifth step follows fact steps obvious 
log azuma hoeffding inequality 
pr pr pr asymptotic analysis bad news exp exp consider theorem suggests performance basic distance sensitive bloom filter construction 
experiments section show construction useful practical situations scale large numbers items 
comparison recall standard bloom filters desirable properties properly configured 
bits hidden constant small 

guarantee small constant error probability asymptotically practice 

answer query read small constant number bits array 
construction meet goals constant respect values parameters 
example take bounds theorem yield constant error probabilities constant number characters read case log 
similarly bounds theorem give constant error probabilities require hold constant 
way theorem allows establish desired goals restrict attention cases gap extremely large sufficiently large asymptotic analysis news loosen desired properties distance sensitive bloom filter obtain results appear useful practice 
specifically case relative hamming metric note total length strings original set log bits 
seek total length filter concerned long condition holds 
furthermore importantly consider cases constant log 
seek differentiate query strings differ strings constant fraction bits query strings share log fraction bits string restriction clearly limits scalability construction 
allows useful results thousands tens thousands 
larger handled quite small values quite large values 
convenience focus binary case case total number sampled characters logarithmic space filter log normal case random bit strings agree roughly entries log 
cases configure filter reasonable parameters 
gain insight guide experiments worth considering sample cases 
find 
number bits required giving improvement total number bits bits kilobytes 
similarly find space savings formally asymptotic relationship shows need grow polynomially 
little effort optimize constants 
proposition 
constant log log may choose log 
proof 
log 
log log log log log 
sufficiently large case log solving expression gives may choose log equivalently may choose log log log 
log log log 
log log log logn exp ln log ln exp exp facts 
may choose log equivalently log log log log log taylor series 
may choose log log holds assumption logn 
proposition tells distance sensitive bloom filters space efficient 
unfortunately certain reasonable settings length strings may need large order filter require space natural encoding set particularly 
example consider case characters alphabet bytes 
certainly small achieve performance log unaware current applications large may applications distance sensitive bloom filters extremely long strings dna analysis 
distance sensitive bloom filters reasonably binary strings room improvement dealing larger alphabets 
simple experiment experimental results demonstrating behavior basic distance sensitive bloom filter section special case 
experiments populate data set uniform random binary strings characters test distinguish strings near element strings far element hamming metric 
part test chosen represents worthwhile test case surely hope worthwhile scheme perform reasonably random inputs 
application terms setting described section distance sensitive bloom filter taken collection bloom filters random experiment roughly corresponds sets size overlapping elements similar results hold small overlaps sets allowed 
consider sets sizes 
take take 
value repeat experiment times 
generate independent close queries randomly selecting string flipping fraction bits testing filter returns false negative 
generate independent far queries randomly selecting string flipping fraction bits testing filter returns false positive implicit assumption query string far strings just chosen holds high probability 
compute observed false positive false negative rates averaging results queries 
results figures summary table 
figures axis terms number bits recall km reflects number hash functions 
abrupt jumps false positive rate correspond values threshold value increases 
point naturally harder false positive occur easier false negative occur 
figures table indicate successfully fewer bits require constant number bit lookups data structure array 
observed false positive negative rates quite reasonable particular false negative rate falls rapidly false negatives damaging applications 
emphasize experimental results appear give modest size improvements chosen small value item size bits 
larger values results entirely ratio shrink 
observed false positive rate observed false negative rate observed false positive false negative rates 
observed false positive rate observed false negative rate observed false positive false negative rates 

fp rate fn rate 
fp rate fn rate table number sampled bits observed false positive false negative rates corresponding storage requirements various values strongly believe efficient distance sensitive bloom filters find significant applications 
initial suggests distance sensitive bloom filters constructed parameters suitable practice improvements appear possible 
suggest number open questions general approach allow constant linear number bits constant number hash functions constant false positive false negative probabilities 
simple natural conditions place set natural metrics yield stronger bounds 
natural information theoretic bounds number bits required structures 
equivalent bounds setting 
fix metric relative hamming metric 
closeness edit distance handled data structures type 
datar indyk 
locality sensitive hashing stable distributions 
appear nearest neighbor methods learning vision theory practice mit press 
broder mitzenmacher 
network applications bloom filters survey 
internet mathematics 
cormode muthukrishnan 
improved data stream summaries count min sketch applications 
dimacs technical report 
jain dahlin tewari 
bloom filters refine web search results 
proc 
eighth international workshop web databases webdb jun 
datar indyk 
locality sensitive hashing scheme stable distributions 
proc 
th acm symposium computational geometry pp 

gionis indyk motwani 
similarity search high dimensions hashing 
proc 
th international conference large data bases pp 

goldreich goldwasser ron 
property testing connection learning approximation 
jacm 
indyk 
approximate nearest neighbor edit distance product metrics 
proceedings th annual acm siam symposium discrete algorithms pp 

kirsch mitzenmacher 
building better bloom filter 
harvard university computer science technical report tr 
ftp ftp deas harvard edu techreports tr pdf 
manber wu 
algorithm approximate membership checking applications password security 
information processing letters 
mitzenmacher 
compressed bloom filters 
ieee acm transactions networking 
mitzenmacher upfal 
probability computing randomized algorithms probabilistic analysis 
cambridge university press 
ostrovsky rabani 
low distortion embeddings edit distance 
stoc 
pagh pagh srinivas rao 
optimal bloom filter replacement 
proceedings th annual acm siam symposium discrete algorithms pp 

parnas ron rubinfeld 
tolerant property testing distance approximation 
eccc report 
rubinfeld sudan 
robust characterization polynomials applications program testing 
siam journal computing 
shanmugasundaram memon 
payload attribution hierarchical bloom filters 
proc 
th acm conference computer communications security pp 

snoeren partridge sanchez jones schwartz kent strayer 
single packet ip traceback 
ieee acm transactions networking pp 
december 

