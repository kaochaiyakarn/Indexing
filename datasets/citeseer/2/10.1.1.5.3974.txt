conference expo th international conference linux clusters hpc revolution 
la ur design implementation evaluation mpiblast aaron lucas carey wu chun feng dept computer science university wisconsin madison wi usa cs wisc edu center developmental genetics suny stony brook usa odd bio sunysb edu advanced computing laboratory los alamos national laboratory usa feng lanl gov 
mpiblast open source parallelization blast achieves superlinear speed segmenting blast database having node computational cluster search unique portion database 
database segmentation permits node search smaller portion database eliminating disk vastly improving blast performance 
database segmentation create heavy communication demands blast users take advantage low cost efficient linux cluster architectures beowulf 
addition presenting software architecture mpiblast detailed performance analysis mpiblast demonstrate scalability 
blast family sequence database search algorithms serves foundation biological research 
blast algorithms search similarities short query sequence large infrequently changing database dna amino acid sequences :10.1.1.17.9507
newly discovered sequences commonly searched database known dna amino acid sequences 
similarities new sequence gene known function help identify function new sequence 
uses blast searches include phylogenetic profiling pairwise genome alignment 
unfortunately traditional approaches sequence homology searches blast proven slow keep current rate sequence acquisition 
blast computationally intensive embarrassingly parallel approaches parallelizing algorithms investigated 
open source parallelization blast segments distributes blast database cluster nodes node searches unique portion database 
database segmentation blast offers primary advantages parallel blast algorithms 
database segmentation eliminate high overhead disk sizes databases larger core memory computers forcing blast searches page disk 
database segmentation permits node search smaller portion database reducing eliminating extraneous disk vastly improving blast performance 
sequence databases doubling size year problem extraneous disk expected persist 
adverse effects disk significant blast searches database segmentation exhibit super linear speedup versus searches single node 
second database segmentation mpiblast produce heavy nodes allowing continue achieving super linear speedup hundreds nodes 
consequently scientists blast database segmentation take advantage low cost highly efficient linux clusters green destiny mpiblast open source parallelization blast uses message passing interface version implement database segmentation allowing diverse system architectures 
mpiblast designed run clusters job scheduling software pbs portable batch system 
environments adapts resource changes dynamically re distributing database fragments 
blast algorithm blast searches query sequence consisting nucleotides dna peptides amino acids database nucleotide peptide sequences 
peptide sequences result ribosomal translation nucleotides comparisons nucleotide sequences peptide sequences 
blast provides functionality comparing possible combinations query database sequence types translating sequences fly 
table lists names refer searches possible combination query versus database type 
table 
blast search types search name query type database type translation blastn nucleotide nucleotide peptide nucleotide database nucleotide peptide query peptide peptide nucleotide nucleotide query database algorithms type search operate nearly identically 
blast search heuristic indexes query target database sequence words chosen size nucleotides residues default 
searches matching word pairs hits score extends match diagonal 
gapped blast consists modifications previous algorithm result increased sensitivity decreased execution time 
gapped blast referred simply blast moves sequences hits score letters 
ungapped extension performed second hit generating high scoring segment pair hsp 
hsp score exceeds second cutoff gapped extension triggered simultaneously forward backward 
standard blast output consists set local gapped alignments query sequence alignment score alignment query database sequences measure likelihood alignment random match query database value 
related blast hardware parallelization parallelization hardware level takes place sequence alignment 
techniques capable parallelizing comparison single query sequence single database entry require custom hardware greater degree parallelization symmetric multi processor smp symmetric multi threaded smt systems 
hardware blast accelerator reported singh 
commercialized fpga accelerator called blast hardware accelerator 
query segmentation query segmentation splits set query sequences node cluster cpu smp system searches fraction query sequences 
doing blast searches execute parallel different queries 
blast searches query segmentation cluster typically replicate entire database node local storage system 
database larger core memory query segmented searches suffer adverse effects disk traditional blast 
database fits core memory query segmentation achieve near linear scalability blast search types smp architectures 
database segmentation database segmentation independent segments database searched processor node results collated single output file 
implementations database segmentation exist ncbi blast 
ncbi blast implements database segmentation multithreading search processor smp system assigned distinct portion database 
database segmentation implemented closed source commercial product called 
provides database segmentation distribution mechanism explicitly designed networks workstations 
proprietary scheduling load balancing software dynamically adapts current cluster environment 
proprietary implementation results linear speed see www com products overview html 
furthermore survey bioinformatics linux clusters see bioinformatics org october html shows sample population uses distribution primarily cost proprietary nature difficult integrate bioinformatics codes 
implementation database segmentation released ftp saf bio caltech edu pub software tar 
composed set scripts operate sun grid engine pvm environment 
aside requiring sge pvm environment differs mpiblast directly integrated ncbi toolkit explicitly provide load balancing mechanism 
mpiblast algorithm mpiblast algorithm consists primary steps 
database segmented placed shared storage device 
second mpiblast queries run node 
node database fragment search copies fragment shared storage 
fragment assignments node determined algorithm minimizes number fragment copies search 
formatting querying database database formatting done wrapper standard ncbi called 
formulates correct command line arguments cause ncbi format divide database small fragments approximately equal size 
additional command line parameters allow user specify number fragments fragment size 
successful completion formatted fragments placed shared storage 
querying database accomplished directly executing blast algorithm implemented ncbi development library available ftp ftp ncbi nih gov toolbox ncbi tools 
startup worker process reports master process database fragments local storage 
master process rank reads query sequences disk broadcasts processes communication group 
query broadcast completed process reports master idle 
master receiving idle message assigns idle worker database fragment search copy 
worker copies algorithm mpiblast master results current set blast results 
set database fragments set database fragments unassigned set unassigned database fragments 
set participating workers di set workers fragment fi local storage distributed 
set fragment require ensure unassigned results broadcast queries workers receive message worker wj message state request unassigned send worker wj state search comp send worker wj state search message fragment request find fi distributed di fi unassigned di add wj di remove fi unassigned send fragment assignment fi worker wj message set search results fragment fi merge message results remove fi print results searches assigned fragment reports master idle complete 
process repeated database fragments searched 
master process uses greedy algorithm determine fragments assign worker 
idle worker fragments worker local storage worker assigned search unique fragment 
worker unique fragment worker assigned fragment exists smallest number workers 
idle worker fragments told copy fragment existing fewest workers 
set fragments currently copied tracked master prevent duplicate copy assignments different workers 
algorithm mpiblast worker queries receive queries master receive state master search comp receive fragment assignment master local storage copy local storage results blast queries send results master receive state master worker completes fragment search reports results master 
master merges results worker sorts score 
results received written user specified output file blast output functions ncbi development library 
approach generating merged results permits mpiblast directly produce results format supported ncbi blast including xml html tab delimited text asn 
mpiblast performance ncbi blast mpiblast benchmarked systems effort characterize performance scalability 
performance ncbi blast database larger core memory demonstrating significant decrease performance caused additional disk show mpiblast database segmenting technique achieves superlinear speed multiple nodes database larger core memory single node 
continue assessing scalability mpiblast nodes 
additional running time incurred various components mpiblast algorithm scales 
execution time ncbi blast execution time average blocks read database size mbytes fig 

left performance blastn search ncbi blast run system mb ram 
database size grows larger core system memory total running time increases rapidly 
sharp increase disk observed database large longer fit memory 
benchmarking methods carefully designed accurately reflect typical usage pattern molecular biologists 
benchmarking methods benchmarking blast search performance decisions type search perform significantly influence timing results 
factors query length number queries total database size length database entries sequence similarity query database entries affect amount time consumed blast algorithm 
factor carefully considered benchmarks accurately reflect typical blast usage patterns molecular biologists 
perform benchmarks model typical usage blast integrated high throughput genome sequencing annotation pipeline 
context blast query predicted gene newly sequenced organism 
blast search results assist human annotators determining biological role predicted gene 
organisms thousands genes large number search queries generated genome sequencing annotation projects demand heavy computation 
chosen model scenario sequencing annotation projects benefit mpiblast improved blast performance 
benchmarks described sections utilize predicted genes newly sequenced bacterial genome blast queries 
query gene lengths approximately exponentially distributed mean base pairs standard deviation 
database sequences taken average blocks read genbank nt database large public repository non redundant nucleotide sequences 
ignoring small number outliers length greater bp length nt database entries reasonably approximated exponential distribution 
low memory performance ncbi blast benchmarked system mb memory increasingly large database sizes determine effect databases fit core memory 
run measured total running time blastn search set query sequences larger database 
utilized linux bsd process accounting facilities collect system activity statistics 
shows total blast run times alongside average blocks read second disk database size tested 
formatted blast databases compressed versions raw sequence databases 
formatted nucleotide database consumes approximately space text file containing sequences 
database size exceeds total system memory size blast running times average blocks read second increase sharply 
operating system cache entire database blast wait re read disk processing query sequence 
ncbi blast performance mpiblast suffers confronted low memory conditions 
mpiblast effectively uses aggregate memory worker nodes database grow larger causing extra disk speedup linear speedup mpiblast green destiny number processors fig 

speedup mpiblast green destiny 
kb query sequences searched gb database 
size formatted database approximately gb larger mb core memory node 
search causes heavy disk single node 
get overview scalability database larger single node core memory benchmarked mpiblast green destiny 
green destiny node beowulf cluster transmeta crusoe processor 
compute node consists mhz tm mb ram mb ethernet gb hard drive running linux 
shows mpiblast performance measurements taken green destiny 
fragments gb uncompressed database pre distributed worker short query executed prime buffer cache 
priming cache hope simulate case cluster processing blast queries quick succession 
timed run kb predicted gene sequences 
single worker search consumed hours workers completed search minutes 
relative single worker case mpiblast achieved super linear speedup cases tested 
number workers increases efficiency mpiblast decreases 
time go 
decrease efficiency observed scaling mpiblast nodes leads ask mpiblast doing extra time mpiblast running time decomposed primary components mpi mpiblast initialization database fragment copying time blast search time communication time result merging printing time 
order determine component contributes total execution time profiled mpiblast mpe library collect wall clock timing statistics gprof measure cpu usage 
measurements taken systems located galaxy cluster suny stony brook 
node contains dual mhz pentium iii processors gb pc sdram mb ethernet connected networks big iron switch gb hard drive 
gigabytes nt database formatted fragments 
run measured components execution time workers set database fragments kb query predicted orf sequences 
shows contribution component total running time mpiblast 
measurements conclude small numbers workers execution time dominated blast searches 
workers utilized time spent formatting writing results grows relative total execution time 
communication consistently accounts total execution time 
workers may finish search phase master waits workers completed formatting results 
total execution time dependent longest running worker 
bar shows execution time components longest running worker addition time spent formatting master order accurately reflect components total execution time 
fig 

time spent mpiblast 
bar composite shows time spent longest running worker node addition time spent merging results master node 
total execution time largely dominated blast search time 
measurements discussed taken searching fragment database variable number workers 
search single worker fragments assigned worker 
searching workers worker searches single fragment 
searching number workers divisor number fragments imbalance number fragments searched worker occurs 
scenario workers complete early workers search remaining fragments 
database fragments may take longer search query sequence similar fragment 
result formatting proceeds workers completed searching imbalance ratio workers fragments result execution time observed balanced case 
potential solution problems imbalance worker fragment ratio variable fragment search times segmenting database large number small fragments 
expectation small fragment get searched quickly 
case imbalance workers search additional fragment delay result formatting 
case highly variable fragment search times large number fragments allow mpiblast balance load workers assigning additional database fragments workers complete fragment searches 
tradeoff exists segmenting database small fragments significant overhead searching extra fragments 
shows total execution time mpiblast searching database broken variable number fragments 
searching fragment versus fragment database incurs additional wall clock time 
time required format output results increases number mpiblast execution time number processors db fragments db fragments db fragments db fragments db fragments db fragments db fragments db fragments fig 

overhead performing mpiblast search increases number database fragments 
measurement running time axis taken formatting identical database varying number fragments 
unusual numbers database fragments arise ncbi segmentation method tries guarantee maximum fragment size particular number fragments 
fragments independent number processors 
shows measurements result formatting output component times mpiblast searching database broken variable number fragments 
measurements suggest varying number database fragments mpiblast user trade additional cpu overhead wall clock execution time variability execution time different queries 
increasing number processors reliably shortens execution time may require increasing number database fragments increases cost serial result format output component execution time 
optimal balance number processors number fragments depend priorities individual user 
important note cases fragment copy time negligible non existent database distributed previous search 
directions mpiblast algorithms 
mpiblast provide transparent fault tolerance node goes 
transparent fault tolerance mechanism easily integrated current mpiblast algorithm 
node periodically send message format output results time number processors db fragments db fragments db fragments db fragments db fragments db fragments db fragments db fragments fig 

overhead formatting outputting results mpiblast search increases number database fragments 
time spent formatting outputting results independent number processors serial component algorithm executed master node 
master alive searching 
master receive message particular node timeout occurs node reassigned node 
fragment searching continue normal node 
second potential improvement mpiblast algorithm integration database updates 
implement scheme node check central repository versioning information database fragments 
fragment updated node responsible processing fragment retrieve updated copy fragment 
master node check database new fragments searched 
third improvement mpiblast algorithm providing additional parallelization query segmentation 
scheduler determine optimal number nodes particular set queries 
large query sets split subsets nodes subset searches entire database 
predicting optimal division query set may difficult due high variability search time different queries 
mpiblast spends majority time executing ncbi toolbox code improvements toolbox influence performance 
measurements indicate high overhead additional database fragments 
profiling reduce fragment overhead allow mpi blast efficiently load balance search reduce total search time 
described mpiblast open source mpi implementation database segmentation parallel blast searches 
database segmentation yields near linear speedup blast cases super linear speedup low memory conditions 
mpiblast directly interfaces ncbi development library provide blast users interface output formats identical ncbi blast 
analyzing components mpiblast running time shows bulk execution time spent performing blast searches 
communication consumes relatively small portion time 
merging printing blast results represents relatively small amount total execution time 
findings indicate mpiblast scales nodes 
authors eric adam los alamos national laboratory support insightful comments 
referees suggestions 
supported department energy lanl contract eng available technical report la ur 
addition aaron supported part nlm training lm 

altschul gish miller myers lipman 
basic local alignment search tool 
journal molecular biology 

altschul madden schaffer zhang zhang miller lipman 
gapped blast psi blast new generation protein database search programs 
nucleic acids res 

sherman weston willard wing 
parallel implementation blast process integration architecture 
ipdps workshops april 

braun roberts 
parallelization local blast service workstation clusters 
generation computer systems april 

camp 
high throughput blast september 

chen willard sherman 
benchmark performance analysis ibm server cluster 

chi riedl 
efficiency shared memory multiprocessors genetic sequence similarity search algorithm 

feng warren 
beowulf cost effective alternative traditional 
proceedings ieee cluster 

iii prasad blattner 
asap systematic annotation package community analysis genomes 
nucleic acids research january 


large scale sequence comparison package 
computer applications biosciences april 

gropp lusk skjellum 
mpi portable parallel programming message passing interface 

kent 
blast alignment tool 
genome research april 

braun roberts 
complementary approaches parallelization local blast service workstation clusters 
lecture notes computer science 

hoover 
personal communication august 

singh chi hoffman tell white altschul erickson 
dynamically reconfigurable systolic array analysis 

warren feng 
high density computing node beowulf cubic meter 
proceedings sc 
