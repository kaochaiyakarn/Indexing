mic th metaheuristics international conference reusable metaheuristic software components application software generators andreas fink stefan vo department information management information systems braunschweig university technology abt jerusalem str 
braunschweig germany email fink stefan voss tu bs de strong arguments favor reusable software components metaheuristics 
mature scientific knowledge aimed solve practical problems viewed technology transformation point view 
consider main metaheuristic concepts sufficiently understood strive facilitate efficient application metaheuristics suitable means 
systems impact means need practice easy application systems incorporate results basic research 
deal issue efficiently building systems bridge gap research practice 
research point view software reuse may provide way fair comparison different heuristics controlled unbiased experiments conforms criticism discussed literature 
metaheuristics definition algorithmic concepts widely generic respect type problem 
algorithms generally applied form software adaptable metaheuristic software components natural means incorporate respective scientific knowledge 
built heuristic optimization framework implemented provides adaptable components incorporate different metaheuristics architectural description collaboration components problem specific complements 
followed actively pursue similar research projects focus primarily metaheuristics local search paradigm including tabu search 
hand approaches design domain specific modeling languages local search algorithm partly constraint programming 
adaptation metaheuristics specific type problem may concern static definition problem specific concepts solution space neighborhood structure tuning run time parameters calibration 
aspect designing robust auto adaptive algorithms important partly solved research topic may hidden user 
requirement adapt metaheuristics specific problem serious obstacle easy effective application metaheuristics 
free lunch theorem assume general problem solver accordingly universal software implementation effective method types problems 
implies provide implementation mechanisms problem specific adaptations facilitate effective application reusable metaheuristic software components 
extended briefly describe approach build framework reusable metaheuristic software components 
scope framework comprises metaheuristic bunch software packages evolutionary algorithms 
porto portugal july mic th metaheuristics international conference concepts iterated local search simulated annealing variations different kinds tabu search methods static strict reactive providing option flexibly define tabu criteria account information search history attributes performed moves traversed solutions evolutionary algorithms candidate lists neighborhood depth variations pilot method 
primary design objectives run time efficiency high degree flexibility respect adaptations extensions 
simplify application software generator graphical user interface supports adaptation process 
generator encapsulates framework architecture reduces need understand design framework 
claim validity free lunch theorem problems practice usually embrace distinctive characteristics user generally supplement adapt generated implementation defined adaptation points exploit problem specific knowledge 
framework design architecture software system specifies collaboration system elements 
architecture framework defines reusable design systems domain 
framework provides adaptable software components typically accordance object oriented paradigm encapsulate common domain abstractions 
contrary ordinary class library kind toolkit modules mainly usable independent framework specifies control flow system 
respect variability different applications domain frameworks provide variation points adaptation extension 
instantiate framework particular application generally complete certain parts implementation kind interface definitions 
aims natural representation variation points identified analysis metaheuristics 
metaheuristics generic algorithms variable respect problem specific concepts structures follow generic programming paradigm generic algorithm written abstracting algorithms specific types data structures apply arguments types general possible generic algorithm code requirements types 
uses genericity primary mechanism components adaptable 
common behavior metaheuristics factored grouped templates applying static type variation 
approach leads generic metaheuristic components parameterized mainly problem specific concepts solution space neighborhood structure tabu criteria 
generic components implemented template classes functions enables achieving abstraction loss efficiency 
templates type parameters 
architecture defines properties interface syntactic semantic requirements satisfied argument types 
example steepest descent greedy local search generic regarding solution space neighborhood accordingly corresponding type parameters may lead template 
streamline parameterization metaheuristic templates group type parameters called configuration classes 
configuration class encapsulates variation points fixing 
example may define struct typedef typedef bv instantiate metaheuristic component 
case principal effectiveness framework regarding competitive results demonstrated different types problems 
requirement understand architecture frameworks able may regarded main obstacle wide spread frameworks 
porto portugal july mic th metaheuristics international conference define solution space represented class encapsulates solutions multi constrained knapsack problem apply class bv represents classical bit flip neighborhood binary vectors 
provides reusable classes common solution spaces binary vectors permutations combined assignment sequencing neighborhood structures bit flip shift swap moves 
classes unchanged neighborhoods reused deriving new classes customize behavior defining specific objective function 
cases predefined components fits actual problem implementation efforts applying various metaheuristics minor user essentially needs implement objective function special class inherits data structure behavior appropriate reusable class 
metaheuristic templates set type parameters refer problem specific concepts strategy concepts 
example local search strategies may differ regarding rule select neighbors moves 
hierarchically separated configuration regarding metaheuristic concepts 
common specializations general metaheuristic components pre defined configuration classes pass problem specific definitions add strategy definitions 
exemplified definition template class struct typedef typedef typename typedef typename may customize general local search frame instantiate metaheuristic object shown example new search advantages design provides concise declarative way system specification decreases conceptual gap program code domain concepts known achieving high intentionality simplifies managing variants component 
generator software generator builds customized applications basis high level specifications 
declarative specifications transformed specialized code 
generator represents joint general model may capture framework architectures 
specific frameworks modeled configuration language 
basis design defined framework architecture configuration language metaheuristic components static dynamic parameters problem specific components interdependencies requirements metaheuristic components regarding problem specific components associations components source code templates substitution rules regarding actual configuration 
porto portugal july mic th metaheuristics international conference illustration user interface generator 
generator implemented java provides graphical user interface see 
example shows configuration iterated local search component discussed section 
generator provides intuitive interface configure framework regarding intended application metaheuristic type problem 
eventually generator produces dependence specified configuration customized source code holes filled user 
simple cases manual programming restricted coding objective function 
accordance argumentation section may general considerable parts implementation regarding complex neighborhood structures 
carvalho ribeiro 
object oriented framework local search heuristics 
proceedings th conference technology object oriented languages systems tools usa pages 
ieee piscataway 
barr golden kelly resende stewart 
designing reporting computational experiments heuristic methods 
journal heuristics 
biskup 
entwicklung einer auf den von che software generator 
diploma thesis braunschweig university technology 
bosch bengtsson 
framework problems experiences 
schmidt johnson editors building application frameworks object oriented foundations framework design pages 
wiley chichester 
culberson 
futility blind search algorithmic view free lunch 
evolutionary computation 
czarnecki eisenecker 
generative programming methods tools applications 
addison wesley reading 
porto portugal july mic th metaheuristics international conference de backer shaw 
object model meta heuristic search constraint programming 
cp ai workshop integration ai techniques constraint programming combinatorial optimization problems 
di schaerf 
object oriented framework flexible design local search algorithms 
technical report rr universita degli studi di udine 
fink 
software bei der sung von mittels meta 
shaker aachen 
fink vo 
solving general ring network design problems metaheuristics 
laguna gonz lez editors computing tools modeling optimization simulation pages 
kluwer boston 
fink vo 
applications modern heuristic search methods pattern sequencing problems 
computers operations research 
fink vo 
generic metaheuristics application industrial engineering problems 
computers industrial engineering 
fink vo 
solving continuous flow shop scheduling problem metaheuristics 
technical report braunschweig university technology 
tter beasley 
hitch guide evolutionary computation faq news comp ai genetic 
surf de uu net encore www 
issue september 
hooker 
needed empirical science algorithms 
operations research 
jones 

www sys ac uk msj 
laburthe caseau 
salsa language search algorithms 
maher puget editors principles practice constraint programming cp lecture notes computer science pages 
springer berlin 
michel van hentenryck 
localizer modeling language local search 
informs journal computing 
michel van hentenryck 
localizer open library local search 
technical report cs computer science department brown university 
musser stepanov 
algorithm oriented generic libraries 
software practice experience 
nievergelt 
complexity algorithms programs systems shifting focus 
journal symbolic computation 
wolpert macready 
free lunch theorems optimization 
ieee transactions evolutionary computation 
woodruff 
class library heuristic search optimization 
informs computer science technical section newsletter 
porto portugal july 
