dissecting bittorrent months torrent lifetime keller biersack felber garc institut eurecom route des cr tes sophia antipolis france felber eurecom fr 
popular content software updates requested large number users 
traditionally satisfy large number requests server farms mirroring expensive 
inexpensive alternative peer peer replication systems users retrieve file act simultaneously clients servers 
study bittorrent new popular peerto peer application allows distribution large contents large set hosts 
analysis bittorrent measurements collected months long period involved thousands peers 
assess performance algorithms bittorrent metrics 
indicate bittorrent realistic inexpensive alternative classical server content distribution 
bittorrent file distribution system peer peer paradigm 
bittorrent quickly emerged viable popular alternative file mirroring distribution large content numerous web sites host active torrents net 
conducted comprehensive analysis bittorrent assess performance 
sources information 
obtained tracker log arguably popular torrent bittorrent session far gb linux redhat distribution months activity 
log contains statistics clients interestingly clearly exhibits initial flash crowd period clients initiating download days 
source information allows estimate global efficiency bittorrent macroscopic behavior clients scalability application flash crowd conditions 
second source information consists data collected modified client participated torrent downloading redhat 
second log allows study direct interactions clients 
remaining organized follows 
section main features bittorrent 
section review related 
section results obtained log section obtained client log 
conclude directions section 
bittorrent bittorrent application capitalizes resources access bandwidth disk storage peer nodes efficiently distribute large contents 
separate torrent file distributed 
known applications gnutella kazaa strive quickly locate hosts hold file sole objective bittorrent quickly replicate single large file set clients 
challenge maximize speed replication 
torrent consists central component called tracker currently active peers 
bittorrent distinguishes kinds peers depending download status clients complete copy file continue serve peers called seeds clients downloading file called leechers 
tracker centralized component system 
tracker involved actual distribution file keeps meta information peers currently active acts rendez vous point clients torrent 
user joins existing torrent downloading torrent file usually web server contains ip address tracker 
initiate new torrent needs web server allows discover tracker initial seed complete copy file 
update tracker global view system active clients periodically minutes report state tracker joining leaving torrent 
joining torrent new client receives tracker list active peers connect 
typically tracker provides peers chosen random active peers client seeks maintain connections peers 
client fails maintain connections tracker obtain additional peers 
set peers client connected called peer set 
clients involved torrent cooperate replicate file swarming techniques file broken equal size chunks typically kb clients peer set exchange chunks 
swarming technique allows implementation parallel download different chunks simultaneously downloaded different clients 
time client obtains new chunk informs peers connected 
interactions clients primarily guided principles 
peer preferentially sends data peers reciprocally sent data 
tit tat strategy encourage cooperation ban free riding 
second peer limits number peers served simultaneously peers continuously looks best downloaders terms rate achieved seed best 
bittorrent implements principles unchoke policy 
temporary refusal upload peer 
connection closed party upload data 
services best peers 
seconds peer re evaluates upload rates peers transfer data 
peers uploading necessarily reciprocal second peers synchronized 
peer current top smallest upload rate peer offered better upload rate 
rounds seconds peer performs optimistic unchoke unchokes peer regardless upload rate offered 
allows discover peers offer better service upload rate 
seeds essentially apply strategy solely download rates 
seeds serve peers download rate highest 
important feature bittorrent chunk selection algorithm 
main objective consistently maximize entropy chunk torrent 
heuristic achieve goal peer seeks upload chunk duplicated chunks needs peer set keep mind peers local view torrent 
policy called rarest policy 
exists exception rarest policy peer joins torrent chunks 
peer needs quickly obtain chunk optimistic ask rarest chunk peers hold chunk 
newcomer uses random policy chunk turns rarest policy ones 
previous approaches replicate contents large set clients classified client side server side approaches 
client side approach cache contents downloaded clients network 
symmetric approach server side transparently redirect clients set mirror sites run content provider akamai 
peer peer paradigm applied obtain client side server side solutions 
server side finds proposals overlay nodes dynamically organize form tree maximum throughput 
designed efficiently replicate large contents set wellknown stable overlay nodes 
client side finds proposals build application layer multicast services 
solution similar bittorrent 
aims enforcing cooperation clients alleviate load web server primary source content 
algorithms complex ones bittorrent require estimate number peers network 
expected improvements bittorrent load topology server equivalent bittorrent tracker primary instance peer offering upload rate decided connection just second reevaluation side top list seconds received service 
source original seed back algorithm 
results promising able outperform bittorrent controlled environment 
actual performance case flash crowds large number clients unknown 
tracker log analysis tracker log covers period months april august 
corresponding torrent content gb linux redhat distribution 
clients participated torrent peak clients days see figures 
days clearly exhibits flash crowd 
clients periodically report tracker current state amount bytes uploaded downloaded tracker log allows observe global evolution file replication process peers 
number peers time peers seeds leechers complete trace global performance number peers time peers seeds leechers zoom days fig 

number active peers time analyzing tracker log finding bittorrent clients altruistic sense actively send data clients leechers seeds 
altruism enforced download phase tit tat policy selfish client served low priority 
seed peers remain connected half hours average 
social behavior explained factors client explicitly terminated completion download happen user computer overnight second content replicated perfectly legal user particular incentive quickly disconnect torrent 
fact presence seeds key feature greatly enhances upload capacity torrent ability scale large client populations 
months period covered log file observed seeds contributed twice amount data sent leechers see 
observed proportion seeds consistently higher peak days see 
clearly illustrates bittorrent sustain high flash crowd quickly creates new seeds 
put differently situations new peers arrive high rate resources system divided evenly clients result processor sharing queue overload peers completing download 
contrary older peers higher priority hold chunks younger peers gives chance complete download seeds newcomers 
obviously strategy benefits cooperation users clients stay seeds long periods time 
cumulative uploaded bytes uploaded seeds uploaded leechers time fig 

volumes uploaded seeds leechers individual session performance percentage time leechers seeds fig 

proportions seeds leechers fundamental performance metric bittorrent average download rate leechers 
months period covered tracker log observed average download rate consistently kb impressive indicates bittorrent clients connectivity adsl surprising total size file 
bittorrent exhibits scalability initial flash crowd average download rate close kb aggregate download rate simultaneously active clients mb bittorrent able capitalize bandwidth system hosts achieve high aggregate throughput 
final objective bittorrent replicate content peers torrent 
need know peers eventually completed download fraction bytes peers complete transfer downloaded 
bittorrent allows users suspend resume download time peer complete download sessions 
tracker log session id identifies session hash ip address host current time ip address host seen tracker 
identifying single session downloads easy session id reconstruct downloads assumed ip address host change session 
nats port numbers disambiguate connexions ip addresses assumption hold case 
course hosts firewall simultaneously participate torrent difficult disambiguate 
addition peer provides amount bytes downloaded reports sent minutes mated sessions ip amount bytes report session close amount bytes report second session 
values necessarily instance user disconnected bittorrent client improperly results sending disconnection report current amount bytes downloaded 
set sessions form multi sessions download download file completed session average multi session download consists sessions 
observed sessions started file downloaded 
case user kind rejoin torrent completion download act seed 
categorize sessions categories single session download multi session download seed sessions session complete incomplete downloads 
provide statistics sessions table 
type number total total 






session session rate rate duration sessions tb tb mb mb kb kb hours single session downloads 
multi session downloads incomplete downloads seed sessions total table 
sessions types characteristics table indicates sessions part transfer eventually completed 
sessions complete transfer represent total amount downloaded bytes 
incomplete sessions uploaded bytes downloaded 
difficult assess reason abortion transfer 
user eventually decides interested file poor download performance 
investigate issue look statistics durations volumes sessions start file days 
classify sessions categories denoted completed non completed 
completed category corresponds single session downloads defined previously non completed category corresponds transfers complete session transfers eventually complete 
complementary cumulative distribution functions download volumes session durations completed non completed sessions 
observe non completed sessions remain seconds torrent seconds retrieve file 
non completed sessions short little data downloaded 
time days sessions completed total time duration downloaded days sessions volume downloaded bytes download volume fig 

single sessions statistics sessions seen days focus performance achieved single session downloads 
average download rate sessions close mb trace larger download rate averaged sessions kb 
average download time single session download seconds 
values reveal high variability download rates achieved sessions achieved download rate mb average download time gb mb seconds 
confirmed distribution download throughputs see clearly exhibits peak kb typical value adsl lines value significantly smaller mean 
probability throughput mean kbps throughputs kbps global throughput distribution geographical analysis thr nl throughput kbps throughput distribution cluster fig 

throughputs single session downloads tracker log provides ip addresses clients 
addresses www caida org tools utilities obtain estimation origin country peers participated torrent 
estimation imprecise maintained 
able obtain information hosts 
table indicate top countries days weeks complete trace 
observe set countries ranking consistently time scales 
clients clients europe represented netherlands 
netherlands hosts originate ripe net information provided acts regional internet registry europe middle east africa part asia 
guess peers spread europe 
countries week weeks complete trace united states netherlands europe australia canada total hosts table 
geographical origins peers investigate relative performance clusters identified nl au cn 
consider peers complete download single session 
peers initial peers clusters cluster nl au cm 
plot distribution download throughputs achieved peers nl clusters au cn clusters highly similar cluster depicted sake clarity 
reveals download throughput hosts nl cluster significantly smaller throughput hosts cluster mass right side curve 
indicate clients general better access links europe 
client log analysis better observe individual behavior bittorrent peer run instrumented client mb campus network access link 
client joined torrent approximatively middle months period far initial flash crowd 
experienced transfer time approximately seconds lower average download times previously mentioned client remained connected seed hours 
client logged detailed information upload download individual chunk 
represent number peers client trading 
time client knows peers addresses provided tracker 
continuously discover new peers peers contacted download time seconds observe sudden decrease number peers probably seeds connected closed connection soon completed download 
download stay connected seed leechers served 
number peers number connected peers evolution time fig 

number peers download uploaded bytes cumulative download upload evolution download upload time fig 

complete torrent uploaded bytes cumulative download upload evolution download upload time fig 

minutes download figures show amount bytes downloaded uploaded respect time complete trace minutes trace respectively 
figures draw warm period seconds obtain chunks 
soon client obtained chunks able start uploading peers 
means rarest policy works client find interested chunks 
download upload rates positively correlated indicates tit tat policy works 
indicates find peers interested chunks peers download chunks 
observe periods curves flat indicating client stalled 
way peer sets built old new peers mixed positive impact efficiency bittorrent 
torrent viewed collection interconnected sets peers 
peer joins torrent obviously youngest peer initial set may contacted younger peers 
may contacted older peers peers try keep contact minimum number peers generally lifetimes torrent 
temporal diversity key component efficiency bittorrent guarantees high probability peer find peers younger older hold missing chunks file 
takes twice download period upload quantity bytes gb system 
illustrates importance peers staying seeds completed download 
means downloaded faster rate uploaded 
due fact high speed link seeds seek fastest downloaders consistently favored seeds serve 
investigated type clients trading 
approximately file provided seeds leechers 
observed total file sent peers including seeds provided file 
interesting top initial peer set provided tracker contacted 
conjecture obtain best possible performance bittorrent clients firewalls nats prevent inbound connections 
want assess efficiency tit tat policy 
tit policy enforce clients exchange chunks flexibility artificially block transfers data flow rate directions 
bittorrent avoids type problem unchoking connections seconds long period time scale single tcp connection 
studied correlations upload download throughput upload download traffic volumes 
results show traffic volumes correlated positive correlation close upload download throughputs correlated close means bittorrent flexible 
computed correlations download volumes download throughputs side upload volumes upload throughputs side 
correlated value respectively 
high correlation observed downloaded throughputs volumes probably due fact top downloaders seeds provide file 
upload throughput volume correlated client seed continuously seeks best downloaders case download phase peer primarily seeks peers chunks interested 
large content replication key issue internet big companies interested replication service update simultaneously large set hosts virus patches software updates 
bittorrent popular peer peer application targeted large file replication 
extensively analyzed large torrent thousands simultaneously active clients large period time 
performance achieved terms throughput client download ability sustain high demonstrate bittorrent highly effective 
remain open questions area large content replication optimal theoretically replication policy terms response times user profile arrival rates willingness stay seeds ii build robust replication service ensure machines eventually complete downloads corporate usage iii efficiently protect applications denial service malicious peers 
acknowledgment extremely grateful eike frost kindly providing tracker log torrent analyzed 

adar huberman free riding gnutella monday october 

lee efficient large file distribution content delivery networks usits proceedings th usenix symposium internet technologies systems march 


chu rao zhang case system multicast acm sigmetrics pp 
santa clara ca usa june 

cohen incentives build robustness bittorrent org bittorrent pdf may 

jannotti gifford johnson overcast reliable multicasting overlay network proc 
th symp 
operating systems design implementation usenix october 

ratnasamy handley karp shenker application level multicast content addressable networks ngc pp 
november 

rodriguez biersack dynamic parallel access replicated content internet ieee acm transactions networking august 

rowstron scribe design large scale event notification infrastructure proc 
ngc november 

sherwood bhattacharjee cooperative bulk data transfer protocol proceedings ieee infocom march 
