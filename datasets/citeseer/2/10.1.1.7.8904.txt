fundamenta informaticae ios press bounded model checking universal fragment ctl wojciech penczek institute computer science pas warsaw poland academy maja poland email penczek pl bo wo andrzej institute mathematics computer science pu poland email fb wsp pl 
bounded model checking bmc introduced efficient verification method reactive systems 
bmc sat methods consists searching counterexample particular length generating propositional formula satisfiable iff counterexample exists 
new technique introduced clarke model checking linear time temporal logic ltl 
shows concept bounded model checking extended actl universal fragment ctl 
implementation algorithm elementary net systems described experimental results 
keywords bounded model checking logic actl ectl bounded semantics translation sat elementary net systems system verification 
partly supported state committee scientific research 

model checking considered spectacular practical applications theoretical computer science verification concurrent systems 
main idea model checking consists representing program labelled transition system model representing specification temporal formula checking automatically formula holds model 
unfortunately practical applicability model checking strongly restricted state explosion problem mainly caused representing concurrency operations interleaving 
different reduction techniques aimed minimizing models 
major methods include application partial order reductions symmetry reductions abstraction techniques symbolic storage methods 
bounded model checking bmc sat satisfiability checking methods introduced complementary technique bdd symbolic model checking ltl 
basic idea search counterexample particular length generate propositional formula satisfiable iff counterexample exists 
efficiency method observation system faulty fragment state space sufficient finding error 
observation experimentally proved 
aim extend method bounded model checking verification branching time properties expressed actl universal fragment ctl 
main modification original algorithm ltl consists translation model symbolic paths start arbitrary states model 
translation actl formula simpler case ltl 
changes result obtaining better bound maximal length symbolic paths equal jm jm 
algorithm implemented elementary net systems 
experimental results performed verifying standard mutual exclusion system dining philosophers system prove efficiency 
rest organized follows 
section contains discussion related 
section logic ctl subsets actl ectl introduced 
section bounded semantics ectl defined 
general algorithm bmc actl section 
correctness algorithm proved section 
implementation bmc elementary net systems described section 
examples mutual exclusion dining philosophers experimental results section 
section contains final remarks 

related shows time extension bmc method sat procedures verification properties expressed actl 
idea bmc temporal logic taken papers clarke 
bmc method applied checking reachability petri nets 
despite fact extension bmc actl ectl mentioned extension described knowledge 
solution actl considered novelty 
motivation considering universal fragment ctl 

logic ctl subsets computation tree logic ctl propositional branching time temporal logic introduced emerson clarke specification language finite state systems 

syntax ctl pv set propositional variables containing symbol true 
set ctl formulas form defined inductively follows member pv formula formulas formula ex derived basic modalities defined follows ef def ax def ex af def def ag def ef defined logic ectl restriction ctl negation applied propositions replaced syntax 
logic actl restriction ctl language defined 
easy see actl consists temporal formulas form ax af 
semantics ctl definition 
model ctl pair finite set states total binary successor relation state successor initial state pv valuation function true assigns state set atomic propositions assumed true state 
jm denote number states set natural numbers set positive natural numbers 
path infinite sequence states 
path 
definition 
model state formulas ctl 
denotes true state model omitted implicitly understood 
relation defined inductively follows iff iff iff iff ex iff iff iff 
definition 
validity ctl formula valid denoted iff true initial state model 
bounded semantics ectl section give bounded semantics ectl order define bounded model checking problem ectl translate satisfiability problem 
define bounded semantics represent cycles models special way 
aim serve definitions paths loops models 
definition 
path model path finite sequence states thought path finite represent infinite path back loop state path previous states see 
loop loop 
definition 
loop call path loop definition 
model model model structure path path set paths subset path path define states path fs path sg notice set path finite 
bounded semantics defined model definition bounded semantics temporal operators depends considered path loop 
order distinguish paths loops define auxiliary function 
definition 
model path model path path 
function loop path defined loop fl tg definition 
bounded semantics model ectl formulas 
denotes true state omitted implicitly understood 
relation defined inductively follows iff iff iff iff ex iff path iff path loop false iff path definition 
validity bounded semantics ectl formula valid model denoted iff 
describe model checking problem reduced bounded model checking problem 
need auxiliary definition 
definition 
ectl formula 
length formula denoted defined follows pv form ex form 
lemma 
model state ectl formula 
conditions hold implies implies 
proof straightforward induction length 
ut lemma 
model ectl formula state jm 
proof induction length 
lemma follows directly propositional variables negations 
assume hypothesis holds proper subformulas 
equal easy check lemma holds 
consider forms 
ex definition unbounded semantics path inductive assumption path ex set states finite definition unbounded semantics path form jm inductive assumption obtain consider path possibilities loop form loop 
loop form 
path induction 
set states finite definition unbounded semantics path jm 
inductive assumption obtain consider path possibilities 

path induction 
ut main theorem section states jm bounded semantics equivalent unbounded 
theorem 
model ectl formula jm iff 
proof follows lemmas 
ut important mention case exists jm 
fact reason bmc method efficient 

bmc algorithm actl section general method bmc actl section apply elementary net systems 
definition 
path model structure path submodel path path states path vj bounded semantics ectl submodels defined definition 
define function form follows pv ex 

function determines number paths submodel sufficient checking ectl formula 
model actl formula 
bmc method designed search errors aim show hold solve problem algorithm ectl formula 
iterate jm select model select submodels jp ath function 
translate transition relation paths submodels propositional formula translate propositional formula check satisfiability checking translated checking satisfiability propositional formula efficient algorithms solving sat problem problem satisfiability propositional formulas 
assume dlog jw state represented vector state variables propositional variables 
finite sequence vectors state variables call symbolic path 
ll finite set natural numbers 
elements set indices symbolic paths translating transition relation submodels construct define propositional formula constrains symbolic paths valid paths ll th symbolic path denoted kg vectors state variables 
translate ectl formula propositional formula constrains sets symbolic paths satisfy 
lit pv form function defined follows lit lit furthermore vectors state variables 
define propositional formulas iff lit codes state model iff iff pv iff codes backward loop th state th state symbolic path definition 
unfolding transition relation path model ectl formula 
propositional formula defined follows ll ll vectors state variables 
constrains symbolic paths valid paths step algorithm translate ectl formula propositional formula 
translation differs paths loops 
order distinguish paths loops propositional formulas 
furthermore state path index temporal subformulas formula translated path translated paths start state see ll means loop return state preceding state 
denote translation ectl formula propositional formula 

translation ectl formula ex ll ll ll denote 
correctness translation section prove correctness translation model checking problem 
lemma 
submodels path path ectl formula 

proof straightforward induction length 
ut lemma 
iff submodel jp ath 
proof induction length 
lemma follows directly propositional variables negations 
assume hypothesis holds proper subformulas 
definition bounded semantics induction obtain submodel path jp ath submodel path jp ath 
consider submodel path path path path path 
states path 
jp ath obvious bounded semantics definition bounded semantics induction obtain submodel path jp ath submodel path jp ath 
consider submodel path path path path jp ath 
follows lemma bounded semantics ex ex definition bounded semantics path inductive assumption condition submodel path jp ath consider submodel path path path belongs path conditions hold construction definition bounded semantics ex jp ath 
definition bounded semantics path loop inductive assumption submodels path jp ath consider submodel path path path states path 
path conditions hold construction definition bounded semantics jp ath 



definition bounded semantics path inductive assumption submodels path jp ath states path submodel path jp ath states path consider submodel path path path states path 
belongs path conditions hold construction definition bounded semantics jp ath 

proof straightforward 
ut lemma 
state condition holds satisfiable iff submodel jp ath 
proof satisfiable 
definition translation propositional formula codes sets paths size satisfy formula 
definition unfolding transition relation propositional formula codes symbolic paths valid paths set paths satisfies formula size smaller equal 
conclude submodel jp ath 
proof induction length 
lemma follows directly propositional variables negations 
consider cases jp ath definition bounded semantics induction obtain satisfiable satisfiable 
lemma propositional formula satisfiable 
equivalent propositional formula jp ath definition bounded semantics induction obtain satisfiable satisfiable 
lemma propositional formula satisfiable 
propositional formula equivalent propositional formula ex ex jp ath ex definition bounded semantics path induction obtain propositional formula satisfiable 
index new symbolic path true 
lemma propositional formula ex satisfiable 
propositional formula ll ex satisfiable 
definition translation ectl formula formula equal ex ex jp ath definition bounded semantics loop induction obtain propositional formula satisfiable 
loop index means symbolic path index propositional formula true 
index new symbolic path satisfies formula formula 
lemma condition obtain propositional formula satisfiable 
formula ll satisfiable 
definition translation ectl formula propositional formula satisfiable 

jp ath definition bounded semantics path induction obtain propositional formula satisfiable propositional formula satisfiable 
index new symbolic path satisfies formula 
lemma conditions obtain propositional formula satisfiable 
propositional formula satisfiable ll wm definition translation ectl formula formula equal propositional formula ut theorem 
model model ectl formula 
iff satisfiable 
proof follows lemmas 
ut corollary 
iff unsatisfiable jm 
implementation bmc elementary net systems section show bmc applied verification elementary net systems representing concurrent systems 

elementary net systems definition 
net triple finite sets exist elements called places elements called transitions called flow relation fp fg pre set fp fg post set note flow relation completely determined known transition configuration net mean subset graphically configuration represented placing token circle corresponding place definition 
elementary net system quadruple en net initial configuration 
definition 
en elementary net system 
configuration 
transition enabled denoted ti 

configurations 
transition fires denoted tid ti 
reachable configuration en configurations ic set reachable configurations en denoted cen notice write tid new configuration uniquely determined definition 
en elementary net system 
sequential configuration graph en denoted scg en edge labelled graph cen cen 
implementation elementary net system en sequential configuration graph scg en 
number places interpret propositions fp jbj ectl formula built 
model en defined follows iff iff construct propositional formula satisfiable iff 
code elements subsets means state represented vector state variables ng pre ng post ng finite sets indices places pre set post set respectively 
ng set indices places configuration define propositional formulas pn 
pre post pre post pn pre post pre post 


examples section describe known examples mutual exclusion dining philosophers 

mutual exclusion component component component 
mutual exclusion elementary net system models know mutual exclusion problem 
system consists processes processes permission process 
processes compete access shared resource 
moment time processes resource 
task permission process schedule access resource 
availability resource represented permission place permission indicated presence token place critical section part process uses shared resource needs protection possible disturbance process 
critical section process represented place non critical part process represented place remainder wait 
process perform actions entering critical section exiting critical section action outside critical section 
enter exit critical section synchronize permission process contains local states resource resource process permission process perform actions functions pre set post set defined follows pre set fp post set fc pre set fc post set fp pre set fr post set fw fp give detailed description example consider mutual exclusion system processes modeled elementary net systems denoted property actl formula ag afc 
formula expresses process waiting section eventually reach critical section 
suppose interested showing satisfies property order apply bmc elementary net systems 
assume general case places propositional variables numbered way 

obtain pre post pre post pre post pre post pre post pre post 
start negating gives ectl formula ef 
define propositional formulas 
consequently consider models jm searching witness 
hold model consider model unfold transition relation steps symbolic paths derive propositional formula propositional formula ef constructed 
propositional formulas combined ef checked satisfiability 
propositional formula 
satisfiable experimentally proved section 

dining philosophers consider philosophers sitting round table 
philosopher plate front 
neighbouring plates lies fork 
philosopher eats uses forks right left plate 
philosopher finished eating replaces forks table starts thinking 
elementary net system models dining philosophers problem 
consists conditions th philosopher thinking th philosopher waiting forks eot eot eot eot 
dining philosophers problem th philosopher eating th fork taken 
philosopher perform actions eot entering critical section exiting critical section thinking action outside critical section resp 
functions pre set post set defined follows pre set fw post set fs pre set fs post set fr pre set eot fr post set eot fw pre set fw post set fs pre set fs post set fr pre set eot fr post set eot fw fr marking net represents situation philosophers thinking forks taken 
philosophers perform actions eot start competing access shared forks 
give detailed description example consider dining philosophers system processes modeled elementary net system denoted df property actl formula ag af 
formula expresses philosopher waiting section hungry eventually forks taken neighbours 
suppose interested showing df satisfies property order apply bmc elementary net systems 
assume general case places propositional variables df numbered way 

obtain pre post pre post pre eot post eot pre post pre post pre eot post eot pre post pre post pre eot post eot pre post pre post pre eot post eot 
start negating gives ectl formula ef 
define propositional formulas 
consequently consider models jm searching witness 
hold model model consider model unfold transition relation steps symbolic paths derive propositional formula propositional formula ef constructed 
propositional formulas combined ef checked satisfiability 
propositional formula 
satisfiable experimentally confirmed section 

experimental results implemented model checker bmc actl 
input consisting description elementary net system en actl formula expressing desired specification negates formula obtaining ectl formula 
constructs propositional formula satisfiable iff formula true model en formula model checker outputs set clauses satisfiable iff satisfiable 
note logically equivalent original formula preserves satisfiability output format set clauses generated model checker dimacs format satisfiability problems 
satisfiability solver zchaff uses dimacs format 
implementation chaff solver maintained zhang 
zchaff known solve problems variables clauses 
performed experiments ibm pc compatible computer equipped processor amd mhz mb main memory operating system windows 
tested elementary net system describing known mutual exclusion problem processes property formula ag afc 
note value equal 
means counterexample exists symbolic paths 
turns considered formula counterexample symbolic path 
cases obtained symbolic paths length equal 
elementary net system describing known dining philosophers problem philosophers property formula ag af 
despite fact formula similar example need symbolic paths order find counterexample results show symbolic paths length equal suffice 
display experimental results verification mutual exclusion problem symbolic path table symbolic paths table 
table shows experimental results verification dining philosophers problem symbolic paths 
columns tables show data column shows number processes denoted nop second gives number states model denoted nos third fourth column display numbers propositional variables clauses generated respectively fifth show time memory consumed generate set clauses columns give time memory consumed zchaff 
number states model mutual exclusion computed formula 
dining philosophers corresponding formula complicated appendix 
zchaff nop nos variables clauses sec mb sec mb table mutual exclusion symbolic path zchaff nop nos variables clauses sec mb sec mb table mutual exclusion symbolic paths note dining philosophers property true false 
case proved translation satisfiable paths length smaller equal jm jm jm 
zchaff nop nos variables clauses sec mb sec mb table dining philosophers symbolic paths 
final remarks shown bmc method branching time logic actl feasible 
algorithm implemented elementary net systems experimental results examples prove efficiency method 
solution differs applied restricted subset actl 
translation directly exploited verifying properties timed systems expressed universal fragment tctl 
interesting compare efficiency method ltl 
languages incomparable experimental results 
advantage approach smaller maximal bound jm comparing jm 
ltl 
disadvantage clearly unavoidable necessity symbolic path translating formulas ltl counterparts 
biere cimatti clarke fujita zhu symbolic model checking sat procedures bdds proceedings acm ieee design automation conference dac 
biere cimatti clarke zhu symbolic model checking bdds proceedings tacas springer verlag 
bryant graph algorithms boolean function manipulation ieee transaction computers 
bryant binary decision diagrams enabling technologies formal verification proceedings int 
conf 
computer aided design iccad 
burch clarke mcmillan dill hwang symbolic model checking states information computation 
clarke grumberg peled model checking mit press 
dams grumberg gerth interpretation reactive systems abstractions preserving actl ectl ctl proceedings ifip working conference programming concepts methods calculi elsevier science publishers 
emerson clarke branching time temporal logic synthesize synchronization skeletons science computer programming 
emerson sistla symmetry model checking formal methods system design 
grumberg long model checking modular verification proceedings concur springer verlag 
bounded reachability checking process semantics proceedings concur springer verlag 
niemela bounded ltl model checking stable models proceedings th int 
conf 
logic programming nonmonotonic reasoning lpnmr springer verlag 
johnson trick editors cliques coloring satisfiability second dimacs implementation challenge vol 
acm ams dimacs series amer 
math 
soc 
moskewicz madigan zhao zhang malik chaff engineering efficient sat solver proceedings th design automation conference june 
peled partial order reduction linear branching temporal logics process algebras proceedings partial order methods verification amer 
math 
soc 
penczek gerth kuiper improving partial order reductions universal branching time properties fundamenta informaticae 
penczek bounded model checking timed automata proceedings int 
workshop concurrency specification programming cs 
valmari stubborn sets reduced state space generation proceedings int 
conf 
applications theory petri nets vol 
lncs springer verlag 
wolper godefroid partial order methods temporal verification proceedings concur springer verlag 
zhang zchaff www ee princeton edu chaff zchaff php 
zhang madigan moskewicz malik efficient conflict driven learning boolean satisfiability solver proceedings iccad nov 

appendix denote number sequences ng ja 
recursive definition function initial conditions obvious recursive dependence follows fact set considered sequences divided disjoint subsets subset contains sequences form sequences second subset contains sequences form sequences 
denote number sequences ng ja 
definition function initial conditions obvious equation follows fact set considered sequences divided disjoint subsets subset contains sequences form sequences second subset contains sequences form sequences 
order compute number states configurations model elementary net system dining philosophers consider case exactly philosophers stay critical sections time 
note happens situations 
situation remaining philosophers stay possible places 
configurations exactly philosophers stay critical sections 
notice bn philosophers stay critical sections time 
number states model elementary net system dining philosophers equation bn 

