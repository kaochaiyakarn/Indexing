comparison categorical foundations object oriented database model tomas petr department computer science engineering faculty electrical engineering computer science technical university brno brno czech republic fee cz 
development database area highly influenced object oriented principles data modeling 
contrary previously successful relational approach lacks rigorous theoretical support 
problem mainly due fact semantics description features generalization specialization encapsulation inheritance trivial just means set theory 
researchers focused finding suitable theoretical means modeling complex objects 
concerned comparison categorical modeling database area proposes limit data model enables represent objects relationships multiple inheritance class polymorphism virtual methods categorical setting 
aim formalize notions arose actual need 
support development object oriented database model closely standard odmg 
model proposes useful features database modeling concerning object hierarchies modeling roles require specific approach category theoretical framework fulfills objectives 
database researchers stressed need design unified object oriented database model 
proposed standard called odmg gives informal description data definition manipulation defines bindings smalltalk follows revised release 
contrary relational database model set theory object oriented approach lacked rigorous mathematical foundations supporting formal semantics data structure definition manipulation 
result researchers proposed frameworks defining model theoretic semantics object oriented paradigm 
category theory ct useful device express concepts understandable unified way 
diskin goguen manifests pointed ct formalism supporting high level abstraction helps simplify supported czech agency object oriented database model czech ministry education modeling inheritance object oriented database model 
proofs gives new understanding studied problems 
diskin emphasized fact objects considered homogeneous information structure classes defined morphisms 
contrast set theory order logic provides devices suitable description complex objects properties relationships 
attempts give formal semantics object oriented model came different directions 
formal specification semantics extended entityrelationship model 
set theory flat describe rich structures high level semantics object oriented model simple clear way 
results type theory bertino provided chimera object oriented database model formal foundations typing 
novel logic claiming capability model aspects object oriented paradigm 
promising approach 
uses algebraic specification emphasizes proofs models 
research done directions gives possibility compare set theoretic logic algebraic categorical approach 
ct approaches advantage high abstraction helps describe object oriented paradigm clear unified way 
build results categorical approach data specifications :10.1.1.38.3655
works classes database objects basically represented categorical objects operations arrows generalization specialization constructions limits 
purpose just basic notions ct 
organized follows section reviews current research area object oriented modeling ct discuss advantages disadvantages existing models 
section compares models presentation limit data model 
section describes define semantics class polymorphism 
section deals relationships object oriented model satisfying required integrity constraints 
existing categorical models section briefly introduce problem data specification theoretical means ct particularly distinctions advantages disadvantages current approaches discussed respect problem domain intended 
final objective extend existing categorical framework capture new features provide formal semantics database model similar proposed standard odmg 
model model database schema represented small category class hierarchy data manipulation modeled product equalizer pullback pushout constructions 
category defined directly generated instances functors category extension category 
category set sets maps possibility model actual values stored database approach followed :10.1.1.38.3655
data represented model similar way :10.1.1.38.3655
type hierarchy built called simple types nodes directed acyclic graph represents inheritance hierarchy 
instances types classes sets 
notion subclass modeled arrow interpreted injective mapping instance sets types 
attributes classes modeled arrows classes simple types 
demonstrated approach data modeling example shown fig 

example help understand formal definition simple 
student person professor name name gamma gamma string address address gamma gamma integer city city street street fig 

example inheritance hierarchy fig 
shows formal definition database storing information persons students professors 
notice distinction arrows 
solid ones represent attributes classes dashed ones represent subclass relationships 
example student professor inherited type person similarly name derived string subtype integer 
arrow denoted name models attribute person property inherited student professor 
inheritance modeled composition arrows 
formally defined follows definition simple quadruple 
set simple types representing nodes 
theta partial order defines hierarchy simple types 
set attribute labels 
thetas associates simple type number attributes types 
satisfies defined fa simple generate category 
objects nodes arrows defined denotes category represents closure respect composition arrows concept known ct distinction dashed solid arrows preserved arrows generated subclass attribute edges respectively distinction 
give deeper insight sect 

object oriented modeling arrows generated correspond inheritance generated represent aggregation 
terms simple inheritance specification features 
example name inherited person student professor subclass arrows 
street property address address property person morphism street ffi address added specification property person pointed formalisms slightly different notation address street street ffi address 
setting query mechanism proposed algebra 
semantics key operator limit construction defined declarative way 
proved operations relational algebra powerset nest unnest operators nested data model transitive closure expressed language 
addition data specification manipulation limit constructions concerned fundamental characterization object identity inheritance general context independently specific model 
pointed object identity closely connected problem decomposition views subclassing inheritance lot common views 
approach brings possibility reasoning database schema high level abstraction 
built view data modeling fit context model proposed standard odmg 
similar direction leading interesting abstraction inheritance 
approach suitable purpose 
summarize focuses structural character objectoriented paradigm consider dynamic aspects 
deal properties data encapsulation static dynamic constraint checking event handling 
theory process approach research defines formal semantics basic constructs object oriented specification language 
focus information system development formal specification 
theory presentations logic describe properties behavior objects means ct serve express relationships inheritance hierarchy 
aggregation inheritance formalized specification constructs acting diagram category theory presentations 
research logic formalize specification building include category signatures functor category category sets relations defining consequences set formulas 
theory presentation logic consists pair theta phi theta signature phi collection formulas signature usually referred axioms specification 
theory theta phi consists just set formulas consequences phi theorems 
presentations closed consequence generally finite specification 
similarly authors categorical framework theory presentations substituted process models 
inheritance modeled limit construction manner works 
illustrates strong unifying property ct enabling find interesting generalizations connections different aspects object oriented modeling 
show just approach multiple inheritance modeling core model similar ideas model 
model notion multiple inheritance missing naturally move features difficult formalize 
multiple inheritance viewed pushout category objects partial morphisms 
example account saving foreign currency sfc account obtained derivation saving account account foreign currency account fc account 
accounts specialization account account 
express structure notion pushout shown fig 

account account gamma gamma psi fc account sfc account gamma gamma psi fig 

illustration multiple inheritance pushout 
pushout kind limit construction 
category set object sfc account union account fc account corresponding arrows bottom part diamond inclusions 
arrows upper part diamond set inclusions object account intersection account fc account 
construction easily extended general pushouts consisting base objects 
objects category interpreted sets called markovian objects consisting process markovian observation structure markovian means update functions objects independent states 
arrows partial morphisms processes 
fig 
defines semantics markovian process observation structure account mapped partial morphism account meaning account defines object account extends additional functionality 
way partial morphisms enable add new operations account properties account 
similarly fc account adds new functionality sharing properties account object account 
arrows upper part inheritance diamond crucial definition sfc account identify properties objects account fc account share 
purpose patterns diagrams 
focus data structure modeling better expresses requirements standard odmg 
accordingly category objects represent classes arrows model attributes methods multiple inheritance relationships 
setting limit constructions define additional constrains database schema 
constraints enable represent virtual base classes class polymorphism 
graph semantic modeling diskin proposed graph specification language semantic modeling 
main idea generalize relational data model capture semantics object oriented features 
graph specification language time possesses precise semantics 
inspired property ct replaces analytical assertions elements synthetic assertions diagrams 
approach nodes diagrams model classes arrows represent attributes subclassing relationships 
queries viewed operations diagrams 
objective provide kind graphical schemes corresponding logic schema considered theory logic 
idea developed ct concept sketch lot common previous models 
addition clarified connection relational approach order logic sketch framework extended kind reasoning rich semantics 
context diskin provided mathematically correct semantics notions object identity relationships distinguishing arbitrary associations aggregations specialization generalization weak entity type stressing fact approach universal respect simulation formal data specification 
ground suggested new approach view integration 
categorical devices modeling generalization specialization theory models 
aim solve problems view integration diagrams sketches means ct considered behavioral aspects object oriented models multiple inheritance naming problem class polymorphism method dispatching 
greatly influenced understanding problem conceptual modeling 
summary works described previous subsections formalize basic aspects objectoriented paradigm object identification inheritance aggregation relationships 
view features different perspectives emphasizing data structure conceptual modeling queries views behavior :10.1.1.38.3655
approaches useful various purposes integrating entity relational object oriented framework addressing problem view integration exploring modeling power categorical models development provably correct systems just formalizing object oriented notions new way 
issues covered works include class polymorphism naming problem integrity constraints relationships internal structure database behavior modeling sense object oriented programming virtual methods method dispatching bulk data types important features model defined standard odmg 
limit data model respect results previous section proposed limit data model ldm 
original ideas developed 
summarize main results focusing multiple inheritance conflicts attributes class polymorphism problems formally addressed ct point data structure perspective 
deal modeling methods bulk data types 
methods dealt separately bulk data types currently investigated 
close demonstrating relationships represented ldm modeled distinctly previous works hope fit nicely context odmg 
database intention extension object oriented modeling supposes hierarchy classes built basic domains aggregation inheritance constructions 
definition database structure formally viewed category consisting objects arrows additional commutativity conditions accordance 
term arrow morphism interchangeably 
category model database intention classes inheritance hierarchy denoted objects correspond classes arrows additional conditions represent aggregation inheritance relationships methods 
category defines syntax model subscript stands intention 
concerning semantics follow approach giving interpretation categorical constructions category set ldm give semantics multiple class objects acquire discard types lifetime :10.1.1.38.3655
means ct help reason data structures possible conflicts arising multiple class membership 
represents structure database specific objects tuples complex structure derived formalized model database intention set 
ct formally expressed functor de representing content database database extension 
defines appropriate mappings classes extents object identifiers oids natural numbers arrows methods commutative conditions required preserved de transaction consisting method invocation operation update new delete expressed redefinition results function de implement operation defined introduce notion persistence inherently functional language ct modeling set possible interpretation database schema 
sect 
seen interpretation category objects represented markovian processes observation structures arrows morphisms structures 
comparing approaches get universal models applied different aspects object oriented paradigm 
considered kind interpretation model intend different purpose 
building complex objects considering interpretation set aggregated objects built product construction pointed 
similar approach described :10.1.1.38.3655
illustrate consider class address composed attributes street city postcode 
address defined left part fig 
product address string theta string theta string 
include object type address erson simply define projection person addr erson address diagram fig 
projections denoted subscript distinguishes class projection defined superscript informs name attribute referred 
string address address street string address city phi phi phi phi string address postcode hj define address address person person addr gamma gamma string person name aggregate address person fig 

building aggregated objects semantics aggregation defined follows object type address aggregated erson 
address stored part erson lacking object identifier oid referred outside object erson 
product construction captures semantics way 
interpreting diagrams fig 
set actual values attributes street city postcode stored erson tuple 
value attributes shared accessed erson composition projections 
instance attribute person addr street accessed projection address street ffi person addr erson 
ct notation slightly different object oriented pointed 
point small circle write projections reverse order 
help see associated constructions programming languages write corresponding class subscript referred attribute superscript 
illustrate projection person addr erson denote access attribute addr class erson usually written person addr programming languages 
modeling classes essence inheritance quite similar aggregation 
defines objects structure 
tuples containing attributes existing class additional structure functionality 
aggregation requires specify path access attributes enclosed object inheritance uses flat naming schema refer attributes brought superclasses 
notion inheritance formalized similarly aggregation exception solve problem attribute access derived classes 
attributes brought superclasses accessed composition projections 
arrow composition essential property ct notation ffi composed projection 
addition aggregation introduce specific labeling assigning meaningful names composed attribute projections 
labeling essential model inheritance describe flat naming space derived class 
illustrate labeling class name projection accessing attribute name class 
projection defines relationship superclass denoted class super labeling designed special purpose 
classes defined multiple inheritance potentially cause notation subscripts resolve conflicts 
instance labeling class super name distinguish unique attribute name class inherited super 
giving formal definition labeling algorithm give deeper insight issues caused multiple inheritance practical illustration 
consider simple university database storing information persons students lecturers teaching assistants 
suppose interested person names addition required distinguish students lecturers specific codes 
know supervisors individual teaching assistants 
ldm definition represented diagram shown fig 

previous subsection recall erson defined product 
shown fig 
simplicity address attribute omitted abbreviation erson 
having done start building derived classes students lectures teaching assistants diagram fig 
diamond add new property classes till final diagram composed projections code code ta sup projections define new attributes derived classes 
new properties classes denoted simply ta 
interpreting categorical definition set definition string name gamma gamma diamond multiple inheritance gamma gamma ta ta ta gamma gamma adding new properties gamma gamma ta ta ta gamma gamma string name gamma gamma int code gamma gamma int code oid ta sup fig 

small university database string fname name theta int name code name string code intg theta int name code name string code intg inheriting class class teaching assistant structure ta theta theta oid name code code sup name string code code int sup oid inherits adding attribute sup 
notice please object type representing supervisor referred class ta oid 
course semantics better described relationships shown discussed see sect 

concerning notation superscript class indicates categorical object represents purely database objects belonging subclasses 
call classes denoted class pure classes 
note breaks requirements principle class polymorphism show deal problem sect 

notice structure ta directly obtained just means product construction shown equations structure naturally expresses supposed semantics example 
get correctly need impose additional commutativity conditions diagrams fig 
problem concerns attribute name just occurrence class ta inherited twice classes contrary attribute code copies ta potentially carry distinct values 
attribute code value defined meaningful unique person 
fact principle expresses semantics virtual base classes defined 
formally describe virtual base classes way category theorists express equations commutative diagrams 
order express required semantics diamond multiple inheritance fig 
commute classes ta words composite arrows paths leading class give results ffi ta ffi ta assign single label equivalent projections referring shared attribute name ta name name ffi ta name ffi ta result ensure called virtual base class essence attribute name denotes value 
construction known ct called pullback 
pullback enables model notion virtual base classes 
attributes labeled projections summarize strength object oriented model lies inheritance construction 
contrary aggregation inheritance enables derive new class existing bringing inherited attributes name space 
classes defined multiple inheritance possible require attribute names unique 
ldm inheritance modeled product construction arrow composition projection labeling suggested previous section 
arrow composition unique problem assigning unique names composite projections carefully examined 
issue addressed category theoretical setting 
considering previous example problem concerns ta need distinguish distinct attributes identification code 
corresponding projections code ffi ta code ffi ta add just name code name space ta name denotes different values 
problem labeling projections called naming problem 
conflicting attributes code distinguished double colon notation code code 
general naming problem resolved follows 
class define label composite projections access attributes inherited superclasses naming algorithm 
need define auxiliary notions 
possible projections accessing attributes class denote name attribute accessed attr 
adds name attr name space task define aliases form prefix name name projections accessing distinct attributes labeled alias 
expression prefix name class name attr 
name attr paragraphs 
composition cn name ffi cn gamma cn ffi ffi pref denote set fname cn name cn gamma name containing possible prefixes attribute name cause conflict 
need relation say cn name ffi cn gamma cn ffi ffi ck gamma ck ffi describe algorithm naming algorithm name attr name attr gamma name unique name space assign aliases pref getting equivalent projections label label pref referring name assign aliases pref gamma pref union goes set attr name commute attr name attribute name redefined class 
note question allow attribute redefinition model 
purpose algorithm deal conflicts name space classes 
single prefixes names attributes unique 
solutions problem 
extreme write path inheritance tree identify attribute 
aggregation works lose advantage inheritance enables reuse code data structures 
possibility refer attributes unique name class defined time 
class called source class 
demanding programmer 
need write source class time referring attribute 
complicated approach programming language 
attribute identified source class unavoidable 
example consider equivalent declarations ones fig furthermore suppose declared variables ta ta 
attribute access ta name allowed represents shortcut ta name ta name 
writing expression ta code causes error message ta code ambiguous 
code base class ta code base class ta 
case compiler requires distinguish attribute ta code ta code meant 
hand allow unique source class prefix expression ta name 
enable meaningful prefix cause 
give freedom programmer specify attribute meant help solve naming problem polymorphic classes sect 

polymorphism ldm inheritance significantly differs aggregation feature 
object subclass places class stand 
important property object oriented paradigm enables code data structure reuse 
call kind polymorphism class polymorphism similar concept type theory known term subtyping 
term polymorphism reserved functions types parameters 
prefer term polymorphism widely area object oriented programming way 
ldm class polymorphism expressed categorical objects called generalized classes text denoted superscript defined sum coproduct construction inclusion arrows 
diagram fig 
inclusion arrows denoted class define categorical object type represents union types subclasses 
case university database intention category basically structure shown fig 
upper square required commute 
bottom pullback gamma gamma ta gamma gamma oe oe ta gamma gamma psi upper pushout gamma gamma ta gamma gamma oe oe final inheritance hierarchy gamma gamma ta gamma gamma oe oe ta gamma gamma psi gamma gamma ta gamma gamma oe oe fig 

semantics class polymorphism see detail structure objects upper square shown clarity stand diagram fig 
start categorical object bottom 
context represents database objects pure type person attribute name 
recall class derived classes extending additional property 
case attribute code represented fig 
objects continuing derivation defined class ta multiple inheritance adding attribute sup represented ta furthermore clear categorical objects bottom square category set represented sets uniform elements 
elements tuples cardinality 
class polymorphism requires definition sets containing tuples possibly different number members 
property ensured upper square objects superscript defined sum 
set get objects structure ta ta theta theta oid name code code sup type type ta typeg ta name code type type typeg name code code sup type type ta typeg ta name code type type typeg name code code sup type type ta typeg name type type typeg name code type type typeg name code type type typeg name code code sup type type ta typeg name string code code code int sup oid type fp tag 
additional member type structure classes part semantics sum construction category set 
details see 
feature represent types objects 
notice inclusion arrows corresponding objects easily induced inheritance hierarchy generated automatically category definition database retains objectivity graph specification 
viewed union student tuples ta assistant tuples 
similarly represents union commutativity condition upper square ensures union disjoint union ta intersection 
construction known ct called pushout 
pushout enables model notion class polymorphism 
final deals naming problem 
framework classes represented generalized classes defined union pure classes 
naming schema extended generalized classes 
generalized class define projections sums projections union components giving label subscript 
illustrate naming generalized class projections get name name name ta name code code code ta code categorical construction sum morphisms set checks set element come 
done respect disjoint union ta member type carry information original set 
projection defined set name objects ta name objects ta respectively 
notice express sum projections need determine name distinguish attribute uniquely subclass 
sect 
source class prefix avoid problems prefix change attributes causing conflicts 
relationships show represent relationships integrity constrains model 
follow semantics relationships defined odmg standard particularly show define binary relationships oneto 
model relationships names 
contrary named traversal paths defined direction traversal lecturer supervises student student supervised lecturer 
traversal paths modeled distinct arrows fact traversal paths apply relationship indicated keyword inverse 
enables maintain integrity object database management system 
relationship easily implemented special attribute referring corresponding object functionality set objects functionality 
notice relationships just symmetric relations sets objects 
example written accordance odmg syntax modification university database 
contains classes student lecturer relationship supervise functionality traversal paths supervised supervises 
program students lecturers interface student interface lecturer attribute string name attribute string name attribute string branch attribute string title relationship lecturer relationship set supervised supervises inverse inverse lecturer supervises student supervised relationship supervise represented relation supervise student lecturer distinct paths supervises supervised represented supervises lecturer theta student supervised student theta lecturer respectively satisfy supervise supervises supervised integrity means relation supervise symmetric 
functionality corresponds restriction subrelation map traversal paths respectively 
actual objects stored database structure oid name branch supervised oid name title supervises williams math baker dr dobson comp bond msc brown comp ldm relations represent relationships modeled pattern 
define relations object objects depending functionality corresponding relationship 
oids purpose 
object identifiers viewed injective mapping assigning unique names objects 
object belonging class class oid class class oid class oid oid set oids objects belonging class 
collection objects called extent 
oids essential object oriented paradigm representation objects collections objects extents classes 
play important role introducing notion persistence object oriented programming languages 
define relationships need model attributes contain set oids 
additional category theoretical construction called power object represent set valued attributes 
set power objects sets subsets set 
denote power object result relationships modeled arrows returning oid associated objects 
traversal path relationship corresponds distinct projection arrow 
class defining relationship stands source arrow target categorical object representing oid set oids 
point view additional attribute added class definition containing oid object involved relationship 
example relationships different arity supervised supervises student lecturer described diagrams abbreviation classes student lecturer respectively 
similarly sup sup stand traversal path supervises supervised respectively 
oid oid oid sup oid gamma oid gamma oid oe sup oid oid oid sup gamma gamma oid gamma gamma oid gamma oid gamma oe sup oid oid oid sup im sup pi sup pi oid oid gamma oid oid gamma oid oid sup gamma gamma oid oid gamma oid sup pi oid gamma concerning integrity required keyword inverse define semantics easily cases 
corresponding diagram commutes integrity preserved 
equivalently stated expressions arrows oid gamma ffi sup ffi oid gamma ffi sup id relationship id identity arrow im sup oid gamma ffi sup ffi oid gamma im sup oid gamma ffi sup ffi oid gamma 
arrow im codom gamma 
dom denotes inverse image function assigning set elements fx yg image integrity relationship little complicated 
show just results 
summarized shown table relationships arrow model integrity supervised gamma 
oid oid gamma ffi sup ffi oid gamma ffi sup ids supervises gamma 
oid supervised gamma 
oid oid gamma ffi sup ffi oid gamma supervises gamma 
oid oid gamma 
supervised gamma 
oid im sup oid gamma ffi sup ffi oid gamma supervises gamma 
oid im sup oid gamma 
supervised gamma 
oid gamma 
oid gamma 
gamma 
oid supervises gamma 
oid 
bijection nelson rossiter propose called product model classes modeled stand categories 
notion inheritance product model categorical sum construction considerable disadvantages 
diskin preferred sketch approach 
similar flavor limits 
works dealt depth inheritance multiple inheritance naming problem class polymorphism 
extended previous models capture semantics multiple inheritance virtual base classes class polymorphism methods shown limited space 
semantics aggregation object identification relationships virtual methods formalized setting ldm retaining graph specification 
shown formalize notion class product construction notion virtual base class means pullback 
context class polymorphism modeled categorical sum extended pushout case multiple inheritance 
described relationships arrows semantics commutative conditions category approach concerned mathematical foundations conceptual modeling reason data structures possible conflicts arising multiple inheritance caused objects change roles lifetime 
shown computational power model see sect 

results equally applied ldm 
final objective define semantics object oriented database model similar defined odmg 
problem queries definition bulk data types subjects research 

barr wells category theory computing science 
prentice hall 

cattell object database standard odmg release 
morgan kaufmann publishers 

costa sernadas sernadas object inheritance subtyping 
acta informatica 

diskin algebraic graph oriented category theory 
manifesto categorizing database theory 
tech 
rep frame inform systems riga latvia 

diskin databases graphical algebras algebraic graph approach data modeling database design 
tech 
rep frame inform systems riga latvia 

diskin variable sets functions framework conceptual modeling integrating er oo sketches dynamic markers 
proceedings th international conference object oriented entity relationship modelling papazoglou ed vol 
lncs springer pp 


fiadeiro sernadas maibaum saake proof theoretic semantics object oriented specification constructs 
object oriented databases analysis design construction 
north holland 

gogolla extended entity relationship model fundamentals pragmatics 
springer verlag lncs 

goguen categorical manifesto 
mathematical structures computer science 

goguen malcolm extended hidden agenda 
proceedings conference intelligent systems semiotic perspective eds 

bertino bal formal definition chimera objectoriented database model 
tech 
rep idea de project 

ka semantics object identification object oriented database model 
proceedings scientific conference electronic computers informatics faculty electrical engineering informatics technical university pp 


ka extending object oriented model multiple class objects 
proceedings th international conference er conceptual modelling 
accepted publication 

kifer lausen wu logical foundations object oriented languages 
journal acm 

classes object oriented model categorical objects 
proceeding works phd students tu brno pp 


methods object oriented model sums morphisms 
preceeding international conference pp 


nelson rossiter prototyping categorical database fdm 
second international workshop advances databases information systems adbis 

categorical data specifications 
theory applications categories 
available www tac mta ca tac 

siebes complex objects 
phd thesis university twente 

stroustrup annotated manual 
addison wesley 

data modeling categorical perspective 
phd thesis antwerpen university 
