modular incremental automated termination proofs xavier laboratoire de recherche en informatique lri cnrs umr bt 
universit paris sud centre orsay orsay cedex france mail lri fr propose modular approach term rewriting systems making best hierarchical structure 
define rewriting modules provide new method prove termination incrementally 
obtain new powerful termination criteria standard rewriting 
policy restraining termination relaxing constraints hierarchies components generality module approach sufficient express previous results methods premisses include restrictions unions particular reduction strategy compulsory 
describe implementation modular approach 
proofs fully automated performed incrementally 
convenient orderings simpler observe dramatic speed finding proof 
termination property program execution terminates finite amount time 
deserves status fundamental property existence calculus defined program 
termination result finite time 
termination property arises various domains 
acts preliminary proofs properties 
focus termination term rewriting systems trs 
rewriting specification automated proofs programming 
programs developed incremental way trs considered practice single set rules 
termination proofs system benefiting possible modular structure 
termination undecidable 
particular methods proving termination incomplete 
efforts focus defining techniques devoted prove termination programs possible 
lately new methods induced breakthroughs automated termination proof rubio mspo arts giesl dependency pairs approach 
proving termination term rewriting system remains hard especially system large 
due fact divide conquer strategy applied directly making automation proofs systems rules difficult task see 
order provide significant improvement proving termination automatically focus critical points automating termination proofs computing incrementally deal systems hundreds rules common practice efficiently 
allows splitting termination proof easier solve subproblems incremental approach change way deals term rewriting systems numerous works subject way deals process proving termination 
great difficulty guaranty termination union termination components avoided putting hard restrictions relations components see instance krishna rao restricted proper extensions dershowitz constructor extensions 
referencing problem notion termination 
strong requirements exclude unions naturally occurring programming practice 
shown toyama termination modular systems disjoint signatures 
example 
consider toyama example 
systems terminates 
consider union may find infinite reduction sequence instance restraining scope study putting strong constraints unions allow weakly constrained unions called hierarchical consider slightly restricted notion termination preserved nondeterministic collapse termination 
historical point view rusinowitch remarked infinite reduction example due projective behavior system 
gramlich defined notion termination preserved non deterministic collapse results 
renamed collapse extended termination termination short studied ohlebusch 
system terminating terminating fresh symbol terminating 
claim focusing termination restriction practice 
virtually automated techniques proving termination lead termination powerful dependency pairs approach particular 
words termination provides means controlling projection possibly behavior termination systems occurring practice want automated proof 
example enter scope study anymore simply try prove termination automatically 
system may considered pathological rules barely occur programming application 
hierarchical structure common presentation trs union sets rules signatures trs 
suited expression inner hierarchical structure reasons brings redundancy common subsystem definition level symbols rules shared keep track actual sequential construction enhance incremental process say instance termination proof 
contribute separating rewriting actual programming 
order give general framework bringing modular structure trs fore provide automated methods prove termination incrementally firstly recall generalities 
sec 
shall introduce rewriting modules 
show intrinsic hierarchical structure trs naturally emerges formalization terms modules 
framework modules settled dependency pairs modules relative dependency chains defined sec 
powerful tools lead new criteria incremental modular termination theorem theorem 
section provide class orderings properties respect projection termination called expandable orderings 
results provide incremental proof method illustrated complete example sec 
new notion termination directly related incremental process hierarchical simple termination sec 

incremental modular termination tool results developed constant thought automation 
generality purely syntactical tests provided part cime rewriting tool 
incremental modular criteria cime gives user possibility searching termination proofs totally automated fashion 
tested trs approximately rules success termination proof seconds 
examples came crl specification communicating processes thomas arts means occur practice 
huge number rules problem termination tool incremental approach reduces termination constraints dramatically 
eventually discuss sec 
compares especially results arts giesl dershowitz 
preliminaries recall usual notions rewriting give notations 
signature finite set symbols arities 
countable set variables denotes set finite terms terms seen trees root position denoted symbol root position term tj denotes subterm position substitution mapping variables terms fx xg finite 
postfix notation substitution applications 
substitution easily extended endomorphisms 
called instance rewrite relation binary relation terms monotonic closed substitution denote reflexive transitive closure 
term rewriting system trs short signature set variables set rewrite rules trs defines rewrite relation way position sj rule substitution 
say sj redex reduces position rule relevant respectively denoted unfortunately termination modular constructor sharing unions non finitely branching trs shown ohlebusch restrict study finitely branching case set rules applied term finite 
term strongly normalizable sn reduce indefinitely 
rewrite relation strongly normalizing terminates term sn 
strongly normalizing terminating 
termination usually proven help reduction orderings dependency pairs 
briefly recall need 
term ordering known ordering pair pair relations quasi ordering reflexive transitive strict ordering irreflexive transitive 

term ordering said founded infinite strictly shall omit signature ambiguity 
decreasing sequence 
stable stable substitutions weakly resp 
strictly monotonic terms resp 
resp 
term ordering called weak resp 
strict reduction ordering wellfounded stable weakly resp 
strictly monotonic simplification ordering stable monotonic subterm property 
distinguish modular incremental proofs 
modular property behaves follow components property union proving property incremental manner consists proving component firstly showing possibly knowledge verifies termination termination behaves nicely unions trs 
modular property unions disjoint trs gramlich ohlebusch finitely branching constructor sharing systems gramlich finitely branching composable systems kurihara 
ohlebusch shown finitely branching condition compulsory 
termination restrictive simple termination adding projections symbols allows elimination constructors hiding redex impossible rules 
particular proposition 
gramlich simply terminating trs terminating 
running example describe main example 
choosing usual arithmetic example prefer example occurring real programming 
binary arithmetics really implemented going study 
example 
system describes addition multiplication nonnegative rational integers functional notation denotes denotes value multiplied denotes value multiplied plus formalism written usual binary notation front 






simplification rule ensures rewriting modules section define rewriting modules show bring fore hierarchical structure term rewriting systems 
operational point view module consists set new symbols rules define 
definition 
term rewriting system signature module extending pair 
signatures disjoint 
term rewriting system 
easily see trs say system hierarchical extension module 
write extension module extend system extension module naturally associates arrow wise 
write extension extension distinct systems single module alternative notation simple extension union relevant systems module 

sake readability may denote hierarchical extension hierarchy extended headed 
instance may abbreviate hierarchy headed extended denoted extends denoted disjoint modules may extend base hierarchy 
definition 
say module extends hierarchy headed independently module 
extension may seen union composable systems 
illustrates different kinds extensions 
possible express different kinds classical extensions means extensions modules 
instance obtain disjoint union extend independently 
may describe constructor shared union modules 
consider systems share set common constructors constructor shared union easily denoted modules independently extending module constructors 
notion hierarchical extensions common subsystem captured extension modules associates arrow wise 
note condition put extensions new rules new symbol root position left hand side see def 
modules extensions subsume notions heavily constrained hierarchical extensions constructor extensions proper extensions 
example 
consider binary arithmetic example example 
system may seen extension involving modules extends 
extends independently 
graphical notations hierarchical extensions 
module defining integers binary notation module consisting rules addition integers module describing multiplication 






adding rules subtraction incremental operation consists extending relevant module independently module 
fg 



hierarchy modular decomposition trs studied certain modules hierarchy exploited state provided 
possible consider unique canonical decomposition 
trs seen hierarchy minimal modules modules split hierarchy non empty modules 
purpose graph purely syntactical dependency relation symbols 
definition 
trs say symbol directly depends rule occurs note relation 
decomposition done steps 
trs 
build graph arc vertex vertex 
pack symbols strongly connected components symbols words signatures modules classes equivalence relation generated building modules packs easily done joining symbols rules occur 
module hierarchy may read graph note cycle obtained hierarchy symbols mutually recursive functions appear packs 
belong modules 
decomposition clearly unique 

sake readability gather constructor symbols reachable packs 
hierarchy shown example particular canonical modulo 
incremental modular termination module framework provides dependency pairs approach applicable incremental treatment termination proof 
dependency pairs modules definition 
signature extended marked copies symbols marking term follow term denote term symbol replaced marked copy 
module 
dependency pair module pair terms rule term subterm denote dp set dependency pairs module consider subterms rhs root symbols defined locally dependency pairs module extending system belong set classical dependency pairs considered example 
binary arithmetic example classical approach amounts considering dependency pairs multiplication rules hx yi hx hx yi hx hx yi dependency pairs module hx yi hx yi symbol signature 
consider system constructors fc defined symbols fd system seen extension dependency pairs module exactly dependency pairs arts giesl approach 
relative dependency chains saw considered hierarchy notion defined symbol lose absolute meaning local module hierarchy 
phenomenon arises chains dependency pairs modules rely rules occurring hierarchy may applied dp steps provided considered module 
words dependency chains relative relevant set rules 
definition 
module arbitrary term rewriting system 
dependency chain sequence pairs dp substitution successive pairs hs hs dependency chain module system said minimal proper subterms instantiated pairs rhs strongly normalizable 
note arbitrary trs may completely different particular may termination easily expressed terms relative dependency chains 
proposition 
term rewriting system strongly normalizing infinite chain 
proof 
belong right hand sides variables dp dp termination shown help 
termination modules dependency pairs modules relative dependency chains allow define purely syntactical tests prove termination incremental fashion 
section organized follow firstly state prove main result theorem 
proof technical involves technical key lemma lemma 
theorem obtain corollary sufficient conditions ensure composability termination cor 

focus extensions system independent modules state theorem corollary previous result kurihara 
theorem 
hierarchical extension 
strongly normalizing 
infinite dependency chain strongly normalizing 
proof 
contradiction 
proof scheme follow suppose infinite dependency chain going show infinite dependency chain contradicting second premise terminating contradicting premise theorem 
suppose terminate 
infinite dependency chain module please recall marked symbols occur root position 
pairs dp consist pairs pairs pairs subterm root symbol belongs premises give information cases 
order avoid third need lemma 
lemma 
trs module 
pairs hu dp hu substitution proof 
obtain 
lemma know pairs may follow pairs dependency chain 
similarly pairs may follow pairs 
may encounter cases dependency chain consider consists 
pairs pairs module 
pairs pairs module 
pairs finite number possibly zero followed pair infinite number pairs case infinite dependency chain pairs contradicts second premise theorem 
cases cases infinite chain occurs 
show chain translated chain 
obtain infinite chain infinite chain fgg existence contradicts premise theorem termination proof theorem proof general result technical key lemma lemma 
proof provides expected translation process 
lemma 
trs signature infinite minimal dependency chain possible build infinite dependency chain consisting sequence pairs new substitution new rewriting steps 
remains theorem proof mainly consists application lemma infinite dependency chain build corresponding infinite chain infinite dependency chain 
supposed strongly normalizing chain raises contradiction 
ends proof theorem 
proof lemma interpretation terms akin gramlich 
main difference interpretation related definition red 
take step reductions account function succ occurring selects terms obtained reductions ones root symbol belongs interacts sizes terms bigger case result alternate proofs interpretations terms identical step reductions considered 
gramlich main lemmas 
note changes theorems proven similar manner 
denote set infinite terms signature variables set definition 
denote arbitrary total ordering fg 

interpretation fg 
defined follow comb red red fi comb comb fag comb red denotes set interpreted step reducts order avoid ambiguity actual construction tree comb non ordered set need total ordering providing building strategy 
structure interpreted terms 

resulting tree comb 
illustrates interpretation term sequence step reducts interpretations 
teeth comb element red 
tooth interpretation possible reach suitable reduction 
need technical lemmas ensure interpretation behaves adequate manner 
substitution denote substitution variable lemma 
substitution ti proof 
structural induction lemma 
context holes proof 
structural induction lemma 
term strongly normalizable finite 
proof 
immediate interested finitely branching systems 
lemma 
rule 
proof 
cases depending symbols occurring path 
symbols sj context holes lemma li lemma ri premises lemma 
symbols occur smallest prefix ordering sj may assume loss generality context holes possibly empty sj lemma 
definition comb red 
deduce definition red red 
subterm eventually lemma lemma 

proof 
similar case proof lemma 
may tackle actual proof lemma 
proof lemma proof 
hu hu dependency chain substitution 
substitution 
substitution strongly normalizable considered chain minimal 
lemma know substitutes finite terms 
going show hu hu dependency chain 
prove know consider step lemma lemma may build expected sequence step step order obtain conclude lemma 
considering extension fg help theorem obtain corollary sufficient condition composability termination 
corollary 
hierarchical extension 
strongly normalizing 
infinite dependency chain strongly normalizing 
theorem 
hierarchical extension module extending independently 
strongly normalizing 
infinite dependency chain strongly normalizing 
proof 
suppose infinite dependency chain 
going show case may conclude non termination contradicting premise existence infinite relative dependency chain module contradiction second premise 
definition hierarchical extensions lemma know chains chains chains chains consisting finite number pairs module followed pair ti chain suffices prove finiteness relative chains infinite chain applying lemma infinite chain 
finite premises 
infinite chain applying lemma infinite chain 
chains finite terminates premises 
terminating 

crucial point theorem premise bounds 
proof performed incremental fashion 
note termination necessary may encounter toyama counterexample choosing ff 
eventually proposition corollary theorem previous result kurihara termination modular property unions composable trs 
theorem clearly incremental result theorem modular 
proving termination termination usually proven appropriate founded orderings 
propose section class orderings expandable orderings wellsuited termination take care possible projective behavior additional set rules 
orderings obtain corollaries theorems provide effective methods incremental modular termination proof 
expandable orderings definition 
term ordering said expandable reduction ordering restricted exactly 
say suitable associate ordering 
expandable ordering strongly expandable respectively weakly expandable associate ordering strongly monotonic resp 
weakly monotonic 
expandable orderings may proving termination 
proposition 
strictly monotonic expandable ordering 
rule term rewriting system strongly normalizing 
clear simplification ordering expandable 
particular rpo orderings induced polynomial expandable 
may combine obtain new ones 
proposition 
strongly expandable ordering expandable lexicographical composition lex expandable ordering 
strongly expandable composition lex proof 
find suitable satisfying conditions def 

suppose strictly monotonic associate ordering respectively 
may verify lex suitable strict monotonicity composition weak monotonicity 
show 
correct comparison 
correct comparison 
equality restricted lex cases definition lexicographical composition similar previous case 
lex get details case premises face possibilities premises premises lex immediate 
proof regarding similar 
lexicographical compositions recursive program schemes may building orderings 
proposition 
expandable ordering 
recursive program scheme defined resp 
resp 
expandable ordering 
give proof french version 
methods proving termination proposition test termination 
corollary 
weakly expandable ordering 

hs ti dp strongly normalizable 
obtain similarly effective corollaries theorems 
corollary theorem 
corollary 
hierarchical extension 
terminates 
weak reduction ordering resp 
weakly expandable dp terminates resp 
terminates 
proof 
contradiction 
suppose existence infinite chain 
ordering weakly decreases rewriting step strictly decreases dp step infinite sequence strictly decreasing 
contradicts foundedness 
similarly expandable orderings give simple way theorem 
corollary 
hierarchical extension module extends independently 
terminates 
weakly expandable ordering dp terminates 

optimizations dependency graphs may applied results 
note system adds arcs dependency graph arts giesl estimation estimated dependency graph remains unmodified 
modules automation generality purely syntactical tests implemented methods termination tool box cime system 
comes automation proofs ordering constraints main problem 
large trs rules simple huge number insurmountable solvers reasonable time 
strict automated search suitable ordering fails 
results induce significant decrease number modularity thm cor 
strictness incrementality thm cor 
constraints improvements show proofs 
instance cime took second finding interpretations section automated way incremental modular methods 
tried results large systems provided thomas arts 
systems come real application crl specifications communicating processes 
roughly speaking communicating processes send message perform action 
termination systems implies action performed finite lapse time 
attempt prove termination rules directly means polynomial interpretations failed 
system solution involving linear interpretation looking simple interpretations days stopped computer 
incremental modular methods took seconds cime find termination proof linear interpretations 
automated termination proof real programs longer reach 
cime available cime lri fr example section complete example incremental proof results 
extend example 
consider system describing nonnegative rational integers clearly terminates constant defined arithmetic integers particular addition add associativity rule order overlapping infix 




termination proven dependency pairs polynomial interpretation 
dp hx yi hx yi hx yi hx yi hx hx yi hx zi simple steinbach notion 
ordering defined interpretation pairs dp strictly decrease rules weakly decrease 
corollary allows conclude termination may want perform subtraction 
infix 



dependency pairs modules polynomial sufficient showing terminates 
pairs strictly decrease rules weakly decrease 
applying corollary obtain strongly normalizing 
independent extensions 
proof termination union uses termination module interfere ordering constraints 
order compare integers need boolean operators 
add new mod ule bool bool 
bool ftrue false constant unary infix binary bool true false false true true false false true false system dependency pairs free trivially terminates 
define comparison module ge ge extending bool ge ge ge ge ge ge ge ge ge ge ge true ge ge ge false termination bool ge shown rpo true false directly 
rpo simplification ordering expandable 
relevant union terminates proposition 
may apply theorem obtain termination bool ge bool bool ge ge arithmetical operators comparisons independent 
add new function integers base logarithm rounded 
technical reasons easier define firstly log log log convention log 
log flog log log log log log ge log dependency pairs modules polynomial interpretations 
dp log log log log log log false true ge log log dependency pairs strictly decrease rules bool ge log weakly decrease 
may apply corollary order show termination bool ge log correct logarithm computed module log log log flog log log log log log dependency pairs apply theorem obtain termination bool ge log log arithmetics may want binary trees integers 
suffices define module tree tree extending tree fl val unary tree val val module dependency pairs 
test tree binary search tree bs introduce module bs bs extending ge tree bs fbs min max bs min min min max max max bs true bs 
ge max ge min bs bs dependency pairs module dp bs bs min min max max bs max bs min bs bs bs bs strictly decrease rules bool ge tree bs weakly decrease polynomial interpretation false true ge min max bs min max bs val bool ge tree bs terminates corollary 
bool bool ge ge log log log log tree tree bs bs modules hierarchy 
eventually order decide tree balanced wb difference sizes left right subtrees compute sizes trees 
size size size 
size size wb true wb ge size size ge size size ge size size wb wb set dependency pairs dp bs bs size size size size wb size wb size wb wb wb wb help polynomial interpretation false true ge val size wb size wb may prove easily simply corollary union rules terminates 
please note simple interpretations 
hierarchical simple termination provide section new notion termination modular unions composable term rewriting systems 
order obtain modularity results distinguish relevant sets rules means dependency relation symbols see def 

definition 
term rewriting system 
rule said defining symbol symbol occurs root position rule said relevant rule symbol occurring defined dependency relation represented graph vertices symbols arc define hierarchical simple termination 
definition 
term rewriting system graph define sets strongly connected components finitely branching term rewriting system said hierarchically simply terminating hst short ordering pair constitutes founded simplification ordering dependency pairs hs ti root symbols occurs rules relevant rules defining symbols theorem 
hierarchical simple termination modular property unions composable finitely branching trs 
proof 
composable systems consists rules defining symbols common hierarchically simply terminating 
definition composable systems know rules relevant rules rules relevant rules suitable ordering pairs hierarchical simple termination may show hierarchical simple termination hierarchical simple termination clearly general simple termination uses dependency pairs 
includes dp simple termination strictly modular decomposition 
related notion rewriting modules def 
defined new framework suited study intrinsic hierarchical structure term rewriting systems 
module framework applications regarding termination proofs 
particular help dependency pairs modules def 
obtain powerful methods theorems corollaries allow proofs build incrementally modularly 
compare dershowitz results 
restrict constructor systems slightly general definition hierarchical extensions obtain general conditions 
criteria fully syntactical applicable trs met practice suited automation designed purpose finely tuned conditions dershowitz 
similarly krishna rao proper extensions restricted proper extensions constrained modules extensions 
arts giesl exploit modular structure dependency graphs 
approach fundamentally different constraints irrelevant rules filtered optimization dependency graphs case constraints generated framework 
criterion puts weak conditions system extension 
drawback wanted get rid fundamentally acts break real incremental modular proving 
noticed rem 
criteria theorem require irrelevant sets rules 
framework furthermore provides general case powerful results got special case innermost rewriting 
modular approach combines advantages 
constraints suitable orderings obtain modular analysis numerous step global approach relevant rules considered 
restrictive reasons optimizations dependency graphs may applied afterward step 
numerous weaker ordering constraints easier solve approach 
especially noticeable ordering level instance polynomial interpretations far simpler proof modules powerful methods dependency pairs dependency graphs 
results implemented cime rewriting tool 
considerably enhance completely automated search termination proofs significant speed may observed large examples occur practice verification longer reach 
author thomas arts interesting examples gave grateful bernhard gramlich claude march judicious comments discussions 
arts giesl modularity termination dependency pairs 
nipkow ed th international conference rewriting techniques applications vol 
lecture notes computer science 
tsukuba japan pp 

arts giesl termination term rewriting dependency pairs 
theoretical computer science 
ferreira rubio complete monotonic semantic path orderings 
mcallester ed proceedings th conference automated deduction vol 
lecture notes artificial intelligence 
pittsburgh usa pp 

march cime version 
available www lri fr demons cime 
html 
dershowitz termination rewriting 
journal symbolic computation 
dershowitz hierarchical termination 
dershowitz lindenstrauss eds proceedings fourth international workshop conditional typed rewriting systems jerusalem israel july vol 

berlin pp 

dershowitz 
jouannaud notations rewriting 
eatcs bulletin 
gramlich generalized sufficient conditions modular termination rewriting 
applicable algebra engineering communication computing 
gramlich relations restricted termination confluence properties rewrite systems 
fundamenta 
kurihara decomposable termination composable term rewriting systems 
ieice 
nakamura toyama argument filtering transformation 
nadathur ed principles practice declarative programming international conference ppdp vol 
lecture notes computer science 
paris pp 

middeldorp toyama completeness combinations constructor systems 
technical report cwi 
middeldorp toyama completeness combinations constructor systems 
proc 
th rewriting techniques applications como lncs 
como italy 
ohlebusch modularity termination term rewriting systems 
theoretical computer science 
ohlebusch modular properties composable term rewriting systems 
journal symbolic computation 
rao modular proofs completeness hierarchical term rewriting systems 
theoretical computer science 
rao simple termination hierarchical combinations term rewriting systems 
theoretical aspects computer software vol 
lecture notes computer science 
pp 

rusinowitch termination direct sum term rewriting systems 
information processing letters 
toyama counterexamples termination direct sum term rewriting systems 
information processing letters 
approche des de 
de doctorat universit paris sud orsay france 

