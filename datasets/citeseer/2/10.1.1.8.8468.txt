electronic notes theoretical computer science url www elsevier nl locate entcs volume html pages liveness checking safety checking armin biere viktor computer systems institute eth zentrum rz ch rich switzerland temporal logic widely specifying hardware software systems 
typically types properties distinguished safety liveness properties 
safety easily checked reachability analysis efficient checkers safety properties exist sophisticated algorithms considered necessary checking liveness 
describe efficient translation liveness checking problems safety checking problems 
counter example detected saving previously visited state additional state recording component checking loop closing condition 
approach handles fairness extends full ltl 
model checking successful approaches verifying temporal specifications hardware software systems :10.1.1.111.7245:10.1.1.111.7245
system properties specified temporal logic various formalisms exist 
typically types properties distinguished safety liveness 
practical applications safety properties prevalent 
efficient algorithms tools devised checking safety properties 
specification systems contains liveness parts 
describe generic translation procedure takes system liveness specification translates new system safety property valid iff liveness property original system holds 
main motivation enable existing tools techniques check liveness originally supposed safety properties 
instance sequential atpg automatic test pattern generation check simple classes temporal formulae general liveness properties reach 
applies ste symbolic trajectory evaluation generalized version ste published handle regular properties 
technologies industry decade efficient implementations exist 
symbolic model checking vast literature optimizations applicable safety 
frontier set simplification dense published elsevier science biere prioritized reachability analysis try speed bdd reachability calculation adapted handle liveness far 
forward model checking attempt improve backward symbolic model checking visiting reachable states catching bugs early possible 
motivated observation checking safety properties amounts reachability analysis 
forward model checking tries forward image calculations exclusively 
able translate liveness safety expect benefits changing model checking algorithms 
kupferman vardi developed approach simplify model checking safety properties searching finite violating prefixes 
translation follow similar goal reducing liveness properties safety properties enabling application wider range verification algorithms 
translation structural 
respects hierarchy system easily applied manually design entry level hardware description language 
particularly useful tool include model checking algorithms safety checking usually case commercial setting access source code 
basic idea borrowed explicit fly model checking bounded model checking counter example liveness property finite system lasso shaped consists prefix leads loop :10.1.1.51.2625:10.1.1.42.8033
major challenge detect loop :10.1.1.42.8033
translation loop saving previously visited state checking current state occurred 
simple liveness properties result translation larger original model checking problem 
show handle complicated liveness properties instance involving operator 
adding fairness constraints technique extended full ltl 
section elaborates various examples establish intuitive understanding translation 
sect 
introduce necessary formal background 
precisely define translation sect 
prove correctness compare complexity original resulting model checking problems 
section mention extend translation handle fairness ltl 
preliminary experiments sect 
show feasibility approach sect 
concludes 
intuition counter example trace simple liveness property afp infinite path body liveness property holds equivalently holds path 
restrict models finite trace assumed lasso shaped depicted fig 

consists prefix leads loop starting loop state sl 
biere sl sl sk fig 

generic lasso shaped counter example trace afp 
infinite trace finite model construct lasso shaped trace closing loop soon state occurs second time 
note holds constructed path 
observation core various model checking algorithms 
examples explicit state algorithms chi automata unfolding liveness properties bounded model checking :10.1.1.51.2625:10.1.1.51.2625:10.1.1.42.8033
restriction need search lasso shaped counter examples 
translations discussed 
translation shown illustration called counter translation 
extends known technique check bounded liveness practical value 
main contribution state recording translation 
produces state machine may save time previously reached state 
translations modify property checked add additional checking components model maintaining bisimulation equivalence :10.1.1.111.7245:10.1.1.111.7245
counter translation model checking applications observed liveness property afp restricted adding bound number steps body hold 
bound specification may determined manual inspection 
bounded liveness property af defined af xp times clearly af implies afp 
reverse direction true bound chosen large particular large number states model states reachable steps 
trivial translation just exchange afp af number states 
expansion af results large formula especially context symbolic model checking 
avoid explicit expansion counter translation adds counter model counts number states reached far 
remains check counter reaches number states original model hold state reached far 
property checked attaching boolean flag model remembers satisfied past 
step property dependent 
example modulo counter initial state 
fig 
smv program state graph counter shown 
module main var state define state assign init state state case state state esac spec af biere fig 

modulo counter unreachable state 
states reachable state unreachable counter wraps back 
state space example encompasses states 
transitions check stayed false way initial state 
case counter example 
liveness property valid potential lasso shaped trace length contains state holds 
allows trivial translation liveness property safety property 
model extended boolean variable live denotes true 
variable counter counts number states 
left column fig 
shows translated specification 
liveness property af translates safety property ag finished live 
translation extremely inefficient requires traversing states 
state recording translation conservatively searching long required worst case search terminate previously seen state sl traversed 
time loop liveness property hold state visited 
counter example see fig 

state space traversal memoryless way explicitly expressing property true earlier time soon reach state sl second time 
new model needs way saving previously seen state detecting loop 
know see current state oracle save tells model current state assumed state loop 
prevent overwriting copy variable saved 
sk state loop sl encountered see fig 

time predicate looped module main var state counter live boolean define state assign init state state case state state esac init counter counter case counter counter counter esac init live live live define finished counter spec ag finished live biere module main var state loop live boolean save boolean saved boolean define state assign init state state case state state esac init saved saved saved save loop case saved save state loop esac init live live live define looped saved state loop spec ag looped live counter safe fig 

counter translation new translation liveness property 
sl sk sk fig 

loop checking afp counter examples reachability 
true property fulfilled 
visualized fig 
loop closing condition looped checks current state visited earlier 
correspondingly fig 
shows state fig 

live saved refer current state 
purpose remember respectively save true past 
particular initial value false 
biere translation fairness safety fairness properties translated methodology 
shows example tasks count 
step task allowed take turn 
liveness property stating task eventually arrives state fulfilled turns taken fair manner task eventually gets turn 
order include fairness example define new property fair 
records fairness property true loop 
save saved global shared task modules 
preliminaries notation follows :10.1.1.111.7245:10.1.1.111.7245
set atomic propositions 
kripke structure simply model wrt 
defined finite set states set initial states transition relation labelling function 
assume set initial states non empty transition relation total state exists state write similarly 
temporal logic subset ctl time operator eventuality operator treat operator operators detail translation works full ltl includes operators 
consider universal path quantifier propositional operators conjunction negation 
add propositional constants 
set ctl formulae types formulae path formulae state formulae 
atomic propositions state formulae coerced path formulae 
negation maintains type argument 
applies conjunction types arguments match 
conjunction path formula 
temporal operators applied state formulae 
path formula may prefixed path quantifier obtain state formula 
semantics path formulae defined wrt 
paths set paths union finite infinite sequences si si si si 
length defined number transitions 
consider non empty paths 
write si sequence si original path states removed 

validity module task id turn var state assign init state state case turn id state state state esac define state fairness turn id module main var turn task turn task turn define spec af biere module task id turn save saved var state loop fair boolean assign init state state case turn id state state state esac define state looped saved state loop assign init fair fair fair id turn save saved loop case save saved state loop esac module main var turn task turn save saved task turn save saved save boolean saved boolean live boolean define looped looped looped fair fair fair assign init saved saved saved save init live live live spec ag looped fair live live safe fig 

hierarchical translation liveness fairness pure safety 
biere state path formulae infinite defined follows iff iff iff iff iff iff iff exists iff iff boolean operators disjunction implication 
temporal operator globally defined existential path quantifier 
path initialized wrt 
model iff ctl formula valid iff initialized infinite paths 
model checking determines validity model checking problems equivalent iff steps translation sect 
produce equivalent model checking problems proved bisimulation equivalence 
models set atomic propositions bisimulation equivalent iff exists relation properties labelling match 
second exist initial states initial state dual properties hold 
complexity original model checking algorithm simple properties afp agp linear size model particularly linear number states number transitions 
case fly model checking complexity restricted linear number reachable states initialized :10.1.1.51.2625:10.1.1.51.2625
symbolic model checking bdds number reachable states important number fixpoint iterations 
number bounded diameter defined maximal distance states min bfs reachability analysis number iterations restricted maximal distance called radius reachable states possibly varying initial state 
backward fixpoint computations traditional way checking liveness properties introduce similar notion backward radius number backward iterations fixpoint reached 
backward radius depends model property 
note backward forward radius biere related 
instance inductive invariant backward radius checking agp independent size model 
practice pure backward model checking usually outperformed forward model checking restricted version backward model checking approximations fixpoint computation restricted pre computed set reachable states 
translation section precisely describe state recording translation level prove correctness 
application concrete model description language smv input language experiments left reader 
treat counter translation formally 
second part section discuss efficiency translation comparing size diameter original translated model 
part describe fairness ltl 
correctness kripke structure afp liveness property want check 
step construct 
new transition relation defined operates state component original transition relation 
second state component previously reached original state may recorded nondeterministically see fig 

monotonic second state component order iff 
new labelling obtained projection function operating pairs assume new state occur essence translation simulates original behavior introducing dead ends maintaining labelling states 
prove bisimulation equivalent bisimulation prove bisimulation defined extend projection function paths natural way 
easily check paths 
functions provide necessary witnesses existential quantifiers requirements bisimulation 
lemma bisimulation equivalent 
step adds flag remembers valid path far 
result kp sp ip tp lp sp biere ip tp iff rest defined step 
tp monotonic second state component case order natural numbers restricted 
note kp depends property checked 
similar reasoning slightly complex sp transitivity argument gives lemma 
lemma kp bisimulation equivalent 
validity ctl formulae preserved bisimulation equivalence obtain equivalence afp kp afp :10.1.1.111.7245
final step translation consists adding new atomic proposition lp definition shows correctness translation 
theorem afp kp ag equivalent 
proof 
remains shown equivalence ef kp 
assume kp exists infinite initialized path lp 
number states sp finite exist indices 
si ti xi define si xi sl 
clearly initialized legal path kp 
definition sk sl xi lp sj lp get lp proves witness ef assuming extended infinite path obvious way 
note tp total translation introduce dead ends 
reverse direction assume ef holds 
loss generality find initialized path si ti xi deduce sk tk xk 
monotonicity second state component obtain 
tl sl tl 
tk 
construct infinite path xi follows simply set 
define tk xk sl mod 
monotonicity tp second state component xk 
implies si original states determine non validity legal initialized infinite path serves witness complexity objective enable checking liveness properties techniques tools previously reachability calculation safety checking 
biere impact translations complexity model checking reachability calculation quite reasonable 
sketched example fig 
size non canonical symbolic description program code increases small constant factor 
counter translation produce large counter examples 
restrict discussion state recording translation 
global explicit model checking complexity governed number states increases quadratically sp case fly explicit model checking size reachable state space rp interest :10.1.1.51.2625
reachable state contains second component reachable reachable states recorded 
bounded 
bound tight modulo counter model fig 
reachable states 
combination 

reached 
introducing recording flag doubles number rp regarding symbolic model checking bdds results 
relate size reduced ordered bdds transition relation kp 
assuming encoded log state bits encode boolean variables 
important interleave boolean variables second component 
size bdd term may explode 
interleaved order linear factor approx 

factor determined empirically large state spaces 
size bdd bounded size bdd fact computing boolean binary operation bdds produce bdd size linear factor size argument bdds 
size bdd tp compared size bdd may increase linear factor size bdd representing set states holds practice usually small 
similar calculations set initial states show size bdds representing kp bound linear size bdds representing linear number state bits linear size bdd representing set states holds 
static bounds say size bdds fixpoint iterations 
measure dynamic complexity determine bounds diameter radius serve bounds maximal number fixpoint iterations 
note counter translation radius large number states original system traditional symbolic reachability biere analysis impractical medium sized problems 
important observation state recording translation produces smaller diameter dp radius rp theorem dp rp proof 
finite path si ti monotonic second component distinguish cases 

tk sk paths extended legal paths adding fixed non changing second state component 
second case exists 
tl tl 
tk sl cf fig 

sub paths constant second state component case obtain sl sl sk subsumes bound case 
determine bound radius additionally assume initialized 
sl obtain 
reasoning tp monotonic second state component derive dp rp 
substitution derive desired inequalities 
unfortunately examples smaller reachability analysis kp perform fix point iterations 
modulo counter fig 
state example allow states initial states 
larger number backward iterations necessary check liveness property original model large 
fairness ltl translation able incorporate fairness 
fairness constraint simply subset path called fair wrt 
fairness constraint iff state occurs infinitely 
fair infinite written 
formally add fifth component model possibly empty list fairness constraints 

path fair iff fair wrt 
semantics models fairness constraints defined unfair case paths required fair 
bisimulation fairness defined expanding transition definition stated fair paths additional requirement fair paths exists fair path iff :10.1.1.111.7245:10.1.1.111.7245
handle fair kripke structure construct kp sp ip tp lp fp sp ip tp lp defined extended fp 

biere define sp ip 
replacing fairness constraint state bit remembers loop state reached 
natural extension lp 
transition relation satisfied current state iff tp monotonic new fairness components state space 
add new atomic proposition qf qf 
lp defined kp 
prove correctness result including fairness 
theorem afp ag qf equivalent 
number added state bits grows linearly number fairness constraints 
directly corresponds increase size input symbolic model checking 
state space grows exponentially 
diameter radius 
approach feasible explicit model checking small number fairness constraints 
checking ag qf find shortest counter examples 
alternative approach counts number fairness constraints satisfied sofar similar known translation generalized chi automata ordinary chi automata 
produces liveness property single fairness constraint turn translated safety property 
approach space efficient 
requires logarithmic additional state bits 
fails generate counter example traces minimal length 
addition clear binary encoding performs symbolic model checking versus hot encoding discussed 
generalized chi automata ltl translated fair kripke structures translation applies ltl model checking general :10.1.1.51.2625
additionally possible derive special translation rules standard ltl operators 
example handle fp weak operator defined valid path iff hold holds holds path 
adding state bit remembers fulfilled weak easily transformed simple safety property 
biere check true check false counterexample false live count safe live count safe live count safe table counters eventuality fp translated safety property original translation 
check safety properties simultaneously 
experiments section show results translation applied various examples theoretical real world ones 
table divided main parts left part iterations needed correct model middle part model incorrect right part shows iterations needed compute counter example incorrect model 
main parts split column different approach live conventional liveness approach count counter approach example safe state recording translation 
version number forward reverse iterations shown 
simple counters case simple counter table approaches perform linearly number iterations wrt 
model size 
computing counter example requires nearly twice iterations live version opposed method 
counters table desired state reached state step 
iterations needed complete loop backward iterations reach possible predecessors 
counter approach iterations required enumerate states iteration reach state approach requires constant number iterations correct model iteration reach possible successor states states second iteration reach state third iteration reaches initial state iterations required prove liveness loop 
false example requires iterations loop live version backward iteration initial state predecessor 
counter approach inefficient 
counter example analysis shows similar behavior 
biere check true check false counterexample false live count safe live count safe live count safe table skipping counters ieee tree identify protocol ieee protocol serial high speed bus widely interconnect multimedia devices pcs 
ensure correct functioning protocol nodes connected ieee bus required form tree 
tree identify protocol executed time bus configuration changes verify condition elect unique leader extended responsibilities phases protocol 
previous verified properties tree identify protocol smv 
single important property verified tree identify phase designation leader phase protocol reached 
property checked experiments original correct version model version bug preventing successful completion protocol 
smv input language formulated nodes follows af node root node root timeout known problems root timeout known problems state properties :10.1.1.42.8033
separate safety properties ensure timeout known problems occurred 
verified conditions removed model included performance figures 
run protocol nodes left competing root 
case sub protocol invoked resolve situation called root contention 
contending nodes non deterministically choose wait short long time continuing 
nodes chose differently root 
sub protocol repeated 
fairness condition ensures nodes different choice point 
steps translation process described sect 
automated 
translation flat model generated nusmv 
additional variables introduced record saved state represent oracle keep track fairness condition true loop 
simple liveness properties form af translated automatically 
complicated properties need reformulated user automata approach simple transformations biere check true check false false live safe live safe live safe table leader election tree identify protocol iterations check true check false live safe live safe time memory time memory time memory time memory table leader election tree identify protocol similar operator sect 

improved variable order generated 
allow fair comparison live model flattened checking 
cadence smv pentium iii running linux 
execution time memory usage limited hour gb respectively 
optimized variable order provided explicitly dynamic reordering disabled 
separate runs checked dynamic reordering produces comparable orders 
note enabling dynamic reordering increased runtimes dramatically 
configurations nodes ports checked 
table shows number iterations 
table lists execution time seconds memory usage peak number bdd nodes 
combinations nodes ports shown handled time memory bounds 
case safe version requires fewer iterations live version 
correct model safe version needs forward iterations live version 
run time memory usage safe version correct model times higher live version relation improves buggy case 
biere translation allows check liveness properties checking safety properties 
main contributions summarized follows commercial proprietary safety checking tools may feasible user change algorithms 
technique allows apply tools liveness supposed check safety properties 
ii experiments indicate technique comparable specialized algorithms 
additionally able find counter example traces minimal length 
iii translation theoretical results safety checking lifted liveness checking 
special treatment liveness properties justified experiments additional complexity results 
main open question number state bits introduced translation reduced 
want apply method liveness checking sequential atpg ste 
biere cimatti clarke zhu symbolic model checking bdds tacas :10.1.1.42.8033
biere clarke zhu multiple state single state tableaux combining local global model checking correct system design insights advances number lncs 
boppana rajan fujita model checking sequential atpg cav 
browne clarke grumberg characterizing finite kripke structures propositional logic theoretical computer science 
bryant graph algorithms boolean function manipulation ieee transactions computers 
bryant 
seger formal verification digital circuits symbolic ternary system models cav 
burch clarke long mcmillan dill symbolic model checking sequential circuit verification ieee trans 
computer aided design integrated circuits systems 
improved reachability analysis large finite state machines iccad 
chou mathematical foundation symbolic trajectory evaluation cav 
biere cimatti clarke giunchiglia roveri nusmv new symbolic model verifier cav 
clarke emerson design synthesis synchronization skeletons branching time temporal logic ibm workshop logics programs 
clarke grumberg peled model checking mit press :10.1.1.111.7245:10.1.1.111.7245
emerson temporal modal logic handbook theoretical computer science volume formal methods semantics 
gerth peled vardi wolper simple fly automatic verification linear temporal logic th workshop protocol specification testing verification :10.1.1.51.2625
henzinger kupferman qadeer pre historic post modern symbolic model checking cav 
ieee ieee standard high performance serial bus 
std supplement 
nakata ctl model checking forward state traversal iccad 
kupferman vardi model checking safety properties cav 
lamport proving correctness multiprocess programs ieee transactions software engineering 
mcmillan cadence smv www cad eecs berkeley edu smv 
mcmillan symbolic model checking approach state explosion problem kluwer academic publishers 
patel test generation package sequential circuits 
ravi somenzi high density reachability analysis iccad 
biere verifying ieee tree identify protocol smv submitted 
biere simple verification tree identify protocol smv ieee workshop 
seger 
bryant formal verification symbolic evaluation partially ordered trajectories formal methods system design 
yang 
seger generalized symbolic trajectory evaluation iccd 

