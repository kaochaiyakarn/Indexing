apriori depth implementation walter leiden institute advanced computer science universiteit leiden box ra leiden netherlands nl discuss depth implementation apriori devised see 
database algorithm builds trie memory contains frequent itemsets sets contained minsup transactions original database 
minsup threshold value advance 
trie constructed adding item time path corresponds unique frequent itemset 
describe algorithm detail derive theoretical formulas provide experiments 
discuss depth see implementation apriori see fastest known data mining algorithms find frequent itemsets large database sets contained minsup transactions original database 
minsup threshold value advance 
exist implementations apriori see 
focus algorithms assume database fits main memory state affairs fp growth implementation apriori see fastest :10.1.1.3.2424
papers far little attention theoretical complexity 
theoretical basis analysis algorithms 
depth algorithm simple algorithm proceeds follows 
preprocessing involves reading database sorting single items respect support builds trie memory path root downwards corresponds unique frequent itemset consecutive steps items added trie time 
database trie wim department computer science erasmus university box dr rotterdam netherlands eur nl kept main memory cause memory problems usually large particular trie gets larger support threshold decreases 
algorithm outputs paths trie frequent itemsets 
note completed trie allows fast itemset retrieval case online processing 
implementations algorithm time efficient memory efficient called cc cc respectively time efficient version handle low support thresholds 
newest version called cc combines faster implementation runs support thresholds 
describe give formal definitions theoretical formulas discuss program provide experimental results conclude remarks 
algorithm appropriate data structure store frequent itemsets database trie 
running example section dataset 
line represents transaction 
trie frequent patterns shown 
entries cells node trie usually called buckets case hash tree 
bucket identified path root unique frequent itemset 
example trie nodes buckets representing frequent itemsets 
example frequent itemset seen leftmost path trie set 
oldest algorithms finding frequent patterns apriori see 
algorithm successively finds frequent itemsets frequent itemsets frequent itemsets 
itemset items 
frequent itemsets generate candidate itemsets dataset transaction items number bcd cdef frequent itemsets minsup support frequent itemsets ab af abf bf ef ae abe aef bc bef cf 
example dataset frequent itemsets 

example trie support counts 
candidates known frequent subsets elements 
pruning step candidates having infrequent subsets discarded support candidates determined 
way apriori finds frequent patterns implies trie built layer layer 
nodes root depth constructed trie nodes depth constructed 
apriori thought algorithm builds pattern trie breadth way 
propose algorithm builds trie depth way 
explain depth construction trie dataset 
note trie grows right left 
algorithm proceeds follows 
preprocessing step support single item counted infrequent items eliminated 
frequent items denoted 
code executed 
trie including bucket downto added left copy appended subtrie rooted count delete infrequent itemsets procedure count transaction including item itemset supports support 
algorithm 
procedure count determines support itemset bucket subtrie 
achieved database pass transaction including item considered 
transaction time pushed traverses subtrie includes root subtrie updating support fields buckets 
paragraph section refinement part algorithm 
termination algorithm exactly contains frequent itemsets 
illustrates consecutive steps algorithm applied example 
single items surpassing minimum support threshold shape iteration loop shown 
infrequent itemsets deleted iteration mentioned 
start iteration index root trie consists itemsets 
denote itemset name item omitting curly braces commas 
statement line trie may referred new trie composed adding bucket root appending copy value 
newly added buckets new candidates subtrie 
candidate set left part trie drawn bold 
notice ce cef infrequent deleted bcf infrequent deleted abc ac acf infrequent deleted 
illustrating algorithm 
final trie deleting infrequent itemsets identical 
number iterations loop number frequent itemsets 
consequently number database passes number frequent itemsets 
causes algorithm tractable database consideration memory resident 
day memory sizes real constraint 
stated algorithm preprocessing step counts support single item 
preprocessing step items may re ordered 
favorable execution time achieved order items increasing frequency see section formal motivation 
better low support top deeper side left bottom trie high support top shallow part upper right trie 
may distinguish dense data sets sparse datasets 
dense dataset frequent patterns large size high support case test sets chess mushroom see section 
datasets transactions similar 
datasets mainly short patterns called sparse 
longer patterns may exist relatively small support 
real world transaction databases supermarkets belong category 
synthetic datasets section similar properties interesting support thresholds lower dense case 
algorithms finding frequent patterns may divided types algorithms respectively candidate generation apriori instance belongs type 
eclat see may considered instance type 
fp growth algorithm best known instance second type defend point view generate candidates 
dense datasets performs better candidate generating algorithms 
stores dataset way efficient especially dataset similar transactions 
case algorithms apply candidate generation dense sets produce large number candidates 
new candidate related transaction database passes take lot time 
sparse datasets candidate generation suitable method finding frequent patterns 
experience instances apriori family useful searching transaction databases 
results depth algorithm outperforms synthetic transaction sets see section description sets 
note technically speaking full implementation apriori candidate itemset known frequent subset resulting part trie completed 
apart underlying candidate generation mechanism strongly resembles ori 
theoretical complexity denote number transactions called customers denote number products called items 
usually larger 
nonempty itemset define support number customers buy products possibly equivalently number transactions contain smallest number largest number 
line 
put set called frequent called support threshold minsup fixed number advance 
assume itemset frequent effected step algorithms looking considered preprocessing 
database query defined question form customer buy product transaction item posed original database 
note database queries preprocessing phase supports itemsets computed ordered field database inspected 
way sorting items assigned numbers takes time 
number database queries equals proof see 
relies fact order node occur trie path root frequent observation particular node questioned time transaction follows path 
simple version described similar style leading database queries local databases fp trees preprocessing phase 
note extra condition inner summation summands hand summands larger smaller contribution 
sense look total number nodes trie construction connected effort maintaining datastructures 
counting trie node number buckets contains total computed trie ready number remaining buckets equals number frequent sets item node path represents corresponding itemset 
notice complexity heavily depends sorting order items top level 
turns increasing order items beneficial 
suggested contribution itemsets equation happens minimal case 
itemset contribution turns see results detail 
implementation issues section discuss implementation details program 
mentioned section database traversed times 
necessary database memory resident 
fortunately occurrences frequent items need stored 
database represented dimensional boolean array 
efficiency reasons array entry corresponds bit 
function count algorithm considers database transaction transaction horizontal layout chosen cf 

preprocessing steps algorithm section starts 
range item values determined 
necessary test sets bms webview sets values essential initial step 
item support counted 
frequent items selected sorted frequency 
process relevant frequency order prescribes order root trie stated 
sorted frequent items supports retained array 
transaction zero frequent item needs stored memory resident representation database 
root trie constructed information gathered step 
constructing buckets transactions frequent items relevant 
step count relevant transactions 
step databases stored twodimensional array horizontal layout 
item new number rank frequency order 
length array equals result step width determined number frequent items 
preparatory practice usually takes seconds code described section executed 
cells root constructed result initial step 
line section backtracking applied inspect path 
inspecting path aborted soon item outside current transaction 
obviously processing transaction count procedure relatively expensive task unfortunately inevitable whichever version apriori 
mentioned implementations time efficient memory efficient 
comparisons 
newest implementation called cc combines versions refinement 
appending copy see section counting done auxiliary fields original frequent buckets copied underneath 
deletion infrequent itemsets line unnecessary leads better memory management 
improvement achieved auxiliary fields adding root items simultaneously iteration halving number database passes cost bookkeeping 
experiments relatively small database chess kb transactions available website cs helsinki fi html database mushroom kb transactions available website known ibm almaden synthetic databases see shall examine complexity algorithm :10.1.1.40.6757
databases coherent records chess mushroom records synthetic databases 
parameters generating synthetic database number transactions thousands average transaction size average length called maximal potentially large itemsets 
number items set design 
mb mb available website mentioned contain transactions 
runtime seconds runtime seconds database chess execution time df number frequent sets scale right axis relative support 
experimental results database 
database mushroom execution time df number frequent sets scale right axis relative support 
experimental results database 
experiments conducted pentium iv machine mb memory ghz running red hat linux 
program developed gnu compiler version 
statistics plotted graphs execution time seconds algorithm see section total number frequent itemsets figures corresponding axis right hand side scales 
execution time excludes preprocessing phase database read times order detect frequent items see number sets number sets runtime seconds database execution time df number frequent sets scale right axis relative support 
experimental results database 
runtime seconds database execution time df number frequent sets scale right axis relative support 
experimental results database 
excluded time needed print resulting itemsets 
actions usually take seconds 
number frequent itemsets previous sections assumed itemsets frequent range experiments database chess mushroom 
note high support thresholds mushroom chess support threshold low feasible 
largest output files produced size mb chess minsup having frequent sets frequent itemsets mb mushroom minsup having frequent sets frequent itemsets mb minsup having frequent sets frequent itemsets frequent itemset mb number sets number sets minsup having frequent sets frequent itemsets frequent itemset 
final trie case occupies approximately mb memory output file case times large 
note sets chess database minsup require seconds find frequent itemsets mushroom minsup take seconds differing approximately factor time 
difference runtime probably caused difference absolute minsup value 
cell corresponding frequent itemset visited times case times case 
similar phenomenon observed comparing absolute minsup value minsup takes versus seconds 
outputs orders magnitude runtimes differ substantially 
see number frequent itemsets sizes sets absolute minsup value major factor determining runtime 
addressed depth implementation apriori 
experience competes known algorithm especially applied large databases transactions 
storing database primary memory longer problem 
hand storing candidates causes trouble situations dense database considered small support threshold 
case algorithm candidates 
desirable look method stores candidates secondary memory 
obvious topic research 
knowledge algorithm cope memory limitations 
real world retail databases algorithm surpassed showed 
optimizations possible 
improving code ideas diffsets vertical layouts 
simple practical straightforward fast algorithm finding frequent itemsets 
agrawal mannila srikant toivonen verkamo 
fast discovery association rules 
fayyad piatetsky shapiro smyth uthurusamy editors advances knowledge discovery data mining pages 
aaai mit press 
agrawal srikant 
fast algorithms mining association rules 
jarke zaniolo editors proceedings th international conference large data bases vldb pages 
morgan kaufmann 
de 
theoretical practical comparison depth fp growth implementations apriori 
blockeel denecker editors proceedings fourteenth belgium netherlands artificial intelligence conference pages 

survey frequent pattern mining 
helsinki 

han pei yin 
mining frequent patterns candidate generation 
proceedings acm sigmod international conference management data sigmod pages 
hipp nther 
mining association rules deriving superior algorithm analyzing today approaches 
komorowski editors principles data mining knowledge discovery proceedings th european conference pkdd springer lecture notes computer science pages 
springer verlag 

complexity analysis depth fp growth implementations apriori 
rosenfeld editors machine learning data mining pattern recognition proceedings springer lecture notes artificial intelligence pages 
springer verlag 

mining frequent itemsets memory resident databases 
gyssens editors proceedings eleventh belgium netherlands conference artificial intelligence pages 
zaki 
scalable algorithms association mining 
ieee transactions knowledge data engineering 
zaki gouda 
fast vertical mining diffsets 
proceedings th acm sigkdd international conference knowledge discovery data mining 
zheng kohavi mason 
real world performance association rule algorithms 
provost srikant editors proceedings seventh acm sigkdd international conference knowledge discovery data mining kdd pages 
