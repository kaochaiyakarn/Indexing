selecting predicates implications program analysis nii alan donovan lee lin michael ernst mit lab computer science technology square cambridge ma usa lcs mit edu pag lcs mit edu daikon research proposes evaluates techniques selecting predicates conditional program properties implications consequent true predicate true 
conditional properties prevalent recursive data structures behave di erently base recursive cases situations 
experimental context research dynamic detection program invariants ideas applicable domains 
computationally infeasible try possible predicate conditional properties compare procedure return analysis static analysis clustering random selection context sensitive analysis selecting predicates 
simple static analysis fairly ective presumably important properties program tested expressed programmers 
important properties implicit program code execution 
give examples important properties discovered analyses 
experimentally evaluate techniques tasks statically proving absence runtime errors theorem prover detecting errors separating erroneous correct executions 
show techniques improve performance tasks evaluate costs 

goal program analysis determine facts program 
facts collected sake user depended transformation aid analysis 
properties typically take form predicates true particular program point points 
predicates called invariants program speci cation collection invariants 
usefulness program analysis depends properties report 
tradeo expressiveness eciency increasing grammar program analysis output tends results useful analysis costly 
cost arises checking potential properties new mechanisms required order detect new classes properties 
major challenge increasing grammar program analysis making analysis unreasonably expensive degrading quality output measured human machine users output 
investigates techniques expanding output grammar speci dynamic program analysis program executions produces speci cations sets invariants output 
section describes technique 
base analysis reports properties preconditions postconditions representation invariants unconditionally true test suite 
research adds implications form disjunctions special case implications 
conditional invariant invariant consequent true predicate true 
instance local invariant node heap left value value right value value true left right non null 
conditional invariants particularly important recursive data structures di erent properties typically hold base case recursive case 
extending dynamic analysis check implications trivial infeasible check invariants base analysis produce 
reason runtime cost analysis checks invariant entire program executions proposed change squares number potential invariants checked 
serious objection concerns output accuracy 
checking say times properties increase number false positives properties reported true useful user current task factor 
acceptable number true positives increased factor 
infeasible check dynamic analysis restrict implications checks 
propose restricting properties predicate permitting range properties reportable analysis 
considers techniques detailed section selecting predicates implications procedure return analysis static analysis clustering random selection context sensitive analysis 
second dynamic analyses examine program executions program text 
enables produce information predicates program behavior apparent program text 
enables programs source code available libraries system components direct control software engineer running tool 
evaluated techniques di erent ways 
compared accuracy produced invariants accuracy measured program veri cation task invariants instrumented program original program test suite run instrument data trace database detect invariants splitting conditions architecture daikon tool dynamic invariant detection 
splitting conditions input optional enables detection implications form 
focus selection splitting conditions 
section 
second determined techniques may lead programmers errors underlying faulty behavior section 
third performed ad hoc evaluation reading results see program properties revealed unexpected valuable programmer familiar code section 
discussing techniques evaluation provides background dynamic technique detecting program invariants section details mechanism detecting implications section 
rest focuses policy decisions implications detected 
section describes policies detail section evaluates 
section discusses related section concludes 

background dynamic invariant detection section brie describes dynamic detection program invariants daikon implementation 
full details appear ern ecgn 
dynamic invariant detection discovers invariants program executions instrumenting target program trace variables interest running instrumented program test suite inferring invariants instrumented values 
inference step tests set possible invariants values captured instrumented variables invariants tested sucient degree cation reported programmer 
dynamic approaches testing pro ling accuracy inferred invariants depends part quality completeness test cases 
daikon invariant detector language independent currently includes java ioa 
daikon detects invariants speci program points procedure entries exits program point treated independently 
invariant detector provided variable trace contains execution program point values variables scope point 
set possible invariants tested various combinations traced variables 
scalar variables computed constants examples checked invariants equality constant small set constants fa cg lying range non zero modulus mod linear relationships ax ordering functions fn 
invariants involving sequence variable array linked list include minimum 
split data parts 

compute invariants subset data odd 
compare results produce implications mechanism dynamic detection implications 
maximum sequence values lexicographical ordering element ordering invariants holding elements sequence membership 
sequences example checked invariants elementwise linear relationship lexicographic comparison subsequence relationship 
variable tuple variables scope program point potential invariant tested 
potential unary invariant checked variables potential binary invariant checked pairs variables forth 
potential invariant checked examining sample tuple values variables tested turn 
soon sample satisfying invariant encountered invariant known hold checked subsequent samples 
false invariants tend ed quickly cost detecting invariants tends proportional number invariants discovered 
invariants inexpensive test require full edged theorem proving 
invariant reported adequate statistical evidence 
particular inadequate number observations observed patterns may mere coincidence 
consequently detected invariant daikon computes probability property appear chance random set samples 
property reported probability smaller user de ned con dence parameter ecgn 
daikon invariant detector available pag lcs mit edu daikon 
detecting implications shows mechanism dynamic detection implications ern 
directly testing speci invariants invariant detector provided splitting conditions generates implications may may splitting conditions invariant detector rst splits input data variable values parts splitting condition selection splitting condition main problem detection implications elements elements sets invariants create implications fs mutually output pseudocode creation implications invariants mutually exclusive subsets data 
invariants implications simpli ed creation implications invariants subsets data 
left portion gure shows invariants subsets middle portion shows implications output calls create implications routine appears unconditionally appear implication 
right portion shows implications logical simpli cation 
implications focus 
data split parts ordinary invariant detection performed detect non implication invariants subset data 
separately detected invariants combined implications possible 
splitting condition poorly chosen implications hold data invariants detected subset data implications reported 
gives pseudocode third step creation implications invariants subsets data 
create implications routine run twice swapping arguments results simpli ed standard rules boolean logic 
gives concrete example algorithm behavior 
mutually exclusive invariant implies true subset data 
true subsets mutually exhaustive instance data subsets induce invariant sets fa bg bg fa bg valid examine rst subsets data conclude 
necessary universally true property consequent implication universal property appears unconditionally 
words universally true sense outputting 
implication predicates need splitting conditions invariants detected subsets data 
resulting implications created predicates limited pre speci ed splitting conditions example 
daikon able re ne splitting conditions simpler exact predicates see 
practice splitting condition appear subset data negation appears subset 
reasons splitting condition negation detected subset data 
rst reason splitting condition inexpressible daikon grammar 
easy extend algorithm uses splitting condition implication predicate cases 
inexpressible invariants capabilities tools static checkers see section 
second reason splitting condition detected subset data stronger condition detected daikon 
concern weaker condition detected creation implications 
daikon performs output suppresses implied invariants add new information clutter output 
stronger implies daikon check true report similarly check true report third reason splitting condition expressible true statistically justi ed suppressed daikon output 
occur example subsets small suppression infrequent usually advantageous 
eliminating statistically ed invariants tends greatly reduce size daikon output typically reduce usefulness result 

techniques selecting predicates reduced problem detecting predicates selecting splitting conditions 
section outlines techniques detecting splitting conditions experimentally evaluated procedure return analysis simple static analysis clustering random selection contextsensitive analysis 
section proposes additional techniques 
procedure return analysis simple splitting conditions dynamic checks procedure returns built daikon 
disabled experiments order assess ecacy 
rst splits data return site 
procedure multiple return statements evidence di erent behaviors may normal case may exceptional case fast path computation base case di erent manner 
splitting return site captures di erences 
second splits boolean return values separating cases procedure returns true returns false 
static analysis daikon uses simple static analysis selecting splitting conditions 
boolean condition program instance test statement splitting condition 
additionally body pure boolean member function class analyzed 
functions side ect free non exception throwing allocations permitted long new objects escape 
sophisticated static analysis say data ow analysis interpretation clearly possible felt need 
rationale approach programmer considered condition worth testing relevant problem 
furthermore test ect implementation condition may ect speci cation externally visible behavior 
case instance loops conditions may local variables sensibly splitting conditions speci cation level 
opportune time note daikon permits splitting conditions associated single program point procedure entry exit indiscriminately possible program point 
experiments option 
splitting conditions concern global variables permits splitting condition produced program point 
splitting conditions concern procedure parameters typically valid program points variables names program point 
occasionally programmers consistently speci parameter names speci purposes seen quite cases splitting condition produced speci program point advantageously 
instance condition relevant program state statically checked routine checks explicitly 
similar situations arise splitting condition produced certain places splitting strategies 
clustering cluster analysis clustering multivariate analysis technique creates groups clusters self similar datapoints 
clustering aims partition datapoints clusters internally homogeneous members group similar externally heterogeneous members di erent groups di erent 
clustering widely technique arti cial intelligence data mining information retrieval applied problems domains see section 
splitting conditions intended split data traces parts contain similar conditions consequents implications di erent parts predicates implications 
clustering exactly goals reasoned clustering ective detecting splitting conditions 
furthermore clustering purely dynamic technique examines run time variable values separates groups may discover distinctions data dicult impossible detect traditional means 
demonstrates steps producing splitting conditions cluster analysis 
clustering performed data trace le 
program point clustered individually 
datapoint tuple variable values value variable scope program point 
tuple variable values assigned cluster numbered data trace le rewritten add new variable cluster sample 
section describes clustering algorithm greater de invariants detect invariants data trace database clustering augmented data trace splitting conditions extract rhs splitting conditions producing splitting conditions cluster analysis 
augmented data traces contain new variable cluster program point intermediate splitting conditions test variable 
nal step removes mention cluster variables resulting splitting conditions original data trace le 
tail 
second step run daikon augmented data trace le 
recursive invocation daikon relies detection conditional invariants 
splitting conditions supplied recursive daikon invocation form cluster possible value cluster variable 
daikon produces output ordinarily plus additional implications arising splitting conditions 
third step extracts consequent implication predicate mentions cluster variable 
consequents mention variables original data trace le properties true clusters 
output splitting conditions original unmodi ed data trace le 
refining splitting conditions procedure employs invariant detection produce set splitting conditions employed nal invocation invariant detection 
alternative pass technique add cluster variable trace le perform invariant detection trace le lter cluster variable resulting invariants 
pass process performs invariant detection twice preferable pass technique reasons 
pass procedure produces set splitting conditions original data traces 
human readable easing inspection editing reused invariant detection steps 
second performing invariant detection helps re ne cluster information 
clustering inherently statistical inexact may partition data exactly desired 
long cluster induces desired properties extra invariant detection step leverage desired splitting condition 
original clustering produces desired grouping additional step harm 
example consider 
clusters nearly exactly match true separation behaviors non cluster related implications reported 
implication cluster produced splitting condition produces desired properties 
random selection technique section relies similar re nement imperfect initial data subsetting 
clustering details common clustering techniques means hierarchical 
means technique starts cluster cluster desired split re nement cluster information extra step invariant detection 
groups created clustering approximate exactly match natural division data triangles squares 
extra invariant detection step produces desired property splitting condition 
random clusters repeatedly assigns points nearest cluster recomputes cluster centroids clusters centroids changing 
experimented hierarchical clustering starts point cluster repeatedly merges closest clusters single cluster 
hierarchical clustering computationally expensive gave identical results experiments 
input ran means clustering times chose best result minimum sum distances points cluster centroids 
repeated trials avoid returning poor local minimum 
chose gave results preliminary experiments result contained clusters 
experiments tended produce results clusters split likewise 
little advantage running algorithm 
clustering operates points dimensional space 
point single program point execution procedure entry dimensions values scalar variables scope program point 
performing clustering normalized data dimension mean standard deviation 
ensures large di erences attributes oating point values swamp smaller di erences attributes booleans 
random selection randomized algorithms seen fruitful application problem domains just ective nding splitting conditions enable production implications 
select splitting conditions randomized analysis 
select di erent subsets data size perform invariant detection subset 
invariant detected subsets detected full data splitting condition 
clustering technique randomly selected subsets data need perfect 
suppose likelihood detection fraction data satisfying property likelihood nding arbitrary split random selection 
size randomly chosen subset number subsets 
likelihood detection fraction data satisfying property likelihood nding arbitrary split random selection comparison invariants full data 
size randomly chosen subset number subsets 
property holds fraction data 
detected ordinary unconditional invariant detection 
randomly selected subsets data happens contain datapoints property holds condition detected splitting conditions invariant detection 
shows property detected technique values property holds elements subset probability property detected probability trial 
property holds subsets probability quantity graphed 
alternate technique compare invariants detected subsets invariants detected full data 
avoids need potentially costly full run daikon 
analysis changes follows 
property holds elements probability property negation holds subsets invariants daikon data trace database random selection splitting conditions size trace daikon set difference invariants daikon size trace 
invariants union randomized algorithm choosing splitting conditions 
technique outputs invariant detected randomly chosen subset data detected data 
probability holds subsets detected adjust value rs rs 
graphs quantity values indicates alternative approach superior relatively uncommon properties worse rarely violated properties 
property negation expressible daikon grammar usually case original approach dominates 
likelihood detecting property improved reducing increasing danger reducing smaller subset invariants statistically justi ed resulting invariants small sample 
danger increasing linearly increases chose experiments 
figures indicate random selection technique ective unbalanced data near example counterexample appears subset size believe interesting properties data moderately unbalanced 
example base case appears infrequently data structures linked lists unusual conditions special case code paths tend executed occasionally bugs dicult identify reproduce track manifest rarely 
example illustrates ecacy technique 
rst experiment random splitting applied water jug problem popularized lm die hard 
water holding say exactly holding say exactly calibrations ll empty pour water jug order leave exactly 
expected obtain properties problem sizes relatively prime 
addition learned minimal length solutions step goal size size number steps odd numbered steps ll empty jug numbered steps pour jug possible jug 
aware property random splitting 
context sensitive dynamic analysis default invariant detection context insensitive output properties hold executions program point 
procedures di erent ways di erent clients 
context sensitive analysis distinguishes di erent paths program point 
example addelement method polymorphic container class java util vector called string argument call site integer argument 
ordinary invariant detection report obj type 
preferable note vector homogeneous container 
common pass xed values callsite especially functions arguments 
xed values statically constant dynamically unchanging passed function determine behavior 
example unix system call parameter determines arithmetic applied offset parameter 
splitting caller enables detection invariants set calculation seek set position set seek cur position orig position set seek position length set example berkeley sockets accept procedure parameters addr null non null 
types call invariant detected splitting caller enables detection addr null null 
extended invariant detection perform splitting calling context adding data traces procedure entries exits variables indicate call site 
instrumenter transforms programs add additional parameter procedures assign unique identi er call site pass identi er call 
invariant detector supplied splitting conditions new call site parameters similarly clustering technique 
splitting conditions specify calls single call site calls single procedure calls single class achieved making splitting conditions disjunctions single call sites 
postprocessing step invariant detection converts predicates call site ids statements context changing caller called method 
policies techniques divide data parts exhibit di erent behaviors plan investigate additional ones 
candidates 
special values policy compares variable preselected values chosen statically null zero literals source code dynamically commonly occurring values minima maxima 
policy exceptions detected invariants tracks variable values violate potential invariants immediately discarding ed invariant 
number falsifying samples moderate samples separately processed resulting nearly true invariant plus invariant exceptions 
additionally programmers select splitting conditions hand strategy 
daikon manual speci es le format splitting conditions format experiments 
programmers usually intuitions properties important interest relevant particular task 
additionally programmers supply extra information test case group particular run came order compare characteristics 

evaluation evaluated section policies selecting splitting conditions dynamic detection implications di erent ways 
rst experimental evaluation measured accuracy invariants program veri cation task section 
second experimental evaluation measured implications indicated explained faulty behavior section 
third evaluation qualitative assessed usefulness resulting implications section 
report results experiments terms precision recall standard measures information retrieval 
suppose goal set answers reported set answers produced technique correct set intersection goal reported sets 
precision measure correctness de ned correct reported recall measure completeness de ned correct goal measures 
static checking experiment static checking esc java static checker det ln verify invariants detected daikon invariant detector 
esc java statically detects null dereference errors array bounds errors type cast errors 
programmers write program annotations similar avor assert statements 
daikon automatically insert output programs form esc java annotations 
esc java issues warnings annotations veri ed potential run time errors 
daikon output may completely veri able esc java 
veri cation may require removal certain annotations veri able universally true checker capabilities 
veri cation may require addition missing annotations missing annotations necessary correctness proof veri cation necessary annotations 
performed removals additions hand order nd veri able set annotations closest daikon output 
task far state art program veri cation 
processing step performed research automatic human intervention required 
number changes daikon output measure accuracy words human perform order verify lack run time errors code 
measuring precision recall veri able set goal set 
splitting conditions adds implications daikon output 
adding invariants may increase recall including condition necessary veri cation new invariants may decrease precision including invariants true veri able 
anecdotal evidence controlled user experiments ne demonstrated recall important precision users 
users easily skip delete undesirable invariants trouble producing annotations scratch particularly implications tend dicult invariants users write 
adding invariants may worthwhile precision decreases 
analyzed programs listed 
stackar come data structures textbook wei vector part java standard library remaining programs solutions assignments programming course mit 
gives experimental results 
programs return value analysis produced smallest number implications followed static analysis clustering random splitting respectively 
previous user studies ne determined object invariants particularly troublesome users state furthermore users little troubled imprecision extraneous properties daikon output 
clustering analysis able recover twelve invariants counterbalanced drop precision 
random selection produced static analysis produced twelve troublesome invariants missing output return value analysis 
invariants involved comparisons variables program text dicult people static analyses directly relate 
dynamic techniques ignore program structure hindered structure program text 
despite successes dynamic techniques recall better simple static analysis 
false positives irrelevant splitting conditions coincidental detected invariants reduced relative precision 
indicates techniques throttle output may necessary 
static analysis produced relatively valid splitting conditions conditions program called functions local variables valid predicates procedure entries exits 
potential explanation results total number missing properties relatively low base case 
return value analysis produced nearly invariants esc java required veri cation 
little room techniques improve recall 
error detection experiment error detection uses novel methodology helping locate semantic error may underly program faults 
insight motivating technique bugs induce di erent program behaviors program behaves di erently erroneous runs correct runs 
di erence erroneous run may exhibit fault 
program data structures control ow ected error 
program size return static cluster random program loc ncnb prec 
recall prec 
recall prec 
recall prec 
recall prec 
recall stackar graph vector ratpoly total invariants detected daikon veri ed esc java 
loc total lines code 
ncnb non comment non blank lines code 
prec precision reported invariants ratio veri able veri able plus able invariants 
recall recall reported invariants ratio veri able veri able plus missing 
goal capture di erences user 
di erences may lead programmers underlying errors needing understand faults deeply required 
methodology requires user cooperation 
user set automatically generated implications result di ering behaviors target program 
speculate errors program dynamically detected implications reveal errors 
experimentally veri ed speculation 
anecdotal results observed performing study strongly support supposition 
cases examining invariants looking code able correctly guess exactly errors existed target program 
programmers equally ective interpreting results bene error localization technology 
di erent scenarios software engineer tool locate error 

user knows errors test suite knows test cases fault revealing 
daikon produce invariants splitting condition test case fault revealing 
resulting conditional invariants capture di erences faulty non faulty runs explicate data structures variable values underly faulty behavior 
daikon generalization multiple faulty runs spares user distracted speci cs test case personally examining test cases 

user knows errors exist know test cases expose user know errors exist wishes evidence potential errors 
situation user list implications hopes detected rst scenario lead user error 
anecdotal evidence indicates technique ective scenarios 
evaluation focuses scenario challenging interesting existing solutions satisfactory scenario 
approach detect conditional invariants user 
user examines conditional invariants may irrelevant errors may indicate underlying causes faults 
know imprecision tends little hindrance long desirable results completely xor invariants fault revealing detect invariants non fault revealing detect invariants goal invariants traces detect invariants reported invariants correct invariants invariants intersect splitting conditions extract rhs invariants error detection 
swamped irrelevant output 
evaluated technique user study analytically 
diagrams evaluation technique 
goal set invariants ones created rst scenario user split test case fault revealing 
simulate running daikon individually fault revealing non fault revealing tests 
goal invariants detected inputs 
reported invariants resulting running daikon augmented set splitting conditions produced techniques section 
goal reported sets compute precision recall described section 
evaluated technique di erent set programs 
set programs written speci cation 
sets came programming competition website 
programs submitted website publishes actual submissions test cases match complete 
contests determined football scores achieved elements distributed bins lines drawn pass certain points 
selected total submissions contained real errors 
set programs written students undergraduate class mit laboratory software engineering 
selected assignments implemented datatype polynomials rational coecients 
programs contained real naturally program size return static cluster random program ver 
loc ncnb prec 
recall prec 
recall prec 
recall prec 
recall nfl 
contest 

ratpoly 
total detection invariants induced program errors 
ver number versions program 
loc average total lines code version 
ncnb average non comment non blank lines code 
prec precision reported invariants ratio correct reported 
recall recall reported invariants ratio correct goal 
occurring errors 
students week complete assignment competitors time pressure 
test suites tended exhaustive better exercise boundary cases augmented ort rivals 
note referees nal version evaluate popular siemens programs contain manually seeded faults space program contains real faults 
summarizes experimental results 
return value analysis rarely proposed splitting conditions reported invariants set empty contest problems 
rational polynomial example return value analysis returned average fault revealing invariants 
static analysis strategy reported relatively invariants compared strategies 
cluster analysis performed extraordinarily nfl programs programs 
ratpoly programs clustering produced additional invariants return value analysis 
suggests data naturally partitioned clustering ective data fall easily separable groups 
clustering complement techniques cases produces return value analysis 
random technique produced far largest set splitting conditions largest set reported invariants order magnitude approaches 
ratpoly translated invariants line code large unmanageable number 
invariants reported fault revealing parsimonious methods precision remained acceptable 
words hundreds thousands invariants reported fault revealing user need examine led cause error 
words large amount output hindrance 
furthermore reported invariants permitted random method reveal differences behavior erroneous non erroneous runs words potential bugs indicated output 
frequent source incorrect reported invariants minor di erences results instance goal state return randomly selected subsets data induced return due fewer samples 
context sensitive analysis contrast techniques report interesting properties small programs contextsensitive analysis section requires larger scope 
bene analysis method callers smaller test programs typically fewer calls method variation 
evaluated context sensitive analysis qualitatively quantitatively rational test case 
rational library abstracting polynomials rational numbers 
consists lines code lines non comment non blank code de nes classes rational numbers ratpoly polynomials coe cient exponent vector terms 
invariants detected context sensitive analysis expressed ocl precondition postcondition syntax demonstrate de ances test suite reveal properties implementation 
approx pre caller ratpoly eval denom evaluation polynomial result approximated oating point value ratpoly eval called approx integers indicating polynomials encountered testing eval important omission test suite procedure 
invariant show earlier unit test suite exercise approx wide range values 
div arg pre caller ratpoly arg denom pre caller ratpoly arg numer mul arg pre caller ratpoly arg numer pre caller ratpoly denom post caller ratpoly return denom invariants indicate de ciencies test suite 
invariant shows zero valued coecients div invariants show nan values represented zero denominator manipulated mul 
similarly invariant indicates div called rational coecient polynomials invariant shows div exercised negative coecients 
sub arg pre caller arg denom pre caller denom pair invariants reveals short circuits call sub argument nan 
ratpoly parse string pre caller ratpoly div nan invariant indicates div implemented ine ciently repeatedly calls pure relatively expensive function parse order generate nan valued polynomials constant caching result 
ratpoly scalar pre caller ratpoly negate scalar denom pre caller ratpoly negate scalar numer pair invariants reveal negate invoking general purpose value needlessly inecient 
example candidate partial specialization 

related clustering jmf aims partition data re ect distinctions underlying data 
widely software engineering elds 
just example related podgurski pmm clustering execution pro les similar data traces di erentiate operational executions 
reduce cost testing 
related dickinson dlp clustering identify outliers sampling outlier region ective detecting failures 
techniques dynamic detection implications error detection previously proposed technical report dissertation ern 
raz rks daikon implementation albeit implication techniques discussed detect anomalies online data sources 
lam hl re implemented dynamic invariant detector including improvements running online including restrictions engineering tradeo showed techniques ective bug detection :10.1.1.164.9197
ideas implemented evaluated engler ech detected numerous bugs operating system code exploiting underlying idea behavior inconsistent bug behaviors incorrect 
automated system ag inconsistencies absence speci cation information indicate behaviors erroneous 
course cited works claim credit idea comparing behavior look di erences long applied working programmers ective ways apply ideas domain error detection 

suggests methods improving quality speci cations generated automatic invariant detection 
experimental data con rm value methods improve recall reported invariants percent minimal loss precision 
data suggests technique represents tradeo better recall fewer missing invariants veri able speci cation better precision broadly speaking lower noise 
static analysis return methods give increased recall little loss precision recall dominant factor user acceptability believe random cluster methods value despite decreased precision 
improved average recall represents approximately third fewer missing invariants required complete speci cation hand 
contributes approach error identi cation absence test data fault knowledge existence error 
wish exploit invariants produced context sensitive splitting conditions aid understanding complex programs improve quality generated speci cations 
acknowledgments james anderson michael harder jeremy nimmer gave signi cant help experimental evaluation 
research supported part nsf ccr ccr 
det david detlefs 
overview extended static checking system 
proceedings workshop formal methods software practice pages january 
david detlefs rustan leino greg nelson james saxe 
extended static checking 
src research report compaq systems research center december 
dlp william dickinson david leon andy podgurski 
pursuing failure distribution program failures pro le space 
esec fse pages vienna austria 
ecgn michael ernst adam william griswold david notkin 
quickly detecting relevant program invariants 
icse pages june 
ecgn michael ernst jake cockrell william griswold david notkin 
dynamically discovering program invariants support program evolution 
ieee tse february 
previous version appeared icse pages los angeles ca usa may 
ech dawson engler david yu chen seth hallem andy chou benjamin chelf 
bugs deviant behavior general approach inferring errors systems code 
proceedings th acm symposium operating systems principles pages ban alberta canada 
michael ernst william griswold david notkin 
dynamically discovering pointer program invariants 
technical report university washington seattle wa november 
ern michael ernst 
dynamically discovering program invariants 
phd thesis university washington department computer science engineering seattle washington august 
stephen garland nancy lynch 
ioa language specifying programming validating distributed systems 
technical report mit laboratory computer science 
hl monica lam :10.1.1.164.9197
tracking software bugs automatic anomaly detection 
icse may 
jmf jain murty flynn 
data clustering review 
acm computing surveys september 
ln rustan leino greg nelson 
extended static checker modula 
compiler construction pages april 
rajeev motwani prabhakar raghavan 
randomized algorithms 
cambridge university press 
ne jeremy nimmer michael ernst 
invariant inference static checking empirical evaluation march 
pmm andy podgurski yolanda francis wol charles yang 
estimation software reliability strati ed sampling 
acm july 
rks orna raz philip koopman mary shaw 
semantic anomaly detection online data sources 
icse may 
wei mark allen weiss 
data structures algorithm analysis java 
addison wesley longman 

