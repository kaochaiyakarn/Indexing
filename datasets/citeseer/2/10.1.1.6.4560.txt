specifying interaction categories pavlovi abramsky analyse complementary methods obtaining models typed process calculi form interaction categories 
methods allow adding new features previously captured notions process type respectively 
combining familiar examples interaction categories new ones built starting simple familiar categories 
constructions interaction categories analysed fixing set axioms merely terms way specified just algebras analysed terms equations relations independently characterisations varieties 
interaction categories proposed general practical tool reasoning functional concurrent computation 
meant definitive formal system open list features considered 
paradigm processes relations extended time proposed conceptual basis integrating type theory process calculus categorical framework 
interaction processes captured composition arrows identity arrows interpret buffers 
step determining structure interaction categories analysing ways come 
turns existing examples new ones obtained alternating specification methods respectively determine notion process notion type 
notion specification understood method building structure material 
instance universal algebra method specifying structures operations equations forcing method specifying new models set theory old ones 
note birkhoff variety cogs university sussex brighton bn qh 
partially onr 
department computer science university edinburgh edinburgh eh jz theorem categories arising universal algebra giraud theorem providing axioms may arise forcing came corresponding specification methods extensively developed thoroughly analysed 
studying constructions leading class structures usually axiomatic characterisation 
specifications categories derived specification methods describe start arbitrary interaction category degenerate example specifications add relevant structure 
specification methods leads category objects morphisms capturing richer notion process 
second refines type structure leaving morphisms essentially unchanged 
specifying processes definition functor monoidal categories sec 
said lax monoidal natural family ab ha omega hb gamma 
omega arrow gamma 
coherent sense diagrams commute ha omega hb omega hc omega id fflffl id omega omega omega hc fflffl ha omega id id fflffl id omega omega ha fflffl ha omega omega omega omega ha omega 
ha isomorphisms omega omega omega omega omega omega omitted simplicity 
said strong monoidal isomorphisms 

recall monoidal category autonomous self dual duality gamma op induces small contribution notational confusion context denote monoidal structures autonomous categories omega 
usual notations theta products coproducts replaced respectively phi 
cotensor gammaffi form omega making autonomous closed symmetric monoidal sec 

autonomous satisfies mix rule duality functor gamma lax monoidal compact closed duality monoidal 
process specifications 
concepts readily generalise enriched categories 
process specifications meant pos 
enriched lax monoidal functors pos 
autonomous pos 
category posets bottom morphisms bottom preserving monotone maps monoidal structure induced cartesian products 
base thought category sets relations 
functor defines notion process specifying set processes typed 
partially ordered computational power ability simulate 
simplicity presently leave enriched aspects aside formalize process specifications functors set 
formally monoidal category 
construction 
category processes induced specification set objects define morphisms compose internal hom functor gammaffi op theta gamma 
gamma 
set 
gammaffi structure readily lifts identity obtained transposition pid gamma 
gammaffi corresponding identity id composite hf gi gammaffi theta gammaffi hm hf gi gammaffi omega gammaffi gamma 
gammaffi internal composition autonomous structure objects inherited directly arrow part internalised 
instance functor omega gamma induces family arrows gammaffi omega gammaffi omega image family functions omega omega 
note comes functor identity objects maps jf gammaffi transpose autonomous definition autonomous structure way functor induces representation hf set ha fa 
monoidal lax monoidal id ab induced arrows 
fa 
fb get gamma 
fa omega fb omega 
autonomous construct isomorphic bijective objects 
fact essentially surjective induces weak equivalence 
spell just dimensional part underlying adjunction 
note extends enriched categories monoidal place set 
fix autonomous consider category bij bijective objects autonomous functors 
morphism autonomous functor satisfying bijective objects 
hand set lax omega category lax monoidal functors lax monoidal transformations 
natural transformation said lax monoidal 
ab omega gamma theta ab delta proposition bij set lax omega specifying types definition category bicategory 
lax functor assignment object object pa arrow cell pf pa pb furthermore comes equipped cells fg pf pg gamma 
composable ja id pa gamma 
id object satisfying coherence conditions similar 
lax monoidal functors just lax functors monoidal categories regarded bicategories object 
type specifications 
refine type structure interaction category assign type set pa new properties predicates 
putting construct new interaction category new processes added morphism ff pa fi pb just morphism mapping elements satisfy ff satisfy fi 
ffs fis connect way specified relation pf pa theta pb 
clearly relations usually satisfy ff ff id gff abbreviates hff fii pf type specification turns lax functor interaction category pos 
category rel sets relations 
extracting specification rel interaction category essentially complicated extracting general background deep conceptual roots 
comprehension categories 
consider bicategory span objects sets morphism pair functions cell pair just function commuting pairs 
span composite obtained calculating pullback identities clearly form id id span viewed theta matrix sets ha bi gamma th entry 
cells obviously just entry wise families functions 
described composition corresponds usual matrix multiplication set theoretical sums products 
lax functor span induces total category defined pj jrj px ha ffi hb fii ff fi th entry matrix pf composite hf ha ffi gamma 
hb fii hg hb fii gamma 
hc fli fffl fg fi fffl fg fi pb theta gamma 
ff fp fl ff fl th component cell fg identity ha ffi hid ja ff total category comes obvious projection gamma 
functor gamma 
say small categories induces lax functor pf span isomorphism pf satisfying 
lax functor pf sends set pa fff ff ag arrow pa theta pb matrix sets ff fi jf fg described correspondence extends equivalence proposition cat span lax correspondence definitely basic unknown remain unable find literature folklore 
considerably complicated relating cat normalised lax functors categories profunctors mentioned known long 
category functors commutative triangles morphisms category lax functors span functional lax transformations 
lax transformation span family matrices pa qa coherent cell pf gamma 
qf said functional components functions 
equivalence extends various directions 
dropping functionality requirement varying notion lax transformation right hand side gets various interesting classes morphisms lefthand side indexed profunctors categorical form simulations 
hand restricts correspondence grothendieck construction boils familiar correspondence set set functions set indexed sets comprehension scheme sub omega gamma connecting subobjects predicates 
just extension fx 
obtained pullback truth omega predicate omega gamma construct gamma 
obtained pullback span obvious projection span ffl gamma 
span span ffl total category identity span 
restrict lax functors rel note relation 
theta jointly monic span matrix 
canonical functor span rel obtained monic images spans terms matrices sets reducing nonempty entry 
category rel lax reflective subcategory span lax left hand side category fait faithful functors corresponds gamma 
faithful just 
interaction category specified rel lifting structure principle signature interaction category combines linear logic delay monads enriched setting 
comment aspect 
linear structure lifts fairly straightforward way 
autonomous resp 
compact closed endofunctor lifts endofunctor arrow part image obvious family gammaffi gamma 
da gammaffi db 
way duality lifts natural transformation lifted endofunctors lifts functor monads comonads induce monads comonads 
recall bang monoidal comonad coalgebras omega comonoids 
expressed natural transformations 
da omega required structure 
bang lifts bang sending object corresponding cofree omega comonoid may lose property lifting 
just definition easily shows weak products coproducts preserved created functor soon specification set preserves weak products 
shall see usually 
process specifications yield categories limits colimits 
adding types corrects 
lifting structures type specifications straightforward quite uniform 
looking correspondence proposition sees say binary functorial operation pi preserved gamma 
corresponds functional lax transformation pa theta pb pi gamma 
pi ha ffi pi hb fii ha pi ff pi fii 
order lift pi specify corresponding transformations 
depart degeneracies examples idea start simple model successively refine specifying gamma 
gamma gamma 
gamma gamma 
delta delta delta view processes relations time suggests category relations taken base calculus relations jointly monic spans developed just sets general categories 
obtained category rel compact closed varying allows additional structure actions 
synchrony simplest case course rel rel set 
process specification rel set assign set poset sa nonempty prefix closed sets finite strings strings thought elements extended time elements sa subsets extended time 
algebraically sided multiplicative systems free monoid complements sided ideals arrow part map relation function sr sa sb defined sr ft sr tg componentwise extension strings 
lax monoidal structure consists function ab sa theta sb gamma 
omega ab fu omega tg consisting finite strings ffl 
category sproc rel obtained construction rudimentary interaction category synchronous processes modulo trace equivalence 
finer notions behaviour obtained elements sa transition systems labelled trees just traces definitions readily extend 
working modulo bisimilarity complicates matters goes 
synchronous interaction category sproc obtained type specification sproc rel 
object part process specification 
arrow part take process sproc relation sa su sb defined sproc taken modulo bisimilarity process definition replaced corresponding set traces 
category sproc rel order specifying changed easily see constructing pullback functors rel gamma 
sproc gamma sproc obtained specifications 
intuitively simpler specify notion process advantage types cofree comonoids sproc sproc traced back rel 
asynchrony capture asynchrony start calculus relations rel ffl developed category set ffl pointed sets containing fixed element ffl functions preserve 
ffl represents idle action allows processes wait 
set ffl kleisli category monad gamma set set useful view category sets partial functions 
rel ffl rel set ffl full subcategory rel spanned objects form category sets partial relations 
partial relation boils triple theta rb theta 
theta ordinary binary relation ra 
rb 
parts undefined 
tensor cotensor omega theta embedding gamma rel ffl rel preserves 
weak preserved note rel ffl strong ones reflected asynchronous interaction categories 
specify ffl rel ffl set identify rel ffl image rel note ffl unit monoid set ffl free monoid consists nonempty strings object part ffl takes set prefix closed subsets containing ffl 
arrow part defined monoid homomorphism gamma gamma 
removes ffl nontrivial strings induces weak equivalence relation goes function ffl ffl gamma 
ffl defined ffl ft tg words string belongs ffl string filled sequences ffl way componentwise related 
similar trick function ab ffl theta ffl gamma 
ffl omega shuffles strings ab theta element ab obtained possibly different length interpolating ffl get ff ff fi fi forming hff fi hff fi unit ffflg 
asynchronous interaction category ffl proc rel ffl ffl obtained 
version depicting finer notion obtained labelled trees transition systems time modulo weak branching bisimilarity 
full fledged asynchronous category ffl proc weak weakly bang obtained adding types specification ffl ffl proc gamma 
rel similar section relaxed modulo original asynchronous category asproc sec 
obtained way relations place partial functions starting req rel rel rel ffl rel set ffl 
req category sets partial equivalence relations morphisms relation 
rel boils jointly surjective pair set ffl alternatively req viewed full subcategory rel spanned power sets tensor preservation embedding req rel boils exponential laws theta 
specification req set assigns set nonempty prefix closed sets sequences gamma empty set deleted plays role ffl 
resulting category asproc req compares ffl proc just req compares rel ffl instance bang comonads precluded fact functor req req natural family trivial 
structure actions enriched monads set 
consider sending 
unit chosen include copy multiplication send order twist 
idling ffl monad captures input output distinction elements copies kleisli category set ffl monad viewed category sets pairs hf morphisms partial function subset composite hf hg gi consists usual composite partial function accompanied set gamma gamma delta gamma gamma delta denote complements 
free monoid set ffl quotient satisfying ffff ffl ff gamma gamma 
denoting twist map 
monoids set ffl groups means computation consumed internalized ffl 
led consider infix closed sets ff correspond normal subgroups roughly prefix closed sets correspond ideals underlying idea reversible time computations develop directions 
specification ffl rel ffl set rel ffl rel set ffl assign set infix closed subsets arrow part formally defined just ffl kernel gamma gamma 
larger sequences ffl shall interpolating general strings input output actions reduce ffl 
finer notions behaviour infix closed sets transition systems distinguished initial state labelled acyclic graphs modulo corresponding notion bisimilarity 
coherence categories constructed far refined extending rel say notion coherence 
introduced lax functor rel rel assigning set set symmetric irreflexive binary relations 
relation induces ca cr cb defined psi ffff ff rfi ff fi total category rel familiar category coh coherence spaces 
imposing set traces labelled trees transition systems coherence requirement sff sff ff ff ff previously described specifications lift coh yield interaction categories grain true concurrency 
interesting notice synchronous ones specified different meaningful ways 
coh fflffl fflffl rel fflffl sproc sproc games categories games starting signed sets set sigma signed set pair ha gamma ordinary sets signed function ordinary partial function gamma gamma compose gamma gamma follow images tower gamma delta delta delta 
image leaves lands gamma value remains undefined define gamma follow tower gamma gamma gamma delta delta delta 
identity ha gamma obviously identity gamma obtained category compact closed structure omega ha gamma gamma ha gamma free compact closed categories effectively described terms set sigma sec 
fact type specification 
somewhat complicated refinement yields free autonomous categories 
basic category games obtained type specification set sigma rel sending set nonempty prefix closed subsets gamma theta functions ga theta gb omega gamma 
omega ga theta gb gammaffi gamma 
omega shuffle sets subtle way described 
signed function induces ga gf gb relating psi phi yields history free strategy phi gammaffi psi 
history sensitive strategies introduced process specification total category set sigma furthermore winning positions added type specification just extending specification clearly extended include equivalence relations positions essential 
relations gf supplied requirement preserves equivalences games related 
category follow additional process specification identifying equivalent strategies 
abramsky gay nagarajan interaction categories foundations typed concurrent programming 
deductive program design proceedings marktoberdorf international summer school springer abramsky gay nagarajan specification structures propositions types concurrency 
logics concurrency structure vs automata 
proceedings banff workshop lecture notes computer science springer abramsky jagadeesan games full completeness multiplicative linear logic symbolic logic abramsky jagadeesan malacaria full abstraction pcf submitted barr autonomous categories lecture notes mathematics springer barr autonomous categories linear logic math 
structures comput 
sci 
bicategories reports midwest category seminar lecture notes mathematics springer dimensional limits colimits distributors talk bierman categorical model intuitionistic linear logic proceedings conference typed lambda calculus applications plotkin eds lecture notes computer science springer danos regnier structure multiplicatives archive form math 
logic fox coalgebras cartesian categories comm 
algebra freyd scedrov categories allegories north holland mathematical library north holland retor mix rule unpublished note 
girard proofs types cambridge tracts theoretical computer science cambridge univ press grothendieck cat egories ees expos vi groupe sga lecture notes mathematics springer kelly basic concepts enriched category theory lecture notes cambridge univ press kelly coherence compact closed categories pure appl 
algebra makkai avoiding axiom choice general category theory appear pure appl 
algebra pavlovi categorical logic concurrency interaction synchronous processes theory formal methods computing henkin eds 
world scientific pavlovi convenient categories processes simulations modulo strong bisimilarity category theory computer science pitt eds lect 
notes comp 
science springer pavlovi maps relative factorisation system pure appl 
algebra maps ii chasing diagrams categorical proof theory igpl seely linear logic autonomous categories cofree coalgebras gray scedrov eds categories computer science logic contemp 
math 
amer 
math 
soc street functors hand written note dated october pp 

