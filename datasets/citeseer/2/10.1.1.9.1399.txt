may energy efficient tcp master thesis donckers university twente department computer science division computer architecture embedded systems supervisors dr ir 
smit dr ing 
havinga ir 
smit energy efficient tcp donckers samenvatting een type het moby dick project 
door de en het de factor zijn voor deze 
ook een factor zijn het project wat een nt transport protocol compatible met tcp ip 
dit het van zo nt transport protocol voor 
er nog niet de van transport 
zijn er om de van transport te kunnen 
deze zijn om de van tcp ip op te 
vier zijn die tcp ip een niveau van te 
voor deze zijn de er van 
de van dit zijn om tcp te 
een model van dit transport protocol ge en aan een 
uit de kan worden dat tcp niet een dan tcp ip dat het ook te op meer throughput en latency 
energy efficient tcp ii donckers new generation handheld computer development moby dick project 
desired functionality performance energy consumption limiting factor handheld 
wireless communication important factor project energy efficient transport protocol compatible tcp ip desirable 
thesis describes design energy efficient transport protocol mobile wireless communication 
research done energy efficiency transport protocols 
metrics developed measure energy efficiency transport protocols 
metrics study performance tcp ip wireless links carefully 
problem areas defined prevented tcp ip reaching high levels energy efficiency 
problem areas solutions proposed feasibility examined 
results study design tcp 
simulation model proposed energy efficient transport protocol implemented subject thorough evaluation 
results show tcp higher energy efficiency tcp ip manages outperform tcp ip traditional performance metrics throughput latency 
iii energy efficient tcp iv table contents donckers preface vii problem area measuring energy efficiency energy efficiency energy overhead data overhead time overhead power model radios calculating data overhead time overhead calculating energy overhead calculating energy efficiency summary aspects tcp transport control protocol reliability sliding windows retransmission timeout retransmission window size flow control response congestion problems tcp large headers simple scheme loss considered congestion complete reliability possible solutions header compression selective delayed explicit congestion notification forward error correction tcp protocols inspired tcp delayed duplicate mobile tcp optimized window management energy efficient tcp tcp overview headers window management reliability requirements header format ip header tcp header tcp header tcp header sizes selective window management congestion flow control transmission retransmission window size round trip time estim ation burst error detection partial reliability test results simulation model test setup error model setup tcp parameters minimum window size maximum window size window size timeout error limit tcp window management selective tcp headers partial reliability evaluation tcp default setup bandwidth delay traffic partial reliability performance recommendations bibliography vi preface donckers take opportunity supervisors gerard smit paul havinga smit guiding working assignment 
mother brother sister reason jac 
certainly girlfriend 
support impossible 
enschede may donckers vii energy efficient tcp viii donckers thesis part moby dick project computer science department university twente 
moby dick project joint european project develop define architecture new generation mobile handheld computers 
due increasing demand performance functionality energy consumption limiting factor capabilities new generation handheld 
reducing energy consumption plays crucial role architecture 
important aspect moby dick project wireless communication 
importance energy efficiency moby dick project wireless communication optimized minimize energy consumption 
unfortunately lot research done energy efficient transport protocols 
quite rewarding mobile systems radio wireless communication parts consume energy ste 
computer chips cpus memories increasingly energy efficient advances ic design 
radios simply require certain amount energy transmit receive information 
furthermore multimedia applications network services extensively continuously 
impact minimizing energy spent wireless communication increase hav 
reasons beneficial moby dick project energy efficient transport protocol designed 
basis protocol tcp ip transport control protocol internet protocol candidate 
enable handheld communicate internet vast numbers systems 
led problem statement energy efficiency transport protocols wireless links researched 
research tcp energy efficient version tcp ip designed implemented test energy efficiency performance 
remainder chapter delineates problem area tcp 
chapter explains energy efficiency calculated 
chapter describes tcp ip explains keeps reaching high levels energy efficiency done remedy 
solutions chapter design tcp described chapter 
chapter implementation tcp introduced thorough energy efficiency performance evaluation 
chapter gives thesis 
problem area tcp wireless link mobile host base station 
mobile host able connect internet base station way transparent mobile host internet host connected 
means mobile host internet host able tell tcp mobile host base station regular tcp ip 
behavior tcp highly dependant ip tcp functionality tcp ip 
maximizes potential gain energy efficiency 
design protocol limited transport layer 
lower layers link layer medium access layer mac layer changed way 
energy efficient tcp protocol drop replacement tcp ip mobile host usable wireless links just tcp ip usable wired networks 
protocol assumptions link mac layers 
clear changed time explain allowed changed 
parts systems changed 
additive means second proposed change includes third proposed change includes second 
proposed change replace tcp ip base station tcp 
change requires user intervention expected applying change increase energy efficiency small 
second proposed change replace transport protocol mobile host 
requires user intervention user install protocol mobile host 
user friendliness modern operating systems big problem 
proposal executed truly new transport protocol designed communicate directly tcp ip 
proxy application base station handle translation energy efficient protocol wireless link tcp ip wired part path 
design proxy part problem statement tcp sole point focus 
expected proposal yield increase energy efficiency compared change 
setup shown 
mobile host base station internet host application tcp link layer mac layer tcp link layer proxy tcp link layer mac layer mac layer wireless link fixed link intended setup tcp 
ip application tcp ip link layer mac layer third proposal change applications mobile host 
applications able optimize energy efficient connections intended quality service qos parameters 
expected increase energy efficiency certain cases possible proposed changes 
chapter protocol meet requirements transport protocol compatible tcp ip translation base station 
energy efficient 
assumptions lower layers leave unchanged 
higher layers applications able tcp just tcp ip 
tcp aware able optimize tcp connections intended qos parameters 
measuring energy efficiency donckers researching energy efficiency protocols course important know exactly energy efficiency protocol calculate 
chapter topics discussed 
energy efficiency energy overhead energy efficiency measure indicate energy protocol uses transmit data certain case compared ideal protocol 
measured absolute values different cases different amounts payload comparable 
energy efficiency near means little spent energy efficiently energy efficiency means energy wasted achieved ideal protocol 
important know data transmission medium minimum amount energy required send data source destination 
protocol energy successfully complete transmission 
call minimum probably different actual spent energy called difference values called amount wasted energy 
values shown 
energy spent protocol energy wasted protocol minimum amount spent energy possible relation spent wasted minimum amount energy 
energy efficiency ee equation energy efficiency 
words part spent energy useful 
protocol ideal uses minimum amount energy energy efficiency 
fixed increase energy efficiency lower 
exactly needed know protocols assignment energy efficiency way compare various protocols 
differences energy efficiency quite small amount wasted energy differ quite 
consider example 
example minimum amount energy data transfer measure matter 
protocol spends amount complete transmission protocol 
clearly protocol wastes twice energy efficient tcp energy protocol respectively 
energy efficiency protocol 
looks energy efficiency easy see protocol better protocol tries see protocol better energy efficiency numbers convenient 
measure closely related energy efficiency energy overhead 
energy overhead amount wasted energy compared minimum amount energy eo equation energy overhead 
seen amount energy spent minimum protocol requires 
close relation energy efficiency energy overhead calculated energy efficiency known vice versa 
energy efficiency energy overhead suited show differences protocols 
shown example 
example consider previous example energy overhead calculated energy efficiency 
energy overhead protocol energy overhead protocol 
shows precisely protocol wastes twice energy protocol energy overhead compare protocols energy efficiency numbers stated complete 
data overhead time overhead definition energy overhead time show calculated 
done important understand precisely influences energy efficiency overhead protocol 
basically characteristics influence 
characteristic data overhead protocol 
protocol uses bytes transmit amount data bytes wasted 
protocol energy efficient 
second characteristic influences energy efficiency protocol time overhead 
certain cases longer protocol needs transmit amount data longer radio active 
radio active requires extra energy operate 
time protocol requires send amount data energy efficiency decreases 
characteristics related 
question remains characteristics influence energy efficiency 
answer really depends type transceiver transmitter receiver kind link mac layer transmit receive packets 
convenience combination transceiver link layer mac layer called radio 
distinguish different types radios general power model radios 
power model radios radio various states operates 
state radio requires certain amount power operate 
table example various states donckers wavelan modem listed description amount power consumption hav 
state power consumption wavelan power consumption mw sleep low active high transmit slightly higher active receive slightly higher active table radios 
course think ideal radio state continuously receive transmit data 
real radios behave differently 
radio switches states takes certain amount time possibly amount energy complete switch 
switching mode takes time infeasible save energy consecutive transmits receives 
sleep state purpose 
effectively sleep state takes extra coordination increases complexity lower level protocols 
furthermore lot radios optimized power consumption performance 
lot radios sleep state save power full effect 
important understand concept network session 
network session period time established connection mobile base station 
network session possible network 
instance requesting email mail server establishing telnet session telnet server 
network session infeasible radio enter state 
switching state requires time 
network session radio put state save energy 
doing session thing lot radios able 
general power model radios types radios discussed 
extreme types radios 
radios fit categories 
radios placed scale types 
types active 
type radio active state network session 
small difference energy consumption levels active state transmit receive states data overhead large impact energy efficiency 
time overhead important sooner data transmitted network session ended sooner radio put state 
wavelan example type radio 
ideal 
ideal radio sleep state network session data transmit receive 
type radio time overhead small impact energy efficiency 
data overhead hand important 
mac example type radio hav 
side scale time overhead important data overhead side scale data overhead important time overhead 
energy efficient protocol extreme scale best minimize types overhead 
energy efficient tcp calculating data overhead time overhead problem measuring energy efficiency simpler problems 
measure data overhead measure time overhead 
data overhead calculated follows equation data overhead 
data overhead 
amount data transmitted protocol measured bytes 
payload protocol referred user data 
amount data protocol sent transmit payload receiver measured bytes 
includes retransmitted packets packet headers 
consider examples example tcp ip send bytes packet generate byte packet bytes header bytes payload byte 
result example tcp ip send bytes packet just example packet lost transmission retransmitted 
result time overhead calculated follows equation time overhead 
time overhead 
time protocol required transmit payload receiver measured seconds 
time measured destination received data sender aware happened 
bandwidth available link measured bytes second 
example protocol requires seconds transmit bytes link bandwidth bytes second result donckers calculating energy overhead clear data time overhead calculated time show calculate energy overhead 
shown chapter energy overhead efficiency depends data time overhead 
shown characteristic influences energy overhead depends type radio 
energy overhead calculated weighed average data overhead time overhead 
ratios assumed correspond closely certain type radio 
noted active ideal types radio assumed active ideal 
far extreme ends scale mentioned paragraph 
listed table 
type radio data ratio time ratio active intermediate ideal table data time ratios different types radios 
energy overhead calculated eo energy overhead 
drr data ratio radio time ratio radio eo drr equation energy overhead 
calculating energy efficiency energy overhead weighed average data time overhead energy efficiency weighed average data time efficiency 
definition energy efficiency easy deduce definitions data time efficiency 
data efficiency part amount data sent complete transmission payload 
time efficiency part time took protocol complete transmission minimum time calculated follows energy efficient tcp de data efficiency 
te time efficiency 
de equation data efficiency 
te equation time efficiency 
please note data time efficiency just energy efficiency percentages larger equal 
seen data efficiency data overhead closely related 
calculate de de de de de de equation data efficiency function data overhead 
de equation data overhead function data efficiency 
time efficiency time overhead similarly related te te te te te equation time efficiency function time overhead 
te te equation time overhead function time efficiency 
donckers ratios listed table possible calculate energy efficiency transmission ee energy efficiency 
summary ee drr de te equation energy efficiency 
chapter measures introduced say amount spent energy protocol energy efficiency energy overhead 
shown goal thesis design energy efficient protocol energy efficiency best measure compare performance different protocols 
energy overhead suited 
calculate energy overhead efficiency stated characteristics protocol know data overhead time overhead 
characteristic influences energy overhead depended type radio 
different types radios shown explained shown calculate energy overhead 
calculation energy efficiency discussed 
energy efficient tcp aspects tcp donckers protocol known tcp de facto standard high level protocol large inter networks 
best known transport protocol enormous growth internet size popularity 
chapter explained tcp works keeps reaching high levels energy efficiency wireless links done remedy 
transport control protocol lowest level computer communications networks provide unreliable packet delivery 
packets lost destroyed transmission errors interfere data network hardware fails networks heavily loaded accommodate load 
networks route packets dynamically deliver order deliver substantial delay deliver duplicates 
highest level applications programs need send large volumes data computer 
general purpose connection oriented protocol provides reliable order delivery data kinds low level networks required able efficiently code networked applications provide means knit networks large global network 
tcp provides just 
reliability able provide reliable delivery tcp packets may lost duplicated tcp uses positive retransmissions 
schemes known arq automatic repeat requests schemes 
requires recipient communicate sender sending back message packet receives correctly 
sender keeps record packet sends waits sending packet 
sender starts timer sends packet retransmits packet timer expires arrives 
way packets lost retransmitted sender receives indicating recipient correctly received packet 
second reliability problem arises underlying packet delivery system duplicates packets 
duplicates arise networks experience high delays cause premature retransmissions 
solve problem packet assigned sequence number receiver required remember sequence numbers received 
avoid confusion caused delayed duplicate carries sequence number packet supposed acknowledge 
sliding windows retransmission scheme mentioned leaves substantial amount bandwidth unused delay sending new packet receives previous packet 
operate efficiently tcp uses sliding window scheme 
scheme allows sender transmit multiple packets waiting 
easiest way envision operation sliding windows scheme think sequence packets transmitted 
protocol places small window sequence transmits packets lie inside window 
sender receives packet window slides window sends packet 
energy efficient tcp packet called unacknowledged transmitted received 
number unacknowledged packets constrained window size 
window size packet sliding window scheme behaves exactly scheme mentioned 
setting window size large value possible eliminate network idle time completely 
sequence packets sliding window shown 
acknowledged packet unacknowledged packet packet window reception packet window slide right arrow indicates sliding window mechanism 
retransmission tcp may send data variable length packets retransmitted packets include data original easily refer packets 
refer position stream data needs transmitted stream sequence numbers 
time receiver reconstructed zero bytes contiguously stream may additional pieces stream packets arrived order 
receiver acknowledges longest contiguous prefix stream received correctly 
scheme called cumulative reports stream accumulated receiver 
scheme advantages disadvantages 
advantage easy generate unambiguous 
advantage lost necessarily force retransmission 
disadvantage sender receive information successful transmissions 
timeout retransmission reliable protocols tcp expects destination send successfully receives new octets data stream 
time sends packet tcp starts timer waits 
timer expires data packet acknowledged tcp assumes packet lost corrupted retransmits 
tcp intended internet environment 
internet packet traveling pair machines may traverse single low delay network may travel multiple intermediate high delay links 
furthermore total delay origin destination data depends network traffic intermediate links vary donckers time 
impossible choose timeout value priori suit situation optimal 
solve problem tcp fixed timeout value measures round trip time data updates timeout value accordingly 
window size flow control tcp allows size sliding window vary time 
contains window advertisement specifies data recipient prepared accept 
seen specifying receiver current buffer size 
response increased window advertisement sender increases size sliding window response decreased window advertisement opposite 
advantage variable window size provides flow control 
window advertisements receiver control rate sender transmits data 
having mechanism flow control essential internet environment machines various speeds sizes communicate networks routers various speeds capacities 
really independent flow problems 
internet protocols need endto flow control sender ultimate receiver 
window advertisements provide kind flow control 
second internet protocols need intermediate flow control handle congestion intermediate networks 
response congestion congestion condition severe delay caused overload packets intermediate switching point router 
congestion occurs delays increase router starts queue packets route 
course queued packet stored memory router finite memory 
worst case total number packets arriving congested router grows router reaches capacity starts drop packets 
endpoints usually know congestion occurred 
senders experience timeouts packets dropped router 
normal circumstances tcp simply retransmit packet increasing traffic 
aggravates congestion alleviating 
avoid congestion tcp standard recommends techniques known slowstart congestion avoidance multiplicative decrease 
control congestion tcp maintains second limit window size advertised window 
limit called congestion window limit 
allowed window size sender times minimum limits 
multiplicative decrease reduces congestion window limit half loss packet 
multiplicative decrease seen mechanism slows tcp case congestion 
tcp longer experiences congestion path uses slow start additive recovery 
slow start begins congestion window limit increases receives 
congestion window limit reaches half original size congestion congestion avoidance takes 
congestion avoidance increases congestion window packets window acknowledged 
problems tcp chapter characteristics tcp discussed suitable wireless links 
energy efficient tcp large headers tcp intended highly deployable transport protocol 
lot features options rarely suitable operation wide range inter networks 
tcp popular increasing number changes additional options proposed 
options widely today 
accommodate basic features tcp header size bytes 
fixed size means header fields header size bytes 
widely options activated size grow bytes 
means packet bytes overhead 
adds bytes overhead 
means packets byte payload tcp data overhead retransmissions 
seen lots room optimization 
simple scheme scheme employed tcp fairly simple allow efficient retransmission scheme 
optimizations proposed tcp standard scheme remained unchanged incompatibilities introduced 
standard tcp generate positive cumulative 
means station receives order packet due packet reordering packet loss unable send information sender 
incomplete information sender know energy efficient retransmission scheme 
advanced scheme easy implement undoubtedly increase energy efficiency 
example receiver acknowledges differs actual situation 
example 
consider receiver state sender view listed 
receiver state sender view receiver state received packet packet example scheme standard tcp 
assume sender sent total packets 
seen receiver received packets including packet 
packet lost receiver received packet 
reception packets receiver send 
positive cumulative scheme receiver sends packet 
sender receives multiple packet knows went wrong 
safely assume packet lost 
options potentially inefficient 
send packet number packets numbers including 
retransmit packets packets sent 
sender follows standard retransmits packet wait decide send 
reverts simple protocol may lose advantage having large window 
donckers loss considered congestion tcp designed highly reliable links mind 
encounters packet loss interprets congestion 
highly reliable wired network valid choice setups congestion major source packet loss 
wireless links higher bit error rates cause packet loss due errors generally encountered wired links 
interpreting packet loss congestion realistic solution wireless links energy efficiency point view ideal response congestion differs burst errors 
optimized window size management scheme considers burst errors cause lost packets probably yield increase energy efficiency 
complete reliability complete reliability may problem situations tcp complete reliability undesirable 
receiving streaming audio video tcp protocol lost data 
sure application media player receive data 
extra latency introduced probably playback stall time fast forward part supposed 
lost data little situations data arrive late 
streaming media usually enhanced cope reasonable amounts data loss better send lost data reasonable level case 
note udp user datagram protocol considered replacement tcp cases 
just tcp udp protocol works top ip protocol 
tcp connection offers reliability 
basically udp offers little features low reliability real improvement tcp 
udp shifts problem application udp application responsible connection setup termination creation handling 
possible solutions chapter possible solutions energy efficiency problems tcp discussed 
solutions mere concepts extensions existing protocols complete new protocols 
protocols try optimize tcp wireless networks way 
unfortunately try optimize performance tcp energy efficiency 
energy efficiency depends byte time overhead 
metrics measure performance tcp large overlap 
energy efficient tcp header compression address data overhead tcp proposals voiced compress headers tcp 
done low bandwidth serial wireless links mind 
tcp ip header compression standardized rfc jac rfc deg rfc cas rfc eng 
scheme works single hop links intermediate hosts needs supported points 
works single hop links applies compression tcp connection 
actual connection travel path intermediate hops 
compression transparent hosts points single hop link compression takes place 
jac standard tcp ip header fields analyzed field way values change tcp ip connection examined 
different types changes defined type new representation method chosen 
instance large integers change slightly packet represented small integer represents change packet 
type change known delta change new representation called delta value accordingly 
header fields optional included certain flag compressed header set 
interesting optimization replacement ip addresses port fields connection identifier 
tcp ip headers stores ip address port sender receiver 
combined fields require bytes header 
fields change connection connection identifier gets assigned connection connection establishment 
compressed headers connection carry byte connection identifier 
typical compressed header size bytes proposed scheme bytes 
course great improvement 
order reach protocol robust 
connection identifier included options replaced delta values lost packet cause subsequent packets misinterpreted 
naturally checks proposed remedy necessary error recovery scheme cause normal valid packets discarded 
extra overhead probably cause severe performance penalties wireless links high packet loss generally encountered 
extreme compression method certainly attain data overhead scheme case high packet loss 
shown example 
example consider transmission bytes packets byte payload 
transmission necessary packets lost 
versions tcp compared 
version standard tcp byte headers 
second tcp robust form header compression byte headers 
final version tcp described header compression 
version byte headers loss packet cause packets misinterpreted retransmitted 
amounts transmitted bytes bytes normal tcp bytes tcp robust header compression bytes tcp described header compression seen described header compression higher data overhead normal tcp situation 
robust header compression method perform best 
donckers selective selective scheme extension tcp protocol addresses tcp problems enhancing scheme 
standardized rfc mat sack selective called scheme mentioned rfc jac 
extension rfc published rfc number flo 
points tcp connection need support sack option order effective 
sack scheme adds extra information receiver state time tcp standard positive cumulative scheme lacking 
happens gaps data destination host received 
standard tcp acknowledge data gap tcp sack effectively bridge gap sending extra sack block 
sending information sender better able react actual state link receiver 
difference supplied information sender shown 
example 
consider situation example 
time sack enabled receiver 
receiver state senders view represented 
receiver state sender view receiver state standard tcp sender view receiver state sack enabled tcp received packet packet example scheme standard tcp sack enabled tcp 
remember standard tcp sender choose potentially inefficient courses actions 
sack enabled sender knows packets lost simply retransmit 
efficient method 
energy efficient tcp sack scheme include number sack blocks maximum 
limit size tcp headers 
tcp options including sack blocks included special tcp header field called tcp options 
options tcp implementation uses space left sack blocks 
general tcp implementations include sack support space left sack blocks 
headers larger tcp implementation sack support generally data time overhead comparable implementation sack support handle retransmits efficiently 
data time overhead sack performs better terms throughput protocols shown fal 
delayed principle tcp receiver acknowledge packet receives 
packet reaches destination immediately triggers byte piggybacked normal packets bound host 
course considered waste bandwidth 
remedy tcp standard allows receiver delay sending period time maximum milliseconds com 
way multiple combined piggybacked normal data packet 
course reduces data overhead 
unfortunately drawbacks 
disadvantage importance increases 
lost information state receiver lost case 
information lost consequences severe possibly increasing data time overhead 
second drawback time overhead probably increase receiver immediately send wait period time doing 
cause sender window built slowly 
tcp relies accurately estimate round trip time sender allowed combine 
second data packet sent reducing decrease data overhead 
listed graphs show energy overhead tahoe version tcp delayed 
information test method graphs suffice compare performance see chapter especially paragraphs 
paragraphs needed understand graphs explained 
time graphs explanation 
left axis speaks lower axis unintelligible 
roughly resembles quality channel 
left side axis resembles high quality channel little errors right side axis resembles low quality channel lots errors 
graphs scenario mentioned 
scenario indicates error model 
scenario uses fixed length bad states burst errors scenario uses variable length bad states 
energy overhead energy overhead scenario type radio intermediate state length bad state length delayed energy overhead delayed scenario energy overhead energy overhead scenario type radio intermediate donckers state length bad state length delayed energy overhead delayed scenario graphs quite clear delayed increases energy overhead protocol decreases energy efficiency 
energy efficiency standpoint delayed avoided 
explicit congestion notification tcp flow control mechanisms rely packet drops detect congestion 
happens tcp late reacting congestion occurred 
better tcp notified cause congestion react packets lost 
lost packets avoided retransmitted increasing data time overhead 
improve tcp explicit congestion notification ecn system proposed rfc ram 
proposed configuration routers points ecn capable 
router predicts congestion occur marks packets setting special ecn field tcp packets 
receiver packet take appropriate measures sure transmission rate connection reduced 
way congestion avoided 
scheme decrease data time overhead retransmits necessary possible increases time overhead 
tcp connection incorrectly told decrease transmission rate instance 
scheme decrease energy efficiency suited multi hop paths 
tcp single hop path 
experience congestion intermediate nodes reason need explicit congestion notification tcp 
forward error correction forward error correction fec mentioned proposed performance multimedia streams wireless links lacking 
fec protects data adding little bit redundancy data unit 
errors occur wireless link data unit errors fec scheme correct errors certain amount 
amount fec increased protected data withstand errors 
energy efficient tcp hand processing power increases total size data needs transmitted 
course results increased transmission times 
arq schemes provide exactly error correction needed kick errors occur 
amount error correction fec schemes directly depend amount errors occurred 
stead depends amount expected errors amount fec decided advance 
unfortunately predicting impossible fec schemes 
time fec schemes offer protection little 
protection offered data sent means data time overhead reduced 
little protection offered receiver correct errors packet packet transmitted 
course case arq scheme fec scheme packets larger added protection 
arq schemes said energy efficient fec schemes hav 
furthermore fec transport layer possible lower layers hand packets errors transport layer 
assumptions lower layers fec tcp 
tcp indirect tcp bak solution specifically designed wireless connections 
proposals split connections 
connections named connections mobile host fixed hosts split separate connections base station regular tcp connection base station fixed host connection mobile host base station 
connection single hop connection wireless link need standard tcp 
optimized wireless link protocol solves tcp problems wireless links 
advantage split connections effectively separates flow congestion control base station 
way flow congestion control optimized separately 
indirect tcp largely refrains changing protocol wireless link solely focuses split connection principle 
proposal able obtain impressive results bak split connection principle suited wireless access tcp ip network 
protocols inspired tcp obvious advantages split connections approach inspired protocols 
protocols lightly optimized version tcp wireless links improve performance tcp 
berkeley snoop module bal proposal tackle performance problems tcp wireless links 
just tcp proposes split connection setup snoop module active tcp setup 
snoop module caches packets performs local retransmissions soon packet loss detected 
increases performance tcp 
tcp protocol bro performs instant local retransmissions just snoop module 
furthermore adds user data compression support decrease payload size special flow control mechanisms allows sender resume sending breaks handoffs full speed 
donckers rat protocol networks wireless links proposed wtcp 
closely resembles tcp stresses importance accurate round trip time sampling constructed accordingly 
delayed duplicate delayed duplicate scheme vai tries mimic behavior snoop protocol tcp unaware snoop module tcp aware 
tcp aware protocol needs look tcp headers order take appropriate measures 
possible tcp headers readable intermediate hosts encryption 
scheme tries behave way snoop module examining tcp headers 
scheme information base decisions performs slightly worse snoop module 
hand situations 
mobile tcp mobile tcp protocol described haa protocols try optimize energy efficiency 
employs split connection principle drastically changes protocol wireless link 
asymmetric protocol proposed protocol stack running mobile host kept small simple possible processing offloaded base station 
order save energy protocol uses small custom headers connection id principle known header compression 
implementation mobile host features timers possible protocol sliding windows principle allowing smaller buffers 
furthermore protocol instance support flow control 
protocol sacrifices order save processing power undoubtedly spend energy retransmits energy efficient protocols 
relative power consumption processors compared radios keeps decreasing interesting focus minimizing required processing power 
minimizing data time overhead better way increase energy efficiency 
partial reliable transport protocol bru specifically designed wireless links mind type traffic 
strict reliability guarantees tcp suited multimedia applications 
streaming media experiences small amounts data loss retransmission undesirable 
cause playback stall retransmitted data expired arrival 
furthermore streaming media withstand small amounts data loss noticeable loss quality 
connections partial reliability transport protocol compatible tcp offers solution 
allows application set lower limit reliability 
reliability drop limit receiver ask retransmission 
reliability connection danger receiver ask retransmissions standard tcp manner 
enables receiver correctly operate tcp sender 
application deal data loss reliability set values low 
gar shown optimized jpeg coder images tolerate data loss quality images noticeably 
energy efficient tcp case packet loss performs compared versions tcp 
please note mean receiver receives data 
wireless links generally experience packet drops extremely suited streaming media wireless links 
optimized window management think concept deserve paragraph 
way tcp reacts burst errors wireless links leaves lot desired 
packet loss considered caused congestion 
packet loss tcp drastically reduce transmission speed experienced congestion quickly cleared 
assumption packet loss caused congestion valid wired networks 
high reliability links largest portion packet loss caused congestion 
wireless links assumption valid 
relatively low channel quality wireless links lot packets corrupted transit 
errors tcp reduce transmission speed 
huge loss time overhead therefor reached optimizing window management scheme protocol wireless links 
concepts protocols chapter applicable optimizing energy efficiency 
focus ways improve performance increase energy efficiency optimize power consumption wrong part system 
concepts order design transport protocol include split connections small headers selective partial reliability optimized window management tcp donckers chapter tcp described detail 
overview architecture tcp reasons expectations changes tcp discussed 
header format explained detail followed selective scheme 
window management described partial reliability mechanism 
architecture overview primary goals project design transport protocol compatible tcp 
self evident tcp serve basis new protocol 
tcp derived tcp architecture mechanisms roughly 
points adjustments increase energy efficiency protocol 
points headers window management reliability requirements 
changes introduced paragraphs 
headers large header size tcp introduced problem paragraph 
unnecessarily large headers cause equally unnecessary data overhead 
custom headers tcp result straightforward implementation ideas header compression standards paragraph 
main principle necessary transmit certain header field don 
principle self evident wonder system incorporated tcp standard 
header fields tcp ip datagrams analyzed included headers tcp sent optional 
optional header field sent necessary 
care taken keep headers robust problems non robust compressed header system explained example avoided 
header size reduced bytes bytes situations 
byte packets instance data overhead introduced headers tcp opposed headers standard tcp 
data transmitted time overhead probably decrease somewhat data overhead 
probably result decrease energy overhead 
details headers tcp discussed paragraph 
simple scheme tcp introduced problem paragraph point tcp improved increase energy efficiency 
case missing packets sender simply information state receiver 
occasions possible sender decides optimal course action 
solution problem selective introduced paragraph 
tcp receiver able construct selective 
adding sack blocks 
headers tcp allow maximum sack blocks sent 
enables receiver fully acknowledge received stream sets subsequent missing energy efficient tcp packets 
sender receives able choose energy efficient course action 
diminishing returns adding sack blocks fact sack blocks increase size maximum sack blocks 
sack blocks increase data overhead increase size blocks effect selective energy efficiency positive 
sender able react optimal way lost packets slightly decreases data overhead retransmits reduces time overhead substantially better utilization available bandwidth 
giving exact estimate increase energy efficiency impossible 
implementation selective tcp explained detail paragraph 
window management problems tcp wireless links respect window management introduced paragraph 
assumption tcp packet loss indication congestion valid wired networks little value wireless links 
inherent unreliability wireless networks causes substantial amount packets lost errors link 
window management tcp altered include burst errors possible source packet loss indicated paragraph 
window management mechanism tcp differs points tcp 
tcp features immediate retransmits 
receiver indicates received order packet sender immediately retransmit missing packets tcp single hop link packet reordering take place link 
conditions tcp wait timeout retransmit lost packet causing substantial delays 
change primarily decrease time overhead 
second change tcp reacts burst errors different way 
errors occur tcp considers result normal static barely reduces transmission speed 
lots errors occur tcp considers burst error cause drastically reduces transmission speed 
way tcp reacts burst errors energy efficient way shown paragraph 
noted new window management scheme relies selective detect number errors 
data time overhead decrease change 
tcp features minimum window size third point window management tcp tcp differ 
minimum window size causes tcp quickly burst error decrease time overhead 
final change window management tcp extra timer 
timers tcp similar transmission timer tcp transmissions retransmissions 
extra timer increases responsiveness protocol changes channel increases complexity protocol 
extra timer considered tradeoff 
change decrease time overhead 
changes undoubtedly cause decrease energy overhead impossible give estimation size decrease 
details implementation window management scheme paragraph 
donckers reliability requirements strict reliability requirements tcp connection desirable shown paragraph concept partial reliability developed introduced paragraph 
transmitting streaming media energy saved unwanted retransmits avoided 
partial reliability provides way enabling application set minimum desired reliability channel 
implementation partial reliability tcp straightforward 
receiver keeps track data successfully received lost 
detects packet loss check actual reliability exceeds minimum desired reliability simply acknowledge lost packet 
sender think received correctly refrain retransmitting 
simple mechanism able decrease energy overhead 
uncertain effect increase channel conditions deteriorate 
effect stopping retransmits increases packets lost 
details implementation discussed paragraph 
header format headers tcp packets explained paragraph 
tcp needs compatible tcp ip headers ip tcp examined 
information decision header fields included tcp headers explained paragraph 
ip header internet calls basic transfer unit ip datagram 
datagram divided header bytes data area way header user data ip datagram ip datagram 
deg fields headers classified categories depending expected change consecutive headers packet stream 
categories inferred field contains value inferred values need transmitted 
field expected change packet stream 
value transmitted 
delta field may change usually difference field previous header small efficient send deviation previous value current value 
random field changes unpredictably probably sent full 
general layout datagram classes headers described header described detail 
presents ip version header format energy efficient tcp vers hlen service type total length identification time live protocol header fields ip datagram protocol version vers header length hlen flags source ip address destination ip address ip header format 
fragment offset header checksum field type description field contains version ip protocol create datagram course expected change packet stream 
wireless link tcp operate need know version tcp wired part connection 
field omitted tcp header 
inferred field contains length header determined means need include header tcp packet 
service type field sender specify type transport desired 
ignored hosts routers expected change 
tcp support different types services need include field headers 
total length inferred field contains length complete datagram specified reasonable link level protocol 
unnecessary include tcp headers 
identification random datagram unique number stored field 
split datagrams 
point point link tcp operate fragmentation take place packet identified sequence number number tcp header fields 
flags random flags control fragmentation datagram left header 
fragment offset random field datagram need included tcp headers 
donckers field type description time live field contains maximum number hops datagram allowed take internet expected change 
tcp operates single hop link field serve purpose 
protocol field indicates level protocol data portion ip datagram 
tcp mode operation field omitted 
header checksum random checksum header 
tcp checksum checksum field tcp header protect entire datagram just header 
source ip address field stores source address included tcp headers 
destination ip address destination address contained field included tcp header just source ip address 
table ip header fields 
ip allows optional extra information sent headers 
timestamps source routes 
said fields optional need supported tcp 
furthermore base station support options wired path connection 
header fields included way tcp header source destination ip address checksum 
tcp header tcp packet encapsulated ip datagram divided header bytes payload way similar ip datagram 
ip header user data tcp datagram tcp header ip datagram user data tcp datagram tcp datagram ip datagram 
tcp header follows energy efficient tcp source port hlen reserved checksum fields tcp header sequence number number code bits tcp header format 
destination port window urgent pointer field type description source port port number sender stored field included tcp headers compatible tcp 
destination port field stores port number receiving side included tcp header 
sequence number delta field indicates part data stream included datagram 
field required interoperate tcp 
number delta field stores number indicates part data stream received destination header length hlen omitted headers tcp 
random field length tcp header stored 
unnecessary include tcp headers 
code bits random field contains code bits 
indicates urgent pointer field valid 
ack indicates field valid 
psh indicates packet requests push 
rst indicates connection reset 
syn indicates sequence numbers synchronized 
fin indicates sender reached byte stream 
window random window field receiving side exercise flow control sender 
included tcp flow congestion control possible 
donckers field type description checksum random indicated previous paragraph checksum included tcp headers protect entire tcp datagram 
urgent pointer random field indicates data packet special urgent type deserves special treatment receiver 
order interoperate tcp field included headers 
table tcp header fields 
tcp allows optional extra information sent tcp headers 
timestamps sack blocks 
said fields optional need supported tcp 
furthermore base station support options wired path connection 
header fields tcp headers source destination port numbers sequence numbers window urgent pointer said checksum 
tcp header get overview fields chosen included headers tcp listed type size 
field type size bytes source ip address destination ip address source port number destination port number sequence number delta number delta window random urgent pointer random checksum random table tcp header fields 
information included tcp header 
flags connection startup termination syn fin code bits tcp headers required 
furthermore tcp selective support sack blocks included 
source destination ip addresses ports require bytes storage change connection sent time 
tcp headers connection identifier field included 
connection startup connection identifier chosen combination source destination ip addresses ports connection terminated 
type header compression various standards seen paragraph 
energy efficient tcp code bits field tcp header bits included indicate urgent pointer fields valid 
wonder included tcp headers valid code bits indicate valid reason include fields headers 
optimize tcp headers fields included bit header indicating included 
included receiver conclude valid 
actual tcp header look flags extra flags connection identifier sender ip address receiver ip address sender port number receiver port number sequence number urgent pointer number sack block second sack block window size checksum field size bytes listed indicates field optional tcp header format 
fields mentioned explained detail 
flags field contains certain status bits indicate interpret rest header 
size byte optional 
means tcp packet feature header field 
field looks bit fields flags field format 
donckers bit field size bits description reserved bit field reserved extensions versions tcp 

extra flags included bit field indicates extra flag field included header 
full addresses included field set full addresses sender receiver included 
means source destination ip address port fields included header 
sequence number included bit field indicates sequence number field included header 
urgent pointer included field indicate urgent pointer field included 
type field indicates kind included header 
means fields included 
means number field included 
means number field sack block included means fields included number sack blocks 
window included bit field indicates window field included 
table bit fields flags field 
extra flags field contains extra status bits needed certain occasions 
size byte optional 
field looks bit fields extra flag field reserved syn fin extra flags field format 
bit field size bits description reserved bit field reserved extensions versions tcp 

energy efficient tcp bit field size bits description syn bit field indicate sequence numbers synchronized 
connection setup 
fin bit field indicate sender reached data stream 
terminate connections 
table bit fields extra flags field 
connection identifier field store connection identifier packet 
size byte optional 
byte size means mobile host running tcp connect base station internet maximum simultaneous connections 
heavy internet 
sender ip address field ip address sender stored 
size bytes optional 
field sent connection identifier agreed 
receiver ip address field ip address receiver stored 
size bytes optional 
field sent connection identifier agreed 
sender port number field store port number sender 
size bytes optional 
field sent connection identifier agreed 
receiver port number field store port number receiver 
size bytes optional 
field sent connection identifier agreed 
sequence number field sequence number byte packet stored 
size bytes complete sequence numbers stored 
type corresponding tcp header field delta tcp transmit complete sequence numbers difference packet 
data loss scheme transmits difference lose multiple packets correct decoding packet depends correct decoding previous packet 
wireless links high number errors scheme unacceptable 
sequence number field optional sender transmits data receiver 
example shows sequence number stored example consider tcp packet payload consists bytes data stream 
sequence number field store number 
please note differs slightly tcp sequence number field 
care taken base station converts values 
donckers urgent pointer field indicate urgent data included packet 
bytes large optional 
urgent pointer included bit set stream urgent data included payload packet 
urgent pointer indicates urgent data stream 
number field acknowledge data receiver 
size bytes sequence numbers indicate received 
reason full sequence number stored sequence number field done 
field optional sent receiver needs acknowledge data sender 
information numbers chosen see paragraph 
sack block field store sack block optional 
certain cases receiver wants acknowledge data sender 
size bytes 
information sack blocks see paragraph 
second sack block field store second sack block way sack block 
window size field store limit window size receiver sets sender 
size bytes tcp uses bit unsigned integers store window size 
field optional 
checksum field checksum complete tcp packet stored 
size bytes checksum algorithm tcp 
field optional transmitted packet protect 
tcp header sizes fields tcp headers optional need transmitted required tcp headers usually quite small 
normal data packet header bytes versus byte tcp header 
especially small payloads overhead reduced dramatically 
normal size bytes depending sack blocks 
tcp size bytes sack blocks respectively maximum bytes options 
selective tcp supports selective relies effectively increase energy efficiency 
tcp single hop link performs local retransmissions know packet received order intermediate packets lost 
able packet reordering take place single hop link 
noticing order packets receiver indicate sender selective received intermediate packets 
energy efficient tcp reception sack blocks sender immediately retransmit lost packets wait timeouts duplicate 
reduce time overhead tcp increasing data overhead 
destination host receives packet send acknowledge data possible 
tcp depends selective receiver required send sack blocks possible 
number field contain number byte contiguous received prefix stream 
example shows example consider receiver state 
receiver state received packet packet example receiver state 
receiver acknowledge data possible acknowledge packets including packet 
allowed indicate received packets including packet strictly speaking true 
slightly different number field tcp base station take care converting values 
sack blocks resemble tcp counterparts 
tcp variants unnecessarily large 
size bytes sack block 
full sequence numbers bytes indicate block byte option field 
tcp things differently 
sack block fall maximum possible window size transmitted difference sequence numbers numbers sack blocks representable bit number 
tcp requires byte numbers sack block 
sack block constructed way field size bytes listed sack block field format 
donckers number indicates starting position sack block 
measured difference sequence number sack block second sequence number previously highest acknowledged sequence number packet number previous sack block 
second number indicates position sack block measured difference sequence number sequence number block 
example shows example consider receiver state 
received byte byte receiver state example receiver state 
shown number 
sack block acknowledge bytes 
field sack block field 
second sack block acknowledge byte 
field second sack block field 
window management tcp features window management scheme optimized energy efficiency wireless single hop links 
congestion flow control mechanisms explained followed tcp transmits retransmits packets 
shown influence window size round trip time estimation discussed 
congestion flow control told chapter tcp congestion occur intermediate hosts simply called congestion problems endpoints connection called flow problems 
tcp operates single hop link real distinction congestion flow control 
flow control provided window field tcp header 
receiver includes field maximum window size sender set included value 
maximum size remain receiver specifies 
help reduce data overhead changes occur new value sent 
connection setup maximum window size set default value 
energy efficient tcp transmission tcp transmit current window size allows 
transmission set transmission timer value slightly higher round trip estimate compensate small variations actual round trip time 
packets acknowledged timer expires sent unacknowledged non retransmitted data current window transmitted 
sent unacknowledged data current window marked transmitted soon window allows 
transmission timeout window size set fixed small value 
transmitted packets transmitted transmission timeout retransmitted packet loss subtle difference 
transmitted packets acknowledged transmission timer active canceled 
retransmission tcp detects packet loss immediately retransmit lost packets 
said paragraph tcp features retransmission timer 
retransmitted packet retransmission timer set way transmission timer set 
different tcp normal tcp implementations transmission timer 
adding timer regular transmissions retransmissions timer retransmission scheme energy efficient 
total timers time takes expires bound lower timer 
burst errors noticed sooner tcp responsive variations quality channel reduces time overhead 
example show 
example consider situation 
tcp tcp sender retransmit packet time transmit new packet time 
timers set expire time units 
time tcp sender set timer reset transmits packet time 
sooner time able detect packet losses 
tcp sender set retransmission timer time transmission timer time 
time able detect loss packet 
retransmitted packets acknowledged retransmission timer expires unacknowledged retransmitted packets current window retransmitted 
unacknowledged retransmitted packet current window marked retransmission sent soon window allows 
retransmission timeout window size set small fixed value 
retransmitted packets acknowledged retransmission timer active canceled 
window size tcp considers packet loss result congestion 
reasons tcp energy efficient wireless links shown paragraph 
tcp considers single burst errors wireless channel cause lost packets 
reception scoreboard keeps track acknowledged data updated reflect changes 
analyzed see informs donckers sender new lost packets 
amount newly reported errors zero window size enlarged 
amount newly reported errors certain error limit tcp considers packet loss result normal static channel decrease window size minimum window size 
possible amount errors exceeds limit 
tcp considers result burst error window size set minimum value 
way tcp discriminates single errors burst errors able achieve higher energy efficiency 
round trip time estimation tcp operates single hop link delay vary wireless link 
tcp refrain timestamps headers normally increase data overhead 
round trip time estimations done transmitted packets 
measurement take place time 
packet transmission new round trip time measurement started possible 
round trip time measurement finished transmission timer expires measurement canceled 
sender receives triggered packet started measurement round trip time recorded 
arrives acknowledges data higher sequence numbers packet started measurement measurement canceled 
way accurate measurements recorded 
tcp remembers measurements uses calculate estimations current round trip time set re transmission timers 
burst error detection tcp improved window management scheme deal burst errors efficiently standard tcp sophisticated mechanism originally intended 
unfortunately perform abandoned cleaner simpler version perform intended described paragraph 
channel burst errors important transport protocol reacts right way burst errors 
burst error encountered small best keep sending original pace 
protocol time react 
noticed burst error passed 
burst error long best sending burst error passed 
problems overcome scheme implemented 
unknown priori burst error start 
protocol detect takes long delay channel 
means length burst error known priori 
second problem protocol stops sending case long burst error way telling burst error 
keep sending packets 
thought polling 
scheme developed able guess length burst error measured lengths burst errors 
scheme kept track state channel defined states normal possible burst error burst error 
normal state operate scheme 
suddenly detected timeout lot errors switch burst error mode 
set window size small fixed value guess time burst error started 
burst error guess time burst error ended remember calculated length burst error 
protocol normal state notice errors guess time start errors switch possible burst error state 
errors continue switch burst error state energy efficient tcp continue stated 
errors conclude burst error switch back normal state 
burst error lengths recorded mechanism added action 
noticing start burst error guess length 
certain limit decrease window size slightly 
way protocol send full speed 
burst error small predicted react optimal way 
burst error longer predicted possible protocol react inefficient way 
predicted length limit set window size small value set timer predicted burst error 
timer expired start sending near full speed 
told mechanism perform 
stable measurements unfortunately inaccurate 
reliable way accurately measure start times burst error instance 
caused recorded burst error lengths quite inaccurate 
mechanism tried guess length burst error inaccurate information 
reliable 
furthermore argued length burst error corresponds way lengths previous burst errors 
clear order mechanism robust length measurements 
caused scheme quite simple lot energy efficient 
performance mechanism compared current mechanism graphs 
energy overhead energy overhead scenario type radio intermediate state length bad state length proposed burst error detection current burst error detection energy overhead burst error detection mechanisms scenario energy overhead energy overhead scenario type radio intermediate state length bad state length proposed burst error detection current burst error detection energy overhead burst error detection mechanisms scenario scenario difference burst error detection mechanisms quite small 
clear current simple mechanism slightly lower energy overhead situations 
superiority current scheme especially clear graph scenario examined 
clearly current scheme energy efficient 
interesting note decrease energy overhead right side graph 
mechanisms experience decrease decrease energy overhead proposed mechanism pronounced 
decrease result window management tcp 
lengths bad states drop certain donckers point tcp correctly decides keep transmitting 
efficient solution bad state short tcp decreased transmission speed 
graphs show decreasing transmission speed conditions energy efficient solution 
partial reliability partial reliability relevant receiver 
application able set certain amount reliability connection quality service parameter 
parameter reliability level set percent steps 
course tcp defaults full reliability application set new reliability unaware partial reliability option example 
receiver encounters lost packets checks current reliability level 
specified limit receiver falsely acknowledge lost packets possible violating reliability demand sender retransmit 
receiver course update current reliability level 
reliability demand met receiver send normal lost data retransmitted 
possible application sender receives parts stream 
application responsible handling gaps stream 
energy efficient tcp test results donckers chapter thorough performance evaluation tcp 
measure performance energy efficiency tcp compare protocol versions tcp implementation tcp network simulator ns fal 
ns open source discrete event simulator targeted network research substantial support tcp wired wireless links 
ns free features implementations kinds simulated applications versions tcp mac layers link layers interconnects duplex point point links lans wireless lans popular tool network research evaluate new protocols 
chapter explanation involved tests comes followed explanation home built error model tests 
choice default values parameters briefly mentioned previous chapter discussed followed look method adopted tcp energy efficient difference 
energy efficiency tcp compared tcp variants 
simulation model ns simulator real environment 
model protocol simplified 
limitations ns part protocol required measure energy performance protocol 
differences specification implementation ns listed 
mechanisms implemented specification 
flow control 
limitation ns flow control protocols ns 
problem tcp tested single hop wireless link measure energy efficiency 
absence flow control hamper improve basic performance 
stream byte oriented packet oriented 
means sequence numbers measured packets bytes 
packets fixed sized payload bytes 
tcp tested single hop link problem 
means size windows measured packets bytes 
connection setup termination phase 
tcp state machine tcp implemented 
done little influence energy efficiency tcp variants ns lack part protocol 
sequence numbers overflow 
mechanism place sequence numbers wrap maximum value reached 
implementation lacks connection startup phase sequence numbers start 
sequence numbers apply packets bytes means terabytes sent simulation problem arise 
measure performance tcp 
test setup test setup consists hosts connected wireless lan 
hosts lan seen full duplex point point link 
concern may arise setup representative wireless lans hosts modern mac protocols collision avoidance performance networks strongly energy efficient tcp resemble lan hosts lower bandwidth 
important host model mobile host base station tcp symmetrical protocol 
host running tcp create tcp connection connects hosts 
sender start transmission test kinds data collected energy efficiency calculated 
test run times average 
lot parameters test influence outcome 
bandwidth delay channel length burst errors periods version tcp kind traffic 
bandwidth delay parameters apply wireless lan 
includes physical medium mac layer link layer 
tcp evaluated various values characteristics default value chosen tests characteristics main concern 
default bandwidth mbps 
resembles ieee iee bluetooth blu 
closer look effect bandwidth taken varying bandwidth mbps resembling lower speed serial links new high speed ieee standard iee 
delay default value ms estimation delays introduced typical ieee physical layer link layer mac layer combined measurements che 
effects delay energy efficiency various protocols examined varying delay ms error model attached wireless lan model ns 
error model cause packets dropped random noise burst errors 
supposed connect standard error models wireless lan model broken version ns custom error model written 
model explained paragraph 
protocols compared standard versions tcp tahoe reno newreno partial reliability tests course tcp 
ns implementation kindly supplied team university sweden 
tahoe reno newreno chosen widely known versions tcp implemented ns 
various forms traffic simulated model different types applications 
mass data transfer default application 
resembles file transfer browsing internet sending receiving emails 
tests closer look taken effect type traffic interactive traffic model constant bit rate model 
interactive traffic models applications feature randomly interspersed small amounts data 
resembles interactive applications telnet sessions instant messaging services chatting possibly browsing sending receiving emails requested pages emails relatively small 
constant bit rate traffic resembles streaming media audio video 
default test setup looks sender receiver application tcp tcp link layer mac layer physical layer error model default test setup 
application link layer mac layer donckers error model setup said custom error model created tests 
simple state error model chosen states possible realistically model random noise burst errors 
state parameters minimum length maximum length error rate 
minimum length equal maximum length random length chosen extreme values switch state 
value approaches extremes chosen 
way chosen value near center range time lot smaller larger 
error model switch states constantly 
error rate state applies packets implementations various protocols ns packet oriented 
packets wireless lan transparently routed error model randomly corrupts packets chance corresponds error rate state currently 
way corrupted packet travel physical medium bandwidth dropped mac layer just real life 
typically state setup way resembles high quality channel modest random noise state represent burst error high error rate 
state error rate chosen corresponds measurements done eck 
bad state error rate chosen causing average packets corrupted 
values fixed tests lengths states varied model different channel conditions 
states transitions shown 
state bad state states transitions error model 
choice state lengths somewhat difficult 
sufficient examine proportions state bad state lengths see protocol perform 
length bad state large impact energy efficiency 
energy efficient tcp protocol behave quite differently state bad state lengths changed seconds seconds seconds second respectively proportions remain 
scenarios chosen 
scenario scenario fixed bad state length second state length varies seconds second 
corresponds nearly perfect channel tests constructed finished seconds simulated time bad channel 
scenario proportions state bad state length gradually worsened 
scenario scenario proportions fixed channel quality remains 
state lengths vary second bad state length tenth state length 
allows protocols energy efficiency examined varying bad state lengths proportions state bad state length remain 
tcp parameters previous chapters parameters tcp mentioned 
include minimum window size maximum window size window size timeout error limit 
paragraph explained kind effects parameter default values chosen 
minimum window size tcp sender initializes window size minimum window size timeout occurs set window size value 
window size important parameter large effect energy efficiency protocol 
minimum window size increases time overhead diminish 
sender minimum speed higher 
increased minimum window size means case long burst errors data overhead increase sender transmission rate burst errors quite high 
choosing value parameter partly tradeoff decreased time overhead increased data overhead 
graphs performance minimum window sizes packets 
energy overhead energy overhead scenario type radio intermediate state length bad state length packets energy overhead tcp various minimum window sizes scenario energy overhead energy overhead scenario type radio intermediate donckers state length bad state length packets energy overhead tcp various minimum window sizes scenario seen graphs higher minimum window size set lower energy overhead 
assume choosing highest value possible best 
situation little bit complicated 
higher minimum window size higher data overhead certain situations high bad state lengths scenario example 
causes energy overhead ideal type radio minimum window size packets higher situations 
high minimum window size best solution 
mentioned data overhead energy overhead figures shown blown graphs 
byte overhead byte overhead scenario state length bad state length packets byte overhead tcp various minimum window sizes scenario energy overhead energy overhead scenario type radio ideal state length bad state length packets energy overhead tcp various minimum window sizes scenario furthermore important tcp remains adaptive 
higher minimum window size smaller difference minimum maximum window size 
energy efficient tcp reduces adaptivity tcp suitable wide variation situations 
reasons default value packets chosen 
maximum window size maximum window size quite large impact energy efficiency 
tcp sender set window size higher maximum window size 
higher value greater bandwidth protocol fully utilize 
large values decrease time overhead especially high bandwidth links 
unfortunately large values hamper performance low bandwidth links 
large maximum window size causes high data overhead case long burst errors traffic flight takes longer protocol reach acceptable window size 
maximum size close minimum window size protocol adapt various channel situations 
choosing default value done making tradeoff performance low high speed links time versus data overhead 
graphs performance maximum window sizes packets 
energy overhead energy overhead scenario type radio intermediate state length bad state length packets energy overhead tcp various maximum window sizes scenario energy overhead energy overhead scenario type radio intermediate state length bad state length packets energy overhead tcp various maximum window sizes scenario difficult see tcp maximum window size packets scores best scenario lower higher value causes energy overhead increase 
long bad state lengths scenario lower maximum window size better tcp performs predicted 
care taken difference minimum maximum large tcp remain adaptive 
choice parameter quite difficult 
default value packets chosen value satisfies requirements best 
window size timeout window size set value re transmission timeout occurs 
large value causes sender quickly recover burst error causes extra data overhead burst error 
choosing default value boils making tradeoff data time overhead 
see graphs parameter donckers tremendous effect energy overhead 
graphs show energy overhead tcp window sizes timeout packets 
energy overhead energy overhead scenario type radio intermediate state length bad state length packets energy overhead tcp various window sizes timeout scenario energy overhead energy overhead scenario type radio intermediate state length bad state length packets energy overhead tcp various window sizes timeout scenario differences minute value packets lowest energy overhead scenario scenario differences somewhat larger size packets performs best 
longer bad state length better lower values perform 
small differences parameter warrant attention 
value packets best performer 
error limit error limit parameter decides tcp sender thinks channel burst error state 
higher value errors occur tcp drastically reduces transmission speed 
large value tcp smaller time overhead case small burst errors 
hand higher data overhead case long burst errors tcp slower reacting 
tradeoff data time overhead default value chosen 
energy overhead tcp error limits errors graphs 
energy efficient tcp energy overhead energy overhead scenario type radio intermediate state length bad state length errors energy overhead tcp various error limits scenario energy overhead energy overhead scenario type radio intermediate state length bad state length errors energy overhead tcp various error limits scenario seen error limit large impact energy overhead tcp 
scenario tcp performs better error limit increases 
bad state lengths short decreasing transmission speed serves purpose 
scenario energy overhead tcp lower error limit decreases 
bad states long scenario warrant slowdowns 
tradeoff scenarios yields default value errors 
studying performance tcp different parameters set optimal parameters chosen default values 
times selection values parameters quite difficult necessary tradeoff increasing performance metric certain situation decreasing performance metric possibly situation 
minimum maximum window size quite large impact energy efficiency especially compared window size timeout error limit hardly influence energy efficiency tcp 
certain situations choosing value minimum maximum window size yield maximum decrease energy overhead 
chosen default values considered best values 
summarize selection values listed table 
parameter default value minimum window size packets maximum window size packets window size timeout packets error limit errors table default values parameters tcp 
donckers tcp paragraph performance evaluation various methods increase energy efficiency tcp 
methods optimized window management selective small headers partial reliability 
performance evaluation start comparing tahoe tcp optimized window management enabled 
comparison done tahoe energy efficient version tcp shown paragraph 
selective added tcp followed headers partial reliability 
tests done default setup 
window management test tcp window management enabled 
unfortunately window management scheme tcp relies selective operate properly 
version tcp severely 
energy overhead protocols shown graphs 
energy overhead energy overhead scenario type radio intermediate state length bad state length tahoe tcp window management energy overhead various protocols scenario energy overhead energy overhead scenario type radio intermediate state length bad state length tahoe tcp window management energy overhead various protocols scenario scenario clear tcp reach low levels energy overhead 
tahoe clearly scores better 
certainly lot room improvement 
scenario tcp outperforms tahoe energy efficient protocol 
selective selective enabled tcp test 
window management scheme perform better directly depends sack 
energy overhead scenarios shown graphs 
energy efficient tcp energy overhead energy overhead scenario type radio intermediate state length bad state length tahoe tcp window management tcp window management sack energy overhead various protocols scenario energy overhead energy overhead scenario type radio intermediate state length bad state length tahoe tcp window management tcp window management sack energy overhead various protocols scenario seen graphs tcp energy overhead tahoe scenario time 
clearly tcp depends selective scenario 
scenario gain impressive especially small bad state lengths tcp selective energy efficient tcp window management 
clearly selective tcp energy efficient scenarios 
tcp headers custom headers tcp test 
smaller standard tcp ip headers contribute energy overhead 
enabling custom headers gets tcp full strength 
versions listed graphs quite hard study 
tcp window management selective enabled compare standard tcp 
energy overhead versions tcp shown graphs 
energy overhead energy overhead scenario type radio intermediate state length bad state length tcp window management sack tcp energy overhead various protocols scenario energy overhead energy overhead scenario type radio intermediate donckers state length bad state length tcp window management sack tcp energy overhead various protocols scenario clear graphs enabling custom headers lowers energy overhead tcp scenarios situations 
partial reliability previous paragraph shown energy overhead standard tcp 
application allows tcp enter partial reliable mode operation 
enhance energy efficiency 
test tcp reliability 
energy overhead reliabilities shown graphs 
energy overhead energy overhead scenario type radio intermediate state length bad state length tcp tcp reliability energy overhead various protocols scenario energy overhead energy overhead scenario type radio intermediate state length bad state length tcp tcp reliability energy overhead various protocols scenario scenarios partial reliability manages improve energy efficiency tcp considerably 
partial reliability obviously larger effect quality channel energy efficient tcp deteriorates 
reason packets lost advantage retransmitting increases 
dissecting tcp clear energy efficient method tcp contributed energy efficiency tcp 
enabling window management scheme tcp clearly tcp unable perform better tahoe scenario selective added tcp quite energy efficient energy overhead tahoe scenarios 
tcp custom headers increased energy efficiency just enabling partial reliability 
give indication energy overhead versions average energy overhead listed table version scenarios 
protocol version scenario scenario tahoe tcp window management tcp window management sack tcp tcp reliability table average energy overhead various protocol versions 
paragraph proposals mentioned deploy tcp 
proposal allowed transport protocol base station replaced tcp 
second proposal replace transport protocol base station mobile host third proposal change applications mobile possibly internet host 
expected proposal yield smallest gain energy efficiency third proposal yield largest gain energy efficiency 
tcp possible check expectations correct 
base station running version tcp possible optimized window management method 
problems 
tcp window management enabled higher energy efficiency tahoe considerably higher 
depends situation 
second problem base station sender energy saved 
problem solved mobile host running sack enabled version tcp quite useless consider proposal 
said unclear energy saved energy saved base station mobile host needed 
second proposal executed things interesting 
base station mobile host running tcp problem window management scheme selective 
shown enabled tcp clearly energy efficient protocols mobile host definitely save energy 
energy overhead protocols times high tcp 
furthermore tcp headers increasing energy efficiency 
energy overhead protocol times high tcp 
energy efficiency average energy overhead tahoe scenario respectively tcp scores respectively 
donckers partial reliability enabled third proposal executed changing applications mobile internet hosts 
causes energy overhead tcp drop levels times small normal tcp 
energy efficiency average energy overhead tcp partial reliability scenario respectively 
partial reliability streaming media 
evaluation tcp evaluation tcp detailed look default setup 
closer examination performance wireless links different bandwidths 
closer look taken influence different delays traffic effect partial reliability studied 
default setup test parameters set defaults 
means bandwidth mbps delay ms protocols compared tahoe reno newreno tcp 
partial reliability mechanism tcp disabled tcp reliable just protocols 
simulated traffic mass data transfer mb total 
error scenarios 
time performance evaluation closer look taken data overhead time overhead examining energy overhead 
evaluations graphs omitted energy overhead counts 
test yield interesting results respect data time overhead graphs included 
byte overhead byte overhead scenario state length bad state length tahoe reno newreno tcp byte overhead various protocols scenario byte overhead byte overhead scenario state length bad state length tahoe reno newreno tcp byte overhead various protocols scenario seen tcp data overhead tcp versions scenarios points 
attributed small headers optimized window management combination selective 
especially scenario clear quality channel deteriorates data overhead increases 
interesting note decrease data overhead scenario tcp right side energy efficient tcp graph 
standard tcp tcp decrease transmission speed small burst errors resulting low data overhead burst errors small 
characteristic graphs noted standard versions tcp behave 
absolute values data overhead may differ somewhat tendency version closely resembles 
time overhead time overhead scenario state length bad state length tahoe reno newreno tcp time overhead various protocols scenario time overhead time overhead scenario state length bad state length tahoe reno newreno tcp time overhead various protocols scenario enormous differences time overhead hard see time overhead tcp differs protocols left sides graphs 
examining source data graphs clear tcp time overhead twice small protocols worst cases 
especially quality channel deteriorates right side graphs difference time overhead tcp protocols increases 
means considering time overhead tcp scales better protocols quality channel worsens 
just data overhead versions tcp tested behave way 
absolute values differ somewhat tendency 
clear versions tcp time overhead data overhead 
way energy overhead calculated probably large differences different types radios 
means energy overhead shown graphs 
scenario graphs shown graph corresponding certain type radio 
energy overhead energy overhead scenario type radio active state length bad state length tahoe reno newreno tcp energy overhead various protocols scenario energy overhead energy overhead scenario type radio intermediate state length bad state length tahoe reno newreno tcp energy overhead various protocols scenario energy overhead energy overhead scenario type radio active donckers state length bad state length tahoe reno newreno energy overhead various protocols scenario energy overhead energy overhead scenario type radio intermediate state length bad state length tahoe reno newreno energy overhead various protocols scenario energy efficient tcp energy overhead energy overhead scenario type radio ideal state length bad state length tahoe reno newreno tcp energy overhead various protocols scenario energy overhead energy overhead scenario type radio ideal state length bad state length tahoe reno newreno energy overhead various protocols scenario thing concluded tcp significantly lower energy overhead protocols scenarios types radios 
tcp higher energy efficiency protocols test 
usually tcp overhead twice small protocol difference increase shorter bad state lengths times small 
important thing note just data time overhead versions tcp behave way 
protocol compare performance tcp 
graphs studied closely tahoe said energy efficient protocol 
clear energy overhead obtained protocols ideal type radio lower types radio 
ideal type radio time overhead big impact 
seen standard tcp versions time overhead higher data overhead causes increased energy overhead types radios 
final absolute values energy overhead differ types radios tendencies protocol regardless type radio 
type radio tests 
intermediate type chosen types extremes scale 
intermediate type probably better suited compared real radios 
complete energy efficiency graphs intermediate type radio scenarios listed 
energy efficiency energy efficiency scenario type radio intermediate state length bad state length tahoe reno newreno tcp energy efficiency various protocols scenario energy efficiency energy efficiency scenario type radio intermediate donckers state length bad state length tahoe reno newreno tcp energy efficiency various protocols scenario concluded energy overhead graphs clear tcp higher energy efficiency protocols 
bandwidth test impact channel bandwidth energy overhead examined 
test setup equals default setup changes 
bandwidth fixed mbps different bandwidths mbps 
told previous paragraph tahoe tcp energy overhead graphs intermediate type radio shown 
results test seen graphs energy overhead energy overhead scenario type radio intermediate state length bad state length mbps energy overhead tahoe various bandwidths scenario energy overhead energy overhead scenario type radio intermediate state length bad state length mbps energy overhead tcp various bandwidths scenario energy efficient tcp energy overhead energy overhead scenario type radio intermediate state length bad state length mbps energy overhead tahoe various bandwidths scenario energy overhead energy overhead scenario type radio intermediate state length bad state length mbps energy overhead tcp various bandwidths scenario terribly high overhead tahoe high bandwidth low quality links graphs truncated overhead 
links smallest state length tahoe energy overhead mbps links respectively scenario scenario close examination graphs seen tcp energy overhead tahoe bandwidth quality channel combination 
cases tahoe energy overhead twice large tcp 
means tcp energy efficient tahoe test 
second independent bandwidth tcp scales better tahoe channel conditions deteriorate 
clear tcp scale worse tahoe bandwidth increases 
important characteristic tcp bandwidths new wireless standards rapidly increasing 
delay impact delay channel energy overhead tahoe tcp examined test 
test setup equals default setup changes delay fixed ms test run delays ms energy overhead scenarios shown graphs 
energy overhead energy overhead scenario type radio intermediate state length bad state length tahoe ms tahoe ms tahoe ms tahoe ms tcp ms tcp ms tcp ms tcp ms energy overhead tahoe tcp various delays scenario energy overhead energy overhead scenario type radio intermediate donckers state length bad state length tahoe ms tahoe ms tahoe ms tahoe ms tcp ms tcp ms tcp ms tcp ms energy overhead tahoe tcp various delays scenario graphs truncated large differences overhead 
time 
links smallest state length tahoe energy overhead links ms delay respectively scenario scenario drawn studying graphs 
tcp lower energy overhead tahoe delay channel quality combinations energy efficient 
second tcp scales better channel delay increases 
traffic test energy overhead tahoe tcp examined various types traffic 
tests done simulation mass data transfer 
test types traffic simulation 
simulation done interactive application model models interactive types traffic telnet sessions chatting instant messages 
second simulation done constant bit rate application models streaming audio video 
interactive traffic model works bit different data transfer model 
interactive traffic model delay consecutive packets set 
application randomly create packets way average delay packets equals set value 
test times seconds resemble data rates kbps kbps 
energy overhead scenarios shown graphs 
energy efficient tcp energy overhead energy overhead scenario type radio intermediate state length bad state length tahoe tahoe tahoe tahoe tcp tcp tcp tcp energy overhead tahoe tcp various times scenario energy overhead energy overhead scenario type radio intermediate state length bad state length tahoe tahoe tahoe tahoe tcp tcp tcp tcp energy overhead tahoe tcp various times scenario seen performance protocols scenario barely changes times altered 
scenario tahoe consistently twice energy overhead tcp 
scenario differences large tcp manages score lower energy overhead scores 
constant bit rate traffic model resembles interactive model somewhat 
sends data specified rate 
model streaming media data rates mbps 
energy overhead scenarios shown graphs 
energy overhead energy overhead scenario type radio intermediate state length bad state length tahoe mbps tahoe mbps tahoe mbps tcp mbps tcp mbps tcp mbps energy overhead tahoe tcp various data rates scenario energy overhead energy overhead scenario type radio intermediate state length bad state length tahoe mbps tahoe mbps tahoe mbps tcp mbps tcp mbps tcp mbps energy overhead tahoe tcp various data rates scenario large differences energy overhead graphs truncated 
scenario state length second tahoe scores data rates mbps respectively scenario respectively scenario donckers graphs concluded scenario tcp energy efficient tahoe 
furthermore tcp scales better data rates increase 
scenario tahoe able equal tcp energy overhead bad states long data rates low 
tcp energy efficient data rates increase bad state lengths shorten 
tcp higher energy efficiency test 
drawn graphs absolute numbers differ tcp different data rates tendencies 
means different data rates tcp behaves 
mbps constant bit rate traffic able completely saturate link bandwidth mbps 
traffic behaves exactly mass data transfer 
closely examining source data graphs proved 
partial reliability test partial reliability tcp examined 
default setup protocols tahoe tcp 
tahoe course fully reliable 
tcp set reliability reliability 
intention test reliability allow fine tuning reliability 
apparently tcp application fine grained control reliability connection 
useful partial reliability certain types traffic 
streaming media applications mass data transfer images audio video applications suited adapt partial reliability 
constant bit rate mass data transfer models test 
previous paragraph shown data rate mbps constant bit rate application behaves exactly mass data transfer application 
furthermore shown tcp behaves different data rates constant bit rate application 
sufficient mass data transfer default test setup test 
energy overhead scenarios shown graphs 
energy overhead energy overhead scenario type radio intermediate state length bad state length tahoe tcp tcp energy overhead various protocols scenario energy overhead energy overhead scenario type radio intermediate state length bad state length tahoe tcp tcp energy overhead various protocols scenario energy efficient tcp graphs truncated large differences energy overhead 
time 
scenario tahoe energy overhead state length second scenario protocol scored state lengths second respectively 
graph scenario things deduced 
reliability clearly energy overhead tahoe 
interesting thing note tcp reliability score independent quality channel 
loose reliability constraints protocols deal efficiently errors 
tcp reliability clearly trouble quality channel worsens reliability constraints tighter 
manages surpass worst channel conditions 
scenario point valid 
efficient tahoe tcp reliability surpasses performance worst channel conditions 
just scenario tcp reliability energy efficient protocol 
performance far energy efficiency tcp examined 
goal thesis course important metric 
important take look traditional performance metrics throughput latency 
comparison various protocols respect traditional performance extensive evaluation energy efficiency 
throughput measure indicate utilization link 
measured bits second course exceed bandwidth link 
throughput calculated dividing payload data transmission total time took complete data transmission 
faster data transmission finished higher throughput 
time overhead decreases time completion decreases vice versa concluded lower time overhead protocol higher throughput 
time overhead tcp versions tcp examined prediction throughput protocols 
expected tcp higher throughput versions tcp 
test throughput tcp default test setup 
throughput higher mbps 
graphs throughput tcp versions tcp shown 
throughput mbps throughput scenario state length bad state length tahoe reno newreno tcp throughput various protocols scenario throughput mbps throughput scenario donckers state length bad state length tahoe reno newreno tcp throughput various protocols scenario seen graphs throughput tcp clearly higher versions tcp 
channel conditions deteriorate difference throughput exceptionally large 
just time overhead graphs paragraph versions tcp behave 
absolute throughput scores may differ somewhat especially scenario graphs show tendency 
optimizing tcp energy efficiency lowering time overhead throughput unintentionally increased 
direct relation time overhead throughput unnecessary examine test setups 
time overhead tcp test setups closely examined calculate energy overhead 
test setups tcp time overhead protocols throughput higher 
latency protocol measured milliseconds traditional performance metric 
latency packet time transmission packet sending host successful reception packet destination host 
latency lower delay wireless link link layer mac layer combined 
case retransmissions latency surely increase 
average latency average latency packet 
metric test 
throughput average latency direct relation data time overhead 
weak relation time overhead average latency lower time overhead lower average latency probably 
expected tcp perform better protocols 
average latency tcp versions tcp calculated results tests done default test setup shown graphs 
energy efficient tcp average latency ms average latency scenario state length bad state length tahoe reno newreno tcp average latency various protocols scenario average latency ms average latency scenario state length bad state length tahoe reno newreno tcp average latency various protocols scenario clearly graphs show average latency tcp lower versions tcp 
throughput difference increases channel conditions deteriorate 
default test setup average latency drop ms account performance tcp 
channel conditions worst tcp adds ms minimum latency protocols add ms paragraph performance evaluation tcp 
test tahoe reno newreno compared tcp default test setup 
said tcp clearly higher energy efficiency protocols 
tests tahoe energy efficient standard version tcp compared tcp different bandwidths delays types traffic 
tcp consistently lower energy overhead tahoe 
give indication efficiency tcp average energy overhead tested protocols listed table scenarios default test setup 
protocol scenario scenario tahoe reno newreno tcp table average energy overhead various protocols 
partial reliability tests run compared tcp various reliability constraints 
tcp energy efficient protocol 
give indication efficiency protocols tests average energy overhead tested protocols listed table scenarios 
protocol scenario scenario reliability tcp reliability tcp reliability donckers table average energy overhead various protocols various reliability constraints 
paragraph traditional performance evaluation tcp conducted 
results concluded traditional performance metrics throughput latency tcp manages outperform versions tcp significant amount 
give indication performance tcp average throughput average latency tested protocols listed tables scenarios default test setup 
protocol scenario mbps scenario mbps tahoe reno newreno tcp table average throughput various protocols 
protocol scenario ms scenario ms tahoe reno newreno tcp table average latency various protocols 
energy efficient tcp recommendations donckers results simulations chapter important tcp energy efficient 
comparing tcp standard versions tcp tahoe reno newreno clear tcp consistently energy overhead higher energy efficiency 
tcp optimized energy efficiency points 
optimization addresses problems tcp keep reaching high levels energy efficiency 
point scheme tcp unable provide sending host information state destination host 
tcp uses selective overcome problem 
selective required second optimization window management 
optimization result efforts tcp aware burst errors 
burst errors major cause packet loss wireless links tcp considers packet loss result congestion tcp unable react burst errors energy efficient way 
optimizations effect really determined separately cause greatest decrease energy overhead total decrease energy overhead 
third optimization partial reliability limit unwanted retransmits transmission streaming media 
optimization cause total decrease energy overhead 
final optimization custom headers rely techniques header compression standards minimize wasted energy 
optimization cause total decrease energy overhead 
tcp compared standard tcp various conditions 
bandwidth delay type traffic channel conditions widely varied get complete overview energy efficiency characteristics tcp 
bandwidth varied mbps representing lower speed serial links mbps representing new high speed ieee wireless network standard 
results concluded tcp energy overhead tcp bandwidth quality channel combination 
cases tcp energy overhead twice large tcp 
second independent bandwidth tcp scales better tcp channel conditions deteriorate 
clear tcp scale worse tcp bandwidth increases 
delay wireless link link layer mac layer combined varied ms ms representing kinds wireless links 
drawn studying results 
tcp lower energy overhead tcp delay channel quality combinations energy efficient 
second tcp scales better tcp channel delay increases 
types traffic simulations tcp interactive traffic representing chatting instant messaging example mass data transfers representing file transfers browsing example constant bit rate traffic representing streaming media 
results concluded tcp continuously manages outperform tcp terms energy efficiency kind traffic channel qualities 
traditional performance evaluation tcp conducted 
consisted throughput latency comparisons standard versions tcp 
optimizations reduce data time overhead throughput tcp increased 
version tcp able reach higher throughput tcp 
delay tcp lower versions tcp 
energy efficient tcp raise question optimizing energy efficiency optimizing throughput latency 

example shows protocol high throughput automatically high energy efficiency tcp sender transmits highest possible speed 
sender high throughput 
waste substantial amount energy transmit highest possible speed burst errors 
optimizations energy efficiency distinct optimizations throughput latency 
research areas recommended examined 
assumptions energy efficiency calculated subject examinations 
assumptions unclear accurately portray reality 
detailed study actual energy consumption caused protocol measured calculated evident data desirable 
second area recommended research characteristics burst errors 
little research kind error characteristics wireless links experience 
unclear accurately model errors simulated environments 
information available length burst errors time consecutive burst errors bit error rate wireless link normal conditions burst errors accurate models increase reliability simulations 
furthermore simulations base station designed implemented 
allow simulations entire setup just wireless part 
information performance complete connection mobile internet host vice versa valuable 
important reason implementing base station examine effect complete connection energy efficiency tcp mobile host 
final recommendation research compare tcp protocols wireless links 
lot tcp proposed wireless links 
protocols generally focus optimizing performance connection respect throughput delay 
overlap optimizing traditional performance energy efficiency certainly possible protocols energy efficient standard tcp 
able surpass tcp remains seen certainly interesting research area 
comparison implementations protocols ns obtained 
bibliography donckers bak badrinath tcp indirect tcp mobile hosts proceedings th international conference distributed computing systems may 
bak badrinath implementation performance evaluation indirect tcp ieee transactions computers march 
bal balakrishnan srinivasan katz improving reliable transport handoff performance cellular wireless networks acm wireless networks 
blu bluetooth special interest group specification bluetooth system volume core version www bluetooth com february 
bro brown singh tcp tcp mobile cellular networks computer communications review october 
bru garcia enhancing tcp performance allowing controlled loss proceedings computer ebusiness conference aquila italy august 
cas casner jacobson compressing ip udp rtp headers low speed serial links rfc february 
che chen medium access control wireless lans mobile computing ieee network magazine september 
com comer internetworking tcp ip volume principles protocols architecture rd edition prentice hall upper saddle river united states america 
deg pink ip header compression rfc february 
eck eckhardt steenkiste measurement analysis error characteristics building wireless network proceedings acm sigcomm conference october 
eng casner ip header compression ppp rfc february 
fal fall floyd simulation comparison tahoe reno sack tcp computer communication review july 
fal fall varadhan ns manual vint project www isi edu nsnam ns october 
flo floyd mahdavi mathis podolsky extension selective sack option tcp rfc july 
gar garcia robust jpeg coder partially reliable transport service proceedings th international workshop enschede netherlands october 
haa haas agrawal mobile tcp transport protocol design mobile systems icc montreal canada june 
hav havinga smit mac energy efficient mac protocol multimedia traffic moby dick technical report www cs utwente nl havinga 
hav havinga energy efficiency error correction wireless systems ieee wireless communications networking conference september 
energy efficient tcp hav havinga smit energy efficient tdma medium access control protocol scheduling proceedings asian international mobile computing conference november 
hav havinga smit bos energy efficient adaptive wireless network design th symposium computers communications iscc antibes france july 
iee ieee wireless lan medium access control mac physical layer phy specifications ieee standard 
iee ieee higher speed physical layer phy extension ghz band ieee standard 
jac jacobson braden tcp extensions long delay paths rfc october 
jac jacobson compressing tcp ip headers low speed serial links rfc february 
mat mathis mahdavi floyd tcp selective options rfc october 
ram ramakrishnan floyd proposal add explicit congestion notification ecn ip rfc january 
rat matta wtcp efficient mechanism improving tcp performance wireless links proceedings rd ieee symposium computer communications june 
ste stemm katz measuring reducing energy consumption network interfaces hand held devices ieice transactions communications 
vai vaidya mehta perkins delayed duplicate tcp unaware approach improve performance tcp wireless technical report computer science department texas university february 

