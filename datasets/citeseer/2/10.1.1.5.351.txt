performance evaluation tcp enhancements slow wireless links pasi department computer science university helsinki box fin university helsinki finland mail cs helsinki fi increasing number hosts connected internet slow wireless link 
networking applications internet tcp protocol known problems wireless link 
number enhancements suggested tcp wireless links 
study performance ects sack limited transmit newreno tcp increased initial window 
additionally experiment newreno tcp limited shared advertised window expect reduce number congestion losses bottleneck wireless link 
results performance tests mentioned tcp enhancements link free trac heavy congestion wireless link 
number wireless internet hosts increase considerably near 
addition hosts wireless lan connection internet protocols wireless terminals operating wireless wide area networks wans gsm gprs third generation technologies 
networking applications wireless links large amount research wireless links prone transmission errors usually signi cantly lower bandwidth traditional xed networks 
majority internet applications transmission control protocol tcp transport layer protocol 
tcp provides ow control reliable delivery data segments communicating endpoints adjusting sender rate avoid network 
tcp assumes packet lost network congested router dropped 
tcp sender slows transmission rate observes packet loss 
wireless link packet lost transmission error caused natural environment 
loss slowing transmission rate wrong action take 
signi cant amount tcp research targeted improving tcp performance communicating wireless link see 
wireless link layer protocol er reliable service upper layer protocols retransmitting missing link layer frames 
reliable link layer protocol tcp protocol sees transmission errors delays variable length packet losses 
reliable link layer protocol leads generally better performance doing toend retransmissions tcp protocol 
assume reliable link layer protocol 
main approaches applied tcp layer improve performance communicating wireless links 
solutions proxies located wireless link xed internet 
proxies easy di erentiate packet losses occur wireless link packet losses occur xed network making possible improve performance wireless tcp communication 
proxies violate semantics internet main design principle internet protocols 
harmful functionality interoperation internet protocols ipsec 
proxies disadvantages aim performance improvements modifying behaviour tcp endpoints having ect behaviour network hosts middle connection path 
study di erent modi cations tcp implementation connection endpoints 
tcp enhancements may require modi cation ends tcp connection alter behaviour endpoint preserving compatibility legacy tcp implementations connection 
rest organized follows section describe network architecture typically wan networks 
section illustrates certain speci problems ecting tcp performance 
tcp enhancements evaluating study overcome described problems introduced section 
describe test arrangements performance tests section section gives results performance tests 
conclude section 
wireless network architecture assume architecture illustrated wireless networking environment study 
gure shows mobile host communicates base station wireless link 
hop router forwards packets base station xed internet 
model similar architecture wan systems 
base station hop router fixed host mobile host internet fixed host web server web cache wan network architecture 
mobile host communicates base station wireless link 
available bandwidth wan wireless links considerably slower bandwidth usually available xed network 
example gsm data service provides bandwidth bps 
latencies wan wireless links vary ms resulting bandwidth delay product link necessarily high wan systems reliable link layer protocol retransmits missing frame succesfully delivered 
packet reordering usually harmful transport layer protocols especially tcp link layer receiver stores incoming frames bu ers packets delivered upper protocol layers right order 
behaviour causes variable delays packet transmissions 
packets usually arrive hop router xed network faster rate forward wireless link 
input queue length router grow easily 
queueing increases packet delays hop router queue length usually limited packets usually trac transmitted downlink server located xed network mobile host 
case web transfers usually small requests transmitted uplink direction 
internet providers isps web cache local network reduce amount packets needed transfer public network 
requested information available local network transmission path packets tends simple consisting hops addition wireless link 
tcp problems slow wireless links earlier studies reported di erent problems tcp performance slow unreliable links 
section brie introduce bandwidth delay product indicates maximum amount data outstanding link 
assume mobile user dedicated channel link dedicated space hop router 
gsm allocates link hop bu ers 
main problems expect face performance tests 
newreno tcp baseline tcp implementation study 
addition traditional slow start congestion avoidance algorithms newreno tcp sender uses fast recovery algorithm recovering packet losses 
fast recovery tcp sender transmit new data waiting retransmissions 
tcp sender receives duplicate acks fast retransmit rst unacknowledged segment 
fast retransmit introduced avoid retransmission timeout rto usually causes idle periods transfer harmful performance 
fast retransmit sender fast recovery succesfully received segments lost window transmissions 
slow start overshooting initially tcp sender starts slow start state increasing congestion window cwnd incoming 
sender exits slow start congestion avoidance state congestion window size reaches slow start threshold ssthresh 
ssthresh initialized nite value initial slow start exited packet lost rst time 
link layer reliable packet loss occurred hop router queue lled drop incoming packet 
tcp sender observes packet loss duplicate acks generated receiver roughly round trip time rst packet loss passed 
time sender transmitted window data slow start algorithm full hop router queue 
result usually packets lost time rst packet loss arrival duplicate acks sender 
behaviour called slow start overshooting illustrated time sequence diagram 
spurious timeouts delay transferring packets wireless link vary substantially ms seconds various reasons link layer retransmissions hand cases suddenly increased packet delay high trigger tcp rto sending 
result tcp sender reduces congestion window segment retransmits window data time data sent ack rcvd packet dropped segment dropped fast recovery fast retransmit cwnd slow start overshooting 
rst unacknowledged packet 
called go back behaviour 
rto caused excessive delay retransmissions unnecessarily scarce bandwidth unnecessary wasted 
additionally unnecessary retransmitted segments appear receiver order segments generates duplicate acks 
turn unnecessarily trigger fast retransmission cause sender enter fast recovery algorithm 
illustrates spurious retransmission timeout consequences 
suggested tcp enhancements brie introduce selected tcp enhancements suggested improve tcp performance links high latency high packet loss rate 
evaluate performance implications tcp enhancements emulated slow wireless link 
time sequence number bytes data sent ack rcvd spurious fast retransmit rto go back dupacks caused order segments rto expires spurious retransmission timeouts 
selective sack basic tcp uses cumulative tcp receiver acknowledge highest segment received continuous stream data 
segment missing segments acknowledged missing segment successfully retransmitted 
result tcp sender retransmission round trip time 
sack introduced overcome problem tcp option headers acknowledge blocks data addition cumulative 
possible sender retransmit missing segment round trip time improving tcp performance slow start overshooting example 
sack option handling needs implemented ends tcp connection 
limited transmit packet loss rate high tcp congestion window tends small 
tcp sender requires successive duplicate acks trigger fast retransmit congestion window smaller segments fast retransmit fast recovery algorithms unusable 
limited transmit algorithm tcp sender allowed transmit new segment arriving duplicate ack fast retransmit takes place 
receiver generates new duplicate ack incoming order segment sender eventually get duplicate acks trigger fast retransmit 
evaluate ect combining sack limited transmit sack retransmissions depend incoming duplicate acks 
increased initial window traditionally tcp sender starts initial congestion window size set segments follows slow start algorithm increase window size 
path communicating tcp hosts large bandwidth delay product takes round trip times increase congestion window size corresponds network capacity 
larger initial congestion window segments suggested speed startup connection 
obviously modi cation increase level congestion network cause packets lost 
evaluate performance ects larger initial window slow wireless link 
limited advertised window avoiding slow start overshooting related packet losses attractive goal obviously improve tcp performance 
tcp sender legacy server internet unable know path characteristics client server unable guess proper value congestion window size connection 
assume mobile user usually knows approximate characteristics hop link 
tcp receiver usually mobile host limiting sending rate receiver reasonable 
possible setting upper bound tcp advertised window size controls maximum number packets outstanding network 
introduce modi cation tcp uses de ned upper limit advertised window size 
advertised window limit shared tcp connections wireless link scaled number connections keep number ing packets estimated bu ering capacity hop router wireless link 
test arrangements evaluate performance selected tcp enhancements environment consists xed server attached lan router lan bps wireless link hop router mobile host 
upper part illustrates environment modelling study 
believe illustrated arrangement corresponds setup corporate isps web proxy local network 
variable delays bps tcp connection tcp connection fixed host hop router data flow ack flow tcp connection tcp connection mbps constant delay wireless link link emulated emulation environment target environment emulation host lightly loaded mbps lan lsb mobile host link buffers input queue lsb receiver sender test environment 
real time network emulator called simulate wireless link hop router 
captures packets network interfaces hosts transparently ip implementation protocols making possible evaluate protocol implementations real operating systems 
slow link emulated delaying network packets appropriately 
link layer retransmissions emulated holding ected packet speci ed amount time delivering onward 
simple way emulating link layer retransmissions believe suf cient order study ects excessive link layer delays tcp protocol 
extensive link layer delays occur reasons don want restrict source delays 
linux kernel version hosts performance tests 
linux version sack limited transmit algorithm implemented 
additional modi cations linux kernel increase initial window size limit advertised window size 
simulation process located third linux host free ensure accurate response times emulation 
hosts located isolated mbps lan free network trac related emulation 
bottom part illustrates test setup 
evaluate tcp enhancements measuring connection times studying detailed behaviour tcp variants test scenarios described 
unidirectional bulk transfers originating xed host workload 
workload models kb transferred single tcp connection parallel tcp connections transferring kb data 
measure time elapsed sending rst tcp syn segment receiving tcp fin tcp sender addition measure time transmitting rst kb data tcp connection 
metric emphasizes ect initial tcp slow start 
furthermore today tcp connections transfer kb 
model hop router queue packets drop tail policy 
addition router input queue model link bu ers bytes ends wireless link 
link bu er needed sending store link layer frames acknowledged order retransmit lost frames 
receiving link bu er stores order frames able forward packets right order upper protocol layers 
link bu ers hold packets worth data addition data router queue 
link bandwidth bps propagation delay link ms tcp maximum segment size bytes 
link models tests 
rst test case don linux sack follows fack retransmission algorithm 
syn segment way handshake tcp connection 
fin segment nish tcp connection 
additional delays link packet transmission delay propagation delay 
second scenario second additional delay occur packet probability 
delay length seconds xed usually long trigger tcp rto wanted study ects having rtos di erent stages tcp connections 
preliminary tests show short delays causing retransmission timer expire ect signi cantly tcp performance 
test case repeated times di erent random values 
random distribution testing di erent tcp enhancements improve comparability tcp variants 
results performance tests section presents results performance tests di erent tcp enhancements 
table shows results tests single tcp connection hop router bu er size packets 
table shows median times test replications excessive second random delays 
addition time kb connection table shows time transmitting getting rst kb workload data 
table elapsed times tests single tcp connection 
excessive delay delay pr 
tcp variant time kb time kb time kb time kb newreno sack limited xmit sack lim 
xmit iw adv 
wnd kb table con rms expectations earlier 
sack tcp performs clearly better newreno tcp connection slow start overshooting occurs 
limiting receiver advertised window packet losses due slow start overshooting avoided performance ideal limited advertised window adv 
wnd kb 
limited transmit increased initial window iw signi cant impact tcp performance competing trac wireless link 
excessive delays combination sack limited transmit give best performance 
table shows results tests parallel bulk tcp connections 
excessive delays results shown addition transmission propagation delays 
table shows time transmit get rst kb workload data hop router bu er size packets 
medians measurements fastest slowest connection shown 
performance di erence fastest slowest tcp connection get primitive measure fairness connections 
primarily interested time slowest connection indicates transfers nished 
table elapsed times tests parallel tcp connections 
kb tcp connections shown 
pkt bu er pkt bu er tcp variant time fastest time slowest time fastest time slowest newreno sack limited xmit sack lim 
xmit iw adv 
wnd kb table con rms expected result sack tcp performing better newreno tcp 
parallel tcp connections packet losses due congestion occur frequently obviously promotes sack tcp able retransmission round trip time 
limited transmit improves perfor mance high packet loss rate keeps congestion window tcp connections small 
limited transmit large number tcp rtos limited transmit decreases number rtos improves tcp throughput considerably 
combining sack limited transmit gives worse performance parallel connections limited transmit sack especially packet hop router bu ers 
detailed look test results reveals combination sack limited transmit increases number congestion losses 
shows sensitivity tcp heavy congestion situations 
fack algorithm assumes segments highest received sack cumulative left network starts retransmitting slightly earlier traditional congestion control methods 
parallel tcp connections tolerate increased fack algorithm limited transmit separately combined slightly higher transmission rate fast recovery causes router queue occupied constantly 
causes connections su er increased number rtos due losses segments 
increasing initial congestion window segments tcp connections unable succesfully transmit segments receiver connection 
tcp connections available capacity link hop router bu er unfortunate connections rtos 
problem identi ed related studies commonly called lock problem 
lock behaviour tcp connection takes considerably time nish initial window segments lock problem severe 
results shared advertised window tests window segments show advertised window size appropriately set fairness signi cantly improved results clearly better throughput slowest connection 
small advertised window congestion losses avoided 
results show advertised window size set incorrectly segments packet bu ers performance worse advertised window limitation 
bu er case advertised window segments small avoid packet losses smaller window restricts proper fast recovery algorithm recover packet losses 
results performance tests di erent tcp variants emulated slow wireless link 
expected sack improved tcp performance 
bene ts limiting receiver advertised window sharing tcp connections wireless link 
parallel tcp connections increasing initial congestion window increased level congestion wireless link caused degradation performance due larger number packet losses 
combining sack limited transmit kept hop router bu er full tcp connections resulted poor throughput slowest tcp connection 
heavy congestion tcp variants tests show higher bandwidth bps congestion cause problems bps link study 
combine useful tcp enhancements try tune nd optimal settings 
inspecting methods evaluating link bandwidth delay product receiving dynamically adjust shared advertised window size worth orts 
study performance di erent workload models addition basic models introduced transfers real time streaming data 
allman 
web server view transport layer 
acm computer communication review october 
allman balakrishnan floyd 
enhancing tcp loss recovery limited transmit 
ietf rfc january 
allman floyd partridge 
increasing tcp initial window 
internet draft draft ietf txt may 
progress 
badrinath 
tcp indirect tcp mobile hosts 
proceedings th international conference distributed computing systems pages 
ieee may 
balakrishnan padmanabhan seshan katz 
comparison mechanisms improving tcp performance wireless links 
proceedings acm sigcomm stanford ca august 
border 
performance enhancing proxies intended mitigate link related degradations 
ietf rfc june 
braden recommendations queue management congestion avoidance internet 
ietf rfc april 
floyd henderson 
newreno modi cation tcp fast recovery algorithm 
ietf rfc april 
kent atkinson 
security architecture internet protocol 
ietf rfc november 
manner 
wireless network emulator 
proceedings th gi itg conference measuring modelling evaluation computer communication systems rwth aachen germany september 
appear 

ecient transport service slow wireless links 
ieee journal selected areas communications september 
mathis mahdavi 
forward re ning tcp congestion control 
proceedings acm sigcomm october 
mathis mahdavi floyd romanow 
tcp selective options 
ietf rfc october 
dawkins vaidya 
long thin networks 
ietf rfc january 

gsm system mobile communications 
europe media duplication 
postel 
transmission control protocol 
ietf rfc september 

