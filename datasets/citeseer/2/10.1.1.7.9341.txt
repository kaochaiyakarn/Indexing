graphic object layout interactive genetic algorithms sharp information system center nara japan automatic graphic object layout methods long studied application areas graphic objects laid satisfy constraints specific application 
areas carefully designed layout algorithms satisfy application constraints 
algorithms tend complicated reusable applications 
difficult add user preferences layout scheme algorithm 
overcome difficulties developed general purpose interactive graphic layout system genetic algorithms 
general purpose graphic objects laid specifying lay just specifying preferences layout 
lay complicated graphs automatically allow users modify constraints run time users tell system preferences 
lay graphic objects efficiently limited dimensional space important issue applications text formatters data lsi block layout tools 
graphic layout important interactive environments graphic constraint solving mechanisms popular user interface design tools 
constraint left edge rectangle rectangle rectangles move users move rectangle moved rectangle kind constraint solving system greatly helps users arrange graphic objects interactively 
difficulty solving constraints depends nature constraints 
linear constraints shown solved quickly interactive environments complicated constraints neatly laying graphic objects hard solve procedure get optimal solution 
heuristics long kind problems getting optimal solution impossible 
usually difficult find heuristics general purpose may completely different set heuristics solving slightly different constraints 
stochastic algorithms simulated annealing genetic algorithms ga widely graphic object layout problems 
try solve constraints directly modify candidate solutions random values approach optimal solution trials 
algorithms just specify kind constraints want solve solutions calculated automatically 
stochastic methods powerful able solve complicated constraints limitations 
difficult users get preferred results users specify lay objects 
constraints inherently hard specify 
easy specify constraints kinds graphs look neat 
solve problems developed ga interactive graphic layout system genetic algorithm presentation assisted graphic object layout system 
works automatic graphic layout system allows users modify constraints run time tell system preferences 
user notices system going solution doesn tell system moment adding modifying constraints currently calculation get preferred result 
genetic algorithms graphic layout section briefly introduce genetic algorithms show applied graphic layout problems 
crossover gene gene mutation gene generation average performance genetic algorithms overview genetic algorithms search algorithms mechanics natural selection natural genetics 
solution domain problem represented bit string gene 
starting randomly initialized set genes genes evolve better genes closer solutions problem iterations modifications genes 
iteration called generation 
modification generation performed 
performances genes set calculated gene evaluation function 
second genes performances chosen candidate genes generation 
genetic operations performed portion selected genes better genes produced 
genetic operations usually consist crossover mutation simulating real genes 
crossover performed selecting genes cutting randomly selected points exchanging portion genes cut points 
see 
mutation performed flipping value bit gene small fixed rate 
procedure simulates evolution natural selection 
gene knowledge problem solve genes survive generation bad genes die 
genes feature different portions genes produce better gene crossover 
better genes may produced mutation eventually dominate population 
spite simplicity genetic algorithms powerful robust 
genetic algorithms drawing attentions various problem areas extensive search impossible algorithm solve problems 
application areas listed 
modifications algorithm proposed improve performance 
parameters algorithm change behavior algorithm great extent 
genetic operations crossover mutation tree nodes layout best layouts generations ulation number genes mutation rate crossover rate ratio genes crossover 
evaluation function plays important roll calculation determines performance algorithm 
proper combination parameters evaluation function carefully chosen get performances 
simple example genetic algorithms graphic layout genetic algorithms lay tree structure 
axis performance graph shown left center corresponds generation axis shows average performance genes calculation criteria layout 
nodes overlap children nodes correctly ordered parent node center children nodes 
criteria evaluated evaluation function shown 
nodes lighter color left show correct node ordering 
typical shape performance improvement time 
int char gene int val decode node informations gene nodes node overlapped portion right node val overlapping width nodes val sqr parent position center position children criteria return val example specify lay nodes satisfy criteria final solution satisfies criteria shown looks balanced 
criterion spaces nodes width easily added improve appearance just adding lines 
laying tree nodes criteria ones shown hard problem fast algorithms proposed 
genetic algorithms advantages robust change criteria 
overview ga graphic layout system allows interactive runtime modification constraints defined graphic objects 
input data representation constraints defined components tries lay components rectangle genetic algorithms displays best solution 
looking displayed solution users edit graphic editor modify add new constraints 
example user noticed object placed wrong position drag right position 
user noticed objects coordinate structure look neat specify coordinate coordinate 
modify various parameters genetic algorithms 
example modify mutation rate time computation get better results 
algorithm genesis system 
main loop shown initialize gen gen check event mutate crossover evaluate measure display selects genes population baker method 
method worst performance defined genes performance worse value generation 
genes selected population gene proportional difference worst value performance gene 
worst value updated generation 
difference algorithms genesis check event users tell modify current constraints 
users continue loop start loop change 
making modifications layout constraints edited layout data copied back third population edited data prevail population 
directed graph layout directed graph layout problem directed graph graph consists set nodes set arcs arc ordered pair nodes called tail called head 
directed graph nodes arcs 
directed graph nodes arcs hard lay graph look nice humans 
constraints defined layout look nice 
listed 
graphic layout algorithms proposed solve constraints 
finding layout gives minimal number line crossing np hard problem problems 
algorithms laying directed graphs heuristics 
directed graph layout automatically lay directed graph nicely allow user edit result bad layout better layout distance nodes arc direction line crossing symmetry angle arcs uniformity inversion block move block move 
constraints layout directed graphs inversion block move add modify constraints user tell system preferences 
modifications standard genetic algorithms slight modifications standard genetic algorithms shown 
integer encoding bit string encoding 
positions nodes represented integer array array treated gene 
crossover performed exchanging portion arrays 
mutation performed giving random value array element 
second inversion genetic operator 
inversion means exchanging positions nodes 
shows inversion works layout directed graph 
block move shown candidate new ga operator 
inversion usually improve layout proper set nodes chosen block shown 
reason genetic operator 
constraints layout constraints shown default constraints 

head arc tail 

distance pair nodes bigger constant value 

number arc crossings small possible 

angle arcs bigger constant value 
constant weight values defined constraint violation constraints value added return value evaluation function 
examples shown weight values 
example added return value evaluation function line crossing 
addition constraints shown added user interactively 

node positioned place specified user 

specified nodes coordinate 

specified nodes coordinate 
initial solution solution generations adding constraints final solution initial solution adding constraints final solution sample layout session examples current implementation program executes genetic algorithms called ga visualizer display best layout get user inputs 
commercial graphic editor modifications constraints 
initial data graphic editor programs ga visualizer 
ga visualizer performs genetic algorithms displays best result generation 
user wants modify constraints edits result graphic editor gives back ga visualizer 
shows sample layout session system 
link information directed graph system 
system starts executing genetic algorithms displays best solution generation 
solution system 
generations better solution 
point user notices graph looks better nodes top nodes bottom aligned coordinate 
puts constraints graph shown big arrows continues calculation 
new constraints shown dotted lines 
gets final layout shown 
shows example 
user edits initial solution nodes numbers nodes ordered 
nodes displayed shadows 
constraint added topmost nodes aligned 
modifications final layout computed 
examples shown population crossover rate mutation rate 
manual positioning nodes discussions advantages just shown previous section lay complicated directed graph automatically allow users edit result modify constraints get preferred results 
promising approach computer aided graphic layout system 
advantages graphic object layout problems 
ffl need special ad hoc layout algorithms don devise complicated algorithm lay objects 
thing specify evaluation function corresponds criteria choose 
criteria changed don change algorithm modify evaluation function 
ffl strength constraints criteria equal importance specify importance criterion assigning different value criterion 
example laying tree nodes node overlapping considered worse unbalanced node 
represent difference importance add big value return value evaluation function overlapping nodes add small value find unbalanced subtree 
ffl robustness genetic algorithms give answer think closest solution moment 
give answer optimal solution constraints 
expect best solution chance getting solution algorithm 
ffl global layout considerations layout algorithms local information determine lay object global considerations lead combinatorial explosion computation time 
hand genetic algorithms find globally solution multiple genes represent locally solutions excessive computation time 
reason inherently tough np hard layout problems 
ffl interactive changes constraints layouts constraints modified interactively calculation graphic layout 
don results computed algorithms add modify constraints results produced 
lay parts layout fully manual letting system lay automatically 
means choose point fully automatic fully manual layout 
advantages came power ga came ga interactive extension introduced 
different ga algorithm genesis system modification minimal ga algorithm 
advanced ga algorithm shows performance graphic layout problems easily incorporated new version 
selection evaluation function evaluation function changes behavior genetic algorithms dramatically 
get expected result improper evaluation function 
may problem considered strong point algorithm reasons 
ffl users get unexpected desirable layout 
ffl users find relation constraints result layout 
relation users analyze constraints layout look point view 
related works works genetic algorithms popular area vlsi layout systems 
vlsi layout systems combination genetic algorithms simulated annealing 
genetic algorithms layout directed graph reported layout computed systems 
genetic algorithms running connection machine layout network diagram variant directed graph 
modifications standard genetic algorithms just ones shown perform efficient computation 
perceptual organization layout network diagram structure gives users better understandings network 
genetic algorithm systems shown automatic layout algorithm 
systems shown allow users modify evaluation function run time users tell preference system computation 
takahashi created automatic graphic layout system called trip users edit output structure tell system structure modified 
trip novel data structure nicely visualized system user feedback output modify original data structure bidirectional communication user layout system possible 
automatic layout system trip simple constraint solver complicated constraints shown solved 
layout procedure fully automatic users tell system preferences layout procedure 
includes putting nice features proposed construct general purpose graphic layout system genetic algorithms 
current system users specify constraints addition default constraints 
planning simple interpreter language allow users write kind arithmetic expressions specification constraints 
genetic algorithms simple robust powerful algorithms laying graphic objects 
genetic algorithms fast reliable graphic layout applications deterministic layout algorithms easily created 
allow users modify evaluation function run time change constraints layout interactively 
developed graphic layout system proved usefulness genetic algorithms graphic layout problems 
dr hiroaki kitano nec introducing power genetic algorithms 
dr toru chiba dr toru sharp support research 
james baker 
reducing bias inefficiency selection algorithm 
john grefenstette editor genetic algorithms applications proceedings second international conference genetic algorithms pages hillsdale nj july 
lawrence erlbaum associates publishers 
cohoon paris 
genetic placement 
proceedings ieee international conference computer aided design pages 
david goldberg 
genetic algorithm search optimization machine learning 
addison wesley reading ma 
john grefenstette nicol schraudolph 
user guide genesis ucsd 
computer science engineering department university california san diego la jolla ca august 
groves michalewicz 
genetic algorithms drawing directed graphs 
ras editor methodologies intelligent systems proceedings fifth international symposium pages 
north holland october 
holland 
adaptation natural artificial systems 
university michigan press 
kim jang kim 
stepwise overlapped parallel annealing application floorplan designs 
computer aided design march 
kirkpatrick gelatt vecchi 
optimization simulated annealing 
science 
hirata 
block placement improved simulated annealing genetic algorithm 
transactions institute electronics january 
joe marks stuart shieber 
parallel genetic algorithm network diagram layout 
proceedings fourth international conference genetic algorithms pages ucsd california july 
morgan kaufmann publishers 
brad myers brad vander zanden roger dannenberg 
creating graphical interactive application objects demonstration 
uist pages november 
dan olsen kirk allan 
creating interactive techniques symbolically solving geometric constraints 
uist pages october 
donald 
graphical interface evaluating genetic algorithm graph layout 
technical report rc ibm research division watson research center 

genetic approach standard cell placement meta genetic parameter optimization 
ieee transaction computer aided design may 
shin takahashi satoshi matsuoka akinori yonezawa kamada 
general framework bi directional translation pictorial data 
proceedings acm siggraph symposium user interface software technology pages october 
roberto tamassia peter eades 
algorithms drawing graphs annotated bibliography 
technical report cs brown university department computer science october 
bradley vander zanden 
constraint grammars new model specifying graphical application 
conference human factors computing systems chi pages 
acm sigchi addison wesley may 
