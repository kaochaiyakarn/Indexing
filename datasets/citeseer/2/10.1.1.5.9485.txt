typestates objects robert deline manuel hndrich microsoft research microsoft way redmond wa usa maf microsoft com 
today mainstream object oriented compilers tools support declaring statically checking simple pre postconditions methods invariants object representations 
main technical problem preventing static verification reasoning sharing relationships objects object invariants hold 
developed programming model typestates objects sound modular checking algorithm 
programming model handles typical aspects object oriented programs virtual dispatch direct calls subclassing 
model permits subclasses extend interpretation typestates introduce additional typestates 
handle aliasing adapting previous practical linear types developed context vault system 
implemented ideas tool called fugue specifying checking typestates microsoft net programs 
mainstream object oriented languages java automatically catch prevent programming errors compile time checks automatic memory management remain related sources error manifest runtime exceptions 
developer obey rules properly calling object methods including calling allowed order obeying preconditions methods arguments 
today rules captured class documentation 
second developer implementing class ensure public method class representation invariant including invariants inherited superclass 
types main mechanism programmers currently specify mechanically checked preconditions postconditions representation invariants 
mechanical checks critical spotting errors early development cycle cheapest fix 
types limited specification tool particularly imperative programming languages objects change state time 
standard type systems address sources errors described 
hand providing programmer rich logic writing preconditions postconditions object invariants quickly runs decidability problems 
example es java system supports rich specifications fully verify object invariants 
propose statically checkable typestate system declare verify state transitions invariants imperative object oriented programs 
typestates specify extra properties objects usual programming language types 
name implies typestates capture aspects state object 
object state changes typestate may change 
typestates provide abstraction mechanism predicates object graphs retain simplicity feel types 
typestates restrict valid parameters return values field values provide extra guarantees internal object properties 
previous research demonstrated utility typestates capturing interface rules non object oriented imperative languages :10.1.1.14.7406
adapt extend programming methodology developed reasoning non object oriented imperative programs object oriented setting :10.1.1.14.663
technical contributions typestates modular 
typestate description contents object fields 
program point modular static checker knows fields declared object declared type superclasses 
object state introduced subclasses unknown 
typestates match problem typestates provide names predicates field state 
modular static checker know object state name knowing exact invariant unknown subclass associates name 
approach allows clean description subclasses extend interpretation typestate language features downcasts virtual method invocation 
describe limits expressiveness typestate formulation 
typestates generalize object invariants 
commonly object invariant representation invariant predicate established object construction remains true object lifetime 
believe practice view limiting objects tend satisfy different properties different stages lifetimes 
view object having different typestates lifetime typestate named predicate object concrete state 
making object typestate explicit pre postconditions methods avoid problem defining object invariants hold past approached ad hoc notions visible states 
model traditional object invariants simply properties common typestates object 
typestates support incremental object state changes 
method implementation partial view object 
describing object state including statically unknown subclass state changes nontrivial 
furthermore object state change necessarily im typestates open closed class webpagefetcher post closed notaliased webpagefetcher notnull string site pre closed post open notaliased virtual void open cxn new socket cxn bind site cxn connect pre open post closed notaliased virtual void close cxn close cxn null pre open return notnull virtual string notnull string path return cxn receive pre closed virtual void notnull string site cxn site notnull open notaliased open connected open null closed private socket cxn notnull private string site open fig 

web page example open open closed close open def cxn null notaliased cxn connected cxn site null closed def cxn null site null close plemented incrementally changing individual fields typestates able describe intermediate states different parts object different states 
introduce frame typestates sliding method signatures address issues 
motivating example section informally introduces typestates objects illustrates expressive power technical aspects discuss rest 
examples syntax attributes brackets record typestates pre postconditions 
section typestates raw bound connected closed class socket post raw notaliased socket pre raw post bound notaliased void bind string endpoint pre bound post connected notaliased void connect pre connected void send string data pre connected string receive pre connected post closed notaliased void close fig 

simplified socket interface introduce small formal language examples precise 
fig 
contains source simple class webpagefetcher providing functionality open particular web server fetch pages server close connection server 
webpagefetcher object typestates open closed 
constructor produces object typestate closed method open changes object typestate closed open method close changes typestate back open closed 
method called object satisfies typestate open change typestate 
similarly method called object satisfies typestate closed 
state changes pictured finite state machine fig 

pre post annotations methods restrict order operations clients invoke object 
order restrictions useful method implementation assumptions object state invoked 
example calling closed object results null dereference exception method code assumes field cxn null 
approach relationship typestate object invariants explicit 
annotations fields cxn site define typestate terms properties object concrete state hold typestate 
object state closed private socket cxn web server null 
object state open private socket cxn non null typestate connected typestate socket class shown fig 

annotation notnull field site specifies classic invariant qualified particular typestate holds typestates 
closed open webpagefetcher cxn null site null fig 

typestate interpretation cxn null notaliased cxn connected cxn site null short typestate predicate object field state 
client predicate uninterpreted function matched name implementor predicate defined terms predicates fields values 
fig 
shows state machine state enlarged show predicate holds typestate 
state machine client view webpagefetcher object state machine implementor view 
annotations mechanically verify method implementation assumes stated precondition guarantees stated postcondition 
starting constructor observe sets field site non null constructor argument satisfies invariant field site typestate closed 
field cxn assigned 
approach assume implicit pre state objects constructors typestate zeroed fields initialized zero equivalent value 
state zeroed field cxn contains null satisfies necessary condition typestate closed 
webpagefetcher fields satisfy conditions typestate closed constructor constructor satisfies postcondition 
method open interesting changes typestate receiver closed open 
initializing field cxn fresh socket 
constructor call socket typestate raw see fig 

satisfying postcondition method open socket put right typestate calling methods bind connect order pre post annotations class socket 
calling bind connect field cxn typestate connected field site unchanged non null 
receiver typestate open method open satisfies postcondition 
far ignored issues annotations notaliased appearing code fact subclasses webpagefetcher 
sections deal object typestates subclasses 
section describes programming model allows static tracking typestates presence aliasing 
object typestate consider typestates webpagefetcher example 
view form table 
table maps class typestate formula fields object class 
formula consists atomic predicates value equalities aliasing assumptions recursive typestate assumptions state objects referenced fields 
assume formulae include equalities disequalities variables null 
practice richer theory decidable satisfiability checkers suitable 
see table typestates far examples really typestates entire object frame typestates typestate particular class frame object 
class frame object set fields object declared particular class super sub classes 
example far frame typestates expressing properties webpagefetcher frame 
obtain object typestate able describe properties frames object leading issues modularity typestate definition meaning object typestate fully defined typestate introduced subclasses able give new interpretations typestates fields 
typestate describe parts object unknown subclasses 
address issues section 
non uniformity typestates change typestate implemented individual field updates object typestate changes gradually 
typestates able describe intermediate states objects part object state parts state section discusses issue detail 
accommodate problems define object typestate collection frame typestates class frame object allocated dynamic type 
words frame typestate static type frame super class frame potential subclass frame 
interested modular system statically know subclasses particular type 
object typestates require abstraction gives uniform typestate unknown subclass frames 
formally object typestate takes form object typestate rest frames object object object typestate collection frame typestates rest typestate specifying possible subclass frames satisfy rest state indicating dynamic object type exactly example right new class restricted having subclasses sealed classes 
collection frame typestates consists frame typestate frame supertype class object typestate corresponds traditional static type object 
object webpagefetcher cachingfetcher object webpagefetcher cachingfetcher rest object decomposed class frames 
ellipsis reflects object dynamic type may derived declared type 
frame typestate frame frame typestate statically unknown subclasses 
fig 

illustration class frames frame typestates object webpagefetcher rest downcast object webpagefetcher cachingfetcher rest fig 

illustration downcast typestates keep presentation simple formulation assumes single typestate class frame principle object satisfy multiple compatible typestates 
fig 
graphically illustrates idea separate frame typestates object rest state subclasses 
model contains restriction frame typestate constrain fields frame frames superclasses 
restriction enables modular reasoning writing field particular frame affect frame typestate typestates subclass frames 
fig 
illustrates downcasts presence typestates 
downcast immediate subclass newly materialized frame typestate simply equal original rest typestate subclasses 
disappearing frame typestate rest state absorbs frame illegal 
typestate shorthands examples explicitly specifying frame typestate object examples nuisance 
convention specify entire object typestates 
default typestate specification applies class frame introduces typestate name typestates annotation class subclass frames 
alternatively typestate annotation targeted particular frame qualifier type frames subclasses qualifier type subclasses pre post state annotations 
root class object single typestate default classes inherit 
frames explicit typestate assumed typestate default 
description interpret object typestates specified class webpagefetcher 
method webpagefetcher open instance specifies receiver precondition object typestate object default webpagefetcher closed rest closed method webpagefetcher specifies receiver precondition object default webpagefetcher open rest open 
typestates subclasses turn subclass cachingfetcher fig 
see typestates presence object extensions 
caching web page new cache field hold cache fetched pages 
natural invariants field null closed non null open 
subclass provide interpretation typestates open closed adding invariant problem 
table summarizes frame typestates cachingfetcher object 
default closed open object true default default default webpagefetcher cxn null cxn null cxn null default cxn site null notaliased cxn default cxn connected cxn site null site null cachingfetcher cache null cache null cache null cache null table illustrates ways subclass extend superclasses typestates associating field invariants typestate defined superclass invariants field cache adding new typestates typestate 
notice typestate defined frame typestate default 
looking method override cachingfetcher see method take advantage object typestate precondition receiver 
parent method webpagefetcher specified frame typestate open subclass frames specification typestate defined point overriding method rely extra properties provided frame typestate 
limited typestate subclasses known predicate true subclasses assumptions fields overridden methods 
example cachingfetcher assumes field cache null 
sliding methods ideas far problem methods purport change typestates subclass frames webpagefetcher open 
post specification states frames including unknown subclasses typestate open method body 
written specification unfortunately satisfied implementation 
method assign typestates class cachingfetcher webpagefetcher post closed notaliased cachingfetcher string site base site pre closed post open notaliased override void open base open cache new hashtable pre open post closed notaliased override void close base close cache null pre open return notnull override string notnull string path string page cache getvalue path page null page base path cache add path page return page null closed notnull open private hashtable cache pre open post post closed type webpagefetcher notaliased void base close pre pre closed type webpagefetcher return string string path string page cache getvalue path return page pre pre closed type webpagefetcher post closed notaliased void cache null fig 

caching web page fields visible static type effect fields subclasses 
exit subclass typestates closed 
begs question method possibly change subclass states 
method directly affect fields frame fields superclasses 
order change typestate subclasses virtual method call sliding method required 
idea sliding method subclass implements slightly stronger state change subclass changes typestate frame frames superclasses leaves subclass typestates unchanged 
long subclass correctly implements sliding method virtual call sliding method guaranteed change entire object typestate dispatches dynamic type lowest class frame changes frame super class frames 
call methods sliding typestate class introducing method keeps sliding class hierarchy subtype overriding rest state 
graphically illustrate follows webpagefetcher open cachingfetcher open object default webpagefetcher closed rest closed object default webpagefetcher closed cachingfetcher closed rest closed object default webpagefetcher open rest closed object default webpagefetcher open cachingfetcher open rest closed limit effect observed virtual call signature simply virtual call open object default webpagefetcher closed rest closed object default webpagefetcher open rest open fix example relaxing post typestate subclasses remain closed methods open close treating methods sliding methods 
method open classes webpagefetcher cachingfetcher corrected annotations pre closed post open post closed type subclasses virtual void open 
sliding signatures general virtual method family related method signatures virtual signature virtual call site implementation signature implementation method class signatures derived implementation signature class introduces virtual method signature relations illustrated formally defined 
assume class introduces sliding method subclass notation 
pre post states base classes pre post pre rest pre rest pre rest post rest post rest post rest fig 

relation typestates signatures sliding method implementations virtual call signature note rest states implementation method signatures arbitrary need related pre state post state 
instructive study different possible scenarios imply implementations 
method open webpagefetcher cachingfetcher closed open closed 
specification requires implementation cachingfetcher open calls base class open method changing frame state pre condition base class call satisfied frame 
alternative pick open forces implementations open change frame state open calling base class method 
third state implementations change frame call base class method change frame open 
signatures rest states equal 
useful cases case 
consider instance wrapper method containing virtual call open 
closed closed open open 
definitions illustrate prove method cachingfetcher open implements signature correctly 
note cachingfetcher open calls base class open method changing frame 
base call non virtual method signature webpagefetcher applies virtual signature 
progression receiver object typestates entry cachingfetcher object default webpagefetcher closed cachingfetcher closed rest closed direct base call webpagefetcher open object default webpagefetcher closed rest closed direct base call webpagefetcher open webpagefetcher object default webpagefetcher open rest closed safe cast cachingfetcher object default webpagefetcher open cachingfetcher closed rest closed update field cache post cachingfetcher object default webpagefetcher open cachingfetcher open rest closed illustrate situation virtual call site 
assume typestate object default webpagefetcher closed cachingfetcher closed rest closed virtual call open object default webpagefetcher closed rest closed virtual call open webpagefetcher object default webpagefetcher open rest open safe cast cachingfetcher object default webpagefetcher open cachingfetcher open rest open virtual call open changes frames typestate open dynamically frame object changed 
alias confinement sound static checker object invariants aware object order object state transitions 
version adoption focus model dealing aliasing :10.1.1.14.663
distinguish modes object statically track mode pointers objects 
object notaliased meaning statically know perfect aliasing information object aliases may aliases 
object case arbitrary may aliasing object pointers tracked 
allocation object aliased 
objects undergo arbitrary state changes aliased statically track state 
explicit deallocation notaliased objects safe don discuss 
notaliased parameter guarantees method access object parameter copies pointer method reach object access paths 
time notaliased guarantees caller return method produced aliases object 
fields notaliased specifies object field holds pointer referenced object 
notaliased objects transferred fields point 
notaliased objects returned methods guaranteeing caller aliases alive 
notaliased object leak transition mode 
object leaks object considered may copied arbitrarily 
object object typestate longer change 
moment object leaks typestate essentially frozen current typestate 
simplifying assumption system tractable 
focus operation temporarily changing typestate aliased objects simplicity ignore focus 
allow aliased object leak choose rules accessing leaked object aliased fields 
reasonable options recursively leak treat notaliased fields objects aliased 
approach simple works presence concurrency allows reading writing field preserve notaliased status sub structures 
leave aliased allow access atomic field variable swap operation 
approach retains aliased status objects works presence concurrency 
disallow access fields require focus scope containing object access fields 
approach requires extra locking presence concurrency 
formalism section uses option 
formal language formalize approach small imperative object oriented language static typestate system 
language type system form kernel tool called fugue typestate checker programming languages compile net intermediate language visual basic managed 
typestate aspects language standard object oriented language classes fields methods 
class single base class predefined class object 
subclass relation reflexive transitive closure relation 
class consists virtual method declarations new method implementations impl fields typestates 
simplify presentation assume methods virtual sliding distinct names 
syntax formal language checker assumptions heap values fully explicit form pre postconditions leak corresponds adoption 
distinguish multiple adopters simply assume single implicit adopter garbage collector 
assume relation non cyclic static semantics enforce 
program class 
class class class declaration virt impl field state method sig code block 
xn stmt statement stmt stmt set stmt pack stmt unpack stmt leak stmt goto tt expression new yn targets tt yn tt return tt condition true hastype constant 
binding type env name env heap aliasing object typestate rest frames fc object frame fc 
fn frame typestate 
fn value formula true hastype value name typestate name block label variable name class name field name method name fig 

syntax language basic block method body 
allows separate checking inference 
order practical system fugue infers intermediate states inside method inference scope 
fig 
contains syntax language 
program set classes single code block 
class consists virtual method declarations method implementations fields typestate interpretations 
typestate interpretation existentially closed predicate fields class frame 
method named set labeled code blocks execution begins block 
code block closed function 
signatures methods code blocks form 
constraints heap values entry method block names result constraints heap values including result exit method 
signature method signature block body 
receiver parameter method 
usual type equivalence syntactic modulo renaming bound variables 
local variables 
data passed blocks explicit parameters think registers 
code block ends set control transfers code blocks return transfer guarded condition control reaches block control follows edge chosen nondeterministically condition true point 
hastype condition explicit type test succeeds dynamic type subclass conjunction rules allows dynamic downcasts recovering static type 
kinds method calls virtual calls non virtual calls 
directly method implemented class model object construction new expression followed non virtual call constructor method 
expressions leak pack unpack non standard constructs 
leak expression changes mode object aliased aliased 
pack unpack operations aliased objects coerce typestate view concrete field view class frame particular object 
order access read write field aliased object frame containing field unpacked 
pack unpack operations required accesses fields performed unpacked frames 
packed frames typically required method boundaries 
aliased objects packed unpacked 
type system assigns value symbolic name form singleton type 
names pointers scalars alike 
heaps mappings pointer names aliasing assumption object typestate formulae provide pure value constraints typestate specifies static class type 
alias assumptions take forms aliased aliased alias polymorphic parameters 
heap mapping interpreted conditional mapping predicated null 
implicit formedness conditions heaps regarding duplicates 
contains duplicate mappings consider heap predicate unsatisfiable 
static semantics static semantics enforces type typestate safety 
shows rules programs classes class members 
type environment contains const var zeroed new new 
fn null fj read 
fn null fj read tt goto tt goto yi yn stmt stmt 
fj 
fn 
fj 
fn set fj call null 
fn null set fj packed leak leak 
fn 
fn pack pack 
fn 
fn unpack unpack fig 

static semantics statements expressions set set method signatures virtual particular implementations frame typestate interpretations fields 
methods contains local variables 
rules virt impl enforce relationship virtual implementation signatures sliding methods described section 
simplify class rules force classes implement virtual methods invoked 
implementation course just call base class method 
auxiliary function fn denotes free names 
contains rules statements expressions 
judgment stmt states stmt formed environment produces result heap value constraints judgments notational shortcuts 
syntax denotes uniform object typestate object 

syntax fc convenient pattern match extract frame fc object typestate 
operation restricts memory predicate domain empty heap 
similarly restricts value constraint conjunction predicates 
operation changes aliasing notaliased locations accessing aliased alias polymorphic objects order adjust aliasing aliased fields 
accessing aliased field alias polymorphic parameter yields alias polymorphic object preventing changing leaking escaping 
judgment implication heaps value constraints 
heaps equivalent duplication aliased locations implication formulae typestates 
fig 
contains implication rules 
side condition packed rule leak states frames packed object transition aliased mode 
decision deal aliased objects visible rule read governing access fields aliased objects 
re instantiate typestate predicate frame containing field assume instruction field change conservative presence thread shared objects 
similarly updating field aliased object rule set requires prove typestate predicates substituting new value name old guaranteeing update retains invariants affected object 
treatment explicit field correlations observed aliased objects extend system read fields explicit focus scopes object fields changed environment 
soundness formal proof believe system sound 
leave study meta theory 
discussion having formal definition language type system discuss catches common programming errors limits approach extensions 
example errors caught fig 
shows methods cachingfetcher open cachingfetcher formal language 
brevity abbreviate cachingfetcher cf web drop occurrences lists 
methods represent common cases open changes receiver typestate field invariants assumes field invariants typestate open leaves receiver typestate 
illustrate kinds programming errors common mutator methods open 
programmer cachingfetcher open may forget call overridden method superclass changing typestate superclasses 
case method return point heap contain entry object default closed cf open rest closed match post clause frame closed open 
second programmer may fail establish object properties associated post typestate open frame cachingfetcher cf open cache object default hashtable default null assuming programmer sets field cache null newly allocated hashtable error manifests applying rule pack expression pack cf open method cf open bindings object default open cf cache closed rest closed null null critical premise pack rule implication current heap minus object packed current value facts need satisfy heap value invariants associated typestate packing 
represents unused portion heap 
hypothetical example null null object default hashtable default null cf open start pre object default closed cf closed rest closed null post object default open cf open rest closed true open new hashtable hashtable ctor unpack cf set cache pack cf open goto return null true cf start path path path pre object default open cf open rest open path object default string default null path null post object default open cf open rest open object default string default null cache page hashtable path goto missing path cache path page null return page page null missing path cache path path cache pre object default open cf open rest open path object default string default cache object default hashtable default null path null cache null post object default open cf open rest open object default string default null page path hashtable add path page goto return page true fig 

cachingfetcher methods 
abbreviate cachingfetcher cf web reformat block heads improved readability 
satisfiable null 
code method complicated basic blocks 
parts mechanics checking method worth pointing 
code correctness relies field invariants typestate open 
treats parameter alias polymorphic notaliased method widely callable 
method assume typestate field invariants unpack object change field state 
second premise unpack requires object unpack alias mode 
block reads field cache binds name expression checked read read possibly aliased 
read yields heap value facts supplemented heap value invariants field reading 
cache cache object default hashtable default cache null 
fact cache null needed show correctness expression call hashtable requires argument null 
proof obligation exists second block call hashtable add 
second proving correctness method relies refining value facts conditional branches 
object page result call hashtable postcondition ensure page null 
legality return start relies branch condition clause case page null 
conditions explicit third premise rule return show postcondition formula corresponding condition discussing typing rules prove correctness method implementations look catch client errors calling methods wrong order 
consider code sequence programmer forgotten call open calling new cachingfetcher cachingfetcher ctor 
critical premise call implication requiring current heap value facts imply heap value precondition called method part heap unused method 
relevant facts object default closed cf closed rest closed method expects object default open cf open rest open 
typestates object frame wrong state 
expressive power section examines limits constraints placed object graphs object typestates formulated far 
constrain part object graph form tree notaliased pointer predicates 
field constrained unary predicate predicate language including typestate predicates 
field values class frame constrained arbitrarily relational predicates class frame 
restricted form sharing constraints limitation object typestates described far relations fields different frames different objects graph expressed 
reason way constrain contents object referenced field specify typestate 
directly refer formula 
typestates fully observed object 
formalization explicit modeling frame typestates existential bindings fields fn states contents frame typestate set field values field fi constrained heap formula 
existential binding restricts context know field values constraints 
existentially abstracting field values implies frames referred packed entire formula contain free value names 
choice fundamental framework easily extended accommodate unpacked frames allowing arbitrary existential abstraction form fn formulation constraints different objects expressed long frame containing field object unpacked typestate containing constraint 
constraints frames object remain outside framework 
typestates described far suited finite state abstractions 
instance typestates enforce pop called stack object call push non emptiness test enforce push called times pop 
parameterized typestates dependent typestates support counting abstractions similarly way enforced esc java integer ghost field 
client implementation views typestates freedom formalization probably want 
formulation code aliased object may unpack object potentially change typestate 
particular allows client code change object typestate directly accessing fields calling methods 
programmer object representation private problem arise field assignments illegal 
promote programming hygiene preferable restrict client code packing typestate unpacked 
methods declared class frame packed subclasses allowed pack different typestates 
typestates inbounds interface pre inbounds object current get post inbounds true post false bool post void reset fig 

correlated return values specify class 
correlating typestate return values typestate system far method specify single post typestate parameter 
limitation prevents describing protocols method change parameter correlated value returned status code 
fig 
shows typestate specification popular net interface 
object program repeatedly calls returns false call current latest call returned true 
capture protocol need correlate object typestate return value extended feature constant 
support feature formalism need introduce typestate variables allow quantification constraints range variables 
related draws lines research 
aliasing approach heavily influenced alias types region type systems particular linear permissions dependent types systems control access memory allow strong updates 
formulation allows natural imperative programming style drawback singly threading values traditional linear type systems 
alias polymorphic functions closely related idea 
wadler boyland alias 
see detailed discussion 
presence imperative updates 
formulation typestates objects novel 
previous typestates provide interpretation typestates predicates objects consider complications subclasses :10.1.1.14.7406
fugue project shares general goal extended static checker esc provide automatic checking specifications oo programs 
approaches differ ways 
fugue focuses simple sound programming model natural way express object properties typestates 
esc fol general theorem proving generally expressive fugue 
expressiveness comes price 
esc aim sound checking efficiency expected type checker 
esc similar aliasing restrictions described notaliased fields called pivot fields esc esc lacks ability freeze typestates object properties provided leak statements 
properties arbitrarily aliased objects difficult capture program abstractions 
interaction typestates subclasses generally follows notion behavioral subtypes liskov 
formalism support history constraints 
hand liskov approach pre post conditions predicates allow subclasses rely strong properties anticipated author supertype 
rest state object typestates glance similar row polymorphism encode class types kov 
formalism support history constraints 
hand liskov approach pre post conditions objective ml 
object typestates different purpose rest state restricts typestates possible extensions row polymorphism restrict types fields extensions 
furthermore type system name subclassing structural row polymorphism useful 
role analysis attempts capture referencing behavior structures similar typestate system 
address issues subtyping inheritance 
clear practical systems particular light 
attempted strike balance expressiveness practicality specifying checking object properties 
approach supports extension mechanism class programs allows subclasses refine interpretation object typestates defined superclasses introduce entirely new typestates 
acknowledgments anonymous reviewers helpful comments suggestions 

flanagan leino lillibridge nelson saxe stata extended static checking java 

strom yemini typestate programming language concept enhancing software reliability 
ieee tse 
deline hndrich enforcing high level protocols low level software 
proceedings acm sigplan conference programming language design implementation 

hndrich deline adoption focus practical linear types imperative programming 

guttag horning larch languages tools formal specification 
springer verlag 
deline hndrich fugue protocol checker software baroque 
technical report msr tr microsoft research url research microsoft com maf fugue 

smith walker morrisett alias types 
european symposium programming 

walker morrisett alias types recursive data structures 
proceedings th workshop types compilation 

tofte talpin implementation typed call value calculus stack regions 
conference record st annual acm principles programming languages 

crary walker morrisett typed memory management calculus capabilities 
conference record th annual acm sigplan sigact symposium principles programming languages acm press 
wadler linear types change world 
broy jones eds programming concepts methods 
ifip tc working conference 

boyland alias unique variables destructive reads 
software practice experience 
leino stata checking object invariants 
technical report dec src palo alto usa 
liskov wing behavioral notion subtyping 
acm transactions programming languages systems 
vouillon objective ml effective object oriented extension ml 
theory practice object systems 
lam rinard role analysis 
conference record th annual acm symposium principles programming languages 

rinard existential heap abstraction entailment undecidable 
proceedings th international static analysis symposium 

proceedings acm sigplan conference programming language design implementation 
appendix hastype hastype fig 

static rules conditions true class class class fn program virt virt impl class bi 
field field tt fn bi impl bn class fn 
fn fi state xn xn block yi tt ym tt tt return tt return state label impl fig 

formedness programs classes methods blocks goto targets hastype rest rest rest hastype rest downcast null null fn fn fig 

implication rules rest rest rest rest rest rest rest fig 

definitions sliding methods 
