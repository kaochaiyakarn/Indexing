domain specific visual query language high energy physicists vasco amaral sven guido moerkotte fakult mathematik und informatik universit mannheim amaral pi informatik uni mannheim de presents framework analyzing data collected high energy physics experiments 
approach features visual query language especially adapted needs physicists analyzing data 
provide interfaces currently applied tools users higher level abstraction 
helps users concentrate actual job hiding intricacies 
domain specific introduce extensibility enable meet demands 
keywords hep analysis optimization domain specific visual query languages process manipulating analysis data high energy physics hep experiments time consuming cumbersome chore 
different tools exist written purpose ad hoc manner extended patched meet growing changing demands 
consequently tools analyzing process unnecessarily complex times cumbersome users need lot knowledge intrinsics 
example users forced combine disperse utility libraries follow different programming paradigms procedural object oriented 
usually learning different programming languages various tools obstacle 
improper programming styles direct impact quality resulting code terms understandability efficiency 
furthermore presently lack transparency users know physical layout data 
having learn details completely unrelated physics scientists real 
motivated develop prototype framework tailored needs physicists analyzing experimental data giving chance learn domain 
physics analysis environment complex takes deep physics knowledge fully understand process 
multiplicity library tools available lack proper documentation implies difficult engineering task looking solution environment 
experts field agree relevant matters concerning analysis requirements step conduct requirements analysis determine demands thoroughly possible 
having done proceeded modeling environment framework employed 
developing framework keep important requisites mind 
main goal significantly reduce programming non physics related effort user 
reason decided supply simple interface form visual query language 
way allow current tools albeit level 
results efforts framework analyzing data hep experiments 
achievement goes mere theoretical thoughts subject implemented prototype framework soon tested physicists involved experiment section give brief description high energy physics requirements concerning analysis framework 
section iii discusses visual query languages context physics covers related 
section iv main focus describe basis data model visual query language 
take quick glance implementation aspects section section vi give summary outlook 
deutsches hamburg ii 
short overview high energy physics hep depth review hep scope 
subject 
generally speaking physicists discover new short lived particles properties order develop model real world level 
large accelerators particles collision 
help large accelerators particles collide particles 
accelerator supplies particles grouped bunches energy close speed light 
soon system stabilizes period data acquisition called run begins 
time span bunches collide called event 
large detectors record results events 
unfortunately experiment lhc cdf technically infeasible gather information collisions due sheer volume data physicists filter data levels triggers 
resulting data initially stored tape 
reconstruction investigation decays decay chains short lived particles main tasks data analysis collecting data 
physicists reconstruct segments trajectories particles match segments reproduce full tracks extract properties deduce complete decay chains 
able identify major requirements hep analysis framework 
listed reading general requirements hep community framework flexible 
users able extend new algorithms 
furthermore allow retrieval previously stored objects able compute new objects represent decay chain precisely 
physicists describe results analysis statistically output framework support types histogramming 
queries computationally expensive 
framework just translate queries straightforward fashion able optimize queries 
example intermediate results repeatedly cached exploit fact exclusively read accesses 
moment different frameworks analyze data different experiments examples see lower part technical details 
lives physicists unnecessarily difficult users rarely experienced professionals 
fortran fortran sql paw root bee unified framework relational database goal provide unified framework intuitive interface models world physicist sees see upper part 
interfaces framework consist visual query language interface code generation modules marked gi connect existing tools 
focus interface code generation modules scope 
iii 
discussion visual query languages related visual languages vl usually easier text interfaces 
possible inexperienced untrained users information systems 
important subset vl visual query languages purpose extract information stored data 
experience shows lack formality 
reasons complete surveys thorough comparisons rare 
opinion severe drawback query language allow ambiguities 
lean diagrammatic graph languages easier formalize approaches form iconic 
better suited object oriented semantic data models 
metaphor approaches dismissed outset usually closer user perception world 
opted enrich graph language elements metaphor concepts avoided just create visual layer existing textual interface 
design decision concerned specificity language 
question develop general purpose domain specific language 
advantages disadvantages approach 
general purpose languages flexible easier design necessary consider details specific domains general concepts 
comes price 
language harder learn master especially inexperienced computer users 
user adapt way thinking general framework employ paradigms totally different domain 
domain specific language hand utilizes terminology familiar user 
easier learn people acquainted domain computers 
disadvantages 
language limited specific domain difficult apply totally different environment 
harder design designer computer science background knowledge domain 
decided go ahead domain specific language wanted avoid exactly problems illustrated general purpose languages 
language exclusively hep data analysis 
leaves problem balancing domain specificity generality language 
language general experience problems general purpose languages 
specific potential users may able formulate queries 
difficult get balance exactly right lean specificity introduce extendibility approach able meet demands 
examples visual domain specific languages areas robot control vlsi design case tools languages software modeling design uml gis 
interesting description domain specific languages 
knowledge exists analyzing data collected physics experiments aims believe new area application concepts 
iv 
data model language designing consistent took account previous works area vl satisfy major user activities understanding structure data query formulation result set visualization 
hep analysis conceptual structure data change refrained explicitly showing domain 
hide metadata avoid confusing layout interface expect users familiar structure 
operators corresponding parts metadata accessed 
furthermore limit retrieving subset existing data selective zooming data allow computation new objects run time 
query tree structure result visualized help different histogram layouts usual approach physics handle statistical data 
data model modeled hep analysis data er diagram depicted 
consists major entities run event particle 
attributes entity run define parameters experiment setup detectors time span data acquisition took place general quality issues 
events exist run modeled weak entity dependent entity run 
attributes describe properties particle bunches involved event 
remainder diagram consists various entities describing particles 
particles leave traces detector 
described tracks 
particles reconstructed computations existence derived data called vertices 
able store simulation results experimental data results monte carlo simulation algorithms data gained simulations plausibility measured results verified 
patterned er model hep analysis data excludes detector related data query pattern observing analysis process common pattern way physicists queried experimental data 
generally speaking distinguish different steps 
step select parts runs events supplying predicates extracting interesting data run periods certain configurations detectors 
second step involves data collected step reconstruct decay chains 
interested decays took place want sort data irrelevant current investigations 
involves computing caching intermediate results 
third step consists visualizing results form histograms tree structures tuples 
querying necessarily users go back second step reformulate query 

syntax semantics going introduce basic building blocks language help running example 
start theoretical thoughts physicist doing analysis 
shows schematics typical decay chain center investigation 
particle left hand side eventually decays particles right hand side 
typical query medium complexity find particle highest energy level event 
particles right hand side ones presence directly recorded notation pi pi example decay schematics detector 
physicists starting point search original particles short lived detected 
going translate thoughts query 
decide run event data 
task collection operator represented small disk symbol see 
associated operator list attributes list filter predicates 
assume moment interested data third run step collection operator selects data 
collections combined standard set operators 
left right operators collection selection aggregation transformation result set specification symbols value result second step need operators selection aggregation transformation see symbols 
selection works data retrieved collection operator selects actual particles detected runs events predicates refer particles 
aggregation transformation operators results selection operators 
aggregation sums information particles event get result event 
transformation combines results selections predicates refer attributes participating selections 
usually results construction particle higher decay chain 
transformation operator creates new particle objects data previous selections 
need way connect objects 
simple line arrow describes data flow operator 
describe visualize result query third step 
provide different operators description result see operators create dimensional histograms operator output numeric values 
shows complete query 
operators upper part tell system interested data third run want dimensional histogram output result 
right hand side extracting particles events third run 
help transformation operator reconstruct particle 
transformation operator helps find particles 
aggregation operation filters particles maximal energy level event 

graph grammar section introduce bnf grammar visual query language see 
give explanatory notes 
decided symbols language terminals grammar problem recognize components introduced section 
non terminals background terminals regular background 
associated operator additional data attribute lists condition lists 
query construction information hidden time 
describe hidden data associated operator symbol 
furthermore distinguish different collection types run collections event collections 
collections query query considers available data 
run pi asg collections query result collections attribute attribute label type condition condition expr expr expr expr aop expr ar ar const attribute pi pi complete query layout aop query decay decay decay tree tree vertex tree vertex tree result attribute attribute attribute attribute attribute attribute attribute attribute udf max min tf tf simplified version bnf grammar language define run collection data selected runs considered 
restrict additionally supplying description event collection 
subset events run collection taken account 
specifying event collection run collection regard relevant events runs 
connecting collections set operators differentiate commutative operators non commutative operators 
moment framework extended places 
users integrate aggregation functions system currently provides max min function aggregation operator 
denoted udf grammar 
connecting particle sets transformation operator user supply transformation function 
presently system provides function reconstruct vertices 
implementing prototype engineering methodology natural complexity domain entails probably get details right design opted prototyping approach 
expect iterations needed assure perfect match requirements users framework 
strategy developing framework consisted important steps identifying problem domain 
gathering relevant knowledge domain re engineering existing frameworks observing query patterns physicist doing analysis 
summarizing knowledge handful semantic notions operations 
designing concisely describes applications domain 
designing implementing framework translates language syntax graph understood different existing tools 
getting feedback real users steps 
designing interface opted syntax assisted editor compromise free hand editor syntax directed editor 
free hand editor flexible input hard interpret 
syntax directed editor hand strict users going run problems formulating queries textual editors 
shows query layout editor 
note pop menu lower right corner 
input mentioned attribute condition lists 
query transformed syntax graph asg 
responsibility parsing query delegated module generates code data structure appropriate target framework tool fortran code fortran paw code root sql db 
subject code generation subjects security network distribution physical data storage fall outside immediate scope 
details fast development technology tcl tk scripting language integrating root framework solely histogramming layout purposes implemented data storage interface 
development interface framework framework finished involved design implementation layer implements algebraic operators libraries functions available mapping dags generated query plan 
vi 
important step ongoing effort support analysis process hep experiments 
acquainted hep community visual query languages hope able convince usefulness approach 
opinion advantages framework manifold 
add abstraction layer physicists low level data processing 
user concepts familiar need learn details different tools 
recognized typical access patterns basis optimizing query processing environment 
furthermore framework offers flexibility tools currently 
complete assertion user satisfaction requirements done time written preliminary assertion individuals positive giving feeling right approach full details plan proceed evaluation described 
perspective specific area far completed 
see study providing adequate tools physicists involved hep analysis 
decided empirical approach designing framework due contradictory views expressed different physicists requirements analysis doing formal metamodeling 
near plan refine prototype insights gained feedback physicists applying framework real world data analysis 
code generation modules represented plan finish implementation remaining code generation modules cover tools currently 
step want exploit optimization possibilities framework expect amount data processed coming hep experiments orders magnitude larger 
albrecht computing model chep berlin proceedings edited hamburg germany amaral moerkotte physicist easy analysis tool technical report university mannheim graph rewrite systems visual database languages phd 
thesis scott model integrated tools design dynamically reconfigurable systems vlsi design pp 
robert visual language querying spatio temporal databases acm gis generic modeling uml extensions variability oopsla workshop domain specific visual languages deursen paul visser domain specific languages annotated bibliography www cwi nl arie catarci costabile batini visual query systems databases survey journal visual languages computing 
catarci costabile batini fundamental graphical primitives visual query languages information systems cox experiences visual programming languages users specific domains proc 
oopsla workshop domain specific visual languages univ dept computer science tr tampa bay fl october 
root object oriented data analysis framework linux journal july gevers smeulders interactive query formulation object search visual verilog embedded scheme leung visual information systems springer may critical database technologies high energy physics proceedings rd vldb conference athens greece perkins donald high energy physics addison wesley query language querying geographic databases positional olap operators sigmod record vol june pp shih tsai hung jiang case tool supports software life cycle dependent multimedia presentations visual query language gis user interface international journal visual languages computing url www com url root cern ch url www ch url www cern ch url fermi national accelerator laboratory www cdf gov physics public public html acknowledgments supported portuguese governmental foundation science technology fct research scholarship vasco amaral integrated research collaborator lip rio de experimental de part 
