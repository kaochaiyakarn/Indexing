logics reasoning cryptographic constructions russell impagliazzo bruce logical systems reasoning cryptographic constructions sound respect standard cryptographic definitions security 
soundness system proved techniques nonstandard models arithmetic 
soundness second system proved interpretation system 
examples systems may formally prove correctness elementary cryptographic constructions 
formal deduction systems prove cryptographic constructs secure standard complexity theoretic cryptography giving reduction security construct underlying primitives 
proofs systems avoid unnecessary quantifiers may eventually helpful machine assisted verification protocol correctness 
second simpler narrower application usable reason computational indistinguishability 
prove soundness specific system general system 
fact main application general system may meta logic proving soundness logics security 
motivation 
correctness security important general systems attackers actively seek exploit defect 
unfortunately difficult design correct cryptographic protocols design correct programs 
needs think behavior protocols just intended feasible strategy attacker 
leads difficult problem characterizing attacks possible feasible amounts resources 
particular need specify clear assumptions attacker computational limitations respect underlying cryptographic functions 
easy specify precisely security properties protocol words constitutes successful attack 
central goal cryptography construct functions protocols solving relatively complex tasks authentication pseudo random generation simpler building blocks known cryptographic primitives 
security constructed object depends security underlying primitives way primitives construction 
flaw primitive construction constructed function vulnerable attack 
absence strong lower bounds complexity absolutely prove constructed functions secure 
certify construction introduce weaknesses primitives 
approaches validating cryptographic construction introduce weaknesses 
standard complexity theory cryptographic community reduction 
methodology complexity theoretic cryptography involves department computer science engineering university california san diego la jolla ca russell cs ucsd edu 
computer science department university victoria victoria bc canada cs uvic ca 

standard attacker model attacker limited computational time wishes achieve success non negligible probability 

clear taxonomy cryptographic primitives way function pseudo random generator pseudo random block cipher cryptographic hash function secure bit commitment signature functions 
type primitive clearly defined form attack considered break primitive 

similarly taxonomy attacker models security properties protocols specifying kinds interaction attacker underlying protocol constitutes break protocol 

proof security reduction modifies successful attack protocol successful attack primitive 
standard cryptographic community means prove protocol secure 
method advantages clearly identifying security properties construct assumptions primitive 
addition providing conceptual foundation cryptography reductions provide precise quantitative tools analyzing specific protocols 
mathematical sophistication strength limiting factor implementation 
seemingly trivial modifications protocol cause totally insecure 
secondly cryptographic protocol may component complex communications protocol needs verified 
security properties guaranteed need system builders wish incorporate new tool 
important provide tools specification verification secure protocols understandable programmers incorporated existing methodologies protocol verification 
reasons research gone developing formal methods security analysis protocols 
hand formal verification security protocols tends deal security abstractly 
asking construct insecure primitive insecure verification methods ask primitive secure ideal way construct secure 
application primitive assumed produce piece atomic data internal structure limits power adversary 
hand called dolev yao assumptions adversaries power allowing nondeterministic choice possible attacks 
result idealized approach quite possible protocol proved correct formal system insecure instantiated secure primitive 
logics quite successful detecting flaws protocols basis automated tools assist protocol analysis 
largely due having simple intuitive rules avoid quantifiers explicit reasoning probabilities 
number papers proposed ways bridge gap complexity theory logics security 
papers give syntactic characterization kind cryptographic security equivalence probabilistic process calculus 
abadi rogaway formal system reasoning indistinguishability expressions built pseudo random block cipher 
show logic sound standard sense algorithm distinguishing expressions proved indistinguishable converted attack block cipher 
see corresponding completeness result 
universal composability related concepts aim produce cryptographic primitives equivalent ideal primitive variety applications 
interesting explore protocols proved secure formal methods secure instantiated sufficiently strong primitives random oracle model 
take direct route merge areas 
logics security simplified formalizations language methods modern cryptography 
course pa pers complexity theory formalizable sufficiently strong logical system peano arithmetic 
challenge coming formal system sound sense powerful handle significant fraction constructions simple useful tool verifying security maintained protocols modified combined implementations 
difficulties involved formulating system include formulation security definitions probabilities definitions security reasoning random choices distributional problems quantifying computational power adversaries intuitive dangerous mis applications induction 
illustrative example difficulty section 
aim show possible formulate logical systems handle issues implicitly 
combine ideas cryptography implicit complexity proof complexity 
having term algebra cook pv represent feasible functions quantification functions implicitly defines scope feasible adversaries 
counting quantifier added allow simple reasoning 
small numbers polynomial length proved exist implicitly define negligible vs non negligible probabilities limit scope induction arguments 
eliminating asymptotics explicit resource bounds proofs largely quantifier free consisting equations inequalities 
logic sound standard sense security proof construction cryptographic object provides reduction algorithm breaks constructed object breaks underlying primitive 
soundness proved non standard models arithmetic knowledge models unnecessary users required intuition regarding relatively large values 
similar situation occurs setting nonstandard analysis 
possible give elementary undergraduate presentation calculus see 
proving soundness axiomatization requires nonstandard models 
essential understand soundness proofs order systems 
logic introduce general powerful little cumbersome 
show specialized provide simpler logics limited types reasoning 
particular give simple sound logic reasoning computational indistinguishability 
soundness proof system follows directly general system specific system general 
think main application general system may meta logic prove soundness specialized logics security 
preliminary step provably sound practical formal methods security analysis 
believe primary purpose formal methods cryptography easier cryptographers produce valid proofs clarify difference valid invalid proofs non cryptographers 
restricting kind proofs allowed eliminate forms common mistake non expert appear indistinguishable valid argument 
hand feel logic rich possible simple overly burdensome formalize proofs logic 
proofs implementers distinguish harmless harmful modifications combinations protocols 
focus primarily constructions cryptographic functions protocols 
give example appendix demonstrates reasoning simple protocols supported framework 
notation 
denote set binary strings strings length concatenation denotes mod inner product viewed bit vectors 
denotes ith bit fi jg denotes 
set denote number elements fallacious induction argument fallacious induction proof demonstrate potential pitfalls induction applied cryptographic constructions 
application induction prove correctness construction pseudo random generator iteration goldreich levin style construction hard core predicate 
show function result construction way yielding contradiction 
function way easy compute computationally bounded adversary negligible chance finding preimage chosen uniformly random sufficiently large valued function hard core predicate function easy compute computationally limited adversary better negligible chance doing better guessing chosen uniformly random sufficiently large function pseudo random generator computationally limited adversary negligible chance distinguishing chosen uniformly random chosen uniformly random stretch goldreich levin theorem states way function way function defined valued function hard core predicate particular note assuming length 
immediate application goldreich levin theorem method constructing pseudo random generator stretch way permutation 
permutation uniformly distributed hard core predicate pseudo random stretch 
way repeat process obtain hard core predicate 
iterate construction obtain pseudo random generator stretch 
give fallacious argument case 
suppose way permutation 
define sequence functions follows denotes 
pseudo random argument similar slightly modified version goldreich levin theorem 
way permutation pseudo random 
conclude induction pseudo random 
really pseudo random 
way 
form 
gives rise system equations gf efficiently recover solving system equations contrary purported wayness induction argument go wrong 
way looking problem hides fact stage adversary advantage chance success depends advantage double stage appear negligible assumption advantage previous stage negligible 
iterations advantage increased factor longer negligible 
analogous familiar situation composing feasible function feasible number times results function feasible exponentiation repeated squaring 
clearly system reasoning formally constructions require careful treatment induction 
general system cryptographic constructions giving high level presentation types reasoning done general formal system 
polynomial shorthand relatively short relatively fast 
system need deal types objects 

security parameter constants moderate integer security parameter binary string security parameter unary jsj 
security parameter assumed sufficiently large particular asymptotically true statement true 
strings objects inputs outputs random tapes probabilistic algorithm runs time polynomial security parameter 
string variables represent randomly chosen strings efficient function applied string yields string 
standard embedding dyadic notation view strings integers 
usual arithmetic operations exponentiation comparison relations sense strings 
strings implicitly assumed polynomial length random variables defined moderate integer length quantified 

moderate integers polynomially bounded security parameter 
integer moderate length string don need new variables type 
polynomial jtj string term denote moderate integer 
example express negligible function jxj jzj eliminating quantifiers needed usual asymptotic 

feasible functions polynomial time functions take strings strings 
include certain basic functions pairing function arithmetic operations 
new feasible functions defined composition certain forms recursion 
known see way able define particular polynomial time function 
function symbols arity allow quantify functions 
quantification strings allowed outside quantification functions functions depend specific input 
represent possible adversaries cryptographic functions formally just function variables 

counting integers integers represent sizes sets strings 
quantifier free formula string variables possibly involving function variables moderate integer terms form counting integer term jx jx represent number strings sizes 
arithmetic operations sense counting integers lengths moderate integers 
readily computable allowed inputs function symbols treated strings 
reason jxj jnj gcd input adversary show compute way 

counting integers implicitly reason probabilities rational numbers 
pr jxj jxj jxj numerator denominator counting integers simulate arithmetic operations rationals operations numerators denominators reason probabilities 
accepting existence fixed parameter satisfies asymptotically true arithmetic statements distinction integers polynomially bounded requires suspension disbelief 
feeling mainly bother mathematically logically sophisticated 
mathematically unsophisticated accept logically sophisticated realize particular proof fixed set asymptotic facts polynomial bounds sound sufficiently large middle range take comfort fact proved soundness system willing suspend disbelief proof 
language language extends commonly bounded arithmetic see 
collection order variables note order terms interpreted variously strings numbers 
assume numbers represented dyadic notation gives correspondence numbers strings 
try follow convention intended interpretation variable string intended interpretation number function variables arity variables intended represent poly time functions 
note function variables really working multi sorted order theory 
function variable terms term 
note typically omit superscripts indicating arity sake readability 
usual relations symbols collection basic function symbols axioms capture intended interpretation symbols relationships 
remain somewhat informal assume function symbols interpretations concrete albeit take axioms true open formulas involving basic function symbols 

standard arithmetic constants operations denotes string concatenation jxj denotes number bits dyadic notation fi jg denotes bits jxj fig denotes bit denotes jxj 
jyj smash function denoted need symbol purposes 
constant symbols discussed 
counting quantifier 
quantifier free formula sequences variables jx jy jx jy term 
readability write xj yj jx jy jx jy intended interpretation term fhx jx jy note occurrences xj tj bound 
note introducing possibility terms represent functions potentially poly time complexity 
order limit possible identify subclass terms basic terms involve 
basic term built basic function symbols function variables 
impose restriction terms allow terms form function variable basic term 
hand allow terms formed non basic terms basic function symbols 
introduce abbreviations related 
counting term form xj yj jxj jyj denote term jxj jyj xj yj 
terms form count number values jg holds 
abbreviation jtj jj 
poly time function returns value corresponding possible zero padded binary string note formula free variable term denotes occurrences replaced intended interpretation number values satisfy 
formulas defined standard way extra clause formula function variable free occurrence formulas 
axiom system ready informally describe system mentioned collection axioms capture intended interpretation basic function symbols language 
spell axioms assume collection axioms call basic 
basic axioms state string moderate integer length jsj times axiom jsj 
basic function symbol language include axiom stating polytime function defined function symbol 
need axioms state poly time functions closed certain closure conditions 
examples axiom form 
axiom states poly time functions closed limited recursion notation iterate poly time function polynomial number times result poly time function provided show result polynomially bounded growth 
require collection axioms give properties 
include axioms describe interacts logical connectives example inclusion exclusion principle respect jxj jyj jxj jyj jxj jyj jxj jyj axioms describe interacts basic function symbols jxj jyj jx jy jxj jy jg detailed presentation axioms counting terms poly time functions appendix require induction scheme 
limit induction open quantifier free formulas 
induction length dyadic representation induction variable 
polynomial open formula induction axiom jyj jyj lind bounded formula mean formula quantifiers occur form jxj jyj jxj jyj 
fundamental result theorem soundness theorem suppose bounded formulas possibly non disjoint sequences function variables 
sequences poly time functions 
poly time function polynomials jxj jz jxj poly time function polynomials jxj jz jxj 
proof proof soundness theorem appendix significance soundness theorem 
want soundness theorem prove correctness construction cryptographic primitive 
suppose function symbol representing primitive defined formula occurring free variables formalize security giving definition include set equations give definition 
security assumption state adversary negligible chance breaking formula form represents arbitrary poly time adversary sequel typically denote adversary function 
formula free variable formalize security formula form asymptotic assumption equivalent standard complexity assumption security formally derive secure formal assumption secure 
soundness theorem gives asymptotic allows conclude cryptographically secure 
section give example spells approach detail 
example verifying pseudo random 
soundness theorem prove correctness construction stretching output pseudo random generator 
reader note primary purpose example demonstrate nuts bolts proofs system contention proofs particularly perspicuous amenable automation 
fact ultimate goal develop systems allow direct reasoning cryptographic constructions system section 
setting system viewed intermediate step 
techniques extended give general soundness results system section 
show definition prg formalized framework 
recall positive polynomial poly time function pseudo random generator stretch jg jxj jxj poly time function polynomials pr pr statements having form formalized language follows jz 
jrj jz jxj jrj jz jyj jz sequel write formulas standard probability notation sake readability 
formulas may formalized language described 
point focussing soundness want introduce complex syntax involving symbols pr complicate soundness proof 
applying system course want richer syntax easily built top richer syntax examples proofs words methodology 
setting start assuming existence primitive poly time function displaying security property 
security property assumption 
fact poly time allows introduce function symbol representing primitive construct scheme assumptions poly time function satisfying security property 
constructed object defined terms recursion schemes system limited recursion 
schemes preserve polynomial time 
reasoning assume extended defining equations general order reduce level formalization introduce defining equations function assume poly time function 
hard see completely formalize approach suppose prg stretch 
write jb jr jxj 
define jr jxj jb note construction goldreich micali 
bounds growth required correctness construction ensure feasible functions 
show soundness theorem obtain prg stretch prg stretch 
fact obtain prg stretch polynomial limiting stretch just simplify presentation 
theorem formulas pr jrj pr jrj jzj pr jrj pr jrj jzj denotes extended definition 
result soundness theorem follows immediately corollary prg stretch jxj prg stretch proof theorem standard hybrid argument 
require lemmas may proved lind induction axiom 
lemma order argue average distance adjacent hybrid distributions large distance adjacent hybrid distributions chosen random large 
lemma telescoping sum lemma counting terms assuming 

prove 



second lemma technical nature basically allows view step recursive construction context primitive applied arbitrary input operated 
hybrid argument allows go adversary breaks construction breaks primitive 
lemma context lemma nf proof theorem follows valued function write abbreviation formula 
suppose holds fails witnessed denote term 
jrj jr jxj jrj jr jxj 
assumption jz 
jr define poly time hybrid function follows ig poly time function defined context lemma obtain equalities 
jrj jr jxj jrj jr jxj jyj 
jrj jr jxj jrj jr jxj jyj allows express terms distance extreme hybrids 
particular denote 
jrj jr jxj jyj jrj jr jxj jyj equalities obtain jz 
jr 
context lemma 
jrj jr jxj jyj jrj jr jxj jyj telescoping sum lemma 
jrj jr jxj jyj jrj jr jxj jyj yy position give witness failure assumption 
define poly time function follows jrj jr jyj jtj nj 
recall poly time function value binary notation choosing jr jr nj follows yy 
jrj jr jxj jrj jr jxj 
choosing jz jzj 
nj follows jz 
jr provide contradiction assumption 
framework introduced far general model arbitrary notions security protocols 
example deal adversaries form chosen message attack require functionals 
sufficient machinery model protocols execution protocol analyzed adversary non adaptive 
example show model verify protocol flipping coins public line uses hidden bit commitment subroutine 
order achieve hidden bit commitment construction naor uses pseudo random generator primitive 
details appendix system computational indistinguishability drawback system preceding section requires reason explicitly probabilities 
section show restricting attention particular security property able eliminate need explicit reasoning 
system reasoning computational indistinguishability proofs essentially equational 
prove soundness system interpreting general system previous section appealing soundness proof system 
fact see kind soundness proof important application general system provides formal framework doing systems providing direct forms reasoning 
outline interpretation proceeds appendix language terms denote probabilistic poly time ppt functions 
precisely terms denote ppt function ensembles 
collection basic functions typical closure schemes 
include terms form rand rs polynomial intuitively meaning kind term just meaning variable selected uniformly random set meaning second kind term selected uniformly random strings length 
rand shorthand random index rs shorthand random string 
note allow formation terms second form free resp 
free 
cases ambiguity write rs rs say occurrence means term free occurrences replaced free variables scope 
assume substitution done way avoid variable capture changing name bound variables necessary 
general refer rand rs random bindings 
suppose sequence bindings 
abbreviate note syntax ordering bindings top bottom significant may refer variable bound note due semantics terms assume loss generality terms form just term follows fact semantics treats identical terms 
term form closed just case variables occurring bound suppose closed terms 
introduce formulas form intended meaning distribution ensembles represented computationally indistinguishable 
formalized appropriate interpretation reason directly 
introduce number rule schemas capture intuitive properties 
soundness rules may showing interpretations may proved soundness follows soundness respect cryptographic interpretations 
rules fairly simple proofs details appendix rule relates universal equality provable 
suppose terms sequence quantifiers form jxj 
quantifier define corresponding random binding form rs resp 
rand 
assume free variables appear univ note choice antecedent rule somewhat arbitrary sake concreteness 
choose system extra machinery introduced say suitably formulated version cook pv 
rule states may substitute indistinguishable terms probabilistic polynomial time context 
term extended language free variable sub rule enables merge split shorten random strings result indistinguishable randomly chosen string appropriate length 
rand rs rand rs edit denotes 
rule flavour induction rule captures basic fact computational indistinguishability required hybrid arguments 
rand rand ind rules state reflexive symmetric transitive 
repeat proof previous section function define pseudo random generator stretch suppose pseudo random generator stretch 
capture rs rs 
obtain univ sub rs rs rs rs 
suppose defined 
want show pseudo random generator stretch recall 
univ rand rs rand rs properties obtained sub obtain rand rs rand rs rs yy define hybrid function ig 
obtain rand rs rs rand rs rs univ rand rs rs rs sub yy rand rs rs ig edit sub rand rs rs univ follows ind rs rs rs rs 
jzj 
univ edit sub obtain rs rs required 
appendix give example system proving bit unpredictability implies pseudorandomness 
simple examples demonstrate possible give direct proofs involving asymptotic notions standard cryptographic construction 
case system primitive relation computational indistinguishability able avoid explicit reasoning probabilities 
number ways strengthen systems example adding type functionals order system order allow reasoning protocols adaptive message attacks developing proof theoretic techniques allow extract quantitative information reductions correctness proofs looking specialized formal systems primitive notions wayness 
directions include strength systems relating power logic computational indistinguishability logic providing sufficient conditions protocols provably sound 
way viewing systems layer low level cryptography higher level systems reasoning security 
interesting formalize idea say providing proof universal composability primitive systems extension system essentially information theoretic reasoning reason security protocols primitive 
way provide cryptographically sound formalization security proofs 
considered questions decidability systems seriously considered practical means automated reasoning 
decidability particularly interesting question automation area demands investigation 
abadi gordon 
calculus cryptographic protocols spi calculus 
information computation 
abadi rogaway 
reconciling views cryptography computational soundness formal encryption 
journal cryptology 
appear 
backes pfitzmann waidner 
universally composable cryptographic library 
iacr preprint available eprint iacr org 
bellare 
practice oriented provable security 
okamoto editors proceedings st international workshop information security volume lecture notes computer science 
springer verlag 
blum 
coin flipping telephone protocol solving impossible problems 
proceedings th ieee spring computer conference compcon pages 
blum micali 
generate cryptographically strong sequences pseudo random bits 
siam journal computing 
boppana 
pseudo random generators complexity classes 
micali editor advances computer volume pages 
jai press 
burrows abadi needham 
logic authentication 
proceedings royal society london 
buss 
bounded arithmetic 
bibliopolis 
canetti 
universally composable security new paradigm cryptographic protocols 
proceedings nd ieee symposium foundations computing pages 
full version available eprint iacr org 

intrinsic computational difficulty functions 
bar hillel editor proceedings international conference logic methodology philosophy pages 
north holland 
cook 
feasibly constructive proofs propositional calculus 
proceedings th annual acm symposium theory computing pages 
dolev yao 
security public key protocols 
ieee transactions information theory 
goldreich levin 
hard core predicate way functions 
proceedings st annual acm symposium theory computing pages 
keisler 
elementary calculus approach 
weber schmidt boston ma second edition 
lincoln mitchell mitchell scedrov 
probabilistic poly time framework protocol analysis 
proceedings th acm conference computer communications security pages 
micciancio warinschi 
completeness theorems abadi rogaway logic encrypted expressions 
journal computer security 
mitchell ramanathan scedrov 
probabilistic polynomial time calculus analysis cryptographic protocols preliminary report 
electronic notes theoretical computer science 
naor 
bit commitment pseudo randomness 
cryptology 
parikh 
existence feasibility arithmetic 
journal symbolic logic 
ryan schneider 
modelling analysis security protocols csp approach 
pearson education harlow england 
wilkie 
mod eles non standard de arithm etique complexit 
wilkie editors mod eles non standard en arithm etique th eorie des ensembles pages 
publications math ematiques de universit paris vii 
yao 
theory applications trapdoor functions extended 
proceedings rd annual ieee symposium foundations computer science pages 
axioms poly time functions counting terms consider axioms defining poly time functions 
axioms state basic function symbol defines poly time function 
example axiom 
axioms various closure schemes 
axiom proj related proj axiom const giving function ignores inputs returns constant axiom comp states poly time functions closed composition 
axiom expressing closure limited size bounded recursion dyadic notation jh jb 
jh jb 
axiom schemas 
need upper bound value counting term xj yj axioms relating counting logical connectives quantifiers inclusion exclusion 
xj yj xj yj xj yj xj yj xj yj xj yj xj yj xj yj xj yj xj yj xj yj xj yj xj yj xj yj general counting invariant permutations domain 
axiom gives weak version invariance 
sufficient current purposes 
jvj jyj 
jxj jyj xj yj jxj jyj xj yj axiom follows fact function jdom 
occur free 
jxj jyj xj yj xj yj need axioms 
jxj jyj xj yj 
xj yj free occurrence 
jx jy jx jy xj yj jxj jy xj yj jy jg fjy jy jg constant axiom jxj xj yj jxj xj yj jxj just meant abbreviation introducing new function symbol 
proof soundness theorem ideas proof go back subsystems peano arithmetic exponentiation 
simple results model theory follow wilkie 
definition model hi submodel properties smallest class functions contains interpretation function symbols restricted closed projection composition closed functions jvj juj called initial segment proposition suppose initial segment model term consists free order variables free function variables note need talk free variables counting terms 
tuple elements elements proof proceed induction terms built function symbols variables follows closure suppose jxj jt 
jxj jtj jt assumption result follows closure properties case complex counting terms similar 
proposition suppose initial segment model bounded formula free variables displayed 
tuple elements elements iff proof result immediate open formulas 
inductive case boolean combinations immediate 
suppose result holds form jxj jbj universal formulas preserved submodels 
suppose consider jvj juj 
closure properties 
induction hypothesis 

argument bounded existential formulas similar 
theorem formulas bounded initial segment 
proof axioms lind straightforward closure properties formulas follow proposition 
fix suppose juj bounded follows proposition juj lind follows juj 
initial segment follows juj proposition juj 
require fact initial segments 
proposition suppose initial segment model ary function 
polynomial jf uj 
proof induction derivation basic function symbols prove bounded polynomial size arguments 
function defined projection result immediate 
functions defined induction hypothesis obtain polynomial bound bounding function 
functions defined composition induction hypothesis simple arithmetic manipulations hold position give proof soundness theorem state theorem soundness theorem suppose bounded formulas possibly non disjoint sequences function variables 
sequences poly time functions 
poly time function polynomials jxj jz jxj poly time function polynomials jxj jz jxj 
proof suppose bounded formulas satisfying 
sequences poly time functions poly time function polynomials jxj jz jxj 
sake contradiction suppose case poly time function polynomial jxj jz jxj 
poly time function sequence polynomials witness failure 
expand language function symbol poly time function 
obtained adding formula form poly time function sequence polynomials 
finite subset satisfiable asymptotic assumptions compactness model define submodel domain consisting juj polynomial smallest class containing initial functions closed projection composition bounded primitive recursion lengths 
proposition initial segment furthermore construction giving contradiction 
note proof strengthened order obtain existence reduction takes adversary breaking construction adversary breaks primitive 
suppose assumption theorem hold adversary breaks construction 
add function symbols function poly time definable axioms state functions break original primitive 
compactness obtain contradiction 
words obtain existence required reduction 
stronger soundness result follows techniques apply adversary model adversaries modeled nonuniform families circuits 
examples proofs example gives proof system computational indistinguishability bit unpredictability implies pseudorandomness 
suppose jf say bit unpredictable rand rs rand rs ig rs note order define notion system deviated original definition terms computational indistinguishability 
hard see definition equivalent standard 
give proof system result bit unpredictable pseudo random generator stretch define hybrid function ig ig rand rs rs rand rs rs ig ig univ rand rs rs ig rs edit rand rs rs sub bit unpredictable rand rs rs univ jzj follows ind edit sub rs rs required 
second example describe order system model verify protocol flipping coins public line uses hidden bit commitment subroutine 
order achieve hidden bit commitment construction naor uses pseudo random generator primitive 
high level description protocol alice sends bob random bob computes random bit string prg bits bits picks random commit sends sends coin flipping alice sends bob random bob reveals outputs alice outputs checks rejects 
lower case correct protocol upper case hypothetical possibly cheating message 
model correct protocol functions player alice message alice second message depending reject 
similarly depending adversary bob cheating alice bit pair functions 
adversary succeeds probability non negligible function 
similarly successful cheating bob adversary alice bit functions probability non amount 
outline prove protocol outlined correct successful cheating adversaries 
consider cheating alice 
starting formal definition pseudo random generator easy establish fact counting axiom function jvj 
jyj 
jrj jr jyj 
jrj jr derive function jvj 
pr jrj jr jsj pr jrj jr jsj jzj follows adversaries pr jrj jr jsj pr jrj jr jsj jzj adversaries pr jsj jrj jr jbj jzj required 
cheating bob want show bit pair functions cheating bob uses pr jvj jrj jr jbj jzj purely counting argument complexity theory assumptions necessary 
definitions re write probability pr jvj jrj jr jbj substituting definition letting write pr jvj jrj jr jbj 
exp jvj jrj jr jbj 
pr jvj jrj jr 

pr jvj jrj jr 

pr jvj jrj jr exp jvj jrj jr js js jvj js js jzj proof completely formalized line follows cited counting axioms basic axioms definitions pr exp soundness interpretation general system simplify presentation assume probabilistic terms form term involving counting quantifiers 
formal presentation need consider general probabilistic terms prove term equivalent term normal form 
interpret formula pr pr jzj soundness system computational established proving interpretation rules proofs properties counting terms essential way 
outline proofs go rules 
examples considering rules full generality order avoid required induction syntactic structure obscure underlying ideas proofs 
reflexivity symmetry transitivity obvious 
univ assumption 
suppose concreteness jxj 
note jxj jxj jxj follows free variable jxj jxj interpretation univ rule follows special case 
sub interpretation premise pr pr jzj specialize formula poly time term obtaining pr pr jzj pr pr jzj giving interpretation rule 
edit follows fairly directly properties 
ind telescoping sum lemma 
probabilistic term premise ind rule 
concreteness suppose form rs counting term jxj 
telescoping sum lemma sufficient establishing interpretation ind 
