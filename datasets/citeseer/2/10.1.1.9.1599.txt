responsive architecture thinwire visualization kenneth chee yap department computer science courant institute new york university mercer street new york ny yap cs nyu edu november describe multi threaded client server architecture thinwire visualization large datasets 
thinwire refers network connection bandwidth small volatile 
contrast traditional approaches walkthroughs geographic visualization design goal maintaining frame rate paradigm di cult maintain thinwire environment 
focus responsiveness properties human conversation suggest system behaviors maximize perceived responsiveness 
system extensively uses concurrency sophisticated data structures task reordering cancellation bring behaviors 
verify correctness cache management protocols correctness non trivial task reordering cancellation 
implemented techniques webbased interactive visualizer geographic description entire continental united states street level 
index terms visualization thinwire responsiveness client server multi threading geographical information systems gis visualization architecture cache consistency 
maturation desktop computer years cleared path previously high visualization techniques mass market products 
turn near ubiquity web inspired web visualization large dataset resides remote location visualized browser plugin java applet 
common application ripe responsive interactive web visualization browsing road maps 
application responsive architecture 
model web notion thinwire represents bandwidth low unpredictable drop zero temporarily network disconnected 
forman describes bandwidth variable volatile research supported part nsf ccr ccr corresponding author growth wireless networks bandwidth volatile 
environment assume minimum bandwidth 
geographic visualization systems projects give little attention thinwire issues gain insight problem looking similar problems especially architectural walkthroughs 
traditional walkthrough exemplified funkhouser guiding paradigm model sequence frames taken film video 
model typically rendering pipeline stages visibility determination rendering possibly feedback loop user navigation 
funkhouser explicitly targets frame rate frames second 
extended rendering pipeline network produce remote rendering pipeline introduced techniques reduce bandwidth required order maintain frame rate 
mann cohen graphics techniques client extrapolate frames textureless model server generally sends corrections complete frames 
cohen streaming server sends superset data requested message transmission su ce multiple frames 
lischinski drop frames paradigm far server network concerned prediction streaming server try sure data client needed 
various reasons approaches su cient requirements 
course rely aspects specific walkthrough nature data relatively predictable navigation paths 
fundamental interesting guided paradigm says user kind request system response immediately frame 
systems guided frames paradigm means assumption implicitly minimum bandwidth separating user data assumption systems inappropriate thinwire environment 
lischinski system means server burden able predict data user going want near 
claim visualization applications requirements unnecessarily stringent 
take di erent approach designing specifically responsiveness 
approach allows produce high quality visual interaction thinwire environment restrictions example fast user move geography 
furthermore forman argues environment volatile resources designing responsiveness leads cient resources static sizing provide fixed service level dynamic sizing decide run time service level currently supported 
dropping goal delivering highest quality image possible time frame need new specification information provide 
adopt paradigm human conversation behavior perception humans conversation serve guide computer behave interaction human 
need define expect human conversation 
card discuss question fast interaction 
delineate levels interaction second level second level second level 
events occur second fuse single percept 
speed necessary perception cause ect relationships button screen changes state second clicked perceive click caused change state 
note perceiving relationship immediate guessing deducing 
illusion animation breaks frame lasts second recall funkhouser target frame rate frames second 
second level pace human dialogue time response 
speaker pauses second listener feels compelled say uh huh nod assure speaker listener communication channel intact 
second level really range seconds represents time needed minimal unit cognitive 
examples include selecting modifying small section text screen making routine move chess requires lengthy study board 
suggests behavior responsive visualization system 
user input action mouse ensure action recognized minimally acknowledged seconds matter busy system 
earlier versions system delays acknowledging mouse drags half second quite 
second possible response take second indicator display lets user know system working response providing shortly 
continuing human conversation analogy suppose asks question finishes answering interrupts di erent urgent question 
assuming asks second question normally go ahead answer second question return answering question information relevant 
similarly responsive system accept interruptions giving highest priority answering request responses old requests irrelevant newer requests dropped completely 
part general programming framework developing responsive applications volatile resource environments forman identified principal techniques feedback completion concurrency dynamic prioritization cancellation 
approach feedback completion corresponds listener interrupting new question previous answer finished dynamic prioritization corresponds speaker accepting interruption answering question cancellation corresponds speaker dropping response old question newer questions longer relevant 
concurrency necessary slow task hold rest 
describe system techniques way meet responsiveness goals 
primary di culty ensuring system gets bogged old requests blocked low bandwidth 
section give brief description geographic visualization application 
section covers multi threaded architecture client server assignment tasks threads 
section describes sophisticated form priority queue inter thread communication prioritization tasks 
section gives arguments quality responsiveness architecture provides rough testing results section 
section covers cache management strategies 
ensuring correctness cache management turns non trivial task reordering cancellation 
section looks related ideas section 
geographic visualization application screenshot geographic visualization application techniques described implement responsive visualization system smooth zooming panning geography continental united states overview street level 
shows screenshot 
smooth zooming panning mean virtually continuous changes scale position discrete increments current map servers 
user able open number windows windows linked tree hierarchy restrictions zooming parent zoomed children black rectangles parent show locations children 
window independently zoomed buttons slider provided zooming panning accomplished dragging mouse 
example responsive behavior user drags mouse pan window system immediately translates image displayed window 
done consulting server local cache happen second level interaction 
corresponding second second levels interaction local cache searched relevant data displayed new data may downloaded server 
analogy suggestive literal certainly don expect system take seconds query server 
multi threaded architecture allows activities take place concurrently 
bottom left screen display 
letters light red inform user system doing 
important lit indicates client waiting data arrive server 
renderer pq cache windows data provider pq db cache copy mouse searcher pq unpacker pq pq response sender response receiver request taker event handler pq request sender client server thinwire runtime system data flow diagram loading unpacking processing rendering data 
important note lit system freeze responds normally user local data possibly getting responses server newer requests 
functions indicator mentioned previous section assures user system working requests may long time 
data census bureau tiger data generalized levels detail 
level data grouped small connected regions data region compressed stored database single blob 
blob unit data exchanged client server request comes server geographic range blob intersects range returned client client 
detailed description application issues data preprocessing early version described 
far know web visualization system smooth zooming panning large geographic dataset zoom factor highest overview highest detail 
demo available web cs nyu edu visual demos 
thread architecture illustrates multi threaded client server architecture flow data requests system 
large rectangles represent threads small rectangles labeled pq represent priority queues queues data structures handle interthread communication task prioritization 
term task refer request data encapsulated message passed thread thread refer procedure thread executes receiving message 
diagram partitioned client program right server program left 
basic flow data requests begins user input mouse right event handler thread 
requests flow generally leftward server responses back client eventually output windows 
complexity sophistication architecture providing responsiveness encapsulated priority queues described detail section 
ambiguity abbreviate priority queue just queue 
duration client connection thread repeatedly executes loop gets input task queue priority queue thinwire executes various operations part task 
detailed description thread behaviors 
sequence events follows user making movement mouse pan zoom event includes data paths represent complete response request 
mouse event handler windows path represents initial immediate response mouse event involve querying server local cache 
event handler acknowledges input minimal update screen translating scaling screen image 

mouse event handler searcher renderer event handler windows data path finding displaying data downloaded server 
event handler passes request searcher pulls relevant data cache passes renderer 
renderer prepares data rendering passes object individually time event handler displays screen 

mouse event handler request sender request taker data provider response sender response receiver unpacker renderer event handler windows third slowest path request sent server data provider searches database sends relevant data back client storing information server cache copy 
back client unpacker stores data local cache sending renderer eventual display 
note parallel data paths levels interaction discussed section 
data path corresponds sec level interaction second sec level third sec level 
thread spends active time time waiting task single activity done concurrently threads activities 
example server side main activities threads reading thinwire querying database writing thinwire respectively 
request path completes second third started 
second third paths request execute concurrently may concurrent path request 
pipelined concurrency requests second third paths 
consider threads read write thinwire 
thinwire client server machine threads unnecessary event handler directly access priority queue data provider data provider directly access priority queue unpacker 
thinwire necessitates threads reasons 
messages cross thinwire fifo order client directly write data provider priority queue involve intermediary thread 
similarly server writing unpacker priority queue 
request taker response sender function intermediary threads 
thinwire may arbitrarily slow expect thread writes network spend lot time blocked state 
especially bad event handler need available handle mouse input 
having request sender response sender allows event handler continue handling mouse events data provider continue searching database client server blocked writing network increasing parallelism 
queue event handler uses input part java runtime environment replace modify 
event handler gets display tasks mouse input tasks queue careful queue 
large number render tasks put queue new mouse event occurs wait tasks completed handled 
obviously bad responsiveness 
fortunately java provides option putting task queue blocking task completed 
option guarantee render feature task queue time new mouse event handled quickly 
general task event handler performs quick possible try oad possible event handler threads 
priority queues priority queues provide primary functions inter thread communication task scheduling 
priority queues implement form producer consumer problem low level synchronization provided java runtime environment 
prioritization requirements 
tasks data requests associated particular window partitioned priority classes window 
class higher current priority class tasks higher priority tasks 
user sets input focus window priority class associated window moved front priority list classes maintain previous ordering 

priority class tasks prioritized timestamp sequence number request task associated 
timestamps higher priority 

tasks quit prune associated window 
global tasks higher priority tasks serviced fifo order 
section describes behavior basic priority queue section describes special capabilities required response sender priority queue 
basic priority queue basic priority queue includes data structures ordinary queue global tasks 
heap priority class storing tasks heap ordered timestamp 
move front list node stores priority class id priority queue contains hash tables provide constant time access heaps 
list priority queue supported operations 
executed atomic operation important fast possible 
number priority classes size largest heap time 
return highest priority task remove priority queue 
non empty return front task check heaps priority class order return top task non empty heap 
requires time log 
id timestamp task add task appropriate heap timestamp 
requires time log 
task add task 
requires constant time 
id add new priority class front giving highest priority 
requires constant time 
id remove priority class discard tasks associated 
requires constant time 
id move tasks priority class heap order remove priority class 
requires time log 
id move priority class front 
requires constant time 
clear id cancel tasks priority class clearing heap 
requires constant time 
invalidate id mark task heap invalid 
requires time 
window specific tasks passed thread 
usually global tasks return highest priority task window currently input focus 
user opens window closes window gives input focus window respectively executed priority queues system 
flow commands system identical 
event handler executes operation client side priority queues sends message server request sender point request taker executes command server side priority queues 
command take di erent path reasons cache consistency discussed section data stored cache copy eventually cache means tasks removed response sender unpacker priority queues requests data provider queue invalidated cleared discarded see 
event handler executes operation client side priority queues unpacker sending message server 
request taker executes invalidate data provider priority queue puts remove message 
point message works way back unpacker priority queue operation performed 
way priority class removed unfinished tasks associated window processed 
unfinished tasks window irrelevant latest user actions tasks dropped clear invalidate 
remove tasks response sender unpacker data provider priority queues event handler executes clear client side priority queues request taker executes invalidate data provider priority queue 
trigger application dependent application happens user zooms jumps new location geography 
reason invalidate clear want client give indication user requests sent server responded 
meet visualization requirement system show working indicator response takes second 
client get response request response empty means tasks cleared data provider queue 
invalidating informs server send back empty response 
response sender priority queue suppose data provider gets request intersects blob sent response sender 
response sender queue data provider gets new request intersects higher priority data provider sent included response priority ectively limited priority really promoted highest priority request intersects 
extended functionality response sender priority queue allows happen 
priority class generated window want associate relative priorities may change user gives input focus di erent window associate requests sure gets sent client 
accomplish introduce new data structure hash table maps blob id list heap nodes contain blob 
node heap blob 
operation add entry blob task added constant time addition 
task removed blob task invalidate blob heaps removing 
nodes list removing entry hash table takes constant time time log 
define new operation upgrade data provider executes blob previously sent intersects new request upgrade operation sent client search list heap upgrade node priority heap priority bubble node proper place heap add heap add new heap node list 
nodes list adding heap takes log time time upgrade log 
possible upgrade functionality benefit response receiver queue 
implemented require extra message sent thinwire assume thinwire primary performance bottleneck means blob thinwire processed quickly client side relative time needed send single message thinwire 
testing required decide valid assumption 
responsiveness formal arguments complexity responsiveness requirements di cult impossible prove optimality approach define optimality context 
claims justifications shed light system works responsive 
claim looks response time minimal initial acknowledgment user input 
render task refers task send renderer event handler rendering screen 
claim initial acknowledgment mouse input delayed single render task initial acknowledgment previous mouse inputs acknowledged 
justification algorithm renderer ensures put task event handler queue put task queue task finished 
single rendering task ahead mouse input task event handler queue 
renderer mouse players put tasks event handler queue additional tasks mouse input wait previous mouse inputs 
want initial acknowledgment happen second 
practically speaking su cient ensure sum time single render task plus time mouse input handling routines second 
claim look task delayed tasks 
definitions 
purposes claim consider types delay necessary time thread finish task started time add task priority queue 
define normal operation system include sending requests receiving responses removing window event causes normal prioritization rules set aside 
define ideal execution environment thread executes dedicated processor thread management overhead 
claim normal operation ideal execution environment blobs associated request arrive client delayed necessary 
justification blobs client request done consider path request takes server response blobs take back client 
event handler request initiated data provider task associated request passes priority queues threads 
request sender priority queue structure queue guarantees new task jump front lower priority task queue delays adding task priority queue waiting request sender finish previously started task necessary 
similarly data provider queue 
request sender request taker simply forward task path going task 
data provider blob sent pulled database put response sender queue current request priority argument queues applies 
blob sent may response sender queue part task lower priority 
case data provider execute upgrade command blob higher priority argument applies 
note responsiveness guaranteed point data arrives client extend unpacking data displaying 
reason execute upgrade command tasks unpacker priority queue theoretically possible blob queue lower priority higher priority requests come included 
discussed section expect thinwire performance bottleneck system blob arrives client processed relatively quickly compared time needed send upgrade message thinwire 
assume events lead setting aside normal prioritization rules relatively rare significant impact perceived responsiveness 
notice logarithmic time performed memory thread path client server back primarily occupied thread reads queue occupied task added priority queue types necessary delay frequently occur parallel 
responsiveness testing unique nature system design task reordering cancellation unique nature goal responsiveness obvious testing procedure measuring 
client send requests server measure long wait system rest getting idea system performs flux essential responsiveness 
measure response time individual requests measuring responsiveness prefer slower response certain request urgent requests come take higher priority 
really want right data transferred right time 
devised simple measurement methods give rough indication di erent aspects responsiveness 
experiments run dsl connection measured download bandwidth kbps rated upload capacity kbps 
server computer mhz sun netra ac gb memory running solaris 
database management software postgresql 
client computer ghz pentium pc mb memory running linux 
test gives sense quality dynamic task prioritization 
method measure response time individual request partition responses categories responses request user measured sum saved new york sec boston sec washington dc sec san francisco sec philadelphia sec bos ny sec sec dc bos ny sec sec sf dc bos ny sec sec phil sf dc bos ny sec sec table times clicking jump button system coming rest 
requests making request led response responses relevant application means data currently shown windows data longer relevant application means visible window 
dynamic task prioritization working category responses fastest third category slowest 
ran di erent user sessions average response time msec requests msec relevant requests msec longer relevant requests 
second measurement method involves simple tests hand demonstrate ects task cancellation 
results shown table 
basic test click button jump new location stopwatch time long takes clicking button data downloaded server 
user interface provides visual indicator data downloaded recall light described section 
trials done test average taken 
lines table show results test di erent cities 
tried combinations cities seen lines table 
case button clicked quick succession button wait data downloaded 
timing starts button clicked 
column shows measured times 
multiple click tests second column shows sum times constituent cities expect city data allowed download completion retrieving city column shows percent time saved waiting presumably cancellation requests 
third measurement related claim previous section want initial acknowledgment mouse input second related time single render task time event handler spends single input event 
highly application dependent implementation platform dependent 
geographic visualization system measured time single render task rendering polygon dependent polygons test platform polygons rendered msec largest polygons require close msec 
cache management cache management turns tricky problem task reordering cancellation 
seen section cache considerations prevent cancelling tasks certain situations consider coordinate client server cache needs pruned 
tasks reordered time data added cache cache copy order immediately obvious caches consistent meaning consistent context 
section look flawed strategies describe approach prove correctness section 
flawed approaches represent blob represent set blobs cache represent set blobs cache copy represent set blobs database shown screen 
system rest assume client server execute pruning algorithm actual blobs pruned depends state cache cache copy time pruned 
natural client decide initiate pruning process knows memory usage user current viewpoint naive approach client prune cache send prune message server server prunes cache copy 
introduces consistency problem 
suppose start unpacker initiates pruning removes cache user moves current view request sender happens send corresponding request data server unpacker passes prune message server return pruned cache copy point system come rest means data disappeared dataset 
suppose start client sends request covers server 
client prunes cache algorithm prune sends prune message server 
data provider receives request sends response storing cache copy receives prune message removes cache copy arrives client ll system come rest 
time client requests area includes duplicate sent 
problems solved having server discard objects 
client initiates prune chooses pruning algorithm delete objects outside region delays doing actual prune notifies server server prunes cache copy 
protocol runs problem task prioritization 
suppose prune high priority start response request data provider adds cache copy puts response sender priority queue 
data provider receives prune command prunes cache copy puts prune command response sender priority queue 

response sender processes prune command higher priority sending client 
client executes prune algorithm remove cache 
response sender sends client added cache system come rest similarly prune command low priority system come rest correct approach really want prune command pass blob passed blob way data provider unpacker 
introduce new operation priority queues task 
operation moves tasks priority classes order priority adds task 
requires time nm log 
case task add prune command 
atomic operation tasks global queue take precedence heaps prune guaranteed processed previously added tasks tasks added 
working protocol 
unpacker chooses prune algorithm sends prune command server 

data provider executes prune cache copy 

data provider calls prune response sender queue 

response receiver calls prune unpacker queue receiving prune 

unpacker executes prune cache putting blobs came prune cache 
proving correctness protocol define means correct 
informally really want server send blob client shouldn doesn 
show request arrives data provider blobs intersect request time cache unpacker receives blob duplicates cache 
definitions 
prune th prune command initiated unpacker executed data provider unpacker 
add th time added cache copy associated message event passed client action adding cache message 
op refer prune add getting theorems establish intermediate results 
lemma op occurs data provider occurs unpacker assuming number user requests finite op occurs unpacker occurred earlier data provider 
proof data provider executes prune add operation puts associated command response sender queue 
clear commands executed response sender queue unpacker queue command deleted arriving unpacker 
number user requests finite command infinitely delayed priority queue passed repeatedly important tasks 
eventually get unpacker 
unpacker executes operations come response receiver response receiver sends commands receives response sender response sender sends commands receives data provider data provider sends op commands executing 
lemma prune precedes op data provider prune precedes op unpacker 
proof lemma guarantees set operations locations lemma statement defined 
data provider processes prune executes prune response sender queue op response sender queue processed response sender prune op preceded prune data provider 
thinwire fifo response receiver receive op prune op preceded prune response sender 
response receiver processes prune executes prune unpacker queue unpacker receive op prune op preceded prune response receiver 
lemma data provider unpacker prune precedes prune proof definition prune initiated prune priority queue prune command placed fifo structure thinwire fifo structure 
data provider prune commands arrive order initiated prune precedes prune lemma relationship holds unpacker 
set blobs added cache cache copy respectively prune prune 
set blobs removed cache cache copy respectively part prune set blobs cache cache copy respectively immediately prune empty set 
lemma 
lemma proof lemma implies sets defined 
follows lemma 
prune algorithm performed cache cache copy follows induction follows induction theorems establish correctness cache consistency protocols 
essentially saying formal language server send blob shouldn doesn 
theorem set blobs database intersect request user finite number requests data provider receives time cache time prune 
proof consider time arrives data provider cache copy 
case cache copy add executed cache copy lemma add executed unpacker 
lemma happen prune 
case cache copy sub cases depending prune operation add performed data provider 
case prune prune prune data provider received clearly lemma remain cache prune 
case prune lemma add performed unpacker prune 
case cache prune 
theorem point unpacker receives add cache 
proof lemma data provider previously executed add command lemma prune prune command unpacker 
cache copy data provider executed add command lemma add command prunes added prune add cache unpacker received add command 
related forman flow general programming framework building responsive applications specifically visualization 
framework thread spawned task tasks related dynamic dependence graph 
task priorities explicitly changed operating system facilities setting thread priorities implicitly changed dependence graph changes 
tasks may cancelled obsolete 
sample applications built framework database front fractal explorer photo album web browser 
applications uses relatively small number tasks straightforward priority relationships 
hypertext transfer protocol client requests web resources server returns resources 
request response transaction requires tcp connection 
reduce connection overhead implementations allow persistent connections multiple transactions take place sequence single connection 
pipelining allowed multiple requests sent connection waiting response 
responses returned order requests received 
nielsen concurrent connections gave faster responses single connection pipelining pipelining best response times 
gervautz inserted network traditional rendering pipeline remote rendering pipeline 
client keeps cache downloaded data server network portions pipeline short circuited respects follows rendering pipeline approach data frame goes database stages visibility culling rendering final image 
cohen reduced number frames need sent network having server send superset geometry frame 
approach cohen client extrapolate frames frame server needs send di erence image preventing accumulation errors 
see 
approaches take advantage nature walkthrough continuous changes user view standard geometry 
lischinski properties drop frame rate altogether server network portions system 
occasional updates user motion client server predicts user going ideally sends data ahead time 
improve algorithm optimizing worst case scenario prediction wrong user suddenly changes direction 
virtual reality gis project focuses data storage retrieval techniques appropriate geographic data client server communication relatively straightforward queries remote database 
projects kemper designed multi threaded architectures facilitate prefetching pages remote databases specifically visualization 
cases main application thread client side handles user interface block page needs downloaded means system responsiveness dependent quality prefetching technique 
chang yap yen chang designed thinwire system visualization large multi foveated images wavelet techniques 
client requests various pieces various resolutions underlying image 
client multi threaded architecture allows give kind response request matter slow network client server communication synchronous user requests handled time server cancelling reordering 
yap yen improved client side architecture pipelining possible similar server respond request order 
improved client allows request cancellation server handle request fully reordering 
wavelet foveation techniques introduce intra data dependencies especially di erent levels detail limits amount task cancellation done 
feasibility responsive visualization large dataset thinwire demonstrated research 
developed multi threaded client server architecture responsive visualization thinwire environment bandwidth user data highly volatile unpredictable 
bandwidth temporarily drops zero system continues respond user requests intelligently promptly information available 
traditional approach designing maintain frame adopted paradigm responsive design human conversation 
approach allows build system fewer restrictions resource requirements feels responsive 
system architecture data paths built levels response suggests levels interaction humans perceive second level perception immediate cause ect relationships second level time response pace human dialogue second level time unit cognitive 
system allows user actions lead task cancellation re prioritization suggests kind interruptions take place conversation 
number directions research take 
importantly apply responsiveness techniques di erent datasets environments 
useful extension add layer sparse dynamic data tra flow movement truck rail 
applying techniques data dependencies multi foveated image data interesting problem 
incorporate responsiveness general distributed systems just client server incor benefits distributed systems fault tolerance responsive system 
discussed section di culties designing meaningful testing methods system 
development sophisticated testing procedures systems extremely beneficial evaluating system designs 
interested formal modeling statechart method harel allow rigorous investigation responsiveness system 
di culties testing overcome number changes system improve performance value determined testing 
include prefetching see example sophisticated task scheduling see discussion online scheduling similar thinwire visualization problem large images multiple socket connections client server 
kenneth 
responsive thinwire visualization large geographic datasets 
phd thesis new york university 
cs nyu edu visual home pub 
michael bender ralf klein andreas achim ebert 
functional framework web information visualization systems 
ieee transactions visualization computer graphics january march 
berners lee fielding frystyk 
informational rfc may 
www org protocols rfc rfc 
stuart card jock mackinlay ben shneiderman 
readings information visualization vision think 
morgan kaufmann 
ee chien chang 
foveation techniques scheduling issues thinwire visualization 
phd thesis new york university 
cs nyu edu visual home pub 
ee chien chang chee yap 
competitive online scheduling level service 
journal scheduling october 
special issue online algorithms 
proc 
th ann 
intl 
computing combinatorics conf 
cocoon august china 
ee chien chang chee yap ting jen yen 
realtime visualization large images thinwire 
ieee visualization late breaking hot topics pages 
see cd proceedings conference 
cohen 
model view extrapolation interactive vr web systems 
computer graphics international pages 
daniel cohen eyal 
visibility streaming network walkthroughs 
graphics interface pages june 
fielding gettys mogul frystyk masinter leach 
hypertext transfer protocol draft standard rfc june 
ftp ftp isi edu notes rfc ps 
george forman 
obtaining responsiveness resource variable environments 
phd thesis university washington 
george forman 
wanted programming support ensuring responsiveness despite resource variability volatility 
technical report hewlett packard labs 
george forman john zahorjan 
challenges mobile computing 
ieee computer april 
mobility processes computers agents addison wesley 
sven fuhrmann alan maceachren 
navigation desktop environments usability assessment 
th international cartographic conference proceedings 
thomas funkhouser 
database display algorithms interactive visualization architectural models 
phd thesis uc berkeley 
thomas funkhouser 
database management interactive display large architectural models 
graphics interface pages 
thomas funkhouser carlo sequin 
adaptive display algorithm interactive frame visualization complex virtual environments 
computer graphics proceedings pages 
thomas funkhouser carlo sequin seth teller 
management large amounts data interactive building walkthroughs 
computer graphics siggraph symposium interactive graphics pages 
thomas funkhouser seth teller carlo sequin 
uc berkeley system interactive visualization large architectural models 
presence january 
carsten kemper 
multi threaded architecture prefetching object bases 
lecture notes computer science 
david harel 
statecharts visual formalism complex systems 
science computer programming 
david harel amnon naamad amir pnueli michal rivi sherman mark trakhtenbrot 
statemate working environment development complex reactive systems 
ieee transactions software engineering 
david harel michal 
modeling reactive systems statecharts statemate approach 
mcgraw hill 
gerd dieter 
network architecture remote rendering 
proceedings nd international workshop distributed interactive simulation real time dis rt pages 
nils 
speed database client adaptable multithreaded prefetching 
proceedings sixth ieee international symposium high performance distributed computing pages 
nils 
adaptable multithreaded prefetching technique client server bases 
cluster computing 
alan maceachren 
evolving cognitive semiotic approach geographic visualization knowledge construction 
information design journal 
special issue jacques bertin theories 
alan maceachren robert daniel ryan baxter george otto masters sven fuhrmann qian 
virtual environments geographic visualization potential challenges 
proceedings acm workshop new paradigms information visualization manipulation pages 
yair mann daniel cohen 
selective pixel transmission navigating remote virtual environments 
computer graphics forum september 
henrik frystyk nielsen james gettys baird smith eric prud hommeaux lie chris lilley 
network performance ects css png 
computer communication review october 
renato 
access large scale terrain image databases systems 
phd thesis eth zurich 
dissertation 
renato thomas peter szabo peter widmayer 
alps fingertips virtual reality systems 
proceedings th international conference data engineering icde pages 
renato peter widmayer 
virtual concepts design choices 
international journal computational geometry applications february 
dieter 
remote rendering pipeline managing geometry bandwidth distributed virtual environments 
phd thesis vienna university technology 
dieter michael gervautz 
demand driven geometry transmission distributed virtual environment 
computer graphics forum 
erik steiner alan maceachren guo 
developing assessing lightweight data driven exploratory tools web 
th international cartographic conference proceedings 
szabo peter patrick thomas renato peter widmayer 
virtual reality system environment intuitive walk throughs exploration large scale tourist information 
proc 
enter conference pages 
eyal lischinski 
streaming complex scenes remote walkthroughs 
computer graphics forum 
dc census bureau washington 
census tiger line files machinereadable data files 
chee yap kenneth du 
responsive thinwire visualization application large geographic datasets 
proc 
spie vol 
visualization data analysis pages 

chee yap ting jen yen 
design instrumentation thinwire visualization system 
unpublished manuscript 

