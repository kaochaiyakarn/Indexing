space efficient online computation quantile summaries michael greenwald computer information science department university pennsylvania south rd street philadelphia pa greenwald cis upenn edu sanjeev khanna computer information science department university pennsylvania south rd street philadelphia pa sanjeev cis upenn edu approximate quantile summary sequence elements data structure answer quantile queries sequence precision new online algorithm computing approxi mate quantile summaries large data sequences 
algorithm worst case space requirement log 
improves previous best result log 
contrast earlier deterministic algorithms algorithm require priori knowledge length input sequence 
actual space bounds obtained experimental data signi cantly better worst case guarantees algorithm observed space requirements earlier algorithms 

study problem space ecient computation quantile summaries large data sets single pass 
quantile summary consists small number points input data sequence uses quantile estimates give approximate responses arbitrary quantile query 
summaries large data sets long programmers motivated limited memory resources 
elementary summaries running averages standard deviation typically sucient simple applications 
mean variance descriptive sensitive outliers supported part darpa contract national science foundation ani 
supported part alfred sloan research fellowship 
data 
cases online algorithms necessary generate quantile summaries little space provide reasonably accurate approximations distribution function induced input data sequence 
quantile estimation database applications highlighted importance quantile estimators database users implementors :10.1.1.6.6513
quantile estimates estimate size intermediate results allow query optimizers estimate cost competing plans resolve database queries 
parallel databases attempt partition data value ranges size partitions roughly equal 
quantile estimates choose ranges inspecting actual data 
quantile estimates uses databases 
user interfaces may estimate result sizes queries provide feedback users 
feedback may prevent expensive incorrect queries issued may ag discrepancies user model database actual content 
quantile estimates database users characterize distribution real world data sets 
existing body identi ed particular properties quantile estimators require order useful database applications properties may strictly necessary estimating quantiles domains 
desirable properties follows 
algorithm provide tunable explicit priori guarantees precision approximation 
say quantile summary approximate answer quantile query precision words rank approximate quantile summary returns value rank guaranteed interval 
algorithm data independent 
guarantees ected arrival order distribution values require priori knowledge size dataset 
algorithm execute single pass data 
algorithm small memory footprint possible 
note memory footprint applies temporary storage computation 
construct approximate summary size follows 
rst construct approximate summary 
query summary quantile 
easy see set responses constitutes approximate summary 
previous earlier works progress meeting mentioned requirements 
manku rajagopalan lindsay single pass algorithm constructs approximate quantile summary 
algorithm strictly guarantees precision requires advance knowledge size data set 
requires log space 
authors algorithm require advance knowledge give deterministic guarantee accuracy 
provide probabilistic guarantee quantile estimates desired precision 
gibbons matias poosala estimate quantiles di erent error metric algorithm requires multiple passes data :10.1.1.100.9995
similarly chaudhuri motwani require multiple passes provide probabilistic guarantees 
munro paterson building earlier pohl showed algorithm exactly computes quantile sequence data elements passes requires space 
notion approximate quantiles inherently necessary obtained sub linear space algorithms 
researchers addressed problem determining smallest number comparisons necessary computing quantile 
refer reader nice survey article paterson overview results area 
results design analyze new online algorithm computing approximate quantile summary large data sequences 
algorithm worst case space requirement log improving previous best result log 
contrast earlier deterministic algorithms algorithm require priori knowledge length input sequence 
approach novel data structure ectively maintains range possible ranks quantile store 
di ers previous approaches implicitly assumed error stored quantiles distributed roughly uniformly distribution observed values 
explicitly maintaining possible range rank values quantile algorithm able adaptively handle new observations values observed near tightly constrained quantiles dropped new values observed near loosely constrained quantiles stored 
intuitively speaking improved behavior algorithm fact prove input sequence bad entire distribution 
words input sequence persistently new observations stored allowing safely delete old stored observations 
note algorithm parallelized straightforward manner deal scenario system independent processors analyzes disjoint streams derived parent sequence 
due space considerations omit details implementation version 
study performance algorithm empirical perspective 
actual space bounds obtained experimental data signi cantly better worst case guarantees algorithm observed space requirements earlier algorithms 
example summarizing uniformly random data algorithm order magnitude memory best previously known algorithm 

new algorithm assume loss generality new observation arrives unit time denote number observations elements data sequence seen far current time 
algorithm maintains summary data structure times denote total space 
denote precision requirement 
summary data structure point time data structure consists ordered sequence tuples correspond subset observations seen far 
observation maintain implicit bounds minimum maximum possible rank observation rst observations 
rmin rmax denote respectively lower upper bounds rank observations seen far 
speci cally consists tuples ts tuple 
consists components value corresponds elements data sequence seen far ii value equals rmin rmin iii 
equals rmax rmin 
ensure times maximum minimum values part summary 
words vs correspond minimum maximum elements seen far 
easy see rmin rmax 

upper bound total number observations may fallen observe equals total number observations seen far 
answering quantile queries summary form straightforward manner provide approximate answers quantile queries 
proposition forms basis approach 
proposition 
quantile summary form quantile identi ed error max 

proof 
ne max 

search index rmin rmax clearly value approximates quantile claimed error bounds 
argue index exist 
consider case rmin vs rmax vs desired property 
choose smallest index rmax follows rmin 
rmin rmax rmin 
rmin contradiction assumption max 

assumption rmax example index described property 
immediate corollary 
corollary 
time summary satis es property max 
answer quantile query precision 
high level algorithm maintaining quantile summary proceeds follows 
algorithm sees new observation inserts summary tuple corresponding observation 
periodically algorithm performs sweep summary merge tuples neighbors free space 
heart algorithm merge phase maintain conditions allow bound space time 
corollary suces ensure times max 
motivated consideration say individual tuple full 
nc 
capacity individual tuple maximum number observations counted tuple full 
bands order minimize number tuples summary general strategy delete tuples small capacity preserve tuples large capacity 
merge phase free space merging tuples small capacities tuples similar larger capacities 
say tuples similar capacities log capacity log capacity 
notion similarity partitions possible values 
bands 
roughly speaking try divide 
bands lie elements 
boundaries correspond capacities 
see shortly useful de ne bands way ensures property 
band appear di erent bands increases 
dlog ne nc de ne band set 
mod 
mod 
mod term holds borders bands static increases 
de ne band simply special case consider rst observations 
band 
shows band boundaries goes 
denote band band 
time band tuples equivalently 
values associated tuples band value band boundaries progresses 
rightmost band row band 
proposition 
point time band contains distinct values 
proof 
band bounded mod mod 
mod mod mod band contains distinct values 
mod mod mod band contains distinct values 
tree representation nd useful impose tree structure tuples 
summary ht ts tree associated contains node special root node parent node node index greater band band 
index exists node set parent 
children descendants node 
values larger 
properties easily veri ed 
proposition 
children node arranged non increasing order band proposition 
node set descendants forms contiguous segment operations describe various operations perform summary data structure 
start description external operations external operations quantile compute approximate quantile summary observations compute rank ne 
find rmin rmax return insert find smallest insert tuple nc increment special case new minimum maximum observation seen insert 
insert maintains correct relationships 
rmin rmax 
consider inserted value rmin may small rmin 
similarly rmax may large current rmax turn bounded nc 
note rmin rmax get increased insertion 
compress band 
band 

delete descendants tuple compress pseudo code compress internal operations delete delete tuple 
replace 

new tuple 
decrement delete correctly maintains relationships 
rmin rmax 
deleting ect rmin rmax delete simply preserve rmin rmax 
relationship rmin rmax preserved long 
unchanged 
rmin delete increase keep rmin 
entries unaltered operation 
compress operation compress tries merge node descendants parent node right sibling 
property ensure tuple results merging full 
proposition know node children form contiguous sequence tuples 
denote sum values tuple easy see merging descendants result updated 

ensure resulting tuple full 
say pair adjacent tuples mergeable 
band band 
high level compress operation iterates tuples right left nds mergeable pair merges tuples descendants note pairs tuples mergeable point time may point time term nc increases time 
gives pseudo code describing operation 
note delete compress alter 
surviving tuples follows 
quantile entry remains unchanged inserted 
compress inspects tuples right highest index left 
rst combines children entire subtree descendants parents 
combines siblings children combined parent 
initial state 
algorithm add st observation summary mod compress insert pseudo code algorithm analysis easy see data structure maintains approximate quantile summary point time 
insert compress operations ensure 
point time 
establish total number tuples summary observations seen bounded log 
start de ning notion coverage 
say tuple quantile summary covers observation time tuple directly merged tuple covered merged tuple covers 
easy see total number observations covered exactly 
lemmas give simple properties concerning coverage observations various tuples 
lemma 
point time tuple band covers observation band proof 
suppose time event described lemma occurs 
compress subroutine merges tuple adjacent tuple band greater band way event occur point time say band band current time band band 
argue occur point time band band band band 
borders bands static bands combine forever 
band new 
mod combine band unique band 
bands remain 
band new bands 
words borders removed added 
lemma 
point time integer total number observations covered cumulatively tuples band values bounded 
proof 
proposition band contains distinct values 
observations 
observations inserted 
band lemma observations bands covered node nodes question cover total number observations bands summing yields upper bound 
lemma shows band value small number nodes child band value 
lemma 
time nodes child band value words parents nodes band 
proof 
mmax respectively denote earliest latest times observation band seen 
easy verify mod mmax mod 
parent node band 
fix parent node child band rightmost child 
denote time observation corresponding seen 
show fraction observations arrived time uniquely mapped pair 
turn implies exist establishing lemma 
main idea underlying proof fact compress merge implies large number observations associated parent child pair 
rst argue gk 
trivially true 
observe tuple lies belong band equal vk parent gk claim follows 
compress merge case 
claim conclude gk 
time 
mmax gk mmax observe parent child pair observations counted distinct 
total observations arrived bound total number pairs mmax easily veri ed 
full pair tuples say tuple left partner right partner full pair 
lemma 
time tuples band right partners full tuple pair 
proof 
set tuples band participate right partner full pair 
rst consider case tuples form single contiguous segment 
maximal contiguous segment band tuples 
tuples alive case 
adding get 
particular conclude 
rst term lhs inequality counts twice number observations covered nodes band descendants tree 
lemma sum bounded 
second term bounded largest possible 
value tuple band value 
substituting bounds get simplifying get claimed lemma 
argument applies nodes induce multiple segments simply consider summation segments 
lemma 
time maximum number tuples possible band 
proof 
lemma know number band nodes right partners full pair bounded algorithm tuple count algorithm space requirement mlr algorithm table number tuples stored space requirements hard input sequences 
mrl algorithm assume quantile stored takes unit space 

band node participate full pair occurs left partner 
rst claim parent band node node band 
see observe pair non full adjacent tuples band merged band greater proposition tells event occur unique band child parent participate full pair 
easy verify parent node band participate left partner full pair 
observe events occur parent node 
lemma parents nodes total number band nodes bounded 
theorem 
time total number tuples stored log 
proof 
blog nc bands time total tuples bands 
remaining bands lemma bounds maximum number tuples band 
result follows 

empirical measurements describe empirical results concerning performance algorithm practice 
experimented di erent classes input data hard case algorithm sorted input data random input data 
sorted random input sequences chosen reasons 
random yield insight behavior algorithm average inputs randomization 
second scenarios produce experimental results 
mrl algorithm best previously known algorithm 
observed runs practice algorithm substantially space indicated analysis previous section 
observed space requirements turn better required mrl algorithm 
run algorithm space mrl algorithm observed error signi cantly better mrl algorithm 
refer variant pre allocated variant algorithm 
contrast refer basic version algorithm allocate new quantile entry observed error exceed desired adaptive variant 
implementation algorithm di ered slightly described section ways 
new observations inserted tuple 
nc 
approach previous section strictly simplify theoretical analysis space complexity 
second running compress observations observation inserted tuple deleted possible 
tuple deleted causing successor size grew 
note large number stored quantiles increase space need take place assuming know advance 
experiment measured maximum space produce summary observed precision results 
measured space consumption counting number stored tuples 
comparing space consumption mrl algorithm pessimistically multiplied number stored tuples account recording value min max rank stored element 
hard input construct data sequences adversarial manner algorithm 
time step generate observation falls largest current gap quantile summary 
successively fed observations summary advance hint total number observations seen 
measured maximum amount space required size input sequence increased table reports results experiment ranging powers note required number quantiles stored approximately factor lower worst case bound computed previous section 
note number quantiles store signi cantly lower number mrl algorithm 
multiplying tuple count factor require space mrl 
exception space cost algorithm exceeds mrl algorithm 
sorted input second scenario sorted measures behavior summary data arrives sorted order 
xed constructed summaries sorted sequences sizes computed actual maximum observed mrl algorithm preallocated algorithm adaptive jsj max table space precision measurements sorted case 
error possible quantile queries chose query quantiles rank study behavior speci quantiles 
compared algorithms constructing summary 
mrl algorithm compute summary preallocated storage required mrl function 
second pre allocated amount storage required mrl stored quantiles mrl ran algorithm allocating quantiles 
ran algorithm adaptive mode started stored quantiles allocated extra storage impossible delete existing quantiles exceeding precision 
table reports results experiment 
jsj reports number stored quantiles needed achieve desired precision 
row labeled max reports maximum error possible quantile queries summary 
order give indication behavior algorithm speci quantiles remaining rows list approximation error response query th quantile 
interpret entries table consider quantile th 
sequence elements adaptive algorithm uses tuples returns value approximation error 
mrl stores times quantiles returns value error twice accurate 
preallocated algorithm stores third tuples mrl returns value approximation error comparable accuracy third number tuples 
fact error individual quantile representative error chosen inspect quantile algorithm times accurate mrl 
chosen mrl twice accurate 
quantiles sampled outperformed mrl sequence size size individual queries highly sensitive close quantile query happens single stored quantile 
average comparison mrl storage algorithm reported better worst case observed error comparable observed error perform slightly worse slightly better 
algorithms achieved higher precision demanded priori speci cation 
interesting result adaptive algorithm require stored quantiles regardless size input sequence 
closer experimentation revealed algorithm needs stored quantiles fairly early stage computation excess storage reduces observed error slightly 
see observing maximum error table 
desired expect maximum observed error approximately equal 
maximum error gets larger maximum error gets smaller 
maximum error ers interesting insight behavior algorithm 
note optimal value maximum error cases jsj occurs stored quantiles distributed evenly values know rank precisely 
example quantiles optimal max error 
quantiles ideal maximum error 
algorithm delivers maximum error factor optimal 
contrast optimal max error stored quantiles mrl algorithm delivers max error times large 
fact mrl discrepancy ideal max error observed max error grow jsj gets larger observed max error times optimal value 
random input third scenario random selects datum selecting element replacement uniform distribution remaining elements data set 
values data set arbitrarily skewed distribution order values observed summary chosen uniform random process 
sorted case xed summarized sequences lengths computed maximum error quantiles rank measured actual maximum storage requirement compute summary 
contrast sorted input case single experiment sucient determine expected behavior random input requires running trials illuminate expected behavior 
ran experiment times report min max mean standard deviation measurement 
tables report results 
observed preallocated algorithm roughly twice accurate mrl advantage increase steadily gets larger 
surprisingly observed adaptive algorithm stays close regardless large gets 
observed storage requirements may surprising 
interesting results random scenario 
appears uniformly random input required space independent size dataset dependent 
experiments approximate summary random input achieved roughly tuples 

concluding remarks new online algorithm computing quantile summaries large sequences data space ecient manner 
algorithm improves earlier results signi cant ways 
improves space complexity factor 
second require priori knowledge parameter allocates space dynamically data sequence grows size 
obvious question space complexity achieved algorithm asymptotically optimal 
believe answer 
empirical study new algorithm provides evidence algorithm compares favorably previous algorithms practice 
curious trend observed experiments random inputs space requirements algorithm depend error parameter independent sequence length interesting analytically verify behavior understand minimal characteristics data sequences lead improved space requirements 

rakesh agrawal arun swami 
pass space ecient algorithm nding quantiles 
proc 
th int 
conf 
management data december 
sanjay ranka vineet singh 
pass algorithm accurately estimating quantiles disk resident data 
proceedings rd intl 
conference large data bases athens greece august pages los altos ca usa 
morgan kaufmann publishers 
surajit chaudhuri rajeev motwani vivek narasayya 
random sampling histogram construction 
acm sigmod volume pages seattle wa june 
phillip gibbons yossi matias viswanath poosala :10.1.1.100.9995
fast incremental maintenance approximate histograms 
proceedings rd intl 
conf 
large data bases vldb pages 
morgan kaufmann august 
michael greenwald 
practical algorithms self scaling histograms better average data collection 
performance evaluation october 
jain chlamtac 
algorithm dynamic calculation quantile histograms storing observations 
communications acm october 
pohl 
minimum storage algorithm computing median 
ibm research report rc november 
singh manku sridhar rajagopalan bruce lindsay 
approximate medians quantiles pass limited memory 
acm sigmod volume pages seattle wa june 
singh manku sridhar rajagopalan bruce lindsay 
random sampling techniques space ecient online computation order statistics large datasets 
acm sigmod volume pages 
philadelphia pa june 
munro paterson 
selection sorting limited storage 
theoretical computer science vol 

paterson 
progress selection 
technical report university warwick coventry uk 
viswanath poosala venkatesh ganti yannis ioannidis 
approximate query answering histograms 
bulletin ieee technical committee data engineering december 
viswanath poosala peter haas yannis ioannidis eugene shekita 
improved histograms selectivity estimation range predicates 
acm sigmod volume pages montreal quebec canada june 
mrl algorithm preallocated algorithm adaptive jsj range avg stdev range avg stdev range avg stdev max table samples random order :10.1.1.100.9995
mrl algorithm preallocated algorithm adaptive jsj range avg stdev range avg stdev range avg stdev max table samples random order 
mrl algorithm preallocated algorithm adaptive jsj range avg stdev range avg stdev range avg stdev max table samples random order 
