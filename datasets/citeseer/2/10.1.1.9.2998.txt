int springer verlag practitioner guide coloured petri nets lars kristensen ren christensen kurt jensen cpn group department computer science university aarhus denmark mail daimi au dk 
coloured petri nets cp nets cpns provide framework design specification validation verification systems 
cp nets wide range application areas cpn projects carried industry areas communication protocols operating systems hardware designs embedded systems software system designs business process re engineering 
design cpn graphical computer tool supporting practical cp nets 
tool supports construction simulation functional performance analysis cpn models 
tool organisations different countries including commercial companies 
available free charge commercial 
provides comprehensive road map practical cp nets design cpn tool 
give informal basic concepts ideas underlying cp nets 
key components facilities design cpn tool illustrated 
self contained assume prior knowledge petri nets cp nets experience design cpn tool 
key words high level petri nets coloured petri nets practical modelling validation verification visualisation tool support increasing number system development projects concerned distributed concurrent systems 
numerous examples ranging large scale systems areas telecommunication applications www technology medium small scale systems area embedded systems 
development concurrent distributed systems complex 
major reason execution doi systems may proceed different ways depending messages lost speed processes involved time input received environment 
result distributed concurrent systems nature complex difficult design test 
coloured petri nets cp nets cpns provide framework construction analysis distributed concurrent systems 
cpn model system describes states system may transitions states 
cp nets applied wide range application areas projects carried industry documented literature areas communication protocols audio video systems operating systems hardware designs embedded systems software system designs business process re engineering 
development cp nets driven desire develop industrial strength modelling language time theoretically founded versatile practice systems size complexity typical industrial projects 
achieve combined strength petri nets strength programming languages 
petri nets provide primitives describing synchronisation concurrent processes programming language provides primitives defining data types colour sets manipulating data values 
cpn models structured number related modules 
particularly important dealing cpn models large systems 
module concept cp nets hierarchical structuring mechanism supports bottom topdown working style 
new modules created existing modules modules reused parts cpn model 
means structuring mechanism possible capture different abstraction kristensen practitioner guide coloured petri nets levels modelled system cpn model 
cpn model represents high level abstraction typically early stages design analysis 
model gradually refined yield detailed precise description system consideration 
cpn models executable 
implies possible investigate behaviour system making simulations cpn model 
goal doing simulations debug validate system design 
simulations equally serve basis investigating performance considered system 
visualisation technique closely related simulation cpn models 
observation single step simulation detailed level observing behaviour system 
provides observer overwhelming amount detail particularly large cpn models 
means high level visual feedback simulations information execution system obtained appropriate level detail 
important application visualisation possibility presenting design ideas results application domain concepts 
particularly important discussions people colleagues unfamiliar cp nets 
time plays significant role wide range distributed concurrent systems 
correct functioning systems crucially depends time taken certain activities different design decisions may significant impact performance system 
cp nets includes time concept possible capture time taken different activities system 
timed cpn models simulation analyse performance system investigate quality service delay quantity service throughput provided system 
time concept cp nets primarily suited investigating system means simulations 
contrasts analytical approaches performance analysis modelling languages aimed model checking timed hybrid systems 
state space method cp nets possible validate verify functional correctness systems 
state space method relies computation reachable states state changes system explicit state enumeration 
means constructed state space behavioural properties system verified 
examples properties absence deadlocks system possibility reaching state guaranteed delivery service 
state space method cp nets applied timed cp nets 
possible investigate functional correctness systems modelled means timed cp nets 
design cpn graphical computer tool supporting cp nets 
consists closely integrated components 
cpn editor supports construction editing hierarchical cpn models 
simulation cpn models supported cpn simulator cpn state space tool supports state space method cp nets 
addition main components tool includes number additional packages libraries 
set packages supports visualisation means business charts message sequence charts msc construction application specific graphics 
design cpn tool organisations different countries including commercial companies 
available free charge commercial 
man years invested development cp nets design cpn 
cp nets developed years 
main developer cpn group university aarhus denmark headed kurt jensen 
developed basic model including data types hierarchy constructs defined basic concepts dynamic properties developed theory existing analysis methods 
meta software played key role development high quality tools supporting cp nets 
engaged large number application projects industrial settings 
information group see 
detailed individual contributions years 
outline 
organised follows 
section gives informal syntax dynamic behaviour cp nets 
section introduce hierarchical structuring mechanism cp nets 
section gives overview design cpn tool 
section explains construction cpn models supported cpn editor 
section considers simulation cpn models cpn simulator 
section presents packages supporting visualisation gives examples 
section introduces time concept cp nets explains conduct simulation performance analysis systems 
section introduces cpn state space tool state space method cp nets 
section sums explains get started design cpn tool 
coloured petri nets section gives informal syntax semantics cp nets 
small communication protocol section illustrate basic concepts cpn language 
communication protocol introduce time concept state space method cp nets 
kristensen practitioner guide coloured petri nets keep mind difficult probably impossible give informal explanation totally complete unambiguous 
extremely important soundness cpn modelling language design cpn tool informal description complemented formal definition 
formal definition syntax semantics 
practical cp nets design cpn suffices intuitive understanding syntax semantics 
analogous programming languages successfully applied users unfamiliar formal mathematical definitions languages 
example communication protocol consider wait protocol control layer osi network architecture 
protocol taken 
wait protocol quite simple way represent sophisticated protocol 
protocol interesting deserve closer investigation complex introducing basic constructs cp nets 
gives overview protocol considered 
system consists sender left transmitting data packets receiver right 
data packets transmitted located send buffer sender side 
communication receiver takes place bidirectional communication channel bottom 
fig 

wait communication protocol data packets delivered exactly correct order received buffer receiver side 
obtaining service complicated fact sender receiver communicate unreliable communication channel packets may lost transmission packets may overtake 
way achieving desired service socalled wait retransmission strategy 
idea sender keeps sending data packet matching received case data packet transmitted 
simplicity particular wait protocol uses unlimited number retransmissions 
sender sends data packet communication channel constructing data frame putting data frame transmitdata frame buffer 
data frame pair consisting sequence number data packet 
channel attempt transmit data frame successful data frame delivered frame buffer processed receiver 
receiver delivers data packets upper protocol layers data packet buffer received 
protocol uses sequence numbers able match data packets able deduce correspond data packets able deduce data packet received 
receiver sends received data frame constructing frame putting frame buffer 
frame consists sequence number indicating sequence number data packet receiver expects 
similar data frames channel attempt transmit successful turn receiveack frame buffer sender side processed sender 
return inscriptions placed ellipses upper left corner boxes section 
modelling states petri nets contrast specification languages state action oriented time providing explicit description states actions system 
means moment modeller freely determine concentrate states actions 
cp net created graphical drawing 
shows cp net models sender wait protocol 
consists parts 
part left models sending data frames part right models reception frames 
explain fig 
great detail sections introduce basic constructs cp nets 
places 
states cp net represented means places drawn ellipses circles 
sender modelled different places 
convention write names places inside ellipses 
names formal meaning huge practical importance readability cp net just mnemonic names traditional programming 
similar applies graphical appearance places line thickness size colour font position waiting dataframe kristensen practitioner guide coloured petri nets dframe timeout dframe dframe dframe packets send accept send dataframe transmitdata software tools techn ology tr 
packets sn sending dataframe dframe dataframe dframe frame important keep mind places contrast example transition systems directly describe possible states cp net 
state cp net called marking places cp net 
explain concept markings paragraph 
place send top left models data packet buffer containing data packets sender transmit receiver 
places transmitdata receiveack bottom model frame buffers sender communication channel 
place middle models internal status sender keep track sequence number data packet sent indicate received data packet currently transmitted 
places sending waiting model possible positions control flow sender sender just start sending data frame sender waiting having sent data frame 
types 
place associated type colour set determining kind data place may contain 
convention type place written italics lower left right place 
types similar types programming language 
types arbitrarily complex record field real text string third list integers 
shows type definitions wait protocol 
different types model sender 
place send type 
type defined list packets representing possible contents packet buffer modelled place send 
thetype packet defined string denoting set text strings 
sn acked sn notacked rn sn acked rn acked sn status sn status sn notacked fig 

sender wait protocol receive ackframe receiveack data packets color packet string color list packet ackframe rn frame status sequence numbers color seq int color status acked notacked color product seq status data frames color dataframe product seq packet color ackframe seq color frame union dataframe dataframe ackframe ackframe fig 

type colour set definitions type place 
type defined product pair types seq status 
defined int integers status defined enumeration type containing possible values acked notacked 
type contains pairs component integer denoting sequence number second component acked notacked indicating received data packet currently sent 
places sending waiting type data frame defined product sequence numbers packets 
places transmitdata receiveack type frame defined union type dataframe type ackframe 
simply sequence number 
kristensen practitioner guide coloured petri nets markings 
state cp net called marking number tokens positioned distributed individual places 
token carries value colour belongs type place token resides 
tokens particular place called marking place 
historical reasons refer token values token colours way refer data types colour sets 
metaphoric picture consider tokens cp net distinguishable coloured contrast low level petri nets black indistinguishable tokens 
marking place general multi set token values 
multi set similar set may appearances element 
means place may tokens token value 
example possible marking place transmitdata dataframe cp nets dataframe cpn marking contains tokens value dataframe cp nets tokens value dataframe cpn 
convention multi sets written sum symbol prime pronounced denote number appearances element 
initial marking 
cp net distinguished marking marking describe initial state system 
initial marking place convention written upper left right place 
place send initial marking consisting single token value software tools techn ology tr 
list packets 
place initially contains single token value acked denoting packet sent assigned sequence number received previous data packet initially previous packet 
initially sender state waiting indicated initial marking place waiting 
initially remaining places contain tokens 
specification initial marking convention omitted places 
modelling actions transitions 
actions cp net represented means transitions drawn rectangles 
places write name transitions inside rectangles 
sender consists transitions 
transition accept models action taken data packet accepted transmission 
transition models sending data frame models reception frame 
timeout model occurrence timeout data frame retransmitted 
arcs arc expressions 
transitions places connected arcs 
actions cp net consist occurrences transitions 
occurrence transition removes tokens places connected incoming arcs input places adds tokens places connected outgoing arcs output places changing marking state cp net 
referred token game 
example transition accept incoming arcs outgoing arcs 
occurrence transition remove tokens places waiting send add tokens places sending send 
exact number tokens added removed occurrence transition data values determined arc expressions positioned arcs 
determine values tokens removed added explained subsection 
double arc dashed arc timeout shorthand opposite directed arcs identical arc expressions 
see section action cp net consists general transitions occurring concurrently 
dynamic behaviour describe dynamic behaviour operational semantic cp nets 
conditions transitions may occur effect occurrence transition marking cp net 
variables bindings 
talk occurrence transition need assign bind data values free variables occurring arc expressions surrounding arcs transition 
impossible evaluate arc expressions 
transition accept variables type packet packets type sn type seq type dataframe 
variable declarations specifying variables types shown fig 

variables assigned data values belonging type variable 
data packets var packet var packets status sequence numbers var sn rn seq var status status var dframe dataframe fig 

variable declarations wait protocol assume assign data values variables transition accept creating binding listed fig 
read bound 
kristensen practitioner guide coloured petri nets software packets tools techn ology tr 
sn dframe fig 

binding transition accept shows surrounding arc accept multi set tokens resulting evaluating corresponding arc expressions binding listed fig 

case multi sets contain single token 
arc expressions result straightforward 
exception arc expression packets incoming arc send 
infix operator basic list constructor 
means result evaluating expression packets binding fig 
list obtained inserting value software bound atthe front list bound packets 
shows initial marking places surrounding transition accept 
marking place indicated place 
number tokens place shown small circle detailed token values indicated dashed box small circle 
binding transition written form vn dn vi variable di value assigned vi 
example binding fig 
written software sn dframe packets tools techn ology tr 
addition arc expressions possible attach boolean expression variables transition 
boolean expression called guard 
specifies accept bindings boolean expression evaluates true 
transitions sender uses guard 
enabling 
order transition enabled marking ready occur possible bind dataframe waiting send sending software tools techn ology tr 
tools techn software tools techn ology tr ology tr 
packets packets dframe accept acked acked sn acked sn notacked notacked software sn dataframe fig 

evaluation arc expressions accept assign data values variables appearing surrounding arc expressions guard transition arc expressions evaluate tokens corresponding input place guard satisfied 
tells occurrence transition accept binding fig 
removes token value place waiting token value software tools techn ology tr 
place send token value acked place 
binding accept enabled initial marking tokens arc expressions evaluate corresponding input places 
obviously bindings may try transition accept initial marking 
enabled initial marking 
seen follows 
place send token 
need bind head list packets tail list 
place contains single token value acked 
need bind sn 
place waiting contains single token value need bind dframe value 
enabled binding uniquely determined tokens residing input places 
possible bindings data values variables transition correspond possible ways transition occur 
demonstrated subset general enabled marking 
occurrence 
occurrence transition enabled binding removes tokens input places adds tokens output places transition 
values tokens removed input place determined evaluating arc expression corresponding input arc similarly values tokens added output place determined evaluating arc expression corresponding output arc see fig 

shows marking surrounding places transition accept resulting occurrence dataframe waiting dframe packets send accept tools techn ology tr 
packets sn sn acked sn notacked software sending dataframe notacked fig 

marking resulting occurrence accept kristensen practitioner guide coloured petri nets transition initial marking enabled binding listed fig 

occurrence transition accept effect data packet head list residing place send removed 
status sender modelled updated token residing indicates received notacked data packet transmitted 
control flow sender changed state waiting sending removing token corresponding data frame previously transmitted place waiting adding token place sending corresponding newly constructed data frame transmitted 
briefly sum remaining parts cp net fig 

transition timeout enabled data frame currently sent waiting received status notacked data frame currently sent 
occurrence timeout changes control sender waiting sending removing data frame waiting adding place sending retransmitted 
glance may strange specify conditions retransmissions occur 
lot purposes necessary 
cp nets investigate logical functional correctness system design 
purpose sufficient describe retransmissions may appear communication channel slow 
may necessary beneficial consider happens protocol able cope kinds communication channels retransmissions retransmissions frequent 
see cp nets extended time concept allows describe duration individual actions states 
permit investigate performance modelled system fast effectively operates 
give precise description retransmissions occur received inside milliseconds 
reception frames modelled 
occurrence transition removes frame place receiveack compares sequence number rn frame sequence number sn data frame currently sent 
sequence number greater sequence number data frame currently sent recall receiver sends sequence number data frame expects sequence number data packet updated status changed indicate received data frame currently sent 
accomplished construction arc puts token value description 
occurrence sequences steps 
execution described means occurrence sequence 
specifies markings reached steps occur 
seen occurrence sequence length 
consisted single step occurrence accept binding fig 
initial marking leading marking fig 

marking transition enabled binding variable dframe assigned value software 
occurrence sequence continued step corresponding occurrence binding 
leads new marking marking send receiveack remains unchanged token value dataframe software transmitdata corresponding data frame placed transmitdata buffer transmission token value software waiting 
general step may consist enabled binding elements occurring concurrently element pair consisting transition binding variables 
example consider marking sender shown fig 

marking identical marking reached occurrence accept initial marking tokens residing place receiveack token value ackframe token value ackframe 
token place indicates acknowledgment received 
marking binding elements listed enabled 

dframe software 
rn sn status acked 
rn sn status acked binding elements concurrently enabled binding element get tokens needs specified input arc expressions sharing tokens binding element 
true binding elements 
binding elements concurrently enabled get acked token 
binding elements conflict general possible transition concurrently enabled different bindings binding twice 
step marking may involve multi set binding elements 
marking resulting occurrence step consisting binding elements marking reached occurrence individual binding elements arbitrary order 
marking defined marking resulting occurrence multi set concurrently enabled binding dataframe waiting kristensen practitioner guide coloured petri nets dframe timeout send send dataframe transmitdata frame tools techn ology tr 
packets packets rn sn sn acked acked rn acked sn status accept sn notacked sn status sn software sn notacked sending dframe dataframe dframe dframe dframe dataframe dframe elements independent order individual binding elements occur 
finite occurrence sequence occurrence sequence consisting finite number markings steps 
infinite occurrence sequence occurrence sequence consisting infinite number markings steps 
infinite occurrence sequence corresponds nonterminating execution system 
hierarchical cp nets basic idea underlying hierarchical cp nets allow modeller construct large model number small cp nets fig 

small cp nets called pages 
pages related defined way explained 
similar situation programmer constructs large program means set modules 
cpn models consist pages total places transitions 
hierarchical structuring facilities model drawn single large cp net totally incomprehensible 
previous section described cpn model sender 
section describe models receiver communication channel show submodels put form model entire wait protocol 
hierarchical cp net possible relate transition surrounding arcs places separate cp net providing precise detailed description activity represented transition 
idea analogous hierarchy constructs graphical description languages data flow sadt diagrams 
respects analogous fig 

marking sender receive ackframe receiveack ackframe rn ackframe ackframe frame module concepts modern programming languages 
level want give simple description modelled activity having consider internal details carried 
level want specify detailed behaviour 
want able integrate detailed specification crude description integration done way meaningful speak behaviour combined system 
substitution transitions 
start working top manner 
describing wait protocol shown fig 

transitions sender receiver channel 
transitions marked hs tag upper left corner indicating substitution transition hs hierarchy substitution 
dashed boxes hs tags called hierarchy inscriptions define details substitutions 
hierarchy inscription specifies subpage cp net contains detailed description activity represented corresponding substitution transition 
subpage corresponding substitution transition sender named sender cp net shown fig 

receiver subpage named receiver communication channel subpage named 
return pages subsection explain receiver communication channel modelled 
port socket places 
subpage number places marked tag tag tag 
places called port places constitute interface subpage communicates surroundings 
input ports kristensen practitioner guide coloured petri nets marked tag subpage receives tokens surroundings 
analogously subpage delivers tokens surroundings output ports marked tag 
place tag input port output port time 
page sender input port receiveack output port transmitdata input output port send 
substitution transition sender fig 
input place receiveack output place transmitdata input output place send 
places called socket places 
precisely receiveack input socket sender transition transmitdata output socket send input output socket 
specify relationship substitution transition subpage describe port places subpage related socket places substitution transition 
achieved providing port assignment sender subpage relate input port receiveack fig 
input socket receiveack fig 

analogously output port transmitdata fig 
related output socket transmitdata fig 
input output port send input output socket send 
port place assigned socket place places identical 
port place socket place just different representations single conceptual place 
specifically means port socket places identical markings 
input socket receives token surroundings substitution transition token available input port subpage token transitions subpage 
analogously subpage may produce tokens output port 
tokens available corresponding output socket surroundings substitution transition 
communication channel 
consider communication channel 
communication channel required unreliable bidirectional communication channel 
bottom manner modelling unreliable unidirectional channel compose unidirectional channels form bidirectional channel 
cp net modelling unidirectional channel shown fig 

consists places incoming outgoing single transition transmit 
input port place incoming models incoming traffic transmitted channel 
output port place outgoing models outgoing traffic transmitted successfully channel 
places incoming frame frame transmit success frame empty fig 

unidirectional channel outgoing frame type frame channel transmitting frames 
occurrence transition transmit removes frame place incoming 
depending binding boolean variable success may true false frame put place outgoing corresponding successful transmission frame put place outgoing corresponding loss frame 
constant empty denotes empty multi set tokens 
cp net modelling unreliable bidirectional communication channel shown fig 

substitution transitions 
models traffic sender receiver direction 
models traffic receiver direction 
substitution transitions cp net modelling unidirectional channel subpage 
means reused cp net unidirectional channel 
execution cp net separate page instances cp net modelling unidirectional channel instance corresponding data channel corresponding channel 
page instances marking totally independent marking page instances similar way procedure calls having private copies local variables 
frame frame hs hs fig 

bidirectional channel frame frame port assignment socket places fig 
expect 
input socket places incoming data assigned port place incoming fig 

output socket places assigned port place outgoing fig 

cp net modelling bidirectional channel subpage substitution transition communication channel fig 

worth observing places fig 
sockets respect substitution transition port places respect substitution transition communication channel 
similar applies 
receiver 
depicts cpn model receiver 
right hand side models reception data kristensen practitioner guide coloured petri nets send ackframe ackframe rn frame frames left hand side models sending 
place middle similar place sender page 
keep track state receiver 
specifies sequence number data frame expected indicates sent received data frame 
initially receiver expects data frame sequence number previous data frame acknowledged initially data frame 
specified initial marking acked place 
place received models data packet buffer receiver side 
initially buffer empty indicated initial marking denoting empty list 
port places similarly named places sender side model frame buffers receiver communication channel 
transition models receipt data frames 
data frame received removed place sequence number sn compared sequence number rn data frame receiver expects 
sequence numbers match rn sn packet appended list residing place received sequence number data frame expected incremented 
case state receiver updated notacked 
transition models sending frames 
internal state receiver notacked frame sequence number rn put place andthe internal state receiver updated acked indicating sent 
received rn acked acked rn status receive rn notacked receive sn rn dataframe rn rn notacked fig 

receiver wait protocol packets sn rn packets packets dataframe sn frame fusion places 
hierarchical cp nets additionally offer concept known fusion places 
allows modeller specify set places considered identical represent single conceptual place drawn number individual places 
token added removed places identical token added removed places fusion set 
description easy see relationship members fusion set respects similar relationship places assigned port assignment 
members fusion set belong single page page page instance place fusion drawing convenience allows user avoid crossing arcs 
things interesting members fusion set belong different page page instances 
case fusion sets allow user specify behaviour difficult describe fusion 
different kinds fusion sets global fusion sets members different pages page fusion sets instance fusion sets members single page 
difference 
page fusion unifies instances places independently page instance appear means fusion set resulting place shared instances corresponding page 
contrast instance fusion set identifies place instances belong page instance means fusion set resulting place page instance 
semantics global fusion set analogous kristensen practitioner guide coloured petri nets page fusion set sense resulting place common instances participating pages 
obtain benefits modular design analysis global fusion sets sparingly 
protocol example levels page hierarchy 
practice different hierarchical levels 
saw page modelling bidirectional channel subpage may contain substitution transitions 
page transitions substitution transitions activities described full detail activities described coarser way deferring detailed description subpage 
shown hierarchical cp net behaviourally equivalent non hierarchical cp net 
obtain non hierarchical net simply replace substitution transition surrounding arcs copy subpage glueing port place socket place assigned 
noted substitution transitions enabled occur 
substitution transitions macro mechanism 
allow conceptually inserted position substitution transitions doing explicit insertion model 
fig 
provided arc expressions arcs surround substitution transitions 
unnecessary substitution transitions enabled occur 
useful giving reader model impression functionality subpage 
important notice hierarchical constructs guarantee formal relationship terms behavioural equivalence arc expressions arcs surrounding substitution transition behaviour corresponding subpage 
means hier graphical user interface visualisation queries visualisation interactive simulation editing design oa cpn state space tool cpn simulator cpn editor fig 

architectural overview design cpn concepts cp nets offers abstraction syntactic semantic level 
overview design cpn tool section give overview design cpn tool describing main components general way apply tool 
architecture design cpn tool shown fig 

design cpn consists main components graphical user interface gui cpn ml 
components span tightly integrated tools constitute design cpn cpn editor simulator state space tool 
gui graphical front user interacts 
built top general graphical package design oa 
cpn ml part implements cpn ml language programming language declarations variables declaration types net inscriptions arc expressions guards cp nets 
figures previous section examples type variable declarations written cpn ml 
cp nets previous sections give number examples arc expressions written cpn ml 
addition cpn ml language cpn ml component implements simulation engine central algorithms data structures generation state spaces 
means cpn ml component responsible calculation enabled binding elements encountered markings cpn model 
cpn ml built top standard ml sml language 
cpn ml language sml language extended syntactical sugar simplify declaration types variables fact inscription language sml advantages 
expressiveness sml inherited de cpn ml model checking state space generation compilation state space code simulation compilation simulation code syntax check standard ml kristensen practitioner guide coloured petri nets sign cpn 
second sml strongly typed allowing modelling errors caught early 
third virtue polymorphism overloading definition infix operators sml allow net inscriptions written natural mathematical syntax 
sml documented tested maintained 
choice sml turned successful design decisions design cpn 
proven advantageous build design cpn design oa sml available different platforms platform dependency isolated building blocks tool 
inscriptions cp net arc expressions guards purely functional part sml language 
consistent operational semantics cp nets described sect 

sense example evaluation guard transition impact marking places 
usual working style applying tool start editor constructing cpn model system consideration 
hierarchical cp net previous section fig 
modelling wait protocol example cpn diagram constructed cpn editor 
figures previous section screen dumps editor 
user works directly graphical representation cpn model 
order able simulate cpn model constitute syntactical type correct cp net 
reported syntax type errors corrected user switch cpn simulator 
switch cpn simulator generates code necessary simulation cpn model 
syntax check compilation handled cpn ml part editor 
cpn editor described detail sect 

code simulation compiled user ready start investigating behaviour system means simulations 
simulations typically characteristics single step debugging token game observed great detail user chooses binding elements occur 
simulations markings places shown directly cpn diagram similar fig 

simulations typically reveal shortcomings errors cpn model resolved 
phase normally consists number iterations switching back forth editor simulator gradually refining improving cpn model 
simulation execution cpn model driven simulator engine cpn ml 
uses simulator part gui visualisation token game 
cpn simulator considered detail sect 

usually phase lengthy simulations conduct elaborate validation design cpn model 
lengthy simulations visualisation token game typically replaced higher way visualising behaviour system 
examples include business charts message sequence charts msc various kinds graphics specific application domain 
libraries visualisation considered sect 

case purpose creating cpn model performance analysis cpn simulator configured collect data lengthy simulations 
collected data post processing phase key figures performance system obtained 
time concept cp nets support simulation performance analysis described sect 

possible phase apply state space tool verify validate functional correctness system 
order apply cpn state space tool user switches cpn simulator cpn state space tool 
switch similar editor simulator consists compilation necessary internal data structures working state space tool 
compilation handled simulator part cpn ml 
phase applying state space tool typically consists making cpn model tractable state space analysis 
step generate state space part 
generation handled cpn ml part state space tool 
user queries behaviour system available query languages 
queries written formulas state action oriented variant temporal logic ctl number available search traversal functions 
answers queries calculated model checker cpn ml part state space tool 
uses gui visualising information state space displaying results queries 
state space method cpn state space tool considered detail sect 

gui cpn ml run separate communicating processes 
communication processes needed order transform graphical representation gui internal representations cpn ml vice versa 
having gui cpn ml separate processes advantages 
main advantage comes fact cpn ml handles syntax check code generation simulation state space generation parts require bulk computational resources terms memory speed 
gui modest requirements respect computational resources 
parts separate communicating processes gui run small workstation cpn ml run background powerful workstation 
industrial projects design cpn tool applied workstation equipped mb internal memory speed equivalent sun ultra sparc kristensen practitioner guide coloured petri nets suitable running cpn ml part 
state space tool requires additional computational resources terms memory 
cpn editor supports construction editing syntax check cpn diagrams 
section describe basic functionality editor 
working hierarchical cpn models typical industrial applications cpn diagram consists pages varying complexity 
modeller find suitable way divide model pages 
modeller find suitable balance declarations net inscriptions net structure places transitions arcs 
hierarchy page 
editor provides overview pages cpn model interrelationship automatically creating maintaining socalled hierarchy page similar project browsers conventional programming environments 
hierarchy page wait protocol shown fig 

hierarchy page page node page 
arc page nodes indicates subpage source page contains substitution transition uses destination page subpage 
page node inscribed text specifies page name page number 
analogously arc text specifies name substitution transition question 
example page node represents page shown fig 

page node outgoing arcs corresponding substitution transitions sender receiver channel 
arcs leads page nodes representing pages sender shown fig 
receiver shown fig 
shown fig 
respectively 
page node representing page declarations sender sender communication channel prime receiver receiver fig 

hierarchy page wait protocol outgoing arc leading page node representing page shown fig 

arc corresponds substitution transitions 
user double clicks page node corresponding page opened displayed user start editing page 
double click substitution transition similarly opens puts corresponding subpage front 
page small prime tag 
indicates prime page page level 
cpn model page instance prime page 
substitution transition prime page get page instance corresponding subpage 
page instances substitution transitions get page instances reach bottom page hierarchy required acyclic 
cpn model wait protocol page instances 
pages instance instances substitution transitions page 
cpn model page named declarations 
page contains global declaration node 
global declaration node contains declarations types constants functions variables net inscriptions cpn model 
wait protocol global declaration node contains type variable declaration shown figs 

move subpage 
editor easy add new rearrange page hierarchy ways 
page gets places transitions move new subpage 
done single editor operation 
user selects nodes moved invokes move subpage command 
editor checks legality selection form subnet bounded transitions creates new page moves subnet new page creates port places copying places adjacent selected subnet calculates port types creates corresponding port tags constructs necessary arcs port nodes selected subnet prompts user create new transition substitution transition new subpage draws arcs surrounding new transition creates hierarchy inscription new transition updates page hierarchy 
may seen lot complex checks calculations manipulations involved move subpage command 
automatically performed editor 
user selects subnet invokes command creates new kristensen practitioner guide coloured petri nets substitution transition 
rest done editor 
course possible editor recognises cpn diagram hierarchical just mathematical graph set unrelated objects 
property user means ordinary editing operations copying moving creating necessary objects 
possible slower error prone 
creating substitution transitions 
editor command turns existing transition substitution transition relating existing page 
done editor 
user selects transition invokes command 
editor hierarchy page active prompts user select desired subpage mouse moved page node blinks illegal selecting page hierarchy cyclic waits blinking page node selected tries deduce port assignment means set rules looks port socket names port socket types creates hierarchy inscription name number subpage parts port assignment automatically deduced updates page hierarchy 
replace subpage 
editor command replaces substitution transition entire content subpage 
operation involves lot complex calculations manipulations done editor 
user simply selects substitution transition invokes command uses simple dialogue box specify details operation subpage shall deleted substitution transition uses 
hierarchy commands described invoked order 
user top approach typically start creating page transition represents complex activity 
subpage created activity 
easiest way move subpage command 
subpage automatically gets correct port places correct interface substitution transition 
new modified adding places transitions may detailed additional levels added 
done exactly way level created 
flexible graphics order able create easily readable cpn models design cpn supports wide variety graphical formatting parameters shapes shading borders underlying formal cpn model cpn ml fig 
unaffected graphical appearance 
example object created place remains place forever independent graphical changes 
flexible graphics design cpn accompanied sensible defaults default shape place ellipse 
illustrates flexible graphics 
main flow sender accept timeout sending 
indicated thick border places transitions thick arcs 
places modelling buffers variables sender thin border 
arcs modelling access variables buffers thin dashed 
user modify default settings graphical appearance objects system defaults diagram defaults 
scope diagram defaults single diagram 
user sets diagram defaults specific object type places places created diagram created diagram default 
system defaults diagrams determine initial diagram defaults new cpn diagrams 
system defaults easy user certain style cpn diagrams created 
diagram defaults simple user modify cpn diagram created user ensure graphical appearance modified added objects consistent rest original part cpn diagram 
syntax type checking editor syntax directed enforcing number built syntax restrictions 
prevents user making certain errors construction model 
example impossible draw arc transitions places 
impossible catch errors efficiently way 
syntax type checker invoked user wants ensure created model constitutes legal cp net 
example syntax error missing type place 
example type error arc expression type different type place connected arc errors reported time syntax check 
reporting errors hypertext facility 
illustrate explaining syntax errors page sender shown fig 
reported 
hierarchy page fig 
error box appear 
error box contain text stating error page sender hypertext link pointing page 
link open page sender select error box description problem form error message 
part message hypertext link provided points object place transition error located 
kristensen practitioner guide coloured petri nets cases correcting errors involves local changes 
efficiency reasons syntax type check incremental 
means modified part model checked entire model 
example assume modules cpn model depicted fig 
syntax checked 
syntax error regarding say transition accept page sender fixed transition surrounding arcs places modules 
textual interchange format cpn diagrams hierarchical cp nets imported exported textual format 
gives example textual format supported design cpn 
shows transition transmit page fig 
represented textual format 
transition transmit represented trans block 
tags attributes inside block give information name transition graphical appearance 
textual format gives information cp net transition places arcs net inscriptions graphical layout cp net 
textual format sgml standard generalised markup language number markup languages html hypertext markup language 
reason textual format shown fig 
looks similar html 
textual format developed emphasis conforming committee draft forthcoming standard high level petri nets 
trans id id text transmit text type solid thick colour black pattern colour black box font helvetica size just centered colour black bold false italic false false outline false shadow false condense false extend false true trans fig 

example textual interchange format simulation cpn models cpn simulator supports execution cpn models 
provides fundamental modes simulation suitable different purposes explained 
interactive simulation individual parts cp net constructed investigated debugged means cpn simulator just programmer tests new parts program 
early phases modelling process user typically wants detailed investigation behaviour individual transitions small parts model 
purpose simulator offers interactive mode 
user full control sets breakpoints chooses enabled binding elements changes markings places studies token game detail 
mode similar single step debugging ordinary programming language 
purpose see individual net components expected 
interactive simulations nature slow human investigate markings minute 
indicated modeller able inspect details markings reached 
user see set enabled transitions select binding elements occur 
fig 
screen dump interactive simulation wait protocol depicted 
shows marking sender page 
current marking indicated number tokens place contained small circle place 
absence circle indicates place tokens 
data values tokens shown box dashed border positioned circle 
desired user hide box data values irrelevant big print 
transition accept displayed thick border indicate enabled current marking 
usually enabled transitions markings places displayed different colours 
significantly improves readability compared black white variant shown fig 

interactive simulations supported different variants 
instance possible specify token game certain parts cpn model observed possible control amount graphical feedback step 
interactive simulations require model complete user start investigating behaviour parts model directly apply insight gained ongoing design activities 
model gradually refined crude description detailed 
automatic simulation modelling process focus shifts individual transitions behaviour full model 
automatic mode simulator suitable 
case simulator random choices means random number generator enabled binding elements 
way possible obtain faster simulations 
achieved dframe kristensen practitioner guide coloured petri nets timeout dframe dframe waiting dframe dataframe software packets send accept sending packets sn dframe send dataframe transmitdata tools techn ology tr 
dataframe dataframe dframe frame large models enabling occurrence rules petri nets local 
means transition occurred enabling nearest transitions needs recalculated number steps second independent size model 
totally automatic simulation executed speed steps second depending nature cpn model power computer cpn simulator runs 
user control automatic simulations means options 
options possible instance give upper limit number steps simulation run 
automatic simulation current marking enabled transitions displayed described interactive mode 
token game displayed automatic simulations 
course typically constitutes information desired 
straightforward possibility obtain information happened simulation report 
textual file containing detailed information bindings transitions occurred 
shows simulation report steps automatic simulation wait protocol 
step number indicates binding transition executed automatic mode 
information sign specifies page instance part cp net occurring transition belongs 
step binding transition occurs shown 
example step corresponds occurrence transition sn acked sn notacked acked sn notacked fig 

snapshot interactive simulation rn sn rn acked sn status sn status receive ackframe receiveack ackframe rn frame accept sender dframe software packets tools techn ology tr 
sn send sender dframe software transmit frame dataframe software success false timeout sender dframe software sn send sender dframe software timeout sender dframe software sn transmit frame dataframe software success false send sender dframe software fig 

partial sample simulation report transmit second instance page binding corresponding data frame lost 
code segments possible attach piece sequential cpn ml code individual transitions called code segments 
kristensen practitioner guide coloured petri nets transition occurs corresponding code segment executed 
example may read write text files update graphics calculate values bound variables transition 
way code segments provide convenient interface cpn model environment file system 
describe visualisation sect 
performance analysis sect 
give number examples code segments 
integration editor simulation results desire modify model 
modifications immediately possible minor changes remaining simulator edit arc expression 
modifications require involved regeneration simulator code supported editor impossible add change type simulator 
design cpn editor simulator closely integrated 
easy fast go simulator back editor fix problem re enter simulator resume simulation 
visualisation cpn models graphical feedback interactive simulations simulation report automatic simulations situations detailed level obtaining interpreting results simulations 
overcome problem design cpn tool includes libraries visualisation 
visualisation driven cpn simulator possible create update various kinds graphics simulation 
reasons visualising behaviour system lengthy simulations beneficial 
obtain condensed overview lengthy simulation 
extracting key activities representing graphical way simulation results easily interpreted 
see cpn model behaves expected 
see discrepancies appear 
interactive simulations simulation report closer investigation situations 
furthermore visualisation able hide cp nets obtain graphical feedback simulations specific application domain 
possible discuss design ideas results simulations colleagues people knowledge application domain unfamiliar cp nets 
section consider kinds graphical feedback simulations line bar charts message sequence charts application specific graphics 
libraries examples standard libraries 
possible user due open architecture design cpn tailor libraries specific domains create new visualisation libraries top cpn simulator 
visualisation handled code segments associated transitions discussed sect 

typically user provide lines straightforward cpn ml code code segments 
important notice behaviour cpn model way affected additional graphical visualisation new visualisations added independently means feedback 
line bar charts wait protocol may charts shown figs 

chart fig 
line chart showing fast individual data packets successfully received function step number 
line chart see data packet received approximately steps second approximately steps third approximately steps 
line chart updated time new packet successfully received 
done lines code code segment 
chart fig 
bar chart 
tells times data frames sent result 
bar chart see data frame sequence number sent times 
data packet data packets received step fig 

line chart reception data frames fig 

bar chart transmission data frames kristensen practitioner guide coloured petri nets fig 

bar chart transmission frames lost received failures order successfully received 
analogously see data frame sequence number sent times data frame number sent times 
see data frame number sent twice en route places transmitdata 
chart fig 
similar chart fig 
shows progress frames 
bar charts updated periodically intervals specified modeller steps 
charts give lot valuable information behaviour protocol 
example straightforward see failures overtaking cause retransmissions lost packets 
easy see need steps transmit packets successfully perfect com send sender accept software send dataframe software timeout software send dataframe accept tools software timeout software send dataframe software receive ackframe communication channel transmit software transmit software transmit software transmit ackframe receive dataframe software send ackframe receive dataframe software fig 

msc wait protocol munication channels overtaking possible steps 
message sequence charts message sequence charts mscs known event traces message flow diagrams time sequence diagrams widely formalism specifying examples normal exceptional executions system designed 
design cpn tool mscs capture single simulation run providing graphical overview execution system 
exact information contained mscs determined user 
wait protocol msc may appear shown fig 

vertical lines mscs typically represent processes components system 
small squares vertical lines horizontal arrows vertical lines typically describe 
occurrence accept transition shown horizontal arrow second vertical line 
arrow labelled data packet accepted transmission sequence number assigned data packet 
analogously occurrence transition shown horizontal arrow second third vertical lines 
successful occurrence transmit data frame indicated horizontal arrow third fourth vertical lines 
data frame lost get small square third line 
similarly occurrence transition timeout results small square second line 
receiver receive software received kristensen practitioner guide coloured petri nets occurrence indicated horizontal arrow fourth fifth vertical line 
furthermore data frame received expected horizontal arrow created fifth sixth vertical line 
occurrence transition indicated arrow fifth fourth vertical line 
arrow labelled sequence number corresponding frame 
occurrences transmit frames indicated similar way occurrences transmit data frames arrows drawn right left square dots positioned fourth vertical line 
occurrences indicated arrow third second vertical line label corresponding sequence number 
numbers outermost right msc correspond step numbers simulation 
fig 
arrow square step simulation 
means msc contains information simulation report 
common record key activities transmission data frames frames 
creating mscs code segments attached transitions cpn model 
shows code segment transition accept 
msc graphics message sequence chart col dataframe function providing string representation cpn ml value sn 
function msc message primitives provided msc library creating horizontal arrow vertical lines msc record argument 
entries sender receiver specify source destination horizontal arrow created 
case arrow drawn vertical line identified send second vertical line identified sender 
arrow labelled transition name accept andthe occuring binding element 
code segments transitions similar 
input sn action msc message annotation step label accept newline col dataframe sn newline sender send receiver sender fig 

code segment transition accept application specific graphics line bar message sequence charts previous sections characterised standard ways creating graphical feedback 
advantageous create graphical feedback simulations concepts objects specific application domain 
mimic cpn library supports application specific graphics 
library possible interact graphical feedback way highlevel way control provide input simulation 
wait protocol really simple illustrate power application specific graphics 
illustrate cp nets application specific graphics applied project deutsche telekom design services intelligent networks 
intelligent networks extends conventional telecommunication networks ability collect compute information addition conventional transmission switching functions 
ability collect compute information referred network intelligence 
example services card calling services premium rate services 
illustrates main components architecture 
basic idea separate classical switching transport functionality service logic functionality 
service switching point ssp represents physical local telephone exchanges service control points scp represent network nodes containing service logic 
nodes local exchanges controlled remotely socalled signalling system network ss 
local exchange contains call control function ccf represents functionality contained local exchange prepared handling calls 
service switching function ssf enhances local exchange capability handling calls possible communicate service logic contained scp 
scp consists parts service control function scf contains service logic service data function sdf containing database 
goal separating service logic basic switching transport functionality possible introduce new services having modify local exchanges 
aim project ssp ssf ccf signalling scp sdf scf signalling network ss transport scp service control point ssp service switching point scf service control function sdf service data function ssf service switching point ccf call control function ssp ccf ssf fig 

intelligent network architecture kristensen practitioner guide coloured petri nets deutsche telekom investigate basic call processing augmented allow 
investigate cpn model architecture constructed 
cpn model consisted pages 
cpn model contained representation users network service logic basic call processing 
provide input control simulations cpn model augmented application specific graphics shown fig 

application specific graphics represent small consisting service control point scp connected service switching points phones attached 
having started simulation user select graphical objects 
depending state system different kinds interaction possible 
phone hook possible select phone result changing state hook phone upper left 
state user select phone receiver 
selecting receiver corresponds hook operation 
selecting phone prompt user digits corresponding phone number 
shows graphics state phones active established connection 
case user choose hang active phones lift receiver passive phones 
seen visualisation controlling simulation testing different scenarios allows users unfamiliar cp net understand behaviour system 
scp ssp ssp fig 

example application specific graphics application specific graphics record replay facility 
possible record input provided user replay inputs having modifications underlying cpn model 
way possible create set standard scenarios cases testing system consideration 
performance analysis section introduces time concept cp nets explains conduct simulation performance analysis systems 
proceed time concept supported design cpn tool construct timed cpn model wait protocol 
analyse performance wait protocol terms throughput delay usage channel bandwidth buffer space 
timed cp nets time concept cp nets global clock 
clock values represent model time may integers discrete reals continuous 
addition token value allow token carry time value called time stamp 
intuitively time stamp describes earliest model time token removed occurrence binding element 
timed cp net binding element said colour enabled satisfies enabling rule untimed cp nets required tokens input places guard evaluates true 
enabled binding element ready 
means time stamps tokens removed equal current model time 
shows timed cp net sender wait protocol 
net structure untimed cp net fig 

net inscriptions type declarations shown fig 
modified addition timing constructs explained detail 
data packets color string string color time color packet product string timed color list packet status sequence numbers color seq int timed color status acked notacked color product seq status data frames color dataframe product seq packet color ackframe seq color frame union dataframe dataframe ackframe ackframe fig 

timed type definitions type definitions seen type packet modified product string arrival time 
calculate delay kristensen practitioner guide coloured petri nets dataframe waiting dframe ignore timeout dframe dframe dframe packets send accept packets sn sending dataframe dframe send dataframe transmitdata frame sn acked sn notacked dataframe dframe data packets 
types packet seq timed 
convention structured types packet buffer dataframe ackframe timed contain component packet seq timed 
means corresponding tokens carry time stamps 
marking places timed type timed multi set token values 
timed multi set similar multi set element multi set carries time stamp 
example possible marking place transmitdata dataframe cp nets dataframe cpn marking contains tokens value dataframe cp nets time stamps 
tokens value dataframe cpn time stamp time stamp time stamp 
similar ordinary untimed multi sets timed multi sets written sum symbol prime pronounced denote number appearances element 
sign usually read list symbol specify time stamps 
wait protocol integer clock starting zero 
time stamps initial marking equal zero 
model activity operation takes time units corresponding transition create time stamps output tokens time units larger clock value transition occurs 
implies tokens produced unavailable time units 
sn notacked fig 

timed sender wait protocol rn sn rn acked sn status sn status receive ackframe receiveack ackframe rn frame argued natural delay creation output tokens come existence time units occurrence transition begun 
approach mean timed cp net get intermediate markings correspond markings corresponding untimed cp net markings input tokens removed output tokens generated 
get complex relationship behaviour timed untimed cp nets 
timed cp net require step consists binding elements colour enabled ready 
consequence possible occurrence sequences timed cp net form subset possible occurrence sequences corresponding untimed cp net 
means defined easy understand relationship behaviour timed cp net behaviour corresponding untimed cp net 
execution timed cp net time driven works way similar event queues languages discrete event simulation 
system remains model time long colour enabled binding elements ready execution 
binding elements executed current model time system advances clock model time binding elements executed 
marking exists closed interval model time may point single moment 
take closer look transitions sender 
transition accept time inscription 
intuitively time inscription describes time corresponding operation takes 
time inscription kristensen practitioner guide coloured petri nets specifies tokens created sending send accept occurs get time stamps time units larger time transition occurs 
example transition accept occurs initial marking time get marking indicated fig 

marking transition enabled time time stamp token place sending transition colour enabled order transition ready model time increased 
model time transition enabled 
system initial marking state zero time units marking resulting occurrence accept initial marking time units 
dataframe waiting dframe ignore packets send accept sn tools techn ology tr 
packets sn acked sn notacked software sending dataframe notacked fig 

marking resulting occurrence accept consider remaining time inscriptions 
transition time inscription transition accept 
transition time inscription put directly transition associated arc expressions outgoing arcs 
arc expression arc transmitdata time inscription specifies tokens put place time stamp time units larger current model time 
arc expression arc waiting 
constant specify time elapse data frame retransmitted 
assigning token put place waiting time stamp time units higher current model time retransmission data frame happen time units 
time inscription arc waiting accept ignore 
means enabling rule accept ignores time stamp tokens waiting 
occurrence transition accept remove token place waiting time stamp higher current model time 
allows disable retransmission timer immediately frame arrives data frame currently sending 
consider communication channel modelled timed cpn model 
untimed cpn model communication channel unreliability communication channel modelled possible outcomes transmission frame lost successfully transmitted chance 
extend model way probabilities need equal take account transmission time frame 
achieved modified cpn model unidirectional communication channel shown fig 
declarations shown fig 

incoming frame frame transmit sp hun success frame empty fig 

timed unidirectional channel outgoing frame code segment transmit input output success action ran hun place sp success probability added 
marking place specify probability successful transmission 
code segment see sect 
calculate binding variable success 
types hun hun contain integers intervals respectively 
ran hun draws element uniformly random hun 
integer smaller value bound success bound true 
case initial marking sp specifying probability successful transmission 
transmission time channel specified time inscription 
user defined function returning random element normal distribution mean deviation 
implies duration transmission varies random distribution 
cpn simulator offers number standard statistical functions specifying types delays uniform exponential poisson 
receiver timed cpn model identical receiver untimed cpn model delay time units assigned transitions 
color bool bool var success bool color hun int 
var hun color hun int 
declare ran fun fig 

declarations communication channel kristensen practitioner guide coloured petri nets general time delays may complex described may depend binding question values input output tokens 
workload traffic analysing performance system mechanism needed generate workload traffic input evaluating performance system 
case wait protocol workload data packets protocol transmission 
number techniques applied generating workload 
technique cp net part cpn model responsible generating workload random distribution 
cases workload may available text file server access log file read cpn model 
third technique combination separate cpn model created generates workload writes text file 
text file input actual cpn model 
specifying workload file read model referred trace driven simulation 
beneficial reproducibility needed instance comparing performance different system designs 
wait protocol add relatively simple cp net shown fig 
cpn model 
place send related port assignments place send page modelling sender 
corresponds data packet buffer sender 
place integer type int counter enumerate data packets 
constant specify interval arrival data packets 
transition occurs new data packet put buffer 
contents data packet pair element specifies arrival time packet second element specifies packet number 
arrival time time packet generated time occurs 
determined function time returns current model time 
packet number determined data value token place 
occurs value incremented time stamp higher current model time 
ensures data packet arrive time units 
arrival time recorded data packet calculate delay data packet 
ignore time inscription arc send data packets put buffer soon arrive 
wait protocol simple workload data packets arrive transmission fixed input rate 
packets ignore int generate packet packets time packet send fig 

workload generator data collection processing simulation performance analysis typically consists making number lengthy simulations 
simple collect data simulations cpn simulator implements number high level primitives data structures data collection 
collected data stored data structures called data collections 
data collections offer addition serving storage collected data operations computing average standard deviation minimum maximum observed values 
key figures written performance report provides quick summary observed values performance system 
observed values written observation log file serve basis processing collected data spreadsheet visualisation graphical tool 
collect data minor modifications needed cpn model 
wait protocol modify packet type adding arrival time compute delay data packet 
data collected depend performance measures interest 
wait protocol foremost interested throughput delay 
analysing throughput consider interarrival time time elapses successive deliveries data packets received buffer 
delay time data packet put send buffer sending side delivered received buffer receiver side 
transition occurs data packet expect data packet written received buffer collect observe time elapsed delivery data packet time elapsed data packet put send buffer 
depicts transmission delays data packets simulation corresponding time units retransmission interval time units workload corresponding data packets arriving kristensen practitioner guide coloured petri nets interval time units 
depicts interarrival times packets 
figures created reading observation log files gnuplot tool 
table shows part performance report containing key numbers observed values throughput delay 
observations corresponding arrival data packets 
average interarrival time time time units average delay time units 
std denotes standard deviation average deviation average value 
observed minimal maximal interarrival time data packets time units respectively 
similarly minimal maximal delay experienced time units respectively 
wait protocol interested getting information usage buffer space 
want avoid frames accumulating frame buffers sender receiver side 
want avoid backlog data packets accumulating send buffer 
instance happen delay interarrival time time fig 

packet transmission delay time fig 

interarrival time time table 
transmission interarrival time updates average std min 
max 
time delay arrival rate data packets exceeds capacity protocol 
order analyse buffer usage observe step simulation number tokens transmitdata receiveack places length list place send 
key figures observed values simulation time units shown table 
send row corresponds observation length list place send row corresponds observation number tokens place receiver 
corresponds observation number tokens place receiver 
similarly receiveack transmitdata rows correspond accordingly named places sender 
table 
analysis buffer contents place updates average std min 
max 
send receiveack transmitdata data collections updates corresponding steps simulation 
table seen buffer space modest 
token places receiveack transmit data backlog data packets 
workload data packets arrive interval time units range capacity protocol 
buffer space analysed measure computational resources demanded communication protocol 
measure bandwidth communication channel 
bandwidth measured considering number occurrences transmit transition instances page 
figures shown table 
updates corresponding occur table 
usage network bandwidth transition updates time frequency transmit kristensen practitioner guide coloured petri nets simulation 
yields frequency average time units transmissions 
purpose performance analysis investigate scenarios 
illustrate investigate retransmission interval specified constant fig 
influences performance wait protocol 
performance protocol different values retransmission interval listed table 
time row lists average interarrival time delay row lists average delay bandwidth lists bandwidth average number occurrences transmit transition time unit 
average number tokens place receiveack sender receiver respectively 
results seen pay decrease retransmission interval approximately time units 
point gain reduction delay start increasing bandwidth buffer space 
table 
investigation retransmission parameter time delay bandwidth state space analysis explained sect 
customary debug investigate system means simulations 
simulation works similar way program testing system trivial prove verify properties behaviour system 
simulation complemented state space analysis 
basic idea state space construct directed graph node reachable marking arc occurring binding element 
state spaces called occurrence graphs reachability graphs trees 
names reflects fact state space contains possible occurrence sequences cp net names reflect state space contains reachable markings cp net 
state spaces cp nets constructed fully automatically constructed state space possible answer large set analysis verification questions concerning behaviour system 
system desired property state space method provide debug information form counter examples 
counter examples typically node path subset state space demonstrating desired property hold 
expressive power cp nets inherited place transition nets sml language implies essentially interesting verification questions concerning cp nets undecidable see 
practice cp nets finite state space making verification possible 
addition possible prove disprove properties system relying partial state spaces finite subgraphs full state space 
focus emphasis section state space analysis seen point view user cpn state space tool algorithmic implementation issues 
reader interested underlying algorithms formal definitions referred 
proceed section verify correctness wait protocol 
state spaces cp nets step state space analysis modifications cpn model order tractable state space analysis 
tractable typically means obtaining cpn model finite state space size limits available computing resources 
wait protocol modify modelling frame buffers sender receiver communication channel 
original cpn model see fig 
arbitrary number frame tokens places transmitdata receiveack 
corresponds frame buffers unbounded 
obtain finite state space modify modelling frame buffers way finite capacity 
shows modified cpn model sender wait protocol fig 
shows modified declaration frame type 
color frame union dataframe dataframe ackframe ackframe fig 

modified frame type definition modification sender put data frame frame buffer transmitdata empty corresponding token value located place 
similarly sender receives frame token value returned place receiveack indicating frame buffer empty 
implies longer possible frames overtake 
receiver communication channel modified similar fashion sender 
initial part state space protocol shown fig 

rounded boxes thick nodes state space 
dataframe waiting kristensen practitioner guide coloured petri nets dframe timeout dframe dframe dframe send packets packets rn sn rn acked sn acked sn status accept sn notacked sn status sn sn notacked sending send dataframe dframe dataframe dataframe dframe transmitdata frame represents reachable marking 
marking individual places described dashed box node 
focus marking places sender box lists marking places sender 
convention omit places empty marking chosen omit place send 
top fig 
node thicker borderline 
node represents initial marking 
text inside node tells node number zero predecessors successor information may useful drawn part state space 
analogously see node number predecessors successor 
convention mn denote marking node number arc represents occurrence binding element listed solid box arc enabled binding element transition accept binding listed box 
binding element occurs reach marking enabled binding element 
occurrence variable dframe bound software lead marking 
marking enabled binding elements corresponding enabled bindings transition transmit data frame loss successful transmission enabled binding transition timeout 
depending binding elements occur marking orm node quote node number 
indicates successors node calculated 
part state space observed occurrence transition transmit variable success bound false followed oc fig 

modified sender wait protocol receive ackframe ackframe rn receiveack frame transition timeout leads marking marking 
occurrence binding elements opposite order leads intermediate marking 
enabled binding timeout concurrently enabled bindings transition transmit 
definition arcs corresponding steps binding element part state space 
arcs give information concurrency binding elements necessary verification standard behavioural properties 
generation state spaces cpn state space tool supports modes user generate state spaces interactive automatic 
relationship modes similar relationship interactive automatic simulations 
interactive generation 
interactive generation user specifies marking tool calculates enabled binding elements marking successor marking resulting occurrence binding elements 
part state space wait protocol fig 
obtained manner 
interactive generation typically connection drawing parts state space 
return topic sect 

interactive generation state space similarities single step debugging 
automatic generation 
state spaces cases size impractical generate full state kristensen practitioner guide coloured petri nets timeout sn dframe software notacked waiting software receiveack transmitdata transmit success false frame dataframe software acked waiting receiveack transmitdata transmit success false frame dataframe software notacked sending software receiveack transmitdata timeout sn dframe software notacked waiting software receiveack transmitdata dataframe software accept sn packets tools techn ology tr 
software dframe dframe software space interactive manner 
possible generate state space automatic manner 
user simply starts generation state space fully automatically calculated state space tool intervention user 
user control automatic generation socalled branching options 
options allow user specify conditions calculation state space stopped 
example specify upper bound number nodes generated 
branching options give user local control generation successors making possible specify certain subset successors node generated 
generation control particularly important early phases state space analysis typically concerned identifying configuration system tractable state space analysis 
branching options possible obtain partial state space 
partial state space subset full state space 
situations necessary generate full state space order locate errors check correctness system 
detailed discussion partial state spaces transmit success true frame dataframe software fig 

initial part state space wait protocol notacked sending software receiveack transmitdata dataframe software scope consider full state spaces section 
state space wait protocol nodes arcs generated seconds sun ultra sparc mb memory 
small state space typically state space consists hundreds thousands nodes arcs 
cpn state space tool construct state spaces half nodes arcs tool runs machine megabytes memory 
state space report state space generated thing typically study state space report text file containing answers set standard behavioural properties cpn model generic properties formulated independently system consideration 
state space report produced minutes totally automatically 
contains lot highly useful information behaviour cpn model 
kristensen practitioner guide coloured petri nets studying state space report user gets rough idea cpn model works expected 
system contains errors reflected state space report 
go various parts state space report wait protocol 
give intuitive explanation behavioural properties 
reader interested formal definitions referred 
statistical information 
part state space report contains statistical information size state space 
statistical information state space wait protocol listed table 
see state space nodes arcs 
calculated full state space took seconds sun ultra sparc mb memory 
table 
statistical information state space scc graph nodes nodes arcs arcs secs secs status full statistical part contains information scc graph 
strongly connected component scc maximal subgraph possible find path pair nodes part state space nodes mutually reachable 
node state space belongs exactly scc sccs obtain compact graph known scc graph 
scc graph node scc arc binding element leads scc 
strongly connected components calculated tarjan algorithm time space complexity linear size state space 
cheap construct scc graphs turn efficient investigation certain kinds behavioural properties 
table see scc graph nodes arcs 
means sccs state space nodes sccs covers state space node 
conclude infinite occurrence sequence exists sure protocol terminates 
guarantee termination usually limits number retransmissions 
boundedness properties 
second part state space report contains information integer multi set bounds 
table shows upper lower integer bounds maximal minimal number tokens may located individual places reachable markings 
table lists places receiver sender remaining places cp net related port assignments places sender receiver 
means integer bound places inferred table 
table see places sending waiting token places exactly token 
surprising reassuring indicates system behaves expected 
table 
upper lower integer bounds place upper bound lower bound receiveack send sending transmitdata waiting received table shows upper multi set bounds places sender 
definition upper multi set bound place smallest multi set larger reachable markings place 
integer bounds give information number tokens multi set bounds give information values tokens may carry 
multi set bounds example see place transmitdata may contain different data frames token value corresponding frame buffer empty 
see token values possible place 
notice upper multi set bound transmitdata multi set elements upper integer bound tells token transmitdata time 
analogously places sending waiting may contain possible data frames 
place waiting may addition contain data frame data frame located place initial marking 
upper multi set bounds expected confirms protocol works expected 
multi set bounds give new knowledge 
example probably readers notice frames carry sequence number seen upper multi set bound place receiveack 
lower multi set bound place largest multi set smaller reachable markings place 
places wait protocol lower multi set bound empty multi set 
kristensen practitioner guide coloured petri nets table 
upper multi set bounds acked notacked acked notacked acked notacked acked notacked acked notacked acked receiveack ackframe ackframe ackframe ackframe ackframe sending software tools techn ology tr 
transmitdata dataframe software dataframe tools dataframe techn dataframe ology tr dataframe 
waiting software tools techn ology tr 
send software tools techn ology tr 
tools techn ology tr 
techn ology tr 
ology tr 

places cpn model token certain value permanently 
home liveness properties 
third part state space report shown table 
provides information home liveness properties 
marking marking reachable reachable markings marking reached independently previously happened 
see protocol single home marking 
marking marking enabled transitions 
see protocol single dead marking dead marking identical home marking 
glance think existence dead markings prevent existence home markings 
definition marking reachable dead marking may home marking provided dead marking 
case protocol system 
investigate home dead marking detail moment 
liveness properties see dead transitions 
dead transitions similar dead code programming language means table 
home liveness properties home markings dead markings dead transitions instances live transitions instances transition enabled reachable marking weak property 
see live transitions 
live transition transition matter happens enabled 
dead markings protocol live transitions 
investigate marking detail 
shows marking 
similarly fig 
dashed box node gives information marking individual places 
box shows marking places sender receiver non empty marking 
inspection dashed box reveals desired terminating state protocol data packets sent received correct order frame buffers empty 
dead marking implies protocol partially correct protocol terminates terminates desired state 
home marking protocol chance terminating correctly 
means impossible reach marking terminate protocol correct result 
send acked waiting 
receiveack transmitdata acked received software tools techn ology tr 
fig 

home dead marking fairness properties 
fourth final part state space report shown table 
provides information fairness properties individual transitions occur 
see timeout impartial 
means occurs infinitely infinite occurrence sequence 
transmit transition second instance page 
corresponds data channel 
non terminating execution protocol keep having timeouts keep sending transmitting data frames 
transition accept fair weaker fairness property stating transition occurs infinitely kristensen practitioner guide coloured petri nets table 
fairness properties receive dataframe fair send ackframe fairness accept fair receive ackframe fairness send dataframe impartial timeout impartial transmit fairness transmit impartial infinite occurrence sequences infinitely enabled 
standard queries addition state space report tool offers set standard query functions allow user detailed inspection standard behavioural properties 
query functions return results included state space report described previous subsection 
fact state space report implemented subset available standard query functions 
example tool functions determine maximal minimal number tokens residing set places state space report considers individual places 
queries fig 
functions determine maximal minimal number tokens places sending waiting 
fun mark sender sending mark sender waiting fig 

example standard query easy standard queries 
queries fig 
thing user declare function argument 
function maps marking mn entire cpn model multi set mn sending mn waiting 
result queries proved token sending token waiting places time see fig 

analogously function determine specified set markings constitute home space possible reach specified markings independently previously happened 
argument function list containing set markings consideration 
state space tool provides standard queries investigate multi set bounds investigate reachability 
queries investigate liveness fairness properties 
queries sets transitions sets binding elements 
visualisation state spaces state spaces large seldom sense draw full 
result queries set nodes arcs possessing certain interesting properties path state space leading marking 
quick way get detailed information small number nodes arcs draw corresponding fragment state space 
visualisation particularly useful locating errors system consideration 
state space drawn small steps node node arc arc fragments results example queries input number built drawing functions 
drawing state spaces done conjunction interactive generation 
obtained combining interactive generation drawing 
obtain detailed information drawn fraction state space possible attach descriptors nodes arcs 
boxes positioned nodes arcs fig 
examples descriptors 
nodes descriptors typically show marking certain places 
arcs descriptors typically show occurring transition binding variables 
descriptors sensible defaults user may customise descriptors writing script specifies contents layout descriptor 
descriptors offer abstraction mechanism user define view state space 
illustrate drawing combination debugging investigate happen modify wait protocol send frame back sender receive data frame expecting 
state space variant protocol nodes arcs 
dead marking data packets sent received correct order frame buffers empty 
marking longer home marking 
indicates marking terminate protocol correctly 
investigate problem exploit constructive feedback standard query function checking marking home marking 
feedback tells exists scc impossible reach dead marking 
means standard query function see scc nodes node 
query function find shortest paths leading initial marking node node 
path shown fig 
created means kristensen practitioner guide coloured petri nets accept sn packets tools techn ology tr 
software dframe transmit success false frame ackframe dframe software rn built drawing functions 
descriptors arcs path easy identify problem 
successfully transmit data packet corresponding arcs path 
attempt transmit frame lost 
lose frame situation terminate protocol correctly 
thing happen point keep retransmitting data frame 
retransmissions trigger frame allow start transmitting data frame 
easily seen drawing nodes scc arcs interconnect 
integration simulation modelling design process user quite switches state space analysis simulation 
support state space tool tightly integrated simulator making possible transfer markings simulator state space tool 
marking transferred state space simulator displayed cpn diagram usual way 
user inspect marking individual places enabling individual transitions 
possible start simulation transferred marking 
example checked desired dead marking transferring marking state space tool simulator inspect marking individual places 
shows top level page wait protocol transferred simulator 
transferring current marking simulator state space supported 
typical fig 

occurrence sequence debugging information transmit success true frame dataframe software receive status acked sn rn packets software investigate possible markings reachable steps current simulator marking 
case user transfers simulator marking state space tool successor markings drawn illustrated 
advanced queries state space report standard queries providing rough picture behaviour system 
limitations 
interesting properties systems easily investigated standard queries 
second debugging systems elaborate queries needed locating source problem 
general query language implemented top standard ml sml provided 
provides primitives traversing state space different ways writing non standard model dependent queries 
top transmitdata send sender frame receiveack frame communication channel software tools techn ology tr 
received receiver frame frame fig 

home dead marking protocol kristensen practitioner guide coloured petri nets general query language variant temporal logic ctl provided 
variant ctl possible formulate queries binding elements markings corresponding petri nets action state oriented 
similar standard queries non standard query typically consists lines sml code 
illustrate query language investigate system dependent property wait protocol 
want check sender data packet ahead receiver wait discipline observed protocol 
proved non standard query listed fig 

predicate marking checks sum lengths lists places send received differs total number data packets sent 
query function returns nodes state space satisfy specified predicate 
query negate check state space nodes violate predicate 
operator built infix operator sml functional composition 
val length length ms col val total length mark sender send fun val sent total length mark sender send val received length mark receiver receiver sent received orelse sent received val nodelist fig 

example non standard query state space wait protocol result query empty list 
nodes state space satisfy proved wait discipline observed 
advanced state space analysis section demonstrated state space method effective way investigate dynamic behaviour system 
construction analysis state spaces totally automatic 
state space report user gains lot knowledge dynamic behaviour system 
state space method drawbacks 
serious drawback state space method called state explosion problem 
systems state space large fully constructed small configurations system 
number techniques exist alleviating state explosion problem 
constructing condensed state space possible verify kind behavioural properties full ordinary state spaces 
condensed state spaces typically orders magnitude smaller full state space 
techniques exploit symmetry equivalence concurrent distributed systems 
techniques exploit independency concurrency binding elements take advantage hierarchical structure cpn model 
reader encouraged consult papers cited detailed presentation discussion techniques supported cpn state space tool 
drawback fact state space constructed particular initial marking corresponds different possible system configurations 
seen protocol works data packets packets 
theory totally sure 
practice situation bad errors system designs tend manifest readily small configurations 
protocol packets 
coloured petri nets developed past years university aarhus denmark 
development balanced development theory supporting computer tools experiments form practical case studies 
parts mutual beneficial influence 
development theory driven idea combining concurrency theory petri nets practical applicability high level programming languages 
theory important developing computer tools founded solid sound theory 
development computer tools necessary able practical experiments aim assessing practical applicability developed theory 
practical case studies led new theoretical developments 
number case studies conducted external users 
provided valuable input development cp nets supporting tools demonstrated practical applicability cp nets 
demonstrated application cp nets modelling analysis simple communication protocol 
obvious compared simple communication protocol considerably effort invested modelling analysing industrial sized systems 
feasibility doing demonstrated large number dif kristensen practitioner guide coloured petri nets ferent projects 
includes projects described subsequent papers special section coloured petri nets 
examples projects areas communication protocols audio video systems operating systems hardware designs embedded systems software system designs business process re engineering industrial projects listed web site 
reader referred individual papers elaborate assessment resources needed apply cp nets industrial sized systems 
part larger case studies see knowledge gained resources people prior knowledge cp nets need invest order able start applying cp nets 
experiences encouraging 
typically weeks intensive training needed order able construct simulate cpn models 
design cpn tool course distributed systems university aarhus 
period weeks hours week students able cpn model non trivial protocol stack validate correctness means simulations 
comprehensive web site set resources technical support cp nets design cpn tool 
contains manuals tutorials examples answers frequently asked questions faqs list known problems tips tricks explains get free license design cpn tool 
tool currently available sun solaris hp unix linux platforms 
mailing list established forum discussion users design cpn tool 
workshop practical application cp nets design cpn cpn held aarhus june participation users different countries 
workshop contained presentations regular papers tutorials practical exercises discussions presentations plans design cpn 
selected papers workshop published special section journal 
second workshop cpn held aarhus october 
version design cpn appeared 
knowledge gained practical tool internal data structures algorithms cpn simulator re designed currently process implemented 
results show new simulator runs orders magnitude faster current version cpn simulator 
new simulator contains improved interface declarations types variables functions 
new interface reduces turn time editor simulator working large scale cpn models 
version new simulator released 
similar development planned cpn state space tool 
expected significantly push borderline systems analysed state spaces 
area automatic code generation topic ongoing 
cp nets applied design analysis systems transition final implementation done manually 
experiments area automatic code generation reported 
promising project currently continued 

students colleagues particular university aarhus meta software influenced development cp nets analysis methods tool support 
development supported danish natural science research council 
detailed description individual contributions 
grateful comments suggestions provided reviewers 

appel macqueen standard ml new jersey 
ski wirsing 
eds third international symposium programming languages implementation logic programming 
lncs 
berlin heidelberg new york springer verlag 
bertsekas gallager data networks 
prentice hall 
campos clarke analysis verification real time systems quantitative symbolic algorithms 
software tools technology transfer appear 

christensen herzog visualising behaviour intelligent networks 
margaria steffen posegga 
eds services visualisation user friendly design 
lncs 
berlin heidelberg new york springer verlag pp 

itu ccitt 
recommendation msc 
technical report international telecommunication union 
cheng christensen mortensen model checking coloured petri nets exploiting strongly connected components 
koz 
eds proceedings international workshop discrete event systems 
institution electrical engineers computing control division edinburgh uk 
net modelling industrial size concurrent systems 
ajmone marsan 
ed proceedings 
lncs 
berlin heidelberg new york springer verlag 
scalable net modeling oltp 
proceedings th international workshop petri nets performance models toulouse france 
ieee computer society press 
christensen rgensen analysis bang audio video system coloured petri nets 
az ma balbo 
eds proceedings 
lncs 
berlin heidelberg new york springer verlag 
christensen rgensen kristensen design cpn computer tool coloured petri nets 
brinksma 
ed proceedings tacas 
lncs 
berlin heidelberg new york springer verlag pp 

christensen kristensen state space analysis hierarchical coloured petri nets 
moldt stehr 
eds proceedings workshop petri nets system engineering modelling verification validation 
department computer science university hamburg pp 
report kristensen practitioner guide coloured petri nets 
christensen mortensen teaching coloured petri nets gentle formal distributed systems course 
balbo 
eds proceedings 
lncs 
berlin heidelberg new york springer verlag pp 

christensen modular state space analysis coloured petri nets 
de michelis diaz 
eds proceedings 
lncs 
berlin heidelberg new york springer verlag 
clarke jha exploiting symmetries temporal model logic model checking 
formal methods system design 
clarke emerson sistla automatic verification finite state concurrent systems temporal logic 
acm transactions programming languages systems 
meta software www com 
meta software 
design oa 
meta software cambridge park drive cambridge ma usa 
emerson prasad sistla symmetry model checking 
formal methods system design 
esparza decidability complexity petri net problems 
reisig rozenberg 
eds lectures petri nets basic models 
lncs 
berlin heidelberg new york springer verlag pp 

billington high level petri nets concepts definitions graphical notation 
technical report international standards organization international electrotechnical committee october draft iso iec jtc sc wg 
billington designing verifying communications gateway coloured petri nets design cpn 
billington reisig 
eds proceedings 
lncs 
berlin heidelberg new york springer verlag 
shapiro formal verification arbiter cascade 
jensen 
ed proceedings 
lncs 
berlin heidelberg new york springer verlag 
gibbons algorithmic graph theory 
cambridge university press 
godefroid partial orders improve automatic verification methods 
proceedings cav 
lncs 
berlin heidelberg new york springer verlag pp 

godefroid partial order methods verification concurrent systems approach state explosion problem 
lncs 
berlin heidelberg new york springer verlag 
goldfarb sgml handbook 
clarendon press oxford uk 
cpn group 
www daimi au dk 
holzmann design validation computer protocols 
prentice hall international editions huber jensen reachability trees high level petri nets 
theoretical computer science jensen rozenberg 
eds high level petri nets 
theory application 
berlin heidelberg new york springer verlag pp 

huber formal executable specification isdn basic rate interface 
rozenberg 
ed proceedings 
ip dill better verification symmetry 
formal methods system design 
jensen theoretical aspects coloured petri nets 
de bakker de roever rozenberg 
eds decade concurrency 
lncs 
berlin heidelberg new york springer verlag pp 

jensen condensed state spaces colored petri nets 
formal methods system design 
jensen coloured petri nets 
basic concepts analysis methods practical 
volume basic concepts 
monographs theoretical computer science 
berlin berg new york springer verlag nd corrected printing isbn 
jensen coloured petri nets 
basic concepts analysis methods practical 
volume analysis methods 
monographs theoretical computer science 
berlin heidelberg new york springer verlag nd corrected printing isbn 
jensen coloured petri nets 
basic concepts analysis methods practical 
volume practical 
monographs theoretical computer science 
berlin heidelberg new york springer verlag isbn 
jensen practical coloured petri nets 
reisig rozenberg 
eds lectures petri nets ii 
lncs 
berlin heidelberg new york springer verlag pp 

jensen 
ed workshop practical coloured petri nets design cpn number daimi pb 
department computer science university aarhus available www daimi au dk workshop papers 
rgensen kristensen verification coloured petri nets state spaces equivalence classes 
moldt stehr 
eds proceedings workshop petri nets system engineering modelling verification validation 
department computer science university hamburg pp 
report 
rgensen kristensen computer aided verification lamport fast mutual exclusion algorithm coloured petri nets occurrence graphs symmetries 
appear ieee transactions parallel distributed systems 
kristensen valmari finding stubborn sets coloured petri nets unfolding 
desel silva 
eds proceedings 
lncs 
berlin heidelberg new york springer verlag pp 

larsen steffen alur henzinger special section timed hybrid systems 
number software tools technology transfer 
berlin heidelberg new york springer verlag 
graf sifakis bouajjani bensalem property preserving abstractions verification concurrent systems 
formal methods system design 
textual interchange format high level petri nets 
jensen 
ed workshop practical coloured petri nets design cpn number daimi pb 
department computer science university aarhus pp 
available www daimi au dk workshop papers 
marsan balbo conte modelling generalized stochastic petri nets 
series parallel computing 
wiley 
analysis ada system coloured petri nets occurrence graphs 
jensen 
ed proceedings 
lncs 
berlin heidelberg new york springer verlag 
mcmillan symbolic model checking 
kluwer academic publishers 
milner harper tofte definition standard ml 
mit press 
mortensen modelling flow nuclear waste management program 

ed proceedings 
berlin heidelberg new york springer verlag 
murata petri nets properties analysis application 
proceedings ieee vol 

ieee computer society 
design cpn online 
www daimi au dk 
gnuplot tool 
available online www cs dartmouth gnuplot info html 

paulson ml working programmer 
cambridge university press edition 
peled model checking representatives 
proceedings cav 
lncs 
berlin heidelberg new york springer verlag pp 
kristensen practitioner guide coloured petri nets 
peled combining partial order reductions thefly model checking 
formal methods system design 
shapiro integrated software development methodology hierarchical coloured petri nets 
rozenberg 
ed advances petri nets 
lncs 
berlin heidelberg new york springer verlag pp 

information processing text office systems standard generalized markup language sgml 
technical report iso standard international organisation standardization switzerland amendment exists 

rasmussen singh mimic cpn 
graphical simulation utility design cpn 
user manual 
available www daimi au dk 
rasmussen singh designing security system means coloured petri nets 
billington reisig 
eds proceedings 
lncs 
berlin heidelberg new york springer verlag 
reisig petri nets volume monographs theoretical computer science 
berlin heidelberg new york springer verlag 
simulation analysis document storage system 

ed proceedings 
lncs 
berlin heidelberg new york springer verlag 
shapiro validation vlsi chip hierarchical coloured petri nets 
journal microelectronics reliability special issue petri nets 
ullman elements ml programming 
prentice hall 
valmari stubborn attack state explosion 
proceedings cav 
lncs 
berlin heidelberg new york springer verlag pp 

valmari compositionality state space verification methods 
billington reisig 
eds proceedings 
lncs 
berlin heidelberg new york springer verlag 
wells design cpn performance tool manual 
department computer science university aarhus 
line version www daimi au dk 
