refactoring class hierarchies kaba gregor snelting universit passau fakult informatik 
passau germany fmi uni passau de kaba system refactoring java class hierarchies 
kaba uses snelting tip algorithm order determine behaviour preserving refactoring optimal respect set client programs 
kaba allows interactive manipulation refactored hierarchy guaranteeing preservation behaviour 
refactored source code generated 
kaba dynamic static program analysis 
case program behaviour preserved possible input values 
new dynamic version described guarantees preservation behaviour client runs test suite 
case studies show dynamic kaba generates useful refactoring proposals programs 
refactoring transforms class hierarchy order improve structure evolution 
refactoring community identified number small elementary refactoring transformations software engineer gradually evolves design new desired state applying sequence refactorings 
refactoring generally program transformation popular research topic time gained interest due emergence light weight design methodologies extreme programming advocate continuous refactorings 
book fowler presents comprehensive list refactoring transformations partially implemented refactoring tools 
refactorings understood automated generation refactoring proposals infancy 
key limiting factors fact verifying preconditions refactorings order ensure program behaviour preserved may involve non trivial program analysis 
limiting factor fact refactoring manual process tool support know refactorings apply 
different approach refactoring 
assume hierarchy set client programs hierarchy 
generate refactoring proposal automatically proposal usage hierarchy client programs 
refactoring guaranteed semantically equivalent original program respect client behaviour 
transformed hierarchy subject manual refactorings preservation semantics guaranteed 
eventually code generated 
new code contains exactly statements original code hierarchy changed variables new type class computed 
preservation semantics achieved combination program analysis type constraints concept lattices 
true value technique lies possibility automatically refactor respect purpose represented set client programs 
clients refactored hierarchy optimal sense object contains methods fields really accesses 
fact determine fine grained refactoring preserves behaviour clients 
refactoring editor kaba offers variants approach 
static approach requires static program analysis guarantees behaviour preservation analysed client programs 
dynamic approach requires dynamic program analysis guarantees behaviour preservation client runs test suite 
course static analysis conservative approximation dynamic analysis 
kaba offers semantic support manual refactoring intended postprocessing automatic refactoring refactoring class hierarchy 
contribution start short recapitulation snelting tip algorithm theoretical foundation kaba 
explain kaba editor preserves behaviour 
case studies demonstrate useful refactoring proposals generated automatically dynamic variant 
compare kaba automated refactoring techniques 
class int void class extends void void void class client public static void main string args new new new new 

small example program background foundations section recapitulate basic steps snelting tip algorithm 
full details 
collecting member accesses algorithm fine grained analysis object accesses 
objects object determines member class required information extracted hierarchy clients static dynamic program analysis 
result binary relation coded form table example consider program fragment 
subclass redefines accesses inherited fields main program creates objects type objects type performs field accesses method calls 
table example consists rows labelled object object creation sites 
columns labelled fields methods 
methods additional distinction declarations definitions implementations dcl def analysis precise 
kaba offers variants table construction static dynamic 
dynamic variant analyses member accesses test suite 
jvm instrumented member access true program analysis usually distinguish runtime objects created statement standard technique identify objects creation site 
object fact stands creation site 
dcl def dcl def dcl def dcl def 
member access table dcl def dcl def dcl def dcl def 
table incorporating type constraints object resp 
creation site gives rise table entry 
method calls give rise table entry def 
entries generated 
static variant points analysis determine object object creation sites point runtime set denoted pt 
pt may big imprecise small pt conservative approximation 
today reasonable efficient precise points analysis exists java 
type static type member accesses resp 

table contain entries resp 
dcl 
furthermore entries def added pt type 
example resulting table shown 
note contains additional entries pointers explained 
simple example static dynamic table identical general course case due principle conservative approximation entries static table superset entries dynamic table 
mercury venus earth mars jupiter saturn neptune small medium large near far moon moon mercury venus moon near earth mars small moon 
example table concept lattice type constraints far jupiter saturn second step set type constraints extracted program necessary preservation behaviour 
refactoring algorithm computes new type class variable class typed member field new home class member 
constraints variable field expressed determined new type refactored hierarchy type constraints member method expressed determined new home class def 
basically kinds type constraints 
implicit gives rise type constraint type type 
furthermore subclass redefines member method object accesses def def def def retained order avoid ambiguous access 
constraints called dominance constraints 
obvious similar dominance constraint requires methods def dcl 
type constraints extracted incorporated table achieve exploit fact constraint seen implication table rows resp 
columns algorithm incorporate set implications table 
observe refactored hierarchy subtype inherits members supertype 
type type enforces table entry short 
second def def enforces table entry def def written def def 
note implication row labels def def implication column labels 
direction second implication reversed 
effect holds appears large medium neptune 
concept lattice generated reconsidering assignment constraints collected form implications furthermore dominance constraints collected def def dcl dcl def dcl def dcl def dcl def dcl implications easily incorporated table copying row entries row row resp 
column entries column def column def note general may cyclic mutual dependences row column implications fixpoint iteration required incorporate constraints table 
final table 
concept lattices final step concept analysis construct refactored hierarchy table concept analysis applied hidden hierarchical structures extracted binary relation 
standard example shown 
table encodes binary relation objects case planets attributes table corresponding concept lattice computed smart algorithm 
elements lattice labelled objects attributes lattice element labelled element labelled lattice characteristic properties refactored hierarchy def def holds def appears def refactored hierarchy 

simplified lattice 
iff object attribute iff appears lattice 
supremum represents attributes common 
infimum represents objects having attributes 
iff implies appears lattice objects having attribute attribute 

iff appears attributes fitting fit 
concept lattice constructed table 
concept lattices naturally interpreted inheritance hierarchies follows 
lattice element represents class refactored hierarchy 
method field names element represent members class 
objects element element class new type 
particular objects new type contains members object really accesses 
typically original classes split new subclasses introduced 
particularly true raw lattice introduces refactored classes original classes 
new classes represent object behaviour patterns clearly visible lattice 
additionally calls needs declaration method 
calls plus called 
real objects located far lattice various subsets original members 
particular accesses accessed calls needs def need dcl objects need def causes multiple inheritances raw lattice 

class single superclass 
merge contain member attributes 

merge contain member attributes original class 

class single subclass 
merge instances exist 

repeat fixpoint reached 

lattice simplification algorithm note raw lattice clearly distinguishes class interface new classes labelled dcl contain dcl 
entries inherited def 
entries fields meaning interfaces 
lattice guarantees preservation behaviour clients 
fine grained raw form represents fine grained refactoring respects client behaviour 
software engineering viewpoint lattice simplified order useful 
example empty elements new classes members top element removed multiple inheritance eliminated lattice elements merged certain behaviour preserving rules 
particular distinction class interface removed merging lattice elements 
presents simplified version generated automatically see 
empty elements interfaces gone different access patterns objects visible better objects original type different behaviour calls calls original class split unrelated classes 
objects original type related behaviour accesses accessed plus 
original class split class subclass 
contain dead anyway appears bottom 
objects smaller general unused members physically absent objects new hierarchy 
think simplifying merging topmost elements bigger necessary including member 
decision disadvantage simpler lattice structure 
unused variables gather java lang object unused members indicating removed program 
editor guarantee behaviour clients preserved simplification 
language details java features require additional treatment 
example dynamic type checks operator type casts exceptions 
details treatment left due lack space point full java handled 
multiple inheritance new hierarchy may exhibit multiple inheritance new classes 
classes interfaces lattice simplified cases remain class inherits non method superclass 
removed manually changing behaviour 
kaba editor demand mark classes really inherit method definitions different superclasses offers move method definitions superclasses hierarchy eliminating multiple inheritance 
libraries distinguish objects type defined user code objects type defined library api code 
library code refactored 
objects created created inside library code taken account static analysis particular points analysis impact control flow note dominance constraints prevent method inherited different superclasses 
kaba screenshot analysed program may influence members relevant objects accessed 
java api contains native code 
methods access members practice 
methods stub provided equivalent terms member access dynamic type checks 
effects library code underestimated 
known small java programs load huge amount library code providing big problems scalability static analysis 
analysis code careful handling native code absolutely comes preservation behaviour 
kaba system kaba implementation approach described sections 
kaba consists parts static analysis dynamic analysis graphical class hierarchy editor bytecode transformation tool 
system components static analysis handle full java bytecode includes full points analysis support basic reflection features 
stubs provided important native functions additional stubs added easily 
mainly tested class files generated javac jikes able handle java non java compilers 
class files analysis needs starting points include code reachable points 
dynamic analysis consists jvm kaffe jdk hello world example loads library classes 
www kaffe org 
browser original types upper browser class content lower 
bytecode interpreter modified output member accesses program execution 
script merges data different program runs table format static analysis 
kaba editor computes raw simplified concept lattice displays graphically 
manual refactorings applied new class hierarchy 
editor described detail section 
final part kaba bytecode transformation tool krs 
transformation instructions generated editor transforms original bytecode new set classes matching new hierarchy 
bytecode run directly fed various bytecode decompilers regain java source code 
editor presents lattice form kaba screenshot 
node represents class name printed bold font nodes containing members original class named nodes containing mixed members named 
members displayed class name variables 
reduce screen space requirements attributes objects displayed default 
little arrows class name allow expand necessary 
relationship original new hierarchy explored additional views 
old class new home class member refactored hierarchy displayed upper 
new class kaba displays lower 
dynamically bound methods 
statically bound members fields static methods constructors 
dynamic type checks concerning member 
origin inherited members 
object creation site viewed mouse click 
browsing user may modify class hierarchy 
basic operations provided attributes objects moved cut paste fashion 
number selected cut moved class paste 
class split 
incoming edges attached new class outgoing edges attached second second inherits 
members moved variables second class may redistributed 
adjacent classes merged class class subclass class 
operations sufficient refactor class hierarchy possible way 
additional convenience functions provided common tasks easy 
course modification class hierarchy allowed affect client behaviour 
simple case field class moved 
general case complicated 
example dcl declaration moved suddenly def implementation missing instance suddenly class 
preserving behaviour initial refactoring proposal preserves behaviour 
subsequent refactoring steps guarantee behaviour new class hierarchy identical behaviour initially generated concept lattice 
behaviour preservation guaranteed groups constraints 
group consists global constraints order interpret graph class hierarchy 
constraints second group concern individual objects 
group comprises graph contain cycles class may contain method definitions equal signature 
assignments program 
ifp analysed program valid 
dominance constraints violated 
dominance constraint valid 
second group comprises individual constraints true object type initially contained statically bound member contain additional constraints dynamic typechecks exception handlers shown due lack space 
java lang object java lang object code symbol interface code flags interface code kinds interface code code symbol code symbol code symbol code symbol comp resolve 
original class hierarchy part code symbol code symbol code symbol comp resolve type initially contained dynamically bound method lookup yield implementation type 
class class 
user tries modification causes violation constraint get detailed error message operation changes program behaviour 
relevant parts message parts graph identical color give user quick feedback problem located 
code generation code generation consists major tasks fields methods reordered new class hierarchy 
second task subtle class name program replaced new 
expressions types local variables method parameters fields instanceof operators type casts exception handlers 
currently static analysis provides information required task 
addition type changes dead code removed non typeable general 
code symbol code symbol code symbol code symbol code symbol code symbol code symbol comp resolve comp resolve comp resolve code symbol code symbol code symbol 
kaba refactoring code symbol code symbol code symbol comp resolve comp resolve comp resolve code symbol code symbol java reflection facilities issue 
static analysis handle case object instance created string known class name 
fashion code generation tool rewrite arguments certain library calls translate old class name new 
programs making full reflection currently scope method 
case studies applied kaba real world programs 
display class hierarchies view 
nodes contain class names 
bold right bar indicates class instances 
common package name shortened 
hierarchies raw lattices processed algorithm reduce complexity changing behaviour 
compiler example java compiler provided sun jdk 
shows symbol table subhierarchy rest considered client code 
java lang object java lang object 
original class hierarchy part topmost symbol table class symbol subclasses having subclasses 
javac analysed dynamic analysis 
api source input creating test runs 
resulting refactoring shown guarantees preserve behaviour tests 
top hierarchy levels error subhierarchy reproduced identically retaining structure hierarchy 
see semantically motivated move member move method refactorings members original class symbol moved subclasses new low level classes containing parts 
demonstrates functionality specific subclasses 
new class contains members symbol indicates class inner class symbol 
inner class may subclass outer class 
note interfaces original hierarchy disappeared contain constant declarations inlined class files 

kaba refactoring symbol symbol example extract class refactoring 
general refactored objects smaller true javac symbol members original symbol class members distributed classes 
number members top class objects reduced 
important understand refactoring just proposal presents changes applied affecting behaviour 
may reasons apply changes extensibility cohesive grouping members classes 
similarly subsequent manual refactorings obey software engineering criteria 
naturally decision apply refactoring requires certain familiarity code 
case definitely improve information hiding certain secrets moved visible subclasses 
checked source code cohesion improved reduced java lang object production part symbol part production part action part symbol part action part action part symbol part symbol part symbol part java lang object production part symbol part action part production part 
refactoring cup static analysis left dynamic analysis right kaba introduce new classes methods executed improves functional cohesion source code may provide arguments splitting 
case kaba reproduced hierarchy structure 
conclude original javac design quite 
example demonstrates kaba design metrics original hierarchy reproduced bad original hierarchy completely refactored 
parser generator case study antlr popular parser generator 
example grammars antlr distribution input dynamic analysis creating test runs 
java run time classes analysed 
shows part original hierarchy refactored version contains members members members token 
example original structure changed 
classes members distributed class split classes block split classes 

original hierarchy superclasses classes 
refactored hierarchy containing members classes 
members original classes moved subclasses 
indicates distinction redundant 

originally subclass 
inheritance relation weaker new class hierarchy classes members contain subset members 
indicates inheritance classes candidate inspection 
new hierarchy quite different old quite scattered conclude original design flawed certainly ok class structure mirrors structure grammar rules kaba shows auxiliary classes introduced encapsulate general functionality 
kaba editor fine tune refactoring accordingly 
static vs dynamic analysis example serves compare static dynamic analysis particular test cases 
program java cup parser generator 
test runs dynamic analysis cup offer sample grammars test cases 
shows results static dynamic analysis 
static refactoring contains dynamic variant contains true objects fine grained twice classes 
static refactoring contains additional part example semantically motivated extract interface refactoring interesting difference dynamic variant parts class production part moved symbol part 
case static variant 
possible reasons may test cases dynamic refactoring behaviour preserving general may static points analysis imprecise assumes member accesses happen run time 
question decided providing test cases tests cover execution paths dynamic refactoring identical static refactoring true objects 
general static refactoring offering full behaviour preservation fine grained access information expensive compute refactoring finegrained practical value doubtful 
javac test cases develop trust behaviour preservation dynamic analysis 
really big programs static analysis scale anyway current points implementation handle loc loc reason try dynamic analysis 
final refactoring shown due lack space 
java interfaces inherit lang object 
kaba adds inheritance necessary 
related dagstuhl seminar program analysis object oriented evolution analysis researchers met refactoring researchers order explore potential program analysis refactoring 
insight workshop refactoring context preservation behaviour objective 
kaba reacts insight offering static variant preserves behaviour clients dynamic variant preserves behaviour test suite 
authors proposed methods automated refactoring 
client specific means valid clients prevents client specific refactorings 
authors investigate automated refactoring 
unfortunately algorithm provide semantic guarantees 
moore classes statements extracting common subexpressions 
algorithm dynamically typed language self 
naturally behaviour guarantees provided realistic applications reported 
tip uses type constraints order support refactorings extract interface pull push member 
tip guarantee behaviour preservation offers interactive tool similar kaba editor part eclipse 
automatic generation refactorings supported 
identification dead fields methods usually static analysis rta practical tools jax 
kaba identifies dead members product kaba seen general analysis includes dead members special case 
original version snelting tip algorithm published took years develop kaba basis algorithm refine foundations order handle full java add dynamic analysis variant kaba realistic applications 
compared achievements summarized follows 
today static kaba variant handle loc new dynamic variant program size limitation 
innovative kaba refactoring editor guarantees behaviour preservation client specific general refactorings 
case studies shown kaba generates practically useful refactorings 
interesting note kaba dynamic analysis works fine practice higher cost static analysis full behaviour preservation questionable 
show observation represents new trend program analysis software tools 

funded deutsche forschungsgemeinschaft dfg sn sn 
frank tip provided valuable comments 
bacon sweeney 
fast static analysis virtual function calls 
proc 
th conference object oriented programming systems languages applications oopsla pages 
beck 
extreme programming explained 
longman higher education 

automatic reorganization object oriented hierarchies case study 
object oriented systems 
fowler 
refactoring 
addison wesley 
ganter wille 
formal concept analysis mathematical foundations 
springer verlag 
hendren 
scaling java points sparc 
compiler construction th international conference lncs pages 
moore 
automatic inheritance hierarchy restructuring method refactoring 
proc 
th conference objectoriented programming systems languages applications oopsla pages 
rountev milanova ryder 
points analysis java annotated constraints 
proc 
th conference object oriented programming systems languages applications oopsla pages 
schneider 
von der sprache java 
master thesis universit passau 
snelting tip 
understanding class hierarchies concept analysis 
acm transactions programming languages systems pages may 

points analyse java 
technical report mip fakult mathematik und informatik universit passau 
tip 
refactoring generalization type constraints 
proc 
th conference object oriented programming systems languages applications oopsla pages xx xx 
tip snelting johnson 
program analysis object oriented evolution 
technical report dagstuhl seminar report 
tip sweeney streeter 
practical extraction techniques java 
acm trans 
prog 
lang 
syst 
