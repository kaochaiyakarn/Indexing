selecting software engineering methodology multiobjective decision analysis thesis scott malley lieutenant usaf gcs eng department air force air university air force institute technology wright patterson air force base ohio approved public release distribution unlimited 
selecting software engineering methodology multiobjective decision analysis thesis faculty graduate school engineering management air force institute technology air university partial fulfillment requirements degree master science scott malley lieutenant usaf march approved public release distribution unlimited 
gcs eng views expressed thesis author reflect official policy position united states air force department defense united states government 
ii gcs eng selecting software engineering methodology multiobjective decision analysis thesis scott malley lieutenant usaf approved iii acknowledgments take opportunity express sincere appreciation faculty advisor major scott guidance support endeavor 
experience insight kept path success expectations forced set goals high 
express appreciation members thesis committee dr thomas captain scott brown support process 
biggest goes wife angela put shared completion 
eighteen months far best time 
say girls read someday may find inspiration pursue dreams 
iv scott malley table contents acknowledgments iv table contents table figures 
xii xv multiagent systems problem statement problem elaboration decision making design space rules multiobjective decision analysis software engineering paradigms object oriented component ware agent oriented scope research approach overview thesis overview ii 
problem approach method selection approach decision analysis tool design defining value hierarchy specifying evaluation measures scales building multiobjective value function developing software analysis tool application decision analysis tool result analysis summary iii 
design developing decision analysis tool value hierarchy evaluation considerations measures objectives management issues cost acquiring methodology support tools organizational business practices methodology maturity integration reusable components project requirements legacy system integration distribution environment agility robustness dynamic structure scalability interaction building multiobjective function single dimensional value functions linear functions exponential functions weights multiobjective function vi developing software implementation applying decision tool automation decision analysis tool summary iv 
decision analysis application decision analysis application process determining weights rating evaluation measures computing multiobjective function methodology selection software engineering methodology alternatives applications decision analysis tool rating considerations cost acquiring methodology support tools organizational business practices methodology maturity reusable components legacy system integration distribution environment agility robustness dynamic structure scalability interaction software requirement case studies case content search weighting evaluation considerations rating evaluation considerations calculating multiobjective value functions vii determining best alternative case weather monitoring station weighting evaluation considerations rating evaluation considerations calculating multiobjective value functions determining best alternative case cryptanalysis weighting evaluation considerations rating evaluation considerations calculating multiobjective value functions determining best alternative case inventory tracking system weighting evaluation considerations rating evaluation considerations calculating multiobjective value functions determining best alternative analysis assumptions 
decision validation 
summary 



basis decision subjectivity quantitative data summary 
appendix background 
overview 
multiagent system properties 
viii definitions environments problem domains benefits principles software engineering paradigms 
object oriented paradigm object oriented methodologies component ware paradigm component ware methodologies agent oriented paradigm agent oriented methodologies paradigm comparisons agent oriented problems pitfalls 
agent oriented problems agent oriented pitfalls related 
jennings wooldridge agent oriented software engineering message methodology engineering systems software agents methodology selection developing real time systems decision making frameworks 
design space rules multiobjective decision analysis taxonomy value hierarchies desirable properties value hierarchies completeness decomposability ix operability small size uses value hierarchies evaluation measures types evaluation measure scales natural constructed direct proxy developing evaluation measure scales alternatives multiobjective value analysis multiobjective value function spreadsheet analysis summary 
appendix methodology selection criteria survey 
survey 
responses 
appendix sensitivity analyses 
case study 
case study 
case study 
case study 
appendix software engineering methodology decision analysis tool sem dat data analyzer user manual 

installation 
features 
step step step step step rating data analyzer demonstration 
appendix software development questionnaire 
content search system analysis design models mase 
content search system analysis design models booch 
software development questionnaire 
questionnaire results tabulated summary 
bibliography 
vita xi table figures simple design space factors decision technique selection problem approach decision analysis tool development example value hierarchy methodology selection example evaluation measure worksheet software analysis tool interface example validation metrics proposed evaluation consideration ratings average rating proposed evaluation considerations weighting partition methodology selection value hierarchy cost acquiring methodology support tools worksheet organizational business practices worksheet methodology maturity worksheet reusable components worksheet legacy system integration worksheet distribution worksheet environment worksheet agility robustness worksheet dynamic structure scalability worksheet interaction worksheet normalized exponential constants index mapping cost acquiring methodology support tools worksheet summary xii organizational business practices worksheet summary methodology mat summary reusable components worksheet summary legacy system integration worksheet summary distribution worksheet summary environment worksheet summary agility robustness worksheet summary dynamic structure scalability worksheet summary interaction worksheet summary content search system requirements content search weighting summary single dimensional value function fitness values case weather monitoring station requirements content search weighting summary single dimensional value function fitness values case cryptanalysis requirements content search weighting summary single dimensional value function fitness values case inventory tracking system requirements 
inventory tracking system weighting summary 
single dimensional value function fitness values case 
case study multiobjective fitness values 
composite percentages management technical considerations 
sensitivity analysis example 
weights critical point summary 
content search development metrics 
origin object oriented methodologies 
xiii development uml 
simple design space 
phases strategic decision making 
value hierarchy employment options 
evaluation considerations evaluation jobs 
sem dat welcome screen 
sem dat step screen 
sem dat step screen 
sem dat step screen 
sem dat step screen 
sem dat step screen 
sem dat ratings screen 
data analyzer data input screen 
data analyzer data evaluation screen 
data analyzer charts screen 
xiv gcs eng emergence agent oriented software engineering methodologies software developers new set tools solve complex software requirements 
problem software developers face determine methodology best approach take developing solution 
number factors go decision process 
thesis defines decision making process software engineer determine software engineering approach appropriate system development strategy 
decision analysis process allows software engineer classify evaluate set methodologies specifically considering software requirement hand 
decision making process developed multiobjective decision analysis technique 
type technique necessary number different conflicting criterions 
set criteria base decision derived literature sources validated opinion survey conducted members software engineering community 
developing decision making framework number case studies examined 
xv page left intentionally blank xvi selecting software engineering methodology multiobjective decision analysis air force changing way leverages information technology strategy called air force network 
information superiority key factor success st century clearly delineated visionary documents joint vision air force 
information superiority provides ability control exploit information way ensures decision dominance ability smarter decisions faster enemy 
strategy leveraging advantages current information technologies 
technological advances information systems information technology military greatest force multipliers 
ability rapidly disseminate large amounts data geographically separated command centers allows commanders timely decisions changing environment 
ability rapidly disseminate information increases amount information available decision makers increasing dramatically 
imperative technology advances ensure information available benefit leaders hindrance due volume 
size complexity worldwide network necessitate formal rigorous approaches ensuring entire system interoperable secure 
department defense defense advanced research project agency darpa investigating agent systems technology maximizing benefit information resources trying reduce strain placed resources manpower time 
current focus integrating client server information systems provide decision support capabilities military national leaders 
agent systems promising technology regard offer benefits integrating legacy systems newly developed components handling errors gracefully moving tasks involve simple reasoning require large amount computation agent allow human time complex ion making allowing synergistic collaboration users software agents 
agent technology emerges question apply advancing field raised 
air force office scientific research afosr air force investing development agent technology improve command control support 
developing agents gather synthesize data cooperate agents solve problems just area afosr intelligent agent research focused 
current afosr sponsored research efforts involved defining methodology called multiagent system engineering mase designing implementing verifying multiagent systems 
mase extension object oriented software design methodologies agent basic building block system 
agent abstraction encompasses characteristics multiagent system 
developing methodology researchers developed multiagent system development tool implements mase methodology 
currently methodology assumption agent oriented system developed versus traditional system 
research examines decision making process leads decision specific methodology mase develop potential software projects 
agent system technology offers number advances conventional software systems military information sharing decision support domain 
understanding capabilities central piece deciding technology appropriate particular problems 
section presents foundation agent technology information 
multiagent systems air force challenge create seamless network ensure information superiority introduces extremely complex operating environment 
decisions regarding network connectivity data storage just couple hardware factors task 
development software hardware resources critical piece success network air force multiagent systems attractive solution software problems 
multiagent system comprised heterogeneous different agents 
agent defined computer system situated environment capable autonomous action environment order meet goals 
agents characterized autonomous pro active reactive sociable 
autonomy ability act outside intervention having control internal state behavior 
pro activity ability exhibit goal directed behavior initiating actions satisfying goal 
reactivity ability perceive environment respond changes environment order achieve goal 
social ability ability interact agents order achieve goal 
properties allow agent systems flexible problem solvers 
designers air force global network determine type environment system support 
considering different environments closed open properties agent behavior better evaluated 
closed system environment system designers know exactly type agents exist 
part agents cooperative agents common goal 
open system environment agents meet cooperative agents competitive agents 
competitive agents self interested set goals may conflict goal system 
self interested agents assist group problems usually cost negotiated prior performing computation 
agent open system agent know handle communications agents unknown system designer agent developed 
global nature network concept problem domains multiagent system approaches suited solve 
problem domains generally inherent form distribution knowledge capability information expertise resources distributed system 
examples problem domains inherent distribution distributed situation assessment distributed resource scheduling planning distributed expert systems :10.1.1.25.7165
mase agent oriented software engineering methods suited dealing distribution software requirement problems 
building systems involve multiple agents system realize benefits speed due concurrent processing communications bandwidth requirements information gathering performed source remotely increased reliability single point failure 
benefits include increased responsiveness due processing sensing performed source simplified system development agent modular :10.1.1.25.7165
problem statement number methodologies exist building multiagent systems decision multiagent design :10.1.1.53.3254
mase methodologies provide guidance types software problems methodology suited 
academic community industry trying determine problems call multiagent approach 
jennings wooldridge written papers agent oriented software engineering provide intellectual justification validity agent oriented techniques 
justification comes qualitative analysis technique addresses principles allow software engineering techniques deal complex problems proposed booch abstraction decomposition hierarchy 
leave understanding situations agent solutions appropriate outstanding issue 
european institute research strategic studies telecommunications began project explore agent technologies european telecommunications industry 
project objectives define guidance identification application areas agent approach better suited approaches 
guidelines consortium promoted intended help developer deciding agent oriented approach appropriate 
agent oriented approach beneficial situations complex diverse types communication required 

agent oriented approach beneficial system perform situations practical possible specify behavior case case basis 

agent oriented approach beneficial situations involving negotiation operation competition different entities 

agent oriented approach beneficial system act autonomously 

agent oriented approach beneficial system expected expanded modified purpose system expected change 
guidelines determining agent oriented approach suited problem 
guidelines clear answer approach appropriate 
problem research seeks solve define decision making process software engineer determine agent oriented software engineering approach appropriate system development strategy 
problem elaboration problem statement mind additional topics require explanation 
define decision making process indicates working knowledge decision theory needed 
determine agent oriented software engineering approach appropriate system development strategy requires understanding agent oriented software engineering methods software engineering techniques 
section provides information topics 
decision making goal research specify decision making process determining appropriate software engineering technique 
clearly decision select methodology difficult task trade offs 
multidimensional technique decision making required 
design space rules intention design space rules methodology assist new engineers making correct choice design experienced software engineer 
technique foundation decision making process software engineers trying determine design options provide solution requirements statement 
design space multidimensional space classifying systems 
dimension design space represents different structural functional characteristics system 
structural dimensions represent characteristics pertain techniques employed functional dimension captures impact decisions 
correlations different dimensions discovered rules generated assist decision process 
rules functions map dimension 
establishing set rules trade offs dimensions evaluated 
example dimensions response time functional interprocess synchronization structural 
point design space determines design 
small design space illustrated 
response time fast med slow message semaphores monitors rendezvous interprocess synchronization mechanism simple design space correlation drawn simple design space relationship interprocess synchronization response time 
specification required highly responsive system messaging semaphores better design choices monitors rendezvous 
functional dimension interprocess synchronization may plotted complexity 
space may show messaging semaphores complex software engineer required balance complexity system responsiveness 
testing existing systems design space rules degree agreement actual implementation compares design predictions measured 
multiobjective decision analysis field operations research began looking scientific approaches decision making world war ii 
past decades increased awareness need identify consider objectives simultaneously led research expanding systematic procedures making decisions single criterion 
field study comes multiobjective decision analysis 
multiobjective decision analysis utility assessment framework alternatives compared set problems characteristics called evaluation considerations 
score calculated individual evaluation considerations combined order derive score utility satisfaction 
combining evaluation considerations scores weighting factor express decision maker rating importance characteristic 
scores weights combined multiobjective value function 
multiobjective value function returns fitness rating alternative 
compared alternative highest score optimal solution definition optimal relaxed maximizes decision maker utility satisfaction 
software engineering paradigms decades software important piece information systems 
time software engineering paradigms designed methodologies creating software reasonable amount time reasonable cost 
paradigms generally layered approaches developing solutions customer non technical description system capable doing 
ieee defines software engineering application systematic disciplined quantifiable approach development operation maintenance software application engineering software 
study approaches 
disciplined approach creating software best way ensure quality software produced 
approaches discussed examples emerging approaches software engineering 
paradigms object oriented paradigm component ware approach agent oriented software engineering 
object oriented paradigms object oriented oldest 
object orientation deals complexity large software problems concepts decomposition abstraction hierarchy 
object oriented software engineering assists software engineer task addressing concepts modern software engineering information hiding data abstraction encapsulation concurrency 
concepts easily handled structured analysis techniques developed prior object orientation 
object orientation promotes concept software reusability 
functions attributes entity encapsulated object object easily migrated systems reuse 
object oriented application closer representation real world functional application 
ability better understand mapping real world software abstraction greatly improves users confidence system 
additionally ability understand code greatly enhanced object orientation turn leads better maintenance improved modifiability 
objects provide certain level data abstraction information hiding underlying functionality object remain implementation easily changed provide improved performance additional functionality 
component ware component ware paradigm attempt maximize software reuse 
components defined physical replaceable parts system packages implementation provides realization set interfaces 
components usually perform single function treated black boxes 
original creation components come software engineering technique object oriented structured analysis 
internally method storing data irrelevant user 
information maintained component accessible prescribed operations provided component 
versatility components great 
driving purpose developing components software reuse 
systems built combining components 
component composition requires connecting interfaces 
components developed object oriented method may provide inheritance allowing system methods component 
functionally developed components parameterized function calls 
instances scripting language may needed act component glue 
requirement arises new system complete system meeting requirements able generated 
unified modeling language expanded include representations components 
object oriented methodologies expanded include incorporation components decision component left design phase 
agent oriented agent oriented software engineering emerging paradigm object oriented paradigm 
object oriented paradigm agent oriented paradigm designed reduce complexity decomposition abstraction hierarchy 
expected primitive building block agent oriented paradigm agent 
agents expressive objects 
agent autonomous having control internal state behavior having defined boundaries interfaces 
adopting agent view world apparent problems require multiple agents represent decentralized nature problem multiple control centers multiple goals :10.1.1.10.2242
difference agents objects interaction techniques 
objects interact method invocation agents communicate high level agent communication language acl 
acls allow interactions conducted knowledge level 
acl agents need know structure agents 
requirement agents know pass accept messages agents 
scope research better define problem necessary focus research limited number software engineering techniques 
course techniques mainstream order provide information regarding potential benefits pitfalls 
development agent oriented software mase methodology 
hand general object oriented methodology unified modeling language object oriented component ware software development 
approach overview remainder thesis describes systematic approach determining appropriate software engineering methodology software problem 
steps taken summarized 
determine decision making process process framework software engineer determines appropriate technique develop software problem 

define decision analysis tool process selected definition tool process needed evaluate different alternatives 

apply tool software problems tool applied number requirement specifications 
additionally requirements developed highest rated methodologies order collect data validate decision 

analyze programs developed programs compared set thesis overview predetermined software metrics 
metrics correlation actual software results results decision analysis tool 
chapter ii describes approach taken define strategic decision making approach problem analysis 
chapter iii provides decision analysis tool determine fitness multiagent system solution 
chapter iv provides demonstration decision analysis number systems 
addition application tool system specification results metrics collected development specifications analyzed 
chapter closes thesis 
additional support material provided appendices 
appendix literature review providing greater detail topics discussed thesis 
appendices contain results survey conducted validate selection factors decision making process sensitivity analyses data collected set cases respectively 
appendix user manual software application developed implement decision analysis process 
appendix collection methodology products results questionnaire validation decision analysis tool 
ii 
problem approach complex problem software engineers encounter choice engineering approaches 
software methodologies software engineers develop solutions complex software problems 
quantifiable data compare development similar projects existed data base decisions methodology choose 
unfortunately data exist 
leaving fewer quantifiable reasons engineer relies subjective criteria select methodology personal preference expertise management alternative familiar method considering alternatives 
credence approach organization understands approach day day business software development 
argument choice may better way solving problem tool generally fit problem 
chapter describes approach developing tool assisting decision maker selection best alternative alternatives exist 
problems software engineer face generally different possibly conflicting objectives output tool report definitive answer question software paradigm provide indication methodology candidates 
method selection described chapter intent research specify decision making process determining appropriate software engineering approach 
faced choice selecting appropriate methodology factors effect decision 
clearly difficult task trade offs 
challenge balancing conflicting objectives analyzing trade offs different characteristics key making decision 
multidimensional decision techniques provide systematic procedure handling facets methodology selection problem 
main focus research decision making techniques comes field operations research fact operations research developed scientific approach decision making military scenarios world war ii 
mathematical frameworks come field research linear programming inventory control dynamic programming bayesian analysis simulation techniques 
systematic procedures mathematical frameworks decision making exist techniques developed software architecture point view traditional operations research technique explored background research 
technique design spaces rules developed tool provide software engineers architectural design guidance 
focus design phase issues takes functional requirements project maps structural design choices 
example functional requirement data storage include database management system flat text file structural realizations system 
correlating different structural functional mappings design rules 
ability objectively specify design rules dependent availability performance data 
appropriate data technique able generate tool problem selecting type system design object oriented agent oriented decision mainly performance issues certain design choices 
determining appropriate methodology predicted performance software really address issue regard methodology 
referring back data storage example type methodology selected true bearing appropriate implementation 
real question methodology handle representation data storage handled way clear system designer 
data required quantify performance issues exist decision maker disregarding factors vital decision 
technique absent type mathematical framework back decision tool 
large set data available uncertainty factored possible convincing argument 
data available argue results effectively 
second approach explored multiobjective decision analysis 
multiobjective decision analysis operations research technique derived utility assessment framework 
problem methodology selection finite set alternatives evaluated utility assessment considered superior mathematical frameworks mathematical programming 
heavily decision theory technique require users know decision theory 
design space rules technique multiobjective decision analysis allows decision maker take issues performance account impact decision current set business rules 
summary factors impacted choice strategic decision making technique 
considerations mind multiobjective decision analysis selected research 
factor design space rules multiobjective analysis handling multiple criteria mathematical framework flexible large body available approach factors decision technique selection multiobjective decision analysis approach decision making details problem hand specified 
depicts approach taken solve paradigm selection problem general form 
decision analysis tool design problem approach selecting decision analysis technique step develop decision analysis tool assist decision maker 
number distinct steps go creating decision analysis tool 
tool realized software software package allows repeatability accuracy 
design decision analysis tool problem discussed chapter iii 
general steps taken discussed 
shows process followed creating tool 
value hierarchy design decision analysis tool apply decision analysis tool problem analyze results decision analysis tool application 
define value hierarchy 
specify evaluation measure scales 


build multiobjective function 
develop software implementation decision analysis tool development defining value hierarchy step developing decision analysis tool defining value hierarchy 
value hierarchy value structure captures objectives decision capture factors important decision 
step critical steps process specifies issues alternatives address order viable solutions 
value hierarchy complete decision maker making decision may ignore vital information 
value hierarchy provides graphical depiction evaluation considerations relevant decision 
name suggests value hierarchy organized way evaluation considerations near root tree evaluation considerations descendants 
formalizing value hierarchy provides decision maker model representation factors going decision 
beneficial decision maker may explain defend decision interested parties 
value hierarchy captures factors decision important decision maker 
proposing decision analysis tool general software engineering methodology selection problems values considerations determined general problem 
considerations selected determined characterizations current literature validated survey software engineering practitioners academics industry government 
existing classifying software methods described major areas characterization 
classification scheme applied problem selecting software engineering methodologies development systems real time system problem domain 
process involves determining method method issues method addresses 
areas classification 
technical characteristics category looks classifying technical characteristics software development stages development specification design implementation 
characteristics software problem dealt specification analysis phase relate behavioral functional views problem 
views carried stages system development 
design phase behavioral functional views mapped behavioral functional characteristics function 
effective methods allow smooth transition stages allow ability trace functional behavioral characteristics stages development 

management characteristics important consider support method provides management evaluating different methods 
characterization consider method deals typical management project issues estimating planning review 
characterization look method related needs processes exist organization 
management practices difficult change identifying potential changes important factor adopting new methodology 

usage characteristics capturing describing characteristics method affect organization important factor evaluating comparing methodologies 
characteristics include basis methodology availability training availability tool support 
characterization important understanding magnitude change involved selection methodology 
characteristics mind set values developed methodology selection problem 
rephrasing initial problem selecting appropriate methodology particular software project root value hierarchy question software engineering methodology organization reduce development costs produce quality product question heart software engineering paradigm guides current research software engineering 
question distinct evaluation considerations identified 
costs associated new methodology second quality methodology provide specific issues software problem 
costs context include monetary impact types impact organization existing processes 
characteristics software methods relate evaluation considerations 
management usage characteristics belong area management issues issues costs effects methodology organization key 
technical characteristics deal functional behavioral structural view problem reflect quality evaluation consideration project requirements 
layer evaluation considerations refined 
refined values survey software engineering professionals 
survey requested professionals provide expert opinion relevance considerations proposed 
shows partial example value hierarchy developed methodology selection problem 
software engineering method organization reduce development costs produce quality products 
management issues project requirements example value hierarchy methodology selection cost methodology component reuse process 
functional requirements structural requirements behavioral requirements 
addition specifying evaluation considerations objectives determined 
evaluation considerations attempt maximize minimize consideration 
maximizing case alternative benefit evaluation consideration hand minimizing evaluation consideration negative impact due alternative 
regard evaluation considerations shown cost methodology objective minimizing costs 
specifying evaluation measures scales step developing decision analysis tool specify evaluation measures scale measuring degree attainment evaluation consideration 
evaluation measures provide quantifiable value compare degree attainment alternatives particular evaluation consideration 
developing accurate evaluation measures important step process provide basis decision 
evaluation measures accurately precisely capture alternative achieves consideration provide valid comparison alternatives 
challenge develop scales properly quantify evaluation measure 
combination scales may developed 
natural direct scales possible 
scales considered natural measurement widely accepted general audience 
direct scale measurement precisely reflects degree attainment 
le expenses dollars naturally directly measure attainment evaluation consideration cost acquiring software development tools possible constructed scales scale developed particular problem 
techniques different aspects problem addressed natural way allowing founded decisions 
order support controversial scales evidence research survey provided 
example evaluation measure worksheet corresponds evaluation consideration cost acquiring tools value hierarchy shown 
worksheet provides list questions focus points decision maker uses develop rating score evaluation consideration 
successful application worksheets alternative considered evaluated focus points 
evaluation consideration cost tool support objective minimize cost cost factor cost cost software development tool cost maintenance product expected duration cost train personnel tool cost install tool cost additional hardware required specific tool cost additional software required specific tool total example evaluation measure worksheet building multiobjective value function evaluation measure scale single dimensional value function particular aspect decision 
building multiobjective value function evaluation measures step building decision analysis tool 
multiobjective value function combination single dimensional value functions 
additive function applies weights single dimensional value functions 
tool meant applicable wide spectrum problems specifying weights advance knowledge problem domain users requirements system premature 
setting weights individual problem general tool accurate specific problem 
determining weights evaluation consideration decision software engineer problem hand 
technique determining weights 

consider evaluation considerations place order successively increasing value increments 

quantitatively scale value increments multiple important evaluation consideration 
evaluation considerations level importance value increments 
value increment assigned number greater 
solve smallest value increment setting total increments 
results step determine weights evaluation measures 
benefit setting value increment step equal number evaluation considerations determined equivalent level importance establishes tiers importance 
allows decision maker classify group evaluation considerations reasons criticality decision 
decision maker able consideration tier general application procedure 
empirical example suppose evaluation measures cost acquiring methodology cost tools component reusability 
rating evaluation measures relative importance decision maker determines order importance increasing value component reusability cost acquiring methodology cost tools 
suppose software engineer determines importance cost acquiring methodology times importance cost tools 
component reusability times important cost acquiring methodology 
cost acquiring methodology cost tools component reusability cost acquiring methodology cost tools setting sum weights cost acquiring methodology cost tools component reusability cost tools cost tools 
cost tools cost tools cost tools cost acquiring methodology component reusability due round error weights case equal minor adjustment 
example gives weights tools acquiring methodology reusability 
developing software analysis tool final step developing decision analysis tool leverage computational power computer 
developing software implementation user spared solving single dimensional value functions multiobjective value function 
additionally analysis techniques applied varying weights multiobjective value function 
software analysis allow user see graphically impact different factors problem selected weight 
software implementation combination java application microsoft excel 
example tool interface criteria selection dialog shown 
software analysis tool interface example application decision analysis tool tool provides fitness value alternatives compare software engineering approaches 
application decision analysis tool software engineer completing evaluation measure worksheets evaluation considerations relevant requirements specification 
additionally software engineer determine weights evaluation considerations gives decision maker ability customize tool problem 
result analysis guidelines available assist decision maker particular characteristics problem domain weights really assumptions set decision maker order capture relative importance evaluation consideration particular problem 
techniques sensitivity analysis provide decision maker ability test weighting assumptions varying values weights 
sensitivity analysis provides decision maker ability visualize variability decision tool weights assigned different values 
area needs analyzed pertains methodologies represented evaluation considerations 
order validate decision tool provides case studies described chapter iv implemented highest rated methodologies 
sets data collected implementations 
metrics collected phase engineering process 
metrics selected data collection focus productivity software engineer 
metrics selected description measurement shown 
metric description modeling effort measures number labor hours spent analysis design implementation phases software development size measures source lines code sloc number components classes developed complexity measures cyclomatic complexity implementation size effort ratio composed modeling effort size provides productivity measurement validation metrics second set data collected implementation form questionnaire group students graduate software engineering course 
course software evolution focuses post production phase software engineering including topics software maintenance programming understanding reverse re engineering designing systems maintenance 
questionnaire students asked identify number technical issues related software requirement 
order answer questions student received set analysis design models produced methodologies 
data collected questionnaire validate methodology ability represent technical issues problem 
summary chapter addresses approach determining appropriate software engineering paradigm particular problem 
process consists phases 
vital understand problem selecting software engineering paradigm 
number approaches taken offers benefit software engineer 
understanding differences approaches vital determining criteria base decision 
understanding led selection multiobjective decision analysis technique 
phase approach develop method making decision decision theory 
particular approach multiobjective decision analysis heart process 
steps building decision analysis tool examination criteria base decision 
establishing set criteria step determine valid evaluation measures quantify alternative 
determining fitness function individual evaluation measures step provides way evaluate alternatives objectives 
final step portion approach automate process computerized implementation allows fast variation analysis 
development decision analysis tool second phase approach apply tool software problems 
step required validate tool performance conducted set software problem case studies 
final phase analyze results metrics collected development system provide feedback accuracy paradigm suggested decision analysis tool 
chapter iii discusses development decision analysis tool described 
specifics value hierarchy evaluation measures developed basis decision analysis tool 
iii 
design faced making decision decision maker better position explain defend decision strategic ion making technique 
chapter ii presents framework may developing decision analysis tool 
software developers faced great number alternative software engineering methodologies 
differences methodologies vast 
methods detailed specifically describing activities tasks methodology provide guidance barely address certain issues 
addition level detail methodology take account real world constraints particular software problem 
way methodologies handle constraints limit problem solution space limits approaches taken transform requirements acceptable problem solution 
chapter framework described chapter ii applied problem selecting appropriate software engineering methodology measuring constraints methodology places solution 
developing decision analysis tool challenge building decision analysis tool determining appropriate software engineering methodology mechanics 
challenge capturing details important software engineer decision methodology appropriate 
provides overview steps taken develop tool 
step process define value hierarchy 
value hierarchy capturing values decision maker value hierarchy difficult steps developing decision analysis tool 
areas characterizing software methodologies technical management usage major evaluation considerations derived 
evaluation considerations management issues project requirements discussed chapter ii 
categories broken specific evaluation considerations 
initial set considerations management issues cost acquiring methodology costs involved adopting methodology 
factors impact category include costs incurred sending personnel available training purchase material cost acquiring support tools costs incurred purchasing tools support methodology 
tools include case tools programming development tools 
additionally cost factors additional hardware software operate tools maintenance costs tools training included 
availability reusable components incorporation previously developed software new system reduces design implementation testing phases software development 
category measure methodology ability incorporate predefined components system 
effects organizational business practices factor measures impact adoption methodology existing business practices organization 
business practice includes ideas tracking development progress milestones reports customer interactions 
compliance standards alternatives ability meet standards local organization outside organization national international factor measured category 
traceability changes category measures methodology support trace changes development lifecycle 
project requirements legacy system integration support integration legacy systems new project requirement measured category 
distribution ability support modeling distributed aspects problem focus category 
environment category measure methodology support developing software systems environments heterogeneous hardware software dynamic system structure methodology ability develop software capable handling removal system components manner detrimental users system considered category 
interaction category determines methodology ability handle interaction system level components entities outside system human users systems 
scalability category measures methodology ability develop software capable handling removal system level resources minimizing impact users 
agility robustness focus category measure methodology ability create flexible software systems resilient dynamic changes environment 
considerations developed number literature sources compiled list software engineering professionals academia industry government survey questionnaire internet 
order increase survey participation announcement distributed software engineering professionals electronic mail lists maintained object management group omg university maryland agent web software engineering research network university calgary 
addition broadcast announcements requesting participation placed related moderated newsgroups comp ai comp software eng 
requests sent directly number respected academics researchers industry leaders 
copy survey internet section appendix period response collection set weeks 
period valid responses collected 
responses available section appendix survey began basic demographic questions order develop profile responders 
responders people indicated associated academic community responders associated government organizations associated industrial commercial sector 
experience seventeen indicated years experience field 
responders categorized having years experience responders indicated years exp 
survey collected opinions responders importance evaluation consideration proposed decision thoughts suggested factors relative weighting management technical categories additional possible factors 
evaluation considerations proposed responders asked rate considerations scale zero 
additionally responders leave considerations rated 
results portion survey stacked bar chart 
chart shows number scores nr factor received 
set scores factor received indicates responders believed technical issues important management issues 
shows average scores considerations received 
view data clear responders felt emphasis technical issues problem issues related management factor decision 
number responses rating distribution meth tool reuse org stan chan leg dis env str int sca agi rating management issues technical issues scores evaluation considerations proposed evaluation consideration ratings average rating proposed evaluation considerations nr average rating management issues technical issues meth tool reuse org stan chan leg dis env str int sca agi evaluation consideration survey asked basing weights evaluation considerations relative considerations issues category appropriate determining weights relative considerations 
majority responses determine weights relative considerations 
responders provide opinion total weight major issues 
trend seen fourteen responders felt technical issues impact decision management issues 
hand responders felt management issues weigh decision 
responders indicated sets issues equal weight 
remaining responders specify particular partitioning 
shows data gathered particular question 
management issues technical issues number responses partition weighting partition survey posed question important factors missing 
alternatives suggested cost category 
responders indicated factors significance problem cost benefit ratio cost savings productivity gains benefit new methodology great mitigate impact initial cost 
management factors suggested availability tools experience base appropriate evaluate maturity methodology 
considerations area included availability tools opposed just cost experience base methodology 
requested suggestions technical issues submitted 
research survey results changes list proposed evaluation considerations 
similar categories dynamic structure scalability combined form single category organizational practices compliance standards effects change cost acquiring methodology tools 
methodology maturity added list order capture aspect decision 
complete value hierarchy shown 
addition specifying evaluation considerations factors objectives goals evaluation measures required fully define values decision maker 
section looks factors developing evaluation measures evaluate different alternatives 
evaluation considerations measures objectives section looks decomposition major evaluation considerations describing factors important decision making process objectives categories definition evaluation measures rate alternative respect consideration 
evaluation consideration set related measurement questions focus points provided ascertain degree attainment methodology particular consideration 
focus points measure level attainment methodology achieves consideration necessary constructed scale rating alternatives 
selection type problems methodology selection real time systems see section focus points answered simply 
unfortunately focus points tend subjective 
difficult analyze compare methodologies level granularity 
order derive refined rating evaluation considerations measured zero rating system exception 
software engineering method organization reduce development costs produce quality products 
management issues project requirements methodology selection value hierarchy zero rating system point scale focus point 
compared methodology selection developing real time systems approach score zero represents score represents scale allows intermediate levels achievement giving decision maker ability credit methodologies recognize issue provide level cost acquiring methodology tool support component reuse methodology maturity organizational business practices enterprise integration distribution environment dynamic structure scalability interaction agility robustness support issue 
technique reduce level subjectivity alternative rating decision maker careful level scrutiny alternative analyzed 
order assist decision maker attempt standardize ratings guidance rating focus point included discussion evaluation considerations 
management issues category evaluation considerations management usage characterizations software methodologies 
phrase management issues cover characteristics evaluation considerations branch value tree focus issues related methodology develop software 
evaluation consideration management issues sub tree cost acquiring methodology support tools focuses costs associated selecting new methodology 
costs organization faced include acquiring software tools project development material personnel training 
impact cost methodology significant factor decision particularly organization experts regard alternative novices regard 
evaluation consideration management issues sub tree organizational business practices impact methodology current business practices organization 
organization better position estimates regarding software projects experience previous software projects 
defined process underlying idea improvement processes capability maturity model cmm 
organization meeting cmm requirements management prefer methodology allow organization continue meet requirements 
sections lowest level evaluation considerations management issues explored 
evaluation considerations discussed regard objective consideration criteria questions decision maker evaluate alternatives 
cost acquiring methodology support tools software engineering methodology investment organization order ensure quality products 
methodology affords organization repeatable process estimates projects 
process depends knowledge experience software professionals reasonable assumptions project estimation 
faced decision selecting new methodology decision maker take account financial impact organization order adopt methodology 
properly methodology education training key aspects explored 
academic institutions approach instruction software engineering different ways 
part focus specific methodologies underpinnings methodologies give students broader exposure various software engineering techniques 
additionally experience major factor producing software problem textbook solution 
software engineering balance art science 
providing training organization software developers required ensure science practice required perfect art 
focus points category intended help decision maker evaluate financial impact organization methodology selected 

cost train personnel methodology options available organization order provide training employees 
managers may decide send software professionals training programs may develop house training classes 
case costs involved 
obvious cost actual training class seminar 
factors involved 
example organization fund travel expenses employees attend training classes local area 
manpower lost current existing projects people sent away training 

cost additional material methodology sending personnel training classes important step properly learning methodology area organization needs consider additional material employees 
costs additional material may include textbooks professional journal magazine subscriptions computer training example 
regards computer training important combine cost items category computer training software preferred solution personnel training included rating 
hand computer training software supplemental training program appropriate include category 
addition acquiring methodology organization incurs costs acquisition software support tools 
software developers gain benefits tool support methodology 
tool ensures information required representation collected rules method enforced 
support designer ensure representation fulfills requirements models 
additionally tools provide automated analysis models ensure correctness 
automated tools provide transformation support different models phases methodology 
focus evaluation consideration compare cost purchasing similar tools alternative methodologies 
previous evaluation consideration costs acquiring tools rated different ways 
costs recorded actual amount purchase time normalized project range 
details focus points 

cost software development tool factor looks costs tools directly support methodology 
order valid comparison tools support phases development 
done normalized cost support development tool derived dividing cost tool number development phases methodology supports 

cost maintenance product expected duration purchasing software may require contracted maintenance 
maintenance contract purchased required alternatives similar plan 
event similar options available decision maker estimate potential cost maintenance event cost organization 

cost train personnel tool educating organization methodology training tool considered 

cost install tool installing tools organization systems factor consider determining cost tool 
options available organizations distribution software 
particular option labor costs considered 

cost additional hardware required specific tool event tools require hardware platform organization new system need purchased 

cost additional software required specific tool likewise tool may require specific type software running operating system order operate 
software available tool unusable 
evaluating set alternatives important compare set factors 
cases options training available methodology decision maker needs determine similar option achieve objective necessary develop house training 
example training seminar may available methodology 
alternative contract expert methodology develop course 
important issue comparing methodologies category normalization 
way normalize costs determine person value 
alternative normalization project order accurate comparison normalization alternatives 
objective evaluation consideration minimize cost acquiring methodology support tools 
summary factors evaluation consideration worksheet 
completing worksheet decision maker normalized cost focus point 
evaluation consideration cost acquiring methodology support tools objective minimize cost cost factor cost cost train personnel methodology cost additional material methodology cost software development tool cost maintenance product expected duration cost train personnel tool cost install tool cost additional hardware required specific tool cost additional software required specific tool total cost acquiring methodology support tools worksheet organizational business practices developing software product requires just methodology software engineering 
organizations develop house standards practices software projects adhere 
additional activities planning organizing staffing project tracking control developed manage costs personnel 
activities usually developed lessons learned past projects management committed activities corrected problems encountered previous project developments 
management processes usually time driven developed estimate project time potential projects 
resources manpower money effect time project 
software development generally event driven phase begins ends 
mind management establishes project milestones developers complete 
tracking milestones deliverables allows monitoring progress development 
method able project management framework 
focus points evaluate alternatives respect organization process 

method provides planning techniques lead milestone definitions project plans consistent method implementation language focus point measure method ability lend models existing project management framework 
probably necessary project management framework methodology flexible project management framework required milestones phases methodology alternative methodology phases certain milestones removed methodology phases broken steps 
additionally method judged fit current management process major modifications models 
guidance methodology defines macro micro level development process compatible existing project management framework methodology describes micro level development process incorporated organizations macro level project management framework methodology describes set models process 
method analysis techniques reviews help gauge progress development ability perform analyses project development provide ability ensure consistency completeness 
catching problems early analysis design expensive fix implementation post development phases 
guidance models representational progress development models indirectly representational progress example model versioning models representative development progress 
representations clear easy understand design reviews variety techniques available representing models methodology 
representations graphical representation easier understand larger audience formal methods 
focus point looks ability representations directly method order describe characteristics proposed system interested parties 
guidance models familiar easy understand models complex understandable models unfamiliar complex 
ability rapidly develop high level design representations analyzed determine feasible design approach beneficial able prove feasibility certain requirements prior implementing entire solution 
likewise evaluating different design alternatives high level ensure best approach taken 
guidance high level designs rapidly developed analysis high level designs rapidly developed analysis techniques defined rapid development available 
method helps partition system manageable pieces development team members ability clearly delineate phases methodology allows partitioning project different members development team 
guidance set models representing entity independent set models dependencies subsets models partitioned dependency models high making partitioning difficult organization new software development process place 
faced decision particular methodology methodology needs able incorporated process 
representations methodology able comp ly applicable standards established process 
focus point consider evaluating alternatives ability comply standards 
method establishes enforces defined representation standards view stage development establishing enforcing defined representations methodology providing degree formality 
greater degree formality representation obscure open interpretation representation furthermore having standards set representations allows improved understanding project organization 
guidance syntax semantics models defined syntax models defined syntax semantics defined projects progress phases software engineering methodology inevitable changes requirement change clarification customer 
methods ability handle changes development process inherent allowing designer refine enhance design evaluate design alternatives 
focus point provided evaluating methods capability tracing changes 
consideration 

method provides hierarchical forms types representations hierarchical form representation important change consistent models 
factor measures method ability allow changes lower levels impacting big picture regard higher levels 
likewise factor measures method ability allow changes higher levels impacting lower levels 
guidance low level high level changes effecting representations levels low level changes effecting high level representations changes isolated zero rating scale summarizes focus points evaluation evaluation consideration organizational business practices objective maximize rating factor rating method provides planning techniques lead milestone definitions project plans consistent method implementation language methodology defines macro micro level development process compatible existing project management framework methodology describes micro level development process incorporated organizations macro level project management framework methodology describes set models process method analysis techniques reviews help gauge progress development models representational progress development models indirectly representational progress example model versioning models representative development progress representations clear easy understand design reviews models familiar easy understand models complex understandable models unfamiliar complex ability rapidly develop high level design representations analyzed determine feasible design approach high level designs rapidly developed analysis high level designs rapidly developed analysis techniques defined rapid development available method helps partition system manageable pieces development team members set models representing entity independent set models dependencies subsets models partitioned dependency models high making partitioning difficult method establishes enforces defined representation standards view stage development syntax semantics models defined syntax models defined syntax semantics defined method provides hierarchical forms types representations low level high level changes effecting representations levels low level changes effecting high level representations changes isolated total organizational business practices worksheet methodology maturity maturity methodology factor play important part decision process 
methodologies mature software developers 
order measure maturity methodology focus points attempt derive availability support tools published training material 
addition availability tools material number type systems created paradigm indicate maturity methodology 
fact systems developed methodology provides level validation methodology successful 
focus points provided evaluating methodology alternatives regard methodology maturity 
support tools available methodology availability tools may vary greatly 
methodologies entrenched mainstream industry tools span gambit low cost educational aids high cost industrial strength tools 
investment companies tools indicates acceptance methodology 
side spectrum new methodologies may tools designed support may experimental developed demonstrate concepts 
ratings category indicate higher scores methodologies industrial strength tool support lower scores methodologies experimental tool support 
guidance multiple commercially developed tools available multiple developed research tools available support tools available 
training material available methodology review available literature methodology helpful determining maturity methodology 
rating system case score methodology published book higher published journals conference papers 
discrimination type publication considering methodologies 
guidance published textbooks training manuals commercially developed training seminars computer training available material published journals conference proceedings material may limited technical reports white papers training available 
systems developed methodology exist focus point consideration looks history methodologies 
methodology employed create industrial strength applications higher score develop small demonstration projects 
guidance systems developed systems developed systems developed summarizes methodology maturity evaluation consideration uses zero rating system scoring alternatives 
evaluation consideration methodology maturity objective maximize rating factor rating support tools available methodology multiple commercially developed tools available multiple developed research tools available support tools available training material available methodology published textbooks training manuals commercially developed training seminars computer training available material published journals conference proceedings material may limited technical reports white papers training available systems developed methodology exist systems developed systems developed systems developed total methodology maturity worksheet integration reusable components existing components development system reduced component known appropriately time involved tying component system time take component 
desirable reuse components reused assist development system 
component reuse considered early development process system developed may exhibit operational characteristics desired customer 
focus points consider evaluating methodology support comp reuse 

method encourages separating requirements essential negotiable classes negotiable classes identify opportunity reuse components designed reuse meet operational characteristics 
requirement essential may possible find component guaranteed meet operational characteristics case reuse possible 
negotiable classes hand strict requirement room evaluate tradeoffs different components 
guidance models differentiate essential negotiable classes representations available previously developed components representations available incorporate components developed previously methodology essential negotiable classes differentiated representations previously developed components exist 
method encourages designers suggest alternatives provided existing components negotiable requirements method support component reuse valuable allows evaluation alternative design choices 
guidance methodology suggests spiral approach alternatives integrated system evaluation methodology suggests evaluation alternatives decision proceeding methodology suggests evaluation design alternatives software reuse goal software engineering methodologies important look alternative methods support reuse 
focus points summarized worksheet shown 
evaluation consideration reusable components objective maximize rating factor rating method encourages separating requirements essential negotiable classes negotiable classes identify opportunity reuse models differentiate essential negotiable classes representations available previously developed components representations available incorporate components developed previously methodology essential negotiable classes differentiated representations previously developed components exist method encourages designers suggest alternatives provided existing components negotiable requirements methodology suggests spiral approach alternatives integrated system evaluation methodology suggests evaluation alternatives decision proceeding methodology suggests evaluation design alternatives total reusable components worksheet project requirements second category evaluation considerations technical characterizations software methodologies 
phrase project requirements cover characteristics evaluation considerations branch value tree focus issues related functional behavioral structural aspects project developed 
focus technical characteristics derived current literature regard issues important generation business oriented information systems 
domain characteristics similar domains particularly regard heterogeneous environments system integration geographic distribution resources 
identifying strengths weaknesses methodologies regard method supports considerations key developing system high quality low cost manner 
legacy system integration major benefits software ability automate processes tedious humans 
point time processes automated due complexity process inability organization fund automation projects 
reasons tends piecemeal development projects automate organization processes 
new projects arise ability tie product new project existing software products emerged goal considered 
purpose focus points evaluation consideration rate methodologies ability tie new system organization related systems 

methodology provides representations allow incorporation legacy system documented interface documented interface legacy system methodology provide form representation model new system 
important order ensure communication systems correct ensure compatibility issues data types handled properly 
guidance representations model legacy system structural functional behavioral aspect representations capture structural view legacy system representations model legacy systems available 
methodology provides representation referencing legacy system functions methods legacy system directly compatible proposed system focus point evaluates methodology supports incorporation legacy systems functionality 
guidance legacy system modeled white box system allowing integration interfacing methods reuse intermediate methods legacy system modeled black box system allowing integration interfacing methods representations model legacy system functions methods available factors category rated zero scale 
evaluation consideration objective maximize rating 
summary focus points worksheet 
evaluation consideration legacy system integration objective maximize rating factor rating methodology provides representations allow incorporation legacy system documented interface representations model legacy system structural functional behavioral aspect representations capture structural view legacy system representations model legacy systems available methodology provides representation referencing legacy system functions methods legacy system modeled white box system allowing integration interfacing methods reuse intermediate methods legacy system modeled black box system allowing integration interfacing methods representations model legacy system functions methods available total legacy system integration worksheet distribution fundamental requirement complex software systems distribution 
exact form distribution problem vary 
requirement may require integrating information resources physically distributed systems :10.1.1.25.7165
different type distribution may come decision distribute computation systems 
case ability satisfy requirement aided methodology provides representational support distributed elements assists developer making decisions appropriate implementation software system 
evaluation consideration focus points provided 

method provides representation specifying system network configuration focus point assists decision maker evaluating methodology ability potential impact different system configurations 
rating category simply case representation detail captured representation 
guidance advanced models available capture data processor load network latency models available capture essential network configuration data processor type nodes addresses network configuration models available 
method provides representation specifying deployment entities network focus point expands previous regard detail inherent representation 
specifically ability annotate representation deployment software components measured 
guidance models visually represent specific entities network components models correlate entities network components representations available 
method provides ability specify locations resources system network focus point looks specific detail representation system configuration resources 
guidance models visually represent specific resources network components models correlate resources network components representations available factors category rated zero scale 
evaluation consideration objective maximize rating 
summary focus points worksheet 
environment requirement complex systems ability heterogeneous hardware software environment 
evaluation consideration attempts measure methodology support implementing system designs multiple platforms 
ideal course able single implementation works required platforms possible 
ability minimize amount rework needed port code available platforms important reduces opportunity bugs 
proposed focus points evaluating methodology support heterogeneous environments 
evaluation consideration distribution objective maximize rating factor rating method provides representation specifying system network configuration advanced models available capture data processor load network latency models available capture essential network configuration data processor type nodes addresses network configuration models available method provides representation specifying deployment entities network models visually represent specific entities network components models correlate entities network components representations available method provides ability specify locations resources system network models visually represent specific resources network components models correlate resources network components representations available total distribution worksheet 
programming language implementation supported software hardware systems program deployed general methodology developed theoretically specific implementation language mind 
representations methodology may translate readily particular paradigm programming languages object oriented methodologies realized appropriately object oriented language procedural language pascal 
guidance language supported software hardware systems requiring specialized compilers interpreters translators language supported software hardware systems special compilers interpreters emulators required particular systems language supported software hardware system 
methodology supports deployment modeling engineer easily determine necessary changes case system specific commands faced developing systems heterogeneous environments ability specify details system configuration deployment diagrams provides developers vital information considering issues system specific commands system calls operating system 
guidance hardware software environment entities visually mapped system deployment diagrams correlation entities systems exist system deployment modeled 
programming languages supported methodology implementation requires little additional time compilation system type developing version implementation systems software maintenance troublesome 
guidance programming languages require specialized libraries particular systems sub components require specialized libraries example graphic components particular systems components require specialized libraries factors category rated zero scale 
evaluation consideration objective maximize rating 
summary focus points worksheet 
evaluation consideration environment objective maximize rating factor rating programming language implementation supported software hardware systems program deployed language supported software hardware systems requiring specialized compilers interpreters translators language supported software hardware systems special compilers interpreters emulators required particular systems language supported software hardware system methodology supports deployment modeling engineer easily determine necessary changes case system specific commands hardware software environment entities visually mapped system deployment diagrams correlation entities systems exist system deployment modeled programming languages supported methodology implementation requires little additional time compilation system type programming languages require specialized libraries particular systems sub components require specialized libraries example graphic components particular systems components require specialized libraries total agility robustness environment worksheet technical requirement complex systems fault tolerance robustness 
project requirements require level robustness 
fact robustness considerations may dictate system architecture 
degree system fault tolerant system sub system level detect recover failures level minimize impacts errors working environment 
aim focus points consideration measure methodology support developing agile robust software 

methodology representations provide ability model normal processing exception processing focus point considers methodology ability partition normal processing events exceptional events 
considering type appropriately system developed operate correctly types situations 
guidance representations available allowing normal exceptional processing differentiated representations available model processing representations available 
method provides techniques model dynamic system reconfiguration ability system continue providing services certain system resources added deleted important factor robustness 
focus point examines methodology considers issues 
guidance behavior models show instantiation components trigger events non triggered pseudo random events behavior models sequence diagrams show instantiation components trigger events representations available 
method provides techniques analyze system performance configurations analyzing testing possible configurations system important area prevent problems may implementation 
guidance techniques exist analyzing static dynamic configurations techniques exist analyzing statically defined configuration technique available factors agility robustness rated zero scale 
evaluation consideration objective maximize rating 
summary focus points worksheet 
evaluation consideration agility robustness objective maximize rating factor rating methodology representations provide ability model normal processing exception processing representations available allowing normal exceptional processing differentiated representations available model processing representations available method provides techniques model dynamic system reconfiguration behavior models show instantiation components trigger events non triggered pseudo random events behavior models sequence diagrams show instantiation components trigger events representations available method provides techniques analyze system performance configurations techniques exist analyzing static dynamic configurations techniques exist analyzing statically defined configuration technique available total agility robustness worksheet dynamic structure scalability functional requirement software projects deals scalability 
focus points category directed methodology support designing systems allow incorporation additional resources software components minimal user disruption 
dynamic integration beneficial user system go additionally approach supports characteristic forward looking system may day legacy system needs integrate new system 
system designed mind clear interfaces integration 
focus points rate evaluation 

methodology provides techniques dynamic integration new subsystems resources minimal disruption existing system ability add new subsystems resources disturbing normal operation factor important relying system 
methodology accounts dynamic integration techniques reduces impact fielding new system features 
guidance techniques adding resources subsystem allow line updating techniques adding resources subsystems require system taken line technique available 
methodology provides techniques removal existing subsystems resources minimal disruption remaining system just adding subsystems resources seamlessly techniques methodology removal entities important allows system operation degraded state 
guidance techniques removing resources subsystem allow line updating techniques removing resources subsystems require system taken line technique available factors category rated zero scale 
evaluation consideration objective maximize rating 
summary focus points worksheet 
evaluation consideration dynamic structure scalability objective maximize rating factor rating methodology provides techniques dynamic integration new subsystems resources minimal disruption existing system techniques adding resources subsystem allow online updating techniques adding resources subsystems require system taken line technique available methodology provides techniques removal existing subsystems resources minimal disruption remaining system techniques removing resources subsystem allow online updating techniques removing resources subsystems require system taken line technique available total interaction dynamic structure scalability worksheet final technical evaluation consideration interaction 
interaction deals products ability deal human user 
human interface important piece software change order satisfy user 
focus points category directed methodology ability deal human factors support architecturally separating user interface components 

method provides representations allow user visualize user interface interface system important component system user 
ability prototype interface allows user accurately define expectations early stage 
guidance representations exist visualizing user interfaces representations exist identifying interface components representations available 
method models assists predicting information processing decision making demands placed user models showing expected data processing pointing user need provide input important step allow developer design system balanced dependencies user system processing 
type information system designers able load processors equally ensure processor bottleneck entire system 
guidance models representing user interaction comprehensively defines requirements user models available behavior models representing user interaction representations available 
method promotes partitioning user interface processing processing user interfaces components system may require changing reasons aesthetics 
reason methodology promoting partitioning interface processes ensure system tied interface 
guidance method enforces separation user interface components processing method suggests separation user interface components processing method promote partitioning user interface processing factors category rated zero scale 
evaluation consideration objective maximize rating 
summary focus point worksheet 
building multiobjective function evaluation measures established possible build multiobjective function 
multiobjective function normalized additive function combines proportional values fitness values particular consideration 
individual rating evaluation consideration calculate value single dimensional value function 
value multiplied weighting factor determined decision maker represent importance factor decision 
single dimensional objective factors guidelines determining weights explored 
evaluation consideration interaction objective maximize rating factor rating method provides representations allow user visualize user interface representations exist visualizing user interfaces representations exist identifying interface components representations available method models assists predicting information processing decision making demands placed user models representing user interaction comprehensively defines requirements user models available behavior models representing user interaction representations available method promotes partitioning user interface processing processing method enforces separation user interface components processing method suggests separation user interface components processing method promote partitioning user interface processing total interaction worksheet single dimensional value functions single dimensional value function provides fitness value single evaluation consideration regard alternative 
order multiobjective function normalized single dimensional value function meet properties 
lowest value single dimensional function return zero 
second property greatest value function return 
research types functions exponential functions evaluation considerations continuous nature linear functions evaluation considerations discreet 
additionally exponential function able model different levels significance particular score may 
example monotonically decreasing exponential function region function rating degrades slowly region rating degrades quickly 
linear functions apply uniform change rating entire range 
linear functions evaluation considerations zero rating scheme evaluated linear function 
versions linear function 
evaluation considerations objective maximizing rating 
cases function evaluation consideration 
second function evaluation considerations objective minimizing rating 
cases function evaluation consideration 
proposed evaluation considerations requiring linear function equation 
exponential functions evaluation considerations take range values exponential function offers simple way normalizing rating 
exponential curve allows relative value increases rent ranges curve 
monotonically decreasing exponential function 

exp 
exp high high low max max 
high 
high low 
rating 
rating 
infinity exponential constant approaches infinity function linear 
constraint monotonically increasing exponential function evaluation consideration cost acquiring methodology support tools consideration proposed requires exponential formula 
objective minimization cost requires monotonically decreasing version equation 
particular category comparing relative costs methodology organization variables equation determined premise 
variables decision maker provide required solve equation 
consider high absolute maximum value organization willing invest methodology 
consider low minimum value organization invest probably zero dollars 
order determine variable determined 
consider variable target investment organization willing 
midpoint function values left equation desirable values right 
formulation limits penalties alternative cost target investment 
hand penalty grows significantly faster alternatives costs greater target investment 
order calculate values target high low specified 
values normalized target equation value determined normalized exponential constant 
unfortunately closed form equation available calculating determined looking 
calculated 
exp 
exp low high low 
low 
high 
low 
high target 
high low 


infinity known equation completed 
infinity weights normalized exponential constants issues go determining weights evaluation considerations 
developing relative rating importance consideration 
section explores evaluation considerations provides guidelines 
second issue relative weights normalizing values appropriate tool covered section 
high low 
determining impact evaluation consideration measure problem greatest effect choice decision maker 
ideal world assessor required rate methodology 
methodology going change evaluated new methodology 
impact software project decision lies importance consideration category 
multiobjective details place determining weights scores evaluation consideration multiobjective function formed 
multiobjective function methodology selection problem 

mapping index values evaluation consideration 
index evaluation consideration cost cost acquiring methodology support tools bus organizational business practices mat methodology maturity reuse availability reusable components ent enterprise integration dis distribution env environment ar agility robustness dss dynamic structure scalability int interaction index mapping developing software implementation developing software implementation requires process implementation model implementation strategy 
section outlines process modeled implementation described section 
cost bus mat dis env ar dss int applying decision tool framework decision analysis tool details determined tool ready provide decision maker fitness value number methodology alternatives particular software problem 
distinct steps applying decision analysis tool 
determine weights evaluation considerations 
score methodology answers focus points 
calculate multiobjective function methodology 
select methodology software development steps explained chapter iv 
additionally chapter iv provides examples analysis tool application number software requirements 
automation decision analysis tool order decision analysis tool useful decision maker software implementation process required 
addition calculating number single dimension value functions multiobjective function alternative ability decision appropriate software engineering methodology requires number calculations test sensitivity assumptions decision maker specifying weights evaluation considerations 
decision analysis tool implemented java applet 
applet allows easy distribution number user platforms 
inserted web page 
applet allows implementation graphical user interface data gathering control execution flow computations 
additionally tool executed application allowing user write data disk analysis auxiliary application 
interface designed steps described section distinct step individual panel applet 
analysis process discussed section generalized comparing number methodologies application designed analyze alternatives time 
order rate alternatives focus points worksheets figures incorporated interface 
addition java applet data analyzer developed microsoft excel 
data analyzer designed leverage software packages graphing functionality 
user manual installation operation software engineering methodology decision analysis tool data analyzer contained appendix summary chapter applied decision making framework discussed chapter ii problem selecting appropriate software engineering methodology particular problem 
problem statement generalized value hierarchy developed areas methodology characterizations 
determining evaluation considerations value hierarchy details evaluation measures defined 
research set criteria questions focus points decision maker answers method determine rating category 
ratings single dimensional objective functions combined weights particular category determine multiobjective fitness value 
chapter ends description process apply decision tool software methodology decision problems software implementation developed automate calculations 
chapter iv expands application process described section demonstrates application tool different software problems 
iv 
decision analysis application step defining decision making process software methodology selection problem select appropriate framework described chapter ii 
chapter iii framework selected case multiobjective decision analysis developed decision analysis tool include value hierarchy opinions members software engineering multiagent system communities focus point rating systems evaluation considerations value hierarchy objective functions comp ratings comparison 
chapter demonstrates application decision analysis tool 
section refines application process defined section 
section describes alternative methodologies demonstration 
software requirements analyzed step step section 
section describes analysis conducted assumptions decision analysis 
decision analysis application process section refines step process application described section 
steps determine weights rate evaluation measures compute multiobjective function select methodology software requirement problem 
determining weights phase application decision analysis tool focused transforming weights relative weights normalized total 
step user determine evaluation considerations important particular decision 
weights considerations set zero 
user ranks level importance evaluation consideration 
step determines level importance factor decision ordering considerations successive level importance 
technique described section applied normalize weights 
rating evaluation measures phase applying decision analysis tool rate alternatives criteria questions developed evaluation consideration 
questions require qualitative rating important remember multiple alternatives compared 
best decision makers ability scores question relative alternatives 
computing multiobjective function final phase application decision analysis tool computation multiobjective function 
data gathered previous phases heart step 
derived values weights ratings generate single normalized fitness value variable substitution 
methodology selection completing steps decision analysis tool decision maker quantitative rating alternative methodologies 
ratings methodology fitness respect appropriate evaluation considerations decision maker biases considerations weights 
issue tradeoffs involved methodologies may captured framework 
example take issue distribution 
problem involve distribution sort decision maker weight category zero 
completing decision analysis tool may yield results particular agent oriented approach rates higher particular object oriented approach 
tool able capture tradeoff agent oriented approach develops problem way distributed 
implementation agent oriented approach introduces number performance problems overhead caused distributed communication features inherent methodology 
tradeoffs evident decision making problem decision maker cognizant fact attempt weigh impact decision 
considerations decision maker may informed decision software engineering methodology appropriate software requirement 
software engineering methodology alternatives order validate decision analysis tool specific alternative software engineering methodologies evaluated set problems 
large number methodologies exist paradigms object oriented agent oriented formal methods functional decomposition component ware alternatives evaluated set software requirement problems 
set problems mase booch object oriented analysis design yourdon modern structured analysis selected representative methodologies agent oriented object oriented traditional software engineering respectively 
methodologies define models representations deal analysis design phases software development 
additionally case tools exist support method 
applications decision analysis tool example systems selected demonstrate application decision analysis tool 
systems represent application domains information systems real time systems intelligent systems 
applications selected particular representation particular methodology 
developed different methodologies popular tool validates decision particular approach 
assumed software engineer member software development organization order test management issues problem 
assumed engineer authorized acquisition methodology tools 
rating considerations second step process applying decision analysis tool determining scores relevant evaluation considerations 
step completed order case studies data 
alternative methodologies selected section evaluated evaluation considerations 
normal application relevant considerations evaluated 
evaluation consideration ratings determined addressing focus points chapter iii 
step appropriate worksheets figures 
order rating important considerations rated order chapter iii 
cost acquiring methodology support tools evaluation consideration rated 
cost acquiring methodology support tools rating cost evaluation consideration required data gathering 
responses evaluation consideration require real costs training classes material resources considered 
additionally tool support selected mase booch rational rose respectively selected availability author price currently charged 
yourdon methodology specific case tools available tool providing level support rose selected 
prices reflect single user license agreement 
summary costs shown 
evaluation consideration cost acquiring methodology support tools objective minimize cost factor mase booch yourdon rating rating rating cost train personnel methodology cost additional material methodology cost software development tool cost maintenance product expected duration cost train personnel tool cost install tool cost additional hardware required specific tool cost additional software required specific tool total maximum allowable expenditure preferred expenditure minimum allowable expenditure cost acquiring methodology support tools worksheet summary addition data collected cost necessary determine value 
formula equations needed find high target high low table value corresponding 
value known equation calculates high low high low exponential single dimensional value function equation determining fitness evaluation consideration 
data shown experimental mase significantly expensive mature commercially refined methodologies 
counterpoint detail evaluation consideration methodology maturity 
evaluation consideration section scores methodology accepted industry higher experimental alternatives 
organizational business practices evaluation consideration measured organizational business practices 
assumption evaluation consideration rated project management process existed business practices fictional organization 
generally speaking methodologies rate similarly 
provide defined methodology development software project booch methodology specifically addresses software development micro macro development level higher rating 
availability techniques analyze progress development methodologies provide support 
partitioning development system area mase score high methodologies components dependent communication protocols components 
affects ability divide base units 
mase rate higher ability rapidly generate high level representations feasibility analysis 
fact tool support mase provides verification testing ensure design free communication deadlock 
focus points consideration rated consideration 
summary methodologies ratings category shown 
evaluation consideration organizational business practices objective maximize rating factor mase method provides planning techniques lead milestone definitions project plans consistent method implementation language method analysis techniques reviews help gauge progress development representations clear easy understand design reviews ability rapidly develop high level design representations analyzed determine feasible design approach method helps partition system manageable pieces development team members method establishes enforces defined representation standards view stage development method provides hierarchical forms types representations rating booch rating yourdon rating total organizational business practices worksheet summary methodology maturity noted methodology maturity consideration counterpoint cost consideration 
examples software commercially available little expense java comes mind part methodology tools acquired little immature 
industrial strength case tools generally come industrial strength price tag 
methodology mature training material methodology expensive training done technology training form books just academic papers 
case mase rated lower alternatives methodology developed 
summary scores 
evaluation consideration methodology maturity objective maximize rating factor mase rating booch rating support tools available methodology training material available methodology systems developed methodology exist yourdon rating total methodology maturity summary reusable components final management evaluation consideration reusable components 
case mase booch allow incorporation reusable components support greater booch 
fact models omg versions uml derived booch module diagrams 
support mase provides ambiguous differentiation developed component newly designed component 
component reuse structured analysis complicated 
system designed paradigm highly cohesive coupled making difficult separate subsystem entire system 
summarizes ratings reusable components 
evaluation consideration reusable components objective maximize rating factor mase method encourages separating requirements essential negotiable classes negotiable classes identify opportunity reuse method encourages designers suggest alternatives provided existing components negotiable requirements rating booch rating yourdon rating total reusable components worksheet summary legacy system integration legacy system integration technical consideration evaluated 
legacy systems treated part reusable components components specific functionality 
agent system mase represent system agent wrapper developed specifically interact legacy system 
rest new system interact agent wrapper 
booch methodology hand supports legacy system integration module diagram 
due strong coupling cohesion yourdon methodology system integration difficult 
systems outside new system represented terminators dataflow diagrams 
summary ratings legacy system integration worksheet 
evaluation consideration legacy system integration objective maximize rating factor mase methodology provides representations allow incorporation legacy system documented interface methodology provides representation referencing legacy system functions methods rating booch rating yourdon rating total distribution legacy system integration worksheet summary distribution evaluation consideration scored 
case mase methodology clearly led pack 
part nature agent systems 
developed agents interact message passing system 
agents coupled communication needs take place 
requirement agents reside systems 
objects hand stringent rules 
underpinnings message communication system inherent object system 
methodologies support deployment diagram specifying system configurations mase diagram specify actual location agents booch version map processing resources 
yourdon support distribution vague 
terminators dataflow diagram distributed specific representation captures type information 
summarizes scores methodologies regard support distribution 
evaluation consideration distribution objective maximize rating factor mase rating method provides representation specifying system network configuration method provides representation specifying deployment entities network method provides ability specify locations resources system network booch rating yourdon rating total distribution worksheet summary environment factor decision environment 
case methodologies transformed implementation programming language supported various platforms required case studies 
object oriented languages java support mase booch methods readily functional techniques yourdon 
java portable different operating systems methodologies score 
deployment diagrams assist code developers recognizing potential locations code possible develop system handle operating system resides 
scores environment captured 
evaluation consideration environment objective maximize rating factor mase programming language implementation supported software hardware systems program deployed methodology supports deployment modeling engineer easily determine necessary changes case system specific commands rating booch rating yourdon rating programming languages supported methodology implementation requires little additional time compilation system type total environment worksheet summary agility robustness agility robustness consideration rated 
category agent oriented methodology rated higher methodologies 
nature agent system handle communication agents may known design time 
behavior models able represent expected exceptional behavior 
summary ratings agility robustness 
evaluation consideration agility robustness objective maximize rating factor mase rating methodology represent ations provide ability model normal processing exception processing method provides techniques model dynamic system reconfiguration method provides techniques analyze system performance configurations booch rating yourdon rating total agility robustness worksheet summary dynamic structure scalability evaluation consideration scored dynamic structure scalability 
case agent object oriented methodologies scored higher yourdon 
reason yourdon methodology scored low related coupling cohesion functions 
methodologies allow systems developed ways resources added deleted shutting system 
mase example uses agent wrapper concept interface resources system 
case agent corresponds resource wrapper agents learn existence wrapper agents 
knowledge source available initial communications 
may happen agent acts registration authority brokers case closed systems static particular agents 
systems developed booch methodology designed accept lists resources start execution order dynamic connections 
summary dynamic structure scalability consideration 
evaluation consideration dynamic structure scalability objective maximize rating factor mase methodology provides techniques dynamic integration new subsystems resources minimal disruption existing system rating booch rating yourdon rating methodology provides techniques removal existing subsystems resources minimal disruption remaining system total interaction dynamic structure scalability worksheet summary interaction evaluation consideration alternatives rated similarly booch rated higher 
booch methodology specifically addressed question developing concept user interface partitioning user interface processing processing 
methodologies provide support predicting decision making demands user respective behavior models 
major difference methodologies extent booch method suggests partitioning 
booch methodology promotes placing interface components separate classes 
yourdon methodology suggests placing interface requirements procedures generally coupled respective modules 
mase suggests modeling user roles separate roles system guidance regard developing interface part agent set internal components 
final summary ratings shown 
evaluation consideration interaction objective maximize rating factor mase rating method provides representations allow user visualize user interface method models assists predicting information processing decision making demands placed user method promotes partitioning user interface processing processing booch rating yourdon rating total interaction worksheet summary software requirement case studies section describes case studies evaluated application decision analysis tool 
addition information provided case assumption section holds 
case content search software requirement example information management system called content search system requirement statement shown 
concept system originally developed compare performance capabilities dynamic static multiagent systems 
case system requirements compare agent oriented object oriented methodologies 
requirement system provide enterprise search capability organization networked users 
organization determined feasible data storage technique large capacity hard drives personal computers workstations organization invest single shared data storage system 
requirement system determine location files may information user requires 
systems designated belong certain functional areas users able restrict search single functional area 
requirements mind step selecting appropriate methodology development determining factors relevant decision weight accordingly 
weighting evaluation considerations step weighting evaluation considerations determine evaluation considerations relevant particular problem 
categories analysis decision consideration relevant 
cost acquiring methodology support tools relevant 
approach problem software engineer part organization looking adopt methodology supporting tools 
organizational business practices relevant 
software engineer employee department engineer responsibility providing project updates interested parties outside department 
content search system requirements organization responsible collecting vital data variety subjects 
business practice organization follows teamwork information shared freely 
amount information collected necessitate large data storage area 
order reduce costs organization fixed storage devices employee local personal computer 
policy difficult share information 
problem design software system allow users locate sources information organization 
details include searching user able search documents specified key words phrases reporting system report results search order suggest higher priority relevant documents documents documents generated employees simple text documents formatting results information included results include location document name document number occurrences key words phrases scope functional areas organization user able specify particular functional areas need examined environment computer environment employees mix pcs running windows operating systems unix workstations content search system requirements methodology maturity relevant 
decision change new methodology require degree evidence produce quality software 
integration reusable components irrelevant 
library reusable components available software engineer 
legacy system integration irrelevant 
system required incorporate existing software systems 
distribution relevant 
users system require access different nodes network 
likewise data users require stored hard drives network 
environment relevant 
environment network mixture sun workstations running solaris os personal computers running windows nt 
agility robustness relevant 
users system expect predictability reliability 
dynamic structure scalability relevant 
organization growing new employees hired hardware systems need linked software system access data storage 
interaction relevant 
system provide interface user submit requests 
coarse partitioning evaluation considerations step refine ranking determining evaluation considerations level importance 
important level evaluation considerations consists rate issues constraints software requirement problem distribution environment interaction cost methodology support tools 
level ranking evaluation considerations important success project level achievement may negotiable 
agility robustness dynamic structure scalability assigned level 
problem organizational business practices methodology maturity considerations placed third level goal departments develop defined repeatable software engineering process 
step refinement determining relative weighting evaluation consideration regard important consideration 
evaluation considerations rank tier relative weight 
necessary determine boundary relative weight consideration higher rank relative consideration lower rank 
considerations selected done ordering considerations 
case evaluation considerations ordered alphabetically interaction compared agility robustness dynamic structure scalability compared organizational business practices 
tier evaluation considerations measure constraints problem determined decision maker twice important lower rank 
likewise tier negotiable considerations determined quarter times important lowest tier 
relative weighting determined step determine normalized weights evaluation consideration method described section 
illustration algebraic calculations shown subscripts defined 
worg 
worg war 

worg 
war 

worg 



worg 




worg 





worg setting sum weights worg war worg worg worg worg 

worg 

worg 

worg 

worg worg 
worg 
worg 
war 




weights determined relevant evaluation considerations step decision making process complete 
results step summarized 
rank evaluation consideration relative weight normalized weight cost methodology support tools distribution environment interaction agility robustness dynamic structure scalability methodology maturity organizational business practices content search weighting summary rating evaluation considerations step decision analysis score evaluation considerations 
focus points examined scored evaluation considerations determined relevant weighting step 
step documented section 
single dimensional value functions case summarized 
evaluation consideration fitness mase fitness booch fitness yourdon cost methodology support tools distribution environment interaction agility robustness dynamic structure scalability methodology maturity organizational business practices single dimensional value function fitness values case calculating multiobjective value functions complete decision analysis content search example multiobjective value function calculated 
accomplish step single dimensional value functions multiplied appropriate weight summed 
mase alternative multiobjective value determined var vint booch alternative calculated var vint yo alternative calculated var vint determining best alternative calculations assumptions decision analysis tool determined mase booch methodologies better yourdon methodology 
regard mase booch methodologies mase rated points higher booch methodology 
considering small ma difference methodologies decision maker advised contemplate results sensitivity analysis 
sensitivity analysis tests results systematically adjusting weight evaluation consideration maintaining ratio weights evaluation considerations 
sensitivity analysis documented section 
case weather monitoring station second example system evaluated weather monitoring system 
system case study object oriented development booch methodology 
suggested object oriented structured analysis appropriate techniques designing system problem lends object oriented architecture 
case object oriented approach compared potential agent oriented approach 
interesting factor sets problem apart previous requirement specific data acquisition 
additional details system requirements include specific sampling rates sensors 
managing real time data collection requirement important aspect problem 
requirements statement problem 
weighting evaluation considerations selecting methodology step weighing evaluation considerations 
relevant evaluation considerations need determined 
categories analysis decision consideration relevant 
weather monitoring station requirements system shall provide automatic monitoring various weather conditions 
specifically measure wind speed direction temperature barometric pressure humidity system shall provide derived measurements wind chill dew point temperature temperature trend barometric pressure trend system shall means determining current time date report highest lowest values primary measurements previous hour period 
system shall display continuously indicates primary derived measurements current time date 
keypad user may direct system display hour high low value primary measurement time reported value 
system shall allow user calibrate sensors known values set current time date 
weather monitoring station requirements cost acquiring methodology support tools relevant 
approach problem software engineer part organization looking adopt methodology supporting tools 
organizational business practices relevant 
software engineer employee department engineer responsibility providing project updates interested parties outside department 
methodology maturity relevant 
decision change new methodology require degree evidence produce quality software 
integration reusable components irrelevant 
library reusable components available software engineer 
legacy system integration irrelevant 
system required incorporate existing software systems 
distribution irrelevant 
requirements system sensors memory shared system storing sensory input 
environment irrelevant 
environment network single operating system single computer 
agility robustness relevant 
users system expect predictability reliability 
dynamic structure scalability relevant 
directly specified appropriate create system easily modified add additional sensor data system evolves 
interaction relevant 
system provide interface user submit requests trend data viewing current set conditions 
partitioning evaluation considerations step develop ranking determining evaluation considerations level importance 
important level evaluation considerations consists rate issues constraints software requirement problem interaction 
system dependent real time acquisition data agility robustness placed tier 
level ranking evaluation considerations important issues success project level achievement may negotiable 
dynamic structure scalability assigned level 
problem organizational business practices methodology maturity cost methodology support tools considerations placed third tier goal departments develop defined repeatable software engineering process 
step refinement determining relative weighting evaluation consideration regard important consideration 
case evaluation considerations ordered alphabetically interaction compared dynamic structure scalability dynamic structure scalability compared organizational business practices 
tier evaluation considerations measure constraints problem determined decision maker twice important lower rank 
likewise tier negotiable considerations determined quarter times important lowest tier 
determining relative weighting normalized weights evaluation consideration determined method described section 
illustration algebraic calculations shown subscripts defined 
worg worg 
worg 

worg war 


worg setting sum weights worg war worg worg worg worg 
worg 
worg worg 
worg 
worg 


war 
weights determined relevant evaluation considerations step decision making process complete 
results step summarized 
rank evaluation consideration relative weight normalized weight agility robustness interaction dynamic structure scalability cost methodology support tools methodology maturity organizational business practices content search weighting summary rating evaluation considerations step decision analysis score evaluation considerations 
focus points examined scored evaluation considerations determined relevant weighting step 
step documented section 
single dimensional value functions case summarized 
evaluation consideration fitness mase fitness booch fitness yourdon agility robustness interaction dynamic structure scalability cost methodology support tools methodology maturity organizational business practices single dimensional value function fitness values case calculating multiobjective value functions final step calculate multiobjective value function 
accomplish step single dimensional value functions multiplied appropriate weight summed 
mase alternative multiobjective value determined mat var vint booch alternative calculated mat var vint yourdon alternative calculated mat var vint determining best alternative calculations assumptions decision analysis tool determined booch methodology better approaches 
differences scores case greater case important information gained sensitivity analysis 
section describes results sensitivity analysis case study 
case cryptanalysis third case study evaluated intelligent system 
cryptanalysis system case study booch demonstrate object oriented architecture applicability creating intelligent problem solvers 
system specification 
system brute force approach useless 
possible combinations case alphabet 
adding case numbers symbols symbols 
architecture suggested booch blackboard architecture 
blackboard area autonomous knowledge sources determine state apply specialized knowledge 
blackboard keeps track modifications institute rollbacks necessary allow backtracking 
approach compared possible agent oriented approach 
weighting evaluation considerations step weighting evaluation considerations determine evaluation considerations relevant particular problem 
categories analysis decision consideration relevant 
cost acquiring methodology support tools relevant approach problem software engineer part organization looking adopt methodology supporting tools 
organizational business practices relevant software engineer employee department engineer responsibility providing project updates interested parties outside department 
methodology maturity relevant decision change new methodology require degree evidence produce quality software 
integration reusable components irrelevant library reusable components available software engineer 
legacy system integration irrelevant system required incorporate existing software systems 
distribution relevant translation components able placed systems network best leverage computing power better algorithm performance 
environment relevant environment network mixture sun workstations running solaris os personal computers running windows nt 
translation components placed systems appropriate level computing power 
agility robustness relevant users system expect predictability reliability 
dynamic structure scalability relevant system needs able incorporate translation components available 
interaction relevant system able take input file decryption provide user information regarding potential translations 
evaluation considerations partitioned ranking refined determining relative importance evaluation consideration 
important level evaluation considerations consists rate issues constraints software requirement problem distribution environment dynamic structure scalability 
level ranking evaluation considerations important issues success project level achievement may negotiable 
agility robustness interaction organizational business practices methodology maturity cost methodology support tools assigned lower level 
step refinement determining relative weighting evaluation consideration regard important consideration 
case evaluation considerations ordered alphabetically interaction compared agility robustness dynamic structure scalability compared organizational business practices 
tier evaluation considerations measure constraints problem determined decision maker twice important lower rank 
likewise tier negotiable considerations determined quarter times important lowest tier 
cryptanalysis requirements cryptography embraces methods rendering data unintelligible unauthorized parties cryptographic algorithms messages plaintext may transformed ciphertext back 
basic kinds cryptographic algorithms employed time called substitution cipher 
cipher letter plaintext alphabet mapped different letter 
example shift letter successor wraps 
plaintext may clos object oriented programming language jt bo substitution letters 
example 
example consider pdg cq hint letter represents plaintext letter vastly simplifying assumption know substitution cipher employed encode plaintext message deciphering resulting algorithmically trivial task 
deciphering requires trial error assumptions particular substitution evaluate implications 
example may start letter words hypothesize stand common words 
substituting occurrences letters may find hints deciphering words 
instance word starts word reasonably 
knowledge spelling grammar attack substitution cipher 
example occurrence double letters represent sequence qq 
similarly try expand word letter suffix ing 
higher level abstraction assume sequence words occur sequence assume structure sentence typically includes noun verb 
analysis identified verb actor agent start search adjectives nouns 
may backtrack 
example assumed certain letter word substitution letter causes contradictions blind words try word consequently undo assumptions earlier substitution 
leads requirement problem devise system transforms back original plaintext assuming simple substitution cipher employed 
cryptanalysis requirements relative weighting determined step determine normalized weights evaluation consideration method described section 
illustration algebraic calculations shown subscripts defined 
worg war 
worg 
war 
worg 


worg 




worg 





worg setting sum weights worg war worg worg worg worg worg worg worg worg worg 
worg 
worg worg war war 
weights determined relevant evaluation considerations step decision making process complete 
results step summarized 
rank evaluation consideration relative weight normalized weight distribution dynamic structure scalability environment cost methodology support tools methodology maturity agility robustness interaction organizational business practices content search weighting summary rating evaluation considerations step decision analysis score evaluation considerations 
focus points examined scored evaluation considerations determined relevant weighting step 
step documented section 
single dimensional value functions case summarized 
evaluation consideration fitness mase fitness booch fitness yourdon distribution dynamic structure scalability environment cost methodology support tools methodology maturity agility robustness interaction organizational business practices single dimensional value function fitness values case calculating multiobjective value functions final step calculate multiobjective value function 
accomplish step single dimensional value functions multiplied appropriate weight summed 
mase alternative multiobjective value determined var vint booch alternative calculated var vint yourdon alternative calculated var vint determining best alternative calculations assumptions decision analysis tool determined mase methodology score higher approaches 
considering nature problem multiagent approach sense 
fact booch description problem suggestive software agents 
section contains sensitivity analysis case study 
case inventory tracking system fourth case study examined information management system 
inventory tracking system provides regional warehouse control inventory management provides central headquarters reporting capability 
requirements inventory tracking system 
inventory tracking system requirements part expansion new specialized markets mail order catalog decided establish number relatively autonomous regional warehouses 
warehouse retains local responsibility inventory management order processing 
target niche markets efficiently warehouse tasked maintaining inventory best suited local market 
specific product line warehouse manages may differ region region furthermore product line managed region tends updated yearly keep changing customer tastes 
reasons economies scale parent desires common inventory order tracking system warehouses 
key functions system include tracking inventory enters warehouse shipped variety suppliers 
tracking orders received central remote organization orders may received mail processed locally 
generating packing slips direct warehouse personnel assembling shipping order 
generating invoices tracking accounts 
generating supply requests tracking accounts 
addition automating warehouse daily workflow system provide general open ended reporting facility management team track sales trends identify valued problem customers suppliers carry special promotional programs 
inventory tracking system requirements significant differences system content search system multiple levels distribution 
functionality inventory management distributed users local system users 
data gathering distributed regional warehouses 
difference information system discussed economy scale issue 
organization attempting reduce costs developing single system negates impact environment consideration 
weighting evaluation considerations step weighting evaluation considerations determine evaluation considerations relevant particular problem 
categories analysis decision consideration relevant 
cost acquiring methodology support tools relevant approach problem software engineer part organization looking adopt methodology supporting tools 
organizational business practices relevant software engineer employee department engineer responsibility providing project updates interested parties outside department 
methodology maturity relevant decision change new methodology require degree evidence produce quality software 
integration reusable components irrelevant library reusable components available software engineer 
legacy system integration relevant system incorporating existing software systems auxiliary functionality 
distribution relevant users system require access different nodes network 
likewise data users require stored hard drives network 
environment irrelevant environment network homogeneous 
agility robustness relevant users system expect predictability reliability 
dynamic structure scalability irrelevant opportunity incorporating additional nodes system considered 
interaction relevant system provide interface user manage inventory retrieve reports 
basic separation evaluation considerations step develop ranking determining evaluation consideration level importance 
important level evaluation considerations consists rate issues constraints software requirement problem cost methodology support tools distribution interaction 
level ranking evaluation considerations important issues success project level achievement may negotiable 
agility robustness legacy system integration assigned level 
problem organizational business practices methodology maturity considerations placed third tier 
step refinement determining relative weighting evaluation consideration regard important consideration 
case previously evaluation considerations ordered alphabetically interaction compared agility robustness legacy system integration compared organizational business practices 
tier evaluation considerations measure constraints problem determined decision maker twice important lower rank 
likewise tier negotiable considerations determined half times important lowest tier 
relative weighting determined step determine normalized weights evaluation consideration method described section 
illustration algebraic calculations shown subscripts defined 
worg 
war 


war 










setting sum weights worg war 








worg 
war 



weights determined relevant evaluation considerations step decision making process complete 
results step summarized 
rank evaluation consideration relative weight normalized weight cost methodology support tools distribution interaction agility robustness legacy system integration organizational business practices methodology maturity inventory tracking system weighting summary rating evaluation considerations step decision analysis score evaluation considerations 
focus points examined scored evaluation considerations determined relevant weighting step 
step documented section 
single dimensional value functions case summarized 
evaluation consideration fitness mase fitness booch fitness yourdon cost methodology support tools distribution interaction agility robustness legacy system integration organizational business practices methodology maturity single dimensional value function fitness values case calculating multiobjective value functions final step calculate multiobjective value function 
accomplish step single dimensional value functions multiplied appropriate weight summed 
mase alternative multiobjective value determined leg var vint booch alternative calculated leg leg leg leg var vint yourdon alternative calculated leg leg leg leg var vint determining best alternative calculations assumptions decision analysis tool determined mase methodology score higher approaches 
problem domain information systems example multiagent applications 
difference score mase booch methodologies 
reasonable conclude approaches suitable booch case study example textbook 
insight decision sensitivity analysis available section 
analysis assumptions factors determine value multiobjective weights assigned evaluation consideration score alternatives receive evaluation consideration 
ratings focus points subjective rating experience assessor assumed accurate 
weights hand strictly opinion evaluation consideration quantity 
order give assessor different perspective decision sensitivity analyses performed evaluation considerations relevant software requirement 
analyses examined case studies 
sensitivity analyses focus areas slight change evaluation consideration weight significantly changes fitness score 
analysis summarizes fitness scores methodologies rated 
case study mase booch yourdon content search system weather monitoring station cryptanalysis inventory tracking system case study multiobjective fitness values analysis looks initial selection weights 
process selecting relative weights designed establish intuitive relationship evaluation considerations 
weights normalized generating appropriate percentages 
shows results survey discussed section regard partitioning weighting management technical evaluation considerations 
process determine normalized weights produced results range suggestions 
case study composite percentages management technical considerations summarized 
case study management considerations technical considerations content search system weather monitoring station cryptanalysis inventory tracking system composite percentages management technical considerations data analyzer tool developed output decision analysis tool implementation full sensitivity analysis performed evaluation considerations 
analysis focuses sensitive considerations regard original normalized weight order highlight different possible results decision analysis tool 
done evaluating fitness methodology range weights particular methodology 
case studies evaluated entire range possible weight calculated 
order ensure total normalized weight remains equal considerations tested calculated proportional total weight minus weight consideration tested 
method ensures evaluation consideration tested effects rating 
decision considered sensitive small change weight produces change 
recommendations defining small change change 
additionally recommendation decision definitive ratio sensitive considerations total number considerations exceeds 
detecting sensitivity relies identification critical points 
point weight particular consideration changes decision analysis tool preference 
example sensitivity analysis chart sensitivity analysis methodology maturity case study 
entire set sensitivity analysis charts appendix value sensitivity analysis results methodology maturity weight sensitivity analysis example sensitivity analysis annotated point critical points particular analysis 
example critical points 
weight methodology mase booch yourdin maturity 
weight range mase methodology highest multiobjective fitness value 
second critical point weight yourdin methodology rates begins rate higher mase booch methodology 
third critical point booch yourdin methodologies intersect 
noted weight methodology maturity set factors playing decision 
case studies set evaluation considerations existed change weight particular consideration yield different answer 
additionally considerations change preference significant change 
critical points original weights case studies shown 
case consideration particular case study entered original value critical point 
considerations critical point entered critical point column 
additionally amount change needed alter original weight weight needed switch preferences 
changes equal highlighted 
sensitive decisions considering case studies 
requirement statements problems booch mase methodologies selected respectively 
case study high degree sensitivity 
decision analysis tool recommended mase solutions sensitivity analysis indicates user weighting preferences slightly different booch methodology preference 
likelihood methodology satisfy user needs 
decisions case studies resilient change 
cases recommended methodologies provide user best support 
case studies taken booch decision time object oriented methodology better suited handling complex software systems traditional functional approach 
decision validated functional approach software engineering yourdin methodology scored substantially lower set considerations 
additionally development agent oriented methodologies mase provides techniques offer support aspects software requirements software complex 
section provides validation decision 
decision validation order validate decision analysis tool ability report results case study section implemented mase booch methodologies 
analyzed decision analysis tool mase methodology multiobjective fitness value calculated booch methodology 
sensitivity analyses weights case study revealed evaluation considerations critical points original weights 
purpose developing software requirement validate hypothesis mase methodology better choice solving content search problem 
development product set metrics described collected 
data collected 
additionally products modeling appendix data collected items stand 
noted unit testing conducted implementation phase hours spent implementing testing remote method invocation booch approach 
amount code produced mase approach includes code generated methodology case tool 
code implements specific code framework developed demonstrate methodology 
framework called contributes cyclomatic complexity implementation agent conversation state diagrams 
feature case tool ability test state diagrams prior transformed unvisited states deadlock aspects cyclomatic complexity verified prior code generation 
evaluation consideration mase booch critical point mase yourdin critical point weights critical point summary booch yourdin critical point original weight change case cost org leg dis env ar dss int mat case cost org leg dis env ar dss int mat case cost org leg dis env ar dss int mat case cost org leg dis env ar dss int mat metric mase approach booch approach modeling effort analysis labor hours labor hours modeling effort design labor hours labor hours modeling effort labor hours labor hours implementation size sloc size classes cyclomatic complexity size effort ratio sloc labor hour sloc labor hour content search development metrics set data evident production code greatly enhanced mase case tool 
complexity code significant code generated booch methodology design models maintain software mase methodology 
booch methodology case tool provide direct mapping code 
addition collecting metrics implementations models group graduate students software engineering program 
student set models mase booch questionnaire 
questionnaire models summary student responses appendix focus questionnaire determine students ability describe certain technical issues methodology required address case study 
additionally questionnaire measured users ability understand models developed methodologies 
order generate packets models models data dictionaries captured respective case tools 
compare packages mase package models page data dictionary 
booch package hand models twelve page data dictionary 
set questions respondents answered familiarity methodologies evaluating 
students reviewing booch models indicated familiar methodology indicated developed systems methodology past 
students indicated familiar mase methodology students methodology system development 
results unexpected mase defined agent oriented methodology booch object oriented methodology mature 
asked identify methodologies familiar students indicated object oriented techniques functional decomposition techniques ad hoc methods developing software 
question general question respondents confidence understood models 
asked rate confidence scale zero indicating greatest confidence understanding system 
average understanding rating students evaluating mase methodology 
rating students evaluating booch methodology 
students reviewing booch methodology able identify correct statement description system 
students reviewing mase methodology able select correct statement students selected nearly correct answer 
set questions looked number details models including identification legacy systems reusable components network environment interface issues 
students reviewing booch methodology divided equally regard identifying legacy system 
fact legacy system incorporated system responses legacy system possibly answers included file system file manager naming convention reason misidentification 
student misidentified legacy system set mase models 
determining network environment intention questions 
identifying configuration network system designed important information needs communicated developers 
questions measured respondents ability discover environment information 
group evaluating mase example able completely identify hardware software system components models 
regard user interface groups able identify input output systems options 
scoring included question questionnaire appendix average scores mase group booch group 
furthermore considering results students familiar experienced respective methodology average score mase group booch group 
regard data collected development content search system questionnaire positives negatives approach 
experienced developers demonstrated requirements system best expressed interpreted representations mase methodology 
agrees results decision analysis tool content search system described section 
summary chapter demonstrates apply decision analysis tool working software requirement problems 
completing distinct steps decision analysis process ends assigning multiobjective values alternatives compared selecting alternative 
addition completing analysis process problems different techniques demonstrated analyzing sensitivity assumptions step process 
looking different possible values assigned assumptions conditions determined methodology superior 
chapter provides summary research drawing data collected chapter 
additionally areas research suggested apply specifically research problem selecting appropriate methodology 
major questions currently discussed field multiagent systems multiagent systems appropriate 
current literature statements data existed real industrial strength applications quantitatively decisions problem 
data exist researchers left defend decisions multiagent system approach qualitative arguments step software evolution theoretical hypotheses mas approach produce higher quality software 
researchers continue attempt tackle question providing intellectual qualitative arguments wooldridge jennings developing guidelines mas message project 
approaches beneficial aid understanding problem conjecture demonstrated 
thesis looks problem slightly different perspective 
light fact quantitative data exist determine mas approach superior traditional object oriented functional approach goal remains develop high quality software product reasonable cost 
looking problem perspective focus kept heart software development engineering 
developing software defined process best way ensure ability create quality software remains constant 
narrowing question mas agent oriented software engineering approach step grasping problem 
redefining problem way expands task include determining type software methodology suited solving problem 
software requirement problem software engineer decide go solving problem 
engineer may organization defined process developing software systems status quo may best approach need continued research software engineering field 
assist decision maker thesis develops decision analysis tool mathematical framework quantitatively compare different methodology alternatives 
addition developing decision analysis tool assists software engineers determining appropriate methodology different paradigms tool provides basis comparing methodologies paradigm 
agent oriented methodologies continue developed research continue look question best time methodologies 
number areas research question needed 
section discusses areas relate directly research 
basis decision area research suggested considers complexity decision 
basis making decision broad 
thesis evaluation considerations capture differences alternative methodologies 
decision particular considerations came literature sources backed opinions members multiagent system community farther problem considerations precise decision analysis tool 
unreasonable think software requirement problem exists find technical evaluation considerations irrelevant 
case decision wholly management considerations 
data collected chapter iv alternative methodologies evaluated showed little variance evaluation considerations 
flexibility tool allows integration evaluation considerations 
time consuming evaluation consideration measured decision maker capability selecting considerations relevant problem hand 
flexibility allows potential creation library evaluation considerations enable decision maker customize tool particular problem 
subjectivity area evaluation considerations improved reduce level subjectivity rating 
case evaluation consideration cost acquiring methodology support tools uses numbers physical world 
quantitative data exist near alternative conduct research project evaluates large number existing methodologies build database scores particular evaluation considerations 
research conducted individual team create standardized set data rating alternatives 
additionally having major data collection step performed priori decision maker able include considerations potential evaluation consideration library decision smaller time requirement 
set considerations increased basis consideration improved 
quantitative data area research generation quantitative data compares life cycles software projects developed different methodologies 
shown thesis small software projects developed different methodologies resulting systems compared 
challenge determine appropriate method collecting comparing data industrial size systems 
current practice software development firms simultaneously develop project different paradigms 
technique practiced past engineering fields 
case point department defense acquisition program place develop joint tactical strike fighter 
example government requiring fully operational prototypes deciding aircraft chosen 
summary thesis defines process objectively evaluating alternative software engineering methodologies software requirement 
challenge rests ability transform subjective opinions mathematical framework 
step process described chapter developing clear understanding aspects problem decision making processes software engineering methodologies factors important general domain software problems 
foundation knowledge step develops process achieving hypothesis 
chapter ii begins selection appropriate decision making framework 
framework described chapter ii includes steps develop framework fit software engineering methodology selection problem 
skeleton framework refined chapter iii 
real values incorporated decision making process evaluation considerations cost acquiring methodology support tools objective numbers combined values subjective analysis evaluation considerations methodology maturity legacy system integration fitness values evaluation consideration combined form single multiobjective fitness value problem analysis 
chapter iv presents set demonstrations number representative problems 
validating results decision analysis tool problem difficult creating tool availability objective data available 
purpose case studies implemented highest ranking methodologies comparison 
models developed analysis design phases methodologies panel evaluators asked determine requirements system 
analysis demonstrated comparing metrics subjective task impractical large scale systems investment dually developing systems 
decision analysis tool achieves goal determining fittest methodology set candidates 
additionally basis comparing methodologies paradigm formed 
framework provides decision maker flexibility allowing inclusion exclusion specific evaluation considerations 
rating criteria highly subjective process ensures rationale repeatable process making decision followed 
overview appendix background multiagent systems relatively new paradigm solving complex distributed processing software problems 
providing new way looking problem agents offer unique set advantages help solve problem 
agents set problems may require software engineer techniques build software solutions 
purpose appendix provide survey background information topics crucial development thesis 
section begins investigation characteristics agent systems 
section compares contrasts major software engineering paradigms including agent oriented approach 
section surveys pitfalls problems multiagent systems agent oriented software engineering approach general 
section discusses current research related thesis 
section explores techniques making decisions 
multiagent system properties multiagent systems fully explored common shared 
differing opinions certain terms defined definitions common characteristics 
section begins definitions terms thesis 
definitions different properties characteristics multiagent systems explored 
definitions number terms basic study agent systems artificial intelligence 
source definitions 
agent computer system situated environment capable autonomous action environment order meet goals 
autonomy ability act outside intervention 
agent control internal state behavior 
flexibility regard agent intelligence flexibility comprised reactivity pro activeness social ability 
intelligence ability achieve goals flexible autonomous manner 
pro active ability exhibit goal directed behavior initiating actions satisfying goal 
reactive ability perceive environment respond changes environment order achieve goal 
social ability ability interact agents order achieve goal 
environments environment agents exist important factor agent properties 
considering different environments closed open properties better evaluated 
closed system environment system designers know exactly type agents exist 
part agents cooperative agents common goal 
open system environment agents meet cooperative agents competitive agents 
competitive agents self interested set goals may conflict goal system 
self interested agents assist groups problems usually cost negotiated prior performing computation 
agent open system agent know handle communications agents unknown system designer agent developed 
problem domains problem domains multiagent system approaches suited solve generally inherent form distribution knowledge capability information expertise resources distributed system 
examples problem domains include distributed situation assessment distributed resource scheduling planning distributed expert systems :10.1.1.25.7165
distributive situation assessment distributed capability deals agents combining partial information solve complex problems 
information comes separate areas single agent able gather 
multiple information combine information see big picture distributed sensor network establishment example distributed capability 
distributed sensor network establishment large area monitored say vehicle movement 
area large single sensor task monitoring area distributed agents 
information sensor receives synthesized information sensors completely track vehicle movement 
distributed resources scheduling planning example deals maintaining coordination conflict resolution set resources 
generally type system agent represents resource 
system goal maximize system output 
distributed delivery agents example case 
planning execution plan distributed agents 
additionally planning execution plan may occurring simultaneously environment changes agents may required unexpectedly replan 
distributed expert systems third example 
example deals multiple agents collectively gather information case agent expertise offer problem solution coordination partial solutions required :10.1.1.25.7165
additionally exp ert systems may large expensive replicate system 
large scale applications developed adept business process management system archon electricity transportation management system characteristics agent significant computational resource unix process agents cooperative generally maximizing system goal individual goals agents heterogeneous implementation system contains small number agents benefits building systems involve multiple agents system realize benefits speed due concurrent processing communications bandwidth requirements information gathering performed source remotely increased reliability single point failure 
benefits include increase responsiveness due processing sensing performed source easier system development agent modular :10.1.1.25.7165
principles designing multiagent systems lesser points number useful principles 
ability maximize system goals unrealistic :10.1.1.25.7165
complexity involved finding optimal solutions agent particularly agents may conflicting goals extreme 
system attempt find realistic solution reasonable amount time reasonable amount resources 
called satisficing goal acceptable answer generated reasonable amount time 
second principle need flexibility problem solving 
flexibility involves access resources agents dynamically available 
ability find alternate problem solving capabilities allows system robust problem solver 
third principle ability exploit organizational structure agent system 
computation needs distributed equally organization type computation may different 
bottom organization computation may involve low level functional processing higher level sight coordination jobs may executing :10.1.1.25.7165
software engineering paradigms decades software important piece information systems 
time software engineering paradigms designed methodologies creating software reasonable amount time reasonable cost 
paradigms generally layered approaches developing solutions customer non technical description system capable doing 
ieee defines software engineering application systematic disciplined quantifiable approach development operation maintenance software application engineering software 
study approaches 
definition software engineering mind modern paradigms examined discussed object oriented component ware agent oriented 
engineering paradigms offers systematic approaches different perspective basic approach building software 
approaches object oriented programming languages java 
cases differences paradigms exhibit quite substantial minor 
paradigms different designed assist humans complex task software development 
complex nature software exhibits number consistent tics 
characteristics consistent software problems software engineering provides techniques structures handling problems 
characteristic complex problems exhibit problem generally takes form hierarchy 
problem broken sub problems solved individually combined solve entire problem 
second characteristic complex problems selection basic building blocks systems arbitrary designer goals 
third characteristic hierarchical form problem allows quicker development intermediary forms solution stable 
fourth characteristic ability distinguish communication subsystems subsystem 
paradigms addresses characteristics 
important thing remember paradigms legitimate ways solving software problems 
object oriented paradigm discussing paradigm imperative understand object term object loaded words computer science 
began emerging simultaneously different circles connotations 
listed derivative terms part computer science 
objects objects atomic entities encapsulate identity state behavior 
software objects thought simplified abstractions represent real world entity 
properties world object represent generally aspects entity necessary user 
active objects active objects emerged field object oriented concurrent programming 
concept active object merge attributes methods object autonomous activity 
behaviorally active objects act objects react method call remain procedural 
distributed objects distributed objects described independent pieces code accessed remote clients method invocation 
sense components see section information components 
language compiler build distributed object transparent user 
requirement object know invoke remote method 
additionally concept service broker established clients find distributed object 
paradigms object oriented oldest 
booch early advocate object orientation describes complexity industrial strength software systems ability single person fully comprehend 
notes experiments psychologists indicate individual simultaneously comprehend pieces information 
limits mind booch suggests concepts decomposition abstraction hierarchy ways dealing complexity 
decomposition method divide conquer 
allows designer take broad problem transform set sub problems 
sub problems refined independently 
decomposition allows user solve sub problems manageable 
object oriented decomposition breaks problem objects 
techniques described pressman muller suggest deriving objects nouns problem specification 
abstraction allows user remove details objects capturing significant 
reduces complexity problem manageable designer 
common analysis design techniques iterative detail added problem goes successive iterations 
hierarchy plays important role making problem complex 
recognition hierarchical structure objects increases semantic content information 
capturing hierarchical structure objects easy object may exhibit complex behavior 
object oriented software engineering designed exploit features object oriented programming techniques 
objects represented languages java encapsulate details object exhibits real world details relevant problem 
details include attributes example person object attributes name age sex actions object perform called methods 
objects represent physical objects world people cars rooms represent objects schedule 
object oriented software engineering assists software engineer task addressing concepts modern software engineering information hiding data abstraction encapsulation concurrency 
concepts easily handled structured analysis techniques developed prior object orientation 
example ability encapsulate actions attributes belong particular object provides semantically correct model just function 
likewise allows dealing entities larger sub routines 
turn allows better management complexity system 
object orientation promotes concept software reusability 
functions attributes entity encapsulated object object easily migrated systems reuse 
incorporating existing function difficult function designed fit specific task 
object oriented application closer representation real world functional application 
ability better understand mapping real world software abstraction greatly improves users confidence system 
additionally ability understand code greatly enhanced objects orientation turn leads better maintenance improved modifiability 
objects provide certain level data abstraction information hiding underlying functionality object remain implementation easily changed provide improved performance additional functionality 
object oriented methodologies past decade object oriented methodologies developed schools thought 
revolutionary represents radical change traditional methodologies effectively rendering traditional methodologies obsolete 
second school thought synthesis 
synthesis point view sees object orientation evolution conventional methodologies 
number researchers developed analysis design techniques creating object oriented software schools thought 
approximately object oriented methods emerged 
methods developed methods grew smaller 
shows key elements came 
rumbaugh booch began unifying single method 
unified method come bring different models standardize notation 
origin element booch categories subsystems embley singleton classes composite objects fusion operation descriptions message numbering gamma frameworks patterns notes harel statecharts jacobson cases meyer pre post conditions odell dynamic classification emphasis events omt associations mellor objects wirfs brock responsibilities collaborations origin object oriented methodologies convergence notations difficult task people input provide release unified method detailed comments returned authors 
unified method underwent substantial evolutions seen 
result effort known unified modeling language uml 
public feedback methods component ware paradigm development uml component ware paradigm attempt maximize software reuse 
components defined szyperski binary units independent software 
term binary refers component executable 
components usually perform single function treated black boxes 
common analogy compares software components integrated circuits 
major difference software hardware software components limit number instances simultaneously exist 
uml uml uml unified method booch omt booch original creation components come software engineering technique object oriented structured analysis 
internally method storing data irrelevant user 
omt uml partners expertise oose information maintained component accessible prescribed methods provided component 
versatility components great 
driving purpose developing components software reuse 
order reuse components szyperski introduces contracts specification component 
contract describes required input component guarantee output 
important rely contract expected behavior versions component may implement component way 
reuse components realized different ways 
components provide purely functional service hardware component piece information passed component evaluates manipulates transforms information 
fact details function works hidden allows component switched function components provide service implemented differently 
example component provides list sorting algorithm may designed implement selection sort algorithm 
release component implementation may quick sort algorithm 
requirement input component result sorted list actual implementation moot point system designer 
say factors go component selection previous example quick sort algorithm better performance selection sort algorithm cost quick sort algorithm may prohibitive 
way components objects inheritance 
attributes methods subclass inherits super class component defined contract details 
examples object components sun java beans 
java beans developed creating graphical interfaces 
details beans displayed completely hidden user bean extended provide specific look 
systems built combining components 
component composition requires connecting interfaces 
components developed object oriented method may provide inheritance allowing system methods component 
functionally developed components parameterized function calls 
instances scripting language may needed act component glue 
regard methods dealing complexity abstraction decomposition hierarchy component ware systems generally analysis design methodology object oriented structural decomposition 
component satisfies level abstraction desired designer 
additionally component selected design phase problem appropriately decomposed level component satisfies goals subsystem 
likewise component fits hierarchy system having provide detail 
component ware methodologies able compose system strictly library components large library available 
components developed physical replaceable part system software developer techniques generate non component portion software 
technique able incorporate component components specified interfaces 
version uml semantics expanded include modeling components 
expanding uml semantics software engineer follow object oriented methodology gaining benefit software reuse 
agent oriented paradigm agent oriented software engineering emerging paradigm object oriented paradigm 
object oriented paradigm agent oriented paradigm designed reduce complexity decomposition abstraction hierarchy 
jennings suggests term organization hierarchy neutral term connotations control 
organizations correspond hierarchies correspond peer groups falls spectrum 
expected primitive building block agent oriented paradigm agent 
agents expressive objects 
agent autonomous having control internal state behavior having defined boundaries interfaces 
characteristics agents include ability exhibit flexible problem solving capability fulfill specific role exist environment detect changes sensors changes effectors 
adopting agent view world apparent problems require multiple agents represent decentralized nature problem multiple control centers multiple goals 
difference agents objects interaction techniques 
objects interact method invocation agents communicate high level agent communication language acl 
acls allow interactions conducted knowledge level 
acl agents need know structure agents 
requirement agents know pass accept messages agents 
section active objects distributed objects introduced 
characteristic differentiates types objects agents communication technique 
types objects monolithic rely direct method invocation 
additionally agents exhibit behaviors autonomously active object typically single behavior 
research looked extending active object notation uml agent analysis design 
agent oriented methodologies object orientation agent orientation viewed revolutionary evolutionary step software engineering 
survey methodologies agent oriented methodologies extensions object oriented knowledge engineering methodologies :10.1.1.53.3254
reason methodologies existing methodologies developers know vocabulary techniques 
parts methodology apply removed aspects addressed added new methodology 
wooldridge jennings developed analysis design methodology called gaia :10.1.1.10.2242
mase methodology complete analysis design technique developing agent systems 
methodologies intended capture agent flexible autonomous behavior interactions agents complexity agent system organizational structure 
intentions fulfilled methodologies modeling system goal roles behaviors agents exhibit communication protocols agents 
paradigm comparisons research robinson begun looking agent assembly component point view 
approach merit common system designers add features new system releases 
able add remove agents system having redesign entire system allows low cost reuse 
additionally long agent contracts clearly define agents communication language services provides system composition fairly trivial requiring type component glue 
sections clear similarities agent oriented paradigm paradigms 
important differences quite obvious 
remainder section highlight important differences 
booch describes objects set autonomous agents collaborate perform higher level behavior 
characterization objects agents far truth differences agents objects 
objects agents encapsulate 
agents encapsulate 
knowledge encapsulate includes thread control location execution 
additionally contain software agent captures goals design accomplish 
interface environment agents contracts services negotiated meta level 
intelligence autonomy important characteristics separate agents objects components 
objects components typically passive 
perform functions specifically asked ability refuse request 
active agents limited autonomy 
example active agents monolithic encapsulate single behavior 
additionally active objects reason behavior interactions objects 
agents hand exhibit behaviors choose perform task 
decision generally utility function may take account things cost operation current workload expected pay back 
concept addressed object oriented paradigm agent mental state internal view environment 
objects maintain attributes characteristic object provide operators effect attributes 
extensions object oriented paradigm need address issues inference planning 
large complex systems direct method invocation requires requesting entity know entire system 
traditional distributed software techniques remote method invocation message passing 
system developed java system implement remote method invocation rmi corba implement message passing sockets 
cases object requires priori knowledge 
example create socket connection local class needs know host name address port number distant class 
likewise rmi corba class stubs generated client server placed respective systems locally running registry knowledge location objects 
agent system agents broker negotiate services entities join dynamically 
agents free initiate action independent entity priori knowledge needed regard service server 
agent required making single service server 
agent maintain list service servers dynamically select server negotiate 
components powerful agents computationally 
components passive requiring invocation order provide service 
additionally component contract specifies preconditions incoming data meet order guarantee correctness output 
components useful general problem solvers 
components loaded functionality expensive especially functionality going 
agents designed ability find request services system provide allowing dynamic problem solver 
agent oriented problems pitfalls focus section highlight downside agent oriented approach software engineering 
date main problem identified great difficulty software engineers validating systems due agent system unpredictability 
addition problems number pitfalls wooldridge jennings summarized 
significance identifying problems pitfalls software engineers advantage purpose selecting software engineering paradigm 
agent oriented problems current research highlighted major agent approach software development 
intrinsic agent interaction 
agent systems exist software engineers able problems fixes case case basis currently general solution 
problems seen level system individual agent agent system 
level agent level agents exhibit natural unpredictability 
able perceive changes environment agents balance proactive reactive behavior 
proactive agent may undertake tasks may irrelevant 
side agent reactive may spend time fulfilling requests may fulfill goals 
reaching compromise agents demonstrate new level sophistication flexibility 
problem quite unpredictable 
vast number combinations events changes environment exist environment impractical try test combination events actions 
decision particular objective decided run time state environment ability predict agent interactions extremely difficult 
furthermore agents ability negotiate services tasks service agent requests service performed behalf predicted priori 
second level agent system source unpredictability 
level unpredictability associated emergent behavior 
benefit multiagent systems emergent behavior synergetic effect system powerful individual agents combined 
way interpreting effect demonstrates problem emergent behavior stated jennings results behavioral phenomena solely terms behavior individual components 
just individual agent emergent behavior ability reproduce predict system interactions difficult 
agent oriented pitfalls attempt understand better engineer software projects agent oriented approach necessary consider possible problems arise 
furthermore factors determine agent oriented paradigm succeed 
summary main pitfalls seen wooldridge jennings 
identify categories key pitfalls classified 
political pitfalls pitfalls fall heading similar problems plagued field artificial intelligence 
agents solution 
agent oriented software promising provide solutions problems software engineering approaches 
currently data suggest agent solution developed non agent form 
second pitfall category dogmatic agents 
technology immature clear advantage 
system designed non agent approach perform just agent approach non agent approach selected 
argument agent engineers better understand approach agent system harder maintain 
management pitfalls category key pitfalls 
pitfalls involve ignorance agents 
management know need agents agent understand state art technology currently hot today market 
problem agents really understood usually involves inappropriate agents 
system perform correctly agents blamed reputation technology 
pitfalls category involve system design 
regard re building solutions general solutions difficult costly design implement usually live expectations 
conceptual pitfalls conceptual pitfalls involve fully understanding software engineering process 
agent oriented paradigm offer silver bullet solution software engineering greatest challenges 
misunderstanding concepts go agents major problem 
idea agent intuitive mean developers study concepts depth 
software engineering complex process founded techniques doing developed 
forgetting techniques disastrous software development 
analysis design pitfalls pitfalls fall analysis design category 
involves current technology agent advantage 
agent specific aspects system small compared system vital state art technology non agent areas 
failing exploit concurrency second pitfall 
multi agent systems suited distributed problems solved concurrently 
concurrency allows multiple objectives simultaneously achieved 
agent level pitfalls pitfalls fall category involve internal agent design 
regard artificial intelligence techniques agents 
putting intelligence hinder performance agent processor agent running 
agents intelligence bad term agent lose meaning 
additionally agents raise certain expectations leave users dissatisfied non intelligent system live expectations 

society level pitfalls category pitfalls identified 
pitfalls involve incorrectly identifying agents system 
agents drive communications overhead agents improperly divide workload 
major pitfall confusing simulated real parallelism 
multi agent system prototype may provide insight distributed problems system running real network may show different results system running scaled isolated test network 
implementation pitfalls pitfalls fall category involve misconceptions related new technology 
building system scratch drive cost software development 
standards firmly established groundwork standard laid developers attempt framework 
agent oriented software engineering develops viable technique solving software problems question type problem suited technique arises 
question similar problem research addressing current done looks just agent oriented side problem 
major regard answering question type problem agent oriented approach appropriate described 
jennings wooldridge agent oriented software engineering jennings wooldridge numerous papers agent oriented software engineering 
presents qualitative analysis engineering approach provide intellectual justification 
attempt answer agent oriented software engineering new revolution software engineering 
argument parts 
agent oriented decompositions effective ways partitioning problem space complex system 

key abstractions agent oriented mindset natural means abstracting complex system 

agent oriented philosophy identifying managing organizational relationships appropriate dealing interactions dependencies complex system 
arguing issues jennings wooldridge assert agent oriented techniques represent advance current state art 
areas compare agent oriented technique object oriented component software engineering 
leave outstanding issues understanding situations agent solutions appropriate principled development techniques agent systems message methodology engineering systems software agents message project developed european institute research strategic studies telecommunications 
initiated year project major european telecommunication industries formed consortium achieve objectives 
define suitable methodology agent application development telecommunications domain 
identify recommend tools support methodology 
define guidance identification application areas agent approach better suited approaches aim project extend existing approaches uml allow support agent oriented software engineering aose 
furthermore message attempting combine best features aose approaches currently defined 
particular interest message project regard research focus third objective 
currently promoting guidelines intended help developer deciding agent oriented approach appropriate 
guidelines 
agent oriented approach beneficial situations complex diverse types communication required 

agent oriented approach beneficial system perform situations practical possible specify behavior case case basis 

agent oriented approach beneficial situations involving negotiation operation competition different entities 

agent oriented approach beneficial system act autonomously 

agent oriented approach beneficial system expected expanded modified purpose system expected change 
development concepts topic projects second deliverable published time 
guidelines clear answer agent approach appropriate 
system meet guideline suited approach 
likewise guidelines address factors may argue agent oriented approach system meets guidelines necessity research 
methodology selection developing real time systems software engineering institute set guidelines assessing software development methods real time systems 
guidelines step process evaluating different methodologies 
steps guidelines 
needs analysis determine important characteristics system developed individual methods help developers deal characteristics 

constraint identification identify constraints imposed permitted solutions determine individual methods help developers deal constraint 
user requirements determine general usage characteristics individual methods 

management issues determine support provided method manage development process costs benefits adopting method 

plan develop understanding issues method address plan augment method areas deficient 
steps authors questions software engineer answer methodology 
questions rhetorical meant remind engineer issue 
questions require depth knowledge methodology representations 
purpose questions assessor form opinion regarding methodology simplify problem selecting methodology 
questions provide framework systematic evaluation process 
decision making frameworks goal research specify decision making process determining appropriate software engineering technique 
clearly decision select methodology difficult tasks trade offs 
multidimensional technique decision making required 
section explores different techniques making multidimensional decisions 
design space rules field software architectures concept design space rules emerged methodology describing classifying architectural alternatives indicating bad combinations alternatives 
intention design space rules methodology assist new engineers making correct choice design experienced software engineer 
technique foundation decision making process software engineers trying determine wh ich design options provide solution requirements statement 
design space multidimensional space classifying systems 
dimension design space represents different structural functional characteristic system 
structural dimensions represent characteristics pertain techniques employed functional dimension captures impact decisions 
example dimensions response time functional interprocess synchronization structural 
point design space determines design 
small design space illustrated 
response time fast med slow message semaphores monitors rendezvous interprocess synchronization simple design space dimensions independent important find correlations 
correlations alternatives discovered rules generated assist decision process 
example correlation drawn simple design space relationship interprocess synchronization response time 
specification required highly responsive system messaging semaphores better design choices monitors rendezvous 
functional dimension interprocess synchronization may plotted complexity 
space may show messaging semaphores complex software engineer required balance complexity system responsiveness 
testing existing systems design space rules degree agreement actual implementation compares design predictions measured 
selecting dimensions reflect requirements describe structure system creates design space 
correlations design space designer able directly see choices meet requirements specification 
rules developed design space designer experience 
rules automated accept set requirements propose optimal design 
defining set dimensions es system design existing systems tested design prediction determine degree agreement 
systems score high degrees agreement validate design prediction rules led prediction 
additionally systems modified test different combinations dimensions 
modified systems degree agreement determined test design rules 
design space rules integration software engineering tools 
research noe demonstrated possibility integrating different software engineering tools tools extendibility communication paths 
noe design rules guidelines selecting options structural dimensions requirements set functional dimensions 
guidelines place formal transformations developed 
new tools integrated determining tools structural characteristics selecting appropriate transformations 
multiobjective decision analysis purpose strategic decision making technique apply quantitative approach problem greatly qualitative 
numbers quantify choices clarifies different elements decision user technique explicit reasoning 
turn basis decision reviewed analyzed process 
additionally communication different interested parties improved concrete baseline discussion 
strategic approaches decision making generally follow phases shown 

specify objectives scales measuring achievement respect objectives 
develop alternatives potentially achieve objectives 
determine alternative achieves objective 
consider tradeoffs objectives 
select alternative balance best achieves objectives account uncertainties phases strategic decision making section begins definitions relevant decision making 
definitions phase strategic decision making process critical points discussed 
taxonomy section defines set terms thesis purpose discussing multiobjective decision analysis technique 
definitions terms derived 
alternatives alternatives different realizations decision 
purpose decision making technique assist person selecting best alternative choice 
evaluation consideration evaluation consideration matter needs taken account alternative evaluated 
example evaluation considerations person looking new job may include salary location advancement opportunities 
evaluation considerations known evaluation concerns areas concern 
evaluation measure evaluation measure scale degree attainment objective 
example annual salary dollars may evaluation measure job seeker looking new job higher salary 
terms evaluation measure include measure effectiveness attribute performance measure metric 
goal respect evaluation consideration goal threshold achievement obtained alternative 
job seeker example goal may salary 
goal referred target 
layer tier evaluation considerations distance top value hierarchy layer tier 
evaluation considerations layers higher hierarchy composed evaluation considerations lower hierarchy 
level score level score represents specific numerical rating particular alternative respect specified evaluation measure 
multiobjective value function multiobjective value function combination evaluation measures value structure derive single value 
objective objective preferred direction movement respect evaluation consideration 
typically preference display monotonic behavior 
example objective job seeker higher salary 
single dimensional value function single dimensional value function single attribute value function function returns level evaluation measure alternative 
value hierarchy value tree value structure hierarchical tree structure value hierarchy value tree 
structure textually graphically 
value structure value structure entire set evaluation considerations objectives evaluation measures particular problem 
weights weight multiobjective value function place emphasis particular evaluation measure 
value weight multiplied level evaluation measure particular alternative 
sum weights multiobjective value function equal 
note literature terms goal objective interchanged research follow ions 
value hierarchies step step strategic decision making process capture objectives decision specify evaluation measures respect objective 
value hierarchy allows decision maker structure evaluation considerations objectives evaluation measures structured understandable format 
value hierarchies generally depicted tree diagrams root tree top diagram children nodes left diagram children nodes right 
value hierarchies represented textually outline format 
value diagrams research graphical node right 
example value hierarchy job seeker shown 
select best job value hierarchy employment options example shows evaluation considerations 
generally practical include information regarding objectives evaluation measures diagram increases complexity diagram 
additional information typically captured table 
evaluation considerations included table leaves tree 
partial evaluation consideration table job seeker example 
evaluation consideration monetary compensation geographical location travel requirements nature immediate proximity relatives degree climate daily commuting extended trips immediate training continuing objective evaluation measure starting salary maximize starting salary salary current dollars insurance minimize health insurance premium cost year current dollars retirement maximize retirement investment potential evaluation considerations evaluation jobs starting salary fringe year salary year salary trip length percent time away technical interest variety insurance retirement management training potential annual investment current dollars value hierarchies able quickly convey information regarding decision decision maker interested parties involved 
creating value hierarchy important try attain set desirable properties increase value diagram 
value hierarchy properties provide uses vested parties 
sections discuss properties looks different uses value hierarchy meet 
desirable properties value hierarchies desirable properties value hierarchies completeness decomposability operability small size 
properties discussed 
completeness complete evaluation considerations layer hierarchy group adequately cover concerns order evaluate objective decision 
addition adequately covering concerns evaluation measures lowest tier adequately measure degree attainment respective objectives 
hierarchy complete considered collectively exhaustive taken value hierarchy includes necessary evaluate decision 
completeness necessary ensure accurately distinguish differences alternatives 
task developing evaluation measures discussed section 
complete value hierarchy nonredundant 
order nonredundant evaluation considerations tier overlap 
example evaluation consideration immediate monetary compensation consideration divided starting salary fringe 
dollar values associated evaluation considerations assigned category categories nonredundant 
nonredundant hierarchy called mutually exclusive factors evaluation included evaluation consideration 
decomposability decomposability deals independence evaluation measures different evaluation considerations 
evaluation measures decomposable developing procedure combine evaluation measures determining alternative difficult 
fact required procedures complicated longer practical 
operability operability value hierarchy implies understandability 
evaluation considerations objectives evaluation measures need understood audience 
technical terms evaluation measures understood subject matter experts impractical people different backgrounds vested problem 
small size property size 
benefit having smaller value hierarchy communicate information larger hierarchy 
smaller value hierarchy easily explained requires fewer resources order evaluate different alternatives 
practical value hierarchies completeness detail balanced ability complete analysis timely manner 
help keep size reasonable evaluation considerations put test importance 
test states evaluation consideration included value hierarchy possible variations alternatives respect proposed evaluation consideration change preferred alternative 
uses value hierarchies addition value hierarchy evaluate alternatives value hierarchy important uses 
value hierarchy guide information collection 
knowing important problem appropriate evaluation measures selected developed 
point information collection decision 
knowing needs collected assists decision maker knowing information collected 
able peers review hierarchy find holes helps avoid collecting little information 
value hierarchy help identify alternatives 
situation call prescribed set alternatives value hierarchy provides basis developing alternatives 
hand decision makers limit number alternatives considered result alternatives missed 
third value hierarchy facilitate communications multiple stakeholders 
diagram assist understanding collectively considered important considerations provide basis compromise consensus selecting alternatives 
evaluation measures evaluation measures allow quantifiable degree attainment objectives 
quantifying evaluation considerations allow unambiguous rating alternative compared regard specified objective 
developing accurate evaluation measures critical part step step decision making process 
section looks different types evaluation measures develop 
types evaluation measure scales evaluation measures classified occurrence world measure objective attainment 
evaluation measures occur naturally constructed particular decision 
additionally evaluation measures directly measure attainment objective reflect degree attainment 
natural constructed natural scale evaluation measure common interpretation general public 
natural scales property time required define scale example natural scale job seeker starting salary evaluation measure salary current dollars intuitive definition better 
situations natural scale appropriate 
cases constructed scale 
constructed scale developed particular problem 
constructed scales necessary natural scales exist particular evaluation measure 
direct proxy second category classifying evaluation measure scales specifies scale measures degree attainment 
direct scale name implies directly measures degree attainment 
example business profits dollars direct scale 
scales reflection degree attainment called proxy scales 
gross national product proxy scale economic country 
developing evaluation measure scales purpose developing effective evaluation measure scale unambiguous rating fitness alternative particular evaluation consideration compared alternative 
task selecting scales may void controversy 
depending type scale interpretation scale interested parties may vary 
questions listed guides selecting developing evaluation measure scales decision problems evaluation considerations 

natural scale proxy develop constructed direct scale 

subdivide evaluation consideration detailed sub considerations natural scales exist construct scale measure evaluation consideration subdividing 

natural scale precise uses technical jargon constructed scale may precise may understandable stakeholders decision process 

carefully specify scale definition constructed scale 
alternatives step decision making process developing viable alternatives decision problem 
complete analysis show best alternatives identified 
likewise alternatives particularly best solution analysis provide best poor set alternatives 
value hierarchy assist decision makers identifying alternatives explicit step direct result analysis 
issues come having alternatives likewise ways identifying potential alternatives 
additional information area see 
multiobjective value analysis purpose multiobjective value analysis derive value function provides fitness alternative particular problem 
impossible simultaneously maximize objectives multiobjective decision problem 
ability decision maker determine optimal solution defining optimal solution maximizes decision maker utility satisfaction 
section discusses derive multiobjective value function determine decision maker satisfaction develop spreadsheet analysis techniques validate result 
multiobjective value function multiobjective value function value function combines multiple evaluation measures decision problem single measurement evaluation alternative 
form value function weighted sum single dimensional value functions evaluation measure problem 
weights applied results single dimensional value functions order handle different scales functions different levels emphasis placed evaluation measure 
generally making decision complex problem winner set alternatives clear tradeoffs occur evaluation measures 
combining values single dimensional value function single index value desirability alternative 
intuitive combination techniques simple averaging practical drawbacks 
common problems include units evaluation measures 
scale particular measure may cause measure value dominate value function 
likewise ranges evaluation measures pose problems 
solve potential problems weights evaluation measure introduced multiobjective value function 
weights provide different multiplying factor evaluation measure account range variation evaluation measure different degrees importance 
evaluation measure greater importance decision greater weight 
problem arise return scale issue 
constructed evaluation measure scales difference levels may equal 
take example constructed evaluation measure scale selecting new software product software cause potentially serious decrease productivity noticeable acceptable decrease productivity detectable change productivity increase productivity movement fro may significantly important decision move 
increase value results moving successively preferable score scale decreasing return scale 
successively preferable score scale greater increasing return scale 
returns scale effect captured single dimensional value function 
value function form appropriate evaluation measures weights evaluation measures single dimensional value function evaluation measures 
sum values weights typically sum 
single dimensional value functions piecewise linear exponential functions 
spreadsheet analysis computer spreadsheets allows quick calculation making decision 
major reasons spreadsheet 
reduces potential human calculation errors 
second benefit ability investigate changes assumptions data decision lead changes ranking alternatives 
called sensitivity analysis 
sensitivity analysis tedious calculations spreadsheet analysis fast painless 
summary appendix provided broad survey topics software engineering focus relate software engineering paradigm selection 
basic definitions properties multiagent systems explored 
properties included multiagent system benefits environments principles problem domains 
popular software engineering paradigms object oriented component ware agent oriented discussed 
similarities approaches pointed differences 
object oriented agent oriented software engineering appear closely related component ware technique object agent oriented approaches appropriate building system components techniques component ware paradigm reasonable building agent systems agents heterogeneous 
discussion software engineering paradigms survey problems pitfalls software engineer may encounter building agent systems 
section unpredictability agents agent systems described 
additionally pitfalls agent oriented approach summarized 
foundation multiagent systems software engineering techniques laid areas related research 
wooldridge points decision agent approach currently open issue 
message project intent defining guidelines software developers making decision 
software engineering institute research selecting appropriate methodologies developing real time systems discussed 
techniques strategic multidimensional decision making 
understanding decision making processes essential piece research 
decision theory allows making difficult decision easier justify 
survey survey appendix methodology selection criteria survey survey am requesting personal information 
information collected track background participants 
names contact information optional event need clarifications answers 
contact information name mail address background occupational area field interest multiagent systems agent oriented software engineering methodologies length time field directions sets criteria management technical issues 
issues rate categories scale zero 
nr provided rated 
rating providing importance category general problem 
evaluating methodology specific software requirement decision maker weight factors 
category brief description category field comments may regarding category 
survey please remember submit results 
management issues cost acquiring methodology nr category focuses costs involved adopting methodology 
factors play category include costs incurred sending personnel available training purchase materials comment cost acquiring support tools nr addition adopting methodology costs incurred acquiring tools support methodology 
tools include case tools support methodology programming development tools 
additionally category factors software hardware requirements needed support tools 
comment availability reusable components nr incorporating previously developed software new system reduces design implementation testing phases software development 
category measure easily methodology allows integrating predefined components system 
comment nr support organizational business practices point category measure impact methodology organizations business practices 
practices include tracking development progress milestones reports customer interaction comment compliance established standards nr category rates alternative ability meet established standards local international 
comment support tracking changes nr category measures methodology supports ability trace changes development lifecycle 
comment technical issues integration existing legacy systems nr category measure methodology support integrating new system related existing systems 
comment distribution nr ability methodology support modeling distributed aspects problem focus category 
comment nr execution environment category determine methodology support developing software systems environments heterogeneous hardware software operating systems 
comment system structure nr category measures methodology ability develop software capable handling removal system components manner detrimental users system 
comment interactions nr category determines methodology ability handle interaction system level components entities outside system human user systems 
comment system scalability nr category measure methodology ability develop software capable handling removal system level resources minimizing impact users 
comment nr agility robustness category measures methodology ability create flexible software resilient dynamic changes 
comment additional questions include additional factors 
please list making decision factors believe factors weighted relative factors relative factors category issues management technical 
unsure weighted relative factors category feel appropriate weighting category 
management technical please check copy thesis survey supporting don forget submit results 
responses occupation government time field years field interface agents multiagent systems cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction don ignore simple fact human users interact systems scalability agility robustness additional factors relative weighting unsure management technical occupation academic time field years field multi agent systems real time systems cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors relative weighting unsure management technical occupation industry commercial time field years field multiagent systems logic programming agent architectures business models cost acquiring methodology nr question base especially question 
cost acquiring support tools ditto component reuse organizational business practices compliance standards effects changes nr legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors questionnaire begs important question people see prime benefits risks associated agents 
important question 
relative weighting unsure management technical occupation industry commercial time field years field methodologies software architecture design patters components agents cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors relative weighting unsure management technical occupation industry commercial time field years field multiagent systems applied enterprise computing problems cost acquiring methodology cost important cost benefit ratio 
benefit measured millions matters entry cost 
cost benefit scored 
cost acquiring support tools component reuse tend cots oriented 
learning fast important things right save applying 
organizational business practices compliance standards boeing big 
interoperability extremely important 
effects changes complexity scale requires strong configuration management block points 
legacy system integration distribution environment dynamic structure interaction scalability nr question confusing 
scalability title sheer numbers high volumes transactions large numbers users 
description talks changes disruption 
agreed disruption large scale larger impact disruption smaller scale scalability disruption different things 
score depends application applications smaller prototype apps adverse impacts minimized 
agility robustness additional factors benefits cost savings productivity gains important context application 
look get sense criteria selecting vendor package 
divorce 
weight various criteria depends product tool 
relative weighting unsure management technical occupation industry commercial time field years field intelligent agents engineering process automation cost acquiring methodology organization eds am involved standardizing cmm sei methodologies long tie directly easier industry digest 
cost acquiring support tools component reuse things mind agent technology requires ability utilize installed software existing rd party engineering analysis software organizational business practices organization requirements place 
attempting get sei level certification methodologies pretty 
compliance standards mentioned earlier kind committed specific standards employees slow move effects changes occurs methodologies maintained 
legacy system integration prove feasibility early systems self sufficient trust technology increases level integration 
distribution focus global vehicle development activities world need 
environment things am thinking require multi platform capability 
groups users unix hp sun windows nt soon 
dynamic structure minimize impact user possible doing 
interaction depending ability technology different systems users suppliers 
scalability mentioned trust increases users tend find uses 
agility robustness reasons am thinking technology 
additional factors new technology concepts specific examples true capabilities restrictions limitations extremely helpful 
things struggle apply concepts specific needs engineering automotive development environment 
relative weighting management technical occupation academic time field years field multiagent systems aose artificial life cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors relative weighting unsure management technical occupation industry commercial time field years field multiagent systems cost acquiring methodology context open agent architecture oaa www com multiagent framework 
oaa puts forth new style programming called delegated computing radically different create somewhat barrier programmer learns trust methodology 
cost acquiring support tools support tools required cost low 
component reuse highest reuse components seen 
organizational business practices methodologies 
compliance standards oaa expend effort support standards 
effects changes additional support standard programming tools 
legacy system integration support programming languages easy write adapters legacy systems 
distribution highly distributed 
environment oaa supports platforms os solaris windows linux programming languages 
dynamic structure completely dynamic component added removed runtime system degrades optimal way possible 
interaction capabilities enabling cooperation advanced interactions multiple human automated comp 
scalability multiagent systems research quality oaa 
robust moderately scalable agent components 
agility robustness better 
additional factors relative weighting unsure management technical occupation government time field years field human interaction agent systems cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors additional factors question useful survey results 
say factors critical 
want think reworking relative weighting survey 
factors rated order importance 
afraid re going find surveys gets 
luck 
don want individual copy thesis please sure advertise agents list completed 
relative weighting management technical occupation academic time field years field software engineering mas aose cost acquiring methodology cost acquiring support tools training tools 
tool focused training needed tools 
level process maturity 
component reuse organizational business practices compliance standards needed quality control software artifacts produced methodology 
effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors relative weighting management technical occupation student time field years field community information exchange support agents software development paradigm cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors relative weighting unsure management technical occupation industry commercial time field years field multiagent systems mobile agents technology cost acquiring methodology comparing area filed agent technology young 
material information available results research projects 
commercial sector time money needed find technology public 
cost acquiring support tools lots scientific products 
commercial tools starting available mature component reuse opinion important role 
reusable components help design implement agent applications faster cheaper 
complies oo paradigm plays important role 
organizational business practices compliance standards effects changes legacy system integration distribution nr environment dynamic structure interaction scalability agility robustness additional factors relative weighting management technical occupation industry commercial time field years field agent oriented software engineering multiagent cost acquiring methodology aren professional commercial oriented resources personnel training 
cost acquiring support tools lot tools costs 
problem guarantees tools 
academic semi academic 
component reuse naturally depends previously platform 
intranet base multiagent interaction quite simple 
organizational business practices revolution way interact information systems 
organizations adjustments business process 
compliance standards effects changes legacy system integration identical availability reusable components distribution multiagent systems fitted local business ys 
environment question 
depends development tools choose 
think mobile agents able travel networks heterogeneous dynamic structure multiagent systems allow running reconfiguration 
naturally depends implement delegation negotiation process 
interaction interaction users may better non agent systems 
interaction systems may require intermediate level interface agent degrade performance 
scalability stated multiagent systems flexible 
agility robustness achieve systems quite robust system break may get unexpected system behaviour 
additional factors relative weighting management technical occupation industry commercial time field years field mas aose se general cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors relative weighting management technical occupation academic time field years field agent communication languages multiagent systems cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors relative weighting unsure management technical occupation academic time field years field agent oriented software engineering distance cost acquiring methodology cost acquiring support tools component reuse nr organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors workflow technology human factors relative weighting management technical occupation academic time field years field multi agent systems distributed agent operating cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors learn questionnaire 
aspects important 
give combinations aspects ask important 
allows cross check answers people 
question hard answer 
relative weighting management technical occupation academic time field years field multiagent systems cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability nr agility robustness additional factors relative weighting unsure management technical occupation student time field years field infrastructures multi agent systems cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors questions asked high depends factor especially technical section 
clear knowledge situation technology weight questions inevitably questions represent essence multiagent systems adaptability sociability reactiveness interaction users integration legacy systems 
don know extend bias survey find difficult believe people rate aspects important 
case done performing survey hope people participate 
relative weighting management technical occupation student time field years field multi agent systems systems engineering cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors relative weighting management technical occupation academic time field years field agent oriented software engineering cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors expected agent lifetime relative weighting management technical occupation academic time field years field software engineering cost acquiring methodology cost usually overcome 
cost acquiring support tools component reuse think reuse important reality aren sufficient libraries available practical limited cases 
organizational business practices change established practices better 
compliance standards depends 
standards aren difficult exchange models reuse effects changes important consider separate development methodology legacy system integration important pessimistic ability methodology support 
hesitant base selection methodology criteria distribution certainly important building distributed system environment sure understand 
dynamic structure 
interaction way mean 
scalability sounds lot system structure agility robustness important measure 
additional factors relative weighting management technical occupation student time field years field multiagent systems cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors relative weighting unsure management technical occupation academic time field years field multi agent systems cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment user interface important trust plays part dynamic structure interaction scalability agility robustness additional factors relative weighting unsure management technical occupation academic time field years field aose oose mas cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration systems developed really need compatible legacy systems 
distribution necessary important 
environment particular methodology determine limit kind environments systems developed operate 
dynamic structure kind important 
interaction course highly depends kinds systems going developed 
scalability agility robustness additional factors relative weighting unsure management technical occupation student time field years field knowledge software engineering cost acquiring methodology nr student cost consideration cost acquiring support tools nr student cost consideration component reuse integrating correct software solutions generation new software systems support principle software reuse great importance 
organizational business practices compliance standards effects changes important large scale long term business mission critical systems people responsible system maintenance 
legacy system integration distribution environment dynamic structure rated high concerns system extremely important 
interaction scalability agility robustness additional factors depending category individual responses vary greatly 
student guess important commercial aspects software systems reliability maintainability option great concern 
relative weighting management technical occupation academic time fie ld years field design intelligent multi agent systems automated negotiation interpretation verification multi agent systems 
cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors development method support compositional design method support validation verification method support requirement engineering relative weighting management technical occupation academic time field years field multiagent systems cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors relative weighting unsure management technical occupation academic time field years field process activities measurement cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors question question 
assume means choice 
relative weighting management technical occupation academic time field years field applications cost acquiring methodology small budget interested producing working prototypes demonstrate ideas 
cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors relative weighting management technical occupation government time field years field information technology computer networks information warfare cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors relative weighting unsure management technical occupation academic time field years field formal methods cost acquiring methodology cost acquiring support tools little problematic 
tools reasonable importance 
case tools prohibitively expensive 
case cost single eliminate option 
component reuse organizational business practices compliance standards effects changes legacy system integration distribution application specific 
distributed applications 
environment unclear 
high rating mean needs run heterogeneous environment 
previous question application specific 
dynamic structure dynamically 
depends application 
interaction scalability sounds similar system structure 
usually means system grow sense linear impact performance time 
agility robustness additional factors availability tools just cost 
experience base new methodology proven practice 
relative weighting unsure management technical occupation academic time field years field mas aose cost acquiring methodology cost acquiring support tools component reuse organizational business practices compliance standards effects changes legacy system integration distribution environment dynamic structure interaction scalability agility robustness additional factors relative weighting management technical case study value value appendix sensitivity analyses sensitivity analysis results cost methodology support tools weight sensitivity analysis results organizational business practices weight mase booch yourdin mase booch yourdin value value value sensitivity analysis results distribution weight sensitivity analysis results environment weight sensitivity analysis results agility robustness weight mase booch yourdin mase booch yourdin mase booch yourdin value value value sensitivity analysis results dynamic structure scalability weight sensitivity analysis results interaction weight sensitivity analysis results methodology maturity weight mase booch yourdin mase booch yourdin mase booch yourdin case study value value value sensitivity analysis results cost methodology support tools weight sensitivity analysis results organizational business practices weight sensitivity analysis results agility robustness weight mase booch yourdin mase booch yourdin mase booch yourdin value value value sensitivity analysis results dynamic structure scalability weight sensitivity analysis results interaction weight sensitivity analysis results methodology maturity weight mase booch yourdin mase booch yourdin mase booch yourdin case study value value value sensitivity analysis results cost methodology support tools weight sensitivity analysis results organizational business practices weight sensitivity analysis results distribution weight mase booch yourdin mase booch yourdin mase booch yourdin value value value sensitivity analysis results environment weight sensitivity analysis results agility robustness weight sensitivity analysis results dynamic structure scalability weight mase booch yourdin mase booch yourdin mase booch yourdin value value sensitivity analysis results interaction weight sensitivity analysis results methodology maturity weight mase booch yourdin mase booch yourdin case study value value value sensitivity analysis results cost methodology support tools weight sensitivity analysis results organizational business practices weight sensitivity analysis results legacy system integration weight mase booch yourdin mase booch yourdin mase booch yourdin value value value sensitivity analysis results distribution weight sensitivity analysis results agility robustness weight sensitivity analysis results interaction weight mase booch yourdin mase booch yourdin mase booch yourdin value sensitivity analysis results methodology maturity weight mase booch yourdin appendix software engineering methodology decision analysis tool sem dat data analyzer user manual software engineering methodology decision analysis tool sem dat software project developed assist decision makers utilizing decision making framework established thesis 
application ensures process followed appropriately 
addition supports decision maker automating number calculations computed hand 
data analyzer tool auxiliary tool provides graphical representations decision sensitivity analysis support 
sem dat application java program 
main focus program ensure collection data methodology selection decision 
data analyzer tool analysis application developed microsoft excel 
software package chosen ability quickly represent data charts 
installation sem dat data analyzer packaged zip file called zip 
expanded directories created 


working directory selected batch files facilitate software 
executing dat start bat starts software 
system software requirements system follows options underlined indicate software development features 
hardware intel pentium processor 
operating system windows nt windows 
java version higher 
microsoft excel version sem dat step process calculating multiobjective functions software methodology alternatives 
currently structure compare alternatives 
steps discussed 
order move step step buttons provided bottom right corner window 
buttons perform testing data step step activated correct data entered system 
step step step weighting phase decision analysis process 
list evaluation considerations tool supports provided possible criteria field 
specific software requirements problem relevant considerations selected highlighting considerations individually button 
consideration placed selected box error returned possible criteria field highlighting button 
consideration selected 
relevant considerations selected go step 
step step weighting process ranking evaluation considerations importance decision 
selecting consideration move move orders list 
considerations ordered important considerations top list 
considerations ordered go step 
step final step weighting process assigning weight evaluation consideration relative important evaluation consideration 
important important considerations compared 
values entered real numbers greater equal 
considerations equal rating 
ratings normalized step 
step step sem dat represents rating phase decision making process 
evaluation considerations selected step set focus points unique tab 
focus points rated scale indicates support question indicates full support values provide partial support 
column input fields represents alternative second column represents alternative 
focus point considered decision process field left blank 
moving step evaluation consideration rated 
step step provides opportunity review choices point 
considerations listed table normalized weights calculated relative weights assigned step ratings alternative 
continue get results pressing ratings button go back previous steps modify responses 
modifications necessary data collected step changed selecting tab step 
making change button bottom right corner move back step 
additional considerations added step steps 
response focus points maintained consideration previously evaluated 
rating final multiobjective fitness scores reported screen 
decision maker choose go back previous stage changes choose data analyzer exit program 
data analyzer invoked save button 
microsoft excel start time 
event start manually started executing excel opening file directory 
data analyzer invoking data analyzer dialogue open asking macros enabled 
enabling macros allow refreshing input data 
file completes select worksheet called input press ctrl 
invoke macro refreshing data 
input data file called output dat working directory 
data updated graphical representations sensitivity analyses viewed data charts worksheets respectively 
demonstration section demonstrates execution sem dat data analyzer applying case study section 
assuming system installed described section executing batch file dat start bat application screen shown 
sem dat welcome screen welcome screen provides user information system information describing process user follow 
analysis process press button step bottom right corner screen 
tab shown 
user selects evaluation considerations relevant problem 
problem user selects evaluation considerations cost methodology support tools organizational business practices methodology maturity distribution environment agility robustness dynamic structure scalability interaction 
sem dat step screen considerations selected user hits step button 
tab shown active 
tab allows user order evaluation considerations importance decision 
order importance selected case cost methodology support tools distribution environment interaction agility robustness dynamic structure scalability methodology maturity organizational business practices 
sem dat step screen tab activated user hits step button 
tab allows input relative weights 
relative weights captured 
completion step user hits step button 
sem dat step screen sem dat step screen step tab shown list focus points evaluation considerations selected step 
res set questions appropriate considerations 
entering data user hits step button 
tab shown provides user opportunity review data entered 
sem dat step screen sem dat ratings screen reviewing data user hits ratings button 
result multiobjective analysis 
user accept result return step process changes input 
third option data analyzer 
data analyzer launched hitting save button 
data analyzer provides series sensitivity analyses user consideration 
data analyzer opens worksheet data input sheet 
shown 
data updated macro invoked hitting ctrl 
data analyzer data input screen updating data data analyzer presents user graphical representations choices user percentage weight consideration breakdown score alternative received seen 
sensitivity analyses summarized charts worksheet see 
sensitivity analysis consideration worksheet named conventions 
data analyzer data evaluation screen data analyzer charts screen appendix software development questionnaire content search system analysis design models mase goal hierarchy sequence diagram researcher registration sequence diagram typical search scenario sequence diagram impatient user sequence diagram cancellation role diagram task register researchers task registration task system search task manage researchers task file search task maintain researcher status agent diagram conversation register initiator file finder agent conversation register responder broker agent conversation request researchers initiator search interface agent conversation request researchers responder broker conversation update initiator file finder agent conversation update responder broker agent conversation search initiator search interface agent data dictionary conversation search responder file finder agent deployment model cases case researcher registration description researcher comes line register resource broker 
sequence diagrams researcher registration case typical search scenario description user inputs search request system request list available researchers specified functional area resource broker 
system forward search request researchers await response individual searches 
receipt request researcher notifies resource broker increased workload 
researcher completed search results ordered reported user 
researcher notify resource broker job completion 
sequence diagrams typical search scenario case impatient user description submitting request user decides see results point 
researchers forward current results system turn reports interim results 
sequence diagrams impatient user case cancellation description submitting request user decides cancel search 
researcher ends search forwards results system 
sequence diagrams cancellation tasks task registration description initiation task registers researcher resource broker available file system researcher 
role researcher connected register researchers registration task file search description task accepts search request system search protocol 
researcher updates broker number search requests pending 
search request executed file system 
completing search results returned system search protocol researcher informs resource broker search completed 
role researcher connected system search search maintain researcher status status update task system search description task takes search request system user 
request researchers protocol system requests list appropriate file system researchers resource broker 
search request forwarded researchers list search protocol 
role system connected manage researchers request researchers file search search task register researchers description resource broker accepts registration registration protocol 
registration announcement researcher announcing availability functional area respective file system represents 
role resource broker connected registration registration task maintain researcher status description task maintains status available researchers 
researchers considered available workload reaches concurrent requests 
role resource broker connected file search status update task manage researchers description task receives request researcher returns list available researchers meets required functional areas 
role resource broker connected system search request researchers protocols protocol registration description registration passed researcher resource broker announcing availability service 
task registration task register researchers protocol request researchers description system requests list researchers provided resource broker 
task system search task manage researchers protocol search description search system forwards request search file system researchers waits results 
task system search task file search protocol status update description researcher informs resource broker current search request load 
task file search task maintain researcher status systems system system xx description system xx pc windows ip address xxx xxx host name xxx agents broker port search interface port file finder port system system xx description system xx spark ip address xxx xxx host name xxx agents search interface port file finder port system system xx description system xx spark ip address xxx xxx host name xxx agents file finder port content search system analysis design models booch logical view interface checkbox go button cancel button interim button composed composed revision generates search request boolean string includes functional area name pertains composed searches file manager parent filesystems manages file system int system result location string filename string integer string reports string integer tostring string vector file interfaces displays assigned file list assigned report results collection result add tostring file system string container strings host string string vector cases cancel search system user normal search get interim results sequence diagrams normal search user system user gui interface local system system go fa match display report local file manager file manager result fs file system result fs file system get interim results user system user gui interface local system system go fa match interim display interim display report report local file manager file manager result fs file system fs file system result cancel search user system user gui interface local system system local file manager file manager go fa match cancel cancel result fs file system fs file system result deployment view system xx file system interface search request system xx file system interface search request search request system xx file system interface data dictionary logical view list 
class name search request category logical view documentation search request initiated user 
require key word phrase searched exact search required functional area search 
associations rolename file manager association request rolename interface association generates rolename functional area association includes rolename system association composed rolename file association searches private interface attributes boolean boolean flag indicate search request exact search 

class name report string key word phrase searched 
category logical view documentation report collection search request results 
associations rolename result association reports rolename interface association displays public interface operations add tostring private interface attributes 
class name result results collection result category logical view documentation result data collected search 
contains location file name document number occurrences key word phrase 
associations rolename report association reports public interface operations string string integer tostring private interface attributes location string location file full directory path 

class name functional area filename string name file searched full name file extension 
integer count number occurrences key word phrase file 
category logical view documentation functional area describes subject directory files pertains type information search request pertaining 
associations rolename search request association includes rolename file manager association pertains private interface attributes name 
class name file category logical view documentation file computer system associations 
class name system name describes functional area 
rolename search request association searches rolename file list association assigned category logical view documentation system content search system 
associations rolename interface association composed rolename search request association composed rolename file manager association composed private interface attributes 
class name interface category logical view documentation interface gui system providing user access searching remote systems 
request search request generated search 
associations rolename report association displays list rolename search request association generates rolename system association composed public interface operations private interface attributes checkbox go button cancel button interim button 
class name file manager category logical view documentation file manager maintains list file systems system 
associations rolename search request association request rolename functional area association pertains rolename system association composed rolename file system int association manages public interface operations private interface attributes parent filesystems 
class name file system category logical view documentation file system interface searching files 
associations interfaces rolename file list association assigned rolename file system int association public interface operations string vector private interface attributes string container strings host string 
class name file list category logical view documentation file list set files particular directory associations 
class name file system int rolename file association assigned rolename file system association assigned category logical view documentation interface remote file system associations rolename file manager association manages rolename file system association interfaces public interface operations string vector 
association searches documentation search request generated intended search set files associated specific functional area 
role class file cardinality multiplicity role class search request cardinality multiplicity 
association reports documentation collection results collected report role class result cardinality multiplicity role class report cardinality multiplicity 
association includes documentation search request includes functional area search role class search request cardinality multiplicity role class functional area cardinality multiplicity 
association generates documentation interface generates search requests user requires information role class search request cardinality multiplicity role class interface cardinality multiplicity 
association displays documentation search complete interface displays report concerning results search 
role class report cardinality multiplicity role class interface cardinality multiplicity 
association composed documentation system composed user interface interface user defined requests search requests set known files file manager 
role class system cardinality multiplicity role class interface cardinality multiplicity 
association composed documentation system composed user interface interface user defined requests search requests set known files file manager 
role class system cardinality multiplicity role class search request cardinality multiplicity 
association assigned documentation file system contains file list collection files 
role class file system cardinality multiplicity role class file list cardinality multiplicity 
association assigned documentation files assigned file list role class file list cardinality multiplicity role class file cardinality multiplicity 
association manages documentation file manager manages set interfaces file systems network role class file manager cardinality multiplicity role class file system int cardinality multiplicity 
association request list role class file manager cardinality multiplicity role class search request cardinality multiplicity 
association composed documentation system composed user interface interface user defined requests search requests set known files file manager 
role class system cardinality multiplicity role class file manager cardinality multiplicity 
association pertains documentation file manager manages set files pertain functional area role class file manager cardinality multiplicity role class functional area cardinality multiplicity 
association interfaces documentation file system int remote method invocation interface file system 
role class file system cardinality multiplicity cases role class file system int cardinality multiplicity 
class name system user category case view documentation system user defined employee organization requires information regarding location information organization network 
stereotype actor associations 
case name normal search rolename normal search association rolename cancel search association rolename get interim results association category case view documentation typical scenario searching network 
associations rolename system user association 
case name get interim results category case view documentation scenario requiring system return intermediate set results user associations rolename system user association 
case name cancel search category case view documentation scenario user decides abort search 
associations sequence diagrams 
object name user rolename system user association class system user 
object name gui class interface 
object name local system class system 
object name local file manager class file manager 
object name fs documentation local remote file system class file system 
object name fs documentation local remote file system class file system deployment model 
processor name system xx documentation system contains search interface file system 
file system registered rmi registry 
file manager initiated accesses remote file systems rmi registry 
characteristics system xx spark ip address xxx xxx host name xxx processes file system interface 
processor name system xx documentation system contains search interface file system 
file system registered rmi registry 
file manager accesses remote file systems rmi registry 
characteristics system xx pc windows ip address xxx xxx host name xxx processes file system interface 
processor name system xx documentation system contains search interface file system 
file system registered rmi registry 
file manager accesses remote file systems rmi registry 
characteristics system xx spark ip address xxx xxx host name xxx processes file system interface 
process name file system documentation process searching local file system specified strings 

process name interface documentation thread manages user interface collecting requests presenting results 
software development questionnaire analysis design representation understanding questionnaire questions related packet analysis design models software system 
please take minutes review packet models data dictionary 
reviewing packet answer questions best ability 
may packet necessary 

set models review 
mase agent oriented booch objectoriented 
familiar methodology 

methodology develop software systems 

list methodologies develop software systems please rank order familiarity 
continuum rate general understanding models understand think looks familiar got 
understand models understand going understand determine models big picture going 
statement best describes objective system described packet 
system provides interface user order find data files computer system relevant user specified text string 
system provides interface user order find data files network computer systems relevant user specified string 
system provides interface network computer systems organization allowing users find data files contain specified string related specified area responsibility 
system provides interface network computer systems organization allowing users find data files relevant specified topic related specified area responsibility 
additionally system capable retrieving file user review particular data 

identify incorporation existing legacy system 

previously designed components identifiable 

hardware systems identified implementation 

information identified regarding hardware system 
check apply computer name location computer type processor address number processes assigned connectivity properties 
different operating systems identified implementation 

identify input system requires user 
check apply search string functional area time limit search result format systems searched limit results top results 
identify output system 
check apply name file copy file location file date time file modification file originator creator number times search string appears 
identify options user 
check apply request intermediate results repeat search cancel search limit number results returned template result presentation 
able visualize interface models 
please verify answered questions best ability 
questionnaire results tabulated summary question mase booch computer name address location number type connectivity search string result format functional area systems time limit name location creator copy date time occurrences intermediate limit repeat template cancel methodologies question structured ad hoc uml functional object oriented omt bibliography 
bailey elizabeth practical software measurement foundation objective project management office secretary defense acquisition technology april 

booch grady 
object oriented analysis design applications 
redwood city ca benjamin cummings publishing 

durfee edmund distributed problem solving planning multiagent systems modern approach distributed artificial intelligence 
gerhard weiss ed 
cambridge mass mit press 

robert chris kemerer 
object oriented conventional analysis design methodologies ieee computer october 

firth robert classification scheme software development methods software engineering institute technical report tr nov 

don hansen 
multiobjective decision analysis engineering business applications 
new york john wiley sons 

jean pierre briot 
active objects autonomous agents ieee concurrency vol july sept 

hendler james 
control agent systems excerpt unpublished document pag 
darpa mil iso asp mode 
april 

huhns michael larry stephens 
multiagent systems society agents multiagent systems modern approach distributed artificial intelligence 
gerhard weiss ed 
cambridge mass mit press 

ieee standards collection software engineering ieee standard ieee 

garijo gonzalez 
survey agent oriented methodologies intelligent agents proceedings fifth international workshop agent theories architectures languages atal lecture notes artificial intelligence 
heidelberg springer verlag 

jennings agent software engineering artificial intelligence vol 

jennings agent oriented software engineering proc 
th int conf industrial engineering applications ai cairo egypt 
invited pag 
www ecs soton ac uk pubs html 
jennings agent computing promise proceedings th joint conference artificial intelligence ijcai 
stockholm 

jennings wooldridge 
agent oriented software engineering handbook agent technology ed 
bradshaw aai mit press appear 

stanley eds 
multiple criteria making risk analysis microcomputers 
berlin springer verlag 

kelley jay air force 
support office air university air education training command 
air university press august 

kirkwood craig strategic decision making multiobjective decision analysis spreadsheets 
belmont ca wadsworth publishing 

cris 
modeling components frameworks uml communications acm vol october 

timothy formal methodology technique verifying communication protocols multi agent environment 
gcs eng 
school engineering management air force institute technology au wright patterson afb oh march 

lane thomas guidance user interface architecture software architecture perspectives emerging discipline 
mary shaw ed 
upper saddle river nj prentice hall 

patricia guidelines choosing computer language supporting visionary organization nd ed 
sw eng falls church va docs reports content html august 

lesser victor cooperative multiagent systems personal view state art ieee transactions knowledge data engineering vol jan feb 

message methodology engineering systems software agents initial methodology participants project gi july 

muller pierre alain 
instant uml 
birmingham uk press 

noe penelope structured approach software tool integration 
gcs eng 
school engineering management air force institute technology au wright patterson afb oh march 

nwana zeus toolkit approach building distributed multi agent systems proceedings third annual conference autonomous agents 
seattle wa may 

odell james 
objects agents differ unpublished document pag 
www com publications html september 

malley scott self scott 
comparing performance static versus mobile multiagent systems proceedings 
dayton oh oct 

robert essential distributed objects survival guide 
new york john wiley sons 

pressman roger software engineering practitioner approach 
new york mcgraw hill 

robinson david component approach agent specification 
gcs eng 
school engineering management air force institute technology au wright patterson afb oh march 

ryan michael 
commanders july 

johannes 
software engineering reusable components new york springer 

shelton henry 
joint vision 
joint staff pentagon 

shen douglas norrie 
agent systems intelligent manufacturing state art survey knowledge information systems international journal 
vol num 


szyperski clemens 
component software object oriented programming 
new york acm press 

wood bill richard roberts gold robert firth 
guide assessment software development methods software engineering institute technical report tr software engineering institute carnegie mellon university pittsburgh july 

wood mark multiagent systems engineering methodology analysis design multiagent systems gcs eng 
school engineering management air force institute technology au wright patterson afb oh march 

wooldridge intelligent agents multiagent systems modern approach distributed artificial intelligence 
gerhard weiss ed 
cambridge mass mit press 

wooldridge jennings 
pitfalls agent oriented development proceedings nd international conference autonomous agents agents minneapolis mn usa 

wooldridge jennings 
gaia methodology agent oriented analysis design international journal autonomous agents multi agent systems vol 

yourdon edward 
modern structured analysis englewood cliffs nj yourdon press 
vita lieutenant scott alan malley born michigan 
graduated high school iowa june 
completing bachelor science degree computer science may university iowa commissioned air force reserved officer training corps 
lieutenant malley assignment afb hawaii executive officer th support group september 
june assigned communications information officer th communications afb held number positions participating program called aerospace communications expertise ace 
august entered graduate school engineering management computer science program air force institute technology 
graduation assigned united states strategic command offutt afb nebraska 

