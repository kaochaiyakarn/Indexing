interoperability digital libraries overview selected highlights stanford digital library project andreas paepcke steve cousins hector garcia molina scott hassan steven ketchpel martin terry winograd stanford university outline main research thrusts stanford digital library project describe technical details specific efforts realized prototype implementations 
describe employ distributed object technology cope interoperability emerging digital library services 
particular describe corba objects wrappers handle differences service interaction models sketch information access protocol takes advantage distributed object environments 
second effort cover framework protocol payment autonomous services 
framework addresses interoperability problems online payment cleanly separating information access protocols payment charging policies actual mechanics individual financial transactions 
descriptors digital libraries distributed objects corba ilu clientserver architecture interoperability protocol transformation electronic payment electronic commerce annotations third party ratings 
information repositories just services emerging digital libraries 
services include automated news summarization topic trend analysis newspaper repositories facilities 
traditional library services archiving collection building continue relevant digital medium 
archiving example remains issue digital world problems dangling hyperlinks storage media obsolescence 
emerging distributed collection services carries enormous potential helping users information intensive tasks 
turn confusing frustrating annoyance programmers users need learn different interfaces find resources need confronted bewildering details services previously accessible professional librarians 
sketching approach taken stanford digital library project help issues 
focus problem interoperability particularly important digital library services developing rapidly standardization lagging far 
particular describe corba distributed objects implement information access payment protocols 
protocols provide interface uniformity necessary interoperability leaving implementors large amount leeway optimize performance provide choices service performance profiles 
stanford digital library project areas contribution shows development started digital library testbed driven thrusts 
prototype services protocols developed thrusts demonstrated testbed comprising variety computing literature sources including ones knight ridder dialog mit press acm web stanford university libraries 
research information interfaces geared easing interaction information diverse formats digital library services ing varying interaction models 
thrust explores uses digital libraries places users communicate documents 
example built prototype wide area annotation service 
allows users annotate pages world wide web modifying original documents 
annotations organized sets permission facility 
annotation sets may located servers ones housing documents annotations associated 
users may choose view documents annotations annotations sets permission access 
uses facility include independent product reviews document content ratings users view ratings produced organization happen trust rely guidance 
second thrust project concerned technologies locating appropriate library services information relevant user tasks 
example prototyped gloss service efficiently maintains meta information set repositories point users sources promising particular query 
sift service prototype explores efficient algorithms matching large numbers user interest profiles large numbers documents 
efforts address problem query integration multiple services 
stanford approach digital library development technologies supporting evolving economic aspects digital libraries core third project thrust 
scam cops efforts develop algorithms prototype efficient comparison text document large number documents detect partial overlap 
service protect authors illegal intellectual property 
effort third thrust development architecture manage interaction emerging payment schemes 
describe effort detail 
fourth thrust developing models supporting infrastructure interaction documents services 
models form basis protocols architecture testbed 
include models meta information documents repositories search visualize results 
include protocols effective client server models potentially large amounts information need moved sites 
access protocol described part effort 
fifth thrust examines agent technology employed help operations system 
simple agent technology help monitor online payment transactions 
substantial agent technologies retrieve information world wide web user interest profiles successively refined 
focus problem interoperability presenting architectural design technologies 
digital libraries thrive distributed object technology different clients service providers interact digital library 
ideal world clients services created independently basis implementation choices respective consumers providers deemed appropriate 
plug different components virtual software bus take care protocol level interoperability issues 
information bus library services transparently accomplish tasks format translation brokering required services financial transaction support 
ser vices conformed standard vision easily realized 
unfortunately convergence occurred long standing area information retrieval 
overly simple solution call cross translations standards 
formidable effort 
section discuss distributed object technology may help achieve long term goal need participants agree single standard mode interaction effort translation machinery 
interoperating protocol domains understand vision achieved start simple example 
shows protocol domains 
top example local network provider new information services 
university individual wishing digital library add services 
service interaction protocols domain local control 
telnet protocol second domain allows clients log remote machines 
third web protocol servers running example 
domains populated interoperating protocol domains services accessible respective protocols 
knight ridder dialog information service example telnet information provider 
webcrawler example indexing service available 
indexes documents world wide web returns urls response queries 
purpose illustration dialog webcrawler information repositories example information repositories best known kind digital library service 
anticipate services eventually conform emerging standards sql new ones developed 
dialog current minimally standardized human oriented interface illustrate breadth diversity remains today 
program local domain illustrates interoperability base requirement development digital library services 
accepts query multiplexes information sources 
copy detection service shown accepts documents checks substantial overlap database documents 
program uses eliminate near duplicates 
interoperability infrastructure program cumbersome write 
programmer learn interaction models search languages dialog webcrawler 
avoid translators needed link local domain remote ones 
exploring translators illustration shows simplified view interactions dialog webcrawler 
dialog service presents interface human user intended interact telnet session 
user led standard login sequence please logon 
usually followed user selecting databases offered dialog 
queries proprietary query language select library ti examination results session terminated logout 
shows possible abstraction process 
abstraction combines operations 
open session operation followed open database search quit 
full scale system abstraction course elaborate 
parts protocol variants related resources instance 
look lower part 
shows interaction webcrawler 
model surface different dialog 
user finds service home page clicks appropriate place open search form fills views results eventually leaves service home page 
shown abstraction interaction model dialog 
programmatic interface created common abstraction job writing program significantly easier 
turns object technology ideally suited purpose 
objects interface unification polymorphism object oriented programming systems unified interface abstraction different services 
library service proxy object lsp created kind ser unification simplified service interaction models vice 
client invokes interface element open session means method call 
implementation method performs appropriate operation corresponding service 
example open session method dialog lsp starts telnet session logs dialog service 
implementation method webcrawler lsp contacts demon proper url 
shows library service proxies building blocks translators 
translator clouds filled library service proxies represents service 
common interface different services accessible local domain 
effect arrangement programmer digital library services shown 
proxy objects polymorphic implementations act wrapper provides programmer program beginnings abstraction 
service proxy objects implement translation programmers experience illusion url getter object offers pure bridge functionality suffice convenience full lsp required 
represents low graceful translation service degradation spectrum enabled approach 
requirements information flow example illustrated object technology help provide extensible interfaces information access 
method proxy service provides important information flow issues need resolved 
specific consider search method discussed earlier 
services may implement single interaction model client calls search method including query parameter waits server assembled result set returns complete answer 
hand system delivers information piecemeal may preferable user quickly receive steady stream information slowly builds seeing complete set longer wait 
produces perception faster response time allows users overlap ongoing retrieval 
example observed web browsers pictures loaded 
picture appears coarse granularity refined slowly information arrives 
dictate clients services wish operate search method library service proxies generalpurpose possible 
client wishes wait complete results able 
information service proxy give piecemeal information client handle search method support 
dimensions flexibility services may wish cache result sets searches possible 
client may addition wish cache information 
search method cover possible modes interaction 
possible instantiate materialize objects result set documents various points time various locations 
instance pre fetching strategy may materialize documents client side contents requested 
demand scheme wait application program asks contents document 
method allow related processing tasks loaded machines including client computer 
operating slow link ability minimize number message exchanges 
existing information access protocols typically provide flexibility dimensions 
example consider best known protocols information access 
protocol requires result sets searches maintained server side delivered clients request 
fixes particular choices dimensions listed 
interoperability prefer protocol fix choices allowing example provider asynchronously incrementally push information associated management responsibility client 
section sketch protocol uses distributed object infrastructure provide desired flexibility 
describing protocol briefly discuss object instantiation materialization 
instantiation act creating empty object 
materialization act filling information provider 
activities occur impact efficiency 
aspect protocol design arises specifically distributed object environment described systems documents generally packaged objects 
alternative maintain documents strings 
advantage object approach document structure provided repositories easily preserved accessed documents turned objects client program accesses 
methods document objects title author instance extract corresponding document pieces 
implementations methods encapsulate respective necessary searches tagged fields 
example case sgml documents client programs need contain code parsing pieces marked text 
presents clean interface programmers raises question document objects instantiated materialized 
simple minded protocol library service proxy instantiate materialize document objects documents contained result set 
clients reach documents remote method calls 
wasteful users throw away results queries narrowed search sufficiently local method calls cheaper remote ones 
protocol takes advantage capabilities object architecture allow implementations determine document needed shift corresponding raw information site cast object 
protocols developed stanford project attempt provide flexibility 
section sketches simplified version illustrate issues approach 
sketch example protocol describe protocol provides uniform search interface preserving flexibility implementors 
protocol developed cooperation researchers universities illinois michigan 
variants implemented testbed initially exchange information universities stanford 
shows process querying programmers clients 
process includes steps programmer creates query object contains query string search specification details second step create local result collection object specifying query object intended service proxy indicated dashed lines 
client program subsequent interactions result collection result collection immediately filled document objects 
example client may invoke method find documents result 
query string form native source standard form translated native form 
concerned aspect interoperability example 
method fetch particular document 
methods called result collection may may necessary information client calls may blocked 
client tries get information result collection gets necessary information proxy server side lsp 
protocol illustrated consists steps 
steps described detail 
term client collection refer result collection object client side server side may choose create server collection object assist processing 

client collection asynchronously requests query execution 

service asynchronously delivers document arrive method call 

client collection repeatedly requests document optional 

client collection asynchronously requests document contents steps 
optional 
necessary object documents instantiated server client side 
step client collection initiates query asynchronous lsp method invocation passing object identifier return address clients program simple interface query results 
indicates result documents wants able access initially 
protocol lsp may requested return selected fields number resulting documents 
example title author fields costs documents requested initially help user decide documents request 
allows earliest possible delivery useful information having transfer entire document bodies 
contrast client need wait server complete result collection call 
response lsp causes execution query associated service 
receives results may delegate handling related requests server collection object capabilities client collection object 
case session service server collection object continue maintain session service anticipation requests documents pull documents service cache 
note distributed objects may created server collection object may located different machine freeing lsp machine handle requests 
alternatively lsp decide create server moving information client service library service proxy program doc result collection initiate query specify return push oid info document access capabilities request document contents cookies asynchronously receive document contents shown service collection result collection object continue manage follow requests documents 
depending delivery results delegated step executed proxy server result collection object 
purpose step deliver number documents document access capabilities document enable client obtain full contents result documents 
step repeated times proxy server collection accumulates result information 
way implementation deliver access documents documents requested step 
explain implementation details step 
key elements step method calls return contact information client requesting access documents indicated original request 
delegation server collection objects accomplished 
lsp server collection returns document includes document access capability 
describes full document 
capability access options specifying alternative way get document 
server side objects send information client side callback methods client collection 
callbacks includes object id server side object contact additional information 
time server object lsp delegate responsibility interactions client collection objects server collection 
similarly document access option received client collection contains id server object contact obtain document 
stated access capabilities may contain options getting document 
option contains id object contact get document plus cookie identifies document 
point view client cookie simply uninterpreted bit string server object document fetched 
server object point view cookie contains information necessary accessing document deliver 
example cookie index memory cache document placed earlier file name local file containing document call number information retrieval system permanent document handle described 
reason allowing multiple access options capability mechanisms getting document may vary time 
example consider search dialog information service 
lsp server collection maintains open session service refer particular document index dialog generated result set 
possible cookie access option result set identifier index 
session dialog terminated access mechanism longer works 
document unique record identifier needs cookie 
providing options access capability lsp free serve document contents quickly sessions service open close sessions losing ability deliver documents handed access capabilities 
holder access capability tries easier options 
fail tries expensive ones 
client collection object receives document access capabilities choices instantiate corresponding documents locally wait client program requests 
instantiates fill fields received wait materialize rest demand materialize immediately anticipation impending demand 
decision may example dependent statistical user behavior may evaluation likelihood remote site crash disconnect 
client result collection needs access capabilities documents initially requested step initiates step contact information received step 
client collection knowledge request additional information handled proxy server result collection helper object 
result request round step activity delivers capabilities 
implemented experimental version access protocol sketched including proxy objects dialog various web information sources servers oracle context summarization tool 
standard follow distributed object infrastructure corba 
implementation xerox parc inter language unification facility ilu public domain implementation corba supported common platforms sun ibm rs hp sgi linux windows nt 
language bindings include python modula java 
vendor platforms languages experiments 
easy availability ilu helps experimentation wider community 
initial experience indicates distributed object framework access protocol particular give clients servers flexibility manage communication processing resources effective way 
trying access existing services write proxies changing way operate changing way manage state information cache documents 
important note example protocol sketched provides base level functionality searching diverse information services 
addresses aspects interoperability 
section describe architecture digital library interoperability problems 
fee service interoperability problem number potential customers online information services grows need providers effective means collecting fees 
online payment mechanisms suggested deployed www fv com 
user digital library includes pay services differences payment scheme potential source frustration 
architecture designed ease problem 
prototype implemented allows access services different 
ilu available free xerox parc www xerox com parc ilu index html payment scheme 
layered architecture shows architecture 
structured layers services layer payment policy layer payment mechanisms layer 
user task related interactions services occur services layer 
information services include activities logging submitting query transmitting results activities protocol described previous section occur layer 
payment policy layer controls enforces payment related preferences rules 
policies implemented payment agents payer side collection agents payee side 
example payment agent may enforce policy pay charges conferring human operator notify operator total charges exceed 
service side collection agent may include rules delayed payment trusted clients limitations particular payment mechanisms small transactions customary stores regarding credit cards 
payment mechanisms layer comprises elements implement mechanics particular payment schemes 
payer side payment capabilities pcs payee side collection capabilities ccs 
payment capability programmed interact particular payment agency payment scheme 
collection capability programmed verify receipts interact agency scheme 
new payment capabilities easily added system elements objects 
new payment scheme added implementing payment collection capability pair may installed removed dynamically 
shows components interact typical transaction 
transaction executed major phases 
set session request 
initiate charge 
send invoice 
validate invoice agree payment mechanism 
initiate fund transfer 
verify payment complete transaction step interaction client entity service entity submission query 
example client entity query interface program service entity library service proxy described earlier 
client payment agent passed piece information step 
depending particular service charges initiated immediately search done session 
service decides charge delegates task collection agent step 
step collection agent contacts payment agent specified step sending invoice identifies service charge lists payment mechanisms acceptable service 
step payment agent verifies legitimacy charge picks payment mechanisms offered collection agent 
step payment agent delegates mechanics payment proper payment capability 
capability interacts respective interactions components financial service server side collection capability accomplish transfer funds receipt 
case account service currency simply user account number 
collection capability verifies payment notifies collection agent turn notifies service proxy 
proxy may release information client 
third party payment activity architecture needs accommodate payment third parties 
example research libraries generally bulk discount accounts commercial information providers 
patrons library local community access providers library bulk contract expenses patron department 
sketches example third party payment accomplished 
explained distributed object technology helps deal interoperability problems arise digital library comprised numerous independent services potentially presenting different interface interaction model 
demonstrated technology help specific heterogeneity problem multiple example third party payment online payment schemes 
thrusts stanford digital library project leave room wide variety currently preliminary stages 
user interface level working problem interactively configuring library services accomplish task reusing sharing results efforts 
information finding thrust current focuses problem users needing query multiple services information having contend disparate query languages result schemata 
area support economic activity problems security privacy considered 
infrastructure thrust continue develop protocols allow highly flexible distribution information machines providing satisfactory response time 
agent pursued area profile information filters 
common object request broker architecture specification 
object management group ftp omg org pub corba december 
martin christian mogensen terry winograd 
platform third party value added information providers architecture protocols usage examples 
number www stanford edu pub reports html 
stanford university november 
updated april 
martin christian mogensen terry winograd 
interaction design shared world wide web annotations 
proceedings conference human factors computing systems 
luis gravano hector garcia molina anthony tomasic 
effectiveness gloss text database discovery problem 
proceedings acm sigmod conference 
gloss stanford edu 
tak yan hector garcia molina 
sift tool wide area information dissemination 
usenix technical conference 
sift stanford edu 
shivakumar garcia molina 
scam copy detection mechanism digital documents 
proceedings second annual conference theory practice digital libraries 
marko balabanovic yoav shoham yun 
adaptive agent automated web browsing 
journal visual communication image representation december 
information retrieval application service definition protocol specification 
ansi april 
preliminary final text 
ramana rao bill janssen anand rajaraman 
gaia technical overview 
xerox parc december 
robert kahn robert wilensky 
framework distributed digital object services 
number www cnri reston va home cstr arch html 
neuman 
requirements network payment perspective 
proceedings ieee compcon march 
cousins ketchpel paepcke garcia molina hassan 
managing multiple payment mechanisms digital libraries 
proceedings second annual conference theory practice digital libraries 
