preprint section polymorphic lambda calculus logical foundations functional programming proceedings year programming institute edited erard huet published addison wesley 
polymorphic lambda calculus john reynolds carnegie mellon university december polymorphic second order typed lambda calculus invented jean yves girard independently reinvented 
extraordinary essentially programming language formulated independently especially led language entirely different motivations 
case seeking extend conventional typed programming languages permit definition polymorphic procedures accept arguments variety types 
started ordinary typed lambda calculus added ability pass types parameters idea air time 
example ordinary typed lambda calculus write int int int denote doubling function type int accepts function integers integers yields composition function 
similarly type variable write denote doubling function abstracting type variable define polymorphic doubling function applied type obtain doubling function type int int int int real real real real real real real real notice upper case square brackets indicate abstraction application types denotes kind beta reduction types type expressions substituted occurences type variables ordinary expressions 
accommodate kind abstraction application types necessary expand variety type expressions provide types polymorphic functions 
somewhat surprisingly done way type variable binding explicitly type correctness determined syntactically compile time 
writes deltat 
delta binding operator denote type polymorphic function applied type yields result type 
example polymorphic doubling function type deltat 
polymorphic identity function type deltat expression type type deltat expression type deltat 
type obtained substituting straightforward decide type expression 
led girard essentially language entirely different seeking extend analogy types propositions originally curry section howard 
types viewed propositions regarding type constructor boolean connective implies 
similarly regard cartesian product constructor theta connective disjoint union constructor connective 
expression type encoding proof proposition intuitionistic logic 
example doubling function encodes roundabout proof implies implies implies arbitrary proposition indicates proof step encoded expression ffl assume implies ffl assume ffl implies ffl implies ffl discharging assumption implies ffl discharging assumption implies implies implies 
girard extended curry howard analogy regarding binding operator deltat universal quantifier propositional variable propositions 
introduced analogous existential quantifier 
polymorphic doubling function encodes proof implies implies implies notice circularity impredicativity quantified proposition belongs set propositions quantified 
circularity huet theory constructions includes polymorphic calculus sublanguage types propositions formalisms martin lof constable 
despite circularity girard showed expression polymorphic typed lambda calculus possesses normal form expression reduced finite sequence beta reductions form reduced 
result strengthened prawitz show expression strongly normalizable expression amenable infinite sequence beta reductions 
proof theoretically means proof transformed cut free proof 
computationally means expression describes terminating computation 
extraordinary 
language expression describes terminating computation computable functions expressed fact evidence languages uninteresting practical computation 
polymorphic typed lambda calculus just language express want compute 
girard shown function natural numbers natural numbers proved total second order arithmetic expressed calculus 
includes primitive recursive functions ackermann function far esoteric rapidly growing functions 
result depends particular way encoding natural numbers called church numerals 
early untyped lambda calculus church encoding 
obvious analogue polymorphic calculus 
cases encoded higher order function mapping reflecting idea fundamental natural number iterate times 
example encoded doubling function 
polymorphic typed case particular type nat def deltat 
possessed encoding natural number 
closed constant free expression type equivalent beta eta reduction encoding 
reasonable regard nat type natural numbers 
encoding program arithmetic functions succ def nat add def nat nat notice functions accept produce polymorphic functions 
functions go kind implicit polymorphism provided ml 
fundamental sets encoded similar spirit 
example type bool def deltat 
possessed choice functions closed expression type beta reduces functions 
reasonable regard bool type boolean values reflecting idea fundamental boolean binary choices 
trivially closed expressions type list def deltat 

normal forms form 


subexpressions type list regarded type lists elements type reflecting idea fundamental list reduce list sense apl 
encodings special cases general result discovered independently bohm leivant anticipated takeuti proposition 
sorted algebraic signature laws set polymorphic types sort closed normal forms constitute initial algebra 
operations algebra expressed functions types 
polymorphic calculus encompasses algebraic data types number theoretic computations 
examples kind programming entailed 
summary polymorphic typed lambda calculus far extension simply typed lambda calculus permits polymorphism 
language guarantees termination programs providing surprising degree expressiveness computations rich variety data types 
computable values classical val breazu tannen albert meyer argue guarantee termination substantially simplifies reasoning programs permitting conservation classical data type specifications 
polymorphism conservative simple types authors substantiate argument showing polymorphism superimposed familiar programming language features changing behavior 
practicality language far proven 
say reasonable function expressed program say expressed reasonable program 
clear language requires novel programming style 
certain important functions expressed efficient algorithms 
guarantee termination precludes interesting computations terminate involving lazy computation infinite data structures 
reservations apply pure polymorphic calculus fixed point operator added provide general recursion language expands include conventional functional programming including lazy computation guarantee termination lost 
known semantic models polymorphic typed lambda calculus divided species 
meaning type set equivalence classes partial equivalence relation model untyped lambda calculus 
view characterizes earliest models volume john mitchell type inference approach reduction properties semantics polymorphic expressions embeds models natural setting effective topos 
connection kind model effective topos equivalently realizability universe noted moggi 
second kind model meaning type scott domain 
earliest models domains sets fixed points closures universal domain closure domain idempotent continuous function domain extends identity function 
facts permit concept serve model polymorphic calculus ffl universal domain domain continuous functions isomorphic set fixed points closure ffl set closures regarded meanings types isomorphic set fixed points closure similar models developed concept closure replaced finitary retraction finitary projection 
girard devised model qualitative domains stable functions described system variable types years 
models kind described 
domain models describe pure calculus extension obtained adding fixed point operators 
fail capture fact expressions denote terminating programs represent proofs type interpreted proposition 
vivid consequence failure type deltat clearly false interpreted proposition type expression pure language denotes nonempty domain 
types empty denotations pivotal question semantic models implications described empty types polymorphic calculus meyer mitchell moggi statman 
shortcoming domain models failure capture notion parametricity 
christopher strachey coined word polymorphism distinguished ad hoc polymorphic functions arbitrarily different meanings different types parametric polymorphic functions behave similarly different types 
intuitively parametric polymorphic functions defined polymorphic calculus domains denoted polymorphic types domain models contain ad hoc functions 
known partial equivalence relation models enforce parametricity sense collapsed term model 
general agreement define parametricity precisely generally attempt direction approach appears bainbridge freyd scedrov scott section volume 
fact expressions strongly normalizable certain types correspond initial algebras plausible model extending naive settheoretic model simply typed lambda calculus types denote sets denotes set functions conjecture 
year proved conjecture false 
proof uses cardinality argument classical constructive logic 
shown set theoretic models constructive metatheory 
soon gordon plotkin generalized proof showing general property functors cartesian closed category underlying arbitrary model expressed calculus 
generalization described functors expressible polymorphic typed lambda calculus 
beneath specific models lies question general constitutes model language discussed kim bruce albert meyer john mitchell semantics second order lambda calculus 
answer question category theoretic concepts seely 
polymorphic lambda calculus raises problem type inference 
type inference straightforward explicitly typed form calculus explicit statement types variable bound serious burden programmer 
ideally algorithm examine expression untyped lambda calculus decide assignment types variables expression typed 
despite considerable efforts existence algorithm polymorphic calculus remains open question 
current research question described polymorphic type inference containment john mitchell 
type inference approach reduction properties semantics polymorphic expressions author applies type inference study calculus obtaining simplified proof strong normalization property proof completeness class partial equivalence relation models 
author wishes val breazu tannen kim bruce carl gunter giuseppe longo albert meyer john mitchell eugenio moggi gordon plotkin andre scedrov rick statman contributed comments improved accuracy generality 
amadio bruce longo finitary projection model second order lambda calculus solutions higher order domain equations 
proceedings symposium logic computer science cambridge massachusetts june 
pp 

bohm berarducci automatic synthesis typed programs term algebras 
theoretical computer science vol 
pp 

breazu tannen coquand extensional models polymorphism 
theoretical computer science vol 
pp 

jr fischer basis elf extensible language facility 
fall joint computer conference san francisco california december 
afips conference proceedings vol 
part thompson book washington pp 

constable implementing mathematics nuprl proof development system 
prentice hall englewood cliffs new jersey pp 
coquand gunter winskel di domains model polymorphism 
mathematical foundations programming language semantics rd workshop tulane university new orleans april edited main melton mislove schmidt 
lecture notes computer science vol 
springer verlag berlin pp 

coquand gunter winskel domain theoretic models polymorphism 
information computation vol 
pp 

curry feys combinatory logic volume studies logic foundations mathematics north holland amsterdam xvi pp 
second printing 
freyd scedrov semantic aspects polymorphic lambda calculus 
proceedings symposium logic computer science ithaca new york june 
pp 

girard 
interpr etation elimination des coupures de arithm etique ordre sup erieur th ese de doctorat etat 
universit paris vii june 
girard 
une extension de interpr etation de godel analyse son application elimination des coupures dans analyse la th eorie des types 
proceedings second scandinavian logic symposium university oslo june edited fenstad 
studies logic foundations mathematics vol 
north holland amsterdam pp 

howard formulae types notion construction 
curry essays combinatory logic lambda calculus formalism edited seldin hindley 
academic press london pp 

hyland effective topos 
brouwer symposium edited troelstra van dalen 
studies logic foundations mathematics vol 
north holland amsterdam pp 

hyland small complete category 
annals pure applied logic vol 
pp 

leivant reasoning functional programs complexity classes associated type disciplines 
th annual symposium foundations computer science ieee tucson arizona november 
pp 

longo moggi constructive natural deduction set interpretation 
mathematical structures computer science vol 
pp 

martin lof intuitionistic type theory 
bibliopolis italy ix pp 
mccracken finitary retract model polymorphic lambda calculus 
unpublished syracuse university 
mccracken investigation programming language polymorphic type structure ph 
dissertation 
syracuse university june iv pp 
pitts polymorphism set theoretic constructively 
category theory computer science edinburgh scotland september edited pitt poign rydeheard 
lecture notes computer science vol 
springer verlag berlin 
prawitz ideas results proof theory 
proceedings second scandinavian logic symposium university oslo june edited fenstad 
studies logic foundations mathematics vol 
north holland amsterdam pp 

reynolds polymorphism set theoretic 
semantics data types international symposium sophia antipolis france june edited kahn macqueen plotkin 
lecture notes computer science vol 
springer verlag berlin pp 

reynolds approaches type structure 
mathematical foundations software development proceedings international joint conference theory practice software development berlin march edited ehrig floyd nivat thatcher 
lecture notes computer science vol 
springer verlag berlin pp 

reynolds theory type structure 
programming symposium proceedings colloque sur la programmation paris april edited robinet 
lecture notes computer science vol 
springer verlag berlin pp 

reynolds types abstraction parametric polymorphism 
information processing proceedings ifip th world computer congress paris september edited mason 
elsevier science publishers 
north holland amsterdam pp 

seely categorical semantics higher order polymorphic lambda calculus 
journal symbolic logic vol 
pp 

strachey fundamental concepts programming languages 
unpublished lecture notes international summer school computer programming copenhagen august 
takeuti proof theory 
studies logic foundations mathematics vol 
north holland amsterdam viii pp 
metamathematical investigation intuitionistic arithmetic analysis 
edited troelstra 
lecture notes mathematics vol 
springer verlag berlin xvii pp 

