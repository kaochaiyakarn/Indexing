electronic notes theoretical computer science url www elsevier nl locate entcs volume html pages coordinated distributed diagram transformation software evolution paolo bottoni francesco parisi presicce gabriele taentzer universit di roma la sapienza italy technische universit berlin germany approach maintaining consistency code speci cation consistent refactoring speci cation consists diagrams di erent uml diagram families 
distributed graph transformations applied coordinated way di erent diagrams 
refactoring modelled graph transformation representing code uml diagrams taken represent di erent views code 
refactoring common practice programmers possibility writing subprograms arose 
central practice called extreme programming undergone witnessed instance fowler book 
refactoring apply programming paradigm particularly signi cant object oriented languages largely bene ts synergy research design patterns new possibilities refactoring apparent 
refactoring usually meant preserve program behaviour improving reusability exibility relying purely functional view behaviour expressed mapping inputs outputs 
refactoring consequences considers computing process expressed instance sequence method calls state changes object activity 
hand refactoring usually performed source code level dicult maintain consistency code speci cation expressed instance uml diagrams refers original version code 
strategies adopted recover speci cation partially supported ec research training network 
published elsevier science bottoni parisi presicce taentzer change chosen set changes instance tools fujaba de ne ects refactoring di erent parts speci cation 
option easily realised structural speci cations transformations diagrams notationally equivalent lexical transformations source code 
easy de ne ects behavioural speci cations 
discusses approach problem maintaining consistency source code structural behavioural diagrams grounded formal framework graph transformations 
particular uml speci cation diagrams represented graphs representation source code expressed suitable attributed graph structures 
uml diagrams code seen di erent speci cation views software system consistency management views code modelled graph transformation distributed graphs 
complex refactorings checking complex preconditions broken collections distributed transformations application managed control expressions suitable transformation units 
outline 
reviewing approaches refactoring general problem specifying software evolution graph rewriting section provide background notions distributed graph transformation section 
section reformulating problem maintaining consistency di erent forms speci cation code speci cation suitable distributed graph transformations illustrate approach means refactorings 
section 
related formal methods applied clear de nition conditions refactoring takes place opdyke seminal thesis preconditions behaviour preservation analysed robert thesis ect refactoring formalised terms postconditions composite refactorings discussed preconditions refactoring guaranteed postconditions previous 
uml community expressed ects refactoring uml diagrams mainly class state diagrams 
similarly mens studied transformations expressed terms graph transformations mapping diagrams type graphs 
type graphs equivalent syntax class diagrams metamodel uml 
mens documented exploits techniques control expressions negative conditions parameterised rules 
studies focus ect refactorings single types diagrams investigate example coordination change class diagram sequence state bottoni parisi presicce taentzer diagram 
try attack problem showing types refactorings require modi cations diagrams proposing constrained way rewriting di erent graphs model full formalisation refactoring process 
propose approach derived distributed graph transformation grounded double pushout approach graph transformation 
classically hierarchical view distributed systems high level network graphs de ne architecture distributed system low level speci cation ones refer speci implementation local systems 
approach applied speci cation viewpoints framework describe complex systems di erent views plans coordinated 
viewpoint approach inconsistencies di erent views tolerated approach proposed di erent graphs modi ed coordinated way consistency maintained 
formal background distributed graphs nodes edges typed attributed 
distributed rule application follows double pushout approach graph transformation described exploiting rules negative application conditions 
control distributed transformations transformation units 
de ned general approach 
transformation units distributed graph transformation 
combination provides global control structured graph manipulations 
distributed graph transformation distributed graph transformation form structured graph transformation abstraction levels network object level 
network level contains description system architecture network graph dynamic recon guration runtime network rules 
object level graph transformation manipulate local object structures 
describe synchronized activity distributed object structures combination graph transformations levels needed 
distributed graph consists network graph network node re ned local object graph 
network edges re ned graph morphisms local object graphs describes object graphs interconnected 
analogously distributed graph morphism de ned network morphism normal graph morphism set local object morphisms graph morphisms local object graphs 
node mapping network morphism re ned graph morphism corresponding local bottoni parisi presicce taentzer graphs 
mapping network edges guarantees compatibility corresponding local object morphisms 
double pushout approach distributed graph rule de ned distributed graph morphisms applied distributed host graph transforms target graph injective match distributed graph morphism 
speci es embedding target graph 
elements interface graph preserved transformation 
due space reasons presentation rules graph implicit intersection rule may contain set negative application conditions nac express exist rule applicable 
negative condition de ned set distributed graph morphisms fn lg course refer values attributes 
rule applicable graph set matched host graph gures schemes graph productions actual rules 
schemes set nodes employed mapped number nodes host graph including zero 
matching set node case exhaustive nodes host graph satisfying condition indicated rule 
transformation units transformation units control rule application control condition speci ed expressions rules 
concept transformation units de ned independently approach graph transformation 
transformation unit refers certain graph transformation approach consisting class graphs class rules rule application operator yielding binary relation graphs rule class graph class expressions class control conditions 
transformation unit consists initial terminal graph class expression de ning graphs serve valid input output graphs 
set rules set transformation units contained control condition describing way rules transformation units applied 
typically contains expressions sequential application rules units conditions application loops applying rule long possible 
explicit presentation typical control expressions 
apply transformation units distributed graph transformation 
underlying graph transformation approach class distributed graphs class distributed rules dpo way rule application de ned 
class described 
class needed 
trivially left empty meaning special initial terminal graph classes speci ed 
bottoni parisi presicce taentzer additional mechanisms specify control rule application 
rst possibility label edges path expressions summarising possible concatenations edges alternative paths elements 
check existence paths realised suitable transformation units de ning check existence sequence links path expressions intended notational shortcut 
second mechanism parameterised rules actual rules obtained instantiating parameters context hand 
refactoring section analyse examples refactoring involve transformations uml diagram 
refactorings expressed pre post conditions 
typical interaction refactoring tool modelled list events 
user selects segment code 
ii user selects list available possible composite refactorings 
iii tool checks preconditions refactoring 
iv preconditions satis ed refactoring takes place ects described postconditions 
message issued user 
choice perform speci refactoring usually left software designer 
complex refactorings resolved sequences individual refactoring steps 
follows consider ect complex refactorings speci ed individual graph transformation rules possibly distributed di erent diagram graphs model processes lead choice particular refactoring 
ect refactoring di erent diagrams expressed schemes graph rewriting rules instantiated proper names say classes methods indicated code transformation 
preconditions usually checked textual code involve analysis properties properly structural visibility variables speci portions code existence calls methods 
graph representation diagrams code line consider type graphs de ning syntax concrete visual languages de ned uml 
particular refer uml class sequence state diagrams type graphs de ned coherence metamodel de nition languages ocial uml documentation 
assume possibility representing source code form bottoni parisi presicce taentzer method type variable params return reaches declared fig 

type graph code representation method typical compiler construction 
directed graph nodes lines code edge exists nodes program execution line represented rst node followed line represented second node 
line node attached set nodes describing variables referred de nition usage line methods called line 
set parameter nodes describing types arguments method return node describing type result considered 
describes resulting type graph 
type graph simpler representation relations software entities considers inheritance classes presence subexpressions method bodies 
deal inheritance uml class diagram interested representing body method keep trace variables methods complete expressions 
hand maintain representation code lines reachability relations allows notion block section 
similar representation diagrams graphs sequence diagrams ideas uml metamodel 
simplify matters describe transformations directly concrete syntax sequence diagrams 
distributed graphs suited describe interrelationships diagrams code fragments 
approach network graph see describes speci cation software system stage evolution process 
network node associated local object graph representing uml diagram code call nodes diagram nodes interface node 
pair diagram nodes common interface node exists 
re nement interface nodes local level shows common graph parts diagrams current state 
network edges connect diagram nodes interface nodes re ned local level de ning common interface parts embedded diagrams 
interface graph related parent graphs graph embeddings injective graph morphisms 
bottoni parisi presicce taentzer class cs cm cf sf flow mf ms fig 

type graph network graphs describing software system speci cations code extraction rst example consider extract code method refactoring segment code isolated name replaced original code call newly formed method 
preconditions refactoring code extracted seen block entry point point exit maximal block immersed fragment code properties block 
name method exist class hierarchy ected class belongs 
post conditions refactoring assert new method created containing extracted code method receives parameters variables visible class code passed local original method code replaced original method proper call new method 
describes form rule scheme ect refactoring graph representing code 
gure set node indicate lines code original version method ected transformation 
rest method left untouched 
programmer provide speci instantiation scheme listing lines moved 
set nodes indicate variables methods referred moved lines 
labels follows variables identify sets nodes 
negative application conditions express requirement moved lines constitute block stating line code reach reached moved lines distinct paths 
negative application condition complemented textual condition 
operational semantics ocl conditions exploiting transformation units integrated current approach 
general complex preconditions expressed rules identical left right sides 
transformation unit de ne control mechanism actual transformation occurs positive precondition satis ed negative precondition satis ed 
bottoni parisi presicce taentzer linea reaches reaches nac linea reaches reaches subset subset fig 

transformation scheme code modi cation extract code method refactoring owns owns owns owns owns nac inh inh fig 

transformation scheme class diagram modi cation extract code method refactoring 
describes ect refactoring class diagrams 
structural level existence new method fresh name class shown 
ects referred variables existence call method observable textual description re ected structural diagram 
negative application conditions state method signature new appear class higher lower hierarchy modi ed class 
conditions path expressions indicate transitive closure inheritance relation 
newly created call observed behavioural level shown 
referring concrete sequence diagrams representation graphs oblique lines notational shortcut indicate precede activation old method 
expressed syntax graph path expression labelled rst node representing receiving instance node representing action 
case execution original code represented state process activity state diagram state process replaced states state transitions distinguish states bottoni parisi presicce taentzer fig 

rule scheme sequence diagram modi cation extract code method refactoring 
completed fig 

rule scheme state diagram transformation extract code method refactoring prior coinciding subsequent execution extracted code 
describes transformation 
incidentally suggests stringent preconditions applied ect checking state depicts situation parts code executed subsets supersets extracted code 
case states system transit execution extracted code 
case insertion intermediate state corresponding execution signi cant 
transformations applied maintain consistency diagrams code 
network level transformations simply rewrite nodes 
rewriting transformation associated local graph occurs 
transformation units state nodes rewritten long possible 
amounts rewriting diagram nodes network level long possible transform associated local graph ected refactoring applying transformations local graphs long possible 
example modi cation sequence diagrams activation old method occur times lifeline 
instantiation relevant transformation scheme applied long possible sequence diagram 
necessary rules modi ed tag elements transformation applied negative application conditions avoid applying rule twice element 
transformation unit completed removing tags 
bottoni parisi presicce taentzer owns params params owns params owns fig 

rule scheme class diagram transformations move method refactoring 
noted preconditions refactoring distributed di erent graphs case representing class diagram representing code 
process regulated control expressions transformation unit condition application refactoring satisfaction preconditions relevant graphs 
method movement code method moved de ning class di erent class takes new name 
original method replaced forwarding method simply calls new method destination class 
original method refer members original class signature method enriched original class indicated node labelled 
case method moved superclass expressed rule scheme similar require existence inheritance relation nodes labelled 
class diagrams sequence diagrams modi ed transformation scheme depicted 
call forwarding method said modify behaviour class re ected diagram prevent subsequent re nements diagram violating correct sequence calls 
figures exempli ed case method instance method 
possible consider case static methods obvious modi cations 
transformation unit prescribe network nodes type local nodes contain moved method ected transformation 
approach maintaining consistency code model diagrams presence refactorings 
refactoring described set coordinated graph transformation schemes bottoni parisi presicce taentzer fig 

rule scheme sequence diagram transformations move method refactoring 
instantiated speci code modi cation applied diagrams ected change 
seen way avoid reverse engineering reconstruct models modi ed code model seen way maintain consistency diagrams re engineering steps proceeding actual code modi cation 
thorough study existing refactorings experimentation actual code needed produce library distributed transformations practical cases existing tools management distributed graph transformations transformation units 
due anonymous referees comments suggestions tom mens providing comments making available preprint 
appel modern compiler implementation java cambridge university press 
beck fowler planning extreme programming addison wesley 
bottoni koch parisi presicce taentzer automatic consistency checking visualization ocl constraints evans kent editors uml uni ed modeling language number lncs pp 

kreowski graph transformation modules composition nagl sch unch editors proc 
pp 

bottoni parisi presicce taentzer engels andries rekers represent visual speci cation marriott meyer editors visual language theory springer pp 

fowler beck brant opdyke roberts refactoring improving design existing code addison wesley 
meyer taentzer integration multiple perspectives distributed graph transformation nagl sch unch editors proc 
pp 

meyer taentzer viewpoint oriented software development distributed graph transformation basis living inconsistencies proc 
th ieee international symposium requirements engineering pp 

koch parisi presicce describing policies graph constraints rules proc 
appear 
mens conditional graph rewriting domain independent formalism software evolution nagl editors applications graph transformation industrial relevance pp 

mens demeyer janssens formalising behaviour preserving program transformations proc 
appear 
recovering uml diagrams java code patterns jahnke ryan editors proc 
nd workshop soft computing applied software engineering enschede netherlands 
omg uml speci cation version www omg org technology documents formal uml htm 
opdyke refactoring object oriented frameworks ph thesis university illinois urbana champaign 
roberts practical analysis refactoring ph thesis university illinois 
suny 
ez refactoring uml models gogolla editors uml uni ed modeling language 
modeling languages concepts tools 
th international conference lncs pp 

taentzer fischer koch visual design distributed systems graph transformation ehrig 
kreowski montanari rozenberg editors handbook graph grammars computing graph transformation volume concurrency parallelism distribution pp 


