declaring checking non null types object oriented language distinguishing non null possibly null type level detect null related errors objectoriented programs compile time 
gives proposal retrofitting language java non null types 
addresses central complications arise constructors declared non null fields may initialized partially constructed object accessible 
reports experience implementation annotating checking null related properties programs 
categories subject descriptors programming languages software engineering software program verification assertion checkers class invariants programming contract logics meanings programs specifying verifying reasoning programs general terms languages reliability verification keywords java null type system non null types 
vital imperative object oriented programming language ability distinguish proper objects special null object null objects commonly provided language constant null designing program permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
oopsla october anaheim california usa 
copyright acm 
manuel hndrich rustan leino microsoft research microsoft way redmond wa usa maf leino microsoft com programmers need consider value may null need handle null differently proper objects 
handling error prone preferable compiler tool enforces programming discipline programmer intended points places code may errors 
clearest direct way language accommodate tools type expressions may yield null 
type systems mainstream object oriented languages java provide object type declared class null value object type 
propose splitting types possibly null non null types expressions may yield null identified 
type systems distinguish special values null proper values exist 
tagged unions object centered language clu example 
similarly object oriented languages theta moby functional languages ml haskell distinctions possibly null non null type systems 
languages declaration field non null type provides part contract construction object record initialize field proper non null value read access field yields non null value update field requires non null value non field object invariant enforced statically compile time type system 
mentioned languages simple mechanism establish object invariant object record construction accessed fully constructed 
programming restriction fairly simple prove part contract 
unfortunately mainstream languages java give access object constructed construction ongoing 
extra flexibility reasoning proper initialization objects harder programmer automatic tool type system proposing 
type safe languages java ensure fields zero equivalent values type null object constructed accessed fields declared containing non null null initialization sufficient field properly initialized 
adjectives partially initialized raw objects containing non fields may uninitialized type system distinguishes raw objects fully initialized objects 
example code illustrates problem dealing partially initialized objects 
class contains field name type string annotated non null 
examples annotations form notnull annotate types null related attributes 
class notnull string name public notnull string name virtual void int 
constructor correctly initializes field name non null string obtains parameter 
proceeds call virtual method object constructed 
code may look correct class properly initializes field correctness code guaranteed 
see consider code possibly declared separate module class notnull string path public notnull string notnull string base path override void int path 
class extends class field path declared non null 
constructor correctly calls base class constructor initializes field path 
problem code base call constructor virtual method may invoked 
time field path object construction initialized 
accesses path method may yield possibly null value field declared non null 
propose way retrofit language java non null types 
proposal allow access object constructed completely constructed ways statically checked soundness 
proposal accommodates modern programming styles 
contributions follows give sound technical solution deal explicit object initialization presence inheritance subtyping access object construction allowed 
main insight initialization monotonically evolving uninitialized initialized formalize insight presence unknown object extensions 
proposal supports existing main stream languages entirety 
require changes language semantics runtime implementations 
program accepted type system valid resp 
java program unchanged behavior 
type system rule programs safety respect proven 
advantages adding non null types language java include statically checked interface documentation clients see method expects non null argument see promises non null return value 
implementations rely non declared parameters held promises non null results 
statically checked object invariants object invariants fields holding non null declared statically checked 
precise error detection error null program design expects non null value detected program point error committed comes program point object dereference operation uses value 
performance nonnull type dereference operations throw statements proceed normal null check providing possible runtime advantage cases 
runtime supports non null types programmer limit runtime checks inserted judicious non null types 
freedom runtime checks enables effective compiler optimizations part due fewer possible exception paths 
fewer unexpected null exceptions language document lists cases null thrown 
non null type contexts compiler guarantees operations throw null exceptions 
basis checkers non null types facilitates task writing program checking tools language eliminating large source false warnings 
rest organized follows section introduces non null types 
section deals crux establish object invariants 
sections extend proposal array types value types 
section examines impact design methods call parameters static class fields generics 
section describes checker implemented section discusses experience checker non trivial program 
section describes design alternatives section discusses related section concludes 

non null types declared class interface propose addition distinguished type non null proper objects type avoid confusion write just types including null value 
java currently provide just possibly null type non null type 
notation describe concepts propose language syntax 
language currently requires expression type stipulates null exception thrown runtime expression evaluates null require expression type example field dereference operator takes expression non null type left hand argument field name right hand argument 
types type expected 
example formal parameters method results declared type java definite assignment rules local variables uninitialized local variables evaluate null read assigned 
local variables non null types supported nicely languages eventual initializations variables forced assign non null 
expect declared subclass super interface denotes subtype relation 
furthermore subtype expression type freely assigned variable type go way narrow type requires test 
example new 
allocate non null object direction allowed 
null context type int type non null note removed null exceptions language null violations show statically type errors 
code snippet shows application new 
type object constructed non null 
expression type expressions instanceof java return true evaluates object type null 
need expressions extended tests null written languages directly 
furthermore expression returns returns null 
change language needed proposal difference expressions expressions type entire story existence compound values data records objects elements arrays fields value types 
example shows construction compound values complicates story deal 
look object construction array construction value type construction 

construction objects field instance variable class may declared non null type consequently expects expression yield non null value type 
construction object execution constructor constructors superclasses may initialized denotes object constructed 
value may yield null despite fact declared non null type java limit construction problem limited cases field accessed special keyword passed parameter routine example callee may yield null despite fact declared type propose type solution problem examine example faulty 
consider object construction constructor just initialization field name 
point know fields declared class properly initialized fields super classes properly initialized language semantics guarantees constructor called base constructor 
don know point fields potential subclasses properly initialized 
type system perspective type method call really object type just context object expected 
context virtual calls virtual calls may implicitly reveal state subclasses initialized 
propose solving problem introducing family types type raw denotes partially initialized objects type subclass thereof 
precisely class raw denotes value structure value type field may yield null field declared non null type 
field type class expression may evaluate null type raw require expressions assigned type case type raw restrictions guarantee object fully initialized uninitialized words field object initialized non null field contain null value 
invariant necessary achieve soundness possi object broken class frames 
object viewed static type raw partially initialized frames marked asterisk 
note frames unknown class extensions considered partially initialized 
object viewed static type raw object viewed static type raw note frames unknown class extensions considered partially initialized 
object object object object illustration class frames raw types ble object typed raw typed may captured construction object construction completed 
allowed assign null value subsequent read result null declared type restrictions place objects evolve monotonically full initialization 
innovation enables keep overhead checking field initializations manageable 
require constructor class including default constructor non null field declared directly class assigned 
require path constructor normal return include assignment non null field 
refer definite assignment rules java details definition path 
rule means time newly constructed object returned caller new non null fields non null values 
class new 
type raw effect constructor takes care casting object constructed type raw type technically break object stack class frames class frame represents fields introduced declarations particular class see top 
object example dynamic type class frames class class root class object type raw distinguish entire family raw types form raw type supertype extra type marks lowest class frame properly initialized 
ev object cast yields object illustration cast raw raw known static type equal dynamic type object case new expression type raw equal object implicit coercion raw non raw dynamic type known ery class frame type properly initialized frames strictly known initialized 
illustrates cases various raw types statically known class inclusion possible class extensions raw types easy handle ordinary type casts raw raw illustrated 
refinement hand precisely state type object returned particular constructor 
entry constructor class type raw call base class constructor type raw constructor class type raw call constructor expression new 
constructed object type raw object frames class frame initialized 
statically known dynamic type object subclass frames object fully initialized entire expression type see 
subtyping raw types expect declared subclass raw raw furthermore raw raw initialized 
similarly raw raw maximal partially initialized type family raw completeness introduce possibly null type partially initialized objects written raw declared subclass raw raw furthermore raw raw raw practice don expect types necessary 
type raw constructor assignments variables done variable appropriate type supertype raw example passed parameter corresponding formal parameter partially initialized type 
explicit place java give type receiver parameter case passed parameter method virtue method invoked imagine adding declaring instance method special keyword 
method invoked object type raw method formal receiver parameter appropriate type 
correcting example revisit example 
identified discussion reads field path method may return null object fully constructed 
needed handle example state explicitly signature methods receiver partially initialized 
annotation raw method mark method callable raw object objects type raw type corrected code 
class notnull string name public notnull string name raw virtual void int 
class notnull string path public notnull string notnull string base path raw override void int path 
annotations possible verify code consistent type rules non null types 
call method constructor type raw expected type method raw supertype raw call valid 
conversely method body know type raw raw type read accesses path may yield null method code correctly handle value 
method accesses field name expect null strengthen type signature method raw case method rely fact class frame object properly initialized field name non null 
casts raw non raw types may situations programmer knows object fully initialized type system prove 
situation allow expressions partially initialized type fully initialized type 
propose cast succeed checking non null declared field runtime type proper initialization 
check implemented java reflection 
alternatively completion construction measured constructor having finished object having returned new expression prompted construction 
alternative approach requires support runtime extra bit object required 
case behavior operators instanceof affected affect operands 
operators inspect named type object 

array types possibly null non null types allowed element type array type 
addition array type type java may possibly null type non null type 
types type non null array non null elements non null array possibly null elements possibly null array non null elements possibly null array possibly null elements covariant array types java expected presence new types provided runtime check element assignment takes non element types account 
aspect requires runtime support 
design runtime support covariant subtyping array elements respect non null disallowed 
construction objects problem construction arrays 
particular problem element type array non null type 
propose allocation new expression gives size array allocated return array type raw analogous fields partially initialized object reading elements partially initialized array may yield null expressions assigned elements array non null 
classes fields array program point corresponds constructor time construction array supposed completed 
furthermore simple definite assignment rule won ensure array elements assigned 
programmer cast array type raw array type programmer claims assigned elements array 
performs check array elements initialized non null 
typical program fragment array initialization form raw mp new 
initialize elements mp mp require check may expensive note cost program initializing array element exceed cost expression checking array elements initialized 

value types language supports value types struct declarations 
structs data records similar classes manipulated values data record 
structs declared similarly objects fields methods 
struct constructors initialize fields struct 
distinguishes structs objects initialization perspective structs default constructor initializes fields zero equivalent values null fields 
default constructor overwritten 
poses problem want allow structs non null declared fields structs default constructor establish invariant struct initialize fields 
ease presentation distinguish structs default constructor sufficient structs call invariant 
struct non null declared field contains 
model partially initialized analogously partially initialized object giving raw type raw constructor struct produces value type default constructor produces value type raw non null type possibly null type struct struct 
fields extend rule accessing fields partially initialized objects 
recall field type reading field yields possibly null value type additional case field type reading field yields value type raw struct may properly initialized 
assignments field require value type arrays handled similarly arrays nonnull 
allocation array produces partially initialized array type raw array initialized proper explicit cast needed obtain type cast involves number non null checks element determine properly initialized type subtype relation value types includes boxing conversion value type class root object adapting relation raw nonnull types yields subtype relations object raw raw object raw 
language constructs section examines impact non null types langauge constructs discussed 
call parameters complication arises languages support call ref parameters 
formal ref parameter represents storage location actual parameter bound 
ref parameter read assigned callee operations effect performed directly actual parameter 
parameter value read callee type formal ref parameter supertype type actual parameter 
ref parameter assigned callee type formal subtype type actual 
ref parameters types formal actual identical 
problem class field type type raw type read context type write context 
types identical type formal ref parameter identical 
problem arises field contains 
way address problem introduce separate types read write accesses ref parameters 
avoid complicating matters simply disallow expression form actual ref parameter partially initialized type field type 
note analogous complication parameters 
parameter ref parameter callee assign parameter returning callee reads parameter assigned 
second value callee reads parameter parameter declared type 
static class fields runtime semantics java guarantee static fields null initialized 
furthermore prior access static field runtime tries execute static class constructor class algorithm guarantees static field initializers executed access presence cycles pattern static class constructors forward class constructor fields hasn initialized 
static field class accessed initializer running runtime simply obtains current value field may null handle entire initialization semantics conservatively type system practical wouldn able take advantage common non cyclic case 
assume cyclic dependencies static initializers multiple classes symptomatic design problem means 
testing usually reasonable way detect problems complexity static initializers typically low 
assume static field different class accessed static constructor initialized 
left problem forward static constructor fields initialized 
class treat static fields belonging special static object type implicitly passed methods 
default methods expect static objects fully initialized state type class relying initialization static fields 
execution static constructor class assume static fields uninitialized expressed giving static object type raw static constructor responsible initializing static fields class 
call method static constructor class called method specially annotated handling raw static state class words method rely static fields class initialized 
method rely initialization static fields classes 
practice think restrictions reasonable 
methods called static constructors general aware fields initialized 
common methods called static constructors instance constructors 
annotated 
generics major release add support generic types methods language 
similar additions planned java language 
section briefly explores impact generics proposal 
distinctions possibly null non null values type level orthogonal generics proposals sense type abstraction proposals abstracts underlying class interface type types 
bound generic type context class method possible form types instantiations types modifiers 
alternative approach type abstraction abstracts problematic leads situations need give meaning types form contexts instantiate addition type genericity automatically provide genericity 
genericity orthogonal added independently 

implementation evaluate design implemented non null checker 
section describes implementation simplifying assumptions 
augment type declarations programs language feature called custom attributes 
custom attributes structured comments persist compiled object code 
custom attribute consists name plus zero positional named parameters values limited compile time constants basic types 
annotating fields parameters results defined parameter attributes raw 
table lists correspondence types design syntax 
raw raw raw raw upto typeof table shows chose default non null type 
choice requires fewer annotations making possibly null case default 
simple matter allow alternative class wide module wide defaults 
attributes preserved cil common intermediate language bytecode produced compiler decided implement checker cil level language level 
approach offers advantages source code parsing semantic disambiguation necessary small defined set instructions needs handled checker works languages compile cil example visual basic managed 
cil local variables method bodies annotated attributes 
checker infers type information simple flow sensitive method local intra procedural data flow analysis 
analysis smart refine annotations branches tests null 
programmers ordinary tests null refine type raw design implemented special method static void raw object uses reflection dynamically check non null declared fields non null 
checker recognizes calls method treats argument initialized continuation 
checker implement full design described 
differences follows support non null array elements 
support annotations methods callable static constructors 
furthermore checker assumes programs free synchronization errors 
example possibly null field tested null subsequent read field intervening assignments field method calls assumed non null thread potentially update field null 
augmenting type declarations information allows static checker completely modular 
analyzes method body independently 
method calls annotations called method signature check validity call 
checker implementation completely separate compiler runtime 
modified cil runtime way 
implicit null checks language imposes performed runtime execution 
program pass checker run runtime throw exceptions null accesses 
extensions implementation small extensions described far 
strengthened return type overriding methods may want strengthen result type possibly null nonnull 
sound allow cases attribute notnull 
initialized field precondition constructors convenient call accessor returns aspect object construction 
default checker flags calls errors receiver raw 
accessors typically read field 
field calling context calls permitted 
added simple refinement raw annotation form raw annotate accessors 
states object raw initialized fields 
helper initializers classes helper methods called constructor initialize fields 
checker prove fields initialized constructor needs extra annotations helper method indicating fields method initializes 
added annotations inits inits annotations parameter receiver type imply entry method parameter type raw supertype annotation additionally states exit parameter type raw fields declared initialized 
second annotation states listed fields initialized 

experience experimented checker programs roughly kloc 
checker able validate non individual places code net cil semantics null check performed 
checker takes approximately seconds run ghz pc 
surprisingly checking simple property non point higher level design issues code 
describe kinds errors detected code base shortcomings current checker implementation 
errors non null errors simple failures handle possible cases program 
focus subtle bugs discovered 
vacuous initialization instances statement constructors foo foo right hand side foo intended denote parameter constructor 
turned parameter looked field initialization fact dummy assignment form foo foo wrong local operator test dynamic type object 
returns argument dynamic type compatible tested type returns null 
bool null return false bar bar 
code intends return false type unfortunately test compares null comparing null 
checker discovers problem access bar may null 
downcast checker assumes code null 
dynamic type static type 
long unchecked invariant true code looks fine invariant false code changes error gets caught desired stray null 
better downcast dynamically detect error earlier keep static type checker issuing error 
field declared high class hierarchy instances code field declared base class subclasses initialized field 
making field possibly null scenario undesirable caters subclasses expense users field 
better move field declaration derived base class possibly inserted field appear subclasses don 
transformation detected subclasses initialize field accessed 
sloppy inheritance occasionally inheritance purely subtyping purposes desire inherit implementation 
situations call interfaces 
situations type interface inheritance 
approach usually leads ugly code null initialize base class fields 
approach may viable subclass correctly reimplement methods base class 
possible base class public fields non virtual methods 
code null checking pointed case interface class type common supertype implementations 
non instance method checker marked calls instance methods constructors expecting receiver object raw state 
turned methods static didn access receiver object 
non sealed class couple classes trigger behavior calling constructor compute result construction cache 
constructed object access computed result 
checker marks method calls constructor errors receiver raw called methods declared expect raw receiver 
fixed case making classes sealed final java 
constructors sealed classes fields initialized checker knows object construction longer raw subclass fields 
annotations give impression density annotations table lists number kind annotations fields parameters receivers return types 
total raw annotated fields parameters receivers returns addition code contains assertions form debug assert null possible express invariant current annotations 
single cast raw non raw type dynamic check 
annotations place checker reports spurious warnings due incomplete handling static field initializers arrays null elements 
numbers show annotation burden small 
stems large part fact defaults chosen 
shortcomings experiment revealed shortcomings checker require extensions annotation language 
field precondition methods expect field non null fact calling context establish precondition 
annotations currently rich express precondition 
case differs initialized field precondition case described extensions section non null fields raw objects revert back null checking easier 
field postcondition methods establish possibly null field fact null callers rely immediately call 
need extra annotations express case 
similar case arises predicate methods test field non null return boolean 
context testing result deduces field non null 
parent child cycle instances code base constructor creates cycle object creates stores field child constructor passes constructor child object turn stores pointer parent 
code establishes child parent annotations allow establish invariant 
believe specialized set annotations parent child fields devised capture scenario 
problem rise solutions past 
lack polymorphism case code base method type object visit arg object arg implemented incompatible contexts 
implementation expected non null objects arg produced non null objects return second implementation accepted null arg produce null result arg null 
unfortunately addition generics solve issue annotations orthogonal generics generic types instantiated information see section 
staged initialization idiom approach currently handle staged object initialization object partially initialized constructor 
method called initializes part object newly initialized fields null 
developing generalization address problem 
properties possibly null values property pair methods getter reading writing aspect object 
syntax getter calls look exactly field reads writes 
field accesses checker refine type getter result tested null 
property subsequently accessed checker assumes returns possibly null 
avoid false positives rewrote code bind getter result local test null subsequent 
invariants objects complicated invariants expressed annotations 
example object may possibly null fields moment null 

design alternatives largest complication type system checker implementation relates raw objects instructive consider design alternative avoid complications 
avoid partially initialized objects keeping flavor constructors java constructors split sections 
prelude initialize fields current class frame access important section access constructor parameters 
example field initializers implicitly form prelude access constructor parameters feature frequently applicable 

call base class constructor 
point current class frame fully initialized class frames subtypes 

constructor body full access fully initialized 
structs design applied current net cil design allow definition default constructor 
properly initialize arrays syntactic form array comprehension serve purpose 
alternative design assumes objects fully initialized construction time simplifying model partially initialized objects arise 
simplifications desirable necessarily match programmer practice 
believe need generalize idea programmers describe state object outside dynamic scope constructor 
need arises staged initialization think common legitimate practice 

related goal proposal introduce degree rigor programming languages mechanism programmers state design decisions get help static checker identify places source code program live intended design 
similar goals example esc java static checking tool annotation language provides non null modifier variable declarations 
proposal differs esc java object invariants esc java enforced circumstances aimed sound design 
category related form non null types checking languages objects inheritance subtyping main complications addressed proposal lclint tool checking various properties programs provides null non null annotations soundness guarantees object invariants mrspidey tool analyzes scheme programs type errors including null access vault style language aiming making lowlevel programming safer providing typestate checking including null checking cyclone style language providing explicit region memory management ccured tool compiles type checks programs safer type system typed assembly language target language typed compilation uses idea monotonic initialization initialization flags presence inheritance subtyping 
null related object oriented languages mentioned 
languages provides access object construction avoiding problem having deal partially initialized objects 
null validations proven means presence dominating accesses object see marmot 
techniques prove kinds invariants system establish 
obtain modular analysis kinds annotations propose needed 
thought introducing non null types language java certainly isn new 
example proposals web stata smith 
proposals suggest non null types natural valuable 
proposal mentions difficult problem constructing objects non null components suggests solution problem 

summary retrofit object oriented language java non null types propose breaking types families types introducing taxonomy axes non null types versus possibly null types partially initialized types versus fully initialized types 
classes interfaces defined superclass types relations hold raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw raw experience implementation proposal positive eliminated null problems number design level problems 
sketching partially initialized types may help problems related initialization java 
readonly final java field allocation object assignment reading return value 
may lead unexpected behavior program especially read method called constructor constructor 
proposal fully initialized type guaranteed final value 
second constructor java may leak object constructed fully constructed throwing type exception type 
dangerous exception handler may expect object fully initialized 
proposal argument throw type exception java preventing partially initialized exceptions thrown 
partially initialized types help establishing maintaining object invariants generally 

robert deline manuel hndrich 
enforcing high level protocols low level software 
proceedings acm sigplan conference programming language design implementation pldi volume number sigplan notices pages 
acm may 
ecma 
standard ecma language specification december 
available web www ecma international org publications files ecma st ecma pdf 
david evans john guttag james horning yang meng tan 
lclint tool specifications check code 
proceedings acm sigsoft symposium foundations software engineering pages 
manuel hndrich rustan leino 
heap monotonic typestates 
proceedings st international workshop aliasing confinement ownership july 
kathleen fisher john reppy 
design class mechanism moby 
proceedings acm sigplan conference programming language design implementation pldi volume number sigplan notices pages 
acm may 
robert fitzgerald todd knoblock erik ruf bjarne steensgaard david tarditi 
marmot optimizing compiler java 
software practice experience 
cormac flanagan matthew flatt shriram krishnamurthi stephanie weirich matthias felleisen 
catching bugs web program invariants 
proceedings acm sigplan conference programming language design implementation pldi volume number sigplan notices pages 
acm may 
cormac flanagan rustan leino mark lillibridge greg nelson james saxe raymie stata 
extended static checking java 
proceedings acm sigplan conference programming language design implementation pldi volume number sigplan notices pages 
acm may 
james gosling bill joy guy steele 
java tm language specification 
addison wesley 
trevor jim greg morrisett dan grossman michael hicks james cheney wang 
cyclone safe dialect usenix annual technical conference general track pages june 
barbara liskov dorothy curtis mark day sanjay ghemawat robert gruber paul johnson andrew myers 
theta manual preliminary version 
memo programming methodology group mit laboratory computer science february 
available web www pmg lcs mit edu theta html 
barbara liskov john guttag 
abstraction specification program development 
mit electrical engineering computer science series 
mit press 
robin milner mads tofte robert harper 
definition standard ml 
mit press 
greg morrisett david walker karl crary neal glew 
system typed assembly language 
acm transactions programming languages systems 
george necula scott weimer 
ccured type safe retrofitting legacy code 
proceedings th acm sigplan sigact symposium principles programming languages pages 
simon peyton jones john hughes lennart augustsson dave barton brian boutel warren burton joseph fasel kevin hammond ralf hinze paul hudak thomas johnsson mark jones john launchbury erik meijer john peterson alastair reid colin runciman philip wadler 
haskell report february 
available web haskell org 
chris smith 
java constraints june 
available web net professional java nonnull html 
frederick smith david walker greg morrisett 
alias types 
proceedings th european symposium programming volume lncs pages 
springer march 
raymie stata 
improving safety java december 
available web larch www lcs mit edu raymie java html 
