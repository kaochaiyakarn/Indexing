playful computation pierre louis curien cnrs universit paris vii april er short tour interactive interpretation sequential programs 
emphasize computation computation successive bits information request 
core approach surveyed dates back berry author sequential algorithms concrete data structures late seventies culminating design programming language cds semantics programs type explored interactively 
decade major insights cartwright felleisen hand lamarche hand gave new decisive impulses study sequentiality 
cartwright felleisen observed sequential algorithms give direct semantics control operators call cc proposed include explicit errors syntax semantics language pcf 
lamarche unpublished connected sequential algorithms linear logic games 
successful program games semantics spanned nineties starting syntax independent characterizations term model pcf abramsky jagadeesan malacaria hand hyland ong hand 
basic acquaintance calculus domains linear logic assumed sections 
prologue playing ohm trees rst preparations 
self brie recall relevant notions 
syntax untyped calculus calculus short constructions variable term terms application mn term term abstraction term 
usual abbreviations mn mn similarly ary abstraction application 
macroscopic view quite useful easy check term exactly forms 
xm 


rst form called head normal form hnf second exhibits head redex easy property justi es name head normal form reduction sequence starting hnf 
xm 
consists interleaving independent reductions precisely 
xm 

xn 
reduction means replacement term sub expression form called redex 
normal form term contains redex equivalently contains head redex 
syntax normal forms constructions variable normal form normal forms 
xm 
normal form 
ready play 
consider normal forms zm term nm normal form anymore reduced follows nm 

suitable substitution instances 
geometric way describing interaction represent explicitly trees read left right follows represent computation progression tokens trees 
initially tokens root underlining indicate location tokens notice token choice move right right choice 
take pilot reads take third branch notice situation token knows move choice 
take pilot read take rst branch steps leave reader check steps follow closely sequence reductions 
graphical presentation enhances alternation 
tokens moves alternate sorts moves variables bunches abstractions 
call moves player moves opponent moves respectively 
view opponent move question head variable term rooted player move answer question 
see computation progression alternating moves describing path example simple 
general mechanism needs explicit manipulation pointers example variable bound immediate bunch 
refer interested reader machinery described larger class trees pointers called ohm trees ohm trees example 
main point highlight interaction pilot turn tell branch choose 
suppose tm free variable 
looking back sequence reductions reach head normal form tm tm geometrical form note help choose move machinery stops 
functional programming languages evaluation weak head normal forms 
getting full normal form computing interactive answer question exploration branches demand manner 
machine displays head variable normal form 
opponent choose branches explore machine restart reaches head normal form 
example choose rst branch eventually reach head variable called sort mechanism rst analysed nite lists built progressively 
term potentially nite normal form ohm tree 
prologue served purpose introducing keywords interactivity playful interpretation computation 
start 
scott plotkin denotational semantics takes roots recursion theory 
worth recalling statement rice theorem 
theorem asserts property recursively enumerable sets partial recursive functions de ned xed enumeration functions surjection set natural numbers sets partial functions 
pr denote set functions 
subset pr called fn ag usual sense 
theorem asserts exists nite approximation approximation means extension domain partial function de ned domain de nition contains coincide de ned 
simpler way saying graph contained graph domain de nition nite 
rice theorem intrinsic continuity property realm functions 
highlights complete partial order structure particular presence bottom element partial order unde ned function 
certainly key departure points taken scott take seriously 
element part picture takes new look basic functions 
take booleans example 
scott semantics set set tt ordered follows 
called ordering 
take old disjunction function bool bool bool 
gives rise di erent functions domain version bool speci cations completed full de nitions monotonicity por tt tt por tt tt por por por lor lor tt tt lor ror tt tt ror ror sor tt sor tt sor sor sor tt tt sor tt tt sor tt tt tt sor clear lor ror computed programs shape respectively xy tt tt 
xy tt tt 
hand intuitively clear sequential program sort compute por sequential program start examining arguments say case output value missing speci cation por tt tt output value say tt xy tt speci cation por 
formal proof por sequentially de nable refer syntactic proof section model theoretic proof section logical relations 
sor story di erent natural sequential programs xy tt 

xy tt 

starting point model sequential algorithms section interpret programs di erent objects notice nally sequential programs computing lor ror sor 
program lor look xy tt tt tt tt 
stuttering program perfectly correct syntactically 
program interpreted model object di erent program lor departure point model sequential algorithm hand games semantics hand 
shall come back point section 
close section give rationale names section 
reader guessed pre xes ls rs stand parallel left right left strict right strict respectively 
symmetric algorithms sequential algorithms introduce formal notions give self contained sequential algorithms light games interpretation lamarche 
proofs omitted section regards coincidence de nitions composition proof section easily adapted 
de nition sequential data structure sets cells values assumed disjoint collection non empty words form 

alternating starts cell 
assumed closed nonempty pre xes 
call elements positions call move element denote move 
position value called response position cell called query 
range positions queries responses respectively 
denote sets queries responses respectively 
pause comments perspective 
important step semantic account sequential computing taken berry developed stable model function por excluded 
winskel described model concretely terms event structures girard proposed simpler form called coherence spaces led discovery linear logic see chapters 
event structures coherence spaces data constructed elementary pieces called events tokens 
example pair booleans tt obtained set elementary pieces tt 
precisely technically structure bool bool coherence space events tt tt 
tt set 
sequential data structure concrete data structure de ned events cut halves cell value opponent move player move 
structure bool bool sds cells values tt tt 
event say tt decomposed position tt 
best way understand think computation 
pair booleans output program demand 
cell reads program observer want know left coordinate result program tt answer query 
important exploited section decomposition events gives additional space counterpart world coherence spaces usual category domains structure cell value 
de nition strategy subset closed response pre xes binary non empty greatest lower bounds glb denotes empty word 
counter strategy non empty subset closed query pre xes binary glb 
range strategies counter strategies respectively 
strategy rc qv write say accessible 
likewise de ne response counter strategy sets strategies counter strategies ordered inclusion 
denoted respectively 
write sets nite strategies counter strategies respectively 
notice minimum element empty strategy written minimum element general 
geometric reading de nitions sds strategy 
sds labelled forest ancestor relation alternates cells values roots labelled cells 
strategy sub forest allowed branch values 
counter strategy non empty subtree allowed branch cells 
see collections positions form form strategy bool bool 
set tt representing tt strategy tt strategy 
way understand say cell hold value answer question 
strategy consists having ready determinate answers movements opponent 
strategies data counter strategies 
considered exploration trees see 
pairs cell value query response strategy counter strategy give sds symmetry 
pairs related important dualities programming input output constructor destructor see 
tempting consider counter strategies sds strategies dual structure cells values values cells structure obtained way sds anymore positions start value 
situation rst analysed lamarche understood thesis laurent 
come back 
de nition resembles quite closely dynamics described section 
de nition play sds strategy nite 
de ne called play set positions response pre xes query pre xes proposition de nition play nonempty totally ordered confused maximum element uniquely characterized follows unique element response unique element query de nition winning de nition 
response say wins denote predicate query say wins write negation 
stress winner write wins wins position formalizes interplay player strategy opponent strategy response player wins move query opponent wins 
game theoretical reading opponent move strategy determines move uniquely 
player unable move contains position form cv strategy determines unique move 
play goes provision answer opponent move cf 
section 
de ne morphisms sds 
de nitions concrete 
concrete needed want morphisms form turn sds order get cartesian closed category monoidal closed start 
accordingly de nitions composition morphisms 
equivalence just full abstraction coincidence operational denotational semantics boils tailored model syntax programs morphisms tailored syntax semantics language cds 
start concrete way 
de nition sets word de ne wdb follows wdb anb wdb de nition sds de ne follows 
sets disjoint unions fis cg consists alternating positions starting request sd sd sd pre form valof request omit tags request valof output just done notation sd sd similarly sd 
call ane sequential algorithms ane algorithms strategies constraint scc formulated informally follows 
thinking valof call subroutine principal routine proceed receives result subroutine 
identity ane algorithm id de ned follows id response sg copycat de ned follows copycat copycat rc copycat request valof copycat qv copycat output word copycat description identity algorithm proposed corresponds game theoretical understanding player repeats move opponent 
uential talks lafont taken images chess kasparov explain thing 
exercise ane algorithm computes boolean negation function request valof request valof tt output request valof output tt hand left disjunction function computed ane algorithm 
transcribing program lor strategy leads request valof request valof tt output tt request valof valof request valof valof tt output tt request valof valof output subset set positions bool bool projections bool sequences moves positions bool program transcribe non ane sequential algorithm shall see 
constant function gives rise ane algorithm responses form request output request output 
second third example justify terminology ane ane framework contrast linear weakening allowed 
second example suggests di erence ane general sequential algorithms 
kinds algorithms ask successive queries input continue proceed get responses queries 
ane algorithm required ask queries monotonically new query extension previous 
unit resource consumption sequence queries responses arbitrarily large long builds position input sds 
disjunction algorithms ane may ask successively queries related pre ordering 
generic ane algorithm represented gure viewed combination generic output strategy input exploration tree input counter strategy output strategy 





request valof 
valof 
output request 
request 
vn generic ane algorithm give de nition composition ane algorithms means simple machine 
sequential algorithms syntactic objects turned programming language called cds 
simpli ed version operational semantics section special case ane algorithms 
goal compute demand positions belong composition sds machine proceeds rewriting triplets positions respectively 
rules designates set positions rst rules left initiative observer 
time rules activated launches machine proper consists deterministic rules 
generic behaviour machine follows 
initial triplet 
observer wants know content precisely wants know function order compute contents output 
chooses perform rewriting 
request transmitted 
cases 
consult input produces immediately value case value transmitted 

rv 

rc 
qv qv 
qc qc composition machine ane algorithms nal result query 
needs consult input various sequential functions interaction loop terminology abramsky jagadeesan initiated 



dialogue may terminate ways 
stage received information produce value 
says needs consult input information passed nal respect query result observer knows needs know content 

observer freedom explore semantics issuing new query provided 

cv query cv reads knowing needs behave feed 
computation starts deterministic rules general pattern 
notice take leadership turn cf 
section 
turn de nition morphisms 
de nition continuous function called stable exists minimum nite denoted 
de nes similarly notion stable function notation 
de nition symmetric algorithm sds 
symmetric algorithm pair function partial function continuous satisfy axioms 
set convention unde ned simply unde ned 
contrast write assume de ned 
provides witnesses stability conversely 
de nition powerful imply key properties de nition continuous function called sequential pair 
exists called sequentiality index implies proposition previous de nition 
ane preserve upper bounds pairs upper bounded elements satisfy axioms ls 
sequentiality index 
rs sequentiality index 
sequential provides witnesses sequentiality conversely 
turn composition ane algorithms 
de nition sds symmetric algorithms de ne composition follows announced full abstraction theorem 
theorem sets ane algorithms symmetric algorithms bijective correspondence isomorphism de nitions composition coincide correspondence 
just brie indicate pass point view 
de ne pair function partial function follows fr sd sd fq sd sd convention right hand side de nition empty interpret de nitional equality saying unde ned 
conversely symmetric algorithm construct ane algorithm building positions induction length process 
example sd sd responses sd sc sd sc sd remarked get sequential functions way 
recall linear logic usual implication decomposed de morgan dual called exponentials linear logic 
de nition exponential sds 
set sets queries responses respectively recursively speci ed follows letting range responses strategy qv strategy qv qv strategy strategy function mapping responses strategies strategy strategy qv strategy sequential algorithms sds de nition ane algorithms easily checked programs lor cf 
example ror transcribe sequential algorithms bool bool bool 
sequential algorithms enjoy direct de nitions concrete operational denotational de nition composition full abstraction holds see 
section criticism terminology symmetric algorithm 
pointed pairs quite symmetric partial function 
logically read os odd going connective arguments di erent polarity opponent starts player starts reason laurent proposed decompose ane arrow see os change polarity operator 
sds operation easy de ne add new initial opponent move call pre positions example bool 
tt 
maximal positions 
laurent de nition initial moves os pairs initial opponent moves positions continue interleavings position notice completely symmetric revisit de nition said positions sds start quite 
construction allows restore equal status components position os start moves played happens moves necessarily form conveying information related works sequential algorithms turned quite central study sequentiality 
mention kleene developed lower types similar notions nice name oracles late works semantics higher order recursion theory see detailed comparison 
important models functions constructed turned extensional collapse hereditary quotient equating sequential algorithms computing function 
ane case algorithms bucciarelli ehrhard model strongly stable functions longley model sequentially realizable functionals 
rst model arose algebraic characterization sequential rst order functions carries types 
second realizability model combinatory algebra interaction sequential algorithms encoded 
laird shown sequential algorithms obtained collapsing construction games model control hyland ong style 
models hyland ong abramsky jagadeesan malacaria ho ajm respectively capture pcf de nability exactly games associated sequential algorithms accommodate control operations call cc de nable pcf see section 
fact interpretation function normal forms models injective 
essential merit works characterize image injection characterize pcf de nability syntax independent way conditions innocence bracketing 
opened way research program launched abramsky 
happen conditions relaxed 
giving innocence led interesting fully models see :10.1.1.16.4507
giving bracketing gave model pcf plus control mentioned 
model sequential algorithms ho ajm model di er drastically size 
type bool bool interpreted nite sds sds nitely positions model sequential algorithms nitely pcf ohm trees nitely strategies ho ajm models type 
di erence comes way exponential de ned 
de nition key feature non repetition qv strategy 
games models exponential de ned interleaving allowing repetitions opening potentially nitely copies positions 
roughly amounts dropping condition qv strategy 
nitary nature sequential algorithms implies equality model decidable type built bool term model games provide ective tools tackle observational equivalences 
matter fact proved loader equality objects fully model nitary pcf undecidable 
model pcf called fully equates terms terms observationally equivalent means replaced program context ecting nal result 
full abstraction problem scott milner plotkin quite loosely speci ed problem providing denotational construction fully model pcf opposed original term construction milner shown uniqueness fully model 
ho ajm games models called denotational provide characterization term model pcf version ohm trees 
yield full abstraction collapse construction essentially di erent originally performed milner 
implicit hope arrive decidability results equality model usual denotational models consist functions interpret type built bool nite set 
loader result says construction fully model pcf justi es posteriori game models nitary exponentials 
contrast pcf extended control nitary exponential model sequential algorithms job coming 
control pointed theorem full abstraction result ane case theorem proved sequential algorithms respect language cds 
sequential algorithms allow inherently consult internal behaviour arguments decisions behaviour 
example exists sequential algorithm type bool bool bool maps tt cf 
section 
cartwright felleisen connection standard control operators explicit lead full abstraction result sequential algorithms respect extension pcf control operator 
respect key observation see 
sds cell value ff gg 
isomorphism bool bool sds ff 
tt 
gg considered 
sds exactly strategies ordered way bool 
tt 
gg 

gg subscripts decorate cells copies convention 
instructive exercise write explicitly inverse isomorphisms sequential algorithms direction function direction control operation catch considered tells apart strategies 

shall show type bool control operator call cc scheme standard ml interpreted sequential algorithm type bool bool bool 
formula called pierce law typical tautology classical logic 
connection control operators classical logic particular fact call cc corresponds pierce law rst discovered 
sequential algorithm interpreting call cc bool tt tt tt tt labelling moves bool bool bool 
algorithm bool replaced labelling 
reader familiar continuations may want compare tree continuation passing cps style interpretation yk xk xk call cc tree form cf 
section yk xk rst indicates copy cat second indicates copycat 
instance injection terms strategies mentioned section simple example laird ho style model coincides sequential algorithms 
cps translations usual indirect way interpret control operators rst translate interpret favorite cartesian closed category 
contrast sequential algorithms look direct semantics 
example suggests illusion explicitly replace bool nd indirect way underneath 
mathematical way stress notion continuation model category having function spaces xed object called object nal results retains full subcategory negative objects objects form category control interpreted 
logically inclined reader notice thinking formula false double negation reads classical tautology intuitionistically provable negative isomorphism exhibits bool negative object 
types negative negative 
model sequential algorithms laird model control continuation models written face 
remarks mention line research sequential interaction induced side ects design categorical machine gave name language caml theory ohm trees alluded section 
lines research imports program newly proposed girard expected 
just quote connection 
insisted section di erent programs function 
way di erent functions means additional error values accordingly additional constants syntax 
error call err 
err err err looks left argument rst error fed argument propagated result err 
looks right argument rst value fed argument computation waiting result 
achieve symmetrically di erent errors err err err err err err economy having just error conceptually important view isomorphism section see dispense bool nite base type basic values tt 
arrive picture base type constants err 
point view adopted girard 
counterpart err called 
motivation introducing quite parallel having errors 
girard program ambition giving interactive account proofs 
order explore proof proposition play proof negation linear logic 
proof proved 
space proofs enlarged allow opponents interact 
similarly motivated errors introduced allow observations allowed separate information survey kind 
abramsky jagadeesan games full completeness multiplicative linear logic proc 
fst tcs springer lect 
notes comp 
sci 

abramsky jagadeesan new foundations geometry information computation 
abramsky jagadeesan malacaria full abstraction pcf 
abramsky mccusker game semantics computational logic berger schwichtenberg eds springer verlag :10.1.1.16.4507
amadio 
curien domains lambda calculi cambridge university press 
berry 
curien sequential algorithms concrete data structures theoretical computer science 
berry 
curien theory practice sequential algorithms kernel applicative language cds algebraic methods semantics nivat reynolds eds cambridge university press 
phd thesis forthcoming 
bucciarelli approach sequentiality kleene functions proc 
mathematical foundations programming semantics springer lect 
notes comp 
sci 

bucciarelli ehrhard bucciarelli ehrhard sequentiality extensional framework information computation 
cousineau 
curien mauny categorical machine science computer programming 

curien symmetry sequentiality proc 
mathematical foundations programming semantics springer lect 
notes comp 
science 

cartwright 
curien felleisen fully semantics observably sequential languages information computation 

curien categorical combinators sequential algorithms functional programming pitman 
revised edition birkh auser 

curien ohm trees mathematical structures computer science 

curien herbelin computing ohm trees third fuji international symposium functional logic programming april kyoto eds sato toyama world scienti singapore pp 

curien symmetry interactivity programming appear bulletin symbolic logic 
ehrhard relative de nability result strongly stable functions corollaries information computation 

girard linear logic theoretical computer science 

girard locus mathematical structures computer science 
grin formulae types notion control proc 
principles programming languages acm press 
gunter semantics programming languages structures techniques mit press 
hofmann streicher continuation models universal calculus proc 
logic computer science warsaw ieee press 
hyland ong full abstraction pcf information computation 
kleene recursive functionals quanti ers finite types revisited ii iii iv respectively proc 
general recursion theory ii fenstad 
eds north holland proc 
kleene symposium barwise 
eds north holland proc 
patras logic symposium north holland proc 
symposia pure mathematics 
laird games sequential algorithms appear theoretical computer science 
lamarche sequentiality games linear logic manuscript 
lamarche games semantics full propositional linear logic proc 
logic computer science ieee computer society press 
laurent etude de la en logique th ese de doctorat universit aix marseille ii march 
loader finitary pcf undecidable manuscript university oxford appear theoretical computer science 
longley sequentially realizable functionals appear annals pure applied logic 
milner fully models typed lambda calculi theoretical computer science 
plotkin lcf programming language theoretical computer science 

