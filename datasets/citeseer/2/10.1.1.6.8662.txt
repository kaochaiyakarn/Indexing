dimensions precision analysis object oriented programming languages dr barbara ryder division computer information sciences rutgers university new brunswick new jersey usa 
approximately year history analyses object oriented programming languages 
approaches vary different analyses account program execution flow capture calling context model objects variables possible calling structure program 
taxonomy analysis dimensions affect precision cost illustrated examples existing analysis techniques 
years smalltalk object orientation mature accepted technology 
appropriate take historical look analyses object oriented programming languages examining evolved particularly respect ensuring sufficient precision preserving practical cost 
object oriented languages allow building software parts encouraging code reuse encapsulation mechanisms inheritance polymorphism 
commonly object oriented languages allow dynamic binding method calls dynamic loading new classes querying program semantics runtime reflection 
understand control flow object oriented program requires knowledge types objects act receivers dynamic method dispatches 
know possible calling structure program set possible object types known determine set possible types objects representation possible interprocedural calling structure 
essentially program representation calling structure dependent analysis solution vice versa 
interdependent relationship analysis object oriented languages quite different procedural languages 
addition dynamic class loading may require runtime recalculation analysis results 
fundamental need analysis analysis object oriented languages order obtain program representation 
term analysis define analysis seeks determine information set objects variable field may point execution 
study discuss dimensions analysis lead variations research sponsored part nsf ccr ccr 
precision obtained solution 
examining dimensions illustrate similarities differences analyses identify sources precision tradeoffs cost 
examples dimensions discussed context different analyses 
open issues fully addressed discussed 
optimizing compilers program development tools test harnesses refactoring tools semantic browsers program understanding change impact analysis tools analysis client analyses side effect analysis escape analysis def analysis 
real tradeoffs usability analysis results terms precision cost obtaining time memory required 
tradeoffs especially significant interactive tools 
important validate analyses measures corresponding eventual client applications full application built 
benchmark suites allow evaluation different techniques input data sets crucial efforts building suites encouraged research community 
study attempt encyclopedic categorization analyses object oriented languages goal enumerate characteristics differentiate precision affect cost different analyses give examples different design choices existing analyses 
papers cover existing analyses compare contrast 
design incomplete set analyses mentioned 
overview 
section presents dimensions precision discussed explain intuitively 
section discusses dimension fully cites analysis examples choices respect dimension discusses relative influence dimension analysis precision cost 
section presents open issues regard analysis object oriented programs 
section summarizes discussions 
preliminaries recall analysis determines information set objects variable field may point execution 
historically various kinds analyses developed 
class analysis usually involves calculation set classes types associated objects variable refer program execution information commonly call graph construction 
intuitively class analysis thought analysis object represents instantiations class 
points analysis object oriented languages term analyses distinguish different instantiations class different objects 
points analyses designed extensions earlier pointer analyses :10.1.1.25.4206:10.1.1.11.3368:10.1.1.25.1069:10.1.1.109.6502
refers analysis term distinguish points analysis object oriented languages points analysis general purpose pointers term analysis denoting analyses remainder 
analyses examples analyses fundamental understanding semantics object oriented programs 
recall sec tion interprocedural control flow object oriented program known results analyses 
analyses including side effect escape def uses redundant synchronization analyses require analysis order obtain representation interprocedural flow program 
analyses crucial analysis object oriented code 
characteristics dimensions directly affect analysis precision 
design specific analysis described choices dimensions 
brief description section dimension possible choices offers illustrated context existing analyses 
flow sensitivity 
informally analysis flow sensitive takes account order execution statements program analysis called flow insensitive 
flow sensitive analyses perform strong updates kills example occurs definition variable supersedes previous definition 
classical dataflow analyses flow sensitive classical interpretations 
context sensitivity 
informally analysis distinguishes different calling contexts method context sensitive analysis called context insensitive 
classically approaches embedding context sensitivity analysis call string approach functional approach 
call strings refer top sequence call stack distinguish interprocedural context dataflow information idea dataflow information tagged consistent call strings corresponds calling context distinguished 
functional approach involves embedding information program state call site distinguish calls 
program representation calling structure 
interdependence possible program calling structure analysis solution objectoriented languages approaches constructing interprocedural representation object oriented program 
simple analysis obtain approximation calling structure subsequent analysis 
representation updated analysis solution certain edges shown infeasible 
alternatively possible call structure calculated lazily fly interleaved analysis steps 
approach includes methods call graph reachable program start analysis solution 
object representation 
dimension concerns elements analysis solution 
object represent instantiations class 
representative creation site new represent objects created site 
naming schemes alternatives exist 
field sensitivity 
object object may fields represented distinctly solution called field sensitive analysis 
fields analysis performed interleaved client analysis exam ple 
object indistinguishable respect analysis termed field insensitive 
representation 
dimension concerns representative corresponds unique variable groups representative associated entire program sections program method 
dimension relates variables object representation relates objects 
directionality 
generally flow insensitive analyses treat directional meaning information flows alternatively symmetric meaning subsequent assignment information associated andy 
approaches formulated terms constraints unification equality constraints symmetric analyses inclusion subset constraints directional analyses 
varying analysis algorithm design dimensions possible affect precision resulting solution 
key application select effective set choices provide sufficient precision practical cost 
dimensions analysis precision common design pointer analysis programs analyses java flow sensitive context sensitive techniques pointer analysis 
general analysis community decided flow sensitivity scalable large programs 
context sensitivity pointer analysis explored independent flow sensitivity verdict effectiveness clear 
keeping calling contexts distinguished varying importance program depending programming style object oriented codes crucial obtaining high precision problems needing dependence information example 
general program representation pointer analysis statement level represented syntax tree flow graph 
solution methodologies included constraint techniques dataflow approaches allowed context sensitive context insensitive formulations 
analyses calculated finite sets types classes variables characterized objects may refer 
prototypical problem analyses call graph construction dynamic dispatch resolution 
analyses discovering redundant synchronizations escaping objects side effect analysis :10.1.1.25.4206:10.1.1.25.1069
client analyses require precision call graph construction provide interesting different applications analysis comparison 
recall dimensions analysis precision include flow sensitivity context sensitivity program representation object representation field sensitivity representation directionality 
discussions dimension considered examples analyses specific choices dimension cited 
goal better understand analyses differ select best analysis 
flow sensitivity early example flow context sensitive analysis chatterjee :10.1.1.37.6842
algorithm designed backwards forwards dataflow propagation strongly connected component decomposition approximate calling structure program 
successful experiments performed programs written subset showed excellent precision solution obtained scalability problems approach 
whaley lam diwan designed techniques perform flow sensitive analysis method allowing kills cases assignment unambiguous 
example assignment allow algorithm reinitialize set objects may point objects may point example kill assignment 
contrast kill assignment object field mutated necessarily unique 
flow sensitivity potential greater precision potential demonstrated specific analysis application 
object oriented codes generally small methods expected payoff flow sensitivity analysis precision minimal 
concerns scalability resulted analyses abandoning flow sensitivity favor form context sensitivity 
context sensitivity classically approaches embedding context sensitivity analysis call strings functions 
call strings refer top sequence runtime call stack distinguish interprocedural context dataflow information idea combine dataflow information tagged consistent call strings dataflow information may exist temporally execution 
control flow analysis shivers originally aimed functional programming languages related conceptually sharir pnueli call string approach 
control flow analyses distinguished amount calling context remembered analyses called cfa indicates length call string maintained 
functional approach uses information state computation call site distinguish different call sites 
analyses solely inheritance hierarchy information context insensitive precise analyses context insensitive ensure scalability authors :10.1.1.25.4206:10.1.1.25.1069
analyses call string functional notions classical context sensitivity 
palsberg schwartzbach cfa analysis :10.1.1.136.9764
plevyak chien described incremental approach context sensitivity allows refine original analysis context needed distinguish parts solution due different call sites approach combine call string functional approaches order handle polymorphic functions polymorphic containers 
agesen sought improve palsberg schwartzbach algorithm specifically adding functional notion context incorporate interprocedural flow parameters sensitivity 
cartesian product algorithm defined different contexts tuples parameter types access method tuples computed lazily memoized possible sharing call sites 
grove chambers explored notions context sensitivity different algorithms call strings tuples parameter type sets analogous agesen cartesian product algorithm 
milanova defined object sensitivity functional approach effectively allows differentiation method calls distinct receiver object 
active experimentation context sensitivity demonstrates perceived importance analysis community enabling precise analysis 
prevalence method calls object oriented program leads expectation precise analyses object oriented languages obtained picking right practical embedding context sensitivity 
program representation calling structure early analyses provide static call graph initialized computation subsequent precise analysis :10.1.1.25.4206:10.1.1.136.9764
analyses constructed call graph lazily new call edges known due discovery new object referred :10.1.1.25.1069
grove chambers discuss relative merits approaches conclude lazy construction approach preferred 
clearly trend lazy construction approach analysis includes reachability calculation accuracy 
especially significant programs built libraries methods library accessed excluding unused methods significantly affect analysis cost precision 
object representation representation choices analyses directly related issues precision 
common choices analysis 
analysis object class represent possible instantiations class 
second objects identified creation site case objects created specific new statement represented object 
usually reason selecting representation second efficiency clearly leads precise solutions 
early analyses object class 
analyses choice citing reasons scalability 
analyses creation sites identify equivalence classes objects corresponding representative object analysis solution 
precise object naming schemes establish finer grained equivalence classes objects 
object class may suffice call graph construction richer semantic analyses side effect def escape analyses representative object creation site preferable 
field sensitivity representation issue preserve information associated distinct fields object 
study indicated distinguishing object fields may result imprecision increased analysis cost 
majority analyses representative objects distinguish fields precision improvement 
interesting liang reported appeared little difference precision fields object class representative object creation site inclusion constraints experimentation needed understand fully separate effects dimensions involved experiments 
representation dimension concerns represented unique representative entire program 
analyses case 
type represented type 
alternatively method 
alternatives reduce number solution analysis efficient 
tip palsberg explored dimensions representation 
analyses defined precision lay rta cfa 
experimented objects fields unique representation cta analysis objects fields unique representation mta analysis objects method fta analysis objects fields method analysis 
analysis resulted best performance precision tradeoff call graph construction target application 
analysis sable research project mcgill university specifically contrasted unique representatives versus representative class 
imprecise 
directionality analysis usually formulated constraints describe sets objects point sets mutated semantics various assignments variables fields 
significant precision difference symmetric directional analyses formulated unification constraints inclusion constraints respectively 
unification constraints similar steensgaard pointer analysis inclusion constraints similar andersen pointer analysis precision differences constraint formulations pointer analysis explained shapiro horwitz 
considering pointer assignment unification analysis union points set points set ofq effectively saying pointer variables point set objects assignment union accomplished recursively pointer set unioned inclusion analysis conclude assignment statement points set includes points set maintaining direction assignment 
similar arguments show inclusion constraints expected yield precise analysis solution unification constraints shown liang 
ruf developed context sensitive analysis unification constraints part redundant synchronization removal algorithm 
solution procedures types constraints polynomial time size constraint set unification constraints solved linear worst case cost inclusion constraints cubic worst case cost 
worst case costs necessarily experienced practice difference considered significant newer techniques shown inclusion constraints analysis solved effectively practice 
increased precision inclusion constraints worth possible additional cost may depend accuracy needs specific analysis application 
open issues open issues analysis object oriented languages solutions 
listed 
reflection 
programs reflection constructs create objects generate method calls access fields objects runtime declared types known compile time 
creates problems analyses program effectively incomplete compile time 
analyses transform program account effects reflection analyzing program empirically 
native methods 
calls native methods methods written objectoriented language written may dataflow consequences taken account safe analysis 
exceptions 
java programs checked exceptions appear explicitly unchecked exceptions appear implicitly affect flow control 
obtaining approximation possible program control flow requirement precise analysis approaches tried open problem 
dynamic class loading 
dynamic class loading may invalidate dynamic dispatch function previously calculated analysis 
suggests possibility designing incremental analysis difficult determine previously derived information invalidated 
incomplete programs 
object oriented programs libraries library clients partial programs 
analysis codes addressed combination constraints pointer analysis das showed precision empirical experiments practical cost 
needed 
having model partial program analysis object oriented languages may allow analyses developed componentbased programs reliance component information may necessary 
benchmarks 
important benchmark suites testing analyses reproducibility required strong empirical validation 
researchers spec compiler benchmarks shared collected benchmark programs 
having overview dimensions precision analysis object oriented languages current challenge analysis research match right analyses specific client applications appropriate cost precision 
task aided clear understanding role dimension effectiveness resulting analysis solution 
nature object oriented languages programs constructed small methods method calls possible recursion primary control flow structure 
critical include type context sensitivity analysis obtain sufficient precision tasks simple dynamic dispatch 
arguably functional approach offers practical mechanism approach embodied cfa analyses cost effective 
clear solution procedure inclusion constraints practical delivers increased precision cheaper unification constraint resolution 
opinions held experimentation community dimensions analysis precision 
analysis fits application analyses discussed applicable specific problems precision sufficient job 
remaining open question analysis community deliver useful analyses problem practical cost 
answer determined 
am grateful graduate student ana milanova insightful discussions topic enormous help editing 
wish dr rountev editing feedback valuable discussions 
www org osg jvm examples include programs rutgers edu www sable mcgill ca 
agesen 
cartesian product algorithm simple precise type inference parametric polymorphism 
european conference object oriented programming pages 

aho sethi ullman 
compilers principles techniques tools 
addison wesley 

andersen 
program analysis specialization programming language 
phd thesis diku university copenhagen 
available diku report 

bacon sweeney 
fast static analysis virtual function calls 
conference object oriented programming systems languages applications pages 

bruno blanchet 
escape analysis object oriented languages application java 
proceedings acm sigplan conference object oriented programming systems languages applications pages 
acm press 

jeff urs lzle 
removing unnecessary synchronization java 
proceedings acm sigplan conference object oriented programming systems languages applications pages 
acm press 

chatterjee 
modular data flow analysis statically typed object oriented programming languages 
phd thesis department computer science rutgers university october 

chatterjee ryder landi 
relevant context inference 
symposium principles programming languages pages 

chatterjee barbara ryder 
data flow testing object oriented libraries 
department computer science technical report dcs tr rutgers university march 

jong deok choi david grove michael hind vivek sarkar 
efficient precise modeling exceptions analysis java programs 
proceedings acm sigplan sigsoft workshop program analysis software tools engineering pages 
acm press 

jong deok choi gupta mauricio serrano sreedhar sam midkiff 
escape analysis java 
proceedings acm sigplan conference object oriented programming systems languages applications pages 
acm press 

cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixed points 
conference record fourth annual acm sigact sigplan symposium principles programming languages pages january 

das 
unification pointer analysis directional assignments 
proceedings acm sigplan conference programming language design implementation pages june 

dean grove chambers 
optimizations object oriented programs static class hierarchy analysis 
european conference object oriented programming pages 

diwan eliot moss mckinley 
simple effective analysis object oriented programs 
conference object oriented programming systems languages applications pages 

manuel hndrich jeffrey foster su alexander aiken 
partial online cycle elimination inclusion constraint graphs 
proceedings acm sigplan conference programming language design implementation pages 
acm press 

foster hndrich aiken 
polymorphic versus monomorphic flow insensitive points analysis proceedings international symposium static analysis april 

david grove craig chambers 
framework call graph construction algorithms 
acm transactions programming languages systems toplas 

hecht 
flow analysis computer programs 
elsevier north holland 

nevin heintze olivier 
ultra fast aliasing analysis cla lines code second 
proceedings acm sigplan conference programming language design implementation pages 

michael hind 
pointer analysis haven solved problem 
acm sigplan sigsoft workshop program analysis software tools engineering pages june 

liang harrold 
efficient points analysis program analysis 
proceedings th annual acm sigsoft symposium foundations software engineering lncs pages september 

liang harrold 
extending evaluating flow insensitive context insensitive points analyses java 
workshop program analysis software tools engineering pages june 

liang mary jean harrold 
evaluating precision static analysis profiling 
proceedings international symposium software testing analysis pages 
acm press 

marlowe ryder 
properties data flow frameworks unified model 
acta informatica 

milanova rountev ryder 
parameterized object sensitivity points side effect analyses java 
international symposium software testing analysis pages 

palsberg schwartzbach 
making type inference practical 
european conference object oriented programming pages 

palsberg 
type analysis applications invited talk 
proceedings acm sigplan sigsoft workshop program analysis software tools engineering pages 
acm press july 

palsberg schwartzbach 
object oriented type inference 
conference object oriented programming systems languages applications pages 

plevyak chien 
precise concrete type inference object oriented languages 
proceeding conference object oriented programming systems languages applications oopsla pages october 

plevyak chien 
precise concrete type inference object oriented languages 
conference object oriented programming systems languages applications pages 


study side effect analyses java 
master thesis mcgill university december 

rountev milanova ryder 
points analysis java annotated constraints 
conference object oriented programming systems languages applications pages october 

rountev milanova ryder 
fragment class analysis testing polymorphism java software 
international conference software engineering 

ruf 
context insensitive alias analysis reconsidered 
proceedings sigplan conference programming language design implementation pages june 

ruf 
effective synchronization removal java 
conference programming language design implementation pages 

shapiro horwitz 
fast accurate flow insensitive points analysis 
conference record fourth annual acm sigact sigplan symposium principles programming languages pages january 

sharir pnueli 
approaches interprocedural data flow analysis 
muchnick jones editors program flow analysis theory applications pages 
prentice hall 

olin shivers 
control flow analysis higher order languages taming lambda 
phd thesis carnegie mellon university school computer science 

sinha harrold 
analysis programs contain exception handling constructs 
proceedings international conference software maintenance pages november 

lori pollock 
strategy testing object oriented software 
proceedings international symposium software testing analysis pages 
acm press 

sreedhar michael burke jong deok choi 
framework interprocedural optimization presence dynamic class loading 
proceedings acm sigplan conference programming language design implementation pages 

bjarne steensgaard 
points analysis linear time 
conference record third annual acm sigact sigplan symposium principles programming languages pages 

su hndrich aiken 
projection merging reducing redundancies inclusion constraint graphs 
conference record seventh annual acm sigact sigplan symposium principles programming languages 

sundaresan hendren rai lam gagnon godin 
practical virtual method call resolution java 
conference object oriented programming systems languages applications pages 

peter sweeney frank tip 
extracting library object oriented applications 
proceedings th acm sigsoft international symposium foundations software engineering pages 
acm press 

tip palsberg 
scalable propagation call graph construction algorithms 
conference object oriented programming systems languages applications pages 

whaley lam 
efficient inclusion points analysis strictly typed languages 
static analysis symposium 

john whaley martin rinard 
compositional pointer escape analysis java programs 
proceedings acm sigplan conference object oriented programming systems languages applications pages 
acm press 
