goal oriented requirements architectural prescriptions process manuel ut arise advanced research software engineering university texas austin mail utexas edu step requirements software system architecture system traditionally complex software development process 
step goes system achieve achieves 
order step easier propose prescriptive architectural specification language associated process process 
architectural prescriptions consist specification system basic topology constraints associated components interactions 
process provides systematic way satisfy functional non functional requirements problem domain integrate architectural structures solution domains 

difficult transition development process non trivial software system requirements system system architecture 
step involves going problem domain domain solution 
factors design software systems challenging satisfy different requirements problems time single solution particular requirement 
requirements specifications viewed contract customer software developers 
easy understand software architects engineers domain experts users 
propose architectural prescriptions perform step requirements architecture 
architectural prescription architecture system terms components constraints interrelationships component constraints interactions 
initially perry ut arise advanced research software engineering university texas austin perry ece utexas edu constraints coming problem domain 
architectural descriptions provide complete details designers prescriptions step requirements architecture easier model perform 
prescriptions may provide means deeper understanding architecture 
show perform step goal oriented requirements 
advantage prescriptions higher level abstraction reused easily enable creative designs 
prescription entire software family applications differ deployment requirements 
applications differ requirements coming problem domain interaction different types users develop prescription ancestor system requirements common family get extending prescription prescriptions descendent applications 
architectural prescription languages introduced written elementary ontology enable new innovative designs 
consider example distributed system 
architecture description language may include elements clients servers 
may architect writing specification architecture description language uses client server components example multi peer architecture better solution 
designer constrained architecture low level design adopts clientserver solution 
describing system higher level abstraction specification architectural prescription language permit designer choose best solution design level take different choices different members family 
structured follows give overview kaos requirements specification language process uses starting point introduce architectural prescription language process illustrating practical example conclude summarizing fundamental results discussing directions research 

overview kaos specification language kaos goal oriented requirements specification language 
ontology composed objects operations goals 
objects agents active objects entities passive objects events instantaneous objects relationships objects depending objects 
operations performed agent change state objects 
characterized pre post trigger conditions 
goals objectives system achieve 
general goal refined till obtain set achievable sub goals 
goal refinement process generates goal refinement tree 
nodes tree represent goals 
leaves may called requisites 
requisites assigned software system called requirements assigned interacting environment called assumptions 
briefly see obtain requirements specification kaos 
high level goals gathered users domain experts existing documentation 
goals refined till derive goals achievable agents 
goal objects operations associated identified 
course refinement goal may possible may conflicts refinements different goals resolved proposed 
requirements engineer generate refinement tree 
refinement tree mean contain conflicts refinements different goals possible derive architecture achieves goals 
addition iterations requirements specification process may iterations requirements specification process architecture prescription process 
example goal specified kaos taken example ll section 
goal maintain instanceof concerns knows people informaldef submission remain confidential 
submitted remain confidential 

example goal specification kaos keyword goal denotes name goal instanceof declares type goal concerns indicates objects involved achievement goal contains names sub goals goal resolved 
informaldef informal definition goal 
formaldef optional attribute contains formal definition goal expressed formal notation order logic 

process illustrate technique example 
example shall obtain architectural prescription system automates functions selection process scientific magazine conference 
starting point specification software system kaos 
fundamental goal selection system keep high quality magazine 
determine fundamental goal root goal system achieve goal unavoidable constraint coming problem domain 
kaos specification starting point gradually increase degree constraint solution considering goals refine root goal 
keep refining goals appropriate level 
process take input goals level resulting goal refinement tree 
take root tree resulting prescription enable new innovative solutions problem generally provide little guidance system designers 
hand leaves goal refinement tree refining prescription achieve qualities performance reusability may produce specification constraints lower level designs 
parnas noted order design washing machines requirements coming wash clothes hand wouldn got effective rotary washing machines nowadays 
approach leaves software architect free choose degree constraint desired architecture 
change degree constraint architecture process necessity 
example follows high degree constraint consider goals deep goal refinement tree demonstration purposes 
process deriving prescription composed steps followed optional may iterated 
step derive basic prescription root goal system 
root goal obtained abstracting sub goals 
second step get components potential sub components basic architecture considering objects kaos specification 
third step choose level refinement goal refinement tree consider appropriate decide sub goals level achieved achieved software system assign sub components derived step 
step architectural prescription may refined achieve additional nonfunctional properties 
example considers kaos specification selection process developed thesis 
shall transform kaos specification prescription software system assist selection process 

illustrates steps process 
kaos objects kaos goals architectural requirements specification phase root goal step root component step potential sub component step feedback requirements fundamental steps process step methodology software system denote responsible root goal maintain system composed people involved 
software system performs different functions automated interacts human system 
purpose speed selection process improve confidentiality 
language implementation apl introduced 
specification kaos specification components component type processing constraints maintain composed uses interact example specification specification declaration name 
followed declaration kaos specification prescription derived 
prescription may derive kaos specification prescription derives different kaos specifications better merge specifications architect system 
doing conflicts goals different specifications solved early requirements phase 
components prescription derive kaos specification may union kaos specifications 
definitions components 
field component specifies name component 
type denotes type component 
constraints important attribute component 
denotes requirements component responsible 
term constraint denote functional non functional constraints corresponding requirements system 
composed identifies subcomponents implement component 
attribute uses indicates components component 
interactions happen connector uses attribute additional keyword interact denoting components component interacts particular connector 
highest layer abstraction step specification corresponds write name component possible number instances system 
layers information optional contained anyway composed field super component component considered 
example means component number instances arbitrary number fill composed field decide refine system third step 
software system interact people involved process 
uses fairly complex connector 
distinguish people involved process agents data components may software system represent added agent suffix names 
specified follows component type connector constraints maintain composed uses 
example connector specification symbol means omit fields value 
formal specification language appendix 
second step objects kaos specification derive potential data processing connector components implement 
third step don attribute constraint potential components won part prescription 
case fact won necessary achieve goals kaos specification 

sample set selection process 
component document type data constraints component type data constraints component people type data constraints component knows type data constraints composed people document 
sample potential components selection system notation composed field component means component composed people sub components document sub components 
obviously number instances assigned different sub components doesn 
composed processing component connectors connect processing component data ones 
component type processing constraints maintain composed uses interact conn interact document conn interact component conn type connector constraints 
associated connectors third step complete architectural prescription account goals goal refinement tree level selected 
show put constraints architectural components got step 
refine root goal 
refinement subgoals root software system needs achieve maintain maintain maintain achieve 
refining goals obtain sub goals maintain maintain 
refinements obtain avoid goal translate directly constraint people subcomponents 
keep track different ways various people represented people data component may know 
constrained components able achieve requirement existence requirement sufficient condition existence components architectural rationale 
mean components ought exist goals achieve 
hand don care anymore requirement constraints assigned components point keeping 
proceeding similar fashion rest goal refinements obtain version complete specification specification kaos specification components component type processing constraints avoid avoid achieve avoid maintain avoid maintain maintain maintain maintain maintain maintain composed uses interact conn interact document conn interact component document type data constraints maintain maintain component type data constraints maintain component conn type connector constraints maintain maintain 
prescription selection process step omitted complete specification included possible notice components author knows holds supervise evaluates potential sub components step removed prescription necessary achieve sub goals system 
due rationale took prescribing system 
different architects may different rationales produce different prescriptions 
third step optional fourth consider functional goals non functional ones 
goals type complex effect system achieve 
general case apart constraining existing components introduce new components transform system topology change relationships system components 
details process manages non functional requirements 
fourth step step prescription design process architectural prescription refined system achieve goals problem domain 
additional goals typically introduced variety reasons example architectural economic 
goals classified follows useful architectural properties required problem reusability evolvability conformance particular architectural style compatibility goals compatibility platform industry standard platform independency 
examples architectural goals reusability location transparency dynamic reconfiguration 
goals modify prescription component level sub system level affect system 
practical experience shown architectural styles chosen particular solution achieve goals refine components 
example achieve architectural goal dynamic reconfiguration making components adhere reconfigurable architectural style 
dynamic reconfiguration mean application evolve deployed demands change new different kinds configuration 
reconfigurable architectural style set constraints provide location independence initialization provide facilities start restart rebuilding dynamic data allocating resources initializing component finalization provide facilities preserving dynamic data releasing resources terminating component 
kind goals don come problem domain compatibility goals 
constrain prescription take account architectural design level need assure compatibility system industry standard platform 
example may want system corba linux compatible 
may motivated need assure compatibility legacy systems vendors systems available machines just marketing strategies 
fig 
shows step interacts previous steps process 
step problem oriented prescription solution oriented prescription step non problem domain specifications architectural goals architectural styles compatibility goals step process feedback step see general fourth step iterated till achieved non domain goals 
step may iterated step 
case alternative problem domain goal refinements components may chosen prescription design steps possible easier perform 
important distinguish artifact third step fourth 
third step produces artifact constraints come problem domain reused similar systems constraining 
hand fourth step obtain prescription takes account constraints introduced particular product developing particular architectural style compatibility certain industry standard 
artifact step may reused systems want develop similar manner want able easily reuse prescription systems implemented different non domain constraints different architectural styles 
reason distinguish specification prescription step call problem oriented prescription pop step call solution oriented prescription sop 
problem oriented prescription system non domain driven goals step proceeds similarly step 
takes inputs pop non problem domain goals gives sop result 
step non domain goals assigned constraints pop components topology pop may modified order achieve step may reintroduce kaos components discarded step 
solution oriented prescription specification similar pop specification includes additional attributes architectural goals architectural styles compatibility goals specification 
new attributes needed keep track specifications goals don come problem domain 

presents method transforming requirements specification architectural prescription 
architectural prescriptions higher level form architectural specifications interface easily requirements specifications include implementation oriented entities client server default components architectural descriptions 
illustrated derive prescription practical example 
key steps prescription specification process selection right level goal refinement choice potential components architecture assignment constraints potential components architecture case non functional requirements modification architecture topology 
systematic rigorous process sure requirements neglected useless requirements components introduced means easily modifying architecture provided 
generality approach allow architects choose favorite adl design specification describe lower level architecture prescribed 
objectives research extension methodology take account common non functional requirements test methodology case studies empirical studies development supporting tool 

jackson world machine 
proceedings th international conference software engineering seattle washington usa april 
keynote speech perry wolf foundations study software architecture software engineering notes acm sigsoft october pp 
parnas design development program families ieee transactions software engineering ieee computer society march pp 
perry transforming goal oriented requirements specifications architectural prescriptions proceedings straw icse toronto may van darimont massonet goal directed elaboration requirements meeting scheduler problems learnt proceedings re nd ieee symposium requirements engineering york march pp 
van darimont letier managing conflicts goal driven requirements engineering ieee transactions software engineering ieee computer society november pp 
cordier van analyse des des la gestion une revue scientifique de louvain perry architectural prescriptions dependable systems proceedings wads icse orlando may perry 
product line architecture network product ares iii software architectures product families los palmos gran spain march 
appendix specification prescription name kaos specification requirements specification name components component component name num num type processing data connector constraints constraint name composed component name num num 
extends component name 
generalizes component name 
uses connector name interact component name terms brackets denote meaning identifier place 
means preceding expression arbitrary number times 

means expression time 
new symbol means expression required specification components level components refinement tree 
