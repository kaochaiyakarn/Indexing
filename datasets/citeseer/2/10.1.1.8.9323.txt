article submitted journal symbolic computation constructive algebraic hierarchy coq herman geuvers randy pollack wiedijk jan department computer science nijmegen university netherlands describe framework algebraic structures proof assistant coq 
developed framework part fta project nijmegen constructive proof fundamental theorem algebra formalized coq 
algebraic hierarchy described structured 
structures groups rings part way de ning ring tuple consisting group binary operation constant satisfy properties ring 
way ring automatically inherits group properties additive subgroup 
algebraic hierarchy formalized coq applying combination labeled record types coercions 
labeled record types coq dependent types type label may depend label 
allows give type dependent typed tuple ha ai set operation element coercions functions implicitly inferred type checker allow example structure ha ai synonym carrier set done mathematical practice 
apart inheritance reuse properties algebraic hierarchy proven useful reusing notations 


background started working fta fundamental theorem algebra project proof tool coq see sect 
overview project needed algebraic framework 
requirements framework included 
wanted formalize constructive proof fundamental theorem algebra needed support constructive algebra 
wanted reason real numbers polynomials reals 
geuvers constructive algebraic hierarchy coq wanted presentation real numbers instantiated various constructions 
intensional type theory coq requires setoids type equivalence relation packaged 
allows deal settheoretic notion quotient actual construction reals typical example 
algebraic developments coq time base decided develop algebraic hierarchy coq 
constructive theory real numbers built pervasive notion constructive setoid 

approach want mathematics dependent speci representations various algebraic structures decided axiomatic approach 
de ning real numbers cauchy sequences dedekind cuts de ned notion real number structure constructions instance 
implementation notion theory immediately available 
constructive mathematics supposed computational content proof fta real number structure constructive principles compute number theorem claims exists real number structure data type speci cation implementation 
instantiating proof concrete construction real number structure proof full computational content 
proof fta formalized contains root nding algorithm 
matter fact proof seen correctness proof algorithm 
pointed order feasible computations algorithm actual representation real numbers crucial 
straightforward representation reals cauchy sequences rationals yield feasible computations 

related algebraic hierarchies similar 
large proof development 
framework written optimized real life prove fundamental theorem algebra 
paul jackson ph thesis presents constructive development algebra nuprl uses prove results algebra 
nuprl coq type theory uses extensional equality 
constructions easier quotienting renders type checking undecidable 
nuprl coercive sub typing general inheritance structures 
constructive algebraic hierarchy lego appears ph thesis anthony bailey 
geuvers constructive algebraic hierarchy coq lo pottier implemented classical algebraic hierarchy coq 
hierarchy elaborate mimics hierarchy axiom computer algebra system 
foc project sylvain th er ese hardin val erie morain pr renaud building environment develop certi ed programs symbolic computation 
environment contain classical algebraic hierarchy 
built certain kind records dependent labeled elds operations re nement extension rede nition de ned 
coq formalization foc algebraic hierarchy planned 
currently framework foc records formalized 
provers formalization real numbers 
formalization type real numbers instance notion eld part algebraic hierarchy 
development real numbers added coq library 
development gives classical axioms real numbers implement speci model 
mizar system real numbers algebraic hierarchy 
interestingly real numbers proofs need real numbers 
mizar algebraic hierarchy designed person 
various types group ring field de ned various articles various authors 

contribution built library doing algebra analysis coq 
completely self contained completely constructive 
uses coq logic calculus inductive constructions contains axioms 
algebraic hierarchy describe part library 
ranges constructive setoids real number structures 
shown notion real number structure real number structures isomorphic 
library contains construction complex numbers real number structure polynomials arbitrary ring 
complex numbers shown instance eld polynomials shown ring allows inheritance properties notation elds respectively rings 
library contains construction real numbers cauchy sequences despite fact theory axiomatic spirit give speci construction eld real numbers see 
subjects treated framework groups rings elds nite sums polynomials geuvers constructive algebraic hierarchy coq nite dimensional vector spaces real complex numbers real valued functions continuity intermediate value theorem real complex roots coq code consists approximately lines kilobytes 
theory developed contains calculation lemmas 
lemmas give calculation rule manipulate algebraic expressions 
created automatic way keep track lemmas form document spirit literate programming 
developed speci reasoning tools easier reason inside framework having know names lemmas 

outline sect 
overview fta project 
sect 
gives notion constructive setoid 
building sect 
presents algebraic hierarchy 
sect 
develops approach representing inheritance common notions hierarchy 
sect 
describes way framework models partial functions division 
introduce notion sub setoid 
sect 
discusses syntax expressions complexity underlying coq terms 
order understand basic familiarity coq system 

fundamental theorem algebra project group henk barendregt university nijmegen proof fundamental theorem algebra formalized coq proof assistant 
done spirit qed manifesto 
see details formalization project :10.1.1.22.3482
proof fta project constructive 
fta project nished classical proof fundamental theorem algebra formalized robert mizar john harrison hol 
authors designed algebraic hierarchy part fta project 
fundamental theorem algebra states non constant polynomial complex numbers zero 
words says eld complex numbers algebraically closed 
proof formalized coq constructive proof martin kneser 
kept formalization free axioms 
needed coq logic calculus inductive constructions 
nal statement proved formalization geuvers constructive algebraic hierarchy coq lemma fta cc ex zero 
says non constant polynomial complex numbers exists complex number 
setoids constructive setoids setoid functions coq intensional type theory 
notion called leibniz equality de nable smallest re exive relation 
context assumptions leibniz equality equivalent meta theoretic intensional de nitional equality 
concrete constructions natural numbers equality identity coincide leibniz equality coincides de nable structural identity 
mathematics useful relation 
instance consider representation real numbers cauchy sequences 
di erent cauchy sequences intensionally distinguished leibniz equality represent extensionally real number 
assume axioms restricting leibniz equality behave intended real number structure impossible implement structure construction 
want quotient type dividing equivalence relation represent real 
solution setoids raw types 
setoid type equivalence relation 
equivalence called setoid equality book equality written coq notation 
quotienting setoid achieved changing equivalence relation 
constructive mathematics little say notion written fundamental notion equality 
amount information show concretely real numbers equal 
example consider real numbers cauchy sequences matter terms may examined equal sure terms distinguish number terms may see far apart cauchy sequences represent real 
objects apart positively know evidence di erent 
instance real number apart give natural number know jxj packaging carrier set equivalence relation relation get notion constructive setoid called framework 
written coq de ne constructive setoid record type shown top page 
record type coq consists labeled tuples type eld may dependent elds 
term type tuple ha pi set relation relation 
proof property 
labels allow geuvers constructive algebraic hierarchy coq tion speci eld tuple cs crr set cs eq relation cs crr 
record type cs crr set cs eq relation cs crr cs ap relation cs crr cs proof cs crr cs eq cs ap 
matter fact projection cs crr written cs crr declared annotation coercion function 
means type checker insert function necessary driven typechecking 
example type inhabitants declare variable type checker implicitly forms correct declaration cs crr 
captures common mathematical usage confusing structure carrier 
de nition predicate conjunction de ning properties constructive setoid 
de ned record record set eq ap relation prop ax ap irreflexive irreflexive ap ax ap symmetric symmetric ap ax ap ap ax ap tight tight apart eq ap 
says constructive setoid tuple ha satis es irre exive symmetric tight property tightness de ned equality terms carrying setoid structure 
equality central notion algebra algebraic properties equational wanted notion constructive setoid re nement notion setoid 
readily accessible classical mathematicians 
didn 
eld cs eq record function represents equality 
coq expression cs eq represents coq determine argument types de ne operator shorthand geuvers constructive algebraic hierarchy coq cs eq 
similarly de ne abbreviation cs ap 
notion setoid allows intensional formalization quotient 
function induces corresponding function quotient domain respects equivalence divided called weak extensionality de nedness function 
de ned coq formalization definition fun def prop 
constructively fundamental equality property strong extensionality definition fun strong ext prop 
fundamental de nedness 
easily shown strong extensionality implies de nedness 
properties de nedness strong extensionality de ned relations 
record type constructive setoid functions consisting pairs hf pi fun strong ext 
proof strongly extensional 
record fun set csf fun csf fun strong ext csf fun 
due implicit coercions term csf fun term type cs crr cs crr 
record type functions illustrates implicit coercions fun apply term expanded type checker csf fun 
constructively naturally occurring functions de ned sense 
instance th root complex plane possible de ne th root complex number di erent representations complex number di erent complex roots just di erent representations complex root 
th root function de ned respect setoid equality 
necessary distinguish functions just terms functional type setoid functions strongly extensional respect equality 
non de nedness constructively functions unavoidable 
classically non de nedness mirrored bishop calls operations functions respectively 
geuvers constructive algebraic hierarchy coq fact function continuous computable representations 
example th root classically non continuous function 
continuous mapping sets roots appropriate topology sets 

algebraic structures coercive sub typing de ned number types coq representing algebraic structures carriers constructive setoids 
algebraic type de ned terms previous 
constructive setoids grp semi groups abelian monoids abelian groups rings elds ordered elds real number structures de nitions types detail refer interested reader fta les 
structures elds ordered elds real numbers explained detail 
elaborate discussion structures fta project appear 
level structures deal assumed abelian 
henceforth explicitly mention property talking hierarchy speak groups mean abelian groups 
de nition type rings terms type groups de nitions follow pattern 
type rings de ned record type cr crr cr cr crr cr mult bin op cr crr cr proof cr crr cr cr mult 
function cr crr gives underlying group coercion indicated annotation coq silently insert explained sect 

type coercive subtype 
details coercions coq see 
general coercive sub typing see :10.1.1.35.9569
multiplication operation ring setoid function respects setoid equality 
types setoid functions called bin fun geuvers constructive algebraic hierarchy coq bin op second specialized case rst domain range setoids 
de ning property record mult bin op prop ax mult assoc associative mult ax mult mon build grp mult ax mult assoc ax dist distributive mult csg op ax non triv zero 
completes de nition rings terms groups 
general scheme de ning algebraic structure terms algebraic structure record type crr aname 
proof crr 

record aname 
prop ax 
ax pm 
note structural subtype aname sense having elds aname 
aname occurs eld 
records coq right associative extensible classi cation 
subtype aname coercion crr aname expected 
coq term declared coercion declare coercion putting coercion 
see detailed account coercions coq 
declaring coercion means type checker try insert term doesn type check 
coercions type checker try coercions composed 
restrictions coercions obvious reasons system allow coercions type time 
implies important restriction algebraic hierarchy coercion ring geuvers constructive algebraic hierarchy coq additive monoid multiplicative monoid 
multiple inheritance possible full generality 
algebraic hierarchy coercions arise eld selection shown example coercion crr selects rst eld labeled record type 
yields linear hierarchy structures eld selecting coercions depicted diagram names coercions omitted 
grp multiple inheritance arises composition coercions rings inherit structure properties operations groups monoids semigroups constructive setoids 

ways classify addition compare ways treat addition coq 
rst way done standard coq library second bridge third way done algebraic hierarchy 

standard coq library separate additions naive approach de nes addition new type addition introduced 
coq standard library di erent additions natural numbers integers reals plus nat nat nat rplus properties additions developed assumed scratch time 
instance commutativity addition times lemma plus com nat plus plus 
lemma com 
axiom rplus com rplus rplus 
approach multiplicity continues new type introduced complex numbers polynomials matrices functions 
algebraic structure parameter naturals integers reals commutative groups addition develop theory addition uniformly groups 
group addition polymorphic parameterized particular group group crr crr crr 
geuvers constructive algebraic hierarchy coq carrier function crr group set gives underlying set group 
concrete structure wish de ne naturals de ne addition prove satis es commutative group axioms signi cant advantages gained 
theory commutative groups need developed inherited particular group 
declare groups immediately inherit properties groups 
second important large scale formalization uniform names properties abelian groups 
users formalization need consider commutative law lemma com group crr 
law applicable groups 

addition algebraic hierarchy previous subsection considered advantages classifying structures groups 
re nements necessary 
framework just type structure hierarchy structures grp 
addition declared level semi groups inherited highly speci ed levels addition just intensional function setoid function 
structure subtype simpler structure chain forgetful coercions cm crr grp 
csg crr grp 
cs crr set 
applied proper order 
addition function called csg op elds grp record 
type csg op grp bin fun csg crr csg crr csg crr 
returns bin fun type binary setoid function 
retrieve underlying type theoretic function applying fun fun bin fun cs crr cs crr cs crr 
commutativity addition declared level monoids 
property inherited higher levels 
mentioned section structures abelian explicitly stated 
geuvers constructive algebraic hierarchy coq putting sum semi group fun csg crr csg crr csg crr csg op syntax coq powerful allow abbreviated argument determined types see sect 
discussion complexity underlying representation 
fact right unit addition unique stated lemma 
lemma cm unit unique zero 
coercions lemma structure coerced monoid 
groups rings elds real complex numbers polynomials advantages mentioned previous subsection hold algebraic hierarchy 
technical restrictions coercions necessary maintain meaning implicit notations 
example possible de ne ring union additive multiplicative monoid coercions rings monoids see section 
partial functions main problems formal mathematics deal partial functions 
type theoretic way treat problem add proof objects arguments functions approach followed framework 
prototypical partial function division 
algebraic hierarchy expression representing arguments written zero proof apart zero 
managed having non zero elements 
informally division function written 
formally de ne type corresponding notion sub setoid 
elements crr carrier sub setoid pairs element setoid proof element satis es property record crr prop set scs elem scs prf scs elem 
geuvers constructive algebraic hierarchy coq instance crr turned setoid canonical way inheriting equality showing satisfy required properties 
done map build takes setoid predicate returns setoid elements satisfy sub setoid construction de ne setoid non zeroes ring functions injection projection relate original setoid 
give types functions 
variable 
definition prop zero 
definition nonzeros build 
definition nonzeros 
definition zero nonzeros 
division framework de ned reciprocal function 
setoid function sub setoid non zeroes cf un op nonzeros division type cf div nonzeros expression parsed shorthand cf div expression represents considered element proof terms occur expressions cause calculation rules conditions expect 
instance lemma formalizing 
lemma div div zero zero zero 
lemma condition zero super uous implied zero zero 
omit plug proof place lemma harder apply practice 
geuvers constructive algebraic hierarchy coq 
syntax complexity terms customary operator symbols syntax coq doesn support overloading customary symbols 
indicate setoid analogue normal operation putting operator square brackets 
equation xy syntax equation sum nat clearly notation readable 
notational features coq provide signi cant bene ts ocial terms framework complex notation suggests 
instance suppose ir ir type real numbers abbreviation fun csg crr cm crr cg crr cr crr cf crr cof crr crl crr ir csg crr cm crr cg crr cr crr cf crr cof crr crl crr ir csg crr cm crr cg crr cr crr cf crr cof crr crl crr ir csg op cm crr cg crr cr crr cf crr cof crr crl crr ir just function symbol term contains function symbols 
shows terms framework relatively heavy 
note big term inferable coercions 
luo coercive sub typing parts term elided just suppressed printing 
may important optimization large scale formal mathematics 

framework writing algebraic expressions coq proof assistant 
features coq approach possible geuvers constructive algebraic hierarchy coq record types coercive sub typing implicit arguments similar features available systems instance mizar system framework implemented systems 
practice framework works 
hardly duplication theory despite great number algebraic structures de ned 
example theory rings rationals reals complex numbers polynomials 
apart reuse theory reuse notation form overloading introduced coercion mechanism convenient 
keeps user level expressions reasonably concise 

various things need investigated 
better record types 
pointed multiplicative monoid additive monoid ring coercive super type ring type 
allowed creates coercions type 
sub setoid subtype setoid derived 
coercion doesn current version coq 
research coercions improved necessary 
start investigations 

structure hierarchy 
current hierarchy designed possible prove fundamental theorem algebra 
means rich 
instance don non commutative structures apart basis grp didn occur 
place hierarchy re ned 
currently useful properties elds characteristic zero derived 
right place complex numbers ordered eld eld characteristic zero complex numbers results don apply 
restate prove results complex numbers separately 
situation remedied extending hierarchy described section similarly number convergence notions de ned 
geuvers constructive algebraic hierarchy coq subtype results don apply complex numbers 
complex numbers metric structure desirable type 
done adding hierarchy coq hierarchy indicated coercions complex numbers types produce composition coercions coercions complex numbers allowed 

partial functions 
current way coq deals partiality proof terms expressions 
unnatural 
pvs system ers di erent solution pvs partial function total function domain 
partial function de ned element handled called type check conditions may create extra proof obligations don show syntax 
similar approach nuprl subset types 
approach works price paid type checking undecidable 
felt serious problem pvs users 
valuable investigate similar approach adapted coq 

better syntax 
current syntax framework readable 
integers reals coq standard library custom parsers allow common algebraic notation 
valuable build parser algebraic hierarchy 

classical logic 
current algebraic hierarchy completely constructive 
people irrelevant reasoning constructive 
case classical logic easier useful classical variant algebraic hierarchy 
instance de ne notion decidable setoid equality decidable 
combining notion types algebraic hierarchy give classical algebraic hierarchy 

acknowledge support ec network 
anonymous referees valuable comments 
furthermore want dan henk barendregt valuable feedback discussions 
geuvers constructive algebraic hierarchy coq bailey 
machine checked literate formalisation algebra type theory 
phd thesis manchester university 
barras coq proof assistant manual 
url inria coq doc manual ps gz 
barthe 
implicit coercions type systems 
stefano berardi mario coppo editors types proofs programs international workshop types torino italy selected papers vol 
lncs pp 
berlin 
springer verlag 
bishop 
foundations constructive analysis 
mcgraw hill 
op erateurs de sur les structures alg 
actes des journ ees des langages 
hardin morain 
way certify computer algebra systems 
proceedings workshop floc federated logic conference trento italy vol 
entcs 
elsevier 
boyer 
qed manifesto 
bundy editor automated deduction cade volume lnai pages 
springer verlag 

field une proc de pour les nombres en coq 
proceedings inria 
url fta project geuvers wiedijk barendregt pollack formalizing fundamental theorem algebra forthcoming 
geuvers 
constructive reals coq axioms categoricity 
appear proceedings workshop types durham uk springer verlag 
geuvers wiedijk 
equational reasoning partial re ection 
mark john harrison editors theorem proving higher order logics tphols portland vol 
lncs pp 
berlin 
springer verlag 
geuvers wiedijk 
constructive proof fundamental theorem algebra rationals 
appear proceedings workshop types durham uk springer verlag 
geuvers constructive algebraic hierarchy coq harrison 
complex quanti er elimination hol 
richard boulton paul jackson editors tphols supplemental proceedings informatics research report division informatics university edinburgh pp 

jackson 
enhancing nuprl proof development system applying computational algebra 
ph thesis cornell university 

axiom scienti computation system 
springer verlag berlin 
kneser 
erg zu einer arbeit von kneser uber den der algebra 
math 

luo 
coercive subtyping 
journal logic computation 

fundamental theorem algebra 
journal formalized mathematics 
mml identi er 
muzalewski 
outline pc mizar 
fond 
philippe le brussels 
owre rushby shankar 
pvs prototype veri cation system 
kapur ed th international conference automated deduction cade vol 
lnai pp 
berlin 
springer verlag 
pollack 
dependently typed records representing mathematical structure 
mark john harrison editors theorem proving higher order logics tphols portland vol 
lncs pp 
berlin 
springer verlag 
pottier 
un de formalisation de alg en coq 
web page 
url sa bi 
typing algorithm type theory inheritance 
proc 
th symp 
principles programming languages popl pp 

wiedijk 
mizar impression 
unpublished 
url 
