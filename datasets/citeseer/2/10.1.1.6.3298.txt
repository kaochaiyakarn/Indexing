wanted know hipe compiler afraid ask sagonas pettersson carlsson gustafsson lindahl information technology department uppsala university sweden hipe csd uu se user oriented description features characteristics high performance erlang hipe native code compiler nowadays part erlang otp 
particular describe components additions compiler improve performance extend functionality 
addition attempt give recommendations users get best hipe performance 

years developing hipe high performance native code compiler erlang 
hipe offers flexible fine grained integration interpreted native code efficiently supports features crucial erlang application domain light weight concurrency 
hipe exists new component currently lines erlang code lines assembly code nowadays fully integrated ericsson erlang otp implementation fact hipe available default open source version 
hipe compiler currently back ends ultrasparc machines running solaris intel machines running linux solaris 
architecture design decisions hipe sparc back ends previously described respectively :10.1.1.127.6642
brief history hipe development appears 
performance evaluations reports show hipe considerably improves performance characteristics erlang programs small sequential programs erlang otp competitive speed implementations similar functional languages bigloo scheme cml concurrent sml nj 
performance evaluation aside mentioned reports address quite technical compiler runtime system implementation issues probably informative erlang programmers simply interested hipe everyday application development 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
erlang workshop uppsala sweden copyright acm 
ameliorate situation current targeted hipe users 
aims 
describe features secrets hipe compiler interest users 
introduce planned additions hipe compiler way focuses new features affect users obfuscating presentation getting deep technical details 
give recommendations users get best hipe performance 
relatively self contained provide sufficient context rest contents section begins hipe current architecture describes basic usage compiler options improvements presents extensions hipe functionality currently underway probably included release 
section offers advise hipe followed section reveals documents limitations incompatibilities currently exist beam hipe compiler 
section briefly wraps 
warn reader nature certain items described volatile 
destined change hopefully better 
hipe homepage contain date version document 

hipe compiler user oriented overview hipe architecture structure hipe system shown fig 

erlang otp compiler performs macro preprocessing parsing de sugaring expanding uses record syntax erlang source code 
code rewritten core erlang 
various optimizations constant folding optional function inlining performed core erlang level 
code rewritten beam virtual machine code optimizations done 
beam de facto standard virtual machine erlang developed erlang otp 
efficiently implemented register machine vaguely reminiscent wam 
hipe compiler traditionally started beam virtual machine code generated erlang otp www csd uu se projects hipe erlang source file beam interpreter erlang otp compiler memory beam bytecode data native code erlang otp runtime system front core erlang beam beam disassembler hipe loader hipe core erlang compiler sparc type analysis transformations inlining symbolic beam icode rtl hipe compiler structure hipe enabled erlang otp system 
compiler 
beam code single function translated icode assembly language highlevel functional semantics 
optimizations icode translated rtl register transfer language low level risc assembly language 
translation erlang operations translated machine level operations 
optimizations rtl code translated backend actual machine code 
translation temporary variables rtl code mapped hardware registers runtime stack 
code loaded runtime system 
erlang otp runtime system extended associate native code functions closures 
point process executing beam code native code call mode process 
mode switch occurs control transfers code mode code mode instance beam code function calls native code function native code function returns beam code caller 
runtime system handles transparently visible users native code generally executes faster 
new feature described hipe compiler compile directly core erlang 
way compiler compiles module time performs global analyses optimizations significantly difficult perform available traditional mode 
basic usage normal way hipe native code compiler ordinary erlang compiler interface adding single compilation option native 
erlang shell shell function looks follows module native 
compile file module erl native code load code memory normal module versioning semantics erlang 
calling standard compiler function compile file default load resulting code pro duce beam file contains native code normal beam code compiled module compile file module native produces file module beam loaded 
beam file loaded loader attempt load native code file contains native code suitable local system fails beam code loaded 
words beam files may fat containing code number different target machines 
compiler called external program indirectly calls compile file function 
unix command line shell file native module erl producing file module beam 
additional compiler options may command file name prefixing 
quoting may necessary avoid expansion shell example native hipe verbose module erl generating native code loading fly system possible cases erlang source code available beam file containing beam bytecode exists 
done modules hipe module individual functions hipe 
function hipe takes list hipe compiler options second argument 
forget type erlang shell hipe help 
display short user guide hipe compiler 
hipe compiler options average user necessary give extra information compiler described previous section 
cases may useful necessary control behavior native code compilation 
pass options hipe compiler normal erlang compiler interface wrapped term hipe 
example module native hipe verbose 
pass flags verbose hipe compiler 
note single option wrapped list module native hipe verbose 
main useful options selects optimization level lowest 
default 
upper case versions options exist alias verbose enables hipe compiler verbosity 
useful want see going identify functions native code compilation possibly bottleneck just check native code compiler running 
module takes long time compile try lower optimization level 
try keeping current optimization level specifically select faster precise linear scan algorithm register allocation 
register allocation major bottlenecks optimizing native code compilers 
done adding option linear scan asin module hipe linear scan 
wish certain hipe compiler options particular module place compile directive source file line compile hipe 
note options early list left take precedence options 
specify hipe linear scan option override option advanced demanding compilation time wise level iterated coalescing register allocator 
correct way hipe linear scan specifies level optimizations fast register allocator 
information options hipe compiler accepts obtained hipe help options 
improvements local type propagator erlang dynamically typed language provides developer freedom experiment data structures handling possibly incomplete rapidly prototype applications 
means lot run time spent performing type tests usually succeed ensure operations performed meaningful program accidentally succeed dividing float list fifth element process identifier 
additions hipe compiler local type propagator tries discover available function type information possible compile time 
information propagated code function eliminate redundant type tests transform polymorphic primitive operations operate general types faster operations specialized type operands 
type propagator addition development extensions functionality underway conducted proper evaluation time performance improvements expect practice 
preliminary numbers indicate size native code noticeably reduced turn positive effects optimization passes resulting compile times shorter hipe compiler 
type propagator enabled default normal optimization level higher 
handling floats runtime system atomic erlang values represented tagged bit words see 
tagged value big fit machine word value boxed put heap header word preceeding pointed tagged value 
floating point numbers bit precision typically boxed 
means need operands floating point operation need unboxed operation performed result boxed stored back heap 
avoid overhead starting beam enhanced special floating point instructions operate directly untagged values 
sped handling floats considerably number boxing unboxing operations reduced 
beam code interpreted floating point arithmetic advantage features available floating point unit fpu target architecture machine registers 
specifically operands put fpu operation performed result 
hipe compiler floating point values mapped fpu kept long possible eliminating overhead floating point calculations 
described detail back specific schemes mapping 
performance comparison shows hipe compiled floating point intensive code considerably faster floating point aware beam bytecode 
table gives idea performance improvements expected range programs manipulating floats 
maximize gain floating point instruction user encouraged appropriate float guards currently communicate beam compiler floating point type information try keep floating point arithmetic instructions blocks split inserting instructions just performed calculations 
efficient target specific compilation floating point arithmetic enabled default starting optimization level 
handling binaries proper support bit syntax introduced erlang otp 
initially hipe compiler na compilation scheme binary matching instructions beam translated calls functions part interpreter supporting routines 
result hipe compiled code slightly slower beam code costs switching native interpreted code cf 
section 
remedy proposed implemented scheme relies partial translation binary matching operations 
scheme identifies special common cases binary match explicitly writing guards unnecessary global type analysis gets fully integrated hipe see section 
table performance beam hipe programs manipulating floats times ms 
benchmark beam hipe speedup float bm barnes hut fft wings raytracer performance sparc 
ings translates completely native code remaining uncommon cases call functions order avoid extensive code bloat 
implementation compilation scheme described included hipe compiler release erlang otp 
performance scheme different benchmarks involving binaries shown table 
benchmarks test speed binary matching benchmark takes binary containing gtp message input extracts information message header returns 
benchmark similar simply extracting binary translates entire message record 
ber decode benchmark generated asn compiler parses binary 
benchmarks ber encode test speed binary creation matching 
expected speedups obtained information available compile time identify cases compiled fully native code 
example case binary segment sizes constant possible determine statically segment binary starts byte boundary 
words achieve best time performance advisable extra space guarantee element starts byte boundary 
example wants binaries denote integers integer needs bits possible pack take bytes 
integer put byte boundary binary take space bytes binary matching operations performed faster 
hipe compiler option inline bs enables native code compilation bit syntax 
option selected default optimization level higher reasons user disable test performance effects code size serious concern 
planned extensions near better translation binaries compilation scheme introduced binary matching faster done faster 
upcoming release new scheme compiling binary matching included 
relying partial translation having beam control entire binary matching operation fall hands native code compiler 
possible avoid unnecessary mode switches 
scheme binary matching code calls functions strictly resort benchmark beam hipe speedup float bm barnes hut fft wings raytracer performance 
single operation complex 
addition new scheme compile binary creation developed 
developed similar fashion binary matching scheme changing calls functions specialized versions functions translated native code 
seen table performance hipe compiled code improved substantially 
speedup matching benchmarks ranges times compared beam 
speedup benchmarks create binaries times times sparc 
connection effort compile directly core erlang native code project started improve compilation binary matching new possibilities open structure matching visible compiler 
result project available release 
global type analysis described section hipe compiler includes local type propagator works individual functions 
assumptions arguments functions basic type information 
implemented global type analyzer processes module time 
generally find detailed type information precision depends large extent programming style analyzed code 
exported function potentially called outside module inputs possible assumptions types arguments exported functions 
best precision achieved necessary interface functions exported code module 
module boundaries crossed type information lost 
built functions know types data accept input types return 
currently working take advantage gathered type information combination local type propagator 
able remove unnecessary type checks code 
second possible avoid repeatedly tagging values cf 
section 
third global type analysis possible avoid creating tuples returning multiple values function result function immediately unpacked multiple values passed directly registers stack 
note global type analysis type checker table performance beam hipe programs manipulating binaries times ms 
benchmark beam hipe speedup ber decode ber encode performance sparc 
benchmark beam hipe speedup ber decode ber encode performance 
table performance beam hipe pre release programs manipulating binaries 
benchmark beam hipe speedup ber decode ber encode performance sparc 
type inference system user able specify types user completely trusted furthermore fact input parameter integer mean passed value integer runtime 
current implementation give warning user detects type error program just generates code produce runtime type error 
change type analyzer useful programming tool 
compilation core erlang new feature hipe compiler ability compile native code directly erlang source code starting beam virtual machine code previously way 
done generating hipe intermediate icode representation directly core erlang code produced erlang otp compiler 
beam code needs previously generated 
advantages better control generated code greater ability metadata program gathered source level global type analysis information 
currently way add extra option core compiling native code module native core 
method compiling fully functional coming release programming constructs handled properly 
intend compilation source code completely implemented release 
expect compilation source code default method hipe compiler 
compilation beam available cases source code available reasons possible recompile sources 
benchmark beam hipe speedup ber decode ber encode performance 

recommendations hipe improving performance native code application spends time known parts code size parts large compiling parts native code maximize performance 
self contained modules narrow external interfaces allow compiler perform useful type analysis function inlining compiling core erlang 
deep recursions recommended efficient native code beam code 
hipe runtime system includes specific optimizations generational stack scanning case 
monomorphic functions functions known operate single type data translated code polymorphic functions 
achieved having guards function heads avoiding export functions calling parameters single type known guards type tests 
floating point arithmetic collect arithmetic operations block try avoid breaking operations particular try avoid calling functions 
help analysis guard float 
benefit manage keep operations block risk losing performance minimal 
order function case clauses cases frequent runtime precede frequent 
help reduce number type tests runtime 
avoiding performance losses native code frequently executed code application large compiling native code may give small negative speedup 
native code larger beam code case may suffer excessive cache misses due small caches processors 
avoid calling beam code functions native code functions 
doing causes mode switches call return point relatively expensive 
native compile code frequently executed parts including erlang libraries call excessive mode switching may cancel performance improvements native compiled parts 
compile export directive 
reduces likelihood functions inlined useful type analysis impossible 
avoid crossing module boundaries making remote calls compiler assumptions functions called 
creative pre processor include define directives may allow combine performance modular code 
avoid bit floats bit syntax require mode switch 
costly match binary start byte boundary mainly requires data binary copied new location 
hand binary starting byte boundary matched sub binary contains pointer data created 
variable segment lengths beneficial unit divisible means byte boundary alignment information propagated 
cases native code help aware bif calls calls functions native code 
application spends time instance accessing ets tables native compiling code little impact performance 
similarly code simply sends receives messages performing significant amounts computation benefit compilation native code time spent runtime system 

truth truth truth significant put making hipe robust commercial quality compiler 
matter fact tried follow beam decisions order preserve observable behavior erlang programs time writing july aware outstanding bugs 
occasionally meant possibly reduced speedups performance 
couple small differences code produced beam exist user aware limitations 
document 
incompatibilities beam compiler detailed stack currently generated exceptions native code possible stack trace contains function error occurred 
performing pattern matching stack recommended general regardless compiler 
old fashioned syntax fun fun 
higher order calls supported hipe 
opinion causes complications including code bloat 
proper funs explicit calls 
floating point computations may give different precise results native code beam 
floating point unit internally uses higher precision bit ieee format boxed floats hipe keeps floats floating point unit beam store memory see 
current limitations inserted runtime system native code freed 
newer version code loaded old code kept 
hipe compiler recognizes literals constant terms places special literals area 
due architectural limitations current erlang otp runtime system single area fixed size determined runtime system compiled 
loading lot native code constant terms eventually cause literals area fill point runtime system terminated 
short term fix edit hipe bif explicitly literals area larger 

concluding remarks user oriented description features characteristics hipe native code compiler nowadays integrated erlang otp easily usable erlang application developers 
hold hipe lot offer users 
benefits described 
exciting ones await discovery 
final word advice hipe compiler course treated black box generally recommend creatively explore options flexibility add color life 

acknowledgments hipe compiler possible prior involvement erik johansson project 
integration erlang otp dream close collaboration members erlang otp group ericsson bj rn gustavsson kenneth patrik active encouragement bjarne cker 
hipe development supported part advanced software technology competence center matching funds ericsson ab 

carlsson 
core erlang 
proceedings pli erlang workshop sept 
carlsson gustavsson johansson lindgren 
nystr pettersson virding 
core erlang language specification 
technical report information technology department uppsala university nov 
cheng harper lee 
generational stack collection profile driven pretenuring 
proceedings acm sigplan conference programming language design implementation pldi pages 
acm press 
gustafsson sagonas 
native code compilation erlang bit syntax 
proceedings acm sigplan erlang workshop pages 
acm press nov 
johansson pettersson sagonas 
hipe high performance erlang system 
proceedings acm sigplan conference principles practice declarative programming pages 
acm press sept 
johansson pettersson sagonas lindgren 
development hipe system design experience report 
springer international journal software tools technology transfer 
appear 
johansson sagonas 
linear scan register allocation high performance erlang compiler 
practical applications declarative languages proceedings padl symposium number lncs pages 
springer jan 
lindahl sagonas 
unboxed compilation floating point arithmetic dynamically typed language environment 
pe arts editors implementation functional languages proceedings th international workshop number lncs pages 
springer sept 

bit syntax released version 
proceedings sixth international erlang otp user conference oct 
available www erlang se euc 
pettersson 
staged tag scheme erlang 
technical report information technology department uppsala university nov 
pettersson sagonas johansson 
hipe erlang compiler system description performance evaluation 
hu rodr guez artalejo editors proceedings sixth international symposium functional logic programming number lncs pages 
springer sept 
reppy 
cml higher order concurrent language 
acm sigplan conference programming language design implementation pages 
acm press june 
serrano weis 
bigloo portable optimizing compiler strict functional languages 
mycroft editor proceedings second static analysis symposium number lncs pages 
springer sept 
warren 
prolog instruction set 
technical report sri international menlo park oct 
