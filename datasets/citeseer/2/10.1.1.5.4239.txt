graphical user interface toolkit approach thin client computing simon steven feiner william yoav hirsch dept computer science columbia university amsterdam ave new york ny feiner cs columbia edu wmc columbia edu network server centric computing paradigms quickly returning dominant methods computers 
web applications prevalent role pc today largely reduced terminal running client viewer web browser 
implementers network centric applications typically rely limited capabilities html employing proprietary plug ins transmitting binary image entire application executed client 
alternatively implementers develop regard remote requiring users wish run applications remote server rely system creates virtual frame buffer server transmits copy raster image local client 
review problems current approaches pose show solved developing distributed user interface toolkit 
distributed user interface toolkit applies techniques high level components toolkit similar low level window system 
example approach working distributed user interface toolkit possible develop applications distributed version java foundation classes 
categories subject descriptors networks distributed systems programming languages language constructs features information interfaces presentation user interfaces keywords user interface toolkit remote method invocation client server systems network computing 
argue explosive growth computer industry closely tied rise popularity networks particular internet 
average person purchased computer running application software word processing spreadsheets drawing program 
today person undoubtedly purchase computer access internet 
computing heading radically new directions techniques graphical user interfaces remained 
copyright held author owner 
www may honolulu hawaii usa 
acm 
vast majority user interfaces written visual components called widgets controls gathered libraries usually referred user interface toolkits 
popular toolkit mfc microsoft foundation classes name implies construct user interfaces various flavors microsoft windows operating system 
toolkit gaining popularity ability create cross platform compatible graphical user interfaces jfc java foundation classes 
complementing mature user interface toolkits built window system athena motif tk 
user interface toolkit provides abstraction layer lowlevel drawing interaction routines available programmers graphics subsystem usually bundled operating system 
abstraction allows programmers quickly create commonly visual components buttons scrollbars menus text fields 
users benefit applications run particular operating system roughly look feel applications built components user interface toolkit 
despite advantages tight binding user interface toolkit underlying graphics subsystem presents significant challenges creating distributed applications application logic execution user interface presentation occur different computers 
approaches researched deployed commercially support distributed computing paradigm network separates presentation user interface application logic 
phrases server centric computing network computing thin clients distributed presentation remote presentation prevalent literature 
remainder discuss section approaches thin client computing commonly industry academia web graphics pipeline interception 
describe alternative distributed user interface toolkits section introduce section distributed user interface toolkit remote jfc describing addresses issues arise existing systems 
section performance comparison section conclude remarks directions research heading 

thin client computing web approaches widely deployed approaches thin client computing uses hypertext transfer protocol hyper client frame buffer rendering web browser html application logic web api web server client server architecture web application 
application written special web api cgi asp php jsp communicate web server 
negotiate transfer html data client web browser web server 
web browser renders html client frame buffer 
text markup language html interact server display document database commonly known world wide web 
popularity wide availability browsers provide front view html content brought rapid development deployment applications accessible format 
architecture application developed web methodology depicted 
severe limitation web application relies solely html pull data transfer methodology 
applications prevented generating events provide rich user experience 
example user executes search web search engine engine ideally complete search entirety seconds request user expecting immediate response engine notify user better results initial page displayed 
second problem stateless difficult programmers create simplistic notion persistence page accesses 
addition user interface toolkit html forms extremely rudimentary providing handful commonly components 
attempts address problems including sending entire applications java applets designing browser plug ins interpret language provide richer user experience macromedia flash creating world user navigate vrml providing application programmer interface api storing persistent session identification data cookies 
attempts address problems html give rise host new problems 
java applets raise numerous security concerns transport executable code client 
byte codes transmitted network compiled form java decompilers readily available allow user access source code application 
addition java applets typically violates thin client principle running application logic client 
flash vrml define client frame buffer pixel copying viewer pixel data application logic ui toolkit api virtual frame buffer client server architecture remote frame buffer application 
application typically written standard ui toolkit api jfc mfc tk motif renders remote virtual frame buffer 
resulting pixel data transported network proprietary protocol ica rfb rdp client viewer image reconstructed copied client frame buffer 
richer languages built user interactivity mind suffer problem mature browsers microsoft windows desktop operating systems generally available 
cookies raise numerous security concerns permit server program write data permanent storage device client 
addition cookies target severe criticism due surge public awareness regarding privacy concerns internet 
issues cookies unattractive method programmers add server side state protocol 
graphics pipeline interception second approach delivering applications thin client environment gaining popularity involves intercepting rendering commands sent graphics pipeline 
simple way implement create virtual frame buffer ram server application render gui transporting resulting raster image client 
complicated implementation try send higher level commands draw line possible order reduce network 
essence approach attempts bring server desktop user permits full range user interactivity 
products insignia sco symantec pc providing type functionality years extension underlying operating system 
explosion popularity approach occurred released cross platform vnc system public free charge 
microsoft capability standard part windows xp operating systems 
architecture application employs remote frame buffer approach presentation thin client displayed 
approach intercepting graphics pipeline addresses problems web approach uses html introduces number problems 
web approach html capable operating reasonably relatively low speed modem network links graphics pipeline interception approach demands highbandwidth connections 
transporting virtual frame buffer server client essentially sending video stream computer generated graphics 
advanced lossy video compression algorithms mpeg proposed existing systems employ techniques 
real time encoding mpeg streams usually requires special hardware handle streams time eliminating possibility remote frame buffer approach current shared server 
addition lossy compression techniques introduce unwanted compression artifacts display reducing system usability particularly working text detailed graphics 
systems rdp microsoft windows terminal services attempt reduce bandwidth consumption trying intercept high level drawing commands 
doesn necessarily result better performance 
example gui employs image labels buttons bandwidth consumed transferring images time display needs redrawn dwarfs 
addition systems employ optimizations transferring display updates thought unimportant animated cursors 
technique appears reduce bandwidth consumed independent possible factors causes display client updated properly ultimately resulting user frustration 
users experience start moving mouse windows order force system update display 
result bandwidth consumed system simply sent updates naive approach 
systems suffer overhead bringing entire user desktop server client just application 
existence server side state asynchronous event generation server permits graphics pipeline interception approach provide rich level user interactivity web approach html 
practical limitation caused network latency 
shows typical client viewer graphics pipeline interception analogue web browser displays mouse pointers 
mouse pointer represents cursor pointing tied local mouse 
second mouse pointer typically lags displays mouse position server 
simple remote frame buffer system run high speed lan connection noticeable difference position client virtual server real mouse positions 
advanced graphics pipeline interception implementations rdp systems generally mouse pointer lag issue similar problem window dragged 
slow modem link highly interactive user interfaces difficult control extreme cases may system unusable 
important advantage graphics pipeline interception systems tend binary compatible large set existing software packages intended desktop computers 
industrial academic institutions employ graphics pipeline interception systems production environments provide users thin client access subset enterprise campus computing infrastructure 
intercepting graphics routine operating system level little programming effort involved deploying system 
screen shot shows windows xp rdp implementation vnc implementation refreshing screen properly 
prevent user able accomplish task set 
users try randomly move mouse windows attempt force screen update resulting large amount bandwidth consumed 
screen shot depicting latency actual position local mouse pointer small black square white outline near center image just right xterm window position virtual mouse server arrow icon right window typically experienced remote frame buffer thin client system 
screen shot taken vnc system modem connection client server 

distributed ui toolkits distributed user interface toolkits address issues arise employing web html remote frame buffer approaches allowing server manipulate user interface toolkit components directly client 
server create modify delete components available distributed toolkit working local application 
think implementation remote frame buffer extremely efficient lossless compression algorithm 
sending pixel data rendered server network distributed user interface toolkit sends semantics necessary render pixel data client 
addition mouse handled locally client additional perceived latency caused processing necessary service users requests application running locally 
concept creating architectures toolkits support development distributed applications new 
example window system network extensible window system news built network mind transport low level drawing commands 
high level user interface toolkit news appears high level commands transported network happening 
high level user interface toolkit commands draw button translated low level commands lines rectangles transmitted network 
addition window system stores state computer presenting output unfortunately called server 
consequently difficult share window system sessions multiple users window system server running client computer fails user session lost 
reasons remote virtual frame buffer system vnc employed transport window system desktop unix server client frame buffer rendering viewer java vm rmi application logic rjfc api server java vm client server architecture application written distributed user interface toolkit 
rjfc api closely parallels standard jfc user interface toolkit api 
rjfc commands interpreted server java vm transported network rmi 
client java vm translates rjfc rmi command sequences standard jfc calls rendering client 
window system viewer running unix workstation relying built networking facilities research efforts attempted systems network aware 
example mobile computing community looked modifying operating system support applications 
collaborative computing community contributed numerous architectures toolkits 
addition user interface community exploring network enhance functionality user interface toolkits virtual reality research community developed distributed user interface toolkits graphics 
architectures toolkits designed premise application logic executes client 

toolkit determine distributed user interface constructed explore advantages possible developed rjfc 
primary goal rjfc create api tracks design pattern functionality standard jfc api closely possible exception presentation displays remote client local frame buffer 
accomplish needed create welldefined api corresponding software development kit sdk establish protocol client server communication develop java viewer provides graphical context client 
shows architecture rjfc application 
rjfc api building rjfc system wanted sure system appealing users 
accomplish goal concluded need provide api familiar rich functionality 
words need emulate possible jfc user interface toolkit provided sun 
contemporary user interface toolkits jfc api extremely complex individual source files providing methods programmer public void throws new pane pane false rc rc new rc add south rc add north rc add pane center public extends new new pane new pane new false container new add south add north add pane center comparison api sun jfc api 
method executes server creates simple notepad application displayed client api 
constructor creates notepad application desktop non network aware environment jfc api 
note substitution rjfc components jfc components 
addition jfc code calls new instantiate component rjfc code remote method invocation object resides viewer memory space 
api designed calls result performance degradation components need serialized transported network 
syntax rjfc jfc sufficiently similar believe code generator written convert existing desktop jfc application rjfc thin client implementation 

daunting task small research team write wrappers hand code 
source code jfc readily available created code generator java api reads jfc source produces rjfc jfc element 
approach allows generate different versions rjfc system various implementations releases java sdk making possible handle broad range supported jvms 
example code written rjfc api shown 
tailored code generator resulting rjfc api sufficiently similar jfc programmer fluent creating applications jfc need know capital prepended name toolkit component referenced 
defined component creation new keyword object performance reasons discussed section 
manipulation rjfc components changing text label association event handlers syntactically identical jfc api 
rjfc component actual associated jfc component lives viewer memory space programmer interacts display solely making calls rjfc components 
actual jfc components create display viewer hidden programmer 
rjfc components track jfc api follow sun java beans standard may easily graphical user interface builders sun forte java borland 
rjfc protocol rjfc component instantiated modified deleted server rjfc toolkit transparently informs attached rjfc viewer event occurred remote method invocation rmi 
rjfc viewer reacts performing exact action viewer occurred server jfc api 
example server requests new created rjfc toolkit transmit command viewer java vm 
viewer java vm creates jbutton standard jfc api causing actual button rendered client 
similarly rjfc server installs event handler rjfc component server uses rmi tell viewer install proxy jfc event handler associated jfc component displayed 
key performance optimization rjfc protocol create jfc components viewer memory space returning rjfc server 
remotely accessible object extends unicast implements interface extends remote lives viewer memory space 
viewer connects rjfc server viewer passes display registration method implemented rjfc server 
rjfc server server create jfc components live viewer memory space receive remote associated rjfc wrapper object creating object server memory space sending serialized object client sending remote wrapper object back server 
measurements show rmi call consumes ethernet packets sending serialized jbutton consumes times number 
rjfc protocol uses similar approach accomplish event handling 
event handler installed rjfc component server rjfc uses rmi send simple message microsoft windows desktop rjfc viewer accessing remote notepad application 
window left allows user enter rmi url select server application display viewer window right 
tells viewer install proxy event handler associated jfc object 
proxy event handler rmi call server new event generated client side 
actual semantics event handler defined application logic executed server server receives rmi call client 
server generated events supported simply having rjfc server retain rjfc component returned display initialization completed 
remote rjfc component server free asynchronously generate events 
rjfc viewer rjfc viewer shown provides context rjfc server application manipulate client frame buffer 
viewer hand coded application uses jfc emulates functionality typical thin client system 
user system invokes viewer point window created form allows user connect server 
connection established window created server manipulate remotely 
server may request additional windows created asking dialogue boxes rjfc api 
shows screen shots small applications run rjfc viewer 

performance comparison web thin client approach html consumes little bandwidth html represents presentation semantics extremely high level 
relatively small amount information transported approach suffers problem designed implementing remote applications sharing static data 
contrast remote frame buffer approach operates premise compatibility existing applications paramount expense network bandwidth 
remote frame buffer implementations designed corporate lab network environments administrators trying move users away desktop computers thin client subsystem lower total cost ownership 
distributed user interface toolkit attempts combine benefits approaches performance usability issues transmitting high level semantics display standard toolkit api 
intuitively expect network bandwidth consumed rjfc closer web approach html remote screen shots rjfc viewer displaying notepad demo chat room demo virtual environment control system 
rjfc system capable providing rich user interaction expect local application including dialog boxes mouse detection server generated events 
event vnc srv vnc client rdp srv rdp client rjfc srv rjfc client connect log open application idle min static mouse idle min anim 
mouse idle min mouse idle min full screen typing min chars cut paragraph paste paragraph copy paragraph find paragraph save document new document open document resizing full screen drag size window drag mouse screen tear comparison number bytes transmitted network rjfc rdp implemented windows terminal services vnc implementation simple operations performed notepad application 
determined vnc vast majority bytes transmitted caused mouse movement 
expert user perform experiment minimize number bytes sent 
vnc system configured standard encoding method transmitting raster data server client 
noted vnc system occasionally difficulty knowing update screen occasionally need woken mouse movements increased amount bytes transferred 
web method html able provide level user interactivity included tests 
frame buffer approach permitting rich user interaction artificially introduced latency 
comparison bandwidth consumed vnc remote frame buffer system 
thin client systems need kind software browser viewer reside permanent storage client computer 
web approach approach transmit high level information network size client software package larger vnc viewer 
size typical web browser download megabytes compared vnc viewer kilobytes 
viewer lies library adds megabytes java runtime environment vary size megabytes 
addition vnc viewer memory image attached desktop computer consumes megabytes ram web browser viewer require approximately times amount 
results faster startup times vnc viewer web browser viewer 
remote frame buffer approach thinner web approaches capable running powerful hardware requires network bandwidth operate effectively 

believe distributed user interface toolkit approach embodied represents powerful competitor existing methods delivering thin client applications user 
currently considering number possible directions extend 
attractive possibility implementation api code generator automatically convert desktop jfc applications thin client applications 
attempt add new features protocol 
example protocol client side stateless possible create collaborative groupware version rjfc toolkit 
able compare system directly rich body research area 
addition consider augmenting toolkit support hybrid client capable handling events locally client transmitting events server 
believe exploring optimize rjfc protocol provide insight information complexity user interface 
knowing exactly information transmitting network gain better understanding user interface efficiency improve 

acknowledgments research supported part nsf iis gifts microsoft intel 
opinions findings recommendations expressed material authors necessarily reflect views nsf organization supporting 

asp grasp active server pages 
msdn microsoft com workshop server asp asp 
anderson 
experience distributed object oriented user interface system 
conference proceedings object oriented programming systems languages applications pages oct 
karl kedem 
infrastructure network computing java applets 
concurrency practice experience sep 
special issue java high performance network computing 
berners lee connolly 
hypertext markup language 
rfc 
berners lee fielding frystyk 
hypertext transfer protocol 
rfc 
binding 
architecture user interface toolkit 
proceedings acm symposium user interface software technology pages oct 
borland 
www borland com 
common gateway interface 
ncsa uiuc edu cgi overview html 

www com products 
masinter 
text html media type 
rfc 
overview 
java sun com se docs javadoc overview html 
edwards mynatt peterson spreitzer terry theimer 
designing implementing asynchronous collaborative applications bayou 
proceedings th annual acm symposium user interface software technology pages oct 
forte tools forte java 
www sun com forte ffj 

network computing new thin client age 
craft network 
gosling rosenthal arden 
news book network extensible window system 
springer verlag berlin germany heidelberg germany london uk 

www com 
hill patterson 
rendezvous architecture language constructing multiuser applications 
acm transactions computer human interaction 
hudson smith 
supporting dynamic downloadable appearances extensible user interface toolkit 
proceedings th annual acm symposium user interface software technology pages oct 
insignia solutions 
www insignia com 
extensions overview 
msdn microsoft com library htm 
iso iec jtc sc wg 
mpeg 
iso sept 
java applets 
java sun com applets 
java foundation classes 
java sun com products jfc whitepaper html 
pages dynamically generated web content 
java sun com products jsp 
jing helal 
client server computing mobile environments 
acm computing surveys 
joseph tauber gifford kaashoek 
rover toolkit mobile information access 
proceedings th acm symposium operating system principles pages dec 
kristol 
state management mechanism 
rfc 
lewis 
client server software headed 
ieee computer apr 
li stafford fraser hopper 
integrating synchronous collaboration vnc 
ieee internet computing may jun 
macintyre feiner 
distributed graphics library 
siggraph conference proceedings pages 
acm siggraph addison wesley jul 
macromedia www macromedia com 
swick 
toolkit intrinsics language interface aug 
microsoft microsoft visual mfc library 
microsoft press redmond wa 
microsoft windows terminal services 
www microsoft com windows guide server features asp 
modular toolkit environment 
ieee 
faq 
developer netscape com support faqs champions html 
ousterhout 
tcl tk toolkit 
addison wesley 
php hypertext preprocessor 
www php net 
prakash shim 
support building efficient collaborative applications replicated objects 
proceedings conference computer supported cooperative pages oct 
richardson stafford hopper 
virtual network computing 
ieee internet computing jan feb 

remote presentation agent multimedia databases 
international conference multimedia computing systems 
ieee computer society may 

collaborative multi user platform 
proceedings th symposium vrml pages feb 
scheifler gettys 
window system 
acm trans 
graphics april 
schmidt lam 
interactive performance slim stateless thin client architecture 
proceedings th acm symposium operating systems principles sosp pages dec 
kirchner haake 
designing object oriented synchronous groupware coast 
proceedings acm conference computer supported cooperative pages nov 
sco 
www sco com 
symantec pc 
www symantec com 
visual cafe 
www com products visual cafe 
virtual reality modeling language 
www web org specifications 

metis thin client application framework 
usenix editor third usenix conference object oriented technologies systems coots june 
portland oregon pages berkeley ca usa june 
usenix 
