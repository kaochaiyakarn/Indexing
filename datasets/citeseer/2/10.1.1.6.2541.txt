distributed programming haskell ports streams volker frank huch lehrstuhl ur informatik ii rwth aachen aachen germany 
extension lazy functional programming language haskell distributed programming 
communication processes modify port concept stream approach 
ports accessible internet behave channels concurrent haskell process creates port read 
restriction enforceable compile time may yield undesired ects runtime 
eliminating need explicit statements providing stream items received port guarantee safety regard matter 
implementation consists library written entirely haskell provides functions creating new processes communication concurrent distributed processes open system ports streams error handling exceptions 
distributed programming development software systems changed years 
systems distributed reasons parallelization resources speed space needed application computer 
inherent distributed character application distributed 
examples mobile telephones cash dispenser bank server 
reliability fault tolerance increase reliability system possible arrange computers cooperate failure computers ect system behavior 
access special resources heterogeneous network special resources scanner printer accessed computer 
boom networks internet number distributed applications increases 
particular applications inherent distributed character 
provide convenient means programming modern languages support distributed programming 
sucient provide library communication sockets 
language supply high level concepts distribution communication processes 
want extend functional programming language haskell features elegant distributed programming 
informatik rwth aachen de distributed communication modern languages need provide suitable ways communication distributed system 
di erent methods remote procedure call message passing employed 
standards corba de ne methods interchanging information di erent platforms 
functional languages extended concurrent distributed programming 
successful erlang 
haskell erlang eager functional programming language extended special features concurrent distributed programming 
processes created dynamically spawn local remote computer 
process process identi er pid communication processes 
processes send messages pid 
arriving messages stored process mailbox order arrival fifo 
receiving process conveniently access mailbox pattern matching need extract messages chronological order 
relevant messages fetched pattern matching reside mailbox processed 
important feature erlang communication concurrent processes computer distinguished communication remote processes network 
system developed concurrent setting distributed easily 
scalability system supported language 
fault tolerant programming erlang provides linking mechanism 
processes system automatically informed die unreachable example computer crashes 
processes react failure reorganize system consistent state 
porting communication scheme erlang haskell proved infeasible limitations haskell type system 
subtyping necessary di erent processes understand di erent messages common subsets 
expressed haskell constructors unique 
assess currently available features comfortable programming environment concurrent haskell state art concurrent programming haskell 
provides functions start terminate threads dynamically inside application synchronize mutable variables mvar 
requires leaving purely functional context entering io monad conventional input output 
top mvars semaphores channels provide comfortable means message passing 
concept distributed programming 
possible approach extension concurrent haskell communication channels mvars distributed programming 
leads implementation problems 
concurrent haskell processes may synchronize mutable variable channel 
distributing processes network leads synchronization problems clear mvar located 
consider situation 
processes write mutable variable processes want read 
distributed setting processes located di erent computers network 
writer reader mutable variable writer reader distribution concurrent haskell processes mutable variable located 
located computer network needs state storage value reader suspends reader wants read value 
possibilities location mvar computers example independent computer 
locations disadvantages providing fault tolerance 
necessary parts system may terminate crash ecting rest system 
computer mutable variable located crashes system anymore writer reader communicate logical structure system 
readers writers hang dicult repair system consistent state components communicate 
problem garbage collection distributed system 
know mutable variable channel garbage 
counting possible involve large network overhead 
impossible check mvar known network algorithm expensive produce communication network 
especially case parts system crashed kind polling nodes registered mvar necessary 
systems glasgow parallel haskell glasgow distributed haskell implement distributed garbage collection limited closed systems 
possible implement fault tolerance systems view major requirement programming language distributed system 
solution problems arising distributed garbage collection restrict communication reader channel 
place physical object machine processor reading 
distributed haskell discussion distributing objects similar concurrent haskell network seen problems appear multiple readers writers mvar 
solution problem restriction reader 
restriction locate mvar place reader located 
reader terminates crashes mvar terminates 
readers suspend 
processes hanging may crashed resource remote hosts 
exist writers want write mvar 
inconsistent state 
recognize time send message mvar 
failed write operation throw exception runtime system provide means checking mvars currently unused 
exception caught writer initialize reorganization crashed components example computer just fail gracefully 
communication concept di erent erlang similarities erlang single reader restriction mailbox associated single process read 
allow multiple mailboxes called ports similar channels concurrent haskell programs usually sequences messages just single values passed mvar associated exactly process may read data 
course port may di erent type 
reader naturally process creates port ownership transferred 
precludes programmer passing port forkio thread reading remote machine 
remedy insert checks runtime see thread permitted read port 
eliminate need explicit reading port help programmer avoiding mistakes 
show approach matter give quick overview current api provided port distributed haskell distributed haskell library ports represented polymorphic data type data port type variable represents type values sent port 
new port created function newport io port concurrent haskell operations creating sending ects change environment program running 
belong io monad assures sequential execution io actions contrast eden gon 
value written read port functions port io port io port way channel concurrent haskell process creates port read 
writing port doesn matter port located 
provide necessary contact information data type impose limitations thread may write see 
sending messages network encode binary representation access underlying internal closure 
implementation library glasgow haskell compiler send messages strings 
function show class show 
type messages sent instance class show 
hand message writer port reader writer modelling ports channels distributed setting string representation corresponding data type reading port 
type messages received instance class read 
means messages port need instances 
subsume properties new class named serialize 
note omit class constraint type signatures brevity 
imposes restriction functions nite data structures mutable structures mvars sent remote threads 
connection independently started components provide global registration mechanism 
port name io port io ports globally registered unregistered computer 
processes lookup registered port host name io port network 
actual implementation port host port name just type synonyms string 
suspending ports provide merge function allows programmer merge ports di erent types 
type port port io port function process suspend messages di erent types 
needed process suspend messages di erent processes 
type messages processes perform completely di erent tasks system 
example system chat chat clients may receive messages chat server keyboard respectively gui 
software engineering point view restriction merging ports type eden gon awful 
possible merged ports non merged version 
client process read ports con ict readers want read ports merged version time 
creation termination error handling processes functions concurrent haskell module exception forkio io io threadid io threadid threadid io threadid exception io try io io exception provide linking mechanism 
function port io link link executing process port established 
polling mechanism contacts host periodically linked port located checks existence 
port longer exist process terminated exception 
runtime system trigger matching links notices transmission error 
caught process initiate reorganization system 
convenient function linking ports function link port io io link takes additional io action parameter 
action performed linked port exist just application function 
link example send message port dies 
established link needed possible remove links function unlink link io 
added fault tolerant version port io io similar link action third parameter performed case erroneous sending 
limitations current port concept multithreaded environment necessary allocate resources pass threads refer notion threads opposed operating system level processes 
common usage simple application consisting threads writer reader apparent error sequence surely violates criterion speci ed 
require thread allowed read thread created port 
course easily alleviated forking writer reader 
feel compiler able reject faulty programs possible 
note distinguishing ports di erent types doesn solve problem 
providing just stream messages received port avoid necessity explicit statement 
stream passed thread case threads share copies stream 
multiple threads reading port competing grab message 
sending port 
hide view programmer provide new function create stream corresponding port io port resulting port registering linking 
new function api er merging streams longer 
merging interleave access streams return list item rst stream depending available rst 
chat example example give implementation chat server new stream approach 
clients connect server messages arriving client relayed 
communication interface data type data connect string port send string string close string port deriving read show eq server creates port external communication startup registers port 
main stream stream initialization proceeds loop 
loop elegantly implemented stream nite list 
list ports connected clients kept state process 
list changes dependence connecting leaving clients 
new chat message broadcasted connected clients port io msg case msg connect name mapm login name return close name filter mapm logout name return send name str mapm chat name str return client process uses interface data chat string string login string logout string deriving read show eq receive messages chat server 
chat message new chat messages 
rst string nickname user part chat second string chat message 
logout message sent client leaves chat 
don need algebraic data type interface keyboard process just strings 
client process initiates connection chat server host obtaining remote stream 
streams created process input keyboard forked 
main putstrln host chat server 
host putstrln nickname 
name connect name forkio stream mapm client name takewhile right stream close name streams merged process proceeds loop analyzing messages 
mapm state involved recursion apart io actions 
terminate recursion takewhile nite stream 
empty input keyboard represented message right merged stream terminates client 
client sends close message server terminates 
messages handled function client 
messages server displayed shown messages keyboard forwarded server 
client string port string io client name msg case msg left putstrln display right str send name str process reading keyboard 
just reads strings keyboard sends client process terminates user inputs empty string 
fault tolerance chat application behave fault tolerant 
client dies chat message broadcasted chat clients exception thrown chat server crashes port dead client exist anymore 
linking mechanism easily guarantee fault tolerance server 
case failure close port writing failed 
just add link connect case server process connect name link close modify instruction broadcast chat messages 
close 
chat server just sends close message port exist note change loop pass 
implementation port distributed haskell foundation built streams give short overview internals communication ports focusing implementation streams 
detailed description layout internal data structures ports 
communication ports uses di erent kinds techniques passing data case just want send message port located program simple concurrent haskell channel deliver message 
channel typed messages port receive 
hand contemplate communication network 
standard tcp ip system level functions connect socket remote host marshal message class serialize deliver writing le descriptor obtained socket 
necessary data host name tcp ip port number encoded port data structure 
remote hosts writing port obtained receiving message network 
separate program called external post oce running remote hosts wish er services registered port names translates symbolic names statements internal representation 
necessary program binds known tcp ip port contacted prior knowledge 
service ered similar mechanism employed remote procedure calls 
internally data arriving socket port transferred helper thread channel type string 
converted string equivalent haskell expression functions provided class serialize 
messages converted rejected bogus valid ones nally passed typed channel internal communication forming nal thread message queue 
structure port internal external communication summarized 
internal messages string streams threads convert typed streams inside process stream strings outside process stream strings typed channel thread string channel structure port internal external communication polling mechanism employed linking ports 
linked ports stored database 
process background polls registered ports xed schedule 
ports exist anymore exception thrown speci ed io action performed link 
course programmed hand programmer catch 
implementation links needs distributed haskell runtime system 
handled outside distributed haskell library 
streams streams provide powerful abstraction easy implement 
major change related port module need version safety belt checks threadid caller 
helper function retrieve items port list 
function modeled fashion module concurrent 
includes suspending new message arrives case port empty 
serialize port io serialize io port merging streams dicult 
di erent threads waiting messages stream forwarding encapsulated type common channel 
related gon extends haskell concurrent constraint programming special port concept internal external communication 
ports integrated io monad 
reacting multiple ports gon proposes fair merge port port port ports 
merged ports type 
restriction strong seen chat example type essential 
eden extension haskell concurrent parallel programming 
process concept added process xed number input output channels communication processes 
communication integrated io monad fair merge part eden processes behave nondeterministically 
gon merge restricted channels type 
furthermore eden process read write xed number channels 
connections processes changed dynamically 
eden developed parallel programming programs hierarchical structure distributed programming dicult implement complex protocols eden 
possible connect independently started processes eden 
curry functional logic programming language extends haskell needed narrowing residuation encapsulated search 
distributed programming curry adds named ports guarantee readers port executed curry program 
thought eliminate implementation problems multiple readers 
hand programmer send logical variables ports proposed easy answering mechanism 
logical variables channels multiple readers programmed 
results problems multiple readers avoided ports 
logical variables comfortable answer variables 
restriction formal semantics implementation 
communication curry gon constraint solved 
programmer learn new programming paradigm 
furthermore external communication integrated io monad 
internally concurrent processes communicate lazy streams 
result problems laziness strictness annotations added 
problem concurrent application easily distributed network processes transfered io monad 
yield problems scalability system 
glasgow distributed haskell approach integration glasgow parallel haskell concurrent haskell 
provides closed distributed systems communication processes concurrent haskell 
main idea distribution shared memory system 
communication processes strict 
programmer know data exchanged components network estimate net trac produced 
fault tolerance restricted error handling concurrent haskell 
computers network crashes system crashes 
greatest disadvantage approach restriction closed systems impossible implement distributed applications telephony peer peer applications 
want compare approach erlang 
rst advantage distributed haskell messages statically typed 
type messages sent port communication interface process reads port 
erlang interface exist 
furthermore type system provides safety program development 
example typos yield compile time error distributed haskell deadlock erlang 
advantage linking mechanism powerful linking erlang 
add arbitrary io actions links performed linked port dies 
erlang possible receive message process dies 
modi cation port approach introduces notion streams 
streams basically list messages received typed port 
concurrent distributed programming covered approach 
limitations imposed single reader semantics ports disappear explicit statement 
described extensions implemented glasgow haskell compiler libraries concurrent socket 
module haskell program compiled glasgow haskell compiler 
library sources sample applications www informatik rwth aachen de 
possible focus analyzing distributed programming lazy evaluation match 
external communication forces eager evaluation large parts program 
furthermore usually io actions require serial execution reducing advantage lazy evaluation 
send heap fragments remote hosts advantages lazy functional programming may limited computational contrast communication part programs 
hand higher order functions working streams provide abstraction tedious explicitely programming message exchange 

armstrong williams virding 
concurrent programming erlang 
prentice hall englewood cli nj 

ortega mall en pena mari 
eden paradise functional concurrent programming 
lncs 

manuel chakravarty guo martin 
distributed haskell gon internet 
sato toyama editors proceedings third fuji international symposium functional logic programming pages 
world scienti publishers 

glasgow haskell compiler 
www haskell org ghc 

hanus 
distributed programming multi paradigm declarative language 
proc 
international conference principles practice declarative programming ppdp 
springer lncs appear 

frank huch 
erlang style distributed haskell 
draft proceedings th international workshop implementation functional languages september th th 

frank huch ulrich 
distributed programming haskell ports 
lncs 

simon peyton jones haskell report 
technical report www haskell org 

simon peyton jones andrew gordon finne 
concurrent haskell 
conference record popl rd acm sigplan sigact symposium principles programming languages pages st petersburg beach florida january 

object management group 
common object request broker architecture corba 
www omg org 

trinder 
loidl 
design implementation glasgow distributed haskell 
lncs 

richard stevens 
unix network programming 
prentice hall englewood cli new jersey 

volker 
verteilte programmierung haskell 
rwth aachen germany 

philip trinder kevin hammond james mattson jr andrew partridge simon peyton jones 
gum portable implementation haskell 
proceedings programming language design implementation philadephia usa may 

