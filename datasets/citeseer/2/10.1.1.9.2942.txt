stat tool suite giovanni vigna steve eckmann reliable software group dept computer science university california santa barbara vigna eckmann cs ucsb edu richard kemmerer describes suite intrusion detection tools developed reliable software group ucsb 
tool suite state transition analysis technique stat computer penetrations specified sequences actions cause transitions security state system 
general approach extended tailored perform intrusion detection different domains environments 
intrusion detection systems developed framework approach resulting design uses core module embodies domain independent characteristics stat approach 
generic core extended defined way implement intrusion detection systems different domains environments 
approach supports reuse portability extendibility allows optimization critical functionalities 

evolution computer networks fostered deep change way computer systems structured information processed 
centralized approach characterized powerful expensive computing nodes accessible dumb terminals connected low bandwidth dedicated lines evolved decentralized pattern processing distributed small nodes possibly millions connected high speed networks 
evolution broadened focus computer security accordingly 
centralized authentication access control longer main focus security research solutions 
internet enterprise wide tcp ip networks shifted focus security protection communication untrusted networks remote authentication control access network services support mobile users protection dynamic download installation code coming untrusted sources 
world wide networked settings mainstream security solution represented firewalls domain level security 
approach networks divided smaller subnetworks control single authority 
security domains internal mechanisms policies authenticate authorize users kerberos 
domains protected access outer domains means firewalls network filters regulate access internal network outside 
domain level security mechanisms firewalls improved security networks attacks intrusions possible common 
inability prevent attacks demands complementary solutions 
consequence intrusion detection received increasing amount attention academic commercial government organizations 
intrusion detection systems analyze information activities performed computer system network looking evidence malicious behavior 
information may come form audit records produced operating system auditing facilities log messages produced different types sensors network devices form raw network traffic obtained eavesdropping network segment 
data sources intrusion detection systems different ways different approaches anomaly detection misuse detection 
anomaly detection systems models normal behavior computer system 
model may focus users applications network 
behavior profiles may built performing statistical analysis historical data rulebased approaches specify behavior patterns 
anomaly detection compares actual usage patterns established profiles identify abnormal patterns activity 
misuse detection systems take complementary ap proach 
detection tools equipped number attack descriptions 
descriptions signatures matched stream audit data looking evidence modeled attack occurring 
misuse anomaly detection advantages disadvantages 
misuse detection systems perform focused analysis audit data usually produce false positives 
time misuse detection systems detect attacks modeled 
anomaly detection systems advantage able detect previously unknown attacks 
advantage paid terms large number false positives difficulty training system respect dynamic environment 
state transition analysis technique stat conceived misuse detection method describe computer penetrations sequences actions attacker performs compromise security computer system 
stat approach mitigates disadvantages plain signature approaches abstracting details modeled attacks 
actions abstracted native form plain audit records network packets higher level representation similar actions system may different low level representations mapped single action type 
addition stat methodology supports modeling approach represents steps intrusion critical effectiveness attack 
abstracting away details particular attack possible detect previously unknown variations attack attacks exploit similar mechanisms 
stat approach successfully applied host network intrusion detection tool suite approach developed 
describes stat intrusion detection tool suite 
current tool suite developed leveraging extensible framework developing stat intrusion detection systems 
section presents initial experience stat intrusion detection 
section introduces new design framework toolset 
section describes framework developing new stat tool suite 
section draws outlines 

stat intrusion detection state transition analysis technique method describe computer penetrations attack scenarios 
attack scenarios represented sequence transitions characterize evolution security state system 
characterization attack scenarios allows intuitive graphic representation means state transition diagrams see example 
attack scenario states represent snapshots system security relevant properties resources 
description attack initial starting state compromised state 
states characterized means assertions predicates aspects security state system 
example attack scenario describing attempt violate security operating system assertions state properties file ownership user identification user authorization 
transitions states annotated signature actions represent key actions omitted execution attack scenario prevent attack completing successfully 
example attack scenario describing network port scanning attempt typical signature action include tcp segments test tcp ports host 
state transition analysis technique applied host intrusion detection tool called ustat developed 
ustat uses state transition representations basis rules interpret changes computer system state detect intrusions real time 
changes computer system state monitored leveraging auditing facilities provided security enhanced operating systems sun microsystems solaris equipped basic security module 
implementation ustat tool clearly demonstrated value stat approach ustat developed ad hoc way characteristics ustat prototype difficult modify extend match new environments windows nt 
original ustat tool interprets audit trail produced single operating system 
ustat design extended detect attacks involve multiple hosts sharing network file systems 
resulting tool called uses client server architecture collect audit records different sources hosts merge single audit trail manage synchronization correlation different trails perform state transition analysis resulting trail 
components distributed network perform monitoring network level event sources auditing facilities available monitored hosts 
natural evolution state transition analysis direct application networks 
netstat result evolution 
netstat tool aimed real time network intrusion detection 
netstat takes advantage peculiar characteristics intrusion detection analysis network traffic 
networks provide detailed information computer system activity provide information regardless installed operating systems auditing modules available hosts 
netstat tool proved stat approach extended new domains netstat prototype developed ad hoc building completely new tool fit new domain 
second half netstat ustat systems evaluated part mit lincoln laboratory line intrusion detection system evaluation air force research laboratory afrl real time evaluation 
case ustat netstat analyze bsm logs network traffic dumps weeks traffic looking attack signatures 
second case netstat ustat installed testbed network afrl 
efforts stat tools performed combined results scored highest level evaluation 
participating event gave strong positive feedback research performed far gave new insights stat approach 
particular running netstat ustat time evidenced number similarities way attack scenarios represented runtime architecture systems 
closer analysis mechanisms stat tools match attack scenarios stream events suggested stat toolset redesigned family systems 
resulting design core module embodies domain independent characteristics stat approach 
core module provides support representation domain independent parts attack scenarios implements domain independent mechanisms runtime match attack scenarios stream events 
core module useless intrusion detection performed particular domains hosts networks specific environments windows nt solaris 
new design provides defined way extend core obtain complete intrusion detection system tailored characteristics specific domain environment 
core approach supports reuse portability extendibility customization allows optimization critical functionalities 

stat core stat core architecture framework supporting development stat intrusion detection systems description attack scenarios 
framework relies elements language called represent attack scenarios states transitions 
language defines domain independent features attack scenarios 
language extended intrusion detection system developer express characteristics particular domain environment 
line architecture translation attack scenarios executable modules called scenario plugins 
architecture provides hooks extend customize translation process match peculiarities target environment 
runtime architecture creation intrusion detection monitors stat approach 
module stat core implements domain independent semantics scenario execution 
stat core allows external application load scenario plugins match event stream collected external source attack scenarios 
remainder section discusses elements detail 

language scenario representation stat framework provides language called specification attack scenarios 
provides constructs define domain independent entities attack scenarios extended intrusion detection system developer match particular domain environment 
specification description complete scenario translated executable representation loaded intrusion detection system run time 
execution specification generates runtime prototype contains data structures representing scenario definition global environment set instances organized parent children structure 
scenario instance represents attack progress 
details runtime execution scenario section 
primitives constructs describe scenario introduced section 
primarily text language stat development environment includes graphic editor allows direct visualization state transition diagram representing attack scenario 
graphical form states represented circles transitions arrows 
presents sample state transition diagram states transitions 
shows textual representation scenario 
scenario name may parameters may contain front matter constant variable declarations contains states transitions define steps attack 
scenario parameters specified list comma separated typed identifiers init create rhosts login read rhosts 
sample state transition diagram scenario 
may specify default values 
addition variable number parameters may specified ellipses 
variables scenario may global local 
global variables shared instances scenario attacks type 
local variables instantiated privately instance scenario 
words global variable updated instances scenario see update local variable updated instance update occurs affected 
scenario may annotations applicationspecific directives application specific analyzer component customize translation process scenario see section 
main components scenario states transitions 
state name assertion code block annotation 
name unique identifier state 
elements optional 
state assertion logical expression expression infix operator true value variable set denoted variable false 
state assertion tested entry state 
state assertion implicitly true specified 
state code block executed entering state 
code block compound statement containing declarations followed statements 
example code block state declares local variable username statements calling ustat extension procedure userid name built procedure stat log 
assertion code block access global environment set global variables local environment set variables local instance case code block variables declared compound statement 
state annotation set application specific directives analyzer translation process 
transition name type action assertion code block annotation 
type transition consuming unwinding 
different types arrows denote different types transitions solid arc single arrowhead denotes transition solid arc double arrowhead denotes consuming transition dashed arc denotes unwinding transition 
transition represent evolution state occurring attack prevent occurrences attacks spawn original state 
transition fires source destination attack states valid 
example attack steps creation link named suid shell script execution script created link second step invalidate previous state execution script link may occur 
contrast firing consuming transition source state particular attack occurrence invalid 
example action deletes file may invalidate source state 
file deleted twice original state invalid 
unwinding transitions represent form rollback describe events conditions may invalidate progress attack scenario require return earlier state 
example logout event may scenario involves associated user uninteresting scenario may brought previous state instance user login 
transition action essential element transition 
action specifies event type may cause firing associated transition name refer event 
action may simple composite 
simple action identifies unique event type unique name 
example transition create rhosts simple action type ustat write named composite action may conjunction disjunction actions 
addition actions may nested square bracket notation 
transition assertion code block annotation syntax semantics similar corresponding state elements 
main difference name space includes action name transition assertion code block annotation may access fields corresponding action 
language provides built concept timers 
aspects timers declaration timer starting declared timer declared timer timer action transition 
timer declaration specifies name timer scope local global 
global timers shared instances scenario local timers private instance 
timer started code block invocation built procedure ustat create rhosts non owner rlogin 
scenario ftp write int user int pid int inode initial state init transition create rhosts init ustat write owner inode inode state transition login ustat exec match name login user pid pid state transition read rhosts consuming ustat read pid pid inode inode state string username userid name user username stat log ftp write remote user gained local access username 
sample scenario 
internal representation graphic editor scenario parser analyzer customized scenario translator scenario plugin plugin configuration parameters text editor security officer information system 
stat offline process 
start timer timer name positive integer number seconds 
seconds start timer event type timer generated active transitions marked action timer fire 
starting timer running resets timer 

scenario translation process stat core includes components support preparation attack scenarios loaded intrusion detection system ids 
shows components interact user organization information systems security officer generate scenario plugins 
analyzer shaded indicate customized stat application netstat ustat different analyzers 
scenario editor provides gui user constructs scenarios graphical form 
editor produces output scenarios 
user may write scenario directly 
parser reads scenario transforms internal format analyzer translator 
stat tool uses parser common scenario specification language 
analyzer reads scenario common internal format produces possibly modified copy scenario may information contained 
modifications scenario analyzer applies application specific 
typical modification extract annotations parts scenario refer generate plugin configuration parameters 
translator reads scenario common internal format annotations produces code 
code produced translator compiled dynamically linked library files unix dll files windows nt linked runtime architecture needed 

runtime architecture intrusion detection applications share common high level architecture 
shows runtime architecture complete intrusion detection system arrows indicating dependencies components 
ids application composed audit stream provider preprocessor stat core number scenario plugins extension component 
audit stream provider component supplies raw event records 
example host ids windows nt environment audit record provider may module reads audit records operating system event logging facilities 
network ids audit stream provider network sniffer reads network packets broadcast subnetwork 
preprocessor component responsible filtering uninteresting audit records translating interesting audit records ids specific format encapsulating audit records stat events 
produced stat events sent stat core component processing 
stat core created customized appli scenario plugin scenario plugin scenario plugin audit stream provider preprocessor audit records 
stat events stat runtime core application specific customization module intrusion detection application reporting logging reaction environment outside 
runtime architecture stat intrusion detection system 
cation api 
stat core component connected number scenario plugin components 
scenario plugin component contains executable representation attack scenario 
scenario plugins types functions provided extension component 
types functions allow scenario plugin access application specific characteristics processed events may provide functions reacting attack 
example ustat scenario match name ustat specific predicate checks name object matches string 

scenario execution stat core main task scenario intrusion detection system match set attack scenarios event stream looking sequences events changes system state evidence malicious activity 
run time core ids loads number scenario plugins stat core 
scenario plugins parameterized attack scenario plugin loaded stat core different parameters 
example scenario describes attack www server loaded providing different web server ip addresses parameters 
plugin loaded core scenario prototype created 
scenario prototype data structure containing representation attack scenario parameters loading plugin 
precisely scenario prototype contains scenario representation terms states transitions functions invoked verify assertions execute code fragments manage local global environments 
representation scenario loaded core action types associated signature actions scenario transitions encapsulated event specs inserted event spec database global repository contains description events types may interest scenarios currently loaded core 
scenario prototypes static representations attack scenarios 
event processing scenario prototype instantiated scenario instances keep track particular occurrences attack 
scenario instance characterized current state set event subscriptions local global environment 
current state instance states scenario representation stored scenario prototype 
event subscription statement interest scenario instance certain type event 
event subscription specifies scenario instance interested event transition fired actual event matches transition assertion destination state assertion 
subscription particular event type stored corresponding event spec event spec database 
local environment scenario instance private collection variables bound particular values 
addition local environment scenario instances prototype share global environment stored scenario prototype 
note plugin loaded different parameters different prototypes created associated set scenario instances separate global environment 
scenario instance root instance created plugin loading time 
root instance scenario initial state 
instance acts ancestor new instances generated consequence event processing 
root instance terminate reason new root instance created automatically 
scenario plugins loaded core core ids reads events applicationspecific event stream hands events core actual event processing takes place 
consequence event processing new instances may created existing instances may evolve 
application events directly processed core core know applicationspecific characteristics event number types application event fields 
intrusion detection system encapsulates application specific events stat events 
stat event type timestamp application specific event data considered opaque data structure 
event may simple composite 
simple event single type code single opaque event 
composite event ordered list sets simple events 
creation composite events responsibility external application 
core provides set apis creation composition events 
stat core event passed core processing core determines set instances may interested event 
done matching event event specs core event spec database 
matching event spec associated event subscriptions considered 
subscription assertion referenced transition checked 
assertion verified assertion associated transition destination state checked 
destination state assertion verified tuple transition inserted set transitions fired 
separate sets depending type transition consuming unwinding 
enabled transitions collected transitions fired 
transition fired 
transition scenario instance fired new scenario instance created 
original instance parent new instance turn original instance children 
child instance copy parent local environment copy parent timers 
state child instance set destination state transition fired 
destination state code fragment executed context child instance 
destination state final state child instance removed 
outgoing transition subscription associated action type inserted appropriate event spec 
transitions fired consuming transitions fired 
common case instance state changed destination state previous subscriptions canceled new subscriptions event types associated transitions outgoing new state inserted event spec database 
destination state code executed 
multiple enabled consuming transitions fired associated scenario instance transition firing clone scenario instance created 
cloned instance differs child instance clone instance parent original instance 
creation clone execution process follows steps previous case 
special case represented scenario instance state destination unwinding transition state 
case instance descendants possible time descendants may want unwind ancestor instance current state 
instance state changes firing consuming transition system reach inconsistent state 
avoid clone instance created original instance put inactive status 
inactive status current subscriptions instance removed replaced new subscriptions 
instance restored active status children unwinds instance specified state 
consuming transitions fired core proceeds firing unwinding transitions 
firing unwinding transition respect scenario instance effect undoing steps brought scenario instance current state 
means scenario instances may affected unwinding procedure 
precisely consider unwinding transition state state remove instances created series events brought unwinding instance state state core achieved traversing back parent child chain instance state 
instance subtree rooted visited instance removed 

experience core stat core framework generate new tool suite stat approach 
tool suite includes ustat netstat 
stat tool suite darpa intrusion detection evaluation effort 
tool suite extension module containing application specific event types predicates developed 
addition application specific preprocessor developed translate native audit records event representation 
tool analyzer designed translate scenarios executable plugins 
implementation currently incomplete translation process performed manually 
ustat core implementation original unix host ids 
ustat uses sun microsystems basic security module bsm source audit data 
ustat preprocessor filters incoming audit records translates selected audit records ustat events 
ustat events defined ustat specific extension module 
bsm generates different audit record types 
ustat uses audit record types translated ustat event types 
ustat composed number characterize security aspects critical files applications host filesystem 
example restricted write directories fileset specifies list directories non root users changes bin usr lib 
fileset associated scenarios define meaning fileset 
example associated restricted write directories fileset scenario raises alarm create write delete action non root user succeeds listed directories 
ustat analyzer various changes scenarios implement semantics part core execution model 
example ustat scenario instance depends existence process process exits instance aborted 
ustat analyzer implements adding unwinding transitions original scenario needed 
new tool performs host intrusion detection windows nt environment 
uses input event logs produced windows nt transforms selection nt events events 
analyzer similar ustat 
netstat network intrusion detection system 
core approach develop netstat probe component 
netstat probe uses inputs network traffic network segment may offline reading tcpdump file 
netstat extension stat core includes event types predicates functions 
netstat preprocessor responsible filtering relevant network packets parsing abstraction network events 
netstat preprocessor tasks include reassembling fragmented ip datagrams reassembling tcp streams parsing dns rpc events maintenance relevant information state network active connections 
architecture line development scenario representation follows described 
component repository stores manages security relevant information network network topology network services deployed 
analyzer uses annotations scenarios determine probes placed protected network probes configured 

core framework development intrusion detection systems provides number advantages 
framework supports efficient development new idss main mechanisms semantics approach coded domain independent model 
ids developer implement domain environment specific characteristics new ids 
addition extensions core module developed defined process 
core module extensions developed gnu build system allows improved portability 
particular possible port stat core module solaris sunos linux windows nt modifications 
core module critical component tool suite 
core carefully coded improved performance 
experience ongoing darpa ids evaluation showed core module brought increase order magnitude speed tools stat suite 
focused translation process continuous improvement features language 
acknowledgments research supported defense advanced research projects agency darpa rome laboratory air force materiel command usaf agreement number 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright annotation thereon 
views contained authors interpreted necessarily representing official policies endorsements expressed implied defense advanced research projects agency darpa rome laboratory government 
chapman 
building internet firewalls 
reilly associates 
cheswick bellovin 
firewalls internet security repelling hacker 
addison wesley 
champion witten miller 
addendum testing evaluating computer intrusion detection systems 
cacm september 
champion witten miller 
testing evaluating computer intrusion detection systems 
cacm july 
ilgun 
ustat real time intrusion detection system unix 
master thesis computer science department university california santa barbara july 
ilgun 
ustat real time intrusion detection system unix 
proceedings ieee symposium research security privacy oakland ca may 
ilgun kemmerer porras 
state transition analysis rule intrusion detection system 
ieee transactions software engineering march 
javitz valdes 
nides statistical component description justification 
technical report sri international menlo park ca march 
kemmerer 
model real time network intrusion detection system 
technical report department computer science uc santa barbara november 
ko levitt 
execution monitoring security critical programs distributed systems specification approach 
proceedings ieee symposium security privacy pages 
kohl neuman 
kerberos authentication service 
rfc september 
lab 
darpa intrusion detection evaluation 
ideval ll mit edu index html 
porras 
stat state transition analysis tool intrusion detection 
master thesis computer science department university california santa barbara june 
sun microsystems installing administering basic security module 
garcia ave mountain view ca december 
vigna kemmerer 
netstat network intrusion detection approach 
proceedings th annual computer security application conference scottsdale arizona december 
vigna kemmerer 
netstat network intrusion detection system 
journal computer security 

