peer peer systems prefix search awerbuch department computer science johns hopkins university charles street baltimore md usa cs jhu edu christian scheideler department computer science johns hopkins university charles street baltimore md usa scheideler cs jhu edu presents general methodology building messagepassing peer peer systems capable performing prefix search arbitrary user defined names 
methodology allows achieve load distribution high fault tolerance low congestion concurrent query execution 
known peer peer system prefix search properties 
essence methodology plug play paradigm designing peer peer system modular composition arbitrary concurrent data structures 

distributed searchable data structures consider data items names identifiers name universe names 
standard uni processor searchable data structure accessed single handle entry point tree root front queue 
supports standard operations insert adds data item delete key removes data item name key search key returns closest prefix key argmin name name key respect lexicographical ordering 
fault tolerant data structures concurrent data structures useful network processors may multiple handles data structure 
order implement searchable data structure distributed dynamic environment need operations reorganization data placement new participants sites enter system old participants leave system 
addition supported darpa cost benefit approach fault tolerant communication darpa high performance robust secure group communication dynamic coalitions 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
copyright acm xxxxx xx xx xx 
supporting insert delete search distributed searchable data structure support join contacts site integrate new site leave removes site precise lookup required distributed hash table approach chord pastry tapestry viceroy construct maintain distributed data structure :10.1.1.111.1818:10.1.1.140.3129:10.1.1.105.3673
approaches connected pointer graph overlay network maintained dynamically changing sites hashing map data sites load balanced manner 
impossibility result formally shown appears difficult accomplish prefix search 
fact task constructing distributed searchable data structures considered open problem 
solve problem new plug play paradigm designing distributed data structure show combine existing non searchable imbalanced concurrent data structures see section construct searchable balanced distributed data structure 
describe general principle paradigm section give implementation details section 
section introduce parameters measuring fault tolerance ability route requests low congestion order quantitatively state properties decomposition see theorem section 
section illustrate methodology existing un searchable imbalanced concurrent data structures black boxes 
quantitative bounds resulting searchable balanced distributed data structures corollary 
simplify presentation assume sites reliably sites leave gracefully site wants leave system waits leave complete example closing internet connection 
certainly distributed data structure implementation reliably distributed setting fault exception handling major issue considering unreadable disguised main new ideas 
previous essence paradigm construct distributed data structure combine concurrent data structures transparent consistent way 
section give overview previous concurrent data structures consistency 
concurrent data structures difference sequential concurrent data structure data item resp 
object holding concurrent data structure handle data structure operations insert delete search executed concurrently 
concurrent data structures heavily investigated area shared memory machines prams slightly weaker form require constructions data item handle 
reason necessary approaches concentrate parallelizing way data structure accessed parallelizing structure making structure symmetric 
distributed environments symmetric concurrent data structures greater better fault tolerance properties 
symmetric concurrent data structures form essence construction 
problem managing data structure similar maintaining searchable overlay network dynamically changing reliable sites names 
sense elegant randomized implementations concurrent searchable data structures essentially independently li plaxton aspnes shah harvey :10.1.1.118.8846
note hash methods allow precise lookup :10.1.1.111.1818:10.1.1.140.3129:10.1.1.105.3673
resulting data structures named skip graphs skip nets 
constitute simple elegant extension randomized skip list data structure proposed pugh concurrent environment 
focus proving upper bounds degree path length expansion constructions 
reason concurrent searchable data structure problem easier distributed variant problem leaves unsolved dynamically embed data structure top site structure 
contribution simple paradigm accomplishing embedding making results applicable distributed load balanced message passing peerto peer networks 
describe approach 
existing concurrent data structures essentially solutions concurrent searchable data structures doubly linked list cycle data sorted increasing order user defined names 
data item pointer successor succ predecessor pred 
ideal implementation list data items take steps go data item 
concurrent execution search operations processes cause high congestion data item may traversed processes 
ways adding shortcut pointers alleviate problem 
perfect chordal graphs 
consider doubly linked cycle data item keeps pointers data ranking cycle exactly larger point rank rank mod rank rth smallest name 
pointer graph resulting belongs class chordal graphs close hypercube 
expansion properties hypercube shown data structure data items concurrent search operations constant contention endpoints create logarithmic amount traffic single data item 
maintaining perfect pointers expensive single insert delete operation requires update pointers 
skip list approaches 
consider sequential skip list data structure initially suggested extended parallel environments 
basis data structures doubly linked sorted list data items 
imagine pad name item bit significant position pads equal 
decompose sorted sublists contains sorted data data padded contains sorted odd data data padded 
continue process recursively generating smaller sub lists higher level assumption sub lists equal size recursion continues logarithmic number levels 
level recursion sublist list data padding sequence 
approaches padding possible 
alternate bit padding positioned nodes choose odd positioned nodes choose 
contain nodes contain odd positioned nodes 
case point rank rank get situation similar perfect chordal graphs high cost insertions deletions 
random bit padding numbers chosen nodes random expectation rank point rank get approximation hypercube 
advantage random choices distributed implementation insert delete operation easy 
example deleting data item predecessor successor sublist involves simply changing resp 
pointer resp 

done logarithmic number levels logarithmic cost 
essentially algorithm 
consistent hashing assignment files sites consider previous consistent memory assignment related approach 
virtually distributed data structures far consistent hashing :10.1.1.111.1818:10.1.1.140.3129:10.1.1.105.3673
consistent hashing introduced karger means manage caching web pages distributed environment 
works follows set possible web caches nodes set possible data items 
consider hash functions map node data item real number 
consistency condition maintained times data item currently system stored node minimum 
random pseudo random turns keeping placement consistent cheap random functions ensure time expected number data items stored node nodes 
current number nodes system expected amount data replacements including excluding node roughly fraction total amount data system 
problem pseudo random random hash functions data structure sense hashing name space making prefix search impossible precise key lookup operations supported 
hand replacing hashing function identity function enable may create high load imbalance 
distributed data structure file nodes site nodes form separate topologies representing directed cycles 
get best worlds functionality prefix search capability load balancing property solving open problem :10.1.1.111.1818:10.1.1.140.3129:10.1.1.105.3673

plug play paradigm section describe high level combine concurrent data structures transparent consistent way construct efficient distributed searchable data structure implementation details section 
files denote current set data items called files distinguish data stored different data structures sites denote current set sites 
data structures organizing sites data structure data structures sites files see 
precisely construction needs data structures concurrent searchable data structure files 
may suggested 
concurrent data structure sites supporting just lookup operations 
may suggested 
sure data structures accessible site site exactly data item representing data item called auxiliary handle representing apart items site may data items representing files inserted system 
data items may potentially handle corresponding structure 
ensure plug play property able operate independently changes files affect changes sites affect insofar auxiliary handles inserted deleted 
explain achieve 
consistent naming different name space data structures 
uses name space names representing set possible user defined names files space auxiliary handles 
name ref names ips name ref name ref names data items middle box represents auxiliary handles uses name space 
uses name space ips consisting possible ip addresses 
name spaces glued consistent way assigning data item name name ref specifies location 
rules see data items name space data item stored site minimum name name ref 
data items name space ips data item equal ip address site 
suppose files choose random hash function files sites choose names random hash function ips 
exactly situation consistent hashing approach 
consistent naming approach achieves independence apart auxiliary handles change files affect name site change sites affect name file place 
apart gluing name spaces consistent way including data items nice effect order item establish pointer item just store copy neighbor list 
doing item determine ip address neighbor forward request directly 
item forward request neighbor selecting ref asking forward request site responsible ref 
precisely preserve independence ask behalf forward request corresponding site 
give details works 
certainly easier forward requests ref item stored ip address site number 
devastating effect 
destroys consistency reason site leaves objects affected includes neighbors objects move informed 
change sites create tremendous amount update number files site large neighbors may spread large number sites updated 
note optimization purposes may cache storing relationships files ip addresses sites 
site site nodes communicate local node 
nodes may pass messages nodes deliver right recipient 
ensure modularity direct communication node node 
supporting operations supports communication items items essentially providing transport layer 
see see communication lines data structures see allow items communicate 
time item wants send message neighbor take care 
ensures approach modular implementation concurrent data structure fulfilling interface requirements specified section plugged adaptations 
operations suppose site wants join done inserting item representing auxiliary handle representing give handle data structures 
files responsible moved insertions executed join operation handled corresponding insert operations site wants leave moves files site responsible deletes auxiliary handle deletes data item deletions handled corresponding delete operations file inserted site initiating request contacts site responsible site include set files insert calling corresponding insert operation 
file deleted site initiating request contacts site responsible site delete calling corresponding delete operation remove set files 
search request name key issued site picks handle due auxiliary handle calls corresponding search operation remarks paradigm section note nice features plug play paradigm may interesting research peer peer systems 
due explicitly storing need hash functions data items sites achieve 
way selecting items names items 
contrast previous mapping data items sites principle supported 
opens insert insert search delete search join search delete insert leave delete operations connections operations interesting applications 
example freedom choosing arbitrary mapping may handle non uniform capacities store popular data items sites highest bandwidth pull data items sites largest number search requests items 
plug play approach may interesting optimization problems area peer peer networks 

implementation object oriented programming principles give detailed description implement distributed searchable data structure 
illustration implementation works see 
lowest form object data object 
data object consists fields name field name field ref 
name field searching purposes field specifies location object 
format location may depend concurrent data structure object belongs 
belongs ref ip address belongs ref 
class node class node defines variables methods concurrent data structure node see 
constructor node name ref generates object containing data object name name name ref ref 
required concurrent data structure node provides standard operations insert delete search 
node integrated insert integrates node containing data object setting neighbor sets neighboring nodes suitable way 
example order establish edge node adds adds 
operation delete key exclude node holding data object name key setting modifying neighbor sets remaining nodes 
search key returns data object name closest prefix key 
enable nodes communicate need functions read write 
write ref msg sends message msg node identifier ref output stream read receives incoming messages input stream 
message format ref call ref specifies final recipient call specifies command recipient supposed execute parameter list necessary execute com node wants forward message node path length represented dotted arcs 
node intercepts message read initiates search request ref see 
answer request returned see forward message see 
message handled node way previously mand 
kind messages interested remote procedure calls 
class node class node defines variables methods distributed data structure node see figures 
constructor node name ref generates node mysite name name mysite ref ref 
ref represents example ip address allow communication nodes 
constructor initializes set objects representing nodes file structure 
required distributed data structure provides standard operations join leave insert delete search 
methods node new node wants join contacting calls join ref ip address identifying join send message asking execute mysite 
searches closest successor minimum name name name 
inserts integrating node moves nodes stored node owning stored get back consistent data placement 
inserts auxiliary handle name equal mysite name node wants leave leave removes auxiliary handle moves nodes node owning successor mysite removes node mysite node executing insert searches node closest name ref initiating search operation asks node owning perform insertion checks data object name name 
pick handle include new node holding include calling insert 
node initiating delete key checks search operation data item name key system 
determines search operation node responsible key asks delete object name key 
deletes data object name key mysite ref name name ref name cher mysite name ref name ref name ref ref mysite ref name name ref name cher mysite name ref name ref mysite name ref name ref name ref ref mysite ref name name ref name cher mysite name ref name ref mysite name ref name ref name ref ref mysite ref name name ref name cher mysite name ref name ref name abba mysite name ref name ref name ref ref ref suppose simply keep data items directed cycle sorted names 
example shows happens case node joins system see data item abba gets inserted see 
calling delete key handle removes node holding data item name key 
execute search key node fetches handle executes search key 
example code introducing new site new file 

performance measures introduce measures help determine quality plug play approach 
sequential data structures view sequential data structure directed graph gu nodes represent items stored data structure directed edges represent pointers 
fault tolerance gu measures lack sensitivity faults ratio number faults number elements disconnected faults 
captured expansion graph 
definition 
graph subset expansion defined set nodes edge expansion defined min data structure integer consider family gn names worst case pointer structures formed data structure possible sets names names user defined names names names represents worst case pointer graph possible sequences insertion deletion operations set names stored names 
distinguish metrics worst case average case gn order evaluate average case average uniform distribution 
worst case fault tolerance average case fault tolerance defined min gn gn gn pointed traditional pointer graphs trees linked lists fault sensitive sense deleting corrupting single memory location root tree pointers may cause locations unreachable 
ultimate goal embedding data structures dynamic distributed systems fault tolerant manner limit attention data structures underlying pointer graph representation searchable fault tolerant ruling trees linked lists low expansion properties 
fault tolerant sequential data structures investigated 
interested fault tolerant concurrent data structures 
class data name name data item ref location data item public data name ref constructor setting name ref class node object type data set objects type data neighbors read reads message input stream write ref msg writes msg dest 
ref output stream public name ref constructor insert inserts object delete key removes object name key search key returns data object closest prefix key class node mysite object type node handle set objects type node handles includes site represented inserts site responsible storing key deletes key site responsible key getfile key returns pointer node inserts node moves nodes node read reads message input stream write ref msg writes msg dest 
ref output stream public node name ref constructor join ref contacts site address ref join leave leaves insert inserts file delete key removes file name key search key returns file name closest prefix key classes key name type names type data type node 
concurrent data structures additional issue case insert delete search requests may traversing data structure concurrently need sure nodal congestion slowing process 
order measure introduce 
consider concurrent data structure consisting pointer structure probabilistic deterministic implementation search 
random search problem pointer structure routing problem node source request request chooses destination independently random 
looking random destinations useful peer peer systems pseudo randomly distribute data sites includes distributed hash table approaches 
definition 
random search problem pointer structure expected congestion expected maximum number paths sharing node dilation length longest path applying search requests max 
claim gives important relationship expansion 
claim 
graph 
proof 
suppose set 
consider search problem definition 
easy see expected number requests leave enter equal 
expected congestion created nodes due requests leaving entering 
hand follows definition expected maximum congestion 
possible achieve 
consider family worst case pointer structures gn names formed data structure possible sets names names user defined names size worst case average case defined max gn gn gn distributed data structures distributed system need create data structure embed set sites 
take account suggest fault tolerance measure distributed data structures 
definition 
consider instance distributed data structure set files files set sites sites search operation search files 
set files files set sites sites say blocks denoted search name operation executed node name ref prepare handle mysite new name ref prepare auxiliary handle new name name join ref write ref call mysite mysite search name integrate site node mysite insert write ref call integrate auxiliary file node ref name getfile name insert ref name write ref call leave remove auxiliary file node getfile mysite name delete mysite name move file nodes predecessor mysite mysite search mysite name remove site node mysite delete mysite name getfile key name key return return random insert determine site responsible mysite search ref write ref call insert getfile name name name new node name ref insert delete key key system 
search key name key determine site responsible mysite search ref write ref call key key remove file object name key getfile key delete key name key search key getfile key return search key methods represents node 
site sites passes site denote fault tolerance resulting data structure min sites files expected value mappings files sites 
intuitively shows percentage sites need block access percentage files 
define imbalance distributed data structure 
definition 
mapping files sites load number files site imbalance distributed data structure maximum sets files files sets sites sites files sites max sites files sites expected value mappings files sites 
definition 
define instance maximum dilation expected congestion caused sending search requests site random files 
consider family structures gn names ips formed distributed data structure possible instances names file names ips ip addresses sites names ips define worst case fault tolerance min gn gn gn max gn gn gn definitions follows 
composition theorem write ref ref call send ref call output stream ref read receiving message ref call ref check ref send msg site responsible ref mysite search ref write ref ref call ref ips ref ips node write ref ref call remote procedure call node case call call call call call call write read algorithm section state main technical result 
consider distributed data structure obtained file structure site structure framework sections 
denote theorem composition theorem 
files sites files random sites random names worst case log proof 
proof follows fact maximum range site responsible log high probability 
proceed proof 
consider problem routing random search problem node origin request source destination pair probability files chosen 
total number nodes nf files files auxiliary handles pair probability nf chosen 
follows definition routing requests creates expected congestion dilation path length path collection chosen congestion dilation know continue need lemmata 
recall matching graph set edges node adjacent edge 
lemma 
broken matchings size sites 
proof 
matching bound follows simple coloring argument 
edge shares node expected number create new site ref ip address site val ref hash value ip address new node val ref join ref ip address site join ref insert file name val name hash value name new data name val insert leave leave example code demonstrating join insert file leave suitable hash functions 
notice values val arbitrary numbers necessary fixed functions consistent searchable 
edges expected number colors suffice color edges edges color share node 
simply greedy coloring algorithm 
sum path lengths sites follows matchings broken additional matchings obtain matchings maximum size sites 
lemma 
matching size sites routed dilation expected congestion proof 
consistent naming approach definition imply probability file mapped site sites site independently files 
consider routing matchings edge mapped independently edges sites viewing probabilities mapping edges site pairs fractional flow values site pair fractional flow definition know fractional flow problems flow site pair solved congestion dilation routing fractional flow problem creates congestion routing creates expected congestion dilation obviously bounded lemma follows 
combining lemmata finishes proof prove 
consider instance fixed imbalance 
set sites removed set sites inaccessible majority furthermore set sites reach majority subset files sites denote relative fraction files sites ratio respectively 
fault tolerance set files stored maximal set files inaccessible majority set files accessible majority note sets disjoint decompose maximal subset stored sites argument fraction files consider file stored site definition added increased maximal 
remaining possibility consider file neighbor stored clearly contradiction 
follows fraction neighbors set size summing equal fact follows equal compute bound expected random values files sites matches bound theorem 

choosing components show composition methodology sections 
issue proper selections distributed data structure final peer peer system concurrent data structures section 
goal simply need apply framework section results theorem calculating fault tolerance composed system simple substitution result theorem 
exemplify plug play approach theorem choosing chord site structure skip graph file structure structures chord get better bounds parameters composed scheme 
purpose clarity completeness restrict published methods chord skip graph 
claim 
site structure chord routing strategy satisfies ch log ch log 
claim 
file structure skip graph satisfies sk log conjectured sk log shown 
applying theorem compose distributed data structure abbreviated consisting skip graph files chord sites 
corollary 
load balanced prefix search capable peer peer system characteristics log log log 
aspnes shah 
skip graphs 
soda 
aumann bender 
fault tolerant data structures 
focs pages 
awerbuch scheideler 
chord congestion free fault tolerant concurrent data structure 
unpublished manuscript 
see www cs jhu edu scheideler 
harren hellerstein huebsch loo shenker stoica 
complex queries dht peer peer networks 
iptps 
harvey jones saroiu theimer wolman :10.1.1.118.8846
skipnet scalable overlay network practical locality properties 
usits 
karger lehman leighton levine lewin panigrahy 
consistent hashing random trees distributed caching protocols relieving hot spots world wide web 
stoc pages 
li plaxton 
name resolution peer peer networks 
pages 
malkhi naor 
viceroy scalable dynamic emulation butterfly 
podc 
naor wieder 
novel architectures applications continuous discrete approach 
spaa 
pugh 
skip lists probabilistic alternative balanced trees 
wads pages 
ratnasamy francis handley karp shenker 
scalable content addressable network 
sigcomm 
rowstron druschel 
pastry scalable distributed object location routing large scale peer peer systems 
middleware 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
sigcomm 
vishkin paul 
parallel dictionaries trees 
icalp pages 
zhao kubiatowicz joseph 
tapestry infrastructure fault tolerant wide area location routing 
ucb technical report ucb csd 
