institut ur informationssysteme 
systeme technische universit wien wien austria tel fax sek kr tuwien ac www kr tuwien ac institut ur informationssysteme abteilung systeme monitoring agents declarative planning jurgen dix thomas eiter michael fink axel zhang infsys research report november infsys research report infsys research report november monitoring agents declarative planning jurgen dix thomas eiter michael fink axel zhang 
consider problem particular description multi agent system mas implemented properly 
assume possibly incomplete information aim refuting system implemented properly 
approach agent collaboration described action theory 
action sequences reaching collaboration goal computed planner compliance actual mas behaviour allows detect possible collaboration failures 
approach fruitfully applied aid offline testing mas implementation online monitoring 
keywords knowledge representation multi agent systems declarative planning department computer science university manchester oxford road manchester united kingdom 
mail dix cs man ac uk institut fur informationssysteme technische universitat wien wien austria 
email eiter kr tuwien ac institut fur informationssysteme technische universitat wien wien austria 
email michael kr tuwien ac institut fur informatik universitat innsbruck innsbruck austria 
mail axel uibk ac department computer science university manchester oxford road manchester united kingdom 
mail cs man ac uk supported fwf austrian science funds projects partially funded information society technologies programme european commission emerging technologies ist wasp project 
preliminary version appeared proc 
th annual german conference artificial intelligence ki lncs pages springer 
copyright authors contents message flow multi agent system basic framework 
post office 
modelling agent behaviour declarative planning modelling intended behaviour mas 
action language 
agent monitoring properties implementation related monitoring single agent settings 
monitoring multi agent coordination 
infsys rr multi agent systems recognised promising paradigm distributed problem solving 
numerous multi agent platforms frameworks proposed allow program agents languages ranging imperative object oriented logic ones 
major problem agent developers face platforms verify suite implemented agents collaborate reach certain goal supply chain management 
tools automatic verification rare 
common practice geared extensive agent testing employing tracing simulation tools available monitoring approach aids automatically detecting agents collaborate intended 
spirit popper principle falsification aims refuting possibly incomplete information hand agent system works properly proving correctness 
approach agent collaboration described level single steps runs system examined see agents behave reasonable compatible sequence steps reaching goal 
internal structure agents unknown may get hold messages exchanged 
message protocol allows draw correctness agent collaboration 
monitoring approach fact involves steps intended collaborative behaviour agents modelled planning problem 
precisely knowledge agent actions specifically messaging effects formalised action theory reasoned automatically construct plans sequences actions reach goal 
collaborative goal set intended plans plans reaching generated planner 
observed agent behaviour message actions message log compared plans plans 
case incompatibility detected error flagged developer resp 
user pinpointing action causing failure steps taken 
steps done special monitoring agent added agent system providing support testing operational phase system 
benefits approach allows deal collaboration behaviour regardless implementation language single agents 
depending planner step different kinds plans optimal conformant 
considered reflecting different agent attitudes collaboration objectives 
changes agent messaging system designer may transparently incorporated action theory need adjust monitoring process 
known results impossible general simple cases details agents heterogenous environment missing 
infsys rr furthermore adds formal system specification may reasoned contexts 
product method may automatic protocol generation determine messages needed order simple collaboration 
detail approach illustrate example derived implemented agent system 
section describes basic agent framework build presents simplified version multi agent system postal services domain 
section describe model intended behaviour multi agent system planning problem instantiate example system action language 
approach agent monitoring discussed section fundamental properties investigated section 
brief discussion implementation section review related section conclude section outlook research 
message flow multi agent system multi agent system mas set autonomous agents collaborating reach certain goal 
aim monitor aspects behaviour agents order detect inconsistencies help debugging system 
opposed verification monitoring mas require complete specification behaviour particular agents 
adopt general practice realistic view access entire internal state single autonomous agent able observe communication agents system 
means communication capabilities agent potentially control agent 
aim draw state multi agent system monitoring message protocol 
basic framework consider multi agent systems consisting finite set fa collaborating agents agents may perform number different internal actions assume action externally observable action called send msg allows agent send message agent system 
send msg action timestamp recorded file containing history messages sent 
definitions assume sophisticated messaging framework apply mas 
framework bound particular mas 
definition message log file message quadruple hs identifiers sending receiving agents respectively finite set message commands list constants representing message data 
message log file ordered sequence log messages timestamps set constitutes set message performatives specifying intended meaning message 
words type message speech act theory illocutionary force utterance 
commands may range ask tell primitives application specific commands fixed system specification 
infsys rr event agent management db event db manager statistic db package db package agent notification agent event dispatcher agent agent zip post office system 
agent send kind message message repertoire particular agents message recipients allowing simplified formats 
repertoires pairwise disjoint message type unique recipient hc place hs assume fixed bound time action happen mas timeout action may depend previous actions allows see log mas stuck idle 
post office consider example mas called post office postal services 
goal improve postal product areas mail tracking customer notifications advanced quality control 
scenario running example example scenario pat drops package friend sue post office 
evening sue gets phone call package sent 
day sue decides pick package post office way 
unfortunately clerk tell package truck way home 
design mas depicted 
event dispatcher agent disp communicates system relevant external events event management agent em maintains event database 
information packages stored package database manipulated package agent pa 
notification agent notify notifies customers package status expected delivery time maintains statistics database 
zip agent zip informs responsible managers stored manager database zip codes served 
example simple keep things simple illustrative restrict mas package agent pa event management agent em event dispatcher agent disp em 
messages concerning agent notify discussed extended version example paragraph 
event dispatcher informs event manager agent drop package identified unique identifier arrival distribution center loading truck successful delivery recipient shows distribution center pick package disp infsys rr truck delivery 
event manager agent instructs package agent add package package database drop update delivery time delivery customer pickup cem 
package agent receives messages pa fg 
modelling agent behaviour declarative planning discuss formalise intended collaborative agent behaviour action theory planning encodes legal message flow 
actions correspond messages fluents represent assumptions current state world 
suitable encodings planning formalisms strips pddl htn planners model simple agent environments 
fact htn planning incorporated mas formulated action theories logic programming 
powerful language suitable modelling control knowledge plans agents golog 
due high expressive power loop conditionals automated plan generation limited formalism 
subsection give generic formulation approach independent particular planning mechanism 
subsection instantiate high level description action language 
approach rely chosen declarative nature capabilities deal incomplete knowledge nondeterminism 
modelling intended behaviour mas approach formalise intended collaborative behaviour mas consisting agents fa planning problem comprises steps step actions act 
declare corresponding action message hs domain act see def 

message repertoires pairwise disjoint message type unique recipient short 
actions effects states agents involved change properties hold 
step fluents fl 
define properties fluents world describe action effects 
distinguish sets internal fluents particular agent external fluents ext cover properties related specific agents 
fluents closely related message performatives agents 
step theory goal 
fluents actions state various axioms collaborative behaviour agents planning theory axioms describe various actions change state assumptions executable 
state ultimate goal running scenario deliver package suitable chosen planning formalism 
planning problem fl gi fl fl fl ext solutions set plans 
note precise formulation notions depends underlying planning formalism 
example htn planning specify operators methods effects closely related act fl domain description task list corresponds refer full discussion 
internal fluents especially describe private values inaccessible external observer 
infsys rr generic formulation suitable planning frameworks 
shall consider planning level frameworks section 
remainder section turn particular planning framework built language action language section instantiate planning problem described problem formulated action language giving detailed review language planning framework describe space reasons key features refer details 
language stands knowledge member family logic action languages area knowledge representation reasoning aim provide flexible declarative formalism reasoning actions effects planning systems built 
prominent languages family languages 
similar spirit closer classical logic includes respective features default negation strong negation 
nutshell offers distinguishing features handling incomplete knowledge fluent state opposite may known 
nondeterministic effects actions may multiple possible outcomes 
optimistic secure conformant planning construction credulous plan sceptical plan works cases 
parallel actions action may executed simultaneously 
operational prototype planner dlv built frontend top dlv system available www dbai tuwien ac proj dlv 
action domain discourse defined static background knowledge bk specifies finite set static facts non monotonic logic program function free order language dynamic action description ad 
actions fluents defined declarations form requires bk bk list parameters typed predicates bk bk defined bk addition specify action execution effects allows state axioms form caused total inertial executable fluent literal action set possibly default negated fluent literals set possibly default negated actions fluent literals means fluent caused holds 
simulates nondeterministic effects meaning fluent true false holds 
models inertia fluent macro infsys rr caused default negation strong negation 
furthermore express circumstances action executable 
planning problem may formalized general schema section tuple fl gi act defines actions fl fluents comprises bk axioms sort introduced goal set ground fluent literals 
semantics defined transitions hs states states simultaneous execution actions state consistent set ground fluent literals 
roughly action description yields non monotonic logic program computes possible successor states models 
trajectory initial state comply integrity constraints planning theory sequence transitions hs ng starting initial state optimistic plan goal hi resp 
projection ha trajectory holds resp 
example simple cont example actions corresponding possible messages fluents defined dlv notation actions dropoff requires pkg requires pkg requires pkg truck requires pkg delivery requires pkg pickup requires pkg requires pkg act fluents loc requires pkg loc loc delivered requires pkg requires pkg added requires pkg requires pkg fl external fluents describe current location package successfully delivered recipient home respectively 
fluents internal fluents state agent pa package added package database resp 
delivery time set properly 
possible package generic locations background knowledge represented set facts bk loc drop loc dist loc truck specify axioms dlv notation follows initially inertial loc inertial delivered inertial inertial added note states total fluent true false state 
states transitions occurring trajectories called legal order distinguish transitions meaningless executions come play plans 
just omit distinction 
infsys rr executable dropoff added caused drop dropoff dropoff drop executable drop added caused added executable added drop caused dist caused drop executable truck dist delivered caused truck truck caused dist truck executable delivery truck delivered caused delivered delivery executable dtime delivered caused executable pickup dist delivered executable pickup truck delivered caused delivered dist pickup total pickup theory self explanatory 
recipient home initially 
keyword specifies concurrent actions disallowed 
important aspect modelled final total statement 
expresses uncertainty pickup attempt distribution center recipient back home particular time truck arrives deliver package way 
goal 
optimistic plans reach truck pickup delivery truck delivery pickup recipient shows distribution center package loaded truck truck way 
package successfully delivered recipient comes pick picks package loaded truck 
running scenario message history log see plan infeasible package handed sue distribution center 
remains successful task completion 
agent monitoring aim adding monitoring agent monitor aid debugging mas 
distinguish principal types errors design errors implementation coding errors 
infsys rr type means model system wrong mas behaves correctly model designer mas model faulty yield desired result application second type points mundane mistakes actual code agents code implement formal model system actions implemented correctly 
note difficult impossible distinguish design implementation errors 
system deployed planning problem planner existence solution checked 
solution clearly design error monitoring agent pinpoint exactly planning fails assuming underlying planner ability 
solutions agent designer check critically examine intended model 
applications bugs system apparent runtime 
proposed monitoring agent structure 
definition structure monitoring agent agent monitor loops steps 
read parse message log log log set plans may cached reuse 

check action timeout occurred 

case compute current intended plans planning problem description additional info designer compatible actions executed mas 

compatible plans survive system idle inform agent designer situation 

sleep pre specified time 
elaborate deeply tasks 
checking mas behaviour monitor continually keeps track messages sent agents 
stored message log log accessible monitor 
monitor behaviour mas completely determined log think realistic abstraction internal agent states 
describing details agent unknown legacy agents involved kinds messages sent agent chosen give declarative highlevel view 
simplified example messages agents em disp pa cem disp pa see section 
intended behaviour compatibility desired collaborative mas behaviour formalized planning problem language cf 
section 
mas operation problem fed planner computes potential plans reach goal 
agent monitor exactly doing 
general plans may admissible constraints may apply derived intended collaborative behaviour 
actions ought taken fixed order actions may penalised costs sum stay limit 
distinguish set plans plans intended plans mas designer 
depend capabilities underlying planning formalism model constraints cost bounds optimality wrt 
resource consumption infsys rr perfectly possible original problem successful plans actions executed mas plans longer valid 
interesting case agent designer clearly shows gone wrong monitor pinpoint precise place indicating messages caused plan collapse 
messages related actions executed agents information help debug mas 
general difficult decide faulty behaviour due coding design error 
info monitor aid agent designer detect real cause 
messages monitor agent monitor continually checks compares actions taken far compatibility current plans 
situation arisen successful plan exists detected planner employed monitor writes message separate file containing action caused mas go state goal reached sequence actions taken action possible plans action executed plans compatible mas behaviour 
description heavily notion compatible plan 
giving formal definition consider running scenario 
plans generated initial problem coincide steps dropoff 
running scenario coding error suppose preliminary run scenario log shows dropoff 
compatible plan 

incompatible plan monitor detects gives warning 
inspection actual code may show command adding package database wrong 
doesn result livelock mas idle database updated 
informed monitor detected stage 
correction coding error mas may started error shows running scenario design error waiting home standard plan sue shows distribution center pickup attempt 
external event may unforeseen designer problematic events arise mas actions 
expect agent scenarios complete knowledge world unexpected events may happen action effects may fully determine state 
plan remains reach goal 
guarantee success sue back home time delivery 
situation easily captured framework 
notion secure plan 
optimistic plan secure conformant regardless initial state outcomes actions steps plan executable reach goal trajectories 
easily seen secure plans secure 
design error detected delivering package guaranteed circumstances 
generic planning problem define compatible plans follows 
plans denote set plans definition log compatible plans planning problem model intended behaviour mas set plans plans 
message log log denote plans log set plans plans comply steps actions planning framework different notions plans plans assumed comprise liberal notion plan 
example dlv planner optimistic secure plans computed problem plans consist optimistic plans 
infsys rr definition culprit log entry message log log plans log ii timeout detected 
culprit log pair ht applies ht resp 
log empty 
initially log empty plans log plans 
actions executed mas recorded log set plans shrinks 
monitor compare point time plans log empty 
happens culprit log computed pinpoints problematic action 
running scenario guaranteed delivery secure planning monitor writes culprit log pickup message file clearly points situation missed mas design 
note situations fine pickup occur agent monitor detect problem stage 
example simple extended consider extension previous simple example customer notification service 
postal service performs mail tracking order able notify customers status mail delivery 
recipient package notified arrival package distribution center package loaded truck delivery 
realisation notification service mas brings notification agent notify play 
notification agent informed event management agent em arrival package distribution center loading truck 
cases notify contacts package agent pa order obtain required customer information 
simplicity subsume messages em notify notify pa single message parameterised corresponding event dist truck notify 
package agent replies requests notify corresponding information notify customer email address recipient case dist phone number case truck 
pa 
order reflect extension model add actions newly introduced messages fluent actions loc requires pkg loc loc loc requires pkg loc loc fluents informed loc requires pkg loc loc intuitively external fluent captures state customer concerning knowledge package status 
effects executability conditions new actions defined follows inertial informed loc inertial informed loc executable dist dist executable truck truck caused informed loc loc loc informed loc loc informed loc executable loc loc informed loc caused informed loc loc loc infsys rr loc informed loc furthermore modify axioms delivery pickup action executable delivery truck informed truck delivered executable pickup dist informed truck delivered customer informed package delivered truck delivery longer show distribution center picking package informed package loaded truck 
general due nondeterminism external event customer showing distribution center picking package obtain plans reach goal optimistic plans variants plan dist dist truck truck pickup truck delivery dist dist truck pickup truck truck delivery note customer show distribution center package loaded truck 
longer case customer notified 
assumed customer notification takes place shortly loading truck 
running scenario consider run scenario extended mas suppose sequence messages message log log 
fine secure planning guaranteed delivery pickup occur sue notified package loaded truck delivery 
log compatible secure plan dist dist truck truck truck delivery sue shown distribution center notification say time package longer guaranteed delivered time monitor write culprit log file indicate problematic situation 
summing extending postal service customer notification reduced probability unsuccessful deliveries achieve guaranteed delivery 
example setting easily obtained disallowing customer 
infsys rr properties section closer look agent monitoring approach show desirable properties 
shall need preliminary definitions notions formally precise 
underlying planning framework referred pf assume basic element semantics plan execution trajectories planning world formed state transitions similar planning language assume set possible world states spf world states described fluents set actions apf pf set pf spf initial states 
furthermore partial multi valued transition function tr pf spf apf spf assigns state spf action apf executed set possible successor states tr pf transition tr pf undefined successor state may exist 
definition trajectory pf sequence states spf actions apf pf tr pf ng 
view plans reaching goal pf predicate applied states structures semantical perspective trajectories planning world compatible 
formally definition plan pf object associated nonempty set trajectories pf sem sem establishes goal holds state illustration planning framework transition function tr implicit definition state transitions viz 
tr defined state set actions view single compound action iff terminology executable wrt 
tr fs hs state case 
optimistic plan goal semantically characterised condition sequence actions ha sem form ii trajectory establishes goal sem 
furthermore secure plan optimistic plan satisfies addition iii trajectory am goal established tr am defined nonempty 
multi agent system question assume collaborative behaviour governed strategy take pure semantical view project set possible runs observed executing particular agent tester 
formally run defined follows 
definition mas run sequence global system states messages initial state resp set possible initial states case assume underlying set possible system states sm informally message system transits state state concrete time points messages sent 
denote set possible runs strategy runs assumed nonempty 
run establish collaboration goal assumed expressed success predicate global states satisfy 
infsys rr order account case know precise collaboration strategy adopted negotiated startup phase model intended behaviour nonempty set possible strategies run admissible possible runs 
planning framework pf mas linked basic modelling assumption runs gracefully correspond trajectories pf vice versa pf models evolutions planning goal corresponds collaboration goal 
precise follows 
modelling assumption 
correspondence messages action sets correspondence necessarily states sm agent system states spf planning framework initial states pf correspond 
fixed planning goal defining planning problem states pf fulfilling states establishing collaboration goal correspond 
correspondence extends transitions runs transitions trajectories pf respectively 
run part trajectory pf conversely trajectory part run shall denote solutions plans planning problem plans 
furthermore shall occasionally simply write appropriate objects corresponding correspondence induces notion similarity short runs trajectory pf order get meaningful results assume collaboration strategies closed similarity runs runs holds 
consequence trajectory corresponds admissible runs admissible run 
preliminary definitions result concerns soundness monitoring approach 
say plan pf models strategy iff run runs corresponds trajectory sem vice versa set mp fp ig plans models set strategies ss fs ig models theorem soundness suppose set plans plans intended plans planning problem pf models intended collaborative behaviour mas 
log message log 
implemented incorrectly culprit log exists 
proof 
run produced log consider different types culprit log 
suppose form ht 
time detected means run produced log terminated stuck 
monitor agent expects supported trajectory sem plans log compatible messages log execution continues message follows 
cases terminated stuck runs 
implemented correctly 
infsys rr suppose culprit log ht 
definition culprit plans log 
means trajectory planning framework pf sem plans property prefix prefix satisfy runs means implemented correctly 
proves soundness 
soundness result monitoring approach generalised setting intended collaborative behaviours agents exactly modelled intended plans planning framework just cautiously approximated 
particular useful strategies governing collaborative behaviour mas amount expressive notion plan 
example mas employ conditional plan depending conditions 
current state suitable actions 
executed respectively similar strategy recursively applied case 
conditional plans important sensing information observations world suitably respected 
liberal secure plans allow branching conditions 
planning framework pf employ agent monitoring capable conditional planning model respective intended plan example planning framework support conditional planning 
despite obstacle employ planning framework pf fruitfully error detection follows 
definition planning framework pf mas say set cp plans pf covers intended collaborative behaviour run runs exists plan cp trajectory sem monitoring agent uses step procedure definition cover cp intended plans plans 
write plans cp plans cp log culprit log cp result theorem soundness covering suppose planning problem pf accepted solutions cp plans cover intended collaborative behaviour mas 
log message log 
mas implemented incorrectly culprit log cp exists 
proof 
proof similar proof theorem plans replaced cp immediate corollary obtain soundness agent monitoring optimistic plans planning framework corollary soundness cover planning problem set op plans optimistic plans covers intended collaborative behaviour log message log 
mas implemented incorrectly culprit log op exists 
particular known collaboration strategy set op safely set plans optimistic plans 
behaviour covered including intended behaviour governed conditional plan restrictive secure plan 
completeness monitoring method clearly converse soundness result covers cp intended behaviour general cp include plan associated infsys rr trajectory masks inadmissible run mas price pay overestimating intended behaviour 
hand trajectories plans cover cp correspond admissible runs mas cover allows incorrect mas implementation provided certain conditions met 
general completeness result adopt assertions 
successful runs grow arbitrarily long known upper bound length 
second assertion concerns evolution mas respect particular mechanism message logging build foresee recording state information messages log general impossible infer state agent system assert property runs similar holds say way logging 
example way logging guaranteed agent systems deterministic message effects single initial state 
call cover cp exact cp sem exists strategy run runs corresponds theorem completeness planning problem pf set cp plans selected plans exactly covers intended collaborative behaviour mas admissible runs bounded 
way logging implemented incorrectly cp ii message log log culprit log exists 
proof 
suppose incorrectly implemented 
intended collaborative behaviour violated run witnessing fact runs 
exceeds length bound trajectory exceeds length bound plans log hold culprit log exists case 
rest assume limit 
log message log produced notice way logging log produced runs contradiction suppose cp culprit log monitoring agent 
time detected judged terminated stuck exist trajectory sem plan cp form modeling assumption exists runs cp exact cover admissible runs 
correspondence actions sets messages way logging follows closure strategies follows runs runs contradiction 
particular theorem holds cp models intended behaviour cp plans 
conclude design error ii design coding error may 
obtain easy corollary planning framework corollary completeness exact cover planning problem set op plans optimistic plans exactly covers intended collaborative behaviour mas way logging implemented incorrectly cp ii message log log culprit log exists 
notice theorem allows detect incorrectness despite mismatch structure strategies structures plans supported pf may dispose assertions strategies mas satisfy certain properties 
example case collaborative behaviour governed conformant strategy infsys rr means semantically corresponds conformant secure plan starting possible initial state sequence messages expected appear lead success regardless global state evolves 
model intended behaviour secure plans planning framework drop way logging assertion 
formulate result particular formalism described secure plans detailed definition 
fact turns exact covers tantamount secure plans 
lemma planning problem set cp plans optimistic plans exactly covers intended collaborative behaviour suppose conformant 
plan cp secure 
proof 
suppose cp secure 
trajectory sem corresponds admissible run strategy exist 
hand insecurity ha implies exists trajectory am violating condition iii secure plan 
goal established tr am undefined empty 
modeling assumption corresponds run establish collaboration goal termination resp 
stuck 
message sequence compromises conformant 
contradiction 
theorem completeness secure strategies planning problem set cp plans optimistic plans exactly covers intended collaborative behaviour suppose bounded runs conformant collaboration strategy sm implemented incorrectly message log log cp ii culprit log cp exists 
proof 
argument similar proof theorem 
arguing contradiction concluding hold correspond trajectory kg reach planning goal trajectory means plan ha trajectory secure 
contradiction lemma 
example running scenario design error detected conformant plans mas collaborative behaviour formalism secure plans culprit vanishes move cover contains addition non secure plan compatible log deploy planner checks plans log culprit log 
particular intended behaviour expressed optimistic secure plans deciding plans log tantamount optimistic secure plan existence plan prefix log easily encoded planning problem adding corresponding constraints 
log planning problem modelling mas hand 
log problem obtained adding program cf 
details semantics initially step caused false step caused step infsys rr caused false step caused step 
caused false step step step newly added propositional fluents 
intuitively modified planning encoding enforces execution messages log plans comply messages computed 
obtain result proposition suppose set op plans optimistic plans respectively set sp plans secure plans covers 
log message log 
plans log iff log optimistic resp 
secure plan 
easily seen encoding log check existence culprit log form ht general planner detecting timeouts mas 
encoding restricted particular formalism 
instance computation plans compatible prefix log achieved planning formalism allows similar modelling domains certain actions fixed 
apply planning checking plans log culprit log form ht exists 
computational complexity mention expressive planning formalisms deciding plans log culprit log exists log np hard general inherited expressive planning language corresponding complexity results discussion complexity issues 
satisfiability sat np hardness worse secure plans required theoretical worst case measure solutions instances quickly especially optimistic planning required 
instance classes polynomial time solvable dlv guaranteed compute plans polynomial time 
highly depends requirements intended plans complicated corresponding planning problem gets 
small domains number plans moderate plans plans resp 
computed offline simply cached checking log simple 
implementation demonstrate proposed method running example implemented 
implementation mas agent monitor developed impact interactive maryland platform agents collaborating 
note principle approach independent specific agent system 
agent consists set data types api functions actions agent program includes rules prescribing behaviours 
dlv planner new connection module created agent monitor monitor access dlv planner 
way mas operates feed monitor exploits dlv compute potential plans including secure optimistic plans 
running scenario post office guarantees package delivery hours dropoff 
consider case sue receives email time package fe arrived distribution center 
sue decides pick package 
unfortunately reaches infsys rr distribution center time clerk tells package loaded truck time way home 
guaranteed delivery requirement agent monitor computes secure plans monitoring purpose dist dist truck truck truck delivery dist dist pickup action pickup mistake immediately detected monitor 
monitor generated log file follows problematic action pickup fe idle actions executed dropoff fe fe fe fe dist fe dist truck fe possible plans problematic action dist dist truck truck truck delivery information running examples project webpage 
refer details impact 
related contrast research plan generation relatively little plans debug mas monitor agents execution 
plans executed agent collaborative agents section review related single agent settings multi agent environments 
monitoring single agent settings interleaving monitoring plan execution addressed context single agent environment authors situation calculus account execution monitoring robot programs written golog 
situation calculus specification behaviour golog programs 
combined interpretation golog programs execution monitor detects discrepancy execution primitive action 
discrepancy execution monitor checks relevant current state preconditions action hold effect exogenous action 
exogenous action matter recover mechanism invoked 
www cs man ac uk project monitor infsys rr method recovering planning 
new plan program computed execution things right way leading current state desired situation exogenous action occurred 
declarative representations proposed entire process monitoring recovery 
similar method approach completely formal works monitoring arbitrary programs 
addressed problem recovering failure haven included system moment 
approach know advance exogenous events order specify appropriate relevant recover mechanism 
addition don explore depth properly define relevant recover 
framework expanded introducing trace backtracking process online monitoring golog programs 
enable generation plans dynamic environment veloso introduced rationale monitoring idea planning decision making 
rationale monitors encode features associated planning decision 
method sensing relevant potentially relevant features world affect plan 
investigates balance sensitivity changes world stability plans 
approach provides planner opportunities optimise plans dynamic environment plan generation contract approach haven studied issue execution monitoring 
methods mentioned address problem single agent acting uncertain environment techniques focus monitoring environment verifying plans 
approach directly applied single agent domains need extra order handle monitoring collaboration multiple agents 
monitoring multi agent coordination teamwork monitoring recognised crucial problem multi agent coordination 
jennings proposed foundations multi agent coordination commitments conventions 
agents commitments 
conventions means monitoring commitments 
monitoring rules kind information monitored way perform monitoring decided conventions 
jennings illustrates method examples 
doesn investigate select conventions 
different idea approach avoids problem monitoring selectivity 
myers introduced continuous planning execution framework 
system central component plan manager directing processes plan generation execution monitoring repair 
monitoring environment carried time plan generation execution 
furthermore execution tracked plan manager comparing reports individual actions outcomes temporal ordering relationships actions 
types event response rule concerned failure monitors encode suitable responses potential failures plan execution knowl edge monitors detect availability information required decision making assumption monitors check assumptions plan relies hold 
idea assumption monitors helps early detection potential problems failure occurs fulfilled system different approach 
wilkins system 
execution monitoring agent teams performed communicating state information team members combination humans machines 
humans final decision unreliable communications exist monitoring performance may degraded help humans experience 
interesting monitoring approach multi agent coordination plan recognition huber tambe intille bobick devaney ram kaminka :10.1.1.14.514
infsys rr approach agent intentions goals plans beliefs actions inferred observations agent ongoing behaviour 
devaney ram described plan recognition problem complex multi agent domain involving hundreds agents acting large space time scales 
pattern matching recognise team tactics military operations 
team plan library stores strategic patterns system needs recognise military operation 
order computation efficient utilise representations agent pair relationships team behaviours recognition 
intille bobick constructed probabilistic framework represent recognise complex actions visual evidence 
complex multi agent action inferred multi agent belief network 
network integrates likelihood values generated visual goal networks time returns likelihood action observed 
network explicitly represents logical temporal relationships agents structure similar naive bayesian classifier network structure reflecting temporal structure particular complex action 
approach relies coordination constraints agents 
agent fails may able recognize plans 
line pursued isi 
kaminka developed overseer monitoring system builds multi agent plan recognition :10.1.1.14.514
address problem geographically distributed team members collaborating dynamic environment 
system employs plan recognition infer current state agents observed messages exchanged 
basic component probabilistic plan recognition algorithm underlies monitoring single agent runs separately agent 
algorithm built markovian assumption allows linear time inference 
monitor multiple agents utilise social knowledge relationships interactions agents better predict behaviour team members detect coordination failures 
overseer supports reasoning uncertainty time allows answer queries related likelihood current team plans 
objective debug offline implemented mas monitor online collaboration multiple agents plan recognition approaches described mainly aim inferring sub team plans actions agents 
address mas debugging issue 
furthermore point method mas design phase support protocol generation determine design time messages needed order simple agent collaboration 
precisely possible plans hm goal encode sequences messages 
exchanged order successful cooperation achieving goal 
agent developer may select possible plans optimality criteria cost program individual agents obey corresponding protocol 
subsequent monitoring testing single intended plan 
plan recognition suitable various situations communication possible agents exchanging messages reliable communications secure 
significantly differs approach points multi agent system deployed consists legacy code plan recognition approach monitoring modifications deployed system 
method entirely relies agent message log file 
algorithms developed low computational complexity 
especially linear time plan recognition algorithm 
model capable reasoning uncertainty time space 
infsys rr tasks agents frequently communicate task execution 
addition communication reliable messages may incorrect get lost 
believe points taken account framework 
adding agent actions log file explicitly mas difficult 
developed algorithms linear complexity framework needs deal uncertainty probabilistic reasoning expensive 
approach np hard worst case encounter difficulties scenarios dealt 
impact implemented capabilities dealing probabilistic temporal spatial reasoning extensions developed currently implemented 
advantages method method easily extended plan repair methods 
merely kaminka mentioned idea dealing failure actions 
approach chosen includes protocol generation intuitive sense relying underlying planner cited approaches model agent behaviour level derive intended message protocols directly 
ascertaining intentions beliefs agents result uncertainty respect information powerful means reasoning uncertainty required plan recognition method 
described method support testing multi agent system monitoring message exchange planning methods 
seen useful debugging tool detecting coding design errors 
soundness completeness results approach touched complexity 
approach works arbitrary agent systems tailored planning formalism able express collaborative behaviour mas 
briefly discussed implemented couple specific planner dlv language particular mas platform viz 
impact 
webpage information detailed documentation set see footnote 
extensions approach 
mention just cost planning goal reached certain bound costs actions agents take costs attached 
optimal cost corresponding behaviour look 
allow assess quality actual agents behaviour select cost effective strategies 
keep exposition simple omitted dlv capable computing admissible plans plans cost bound optimal plans optimistic secure plans respecting action certain declared cost 
instance example prefer plans customer picks package cheaper sending truck 
realisation approach economic behaviour agents mas cost aspects easily monitored smallest number message exchanges total communication cost 
infsys rr dynamic planning assumed priori chosen collaboration plan log compatibility 
implies plans log plans log 
longer holds plan may dynamically revised 
checking log compatibility amounts new planning problem initial states states reached actions log 
monitoring potentially interesting plans goal generated cached reuse 
shown advantages method 
large number intended plans exists front method may infeasible 
case just check similar state reached actions log goal reached 
investing issues part ongoing planned research 
devaney ram 
needles haystack plan recognition large spatial domains involving multiple agents 
proceedings th national conference artificial intelligence th innovative applications artificial intelligence conference aaai pages 
dix nau 
htn planning answer set programming 
technical report cs tr cs department univ maryland 
submitted theory practice logic programming 
dix munoz avila nau zhang 
theoretical empirical aspects planner multi agent environment 
flesca editors proceedings de la logique en intelligence artificielle jelia lncs pages 
springer 
eiter faber leone pfeifer 
declarative problem solving dlv system 
minker editor logic artificial intelligence pages 
kluwer academic publishers 
eiter faber leone pfeifer 
logic programming approach knowledge state planning ii dlv system 
artificial intelligence 
eiter faber leone pfeifer 
answer set planning action costs 
journal artificial intelligence research 
eiter faber leone pfeifer 
logic programming approach knowledge state planning semantics complexity 
acm transactions computational logic 
appear 
erol hendler nau 
sound complete procedure hierarchical task network planning 
hammond editor proceedings second international conference artificial intelligence planning systems aips pages 
aaai press june 
fikes nilsson 
strips new approach application theorem proving problem solving 
artificial intelligence 
gelfond lifschitz 
representing action change logic programs 
journal logic programming 
ghallab howe knoblock mcdermott ram veloso weld wilkins 
pddl planning domain definition language 
technical report yale center computational vision control october 
available ttp www cs yale edu pub mcdermott software pddl tar gz 
giacomo reiter soutchanski 
execution monitoring high level robot programs 
proceedings sixth international conference principles knowledge representation reasoning kr pages 
infsys rr giunchiglia lifschitz 
action language causal explanation preliminary report 
proceedings fifteenth national conference artificial intelligence aaai pages 
goldman boddy 
expressive planning explicit knowledge 
proceedings third international conference artificial intelligence planning systems aips pages 
aaai press 
huber durfee 
acting communication 
spring symposium working notes representing mental states mechanisms pages 
american association artificial intelligence stanford california 
intille bobick 
framework recognizing multi agent action visual evidence 
proceedings th national conference artificial intelligence th conference innovative applications artificial intelligence aaai iaai pages 
jennings 
commitments conventions foundation coordination multi agent systems 
knowledge engineering review 
kaminka pynadath tambe 
monitoring deployed agent teams 
proceedings fifth international conference autonomous agents agents pages 
acm 
kaminka tambe 
robust agent teams socially attentive monitoring 
journal artificial intelligence research 
kaminka pynadath tambe 
monitoring teams overhearing multi agent approach 
journal artificial intelligence research 
levesque reiter lesperance lin scherl 
golog logic programming language dynamic domains 
journal logic programming 
luck mcburney preist 
agentlink agent technology roadmap draft 
agentlink available www agentlink org roadmap index html 
myers 
continuous planning execution framework 
ai magazine 
peot smith 
conditional nonlinear planning 
proceedings st international conference artificial intelligence planning systems aips pages 
aaai press 
soutchanski 
execution monitoring high level temporal programs 
proc 
ijcai workshop robot action planning july stockholm sweden 
subrahmanian dix eiter kraus ross 
heterogeneous agent systems theory implementation 
mit press 
tambe 
tracking dynamic team activity 
proceedings th national conference artificial intelligence aaai pages 
veloso pollack cox 
rationale monitoring planning dynamic environments 
proceedings th international conference artificial intelligence planning systems aips pages 
wilkins lee berry 
interactive execution monitoring agent teams 
journal artificial intelligence research 
