description logics conceptual data modeling diego calvanese maurizio lenzerini daniele nardi dipartimento di informatica sistemistica universit di roma la sapienza salaria roma italy lenzerini dis uniroma jan chomicki unter saake editors logics databases information systems 
kluwer academic publisher 
article aims establishing logical approach class data modeling 
discussion class formalisms data modeling introduce family logics called description logics stem research knowledge representation arti cial intelligence 
logics family particularly suited specifying data classes relationships classes equipped formal semantics inference mechanisms 
demonstrate popular data modeling formalisms including entity relationship model common variants object oriented data models expressed terms speci logics family 
purpose unifying description logic incorporates features needed logical reformulation data models various contexts 
discuss problem devising reasoning procedures unifying formalism show provide valuable supports important data modeling activities 
data modeling activity specifying structure data managed application 
decades data modeling subject large body areas including databases information systems software engineering knowledge representation 
particular approaches conceptual data modeling advocate formalisms describing data notion class hk 
concentrate class formalisms data modeling aim demonstrating pro reconstructed logical framework 
argue reasoning techniques available logical framework provide valuable support data modeling activity 
generally speaking class denotes subset domain discourse class representation formalism allows express kinds relationships constraints subclass constraints holding classes mm 
class formalisms aim advantage class structure order provide various information element belongs class class subclass class generally constraint holds set classes 
main families class formalisms data modeling addressed 
rst originates eld databases particular semantic data models see hk 
second arises types programming languages object oriented systems see kl 
past attempts establish relationships class formalisms knowledge representation semantic networks frames sow families class formalisms 
signi cant aspect identi cation reasoning problems take advantage techniques reasoning hierarchical structures developed di erent areas 
relationship frame languages types addressed bhr lns bor bs pss bor acs frame languages enrich deductive capabilities data models 
analysis cited works clear number steps accomplished diculties arise identifying common framework expressive capture essential features various class formalisms providing techniques associated reasoning problems 
formalisms proposed aim integrating object oriented logic programming paradigms 
notable example ort logic klw pro description logics conceptual data modeling vides elegant framework equipped sound complete resolution proof procedure 
goal proposals provide sophisticated environment computing objects system supporting reasoning conceptual speci cation 
reason easily compared approach proposed 
step uni ed view class languages establishing relationship semantic object oriented data models rephrasing terms knowledge representation framework description logics 
speci cally building results cln class representation formalism family description logics ss show able capture popular data modeling formalisms presently databases information system analysis providing powerful reasoning techniques 
description logics structured knowledge described means called concepts roles denote unary binary predicates respectively 
starting set atomic symbols build complex concept role expressions applying suitable constructors characterize description logic 
formally concepts interpreted subsets domain roles binary relations domain constructors equipped precise set theoretic semantics 
common constructors include boolean operators concepts quanti cation roles 
example concept child male denotes set individuals instances concept person connected role child instances concept male concept child denotes individuals connected role child individual 
constructors considered important include general forms quanti cation number restrictions allow state limits number connections individual may certain role constructors roles intersection concatenation inverse 
description logic knowledge base expressing intensional knowledge modeled domain built stating inclusion equality assertions concepts satis ed models knowledge base 
assertions specify necessary necessary sucient conditions individuals instances certain concepts 
reasoning knowledge bases includes detecting inconsistencies knowledge base determining concept populated model knowledge base checking subsumption instances concept necessarily instances concept models knowledge base 
description logic propose called alcqi features rich combination constructors including quali ed number restrictions inverse roles inclusion assertions general form 
show features logics databases information systems alcqi powerful provide uni ed framework object oriented languages semantic data models 
done establishing precise correspondence entity relationship model che objectoriented language style ak :10.1.1.123.1085
demonstrate formalism proposed provides important features currently missing family relevance stressed 
expressive power alcqi computational complexity reasoning high relevant reasoning tasks remain decidable 
consider feature important language actual knowledge representation data modeling language simply formal framework comparing apparently di erent approaches 
organized follows 
section description logic alcqi 
sections deal semantic data models object oriented data models respectively showing basic features captured knowledge bases alcqi 
section describes reasoning alcqi supports data modeling 
nal section contains concluding remarks 
description logics basic elements description logics concepts roles denote classes binary relations respectively 
arbitrary concept role expressions simply called concepts roles formed starting sets atomic concepts atomic roles applying concept role constructors 
syntax semantics logic alcqi introduce description logic alcqi concepts roles formed syntax denote atomic concepts atomic roles respectively denote arbitrary concepts roles denotes positive integer 
abbreviations increase readability atomic concept atomic concept similarly description logics conceptual data modeling constructors forming concept expressions nd basic set operators set complement union intersection denoted negation disjunction conjunction respectively 
description logics admit restricted form quanti cation realized called quanti ed role restrictions composed quanti er existential universal role concept expression 
quanti ed role restrictions allow represent relationships existing objects classes forms considered alcqi general capture common ways establishing relationships 
example characterize set objects children male child male set objects male child child male 
number restrictions constrain number instances certain relationship 
example child male characterizes set parents exactly male children 
form called quali ed number restrictions hb general allowing pose restrictions number instances connected certain role counting objects satisfy certain condition 
observe restricted forms cardinality restrictions involved number equal express functionality existence constraints 
alcqi role constructor inverse role allows denote inverse relation 
example state child parents making inverse role child 
worth noticing language inverse roles order express constraint distinct roles child parent put proper relation 
semantic point view concepts interpreted subsets domain roles binary relations domain 
interpretation 
set atomic concepts set atomic roles consists nonempty nite set 
domain function 
interpretation function maps atomic concept subset 
set instances atomic role subset 
set instances 
interpretation function extended arbitrary concepts roles follows denotes cardinality set fo 

fo 

logics databases information systems fo 
fo ng fo 
fo ng 
notice equivalent knowledge bases alcqi concept expressions alcqi intensional knowledge classes relations expressed knowledge base 
alcqi knowledge base constituted nite set assertions form inclusion assertion equality assertion atomic concept arbitrary alcqi concept expression 
inclusion assertion speci es means necessary conditions object instance concept corresponds naturally constraints imposed classes schema expressed traditional database model 
models object inferred instance certain class explicitly stated 
contrast equality assertion speci es necessary sucient conditions instances class corresponds concept view databases 
observe views usually considered part schema built top order de ne data schema see di erent view aspect 
pose restrictions form assertions knowledge base 
particular 
atomic concept may appear left side assertion 

assertions may contain terminological cycles concept right part assertion may refer directly indirectly atomic concept left part assertion 
assumptions strong impact expressiveness formalism paid increased computational complexity reasoning 
making assumption equivalent allowing called free inclusion assertions bds form arbitrary concept expressions 
assumption seldom description logics conceptual data modeling existing concept knowledge representation systems terminological cycles increase computational complexity reasoning baa interpreted di erent semantics sch 
data modeling perspective unrealistic assume absence cycles 
semantics knowledge base speci ed notion satisfaction assertions 
interpretation satis es inclusion assertion satis es equality interpretation model knowledge base satis es terminological assertions 
fundamental reasoning tasks considered context description logics intensional level address knowledge base satis ability concept satis ability logical implication 
knowledge base satis able admits model concept satis able admits model nonempty interpretation logically implies inclusion assertion models interpretation subset interpretation restricting attention nite interpretations models ones interest data modeling 
assumption dealing nite structures means common description logics needs taken explicitly account devising reasoning procedures cln cal 
fact constructs alcqi particular functionality inverse roles cycles knowledge base may interact way knowledge base admits nite model admits nite domain cln 
words alcqi lacks nite model property reasoning nite unrestricted case di erent 
semantic data models semantic data models introduced primarily formalisms database schema design 
provide means model databases richer way traditional data models supported database management systems important adopted database information system design methodologies computer aided software engineering tools 
rich variety semantic data models introduced various degrees expressiveness see hk extensive survey 
provide means classes explicit representation objects attributes relationships objects 
important feature semantic data models possibility specify subtype supertype relationships called provide inheritance properties 
logics databases information systems simplicity presentation concentrate attention widespread semantic data models standard extensively design phase commercial applications entity relationship er model 
er model introduced che subsequently variants extensions proposed di er minor aspects expressiveness notation teo bcn tha tha :10.1.1.123.1085
er model domain interest modeled means er schema usually represented graphical notation particularly useful easy visualization data dependencies 
introduce rst order formalization includes important features di erent variants possible establish precise correspondence description logics 
entity relationship model basic elements er model entities relationships attributes 
entity set simply entity denotes set objects called instances common properties 
elementary properties modeled attributes values belong prede ned domains integer string boolean 
properties due relations entities modeled participation entity relationships 
relationship set simply relationship denotes set tuples called instances represents association di erent combination instances entities participate relationship 
entity participate relationship notion er role introduced represents participation unique name assigned 
arity relationship number er roles 
cardinality constraints attached er role order restrict number times instance entity allowed participate er role instances relationship 
constraints specify existence dependencies functionality relations ck 
restricted form minimum cardinality maximum cardinality 
cardinality constraints form considered introduced abr subsequently studied gm ln fer tha cl cl 
additionally called relations represent inclusion assertions entities inheritance properties general entity speci 
consider keys formalization essential mapping er schemas relational schemas lose relevance reasoning conceptual speci cation 
treatment description logics conceptual data modeling reasoning keys logic framework see bw 
de ne formal way syntax semantics er schemata 
er schema constructed starting pairwise disjoint sets entity symbols relationship symbols arity er role symbols attribute symbols domain symbols 
domain symbol associated prede ned basic domain bd assume basic domains pairwise disjoint 
entity symbol set attribute symbols de ned attribute unique domain symbol associated 
relationship symbol arity associated er role symbols associated entity symbol de nes relationship entities 
assume er role symbol belongs unique relationship determining unique entity 
cardinality constraints represented functions cmin er role symbols nonnegative integers cmax er role symbols positive integers union special symbol 
relations entities modeled means binary relation need special assumption form requiring acyclic injective 
commonly accepted graphical er notation entities represented boxes relationships represented diamonds 
attribute shown circle attached entity de ned 
er roles graphically depicted connecting relationship participating entities labeling connection associated cardinality constraints 
relation entities denoted arrow speci general entity 
example shows simple er schema modeling situation university 
entity course represents courses enroll students taught professors 
cardinality constraints impose limits number students may enrolled course number courses student may attend express course taught exactly professor turn teach course 
entities gradstudent specializations course student respectively 
semantics er schema specifying database states consistent information structure represented schema 
formally database state corresponding er schema constituted nonempty nite set 
assumed disjoint basic domains function 
maps domain symbol corresponding basic domain bd entity subset 
logics databases information systems course professor student gradstudent degree string ein eof teaching tof er schema attribute partial function 
union domains bd relationship set labeled tuples 
labeled tuple domain 
function set er roles 
labeled tuple maps er role kg denoted 
write denote call component elements called instances respectively 
database state considered acceptable satis es integrity constraints part schema 
captured notion legal database state 
database state legal er schema satis es conditions pair entities holds entity attribute domain instance de ned bd relationship arity entities connected means er roles respectively instances form kg 
description logics conceptual data modeling er role associated relationship entity instance holds cmin fr cmax notice relation interpreted set containment extensions involved entities 
addition worth emphasizing de nition database state re ects usual assumption database states nite structures see 
fact basic domains required nite legal database state schema nite set values attributes elements 
interest 
formalizing entity relationship schemata description logics show semantics er model captured description logics de ning translation er schemata alcqi knowledge bases establishing correspondence legal database states models derived knowledge base 
knowledge base derived er schema de ned follows contains atomic concept domain symbol entity symbol relationship symbol atomic role attribute symbol er role symbol set assertions contains elements pair entities assertion entity attributes domains respectively assertion 

relationship arity entities connected means er roles respectively assertions 

kg er role associated relationship entity logics databases information systems teaching tof course tof professor ein course ein eof student eof course tof teaching tof ein ein ein course professor teaching student eof eof eof gradstudent student degree string degree knowledge base corresponding er schema cmin assertion cmax assertion pair symbols relationship domain symbol entity relationship domain symbol assertion example cont 
illustrate translation er schema 
knowledge base captures semantics shown disjointness assertions omitted brevity 
regarding transformation provided observe er schema expresses necessary conditions objects domain instances entities translation inclusion assertions equality assertions necessary 
relationship rei ed modeled means concept instances represent tuples relationship 
assertions enforce role relationship instance connected description logics conceptual data modeling exactly object represents component corresponding tuple 
inverse roles number restrictions exploited capture semantics er schemata 
precisely functionality roles associated er roles needed represent fact instance relationship connected er role exactly instance associated entity number restrictions corresponding inverse roles represent cardinality constraints er schema 
er schema acyclic resulting knowledge base contains cycles 
means inverse constructor binary relationship treated simpler way choosing traversal direction mapping relationship directly role 
order show translation preserves semantics er schema de ne mapping database states corresponding er schema nite interpretations knowledge base derived 
due rei cation relationships mapping rst need characterize interpretations knowledge base directly correspond database states 
say interpretation knowledge base derived er schema relation descriptive relationship er roles 

intuitively condition states instances concept corresponding relationship represent tuple 
notice condition implicit semantics er model extension relationship set tuples necessarily hold relationships rei ed 
imposed alcqi suitable assertions 
reasoning knowledge base corresponding er schema sucient restrict attention relation descriptive models 
concept expression knowledge base obtained er schema satis able relation descriptive model nonempty extension cal 
exploited relation descriptive models alcqi knowledge base put correspondence legal database states precisely logics databases information systems correspondence established de ning mappings follows mapping database states corresponding interpretations properties database state legal database state model 
union 
set rei ed tuples set domain values appear value attribute 
entity mapping relation descriptive interpretations database states corresponding properties interpretation model legal database state 
set objects 
instances atomic concept corresponding relationship basic domain 
entity existence mappings allows reduce problem checking properties hold er schema problem reasoning corresponding alcqi knowledge base cal 
model concept corresponding entity satis able legal database state entity populated 
conversely applying legal database state obtain suitable model 
extending expressiveness modeling language semantic data models general er model particular provide features modeling primitives prove useful order represent complex dependencies data 
richness constructs typical description logics correspondence formalisms established previous section possible add constructs basic model take fully account reasoning schema 
provide meaningful examples possible additions basic er model arise natural consequence correspondence alcqi 
description logics conceptual data modeling arbitrary boolean constructs entities 
direct relationship entities expressed basic er model relation 
common extension called generalization hierarchies see bcn allow express extension entity disjoint union extensions entities 
construct easily translated making union negation description logics 
example cont 
fact professor associate full professor expressed simple generalization hierarchy stating entity professor generalization entities 
translate hierarchy alcqi adding assertions professor professor professor general level generalization hierarchy expressing entity generalization disjoint entities en translated assertions 
en 
en 
en 
en en en generally exploiting possibility construct general boolean expressions alcqi arbitrary boolean combinations entities schema expressing particular disjointness disjunction entities forms negative incomplete knowledge dl 
re nement properties isa hierarchy 
important extension considered possibility specify complex forms re nement properties entities isa hierarchies mere addition attributes 
essential feature object oriented models 
particular cardinality constraints re ned restricting range values participation relationships logics databases information systems restricted 
may require speci instances entity objects related certain relationship belong speci entity directly associated er role 
forms constraints naturally expressed alcqi making universal quanti cation roles 
example cont 
assertion imposes advanced courses followed students re ning limits hold arbitrary courses students graduate ein ein ein eof gradstudent de nitions classes means complex properties 
er model generally semantic data models specify necessary conditions instances entities generally classes satisfy 
means database conforms schema deduce certain object instance entity fact explicitly stated 
modeling complex domain order capture precisely intended semantics able de ne classes objects necessary sucient conditions state just sucient conditions object instance class 
di erent types assertions alcqi conditions easily imposed part schema 
addition availability various constructors allows express relatively complex conditions 
example cont 
sucient condition student considered graduate degree 
speci ed assertion assertion speci es necessary conditions 
student degree gradstudent object oriented data models object oriented data models proposed goal devising database formalisms integrated object oriented programming systems kim 
subject active area research database eld features rely notion object identi er extensional level opposed traditional data models value oriented notion class intensional level 
description logics conceptual data modeling structure classes speci ed means typing inheritance 
previous section introduce language specifying objectoriented schemata includes common features object oriented data models discuss relationship class formalisms showing schemata expressed language correctly represented knowledge bases alcqi 
object oriented data model de ne simple object oriented language style popular models featuring complex objects object identity 
refer speci formalism model inspired ak formal characterization embodies basic features static part odmg standard cb 
recall restrict attention structural component object oriented models consider aspects related de nition methods associated classes 
object oriented schema de ned nite set class names denoted letter nite set attribute names denoted letter object oriented schema nite set class declarations form class type exactly declaration class denotes type expression built syntax union set record example shows fragment object oriented schema corresponding entity relationship schema 
class declaration imposes constraints instances class refers 
part class declaration allows specify inclusion sets instances involved classes type part speci es type expression structure assigned objects instances class 
logics databases information systems class teacher type union professor gradstudent class gradstudent student type record degree string class course type record enrolls set student teacher object oriented schema meaning object oriented schema specifying characteristics instance schema 
de nition instance notions object identi er value 
rst characterize set values constructed set symbols called object identi ers 
nite set symbols set vo values inductively de ned follows vo vo jg vo vo vo vo database instance schema constituted nite set object identi ers mapping assigning class name subset mapping assigning value object set values constructed set object identi ers nite database instance needs consider nite subset nite structures stored database 
object oriented schema instance nite set called set vj active values respect constituted union set object identi ers set values assigned elements including values explicitly associated object identi ers form values 
description logics conceptual data modeling interpretation type expressions de ned interpretation function 
assigns type expression subset conditions satis ed union 
set jg record kg fk notice instances class type record may components speci ed type class 
open semantics records typical object oriented data models see ak 
order characterize object oriented data models de ne instances admissible schema 
database instance objectoriented schema said legal respect declaration class cn type holds ng legal database instance type expressions schema determine nite set active values considered 
construction values limited depth type expressions 
formalizing object oriented schemata description logics establish relationship alcqi object oriented language 
done providing mapping object oriented schemata alcqi knowledge bases 
interpretation domain alcqi knowledge base consists atomic objects instance object oriented schema assigned possibly structured value see de nition vo need explicitly represent notions underlie object oriented language 
particular correspondence concepts classes explicitly account type structure class 
accomplished introducing alcqi concept abstractclass represent classes concepts rectype settype represent corresponding types 
associations classes types induced class declarations basic characteristics logics databases information systems types modeled means roles functional role value models association classes types role member specifying type elements set 
concepts representing types assumed mutually disjoint disjoint concepts representing classes 
constraints expressed suitable inclusion assertions knowledge base 
formally knowledge base corresponding object oriented schema contains prede ned atomic concepts abstractclass rectype settype concept class name contains prede ned atomic roles value member atomic role attribute name specifying set assertions specify function maps type expression concept expression follows class mapped atomic concept 
type expression union mapped 

type expression set mapped member 

attribute mapped atomic role type expression record mapped rectype 


de ne knowledge base corresponding constituted inclusion assertions abstractclass value rectype value 
settype value 
rectype class declaration class cn type inclusion assertion 
cn value 
example cont 
illustrate translation fragment objectoriented schema 
corresponding alcqi knowledge base shown 
description logics conceptual data modeling course abstractclass value rectype enrolls enrolls settype member student teacher teacher abstractclass value gradstudent professor gradstudent abstractclass student value rectype degree string degree abstractclass value rectype value 
settype value 
rectype alcqi knowledge base corresponding object oriented schema remarks translation order 
er model resulting knowledge base contains inclusion assertions equality assertions 
relationship class associated type expression rei ed explicitly represented role value 
type structure class represented terms concepts rectype settype explicitly characterize records sets respectively 
record attributes directly mapped functional roles set elements associated set role member 
inverse roles needed formalization object oriented data models 
number restrictions limited value corresponds existence constraints functionality 
discuss ectiveness translation observe knowledge base resulting translation objectoriented schema may admit models direct counterpart legal database instances precisely characterizing interpretations directed labeled graphs cln nds concepts translate type expressions involving record set structures admit certain cyclic models values tree structure direct counterpart 
logics databases information systems rectype rectype rectype rectype rectype value value model containing cycles example consider object oriented schema containing single class declaration class type record record record translated value rectype rectype rectype shows model represented graph 
clarity named instances abstractclass instances rectype observe di erent types cycles graph 
cycle involving individuals cause problems contains arc labeled value part structure constituting complex value 
fact represents record value 
hand cycle involving represents connected record nite depth 
establish correspondence legal instances object oriented schemata nite interpretation translations needs unfold bad cycles form include individual corresponding object identi er nite trees depth bound size object oriented schema 
precisely nite interpretation 
call unfolded version interpretation obtained unfolding bad cycles generating new individuals instances rectype settype occurring unfolded cycles 
nonnegative integer call unfolded version denoted jm interpretation description logics conceptual data modeling obtained truncating depth nite tree generated process unfolding 
correctness established showing object oriented schema depth exist mappings instances nite interpretations active values instances domain elements nite interpretations provide desired correspondence interpretation structures 
particular de ned way legal instance nite model ii type expression active value vj conversely de ne mappings nite interpretations instances domain elements unfolded versions nite interpretations active values instances nite model legal instance ii concept translation type expression 
jm jm similarly er model existing mappings allows reduce problem checking properties classes object oriented schema problem reasoning corresponding knowledge base 
extending expressiveness modeling language ability represent object oriented schema description logic knowledge base feasible consider extensions objectoriented formalism useful purpose conceptual modeling 
considerations developed er model regard arbitrary boolean constructs classes applied objectoriented setting provides disjunction admit form negation 
second analogously exploit ability expressing class de nitions addition inclusion statements typical objectoriented modeling languages bn 
additional features speci cally addressed framework object oriented languages shown 
logics databases information systems cardinality constraints 
cardinality constraints typical semantic data models expressible object oriented schemata 
example cont 
specify numerical restrictions de nition course enroll students 
course value rectype enrolls enrolls settype member student member member teacher notice usage cardinality restrictions example corresponds ability constrain cardinality sets 
general restrictions values attributes 
usage object oriented modeling languages constructs corresponding quanti ed role restrictions limited translation record set structures 
adding general forms quanti ed role restrictions amounts admitting exible structures closer counterpart possibly frames knowledge representation systems see bs cln 
frame structure example specify slot counterpart record attribute restrictions number type llers 
addition introducing set types explicitly attributes values sets directly multivalued attributes express constraints type number instances constructors alcqi 
example specify graduate student degree express relationship courses students means attribute enrolls consider multivalued 
gradstudent student degree course enrolls student enrolls enrolls professor gradstudent inverse roles 
observed inverse roles necessary formalization object oriented data models 
admitting inverse roles language gains ability put constraints relation directions customary semantic data models 
example cont 
state professor teach course means assertion professor course description logics conceptual data modeling possibility referring inverse attribute ruled object oriented models 
strongly limits expressive power data model pointed papers see ago 
hand recall inverse roles included standard cb 
support data modeling logical formalization data models terms description logics rst step development logic modeling tools support database designer activity certain tasks traditional case tools left responsibility designer 
section rst discuss tasks performed description logic system relying reasoning capabilities identifying essential reasoning services system provide 
brie discuss technique reasoning alcqi knowledge bases 
discuss reasoning alcqi capture reasoning services semantic object oriented schemata described 
reasoning tasks data modeling traditional database modeling tools support designer user friendly graphical environment provide means access di erent kinds repositories store information associated elements developed schemata 
tools provide support higher level activities related managing complexity schemata 
particular burden checking relevant properties schemata consistency redundancy left responsibility designer 
di erent ways alcqi knowledge bases may enter database modeling process may system support activity 
knowledge base may result direct translation case tool database schema expressed traditional objectoriented semantic data models 
notice due expressiveness alcqi additional constraints directly expressed source data model may expressed designer included knowledge base order considered reasoning procedures 
knowledge base may constructed managed design tool way completely transparent designer order perform various kinds checks schemata 
logics databases information systems supervising professor sof gradstudent sof professor tof supervising gradstudent ein eof ein eof sof supervising sof eof ein gradstudent inconsistent extension knowledge base shown alcqi may unifying formalism express schemata di erent data models purpose integration 
case additional assertions may added resulting individual schemata order express called interschema constraints cl 
formalization schema terms alcqi provided checking properties ensure correctness optimality design turned reasoning tasks alcqi 
properties addressed 
schema consistency 
schema consistent nonempty database satis es constraints speci ed schema 
problem checking schema consistency arises relatively simple data models er model relations ln dicult solve expressiveness formalism increased 
example consider augmenting er schema new relationship supervising linked role professor role sof gradstudent suitable cardinality constraints 
additionally want impose realistic constraints relationship gradstudent 
additional constraints stated er model expressed translation relationship supervising assertions alcqi 
express advanced courses may enroll graduate students student enrolled advanced courses 
impose professor teach advanced course 
formalization reasonable 
turns knowledge base union assertions figures disjointness assertions stemming translation er schema unsatis able 
order understand consider description logics conceptual data modeling cardinality constraints participation entity relationship pose restrictions number instances 
example enforce legal database state number instances gradstudent number instances rei ed tuples supervising 
constraints appear cycle schema may happen satis ed 
case assumption database contains nite number objects essential 
example cycle constituted gradstudent supervising professor teaching back 
worth emphasizing situations exempli ed unusual practice 
generally dicult discover data base population stage handling inconvenient 
class consistency 
class consistent nonempty extension database satis es schema 
inconsistency class may due design error due constraining 
case designer forced remove inconsistency correcting error relaxing constraints deleting class removing redundancy schema 
observe schema consistency follows consistency classes schema fact consistency class converse general true 
class equivalence 
classes equivalent denote set instances databases satisfy schema 
determining equivalence classes allows merging reducing complexity schema 
worth emphasizing operation practice dicult task 
ability introduce de nitions allows hierarchical structuring schema support re nement approach schema design ensuring consistency 
class subsumption 
class subsumed class databases satisfy schema extension subset extension subsumption allows deduce properties class 
basis classi cation classes appear schema lattice 
classi cation object oriented approach exploited ways modeling process bn 
example suppose extend er schema shown linking relationship supervising role gradstudent role sof student 
cardinality constraints express logics databases information systems supervising gradstudent sof student sof gradstudent supervising student sof sof supervising extension knowledge base shown forces equivalence classes student supervisor graduate student supervises student 
constraints imposed force classes student gradstudent number instances extension gradstudent subset extension student domain assumed nite classes fact equivalent 
say student subsumed gradstudent augmented schema 
observe property may consequences classes schema 
example introduce new subclass course require means course ein eof gradstudent ein basic courses enroll students graduate enrolled student inconsistent 
logical consequence 
property logical consequence schema holds databases satisfy schema 
properties considered form constraints expressed schema de nition language 
determining logical consequence basis types reasoning description logic system provide 
particular reasoning tasks considered rephrased terms logical consequence 
example class inconsistent schema constraint logical consequence assertions schema 
logical consequence useful hand reduce complexity schema removing constraints logically follow ones hand explicit properties implicit schema enhancing readability 
realization reasoning order provide mentioned services rst address decidability relevant reasoning tasks alcqi knowledge bases illustrate method applied perform reasoning tasks description logics conceptual data modeling speci semantic data models object oriented schemata 
way reasoning ectively support designer data modeling activity 
reasoning alcqi 
richness constructs available alcqi addition basic description logic constructs includes inverse roles quali ed number restrictions cyclic assertions reasoning knowledge base nontrivial task 
recall data modeling setting interested nite model reasoning 
observe reasoning tasks immediately reduced fundamental problem checking satis ability single atomic concept 
fact knowledge base satis able satis able implies inclusion assertion satis able sucient treat satis ability atomic concept arbitrary concept expression satis able newly introduced atomic concept satis able fa cg 
checking satis ability single atomic concept alcqi knowledge base done exploiting technique developed cal 
method extends developed cln simpler logic construction particular system linear inequations search particular acceptable solutions see cal full details 
size worst case doubly exponential size search acceptable solutions done polynomial time size system 
obtain decision procedure reasoning tasks works deterministic double exponential time 
notice case discussed cln schema contains equality assertions certain constructs restricted way negation allowed front atomic concepts number restrictions non quali ed form size system kept single exponential size case particular interest basic constructs semantic object oriented data models expressed language 
discussion optimization techniques proposed framework cl 
reasoning semantic object oriented data models 
decidability reasoning alcqi characterization semantic object oriented data models developed sections provides method reason data models 
particular consistency entity er schema rephrased problem checking concept corresponding satis able translation schema 
analogously subtyping object oriented schemata checking type denotes subset logics databases information systems type legal instance schema accomplished checking subsumption translated type expressions follows translation schema 
type consistency checking type consistent legal instance schema reduced concept consistency 
number attempts previously characterize reasoning problems devise reasoning techniques semantic cfp ln dl hk object oriented data models ak bs bn 
signi cant reasoning dependencies relational model see cfp ck gm ahv tight relationship framework addressed 
respect reasoning entity relationship schemata previous ctf ln addressed expressive formalisms reasoning techniques description logics provide extensions signi cantly expressive framework 
similar considerations apply respect proposals perform type consistency inheritance reasoning object oriented data models 
example type consistency type subsumption algorithms bn expressive object oriented formalism allows de nition classes means necessary sucient conditions extended order take account union types inverse attributes 
identifying reasoning alcqi basis reasoning semantic object oriented data models able combine features approaches retaining decidability reasoning problems 
combination language constructs rst time taken consideration regard reasoning data models negation disjunction 
clearly generality leads high computational complexity order proposed approach feasible practical setting analysis required scope 
proposed approach provide uniform basis reasoning semantic object oriented data models 
uni ed view formalisms conceptual data modeling adopting language description logics common basis 
logics originated formalization frame systems semantic networks provide expressive power give translation popular semantic object oriented data modeling languages 
feature description logics expressiveness language associated reasoning capabilities related set constructs admitted language 
comparison data modeling formalisms done terms constructs needed order enable translation description logics 
description logics framework data modeling number consequences addressed 
shows semantic object oriented data modeling formalisms commonalities distinguishing features 
second seen modeling frameworks enriched including constructs description logics providing additional expressive capabilities 
third discussed reasoning methods developed description logics provide basic reasoning services needed support data modeling process 
acknowledgments partly funded esprit ltr project foundations quality dwq progetto informatica progress italian research council 
abr abrial 
data semantics 
ko editors data base management pages 
north holland publ 
amsterdam 
acs alessandro francesca giovanni soda 
describing database objects concept language environment 
ieee transactions knowledge data engineering 
ago albano ghelli orsini 
relationship mechanism strongly typed object oriented database programming languages 
proc 
th int 
conf 
large data bases vldb pages 
ahv serge abiteboul richard hull victor vianu 
foundations databases 
addison wesley publ 
reading massachussetts 
ak serge abiteboul paris kanellakis 
object identity query language primitive 
proc 
acm sigmod int 
conf 
management data pages 
baa franz baader 
automata theory characterizing semantics terminological cycles 
annals mathematics arti cial intelligence 
logics databases information systems bcn carlo batini stefano ceri navathe 
conceptual database design entity relationship approach 
benjamin cummings publ 
menlo park california 
martin buchheit francesco donini werner nutt andrea schaerf 
terminological systems revisited terminology schema views 
proc 
th nat 
conf 
arti cial intelligence aaai pages 
bds martin buchheit francesco donini andrea schaerf 
decidable reasoning terminological knowledge representation systems 
journal arti cial intelligence research 
bhr bl 
editors 
sorts types arti cial intelligence 
number lecture notes arti cial intelligence 
springer verlag 
bn sonia bergamaschi bernhard nebel 
acquisition validation complex object database schemata supporting multiple inheritance 
applied intelligence 
bor alexander borgida 
type systems knowledge representation natural semantics speci cations description logics 
journal intelligent cooperative information systems 
bor alexander borgida 
description logics data management 
ieee transactions knowledge data engineering 
bs ronald brachman james schmolze 
overview kl knowledge representation system 
cognitive science 
bs sonia bergamaschi claudio 
taxonomic reasoning conceptual design 
acm transactions database systems 
bw alexander borgida 
adding functional dependencies description logics 
proc 
th int 
conf 
deductive object oriented databases dood 
cal diego calvanese 
finite model reasoning description logics 
proc 
th int 
conf 
principles knowledge representation reasoning kr pages 
morgan kaufmann los altos 
cal diego calvanese 
unrestricted finite model reasoning classbased representation formalisms 
phd thesis dipartimento di informatica sistemistica universit di roma la sapienza 
cb cattell douglas barry editors 
object database standard odmg 
morgan kaufmann los altos 
diego calvanese giuseppe de giacomo maurizio lenzerini 
structured objects modeling reasoning 
proc 
th int 
conf 
deductive object oriented databases dood number lecture notes computer science pages 
springer verlag 
cfp marco casanova ronald fagin christos papadimitriou 
inclusion dependencies interaction functional dependencies 
journal computer system sciences 
che chen :10.1.1.123.1085
entity relationship model uni ed view data 
acm transactions database systems march 
ck cosmadakis kanellakis 
functional inclusion dependencies graph theoretical approach 
kanellakis preparata editors advances computing research vol 
pages 
jai press 
cosmadakis kanellakis vardi 
polynomial time implication problems unary inclusion dependencies 
journal acm january 
cl tiziana catarci maurizio lenzerini 
representing interschema knowledge cooperative information systems 
journal intelligent cooperative information systems 
cl diego calvanese maurizio lenzerini 
making object oriented schemas expressive 
proc 
th acm sigact sigmod sigart sym 
principles database systems pods pages 
acm press addison wesley 
cl diego calvanese maurizio lenzerini 
interaction isa cardinality constraints 
proc 
th ieee int 
conf 
data engineering icde pages 
ieee computer society press 
cln diego calvanese maurizio lenzerini daniele nardi 
uni ed framework class representation formalisms 
proc 
th int 
conf 
principles knowledge representation reasoning kr pages 
morgan kaufmann los altos 
logics databases information systems cln diego calvanese maurizio lenzerini daniele nardi 
foundations class representation formalisms 
technical report dipartimento di informatica sistemistica universit di roma la sapienza 
ctf marco casanova luiz antonio 
enforcing inclusion dependencies integrity 
proc 
th int 
conf 
large data bases vldb pages 
giuseppe de giacomo maurizio lenzerini 
concept language number restrictions xpoints relationship calculus 
proc 
th european conf 
arti cial intelligence ecai pages 
dl giuseppe di battista maurizio lenzerini 
deductive entityrelationship modeling 
ieee transactions knowledge data engineering 
francesco donini maurizio lenzerini daniele nardi werner nutt 
complexity concept languages 
proc 
nd int 
conf 
principles knowledge representation reasoning kr pages 
morgan kaufmann los altos 
fer 
cardinality concepts entity relationship modeling 
proc 
th int 
conf 
entity relationship approach er pages 
gm john jack minker 
numerical dependencies 
gallaire minker 
nicolas editors advances database theory ii 
plenum publ 
new york 
gm john jack minker 
inferences numerical dependencies 
theoretical computer science 
hb bernhard hollunder franz baader 
qualifying number restrictions concept languages 
technical report rr deutsches forschungszentrum ur intelligenz dfki kaiserslautern germany 
abridged version appeared proc 
nd int 
conf 
principles knowledge representation reasoning kr 
hk hull king 
semantic database modelling survey applications research issues 
acm computing surveys september 
richard hull 
managing semantic heterogeneity databases theoretical perspective 
proc 
th acm sigact sigmod sigart sym 
principles database systems pods 
kim won kim 
object oriented databases 
mit press 
kl won kim frederick lochovsky editors 
object oriented concepts databases applications 
acm press addison wesley new york 
klw michael kifer georg lausen james wu 
logical foundations object oriented frame languages 
journal acm 
fritz lehmann editor 
semantic networks arti cial intelligence 
pergamon press oxford 
ln maurizio lenzerini paolo 
satis ability dependency constraints entity relationship schemata 
information systems 
lns maurizio lenzerini daniele nardi maria simi editors 
inheritance hierarchies knowledge representation programming languages 
john wiley sons 
mm 
classes instances 
journal intelligent cooperative information systems 
bernhard nebel 
terminological cycles semantics computational properties 
john sowa editor principles semantic networks pages 
morgan kaufmann los altos 
pss barbara klaus dieter schewe joachim schmidt 
term subsumption type constructors 
yesha editor proc 
int 
conf 
information knowledge management cikm pages 
sch klaus schild 
terminological cycles propositional calculus 
proc 
th int 
conf 
principles knowledge representation reasoning kr pages 
morgan kaufmann los altos 
sow john sowa editor 
principles semantic networks 
morgan kaufmann los altos 
ss manfred schmidt schau gert smolka 
attributive concept descriptions complements 
arti cial intelligence 
logics databases information systems teo 
database modeling design entityrelationship approach 
morgan kaufmann los altos 
tha bernhard thalheim 
fundamentals cardinality constraints 
tjoa editors proc 
th int 
conf 
entity relationship approach er pages 
springerverlag 
tha bernhard thalheim 
fundamentals entity relationship model 
springer verlag 
ye christine parent stefano spaccapietra 
cardinality consistency derived objects dood systems 
proc 
th int 
conf 
entity relationship approach er number lecture notes computer science pages 
springer verlag 
