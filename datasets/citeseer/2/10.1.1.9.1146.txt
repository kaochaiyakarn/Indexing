chapter benchmarking java virtual architecture spec jvm benchmark suite david gregg department computer science trinity college dublin ireland 
david gregg cs tcd james power department computer science national university ireland ireland 
james power may john waldron department computer science trinity college dublin ireland 
john waldron cs tcd chapter study spec jvm benchmark suite dynamic platform independent level 
results describe uence class library code relative importance various methods suite sizes local variable parameter operand stacks 
examine dynamic bytecode instruction usage frequencies discuss relevance 
uence choice java source bytecode compiler shown relatively insigni cant 
results implications coverage aspects spec jvm benchmark suites performance java bytecode compilers design java virtual machine 
keywords java virtual machine spec jvm benchmark suite instruction usage frequency method execution frequency 
java paradigm executing programs stage process 
firstly source converted platform independent intermediate representation consisting bytecode information stored class les lindholm yellin 
second stage process involves hardware speci conversions jit hotspot compiler particular hardware question followed execution code 
research sets perform dynamic analysis platform independent bytecode level investigate useful results gained 
order test technique spec jvm benchmark suite spec 
investigation bytecode level particularly suited suites spec jvm source code supplied applications 
remainder chapter organised follows 
section discusses background including rationale bytecode level dynamic analysis test suite 
section presents method level view dynamic pro le section pro les method stack frame sizes 
section presents detailed bytecode level view applications section discusses uence compiler choice gures 
section concludes chapter 

background related increasing prominence internet technology widespread java programming language java virtual machine jvm important position study compilers related technologies 
date research concentrated main areas static analysis java class les purposes optimisation rai compression software metrics cohen gil extraction object models jackson performance bytecode interpreter yielding techniques just time jit compilation adl tabatabai hotspot centered compilation sun microsystems 
see survey 
chapter presents platform independent dynamic analysis spec jvm suite including data related bytecode instruction usage method frequencies stack frame pro les 
bytecode analysis measures bytecode interpreted benchmarking java virtual architecture interference jit compilation machine speci issues 
type analysis help clarify potential impact data gained static analysis provide information scope coverage test suite act basis machine dependent studies 
production bytecode jvm course limited single java bytecode compiler 
variety di erent java compilers available compilers extensions variations java programming language languages ei el ml benton targeted jvm 
previous studied impact choice source language dynamic pro les programs running jvm waldron choice compiler pro les java grande benchmark suite daly 
compiler comparisons chapter help calibrate studies 
spec jvm benchmark suite programs study taken spec jvm benchmark suite spec 
spec jvm suite designed industry standard benchmark suite measuring performance client side java applications main programs suite 
modi ed lempel ziv compression method lzw db performs multiple database functions memory resident database jack java parser generator pccts javac java compiler sun jdk 
jess expert shell clips expert shell system mpeg decompresses iso mpeg layer audio les mtrt ray tracer threads rendering scene number studies spec jvm benchmark suite 
spec provides speed comparisons suite di erent java platforms examines speed impact various optimisations 
uses spec jvm suite examination prediction rate achieved invoke target predictors 
li radhakrishnan discuss low level timing cache performance suite 
shuf looks cache misses perspective spec jvm programs memory behaviour 
theme investigated depth studies allocation behaviour spec jvm suite perspective memory management 
shuf zhang seltzer note spec jvm suite may suitable assessing types java applications 
bowers analyses spec jvm suite dynamic bytecode level analysis similar data related method usage compiler di erences 
spec jvm suite just possible benchmarks suites java 
similar suite java grande forum benchmark suite bull bull studied daly 
micro benchmarks java include ca richards deltablue wolczko 
measure small repetitive operations felt results typical java applications 
reason larger suites designed test java threads server side applications spec java business benchmarks java grande forum multi threaded benchmarks ibm java server benchmarks ne included 
methodology data chapter gathered running spec jvm programs independently modi ed jvm 
jvm ka wilkinson independent cleanroom implementation jvm distributed gnu public license 
ka built emit debugging information modi ed source collect information directly suited purposes 
version ka 
approaches tracing execution java programs include bytecode level instrumentation lee special purpose jvms sun tracing jvm wolczko ibm jikes research virtual machine development jalape virtual machine alpern 
noted measurements chapter ka class library 
library compliant sun jdk may course di er java class libraries 
subsequent sections distinguish code ka class library spec code bytecodes spec jvm benchmark suite 

dynamic method execution frequencies section pro le spec jvm methods provide logical source modularity source code level possible unit granularity hotspot analysis sun microsystems armstrong 
noted benchmarking java virtual architecture program total cl cl methods native jess db javac mpeg mtrt jack average table 
measurements total number method calls spec jvm applications 
shown percentage total class library percentage total class library native methods 
gures include calls native methods excludes calls native methods 
program java method calls bytecodes executed number cl number cl jess db javac mpeg mtrt jack ave table 
measurements java method calls bytecodes executed spec jvm applications 
percentage calls bytecode instructions class library shown 
cases native methods excluded 
jess db javac mpeg mtrt jack io lang net util table 
calls non native methods class library 
table shows percentage class library methods called api packages 
jess db javac mpeg mtrt jack io lang net util table 
bytecode instructions executed class library 
table shows percentage class library bytecode instructions executed api packages 
gures usual time analysis radhakrishnan spec jvm suite bull bull java grande suite 
analysis carried platform independent level track method calls activities native methods 
table shows measurements total number method calls including native calls running spec jvm applications 
programs studied average methods class library methods implemented native code 
benchmark suite written java possible conclude native methods class library 
table interpreted carefully method frequency table bytecode usage may correlate eventual running times 
gures left part table show measurements java method calls excluding native calls 
right part table shows number bytecodes executed application 
method calls directed methods spec suite bytecodes executed class library 
signi cant di erence java grande applications bull spend time outside class library 
suggests mixed mode compiled interpreted systems pre compile class library methods native format ective improving running time spec jvm programs 
table shows dynamic measurements java api package method call percentages table shows api package bytecode percentages 
care taken considering tables shown table total number calls bytecodes represented percentages varies considerably applications 
percentages table table broadly similar implying class library methods execute similar numbers bytecodes 
table presents contrasting analyses method usage 
left part table ranks methods frequency benchmarking java virtual architecture 
average dynamic bytecode percentages top methods terms bytecodes executed 
averages taken applications methods bytecodes application second bytecodes 
called run time 
right part table hand ranks methods proportion total executed bytecodes account 
gures left related method reuse factor described radhakrishnan proposed indication bene ts obtained jit compilation 
suggest di erence rankings frequency invocation proportion bytecodes executed shows method call gures give accurate picture program spending time 
di erence striking left part show similar distribution ort top methods right part clearly shows completely di erent methods compressor compress decompressor decompress account majority bytecodes executed 
result highlights danger naive approach determining hot methods java program terms frequently called methods 
danger expensive method example large matrix multiplication invoked dominates running time 
gures show may little correlation frequency invocation running time spent method 
summarises information right hand side table 
average top methods account bytecodes executed 
vital methods optimised invoked handful times 

dynamic stack frame usage analysis java method executes allocated stack frame contains array holding actual parameters variables declared method 
instance methods slot pointer rst position array 
array referred local variable array variables declared inside method called temporary variables 
section examine dynamic size array division parameters temporary variables maximum size operand stack method execution 
having impact memory usage java program size implications possible usage specialised load store instructions exist rst slots array 
table shows dynamic percentages local variable array sizes divides parameter sizes temporary variable array sizes 
nding stands absence zero parameter size methods applications 
spec jvm applications zero parameter methods appear zero percentages swamped methods high bytecode counts applications non zero parameter sizes 

dynamic bytecode execution frequencies section detailed view dynamic pro les spec jvm programs studied considering frequencies di erent bytecodes 
gures help provide detailed description nature operations performed program give picture aspects jvm tested suite 
order study bytecode usage programs possible calculate average bytecode frequency ik jk ik number times bytecode executed execution program number programs averaged 
benchmarking java virtual architecture method call method instruction count compress code table compress compressor compress compress output bu er compress decompressor decompress compress input bu er compress compressor output compress code table set compress input bu er compress decompressor compress decompressor jess method call jess method instruction count jess get jess node jess value equals jess equals jess equals jess value equals jess size jess token data equals java util hashmap 
nd jess get db method call db method instruction count java util vector elementat java lang string java lang string db database shell sort java lang math min java util vector elementat java util vector java util vector java util vector hasmoreelements java lang math min javac method call javac method instruction count java io bu read java io bu read javac read javac read java util hashmap 
nd java lang string hashcode java lang object equals java lang string replace java lang object 
java lang string equals mpeg method call mpeg method instruction count mpegaudio mpegaudio mpegaudio read mpegaudio mpegaudio mpegaudio lb read mpegaudio cb dm mpegaudio cb dm mpegaudio cb cm mpegaudio tb dm mtrt method call mtrt method instruction count raytrace point getx raytrace intersect raytrace point gety raytrace raytrace point raytrace point combine raytrace face raytrace point getx raytrace ray raytrace face jack method call jack method instruction count java lang object 
java util hashmap java util vector size jack move java util vector 
java util vector java util hashmap access java util vector java util hashmap 
nd jack table 
dynamic method execution frequencies spec jvm programs excluding native methods 
gures right show percentage total method calls method 
gures left show percentage total bytecodes executed method 
names methods mpeg non alphanumeric characters 
local variable array size size jess db javac mpeg mtrt jack ave parameter size temporary variable size table 
bytecode dynamic percentages local variable array sizes temporary parameter sizes spec jvm programs 
local variable array parameter sizes include non static methods 
approximation bytecode usage typical spec jvm program 
purposes study bytecodes split categories java virtual machine speci cation lindholm yellin 
assigning instructions behave similarly groups possible describe clearly happening 
table summarised 
noted waldron lo benchmarking java virtual architecture 
summary dynamic percentages category usage applications spec jvm suite 
jess db javac mpeg mtrt jack ave local load object elds conditional branch push const method return method invoke local store array load arithmetic stack misc unconditional branch array store object manage logical boolean array manage logical shift comparison conversion table jump subroutine monitor table 
dynamic percentages category usage applications java spec jvm suite 
jdk jikes jess db mtrt avg table 
total spec dynamic bytecode usage increases 
compiler gures show percentage increase total number bytecode instructions executed compared distributed spec bytecodes 
cal load push const local store instruction categories account close instructions executed property instruction set irrespective compiler source language 
seen table local load push const local store giving total instructions moving data local variable array constant pool operand stack 
worth noting practice loads dynamically executed roughly times stores 

comparisons dynamic bytecode usage di erent compilers section consider impact choice java compiler dynamic bytecode frequency gures 
java relatively unusual compared say optimisations implemented source program compiled bytecode bytecode executed speci jvm 
consider optimisations implemented compiler level may considered platform independent taken account study bytecode frequencies 
programs spec jvm suite supplied bytecode format refer programs section spec 
java source code javac jack mpeg supplied part spec jvm suite remaining programs compiled compilers jdk sun javac compiler standard edition jdk build jikes ibm jikes compiler version borland compiler java gen generic java version aug bytecode programs distributed part spec jvm suite originally compiled compiler sun jdk 
early java compilers contained aggressive optimisations benchmarking java virtual architecture compress inst spec 

gen 
jdk 
jikes 
aload aload astore invokevirtual ireturn iload iconst goto return istore iload ifeq iload iconst table 
spec bytecode usage compress di erent compilers 
db inst spec 

gen 
jdk 
jikes 
goto iconst ifeq iload iload table 
spec bytecode usage db di erent compilers 
jess inst spec 

gen 
jdk 
jikes 
goto iconst ifeq ifnull aload put eld iload table 
spec bytecode usage jess di erent compilers 
mtrt inst spec 

gen 
jdk 
jikes 
goto null table 
spec bytecode usage mtrt di erent compilers 
benchmarking java virtual architecture discovered unsafe method inlining 
java systems java inlining abilities javac vastly reduced 
originally compiling spec benchmarks modi ed source code eliminate bytecode case 
compiled ran benchmarks java compiler jdk results identical jdk compiler 
class library recompiled bytecodes excluded dynamic comparisons section 
table shows percentage di erences total spec dynamic bytecode counts recompiled program di erent compilers compared compiled version distributed spec 
remarkable result spec version executes fewer bytecodes code produced widely java compilers 
particular count substantially lower spec cases 
source code tuned particular compiler surprising compilers produce programs bytecodes dynamically 
ideally optimisations implemented compiler described corresponding documentation regrettably case reality 
applications produces signi cantly large bytecode les static analysis di erences les practical 
bytecode level static analysis sucient determining di erences resulted signi cant variance dynamic pro les 
detailed analysis dynamic bytecode execution frequencies carried 
raw statistics table table table table 
row tables corresponds single bytecode instruction shows spec total number times instruction executed original spec suite 
gen jdk jikes increase decrease count dynamic bytecodes executed compiler original spec suite 
average absolute values 
compiler expressed percentage total number bytecodes executed application original spec suite tables sorted descending order 
average di erences greater shown 
notable di erent applications exercising di erent areas instruction set re ected compiler di erences varying degrees 
example signi cant di erences bytecode db jess di erences mtrt 
summarise main di erences exhibited di erent compilers 
method inlining table shows bytecode distributed spec executes far fewer invokevirtual instructions bytecodes produced compilers 
correspondingly compilers shows increase ireturn return instructions methods return control caller 
reason reduction calls spec jdk compiler inlines virtual method calls aggressively 
subsequently unsafe lead bytecodes fail veri cation 
compilers reduced inlining ability 
raises question representative real bytecodes eciency depends unsafe optimisation 
virtual methods called corresponding drop aload instructions corresponding loading object method class 
spec programs show peculiarity redundantly store object local variable immediately load 
results corresponding increase astore aload instructions 
goto gures show di erence comparison goto instructions compilers 
jdk jikes compilers signi cantly fewer goto instruction compilers due better loop structure spec suite improvements 
example naive translation loop form expr stats involve test jump expr unconditional backwards jump stats 
approach taken gen jdk jikes rearrange code just jump loop iteration 
approach taken gen simpler implement results unnecessary goto loop 
remarkable compilers implement really basic optimisation 
benchmarking java virtual architecture addition jdk optimises goto instructions target goto jump gives slight edge jikes 
comparisons addition di erences gotos resulting loop structure smaller di erences resulting type comparison 
compilers gen see reversal order equal equal comparisons equal greater comparisons witnessed instructions ne eq le gt respectively 
generic comparison instructions type java bytecode specialised ifeq instruction comparison zero 
seen table frequencies instructions gen compiler lower compilers price paid correspondingly higher iconst instructions 

chapter investigates platform independent dynamic java virtual machine analysis spec jvm benchmark suite test case 
shown useful information java program extracted intermediate representation level understand ultimate behaviour speci hardware platform 
spec jvm applications signi cant proportion methods called bytecodes executed class library 
signi cant di erence java grande applications small microbenchmarks spend little time class library 
pre compiling class library native representation running programs di erent class library may yield signi cant speed 
constant theme chapter useful information gained platform independent study bytecode level data 
believe borne particular analysis methods table bytecode counts help di erent picture jvm engine spending time 
study raises questions balance optimisation java compilers jvm 
spec compiled spec jvm benchmarks compiler includes potentially unsafe optimisations 
common defer run time taken account spec jvm suite 
furthermore compilers implement simplest optimisations producing code loops goto 
optimisations described previous section relatively trivial impact little bytecode usage frequencies 
clearly run time optimisation techniques essential jvm extra information run time architecture available jvm 
obvious java compilers putting ort generating ecient bytecode arguable jvm may bearing unreasonable part burden performing optimisations 
required determine exactly statically applied optimisations yield signi cant performance improvement range possible jvms 
adl tabatabai cierniak parikh 

fast ective code generation justin time java compiler 
acm sigplan conference programming language design implementation pages montreal canada 
alpern attanasio barton burke cheng choi cocchi fink grove hind hummel lieber litvinov mergen ngo russell sarkar serrano shepherd smith sreedhar srinivasan whaley 

jalape virtual machine 
ibm systems journal 


analysis java class le format 
technical report dept computer science university zurich switzerland 
armstrong 

hotspot new breed virtual machine 
java world 
fink arora 

java server benchmarks 
ibm systems journal 
benton kennedy russell 

compiling standard ml java bytecodes 
rd acm sigplan conference functional programming pages baltimore maryland usa 
bowers 

characterising spec jvm benchmarks java virtual machine 
technical report northeastern university computer architecture research group dept electrical computer engineering boston massachusetts usa 
bull smith davey 

methodology benchmarking java grande applications 
acm java grande conference pages palo alto ca usa 
bull smith davey 

benchmarking java grande applications 
second international conference exhibition practical application java manchester uk 
cohen gil 

self calibration metrics java methods 
technology object oriented languages systems pages sydney australia 


optimizations ei el programs el gnu ei el compiler 
technology object oriented languages systems pages nancy france 
daly horgan power waldron 

platform independent dynamic java virtual machine analysis java grande forum benchmark suite 
joint acm java grande conference pages stanford ca usa 


study allocation behaviour specjvm java benchmarks 
th european conference object oriented programming pages lisbon portugal 
lam qian 

predictability invoke targets java byte code 
nd workshop hardware support objects microarchitecture java austin texas 
takeuchi komatsu nakatani 

design implementation evaluation optimisations just intime compiler 
acm java grande conference pages san francisco ca usa 
jackson 

lightweight extraction object models bytecode 
ieee transactions software engineering 
chan stanley lilja 

techniques obtaining high java programs 
acm computing surveys 
lee 

bit tool instrumenting java bytecodes 
usenix symposium internet technologies systems pages monterey california li john narayanan murthy 

complete system simulation characterize specjvm benchmarks 
international conference supercomputing pages santa fe nm usa 
lindholm yellin 

java virtual machine speci cation 
addison wesley 
ne 

report java platform fastest scalable 
javaworld 

ca 
software www software com cm 
radhakrishnan vijaykrishnan john rubio 

java runtime systems characterization architectural implications 
ieee transactions computers 


compact java binaries embedded systems 
th nrc ibm center advanced studies conference pages toronto canada 
shuf serrano gupta singh 

characterizing memory behavior java workloads structured view opportunities optimizations 
joint international conference measurements modeling computer systems pages cambridge ma usa 
spec 
spec releases specjvm rst industry standard benchmark measuring java virtual machine performance 
press release 
www org osg jvm press html 
sun microsystems 
java hotspot virtual machine 
technical white java sun com products hotspot 
rai hendren sundaresan lam gagnon 

soot java optimization framework 
th nrc ibm center advanced studies conference pages toronto canada 
waldron 

dynamic bytecode usage object oriented java programs 
technology object oriented languages systems nancy france 
wilkinson 

kaffe virtual machine run java code 
www ka org 
wolczko 

benchmarking java richards deltablue 
sun microsystems laboratories www sun com research people mario java benchmarking 
wolczko 

tracing jvm 
sun microsystems laboratories www com technologies 
zhang seltzer 

hbench java benchmarking framework java virtual machines 
acm java grande conference pages san francisco ca usa 
