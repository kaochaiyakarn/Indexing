simulation environment paul fishwick university florida large scale systems typically quite difficult model 
hierarchical decomposition proven successful method managing model complexity refining model components models type lumped model 
systems modeled approach abstraction level best defined different modeling technique 
multimodel approach overcomes limitation illustrate technique fairly simple scenario boiling water 
state phase trajectories implementation simpack simulation toolkit 
provided mechanism building models capable producing answers wide range fidelity 
key words process abstraction combined simulation phase transitions simulation environment modeling large central topic computer simulation 
approaches past concentrated functional coupling hierarchical decomposition alleviate problems associated complex cumbersome models 
techniques partially successful lead manifestation simulation languages methodologies grow fit needs new applications extensions 
approach advocates existing known model types petri networks automata markov models block models model structure multimodel 
process engineering model combining different model types form abstraction network hierarchy 
understand physical system creating model find model limited model answer limited set questions system behavior 
necessary create models link maintaining multi level view system permitting analyst observe system output abstraction levels 
apparently simple physical systems exhibit complex behavior terms models necessary completely define system 
consider pot boiling water author grateful partial funding research florida high technology council 
author address paul fishwick dept computer information sciences university florida bldg 
cse room gainesville fl cis tr tbp discrete event dynamic systems foam water heating element copper pot pot boiling water 
see fig 

model system determine questions ask system 
proceed creating priori assumption system structure 
concentrating temperature history water consider simple linear system structure run trouble soon want ask questions relating happens system exception condition overflow underflow higher level abstraction heating cooling 
significant problem single level models attempt answer narrow set questions models select number people 
convenient create models provide answers children educational setting scientists 
enlarge class answerable questions combine models seamless fashion 
simulation methodology developed concepts model complex systems multiple levels abstraction 
oren defined concept multimodel formalize models containing submodels put effect time 
idea multimodel roots combined simulation modeling 
combined modeling traditionally referred integration discrete event continuous modeling system description 
implemented combined modeling modeling language 
cellier developed approach combined continuous discrete event models implemented language extension 
praehofer extended discrete event system specification devs provide formalism simulation environment specifying combined continuous discrete event models 
previous research combined modeling fueled study approach modeling significantly different build models large scale systems employing modeling techniques proven useful specific abstraction level 
petri nets automata extending types colored petri nets augmented automata mix match types form multimodel 
subscribe idea order model increasingly complicated systems continue extend singular modeling cis tr tbp discrete event dynamic systems approach 
blending approaches warranted 
multimodel approach uses simpack tools depending model types abstraction hierarchy 
simpack collection libraries executable programs computer simulation 
collection different simulation algorithms supported including discrete event simulation continuous simulation multimodel simulation 
purpose simpack toolkit provide user set utilities illustrate basics building working simulation model description 
simulation packages cover areas discrete event continuous 
discrete event methods cater performing modeling queuing networks flexible manufacturing systems inventory practices 
continuous methods normally associated block diagram methods control system engineering 
available software perform types simulation bulk support usually available form 
classic discrete event simulation languages slam extensively past decade continuous languages desire continuous system language derivatives provide adequate support modeling continuous systems form block models 
systems large complex analyst require simulation software support wide variety model types 
solution modeling complex systems simulation languages convert models language 
approach quite different recognize instance resource contention best modeled petri nets queuing problems best modeled queuing graphs continuous systems best modeled engineering block diagrams 
approach provide set tools accommodates direct translation unique graphing approaches callable routines force user think terms single language simulation applications 
believe systems contain model components types different 
perceived need simulation language match real world problems set tested model types developed naturally 
simpack emphasis diversity modeling natural candidate construct 
introducing example boiling water 
section outlines automata levels continuous block model level small petri net model boiling water process 
section formalize algorithm associated executing devs 
examples drawn computer experiments boiling water multimodel illustrated section section presents direction 
example system boiling water overview consider pot boiling water electric heating element 
initially pot filled predetermined level water 
small amount added simulate activity occurs naturally boiling certain foods 
system input control temperature knob 
knob considered cis tr tbp discrete event dynamic systems states ffi ff ambient temperature 
assumptions connection physical system 
input knob turning change time 
input trajectories piecewise continuous possible values 

liquid level height increase liquid starts boil 

liquid starts boil layer foam increases height overflows pot knob turned 

liquid level decreases boiling overflow phases 
create mathematical model start data expert knowledge domain 
data gathered cost effective way model engineering process simplified rely solely heuristics identify model 
analyzing pot boiling water may derive simple causal models individual transitions may knob water getting hotter water getting hotter water boiling 
important facet system modeling choose certain modeling methods require categorization informally specified system components 
key components system model input output state event time parameter 
different modeling methods include components different ways 
instance fsa focuses state state transitions input labeled arc dataflow model hand focuses transfer function input output 
create models review purpose goals simulation 
choose concentrate temporal phase information answer questions sort happen immediately pot boils long take water cool room temperature knob turned ffi 
sections discuss stepwise refinement process create multiple models boiling water system 
refinement procedure shown 
hierarchy representational nature 
define hierarchical organization question answering system facilitated maintaining structure 
question may require information specific layer regardless states layer represent lower level states lumped state carry information addition default information carries representing sub model 
want construct second level abstraction total system take topmost fsa include second level fsa form fsa 
level represents detailed representation state layer 
homogeneous refinements homogeneous refinement refinement model detailed models type 
instance consider printed circuit board 
levels modeled block formalism 
model defined having type block just model type petri net model 
chip level pc board model contain function blocks decomposed cis tr tbp discrete event dynamic systems graphs state state automaton block combined fsa fsa fsa refine refine refine state automaton state automaton state automaton level level level level model refinement procedure 
block networks 
way modeller build hierarchy models having represent model lowest abstraction aggregation level 
displays levels finite state automata boiling water process 
topmost fsa fig 
displays simple state automaton input 
label fsa level fsa 
input discretized knob control 
input occur time facilitate change state 
change input denoted arc fig 
defining state transition accomplished input 
knob turned state cold system moves state cold 
temperature reaches ambient temperature denoted ff system returns cold 
second level includes detailed representation state cold 
combining new fsa fsa create fsa complete model boiling process 
fsa constructed similarly 
note transition condition may refer detailed state specification available current level abstraction 
example transition exception boiling refers phase low 
model building conditions evidence state refinement necessary hierarchy useful model building facilitating question answering variety abstractions 
alternatively modeller may decide terminate refinement process leaving transition non deterministically specified 
decision continue refinement modeling objectives accuracy required computational resources available 
heterogeneous refinement heterogeneous refinement takes homogeneous refinement step loosening restriction equivalent model types 
instance petri net high abstraction level may choose decompose transition block graph cis tr tbp discrete event dynamic systems boiling hw underflow overflow hw hf ht hf ht exception exception cold boiling overflow underflow boiling cooling heating cold cold cold cold boiling homogeneous fsa refinement 
cis tr tbp discrete event dynamic systems cooling boiling cold cooling heating decomposition heating state 
transition fires petri net may drop functional block level 
fsa fig 
choose represent state continuous model 
specifically state define state variables temperature hw height water height foam top water updated 
parameter height pot 
cases hw hw result eventually multimodel coordinated fsa 
low level continuous models defined follows 
cold ff hw 

heating gamma hw 

cooling ff gamma hw gammak 
boiling hw gammak 
overflow boiling constraint 
underflow undefined hw 
system phase denoted phi state variables ffl temperature water 
ffl hw height water 
models exhibit order exponential behaviors rough approximations actual boiling water system 
cis tr tbp discrete event dynamic systems fsa fsa fsa petri net controller fsas 
ffl height foam 
note continuous models share common set state variables 
general state variables may different model 
constants height top pot starting height water poured pot rate constants 
initial conditions phi cold ff hw knob including functional block knowledge create large model called combined defined fsa state containing block model shown fig 

petri network controller demonstrated fsa controlled system heterogeneity afforded blending fsa models block control models may incorporate additional levels model types 
instance new boiling water multimodel created starting fsa primitive 
consider scenario liquid liquids boiling human operator takes mixes liquids separate container 
modeling state fsa controllers drive models 
place petri net serves codify constraint liquids boil operator performs separate function mixing liquids container 
extended petri net tokens attributes color net accept discrete input signal outside system external events occur transitions take arbitrary amount time stochastic timed network 
shows petri net controller purpose 
petri net pn defined follows ffl pnet 
ffl fp cis tr tbp discrete event dynamic systems hw heating hw hf ht underflow overflow cold boiling cooling fsa fsa hw heating hw hf ht underflow overflow cold boiling cooling fsa init mix dt fsas vessels operator 
ffl ft ffl ffl ffl ffl fp fp fp ffl fp fp fp initially petri net state meaning markers places 
inputs petri net inputs represent discrete signals values representing state knob controlling temperature 
places accept discretely sampled input signal outside system tokens possible attributes corresponding heterogeneous refinement petri net specifies transitions refine fsa fsa respectively 
way input petri net corresponds directly input signal fsa fsa likewise transition refined fsa fsa defines states human operator initial state init state mixing liquids mix final state 
specify arbitrary amount time second mixing state time lapse deltat sampled normal probability distribution instance 
displays fsa fsa fsa state spaces fsa fsa fr fs respectively 
state fsa state fsa liquids boiling state 
cis tr tbp discrete event dynamic systems input fsa knob controlling desired temperature output fsa designating current fsa state time determined follows fsa boiling state output token output 
policy illustrated fig 
attaching fsa state names relevant transitions 
position describe multimodel execution petri net controller 
petri net controlled knob input produces colored tokens places knob knob 
colors discrete signal passed transition transition fires 
transition firing petri net controller means systems drops abstraction level fsa fsa parallel 
input signals continue drive fsa moving state state 
fsa state refined continuous block model illustrated section 
combination internal external events causes change fsa state 
fsa produces output enters boiling state fsa fsa time token produced put places depending boiling 
boiling tokens causing fire 
refined fsa execute fsa simulate action human operator case model operator amount time spent mixing liquids 
token produced realized fsa input value representing tokens causes internal state transition mixing state mix fsa mixing takes place deltat multimodel simulation ends 
devs representation fsa controlled better understand operation fsa controller part multimodel simulation formalization devs 
fsa controlled multimodel specified structure fsa models map transit ions ffl fsa finite state automaton states called phases 
input induced transitions phase input phase form external events multimodel 
ffl models set models specified system general formalism earlier 
ffl map mapping states fsa models phase assigned model models intended active model multimodel phase 
ffl transit ions set conditions potentially transition pair phases fsa 
form internal transitions multimodel 
formally transition condition associated phase predicate state set model associated phase map 
set models boiling water fsa controlled multimodel 
step transform hierarchical system structure flat structure cis tr tbp discrete event dynamic systems hw heating hw hf ht underflow overflow cold boiling cooling state automaton controller boiling water multimodel fsa 
collapsing hierarchy 
phase graph notation create graph compressing levels fig 
single level graph 
graph provides fsa coordinator multimodel 
input induced external transitions shown solid arcs fsa 
models set continuous models earlier map shown labeling phases elements models transit ions shown set conditions attached dotted arcs fig 

classical system theory provides strong definitions individual systems system networks little concentration concept event 
events critical study systems classical theory 
simulation researchers zeigler nance extended classical theory formally specify discrete event models roles events state time simulation models 
brief review resulting devs formalism prelude mapping fsa controlled multimodel devs equivalent 
time discrete event systems assumed real valued 
devs structure ffi ta follows ffl input event set 
ffl output set 
ffl sequential state set 
ffl ffi ext thetau external transition function 
js ta total state set model represents state having sequential state elapsed time ffl ffi int internal transition function 
ffl output function 
ffl ta time advance function 
devs formalism stated title discrete event system specification shorthand means specifying general system formalized earlier 
think pictorially box containing process 
box cis tr tbp discrete event dynamic systems accepts inputs produces outputs 
map fsa controlled multimodel fsa models map transit ions devs equivalent follows 
devs defined ffi ta ffl input set fsa 
ffl output set fsa interest 
ffl qm theta hw theta qm common state set models 
ffl theta qm set phases fsa 
note typical element phase state qm typical element total state set 
ffl ffi ext theta defined ffi ext fsa ffi fsa phase fsa enters receives input phase ffi transition function model associated phase map 
formalizes earlier interpretation fsa receives input immediately switches phases state multimodel updated state corresponding elapsed time model control time 
ffl define ta recall set transition conditions associated phase gamma condition internal transition 
gamma time gamma true starts state gamma minimum time gamma ffi true 
ta minimum gamma ranges transitions transit ions 
note minimum conditions satisfied state trajectory starting model 
ffl ffi int defined ffi int ffi phase dictated winning condition phase gamma equal ta 
ffl output function defined terms output currently active submodel interest 
preceding formulation fsa controlled multimodel phases states fsa mapped models 
possible provide concrete representation phases associating subsets states assume minimum defined continuous systems 
applying tie breaking rules necessary 
cis tr tbp discrete event dynamic systems aa continuous state space boiling water system 
common state space qm models 
input participates determining phase input phase jointly determine partitions qm partition blocks placed correspondence phases 
displays common dimensional state space hw models illustrates phase shaded region state space 
table provides formal correspondence phases input values partition blocks 
partition block corresponding pair input value phase 
mapping viewed labeling partition blocks input phase pairs 
case internal event transitions expressed terms boundary crossings partition blocks 
means condition form written membership state partition block input prevailing phase example boiling water example transition condition cheat ing boiling input specified entry boiling table 
transition corresponds reaching boundary plane 
discussion phase space partitioning applies equally petri net controller section 
recall state fsa controller represents partition lower level state space 
consider petri net coordinates fsas state petri net represents partition state space formed cross product state spaces fsa fsa pn state maps point lower level state space product 
pn state meaning fsa boiling state maps region lower level state space defined set simplified formalization section prevailing input assumed stored state detailed formalization explicit component cis tr tbp discrete event dynamic systems heating phase cooling phase boiling phase cold phase undefined aa underflow phase aa overflow phase phase partitions 
cis tr tbp discrete event dynamic systems table partitioning boiling water state space 
phase hw cold oe oe oe cold ff heating ff heating oe oe oe cooling oe oe oe cooling ff boiling boiling overflow overflow oe oe oe underflow oe underflow oe multimodel simulation constructed multi level simulation permits execution multimodel 
boiling water example abstraction levels fsas level containing sets equations block models 
approach encode model input simulator follows 
output type digit 
type output output state variable time trajectory specified output value output state trajectory abstraction level specified output value output input state trajectory output phase trajectory 

output value digit 
conjunction object type 

number states 
number states lowest fsa level 

external fsa transition table line state 
lowest level fsa level boiling water transition function external events 
columns possible input values 

internal table line state 
lowest level fsa transition function internal events 
internal event associated condition integer value assigned condition 
instance condition assigned value 
fsa abstractions 
number fsa abstraction levels boiling water 
cis tr tbp discrete event dynamic systems 
abstraction mapping table line level 
contains mapping lower level higher level fsa states state phase output provided level simulation run 
phases labeled cold heating cooling boiling overflow underflow depending abstraction level assignments cold level exception level 
conditions assigned ff hw assignments multimodel simulator executed data file unix follows 
file contains coordinate values individual run input file 
figures display ffl input trajectory turning knob time period 
chosen random display phase switching 
ffl temperature trajectory vs time 
note temperature rises order lag response step input falls reaching ambient temperature 
temperature levels 
temperature undefined phase changes overflow condition just prior 
ffl water height trajectory hw vs time 
height water starts moves constant slope steps reaches zero level indicating underflow condition 
ffl foam height trajectory vs time 
cis tr tbp discrete event dynamic systems time knob input 
time water temperature 
cis tr tbp discrete event dynamic systems time water height hw 
time foam height hf 
cis tr tbp discrete event dynamic systems time cold cold fsa phase trajectory 
indicates phase trajectory abstraction level fsa 
high level simple system moves state cold cold temperature increases result step input knob 
return phase cold water evaporates completely temperature reduced 
displays phases level fsa plot obtain qualitative explanation system behaves 
system boiling water demonstrate create multimodel containing distinct types models petri net controller fsa controller block 
demonstrates models complex systems constructed networks different model types 
utilizing heterogeneous inter level coupling homomorphic behavior preservation able create solution problem single level model 
multimodel answer questions water start boil long cooling take knob turned time 
bottom approach multimodel design divided total boiling water process distinct phases 
coordination models phases facilitated phase graph associated fsa final level abstraction 
additionally extended single vessel system include vessels containing liquid operation performed liquid vessels entered boiling phase 
addition devs specification provided formalize multimodel concept system theoretic manner 
simpack software toolkit served base contains basic elements various known models petri nets block models automata 
boiling water simulation created simpack tools cis tr tbp discrete event dynamic systems time cold heating cooling boiling overflow underflow fsa phase trajectory 
cis tr tbp discrete event dynamic systems demonstrated section 
simpack available may freely obtained contacting author 
accompanying text including simpack examples nearing completion 
demonstrated multimodel approach system boiling water believe method applicable scenarios different levels abstraction coded model form appropriate levels 
problem semi automating process conceptual non executable object model system converting executable model remains hard problem completely solve problem believe multimodel approach contain inherent solutions wider class dynamic systems problems 
plan making easier simpack users graphically construct window environment 
francois cellier 
combined continuous system simulation digital computers techniques tools 
phd thesis swiss federal institute technology zurich 
francois cellier 
continuous system modeling 
springer verlag 
paul fishwick 
hierarchical reasoning simulating complex processes multiple levels abstraction 
phd thesis university pennsylvania 
paul fishwick 
role process abstraction simulation 
ieee transactions systems man cybernetics january february 
paul fishwick 
abstraction level traversal hierarchical modeling 
bernard 
zeigler maurice oren editors modelling simulation methodology knowledge systems paradigms pages 
elsevier north holland 
paul fishwick 
simpack getting started simulation programming 
winter simulation conference pages arlington va december 
paul fishwick 
integrated approach system modelling synthesis artificial intelligence software engineering simulation methodologies 
acm transactions modeling computer simulation 
paul fishwick 
simulation model design execution building digital worlds 
prentice hall 
published textbook 
paul fishwick bernard zeigler 
multimodel methodology qualitative model engineering 
acm transactions modeling computer simulation 
kalman arbib 
topics mathematical systems theory 
mcgraw hill new york 
cis tr tbp discrete event dynamic systems korn 
interactive dynamic system simulation 
mcgraw hill 
markowitz 
ii programming language 
los angeles ca 
richard nance 
time state relationships simulation modeling 
communications acm april 
oren 
dynamic templates semantic rules simulation advisors 
paul fishwick richard editors knowledge simulation methodology application pages 
springer verlag 
louis michael arbib 
systems theory unified state space approach continuous discrete systems 
saunders philadelphia pa 
shannon 
simulation 
systems modeling pa 
james peterson 
petri net theory modeling systems 
prentice hall englewood cliffs 
herbert praehofer 
systems theoretic formalisms combined discrete continuous system simulation 
international journal general systems 

iv simulation language 
john wiley sons 

simulation slam ii 
press 
thomas 
simulation john wiley 
bernard zeigler 
theory modelling simulation 
john wiley sons 
bernard zeigler 
multi modelling discrete event simulation 
academic press 
bernard zeigler 
devs representation dynamical systems event intelligent control 
proceedings ieee january 
bernard zeigler 
object oriented simulation hierarchical modular models intelligent agents systems 
academic press 
