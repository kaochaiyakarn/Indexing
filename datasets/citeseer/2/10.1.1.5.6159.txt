posted permission siam journal computing 
copyright society industrial applied mathematics 
rights reserved 
general approximation technique constrained forest problems michel goemans david williamson 
general approximation technique large class graph problems 
technique applies problems covering minimum cost vertices graph trees cycles paths satisfying certain requirements 
particular basic combinatorial optimization problems fit framework including shortest path minimum cost spanning tree minimum weight perfect matching traveling salesman steiner tree problems 
approximation algorithms run log time come factor optimal problems 
instance obtain minimum weight perfect matching problem triangle inequality 
running time log time compares favorably best strongly polynomial exact algorithms running time dense graphs 
similar result obtained variants 
derive approximation algorithms np including point point connection problem exact path partitioning problem complex problems 
prize collecting traveling salesman steiner tree problems obtain approximation algorithms improving previously best known performance guarantees respectively 
key words 
approximation algorithms combinatorial optimization matching steiner tree problem joins traveling salesman problem ams subject classifications 


graph function non negative cost function consider integer program min subject ip ffi ae ffi denotes set edges having exactly endpoint integer program ip interpreted special type covering problem need find minimum cost set edges cover cutsets ffi corresponding sets 
minimal solutions ip incidence vectors forests 
shall refer graph problem associated ip constrained forest problem 
lp denote linear programming relaxation ip obtained relaxing integrality restriction variables 
part consider constrained forest problems corresponding proper functions function properties hold symmetry gamma research partially supported darpa contract 
department mathematics mit cambridge ma 
additional support provided air force contract afosr 
school operations research industrial engineering cornell university ithaca ny 
research conducted author graduate student mit 
additional support provided nsf graduate fellowship 
goemans williamson table examples proper functions proper constrained forest problems 
input minimal forests spanning trees js fs paths steiner trees terminals js odd joins ii disjointness disjoint implies 
assume 
interesting families forests modelled ip proper functions 
table indicated examples proper functions corresponding set minimal forests 
spanning tree shortest path steiner tree join problems see section definitions stated proper constrained forest problems modelled ip proper function 
complex combinatorial optimization problems non fixed point point connection problem generalized steiner tree problem proper constrained forest problems 
proper constrained forest problems np complete focus attention heuristics 
heuristic algorithm optimization problem delivers solution guaranteed factor ff optimal said performance guarantee ff 
furthermore runs polynomial time called ff approximation algorithm 
gamma jaj approximation algorithm proper constrained forest problems fv fvg 
algorithm runs min log time jv jej ff inverse ackermann function 
sake analysis implicitly construct feasible solution dual linear program lp prove value approximate integral primal solution factor gamma jaj value dual solution 
proper functions ratio optimal values ip lp upper bounded gamma jaj result contrasted various logarithmic upper bounds ratio optimal values general integer covering problems fractional counterparts johnson lov asz chv atal 
algorithm characterized ways 
adaptive greedy algorithm iteration edge minimum reduced cost selected 
adaptive sense reduced costs updated execution algorithm 
seen primal dual algorithm alternately primal dual updates performed 
approximation algorithm generalizes classical exact approximate algorithms 
applied spanning tree problem reduces kruskal greedy algorithm 
shortest path problem algorithm reminiscent variant dijkstra algorithm uses bi directional search nicholson 
algorithm exact cases 
steiner tree problem obtain minimum spanning tree heuristic variants described literature see 
case generalized steiner tree problem algorithm simulates agrawal klein ravi approximation algorithm 
algorithm general approximation technique instrumental motivating 
particular generalize duality generalized steiner trees proper constrained forest problems 
process linear programming duality explicit provide conceptual simplifications algorithm analysis require contractions recursive calls construct forest subdivisions edges presentation agrawal 
important consequence algorithm turned approximation algorithm minimum weight perfect matching problem edge costs obey triangle inequality 
running time log time faster currently best known algorithms solve problem exactly due gabow gabow tarjan sparse graphs 
addition algorithm improves known approximation algorithms problem running time performance guarantee 
triangle inequality algorithm turned approximation algorithm related problems involving cycles paths trees 
observation allows consider additional problems traveling salesman problem hamiltonian location problems problems 
algorithm extended handle non proper constrained forest problems 
general technique applies np complete problems arising design communication networks vlsi design vehicle routing 
able apply technique prize collecting traveling salesman problem triangle inequality prize collecting steiner tree problem deriving approximation algorithms problems 
rest structured follows 
section describe approximation algorithm proper constrained forest problems 
analysis efficient implementation 
section describe algorithm applied various proper constrained forest problems mentioned 
section show extend algorithm proof techniques problems including prize collecting traveling salesman problem 
discuss previous particular constrained forest problems sections 
conclude section discussion subsequent 

algorithm proper constrained forest problems 

description 
main algorithm shown 
algorithm takes input undirected graph edge costs proper function algorithm produces output set edges incidence vector edges feasible ip 
basic structure algorithm involves maintaining forest edges initially empty 
edges candidates set edges output 
algorithm loops iteration selecting edge distinct connected components merging components adding loop terminates connected components loop finish gamma iterations 
set edges output consists edges needed meet covering requirements 
precisely edge removed components gamma omitted approximation properties algorithm follow way choose edge iteration 
decision greedy construction implicit goemans williamson input undirected graph edge costs ce proper function output forest value lb comment implicitly set ys ae lb find edge cp cq cp cq minimizes ffl ce gammad gammad cp cq feg cr ffl delta cr comment implicitly set yc yc ffl delta lb lb ffl fcp gamma gamma fe connected component gamma feg fig 

main algorithm 
solution dual lp 
dual max delta ys subject ffi ae define active component component 
iteration algorithm tries increase uniformly active component value ffl large possible violating packing constraints ys finding ffl packing constraint tight edge distinct components algorithm add merge components 
alternate view process algorithm tries find edge distinct components minimum reduced cost ffl 
claim algorithm shown behaves exactly manner 
see dual solution generated steps feasible note initially ffi show induction packing constraints continue hold 
notice shown induction vertex long vertices different components ffi edge 
follows iteration increased ffl active component violating packing constraints long ffl delta ffl delta distinct 
largest feasible increase ffl particular iteration formula step 
endpoints edge component sum general approximation technique fig 

snapshot algorithm 
ffi ys increase packing constraints continue hold 
algorithm terminates dual solution constructed algorithm feasible 
preceding discussion ffi note value lb computed steps corresponds value dual solution value dual solution lower bound optimal cost lb provides guarantee performance algorithm specific instance 
furthermore lb analysis evaluate worst case performance guarantee algorithm 
complete claim algorithm behaves described need show edges removed final step algorithm necessary meet covering requirements words need show feasible solution ip 

snapshots algorithm proper function jsj mod shown figures 
snapshots iteration apart 
figures cost edge euclidean distance endpoints 
radius vertex represents value 
thick radii represent active components thin radii inactive components 
region plane defined radii called pulleyblank 
set edges main loop shown set edges output algorithm shown 
see algorithm generalization classical graph algorithms 
shortest path problem corresponds proper function js fs 
algorithm adds minimum cost edges extending paths manner reminiscent nicholson bidirectional shortest goemans williamson fig 

snapshot algorithm iteration 
fig 

set edges main loop terminates 
general approximation technique fig 

final set edges 
path algorithm 
main loop terminates component final step algorithm removes edges path problem jf ffi ffi ys words primal dual feasible solutions obey complementary slackness conditions solutions optimal 
notice edge removal step necessary obtain performance guarantee case statement true general 
minimum cost spanning tree problem corresponds proper function ae ae function algorithm reduces kruskal algorithm components active iteration minimum cost edge joining components selected 
kruskal algorithm produces optimal minimum cost spanning tree algorithm 
solutions produced obey complementary slackness conditions lp induce optimal solutions stronger linear programming formulation spanning tree problem introduced pulleyblank 

analysis 
need show algorithm properties claim 
showing algorithm produces feasible solution turn proving solution factor gamma jaj optimal solution 
assume ensuing discussion set candidate edges selected algorithm forest output algorithm incidence vector edges observation 
gammab 
goemans williamson fig 

illustration lemma 
proof 
symmetry property gamma 
disjointness gamma 
symmetry gamma gamma 
lemma 
connected component 
proof 
construction component edges ffi possibly 
gamma components created removing edges component gamma see 
note case 
note sets form partition gamma disjointness 
observation implies 
theorem 
incidence vector feasible solution ip 
proof 
suppose assume ffi 
components order ffi case lemma disjointness contradicts assumption 
feasible solution 
show algorithm approximation properties claim 
purpose dual solution implicitly constructed algorithm 
lp cost optimal solution lp ip cost optimal solution ip 
obviously lp ip feasible dual solution follows lb lp prove theorem 
theorem 
algorithm produces set edges value lb gamma jaj lb gamma jaj gamma jaj lp gamma jaj ip algorithm gamma jaj approximation algorithm constrained forest problem proper function proof 
know ffi ys exchanging summations rewrite ys delta jf ffi prove theorem show induction main loop ys delta jf ffi gamma jaj ys general approximation technique fig 

illustration claim leaves active 
certainly inequality holds iteration loop initially ys 
consider set components iteration loop 
left hand side inequality increase ffl delta jf ffi iteration 
prove increase bounded increase right hand side gamma jaj ffl delta jc fc done 
basic intuition proof result average degree vertex forest jaj vertices gamma jaj construct graph considering active inactive components iteration vertices edges ffi edges remove isolated vertices correspond inactive components 
notice forest 
claim leaf corresponds inactive vertex 
see suppose leaf associated inactive component edge incident component contains gamma components formed removing edge edges component loss generality say set gamma partitioned components current iteration call see 
vertex leaf edge connects construction 
follows 
know observation gamma construction contradiction 
graph degree vertex corresponding component jffi set vertices corresponding active components jn jc set vertices correspond inactive components 
na na gamma jn jn gamma gamma jn jn gamma goemans williamson inequality holds forest jn jn gamma edges vertex corresponding inactive component degree 
multiplying side ffl obtain ffl na ffl jn gamma ffl jf ffi ffl jc gamma gamma jaj ffl delta jc number active components jaj 
theorem proven 

implementing algorithm 
turn problem implementing algorithm efficiently show algorithm run min log time 
neglect time taken compute discussion compute time problems interest need perform computation times 
implementation details obvious 
example maintain components union find structure vertices 
merging take nff time ff inverse ackermann function 
main algorithmic problems arise selecting edge minimizes ffl iteration finding edges belong consider problems separately 
naive approach finding simply mff time iteration compute reduced cost ce gammad gammad cp cq edge check edge spans different components 
loop operations take time resulting running time main loop gamma iterations 
somewhat careful reduce time taken find minimum edge dense graphs log 
need ideas reduced time bound 
idea introduce notion time algorithm 
time algorithm increment value ffl time main loop 
second idea computing reduced cost edge time loop maintain priority queue edges key edge time reduced cost expected zero 
know components edge endpoints active inactive assume activity inactivity continue indefinitely easy compute time course activity component change occurs merged component edges incident component affected 
case recompute key incident edge delete element old key reinsert new key 
idea need lower time bound need maintain single edge components 
edge components edges reduced cost greater may removed consideration altogether 
combining ideas get algorithm main loop calculate initial key value edge insert edge queue time log 
time loop find minimum edge extracting minimum element queue 
delete edges incident queue 
component different update keys edges select general approximation technique edge minimum key value reinsert queue 
components point time iteration queue insertions deletions yielding time bound log iteration log entire loop 
compute iterate components component root tree vertex put leaf tree separate list compute value leaves 
edge joining vertex parent discarded value set vertices subtree 
computed value children vertex concatenate lists children add list compute vertices list 
continue process examined edge tree 
edges process takes time 

applications algorithm 
section list problems algorithm applied 
generalized steiner tree problem 
generalized steiner tree problem problem finding minimum cost forest connects vertices generalized steiner tree problem proper constrained forest problem exists pg 
case approximation algorithm performance guarantee gamma fi fi fi fi fi fi simulates algorithm agrawal klein ravi 
algorithm approximation algorithm problem 
problem reduces classical steiner tree problem 
long time best approximation algorithm problem performance guarantee gamma survey see winter zelikovsky obtained algorithm 
improved approximation algorithm zelikovsky ideas proposed berman 
performance guarantee algorithm shown tight problem 
algorithm reduces standard minimum cost spanning tree heuristic see goemans bertsimas 
heuristic produce solutions cost gamma times optimal cost shown 
join problem 
subset vertices join problem consists finding minimum cost set edges odd degree vertices degree vertices edmonds johnson shown join problem solved polynomial time formulated linear program lp proper function js odd 
edge removing step algorithm guarantees solution produced join see 
algorithm obtain gamma jt approximation algorithm join problem 
performance guarantee algorithm tight join problem 
shows example vertices minimum cost join cost ffl solution produced algorithm cost yielding worstcase ratio approximately gamma clearly example extended larger numbers vertices arbitrary set jt join problem reduces shortest path problem 
algorithm exact case gamma jt 
minimum weight perfect matching problem 
minimum weight perfect matching problem problem finding minimum cost set non adjacent edges goemans williamson cover vertices 
problem solved polynomial time original primal dual algorithm discovered edmonds 
fastest strongly polynomial time implementation edmonds algorithm due gabow 
running time log 
integral costs bounded best weakly polynomial algorithm runs nff log log nc time due gabow tarjan 
algorithms fairly complicated fact time consuming large instances arise practice 
motivated search faster approximation algorithms 
reingold tarjan shown greedy procedure tight performance guarantee general non negative cost functions 
plaisted reingold plaisted proposed min log log time approximation algorithm instances obey triangle inequality 
algorithm tight performance guarantee log 
shown gabow tarjan exact scaling algorithm matching problem obtain approximation algorithm minimum weight perfect matching problem 
original exact algorithm runs log time resulting approximation algorithm runs log log 
vaidya obtains ffl approximation algorithm minimum weight perfect matching instances satisfying triangle inequality 
algorithm runs log log ffl time 
algorithm proper constrained forest problems approximate minimum weight perfect matching problem edge costs obey triangle inequality 
algorithm proper function parity jsj jsj odd jsj 
function join problem 
algorithm returns forest components size 
precisely forest join vertex odd degree vertex degree parity argument edge adjacent vertex deleted resulting components size 
edge deleted final step algorithm 
forest transformed perfect matching increase cost repeatedly edges vertex degree replacing edges edge 
procedure maintains property vertices odd degree 
iterations vertex degree 
iteration takes time procedure gives approximation algorithm weighted perfect matching runs log time performance guarantee gamma performance guarantee algorithm tight problem shown 
point point connection problems 
point point connection problem set fc sources set fd destinations graph need find minimum cost set edges source destination pair connected 
problem arises context circuit switching vlsi design 
fixed destination case required connected special case generalized steiner tree problem fc non fixed destination case component forest required contain number sources destinations 
problem np complete 
non fixed case proper constrained forest problem js general approximation technique fig 

worst case example join matching 
graph gives instance plain edges cost dotted edges cost ffl edges cost 
graph solution 
graph set edges constrained forest algorithm graph shows bad possible edges matching 
cj js dj 
problem obtain gamma approximation algorithm 
exact partitioning problems 
exact tree cycle path partitioning problem find minimum cost collection vertex disjoint trees cycles paths size cover vertices 
problems related np complete problems arise design communication networks vehicle routing cluster analysis 
problems generalize minimum weight perfect matching problem component size exactly traveling salesman problem hamiltonian path problem minimum cost spanning tree problem 
approximate exact tree cycle path partitioning problems instances satisfy triangle inequality 
purpose consider proper constrained forest problem function mod 
algorithm finds forest component number vertices multiple cost forest gamma optimal forest 
obviously cost optimal forest lower bound optimal exact tree path partitions 
forest duplicate edge find tour component resulting eulerian graph component 
remove kth edge tour starting edge tour partitioned paths nodes 
choice edges removed choice starting edge accounts cost tour remove edges 
algorithm gamma gamma gamma delta approximation algorithm exact tree path partitioning problems 
produce solution exact cycle partitioning problem add edge joining endpoints path triangle inequality doubles goemans williamson cost solution produced 
claim algorithm gamma gamma gamma delta approximation algorithm cycle problem 
see claim true note linear program linear programming relaxation exact cycle partitioning program function min subject ffi ae dual max delta subject ffi ae know algorithm produces solution feasible dual gamma ys argument shows take set edges produce set edges solution exact cycle partitioning problem gamma gamma gamma ys dual objective function ys lower bound cost optimal exact cycle partition gamma gamma proper functions corresponding non fixed point point connection problem join problem exact partitioning problems form mod integers integer 
extensions 
main algorithm extended number ways handle non proper functions somewhat different integer programming problems 
describe extensions section 

general functions weaken conditions proper function obtain modified gamma approximation algorithm constrained forest problem 
number new problems approximated weaker conditions problems listed 
order solve problems main algorithm modified handle functions symmetric symmetric violating disjointness 
central modifications involve maintaining root vertex component order cope general approximation technique asymmetry maintaining sets vertices connected final solution 
omit discussion extended algorithm algorithm williamson goemans mihail vazirani simplifies subsumes extended algorithm 
williamson shown results extended functions function gamma gamma 
williamson show algorithm somewhat similar algorithm finds solutions ip functions factor gamma optimal 
algorithm implemented polynomial time functions including function property ae problems listed fit category 
see williamson goemans williamson discussion techniques williamson apply problems 
lower capacitated partitioning problems 
lower capacitated partitioning problems exact partitioning problems component required vertices exactly vertices 
lower capacitated cycle partitioning problem variant matching problem 
precisely cases correspond integer binary triangle free binary matchings respectively 
lower capacitated cycle partitioning problem np complete papadimitriou polynomially solvable edmonds johnson complexity open 
khachiyan shown lower capacitated tree partitioning problem np complete 
lower capacitated tree partitioning problem constrained forest problem corresponding jsj 
extended algorithm gives gamma approximation algorithm problem furthermore assuming triangle inequality algorithm turned gamma approximation algorithm lower capacitated cycle partitioning problem gamma approximation algorithm lower capacitated path partitioning problem 
location design location routing problems 
network design vehicle routing problems require levels decisions 
level location special vertices switches design communication networks depots routing vehicles need decided 
typically set possible locations fixed cost associated 
locations depots decided second level deals design routing se 
problems called location design location routing problems 
problems approximated extended algorithm 
example provide gamma approximation algorithm problem need select depots subset vertices graph cover vertices set cycles containing selected depot 
goal minimize sum fixed costs opening depots sum costs edges cycles 
algorithm extended case cycle required vertices 

non negative functions techniques goemans bertsimas provide approximation algorithms functions assuming multiple copies edge solution 
suppose satisfies gamma disjoint goemans williamson 
suppose assumes different non zero values ae ae delta delta delta ae ip denote integer program ip constraint replaced constraint show approximation algorithm ip comes factor ae gammaae gamma ae optimal 
notice worst values max max performance guarantee fmax log fmax 
performance guarantee worse 
algorithm ip works performing iterations main algorithm 
iteration set ae gammai call main algorithm function properties proper function main algorithm 
algorithm returns ae gammai gamma ae gammai copies edge add set edges output 
proof constructing set edges way comes factor ae gammaae gamma ae optimal essentially proof goemans bertsimas 
potentially reduce number calls main algorithm scaling technique introduced agrawal requires blog max iterations 
iteration set blog gammai call main algorithm function blog gammai copies edges resulting add set edges output 
goemans bertsimas proof shown procedure results blog max approximation algorithm 
application allowing max generalized steiner network problem pair vertices connected ij edge disjoint paths 
case want max ij particular problem agrawal showed reduce general case case 
williamson shown approximate ip functions type mentioned edge replication allowed 

prize collecting problems 
prize collecting traveling salesman problem variation classical traveling salesman problem tsp 
addition cost edges penalty vertex goal find tour subset vertices minimizes sum cost edges tour vertices tour 
consider version prespecified root vertex tour loss generality repeat algorithm times setting vertex root 
version prize collecting tsp special case general problem introduced balas 
prize collecting steiner tree problem defined analogously 
standard steiner tree problem seen special case prize collecting steiner tree problem non terminals penalty zero terminals large penalty equal diameter graph 
goemans levi williamson developed approximation algorithms problems 
performance bounds tsp version assuming triangle inequality steiner tree version 
approximation algorithms efficient solution linear programming problem 
problems fit framework problems considered far modelled ip 
main algorithm modified give gamma gamma approximation algorithm prize collecting tsp triangle inequality prize collecting steiner tree problem 
general approximation technique algorithms purely combinatorial require solution linear programming problem 
focus attention prize collecting steiner tree problem section show algorithm tree problem easily modified yield prize collecting tsp algorithm 

prize collecting steiner tree 
prize collecting steiner tree formulated integer program min aev subject pc ip ffi ae aev ae intuitively set set vertices spanned tree selected edges 
linear programming relaxation pc lp integer program created replacing integrality constraints constraints dropping constraint fact including constraint affect optimal solution 
lp relaxation pc lp shown equivalent natural linear programming relaxation prize collecting steiner tree problem algorithm min gamma subject ffi dual pc lp formulated follows max subject pc ffi ae ys ae goemans williamson algorithm prize collecting steiner tree problem shown 
basic structure algorithm similar main algorithm 
algorithm maintains forest edges initially empty 
vertex initially connected component 
components root considered active vertex initially unmarked 
algorithm loops iteration doing things 
algorithm may add edge connected components resulting component contains root inactive active 
second algorithm may decide deactivate component 
intuitively component deactivated algorithm decides willing pay penalties vertices component 
case algorithm labels vertex component name component 
main loop terminates connected components inactive 
iteration sum number components number active components decreases loop terminates gamma iterations 
final step algorithm removes edges possible maintaining properties 
unmarked vertices connected root vertices deactivated component algorithm willing pay penalty vertices 
second vertex label connected root vertex label main algorithm choices algorithm motivated greedy construction implicit solution dual pc 
initially dual variables set zero 
iteration main loop algorithm increases active value ffl large possible violating types packing constraints pc ffi ys ys ae increasing active ffl cause packing constraints tight 
kind constraints tight tight edge connected components current forest add edge second kind constraints tight tight active component case algorithm chooses deactivate claim algorithm shown behaves exactly manner described 
claim follows straightforwardly algorithm construction fact ys iteration 
note algorithm keeps track activity component setting component active 
optimal solutions pc lp pc ip respectively 
obviously ys manner analogous theorem show theorem 
theorem 
algorithm produces set edges set vertices incidence vectors feasible pc ip gamma gamma ys gamma gamma algorithm gamma gamma approximation algorithm prize collecting steiner tree problem 
proof 
hard see algorithm produces feasible solution pc ip non trivial component containing component containing tree 
general approximation technique input undirected graph edge costs ij vertex penalties root vertex output tree includes vertex set vertices comment implicitly set ys ae unmark fvg fvg fvg find edge cp cq cp cq minimizes ffl ce gammad gammad cp cq find minimizes ffl gamma ffl min ffl ffl ffl delta comment implicitly set yc yc ffl delta cr ffl delta cr ffl ffl mark unlabelled vertices label feg fc gamma fc gamma fc cp cq cp cq cp cq cp cq cp cq derived removing edges possible properties hold unlabelled vertex connected vertex label connected vertex label set vertices spanned fig 

algorithm prize collecting steiner tree problem 
construction vertex spanned vertices lies component deactivated point algorithm 
furthermore vertex deactivated component vertices spanned observations plus manner components formed algorithm partition vertices disjoint deactivated components sets maximal labels vertices deactivated component follows ys inequality proven implied gamma gamma ys addition ffi construction algorithm need prove ffi ys gamma gamma ys goemans williamson rewriting terms theorem ys jf ffi ys gamma gamma ys theorem theorem proven induction main loop 
pick particular iteration set active components iteration 
graph formed considering active inactive components vertices edges ffi active edges discard isolated inactive vertices 
denote set active vertices set inactive vertices set active vertices corresponding active sets contained degree vertex notice fv 
iteration increase left hand side inequality ffl na jn increase right hand side inequality ffl gamma gamma jn prove na jn gamma gamma jn note degree vertex corresponding active set zero 
show na gamman gamma gamma jn gamma proof complete 
show leaves active vertices 
suppose inactive leaf adjacent edge inactive component corresponding suppose contain root inactive contain deactivated 
deactivated vertex unlabelled furthermore leaf vertex lie path root vertex connected root 
construction contradiction 
inactive leaf correspond component containing na gamman na gamman gamma gamma gamma gamma jn gamma jn gamma gamma gamma gamma jn gamma inequality holds spanned inactive vertices degree number active components gamma 
algorithm implemented log time techniques main algorithm 
case keep track time expect component deactivate put time priority queue 
difference main algorithm final step edges deleted 
step implemented time perform depth search unmarked vertex root lock edges vertices path 
look deactivated components corresponding labels locked vertices 
contains unlocked vertex perform depth search vertex root lock edges vertices path 
continue process locked vertex deactivated components contain locked vertices 
eliminate unlocked edges 
procedure requires time depth searches 
general approximation technique input undirected graph edge costs ij vertex penalties root vertex output tour includes vertex set vertices apply prize collecting steiner tree algorithm problem instance graph edge costs root penalties 
duplicate edges steiner tree returned form eulerian graph shortcut form tour vertices tour 
fig 

algorithm prize collecting traveling salesman problem 

prize collecting traveling salesman problem 
order solve prize collecting tsp edge costs obey triangle inequality algorithm shown 
note algorithm uses algorithm prize collecting steiner tree problem penalties 
see algorithm gamma gamma approximation algorithm need consider linear programming relaxation problem min aev subject ffi ae linear program relaxation integer program similar pc ip set vertices visited tour 
relax constraint vertex tour visited twice constraint vertex visited twice 
dual linear programming relaxation max subject ffi ys ae ae notice dual similar pc 
dual solution generated algorithm prize collecting steiner tree penalties feasible dual program penalties duality cost optimal solution prize collecting tsp 
solution prize collecting steiner tree problem cost solution prize collecting tsp 
goemans williamson theorem shows gamma gamma ys gamma gamma ys gamma gamma cost solution algorithm gamma gamma optimal 

concluding remarks 
approximation techniques described previous sections applied number related problems appearance preliminary version 
vazirani young showed techniques derive approximation algorithm minimum cost edge connected graph problem 
algorithm performance guarantee equal performance guarantee earlier algorithm frederickson ja ja problem 
klein ravi demonstrated approximation algorithm solving ip proper functions 
building ideas ravi klein williamson goemans mihail vazirani devised approximation algorithm solve ip general proper functions disjointness condition replaced general condition max disjoint performance guarantee algorithm max lower depending values taken algorithm depends showing techniques extended approximate functions defined section 
goemans goldberg plotkin shmoys tardos williamson shown improve performance guarantee algorithm delta delta delta 
gabow goemans williamson shown efficiently implement algorithm williamson consequence implementation gabow log log implementation main algorithm 
implemented approximation algorithm euclidean matching problems 
performance algorithm case better theoretical bounds random structured instances vertices algorithm away optimal 

authors david shmoys extensive comments draft 
agrawal klein ravi trees collide approximation algorithm generalized steiner problem networks proceedings rd annual acm symposium theory computing pp 

appear siam comput 
balas prize collecting traveling salesman problem networks pp 

berman improved approximations steiner tree problem proceedings rd annual acm siam discrete algorithms pp 

goemans levi williamson note prize collecting traveling salesman problem pp 

greedy heuristic set covering problem mathematics operations research pp 

pulleyblank matching problem side constraints discrete mathematics pp 

papadimitriou result appears 
edmonds maximum matching polyhedron vertices journal research national bureau standards pp 

edmonds johnson matching solved class integer linear programs proceedings calgary international conference combinatorial structures general approximation technique applications guy sauer eds gordon breach pp 

edmonds johnson matching euler tours chinese postman mathematical programming pp 

frederickson ja ja approximation algorithms graph augmentation problems siam journal computing pp 

gabow data structures weighted matching nearest common ancestors linking proceedings st annual acm siam symposium discrete algorithms pp 

gabow goemans williamson efficient approximation algorithm survivable network design problem proceedings third mps conference integer programming combinatorial optimization pp 

gabow tarjan faster scaling algorithms general graph matching problems journal acm pp 

goemans goldberg plotkin shmoys tardos williamson improved approximation algorithms network design problems proceedings th annual acm siam symposium discrete algorithms pp 

goemans bertsimas survivable networks linear programming relaxations parsimonious property mathematical programming pp 

goemans williamson general approximation technique constrained forest problems proceedings rd annual acm siam symposium discrete algorithms pp 

appear siam comput 
goemans williamson approximating minimum cost graph problems spanning tree edges operations research letters pp 

khachiyan greedy heuristic minimum weight forest problem operations research letters pp 

johnson approximation algorithms combinatorial problems journal computer system sciences pp 

unger pulleyblank new primal dual matching heuristics research report universitat zu 
unger pulleyblank geometric duality combinatorial optimization mathematik eds vieweg braunschweig germany pp 

appears ibm research report rc 
klein ravi cycles collapse general approximation technique constrained connectivity problems proceedings third mps conference integer programming combinatorial optimization pp 

appears brown university technical report cs 
kruskal shortest spanning subtree graph traveling salesman problem proceedings american mathematical society pp 

laporte location routing problems vehicle routing methods studies golden eds north holland amsterdam pp 

laporte pelletier hamiltonian location problems operations research pp 


li mccormick levi point point delivery connection problems complexity algorithms discrete applied mathematics pp 

lov asz ratio optimal integral fractional covers discrete mathematics pp 

nicholson finding shortest route points network computer journal pp 

plaisted heuristic matching graphs satisfying triangle inequality journal algorithms pp 

reingold tarjan greedy heuristic complete matching siam journal computing pp 

vazirani young primal dual approach approximation algorithms network steiner problems proceedings indo workshop cooperative research computer science pp 

plaisted reingold heuristics weighted perfect matching proceedings th annual acm symposium theory computing pp 

tarjan efficiency linear set union algorithm journal acm goemans williamson pp 

vaidya 
personal communication 
complexity path problems graphs phd thesis universitat 
williamson design approximation algorithms class graph problems phd thesis mit cambridge ma september 
appears tech report mit lcs tr 
williamson goemans computational experience approximation algorithm large scale euclidean matching instances proceedings th annual acm siam symposium discrete algorithms pp 

williamson goemans mihail vazirani primal dual approximation algorithm generalized steiner network problems proceedings th annual acm symposium theory computing pp 

appear combinatorica 
winter steiner problem networks survey networks pp 

zelikovsky approximation algorithm network steiner problem algorithmica pp 

