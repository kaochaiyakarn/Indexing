newscast computing internal report ir cs vrije universiteit amsterdam department computer science november ark jelasity kowalczyk maarten van steen monitoring large computer networks involves aggregation various sorts data distributed network components 
finding extreme values counting discrete observations computing average sum parameter values typical examples background activities provide input monitoring systems 
aspect network management fast reliable information dissemination propagation alarm signals 
novel approach information aggregation dissemination 
concept highly distributed anonymous democratic non deterministic form collaborative information processing newscast computing 
main properties approach scalability robustness adaptivity speed 
underlying protocol simple implemented run huge networks small computing devices mobile phones pda sensors usefulness newscast approach illustrated algorithms finding maximum average values distributed nodes network 
algorithms formally proven converge exponentially fast numerous simulation experiments provide additional insights behavior 
demonstrate applicability network monitoring tasks finding size network counting nodes left joined network system load estimation fast propagation alarms 
internet exponentially growing start 
trend soon partly due developments wireless technology ipv standard enable virtually devices digital heartbeat go online 
internet forming platform wide variety applications ranging entertainment business 
expected number importance distributed applications grow time internet penetrating lives 
managing controlling applications poses new challenges computer science 
internet heterogeneous unreliable huge dynamic 
controlling applications human administrators gradually impossible 
situation difference flying small plane space shuttle 
flown humans anymore due complexity task 
partially supported emerging technologies unit european commission project bison ist jelasity university bologna kowalczyk van steen vrije universiteit amsterdam solving problem control monitoring analysis environment grand scientific challenge 
working goal proposing method specific task aggregating information large highly dynamic distributed environment robust dependable manner 
aggregation mean finding statistics set numeric values distributed wide area application extremal values average sum count variance particular emphasize applicability aggregated statistics network monitoring 
context network monitoring application model 
distributed environment network consisting possibly huge number nodes 
nodes attributes memory size disk size cpu speed network bandwidth current load network dynamic 
nodes join leave furthermore attribute values change 
solution finding aggregates attribute values nodes epidemic protocol developed 
protocol called newscast 
newscast called peer peer protocol 
nodes equivalent run algorithm 
purpose protocol maintain disseminate date information robust self organizing way central intervention possibly dynamically changing large scale environment 
basic underlying idea nodes periodically exchange information including membership information addresses nodes application specific information 
furthermore piece information gets timestamp created remove outdated items 
describe newscast protocol apply calculate aggregates useful network monitoring 
section ii discuss related 
purpose section iii give intuitive key ideas particular possibility application epidemics diffusion calculating aggregates 
ideas elaborated sections 
section iv introduces newscast protocol algorithmic point view followed section demonstrates robustness scalability protocol 
building newscast sections vii viii elaborate ideas introduced section iii theoretical analysis simulation results 
various applications newscast computing network monitoring control section ix 
section concludes 
ii 
related approach network monitoring related sub areas distributed computing 
include 
epidemic protocols epidemic protocols popular publication seminal demers 
completed survey eugster provides excellent field 
epidemic algorithms applied solving practical problems database replication failure detection resource monitoring 
large body theoretical available due general importance understanding epidemics close relation random graph theory 
self organizing topology management countless protocols managing different kinds topologies adaptive fashion 
focus maintain random unstructured topology 
know examples method build random expander graphs 
newscast targeted extremely large dynamic environments 
approach scope closest newscast 
protocol epidemic style information dissemination proactive maintains regular random topology 
resulting communication graph shows significant differences newscast 
difference important communication graph defines crucial constraints possible applications 
aggregation distributed environments field distributed computation aggregates established epidemic protocols 
overview problem 
prominent approach astrolabe hierarchical architecture aggregation large distributed systems 
approach substantially different extremely simple lightweight aimed unstructured highly dynamic environments 
case protocol overhead installation maintenance virtually negligible 
related hierarchical approach 
building hierarchies reduces cost finding aggregates introduces additional overhead having maintain hierarchical topology dynamic distributed environment 
due hierarchical needs extra effort protocols broadcast result continuously network nodes need know result continuously 
discusses approaches spanning tree induction redundant topologies 
closest approach main difference protocols described reactive aggregation initialized certain point result known node 
hard adopt solving research problem continuous network monitoring similarly approaches mentioned 
network monitoring network systems monitoring long part management architectures tend large complex difficult scale wide area systems see example 
new insights led completely decentralized monitoring solutions involving mobile agents 
research scalable systems deploy peer peer technology highly relevant 
siena arguably large scale event notification systems effectively applies combination multicasting content routing efficiently notify events interested parties 
approaches followed siena require network servers installed application level multicasting deployed 
respect interesting scribe 
scribe application level multicasting system built top pastry structured peer peer network 
scribe allows formation topic publish subscribe groups fully dynamic decentralized fashion 
step direction taken 
general purpose information monitoring system client formulate continual queries queries related possibly continuous changes data time 
key idea forever timeout send receive aggregate message send aggregate fig 

protocol run peer 
assumed timer generates timeout event regularly time units 
arbitrary peer monitor data machines involved single query 
query unique identifier scheme fits nicely identifier routing protocols inherent structured peer peer systems 
drawback approach may peers monitoring data machines turn introducing potential scalability bottleneck 
scalable liveness detection proposed 
essence proposed protocol offload number probes single device probing processes 
dynamically organized overlay network letting device probe return addresses processes probed 
approach permit probing process reduce probing frequency informed peers status monitored device changes 
iii 
distributed aggregation basic idea mentioned base aggregation algorithms newscast protocol 
section focus basic idea approach aggregation abstracting away newscast 
consider huge collection nodes node maintains single number goal nodes compute aggregate values fully decentralized way 
algorithm heart aggregation approach executed peer 
assume timer generates timeout event time units 
happens peer selects peer random sends current value waits response 
value updated aggregating response 
light node contacted peer simply computes aggregate incoming value 
focus implementations function aggregate average maximum 
average case aggregate 
show node converges exponentially fast average provided guarantee peers selected randomly 
note algorithm results dynamics random topology 
thinking values concentration substance elementary averaging step equivalent equalization concentrations locations 
motivated analogy call approach diffusion aggregation 
able compute averages fully decentralized manner interesting 
appropriate choice semantics values possible calculate network size sum values variance example initially exactly node holds value hold obvious eventually node able estimate size network maximum case aggregate max 
show node converges super exponentially fast maximum provided guarantee peers selected randomly 
understand dynamics better consider matter node holds value turns maximum speed dissemination true maximum value exactly effectively broadcast push pull epidemic protocol 
motivated observation call approach epidemic aggregation 
iv 
newscast protocol shall call basic entities run newscast protocol network node correspondents 
motivation choice clarified 
newscast protocol responsible functions time 
maintaining possibly large group correspondents care joining leaving members failures membership management 
second responsible special form information dissemination group members call 
protocol extremely simple correspondent knows continuously changing small set peers randomly chosen exchange information 
newscast protocol fully distributed symmetric algorithm run correspondents completely identical 
newscast protocol application provides membership information dissemination services applications 
crucial understand application newscast cooperate words understand interface application newscast 
obviously newscast supports distributed applications 
refer component application running fixed network node agent 
note assumed agents application run identical algorithms 
consider interface correspondent agent running node 
loss generality assume agent exactly correspondent attached 
interface consists callback functions implemented agents 
correspondent asks agent regularly news means callback function 
addition correspondent provides agent news collected peer correspondents agents application callback function news 
architecture illustrated 
correspondent agent correspondent agent news agency wan node wan node application cache cache fig 

conceptual organization newscast application 
application specific data timestamp address cache entry news item fig 

format news items cache entries 
definition counts news application dependent 
agents simply live lives perform computations listen sensors news computations completed information collected provide correspondent news asked 
principal operation correspondent maintains fixed sized cache news items parameter 
agent passes news item correspondent timestamps item adds network address subsequently caches item 
news item consists agent identifier actual news provided agent shown 
correspondents regularly exchange caches follows 
correspondent executes steps time units 
request fresh news item local agent calling 
create new cache entry insert cache 
randomly select accessible peer correspondent network addresses correspondents cache ask peer exchange information 
send cache entries selected peer turn receive peer cache entries items 
pass received cache entries peer agent local agent calling 
merge received entries local cache 
correspondent cache entries subsequently throws away oldest ones keep ones 
merge insert operations cache ensure agent item cache operation timestamp 
selected peer correspondent passive party executes algorithm course peer selection step 
call cycle length 
system synchronized convenient talk cycles protocol simply consecutive wall clock time intervals length counted convenient starting point 
protocol require clocks correspondents synchronized timestamps news items single cache mutually consistent 
achieved follows 
correspondent passes cache sends current local time ta receives cache entries subsequently adds timestamp entry value tb ta effectively normalizing time new entry cached 
assume communication time correspondents smaller method introduces errors exact synchronization necessary solution fully suffices 
note chosen small assumption violated newscast able correctly anyway cycle communication completed protocol 
membership management protocol disseminates correspondent addresses news items submitted agents 
automatically provides membership management functionality 
subscriptions need special sequence communications new correspondent simply initialize cache known correspondent member group start execute protocol 
section see system sensitive subscription patterns tolerates worst case new member subscribes fixed correspondent 
treated failures 
correspondent simply communicating 
outdated information quickly removed system correspondent keep communicating forgotten 
broadcasting important note different epidemic broadcasting flooding difference easily overlooked may lead confusion 
observation proactive initiated single node 
second broadcasting disseminates news item random relatively small group peers 
limited dissemination caused fact eventually news item removed cache favor item 
observations imply deployed broadcasting purposes 
example naive broadcasting scheme agent repeatedly return news called back 
scheme slowly propagate news agents 
better scheme agents store subsequently forward incoming news item requested fresh news 
store scheme effectively mimics flooding algorithm 
sophisticated solution deploy constrained forwarding order avoid nodes receive duplicates 
alternatives discussed 
examples illustrate flexibility allows implementation wide range communication mechanisms computations flexibility computing aggregates explain 
protocol analysis newscast protocol slightly interrelated properties self organizing presence different patterns nodes join un intentionally leave system continue properly operate manual intervention 
effective information disseminated member fast predictable manner 
scalable quality service provided acceptable costs group members large 
robust system tolerate severe damage massive failure nodes 
section empirical evidence newscast protocol properties listed 
important stress approach design developing complex sophisticated protocol provably achieve pre determined list properties 
opted keeping design simple possible analyzing behavior biological physical system 
words goal explore power emergence 
dedicated specifically designed mechanisms example recover network damage react growing network size increasing unreliability 
protocol performs simple operation irrespective circumstances argue reacts appropriately wide variety settings 
experiments consider communication graph defined set participating correspondents nodes graph addresses peer correspondents caches targets directed edges 
words directed edge correspondent address contained cache graph extremely important robustness effectivity information dissemination depend properties 
denote graph cycle graph called knows graph directed edges defined peers correspondents know 
graph regular correspondents cache size outgoing edges provided number correspondents larger 
denote number correspondents examining knows graph interested graph get simply dropping orientation edges motivated fact information exchange performed newscast symmetric matter party initiated connection 
denote undirected version communication graph necessarily regular degree node bootstrapping dynamic environments newscast protocol designed dynamic environments dynamic environment remains 
communication graph constantly changing 
interested important properties graph converge fixed value wide variety starting conditions stable equilibrium respect property 
words self organization observable 
section focus average path length 
value defined averaging minimal path lengths pairs nodes 
property important directly related efficiency information dissemination 
cases convergence crucial 
bootstrapping scenarios new nodes join possibly artificial non random pattern 
case recovery damage 
illustrates cases 
shows convergence network initialized different ways random lattice growing structure 
random initialization fills cache available peer addresses drawn random 
case lattice initialization initial network defined follows 
correspondents 
edges mod 
assuming 
case growing initialization process starts correspondent cycle nodes added cycle 
new nodes initialized single connection oldest node considered worst case scenario network growth maximally unbalanced 
shows convergence radical fluctuation membership 
cycles starting cycle cycle random nodes replaced new nodes 
way number node removals reaches cycles 
new nodes linked single fixed node just case worst case scenario network growth described 
time fixed node removed network new selected 
observed independently pattern subscription initial graph topology average path length quickly converges value 
information dissemination having seen convergent behavior newscast network turn property average path length detail key feature determines efficiency average path length cycle lattice growing random convergence bootstrapping 
bar indicates growth growing case 
average path length cycle response severe damage 
bars indicate damage interval 
fig 

convergence average path length 
experiments see text explanation 
information dissemination 
results obtained undirected communication graph running protocol cycles allow average path length converge 
allow efficient information dissemination average path length small preferably grow logarithmically network size 
shows clearly growth 
observe expected increasing cache size decreases path length 
newscast network modeled random network 
shows average clustering network high 
clustering coefficient node defined proportion number edges neighbors node average path length fig 

average path length function network size cache size 
data obtained starting random topology 
clustering coefficient fig 

clustering coefficients function network size cache size 
data obtained starting random topology 
possible edges 
words node neighbors subgraph induced neighbors edges clustering coefficient edges 
clustering coefficient graph average clustering coefficients nodes 
comparison random graph pair nodes connected probability clustering coefficient exactly smaller values shown random graph average degree approximately undirected newscast graphs 
large clustering coefficient fortunately problematic average path length size largest connected cluster percentage removed nodes remaining nodes fig 

effect random node removal 
data obtained starting random topology 
small 
means information dissemination efficient arbitrary pair nodes separated links 
furthermore section vi show point view applications newscast graph sufficiently approximation random graph 
robustness important property communication network robustness random node removal 
examine undirected version communication graph 
shows newscast network reacts random node removal 
seen cache size practically remaining nodes connected 
seen network remains connected forming large connected component clear small components start disconnect large component 
cache sizes happens removing nodes respectively 
communication costs global communication costs 
cycle length defines wall clock time newscast cycle 
communication cost cycle system depends cache size time units correspondent initiates exactly information exchange session involves transfer cache entries 
size cache entry seen 
fixed sized component news item application dependent 
case aggregation news item generally empty single floating point number 
clearly global communication costs cycle grows linearly network size stays constant perspective single node 
empirical probability number incoming cache exchange requests cycle node poisson fig 

incoming number cache exchange requests cycle node 
empirical probabilities calculated sample generated recording incoming connections fixed node cycle cycles protocol 
communication costs single node observe 
node initiates connection cycle contacted random number peers 
assuming unbiased random cache content easily shown large network size distribution poisson 
shows distribution incoming connections close poisson distribution 
important consequence valid local global costs performance peaks 
communication costs evenly distributed set nodes importantly time node 
feature important advantage point view scalability independently system size correspondent experience predictable load peaks 
vi 
distributed aggregation revisited section introduce basic framework sections vii viii 
sections theoretical results convergence speed algorithm section iii aggregation functions maximum average 
contain experimental results running algorithms top newscast 
cases theoretical analysis assume topology communication network random 
know section newscast network assumption true strict sense due clustering 
purpose empirical analysis validate theoretical results showing newscast network sufficiently random point view aggregation algorithms 
theoretical framework purpose mathematical analysis translate networking terminology mathematical structures concepts 
framework formulate approach vector input times getpair aggregate fig 

cycle aggregation algorithm 
follows 
initial vector numbers 

shall model vector assuming 
independent random variables identical expected values finite variance 
assumption identical expected values strong 
protocols sensitive ordering values permutation initial values statistical behavior remains 
starting random variables 
arbitrary expected values random permutation new value index distribution 
obtain equivalent probability model distribution random variables 
identical 
note assumption independence violated case large networks insignificant extent 
considering network cycle aggregation algorithm wall clock interval time units looked algorithm takes vector parameter produces new vector length 
furthermore consecutive cycles protocol result series vectors 
elements vector denoted 
shows cycle aggregation algorithm 
note practical aspects overlay topology synchronization lack possible node failures modeled properties constraints method getpair 
distributed local nature epidemic protocol underlying model expressed constraint returned pair determined affected global property value vector maximum values instance 
implementation newscast aggregation requires accessible random peer regular time intervals 
peer newscast provide 
requirement expressed method global version algorithm expressed method getpair 
various ways newscast implement methods 
important observation newscast performs different functions 
handling membership management exchange addresses correspondents exchanging caches 
second disseminating information means news items contained respective caches 
implementation aggregation methods integrated dissemination function newscast kept separate 
weakest integration randomly select peers correspondent current cache return result getpair respectively 
note implementation cycle lengths newscast aggregation independent different 
stronger integration adopt random peer selected newscast protocol aggregation newscast functionality information dissemination 
case data required peer piggybacked caches sent newscast exchange protocol executed 
strongest integration adopt newscast random peer selection information stored peer cache computing aggregation function function aggregate 
remaining part assume simplest weakest integration explicitly stated 
words assume peer selected randomly cache 
assume cycle length newscast aggregation 
show ways implementing aggregation newscast application performance significantly improved news dissemination feature newscast play important role 
vii 
diffusion aggregation discuss case aggregate 
introduce notations empirical statistics linear operations performed vector elements loss generality assume common expected value elements zero 
purpose choice merely simplify expressions 
particular vector elements independent random variables zero expected value 
furthermore elementary variance reduction step selected elements replaced average change sum elements vector cycles 
property important guarantees algorithm introduce errors approximation 
means focus variance 
clearly expected value tends zero tending infinity variance vector elements tend zero correct average approximated locally arbitrary accuracy node 
analysis convergence variance fundamental observations 
lemma vector get replacing vector contains uncorrelated random variables expected value expected value resulting variance reduction 
proof simple calculation fact uncorrelated 
considering intuitive interpretation lemma elementary variance reduction step participating nodes contribute approximately half original contribution expected variance provided uncorrelated 
extreme case maximal correlation variance reduction zero 
seen assumption crucial 
order derive reduction rates particular implementations getpair introduce simplifying assumption 
formula applied 
completely harmless reduces reduction consider large difference insignificant 
simplification serves purpose making formulas elegant 
define random variable number times index selected member pair returned getpair calculation input cycle 
networking terms number peer communications node involved cycle theorem assume getpair properties 
pair values selected index pairs returned call getpair uncorrelated 
random variables 
identically distributed 
denote random variable common distribution 
returned getpair number times selected remaining calls getpair identical distribution 
expected value variance reduction cycle proof proper formal proof long technical informal description sufficient reproduce 
basic idea thinking value quantity material 
equation tells time index selected loose half material value selected peer uncorrelated remaining material divided locations 
assumption observe matter piece original material ends chance loosing half proportion stays original location 
means original material lose half times average expected number selection getpair term 
applying summing terms proof 
result clear plays key role defining fully rate variance reduced cycle 
seen previous section case newscast approximated poisson distribution parameter 


probability distribution describes number times correspondent participates newscast information exchange 
furthermore distribution independent network size 
implementation diffusion averaging top newscast described section vi implies distribution 
substituting expression get 


dynamics newscast protocol define non trivial complex network verify assumptions theorem empirically 
hand seen newscast communication network significant clustering hurt assumption 
hand average path length network low network changes constantly 
properties useful break possible correlations 
illustrates behavior diffusion averaging protocol top newscast 
implementation diffusion averaging described section vi 
cycle corresponds cycle averaging protocol newscast 
newscast network converged starting averaging 
compares observed variance reduction theoretically predicted rate 
network size output single run shown 
see cycle observed rate matches theoretically predicted rate 
due fact values stored node initialized uncorrelated way 
consecutive execution protocol introduces correlation 
clear observed data correlation reduce dramatically threshold approximately 
variance reduction rate acceptable drifts away theoretically predicted rate 
theoretical prediction acceptable accuracy indicates care membership management point view protocol newscast layer provide sufficiently random sampling available peers 
variance reduction cycle fig 

variance reduction rate function consecutive cycles averaging protocol dynamic newscast network 
dotted line theoretically predicted rate 
viii 
epidemic aggregation discuss case aggregate max 
approximate speed maximum known nodes newscast network 
considering simple implementation top newscast described section vi easy see dynamics process completely identical broadcasting means push pull anti entropy epidemic protocol 
reason guaranteed maximum advertised nodes see 
course nodes hold maximal value originally process faster 
assume maximum unique 
simple model push pull epidemic broadcast models push pull epidemic broadcasts 
assume method returns unbiased sample network 
denote probability fixed node know maximum cycle 
maximum unique originally cycle express function clearly node know maximum cycle know cycle peer node chose contact know pull peer nodes knew maximum contacted node push 
formally write equation follows result suggests decreases super exponentially fast 
proportion reached nodes cycle theoretical model fig 

proportion nodes learned maximum function consecutive cycles maximum finding protocol 
points averages runs 
standard deviation shown orders magnitude lower average 
note results fundamental assumption random sample members network available 
original anti entropy protocol assumption holds complete list members node available 
clearly newscast evident assumption fulfilled reasonable accuracy 
reason empirical validation necessary 
shows convergence newscast source random peers 
cases see convergence speed faster exponential 
somewhat surprisingly see convergence faster predicted model 
reason model assumed cycle node communicates value cycle reality possible node contacts peer cycle completed information exchange steps peers cycle passive partner 
way possible learns maximum cycle passes knowledge cycle effect model account 
ix 
applications network monitoring control far introduced concept newscast computing analyzed simple algorithms calculating average finding maximum 
demonstrate algorithms monitoring network size measuring total amount resources distributing alarm signals 
determining size network section iii briefly mentioned possibility finding number nodes network calculating average peak distribution 
distribution node holds value hold estimate network size take closer look method 
cycles fig 

proportion nodes know exact network size function number cycles network size consecutive lines left right correspond networks 
nodes 
averaging algorithm analyzed depth section vii nice properties average node values change number cycles variance dropping rate denotes number cycles slightly smaller see 
words averaging algorithm applied peak distribution node values converge exponentially fast get idea actual performance approach run number experiments idealized averaging algorithm getpair method returns randomly selected nodes 
focused aspects accuracy speed 
looked number cycles affects number nodes know exact size network 
averaging algorithm applied networks size varying nodes 
cycle nodes values rounding equal size network counted 
experiment repeated times results averaged 
shown 
see networks size ranging nodes cycles needed full convergence exact value 
precisely represent real numbers standard bit floats exact value means result rounding closest integer 
quite impressive find exact number nodes help simple averaging algorithm practice smaller accuracy sufficient 
get better insight relation limited accuracy number required cycles run simulations nodes knew approximate network size 
setting runs performed 
results summarized 
see average number required iterations dropped 
notice due fast convergence rate averaging algorithm regularly restarted fresh peak distribution cycles 
way nodes constantly aware network size 
nodes fig 

number cycles needed agents learn approximated network size 
boxes lines lower quartile median upper quartile values 
whiskers lines extending box show extent rest data 
outliers data values ends whiskers 
monitoring total amount resources simple equation nx important implication know find average immediately know find sum 
light results previous sections know ingredients small number cycles arbitrary accuracy 
efficient algorithm finding sum values stored nodes 
context network monitoring means constantly measure total load nodes total capacity disk drives total number files amount data stored monitoring migration agents application aggregation algorithms network maintenance measuring number agents joined network epoch 
epoch mean fixed number cycles 
counting agents joined network simple agent keep bit information joined network current epoch 
epoch sum bits set 
combining information network size calculate number agents left network epoch 
way fluctuation network monitored 
additional mechanism built agent number failures observed single agent exceeds certain threshold agent may rise alarm 
alarm processing example consider problem efficiently broadcasting alarm signal 
mentioned broadcasting just special case computing disseminating maximum value network 
particular 
denotes alarm value generated node 
example assume strongest integration newscast aggregation 
words base aggregation broadcasting values contained cached news items 
called current alarm value passed news item underlying correspondent subsequently stores cache 
likewise correspondent calls passes news items stored cache associated agent 
denotes value th news item agent adjust current value max 

showed broadcasting done super exponentially fast 
dissemination speed comes price nodes receive alarm value 
improve situation age cached news item account 
news item subject cache exchange age incremented 
randomly selecting peer cache node adopts selection policy 
node seen alarm signal give preference peer cached news item value young 
reasoning peer seen alarm signal peers zero valued old news item contacted 
reason node unaware alarm give preference peer cached news item old 
note cache nodes unaware alarm contains zero valued news items 
effect selective push pull policy observed 
axis shows average number delivered alarm signals node 
axis shows pull threshold relevant node unaware alarm 
pull threshold minimal age news item associated peer contacted 
note pull threshold affect average number delivered alarm signals node see value 
likewise axis shows push threshold relevant nodes seen alarm 
push threshold maximum age news item order associated peer contacted 
seen push threshold factor determining average number delivered alarm signals node 
lowering number deliveries comes price number cycles needed disseminate alarm nodes increases 
push threshold dominant factor shown 
case axis shows number cycles needed deliver alarm nodes 
axis shows push threshold axis pull threshold 
introduced newscast computing general framework distributed information processing 
core newscast computing formed newscast protocol offers membership management information dissemination services distributed applications 
framework developed algorithms data aggregation averaging counting summing information dissemination propagation extreme values alarms 
idealized model able provide statistical analysis main properties algorithms convergence rate accuracy 
turned averaging algorithm push threshold pull threshold avg 
number delivered items node average number delivered alarms node 
pull threshold push threshold cycles needed reach nodes dissemination speed alarm signal 
fig 

performance alarm signal propagation 
converges exponentially fast exact average single values maximum propagated epidemic style super exponentially fast 
numerous experiments actual implementation newscast model fully confirmed theoretical findings 
combination newscast protocol aggregation algorithms resulted robust scalable adaptive simple efficient solution typical network monitoring problems finding network size measuring migration nodes counting nodes join leave network estimating average load fast propagation alarms 
modest memory cpu requirements solution particularly suitable monitoring huge networks small computing devices mobile phones pda sensors fully decentralized approach inevitable 
demers greene hauser irish larson shenker sturgis swinehart terry epidemic algorithms replicated database management proceedings th annual acm symposium principles distributed computing podc 
vancouver acm aug pp 

online 
available www acm org dl eugster guerraoui 
kermarrec massoulie epidemics distributed computing ieee computer appear 
van renesse minsky hayden gossip style failure detection service middleware davies raymond seitz eds 
springer pp 

van renesse birman vogels astrolabe robust scalable technology distributed system monitoring management data mining acm transactions computer systems vol 
may 
online 
available www acm org dl bailey mathematical theory infectious diseases applications nd ed 
london griffin 
bollobas random graphs nd ed 
cambridge new york cambridge university press 
ganesh 
kermarrec massoulie peer peer membership management gossip protocols ieee transactions computers vol 
feb 
eugster guerraoui 
kermarrec lightweight probablistic broadcast acm transactions computer systems appear 
law 
siu distributed construction random expander graphs proceedings nd annual joint conference ieee computer communications societies infocom san francisco california usa apr 
online 
available perth mit edu ching raghavan upfal building low diameter peer peer networks ieee journal selected areas communications jsac vol 
pp 
aug 
online 
available www cs purdue edu homes gopal papers html van renesse importance aggregation directions distributed computing ser 
lecture notes computer science schiper shvartsman weatherspoon zhao eds 
springer pp 

gupta van renesse birman scalable fault tolerant aggregation large process groups proceedings international conference dependable systems networks dsn goteborg sweden 
online 
available www cs cornell edu info people papers papers bawa garcia molina gionis motwani estimating aggregates peer peer network submitted publication 
online 
available stanford edu pub 
integrated management networked systems 
san mateo ca morgan kaufman 
knight exploiting agent mobility large scale network monitoring ieee network vol 
may 
carzaniga rosenblum wolf design evaluation wide area event notification service acm transactions computer systems vol 
pp 
aug 
castro druschel 
kermarrec rowstron scribe large scale decentralized application level multicast infrastructure ieee journal selected areas communication vol 
pp 
oct 
rowstron druschel pastry scalable distributed object location routing large scale peer topeer systems middleware ser 
lecture notes computer science guerraoui ed vol 

berlin springer verlag nov pp 

liu decentralized self con guring peer peer information monitoring system rd international conference distributed computing systems ieee 
los alamitos ca ieee computer society press may pp 

bodlaender enhancing upnp discovery liveness consumer communications networking conference 
los alamitos ca ieee computer society press jan 
watts small worlds dynamics networks order randomness 
princeton nj princeton university press 
