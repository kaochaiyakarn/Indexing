verifying cross cutting features open systems harry li computer science department brown university providence ri usa cs brown edu feature oriented software designs capture interesting notions cross cutting offer powerful method building product line architectures 
cross cutting feature independent module fundamentally yields open system verification perspective 
describe desiderata verifying modules model checking find existing verification open systems fails address concerns arise feature oriented systems 
provide new methodology verifying systems 
validate new methodology implemented applied suite modules exhibit feature interaction problems 
model checker able automatically locate problems previously laborious effort 
categories subject descriptors design tools techniques modules interfaces software program verification model checking software architectures languages specifying verifying reasoning programs specification techniques general terms design verification keywords model checking compositional reasoning computer aided verification software architecture feature oriented design aspect oriented programming feature interaction research partially supported nsf esi itr ccr brown university program 
current affiliation university texas austin 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sigsoft fse november charleston sc usa 
copyright acm 
shriram krishnamurthi computer science department brown university providence ri usa sk cs brown edu department computer science worcester polytechnic institute worcester ma usa cs wpi edu 
aspect oriented programming promises cleanly capture cross cutting concerns 
designs cross cutting concerns offer software engineering benefits separation concerns simplified design evolution ease maintenance 
approaches yield comprehensive development methodology adequate support verification levels 
verification framework cross cutting designs support activities support proving properties individual features composition features violate properties 
check done compositionally re verifying composed system 
problem challenging cross cutting fundamentally generates open systems ones components interact variables defined components 
unfortunately characteristics cross cutting software designs render existing techniques verifying open systems inadequate 
presents compositional methodology verifying open systems arising cross cutting concerns 
structured form cross cutting proposed batory ossher tarr henceforth call features 
particular significant enhancement prior verifying feature oriented designs handles numerous verification obstacles arising open systems 
motivate validate context specific problem verification email product line application emphasis detecting feature interaction problems 
robert hall labs designed analyzed suite 
analysis simulation required substantial human intervention 
attempted reproduce feature interaction errors study tool successfully detected 
located methods described prior 
focuses techniques enabled locate 
section outlines email suite 
section motivates feature oriented designs yield open systems explains existing open systems approaches inadequate 
section describes enriched model 
section uses new methodology compositionally detect feature interactions email suite 
section summarizes perspective concerns model checking viable tool compositional reasoning features 
section discusses prior related section presents concluding remarks directions 
ready incoming deliver encrypt outgoing fwd incoming outgoing received key key fwd address provisioned fwd address provisioned internal mail mail encrypt mail encrypt encrypt mail fwd forward fwd deliver features base feature encryption forwarding 
dashed states resolve concrete states feature composition 

motivating scenario motivate features interactions lead open systems email application case study 
example originally due robert hall labs 
application supports features message signature forwarding anonymous encryption decryption signed message verification auto response message filtering 
properties elicited hall hold system containing features 
properties stated english temporal logic ctl 
ctl formulas describe properties states system 
ctl operator consists designators path quantifier paths path temporal operator times time release dual 
reproduce formal semantics provide examples ctl formulas english interpretations 
af says paths true state 
ag says paths true states true reachable states 
says exists path true state true true state path 
properties refer propositions deliver retrieved sending mail 
deliver indicates message reaches current user retrieved indicates message mailed external user reaches recipient 

message signed sender field altered message delivered retrieved ag sender unchanged deliver received 
message ready mailed sender identity exposed ag anonymous mail 
tries verify signature message verifiable ag try verify verifiable 
message encrypted sent clear ag encrypt deliver received ag clear encrypted mail 
message formatted correctly remailer process ag format 
auto response generated response eventually delivered retrieved ag auto response af deliver received 
loop messages infinitely mailed back forth ag af ready 
message forwarded eventually delivered retrieved ag forward af deliver received remainder refers features properties illustrate 

open systems prior consider property email application states message encrypted sent network clear 
property holds encryption feature 
compose encryption feature forwarding feature need check forwarding feature preserves property 
standard ctl model checking algorithm potentially unsound case forwarding feature state machine contain proposition encrypted 
design error 
encryption part forwarding forwarding feature contain message attributes associated encryption 
separation concerns underlies feature oriented design inherently yields verification tasks involving unknown propositions unknown propositions lead open systems 
existing open systems addresses forms openness uncertainty transitions ignorance propositions 
kupferman vardi wolper address 
considers cases properties fail due values generated environment model methodology reports property true system property holds regardless environment 
modal transition systems similarly deals uncertainty transitions 
contrast concerned property preservation specific compositions cases feature interaction arise contexts compositions violate properties 
kupferman approach restrictive 
bruns godefroid consider propositions value unknown propositions arise partial kripke structures 
employ valued logic preserve properties partial system complete structure 
differs source unknown propositions 
unknown propositions arise considering portion full state space 
unknown propositions arise properties wish verify features closed construction respect propositions 
furthermore address compositional methodology open system concerns refinement propositions distinctions control data propositions motivate 
methodology exploit algorithm implementing valued ctl model checker existing valued 
chechik easterbrook multi valued model checker shares shortcomings bruns godefroid context 
differences view open systems previous works arise models composition employs 
features encapsulate related portions system compose quasi sequential manner 
open systems unknown values arise models properties require module environment running parallel supply unknown values kupferman operates context 
bruns godefroid appears assume unknown propositions may change value state space suggesting decision values change control external simultaneously executing entity 
unknown propositions arise data attributes controlled features control variables local features 
differences force develop new methodology open system verification 
researchers acknowledged difficulty detecting feature interactions presence unknown information related frame problem artificial intelligence 
jackson relates frame problem views similar spirit cross cuts 
bruns godefroid techniques assume global view system propositions known advance 
furthermore approaches compositional 
approach supports addition previously unidentified propositions higher level notion openness compositional reasoning 

modeling verifying features closed systems goal develop compositional methodology verifying features open systems 
especially beneficial outcome methodology detection undesirable feature interactions 
example anonymous mask sender identity sender message 
interactions arise order application executes features 
forwarding inherently affect encryption message decrypted prior forwarding message encrypted goes network clear 
feature interactions widespread problem telecommunications applications giving rise workshop series 
view feature interaction undesirable violates formal requirement individual feature entire system 
discuss problem extracting properties requirements 
main challenges developing methodology determining information needs included feature interface support compositional reasoning devising techniques perform checks 
previous proposed compositional verification methodology features interacted sequential transfer control 
email application involves richer interactions 
section describes previous model methodology features closed systems 
section motivates describes enriched model methodology email application 
companion focuses interfaces support enriched methodology 
view feature state machine feature composition connecting state machines transitions specified interfaces 
state machine model provides simple clean abstraction explore verification questions 
feature composition thereof specifies interfaces states additional features attach 
formal definitions earlier model feature oriented designs precise 
definitions match intuition figures casual reader may wish skip formal definition 
definition 
state machine tuple set states input alphabet output alphabet initial state transition relation denotes set propositional logic expressions indicates output symbols true state 
definition 
base system tuple 
mk state machines set interfaces 
denote elements machine mi smi mi mi mi rmi lmi interface exit reentry 
contains sequence pairs states state machine mi 
state state control enter feature state control returns base system 
interfaces contain set properties information derived features verification motivated 
definition 
feature tuple 
en state machines 
ei induce connected graph single initial state degree zero state degree zero 
ei call initial state ini states degree zero 
states serve placeholders states feature connect composition time 
states domain labeling function li 
base system interfaces feature compose new system connecting machines states shown 
definition formalizes notion composition composed designs serve subsequent base systems creating additional interfaces necessary 
supports notion compound components fundamental definitions component systems 
definition 
composing base system 
mk feature extension 
ek interface exit reentry 
yields state machines 
ck ci sci ci ci ci rci lci combines mi smi mi mi mi rmi lmi exit re enter exit re enter exit re enter base system feature features interfaces composition ei sei ei ei ei rei lei follows sci smi sei ini outi ci mi rci formed replacing ini outi rei respectively rmi 
components union corresponding pieces mi ei 
methodology verifying properties individual features summarized follows full details appear prior 
methodology currently supports 
proving ctl property atomic composite features verification step 

deriving preservation constraints interface states feature sufficient preserve property composition 

proving feature satisfies preservation constraints feature preservation step 
establish preservation analyzing new feature composition features 
activity challenging features cross cut multiple actors standard practice challenge lies constructing single state machine corresponding feature 
second activity involves recording information ctl model checking process 
third involves routine ctl model checking initial seeding labels certain states design 
ctl ltl ctl semantics supports state labelings need methodology adapting methodology ltl open problem 
having constructed single state machine feature standard ctl model checking algorithm verify properties single features 
proving composition preserves properties challenge 
feature oriented verification diverges standard approaches modular verification 
parallel composition modular verification techniques assume composition add new behaviors module 
reasonable assumption states modules interact cross product construction 
contrast composing features adds transitions behaviors states module 
extensions natural important part feature oriented designs 
characteristic inhibits modular verification techniques parallel composition 
fortunately modular feature verification reduces form sequential verification 
algorithm detail earlier grumberg proposed similar algorithm 
summarize algorithm terms verification preservation steps 
exit incoming address address deliver forward reentry mail anonymous anonymous mail true anonymous mail reentry anonymous mail mail anonymous anonymous mail true anonymous mail example methodology 
depicted state machine fragment filter feature 
dashed states placeholders interface states feature attaches larger system 
formulas re enter state seeded labels labels copied feature composed filter feature 
ctl model checking determines labels exit state seeded labels 
model checking property feature record labels ctl model checking algorithm assigns interface states version verification step 
preservation step attach new feature states check new feature invalidate labels 
perform step attaching dummy states new feature exit re entry seeding dummy re entry state saved interface labels ctl model checking algorithm derive labels dummy exit state see 
derived labels consistent recorded labels composition preserves property original feature 

modeling verifying features open systems previous methodology verify feature oriented application called fsats 
email application study different fsats ways 
need model data fsats properties concerned control decisions 
contrast properties email example refer crucially depend data attributes messages 

fsats features independent interact state transitions shared data 

new features fsats attached states base system connected 
email application filter architecture features may connect various orders 
point doesn require changes prior methodology 
points require enhancements methodology ultimately model compositional feature verification 
fundamentally addition data attributes leads interpreting features open systems 
sections explain revised interpretation features affects verification 
unknown propositions preservation check property forwarding feature example section motivated need treat features open systems perform check add encrypted proposition forwarding feature 
proposition captures data attribute mail message forwarding preserves processes message 
algorithm assume concrete truth value proposition remain sound treat proposition having unknown value check 
valued model checkers treat values explicitly true false bruns godefroid valued model checking algorithm task 
valued model checking propositions values true false unknown 
supporting requires changes models model checker 
model checker interpretations logical operators change handle unknown values straightforward manner 
models labeling function changes mapping propositions true false state mapping propositions true false unknown state 
accordingly augment definition state machine defn contain labeling functions true propositions false propositions 
propositions labeled true false state interpreted unknown 
definition 
state machine tuple set states sets input output atomic propositions initial state pl transition relation indicates propositions true state indicates propositions false state 
valued model checker return true false unknown value property structure 
verification perspective unknown result useful true false result 
techniques determining concrete truth values presence unknowns extremely useful 
proposition maps unknown state valued model checking reduces valued model checking returns true false models unknowns called complete 
bruns godefroid algorithm checks property complete models unknowns replaced true optimistic model unknowns replaced false pessimistic model 
property guaranteed false evaluates false optimistic model guaranteed true evaluates true pessimistic model 
guarantees hold algorithm reports property having unknown value 
methodology treat propositions arise property model unknown preservation checks conservative 
consider property refers proposition 
proposition capture data attribute message 
control proposition determines controlflow feature 
control propositions feature true feature features execute simultaneously 
lets set control propositions features false model checking 
designer partition propositions control data subsets technique exploit design information 
outgoing anonymize mail anonymize mail feature 
distinction reduce feature oriented verification valued model checking follows verification step version property feature state machine consider propositions property feature 
propositions control proposition set false states feature set unknown states 
valued model checking verify property augmented state machine 
enhance preservation step recognize valued model checking verification step 
preservation checks confirm true properties remain true composition 
valued model checking framework reports property true evaluated true pessimistic model 
methodology needs confirm labels generated pessimistic check preserved labels generated optimistic check irrelevant 
verification step store state labelings interface states pessimistic check feature interface 
preservation step version verifying feature preserves property feature composition entails steps original preservation step extend dummy states representing interface states 
copy pessimistic labels states dummy states copy pessimistic atomic propositions states dummy starting states 
set control propositions false unknown state set data proposition unknown state 
valued model checking verify pessimistic ctl labels state hold dummy starting state 
evolving propositions propositions unknown values enable preservation checks required feature oriented verification insufficient enable compositional feature verification 
compositional verification requires verify property feature need traverse feature preservation checks property 
feature oriented systems require interpretation propositions evolve composition turn complicates compositional reasoning 
key point section open systems arise abstraction decomposition conventional contexts open system verification research system evolution 
consider property says messages passing anonymizing remailer reveal information identifies sender 
anonymous defined property 
perspective remailer feature anonymous proposition anonymize remailer 
add signing feature message needs unsigned order considered anonymous 
words adding signing feature changes property statement ag anonymize mail ag anonymize signed mail 
verify property feature compositionally property change unexpected ways composition 
approach intuitively providing formal details 
concrete example evolution logically strengthened anonymous replaced anonymize anonymize signed 
reasonably expect evolution propositions logically strengthen weaken previous interpretations feature completely override lies outside scope current model 
strengthening weakening defined follows expr expr refer original evolved interpretations proposition expr strengthens expr expr expr augment expr weakens expr expr expr augment expression augment 
suppose verified original property feature needed preservation check property signing feature 
labels copy feature dummy states signing feature 
sign feature changes property assume labels original verification remain valid 
propositions evolve technique previous section applicable 
assume moment anticipated feature place additional restrictions strengthen anonymity 
verified property ag anonymize augment mail feature 
labels stored preservation check valid extension strengthened definition anonymity 
verify formula containing augment feature require valued model checking interpretation augment unknown inside remailer construction 
example outlines proposed methodology handling evolving propositions 
verify properties assumption certain propositions may strengthened weakened labels arising assumptions perform preservation checks 
approach perform composition checks compositionally perform checks manner 
proposal raises concerns 
user need know features propositions verification 
technique designed support design evolution including addition unexpected features 
extension re interprets proposition designer expected evolve existing features may need re verified 
failure augmented property verification step yield useful feedback 
algorithm verifies property original augmented forms help identify actual conditions property fails 
wouldn multiple augmented propositions property greatly reduce likelihood meaningful verification results 
seen case frequently practice furthermore approach analogous bruns godefroid optimistic pessimistic interpretations point 
short believe full algorithm adequately addresses concerns limits software engineering practice 
verification step preservation step change handle evolving propositions 
need distinguish propositions interpretations may evolve henceforth called evolving propositions interpretation remain fixed 
leave distinction modeler 
extend model checker additional input re mapping function evolving propositions boolean expressions non evolving propositions 
model checker encounters evolving proposition evaluates non evolving propositions evaluated directly 
revised verification preservation steps 
verification step version property verify feature re mapping verify interpretations storing labels arising check separately interface 
standard valued check 
strengthening check evolving proposition strengthened augment new proposition augment 

weakening check evolving proposition weakened augment new proposition augment 
feature preserve property proven feature choose sets labels preservation check 
choice depends interpretation evolving propositions strengthens weakens detailed algorithm 
preservation step version re mapping verify new re mapping associated 
strengthens evolving propositions check pessimistic strengthened case held 
extend dummy interface states described section copy confirm pessimistic interface labels arose strengthened interpretation 
need proceed verification violates property 
weakens evolving propositions follow previous case pessimistic weakened place pessimistic strengthened 
logically equivalent evolving propositions extend dummy interface states described section copy confirm pessimistic interface labels arose interpretation 
cases re verify apply version preservation algorithm check preservation 
soundness soundness methodology arises combination soundness methodology verifying features closed systems soundness bruns godefroid valued checking optimistic pessimistic interpretations logic strengthening weakening 
due lack space defer formal soundness proof full version 

email client case study evaluate effectiveness interfaces methodology compositionally verifying feature oriented systems searched feature interactions email application described section hall showed rich feature interactions 
wanted determine detect feature interactions compositionally interfaces methodology extent enrichment methodology contributed detecting actual interactions interactions detected combining small numbers features 
point important number features involved interaction points overhead methodology incur compositional preservation tests 
proposed techniques identifying interactions important difficult orthogonal problem 
case study concerned potential overhead methodology respect amount interface information needed perform preservation tests compositionally 
email features shown appear cross cut system describe feature single state machine cross cutting arises framework separate machines individual actors defn 

full email system involve multiple actors users network example 
single actor versions case study distinction single multi actor features irrelevant study interfaces undertake 
experiments model checker built specifically handling feature oriented verification methodology 
checker supports methodologies previous 
performance figures state machines models small generate meaningful performance figures 
goal case study test utility models methodology detecting feature interactions view performance orthogonal problem 
papers consider larger case studies designed test theory performance 
properties section held verified feature mainly responsible implementing failed composition features 
furthermore evolving propositions strictly rest section implicitly assume features composed email base prior verification defines propositions mail deliver 
weakened strengthened re mapping needed re verify property proven feature re mapping 
table summarizes feature interactions detected modeling verification methodology 
table summarizes property violation led undesired interaction ordered composition features detected interaction description undesirable interaction indication part verification methodology detected interaction 
table shows interesting results original section methodology re mapping valued model checking detected interactions 
suggests overhead additional verification expense richer model needed detecting feature interactions richer methodology crucial interactions 
feature interactions arising property unique required minimum interacting features composed certain order 
fewer features yielded interaction property holds encryption feature property holds composing decryption encryption decryption feature doesn mail messages property holds encryption encryption forward message stays encrypted 
different compositions features expose undesirable interaction arising property property doesn hold forward composed encryption decryption compound feature composition introduces path state message clear stays clear mail 
valued check exposes 
property doesn hold decryption follows encrypt encrypt forward 
proposition clear weakened false false 
pessimistic weakened check encrypt forward exposes 
checking property requires value checks encrypted decrypt successful data propositions 
composition forwarding example property optimistically holds assumes message encrypted gets forwarded 
pessimistic check encrypted false forwarding feature violates property 

perspective verification identifying verification techniques provide support feature oriented verification interesting important open problem 
previous reported model checking underlying verification technology 
model checking reasonable choice automated nature allows prototype methodologies quickly easily low level nature forced identify fine grained details feature interfaces needed support compositional verification 
model checking necessarily natural choice software verification research efforts exploring applies domain 
choice model checking clearly affected models features interfaces particular interfaces associate labels states property features composed yields problem re mappings verification execution order techniques sign forward sign sign encrypt verify encrypt decrypt forward encrypt decrypt encrypt sender field changes message signed forwarded remailer changes sender field signing message gives away identity sender changed encrypting signed message hinders sign verification 
attempts decrypt sign verification may fail 
message encrypted mailed decrypted forwarded clear message decrypted response contains body original message 
remailer decipher encrypted messages determine recipients 
filter feature potentially dis re map sender unchanged true forward re map sender unchanged true anonymize re map anonymous anonymize anonymize signed re map verifiable true true encrypted re map clear false decrypt successful re map clear false decrypt successful strengthen remailer format true true encrypt evolving propositions evolving propositions pessimistic strengthened pessimistic strengthened valued check valued check pessimistic strengthened filter card messages generated feature previous forwarding user forward pseudonym creates infinite cy previous forward filter cle 
filter discard forwarded messages previous table summary undesirable feature interactions modeling verification techniques needed detect 
numbers property column refer numbered descriptions properties section 
state machine models ctl model checking 
experiences model checking context encourage reflect viable model checking foundation feature oriented verification 
amount interface information compositional model checking features require immediate concern 
currently store labels interface states checks strengthening weakening evolving propositions 
information useful number evolving propositions property increases 
store partitions control data variables 
multi actor features require interface information 
interface information proven excessive study larger application contains hundreds features spanning multiple actors 
additional case studies required determine overhead interfaces outweighs benefits compositional feature verification 
features interact implicitly data 
viable model feature interaction support modeling reasoning data 
model checkers limitations reasoning data known main problem combinatorial explosion propositions needed encode data values booleans 
model checking efforts handle problem combination abstraction cone influence reduction 
deep control data models properties feature oriented systems unsure approaches useful context 
cases design methodology inherently performs partial abstraction feature contains propositions relevant 
believe real problem lies need ar data state specifications 
data intensive domains declarative specifications employed alloy viable long term 
effective integration declarative specifications model checking feature oriented verification techniques remains open problem 
feature verification suggests ctl viable logic ltl compositional reasoning features 
contradicts conventional wisdom cites ltl better suited compositional reasoning 
departure reflects difference composition semantics supports form sequential composition compositional model checking supports parallel composition 

related numerous pipe filter style models feature composition proposed zave jackson distributed feature composition notable 
models features interactions arisen goal support compositional verification feature oriented designs 
best knowledge models feature composition designed associated verification methodologies 
furthermore full methodology supports features multiple actors distinguishes pipe filter style approaches including zave jackson verification researchers discussed methodologies reasoning sequential composition 
efforts differ ways handle open systems created supporting cross cutting design methodologies support coordination multiple actors 
form detection feature interaction problems received substantial attention software engineering literature 
detection feature interactions compositional reasoning handling multiple actors distinguish approaches modeling detecting feature interaction model checking section discussed features open systems 
efforts applied model checking reasoning aspect constructs 
chechik easterbrook reason compositions concerns multivalued model checking 
framework helps identify concern feature responsible property violations checking composed systems address prove properties compositional reasoning individual concerns 
propose method applying model checking programs written aspectj 
verification methodology simply weave program verify result 
leave notion compositional verification 
nelson cowan perform case study reasoning cross cutting concerns 
employ tools alloy lts checker reason component emergent properties 
compose concerns single global specification lieu defining compositional verification model 
lin lin temporal logic approach reasoning feature interactions approach compositional 

verification methodologies cross cutting constructs important open problem software engineering 
increasing expressive power programming notations constructs generate greater need verification considered mature development idioms absence verification methods 
methodology supports compositional reasoning features interactions 
features span multiple actors support shared data features provide realistic preliminary model verifying systems cross cutting concerns 
compositional feature verification inherently requires reasoning open systems 
show existing approaches open systems verification assumptions apply context feature oriented design 
build verification methodology features open systems valued model checking underlying verification technology 
order compositional useful detecting feature interactions practice methodology requires separation propositions control data variables notion redefining propositions properties new features added system 
valued model checking instrumental supporting requirements 
methodology analyzed email application rich feature interaction problems 
attempted uncover known feature interactions methodology detected reasoning compositionally reasoning entire composed system contained undesirable interactions modeling verification techniques comprise approach 
validates derived feature interfaces useful supporting compositional feature interaction detection 
plan look verification methodologies model checking offer better support reasoning unknown data values specifically interested exploring declarative specifications context 
plan conduct case studies different designs known display feature interactions bellcore benchmark 
acknowledgments 
robert hall generously providing detailed help email suite anonymous reviewers extensive comments 

alur grosu 
efficient reachability analysis hierarchic reactive machines 
international conference computer aided verification volume lecture notes computer science pages 
springer verlag 
alur yannakakis 
model checking hierarchical state machines 
symposium foundations software engineering pages 
bouma de rijke 
description logics feature interaction 
lambrix borgida lenzerini ller patel schneider editors proceedings international workshop description logics pages 
bouma de rijke 
feature interaction satisfiability problem 
calder magill editors feature interactions telecommunications systems 
ios press 
astesiano reggio 
discipline handling feature interaction 
requirements targeting software systems engineering number lecture notes computer science pages 
springer verlag 
au 
evaluation state model feature interactions 
feature interactions telecommunications systems pages 
ios press 
batory 
product line architectures 
smalltalk java conference oct 
batory johnson macdonald von 
achieving extensibility product lines domain specific languages case study 
international conference software reuse june 
batory malley 
design implementation hierarchical software systems reusable components 
acm transactions software engineering methodology oct 
bergmans aksit 
composing crosscutting concerns composition filters 
communications acm oct 
blom bol kempe 
automatic detection feature interactions temporal logic 
technical report docs department computer systems uppsala university 
borgida mylopoulos reiter 
frame problem procedure specifications 
ieee transactions software engineering 

automated detection feature interactions 
feature interactions telecommunications systems pages 
ios press 
bruns godefroid 
model checking partial state spaces valued temporal logics 
international conference computer aided verification number lecture notes computer science pages 
springer verlag 
bruns godefroid 
generalized model checking reasoning partial state spaces 
international conference concurrency theory number lecture notes computer science pages 
springer verlag 
cameron lin velthuijsen 
feature interaction benchmark 
feature interactions telecommunications systems pages 
ios press 
chechik easterbrook 
reasoning compositions concerns 
proceedings icse workshop advanced separation concerns may 
chechik easterbrook 
model checking multivalued temporal logics 
proceedings international symposium multiple valued logics 
clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems 
clarke grumberg peled 
model checking 
mit press 
clarke 
modular translation statecharts smv 
technical report cmu cs xxx carnegie mellon university school computer science august 
findler flatt 
modular object oriented programming units mixins 
acm sigplan international conference functional programming pages 
krishnamurthi 
modular verification collaboration software designs 
symposium foundations software engineering sept 
hall 
feature interactions electronic mail 
feature interactions telecommunications systems 
ios press 
huth jagadeesan schmidt 
modal transition systems foundation valued program analysis 
european symposium programming 
jackson 
structuring specifications views 
acm transactions software engineering methodology oct 
jackson 
alloy lightweight object modelling notation 
technical report mit laboratory computer science feb 
jackson zave 
distributed feature composition virtual architecture telecommunications services 
ieee transactions software engineering oct 
kuehn 
feature service interaction problem telecommunications systems survey 
ieee transactions software engineering oct 
kiczales lamping mendhekar maeda lopes 
loingtier irwin 
aspect oriented programming 
european conference object oriented programming june 
kupferman vardi wolper 
module checking 
international conference computer aided verification number lecture notes computer science pages 
springer verlag 
grumberg 
modular model checking software 
conference tools algorithms construction analysis systems 
li krishnamurthi 
influence software module systems modular verification 
th international spin workshop model checking software number lecture notes computer science pages 
springer verlag 
li krishnamurthi 
interfaces modular feature verification 
ieee international symposium automated software engineering 
lin 
lin 
building block approach detecting resolving feature interactions 
feature interactions telecommunications systems pages 
ios press 
nelson cowan 
supporting formal verification crosscutting concerns 
reflection pages 
ossher tarr 
multi dimensional separation concerns hyperspace 
technical report rc ibm apr 
prehofer 
feature oriented programming fresh look objects 
european conference object oriented programming number lecture notes computer science 
springer verlag 
szyperski 
component software object oriented programming 
addison wesley acm press 

aspect oriented programming model checking 
international conference aspect oriented software development apr 
vardi 
branching vs linear time final showdown 
invited talk european symposium theory practice software etaps 
available www cs rice edu vardi papers index html 
zave 
calls considered harmful observations tutorial telephony 
margaria editor second international workshop advanced intelligent networks 
