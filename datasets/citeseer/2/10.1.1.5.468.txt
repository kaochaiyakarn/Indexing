replacement voronoi diagrams near linear size har peled september set points de ne new type space decomposition 
new diagram provides approximation distance function associated voronoi diagram near linear size 
contrasts standard voronoi diagram dd complexity worst case 
voronoi diagrams fundamental structure geometric computing 
widely clustering learning mesh generation graphics curve surface reconstruction applications 
voronoi diagrams dual structure delaunay triangulations simple elegant constructed relatively simple algorithms worst case complexity dd 
dimensions complexity quadratic behavior rarely seen practice theoretically satisfying 
despite vast literature voronoi diagrams understood major questions remain open complexity voronoi diagram lines 
ort quantifying situations complexity voronoi diagram low complexity ab high complexity eri 
voronoi diagram induced distance function point set nn nearest neighbor distance function returns distance nearest point voronoi diagram decomposition cells inside cell single point point nearest neighbor consider question nd approximate voronoi diagram points near linear size 
particular interested computing decomposition cells cell associated point updated version available author web page har department computer science dcl university illinois west spring eld ave urbana il usa www uiuc edu uiuc edu point set 
generated set balls answering approximate nn query equivalent performing point location query 
streaming balls compressed quadtree results required approximate voronoi diagram 
point point approximate nn minimize number cells complexity cell decomposition 
interested approximating distance function 
done near linear preprocessing time space cla cha amn query time polynomial log 
data structures su er exponential dependency dimension 
indyk motwani im kushilevitz kor data structures polynomial size query time polynomial dependency dimension 
data structures space decomposition associated 
clarkson construction cla interpreted inducing covering space approximate cells voronoi cells answers nn queries performing sequence point location queries cells 
cells disjoint interior 
fact willing compromise space covering space decomposition problem considerably easier 
results space decomposition approximate voronoi diagram 
log log cells 
cell cube di erence cubes 
cells regions arising appropriate compressed quadtree 
compressed quadtree answer nn queries log time 
considerably faster previous data structures rst logarithmic dependency query time 
previously fastest query time achieved indyk motwani im 
construction inferior relevant parameters preprocessing time space query time factor polynomial log planar case extract fat triangulation quadtree approximates voronoi diagram 
log triangles spread ratio diameter distance closest pair 
overlay fat triangulations linear complexity unfortunately indyk motwani explicitly state bounds unable provide direct comparison data structure point set voronoi diagram quadratic complexity 
cells voronoi diagram 
note cells thin cell lower part touches cells upper part 
contact surface parts voronoi diagram quadratic complexity voronoi diagram quadratic complexity 
useful applications requiring overlay voronoi diagram structures 
similar bounds hold decomposition space fat simplices 
achieve results describe relatively simple reduction nn queries point location equal balls pleb queries see details 
outline reduction section 
reduction previously shown indyk motwani im reduction considerably simpler intuitive ecient number pleb queries required answer nn queries space construction time 
general idea idea underlying construction approximate voronoi diagram arises inspecting standard example quadratic complexity voronoi diagram depicted 
point set consists collections points placed segments 
construction pairs cells common boundary 
cells thin slices clear far respective sites possible shrink portions cell increasing size adjacent cell order minimize interaction cells preserving approximate nn property 
consider construction voronoi diagram tournament sites regions uence 
ate ball point 
balls ate speed point point belongs site ball rst ball contain consider sites clearly balls large need grow balls distance onward equivalent 
see 
assume lost point ball grow anymore ball continues grow 
cell xed dropped tournament 
cell smaller exact voronoi cell intuitively interact cells far 
implement tournament mechanism indirectly rst constructing hierarchical clustering sites clustering build data structure answering nn queries 
extract nn data structure relevant set critical balls needed perform tournament 
having set prioritized balls possible generate approximate voronoi diagram 
section clustering reduce nn search problem sequence point location queries equal balls 
section atten construction showing answer nn queries doing point location balls 
resulting algorithm applications section 
concluding remarks section 
nn search pleb outline section outline reduction nn search sequence point location queries equal balls pleb queries 
detailed somewhat messy construction described section 
point set points parameter ub denote union equal balls radius centered points de nition point set nn denote point closest parameter approximate nearest neighbor nn 
de nition set points parameter pleb point location equal balls data structure query point decides ub 
furthermore ub returns point 
prespeci ed radius query point decide checking ub distance nearest neighbor carried constructing pleb performing pleb query median radius ub med ub median exactly connected components 
discussion construct pleb med pleb median 
query point ub med decided point location query med continue search nn recursively connected component ub med contains ub med connected components follows search continues recursively subset cardinality 
alternatively top nr median log decided single pleb query pleb top faraway points continue search decimated subset connected ub med extract point lies inside 
results set contains points 
continue recursive search continuing search int introduces accumulative error search results argue error introduces smaller 
case remains unresolved median top observe top median log 
cover interval median top log top median log pm pleb median performing binary search pm nd log pleb queries index ub median ub median 
nn query point nn log log pleb queries alternatively performed pleb queries continued search recursively set having points nd nn point performing log pleb queries 
hierarchical clustering lemma parameter 

proof 
claim follows symmetry 
parameter ub ball radius centered ub monotone growing set ub particular distance closest point value ub boundary 
sweep space balls centered points denote set connected components ub cc partition connected components ub 
trace history cc increases 
de ne tree follows forest corresponding cc point singleton 
time cc changes merge trees boundary di erent connected components collided 
hang smaller tree root larger tree trees equal size resolve arbitrary fashion 
denote forest time note tree corresponds connected component ub 
denote resulting tree 
computing expensive equivalent computing minimum spanning tree view hierarchical clustering construct approximation hierarchical clustering de nition directed tree storing points nodes point set union balls evolves time 
note query point far follows distance identical 
hierarchical clustering points 
point associated value loss 
value associated edge emanating furthermore denote forest generated removing edges loss cc cc partition subsets induced connected components 
stretch hierarchical clustering cc cc cc compute sequence merges sets 
intuitively means approximation see example clustering 
lemma compute nd stretch hierarchical clustering nd log time 
proof algorithm straightforward adaption known techniques described appendix tree encode information shape nn metric induced investigate connection show answer nn queries structure computed point time point represented rep root tree contains lemma rep nr rep 
de ned stretch hierarchical clustering proof points belong connected component ub 
radius balls forming ub number balls bounded point loss minimum value rep time cluster represents merged large cluster 
loss value associated directed edge emanating edges directed 
point edge emanating upward generated time loss view time 
moment time dominated parent 
detailed construction assume stretch clustering de nes point value loss 
de nition approximation parameter death loss log de ne transition time interval loss death 
query point 
trim follows remove points death denote resulting point set 
de nition loss death provides evolving set 
intuitively got multi resolution representation point set provides natural way decimating processing point location query ensure large 
data structure describe answering approximate nn queries performing binary search value accumulated information point set search restricting algorithm appropriate level detail provided 
lemma query point parameter subset induces connected subtree empty dq 
log restricting nn search quality approximation nn deteriorated factor log 
proof nn done 
lowest ancestor 
path child 

clearly death arguing proof lemma loss log death log log log min lemma log log dq log convention log log easily construct interval pleb answer pleb queries range distances 
lemma interval point set construct log query point decide 
ii 
iii find point 
ii happens pleb queries carried iii happens log log pleb queries performed 
denote interval pleb 
proof log log log taylor expansion ln log set pleb clearly query decide happens ub query pm decide ii happens ub 
ii happen ub ub 
performing binary search pm nd ub ub 
point returned 
clearly nn done 
de nition cc denote point root tree corresponding 
point set fx xm median median value loss loss top jxj log median jp lemma cc median top proof points loss median 
particular death top top 
algorithm constructing approximate nn search tree depicted 
stated algorithm point set fact divide conquer algorithm tree stage break subtrees continue search nn relevant subtree 
see 
lemma called set induced subgraph connected 
func min max input nd hierarchical clustering set points approx 
parameter min max range distances considered nn queries output tree tm nn search create node set max median min set min top max set return nil 
compute 

max set outer child outer ccm jxj min return func input nn search tree query point output approx 
nn root 
decide lemma return outer point returned return 
cc jxj return return construction nn search tree 
note uses stretch hierarchical clustering computing loss death values associated point values computation median top 
proof note value death 
monotone increasing path node root follows result hold 
recursive calls 
note recursive calls sets cc de nition connected subtrees lemma depth tree constructed dlog ne jp proof note points loss median death top 
points top 
jp top jp 
similarly points loss median follows median connected components 
ub median cardinality 
point set hierarchical clustering algorithm constructs search structure tm breaking subtrees 
di erent subsets created depicted 
note point participate subtrees cluster represents top subtree corresponding outer child note subtree single point require recursive call construct search subtree 
de nition node denote height subtree stored jp lemma number points stored level 
proof edge pq node level contains consider node loss belong di erent sets cc pv contain loss belong set cc pv appear 
lemma node created set jp form connected induced subtree charge points respective edges number points level bounded 
type points counted called set single point edge charge point 
case happens constructing outer subtree 
easily charge case relevant parent resulting upper bound number points stored level 
search approximate nn query point performed depicted 
lemma point returned nn 
proof time descend level outer edge lose factor log quality approximation lemma 
stops resolves nn query introduces error factor 
quality approximation log log exp log log exp conclude point returned approximate nn lemma nd stretch hierarchical clustering properties answers nn queries log pleb queries 
ii number log 
iii number points stored log log iv implement log log time ignoring time required construct 
proof consider execution interval pleb encountered search 
log median jp log median median log nd 
log log log performs binary search internal requires log pleb queries done algorithm returns approximate nn terminates search 
cases pleb queries performed 
depth tree log conclude number pleb queries performed algorithm log log log log log log easily veri ed 
ii arguing proof lemma interpret construction recursive splitting edges follows number nodes 
node follows number log 
iii lemma level stored points 
point participate depth log 
iv construct nd stretch clustering log time algorithm lemma 
provides loss value points implementing time stated straightforward bound iii 
running time log log log log log strengthen data structure allowing approximate pleb 
de nition set points parameters 
approximate point location equal ball data structure denoted pleb data structure built points query point decides ub 
allowed return positive answer ub 
return negative answer ub 
furthermore returns positive answer returns point 
theorem modify answers nn queries log pleb queries 
furthermore holds uses exact 
proof proof similar proof lemma omitted 
equivalent result theorem previously proved indyk motwani im 
reduction considerably simpler ecient applications demonstrated 
nn search point location balls cubes point location balls section consider problem set points generate small set balls query point approximate nn computed nding ball contains de nition set balls ball nite covers space query point canonical ball smallest ball contains equal radius balls contain resolve arbitrary fashion 
lemma interval pleb compute set jp log balls query point canonical ball containing corresponds point nn proof observe pleb realized set jp balls radius centered points set balls union set balls generated pleb canonical point location gives preference smaller balls follows performing point location equivalent performing binary search lemma follows 
stage natural solution problem mentioned take tree generated transform stored set balls described lemma 
node balls denote set balls resulting applying process subtree balls max balls child balls max max lemma straightforward 
lemma node inner children sets balls balls balls disjoint 
furthermore balls balls outer balls outer outer 
theorem set points parameter compute set log log balls query point center canonical ball contains nn proof nn tree computed answer nn queries 
balls 
bound size follows lemma iii 
claim node height point location query balls returns approximate nn query point points log 
height claim trivially holds 
consider interval pleb pv balls balls balls outer contain search continues recursively outer clearly quality approximation induction 
pv cc set cc pv contains induction perform point location query balls nd ball balls contains center approximation nn observe balls balls balls radius larger alternative induced points belonging sets cc pv 
case balls contain performing point location query balls equivalent performing query balls pv set balls balls relevant balls 
clearly de nition interval pleb canonical ball balls de ned nn point points de nition ball centered radius set approximation 
set balls set approximation ball corresponding approximation set denote ball corresponding denote center 
point canonical set contains set contains associated smallest radius ball lemma tree returned balls approximation arbitrary query point canonical set containing nn proof claim node height contains nn min max point location query balls returns approximate nn query point points log 
height claim trivially holds omit easy proof 
holds pv cc set cc pv contains observe sets radius larger alternatively induced points belonging sets cc pv 
case sets contain distance radius balls de ne performing query results set performing query induction perform point location query nd set contains center approximation nn pv outer set corresponds point distance pv pv pv contained inside set 
distance 
pv claim holds 
pv sets relevant point location resolve query correctly error pv 
contained inside set nc outer done nn easily veri ed 
performing point location query equivalent performing point location query outer implies correctness result induction outer contains nn lemma height 
pv sets outer contain search continues recursively outer claim follows induction lemma 
applying claim root follows quality nn dlog required 
point location cubes real number partition uniform axis parallel grid centered origin side length grid blog uc de ne buc largest integer number smaller 
note varying value get multi resolution grid covers space 
ball gc set cubes grid intersects gc clearly approximation note 
set balls gc gc 
gc radius smallest ball gc 
similarly center ball realizes 
theorem set points parameter compute set log log cubes taken hierarchical grid 
query point cube contains smallest value associated 
nn running time needed compute set cubes log log proof tree returned balls associated set balls 
gc 
clearly required set cubes 
correctness result follows observations approximation result correct lemma 
naive bound size log log better follows point interval pleb set balls centered created realization balls 
clearly jb log log log 
balls common center smaller balls higher priority point location 
throw cubes having low priority covered higher priority cubes 
follows standard exponential grid argument number cubes gc log log log 
log pairs point follows number cubes log log set cubes generated theorem nite cube covers space 
background cube serves answering nn queries query point far point nn query point 
algorithm applications consider set cubes computed algorithm theorem 
cubes taken hierarchical grid representation store cubes quadtree quadtree answer point location queries prioritized cubes note larger cubes stored higher levels quadtree lower priority radius ball created larger approximate nearest neighbor queries 
compressed quadtrees main result theorem set points parameter compute set log log regions 
region cube annulus di erence cubes contained inside 
regions disjoint provide covering space 
furthermore region associated point point point nn query point compute log time nn time perform construction log log proof theorem compute required set cubes 
store set cubes compressed quadtree 
standard techniques amn compressed quadtree computed jcj log jcj log log time 
need dump leafs provide required covering space 
note compressed quadtree leaf corresponds cube region cubes 
note preprocess leafs point location datastructure fre 
point location query point answered log jqj log time 
point associated cell contains nn points follows answer nn queries log time 
theorem provides approximation voronoi diagram 
standard voronoi diagram complexity dd worst case dimensions 
dissection space provided approximate considerably smaller complexity 
particular solution near linear dependency result theorem provides fastest currently known algorithm answering approximate nn queries near linear space 
knowledge approximate nn data structures query time polynomial dependency 
point set bounded spread spread point set ratio 

length diameter distance closest pair points allows algorithms depend generate considerably simpler datastructures potentially better performance 
results interesting cases large exponential input highly clustered 
lemma set points bounding cube contains compute set log disjoint cubes covers cube point associated nn points inside furthermore answer approximate nn queries inside nding cube contains query point 
proof observe resolve approximate nn query setting construct single interval pleb 

arguing proof theorem generate corresponding set cubes result follows 
approximate nn problem easy small 
relevant results see car fast data structures answering approximate nn queries 
similar results follows strati ed trees lemma 
fat decomposition cube disjoint covering simplices adjacent diameters factor furthermore ratio smallest ball containing largest ball contained bounded known quadtree depth nodes compute set nl cubes cover space provides re nement decomposition space provided constant ratio sizes cubes share common facet beg 
clearly triangulating cubes resulting decomposition going fat appropriate constant depends dimension 
note smallest ball generated algorithm constructing set balls balls radius log 
putting conclude theorem set points cube contains diam diam 
parameter compute fat decomposition log simplices appropriate constant independent 
furthermore simplex associated point point point nn plane result turned fat triangulation decomposition valid simplicial complex techniques bern beg 
theorem set points plane parameter larger zero square contains diam diam 
compute fat triangulation log triangles appropriate constant independent 
furthermore triangle associated point point point nn triangulation computed log time 
knowledge rst decomposition space approximates voronoi diagram near linear size 
updated version available online har 
numerous open questions research construction improved yield smaller decomposition 
construction currently indirect going usage 
nice avoid come direct simpler construction 
maintain decomposition space eciently moving points 
come better construction interval pleb constant dimension 
de ne similar notion approximate voronoi diagram set lines 
clear quadratic complexity lower bound ruled surface construction chazelle cha 
quadratic bound interesting case bound exact voronoi diagram open 
question especially interesting case voronoi diagram de ned surface 
construction useful algorithms doing shape simpli cation 
acknowledgments author wishes pankaj agarwal alon efrat je erickson piotr indyk edgar ramos helpful discussions concerning problems studied 
author wishes david comments write 
ab boissonnat 
complexity delaunay triangulation points smooth surface 

inria fr personnel boissonnat papers html 
amir efrat indyk samet 
ecient algorithms regular data structures dilation location proximity problems 
proc 
th annu 
ieee sympos 

comput 
sci pages 
amn arya mount netanyahu silverman wu 
optimal algorithm approximate nearest neighbor searching xed dimensions 
assoc 
comput 
mach 
agarwal sharir 
pipes union minkowski sums dimensions 
proc 
th annu 
acm sympos 
comput 
geom pages 
aurenhammer 
voronoi diagrams survey fundamental geometric data structure 
acm comput 
surv 
beg bern eppstein gilbert 
provably mesh generation 
comput 
syst 
sci 
car cary 
optimal approximate nearest neighbor algorithms constant 
web page 
cha chazelle 
convex partitions polyhedra lower bound worst case optimal algorithm 
siam comput 
cha chan 
approximate nearest neighbor queries revisited 
discrete comput 
geom 
ck callahan kosaraju 
decomposition multidimensional point sets applications nearest neighbors body potential elds 
acm 
cla clarkson 
algorithm approximate closest point queries 
proc 
th annu 
acm sympos 
comput 
geom pages 
duda hart stork 
pattern classi cation 
new york nd edition 
eri erickson 
nice points sets nasty delaunay triangulations 
proc 
th annu 
acm sympos 
comput 
geom pages 
fre frederickson 
data structures line updating minimum spanning trees applications 
siam comput 
har har peled 
replacement voronoi diagrams near linear size 
proc 
nd annu 
ieee sympos 

comput 
sci 
appear 
available www uiuc edu papers 
im indyk motwani 
approximate nearest neighbors removing curse dimensionality 
proc 
th annu 
acm sympos 
theory comput pages 
kor kushilevitz ostrovsky rabani 
ecient search approximate nearest neighbor high dimensional spaces 
proc 
th annu 
acm sympos 
theory comput pages 
van emde boas 
preserving order forest logarithmic time linear space 
inform 
process 
lett 
hierarchical clustering set points query point nd nn lemma tell points far relatively close consider 
lower bound throw away points close preserving representative cluster points consider remaining points nn query process 
constructing approximate minimum spanning tree need mst minimum spanning tree cluster points hierarchically 
unfortunately near linear time algorithm known problem 
satisfy approximation mst 
de nition tree having points nodes mst spanning tree having value len 
associated edge edge uv len len partition sets induced connected components feg min distance note de nition approximate mst diverges regular de nition care weight insist weight edge far true weight mst point set 
lemma compute mst log time 
hides constant depends exponentially proof spanners generated wspd separated pairs decomposition construction callahan kosaraju ck 
time log compute spanner sparse graph points edges distance points approximation euclidean distance 
setting results running time log 
mst required spanning tree 
edge assigned weight set len 
easy verify results mst 
dimension small constant algorithm lemma slow exponential dependency dimension 
lemma compute nd mst nd log time 
proof construction similar construction fair split tree callahan kosaraju ck sketch algorithm 
construction recursive decomposition point set 
stage split point set subsets 
recursively compute nd mst point set merge trees single tree adding edge assigning appropriate weight 
carry try separate set subsets furthest away 
minimum axis parallel box containing ki projection th dimension 
clearly nd axis parallel strip width point sides points inside nd strip project point set th dimension nd longest interval consecutive points 
repeat process longest interval encountered 
clearly strip corresponding interval width 
recursively continue construction trees respectively splitting sets pick points create tree feg pq 
set len 
clearly len nd 
len construction performed nd log time techniques callahan kosaraju ck straightforward details omitted 
claim resulting tree nd mst 
current set handled splitting computed subsets 
edge added resulting tree connecting arbitrary point arbitrary point stage partition distance nd 
furthermore know induction parent nd nd 
min min nd min nd parent nd nd len parent 
similar argument holds edge spanning tree connecting sets nd approximation distance rest point set 
computing stretch hierarchical clustering proof lemma compute nd mst nd log time algorithm lemma 
sort edges len value 
compute starting forest corresponds singleton points performing sequence merges 
th iteration take th edge merge trees contains respectively 
create new edge connecting roots orient arbitrary fashion hang say 
set loss len len weight associated edge 
easy verify resulting tree nd stretch hierarchical clustering 
