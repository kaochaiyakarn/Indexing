scrap boilerplate reflection zips generalised casts april ralf vrije universiteit amsterdam simon peyton jones microsoft research cambridge writing boilerplate code royal pain 
generic programming promises alleviate pain allowing programmer write generic recipe boilerplate code recipe places 
earlier introduced scrap boilerplate approach generic programming exploits haskell existing type class mechanism support generic transformations queries 
completes picture 
add extra introspective reflective facilities support rich variety serialisation de serialisation 
show perform generic zips appear somewhat tricky framework 
lastly generalise ability ride generic function type specific 
supported haskell independently useful extensions higher rank types type safe cast 
common find large slabs program consist boilerplate code conceals bulk smaller amount interesting code 
called generic programming techniques allow programmers automate boilerplate allowing effort focused interesting parts program 
earlier scrap boilerplate described new technique generic programming building facilities haskell fairly modest extensions section 
approach attractive properties allows programmer ride generic algorithm exactly desired places supports arbitrary mutually recursive data types open world approach easy add new data types works inefficient conversion intermediate universal data type require compiletime specialisation boilerplate code 
main application earlier traversals queries rich data structures syntax trees terms represent draft compiled april submitted icfp xml documents 
show implement best known applications generic programming printing serialisation reading de serialisation generic equality 
functions require certain sort type introspection reflection 
extend earlier making new contributions show support general form type reflection allows define generic show read functions friends sections 
classical generic functions rely new reflection api supported data type basis section 
defined api allows generic reflective functions defined test data generation section 
functions generic equality require zip data structures simply traverse 
describe zipping accommodated existing framework section 
strength scrap boilerplate approach easy extend generic function behave differently particular specified types 
easy extend behaviour particular type constructors 
section explain ability useful show generalise existing type safe cast operator express generic function extension 
describe implemented ghc examples available online boilerplate web site 
new extensions haskell required described scrap boilerplate rank types type safe cast 
generalised section 
background set scene brief overview scrap boilerplate approach generic programming 
suppose want write function computes size arbitrary data structure 
basic algorithm node add sizes children add node 
entire code gsize gsize data int gsize sum gmapq gsize type gsize says works type provided data type instance class data definition gsize refers operation gmapq method data class note earlier class called data called term 
class typeable data methods class data gmapq forall data discuss typeable class section ignored 
idea gmapq applies polymorphic function immediate children data structure applications yields result type gmapq returns list results 
concrete definitions gmapq types list int respectively instance data data gmapq gmapq just instance data data gmapq gmapq xs xs instance data int gmapq int children 
notice gmapq applies immediate children argument 
second instance declaration applied xs resulting list exactly elements regardless long list xs notice declaration applied arguments different types different type xs argument gmapq polymorphic function 
gmapq higher rank type forall left function arrow independently useful extension haskell 
clear gsize works term type instance class data 
call gmapq gsize applies gsize immediate children yielding list sizes 
standard function sum int int sums list add 
class data plays central role 
earlier placed generic mapping operations class data operation gmapq generic queries illustrated operations gmapt transformations monadic transformations 
fact generic mapping operators derived single operator gfoldl generic folding described earlier 
instances data easy define saw operation gmapq 
definition gfoldl equally simple 
fact instances easy regular compiler job ghc instructed called deriving clause data int deriving eq typeable data deriving eq part standard haskell instructs compiler generate instance declaration instance eq eq 
ghc extends supporting deriving classes typeable data 
gfoldl shall shortly see 
rest fills data class carefully chosen operations 
generic show consider range generic functions take data value whatsoever render way 
instance known generic function rendering terms text type gshow data string gshow supposed take data value whatsoever display string 
generic function gshow variants 
example want perform binary serialisation data bits turn datum string zeros ones sections 
want translate datum rose tree data tree nodes store constructor names section 
data bits data bit data tree data tree string generalisation data tree perform type erasure xml 
basic idea gshow gsize gshow concat gmapq gshow course function outputs parentheses 
gshow true false need provide way get name constructor build data value 
natural new operation class data class typeable data constr delivering constructor name string returns value data type constr offers function constr string extra function write working version gshow gshow data string gshow concat gmapq gshow intermediate data type constr supporting offer straightforward extensions fixity constr fixity type fixity encodes fixity precedence constructor write sophisticated version gshow displays constructors infix position minimum 
built data types int instances data class int value type constr 
applying value yields string representation integer value 
binary serialisation application binary serialisation want encode data value bit string minimum length data bit zero data bits data bit outputting constructor name wasteful string obvious thing output binary representation constructor index need function constr standard function concat concatenates elements list lists inserts argument pair elements second argument 
constr type int starts bits output distinguish constructor constructors data type 
answer question requires information entire data type new function class typeable data constr datatype intermediate data type datatype describes data type data type datatype offers operation datatype functions position write data bits data bits data bit data bits concat gmapq data bits datatype constr bit encoder constructors ty con max idx max ty idx con assumed simple encoder natural numbers int int bin returns binary representation narrowest field represent fancy serialisation easily imagine sophisticated data values 
example want adaptive arithmetic coding reduce number bits required common constructors 
requires carry encoder state update state emitting new constructor 
fancy encoder signature simply adds state signature data state initstate state datatype constr state state bit just need modify plumbing data bits 
blush doing looks tricky gmapq knows passing state standard trick making gmapq return list functions type state state bit data bits data bit data bits show bin initstate show bin data state state bit show bin st st con bits args bits st con bits st st args bits foldr arg st enc args enc args state state bit enc args gmapq show bin arg st bits fn st bits bits st bits fn st notice call gmapq partially applies show bin children constructor returning list state transformers 
composed foldr arg 
course appending bit strings efficient easily avoided append representation bit strings see 
elegant approach encoder monadic way data encoder monad instance monad bit datatype constr monad carries sequence bits produced far accumulating state required encoding technology state 
function adds suitable encoding constructor accumulating output updates state 
function runs argument computation starting suitable initial state returns accumulated output 
plumbing abstracted leaving compact definition data bits data bit data bits emit emit data emit sequence gmapq emit standard monad function sequence monad compose list computations produced gmapq emit 
type erasure rendering operations far forms serialisation 
render terms trees preserve shape terms erase heterogeneous types 
instance easily turn datum rose tree kind data tree tree tree rendering operation easily defined follows data tree forall data tree string data tree tree gmapq data tree rendering data values rose trees essence type erasure xml 
dually producing data values rose trees essence type validation xml 
discuss inverse direction section 
generic functions xml type erasure type validation necessarily reflect various technicalities xml binding haskell 
omit tedious xml line scenarios refer 
generic read rendering functions generic consumers consume data structure produce fixed type string bit 
generic traversals query term consumers 
inverse task parsing de serialisation requires generic producers consume fixed type produce data structure 
far obvious achieve goal 
nub problem 
sure need new member data class kind inverse 
type 
obvious thing try reverse argument result class typeable data constr constr nb correct 
simply knowing constructor give information build value need know children constructor 
pass children arguments type vary depending arity constructor 
fact type constr returned term constructor filled bottoms 
subsequent application gmapt fill sub terms properly 
hack depends crucially laziness builds intermediate value immediately taken apart fails completely strict data types 
seek solution 
building terms monad solution adopt pass generic function generates children 
employ monad provide input generation children monad data forall data constr see define 
code de ignore need consume spaces match parentheses data string input input data constr constr lines carry steps 
parse constr front input fill 
time assume existence parser monad signature data decoder monad instance monad string datatype constr monad carries input state needed decoding technology 
function parses constructor front input updates state returns parsed constructor 
needs datatype argument knows bits parse valid constructor names 
function runs decoder particular input discarding final state input returning result 

call successively parse child constructor construct results value built constructor identified step 
case monadic presentation briefly sketch possible implementation monad 
parser type represented function takes string returns depleted string parsed value wrapped express possibility parse error newtype string string type instance monad standard way see example 
remains define parser constructors uses new function returns list constructors data type section datatype constr ty match ty match string constr string constr match input con cons take length input just drop length input con match input cons con code different implementation different type serve equally read binary structures produce data bits 
defining function easily defined new member data class type 
instances extremely simple example instance data data con case con return just gmapq gmapt instances highly parametric gfoldl operation define instance dual gfoldl highly parametric operation unfolding 
operation needs added data class class typeable data forall data forall constr instances simpler shall see section 
operation easily derived follows return argument turns empty constructor application monadic computation unfolds child combines rest 
getting hold data type generic parser far shown left open question get datatype corresponding result type pass 
difficulty needs argument result type built result value 
problem easily solved technique frequently encounter style type class generic programming 
code data read help read help ty foo read help constr constr foo foo undefined foo type signature ensures foo read help type desired 
odd pass haskell undefined interested value argument type 
put way argument foo read help argument simply explains compiler data dictionary pass examines argument 
said auxiliary foo function way programming hack 
thing expressed directly able specify type argument explicitly 
ability provided extremely useful haskell extension scoped type variables 
write lexically scoped type variables data read help read help ty undefined constr constr definition read help states read help monomorphic type type furthermore brings type variable scope scope read help 
argument undefined constrained type type variable scope 
scoped type variable introduced type signature directly attached pattern read help 
contrast separate type signature read help data short read help forall data introduce scoping type variables 
stress convenient lexically scoped type variables required support scrap boilerplate approach generic programming illustrated foo idiom 
type reflection full story previous sections introduced piecemeal fashion new operations data class 
section summarise extensions 
new operations class typeable data datatype constr forall data forall constr instance expected non strict evaluate argument 
hand strict multi constructor types gives result depends constructor argument built 
function offers facility commonly known reflection 
type lazy value serves proxy type returns data structure datatype describes structure type 
data types datatype constr data datatype instance eq data constr instance eq sections give observers constructors datatype constr 
algebraic data types consider algebraic data types api defined readily covers primitive types explain section 
observers datatype datatype string datatype constr datatype datatype constr type int starts functions suggestive just names types 
example takes constructor index datatype returns corresponding constr 
observers constr constr datatype constr string constr constr fixity constr string data fixity 
details omitted name chosen haskell known show function 
mentioned observers earlier sections returns constructor datatype returns list constructor field labels 
values types datatype constr constructed follows string constr datatype datatype string string fixity constr function parses string constructor returns string refer valid constructor datatype string constr programmer defines new data type wants generic programs instance data 
ghc derive instance deriving clause magic instances easy define manually desired 
example instance instance data data just con case con children just child constr just datatype prelude notice constructors mention data type vice versa starting get 
furthermore mutual recursion allows perform assignment constructor indices fact index specified position list passed 
primitive types haskell built types need special treatment 
built types explicitly specified language algebraic data types cause problem 
example boolean type specified data bool false true types primitive types described way int integer float double char 
ghc happens implement algebraic data types unboxed components revealed programmer 
furthermore ghc adds word word 
far traversal concerned data instance primitive type int defines gfoldl instance data int gfoldl gives right behaviour child node 
reflection functions require little thought 
possibility support primitive types 
disadvantage generic function need define special cases primitive types 
fixed number types tiresome offer little additional support 
constr represent value primitive types works values primitive type 
function maps constr generic representation chosen type constr data algebraic data type integer primitive type ints double primitive type floats string primitive type strings defining property generic representation constr guaranteed distinct constr type 
constructors algebraic data type generic representation distinguishes constructors type 
constr resulting int integer value representation int representation ghc data types word int word int 
representation float double fit efficient representations 
parallel refinement datatype datatype data constr algebraic data type primitive type ints primitive type floats primitive type strings dedicated constructors string datatype string datatype string datatype datatype integer constr datatype double constr datatype string constr observers previous section primitive types 
particular primitive values turned strings vice versa constr datatype constr string datatype string constr non representable data types lastly convenient give data instances types strictly data types function types monadic io types 
deriving data fail data type constructor functional argument type user write data instance hand 
types vacuous instances data 
example instance defined follows instance data data data gfoldl error error prelude assume trivial constructor non representable types string datatype data type provides dedicated alternative data 
norep non representable types ghc extended repertoire types notably ptr fall group non representable types 
application test data generation illustration usefulness simple generic function enumerates data structures user defined type 
utility generic programming test data generation observed 
test data generation useful stress testing differential testing behavioural testing 
instance systematic test data generation plug quickcheck 
suppose start data types constitute syntax small language data prog prog dec stat data dec id type dec dec data id data type int bool data stat noop assign id exp seq stat stat data exp zero succ exp want define generic function generates terms finite depth 
instance prog prog noop prog assign zero prog assign zero prog seq noop noop prog int noop prog int assign zero prog int assign zero prog int seq noop noop prog bool noop prog bool assign zero 
code forall data int result result concat map recurse cons retrieve constructors requested type cons constr cons head result find terms headed specific constr recurse data constr recurse non trivial case begins finding cons list constructors result type 
maps recurse list generate constr list terms depth constructor root 
turn recurse works run child 
take advantage fact haskell list type monad produce result lists consists combinations lists returned recursive calls 
reason bind result clause mention type proxy argument head result see section 
taken account possibility primitive types data type fail primitive datatype 
genuine question value return say int node 
simple possibility return zero readily accommodated cons case ty cons cons ty ty ty foo ty head result pass random number generator select primitive values finite list candidates 
refine illustrated approach accommodate coverage criteria 
incorporate predicates term generation terms built meet side conditions sense attribute grammars 
type reflection manner clever test data generators possible 
generic earlier generic functions consumed single data structure 
generic functions equality comparison consume data structures 
section discuss program zip functions 
curried queries consider standard functions map zipwith map zipwith analogy attempt define gzipwithq version gmapq 
types compare follows gmapq data forall data gzipwithq data data forall 
data data original function gmapq takes polymorphic function applies immediate child returns list results 
new function gzipwithq takes polymorphic function applies corresponding pairs immediate children returning list results 
notice type constrain outermost type constructor issue return section gain extra insight types type abbreviations 
define type synonym follows type forall data value type generic query function takes value type class data returns value type haskell support type synonyms contain forall ghc part higher rank types extension 
extended type synonyms entirely optional types perspicuous play fundamental role 
write type gmapq follows gmapq taken advantage type isomorphism rewrite gmapq types gmapq forall data forall data 
gmapq stands revealed generic query transformer 
type gzipwithq interesting gzipwithq argument gzipwithq generic query returns generic query 
just ordinary currying action function applied data structure returns function applied second data structure 
gzipwithq transformer curried queries 
implementation section 
generic comparison gzipwithq easy define generic equality function geq bool geq gzipwithq geq geq checks built constructor zips children geq give list booleans takes conjunction results bool bool 
entire code generic equality 
generic comparison returning lt eq gt equally easy define 
called function geq geq type polymorphic really want 
spell synonyms obtain geq data data bool expect take equality values different types lie class data 
real function want geq data bool geq geq reason need step process give signature original definition geq 
call gzipwithq right hand side geq pass geq argument 
gzipwithq requires function independently polymorphic arguments geq sufficiently polymorphic 
course just begs question gzipwithq necessarily polymorphic show 
discuss section describe implementation gzipwithq 
implementing gzipwithq implement gzipwithq 
difficult simultaneously traverse unknown data structures gmap combinators parametric just type 
solution lies type gzipwithq seek generic query returns generic query 
evaluate gzipwithq steps gzipwithq nb correct 
gmapq step ordinary gmapq apply children yielding list generic queries 
step new function apply queries produced list corresponding children 
steps requires little 
step type list gmapq 
list generic queries polymorphic function 
ghc support higher rank type maintains 
means pass polymorphic function argument list polymorphic functions 
really want achieve desired result wrapping queries data type newtype gq gq gzipwithq gmapq gq call gmapq result type gq fine 
constructor gq serves hint type inference engine perform generalisation point run time cost 
step little harder 
approach add directly class data 
usual instances simple illustrate lists class typeable data gq instance typeable data gq gq xs xs go adding new functions data specific queries anticipate come 
fortunately defined terms generic folding operation gfoldl original show 
implement want perform fold immediate subterms accumulator type gq 
child consume element list queries component gq producing element list results component 
want combining function data gq gq gq qs rs child qs child rs type child 
function simply takes accumulator child produces new accumulator 
results accumulate reverse order fix reverse normal higher order trick accumulation 
perform fold gfoldl trivial instance thereof data gq qs reverse snd gq qs rs child qs child rs qs folding function type definition employs type constructor mediate highly type gfoldl exercise reader define gmapq 
hint technique define map terms foldl 
specific type newtype gfoldl replacement constructor fold step child generic transformations focused attention generic queries ideas generic transformations monadic 
example proceed follows gmapt type forall data gmapt introduce type synonym encapsulate idea generic transformer 
gmapt earlier appears generic transformer transformer 
natural generalisation curried transformer transformer 
type curried argument generic transformation takes data structure returns function takes data structure returns data structure 
leave implementation exercise reader similar code 
programmers find operations generics library comes ghc 
mis matched types constructors section claimed gzipwithq necessarily type independently polymorphic datastructure arguments 
reviewing implementation see 
gmapq produces list queries gq polymorphic function 
way ensure statically applied argument type child query built 
gzipwithq zipping terms different types 
type gzipwithq polymorphic required readily specialised 
example specialise gzipwithq list arguments data data forall 
data data gzipwithq define operation gzipwithq insisted compatible argument types adding directly method data class class typeable data gzipwithq forall data add general operation gfoldl gzipwithq derived 
bad apart concerns proliferation operations added data 
real trouble type method polymorphic requires arguments exactly type allow zip list booleans list integers example 
wonder additional generality polymorphic curried gzipwithq useful question leave open 
related question gzipwithq constructors structures match 
time question arise 
instance generic equality function section ensured structures constructor zipping 
gzipwithq implementation section perfectly willing zip different constructors gives pattern match failure second argument children ignores excess children second argument 
dependently polymorphic implementation gzipwithq give pattern match failure constructors differ 
way big deal 
generic function extension strengths scrap boilerplate approach generic programming easy extend ride behaviour generic function particular types 
example recall function gshow section gshow data string gshow applied value type string ride default behaviour 
example gshow foo return string foo string gshow give default string just list characters 
key idea provide type safe cast operation realisation formed key part earlier review section 
experience generic programming reveals distinct shortcomings tackle section type type safe cast general situations 
show generalised section 
type safe cast works types type constructors 
limitation important show section describe restriction lifted 
term generic function extension specialisation usually implies creation multiple specialised compile time copies code function system uses fixed code run time type tests 
separate matter dynamic code desired specialised type class overloaded function produce type residual code 
monomorphic function extension earlier described function extend ride fully generic query type specific query 
allows refine gshow follows gshow data string gshow gshow help gshow help data string gshow help concat gmapq gshow string string concat map escape escape escape char char type specific rides fully generic gshow help combined function gshow 
notice mutual recursion gshow gshow help 
function defined generics library follows typeable typeable fn spec fn arg case cast arg just arg spec fn arg fn arg function gshow help behaves monomorphic string polymorphic function gshow help 
uses type safe cast operator regarded primitive type cast typeable typeable cast succeeds obtains datum form just 
constraints argument result type cast highlight cast parametrically polymorphic function 
require types instances class typeable superclass data class typeable typeof typeable value expression typeof computes type representation typeof inspects argument 
type representations admit equality required coincide nominal type equivalence 
specific implementation type safe cast trivially guard unsafe coercion type equivalence 
approaches casting discussed length 
follows merely interested generalising type cast 
generalising cast approach just outlined works fine extending generic queries generic transforms typeable typeable fn spec fn arg case cast arg wrong just arg spec fn arg fn arg trouble result spec fn arg different type call fn arg 
function defined different style cast function spec fn argument arg fn spec fn arg case cast spec fn right just spec fn spec fn arg fn arg time cast compares type spec fn fn uses type matches 
compare representations types really want compare representations types serious move monadic transforms 
fn spec fn arg case cast spec fn just spec fn spec fn arg fn arg need construct representation typeable 

filled typeable typeable typeable typeable notice typeable constraints required 
real trouble cast type specific 
primitive really want generalised cast typeable typeable arbitrary type constructor 
replacing cast instantiating la la respectively achieve desired effect 
wait 
haskell support higher order unification instantiate type level functions 
resort standard technique uses newtype explain type engine instantiation required 
typeable typeable fn spec fn arg case spec fn just spec fn spec fn arg fn arg newtype spec fn type fits type instantiating rewrite exactly way fn spec fn arg case spec fn just spec fn spec fn arg fn arg newtype fn spec fn arg case spec fn just spec fn spec fn arg fn arg newtype cast best regarded built primitive fact replaces cast 
implementation cast discussed length adopted directly 
difference neglects type constructor test type equivalence 
incidentally way generalised cast making parametric type constructor similar way generalised gmapq gmapt produce function gfoldl 
simply re technique 
polymorphic function extension function allows extend generic function particular monomorphic type polymorphic type 
example stands gshow print lists prefix form 
print lists distfix notation 
raw material list specific element generic function prints lists distfix notation data string xs map gshow xs need extend gshow help wrong type 
need higher kinded version call typeable typeable forall data gshow data string gshow gshow help quantified type constructor kind turn need new type class typeable haskell sadly lacks kind polymorphism 
discuss typeable section 
define follow exactly pattern different cast operator fn spec fn arg case spec fn just spec fn spec fn arg fn arg newtype need new cast operator 
type practically forced definition typeable data forall data absolutely necessary data constraint argument 
example typeable typeable forall argument required completely polymorphic desired arguments need data constraint 
data appears name 
implement 
split implementation parts 
part performs type test section second instantiates argument section 
generalising cast type test 
need primitive cast operator matches type constructor argument type 
type comparison typeable typeable new typeable typeable comparison role unchanged 
difference compares type constructors types previous generalisation cast typeable constraints concern differences types common shape 
implementation follows trivial scheme 
new class typeable parameterised type constructors allows extract run time representation type constructor class typeable typeof instance typeable typeof prelude list instance typeable typeof prelude operation constructor type representations correspond type constructors 
single typeable instance types outermost type constructors kind instance typeable typeable typeable typeof typeof typeof undefined notice scoped type variable 
function applies type constructor representation representation 
absence kind polymorphism sadly need distinct typeable class kind type constructor 
example binary type constructors class typeable typeof instance typeable typeable typeable typeof typeof typeof undefined worry proliferation typeable classes practice problem 
primarily interested type constructors arguments kind data class sense types 
second arity type constructors seldom large 
providing classes typeable practical purposes 
implementing goal implement typeable data forall data typeable typeable appear difficulties 
type restricted types form 
second polymorphic function instantiate applying dictionary data difficulties met making member data class class typeable data typeable forall data instance declaration available precisely necessary data dictionary instantiate argument 
instantiate pass instantiated version perform type test yielding simple implementation instance data data instances type constructors kind returns type required form 
instance data int just need family typeable classes need family operators annoying unavoidable limit fix 
generic function extension summary section long concrete results simple 
able generalise variants care think handle polymorphic monomorphic cases 
new operators easy see definition gshow section built interesting independently useful generalisation typeable class 
instances data typeable generated automatically compiler need seen user 
related position scrap boilerplate approach generic programming field described original state art generic haskell evaluated approach 
focus related regarding new contributions type reflection section zipping combinators section generic function extension section 
type reflection form introspection structure terms types observed including names constructors fields types 
addition terms constructed cf 
primitive 
quite similar reflection api language java attributes method signatures observed objects constructed class names 
sum products approach generic programming abstracts type structure 
need access constructor label names led refined approaches induction type structure involves special cases constructor applications labelled components :10.1.1.46.1159
altenkirch mcbride generic programming dependent types suggests reflective data represented types typeful approach 
type reflection entirely direct reflective information travels silently data dictionaries go data value 
consistent aspiration approach define generic functions universal representation compile time specialisation 
zipping known generic operation 
development shows defined generically curried cascaded folds pattern matching 
rely higher order generic functions 
sum product approach perform pattern matching incoming data structures simultaneously 
generic function driven type structure shared type constructor implies dependently polymorphic argument types 
altenkirch mcbride generic programming dependent types indicates argument type dependencies zipping captured accordingly dependent types intended 
approach employs highly parametric fold operator readily general multi parameter traversal 
pattern calculus called constructor calculus barry jay defines zipping operations simultaneous pattern matching arbitrary constructor applications 
argument types independently polymorphic 
customisation generic functions specific types obvious desideratum 
generic haskell generic function definitions involve sort ad hoc default cases 
approach narrows generic function extension simple construct nominal type cast 
original facilitated generic function extension monomorphic cases heritage focus term traversal 
new development section generalised monomorphic polymorphic cases generic function extension 
generality generic function extension accommodated generic haskell static level relying dedicated top level declaration form generic functions 
contrast generic function extension facilitates higher order generic functions 
hinze captures essential idioms generic haskell purely haskell model 
shares aspiration opposed substantial language extension generic haskell 
hinze lightweight approach facilitate characteristics approach 
notably hinze generic functions higher order 
generic functions operate representation type 
furthermore approach exhibits limitation related generic function extension class generics need adapted new type type constructor requires specific case 
scrap boilerplate approach generic programming haskell lightweight requires independently useful language extensions haskell higher rank types type safe cast implemented library 
third extension extending deriving clause handle data typeable specific approach non invasive 
general handles regular data types nested data types data types data type constructor parameterised additional types 
versatile supports higher order generic programming decoupling traversal strategy processing open world adding new data types riding generic functions specified types 
integrated supported describe implemented ghc 
expressiveness gained notably poly kinded generic function types type indexed data types 
issue current concern automation cut traversal generic functions explore sub terms known irrelevant virtue type information 
principle type reflection computation specialised traversal schemes template haskell compile time specialisation comes mind 
fact template haskell useful generic programming extensions 
gratefully acknowledge helpful comments suggestions olaf andres loh simon marlow 
altenkirch mcbride 
generic programming dependently typed programming 
generic programming 
proceedings ifip tc working conference generic programming schloss dagstuhl july 
clarke jeuring 
type preserving xml schema haskell data binding 
submitted padl feb 
claessen hughes 
quickcheck lightweight tool random testing haskell programs 
acm sigplan international conference functional programming icfp pages montreal sept 
acm 
clarke jeuring loh 
generic haskell user guide 
version release 
clarke loh 
generic haskell specifically 
gibbons jeuring editors proc 
ifip tc working conference generic programming 
kluwer academic publishers 
harm 
dimensional approximation coverage 
informatica 
hinze 
generic programming extension haskell 
proc 
rd haskell workshop paris france 
technical report universiteit utrecht uu cs 
hinze 
polytypic values possess types 
science computer programming june 
hinze 
generics masses 
draft feb 
hinze jeuring loh 
type indexed data types 
moller editors proc 
mathematics program construction mpc dagstuhl castle germany july volume lncs pages 
springer verlag 
hughes 
novel representation lists application function reverse 
information processing letters 
hutton meijer 
functional pearl monadic parsing haskell 
journal functional programming july 
jansson jeuring 
polylib library polytypic functions 
backhouse sheard editors proc 
workshop generic programming sweden june 
dept computing science chalmers univ techn 
goteborg univ june 
jay 
pattern calculus 
www staff uts edu 
au cbj publications pattern calculus ps 
accepted publication acm toplas 
koopman tretmans plasmeijer 
gast generic automated software testing 
pena arts editors implementation functional languages th international workshop ifl madrid spain september revised selected papers volume lncs pages 
springer verlag 
harm 
test case characterisation regular path expressions 
brinksma tretmans editors proc 
formal approaches testing software fates notes series ns pages 
brics aug 
peyton jones 
scrap boilerplate practical approach generic programming 
acm sigplan international workshop types language design implementation pages new orleans jan 
acm 
scrap boilerplate web site examples browsable library papers background 
www cs vu nl boilerplate 
hirschberg 
data compression 
acm computing surveys sept 
loh clarke jeuring 
dependency style generic haskell 
norris editors proceedings eighth acm sigplan international conference functional programming icfp volume acm sigplan notices pages new york aug 
acm press 
peyton jones shields 
practical type inference types 
unpublished manuscript 
sheard peyton jones 
template meta programming haskell 
chakravarty editor proceedings haskell workshop pittsburgh oct 
wallace runciman 
haskell xml generic combinators type translation 
acm sigplan international conference functional programming icfp pages paris sept 
acm 
witten neal cleary 
arithmetic coding data compression 
cacm june 

