revisiting categorical approach systems ant nia lopes jos luiz fiadeiro department informatics faculty sciences university lisbon campo grande lisboa portugal mal di fc ul pt atx software sa ant nio linda portugal jose fiadeiro org 
contribution category theory mathematical platform supporting software development wake goguen approach general systems reasonably recognised accepted emergence new modelling techniques paradigms associated new economy suggests approach needs revisited 
propose revisions lessons learned categorical techniques formalising developments software architectures coordination technologies service oriented software development general 
early goguen proposed categorical techniques general systems theory unifying variety notions system behaviour composition techniques 
main principles approach components modelled objects system configurations modelled diagrams depict way components system interconnected behaviour complex system colimit configuration diagram 
categorical principles formalise different mathematical models system behaviour logical specifications realisations parallel programs 
categorical approach platform comparing different modelling approaches giving semantics gross modularisation complex systems 
grounded principle design formalism research partially supported funda para ci ncia tecnologia project posi fast 
expressed category established algebraic characterisation notions compositionality coordination formalised architectural principles software design 
scope joint research effort atx software portuguese strong profile engaged development coordination technologies supporting levels agility required systems new ways companies doing business includes coping volatility requirements new paradigms associated internet 
research focused set primitives centred notion coordination contract oo languages uml extended incorporate modelling techniques available areas software architectures parallel program design reconfigurable distributed systems 
coordination technologies developing largely language independent sense variety modelling design languages 
experience formalising independence categorical techniques realise general approach outlined far simplistic restrictive 
hand allow capture typical restrictions apply way components interconnected 
restrictions crucial importance properties compositionality usually depend class diagrams represent correct configurations 
hand soon sophisticated models behaviour non determinism needs explicitly modelled different mechanisms necessary support vertical horizontal structuring 
expect notion morphism support component relationships required horizontal structuring refined relationships required vertical structuring 
review categorical approach order support new aspects motivated including new characterisation notion compositionality 
simple program design formalism community illustrate applicability proposal 
sophisticated powerful formalism simplicity community ideal important features new breed design formalisms need accommodated categorical approach 
capturing constraints configurations basic categorical approach systems design morphisms express interaction components 
concretely design formalism expressed category desc configuration interconnected components expressed diagram desc 
semantics configuration description system results interconnections obtained diagram colimit 
languages formalisms typically configuration software systems interconnection components usually governed specific rules happens physical components say hardware mechanical systems 
simple example terms languages communication 
typically languages output channels connected see instance 
may happen diagram represents correct configuration 
instance desc finitely cocomplete configuration components viable sense gives rise system semantics 
clearly situation configuration components correct 
correctness configuration diagram reduced existence colimit 
situations colimit exists category may cocomplete diagram may deemed incorrect rules set configuration language 
situations rules establish correctness configurations internalised structure category expressed restrictions diagrams considered admissible configurations 
situations deal practice correctness criteria reflected properties category related properties development approach separation computation coordination compositionality 
specific example section 
definition configuration criterion 
configuration criterion conf desc set finite diagrams desc dia conf dia colimit 
order illustrate notion configuration criterion simple interface definition language 
program design language built interface language 
consider interaction component environment modelled simultaneous execution actions exchanging data shared channels 
distinguish input output channels 
shall assume fixed set sort symbols typing data exchanged channels 
interface description triple disjoint indexed families sets finite set 
union denoted families model respectively output input channels set models actions system available public interface 
sort os resp 
set output resp 
input channels take data interface morphism pair ch ac ch total function 
ch ch ac partial mapping 
interface morphism supports identification way system interface component system interface 
function ch identifies channel component corresponding channel system 
partial mapping ac identifies action component involved action system 
typing channels preserved output channels component mapped output channels system 
notice input channels component may identified output channels system 
result interconnecting input output component results output system 
different approaches communications normally internalised available interface resulting system 
feel hiding communication decision explicitly default certainly part minimal operation interconnection want capture see categorical characterisation hiding 
interface descriptions interface morphisms constitute category denote intf 
interface morphisms establish synchronisation actions different components interconnection input channels component output channels components 
establish interconnection output channel component output channel component situation formalism ruled 
order express interface description formalism presenting output channels interface connected output channels interfaces define diagrams represent correct configurations 
diagram dia intf configuration diagram iff dia colimit dia exists exactly singleton 
say configuration diagram output channel system traced back output channel component 
interface channel nat bool interface interface bool nat bool nat example configuration diagram 
diagram defines configuration system components interfaces explicit connections components third interface channel 
reason call third interface channel viewed natural extension interconnection services available interfaces input output channels actions kind structured complex channel 
analogy hardware channel morphisms act cable interconnect components 
concretely diagram defines input channel connected output channel input channels identified resulting system input source 
furthermore configuration establishes synchronise actions colimit diagram depicted returns interface interface ab interface ab bool nat ab action ab models simultaneous execution way action models simultaneous execution synchronise actions interface ab actions modelling isolated execution horizontal vs vertical structuring categorical approach described previous section morphisms modelling horizontal structuring support process structuring complex systems interconnecting simpler components 
mentioned morphism identifies source component target 
supporting software development relationships need accounted reflect notions refinement different levels abstraction 
cases morphisms capturing interconnections components expressing refinement 
instance case algebraic specification data types specification formalism reactive systems 
case 
hand interconnection morphisms may serve purpose expressing refinement may weak represent refinements occur software development 
instance case algebraic approach proposed refined specware 
approach interconnection morphisms theorem preserving translations vocabulary source specification terms target specification refinement morphisms interconnection morphisms source specification conservative definitional extension target specification refinement morphism pair interconnection morphisms 
ab hand morphisms interconnecting components may suitable expressing refinement 
particular happens system necessarily refined system component 
instance csp functionality system necessarily preserved composed systems 
process ready execute longer property composed process ready execute notion refinement csp readiness semantics requires readiness preserved refinement refined integration dimensions horizontal structuring vertical refinement may require different categories considered 
definition design formalism 
design formalism triple desc conf desc desc desc categories conf configuration criterion desc 
desc desc 
isom desc isom desc 
objects desc desc identify nature descriptions handled formalism 
morphisms desc identify vertical structuring principles morphism desc expresses refines identifying design decisions lead 
morphisms desc identify horizontal structuring principles say diagrams desc express complex system put interconnection components 
description system results interconnection description returned colimit configuration diagram defined isomorphism 
condition ensures notion refinement congruent notion isomorphism desc 
descriptions isomorphic respect interconnections refine refined exactly descriptions 
explained previous section relation conf defines correct configurations 
order illustrate different categories may need formalise horizontal vertical structuring principles supported formalism language design parallel programs community 
community introduced similar unity computational model different coordination model 
concretely interaction program environment community unity dual unity relies sharing memory community sharing synchronisation actions 
design community form design init init sets input output channels respectively set actions constitute interface design init initialisation condition 
action represents set channels action change 
conditions establish interval enabling condition guarded command implements lie 
lower bound enabledness sense implied enabling condition negation establish blocking condition upper bound sense implies enabling condition 
enabling condition fully determined write condition 
channel non deterministic assignment time executed assigned values denoted 
formally design pair interface body design tuple init init proposition output channels assigns action set output channels assigns action non deterministic command available command empty denote skip assign action proposition 
example community design bank account cred negative number modelling credit limit 
design bankaccount amount nat bal int init bal deposit true bal bal amount withdraw bal amount cred bal amount bal bal amount design actions modelling deposit withdrawal amount 
amount transmitted component input channel amount 
deposits available clients 
withdrawals definitely refused requested amount credit limit bal amount cred definitely accepted balance sufficient cover requested amount credit facility necessary bal amount 
situations credit facility necessary bal amount cred left unspecified withdrawals accepted refused 
form underspecification called allowed non determinism see restricted refinement step 
previous section seen interconnection components established level interfaces 
corresponding configurations designs expressed category designs 
design morphism interface morphism 
ac defined ch ac 
ac ch 
ac defined ac ch ac 

ac defined ac 
ac defined ac 
designs design morphisms constitute category 
design morphism identifies component 
conditions mean domains channels preserved action system involve action component transmit channel component 
conditions correspond preservation functionality component design effects actions preserved deterministic initialisation conditions preserved 
conditions allow bounds design specifies enabling condition action strengthened weakened 
strengthening bounds reflects fact components participate execution joint action give permission action occur 
words enabling condition joint action conjunction enabling conditions corresponding actions involved components 
correctness configuration interconnected designs depends uniquely correctness underlying interconnection interfaces defined previous section 
int forgetful functor intf 
diagram dia configuration diagram iff dia int intf interface configuration diagram 
interesting notice category finitely cocomplete connections lead design diagrams may colimit 
existence colimits ensured correct configurations 
order illustrate system design constructed design components consider deposit amount exceeds threshold signaled environment 
achieved coupling bankaccount observer design 
design observer nat sg bool init sg detect sg number sg true sg number skip reset sg sg false observer design observe execution action detect number holds action executed 
design initialised ready execute detect depending number holds 
assignment detect sets output channel sg true signaling environment execution observed action condition number 
environment may acknowledge reception signal execution action reset 
diagram gives configuration required system 
diagram defines action observed observer deposit identifies input channel observer input channel amount 
say system observer signals deposits amounts greater number 
channel bankaccount observer remains define notion refinement supported community 
refinement morphism interface morphism conditions definition design morphism hold 
ch 
ch injective 
ac 
ac 
refinement morphism supports identification way refined 
channel corresponding channel action implemented set actions ac sense ac menu refinements action actions ac left undefined new actions channels ch new channels introduce detail description design 
conditions express refinement alter border system environment 
precisely input channels local refinement different channels collapsed single action implemented 
condition states conditions weakened strengthened 
condition allows strengthened interval defined conditions action enabling condition guarded command implements action lie required preserved reduced refinement 
conditions state effects actions design initialisation condition required preserved deterministic 
preservation required properties reduction allowed non determinism intrinsic notion refinement justify conditions imposed refinement morphisms 
clearly morphisms modelling interconnections satisfy properties 
order illustrate refinement consider design bank account bankaccount 
design history client credit facility taken account deciding withdrawal accepted 
difficult see ch bal bal amount amt amount deposit detect ac deposit deposit withdraw withdraw reset define refinement morphism bankaccount bankaccount 
design bankaccount amt nat bal count int init bal count deposit true bal bal amt bal amt bal bal amt bal amt cred count max bal bal amt count count reset true false count conditions withdrawals available clients left unspecified bankaccount completely defined bankaccount 
action withdraw bankaccount implemented bankaccount stand normal special respectively 
special withdrawals counted soon number reaches maximum longer accepted 
special withdrawals accepted restriction lifted modelled execution new action reset 
notice bankaccount contains allowed non determinism upper bound enabledness reset false precise situations restriction lifted 
compositionality compositionality key issue design complex systems possible reason system descriptions components level abstraction having know descriptions refined lower levels includes implementation 
compositionality usually described property refinement composite system obtained composing refinements components 
component interconnections explicitly modelled configurations refinement interconnections taken account 
situations compositionality formalism investigated notion refinement interconnections 
notion refinement principles defined desc establishes refinement configurations 
configurations refinement principles organised category follows 
definition configuration refinement criterion 
configuration refinement criterion design formalism desc conf desc category conf satisfies conditions 
objects conf finite diagrams desc 
dia dia morphism conf shapes respectively dia dia indexed family morphisms dia dia desc 
diagrams functors may diagram morphisms merely natural transformations instance specware 
restrictive enforce shape diagrams define configurations preserved refinement 
fixed configuration refinement criterion conf compositionality formulated property pick arbitrary refinements components system sys interconnect concrete descriptions arbitrary refinements connections sys obtain system refines sys 
dia dia precisely dia dia define configuration respectively sys sys dia dia morphism conf defines unique way refinement morphism desc sys sys design decisions compatible design decisions taken refinement components see 
say exists unique refinement morphism desc sys sys compatible morphisms dia dia 
possible define meaning compatibility design decisions independently context 
happens notion refinement interconnections meaning compatibility design decisions fixed priori 
compatibility depends morphisms identify dia dia components respectively sys sys 
way consider compatibility design decisions abstracted ary relation mor desc mor desc mor desc mor desc 
definition criterion compatibility design decisions 
criterion compatibility design decisions design formalism desc conf desc ary relation crt mor desc mor desc mor desc mor desc 
crt dom dom dom cod dom cod cod cod 
crt cod morphism desc desc crt 
dia desc configuration diagram dia colimit dia crt crt 
idea crt si si expresses design decisions defined agree decisions defined account morphisms identify si component component see fig 

si condition states obvious restrictions domains codomains morphisms 
condition ensures criterion consistent composition morphisms simultaneously refinement interconnection morphisms 
condition means refinement components system sys si sys system having components exists unique way sys may refinement sys 
definition compositional formalism 
fd desc conf desc design formalism conf configuration refinement criterion fd crt criterion compatibility design decisions fd 
fd compositional conf crt iff morphism dia dia conf exists unique morphism desc crt dia dia colimits respectively dia dia 
notion compositionality investigated characterised situation interconnection refinement morphisms coincide 
concretely desc desc refinement morphism diagram dia desc diagram dia desc exists iff subcategory case indexed family dia dia morphisms dia dia morphism criterion compatibility design decisions crt defined crt iff compositionality just consequence universal property colimits 
shows example interconnection components channel 
case universal property colimits ensures exists unique morphism 
case notice interconnection components defined refinement morphisms define interconnection concrete descriptions 
new configuration definition refinement initial identity 
int int int int int int int int illustrating characterisation compositionality proposed community 
define informally conditions configuration diagram dia refinement configuration diagram dia refinement components defined dia dia 
basically morphisms define system architecture seen collection components cables change refinement step 
cables interconnect designs replaced cables capabilities 
precisely replacement interconnection dia dia satisfy conditions interconnection dia consistent dia communications synchronisations defined dia preserved 
diagram dia establish instantiation input channel left dia 
say input channels composition preserved refinement 
diagram dia establish synchronisation actions defined independent dia 
compatibility design decisions simply consider diagram intf depicted 
design formalism community compositional formal definitions proof result 
important notice adoption different configuration refinement criteria gives rise different notions compositionality 
instance criterion defined community prevents addition new components system superposition refinement step just observers effects behaviour rest system 
possible prove compositionality community configuration refinement criterion allows addition new components system 
simplicity decided criterion difficult express requires conditions new components new cables 
proposed revision goguen categorical approach systems design order applicable larger number design formalisms 
new aspects revised approach ability represent specific rules may govern interconnection components ability support separation horizontal vertical structuring principles 
furthermore proposed characterisation compositionality refinement respect composition revised categorical framework 
explicit description component interconnections leads definition compositionality depends notion refinement interconnections meaning compatibility design decisions 
reported motivated experience categorical platform express sophisticated formalisms formalisms architectural design 
instance perceived property framework system design supports separation computation coordination measure ability formalism cope complexity systems general false ad hoc interconnections permitted 
similar way interconnections designs synthesised interconnections interfaces coordinated frameworks interconnections severely restricted 
experience need expressing correctness components configurations emerged reported 
going explores impact revision categorical platform map relate different formalisms 
showed categorical platform formalise integration different formalisms 
integration important supports multiple formalisms software development promotes reuse 
alur henzinger reactive modules proc 
lics 
burstall goguen putting theories specifications proc 
th ijcai 
chandy misra parallel program design foundation addison wesley 
algebraic specification diagrams proc 
th int conference automated software engineering 
fiadeiro maibaum categorical semantics parallel program design science computer programming 
fiadeiro maibaum interconnecting formalisms supporting modularity reuse incrementality kaiser ed proc 
rd symp 
foundations software engineering acm press 
fiadeiro maibaum temporal theories modularisation units concurrent system specification formal aspects computing 

fiadeiro emergence properties component systems wirsing nivat eds amast lncs springer verlag 
fiadeiro lopes algebraic semantics coordination ed amast lncs springer verlag 

fiadeiro lopes semantics architectural connectors bidoit dauchet eds tapsoft lncs springer verlag 

goguen categorical foundations general systems theory pichler trappl eds advances cybernetics systems research books 

goguen categorical approach general systems theory klir ed applied general systems research plenum 

goguen sheaf semantics concurrent interacting objects mathematical structures computer science 

gro rhode algebra transformations systems composition astesiano ed fase lncs springer verlag 

hoare communicating sequential processes prentice hall 

lano sanchez design reactive control systems event driven operations fitzgerald jones lucas eds formal methods europe lncs springer verlag 

lopes fiadeiro explicit state describe architectures finance ed fase lncs springer verlag 

lopes non determinism compositionality specification reactive systems phd thesis university lisbon 

magee kramer dynamic structures software architecture th symposium foundations software engineering acm press 

maibaum veloso sadler theory data types program development bridging gap ehrig floyd nivat thatcher eds tapsoft lncs 

manna pnueli temporal logic reactive concurrent systems springer verlag 

smith constructing specification morphisms journal symbolic computation 

srinivas specware formal support composing software ller ed mathematics program construction lncs springer verlag 

winskel compositional proof system category labelled transition systems information computation 

winskel nielsen models concurrency handbook logic computer science abramsky gabbay maibaum eds vol oxford university press 

easterbrook management evolving specifications category theory proc 
th int conference automated software engineering 

