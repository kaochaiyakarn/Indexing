model tool event aspect oriented programming mi douence mario december nd edition aspect oriented programming promises support incremental program development providing new means modularization crosscutting code 
briefly introduce general model aspect oriented programming event aop introduced dms monitoring execution events 
model extends previous approaches enabling systematic treatment relationships execution points supporting operators aspect composition allowing application aspects aspects 
tool implements model java 
technical report info partly funded eu project www org 
ist contents event aspect oriented programming tool architecture implementation preprocessor 
execution monitor 
events 
aspects 
aspect composition 
aspects aspects 
example managing discounts commerce applications base application commerce shop 
lottery aspect 
discount aspect 
profiling discounts profiling aspect 
related aspect oriented programming aop research domain aop aims support incremental program development providing new means modularization 
fact certain concerns frequently denoted non functional intractable means traditional modularization mechanisms programmers modify code numerous places order integrate concerns 
aspectj asp developed gregor kiczales group xerox tool providing linguistic support modularization crosscutting code 
aspectj introduced notion pointcut enabling declarative specification large number execution points means generic signatures aspect modifies base program notion advice defining modifications 
aspectj constitutes point space aspect definition languages 
important motivation development testbed aop 
interested efficiency issues prototype supports selective instrumentation see section concentrate expressiveness mechanism provided ao language definition 
propose approach aop observation execution events event aop introduced dms 
approach allows systematically treat relationships pointcuts operator composition aspects definition aspects applied aspects dynamic instantiation aspects 
report structured follows section reviews main characteristics model aop 
section shows model implemented java tool application examples section 
discuss related conclude 
event aspect oriented programming event aspect oriented programming guided main goal study descriptive means definition expressive aspects 
concretely model characteristics 
aspects expressed means events emitted execution called base program 
aspect weaving realized execution monitor enables event sequences detected 
order keep model simple intuitive enable links established implementation formal dms dfs consider sequential model synchronous events soon event emitted handled aspects second executions base program aspects proceed turns base program monitor coroutines 
aspect defined means separated languages crosscut language allows definition execution points aspect may modify base program non functional concerns limited technical services la corba distribution persistence include services quota management prefetching strategies 
public distribution tool scheduled december 
base program aspects preprocessor events instrumented base program aspects aspects composition operators java virtual machine architecture tool monitor action language called advice aspectj enables execution base program modified 
instance security aspect define crosscut detecting sequences consisting request followed service allocation triggers action authentication 
order facilitate aspect definitions model provides operators explicit aspect composition 
operators enable elimination conflicts caused aspects interacting crosscuts 
example security aspect mentioned quota management aspect interact service allocations case security aspect priority 
model allows application aspects aspects 
instance logging aspect applied security aspect generate log system administrators 
model allows dynamic instantiation dynamic composition aspects 
example new critical service discovered new instance security aspect may created 
tool architecture implementation implemented tool realizes model java 
tool composed parts see preprocessor unique execution monitor libraries definition events aspects composition aspects 
preprocessor preprocessor instruments java source code base program aspects wants define aspects aspects order generate events call entry execution monitor cf 
instrumentation example shown 
instrumentation classic technique method wrapping 
method foo wrapped renamed original 
transformation introduces body creates method call event calls monitor calls method foo original creates method return event calls monitor returns callee 
constructors wrapped similarly 
possible generate event constructor instruction possibly implicit call super 
reason constructors transformed default constructors creating original code class bar int int foo int return instrumented code class bar int int foo int event new methodcall foo monitor monitor trace 
skip res foo original arg monitor monitor trace new return res int foo original int return simplified example instrumentation base program object structure initialization methods instrumented event generation statements 
instrumentation implemented means tool transformation java programs rec 
simplifies formulation transformations ensures transformations generate valid java code results compiled 
order control instrumentation tool includes framework selective application transformations methods classes aspects 
enables obtain reasonable efficient implementation number execution points instrumented large 
mechanism aside interested testbed enabling definition expressive aspect languages reserve efficiency considerations 
execution monitor monitor observes events emitted execution base program 
propagates event corresponding current execution point aspects 
architecture sequential base program generates events calls monitor base program suspends execution 
aspect possibility react current events monitor yields control base program resumes execution 
second monitor propagates current event aspect waits aspect finishing treatment propagating event aspect 
eliminate possibility concurrency tween monitors aspects aspects 
semantics event systems complex 
events events objects represent execution points java programs 
current version tool supports kinds events method call return events constructor call return events 
kinds sufficient current experimentations new kinds added needed instance events representing field accesses entry branch 
current infrastructure prepared accommodate events instrumentation phase instance able explicit control flow programs event library extended easily 
events describe nature execution points dynamic contexts 
example method call events contains receiver method name argument values depth execution stack identity code currently executed distinguishes base program aspects 
contains boolean skip indicate wrapper call original method see 
enables aspect replace method case field event object set aspect defines return value 
aspects aspect seen event transformer 
fact aspect java program takes event parameter performs computation may modify event waits event 
instance security aspect may encrypt arguments contained method call events receives 
wrappers base program responsible extract potentially modified values event arguments calling original method 
return value call may filtered aspect similarly 
aspect defined subclassing class aspect defining method definition 
method impose constraints structure code uses method order obtain event 
method blocking waits monitor waking aspect current event 
implemented java threads library coroutines ensuring moment base program monitor aspect active 
aspect composition events propagated sequentially aspects monitor equivalent iterator array aspects 
aspect composition provides greater expressiveness 
possible restrict propagation events certain aspects decision dynamic monitor manages binary tree aspects leaves interior nodes aspect composition operators propagate events 
monitor attempts propagate events sequentially aspect performing depth traversal aspect tree 
instrumented base program evt evt evt aspect instr 
monitor seq evt aspect tree event propagation evt aspect tool currently proposes binary operators aspects compositions kinds binary interior nodes seq propagates current events coming parent left child right 
propagates event children arbitrary order 
fst propagates event left child left child detect crosscut event forwarded right child 
aspect composition operator maintains boolean order propagate information 
boolean managed explicitly programmer aspects 
cond propagates event left child left child detect crosscut event forwarded right child 
consider instance aspect tree shown composed aspects 
execution base program event evt generated step monitor propagates event aspect step aspect step 
aspect blocks call control switches back base program 
moment ignore steps discussed section 
new combinators developed needed subclassing class representing binary nodes 
aspect trees restructured dynamically particular aspect creates new instance aspect inserts current tree aspects 
existence different nodes useful order implement rules dynamic restructuring aspect tree commutative operator seq associative 
aspects aspects tool allows application aspects aspects 
implementation level main problem case consists managing recursive calls execution monitor 
aspect woken monitor current event executes code blocking call 
execution code may emit events transmitted monitor 
reconsider example shown aspect instrumented 
execution event evt generated passed monitor step propagates aspects ready consume aspect step 
aspect blocks control goes back aspect resumes execution described previous section 
execution aspect ready receive event blocked waiting return method trace monitor 
state implemented boolean aspect managed infrastructure 
way monitor propagate events aspects flag true 
guarantees weaving loop indefinitely aspect weaves aspects weave 
mean aspect applied requires creation different instances example instance statistics aspect may profile instance statistics aspect turn profiles base program 
monitor application aspects guarantees exactly thread base program monitor aspect active point time base program may composed multiple threads 
case monitor declared 
note monitor re entrant order cope aspects aspects 
order conclude description note tool really currently provide dedicated language definition crosscuts dms crosscuts actions defined java code 
method aspect composition operators seen basic building blocks language 
example managing discounts commerce applications show commerce application may extended aspects 
interested aspects general structuring mechanism consider example non functional aspects la corba business logic crosscut base application 
aspects defined basis crosscuts detecting certain sequences purchases illustrate interaction aspects handled tool 
note toy application intended illustrate model tool pretend realistic 
code section extracted executable application developed tool 
public void main customer customer customer customer customer les mis customer buy shop usage scenario commerce application base application commerce shop base application mainly composed classes shop customer product shopping cart order 
method main see shows usage scenario client inspects product catalog puts products shopping cart validates purchase 
shop processes orders daily basis 
lottery aspect consider managing lottery intended improve customer fidelity th customer pays half purchase 
aspect requires instrumentation method buy base application 
done specializing method constructor controls selective instrumentation java code 
class bingo shown extends aspect buy factors functionalities billing method method returns event corresponding purchase 
code pattern obviously generalized form library predicates order provide expressive language definition crosscuts 
definition bingo increments counter purchase modifies amount current purchase necessary reducing price shopping cart customer receiver accessed event representing method call 
unique instance aspect created inserting line code base application monitor monitor aspects new bingo discount aspect discount aspect defined summing different purchases customer 
time amount reaches certain total say amount purchase class buy extends aspect event boolean ok false event null ok ok instanceof methodcall methodcall method getname equals buy return float float rate object 
class bingo extends buy int event boolean ok false event null ok ok instanceof methodcall methodcall method getname equals buy return public void definition true event float discount receiver receiver new product bingo discount lottery aspect class discount extends aspect float customer get customer constructor return event customer order customer get order method call event ship public void definition customer insert new discount true order total event float discount new product discount discount discount aspect reduced 
aspect discount shown implements behavior 
class discount defines method order detect new customer created application 
method react order processed shop 
methods similar method 
unique instance aspect created initially monitor monitor aspects new discount start aspect call dynamically creates new instance aspect inserts aspect tree current position 
new instance ready manage new customer 
current instance aspect starts accumulating purchases current 
possible compose aspect order ensure client winning lottery benefit time discount monitor monitor aspects new fst new bingo new discount profiling discounts profiling aspect shop manager interested evaluating number discounts granted bingo discount third aspect observe aspects recognize calls method class profiling extends aspect event get event call defined class discount public void definition int true event true profiling aspect shown 
new aspect instantiated composed composition statement monitor monitor aspects new seq new fst new bingo new discount new profiling order conclude discussion note applied tool enterprise javabeans component model ejb 
successfully extended ejb predefined security aspect inject precondition functionality 
restrictions consisting sequentialization execution addressed order able treat fully distributed ejb applications 
related report previous exposed limitations aspectj approaches aop dms proposed formal expressive model crosscuts dms formally studied aspect interactions restricting expressiveness crosscut language essentially finite state automata dfs 
researchers considering restrictions action language aspects essentially limiting possibility abort base program execution optimizing weaver context aspects definition security policies expressed execution traces cf 
aspectj asp best known tool aop offers specialized language crosscuts definitions 
aspectj uses preprocessor execution monitor probably efficient flexible 
aspectj notion aspect composition limited essentially allowing order aspects aspects aspects supported 
order formulate expressive crosscuts relating sets atomic ones programmer manually code dependencies involved execution points counter express second time method foo called call bar approach allows directly express 
weaver java code 
proposes language allowing specification different kinds fusion classes methods 
focuses code structure support relations execution points 
computational reflection general technique explicit modify execution mechanisms programming language 
technique enable concerns separated base application encapsulating 
appropriate relations execution points expressed fit structure base language see ex 
led 
programming metalevel generally done base language 
reflective approaches support aop development multiple aspect languages 
jac psdf system aop reflective infrastructure 
tool supports dynamic application aspects 
jac provide support dedicated aspect languages dynamic creation aspects 
composition filter model ba inherits previous reflective approaches proposes method wrappers order filter method calls returns 
approach includes simple limited composition technique wrapper nesting 
composition filters enable relationships different execution points formulated naturally provide support attachment filters arbitrary groups objects 
large body exists notion trace analysis instance approaches prolog define dynamic analyses traces debugging purposes duc 
papers apply temporal logic safety properties embedded systems hr 
approaches interpreted aop approaches featuring rich crosscut languages prolog temporal logic limited action languages warn user bug 
framework composition dynamic creation aspects considered 
report model tool event aop 
model execution traces programs code 
provides expressive crosscuts defined sequences execution points 
allows control interactions aspects composing aspects handle aspects aspects 
furthermore programmers flexibility create remove reorganize aspects program execution 
provided evidence model aop execution monitoring expressive intuitive 
instantiated relatively simply different languages allows integrate aspects written different languages calling aspect written monitor written java appropriately defined events 
implemented tool java implementing model initial applications 
note exception concerning expressive crosscuts aspectj construct allows relate execution points call event return event specific method call 
proposal obviously incomplete offers directions 
new kinds events operators aspect composition manipulation aspect tree defined order able take account realistic problems 
different constructions supported specialized languages composition language order simplify 
second model implementation essentially sequential 
numerous applications rely concurrent distributed execution model 
model extended suitable concurrent distributed model aop monitoring monitor distributed site 
third interactions base program aspects may complex 
desirable develop static analysis techniques order aid program development 
defined proposal interaction analysis regular crosscuts dfs 
possible statically determine aspects may conflict crosscut execution point 
analysis integrated tool 
current interpretative implementation optimized program specialization techniques 
experimentations conducted order evaluate precisely benefits limitations approach 

colleagues pierre cointe jean claude royer eric comments 
aop aspect oriented programming volume communications acm 
acm october 
asp aspectj 
home page aspectj org 
ba bergmans aksit 
composing crosscutting concerns composition filters 
communications acm october 
cf fradet 
enforcing trace properties program transformation 
proc 
th acm sigplan sigact symposium principles programming languages popl pages 
acm press january 
dfs douence fradet 
framework detection resolution aspect interactions 
proc 
acm sigplan sigsoft conf 
generative programming component engineering october 
dms douence 
formal definition crosscuts 
proc 
rd int 
conf 
metalevel architectures separation crosscutting concerns volume lncs 
springer verlag september 
dms douence 
sophisticated crosscuts commerce 
int 
workshop advanced separation concerns ecoop june 
duc 
extendable trace analyser prolog 
journal logic programming 
special issue synthesis transformation analysis logic programs 
ejb enterprise javabeans 
home page java sun com products ejb 
gosling joy steele bracha 
java langage specification 
addison wesley nd edition 
hr havelund ros java runtime verification tool 
proc 
th int 
symposium artificial intelligence robotics automation space montreal canada june 
kiczales hilsdale hugunin overview aspectj 
knudsen editor proc 
th european conf 
object oriented programming ecoop volume lncs pages 
springer verlag berlin june 
led ledoux 
des aspects pour la construction applications parties 
colloque int 
sur les technologies de la partition montr canada october 
psdf 
jac flexible solution aspect oriented programming java 
proc 
rd int 
conf 
metalevel architectures separation crosscutting concerns volume lncs 
springer verlag september 
rec 
home page sourceforge net projects 
peri tarr harold ossher william harrison stanley sutton jr degrees separation multi dimensional separation concerns 
proc 
int 
conf 
software engineering icse pages los angeles ca usa 

