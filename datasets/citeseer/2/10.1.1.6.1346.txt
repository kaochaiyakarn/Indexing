epidemic protocol managing routing tables large peer peer networks maarten van steen steen cs vu nl vrije universiteit amsterdam 
building self maintained overlay networks message routing attracted significant research interest 
suggested solutions common goal build maintain structures routing tables route messages 
proposed algorithms focus efficiency bandwidth usage 
behavior uncertain presence highly dynamic environments serious disasters half nodes crashing 
alternative approach managing routing tables peer peer routing overlay networks newscast epidemic protocol 
substantiate claims presenting experimental results 
demonstrate potential newscast epidemic protocol create highly robust self administered overlay networks able sustain adapt fast severe network changes 
internet dramatically expanded past years proving traditional client server model communication inadequate number services large scale 
network research community realized centralized servers way go respect managing administering large scale distributed systems certain applications systems 
result considerable effort designing peer peer overlay networks 
networks highly totally decentralized distributed systems nodes equal peers cooperating provide service 
major advantage systems involve central point administration control 
significant part research systems designing overlay networks routing 
networks operate application layer top existing physically interconnected set nodes internet 
assign participating node id route messages node ip address 
performance terms routing hops usually inferior compared traditional ip routing 
offer number attractive advantages higher fault tolerance flexibility deployment adaptivity lack central control 
number systems proposed chord pastry tapestry :10.1.1.140.3129:10.1.1.140.3129:10.1.1.142.752:10.1.1.105.3673
common property try form maintain sort structure large number participating nodes route packets 
algorithms newscast fall category epidemic gossip protocols 
aim exploiting randomness disseminate information large set nodes keep set nodes highly connected event major disasters keeping static structures requiring sort administration 
connection nodes systems highly dynamic 
systems adaptive major network changes appear self healing behavior respect major network disasters 
lack structure restricts carrying types services routing efficient way 
combine advantages routing overlay networks highly fault tolerant self healing epidemic networks 
particular investigate bootstrap maintain structures peer peer routing highly dynamic emergent behavior newscast 
demonstrates power epidemic protocol simple newscast protocol managing structures large scale distributed systems totally distributed scalable way need external administration high fault tolerance 
section provides brief description newscast concentrating epidemic protocol 
section describes structures peer peer routing 
architecture proposed management peer peer routing tables section 
section describes experiments conducted section discusses results obtained 
directions research 
newscast protocol newscast introduced model information dissemination membership management large scale agent distributed systems 
deploys simple peer peer data exchange protocol 
newscast protocol forms overlay network keeps connected means epidemic algorithm 
protocol extremely simple agent knows continuously changing small set peers periodically picks randomly exchange information 
brief overview protocol operation explore properties emergent behavior 
newscast information exchanged means news items 
news item field structure containing id agent originated network address agent timestamp moment generated application specific data 
agent maintains fixed sized cache news items typical value 
basic idea agent periodically picks random peer cache subsequently agents replace cache entries news items union original caches 
formally omitting specific details described agent executes steps dt time units dt referred refresh interval 
add fresh agent specific news item cache 

randomly select peer agent considering network addresses agents cache 

send cache entries selected peer agent turn receive peer cache entries 

cache entries keep newest ones discard rest 
selected peer step executes steps exchange agents cache 
note soon agents executes protocol respective caches different 
algorithm resembles traditional push pull epidemic protocol 
critical difference correspondent knows complete member list small random fraction 
protocol require clocks agents synchronized timestamps news items single cache mutually consistent 
assume communication time agents negligible compared dt generally order minutes 
agent passes cache sends current local time receives cache entries subsequently adjusts timestamp entry value effectively normalizing time new entry cached 
turns simple model communication desirable statistical properties 
understand behavior consider undirected communication graphs different time instants graph constructed follows 
vertex set contains agents alive time link agents exists cache cache time 
cache exchange algorithm leads series graphs initial graph graph expresses possibility cache exchanges essence information flow time consider series graphs dt dt 
note time interval dt agent initiates cache exchange algorithm 
words dt time units agents added fresh news item caches exchanged merged caches neighbors possibly 
say cycle newscast protocol completed 
conducted simulations agents assuming idealized communication infrastructure communication delays packet losses deploying actual newscast agents real wide area network 
simulations show small cache sizes say graph kdt stays connected 
turns average path length average length shortest paths nodes converges low value just cycles slightly longer average path length random graphs 
real experiments nodes cache size entries average path length converges respectively cycles 
additional experiments showed insignificant dependence network latencies packet losses exceptionally high 
significant property newscast strong connectivity 
subgraph number random nodes links removed 
simulations show remains connected half nodes removed 
means half agents newscast network removed rest nodes remain connected single cluster 
fact newscast connectivity property strong needs remove nodes start breaking remaining network disjoint clusters 
nodes surviving major disaster quickly converge independent strongly connected newscast network capable sustaining major disasters similar severity 
experiments show need extremely simple way handling membership important improvement comparison epidemic models 
consider worst solution handling membership possibly disrupt emergent behavior protocol agent contacts agent running known central server simply initiates cache exchange protocol 
approach systematically biases content caches depend stored central server 
conducted simulation experiment admitted new agents communication cycle agents joined network new agents allowed join 
measuring average path length saw shortly approximately cycles agents added average path length quickly converged expect stable graph 
conclude worst imaginable membership protocol affect general properties 
effect node wants join needs know address single node simply start executing newscast protocol 
leaving done simply stopping communication 
peer peer routing key issues designing large scale peer peer overlay networks provide efficient way routing 
architectures proposed peer topeer routing substrates chord pastry tapestry :10.1.1.140.3129:10.1.1.140.3129:10.1.1.142.752:10.1.1.105.3673
distributed systems map keys values way similar hash tables referred distributed hash table dht networks 
popular pastry tapestry employ routing concept incrementally matching destination id digit digit 
section structure operation principal structures routing routing tables 
node assigned unique numeric identifier nodeid simply id message numeric key node routes message node id equal key 
nodeids keys bit integers forming nodeid space spans 
typical value provide sufficiently large nodeid space accommodate possibly billions nodes 
nodes pick nodeids randomly uniform probability set bit strings 
assume nodeid space large compared actual number nodes probability nodes pick unique ids high 
assumed nodeids uniformly distributed geographic regions multiple jurisdictions various networks 
purpose routing nodeids keys thought sequence digits base bit long digits configuration parameter typical value implies hexadecimal digits 
routing message destination achieved gradually matching additional digit message key time say left right 
step message normally forwarded node id shares key prefix digit bits longer prefix key shares node id node known 
node known routing message fails 
implement logic described message routing node maintains routing table 
routing table node consists rows entries 
number routing table rows grows logarithmically size id space supported 
routing table entry contains id node corresponding ip address 
row routing table contains entries represents matching prefix nodeid digit position 
entries rth row 
contain nodes ids share digit prefix node 
cth entry rth row contains node additional constraint id rth digit equal instance assuming hexadecimal digits nodeid nd entry rd row routing table node bf 
hex digits total node id starts th entry th row node id starts 
receiving message node compares message key nodeid 
share common prefix digits forward node id shares prefix digits key 
accomplish node looks th row routing table contains nodes sharing key digits 
row picks kth entry value key th digit forwards message node 
node shares key digits th 
process continues node id matches digits message key reached message forwarded 
routing newscast important issue dht peer peer systems managing routing tables 
tables kept date having nodes join leave system contact nodes explicitly 
handle failures heartbeat algorithms probe nodes take measures failure detected 
propose different approach separate routing table management similar separation deployed internet routing protocols ospf rip 
believe separation leads cleaner simpler design cost performance 
newscast typically distributed background process nodes kept date lazy fashion 
dht peer peer systems propose deploy newscast maintaining routing tables 
method completely decentralized highly robust quickly adjusts major changes network 
advantages come price continuous bandwidth consumption 
principal idea newscast epidemic protocol number important properties described section 
maintains strongly connected graph sustains disasters adapts fast possibly major network changes highly scalable 
idea combine adaptivity strength newscast epidemic protocol efficiency routing scheme section create robust highly fault resilient peer peer overlay network efficient routing 
knowledge peer nodes provided newscast populate routing tables 
iteration newscast protocol node receives nodes randomly chosen participating nodes 
node gather information build maintain rows 
concentrate building row node routing table 
requires nodes ids differ node id digit total nodes 
seen differently considering classes nodes split id digit require arbitrary representative class excluding node class 
assuming evenly distributed node ids class contains roughly nodes 
high probability node learned representative classes random nodes known 
assuming cache size happen node executes newscast cache exchange protocol 
second row node routing table require nodes ids digit different second digit node id apparently seeking representatives narrower node id ranges containing roughly total nodes 
general filling kth row requires representatives classes containing just total nodes 
narrower node id range gets difficult find representative random samples nodes 
obviously inefficient rely newscast set nodes find representatives narrow node id ranges 
focused approach required described subsection 
multi layer newscast scheme mentioned executing newscast protocol seen running distributed background process nodes kept date 
efficiently maintain routing tables run multiple instances newscast protocol node running newscast agents parallel 
fact node runs exactly newscast agents responsible maintaining rows node routing table 
agent responsible row 
node referred agent node note node agent deals nodes ids share common prefix length node id accept nodes different prefix cache 
node agent interacts terms newscast protocol agent peer nodes shown 
apparently agent peer node contacted agent node contains items node ids share long prefix 
seeing agent node maintains small world network nodes ids digits id agent nodes maintain single connected small world set nodes 
fig 

communication node communication cycle 
collect nodes particular prefix single connected small world apply strategy 
peers known node agent reported node agent 
agent turn inserts peers match prefix requirement cache replacing oldest cache items reports agent node 
words peer known node agent known agents node potentially interested 
important observation agents nodes share id digits formed single small world agents nodes share arbitrary ith digit form single connected small world fast 
agent learns random peers digits dt time units 
assuming evenly distributed node ids expect average peers known dt time units share ith id digit node addition digits 
typical parameter values peers sharing digits known dt time units average 
partly explains agents node form small worlds quickly shall see 
notice initially node agent forms trivial small world disjoint rest 
small world generally expands cycle agent random peer satisfying prefix requirement agent introduced 
small worlds nodes unite nodes happens learn existence nodes respectively 
larger disjoint small worlds unite 
seeing increasingly accelerating behavior process merging disjoint small worlds 
reasonable state agent set nodes sharing digits form small world just cycles provided agent nodes sharing digits form small world 
set nodes agent run pure newscast instance guarantees single connected small world existing nodes 
induction claims previous paragraph expect instances newscast executed agents nodes quickly form small worlds designed 
experimental setting implemented architecture described section java deployed das processor cluster geographically distributed wide area network netherlands 
carried experiments set nodes number running das processor simultaneously 
regarding parameters related peer peer routing considered node ids length bits digits length bits hexadecimal digits 
setting resulted rows columns routing table 
far newscast parameters concerned node running newscast agents routing table rows 
cache size newscast agent 
ran experiments refresh interval dt sec agents 
seconds newscast agents node initiated cache exchange 
recorded analyzed behavior architecture intervals seconds logged network state communication cycles 
facet experiments worth noting bootstrapping mechanism 
bootstrapping refer procedure providing agents information required jump start overlay network formation 
principle new agent joins contacting existing agent exchanging caches 
network starts scratch systematic way provide initial communication points agent 
experiments nodes agents provided address single selected node agent 
providing agents choice possibly random agents connect initially enhances randomness network early cycles 
bootstrapping mechanism simple centralized chose claims architecture fast convergent behavior discussed section 
imposed fake large scale failure experiment running observe analyze behavior system cases 
particular killed nodes middle experiment 
observations experiments analysis section 
experimental results analysis section presents output experiments agents 
recorded analyzed aspects system behavior dynamic forming routing tables bootstrapping large scale failure 
bootstrapping part experiment aimed observing system behavior bootstrapping 
presents system fast convergence fully operative routing substrate 
shows average number routing table rows completely filled node function number cycles elapsed experiment start 
node ith routing table row completely filled means node route message key shares digits node id peer node id additionally matches ith digit message key 
note system manages fill routing table entries nodes cycles 
cycles filled rows fig 

average number filled routing table rows 
cycles avg 
routing steps cycles msgs delivered fig 

left average routing steps taken 
right percentage messages delivered 
demonstrates efficiency routing messages random destinations 
node routed number messages random nodes 
presents average values 
left hand diagram shows routing steps messages took average en route destination 
initially routing tables empty messages take steps destinations 
routing tables gradually formed messages correspondingly routed steps 
diagram similar number routing steps message takes directly dependent number filled routing table rows 
right hand diagram shows percentage messages manage reach destinations function number cycles 
cycles messages reach destinations 
routing tables filled messages routed way destinations 
turns cycles messages delivered destinations cycles fraction increased 
cycles filled rows fig 

average number filled routing table rows recovering node crash happened cycle robustness large scale failures test system behavior face large scale failures intentionally killed half agents knew nodes routing tables completely filled cycle specifically killed nodes odd id shall see network remains connected major disaster adapts quickly set nodes remain alive 
figures analogous previous figures 
shows average number routing table rows completely filled valid entries node 
note outdated entries crashed nodes ones odd ids considered valid counted 
immediately crash nodes rows filled implies nodes routing rows entries odd node ids 
seen diagram routing tables filled quickly 
cycles crash nodes routing table rows filled 
note maximum number rows filled node 
routing tables th rows filled require nodes match possible cases digit ids 
nodes odd ids exist possible fill rows 
affect routing routing paths existing nodes nodes id exist complete 
system capability route messages seen 
left hand diagram shows average number steps message routed 
initially half nodes removed messages routed average half way destination 
routing tables adjust change imposed half nodes crashing messages routed steps destinations 
right hand diagram shows percentage messages successfully routed way destination 
just bootstrapping case routing tables formed fast 
takes cycles moment crash form routing tables route message source destination 
corresponded approximately minutes experiment start cycles avg 
routing steps cycles msgs delivered fig 

message routing recovering node crash happened cycle left average routing steps taken 
right percentage messages delivered 
bandwidth considerations section provide estimation individual node aggregate bandwidth experiments number bytes transferred application layer 
note additional overhead induced underlying network protocols tcp ip consider 
despite bit node ids experiments estimation assuming node ids bits id size real operation 
cache entry consists bytes bytes node bit id bytes ip address bytes port bytes entry timestamp 
cache entries account bytes 
cache exchange involves sending cache peer receiving peer cache causes traffic bytes 
dt node initiates exactly cache exchange participates average cache exchange initiated 
cache exchanges cause transfer bytes 
running agents single node exchanges bytes dt sec 
bytes second bps kbps 
price pay achieving fully operative routing tables seconds minutes 
aggregate bandwidth multiply individual node bandwidth number nodes divide traffic caused cache exchange counted twice exchange initiator peer node 
total bandwidth kbps mbps 
note bandwidth high fact distributed possibly world wide network 
real system bit node ids digit length bits need newscast agents running node 
require exchange bytes dt node 
note refresh interval dt configuration parameter 
setting longer refresh interval lower bandwidth node expense slower completion routing tables 
instance refresh interval dt sec require bandwidth bytes second roughly kbps 
case routing tables take longer filled minutes 
directions aimed demonstrating potential newscast protocol building large scale self managing communities 
particular dealt application managing routing tables dht peer peer networks 
introduced newscast architecture application analyzed system behavior experimentation 
showed proposed system forms routing tables fast totally decentralized self organized manner 
research currently development 
results experiments suggest system provide highly robust non centralized routing table management 
research remains done discover potential optimizations architecture field bandwidth consumption 
architecture possibly significantly bandwidth adaptive refresh intervals applied 
agent node individually optimized set configuration parameters cache size refresh interval 
research aims optimizing current approach 
goal research broader sense exploiting newscast multitude diverse peer peer applications 
envision newscast basic background process supporting organizing managing overlay networks fully decentralized way 
contribution provides analyzes complete solution specific problem showing potential newscast protocol support systems 

jelasity van steen 
large scale newscast computing internet 
technical report ir vrije universiteit amsterdam department computer science amsterdam netherlands oct 

demers greene hauser irish larson shenker sturgis swinehart terry 
epidemic algorithms replicated database management 
proc 
th acm symp 
principles distributed computing podc pp 
vancouver aug 

ganesh 
kermarrec massoulie 
peer peer membership management gossip protocols 
ieee transactions computers 

jelasity van steen 
robust scalable peer peer gossiping protocol 
agents peer peer computing workshop melbourne australia july 

ratnasamy francis handley karp shenker 
scalable content addressable network 
proc 
acm sigcomm san diego ca aug 

stoica morris karger kaashoek balakrishnan 
chord scalable peer topeer lookup service internet applications 
proc 
acm sigcomm san diego ca aug 

rowstron druschel 
pastry scalable decentralized object location routing large scale peer peer systems proc 
ifip acm middleware heidelberg germany nov 

zhao kubiatowicz joseph 
tapestry infrastructure fault resilient wide area location routing 
technical report ucb csd berkeley ca apr 

balakrishnan kaashoek karger morris stoica looking data systems comm 
acm 
