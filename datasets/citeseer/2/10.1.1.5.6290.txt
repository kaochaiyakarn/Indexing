planning preferences logic programming tran cao son enrico department computer science new mexico state university las cruces nm usa cs nmsu edu 
declarative language pp specification preferences possible solutions trajectories planning problem 
novel language allows users elegantly express non trivial multi dimensional preferences priorities 
semantics pp allows identification preferred trajectories goal 
provide transformation logic programming negation failure allows existing logic programming systems solve planning problems pp preferences 
planning classical sense problem finding sequence actions achieves predefined goal 
research ai planning focused methodologies issues related development efficient planners 
date efficient planning systems developed see summary planners competed international conference artificial intelligent planning scheduling 
developments attributed discovery domain independent heuristics domain specific knowledge development efficient data structures implementation planning algorithms 
logic programming played significant role line research providing declarative framework encoding different forms knowledge effective planning process 
relatively limited effort placed addressing important aspects real world planning domains plan quality preferences plans 
real world situations space feasible plans achieve goal dense plans executable may undesirable behavior 
situations may difficult find solution challenge produce solution considered satisfactory needs preferences user 
feasible plans may measure quality subset may considered acceptable 
issues illustrated example example 
am bob ph student home 
needs school am take qualification exam 
car broken drive school 
take bus train taxi go school take minutes respectively 
bus train require bob walk nearby station may take minutes 
taxi arrive minutes 
need taxi bob call taxi 
charge flat rate trip fee schedule trip school 
takes bus train bob spend 
furthermore bob student prefers pay possible 
easy see feasible plans bob arrive school time exam calling taxi companies 
taxi preferable bob wants save money 
case plans feasible bob preference deciding factor select plan follow 
example demonstrates users preferences play deciding role choice plan 
need able evaluate plan components finer granularity simply consistent violated 
argued users preferences important selecting plan execution planning problem solutions 
worth noticing exceptions system sipe metatheoretic biases planning systems allow users specify preferences finding plans 
responsibility selecting appropriate plan purpose rests solely users 
important observe preferences different goals planning problem satisfied plan 
distinction similar separation hard soft constraints 
instance bob goal spend go school feasible plans arrive school time 
investigate problem integrating users preferences logic programming planner 
develop language specification user preferences provide logic programming implementation language answer set programming 
demonstrated normal logic programs answer set semantics provide natural elegant framework effectively handle planning preferences 
divide preferences user different categories preference state user prefers state satisfies property state satisfy satisfy goal preference action user prefers perform action feasible allows goal achieved preference trajectory user prefers trajectory satisfies certain property satisfy property multi dimensional preferences user set preferences trajectory ordering 
trajectory satisfying higher priority preference preferred satisfy lower priority preferences 
important observe difference definitions 
state property formula trajectory initial state state satisfies goal 
language specification user preferences developed successive steps 
introduce simple mechanism deal types preferences called desires section 
preferences preferences multi dimensional preferences dealt atomic general preferences chains preferences section partial orders collections preferences section 
logic programming realization language express preferences section 
related continuation improvement previous rely prioritized default theory framework express preferences trajectories logic programming 
types preferences expressed 
strongly influenced works exploiting domain specific knowledge planning domain specific knowledge expressed constraints trajectories achieving goal hard constraints 
numerous approaches proposed integrate preferences planning process 
eiter introduced framework planning action costs logic programming 
action assigned integer cost plans minimal cost considered optimal 
costs static relative time step action executed 
presents encoding different preferences shortest plan cheapest plan 
approach emphasizes logic programming differs aspects 
develop declarative language preference representation 
language express preferences discussed flexible high level action costs approach 
approach allow fully general dynamic preferences 
systems adopted fixed types preferences shortest plans 
proposal similarities approach metatheories planning domain metatheories provide characterization semantic differences various domain operators planning variables metatheories allow generation biases focus planner plans certain characteristics 
problem maintaining managing preferences investigated framework constraint programming soft constraints relational optimizations 
constraint solving proposed basis management planning presence action costs 
considerable effort invested introducing preferences logic programming 
preferences expressed level atoms parsing disambiguation logic grammars 
rule level preferences various proposals selection preferred answer sets answer set programming 
language allows representation types preferences similar developed decision theoretic planners 
main difference logic programming system probability 
approach differs works markov decision processes mdp find optimal plans mdps optimal plans functions states actions preventing user selecting preferred trajectories changing mdp specification 
preliminary answer set planning section review basics planning logic programming answer set semantics answer set planning asp :10.1.1.134.9745
assume effect actions world relationship fluents world expressed appropriate language 
ontologies action description language 
action theory defined disjoint sets set actions set fluents action theory pair set propositions expressing effects actions relationship fluents called static causal laws executability conditions actions set propositions representing initial state world 
example action calling taxi effect taxi arriving represented follows call taxi causes taxi arrived realistically money call taxi 
expressed proposition call taxi executable money semantics action theory notion state consistent set fluent literals satisfies relationship fluents transition function specifies result execution action state denoted 
trajectory action theory sequence states actions 
state satisfies fluent literal denoted extended propositional connectives define fluent formula 
main concern language representing actions effects omit detailed definitions 
planning problem specified triple hd gi action theory fluent formula propositional formula fluent literals representing goal 
possible solution hd gi trajectory am case say trajectory achieves answer set planning solves planning problem hd gi translating logic program consisting domain dependent rules describe domain independent rules generate action occurrences represent transitions states 
planning problem requires additional parameter maximal length trajectory user accept 
key predicates holds fluent literal holds time moment occ action occurs time moment holds extended define holds arbitrary fluent formula states holds time details program 
key property translation hd gi ensures trajectory achieving corresponds answer set answer set corresponds trajectory achieving theorem 
planning problem hd gi consistent action theory maximal plan length trajectory achieving exists answer set occ ff holds mg ng 
ii answer set exists integer trajectory achieving occ ff holds mg ng 
fluent literal fluent negation fluent formula propositional formula fluent literals 
answer sets program computed answer set solvers smodels dlv 
language planning preferences specification section introduce language pp planning preference specification 
hd gi planning problem actions fluents ff set fluent formulae 
pp specifications defined special formulae constructed 
subdivide preferences different classes basic desires atomic preferences chains general preferences 
basic desires basic desire formula expressing preference trajectory 
example bob basic desire save money implies prefers train bus go school turn means preferred trajectory bob contain action take bus take train 
preference expressed formula forbids fluent taxi arrived true state trajectory 
alternatives preference representation equivalent 
represents desire leaving state specific group actions second represents desire certain states 
basic desires composed state desire goal preference 
defined 
definition state desire 
primitive state desire formula ff formula form occ intuitively state desire describes basic user preference considered context specific state 
state desire implies prefer state 
state desire occ implies prefer leave state action cases desirable talk final state trajectory 
call goal preference defined follows 
definition goal preference 
goal preference formula form goal formula ff ready define basic desire expresses user preference trajectory 
addition propositional connectives temporal connectives eventually 
definition basic desire formula 
basic desire formula defined follows goal preference state desire basic desire formulae basic desire formulae eventually 
formulae satisfying conditions considered basic desire formulae 
express bob take train bus school write eventually occ take bus occ take train hand express desire bob want call taxi occ call taxi alternatively write taxi arrived note alternative reflect preference 
definition develop formulae expressing desire regarding structure trajectories 
definition specify trajectory satisfies basic desire formula 
section logic programming rules added program compute trajectories satisfy basic desire 
definitions trajectory 
notation denotes trajectory 
definition basic desire satisfaction 

trajectory basic desire formula 
satisfies written iff goal ff occ eventually definition allows check trajectory satisfies basic desire 
allow compare trajectories 
start simplest form trajectory preference involving single basic desire 
definition ordering trajectories single basic desire 
desire formula trajectories 
trajectory preferred trajectory denoted 
say indistinguishable denoted cases occurs ii clear context omit allow weak form single preference definition weak single desire preference 
desire formula trajectories 
trajectory weakly preferred denoted iff proposition 
relation defines partial order trajectories 
definitions expressive represent significant portion preferences frequently occur real world domains 
particularly important introduce syntactic simplify description strong desire desire formulae denotes weak desire desire formulae denotes enabled desire actions denote formula executable executable occ occ 
extended include disjunction actions side formula 
prove simple properties syntactic 
lemma 
relation set desire formulae transitive 
definition preferred trajectory basic desire 
trajectory preferred trajectory basic desire trajectory example 
continue theory example enrich action called buy coffee allows bob coffee 
station 
say bob prefers coffee takes exams write goal coffee 
plan satisfying preference requires bob stops station going school 
atomic preferences chains basic desire formulae allow users specify preferences selecting trajectories satisfy 
definition basic desire formula assume users set desire formulae desire find trajectory satisfies formulae 
cases proves strong results situations preferred trajectories 
example time cost criteria person making travel plan 
criteria conflict transportation method takes little time costs 
user get plan satisfy criteria 
consider example obvious bob plan costs allows time 
address problem allow new type formulae call atomic preference represents ordering basic desire formulae 
definition atomic preference 
atomic preference formula formula form 

basic desire formulae 
intuition atomic preference provide ordering different desires indicates trajectories satisfy desire preferable satisfy observe basic desire formulae special cases atomic preferences 
extend definitions compare trajectories respect atomic preferences 
definition ordering trajectories atomic preferences 
trajectories 

atomic preference formula 
indistinguishable 
denoted preferred say show version partial order underlying equivalence 
proposition 
atomic preference partial order 
say trajectory preferred trajectory preferred example 
continue theory example 
simplify representation assume action associated degree safety 
write bus train taxi taxi say bob takes bus train taxi respectively 
desire expressing bob prefers get fastest possible way go school time taxi taxi bus train walk hand hurry bob prefers get cheaper way go school cost walk bus train taxi taxi preferences combined atomic preference time 
cost cost 
time appropriate bob hurry second appropriate bob time 
trajectory walk bus preferred trajectory call taxi taxi respect preference cost 
time cost 
time time 
cost general preferences section define general case preference formulae 
general preference constructed atomic preferences propositional connectives ordering connective 
definition 
general preferences general preference formula formula satisfying conditions atomic preference general preference general preferences general preferences collection general preferences 

general preference 
definition extend definitions compare trajectories respect general preference 
definition ordering trajectories general preferences 
general preference trajectories 
trajectory preferred atomic preference ii iii 
exists ii trajectory indistinguishable trajectory atomic preference 
proposition 
general preference 
equivalence relation 
lemma 
general preference 
similarly proposition 
general preference 
transitive relation 
corollary 
relation partial order base equivalence 
trajectory preferred trajectory preferred example 
continue theory example 
assume safest transportation mode train expensive cab 
preference safety train walk taxi bus taxi say bob prefers move safest transportation mode 
prefers safety time cost write safety 
time cost 
computing preferred trajectories section address problem computing preferred trajectories 
planning problem hd gi preference formula interested finding preferred trajectory 
notice construction preference formulae lost generality assume preference formula 
show done answer set programming 
achieve encoding basic desire set rules developing sets rules sat pref sat checks basic desire satisfied trajectory 
pref consist rules maximal construct smodels allow find preferred trajectory respect preference formula 
discussed section defining encoding desire formulae encoding desire formula similar encoding fluent formula 
basic desire formula associated unique name set defined follows 
goal fluent formula occ negation eventually eventually sat rules checking basic desire formula satisfaction set rules check trajectory satisfies basic desire formula 
recall answer set program contain trajectory action occurrences record atoms form occ truth value fluent literals represented atoms form holds fluent literal time moment length 
sat defines predicate satisfy variables representing basic desire time moment respectively 
intuitively satisfy says basic desire satisfied trajectory starting time moment defined structure rules sat 
satisfy desire goal satisfy length satisfy desire occ satisfy desire formula holds satisfy desire satisfy satisfy satisfy desire satisfy satisfy desire length satisfy desire satisfy desire satisfy desire satisfy satisfy desire negation satisfy theorem prove correctness sat need additional notation 
answer set program 
denote trajectory occ ff holds mg ng 
furthermore trajectory denote set ng prove theorem theorem 
hd gi planning problem basic desire formula 
answer set iff sat satisfy 
theorem allows compute preferred trajectory smodels 
program consisting sat rule satisfy notice rule means answer sets satisfy holds preferred satisfy hold 
exactly smodels try compute answer sets satisfy answer set property exists answer sets considered 
theorem 
theorem 
hd gi planning problem basic desire formula 
answer set preferred trajectory 
theorem gives way computing preferred trajectory respect basic desire 
generalize approach deal general preferences maximize function smodels 
intuition associate different components preference formula weight weights obtain weight trajectory components preference formula satisfied trajectory 
maximize function smodels handle weights guide search preferred trajectory 
general general preference 
develop weight function developed maps trajectory number satisfies properties 
weight function satisfying properties called admissible weight function 
obviously admissible theorem 
proposition 
general preference formula 
trajectory maximal preferred trajectory proof 
maximal 
assume exists follows admissibility contradicts hypothesis maximal 
theorem implies compute preferred trajectory smodels implement admissible weight function 
computing admissible weight function general preference 
show admissible weight function built bottom fashion 
basic desires 
definition basic desire weight 
basic desire formula trajectory 
weight trajectory desire function defined proposition shows basic desire admissible 
proposition 
basic desire 
admissible weight function 
weight function atomic preference defined weight function basic desires occurring preference follows 
definition atomic preference weight 


atomic preference formula 
weight trajectory defined follows proposition shows weight function atomic preference admissible 
proposition 


atomic preference 
admissible weight function 
ready define admissible weight function general preference 
definition general preference weight 
general preference formula 
weight trajectory 
defined follows atomic preference weight defined definition 
max max represents maximum weight trajectory achieve preference formulae 
max prove admissibility proposition 
proposition 
general preference admissible weight function 
propositions show compute admissible weight function bottomup weight basic desire occurring ready define set rules pref consists rules encoding rules encoding computation similar encoding desires assign new distinguished name preference formula desire occurring encode preferences way encode desires 
save space omit details step 
pref define predicates max preference name weight current trajectory respect preference resp 
max true weight resp 
maximal weight current trajectory respect preference 
desire pref contains rules satisfy satisfy max 
atomic preference 

pref consists pref rules max names encodings desires developed previous section 

general preference atomic preference pref defined previous item 
pref consists pref pref rules max max max pref consists pref rules max max max 
pref consists pref pref rules max max max max theorem proves correctness pref 
theorem 
hd gi planning problem general preference 
answer set pref sat iff theorem implies compute preferred trajectory adding pref sat ii computing answer set maximal 
value maximize implemented smodels system maximize command 
worth noting weak constraint feature dlv implemented provide direct implementation computing preferred trajectory 
examples preferences pp preferences common planning problems 
hd gi planning problem 
keeping notation previous section denote 
preference shortest trajectory formula encoding 
assume interested trajectories achieving length equal simple encoding allows accomplish goal basic desires 
denote formula 
define formula follows consider formula short defined short proposition 
preferred trajectory short 
shortest length trajectory satisfying goal 
preference shortest trajectory action encoding 
formula encoding short requires bound 
encoding require condition 
introduce additional actions noop new fluent ended 
action triggered goal achieved noop fill slot compare trajectories fluent ended denote fact goal achieved 
appeal users formal representation actions 
furthermore add condition ended executability condition actions initial state encoded condition shortest length trajectory denoted short noop actions original action theory 
proposition 
preferred trajectory short 
shortest length trajectory satisfying goal 
cheapest plan 
assume associate cost action determine trajectories minimal cost 
comparison done equal length trajectories introduce actions noop cost fluent ended record fact goal achieved 
introduce fluent total cost denote cost trajectory 
initially set value total cost execution action increase value total cost 
preference goal total cost 
goal total cost 
goal total cost estimated minimal maximal cost trajectories respectively 
note maxfc length 
novel declarative language called pp specification preferences context planning problems 
language nicely integrates traditional action description languages allows elegant encoding complex preferences trajectories 
language provides declarative framework encoding preferences allowing users focus high level description preferences encoding approaches utility functions pp allows expression complex preferences including multi dimensional preferences 
demonstrated pp preferences effectively easily handled logic programming framework answer set semantics 
implementation required cost functions system complete offer opportunity validate ideas large test cases 
intend explore possibility introducing temporal operators level general preferences 
allow compact representation various types preferences example shortest plan preference encoded simply occ occ noop 
occ occ possible actions 


www cs utexas edu users tag html 

bacchus kabanza 
temporal logics express search control knowledge planning 
artificial intelligence 

labeling partial local consistency soft constraint programming 
practical aspects declarative languages springer verlag 

blum furst 
fast planning planning graph analysis 
artificial intelligence 

brewka eiter 
preferred answer sets extended logic programs 
artificial intelligence 

cimatti roveri 
conformant planning symbolic model checking 
journal artificial intelligence research 

cui swift 
preference logic grammars fixed point semantics application data standardization 
artificial intelligence 

delgrande schaub tompits 
framework compiling preferences logic programs 
theory practice logic programming march 

eiter answer set planning action cost 
jelia 
springer verlag 

eiter kr system dlv progress report comparisons benchmarks 
int 
conf 
principles knowledge representation reasoning pages 

fages fowler 
handling preferences constraint logic programming relational optimization 
plilp springer verlag 

gelfond lifschitz 
action languages 


gelfond relationship cwa minimal model minimal herbrand model semantics 
international journal intelligent systems 

jayaraman 
preference logic programming 
iclp pages 
mit press 

haddawy hanks 
utility model goal directed decision theoretic planners 
technical report university washington 

kautz 
state space planning integer optimization 
aaai pages 

lifschitz 
answer set planning 
international conference logic programming pages 

long fox smith mcdermott bacchus geffner 
international planning competition 

myers 
strategic advice hierarchical planners 
principles knowledge representation reasoning 
morgan kaufmann 

myers lee 
generating qualitatively different plans metatheoretic biases 
aaai 

niemela simons 
smodels implementation stable model founded semantics normal logic programs 
lpnmr springer pages 


markov decision processes discrete stochastic dynamic programming 
john sons new york ny 

schaub wang 
comparative study logic programs preferences 
ijcai pages 

son baral mcilraith 
domain dependent knowledge planning answer set planning approach 
lpnmr springer pages 

son baral nam mcilraith 
domain dependent knowledge answer set planning 
technical report cs new mexico state university 

son 
reasoning actions prioritized default theory 
jelia pages 
springer verlag 

hung son 
java solver answer set programming nmsu 
appendix proofs proposition 
relation defines partial order trajectories 
proof 
proof properties 
reflexive trajectory allows easily conclude 
anti symmetry consider trajectories assume observe means 
automatically imply 
transitivity consider trajectories assume consider case 

turn means allows conclude 
case 
implies second possibility 
allows conclude proposition 
atomic preference partial order 
proof 
analyze properties 
reflexivity consider trajectory fairly easy see leads antisymmetry assume contradiction means value implies ultimately means contradicting initial assumptions 
transitivity trajectories consider possible cases arising component conclude know formula particular implies putting get implies proofs included facilitate reviewing process removed final version accepted 
proposition 
general preference formula 
equivalence relation 
proof 
prove result structural induction base atomic preference result derives directly proposition 
inductive step consider possible cases reflexivity symmetry obvious 
inductive hypothesis proof 
reflexivity symmetry obvious 
consider definition inductive hypothesis 
reflexivity symmetry obvious inductive hypothesis 
consider definition means inductive hypothesis get allows conclude lemma 
general preference formula 
similarly proof 
prove result structural induction atomic preference 
obtain furthermore obtain 
equivalence relations obtain furthermore necessarily allows conclude case analogous 
consider case furthermore implies inductive hypothesis leads case analogous 
consider case possible cases 
case implies implies 
obtain equivalence relation infer furthermore inductive hypothesis obtain lead 
case symmetrical previous 
case analogous 
consider case obtain implies inductive hypothesis conclude ultimately case analogous 
consider case 
definition obtain exists furthermore obtain 
equivalence relations 
furthermore inductive hypothesis conclude leads case analogous 
proposition 
general preference formula 
transitive relation 
proof prove result structural induction base case corresponds atomic preference 
proved proposition transitive atomic preference consider possible cases definition inductive hypothesis implies consider possible cases arise 
inductive hypothesis obtain leads inductive hypothesis get lemma obtain leads inductive hypothesis get lemma obtain leads 
inductive hypothesis lemma obtain inductive hypothesis obtain properties obtain inductive hypothesis obtain properties obtain cases conclude 
case analogous previous 
definition inductive hypothesis obtain implies 
obtain exists similarly find similar properties fact equivalence relations conclude 
furthermore lemma conclude leads equivalence relations lemma obtain leads inductive hypothesis obtain leads proposition 


atomic preference formula 
admissible weight function 
proof 
trajectories 
start assuming definition means proposition implies 
leads addition 
similar reasons easy see implies 
proposition 
general preference formula 
admissible weight function 
proof 
prove result structural induction arbitrary trajectories 
consider case atomic preference 
result proved proposition 
consider case implies inductive hypothesis leads clearly implies situation analogous consider case consider case possible cases 
case inductive hypothesis obtain 
allows conclude 
inductive hypothesis obtain inductive hypothesis obtain leads 
case analogous previous 
start definition inductive hypothesis means clearly implies means inductive hypothesis leads 
obtain max max definition means inductive hypothesis 
consider case 
assume possible cases occur 
case inductive hypothesis obtain 
leads max max 
case inductive hypothesis obtain 
furthermore clearly max 
max max max max max consider case definitions means inductive hypothesis 
definition cost clearly 

