quickest flows time lisa fleischer martin flows time called dynamic flows generalize standard network flows introducing element time 
naturally model problems travel transmission instantaneous 
traditionally flows time solved time expanded networks contain copy original network discrete time step 
method available algorithmic toolbox developed static flows main fatal drawback enormous size time expanded network 
approaches coping difficulty 
firstly inspired ford fulkerson maximal flows time maximal dynamic flows show static length bounded flows lead provably multicommodity flows time 
secondly investigate condensed time expanded networks rely discretization time 
prove solution arbitrary precision computed polynomial time appropriate discretization leading condensed network polynomial size 
particular approach yields fully polynomial time approximation schemes np hard quickest min cost multicommodity flow problems 
single commodity problems show storage flow intermediate nodes unnecessary approximation schemes 
standard network flows useful model variety optimization problems fail capture crucial element routing problems routing occurs time 
seminal subject ford fulkerson introduced flows transit times remedy described polynomial time algorithm different parts appeared preliminary form 
carnegie mellon university forbes ave pittsburgh pa usa email lkf andrew cmu edu 
supported part ibm nsf ccr int technische universit berlin institut mathematik ma str 
des 
berlin germany email math tu berlin de 
supported part eu thematic networks ii approximation online algorithms ist ist dfg research center mathematics key technologies modelling simulation optimization real world processes 
solve maximum flow time called maximum dynamic flow problem 
transit time arc specifies amount time takes flow travel tail head arc contrast classical case static flows flow time network specifies flow rate entering arc point time 
setting capacity arc limits rate flow arc point time 
order get intuitive understanding flows time associate arcs network pipes pipeline system transporting kind fluid 
length pipeline determines transit time corresponding arc width determines capacity 
precise definition flows time section 
flows time may applied various areas operations research real world applications traffic control evacuation plans production systems communication networks internet financial flows 
examples applications survey articles aronson powell 
flows time significantly harder standard flow counterparts 
example minimum cost flows time fractional multicommodity flows time np hard simple series parallel networks 
results literature maximum flows time 
ford fulkerson consider problem sending maximal possible amount flow source node sink node time problem solved efficiently min cost flow computation network 
ford fulkerson show optimal solution min cost flow problem turned maximal flow time decomposing flows paths 
corresponding flow time starts send flow path time zero repeats long time left time units flow path arrive sink 
flow time featuring structure called temporally repeated 
quickest flows 
problem closely related problem computing maximal st flow time quickest flow problem send amount flow source sink shortest possible time 
problem solved polynomial time incorporating algorithm ford fulkerson binary search framework 
megiddo method parametric search burkard faster algorithm solves quickest flow problem strongly polynomial time 
earlier topic referred problems dynamic flow problems 
term dynamic algorithmic settings refer problems input data arrives online changes time goal algorithms described modify current solution quickly handle slightly modified input 
problem dynamic flows input data available start 
solution problem involves describing optimal flow changes time 
reasons term flows time dynamic flows refer problems 
take purely macroscopic point view involve fluid dynamics 
earliest arrival flows 
earliest arrival flow flow time simultaneously maximizes amount flow arriving sink time 
gale observes flows exist wilkinson minieka give equivalent pseudo polynomial time algorithms find 
algorithms essentially successive shortest path algorithm 
resulting solution latest departure flow flow time simultaneously maximizes amount flow departing source time subject constraint flow finished time 
flow time earliest arrival flow latest departure flow called universally maximal flow time 
hoppe tardos describe polynomial time approximation scheme universally maximal flow problem routes fraction maximum possible flow reach sink time problems time dependent arc capacities considered fleischer :10.1.1.11.1164
flows time costs 
natural generalization quickest flows maximum flows time defined networks additional costs arcs 
problem find minimum cost flow time horizon find quickest flow cost budget 
woeginger show search quickest maximum flow time minimal cost restricted class temporally repeated flows 
fact adding costs considerable impact complexity problems 
woeginger prove np hardness results special case series parallel graphs 
show problem computing maximal temporally repeated flow minimal cost strongly np hard 
orlin describes polynomial time algorithm compute infinite horizon minimum cost flow time maximizes throughput 
infinite horizon problem specified demand concerned computing flow starts stops issues crucial flow demands changing time 
quickest 
generalization quickest transshipment problem vector supplies demands nodes task find flow time zeroes supplies demands minimal time 
standard network flows multiple source multiple sink single commodity flow time equivalent maximum flow time 
hoppe tardos describe polynomial time algorithm solve problem :10.1.1.11.1164
introduce chain decomposable flows generalize class temporally repeated flows compactly encoded collection paths 
contrast temporally repeated flows paths may contain backward arcs 
careful analysis necessary show feasibility resulting flows time 
algorithm hoppe tardos practical requires submodular function minimization oracle subroutine 
quickest multicommodity flows time 
applications commodities routed network 
substantial literature static multicommodity flow problem hardly results multicommodity flows time known 
hall showed setting costs multicommodity flows time np hard 
known exists optimal solution described polynomial space 
discrete vs continuous time model 
results mentioned far originally developed discrete time model time discretized steps unit length 
step flow sent node arc adjacent node arrives time steps denotes integral transit time arc 
particular time dependent flow arc represented time indexed vector model 
contrast continuous time model flow arc function fe fleischer tardos point strong connection models 
show results algorithms developed discrete time model carried continuous time model 
mainly concentrate continuous time model give detailed discussion interrelation models section 
time expanded networks 
discrete time model flows time described computed time expanded networks introduced ford fulkerson 
time expanded network contains copy node set underlying static network discrete time step 
arc static network integral transit time copy pairs time layers distance time expanded network 
precise description time expanded networks section 
unfortunately due time expansion size resulting network general exponential input size problem 
difficulty pointed ford fulkerson 
hand advantage approach turns problem determining optimal flow time classical static network flow problem time expanded network 
problem solved known network flow algorithms approach practice solve flow time problems 
due linear dependency size time expanded network algorithms termed pseudopolynomial run time algorithm depends log general size networks problem solution prohibitively expensive 
contributions describe approximation algorithms flow time problems 
algorithms approximate minimum time horizon optimal flow 
approximate solution flow solves original problem requires times optimal time horizon complete 
temporally repeated solutions 
inspired ford fulkerson show section static length bounded flows underlying static network lead provably multicommodity flows time computed efficiently 
resulting approximation algorithm computes temporally repeated solutions performance ratio 
general problem bounded cost approach yields approximation algorithm 
context interesting remember problem computing quickest temporally repeated flow bounded cost strongly np hard allow np 
hardness result holds quickest multicommodity flows intermediate node storage simple flow paths 
temporally repeated flow intermediate node storage result implies bound power intermediate node storage quickest multicommodity flow intermediate node storage twice long quickest flow allowed store flow intermediate nodes 
approximation schemes 
main contribution show problems solved exactly time expanded network solved close optimally static flow computation network polynomial size 
straightforward idea reduce size time expanded networks replacing time steps unit length larger steps 
words applying sufficiently rough discretization time leads condensed time expanded network polynomial size 
tradeoff necessity reduce size network desire limit loss precision resulting flow model results loss quality achievable solutions 
section show satisfactory solution tradeoff problem 
appropriate choice step length leads condensed time expanded network polynomial size permits solution completing times completion comparable flow continuous time model 
precisely condensed time expanded network achieving precision time layers number nodes network 
say cost approximate temporal dynamics network flow problems factor size network 
observation potential applications problems involving flows time 
particular yields fully polynomial time approximation scheme np hard quickest multicommodity flow problem 
costs easily incorporated time expanded networks approach generalized yield quickest multicommodity flow problems cost constraints 
notice quickest flows bounded cost np hard 
apart np hard problems believe result interest flow problems quickest transshipment problem known solvable polynomial time 
algorithm hoppe tardos quickest transshipment problem relies submodular function minimization condensed time expanded networks leads simply consists series max flow computations :10.1.1.11.1164
storage 
flows time raise issues arise standard network flows 
issue storage intermediate nodes 
applications traffic routing evacuation planning telecommunications storage limited undesired prohibited intermediate nodes 
single commodity problems generally transportation problem costs prove storage unnecessary 
earliest arrival flows 
section discuss variant time expanded networks suitable approximating earliest arrival flows 
address problem set sources supplies single sink send supplies sink amount flow arriving sink time maximum possible 
uniform discretization time introduce geometrically condensed time expanded networks rely geometrically increasing time steps 
network obtain flow sends units flow sink time 
preliminaries consider routing problems network nodes arcs 
arc associated integral transit time length capacity ue 
setting costs arc cost coefficient ce determines unit cost sending flow arc arc node node denoted case write head tail static flows start definition single commodity flows set terminals partitioned subset sources sinks source node supply dv sink demand dv dv 
consider case source sink case ds dt 
static flow assigns arc non negative flow value xe flow conservation constraints xe xe obeyed 
denote set arcs leaving node tail entering node head respectively 
static flow satisfies supplies demands xe xe dv case single source single sink term flow 
flow satisfying supply ds dt value flow called feasible obeys capacity constraints xe ue cost static flow defined ce xe multiple commodity setting set commodities 
defined set terminals si demands supplies dv si static multicommodity flow assigns arc commodity pair non negative flow value xe xi xe single commodity flow defined multicommodity flow satisfies demands supplies xi satisfies demands supplies dv si 
called feasible obeys capacity constraints xe xe ue setting costs cost static multicommodity flow defined ce xe ce cost coefficient associated arc commodity flows time applications flow problems static routing flow discussed section satisfactorily capture real structure problem amount flow transmitted time needed transmission plays essential role 
multicommodity flow time time horizon collection lebesgue measurable functions fe fe determines rate flow time unit commodity entering arc time 
transit times fixed flow arc progresses uniform rate 
particular flow fe commodity entering arc time arrives head time order obey time horizon require fe 
order simplify notation fe implicitly assuming fe case 
respect flow conservation different models flows time 
model storage flow intermediate nodes possible hold inventory node source sink sending onward 
flow conservation constraints integrated time prohibit deficit node fe fe require equality holds si meaning flow remain instance flows time network transit times capacities arcs 
network time model storage flow intermediate nodes additionally require equality holds si 
flow time satisfies supplies demands time net flow terminal si commodity equals supply dv fe fe dv si 
flow time single commodity flow single source single sink flow time satisfying supply ds dt value flow time feasible obeys capacity constraints 
capacity ue interpreted upper bound rate flow entering arc capacity time unit 
capacity constraints fe ue fe fe total flow arc time 
setting costs cost flow time defined ce fe 
give small illustrating example flows time 
order send units flow minimum time depicted network choose alternatives 
send flow rate arc time interval 
transit time arc units flow arrive intermediate node time interval 
start send flow rate second arc time take time units time sent arc flow arrives sink time interval 
optimal time horizon 
notice solution flow stored intermediate node alternate solution time horizon avoids storing flow obtained sending flow rate arc time interval 
maximum flows time quickest flows ford fulkerson show turn optimal solution static flow problem objective function max xe maximal flow time known result network flow theory static flow decomposed sum flows xp simple paths flow cycles 
loss generality flow cycles neglected canceled written sum path flows xe xp resulting temporally repeated flow sends flow rate xp path time interval words sum path flows time fp fp xp fp 
feasibility immediately follows feasibility flow value xp xe 
second equality follows xp path decomposition flows time natural objective minimize makespan called time horizon time necessary satisfy demands 
quickest flow problem asks flow time value minimum time horizon problem generalized setting bounded flow cost multiple sources sinks quickest transshipment problem case multiple commodities 
general problem consider quickest multicommodity transshipment problem bounded cost find feasible multicommodity flow time minimum time horizon satisfies multicommodity demands cost bounded budget 
natural variant problem bound cost single commodity budget ci ce fe ci results apply general cost constraints 
simple approximation algorithm section generalize basic approach ford fulkerson case multiple commodities multiple sources sinks costs 
contrast algorithm ford fulkerson static min cost flow computation method propose employs length bounded static flows 
length bounded static flows static flows defined transit times interested static flows suggest reasonable routes respect transit times 
account consider decompositions static flows paths 
denote set paths starting source commodity leading sinks pi 
static multicommodity flow called length bounded flow commodity decomposed sum flows xp paths pi length path pi xp problem computing feasible static flow satisfies multicommodity demands solved efficiently np hard find flow addition length bounded special case single commodity 
follows straightforward reduction np complete partition problem 
hand length bounded flow problem approximated arbitrary precision polynomial time 
lemma 
exists feasible length bounded static flow satisfies multicommodity demands feasible length bounded static flow cost satisfying demands computed time polynomial input size 
proof 
formulate problem finding feasible length bounded static flow linear program path variables 
assume loss generality commodity exactly source si sink ti supply demand di dsi dti general case sources sinks handled introducing super source super sink commodity 
pi pi set si ti paths lengths bounded cost path pi defined ci ce length bounded min cost flow problem written min ci xp pt xp di pt xp ue xp unfortunately number paths pt number variables linear program general exponential size underlying network dualize program get max di zi ue ye ye ce zi zi ye corresponding separation problem formulated length bounded shortest path problem find shortest si ti path respect arc weights ye ce length pt problem np hard solved approximately sense find time polynomial size network si ti path pi length respect arc weights ye ce bounded length shortest path pt 
equivalence optimization separation means problem find polynomial time optimal solution modified dual program contains additional constraints corresponding paths length dual solution get primal solution uses additional variables corresponding paths length notice method described proof relies ellipsoid method restricted relevance solving length bounded flow problems practice 
developed multicommodity flow problems generalized case length bounded flows algorithms iteratively send flow shortest paths respect length function :10.1.1.4.1960
order get length bounded solution shortest paths replaced factor length bounded shortest paths 
approximation algorithm feasible flow time time horizon cost naturally induces feasible static flow underlying network averaging flow arc time xe fe construction static flow feasible satisfies properties explained length bounded ii satisfies fraction supplies demands covered flow time iii due fixed time horizon flow travel paths length property fulfilled 
property ii follows 
property iii consequence 
hand arbitrary feasible static flow meeting requirements ii iii easily turned feasible flow time time horizon meeting supplies demands cost commodity pump flow path length bounded path algorithms return solution times minimum cost solution obeys capacities serves fraction demand 
context approximation algorithm described subsection approximate result sufficient obtain approximation guarantee 
flow sent just little longer chosen paths fulfill demand 
instance quickest multicommodity flow problem containing commodities single source si single sink ti commodities demand value commodity demand value 
numbers arcs indicate transit times arcs unit capacity 
quickest flow waiting intermediate nodes allowed takes time units stores unit commodity intermediate node time units 
flow stored intermediate nodes optimal solution takes time 
decomposition corresponding flow rate xp time units wait additional time units flow arrived destination 
particular flow stored intermediate nodes solution 
state structural result power intermediate node storage lemma 
allowing storage flow intermediate nodes saves factor optimal makespan 
hand instances optimal makespan storage intermediate nodes times optimal makespan storage 
proof 
bound follows discussion 
give instance gap optimal makespan storing optimal makespan storing intermediate nodes 
notice gap artifact small numbers instance depicted 
holds general demands transit times instance scale transit times capacities arcs factor multiply pairwise demands factor ratio optimal makespans problems storage 
state main result section 
theorem 
quickest multicommodity transshipment problem costs exists polynomial time algorithm finds solution cost optimal makespan times optimal makespan 
computed solution store flow intermediate nodes 
proof 
binary search guess optimal makespan precision get relax property allow flow paths length feasible static flow meeting properties iii computed polynomial time see section 
static flow turned flow time makespan described 
instance shows analysis proof theorem tight 
performance guarantee discussed approximation algorithm better 
sk instance commodities showing analysis proof theorem tight 
arcs unit capacity transit times depicted 
demand value commodity 
quickest flow needs time units 
static flow satisfy fraction demands 
particular makespan resulting flow time 
tk tk tk avoiding length bounded flow computation contrast ford fulkerson temporally repeated flows flows time resulting length bounded static flows described lemma necessarily flow carrying paths long possible respect time horizon sending flow paths time easily generate temporally repeated solution scaling flow rate xp path xp xp xp send flow path modified rate xp time interval 
setting costs observation implies length bounded flow computation algorithm replaced standard presumably faster flow computation costs transit times arcs interpreted cost coefficients 
simplify presentation result restrict case source si sink ti commodity scaled flow rates xp discussed define static multicommodity flow xi si ti flow value commodity di demand commodity temporally repeated flow time horizon flow rates xp sends exactly di units commodity si ti follows xi xe di hand feasible static multicommodity flow fulfilling easily turned temporally repeated flow time satisfying demands time compute path decomposition send flow instance showing cost temporally repeated flow depends particular path decomposition underlying static flow 
consider static flow value depicted network flow value arc time horizon set 
possible decompositions static flow sum path flows 
leads temporally repeated flow cost cost 
path corresponding flow rate long time left flow arrive sink time follows 
prove slightly improved approximation result rely length bounded static flow computation 
theorem 
exists approximation algorithm quickest multicommodity transshipment problem 
computed solution store flow intermediate nodes 
proof 
sake simplicity restrict case single source si sink ti commodity algorithm solves flow problem min xi xe di xe feasible multicommodity flow 
follows discussion optimal solution value lower bound time horizon quickest flow 
static flow turned temporally repeated flow time time horizon arbitrary path decomposition unfortunately result generalized quickest multicommodity transshipment problem costs 
reason cost temporally repeated flow uniquely determined underlying static flow depends chosen path decomposition 
example 
fact shown reduction np complete problem partition finding path decomposition static flow yielding cheapest temporally repeated flow np hard 
path decomposition contains paths length longer paths contribute negatively right hand side 
remove flow set shorter paths obtain smaller path decomposition 
approximation schemes quickest flows section framework obtaining fully polynomial time approximation schemes various quickest flow problems 
backbone framework special time expanded networks polynomial size introduce section 
section basic idea approach point fundamental problems need solved order 
section discuss special case acyclic graphs 
assumption storage flow intermediate nodes allowed acyclic graphs amenable simple analysis 
hand show section optimal single commodity flows time costs require storage 
insight give fully polynomial time approximation scheme quickest transshipment problem bounded cost storage intermediate nodes section 
describe generalization approach multicommodity flow setting section 
condensed time expanded networks traditionally flows time solved time expanded network 
network integral transit times arcs integral time horizon time expanded network denoted obtained creating copies labeled vt th copy node denoted 

flow passes corresponds flow time interval 
arc arc capacity cost arc terminal si additional infinite capacity holdover arc models possibility hold flow node time interval 
assume loss generality source sink incoming outgoing arc terminal intermediate node path flow 
treat copy source corresponding source treat copy vt sink corresponding sink model storage flow intermediate nodes introduce holdover arcs nodes illustration time expanded network 
static multicommodity flow time expanded network corresponds multicommodity flow time equal cost commodity interpret flow arc flow rate entering arc time interval 
similarly flow time completing time corresponds flow value cost obtained setting flow average flow rate interval 
details lemma set 
may solve flow time problem solving corresponding static flow problem time expanded graph 
problem approach size depends linearly bounded polynomial input size polynomialtime method obtaining required flow time 
arc lengths multiple bounded polynomial input size assumption flow storage level commodity si exceeds dv static network transit times arcs source sink corresponding time expanded network time horizon condensed time expanded network notice transit time arc rounded original transit time multiple see section 
time expanded network may rescale time condensed time expanded network contains copies setting arc corresponds time interval length capacities multiplied 
denote condensed time expanded network copies network 

copy corresponds flow interval 
illustration 
lemma 
suppose arc lengths multiples integer 
multicommodity flow time completes time corresponds static multicommodity flow equal cost flow corresponds flow time equal cost completes time proof 
arbitrary multicommodity flow time modified flow time equal value cost obtained averaging flow value commodity arc time interval 

modified flow time defines static multicommodity flow canonical way 
notice capacity constraints obeyed total flow starting arc interval bounded ue 
flow values holdover arcs defined way flow conservation obeyed node 
hand static multicommodity flow easily turned flow time 
static flow arc tail divided sent time units starting time 
head arc length arc flow sent time arrives time 
note costs assigned arcs natural flow time original network 
packets flow originating nodes sent arc 
flow time network rounded transit times causes congestion arc packets flow arrive simultaneously arc way cost flow time cost corresponding flow time expanded graph 
drop condition integral get slightly weaker result 
corollary 
suppose arc lengths multiples 
multicommodity flow time completes time corresponds static multicommodity flow equal value cost flow corresponds flow time equal value completes time 
outline approximation scheme basic idea algorithm round transit times nearest multiple appropriately chosen solve static flow problem corresponding condensed time expanded network translate flow back setting original transit times 
order obtain provably solutions way sure conditions fulfilled value optimal solution instance increased transit times represented condensed time expanded network approximates value optimal solution original setting ii solution instance increased transit times transformed flow time original arc lengths loss flow value 
discussing fulfill conditions give simple examples show non trivial problems dealt address ii 
consider sub network consisting nodes arcs unit capacity depicted 
transit times 
flow graph rounded transit times send units flow interval path 
path arc interval path arc interval 
send flow simultaneously paths network transit times rounded nearest multiple cause bottleneck arc see 
partially drawn unit capacity network paths th path contains arcs transit time roughly consider unit capacity sub network depicted 
transit times rounded nearest multiple may send units flow simultaneously path path arc distinct interval time 
try interpret flow network original transit times path flow try arc time interval causing large bottleneck 
condition ii enforced allowing storage flow nodes arc length increased emulated original network holding flow arriving time units 
generally state observation 
observation 
consider network transit time vectors flow time transit times emulated transit times introducing waiting time head arc case acyclic graphs give simple argument section show condition storage allowed 
section describe sophisticated approach works general graphs storage flow nodes allowed 
acyclic graphs storage acyclic graphs existence topological ordering nodes problems illustrated fairly easy resolve 
algorithm simple appropriate guess choose nt round transit times nearest multiple 
form condensed time expanded network compute solution network 
output solution obtained modifying emulating rounded transit times described 
large requires large amount additional storage 
remains show exists feasible flow cost satisfying multicommodity demands time network transit times rounded nearest multiple 
flow cost satisfies demands time 
vn topological ordering modify obtain setting fe vi vj 
modifications flow traveling path includes vi delayed original departure exactly time units 
flow arriving node vj arrives time units arrival time horizon 
feasible flow travels paths satisfies multicommodity demands notice cost demand equivalent flow network transit time arc vi vj increased 
cost demand equivalent flow transit time vi vj increased ij nearest multiple held vj additional ij units time 
flow flow rounded network implying theorem 
theorem 
acyclic graphs node storage approximate solution quickest cost bounded multicommodity flow problem obtained static flow computation network nodes nm arcs 
minimum cost flows storage follows hoppe tardos quickest transshipment problem exists optimal solution store flow intermediate nodes :10.1.1.11.1164
generalize result problem costs general case flow cost arc nondecreasing convex function flow rate arc mentioned section transit times integers min cost transshipment time problem storage intermediate nodes solved solving corresponding static flow problem time expanded network theorem 
nondecreasing convex cost functions cost minimum cost transshipment time intermediate node storage cost minimum cost transshipment time intermediate node storage 
details proof essential understanding remainder 
proof 
consider minimum cost transshipment time intermediate node storage corresponding static min cost flow time expanded network notice set min cost solutions intersection polytope formed feasible solutions closed convex set convex cost constraint 
particular convex compact 
notice averaging argument proof lemma turn arbitrary flow time static flow time expanded network works case convex costs averaging increases cost 
node net flow leaving time interval xe xe compact exists minimizing convex function 
show send flow holdover arcs nodes contradiction earliest copy node send flow holdover arc xv 
integral time interval flow leaving entering 
show decreased augmenting flow cycle time expanded network contradiction choice consider time expanded network infinite directions note looks network looks different copies indicate difference coloring arcs follows 
color transit arc ij red ij ij blue ij ij color ij ij holdover arcs remain 
note blue arcs leaving red arcs entering simple path consisting backward red arcs forward blue arcs node property 
claim exists node red arc entering blue arc leaving 
consider set nodes reached path consisting backward red arcs forward blue arcs 
follows flow conservation exist node set 
note 
define capacity min ij ij ij modifying reduce 
min arc ij red modify ij ij ij ij ij ij ij blue ij ij ij ij remove units flow path holdover arcs add path holdover arcs 
notice augmented flow cycle 
domain restricted flow feasible solution problem 
argue cost increased flow augmentation transfers equal amount flow copy arc parallel copy flow costs linear change cost solution 
sum flow arcs change simply move flow flow closer average flow flow costs convex nondecreasing cost solution increase 
augmentation ensures reduced increased 
quantities exchange values 
decreased 
concludes proof 
theorem implies find minimum cost flow time network holdover arcs intermediate nodes 
state stronger result 
corollary 
instance minimum cost transshipment time problem costs nondecreasing convex functions flow rate exists optimal solution intermediate node storage infinitesimal unit flow visits node 
proof 
consider case cycle zero cost path flow optimal flow visits node travels cycle cost solution decreased letting flow wait contradiction optimality solution 
exist zero cost cycles increase cost arc small amount optimal solution modified problem yields optimal solution original problem 
eliminates cycles zero cost concludes proof 
general graphs storage describe adapt outline section yield approximation scheme cost bounded quickest transshipment problem general graphs intermediate node storage 
main steps approach choose small increase time horizon sufficiently large amount relative account bottlenecks caused problems type see section 
second average flow computed rounded network sufficiently large intervals relative bottlenecks caused input network capacities linear costs transit times demand vector cost bound output feasible flow time satisfying demands cost 
guess 
round transit times nearest multiple 
construct condensed time expanded network holdover arcs intermediate nodes time horizon 
compute static flow network satisfying demands cost 
interpret flow time network rounded transit times path decomposition 
define fp flow original network fully polynomial time approximation scheme 
represents optimal unknown makespan 
problems type ii averaged sufficiently long time flow feasible 
second step increases total time horizon flow careful choice sufficiently small amount 
corollary restrict time send flow simple paths store flow intermediate nodes 
means written sum path flows time fp consider arbitrary arc total flow arc time fe fp denotes length subpath obtained removing arc successors 
makespan quickest transshipment cost bounded precise description algorithm 
exact choice time horizon analysis algorithm see lemma 
definition flow time lives network copy transit times rounded multiples 
contrast flow time defined original transit times 
flows set simple paths flows paths faster pace start discussing running time algorithm 
geometric mean binary search step find standard binary search find lower upper bounds constant multiple 
requires log iterations 
alternatively constant factor approximation algorithm quickest transshipment problem bounded cost section yields lower bound upper bound 
estimate obtained log geometric mean binary search steps 
condensed time expanded network holdover arcs constructed step contains nodes mn arcs 
static flow step computed polynomial time decomposed mn path flows 
consequence thereof corresponding flow time decomposed flows time mn simple paths flow rate path zero interval length attains positive constant value 
path occur times decomposition 
computing step takes mn time 
output requires path mn time 
sequence theorems lemmas justify choice algorithm 
key theorem says small perturbation transit times small effect time horizon value cost triples feasible flows theorem 
flow time time horizon transit times satisfying demands cost decomposed finitely flows time fp simple paths second set transit times flow defined fp fp feasible flow network transit times satisfying properties time horizon ii sends flow set paths iii satisfies demands 
iv cost 
proof 
obtain smoothed flow time fp time horizon defining fp fp illustrative example 
easy check obeys capacity constraints total amount flow sent path particular satisfies demands notice fp describes necessarily feasible flow time transit times perturbed 
path simple contains arcs fp fp smoothed path flow time fp comparison original flow time fp sent path fe fp fp fe ue ue fp fp fact fp 
dividing establish existence feasible flow time network transit times 
time horizon flow cost satisfies demands 
lemma states increasing supplies demands factor requires increase time cost 
lemma 
flow time time horizon cost satisfying vector supplies demands exists flow time satisfying demands supplies time cost 
proof 
rescaling time assume loss generality transit times integral 
static flow time expanded network corresponds consider modified instance transit times arcs increased factor 
condensed time expanded network modified instance time horizon identical time expanded network original instance arc capacities multiplied 
particular defines feasible flow time time horizon cost satisfying demands supplies modified instance 
transit times original instance smaller seen relaxation modified instance 
yields existence concludes proof 
lemma 
chosen exists static flow described step 
proof 
consider quickest transshipment network original transit times 
time horizon cost lemma exists flow satisfies demands cost completes time corollary exists decomposition fp flows time fp simple paths see 
theorem transit times rounded nearest multiple exists flow satisfying demands cost completes time choosing assures existence flow step 
choose allow additional storage may simplify algorithm finding flow satisfying demands cost step remove step entirely 
flow simulated original network holding flow nodes 
remains show flow time computed step algorithm feasible satisfies vector demands supplies cost result demand cost follows definition satisfies demands cost feasibility follows applying theorem flow time yields main result section 
theorem 
arbitrary approximate solution quickest transshipment problem bounded cost obtained log static min cost flow computations condensed time expanded network nodes mn arcs holdover arcs 
particular solution intermediate node storage 
case quickest transshipment problem costs min cost flow computations condensed time expanded network replaced max flow computations 
quickest multicommodity flows 
result theorem generalized quickest multicommodity flow problem bounded cost 
shows optimal solution quickest multicommodity flow problem may require storage flow intermediate nodes 
hand storing intermediate nodes allowed optimal solution may contain non simple flow paths 
analysis relies fact restrict simple flow paths uses 
shown np quickest multicommodity flow problem intermediate node storage prohibited flow may sent simple paths 
intermediate node storage allowed exists optimal solution uses simple flow paths flow traveling cycle simply wait start node cycle 
case approach described section modified follows 
flow time stores flow intermediate nodes longer decomposed path flows time described 
order handle setting storage flow intermediate nodes path model introduce notation 
path delays path consisting nodes 
vp vector non negative delays 

value 
specifies amount time flow stored node vi continues journey node vi flow time flow entering time enters arc 
time vj vj 
flow time time horizon infinitesimal unit flow describes path delays flow time decomposed possibly infinitely flows time paths delays setting replaced fe fp corresponding static flow condensed network holdover arcs exists decomposition flows time paths delays number bounded number arcs condensed time expanded network consider arbitrary path decomposition notice path condensed time expanded network holdover arcs yields path delays summarizing straightforward modification analysis section replacing yields result 
theorem 
consider instance quickest multicommodity transshipment problem bounded cost intermediate node storage 
approximate solution log static multicommodity flow computations bounded cost condensed time expanded network nodes mn arcs including holdover arcs 
earliest arrival flows section address multiple source earliest arrival flow problem set sources supplies dv single sink send supplies sink amount supplies arriving sink time maximum possible 
show result section generalized problem 
notion approximation problem computing earliest arrival flow 
flow time approximate solution problem dv earliest point time units arrived sink factor earliest possible time 
algorithm computes flow time polynomial time called approximation algorithm 
order stress property performance guarantee achieved say algorithm universal performance guarantee 
earliest arrival problem find solution universal performance guarantee 
section show unit interval discretization may sufficiently fine achieve guarantee describe determine initial discretization 
discretization may large necessary condense 
uniformly crude discretization section introduce general framework nonuniform condensed time expanded networks prove useful properties 
section derive polynomial time algorithm yields performance guarantee earliest arrival flow problem nonuniform condensed time expanded network intervals geometrically increasing size 
previous discrete time model universally maximal flow time computed time expanded network lexicographically maximal flows introduced minieka 
lexicographically maximal flow defined static network multiple sources sinks 
strict ordering sources sinks 
denote source sink 
lexicographically maximal flow flow simultaneously maximizes flow leaving ordered subset sources sinks 

discrete time model universally maximal flow time time horizon lexicographically maximal flow time expanded graph ordering sources sinks st st 
tt tt 
due exponential size time expanded network insight lead efficient algorithm problem 
mentioned algorithms wilkinson minieka successive shortest path algorithm 
efficient algorithms computing universally maximal dynamic flows successive shortest path algorithm requires exponential number iterations worst case see zadeh 
result wilkinson minieka originally derived discrete time model holds continuous time model 
setting existence universally maximal dynamic flows observed 
fleischer tardos show algorithms discrete time model mentioned carried continuous time setting 
continuous time model equivalent problem universally quickest flow problem asks flow time value earliest point time units arrived sink simultaneously minimized earliest point time units left source simultaneously maximized hoppe tardos compute single source single sink universally maximal dynamic flow amount flow approximately optimal moment time 
lemma implies algorithm achieves universal guarantee 
earliest arrival flow exists case multiple sources single sink 
discrete time model flow time lexicographically maximal flow computation time expanded network 
hand fleischer presents instance sources sinks earliest arrival flow exist 
nonuniform time expanded networks previously obtain exact algorithms quickest transshipment problem setting zero transit times 
partitioning time intervals geometrically increasing size previously conjunction dynamic programming derive approximation algorithms problems area machine scheduling 
sufficiently fine discretization time unfortunately lexicographically maximal flow time expanded network necessarily yield universal performance guarantee quickest flow problem continuous time model 
interpret static flow time expanded network continuous flow time see proof lemma doing get solutions rate flow arriving sink constant averaged discrete time interval 
effect negligible late intervals time example shows significant time intervals 
example 
network single arc source sink capacity transit time 
unit supply unit demand universally quickest flow sends flow rate interval flow arrives rate interval 
averaging flow unit intervals yields flow arrives rate interval 
flow universal performance guarantee 
problem illustrated example resolved follows 
arbitrary integral discretize time intervals size 
averaging flow interval delays flow arrives sink time factor 
remains take care happens time 
notice flow arriving sink time arcs transit time 
particular earliest arrival flow time computed restricting attention subnetwork consisting arcs 
hajek describe algorithm finds earliest arrival flow network single sink zero transit times maximum flow computations 
fleischer gives improved algorithm solves problem asymptotic time maximum flow computation 
analysis algorithm shows function describing optimal rate inflow sink piecewise constant breakpoints 
number sources 
breakpoints independent discretization time computed information polynomial time 
determine appropriate discretization 
sufficiently fine discretization time guarantees earliest arrival flow time computed corresponding time expanded network 
example discretization time intervals size sufficient 
observation stated yields result 
lemma 
consider instance earliest arrival problem multiple sources supply vector single sink 
defined 
approximate earliest arrival flow obtained lexicographically maximal flow computation time expanded network chosen 
multiples 
discussion specifically theorem theorem bound ue size resulting time expanded network pseudo polynomial input size problem 
time rescaled factor assume loss generality subsection show turned network polynomial size losing factor performance guarantee resulting polynomial time algorithm 
nonuniform condensed time expanded networks mentioned size time expanded network pseudo polynomial input size 
contrast situation quickest flow problem discussed section uniformly rough discretization lead worse performance guarantee earliest arrival flow problem 
nonuniform discretization 
section describe general framework nonuniform time expanded networks establish possible appropriate generalizations properties uniform time expanded networks 
overloading notation introduced section sorted list 
time expanded network denoted obtained creating copies labeled vr th copy node denoted vq 

arc arc eq vq wq min 
clear context capacity arc eq set ue 
addition holdover arc vq vq infinite capacity 
notice definition generalizes definition time expanded network particular 
consider static flow implicitly assume tr sink flow arriving tq sent sink holdover arcs 
lemma 


static flow corresponds flow time amount flow reaching time 
amount flow reaching node tq proof 
static flow interpret generalized flow time contrast standard flows time transit times vary time 
interpret flow arc eq vq wq flow sent constant rate arc time interval arriving node time interval constant rate 
particular time interval transit time arc varies flow entering arc time flow entering arc immediately time sizes time intervals 
nondecreasing choice transit time arc smaller design obeys flow rate capacity constraints flow conservation 

amount flow reaching time amount flow reaching node tq transit times lower bounded actual transit times arcs easily interpreted regular flow time introducing appropriate waiting times infinitesimal flow unit head arc lemma 


flow time completes time network modified transit times increased 
induces feasible static flow value 
proof 
define total flow interval 
feasible obeys capacity constraints construction design value equals value establish flow conservation consider path 
travelled infinitesimal unit flow infinitesimal unit flow arrives wi time leaves wi time argue corresponding unit flow arrives wi pi pi satisfying pi available sent arc wi qi wi qi maximum index satisfying show satisfies flow conservation 
set qi 
design infinitesimal unit flow leaves wi arrives wi defined 
definition yields 
second inequality follows definition qi previous paragraph subsequent equality follows definition implies qi flow obeys conservation constraints 
approximation scheme obtain universal guarantee earliest arrival flow problem geometrically increasing time discretization 
define list 




chosen resulting time expanded network large allow approximate time horizon 
precise choose smallest time horizon optimal flow time 
notice length list log polynomially bounded input size 
remains shown lexicographically maximal flow corresponding geometrically condensed time expanded network yields flow time universal performance guarantee 
lemma 
lexicographically maximal flow induces flow time universal performance guarantee 
proof 
minimal time required send units flow sink 
consider time expanded network defined sublist 
min 
words obtained removing time layers vq incident arcs 
show flow value lexicographically maximum flow units flow reach tr corresponding flow time sends time lemma 
flow yields universal performance guarantee 

choice assume 
flow value time lemma implies flow value time 
theorem implies flow value completes time network transit times increased lemma implies flow value established main result section 
theorem 
exists fully polynomial time approximation scheme problem computing earliest arrival flow network multiple sources single sink 
acknowledgment dan helpful comments 
afrati chekuri karger khanna queyranne stein 
approximation schemes minimizing average weighted completion time release dates 
proceedings th annual ieee symposium foundations computer science pages new york city ny 
aronson 
survey dynamic network flows 
annals operations research 
burkard 
quickest flow problem 
zor methods models operations research 
chakrabarti phillips schulz shmoys stein wein 
improved scheduling algorithms criteria 
meyer auf der heide monien editors automata languages programming volume lecture notes computer science pages 
springer berlin 
shmoys 
approximation algorithms scheduling problems parallel machines run different speeds 
journal algorithms 
fleischer 
quickest multicommodity flow problem 
cook schulz editors integer programming combinatorial optimization volume lecture notes computer science pages 
springer berlin 
fleischer 
minimum cost flows time intermediate storage 
proceedings th annual acm siam symposium discrete algorithms pages baltimore md 
fleischer 
approximating fractional multicommodity flows independent number commodities 
siam journal discrete mathematics 
fleischer 
faster algorithms quickest transshipment problem 
siam journal optimization 
fleischer 
universally maximum flow piece wise constant capacity functions 
networks 
fleischer 
tardos 
efficient continuous time dynamic network flow algorithms 
operations research letters 
ford fulkerson 
constructing maximal dynamic flows static flows 
operations research 
ford fulkerson 
flows networks 
princeton university press princeton nj 
gale 
transient flows networks 
michigan mathematical journal 
garg 
faster simpler algorithms multicommodity flow fractional packing problems 
proceedings th annual ieee symposium foundations computer science pages palo alto ca 
gr tschel lov sz schrijver 
geometric algorithms combinatorial optimization volume algorithms combinatorics 
springer berlin 
hajek 
optimal dynamic routing communication networks continuous traffic 
networks 
hall 
multicommodity flows time efficient algorithms complexity 
lenstra woeginger editors automata languages programming lecture notes computer science 
springer berlin 
appear 
hall schulz shmoys wein 
scheduling minimize average completion time line line approximation algorithms 
mathematics operations research 
handler 
dual algorithm constrained shortest path problem 
networks 

approximation schemes restricted shortest path problem 
mathematics operations research 
hoppe 
efficient dynamic network flow algorithms 
phd thesis cornell university 
hoppe 
tardos 
polynomial time algorithms evacuation problems 
proceedings th annual acm siam symposium discrete algorithms pages arlington va 
hoppe 
tardos 
quickest transshipment problem 
mathematics operations research 
woeginger 
minimum cost dynamic flows series parallel case 
balas clausen editors integer programming combinatorial optimization volume lecture notes computer science pages 
springer berlin 
lorenz raz 
simple efficient approximation scheme restricted shortest path problem 
operations research letters 
megiddo 
combinatorial optimization rational objective functions 
mathematics operations research 
minieka 
maximal lexicographic dynamic network flows 
operations research 

minimum delay routing continuous time dynamic networks piecewise constant capacities 
networks 
orlin 
minimum convex cost dynamic network flows 
mathematics operations research 
phillips 
network inhibition problem 
proceedings th annual acm symposium theory computing pages san diego ca 

continuous time flows networks 
mathematics operations research 
powell 
stochastic dynamic networks routing 
ball magnanti monma nemhauser editors network routing volume handbooks operations research management science chapter pages 
north holland amsterdam netherlands 
richardson 
tardos 
personal communication 
wilkinson 
algorithm universal maximal dynamic flows network 
operations research 
zadeh 
bad network problem simplex method minimum cost flow algorithms 
mathematical programming 

