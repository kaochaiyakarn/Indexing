automatic verification embedded control software bauer university dortmund department chemical engineering emil str 
dortmund germany bauer uni dortmund de ralf university kiel institute computer science applied mathematics 
kiel germany informatik uni kiel de language sequential function charts sfc programming structuring language programmable logic controllers plc 
defined iec standard includes various interesting concepts parallelism hierarchy priorities activity manipulation 
sfcs perpetually engineering community programming design embedded control systems hardly specific verification approaches 
existing approaches petri nets uml statecharts really apply sfcs structures similar include distinct features 
method model check sfcs 
done defining translation sfcs native language cadence symbolic model verifier 
translation specifically tailored cover concepts sfcs performed automatically 
demonstrate approach application control process chemical engineering 

industrial manufacturing transportation chemical engineering applications need increasing numbers new automated machines systems 
control production lines transportation units chemical plants 
vast part target system programmable logic controllers 
certainly software plays critical role correctness highly desirable 
sfcs unique existing programming languages define high level graphical description language allows parallelism hierarchy activity manipulation 
intuitively sfcs particular kind transition systems node associated set programs turn sfcs 
programs switched various ways depending qualifiers associated program node 
allows instance activation program node continuous execution node reached switched 
activation deactivation programs supported opens interesting fields applications 
time far obvious imagine system configurations set active non active programs time 
goal area research automatic analysis sfcs verification requirements 
exist approaches prove correctness sfcs 
previous consider concepts hierarchy priorities deals simplistic concept suited practical application 
takes concept activity manipulation account 
intends remedy current situation covering major concepts care distinct nature plc execution 
formal verification done model checking 
order concentrate translation sfcs native language model checker respect aforementioned setting 
consider main concepts discussed demonstrate verification method application control software chemical plant 
remainder structured follows introduce sequential function charts briefly syntax semantics sect 

sect 
define translation sfc native code illustrate process sect 
case study 
draw point directions research sect 

sfc language sequential function charts defined iec standard elements graphical programming structuring language programmable logic controllers 
sfc definitions iec standard defines specification language 
turn strongly related petri nets 
basically sfcs transition systems consisting steps locations transitions 
sfc exists exactly initial step 
transition labelled associated transition condition called guard 
actions may associated step 
actions sfcs programs programming languages proposed standard 
furthermore actions simply may boolean variable 
actions associated steps sfcs concept hierarchy provided 
example sequential function chart depicted fig 

guard initial step step transition action qualifier action name action block 
elements sfcs action blocks shown fig 
graphical means associate actions steps 
action block consists action qualifier specify activity respective action action name 
concerning action qualifiers defined standard concentrate associated duration time 
non stored overriding reset set stored pulse rising edge pulse falling edge intuitively non stored actions active control resides corresponding step step active 
contrast stored actions keep active outside step activation corresponding reset action called 
actions pulse qualifier performed entering exiting step step gets activated deactivated 
action boolean variable variable true action active false 
sfc necessarily single sequence steps transitions 
possible alternative choice means transition branches step shown fig 
parallel simultaneous sequences denotes transition synchronizes evolution sequences shown 
standard allows loops steps interpreted particular kind alternative branching 
basic transition types combined complex transition structures 
various combinations sense shown fig 
loop parallel branch 
assume sfcs formed free constructions 
additional feature sfcs possibility explicitly assigning priorities alternative branches 
means firing transitions highest priority enabled ones taken 
priorities explicitly implicit rule transitions ordered left right decreasing priority 
formally define syntax sfc follows definition sfc sequential function chart sfc tuple block finite set steps finite set action blocks sfcs initial step finite set transitions block action labelling function assigns set action blocks step irreflexive partial order actions empty irreflexive partial order transitions empty 
order transitions ensures cover priorities conflicting transitions transitions non disjoint parallel branching convergence parallel branching divergence alternative branching divergence alternative branching convergence loop unsafe behavior 
different types transitions guards 
order actions adapts different execution models parallelism 
shown execution order actions varies different sfc programming tools tool actions executed alphabetic order action names user pre defined orders 
covered partial order distinguishes execution order actions modifying variable 
note order empty actions non ordered executed parallel 
action block consists identifier plc program nested sfc qualifier fn 
step denote block set action names action blocks associated block set qualifiers 
setting assume plc programs operating boolean variables 
sufficient illustrate model check sfcs simultaneously covers lot reallife sfc programs reason pumps valves just states 
execution sfcs described evolution rules similar firing rules petri nets 
important consider sfc program execution plc differs program execution ordinary pc 
general plc programs executed cyclic manner 
scan cycle new input environment sensors plant pressure temperature sensors read stored 
plc program executed stored input actions active steps executed may change output variables transitions taken 
cycle output sent environment actuators plant valves motors 
couple things worth mentioning reasoning sfcs semantics cycle actions executed guards evaluated transitions taken 
general actions executed fixed order lexicographical order action names explicitly implicitly 
nested transition top level transition enabled top level transition taken nested transition 
nested sfc inactive current location stored history step control resume time sfc activated 
steps active cycle means actions potentially executed called active steps 
union history steps active steps called ready steps 
actions potentially executed cycle called active actions ones activated qualifier reset called stored actions 
formal model operational semantics 
operational semantics relies configurations describing system state 
configuration defined follows definition configuration configuration sfc sub sfcs tuple state variables set ready steps set active steps set active actions set stored actions ones remain active outside step called 
configuration modified cycles plc 
cycle sequence performed 
get new input environment store information state variables 

execute set active actions update accordingly 

determine set 

send outputs environment extracting required information new state 
cycle new active steps old ones plus targets taken transitions source steps 
new active steps active actions stored actions computed recursively structure sfc 
semantics sfc possible set configuration sequences 
configuration sequence consists finite infinite number configuration transformations plc cycle corresponds configuration transformation 

translation symbolic model checker supports verification temporal logic properties kripke structures 
transition relation kripke structure expressed evaluation rules depending current state system variable notation 
order translate sfc mimic transition relation configuration sfc semantics 
remember reading inputs plc cycle execute actions evaluate transitions determine new active steps actions 
reasoning guards new state steps actions refer state variable 
consider order actions transitions 
assume activity action directly corresponds output variable case actions consist opening closing valves switching motors case need order actions actions share variables 
furthermore order transitions allows additionally check conflicting transitions automatically 
section show extend framework embedding orders transitions actions results deterministic execution model 
enables deal complex actions situations variable modified action execution order comes play 

data structure module system modelled composed components called modules 
module describe sfc actions allow modules describe environment parts environment 
order translate sfc block introduce boolean variables ready si step variable step top level sfc hierarchically nested ones 
variables model respective step ready means step active control resides waits resume 
guard variable represents transition condition general boolean expression reasoning program variables input variables process variables plant controlled activity steps step xi 
step evaluates true step active 
active ai action variable introduced code action active 
action sfc 
stored ai action indicates action currently stored activated current previous step qualifier 
note want reason activity step belonging nested sfc variable step xi statically substituted ready si active ak 
means step active currently ready execution actions sfc nested remains active 
furthermore module input parameters boolean input variable sfc program 
behavior input variables priori chaotic take possible value specified 
allows check open system 
restrictions behavior input variables modelled additional module representing environment 

evolution state variables section define code transition relation variables defined previous section 
special interest activity actions tagged qualifiers 
explicitly define state variables guards input variables inputs provided environment truth values guards determined evaluation boolean expressions represent 
ready steps 
ready variable ready si step true transition taken true transition taken case nested sfc additionally required nested sfc active 
detail nested sfc action variables ready si step set true sfc active active ak holds preceding guards hold executions actions cycle corresponding source steps currently ready 
active actions 
value active ak activity action depends activity steps block qualifiers tagged expression determining active ak defined act steps act steps act steps stored ak act steps act steps fs ak block ready sj active tagged qualifier sfc belongs act steps fs ak block ready sj ready sj tagged qualifier act steps fs ak block ready sj ready sj tagged qualifier act steps fs ak block ready sj active tagged qualifier sfc belongs 
means action active conditions hold step action associated active action tagged qualifier step action belongs entered cycle action tagged qualifier step action belongs active inactive cycle action tagged qualifier action stored see 
resetting action priority case disable activation 
stored actions 
value stored ak set true steps associated active tagged qualifier matching reset 
set false matching reset action called 
value stored ak defined stored ak act steps stored ak act steps act steps fs ak block ready sj active tagged qualifier sfc belongs act steps defined 
initialization 
initial ready step top level sfc initialized true denoting step active 
steps initially set false 
reasons simplicity assume initial step top level sfc contains nested sfcs 
limit set translatable sfcs sfc transformed meeting constraint 
furthermore variables coding action active action stored initially false 

extension orders actions transitions translation take account orders actions transitions 
furthermore works actions activity mapped output variable 
approach extended consider existing orders transitions actions 
take order transitions account modify guards transitions conflicts 
done statically adding constraints transition enabled iff guard holds higher priority transition shares common source steps enabled 
consider complex actions necessary deal order actions introduce output variable modified action state variable kind 
realize define state variable states actions modifying output variable 
state corresponds action variable evolves state order 
output variable changed state expression modelling action modification output variable 
furthermore need kind global cycle synchronization execution remaining actions 

application chemical plant section apply approach laboratory plant designed built process control laboratory university dortmund serve test bed demonstration medium control scheduling methods multi product batch plants 
compared batch plants industrial scale plant moderate size complicated pose complex scheduling control tasks 
plant products generated raw materials reactors simultaneously 
plant may seen part production line buffer tanks raw materials assumed come preceding step production line 
additionally buffer tanks products supposed consumed production step 
illustration purposes focus part plant production product reactors 

example process control program fig 
reactor depicted produce chosen product referred raw materials referred tanks buffer tanks respectively 
filled valves 
reaction carried filling valve 
contents tank reactor immediately reacts product directly withdrawn processing 
tanks equipped sensors lis detecting upper liquid level threshold lis detecting tank empty 
apart lis sensor tank equipped ensure homogenous solution tank reaction 
lis lis lis lis lis bc 
plant fig 
control program carrying reaction shown 
control program consists kind allows processes run parallel filling action step filling action step reaction emptying step action action individual sfc process certain complexity 
conflicting processes emptying contents sub step filling waiting steps shall ensure certain conditions guards hold processes start 
apart actions simple 
value actions activity simply determines value output variable valve long open active 
note control routines differ adapted excerpt plant 

translation translation control program code follows directly definitions sect 

give just examples define transition relation state variables 
code examples fig 
symbols denote logical 
example code author web pages ready steps 
step nested sfc ready preceding step currently ready sfc nested active guard transition connecting steps evaluate true 
hand step inactive currently ready sfc active outgoing transition condition hold 
cases satisfied keep current status 
active actions 
action active active ready active stored active step reset case inactive 
stored actions 
action stored step active step ready action active marked stored reset step active 
cases unchanged 

specification verification tasks sfcs check properties reachability step 
check ensure unused code 
corresponding ctl specification added input file step spec ef si exists execution path eventually reach www informatik 
de start true lis lis lis lis lis lis lis finished finished finished 
control sfcs absence deadlocks 
check step reached possible extend run reached infinitely 
specified spec ag af si 
plant specific requirements 
design control programs batch plants allocation plant equipment different production steps processes central issue 
processes conflict need resources 
emptying contents filling conflict compete tank 
checked equipment exclusively process time 
example ensured valves filling emptying tank open simultaneously 
tank valves shall open time leads specification spec ag 
verification tasks independent specific environment reason control software 
order verify overflow tank parts plant environment included model checked combination current controller 

verification results verification tasks checked fraction second sun ultra 
surprising model small size illustration purpose 
proven step reachable deadlocks 
verified tanks filled emptied time 
tank fulfill requirement 
counter trace produced shows valves may opened simultaneously 
happens required entering step step active filling start emptying phase 
entering condition checks tank filling phase 
verification detected flaw control program obvious see counter trace helps see happened prevent 

automatic verification approach sfcs developing translation sfcs native language 
standard verification issues reachability steps absence deadlocks checked fully automatically generating code safety requirements easily generated 
furthermore comprises major features sfcs interesting concept activity manipulation action qualifiers account 
allows real application existing control software 
concentrate implementation method application industrial size systems 
additional measures necessary order cope complexity systems 
way tackle decomposition techniques application assumption commitment methods 
extension timed sfcs timed qualifiers possible extending framework data types infinite domains integers 
default case default case default case 
code examples hand lead application real time model checkers uppaal kronos hand development transformations finite subclasses combination model checking deductive methods 
partially supported european community esprit long term research project vhs verification hybrid systems german research council dfg special program integration software specification techniques engineering applications la 
furthermore ben fruitful discussions 
abadi lamport 
conjoining specifications 
acm transactions programming languages systems 
bauer 
parameterized semantics sequential function charts 
institute computer science applied mathematics university kiel 
bauer sand 
case study multi product batch plant demonstration control scheduling problems 
editors conference proceedings pages 
bauer 
der semantik der nach iec 
gma volume vdi berichte pages 

bengtsson griffioen larsson larsen pettersson yi 
verification audio protocol bus collision uppaal 
computer aided verification pages 

iec programming methodology 
cj international fontaine france edition 
lakhnech 
verification sequential function charts smv 
pdpta international conference parallel distributed processing techniques applications las vegas usa june pages 
clarke emerson 
synthesis synchronisation skeletons branching time temporal logic 
kozen editor workshop logic programs volume lncs 
springer verlag 
david 
petri nets 
prentice hall 
yamashita 
design verification sfc program sequential control 
computers chemical engineering 
international electrotechnical commission technical committee 
programmable controllers programming languages iec second edition november 
committee draft 
international electrotechnical commission technical committee 
iec preparation function charts control systems 
jones 
development methods computer programs including notion interference 
phd thesis oxford university computing laboratory 
lamp eri ere 

formal verification sequential part plc programs 
editors discrete event systems pages 
kluwer academic publishers 
le parc 
proving sequential function chart programs automata 
lncs 
mcmillan 
smv language 
cadence berkeley labs 
www cad eecs berkeley 
edu language ps 
misra chandy 
proofs networks processes 
ieee transactions software engineering 
pnueli 
transition global modular temporal reasoning programs 
logics models concurrent systems volume nato asi 
springer 
sifakis 
specification verification concurrent systems cesar 
th international symposium programming volume lncs pages 
springer verlag 
sergio yovine 
kronos verification tool realtime systems 
international journal software tools technology transfer 
