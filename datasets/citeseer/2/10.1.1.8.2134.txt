logic programming language multi agent systems costantini universit degli studi di aquila dipartimento di informatica loc 
aquila italy di 
presents new logic programming language modelling agents multi agent systems computational logic 
basic objective specification new language identification formalization consider basic patterns reactivity proactivity internal thinking memory 
formalization models concepts introducing different kinds events suitable treatment 
introduce novel approach language semantics called evolutionary semantics 
presents new logic programming language modelling agents multi agent systems computational logic 
traditional logic programming proved time knowledge representation language rational agents 
logical agents may possibly interact external environment means suitably defined observe think act cycle 
significant attempts decade integrate rationality reactivity proactivity logic programming see instance discussion 
called logic programming augmented reactive proactive features active logic programming 
dali active logic programming language designed executable specification logical agents committing specific agent architecture 
dali allows programmer define agents interacting external environment user 
basic objective specification new language identification formalization consider basic patterns reactivity proactivity internal thinking memory 
formalization research funded project aggregate number reasoning computing decision algorithms constraint programming multisets sets maps 
stefano gentile joined dali project cooperated implementation dali designed language web site helped supported authors ways 
models concepts introducing different kinds events suitable treatment 
introduce particular classes external past internal events sections 
events represented special atoms managed special rules 
limited treatment time provided events time stamped internal events considered specified intervals past events kept forgotten suitable conditions 
important aim definition dali introducing declarative fashion essential features keeping language close possible syntax semantics plain horn clause language 
dali inference engine extended resolution section 
devised novel approach language semantics called evolutionary semantics section approach semantics dali program defined terms modified program ps reactive proactive rules reinterpreted terms standard horn clause rules 
agent reception event formalized program transformation step 
evolutionary semantics consists sequence logic programs resulting subsequent transformations sequence herbrand model programs 
possible reason state agent introducing explicitly notion reason reached actions performed certain stage 
semantic approach propose orthogonal competing approach updating logic programs ulp short 
common underlying assumption representing state evolution program evolution 
ulp program evolution explicit controlled means special purpose meta language objective incorporating knowledge changes 
dali program evolution implicit program code change determined events 
approaches collide profitably combined 
true epi language extension takes account external events 
interesting relationships similarities epi semantics dali evolutionary semantics lead useful integration 
dali language 
treatment events extended refined declarative semantics properly defined sketch aforementioned language implemented 
completely new treatment time relations different classes events ii approach belief revision internal events iii evolutionary semantics 
prototype implementation dali language developed sicstus prolog authors university aquila 
implementation set examples available url gentile dm dali dali htm 
syntactic features dali dali program syntactically close traditional horn clause program 
particular prolog program special case dali program 
specific syntactic features introduced cope agent oriented capabilities language 
dali agents cope events represented special atoms called event atoms 
order emphasize event atoms corresponding predicates indicated particular postfix 
consider event incoming agent external world instance alarm clock rings 
agent perspective event seen different ways 
initially agent perceived event reacted 
reason event instance thinking nuisance early 
situation event called event written alarm clock postfix standing 
agent decides react event instance order switch alarm stage event called external event written alarm clock postfix standing external 
reaction agent able remember event 
event happened past called past event written alarm clock postfix standing past 
special feature dali concept internal event 
internal event reached agent agent may want react sense triggering inference 
instance food finished may agent may want react go buy food 
intended trigger proactive behavior called internal event written food postfix standing internal 
agent able remember internal events past events 
atoms denote actions agent performs order achieve effect environment 
point actions action atom instance buy food written buy postfix standing action 
agent wants remember previously performed action kept form buy postfix standing past action 
rules form horn clauses reactive rules event head syntactically emphasized 
head rule event body rule represents agent reaction event event determines reaction 
order visually evident connective replaced reads determines 
notice conceptual distinction different kinds events reactive rules fundamental features dali language 
mentioned syntactic notation syntactic sugar just suits particular taste authors 
external events actions reactivity rule example reactive rule dali modelling waiter cafeteria shop customer approaches 
customer say offer 
predicate customer denotes external event happens external world agent situated 
recognizable rules external event reactive rules token replaced 
declarative semantics discussed section rule treated plain horn clause 
subgoals body case actions discussed recognizable postfix body reactive rule consist mixture actions subgoals reaction event involve rational activity 
formally associate agent ag set distinct predicates pe 
pes representing external events agent able respond 
atom form args called event atom 
set event atoms subset herbrand universe called 
events recorded set ev 
soon event happens inserted ev represents input channel agent 
declarative semantics ev represented list indicating order agent consumes events 
event consumed corresponding reactive rule activated usual resolution style event atom unified head reactive rule mgu body added current goal event atom removed ev event atom args ag may possibly provide rule form args rj 
rj args args unifiable 
implementation events time stamped order consumed corresponds arrival order 
time stamp useful introducing language limited possibility reasoning time 
instance possible write rule customer offer 
possible conjunction events head reactive rule example 
close 
order trigger reactive rule events head happen certain amount time 
length interval set directive checked time stamps 
important feature dali event atom ev available agent event indicated postfix occur subgoal body rules 
events establishes distinction reasoning events reacting events 
example bell door ringing reaction going open door 
reaction event perceived event allowing agent draw visitor arrived 
visitor arrived bell 
bell open 
notice action subgoals previously seen examples occur head rule 
dali action atoms represent actions preconditions succeed 
action properly affect environment interpreter generate failure event managed suitable rule 
actions preconditions action atoms defined action rules 
example agent emits order product needs supply 
order done phone fax case fax machine available 
need emit oder 
emit oder phone 
emit oder fax 
fax fax machine available 
action subgoals succeed actions preconditions implementation automatically adds rule form actiona emit error message cope potential failures 
external events actions expressing communication acts 
external event message agent symmetrically action consist sending message 
fact current techniques developing semantics agent communication languages trace origin speech act theory see interpretation speech acts rational actions 
commit particular agent communication language attach event atom indication agent originated event events default indication environment 
event atom precisely seen triple sender event atom sender fields omitted needed 
past events memory dali agent keeps track events happened past actions performed 
soon event removed ev corresponding reactive rule triggered action subgoal succeeds action performed corresponding atom recorded agent database 
past events indicated postfix past actions postfix past events recorded form sender event atom past actions form action atom 
rule instance says susan arriving know left home 
arriving susan left susan 
example illustrates exploit past actions 
particular action opening resp 
closing window performed window closed resp 
open 
window closed agent remembers closed previously 
window open agent remembers opened previously 
sunny open 
rainy close 
open window closed 
window closed close 
close window open 
window open open 
important agent able remember important able forget 
fact agent keep track event action unlimited period time 
subsequent events actions ones valid 
previous example agent remember opened window 
soon closes window record longer valid removed agent case interested remember action sequence 
implementation past events actions kept certain default amount time modified user suitable directive 
user express conditions exemplified keep shop 
information shop open expires closing time time removed 
alternatively specify terminating condition 
soon condition fulfilled corresponding subgoal proved event removed 
keep shop shop closed 
keep open close 
particular cases event dropped knowledge base specified keep born daniele pe aug forever 
internal events proactivity dali agent able cope external events reason past 
want equip agent sort consciousness determine independent proactive behavior 
language commit fixed infrastructure provides mechanism user program application hand 
mechanism internal events 
best knowledge mechanism absolute novelty context agent languages 
subgoal occurring head rule play role internal event provided occurs head reactive rule postfix consider example agent goes buy food soon finished 
finished ood interpreted event 
internal event treated exactly external ones trigger reactive rule 
finished food eaten food 
food go food 
go food bakery bread food 
go food grocery shop dairy food 
goals corresponding internal events automatically attempted time time trigger reaction soon succeed 
implementation provides default timing gives possibility explicitly stating timing means directives 
format directive try goal ime interval condition example goal tried 
high temperature threshold th temperature th 
high temperature start alert 
external events internal events recorded past events kept user indication 
internal events triggering belief revision activities take past events consideration decide take cancel incorporate knowledge agent 
declarative approach belief revision meta knowledge information opinion integrated dali 
presently commit specific belief revision strategy 
planning provide distinguished predicate incorporate explicitly invoked optionally treated internal event 
user charge providing suitable definition predicate favorite approach belief revision 
attempted incorporate return lists facts rules added removed dali interpreter 
procedural semantics procedural semantics dali consists extension sld resolution 
dali resolution described detail 
basic features summarized 
assume associate sets goal processed dali interpreter set ev external events available agent stimuli agent possibly respond ii set iv subgoals corresponding internal events proved internal stimuli agent possibly respond iii set past events internal external iv set ev goals corresponding internal events tried time time 
goal dali disjunction 
component goals 
goal usually defined horn clause language conjunction 
meaning computation fails disjuncts fail 
procedural behavior dali agent consists interleaving steps 
trying answer user query plain horn clause language 
ii responding external internal events 
means interpreter picks external event ev internal event form iv adds event ev new query new disjunct goal 
goal 

ev ev inserted 
iii trying prove goal corresponding internal event 
interpreter picks atom ev adds atom evt new query new disjunct goal 
goal 

evt interleaving activities specified basic cycle interpreter 
mentioned user influence behavior interpreter means suitable directives included initialization file 
evolutionary semantics define semantics dali program starting standard declarative semantics herbrand model modified program ps obtained means syntactic transformations specify different classes events coped 
ps basis evolutionary semantics describes agent affected actual arrival events 
coping external events specify reactive rule allowed applied corresponding event happened 
assume soon event happened recorded unit clause assumption formally assessed 
reach aim adding event atom args event atom body reactive rule 
meaning rule applied immediate consequence operator args available fact 
precisely transform reactive rule external events args 
rq 
standard rule args args 
rq 
similarly specify reactive rule corresponding internal event args allowed applied subgoal args proved 
aim transform reactive rule internal events herbrand model obtained usual horn clause language means immediate consequence operator iterated bottom 
args 
rq 
standard rule args args 
rq 
declaratively model actions action rule 
procedurally action performed agent soon executed subgoal rule form 
dh 
ak 
ai actions 
ak 
declaratively conditions 
dh rule true action atoms true preconditions rule applied immediate consequence operator 
aim action atom action rule 
cs 
modify rule 
dh 
cs 
defining clause add clause 
dh 
need specify agent evolution events happen 
propose approach program ps affected events means subsequent syntactic transformations 
declarative semantics agent program certain stage coincides declarative semantics version ps stage 
initially rules ps applicable external events available past events recorded 
soon external events arrive reactive behavior agent put order events received 
order obtain evolutionary declarative semantics step explicitly associate ps list events assume arrived certain point order supposed received 
ps indicate initially event happened 
pn event listn event listn list events happened current program obtained ps step step means transition function 
particular specifies th step current external event en event list added program fact 
en added event 
previous event en removed external event added past event 
precisely program snapshot step pn pn en definition 
transition function defined follows 
pn en pn en en event listn ps ps en en en enn en en en easy extend remove past events expired conditions specified keep directives 
definition 
ps dali program en 
list events 
ps pi pi ei say event ei determines transition pi pi 
list ps 
pn program evolution ps respect notice pi ei 
program transformed ith application 
definition 
ps dali program list events program evolution ps respect mi herbrand model 
sequence ps 
mn model evolution ps respect mi instant model step evolutionary semantics agent represents history events received agents effect produced introducing concept state 
definition 
ps dali program list events 
evolutionary semantics eps ps respect couple ps ps easy see event list en 
dali resolution simulates standard sld resolution 
theorem 
ps dali program en 
list events pn program snapshot step dali resolution correct complete respect pn 
evolutionary semantics allows standard model checking techniques employed verifying interesting properties 
reasoning program evolution possible instance know certain event certain stage memory agent 
reasoning model evolution possible instance know certain action performed stage means belongs mk 
evolutionary semantics extended dali multi agent programs considering evolutionary semantics agents involved 
requirement sequence incoming events agent specified 
related concluding remarks main objective design dali understanding modelling agents logic programming possible extent 
wanted new language simple easy understand horn clause language syntax semantics close horn clause language procedural semantics 
experiments practical applications tell extent simple language satisfactory 
clearly order develop real world examples dali equipped agent communication language primitives coordination cooperation agents 
past experience authors field meta logic programming suggested meta programming approach coping important aspects ontology problem management incomplete information 
lack space comment aspects preliminary discussion 
examples reader find dali web page show nice multi agent applications obtained simple features dali 
presently dali includes specific features planning 
view planning features constitute separate module agent invoke specific goal obtain possible plans choose 
direction mean integrate answer set solver implementation 
dali meant logic general purpose programming language prolog aimed programming agents 
dali commit specific agent architecture mentioned commit planning formalism 
dali directly compare moment approaches combine logic imperative features mainly aimed planning 
important approaches congolog multi agent prolog language imperative features situation calculus apl rule planning oriented concept event 
comparison extensive approaches multi agent systems impact premature impact just language proposes complex agent architecture 
purely logic language agents metatem different agents logic programs executed communicate message passing 
metatem concept time happened past determines agent 
differently dali metatem agents purely reactive different classes events 
bdi belief desire intention approach agents systems situated changing environment receive perceptual input take actions affect environment internal mental state 
implementations bdi agents successfully real application domains 
experiment want dali implementation language bdi approach 
experiment follows example agentspeak purely reactive logic language external events actions meant indirectly model bdi features simple way 
internal state agentspeak agent constitutes beliefs goals desires plans achieving goals intentions 
external events interpreted goals pursued order selection function means plans selected special function 
plan include new goals encountered execution plan highest priority ones attempted 
goals called internal events 
apart name dali internal events aimed triggering proactive behavior agentspeak internal events aimed refining plans 
claim features dali really novel field particular different classes events especially internal events interaction interleaving different activities past events past actions 

alferes lamma leite pereira 
logic approach multi agent systems 
alp newsletter august 

alferes leite pereira przymusinska przymusinski 
dynamic updates non monotonic knowledge bases 
logic programming september october 

dell acqua 
meta programming theory systems 
apt turini editors meta logics logic programming pages 
mit press cambridge mass 

brewka 
declarative representation revision strategies 
baral truszczynski editors nmr proc 
th intl 
workshop non monotonic reasoning 

brewka eiter 
prioritizing default logic 
festschrift th anniversary bibel 
kluwer academic publishers 

cohen levesque 
rational interaction basis communication 
cohen morgan pollack editors intentions communication pages 
mit press 

cohen levesque 
communicative actions artificial agents 
lesser editor proc 
st intl 
conf 
multi agent systems aaai press pages 
mit press 

costantini 
meta reasoning survey 
kakas sadri editors computational logic logic programming special volume honour bob kowalski print 
springer verlag berlin 
invited 

costantini 
meta reasoning survey 
computational logic logic programming special volume honour bob kowalski appear 
springer verlag 
invited 

costantini 
active logic programming 
brogi hill editors proc 
nd international workshop component software development computational logic pli paris france september 
www di unipi brogi proceedings index html 

de giacomo lesp rance levesque 
congolog concurrent programming language situation calculus 
artificial intelligence 

dell acqua pereira 
updating agents 
procs 
iclp workshop multi agent systems logic las cruces new mexico 

dell acqua sadri toni 
combining introspection communication rationality reactivity agents 
dix del cerro furbach editors logics artificial intelligence lncs berlin 
springer verlag 

dell acqua sadri toni 
communicating agents 
proc 
international workshop multi agent systems logic programming conjunction iclp las cruces new mexico 

eiter fink tompits 
framework declarative update specifications logic programs 
bernhard nebel editor proc 
th intl 
joint conf 
artificial intelligence ijcai seattle washington usa 
morgan kaufmann 
isbn 

fisher 
survey concurrent metatem language applications 
proceedings international conference temporal logic ictl lncs berlin 
springer verlag 

de boer van der hoek meyer 
formal architecture apl programming language 
proceedings international conference users berlin 
springer verlag 

de boer van der hoek ch 
meyer 
agent programming apl 
autonomous agents multi agent systems 

kowalski sadri 
logic programming multi agent systems 
annals mathematics artificial intelligence 
appear 

kowalski sadri 
unified agent architecture combines rationality reactivity 
proc 
international workshop logic databases lncs berlin 
springer verlag 

lifschitz 
answer set planning 
de schreye editor proc 
iclp conference pages cambridge ma 
mit press 
invited talk 

mulder treur fisher 
agent modelling concurrent metatem desire 
intelligent agents iv lnai berlin 
springer verlag 

rao 
agentspeak bdi agents speak logical computable language 
van de velde editors agents breaking away proceedings seventh european workshop modelling autonomous agents multi agent world lnai pages berlin 
springer verlag 

rao georgeff 
bdi agents theory practice 
proceedings international conference multi agent systems icmas pages san francisco ca june 

rao georgeff 
modeling rational agents bdi architecture 
fikes sandewall editors proceedings knowledge representation reasoning kr pages 
morgan kaufmann publishers san mateo ca april 

subrahmanian rgen dix thomas eiter sarit kraus robert ross 
heterogenous active agents 
mit press 
pages 

wooldridge 
semantic issues verification agent communication languages 
autonomous agents multi agent systems 
