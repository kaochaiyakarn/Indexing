designing implementing asynchronous collaborative applications bayou keith edwards elizabeth mynatt karin petersen mike spreitzer douglas terry marvin theimer xerox palo alto research center coyote hill road palo alto ca mynatt petersen spreitzer terry theimer parc xerox com asynchronous systems number unique challenges designers builders collaborative systems human technological perspectives 
asynchronous systems appealing allow users manipulate time space advantage users please constrained schedules locations 
style settings asynchronous systems deployed implications design infrastructure applications 
asynchronous systems accommodate groups largely autonomous users loosely connected time 
explores design issues collaborative systems general asynchronous systems particular 
examine reasons users opt asynchronous interaction implications choices designers collaborative infrastructure applications 
system called bayou designed support data sharing groups individuals working 
bayou infrastructure supporting distributed collaborative applications user interaction involves reading writing shared replicated database 
infrastructures collaboration bayou capable operating range connectivity parameters high bandwidth constant connectivity low bandwidth occasional unreliable connectivity case mobile users 
bayou true distributed system meaning single centralized location data stored weak consistency replicated data 
bayou provides mechanisms application builders describe semantic constraints applications system 
mechanisms allow applications supply data integrity constraints conflict detection resolution procedures data propagation policies 
section discuss characteristics asynchronous properties asynchronous desirable forms collaboration 
examine impact characteristics infrastructure application design necessity system supporting asynchronous informed properties 
asynchronous collaboration characterized degree independence collaborators 
particular collaborators working asynchronously typically little need frequent fine grained coordination typically need notified immediately changes shared artifacts working 
infrastructure called bayou designed support construction asynchronous collaborative applications 
bayou provides replicated weakly consistent data storage engine application writers 
system supports number mechanisms leveraging application semantics mechanisms applications implement complex conflict detection resolution policies choose level consistency stability see databases 
number applications built building bayou system examine take advantage bayou architecture 
keywords computer supported cooperative asynchronous interaction distributed systems bayou 
collaboration involves sharing sharing data artifacts context ultimately ideas 
cscw community categorized collaborative systems temporal aspect sharing applications users share thing time called synchronous 
applications users share thing different times called asynchronous 
synchronous applications typified systems shredit sasse highly interactive real time systems group possibly distributed users interact achieve result 
research collaboration exception electronic mail occasionally group editing studies focused new tools techniques support synchronous collaboration 
copyright association computing machinery 
published proceedings tenth acm symposium user interface software technology uist banff alberta canada 
october 
describe bayou infrastructure 
detail goals system works implications bayou application builders 
demonstrate bayou supports design asynchronous systems describe set applications built top bayou 
applications span range complexity interactivity presents set lessons infrastructure builders application writers 
characterizing asynchronous collaboration asynchronous collaboration typically characterized different place different time collaboration 
characterization simplistic 
asynchronous systems defining characteristic fact collaboration doesn happen time needn necessarily happen time 
distinction simply implications designers applications infrastructure 
asynchronous setting reason collaboration happen different times users need coordinate interactively need notified real time changes artifacts sharing 
certain collaborations may lend style interaction nature task practices participants state technology hand 
tasks suitable style require little interactive coordination sharing 
collaborators typically independently periods time little need instantaneous propagation results 
practices favor asynchrony characterized people exploiting time space convenience limited disruption 
practices may come setting time zones prevent collaborators working time instance personal desire minimization interruption letting telephone calls roll voice mail example 
technological constraints may favor asynchrony 
common examples include limited network bandwidth prevents fine grained timely sharing information disconnected laptop airplane separates collaborators 
independence key trait asynchronous 
asynchronous interaction collaborators operating shared set data context information artifacts largely independently 
need coordination communication collaboration lessened frequent synchronous 
example collaborative writing non computer mediated case typically involves fairly infrequent coordination 
authors largely independently necessary integrate results goals plans 
asynchronous tasks center shared artifact typically require participants immediately know changes artifact 
fact cases knowledge may detrimental disrupts individual efforts may incur coordination overhead operations may profitably deferred 
supporting asynchronous collaboration properties tasks practice technology lend asynchronous interaction point infrastructure traits support applications asynchronous tasks 
independence points need insulate collaborators actions collaborators able operate limited interference coordination 
particular able continue working regardless actions taken coworkers 
replication data useful means achieving independence 
replication separate actions users colleagues providing performance faulttolerance ability locally integrate changes releasing world large 
strongest forms independence ability completely disconnected network implication users 
desire support disconnected means users able view update add private replicas data network 
constraint requires support replicas weakly consistent 
required strong consistency parties connected times users lose degree independence 
eventual consistency replicas desirable users need control information shared users 
applications word processing software development require explicit control information propagation 
example case collaborative software development users wish ensure updates withheld complete coherent stable picture code available 
asynchronous interaction relies fact collaboration achieved face minimal coordination users support automatic resolution conflicts help reduce need coordination 
mechanically deal conflicts relieve uses burden hand coordination shared artifacts 
usable range applications conflict facilities able implement application specific policies deal conflicts 
succinctly applications able provide semantics resolve conflicts automatically 
section describe system called bayou satisfies requirements supporting asynchronous collaboration 
bayou overview bayou replicated weakly consistent storage system designed support collaborative applications distributed computing environments varying network connectivity 
typical example environment system mobile hosts may disconnect periods time connect low bandwidth radio networks connect occasionally expensive cellular modems 
model replication weak consistency allowing disconnection servers network designed support extreme scalability world wide applications 
bayou relies pair wise communications computers allows system cope arbitrary network connectivity 
bayou applications read write available replica need explicit coordination replicas 
replica eventually receives updates replicas chain pair wise exchanges data 
handle update conflicts naturally arise weakly consistent system bayou allows applications specify detect resolve conflicts 
addition bayou allows applications select specify number policies control read write operations get executed 
characteristics bayou suited building wide area asynchronous collaborative systems 
bayou system model bayou replication managed bayou servers 
server holds complete replica data 
data model provided current implementation bayou relational database data models 
chose relational model power flexibility 
particular naturally supports finegrained structured access data useful application specific conflict detection resolution mechanisms described 
higher level data constructs created terms data model provided relational database 
mentioned bayou replicas weakly consistent 
point time different servers may seen different sets updates hold different data databases 
weak consistency distinguishes bayou replicated systems designed cscw community 
collaborative distributed systems infrastructures fairly strong forms consistency usually pessimistic locking 
data modified locked ensure access serialized 
strongly consistent schemes ensure applications see consistent picture data 
support weakly connected applications scale global applications envisioned bayou 
lotus notes bayou applications free read update replicas locking 
bayou guarantees distributed storage system move eventual consistency imposing global order write operations providing propagation guarantees 
write carries information bayou server apply writes received correct order coordinating server 
bayou mechanisms application semantics feature distinguishes bayou previous replicated storage systems including ficus coda lotus notes applications impose semantics operations executed replica 
bayou reads writes simple operations supported databases 
include additional application supplied information ensures applications receive required level service system 
bayou mechanisms supporting application semantics fall categories application defined conflict detection 
application defined conflict resolution 
selection session guarantees 
selection committed tentative data 
replica selection 
selectable anti entropy data propagation policies 
conflict detection resolution 
semantic categories provided bayou write operation designed detect resolve conflicts arise weakly consistent system 
bayou write consists components dependency check update set merge procedure dependency check specifies set conditions hold update set applied replica database 
dependency check consists query performed database expected result query 
actual result matches expected result update set write applied database 
update set consists insertions deletions modifications tuples relation 
dependency check fails application specific conflict detected merge procedure executed 
merge procedure short fragment code high level interpreted language intended generate alternate update set applied database 
support conflict resolution meaning conflicts essentially handled application code code executed bayou infrastructure 
shall see examples discussion applications 
bayou differs systems coda ficus support application supplied conflict resolution bayou allows different resolution procedures associated individual write 
bayou provides applications finegrained control conflict handling 
furthermore conflict resolution procedure propagates write available server needed 
mechanisms automated conflict detection resolution important supporting asynchronous collaboration eliminate situations users required interact closely faced data conflicts 
bayou allows users act independently 
session guarantees 
session guarantees mechanism application establish required level consistency operations 
set bayou servers maintain data weakly consistent running instance application request view world maintain particular level consistency 
different applications may different requirements desired level consistency bayou supports range applications needs mechanism 
session abstraction sequence reads writes performed execution application session guarantees implemented constraining replicas may selected application session 
session guarantees supported bayou read writes ensures effects writes session visible reads session 
words reads restricted replicas database include previous writes session 
monotonic reads permits users observe database stays date time 
ensures reads database replicas containing writes effects seen previous reads session 
writes follow reads ensures traditional write read dependencies preserved ordering writes servers 
replica database writes session ordered writes effects seen previous reads session 
monotonic writes says writes follow previous writes session 
words write incorporated replica database copy copy includes previous writes session write ordered previous writes 
session guarantees described detail intended ensure atomicity serializability 
users collaborative applications session guarantees maintain self consistent view database may read write various potentially inconsistent replicas time 
stable vs tentative data 
bayou provides mechanism establishes write stable server 
new writes received server ordered write 
write stable server conflict detection resolution mechanisms executed means final effect database known 
hand write stable server deemed tentative 
tentative writes may need re executed writes earlier write stamps received server possibly changing effect database 
distinction tentative stable data important application perspective 
application designed notion confirmation commitment corresponds bayou notion stability 
example color codes graphical user interface indicate displayed item tentative may change conflict stable change due conflict 
bayou allows clients choose read database tentative data applied view database corresponds applying stable writes 
ability allows clients trade data availability assurance data stability applications tolerate data fully stabilized read immediately waiting stable 
stability equate consistency collaborative application reads results stable writes users perceive different sense consistency application reads tentative data 
replica selection 
important feature bayou provides application ability select replica operations 
ability select replicas life span application particularly important collaboration particular replica selected optimize certain communication requirements 
particular autonomous users disconnected laptop run server local replica laptop 
applications choose server ensuring access database 
applications operating behalf different users different machines connected replica enables application instances connected replica see updates soon occur 
essence applications strongly consistent synchronized fashion 
ability applications connect single replica split apart communicate different replicas support transitions synchronous asynchronous styles collaboration 
anti entropy policies 
anti entropy pair wise process servers replicas bring databases date 
anti entropy process servers exchange sets writes known server 
detailed description reconciliation protocol performance refer 
fully implemented bayou model supports client supplied anti entropy policies 
clients influence propagate changes database servers 
currently anti entropy performed automatically set interval manually requested application 
ability regulate updates propagated important applications collaborative software development users ensure coherent picture code base available specific times 
implementing collaborative applications bayou section describes range collaborative applications built building top bayou infrastructure 
applications shared bibliographic database group calendar system mobile electronic mail system completed 
bayou project coordinator system design stage 
final application higher level collaborative toolkit 
toolkit exists currently bayou 
investigating porting data storage portion toolkit bayou 
applications share characteristics highly asynchronous requiring cases synchronous updates users 
tolerate weakly consistent data benefit mechanized conflict detection resolution 
describe applications examine bayou benefits applications applications informed designs goals bayou 
collaborative bibliographic database multi user shared bibliographic database allows users add modify entries automatically generates citation keys refer entries 
system conceptually similar simpler bibliographic database systems 
asynchronous application purest form users system see users application 
provides awareness people application time 
consider situation alice bob maintain bibliographic database research project 
style interaction extremely asynchronous alice bob updating database time knowledge tool 
propagation visibility updates need occur immediately cases bob need know immediately alice adds new entry eventually need know duplicate entries 
words requirements system tolerant weak consistency require updates globally visible immediately 
uses simple algorithm generate human readable citation keys key letters author name postfix consisting digits publication year appended possibly extra character case multiple papers author year 
users add entries result citation key conflict detection resolution procedures change updates ensure keys unique 
scenario example albeit simple bayou system incorporate application specific integrity constraints 
application intelligence form bayou merge procedure ensures keys 
merge procedures detect merge duplicate entries database 
note conflicts resolved need manual user intervention coordination users mechanisms provided bayou 
weak consistency fact reads tentative writes users aware tentative citation keys may change stable 
user refers newly added citation key check back update stable ensure key changed 
users connected may opt read stable data 
users choose view tentative data maximize data availability connection poor 
example highly asynchronous application loose artifact sharing required 
automated conflict detection resolution user level coordination required 
words application excellent match bayou 
group calendar group calendar helps users manage shared resource case shared calendar 
common usage example conference room scheduling 
task characteristics users may expect conflicts negotiating shared resource 
awareness users critical scheduling policies provided application 
application data dates times structured allowing application detect conflicts 
task supports specifying alternative appointment times conflicts users occur 
typical scenario imagine jane uses group calendar schedule meeting conference room am am monday 
specifies wednesday time alternate 
working train kevin schedules project meeting conference room am am monday 
specifies monday pm pm alternate time 
kevin connects laptop network modifications propagate system 
writes transmitted database replicas conference room calendar conflict detected 
kevin receives notification due conflict conference room reserved alternate time specified 
bayou write resulting kevin input shown 
write specifies conflict alternative reservation update written error log 
group calendar interface items error log accessible enabling users determine reservation requests unsuccessful 
users decide want see stable writes calendar 
tentative writes color coded graphical interface shown 
group calendar applications provide policies minimize multi user coordination 
experience multiple people wanting reserve thing common users familiar strategy providing alternate requests 
advantages having wait approval users able disconnected network outweigh cost unresolved conflicts 
planned modifications bayou improve usability group calendar 
strategies server selection anti entropy help ensure tentative writes stabilize quickly 
second notification facilities failed requests remove need users confirm reservations 
mobile electronic mail electronic mail considered classical asynchronous collaborative application 
electronic mail different characteristics applications examined 
importantly little shared state participants sense message shared collaborator copy sent 
typically single copy message simultaneously shared collaborators 
messages copied collaborators traditional existing mail routing facilities state particular user mail folders profitably stored shared bayou 
implemented mail user agent called top 
supports mobile access electronic mail user access particular mail folders messages desktop machine office computer home laptop disconnected network 
replicas data stored multiple servers changes copy mail database eventually propagated copies 
bayou write update insert meetings am min project meeting kevin dependency check query select key meetings day start am expected result empty alternates pm foreach alternates check conflict empty select key meetings day date start time continue conflict schedule meeting time insert meetings date time min project meeting kevin break alternate acceptable insert am min project meeting kevin return bayou write group calendar group calendar application implemented replacing file handling layer interface bayou relational database 
messages mail folders represented sets tuples stored relations database 
user typically run bayou server containing mail machine mail read 
machine bayou server running disconnected network 
example laptop machine running bayou server taken road 
user machine access email 
changes mail database disconnected filing messages changing folder hierarchies renaming folders 
machine reconnected bayou servers states mail database maintained server rectified 
bayou anti entropy protocols cause servers move consistent state changes disconnected propagated office home machines 
note anti entropy protocols run low bandwidth connections including dial modems infrared simply exchange floppy disks 
inconsistencies arise changes multiple servers 
common example mail automatically incorporated desktop machine 
new information merged changes user laptop 
conflicts arise user inconsistent changes laptop office machine filing message different folders machine 
come play resolve inconsistencies may arise mail databases updates propagated 
push mail application semantics bayou system 
defines suite enforce particular policies system behave certain inconsistencies arise 
common inconsistencies include situations user renames folder machine continues file messages old name user deletes folder machine filing messages user messages different ways different machines 
enumerating possible choices user provides conflict policy ui allows users provide high level guidelines resolve conflicts 
interface allows users favor interpretation inconsistency 
conflict resolutions recorded special mail folder case user wishes know details 
shows screenshot conflict configuration interface 
bayou project coordinator bpc bayou project complex multi person effort requiring management shared artifacts 
artifacts bayou server binaries various application databases replicas laptops modems application security certificates users 
currently designing bayou project coordinator support management resources 
application primary functions 
maintains dependencies artifacts 
example system copies binaries servers client applications new laptops 
second provides awareness activities group members 
majority tasks involve project artifacts representation activities project members culled artifact 
application exercises bayou conflict detection resolution facilities ways 
consistency project artifacts maintained user intervention 
example development platforms kept date distributing updated server kernels bayou machines second bayou supports asynchronous interaction user intervention required 
example new bayou user added owners specific applications asynchronously approve creation security certificates new user 
third user interaction bayou servers triggers logging user activity 
creating dependency check fail evaluated specify activity information record 
bayou project coordinator information summarize activities project members 
consider scenario 
mike working past week modifications bayou server kernel 
checks changes ready bayou members modified kernel propagated machines 
time keith introduced new application approved set users application 
bpc distributes copies application binary security certificates set approved users 
conflict configuration interface time marvin traveling disconnected bayou machine 
reconnects machine network results mike keith transmitted machine 
observing performance differences behavior bayou server marvin investigates activity representations group members bpc 
noticing mike spent week working server longer surprised changes server performance 
marvin notices keith introduced new application 
decides experiment application writing email message keith initial impression 
bpc supports strong artifact sharing requiring explicit coordination users 
specifications dependencies project artifacts help maintain integrity system including propagation new project artifacts 
complexity bayou project bpc project members need constantly baby sit state project 
bpc demonstrates trigger exploration shared data 
case application summarizes changes data provide awareness activities project members 
strategy trigger self modifying data word processor automatically corrects spelling mistakes 
system application toolkit building collaborative applications 
higher level toolkit bayou sense provides functionality specifically designed support collaboration 
provides mechanisms awareness coordination multi user access data versioning 
basic paradigm follows history shared artifact allowed divergent collaborators multiple sites may see different versions artifact time 
collaborators may versions independently reconciling result periodically collaboration 
history artifact shared artifact mediate collaboration 
participants travel parallel timelines artifact changes artifact point history 
current implementation uses single centralized server coordinate client applications run collaborator machine 
investigating bayou lower level infrastructure give greater levels independence including ability disconnect network style collaboration favors 
implemented java remote method invocation rmi system 
created interface client side bayou apis 
porting bayou involves recoding data structures internally tuples suitable storage relational database 
conflict management system extended take advantage disconnected operation permitted bayou 
currently conflicts brought attention user potentially resolved soon occur 
consequently conflicts appear timeline user active 
bayou reimplementation timeline assured conflict free data associated committed 
timeline depends state tentative updates may received cause new level conflicts occur 
integrate updates timelines code essentially translate bayou database level conflicts level conflicts notify infrastructure new conflicts exist dealt 
believe facilities offered toolkits high level versioning awareness coordination true distribution weak consistency disconnected bayou complement combined 
summary project status asynchronous collaborative systems number challenging problems human design perspective technological perspective 
investigated number characteristics asynchronous design challenges addressed building infrastructure space 
asynchrony arises group practices technology simply nature tasks hand collaborators need independently 
human dynamics asynchronous implications designers infrastructure applications asynchronous collaboration 
system called bayou addresses issues 
bayou features support users writers asynchronous applications 
summarize features bayou feel important builders users asynchronous applications 
efficient anytime access data 
bayou supports weakly consistent replication 
servers synchronize pair wise fashion supporting range practices 
example home office machines synchronized laptop transported locations home office machines need communicate directly 
feature handle reading mail location exactly user interface disconnected 
uses feature separation support intrinsically independent task 
automatic management conflicts 
dependency checks provide way applications define constitutes conflict establish procedures take resolve conflicts occur 
bayou applications resolve conflicts automatically reducing need user intervention coordination enhancing independence 
current bayou applications feature provide multiple resolution options users 
allows users set general conflict resolution policies 
group calendar lets users specify fallback times calendars event conflict 
self consistency awareness data status 
session guarantees support seamless transitions servers 
clients choose see progression activity move back forth older newer states 
example applications facility 
bayou provides means applications detect status data database tentative committed 
information user number forms 
group calendar color mark entries longer change 
interface highlights messages conflict need attention users 
weakness current implementation notify applications users data changes applications poll database detect changes 
flexible data model 
bayou provides robust flexible data model applications 
system supports granularity shared data 
writers modify field tuple time calendar entry entire sets tuples new versions source code mail folders 
relational data model may natural fit applications model generalized storages types structured data fairly easily 
fluid transition synchronous asynchronous modes operations 
multiple collaborators connect distinct servers typical asynchronous operation connect server tighter synchronous operation 
users group calendar application typically connect centralized bayou server quickly share operations entered office diminishing opportunity conflicts 
users connect local servers disconnected access modify calendars 
number asynchronous collaborative applications built designed bayou infrastructure features 
applications span range interaction styles terms amount artifact sharing amount coordination support provide users 
bayou architecture outlined implemented runs sun running sunos running linux 
query language read operations dependency checks subset sql 
language tool command language tcl augmented sql 
research expect exploration design applications transition synchronous asynchronous modes operation raise interesting questions interface infrastructure perspectives 
key requirement supporting synchronous applications ability applications request notifications data server changes 
current implementation clients poll server receive notification changes construction synchronous applications difficult 
issues planning explore context bayou infrastructure include partial replication policies choosing servers anti entropy server selection policies applications fine grain access control 
immediate design focus supporting partial replicas contain subsets database 
partial replication important applications run laptops pdas raises number difficult problems ranging characterizing partial replica resolving conflicts consistent manner partial replicas 
currently examining design issues surrounding porting entire bayou system java enhance portability ease integration applications 
system probably operate replication layer top existing relational database management system 
experimenting wireless connectivity servers clients running laptop metricom wide area radio network point point infra red connections laptops 
design development bayou effort involving number people 
alan demers carl hauser brent welch invaluable participants earlier stages bayou design process 
mark weiser craig mudge john white managers computer science lab supportive 
baecker posner user centered iterative design collaborative writing software 
proceedings conference human factors computing systems 
amsterdam netherlands acm 

pp 

bly harrison irwin media spaces bringing people video audio computing environment 
communications acm vol 
january pp 

conklin hypertext tool exploratory policy discussion 
proceedings conference computer supported cooperative cscw portland acm pp 

demers greene hauser irish larson shenker sturgis swinehart terry epidemic algorithms replicated database maintenance proceedings sixth symposium principles distributed computing vancouver bc canada august pp 

dourish bly supporting awareness distributed workgroup 
proceedings acm conference human factors computing systems chi monterey ca acm pp 

edwards mynatt techniques autonomous collaboration 
proceedings acm conference human factors computing systems chi atlanta ga acm pp 

group structures computer support field experiment 
proceedings acm conference computer supported cooperative portland acm 
kraut computer mediated communication intellectual teamwork field experiment group writing 
proceedings acm conference computer supported cooperative los angeles ca acm pp 

golding long wilkes distributed bibliographic database system 
proceedings winter usenix conference san francisco ca january pp 

greenberg real time groupware distributed system concurrency control effect interface 
proceedings acm conference computer supported cooperative chapel hill nc acm oct 
pp 

grief sarin data sharing group computer supported cooperative book readings irene grief ed 
san mateo ca morgan kaufmann pp 

heidemann page guy popek primarily disconnected operation experiences ficus proceedings second workshop management replicated data monterey ca nov 
jr greif replicated document management group communication system 
proceedings acm conference computer supported cooperative portland oregon september 
kistler satyanarayanan 
disconnected operation coda file system 
acm transactions computer systems february 
lola olson gary shredit shared electronic workspace technical report cognitive science machine intelligence laboratory university michigan 
metricom www metricom com 
morris issues design computer support authoring commenting 
proceedings conference computer supported cooperative los angeles ca acm pp 

olson olson carter group editor changes character design meeting outcome 
proceedings conference computer supported cooperative toronto ontario acm pp 

ousterhout tcl embeddable command language 
proceedings usenix conference winter 
petersen spreitzer terry theimer demers flexible update propagation weakly consistent replication 
proceedings sixteenth acm symposium operating system principles sosp saint malo franco october 
satyanarayanan kistler kumar okasaki siegel steere coda file system distributed workstation environment 
ieee transactions computers april 
terry theimer petersen demers spreitzer hauser managing update conflicts bayou weakly connected replicated storage system 
proceedings fifteenth acm symposium operating systems principles sosp cooper mountain colorado december pp 

terry demers petersen spreitzer theimer welch session guarantees weakly consistent replicated data 
proceedings international conference parallel distributed information systems pdis austin texas september pp 

