generic scheme design efficient line algorithms lattices valtchev mohamed missaoui universit de montr succ 
centre ville montr qu bec canada partement informatique ing qu bec canada 
major issue large dynamic datasets processing small changes input correspondingly small rearrangements output 
motivation design incremental line algorithms lattice maintenance amounts gradual construction final lattice repeatedly adding rows columns data table 
attempt put incremental trend strong theoretical grounds generic algorithmic scheme detailed analysis lattice transformation triggered row column addition underlying sub structure 
task scheme suggest efficient implementation strategy put lower bound worst case complexity 
incremental scheme complex best batch algorithm 
formal concept analysis fca studies lattice structures built top binary relations called concept lattices galois lattices 
matter fact underlying algorithmic techniques increasingly resolution practical problems software engineering data mining information retrieval 
study investigates new algorithmic problems related analysis volatile data sets 
particular case line incremental lattice algorithms described basically maintain lattice structures insertion new row column binary table 
binary relation corresponding lattice new row column lattice corresponding augmented relation computed 
existing online algorithms designed practical concerns mind efficient handling large sparse binary tables prove inefficient data sets get denser 
explore new nodes respect isomorphic generators new nodes works guideline completion structural properties underly design generic completion scheme sequence steps separately examined efficient implementations 
offspring scheme describe novel line algorithm relies insights generator cardinality reasoning bringing cost lattice construction subsequent completions current lower bound batch construction 
starts recalling basic fca results section fundamentals lattice construction section 
structure generator new initial target lattice respectively examined section 
generic scheme lattice completion sketched task scheme implementation directions discussed section 
presents effective algorithm lattice maintenance clarifies worst case complexity section 
formal concept analysis background fca studies partially ordered structure known names galois lattice concept lattice induced binary relation pair sets objects attributes 
definition 
formal context triple sets binary incidence relation context see left objects denoted numbers attribute small letters 
functions summarize context related links objects attributes 
definition 
function maps set objects set common attributes dual attribute sets example furthermore compound operators closure operators respectively 
induces family closed subsets called respectively bijective mappings families 
couple mutually corresponding closed subsets called formal concept 
definition 
formal concept couple called extent intent concept 
bcd concept efh 
set ck concepts context partially ordered intent extent inclusion 
denoted separator free form sets stands abc table left ab 
ac bcd efh abcd abcdefgh fig 

left binary table object 
right hasse diagram lattice derived theorem 
partial order ck complete lattice joins meets follows xi yi xi yi xi yi xi yi 
hasse diagram lattice drawn shown right hand side intents extents drawn sides node representing concept 
example join meet ac abcd respectively 
constructing lattice efficiently variety efficient algorithms exists constructing concept set entire concept lattice context see detailed study 
interested incremental algorithms opposed batch ones consider groups separately 
batch approaches construction galois lattice may carried different levels output structuring 
may look set concepts context hierarchical organization problem compute concepts context find set concepts early fca algorithm suggested ganter particular order concepts helps avoid computing concept 
greater interest algorithms discover infer lattice order construct entire lattice complex problem may formalized follows problem compute lattice context find lattice corresponding batch algorithms compute lattice problem proposed bordat raynaud 
algorithm relies structural properties precedence relation generate concepts appropriate order 
concept algorithm generates upper covers means concept generated number times corresponds number lower covers 
raynaud suggested efficient procedure constructing family open sets showed may construct lattice see section 
known difficulty estimating complexity lattice construction algorithms uniquely respect size input data 
known bound trivial number subsets number concepts depending dimensions binary relation size object set attribute set binary relation 
worse proven problem estimating size complete 
reasons admitted include size result number concepts complexity estimation 
factor worst case complexity expression classical algorithms solving compute concept 
algorithm bordat assessed complexity size binary relation number positive entries taken account 
raynaud helped reduce complexity order problem lk 
incremental approaches line incremental algorithms construct lattice maintain integrity insertion new object attribute context problem compute lattice context lattice object find lattice corresponding 
obviously problem compute lattice may polynomially reduced compute lattice iterating compute lattice entire set 
words extended incremental method construct lattice starting single object gradually incorporating new object oi arrival lattice li context oi time carrying set structural updates 
godin suggested incremental procedure locally modifies lattice structure insertion new concepts completion existing ones deletion redundant links keeping large parts lattice untouched 
basic approach follows fundamental property galois connection established families ca closed intersection 
insertion process aimed integration li concepts intents correspond intersections oi intents ca additional concepts called new concepts inserted lattice particular place new concept preceded specific counterpart initial lattice called generator set generators denoted 
categories concepts li distinguished modified concepts correspond intersections oi members ca exist ca remaining set concepts initial lattice called old unchanged 
final lattice li old concepts preserve characteristics intent extent upper lower covers 
generators experience changes information content intent extent new concept added upper covers 
modified concept extent augmented new object set lower covers generator replaced corresponding new concept 
sections shall stick intuitive terminology shall put formal ground distinguishing sets concepts initial lattice counterparts final respectively 
example insertion object 
assume lattice induced object set see right consider new object 
set unchanged concepts elements set modified generators respectively 
result operation lattice 
set new concept intents cd fh 
incremental algorithm lattice construction suggested carpineto romano 
generalized incremental approach godin :10.1.1.58.1229
purpose applied structural results lattice assembly framework defined 
particular showed incremental problem compute lattice special case general lattice assembly problem assembly lattice 
theoretical framework clarifies restructuring involved resolution ac cd fh bcd efh abcd abcdefgh fig 

hasse diagram concept galois lattice derived 
compute lattice enables design procedures explore part lattice see section 
section recall basic results framework 
theoretical foundations space limitation reasons key definitions results help understanding topical developments provided section 
set mappings linking lattices mapping sends concept concept intent works way round respects extent preservation modulo 
mappings send concept maximal element class respectively 
definition assume mappings computed 
mappings depicted 
observe join preserving order embedding meet preserving function idc 
mappings underly necessary definitions skipped sets counterparts replace intuitive descriptions far 
correspondence operator computed respective context application domain 
fig 

lattices related mappings key result states exactly maximal concepts equivalence classes induced function defined 
isomorphic prime filter generated minimal concept including consequently meet semilattice 
precedence order evolves precedence follows 
new concept generator lower cover possible lower covers cov lay 
upper covers concepts correspond upper covers generator semi lattice 
set may extracted set actual upper covers cov considering maxima respective classes values cov sigma keeping minimal values values 
modified concept lower covers differ lower covers possible inclusion concepts ii removal members 
facts summarized follows property relation obtained follows min generic scheme incremental lattice construction structural results previous paragraphs underlie generic procedure object transforms principles method generic procedure solving compute lattice may sketched main tasks partition concepts classes comput ing intent intersections ii detection maxima class test status modified generator iii update modified concepts iv creation new elements computation intent extent computation lower upper covers new element vi elimination obsolete links generator 
tasks executed previously indicated order complete data structure representing lattice structure representing shown algorithm 
procedure compute lattice lattice object put class find max intent put put extent extent new concept extent put connect upper cover generator compute upper covers cov disconnect algorithm generic scheme insertion new object concept galois lattice 
procedure algorithmic scheme generalizes existing incremental algorithms sense specifying full scope done order tasks carried 
exact way particular algorithm instantiate scheme deserves clarification 
hand tasks remain implicit particular method 
task explicitly described methods literature lattice association rule mining 
incremental methods compute values function concept preliminary step detection class maxima 
hand large space combining subtasks larger steps major existing algorithms 
example algorithms perform sub tasks simultaneously algorithm separates problem stages tasks iii carried followed tasks iv vi 
paragraphs discuss various realizations subtasks 
partitioning classes incremental algorithms explore lattice time top breadth traversal lattice graph 
classes usually directly manipulated 
lattice node status corresponding concept class considered 
classes explicitly considered methods described designed simpler problem update respectively easily extended class methods compute lattice methods apply advanced techniques order avoid traversal entire lattice looking class maxima 
method skips entire class induced empty intersection 
small dense contexts void far largest class skipping result substantial performance gains 
alternative strategy consists explore class convexity see property order partially examine class 
purpose bottom partial traversal lattice implemented non maximal member class examined method jumps straight maximum class 
detection class maxima top breadth traversal lattice eases direct computation class maxima constructing class explicitly 
traversal may summarized gradual computation functions detect concept produces particular intersection int intent time 
task method godin relies global memory intersections met 
approach efficiently implemented trie structure helps speed lookups particular intersection see algorithms 
suggest technique exclusively locally available information lattice node 
technique takes advantage convexity classes property classes convex sets short non maximal element upper cover say status established looking upper covers 
monotonous function entails set inclusion tested set sizes 
computation upper covers new concept generator connecting new concept lattice requires upper lower covers 
top breadth traversal allows focus limited upper covers lower covers done free 
time created upper covers processed available lookup link creation 
straightforward technique upper cover computation amounts looking successors preceded successor 
sophisticated technique uses property set difference extents concepts called face concepts literature 
property states concept precedes concept lattice iff object set difference extent extent closure set extent extent property iff 
easily checked intersections concept intents subsequent comparison set cardinalities 
detect upper covers concept needs check closures select successors satisfy property 
leads complexity concept comes factor cost set theoretic operations intents 
cut complexity task suggest method improve practical performances 
summarized follows see details 
considering potential successors new concept select subset candidates cov images upper covers generator 
candidates necessarily strict subset convexity classes monotonicity insure inclusion upper covers cov min set 
concepts cov coincide minima candidates set computed direct application basic property formal concepts stating extent faces members cov pairwise disjoint 
property cov candidates cov upper cover extent elements candidates cov filtered set inclusion tests candidates 
efficiently avoid testing possible couples buffer attributes cumulate faces valid upper covers met far 
provided candidates listed order compatible smaller candidates met larger ones simple intersection buffer test candidate un upper cover 
filtering strategy eliminates non minimal candidates discarding copies concept upper covers may belong class 
computation essential upward detection class maxima straightforward modified concepts take values intent generators take respective new concept unchanged concepts simply inherit appropriate value upper cover belongs class assess cost operation may observe cov operations needed outer degree lattice taken oriented graph 
operations extent intersection union ordered sets objects concept extents takes linear time size arguments 
fixed number operations executed member candidates total cost order kd 
complexity order remains comparable factor time strictly smaller sparse datasets difference significant 
obsolete link elimination modified immediate successor generator disconnected necessarily upper cover corresponding new element property min cov 
set cov required computation cov additional cost eliminating list upper covers done computation candidates 
conversely deleting list lower covers list done free extra effort replacing 
efficient instantiation scheme algorithm takes lattice new object outputs updated lattice data structure represent initial resulting lattices 
values supposed stored generic structure allowing indexing concept identifiers structure 
concept set sorted linear extension order required top traversal primitive sort line 
loop lines examines concept establishes status comparing maximal upper cover line 
variable new max 
initialized upper cover maximizing line new max eventually points concept intent equals 
class maxima divided modified set assumed known generators line 
modified concept lines extent updated 
set value new max 
generators give rise new concept line 
values upper covers picked candidates list line filtered minimal concepts min closed line 
minima connected new concept modified disconnected generator lines 
correct maximum class set line new concept added lattice line 
loop value stored 
procedure add object lattice object sort new max argmax cov new max intent extent extent modified new max new concept extent generator candidates cov min closed candidates new link drop link new max new max algorithm insertion new object galois lattice 
example 
consider situation example 
trace algorithm table provides intent intersection image concept 
concepts underlined avoid confusion counterparts 
cat 
cat 
cat 
mod 
mod 
mod 
mod 
mod 
old cd gen mod 
fh gen cd old gen gen gen illustrate way algorithm proceeds consider processing concept 
value candidates contains images upper covers candidates fh 
obviously intents big maximum precisely generator 
new concept upper covers concepts candidates incomparable 
link removed 
complexity issues split cost single object addition factors cost traversal lines algorithm cost restructuring processing class maxima lines 
sorting concepts linear extension requires comparison intent sizes bound done 
proper traversal takes concept examinations 
factor 
second factor split modified generator costs cost linear size lines may executed constant time sorted extents ignored 
generator related cost factor remaining factor cost creating properly connecting single new concept 
dominant component cost lattice order update lines mentioned earlier 
consequently global restructuring overhead 
leads worst case complexity single insertion lower bound complexity compute lattice see :10.1.1.58.1229
assessment entire lattice construction incremental updates delicate requires summing insertions cost steps depends parameters intermediate structures 
sum high level complexity factors separately 
total cost lattice traversals bound times cost expensive traversal kl 
total cost lattice restructuring turn bound number new concepts sum li times maximal cost new concept processing 
factor exactly concept final lattice created exactly means restructuring factor construction leading global complexity class 
figures indicate complexity compute lattice reduced series compute lattice remains class best known lower bound batch methods 
study motivated need efficient algorithms incremental lattice construction 
complete characterization substructure integrated initial lattice insertion object attribute context 
show relevant structural properties support design effective maintenance methods previous algorithms avoid redundant computations 
guidelines design provide generic algorithmic scheme states limits minimal needs done restructuring 
concrete method instantiates scheme proposed worst case complexity ml function puts new smaller upper bound cost problem compute lattice surprisingly applied batch method lattice construction new algorithm shows best known theoretical complexity lk achieved algorithm 
stage study currently examining pragmatic benefits scheme practical performances specific scheme instantiations 

ordre classification alg bre 


bordat 
calcul du treillis de galois une correspondance 
math matiques sciences 
carpineto romano 
lattice conceptual clustering system application browsing retrieval 
machine learning 
ganter 
basic algorithms concept analysis 
preprint technische hochschule darmstadt 
ganter wille 
formal concept analysis mathematical foundations 
springer verlag 
godin mili 
building maintaining analysis level class hierarchies galois lattices 
proceedings oopsla washington dc usa special issue acm sigplan notices pages 
godin missaoui 
incremental concept formation approach learning databases 
theoretical computer science 
godin missaoui 
incremental concept formation algorithms galois concept lattices 
computational intelligence 
ob 
algorithms construction set concept line diagram 
preprint math technische universit dresden june 
raynaud 
fast algorithm building lattices 
information processing letters 
valtchev missaoui :10.1.1.58.1229
building concept galois lattices parts generalizing incremental methods 
stumme editors proceedings iccs volume lecture notes computer science pages stanford ca usa 
springer verlag 
valtchev missaoui 
framework incremental generation frequent closed itemsets 
discrete applied mathematics submitted 
valtchev missaoui godin 
generating frequent itemsets incrementally novel approaches galois lattice theory 
journal experimental theoretical artificial intelligence 
valtchev missaoui 
partition approach building galois concept lattices 
discrete mathematics 
