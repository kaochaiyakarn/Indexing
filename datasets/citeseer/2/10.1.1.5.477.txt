universiteit van amsterdam ias intelligent autonomous systems ias technical report ias uva pursuit domain package kok nikos vlassis informatics institute faculty science university amsterdam netherlands pursuit predator prey domain widely environment test single multiagent systems techniques 
consists grid world types agents predators prey move 
goal predators capture prey quickly possible 
report describes pursuit software package implement test predator behavior scenarios having worry details involved domain 
describe programs provided package pursuit main program pursuit monitor visualization pursuit logplayer playback tool agent skeletons 
pursuit domain package contents contents working pursuit domain starting environment 
starting agents 
implementing agents 
starting logplayer 
start script 
pursuit server world 
episode cycles 
agent protocols 
initialization 
sensory information 
movement commands 
communication commands 
referee commands 
monitor monitor protocols 
initialization 
server parameters 
world information 
user interaction 
logplayer configuration parameters intelligent autonomous systems informatics institute faculty science university amsterdam kruislaan sj amsterdam netherlands tel fax www science uva nl research ias corresponding author kok tel science uva nl www science uva nl copyright ias section pursuit predator prey domain introduced benda widely testbed single multiagent systems techniques 
pursuit domain consists discrete grid world types agents move predators preys 
shows example world predators preys 
world goal predators capture prey 
cases domain studied predators prey moving randomly adjacent cells standing predefined probability predators able catch 
predator prey graphical view world predators preys 
blue cells resemble visible range predators 
variations original description studied years tan haynes sen korf 
discuss important parameters related variations parameters taken stone veloso 
capture condition original setting prey captured adjacent cells occupied predators 
possible capture criteria surrounding prey predators occupying cell prey 
visible range denotes number cells predator receives sensory information 
preys predators outside range visible 
communication important variation predators allowed communicate way able inform predators strategies sensory findings 
legal moves originally agent allowed move adjacent cells 
possible variation include diagonal movements 
grid size size world changed di erent sizes 
furthermore world planar borders edges toroidal 
case agents directly move side grid side 
pursuit domain package simultaneous sequential movement variation indicates agents move time 
prey movement variations prey move randomly 
variations allow prey sophisticated actively try escape capturing 
practical course multiagent systems distributed ai pursuit domain package spring 
package parameterized mentioned variations possible easily change characteristics domain 
remainder report describes package 
start section short overview di erent components descriptions usages 
describe individual components detail 
section describes server details client protocols section discusses monitor display world 
section gives description logplayer allows replay recorded games 
section 
working pursuit domain pursuit package consists components pursuit server core program package 
models complete environment handles connections client programs 
monitor monitor display current world state pursuit server 
monitor started creates connection server starts receive information current world state 
monitor visualizes information 
agents agents predators prey create connection server start receive sensory information 
furthermore sent actuator commands server causes world updated accordingly 
logplayer related option turned pursuit server logs subsequent world states file 
logplayer replay contents file 
monitor needed visualize current contents logplayer 
remainder section explains mentioned components create client programs 
starting environment pursuit server core program package models complete world handles communication connected clients 
started single command pursuit 
started waits client programs connection 
pursuit server graphical interface visualize current state world monitor started 
done pursuit monitor command 
grid displayed predators prey 
information course www science uva nl vlassis teaching package open source downloaded www science uva nl software 
see accompanied files installation details 
section working pursuit domain client structure continue true continue true receive message server message quit continue false message starts see empty string send communication message message starts hear message starts send action send movement command server algorithm client structure shows response di erent server messages 
starting agents agents predators preys started connecting server process 
skeleton implementation available predator prey agent 
takes care communication server defines callbacks functions behavior agent defined predator started command predator prey started prey command 
possible start multiple predators prey limit number agents size grid 
programs started corresponding agents appear monitor grid predators displayed blue circles prey red triangles 
game started pressing button selecting continue option mouse menu appears mouse clicked monitor 
predators prey start move defined behavior 
pursuit server automatically detects prey caught remove grid 
prey caught server gathers statistics episode places prey predators randomly grid starts new episode 
implementing agents agent receives sensory information environment relative position information agents perform actions move world communicate agents coordinate actions 
order happens fixed displayed basic structure client implementation algorithm 
information protocol server client agents see section 
di erent callback methods defined simple agent implemented order specify behavior agents 
method called received visual information argument 
string contains relative position information visible prey skeleton clients available java python programming languages long support socket communication 
pursuit domain package predators 
default method parses incoming string prints position information visible agents screen 
create model world seen agent 

method specify movement command agent 
created command sent server 
default method returns random movement command 

method called allowed communicate agents 
case returned string non empty sent server broadcasts agents communication option turned 
restriction applies communicated string length maximum characters 

method called communication message arrives agent 
starting logplayer corresponding option turned pursuit server stores information current game output file 
logplayer started logged file argument logplayer game log 
starts small window standard playback tools play rewind forward jump specific cycle episode cycle recorded game 
order visualize contents logplayer separate graphical interface started 
done starting monitor exactly way normal game 
start script start script start sh provided starts relevant programs 
default starts pursuit server monitor agents predators prey 
extended easily start di erent number agents 
pursuit server pursuit server core package 
maintains current world state handles communication agents 
section describes server represents world time discretized episodes cycles discusses agent protocols 
handle communication server clients 
server uses protocol provide agents information surroundings clients inform server intended action 
world world consists grid cells 
cell distinct position denoted xand coordinate 
cell lower left corner labeled 
axis horizontal axis axis vertical axis 
upper right corner labeled position 
agents move world adjacent cells 
world toroidal meaning agents move grid directly side grid 
server processes incoming actuator commands clients update positions field 
resulting state checked special cases section pursuit server prey caught prey caught specified capture condition prey removed world 
predefined capture criteria predator prey share cell 
prey surrounded predators 
predators located north south east west prey 
prey surrounded predators 
predators occupy surrounding cells prey 
previous turn predators surrounding prey moved location prey 
prey caught removed world 
collision agents type share cell collision occurs 
case collision agents penalized placed random positions field 
case collision predators agents colored di erently cycle 
penalty predator moves location prey allowed capture criteria predator penalized placed random position field 
note case holds fourth capture condition agent moves location prey previous turn surrounding prey predator 
preys captured episode ended number cycles recorded 
prey predators placed random positions new episode starts 
episode cycles time divided cycles 
cycle consists di erent stages prey predators allowed communicate server 
algorithm displays stages server uses 
cycle visual messages communicated prey prey time step ms send communication message server subsequently broadcasted prey period elapsed server communicates send action episode nr cycle nr message prey indicate communication period send movement command server 
time step ms elapsed sending period prey field updated received movement commands 
turn predators procedure repeats 
predators move simultaneously preys moved simultaneously 
agent protocols agent controlled separate computer process 
client process creates socket connection server 
connection created server waits initialization message client 
message received agent starts receive sensory information server send movement communication messages executed server 
messages obey strict protocol discussed 
time step defined server immediately continues agent messages received 
value large amount episodes performed learning tasks 
note communication turned stage skipped 
pursuit domain package preys captured cycle send visual information preys wait time step ms receive process communication messages prey send message send action episode nr cycle nr prey wait time step ms receive movement commands prey update field check collisions send visual information predators wait time step ms receive communication messages predators send message send action episode nr cycle nr predators wait time step ms receive movement commands predators update field check collisions check prey captured algorithm description di erent stages server cycle 
initialization socket connection created agent send initialization message format init prey predator argument specifies process represents prey predator agent 
correct initialization message server returns message init ok starts sending sensory information handle incoming messages 
case incorrect message server reply 
sensory information initialization agent receives sensory information objects world 
information format see obj info obj info prey predator value represent relative distance direction respectively 
predator located position receives visual message see predator prey prey case world fully observable 
objects located visual message relative distance object smaller equal distance defined visible distance option see appendix 
default value parameter predator observe agents receive message see 
value corresponds fully observable world 
movement commands agent influence environment sending movement commands server 
server updates positions agents executing received action 
movement commands format section monitor move north south east west northeast northwest southeast southwest single argument specifies direction agent wants move case agent wants remain current location 
default case diagonal movement commands ignored agents move north south east west stand 
communication commands communication turned agents communicate 
message sent server broadcasts message agents 
communication message sent server format say string string sequence ascii characters maximum characters 
agents immediately receive message format hear string referee commands special situations referee sends specific messages agents 
happens situations episode ended 
message referee episode ended sent agents 
agents collide 
message referee collision sent collided agents 
predator occupies cell prey capture condition violated 
case message referee penalize sent penalized predator 
monitor monitor displays current situation world statistics episode cycle number average capture time total number collisions penalties 
monitor separate program socket connection server 
update server sends information agents statistics monitor 
monitor displays graphically depicted 
monitor protocols monitor receives messages server contain information world send commands influence server behavior 
syntax messages explained 
initialization socket connection created monitor send initialization message init monitor command received server returns init ok 
message immediately followed server parameter message 
pursuit domain package server parameters server parameters important monitor communicated directly initialization confirmation 
message format server param visible distance rows columns represent values corresponding server parameters 
world information message gives information current world information format world stats epis nr cycle nr avg capture time pen nr coll nr prey predator nc variables stats resemble respectively episode cycle number average capture time total number collisions 
number agent specifies state agent default case case collision case captured prey 
user interaction possible monitor send commands server influence game 
commands initiated pressing specific buttons keyboard selecting item mouse menu appears user clicks monitor 
di erent messages format 
monitor continue 
start resume playing 
select continue option mouse menu press button 
monitor pause 
pause game 
select pause option mouse menu press button 
monitor quit 
quit server 
select quit option mouse menu press button 
monitor step 
switch step step play 
means server advances cycle waits call step step 
select step step option mouse menu press button 
monitor speed 
option decreases time waited advancing cycle ms lower ms 
message sent button pressed 
monitor speed 
option increases time waited advancing cycle ms message sent button pressed 
section logplayer logplayer logplayer plays back logged games 
server started log option turned human readable file created contains received commands clients complete world information cycle 
logplayer parses file stores relevant information internally 
furthermore provides interface control options play logplayer cycles forward stored frames 
step logplayer moves forward frame stops 
play backward logplayer cycles backward stored frames 
step backward logplayer moves backward previous frame stops 
logplayer stops playing waits action 
jump logplayer jumps specified episode cycle number 
logplayer sends world information current displayed frame format server connected monitors 
described pursuit package successfully course multiagent systems distributed ai university amsterdam spring 
software implementation pursuit called predator prey domain 
aspects package configurable possible test di erent variations problem 
benda benda jagannathan 

optimal cooperation knowledge sources experimental investigation 
technical report bcs boeing advanced technology center boeing computing services seattle washington 
haynes sen haynes sen 

evolving behavioral strategies predators prey 
sen editor ijcai workshop adaptation learning multiagent systems pages montreal quebec canada 
morgan kaufmann 
korf korf 

simple solution pursuit games 
working papers eleventh international workshop dai pages geneva switzerland 
stone veloso stone veloso 

multi agent systems survey machine learning perspective 
autonomous robotics 
tan tan 

multi agent reinforcement learning independent vs cooperative agents 
proceedings th international conference machine learning pages 
pursuit domain package configuration parameters server monitor configured di erent parameters 
table table list configurable parameters server monitor respectively 
di erent configuration parameters passed server configuration file example pursuit conf monitor conf 
provide location file argument conf conf file program started option default description columns number columns rows number rows port connection port server machine time step time ms phase cycle nr episodes number episodes program halts episode wait time ms waited episode visible distance defines far agents see fully observable allow comm false allow communication allow diagonal prey false prey allowed move diagonal allow diagonal pred false predator allowed move diagonal log obj info true indicates log position info log obj file game log output file log info automatic start false start server automatically delay output file stdout file write episode times capture method method capture prey see earlier penalize penalize involved agents table server parameters option default description window height height window pixels window width width window pixels host localhost host server running port connection port server machine show number false display agents numbers show visible range true display agents visible range background color hexadecimal value background color grid color hexadecimal value grid color prey color hexadecimal value prey color predator color cc hexadecimal value predator color caught color cc hexadecimal value caught prey color collision color cccc hexadecimal value collided pred 
color table monitor parameters ias reports report series ias technical reports 
series editor stephan hagen science uva nl 
series titles appeared ben gelsema 
aircraft classification estimated models radar scattering 
technical report ias uva informatics institute university amsterdam netherlands january 
rene van der gelsema frans groen 
fast translation invariant classification hrr range profiles zero phase representation 
technical report ias uva informatics institute university amsterdam netherlands january 
bouma 
interface specification implementation internals program 
module geometric algebra 
technical report ias uva informatics institute university amsterdam netherlands december 

computer graphics geometric algebra perspective 
technical report ias uva informatics institute university amsterdam netherlands august 
kok vlassis 
modeling teammate behavior 
technical report ias uva informatics institute university amsterdam netherlands august 
verbeek vlassis 
generative self organizing map probabilistic generalization kohonen som 
technical report ias uva informatics institute university amsterdam netherlands may 
ias technical reports available download ias website www science uva nl research ias publications reports 
