processing xml documents prolog dietmar university dept computer science am germany informatik uni de 
show semi structured data xml data represented queried nicely logic programming environment 
introduce document object model xml documents prolog call eld notation 
simpli es dealing semi structured data accessing component prolog fact argument position possible access component attribute name access nested components complex path tree expression 
implemented library predicates dealing xml data eld notation done practical case studies extracting transforming information xml documents declarative style 
relevant information located automatically document extraction process robust certain changes document structure time 
keywords 
xml semi structured data prolog query languages deductive databases query languages object oriented databases investigated years cf query language oql language lorel logic language logic successor languages 
emergence xml goal adapt query languages processing xml data cf 
xql xml ql xml query known quilt xquery extended style sheet language xsl pattern language xcerpt 
xml query languages including emerging standard xml query path language xpath 
specialized xml databases developed 
xml known self describing data format considered world wide web 
xml data considered semi structured data schema dtd unknown frequently changing 
goal semantic web add logic component reasoning web cf 

ruleml initiative working standard representing rule systems web 
logic programming language prolog handle symbolic computations complex tree structured objects nicely reasoning semi structured data 
characteristics prolog important consider representing relational semi structured data prolog 
usual representation relation name predicate components tuple arguments 
relation stock attributes index wkn date value represented prolog facts form stock index wkn date value 
schema information attribute names stored prolog facts 
implications representation firstly selection attribute values argument position problematic arguments 
secondly update components structure stock assignment stock value possible creating new structure stock assignment variables non destructive prolog 
rest organized follows section de ne eld notation representing xml data terms logic programming environment show data accessed nicely avoiding mentioned problems 
section extensible library processing data eld notation introduced semantics described brie practical applications reported section particular shown xml data eld notation extracted html les 
complex objects prolog syntactically xml prolog nested term structures show xml structures represented queried prolog 
xml representing complex objects cf 
gives way handling complex objects prolog deductive databases 
xml objects field notation complex objects prolog 
association lists representing complex objects cf 
prolog 
data structure familiar lisp programmers 
inductive de nition association lists uses operator pairing attribute associated value 
de nition association lists 

prolog terms association list 

called attribute called associated value 
observe association lists prolog terms possible nested association lists values association lists 
example association list attributes corresponding values respectively 
association list just prolog constant 
complex object sub objects selected attributes represented association list association list complex object sub objects represented constant prolog 
association lists got advantages compared ordinary prolog facts form firstly sequence attribute value pairs arbitrary 
secondly values accessed attributes argument positions 
thirdly database schema changed run time 
fourth null values omitted new values added run time 
fifth xml objects eld notation queried modi ed elegantly 
xml objects prolog 
xml example shows database information charts german stock index dax chart identifying attribute wkn entries attributes date value xml object ht ti tag represented prolog term association list attribute value pairs represents contents sub elements call fn object 
example xml document represented fn object stocks index dax chart wkn entry date value chart wkn entry date value entry date value arbitrarily assume right associative means de nition field notation 

prolog terms association list called fn object tag contents called attribute called corresponding value 
alternatively represented 
fn object list fn objects called sub element observe fn objects prolog terms 
access components field notation selection 
fn object prolog terms binary predicate allows accessing sub elements attribute values corresponds child axis attribute axis respectively xpath 
call succeeds general substitutions sub element tag 
call succeeds general substitutions value attribute 
reminds evaluation arithmetic expressions prolog predicate symbol arguments evaluates arithmetic term assigns result rst argument 
predicate handle complex path expressions selecting sub components 
get stocks index dax chart wkn entry date value chart index 
chart wkn 
chart wkn entry date value dax pure prolog selection complex path expression chart wkn look complicated stocks index dax chart wkn entry member chart member wkn 
assignment 
assign new values attributes elements follows stocks index dax chart wkn entry date value chart entry value 
chart wkn entry date value 
obtained rst selecting sub element tag chart modifying value attribute embedded entry element 
observe create new object holding result prolog exists destructive assignment 
library section describe selection transformation sub elements fn objects complex tree expressions 
basic methods implemented prolog library dealing fn objects 
extended library additional advanced methods selection deletion elements attributes certain pattern transformation sub elements substitution rules manipulation path tree expressions 
usage seen section 
tree expressions query terms path expressions tree expressions de ned inductively strings prolog terms characters 
de nition paths selection trees 

prolog term paths 
paths path 

path selection tree 
path selection trees selection tree 
example chart wkn entry date value selection tree 
fn object selection tree considered prolog term 
depending position functors perceived right associative binary functors unary pre functors suitable precedences types cf 
section 
path applied fn object iteratively applying selectors selection tree applied rst applying applying selection trees parallel 
query multiple selection paths returns list objects object selector stocks index dax chart wkn entry date value chart wkn entry date value 

path contains variable symbols instances path allowed path query object generated backtracking stocks index dax chart wkn entry date value chart entry path 
path date path value stocks index dax chart wkn entry date value path 
path chart entry value selection tree compatible fn object return results 
entry compatible complex object contain direct sub elements tag chart 
obviously path containing subsequent functors compatible xml objects eld notation xml attributes complex structure 
de nition association trees assignment trees 

path prolog term vn association tree 
path association trees association tree 

path association trees assignment tree 
assignment tree selects sub element fn object iteratively applies association trees change certain attributes elements 
possible change components arbitrary depth document 
stocks index dax chart wkn entry date value chart entry value 
chart wkn entry date value 
selection trees assignment trees combined fn trees form basis fn query atoms 
de nition fn trees fn query atoms 

selection trees assignment trees fn trees 
path fn trees fn tree 

fn object fn tree prolog term fn query term fn query atom 
fn tree represents labelled tree edge labelled path 
nodes labelled prolog term 
path root leaf contains node labelled case leaf labelled prolog term 
fn tree example stocks index dax chart wkn entry date value index chart entry value 
dax entry date value 
index chart entry value fig 

fn tree evaluation fn query atoms prolog implemented prolog engine evaluating fn query atoms cf 

operators de ned right associative binary operators precedence time unary pre operators call op precedence type name parameters name precedence type fx fx simpli ed notations 
selection tree association tree start selector equivalently represented assignment tree start represented example represented represented 
aggregation operators embedded computations 
handle query terms agg aggregation goals parameters average sum nth 
path rst applied object calling aggregate obtained list ys results call calling agg ys arbitrary user de ned prolog predicates agg 
example query agg returns list sub elements agg de ned fact agg ys ys 
query returns average value attributes second chart element stocks index dax chart wkn entry date value chart wkn entry date value entry date value nth chart average entry value 
arbitrary embedded computations computing changes day day user de ned function changes started evaluating query term changes 
stocks index dax chart wkn chart wkn entry change related concepts brie relate representative concepts dealing xml data xml query logic 
di ers xml query logic built predicates allowed fn trees library built predicates implemented 
xml query 
prolog rule uses features computing stock values day date stock stocks date entries entries findall entry wkn wkn value value chart stocks chart wkn chart wkn entry chart entry date entry date value entry value entries 
applied fn object stocks section 
corresponding flwr expression xml query look follows chart document www stocks de stocks chart wkn chart wkn entry chart entry value entry value date entry date return logic 
logic complex nested structures stocks index dax charts wkn entries date value wkn entries date value date value called molecules complex object usually represented collection molecules 
large degree access components comparable logic consider quite powerful transformation facilities 
processing xml data structure web sites change time highly dynamic way semantic contents stays 
example restructuring html page insert levels nesting certain information deeper level restructuring names certain elements changed 
web site german providing stock information www de web site known amazon www amazon de 
cases goal extract information partial incomplete knowledge structure html pages 
applied xml representation knowledge base diagnostic expert system diagnostic tasks medicine biology processing mathematical knowledge represented xml languages mathml openmath 
describe application stock example 
parsing 
downloaded html documents web les 
sgml parser swi prolog loading html documents prolog transformed eld notation original object load html file stock data dax htm content xml swi fn content 
html le shown appendix obtain eld notation appendix processing stock data 
rules extracting stock data html page 
relevant part html document stock data representation eld notation appendix 
structure document unknown vary time 
looking html page browser seen page contains table row provides stock information stock share rows contains string salomon 
rules nd string salomon located document return corresponding paths shortened trailing elements rst tr tr element occurs relevant path path xs path member salomon xs fn path cut tr tr path path 
rule robust nd relevant paths weak assumptions ful lled 
currently relevant path returned html body table tr td table tr tail td cut away fn path cut 
observe tag tags original document introduced sgml parser swi prolog 
surprisingly table interested located table just look table document 
elements reached relevant path extracted reduced transformed result line original object relevant path path line path reduce line line line transform line line line 
reduce line line line element patterns br br fn delete elements element patterns line line 
transform line line line substitution font img td td td td th th fn substitute elements substitution line line 
obtained previous rules iterative design process 
long current result contained redundant elements attributes deleted 
complex elements font td td substituted simpler ones td respectively 
observe substitutions applied iteratively sequence td replaced td rst iteration replaced td second iteration 
obtained results shown appendix substitution rules iteratively simplifying structure document 
originally started deleting redundant attributes rule reduce line line line attribute patterns class href size face color fn delete attributes attribute patterns line line 
deleting redundant attributes condensed result obtained possible come substitution predicate transform line nally rendered predicate reduce line irrelevant 
shown techniques processing reasoning complex xml documents integrated nicely prolog applications 
possible formulate complex queries xml documents compact intuitive way 
embedding xml query language procedural language propose homogeneous framework accessing transforming reasoning xml documents declarative environment 
library developed xml documents eld notation 
currently planning extend alternative document object models xml documents prolog relational representation relations ref val 
detailed description built predicates library separate 
provide formal de nition semantics particular semantics tree expressions variables evaluable predicates de ned re ned way 
currently predicates evaluated top tuple oriented fashion prolog computing answers query backtracking 
complicated rule systems containing recursive rules planning set oriented bottom evaluation datalog 

abiteboul suciu data web relations semi structured data xml morgan kaufmann 

bancilhon cluet delobel query languages object oriented database systems proposal proc 
nd intl 
workshop database programming languages 

berners lee hendler lassila semantic web scienti american may 

bry scha ert pattern queries xml semistructured data 
proc 
th workshop logische programmierung 

ceri gottlob tanca logic programming databases springer 

gross querying concepts approach retrieve xml data means data types 
proc 
th workshop logische programmierung 

flexible processing xml mathematical knowledge prolog environment proc 
intl 
conf 
mathematical knowledge management springer lncs appear 

kifer lausen logic higher order language reasoning objects proc 
acm sigmod conference management data 


web informatik uni de 
prolog engine querying transforming xml data field notation www informatik uni de databases 

vianu odyssey codd xml proc 
intl 
conference principles database systems pods 

xml query requirements working draft world wide web consortium www org tr wd req 
appendix stock data html html table occurs deeply nested html document www de portal index listen htm symbol dax width bgcolor wkn salomon alt kurs width height border color color 
appendix stock data field notation eld notation created sgml parser swi prolog transforming html documents prolog representation transformed eld notation 
association list class hl occurs times fn object abbreviated 
table border width bgcolor tr th class hl br clear wkn th br clear th br clear th br clear trend th zeit br clear datum th bid br clear ask th br clear th hoch br clear th br clear tr td class wl href salomon br clear td class wr img src alt width height border br clear td font size face helvetica color br clear font size face helvetica color td br clear td br clear td br clear td br clear td br clear td br clear tr 
notice attributes original le introduced sgml parser 
appendix pruned stock data field notation obtained pruned result facts 
rst fact contains attributes header original html table subsequent fact contains corresponding data stock share 
result th wkn th th th trend th zeit datum th bid ask th th hoch th 
result td salomon td td td td td td td td 
