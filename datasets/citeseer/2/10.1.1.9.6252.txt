realistic compilation program transformation detailed summary richard kelsey paul hudak yale university department computer science concepts denotational semantics produced simple compiler compile standard programming languages produces object code efficient production compilers 
compiler entirely source source transformations performed programs translated intermediate language resembling lambda calculus 
output compiler intermediate language trivially translated machine code target machine 
compilation transformation strategy simple goal remove dependencies intermediate language semantics target machine implement directly 
front ends written pascal basic scheme compiler produces code mc microprocessor 
denotational semantics tool prove compilers correct write compiler generating programs 
generally understand nature compilation process 
example semantics directed compiler generators standard denotational semantics description source language stores environments explicit 
attempt permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
fl acm map result target architecture crux compilation process easy task 
denotational semantics takes care easy part translating program intermediate meta language lambda calculus constants requires significant compilation 
contrast approach somewhat pragmatic sound perspective formal semantics 
intermediate language callby value lambda calculus data procedure constants plotkin addition implicit store 
target language generic register transfer language subset intermediate language syntax completely different semantics 
compilation consists transforming source program intermediate language performing source source transformations intermediate program meaning considered intermediate language program machine language program 
process sounds simple reasons significant 
motivation stems observation compilation process fact transformation process best way understand simply look source language compare feature feature target language 
perspective sense common features left unaltered 
concentrating differences essence compilation transformation process unfolds 
research supported part national science foundation ccr department energy de fg er 
authors current addresses richard kelsey paul hudak nec research institute yale university independence way box yale station princeton nj new haven ct kelsey research nj nec com hudak cs yale edu compiler described denotational semantic descriptions intermediate target languages correctness harder feel easier prove traditional semantics directed compiler 
formally correctness heart compiler captured follows sm intermediate language semantics sm machine language semantics output language specific front compilation transformations methodology developed compiler features 
intermediate language general powerful common programming languages compiled easily 

output runs fast produced production compiler 

simple easy show correct 
believe compiler possess features 
intermediate language intermediate language compiler basis entire compilation strategy 
syntax 
mentioned essentially call value lambda calculus data procedure constants implicit store 
primitive procedures access store particular variables set explained largely invisible semantics language 
presence rely continuations semantics specify order applications primitive procedures modify store 
intermediate language simple types expressions having simple semantics 
compiler complex easier understand 
intermediate language quite expressive allows class procedures recursive store 
having class procedures implicit store easy write front ends modern programming languages 
seen intermediate language lambda calculus additions con constants ide identifiers pri primitives procedure constants pro procedures gamma 
proc sab simple abstractions gamma 
lambda cont app applications gamma 
return exp expressions gamma 
block syntax intermediate language block form sequencing construct evaluates expressions order returns result 
types abstraction expressions intermediate language 
difference syntactic identifier proc expressions distinguished lambda cont identical semantics 
lambda abstractions initial input compiler 
compilation process replaced proc cont method annotating abstraction program proc expressions passed explicit continuation argument cont expressions 
calls primitive procedures represent machine operations 
associated primitive procedure information needed generate particular sequence machine instructions 
information includes type values primitive returns primitive uses store registers may hold arguments return values 
calls primitives zero continuation arguments call arguments returns value continuation arguments called returning 
note syntax intermediate language allow calls arbitrary expressions default calling convention 
primitive operations specify call return conventions procedures 
simplifies compiler calls may treated identically 
returns done return form primitive specifies way values returned lexically innermost abstraction 
machine language machine language assembly language written subset syntax intermediate language completely different semantics 
identifiers constants lambda expressions calls primitive procedures allowed ffl identifiers machine language represent registers machine 
lexically scoped locations values store 
ffl lambda expressions continuations calls primitive procedures represent code pointers identifiers ignored arguments passed store 
calls place arguments registers procedure expects find 
ffl primitive procedures machine instructions identifiers continuation call primitive procedure represent registers results instruction appear 
example interpretation call primitive procedure address add instruction syntax intermediate machine languages conventional assembler syntax add lambda add intermediate language adds values calls continuation argument result 
machine language adds contents registers places result 
larger example giving intermediate code program corresponding assembly language program 
transformation process mentioned earlier gain insight nature transformation process comparing source intermediate language feature feature machine language shown 
entire problem compilation lies properties second implement 
note store call value semantics essentially languages changed transformation process ignore 
reduces compiler provides useful tool store implementing rest intermediate language 
hand items different 
simple observation summarize required compiler follows implementing returns calls call return implemented terms goto 
done steps program linear temporary value explicitly bound identifier lambda expressions bind temporary values converted explicit continuations calls produce values 
explicit continuations identical continuations denotational semantics intermediate language eventually manifested gotos machine code 
resulting program contains calls returns procedure calls longer need save return point 
intermediate machine call return 
goto 
nested lexical scoping 
flat scoping 
large set identifiers 
small set identifiers 
store 
store 
call value 
call value 
properties intermediate machine languages transform nested lexical scoping flat scoping just continuations denotational semantics added implement transfer control explicit environments denotational semantics added implement lexical scoping 
denotational semantics environments act indirection store store normally explicit case implicit corresponding realities target machine 
calls added program construct environments write read values contain 
procedures lexical environments passed arguments procedure calls gotos pass arguments 
restrict identifiers program transformed uses small set identifiers machine language correspond finite resources machine 
registers allocated hold values identifiers program necessary calls added move values registers temporarily save values store 
point procedure calls reduced simple gotos arguments passed store 
agrees reality machine 
program meaning interpreted intermediate language program machine language program viewed assembly language program somewhat unusual syntax target machine 
compilation process detail summarize compilation process performed steps 
translating source intermediate code 

making program linear 

adding explicit continuations 

simplifying program 

adding explicit environments 

identifier renaming register allocation 
step restricts form code subsequent steps preserve previous restrictions 
code expands compiler moves intermediate language semantics program 
time code improvement transformations reduce size code expansion code typically provides opportunities improve 
design compiler oriented reducing cost saving accessing lexical environments 
intermediate language lexically scoped environments may need preserved 
compiler uses heap stack allocating environments 
stack environments accessed current stack pointer explicit environment pointer heap environments explicit environment pointer 
heap environments explicit environment pointers efficient stack environments implicit environment pointers goal compiler heap environments explicit environment pointers possible 
remainder section describe steps detail 
detail see kelsey 
translating source code intermediate language initially front specific source language translates program compiler intermediate language 
different front ends needed different programming languages 
consists translator source language intermediate language set primitive procedures describing machine operations source language requires mapping source language constants machine data 
translator normally simple syntax directed translator denotational semantics source language 
type expression syntax source language template gives equivalent expression intermediate language terms translations expression subexpressions 
primitive procedures description constants normally specified denotational semantics necessary compile programs efficiently 
standard techniques denotational semantics translating programs intermediate language 
values variables kept locations store allowing variables set new values 
conditional expressions implemented primitive procedures take continuation argument called 
control constructs loops require recursive procedures 
denotational semantics recursion normally done fixed point operator 
intermediate language contains operator 
procedure stored location lexically visible procedure 
procedure dereference location obtain value 
currently complete front ends pascal basic scheme scheme primitives run time system defined 
pascal scheme front ends developed compiler 
give idea source language portability writing basic frontend primitive operations took days 
making program linear transformation gives explicit order applications program introduces identifiers temporary values removes block expressions 
resulting code arguments applications arguments applications lambda expressions argument code linear calls explicitly ordered 
example transformation linear code expression lambda return return result call anonymous temporary value primitive procedures return primitive return single value remember procedure call return conventions specified primitive operations 
transformation converts expression lambda lambda lambda return return identifier introduced result call similarly call 
adding explicit continuations compiler moves lambda expressions introduced previous transformation applications continuations 
transformation plotkin slightly complex due complicated syntax desire limit size resulting program 
lambda expressions replaced cont proc expressions 
call position continuations primitive calls cont expressions 
remaining lambdas proc expressions additional identifier continuation called procedure finished 
return calls procedure replaced calls continuation identifier 
mentioned types abstraction expressions semantics difference syntactic proc expressions distinguished identifier bound procedure steele kranz combine previous transformation 
somewhat simpler seperate transformations 
continuation 
important distinction cont proc expressions environments cont expressions allocated stack known offset current stack pointer 
environments proc expressions may heap stack accessed explicit environment pointer 
distinction natural cont expressions get passed continuation current continuation current stack value known compile time 
cont expression called current continuation calls value expression body proc expression cont 
calls body second proc expression call occur stack environment created second proc expression top stack created proc expression containing cont 
continuations added program cont expressions continuation arguments primitives introduced transformation avoid duplication continuation arguments primitives 
case calls cont expression meet criterion 
continue example transformed program proc cont cont return resultant program continuation passing style cps structured 
arguments calls may longer calls 

bodies abstractions calls 

longer returns 
parts compiler follow preserve continuation passing nature transformed program 
simplifying program conversion continuation passing style followed number code improving transformations known steele brooks kranz standish 
include local transformations beta reduction global transformations flow analysis 
transformations simpler done conversion continuation passing style code structured 
example beta substitution may done side effects arguments applications applications 
global transformation substitutes known values identifiers bound abstractions application 
example proc called places cases value lexically visible proc expression substituted value substituted continuation proc expression cont long scoping restrictions detailed met 
allows procedures including recursive procedures introduced compile iterative loops cont expressions calls procedures simple jumps 
requirement control constructs source language implemented procedures procedure calls prevent compiler producing simple efficient code control constructs 
second global transformation attempts reduce store increase effectiveness transformations allowing manipulate values hidden store 
contents particular locations store passed explicitly cont expression cont expression implicitly store 
equivalent classical definition flow analysis results analysis expressed program allowing transformations beta substitution implement copy propogation constant folding flow analysis optimizations 
proc expression transformed separately uses locations may removed transformation 
adding explicit environments stated section environments intermediate language semantics added program 
results program abstractions may free identifiers continuations calls primitive procedures 
register allocator described section takes care saving retrieving values identifiers needed continuation arguments primitive applications may ignored moment 
example procedure takes argument returns procedure returns called see section expansion internal language proc return proc proc 
proc return transformed code shown procedures passed environment additional argument construct environments lexically inferior procedures shown inner procedure environment proc environment return proc proc 
proc return value added environment outer procedure obtained inner proc environment set environment return proc proc 
proc get environment return call set environment return meaningful value modify store 
final change add code inner procedure constant contains free variables environment may returned single value proc environment set environment set environment proc procedure return proc 
proc get environment return analysis required addition environments determination procedures require heap environments may stack environments 
done fiat pascal language design ensures procedures returned upwards program analysis case language scheme 
cases procedures require heap environments procedure call procedure passed procedure procedure calling point procedure requires heap environment lexically superior called procedure 
environments added code improving transformations applied 
examples include removing unused environments removing calls write values program reads 
identifier renaming register allocation final phase compilation allocation machine resources registers functional units different parts program 
allocation registers functional units done manner allocation expressed transforming program 
registers involves changing names identifiers correspond register currently containing value identifier 
functional units specified primitive operations primitive operation uses particular functional units 
allocating functional units involves replacing primitive operations desired functional units 
current implementation form instruction selection attempts find sets primitive applications coalesced single load store instruction mc indexed addressing mode 
current implementation uses simple register allocation algorithm allocates registers basic block separately 
register selection algorithm purely local basic blocks exception look ahead determine values need preserved blocks 
factorial example far best way understand transformations effects follow compilation simple program 
example compiler action steps compiling simple pascal program 
sample program shown reads integer prints value 
program fact var integer procedure fact integer var res integer var integer res readln fact writeln 
sample pascal program cps code easy programs analyze hard read syntactic sugaring code comprehensible 
syntax variation scheme syntax 
cont meaning binding clauses follows id id arg arg cont id id arg arg notation basic block program single primitive call continuation argument 
show factorial program compiler converted code cps done simplification including substituting body factorial procedure calling point 
block body program reads value introduces locations variables recursive procedure needed loop calls looping procedure writes value location introduced removed contents set value substituted uses location 
location needed recursive procedure implementing loop efficient way expressing recursion intermediate language 
body loop tests value proc read input read line input push push set contents push ptr set contents loop set contents contents call contents write output write line output simple return loop 
proc contents equal true 
false 
true 
cont return false 
cont contents contents multiply set contents contents add set contents contents simple call return factorial cps returns multiply adds calls recursively 
names introduced identifiers reflect runtime values represent pointers values 
push primitive producing new locations allocated stack argument size location bits 
contents set contents read write contents locations 
program simplified changing loop procedure cont proc continuation substituted body procedure 
calls loop jump longer continuation argument 
second global simplifying transformations modifies program pass contents locations hold values explicitly shown 
code code improvement phase proc read input read line input push push set contents push ptr set contents loop set contents contents jump loop 
cont contents equal true 
false 
true 
cont contents write output write line output simple return false 
cont contents contents multiply set contents contents add set contents contents jump loop jump compiler 
shows program environments 
example require way simplifications removing unused calls 
global environment passed program value kept environment 
loop 
procedure constant free variables substituted calling points cell recursive longer removed 
call pop stack environment added register allocation 
identifiers renamed registers contain values 
calls move move constants registers 
small program shows lack sophistication current register allocator 
proc read input read line input push ptr set contents loop contents jump loop 
cont equal true 
false 
true 
cont write output write line output simple return false 
cont multiply add contents jump locations removed lack global register allocation scheme shown value loaded stack environment time loop remaining register 
load avoided indirect operand cmp instruction emitted equal primitive 
results compiler written rees dialect scheme generates code motorola mc microprocessor 
mentioned front ends written pascal basic front scheme lacks necessary primitive operations appropriate runtime system 
pascal scheme front ends developed compiler 
writing basic front primitive operations took days 
pascal benchmarks compare output implementation traditional production compiler 
timings shown times programs palindrome benchmark programs gathered john hennessy modified peter 
proc push stack environment set environment contents input read set environment contents si read line jump loop 
loop 
cont get environment equal true 
false 
true 
cont get environment contents output write contents output write line simple return false 
cont multiply add jump loop 
environments added compiled apollo pascal compiler 
apollo pascal compiler hand coded compiler approximately optimizations compiler extensively apollo production software example entire operating system written predominantly pascal 
main difference compilers apollo compiler uses efficient procedure call mechanism non local register allocation loop invariant code hoisting 
lists pascal programs compiled run compiler 
gives running times programs 
times benchmarks compiled transformational compiler times compiled apollo pascal compiler 
times seconds 
third column contains ratio times 
note transformational compiler output runs somewhat slower programs fib towers runs somewhat faster perform large number procedure calls 
consider results quite lambda sp sp push stack environment sp set environment sp contents input read set environment sp get environment sp contents si read line move move jump loop 
loop 
lambda get environment sp equal true 
false 
true 
lambda get environment sp contents output write get environment sp contents output write line sp pop stack environment sp simple return sp false 
lambda multiply add jump loop 
register allocation surprising simple structure compiler 
consider compiler complete standard optimizations implemented undue effort 
related realistic compiler generators paulson paulson lee lee written denotational semantics attribute grammar descriptions source languages input 
feel realistic called simple 
crucial distinction pure semantics directed compiler generators compilation method described may translate source program fib integer fibonacci bubble bubble sort integers quick quicksort integers palindrome integer arithmetic operations perm recursive array permutations towers towers hanoi benchmark programs fib bubble quick palindrome perm towers benchmark results form lambda calculus identifier bindings continuations store source program implemented bindings continuations lambda calculus implicit store 
restricts ways bindings continuations store source program allows compiler implement efficiently 
viewing compilation process transformational able concentrate differences intermediate meta language machine language yielding direct path intermediate machine code 
result utility generality lambda calculus describe programming languages obtained paying performance cost compiling running general lambda calculus programs 
negative side methodology somewhat general pure approaches intermediate language biased somewhat direction sequential register uni processors 
hand compilation strategies pure approaches certainly biased direction 
retarget approach radically different architecture require changing intermediate language transformations retargeting pure approach require considerable changes compilation strategy 
parts compilation transformation methodology related approaches compiler design 
example passing continuations explicit arguments steele kranz 
pass lambda sp lea sp sp sp push stack environment sp move sp set environment sp move contents input jsr read read move sp set environment sp move sp get environment sp move contents input jsr read line read line move move bra loop jump loop 
false lambda multiply addq add jump loop 
loop lambda move sp get environment sp cmp equal true 
false 
ble false true lambda move sp get environment sp move contents output jsr write write move sp get environment sp move contents output jsr write line write line lea sp sp sp pop stack environment sp rts simple return sp machine code produced factorial example ing environments explicit arguments key innovations related lambda lifting functional language compilers johnsson method described feeley 
intermediate language allow compilation language fairly common program transformations 
compiler solely program transformations boyle boyle 
key innovations various techniques put common framework 
transformations exclusively programs intermediate language 
semantics intermediate target languages specified denotationally compilation transformations directly differences similarities languages 
result simple compiler generates surprisingly code 
boyle james boyle 
program reusability program transformation 
ieee transactions software engineering se september 
boyle james boyle kenneth robert taylor 
deriving sequential parallel programs pure lisp specifications program transformation 
ifip wg working conference programme specifications transformations 
brooks brooks gabriel steele jr optimizing compiler lexically scoped lisp 
proceedings sigplan symposium compiler construction acm sigplan notices june 
feeley feeley lapalme 
closure generation viewing lambda epsilon plus compile 
epartement informatique de recherche op universit de montr eal station montr eal qu ebec canada 
johnsson thomas johnsson 
lambda lifting transforming programs recursive equations 
compiling lazy functional languages 
phd thesis chalmers university technology kelsey richard kelsey 
compilation program transformation 
phd thesis yale university 
kranz kranz kelsey rees hudak philbin adams orbit optimizing compiler scheme 
proceedings sigplan symposium compiler construction acm sigplan notices june 
lee peter lee 
automatic generation realistic compilers high level semantics descriptions 
phd thesis university michigan 
paulson lawrence paulson 
semantics directed compiler generator 
record ninth annual acm symposium principles programming languages acm 
plotkin plotkin 
call name call value calculus 
theoretical computer science 
rees jonathan rees norman adams james 
manual fourth edition 
yale university computer science department january 
standish standish kibler neighbors 
irvine program transformation catalogue department information computer science university california irvine 
steele guy steele jr rabbit compiler scheme 
mit artificial intelligence laboratory technical report may 
