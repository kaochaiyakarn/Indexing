variants basic calculus constructions bunder school mathematics applied statistics university australia jonathan seldin department mathematics computer science university lethbridge university drive lethbridge alberta canada number di erent versions basic calculus constructions appeared literature compared exact relationships determined 
biggest di erences versions original version coquand version early papers subject seldin 
results deep useful collect place 
key words calculus constructions typed calculus pure typed systems msc coquand introduced calculus constructions number di erent versions system published 
corresponding author 
email addresses martin bunder edu au bunder jonathan seldin ca jonathan seldin 
urls www edu au informatics maths staff bunder html bunder www cs ca seldin jonathan seldin 
supported part australian research council 
supported part natural sciences engineering research council canada 
preprint submitted elsevier science april versions published coquand appears appears appears 
distinctive versions literature due seldin di ers important ways 
seldin learned calculus constructions early working odyssey research associates 
richard platek president hired seldin project involved version typed calculus propositions types notion develop general system formal verification task assigned seldin choose best version typed calculus 
part process choosing platek seldin visited carnegie mellon university early see coquand huet visiting time 
time earliest papers coquand huet appeared preprint form 
result seldin definition system subject modification 
furthermore major part project working required formal proofs consistency see seldin led reformulate system form familiar tools proof consistency form curry theory functionality name type assignment considered part illative combinatory logic proof theoretic tools gentzen especially developed curry prawitz 
seldin wanted allow possibility assumptions assigning types variables thought assumptions useful example dealing possibility subtyping curry postulated assumption see pp 

seldin led systems significantly general original formulation coquand huet 
originally seldin think di erences terribly important continued versions 
seldin asked occasions exact relationship versions ones 
coquand introduced calculus constructions berardi introduced concept pts generalization barendregt cube see 
comparison definition pts definitions original versions calculus introduced coquand shows special case 
bunder dekkers studying variants ptss purpose comparing systems illative combinatory logic see result exact di erences di erent formulations important 
purpose study di erent formulations calculus constructions compare 
results new appeared proved ptss general 
useful collect place apply calculus constructions 
di erent formulations things common terms forms judgments axiom form application product rules 
may di er form rule conversions types form abstraction rule assumptions sequences introduced rules sets arbitrary 
kinds natural deduction systems appeared gentzen prawitz 
versions wants depend purpose 
purpose typechecking important probably prefer versions sequences assumptions wants obtain consistency proofs obtain proof theoretic results ac versions sets assumptions may useful 
hope results help researchers choice 
di erent kinds extensions calculus constructions consider extended calculus constructions calculus constructions inductive types calculus constructions rewriting calculus constructions reduction calculus constructions domain free pure type system 
di erent variants deal defined systems considering longer 
furthermore case calculus constructions rewriting new versions appearing quickly di cult keep 
reason concerned basic calculus constructions 
anonymous referees helpful comments suggestions 
di erent variants formulations syntax pseudoterms prop type mm reduction relation reduction basic contraction rule denotes substitution occurrences bound variables changed necessary avoid collision 
corresponding conversion relation written 
consider reduction conversion 
constants prop type called sorts 
called kinds earlier papers seldin 
unspecified sorts denoted 
prop type 
formulas called statements ptss form pseudoterms 
versions axiom pt prop type 
formulations judgments form sequence assumptions 
formula 
systems kind regarded legal possible prove formula furthermore assumptions introduced left rule prop type fv occur free formulations kind similar original formulation coquand equivalently equivalent system called toc formulation kind called toc pottinger 
systems kind called toc 
toc stands theory constructions judgments form set formulas formula 
premises form possible 
systems set assumptions assign types distinct variables considered legal ordered sequence way assumptions discharged rules system reverse order 
systems kind called toc 
follows names systems obtained toc toc adding letters 
addition refer system abstraction conversion rules essentially pts equivalent prop type 
addition indicate system modified abstraction rule systems addition denote system modified rule conversion types 
abstraction conversion rules modified ac added name 
original toc seldin notation toc ac 
shall see toc systems toc systems letters equivalent 
shall give exact relationships ac formulations 
versions pts systems start toc version 
definition system toc system kind sequences assumptions 
axiom pt 
rules follows validity prop type condition fv variable prop type product condition fv abstraction condition fv application mn conversion slight generalization see 
sequence formulas assigning types variables legal possible prove formula condition validity changed read fv conditions rules product abstraction dropped 
define dom 

condition validity changed read dom 
lemma free variable lemma proved system see lemma 
lemma fails systems toc toc ac considered 
reason retaining conditions explicitly stated formulations consider 
toc restriction system called toc 
seldin writes write 
ptss standard prop type 
system coquand toc system 
earlier systems coquand huet equivalent type written explicitly written type prop 
fact type expressed explicitly second premise rule abstraction automatically true easy prove equivalence induction proofs 
coquand really formulate calculus constructions toc system 
version special respects type constant special judgment type introduced formulas involving type type judgment replaces type 
type operator prop type standard notation 
separate universal quantifier property plays role 
prop type notation 
coquand wrote 
judgment valid takes place prop type 
coquand writes pottinger defined variant called toc 
obtained toc omitting rules validity variable postulating rules hypothesis condition fv condition formulas shown equivalent toc 
rules hypothesis versions corresponding rules fitch 
condition variable rule hypothesis omitted modified indicated 
standard pts replaces validity variable start condition fv weakening condition fv start hypothesis 
prove equivalent weakening rules toc 
conditions variable rules omitted modified indicated 
lemma deduction toc proof 
induction deduction lemma 
lemma 
legal toc variables 
distinct fv ma 
fv 
proof 
induction derivation lemma toc 
proof 
derivation step formed left takes form prop type validity fv cx 
step derivation replaced derivation application validity 
result derivation prop type 
remaining steps derivation carried place changes variables free steps leading derivation 
lemma toc valid judgments validity variable replaced start weakening 
proof 
show weakening equivalent 
suppose basic rule suppose deductions lemma weakening valid toc 
conversely suppose easy induction deduction form fv 
lemma weakening 
rule product exactly pts format 
pts version condition fv set calculus constructions prop prop prop prop type type type prop prop type type type 
lemma simplifies product calculus constructions 
condition omitted 
validity variable replaced start weakening realizing product essentially toc quite pts 
pts rule abstraction replaced condition fv ptss equivalent calculus constructions 
condition omitted 
lemma toc valid judgments abstraction replaced 
proof requires lemma lemma toc toc 
special case barendregt generation lemma ptss see lemma 
proof 
induction derivation case inference rule conversion considered 
proof lemma lemma immediately get remarks lemmas far give theorem toc valid judgments pts barendregt 
toc version 
definition system toc system kind sets assumptions 
rules follows prop type axiom prop type assumption condition ss condition fv si condition fv mn eq formed environment definition provided fv 
rule weakening admissible system toc systems considered extra formulas assigning types variables added judgement deduction ecting validity inferences long conditions occurrence free variables violated 
general conventions kind system deduction fv deduction deduction obtained substituting replacing occurrence assumption placing noting rules system allow assumptions discharged introduced obtained process justifying rule weakening described 
earlier works seldin definition style prawitz 
axiom pt form prop type rules stated follows ss condition occur free undischarged assumption 
si condition occur free undischarged assumption 
mn eq set assumptions holds formalism deduction formula undischarged assumption occurs 
definition rules axiom assumption definition follow conventions method giving natural deduction rules 
possible sets assumptions toc correspond legal sets assumptions definition 
want able discharge assumptions assign types variables need take certain order need satisfy certain conditions 
definition set assumptions formed environment respect toc system assumptions assign types variables ordered sequence 
variables 
distinct conditions hold occur free 
may occur free 

sequence called formed sequence respect 
sequences called legal similar 
need results formedness respect toc 
lemma toc formula initial segment possibly derivation contains subderivation prop type 
proof 
induction proof lemma prop type toc formed sequence respect toc 
proof 
induction pair number assumptions length derivation prop type 
basis trivial empty 
induction step assume lemma initial subsequence suppose sort lemma 
lemma toc formed sequence respect toc 
proof 
lemmas 
lemma formed sequence respect toc prop type toc 
proof 
empty sequence result trivial axiom pt 
empty condition definition occur free condition definition toc lemma follows rule validity 
corollary formed sequence respect toc formula legal respect toc 
proof 
lemmas 
prove equivalence toc toc 
purposes proof write indicate provable toc write indicate provable toc 
sequence assumptions write set assumptions write theorem 
proof 
induction derivation 
basis pt toc 
empty prop type holds rule axiom toc 
induction step cases rule derivation 
case validity 
trivial rule axiom 
case variable 
trivial rule assumption 
case product 
occur free premise induction hypothesis furthermore lemma application induction hypothesis follows ss 
case abstraction 
similar case product si 
case application 
mn premises induction hypothesis follows 
case conversion 
trivial rule eq 
theorem formed environment respect toc sequence holds 
proof 
induction sum length number formulas proof plus subsidiary proofs formed environment 
case proves formed environment respect toc 
cases rule applied deduction 
case axiom 
prop type 
empty instance axiom pt 
empty formed respect toc corresponding formed sequence respect toc 
sequence corresponding condition definition fv 
condition definition induction hypothesis application rule validity gives 
case assumption 

formed environment 
occur free 

induction hypothesis 

case ss 
fv 
premises follows formed respect toc corresponding sequence induction hypothesis follows product 
case 
mn premises induction hypothesis formed sequence follows application 
case si 
premises fv 
induction hypothesis formed sequence follows formed fv addition follows abstraction 
case eq 
trivial conversion 
corollary sequence formed respect toc formed respect toc 
versions relaxing abstraction rule versions systems obtained versions omitting second premise abstraction rule rule abstraction toc version rule si toc version 
paula studied variants ptss change calls ptss condition 
regular pts specification calls corresponding pts condition 
similar variants considered van benthem jutting mckinna pollack particular respect conditions equivalent corresponding ordinary ptss 
definition system toc obtained system toc replacing rule abstraction definition rule condition fv specification calculus constructions system system toc 
omit condition stating condition formulation reasons 
change abstraction definition ect lemma lemma lemma lemma lemma lemma corollary proofs apply toc toc 
definition system toc obtained system toc replacing rule si definition rule si condition fv style prawitz seldin earlier papers rule written follows si condition occur free undischarged assumption 
note rule si similar sense deduction theorem restricted generality bunder theorem form xx lx xy fv 
sense similar bunder acknowledges footnote appearance essentially theorem di erent assumptions appeared seldin theorem appeared 
seldin seen bunder version theorem seminar amsterdam early november seldin result may 
furthermore seldin system proved inconsistent 
restriction form rule xx xy known inconsistent applies antecedent 
corresponding rule curry theory functionality xx zx lx fxy fv 
theory functionality curry version type assignment considered closely related theory restricted generality modern notation written zx lx curry generalized functionality means corresponding rule xx zx lx curry notation modern notation zx 
church theorem version deduction theorem restricted generality restriction antecedent xx xy means xu appears restricted forms deduction theorem restricted generality appeared print restricted system toc apts sense bunder dekkers apts systems additional restriction abstraction rule 
calculus constructions restriction says type 
restriction toc equivalent toc 
prove equivalence toc toc 
proof mean provable toc mean see 
provable toc 
conventions proofs theorems remain unchanged 
theorem 
proof 
proof theorem case abstraction induction step replaced follows premise furthermore lemma follows induction hypothesis follows rule si 
theorem formed environment respect toc sequence holds 
proof 
proof theorem case si replaced case si premises fv 
induction hypothesis formed sequence follows formed fv addition follows 
corollary sequence formed respect toc formed respect toc 
remains state relationship versions versions 
part easy noted second lst paragraph 
theorem judgment valid toc respectively toc valid toc respectively toc 
proof 
easy induction proof judgment toc respectively toc 
state converse relationship need recall results 
recall definition terms reduce form 
prop called contexts terms reduce form 
type called 
terms form 
type called standard standard form 
result similar theorem theorem toc exactly see theorem 
holds type 
proof 
type need prove type prove induction deduction toc 
basis trivial prop type 
induction step cases rule deduction 
rule validity result clear prop type 
rule variable result follows fact formed type weakening holds lemma 
rule product result clear prop type 
rule abstraction conversion right premise case abstraction application rule product gives result 
leaves case application 
pn premises induction hypothesis premise type lemma lemma systems toc toc result generalized 
rule exclude right colon occur case application allow possibility case 
modifications proof noting barendregt substitution lemma lemma proved toc get result theorem holds toc exactly holds standard 
proved theorem 
note theorem holds toc formed environment 
toc respectively toc stronger toc respectively toc prove prop prop prop type prove generation lemma lemma 
noted similar example paragraph 
di erence versions versions di er type may occur type term occur 
theorem says formed environment exactly holds prop 
theorem applies system called toc toc toc equivalently toc toc subsystems 
version toc assumptions allowed form 
note definition di ers definition precisely allowing formed sets include assumptions form 
allowed formed environments systems considered 
dealing standard version toc ac system 
see 
appear get pts equivalent toc adding sort type adding axiom type type adding rules type type type type 
true pts type occur types terms 
pts adds allows assumptions form type formed environments 
versions relaxing conversion rule versions systems obtained versions primarily omitting third premise conversion rules rule conversion toc rule eq toc 
allows term converts type type 
want preserve theorem need add rule term convertible term sort sort 
definition system toc obtained toc replacing rule conversion definition rule adding rule sort conversion pointed conditions variables rules validity product abstraction needed 
occurrences free variables invariant conversion 
change conversion addition definition ect lemma lemma lemma lemma lemma lemma lemma corollary apply toc toc 
definition system toc obtained system toc replacing rule eq definition rule eq adding rule eq toc easy prove follows alterations allowed remarks lemmas toc equivalent sense bunder dekkers 
rule admissible toc systems consider 
subject reduction theorem says admissible hold systems subject expansion theorem asserts admissibility admissible severe complicated restrictions 
reasons ones simple type assignment basic functionality subterm cancelled contraction contraction fv fact assigned type guarantee assigned subterm duplicated contraction fact assigned type guarantee assigned type occurrences general possible assign type 
rule added toc toc take place special case sort conversion 
seldin change original toc mentioned calling resulting system proved term original toc see theorem 
checked details believe result holds toc ac toc ac toc toc 
theorems hold word word toc toc replaced respectively toc toc 
proofs obtained replacing case conversion rule theorem adding trivial case new conversion rule 
proves theorem 
theorem formed environment respect toc sequence holds 
relation toc toc 

say 

theorem holds toc terms sequence sort sort variable variable toc 
proof 
induction proof 
basis trivial empty type prop induction step cases inference derivation 
case validity 
prop type fv premise hypothesis induction toc 
put fv lemma follows validity 
case variable 
premise prop type 
induction hypothesis prop type holds toc 
put follows variable 
case product 
fv premise induction hypothesis holds toc 
put follows product 
case abstraction 
premises induction hypothesis hold toc 
church rosser theorem combination proof lemma corollary toc setting get abstraction 
case application 
pn premises induction hypothesis church rosser theorem lemma proof corollary case abstraction holds toc 
put get application 
case 
premises induction hypothesis holds toc 
put 
case sort conversion 
premises induction hypothesis holds toc 

easier proof theorem bunder dekkers 
previously shown toc equivalent toc theorem shows toc equivalent modulo conversion toc 
furthermore toc equivalent toc 
subject reduction theorem holds toc corollary theorem types assumed normal form 
obvious change systems systems proof strong normalization breaks 
possible prove normalization systems strong normalization fails types bound variables 
proof deduction reductions 
toc reduction step takes si eq eq eq fv obtained replacing appropriate occurrences obtained described 
style earlier works seldin see written reduction si eq eq eq obtained replacing toc reduction step takes abstraction application substitution lemma 
strong normalization deduction reductions proved theorem extension toc ac assumed formed environment 
normalization terms proved theorem proof subterms strongly normalizing occur types bound variables types prop type corollary 
results proved extension toc ac hold toc subsystem toc ac toc theorems 
may appear typechecking lost versions 
case 
corollary typechecking applied toc reducing term involved normal form typechecking toc 
toc subsystem toc ac similar follows corollary 
ac versions relaxing abstraction conversion rules definition system toc ac obtained ways equivalent toc replacing abstraction replacing conversion adding sort conversion 
toc replacing conversion adding sort conversion 
toc replacing abstraction 
changes ect lemma lemma lemma lemma lemma corollary proofs apply toc ac toc 
definition system toc ac obtained ways equivalent toc replacing si si replacing eq eq adding eq 
toc replacing eq eq adding eq 
toc replacing si si 
prove equivalence toc ac toc ac take alternative definitions 
theorems hold word word toc toc replaced respectively toc ac toc ac 
proofs obtained replacing case conversion rule theorem adding trivial case new conversion rule 
proves theorem 
theorem formed environment respect toc ac sequence holds 
relationship ac systems systems definition alternative definitions 
theorem theorem holds toc modified form toc toc type 
reason proof theorem carry toc ac toc ac toc ac converts standard 
means sum relations ac systems follows theorem toc ac toc 
toc ac distinct type toc 
toc ac toc 
additional restriction type abstraction rule amounts type distinct type theorem converts toc ac sense bunder dekkers 
calculus constructions specification equivalent corresponding pts toc 
earliest calculus constructions seldin included rule condition obtained changes bound variables 
time thought way obtain deductions form 
deductions obtained rule conversion forms rule unnecessary 
subject normalization see results apply ac versions versions 
typechecking holds ac systems 
see 
compared di erent versions calculus constructions 
pointed version want depend purposes 
wants implement version fast type checking important probably prefer toc toc 
hand pottinger remarked seldin proving strong normalization theorem easier toc ac version 
furthermore ac versions strongest consistency results proved carry versions 
version toc ac may useful proof theoretic purposes 
coquand une theorie des constructions ph thesis university paris vii 
coquand metamathematical investigations calculus constructions february 
privately circulated 
coquand metamathematical investigations calculus constructions odifreddi ed logic computer science academic press pp 

defined semi algorithm type checking case calculus constructions equivalent toc 
pottinger course referring seldin proof strong normalization deductions 
coquand huet concepts formalises dans le calcul des constructions krivine parigot eds logic colloquium proceedings colloquium held orsay july vol 
studies logic foundations mathematics north holland amsterdam new york pp 

coquand huet calculus constructions information computation 
seldin mathematical foundation ulysses interim report radc tr rome air development center air force systems command gri ss air force base new york published 
november 
gentzen untersuchungen uber das logische mathematische zeitschrift translated ed collected papers gerhard gentzen investigations logical deduction pages north holland amsterdam london 
curry theory formal deducibility notre dame mathematical lectures number university notre dame notre dame indiana second edition 
curry foundations mathematical logic mcgraw hill book new york san francisco toronto london reprinted dover 
prawitz natural deduction almqvist wiksell stockholm goteborg uppsala 
seldin sequent calculus type assignment journal symbolic logic 
seldin proof theory coquand calculus constructions annals pure applied logic 
seldin coquand calculus constructions mathematical foundation proof development system formal aspects computing 
seldin gentzen style sequent calculus constructions expansion rules theoretical computer science 
seldin lists data types calculus constructions mathematical structures computer science special issue honor lambek 
seldin extensional set equality calculus constructions journal logic computation festival workshop foundations computations held heriot watt university edinburgh july 
berardi mathematical analysis coquand huet calculus constructions systems barendregt cube tech 
rep department computer science carnegie mellon university dipartimento di matematica universita di torino 
een analyse van gts tech 
rep department computer science catholic university toernooiveld ed nijmegen netherlands 
barendregt lambda calculi types abramsky gabbay maibaum eds handbook logic computer science vol 
oxford university press pp 

bunder dekkers equivalences pure type systems systems illative combinatory logic submitted notre dame journal formal logic 
bunder dekkers pure type systems liberal rules journal symbolic logic 
bunder dekkers geuvers equivalences illative combinatory logics pure type systems study nonclassical logic sequent calculi kripke semantics rims kyoto pp 

luo ecc extended calculus constructions proceedings fourth annual symposium logic computer science june asilomar california 
luo extended calculus constructions ph thesis university edinburgh 
altenkirch constructions inductive types strong normalization ph thesis university edinburgh 
werner une theorie des constructions ph thesis universite paris 
adding algebraic rewriting calculus constructions strong normalization preserved conditional typed rewriting systems montreal pq vol 
lecture notes computer science springer berlin pp 

combining term rewriting type assignment systems international journal foundations computer science 
fernandez combining higher order rewrite systems type assignment systems typed lambda calculus applications utrecht vol 
lecture notes computer science springer pp 

fernandez modularity termination confluence combinations rewrite systems automata languages programming lund vol 
lecture notes computer science springer pp 

blanqui definitions rewriting calculus constructions proceedings th ieee symposium logic computer science boston ma ieee pp 

blanqui rewriting modulo deduction modulo rewriting techniques applications valencia spain vol 
lecture notes computer science springer pp 

walukiewicz termination rewriting calculus constructions journal functional programming 
geuvers church rosser property reduction typed calculi proceedings seventh annual ieee symposium logic computer science ieee computer society ieee computer society press pp 

geuvers werner church rosser property expressive type systems consequences metatheoretic study proceedings ninth annual ieee symposium logic computer science ieee computer society ieee computer society press pp 

barthe domain free pure type systems journal functional programming 
pottinger strong normalization terms theory constructions tech 
rep tr odyssey research associates december 
type inference pure type systems information computation 
fitch symbolic logic ronald press new york 
van benthem jutting mckinna pollack checking algorithms pure type systems types proofs programs international workshop types nijmegen may selected papers vol 
lecture notes computer science springer berlin pp 

bunder set theory combinatory logic ph thesis university amsterdam 
seldin studies illative combinatory logic ph thesis university amsterdam 
bunder inconsistencies illative combinatory logic zeitschrift fur mathematische logik und grundlagen der mathematik 
seldin progress report generalized functionality annals mathematical logic 
church set postulates foundation logic annals mathematics 
curry feys combinatory logic vol 
north holland publishing amsterdam reprinted 

