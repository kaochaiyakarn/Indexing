improving requirements tracing information retrieval jane huffman hayes computer science department laboratory advanced networking university kentucky hayes cs edu corresponding author presents approach improving requirements tracing framing information retrieval ir problem 
specifically focus improving recall precision order reduce number missed traceability links reduce number irrelevant potential links analyst examine performing requirements tracing 
ir algorithms adapted implemented address problem 
evaluated algorithms comparing results performance senior analyst traced manually existing requirements tracing tool 
initial results suggest retrieve significantly higher percentage links analysts existing tools time achieving comparable signal noise levels 

research primary motivators performing requirements tracing ensuring new system satisfy specified requirements performing impact analysis proposed changes 
facilitated developer builds detailed requirements trace development proceeds 
adoption case tools doors rdd rational initiating process improvement initiatives iso capability maturity model personal software process psp team software process tsp spark discipline organizations 
auditing verification validation experience shown old adage lead horse water drink true cases 
requirement tracing best mundane mind activity spent time alex computer science department university kentucky cs edu james osborne computer science department university kentucky jas netlab edu performing activity tell 
automation support time consuming error prone person power intensive task 
experience tools exist support activity numerous shortcomings require user perform interactive searches potential linking requirements design elements require user assign keywords elements document levels prior tracing return potential candidate links correct fail return correct links provide support easily retracing new versions documents 
times requirements traceability matrix rtm exist need ensure requirement completion understand change impact method easy fact requirements tracing needed 
requirements traces evaluated calculating metrics percentage actual matches recall percentage correct matches ratio total number candidate links returned precision 
mentioned current methods prone error require intense effort part analyst 
recall precision performance values methods widely known generalized 
presents results nasa funded research improve state art fact requirements tracing 
problem cast information retrieval problem algorithms developed analysis tool developed evaluation study performed 
retrieval thesaurus algorithm provided recall precision shorter period time analysts performing task 
section discusses related requirements tracing 
ir background information retrieval ir section 
discuss requirements tracing represented ir problem algorithms study section 
section discusses results obtained evaluation 
section presents areas 

related context areas interest requirements tracing ir applied problem requirements analysis 
addressed 
requirements tracing tackling requirements tracing problem decades 
pierce designed requirements tracing tool basically way build maintain requirements database facilitate requirements analysis system verification validation large navy acoustic sensor system 
hayes built front requirements tracing tool called software automated verification validation analysis system front processor 
written pascal interfaced requirements tracing tool ingres relational database 
allows extraction requirement text assignment requirement keywords specified shall tools largely keyword matching threshold setting matching 
years tools ported hypercard technology macs microsoft access visual basic running pcs 
described 
tools enhanced part independent verification validation iv efforts mission planning system cruise missile nasa code science projects 
barkley ramesh watkins neal discuss importance requirements tracing developer perspective explain basic concepts forward tracing backward tracing vertical tracing horizontal tracing 
examined run time tracing design 
approach uses requirement cards organized linear hierarchical stacks supports retracing 
discuss requirements tracing uml 
specifically look tracing artifacts cases class diagrams sequence diagrams business model analysis model design model back 
significant advances area requirements elicitation analysis tracing 
largely lexical analysis extraction analysis phoneme occurrences categorize analyze requirements artifacts 
software change impact analysis graphing technique may useful performing tracing changed requirements 
advances backward tracing multimedia requirements tracing 
huang propose event traceability technique supporting impact analysis performance requirements 
data propagated speculatively performance models determine impacts proposed change 
ramesh examine models traceability 
establish specific models low model traceability high model traceability sophisticated users 
typical low user created traceability links model requirement dependencies examine requirements allocated system components verify requirements satisfied assist change control 
typical high user hand uses traceability full coverage life cycle includes user customer process captures discussion issues decision rationale captures traces product process dimensions 
information retrieval requirements analysis dag perform automated similarity analysis textual requirements ir techniques 
promising method helped identify relationships requirements 
differs theirs examine requirements tracing fact focus assisting developers deal rapid arrival new requirements numerous diverse sources 
propose continuously analyze flow incoming requirements increase efficiency requirements engineering process 
applied probabilistic vector space ir model case studies trace source code manual pages trace java code functional requirements 
examined effect requiring recall probabilistic model achieves highest recall values percent smaller number documents retrieved performs better recall required 

information retrieval ir ir field studies problem finding relevant documents document collections user queries 
ir research appeared separate discipline computer science late 
advent world wide web growth data storage capacity computers lead growth number size document repositories generated new wave ir research 
ir provides excellent roadmap developing ir systems scratch 
refer reader interested history development ir sparck jones willet large collection seminal influential papers field 
ir attempts model individual documents document collections model user information needs 
ir methods determine relevant document representation query represented user information need 
large variety methods ir keyword retrieval arguably studied method 
keyword ir document repository analyzed determine key words terms important document query 
user queries analyzed keywords keywords compared ones associated document collection order determine matches 
keyword methods relevance document query expressed similarity measure computes closely representations document query match 
answer query form list documents descending order expected relevance query 
quality ir methods measured documents returned match user expectations 
typically formalized metrics precision recall 
precision computed fraction relevant documents list documents returned ir method query 
recall fraction retrieved relevant documents entire set documents retrieved omitted relevant query 
notice precision quantity usually relatively easy measure query list answers 
measuring recall harder task requires knowledge entire document collection 
ir methods usually designed large collections data typical test collection ir system gb industrial strength applications www search engines expected handle data collections orders magnitude greater provide answers seconds 
performance ir methods plays major role evaluation methods give higher precision recall impractical due time takes deliver answer 
wide array keyword retrieval models document collections 
boolean model simplest representation document boolean vector identifying keywords document 
vector model extends boolean model associating term document representation weight signifies assumed importance document collection 
consider standard vector retrieval model 
document collection denote representation vector model vector wn number terms document collection vocabulary wi abovementioned weight ith term 
weight computed wi tfi tfi term frequency ith keyword document inverse document frequency ith term document collection 
term frequency usually number occurrences term document usually normalized 
inverse document frequency computed idf df log dfi total number documents containing ith term document collection size document collection 
basically importance term judged term document discriminating term frequent term collection presence important document 
user query converted similar vector qn term weights 
model document vector query vector similarity computed cosine angle vectors dimensional space sim cos wi different extensions standard vector retrieval model exist modifications computation term weights document similarity document query vectors 
extensions vector model additional information retrieval user feedback 
original list answers user query compiled user asked specify returned documents relevant 
information possible re weigh query vector adjust similarity computation way documents similar ones user declared relevant get higher relevance rating documents similar ones declared irrelevant drop significantly relevance rating 
thesaurus retrieval 
classical vector model compares occurrences individual keywords key phrases 
situations needs take account presence document keywords synonymous related query keywords 
example query car retailer match document describing toyota classical vector retrieval may relevant query 
thesauri collections information relationship different terms 
thesauri ir allows extend classical vector retrieval account presence synonyms words representing subcategories query terms thesauri come variety different flavors detailed descriptions term hierarchies ad hoc lists synonym pairs 
exact way incorporating thesaurus ir method depends type 

automating requirements tracing tasks performed requirements tracing time consuming crucial activity generation candidate links 
aid currently available support tools largely analyst driven process 
performing forward lateral back tracing majority time analysts spend devoted generation sensible lists candidate matches 
portion requirements tracing process automating 
addressing problem automating requirements tracing process main objectives improve quality candidate lists decrease time needed generation 
notice ir metrics recall precision appropriate characteristics quality candidate lists recall measures fraction true matches included precision measures signal noise ratio 
metrics chose recall important objective 
ordering ensures analyst feels confident related links retrieved 
precision comes analyst sift numerous erroneous potential links 
notice precision total recall meaningless accomplishment 
example forward tracing achieved simply including single lower level requirement candidate lists higher level requirement 
apparent automatic generation candidate lists bound orders magnitude faster manual generation analyst assisted currently available interactive tools 
automated generation drastically reduces burden analyst timeconsuming frustrating activities keyword assignment interactive search candidate links 
major activities performed framing problem terms ir problem ii selecting ir algorithms implement iii preparing input requirement text iv analyzing output algorithms selecting strategies trimming algorithm output vi comparing algorithm performance human analyst performance 
activity discussed subsections algorithm evaluation activities deferred section 
requirements tracing ir problem illustrate requirements tracing represented ir problem forward tracing example 
note technique applied tracing design descriptions backward requirement specifications tracing requirement specifications laterally test specifications tracing design elements forward code elements collection highlevel requirements extracted high level requirements document 
similarly lower level document broken collection individual lower level requirements called design elements 
requirement design element treated separate document ir document repository 
generally contain text supplemental information tables graphs exist necessary requirement design element readable understandable 
list rn requirements list sm lower level design elements requirements trace mapping tr design elements tr satisfies part requirement design elements satisfy parts approach adopt research consider requirements tracing ir problem 
manual semi automatic technologies requirements tracing keyword keyword ir methods appear natural extension process 
particular formalize requirements tracing problem follows 
universe documents union individual requirements design elements 
vd kl vocabulary list terms appear higher level lowerlevel requirements 
document di represented vector term weights di wi wi 
assume existence similarity measure sim vectors di dj quantifies similarity 
process building candidate link lists requirements tracing problem reduced procedure computing matrix similarities vectors rn representations high level requirements vectors si sm representations lower level requirements 
high level requirement ri list mi design elements sim ri sorted order descending similarity value serves approximation candidate list 
list pruned variety different ways example considering top vectors list setting similarity threshold pruning specifications exhibit smaller similarity 
features requirements tracing process ir methods provide match problem automating generation lists candidate matches requirements tracing problem number specific features typical ir settings 
briefly address features discuss implications attempts apply ir techniques requirements tracing 

size domain 
ir methods designed working large numbers large documents presence large vocabularies 
requirements tracing domain fairly small collection documents order thousands requirements large scale software development project typical document collections number hundreds thousands millions documents 
individual requirement quite short contains just sentences 
limited document collection requirements form relatively limited vocabulary 
implications domain size 
traditional ir methods robust large collections data 
performance smaller collections influence individual components model final result grows coincidental matches true similarities 
careful evaluation ir methods 
ii hand small domain sizes apply complex ir techniques typically deemed slow large data collections 
part 

query interdependence 
customary ir systems consider queries independent 
reasonable assumption internet search engines process thousands queries second coming thousands different users 
requirements tracing problem queries higher level requirements related 
implications query interdependence 
result automated process matrix similarities higher level lower level requirements 
knowing rows matrix may independent perform secondary analysis matrix comparing candidate lists different requirements similarity measures 
selection modification ir algorithms initial study explored different ir methods classical vector ir model extensions simple thesauri constructs 
algorithms followed path data preparation generation answers 
individual requirements extracted higher lower level requirements documents automatic extraction scripts similar commercial tools 
requirement design element stored separate file 
repository generated input model building tool 
model building stage done requirement parsed tokenized ii stopwords words useful purposes retrieval shall detected removed token stream iii remaining tokens stemmed ensure different forms word treated term information informational iv vector representation document created stored 
byproduct master vocabulary repository constructed 
vector models requirements built actual retrieval process proceeds follows 
list queries higher level requirements case processed converted query vectors parse remove stopwords stem sequence 
similarity computation performed query design element pair 
list design elements non zero similarity created query sorted descending order similarity value 
lists returned analyst 
method implemented vanilla vector retrieval described section 
basis generic ir system developed graduate student ir course taught coauthors 
provided software modified repositories requirements design elements main computational procedures kept intact 
second method retrieval key phrases augmented traditional vector model associating list technical terms key phrases document repository 
model building software detected technical term added vocabulary treated term 
allowed raise relevance matches related technical terminology exclude coincidental matches 
example requirements design elements contain phrases ecs production environment ecs archive metadata standard vector model match keyword ecs generated false positive qualifying phrases vocabulary terms able decrease relevance match 
hand ecs archive metadata discriminating term individual components key phrase match documents started carry weight 
note generation list technical terms reasonably simple straightforward task readily definitions acronyms sections requirement documents 
third method thesaurus retrieval took idea incorporating technical lingo retrieval process step 
aid vector retrieval simple thesaurus 
entry thesaurus triple ki kj aij ki kj vocabulary terms words keyphrases aij perceived similarity coefficient ki kj 
analyst assigns coefficient thesaurus entry qualifier perceived 
model building stage thesaurus entries recognized added vocabulary new terms similar addition key phrases previous method 
main change behavior method respect comes query processing stage 
computing similarity query requirement rn design element standard cosine computation receives add generated matches thesaurus 
formally letting denote thesaurus new similarity measure method computed sim ij ki ij wi ri construction thesaurus thesaurus retrieval method reasonably straightforward procedure 
information linking technical terms data dictionaries acronym lists typically appendices requirements documents 
analyst assign similarity weights constructed pair final computation similarity fairly robust respect small fluctuations weights analyst needs provide estimate 
analyst chose assign value default value assigned 
thesaurus entry corrupted data missing packets establish similarity requirement design element contain matching terms 
ir algorithms implemented running linux 

evaluation undertook multi faceted evaluation effort ensure research objectives met 
built datasets open source nasa moderate resolution imaging documents purpose 
dataset contains high level requirements lower level requirements contains high level low level requirements 
dataset subset dataset 
verified trace trace 
accomplish senior analyst years experience examine traceability matrix provided table science data processing software requirements specification version document 
high level requirements traced level geolocation processing software requirements specification 
changes review 
example links deleted rtm links added 
approximately rtm remained unchanged 
second ran vanilla vector retrieval algorithm datasets 
developed analysis tool compare result matrix generated query tool manually verified rtm see section 
tool written computes precision recall document dataset 
data analysis tool examine results 
asked junior analysts years experience manually trace dataset 
results tracing activities shown table 
seen analysts tied outperformed vanilla vector algorithm recall 
analyst outperformed precision analyst outperformed 
vanilla vector algorithm slightly better recall larger dataset lower precision 
analysts recorded amount time took build candidate lists perform relative similarity assessment tasks performed algorithm 
took analysts minutes minutes respectively perform trace 
surprisingly algorithms ran minute 
table 
results baseline algorithm compared analysts 
analyst analyst vanilla vector vanilla vector recall precision performance min 
seconds seconds results surprising 
vanilla vector algorithm works vocabularies high low level requirements close generate multiple keyword matches 
case levels requirements written different terminology 
contributed low recall 
low precision explained fact coincidental matches common english words obscured technical terminology 
implemented additional ir algorithms extend vanilla vector algorithm discussed section 
key phrase retrieval algorithm slightly improved recall dataset see table 
precision went 
surprising technical terminology allowed capture previously undetected matches noise introduced 
retrieval thesaurus algorithm tested dataset 
addition senior analyst science applications international saic trace dataset latest version requirements tracing tool discussed section 
results shown table 
show sets recall precision measures 
average recall precision metrics represent respective means precision recall values individual requirements 
precision recall computed fractions total number correctly matches total numbers supplied answers correct links respectively 
table 
results enhanced algorithms compared 
tool analyst retrieval thesaurus algorithm correct links correct links total number candidates missed requirements average recall average precision recall precision performance hours included analyst performance seconds algorithm thesaurus building dataset included number high level requirements matching low level requirements 
purposes evaluation considered precision recall requirements candidates produced 
accounted average recall precision measures recall precision measures look total number correct links retrieved 
note retrieval thesaurus algorithm achieved recall precision dataset 
recall outperforms analyst 
algorithm average recall outperformed analyst tool 
analyst outperformed retrieval thesaurus algorithm precision requirement precision 
tool outperformed algorithm precision requirement 
noted took analyst hours perform trace 
thirteen hours spent building link library keyword assignment hours tracing data review examining links interactively searching hours 
thesaurus built minutes cutting pasting data dictionary appendices document 
closer look see algorithm missed links missed analyst missed 
high level requirements low level links match requirements missed retrieval thesaurus algorithm analyst count see missed requirements row table 
requirements missed caught algorithm 
requirements algorithm missed 
requirements thesaurus retrieval algorithm missed 
part examine requirements carefully understand algorithms improved 
saic analyst number observations tracing activity difficult tracing documents incomplete 
section titles helped 
requirement text incomplete ambiguous 
example sentences incomplete sentences subject case said deleted knowing acronyms hindered linking process 
linking parent child requirements take account analyst assigned status 
example selected link links selected status partial 
observation accurate 
requirements extracted rtm documents section headings repeated requirement text 
second observation true verified trace interviewed analysts manually traced dataset 
final comment valuable 
basically analyst saying may convinced high level requirement satisfied 
analyst find links leave 
analyst noted requirement partially satisfied 
study allow collection information 
consider improving studies 
analysis retrieval algorithms showed presence false positives 
noticed returned low relevance 
order analyze true effectiveness algorithms chose implement various thresholds trim lists candidate links 
decreasing size lists way allows improve precision potential cost recall 
decided thresholds top candidates candidates similarity candidates similarity similarity top candidate 
table shows recall precision algorithms change different trimming thresholds 
note trimming yields highest results algorithms retrieval thesaurus algorithm 
trimming table 
algorithm results trimming 
vanilla algorithm retrieval key phrases algorithm retrieval thesaurus algorithm top 
studied method improving candidate link generation applying ir techniques 
started classical vector space model algorithm vanilla vector algorithm 
algorithm outperform analysts existing tools terms recall precision perform faster keyword assignment required analysts 
developed extensions algorithm 
uses simple key phrase list easily pulled definitions acronym section requirement document 
retrieval key phrases algorithm resulted improved recall decreased precision 
added simple thesaurus 
information readily available definition list data dictionary appendix traced documents 
testing thesaurus retrieval algorithm dataset recall improved precision moved 
evaluation algorithms comparable keyword tool analysts showed retrieval thesaurus algorithm outperforms terms recall terms precision 
note techniques evaluated forward trace process 
techniques just easily applied back tracing lateral tracing 
number things pose problems analysts incomplete ambiguous requirement documents undefined acronyms lack intimate domain area project knowledge different lingo high low level documents written 
note methods studied address problem automating candidate link generation 
imperative analyst examine final candidate list effectively complete requirements tracing 
improving candidate link lists reduce burden analyst 
addition retrieval techniques stage process efficient 
currently process developing feedback agent candidate link generator software 
interesting area research ir techniques predict coverage satisfaction traced requirements lower level requirements 
initial results promising indicate additional warranted 
results limited effectiveness ir models broader scale remains seen 
larger scale study required broad reached 
secured agreement international space station allow documents tracing studies 
allow trace high level requirements tens thousands low level elements 
confident algorithms perform better document collection size increases 

acknowledgments funded nasa nag 
ken mcgill tim menzies stephanie ferguson pete mike norris bill bill international space station project project maintaining website provides useful data 
hua shao assistance vanilla retrieval algorithm assistance evaluation 

barkley rtl verification strategies ieee september pp 

process methods requirements tracing software development life cycle dissertation george mason university 
antoniol canfora de lucia merlo recovering traceability links code documentation 
ieee transactions software engineering volume october 
graph traceability approach software change impact analysis dissertation george mason university 
process multimedia information requirements identification traceability dissertation george mason university 
capability maturity model www sei cmu edu cmm cmms cmms html 
run time requirement tracing proceedings ieee acm international conference computeraided design santa clara ca 
huang chang sethi hu xia 
automating speculative queries event requirements traceability 
proceedings ieee joint international requirements engineering conference re essex germany september pages 
dag andersson karlsson feasibility study automated natural language requirements analysis market driven development requirements engineering vol 
issue june 
yates ribeiro neto modern information retrieval addison wesley 
frakes baeza yates eds information retrieval data structures algorithms prentice hall 
hayes huffman 
risk reduction requirements tracing 
conference proceedings software quality week san francisco california may 
product rdd www com new products modules html iso quality management quality assurance standards part guidelines application iso development supply installation maintenance computer software www iso ch level geolocation processing software requirements specification gsfc september 
science data processing software requirements specification version gsfc november 
requirements analysis pc 
proceedings society mechanical engineers asme computers engineering symposium energy environmental expo houston texas 
pierce requirements tracing tool proceedings software quality assurance workshop functional performance issues 
ramesh factors influencing requirements traceability practice communications acm december volume pp 

ramesh jarke models requirements traceability ieee transactions software engineering volume issue january page 
rational www rational com products index jsp multistrategy framework analyzing system requirements software development dissertation george mason university 
sparck jones willet readings information morgan kaufmann series multimedia information systems morgan kaufmann 
team software process personal software process www sei cmu edu tsp product doors www com products doors index cf framework requirements tracing uml proceedings seventh asia pacific software engineering conference december pp 

watkins neal requirements tracing ieee software volume issue july pp 

