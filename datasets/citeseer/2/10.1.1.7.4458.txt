krakatoa tool certi cation java javacard programs annotated jml march paulin mohring lri cnrs umr logical project inria bt 
universit paris sud centre orsay orsay cedex france describe basic structure environment proving java programs annotated jml speci cations 
method generic respect api suited javacard applets certi cation 
involves distinct components tool computes proof obligations core imperative language annotated pre post conditions coq proof assistant modeling program semantics conducting development proofs nally krakatoa tool translator reads java les produces speci cations coq representation semantics java program input language 
java modeling language jml short designed specify behavior java programs formally 
java expressions consequently easily integrated development environment java programmers 
particular main interest context javacard programs short programs require high level con dence 
example speci cation jml javacard api 
goals european project design tools formal veri cation jml speci cations propose tool called krakatoa 
general goal seek verifying jml annotated method java javacard program meets speci cations 
precisely focus verifying soundness implementations pre postconditions speci cation class invariants exceptional behavior 
amounts proving class invariants postconditions hold method execution provided invariants pre conditions valid 
preprint submitted elsevier science june supported features 
veri cation takes place source code level di erences treatment java code treatment javacard code 
dealing sequential programs dynamic loading 
javacard limitations forbidding multidimensional arrays need particular treatment simply assumption input programs accepted java compiler case javacard programs cap bytecode converter 
particular support javacard rewall transaction mechanisms handle speci ed directly jml class javacard api 
thorough article study java programs valid javacard 
support part jml 
roughly speaking jml constructs taken account class invariants requires assignable ensures signals clauses method loop invariants decreases clauses loop loop 
regarding decreases clauses means prove termination loops 
hand recursive methods handle measured clauses prove partial correctness prove termination 
assertions support speci constructs old result forall exists fresh modified speci constructs assignable clauses see section 
constructs max sum supported require particular care expressions de ned variable restricted nite set 
support model elds interpreted new elds class support associated represents clause 
related 
tools exist manipulate java programs annotated jml speci cations 
objectives di erent may aim producing code dynamic testing generating programs unitary test classes proving properties programs 
esc java system tries detect automatically simple errors dereferencing null pointer bounds access array 
useful discover bugs programs sound complete 
approaches loop jive jack tool krakatoa intended generate jml speci cation program veri cation conditions properties hold 
generated conditions proved interactively partial automation proof strategies 
tools di erent techniques 
jack environment developed 
code annotated jml speci cations generates set proof obligations calculus weakest preconditions uses system back proof obligations 
large part ort concerns user interface generated proof obligations associated java source code java notations 
applies jive user interface permits apply hoare logic rules hand proof obligations generated pvs hol 
point jive speci cation language differs syntactically jml 
loop semantics jml annotated java programs translated functional pvs expressions represent denotational semantics program 
properties programs established pvs tactics 
special theorems developed simulate hoare logic reasoning java programs computation weakest pre conditions 
approach 
originality lies methodology proceed translation java program input language 
tool completely stand tool 
aimed producing proof obligations programs written language especially designed program certi cation 
relies original method functional interpretation static analysis ects monads weakest pre conditions calculus 
input language ml minimal language limited imperative features exceptions 
translating java non trivial task describe remaining 
soon translation task ended generation proof obligations including calculus weakest preconditions performed tool 
tool multi prover output 
coq output generated proof obligations supposed proved interactively user coq proof assistant 
overview 
section explain approach user point view 
dijkstra classical dutch national flag example illustrate method 
go details works 
section give overview tool target translation 
section describe model java java expressions statements translated input language 
section show jml speci cations translated 
section devoted translation pure methods sense jml section devoted translation method bodies 
section consider statements generating abrupt termination break continue exceptions 
translated exception constructs allowing uniform handling proof obligations generation weakest pre conditions rules 
conclude section discussion unsupported features 
general architecture approach dutch national flag problem array colored blue white red elements rearrange blue elements occur rst white ones red ones 
keep things short consider array colors 
java may code colors public class flag public static final int blue white red public normal behavior ensures result blue white red public static pure boolean int give body 
fact going prove algorithm knowledge knowledge speci cation 
annotate pure meaning side ect consequence may speci cations 
algorithm works array colors introduce instance variable array invariant specify valid colors public int public invariant null forall int want specify method flag supposed solve problem 
purpose simpler introduce predicate says part array color public normal behavior requires ensures result forall int public pure boolean int int int speci cation main method public normal behavior modifiable ensures exists int blue white length red public void flag provide body flag method nice method swap permuting elements array speci cation public normal behavior requires modifiable ensures old old public void swap int int generic coq model classes java card jml source coq model coq specs specs program proof obligations interactive proof coq validations instantiation krakatoa fig 

methodology code consider flag public void flag int length loop invariant forall int blue white length red decreases case blue swap break case white break case red swap break goal prove method flag meets jml speci cation 
krakatoa approach performing veri cation schematized 
generic coq model classes model java objects memory heap independent particular program parameterized sets class eld names 
model de ne particular type java values primitive ones objects arrays type memory heap 
java program particular method generate input les coq 
rst step krakatoa applies called jml desugaring put method speci cation simple form exactly requires assignable ensures signals clause 
class invariants put form single assertion 
second step krakatoa performs static analysis ects tells method reads writes memory heap reads writes static variable program may throw exception distinction types exceptions see section 
ects approximated computable statically quite simple algorithm completely trivial amounts computing point 
shall point nullpointerexception treated di erently explained 
analysis ects tells read write heap reads heap write swap flag read write heap 
accesses static variable variable exists nally throw exception 
important design decision note krakatoa allow nullpointerexception thrown 
proof obligations ensure access non null value array access inside array bounds generated 
explain precisely done section 
third step generate speci cation les program le class 
includes declarations global variables example memory heap general variable static eld declaration method external function body type translation speci cation declaration predicate pure method 
process detailed section 
dutch flag example get declarations predicates flag flag flag invariant external function flag swap parameter 
fourth step generate coq les containing de nitions predicates functions corresponding pure methods class invariants 
dutch flag example generate coq de nitions predicates flag flag flag invariant automatically translated respective jml speci cations 
details jml speci cations translated section 
fth step generate le method want verify 
le contains annotated program translated jml speci cation java code automatically 
dutch flag example get function flag flag body actual translation body method flag 
krakatoa tool ends point 
step run tool generated les resulting method class coq le containing proof obligations method 
dutch flag example proof obligations generated 
proved user coq proof assistant 
help user task provide tactics deal operations de ned coq model 
particular tactics automatically apply lemmas regarding accesses updated objects 
dutch flag example lines coq tactics needed prove proof obligations di cult lines corresponds preservation loop invariant 
total development amounts lines coq source lines tactics written hand 
soon proof obligations completed proved initial method meets speci cation 
provide visible certi cate soundness approach tool provides validation method 
validation functional translation original method enriched type re ects jml speci cation program proof paradigm type theory may view program input output precondition post condition constructive proof formula 
case validation method coq function type shape memory mi heap memory result conditions input output heaps parameters pre conditions include requires class invariants typedness parameters post conditions include ensures signals clause class invariants relation input output heaps corresponding assignable clause 
correct type checking coq validation gives certi cate soundness method note proof obligations proved internally full automation validation provides certi cation soundness 
translation java program validation executed order test translation subtleties javacard semantics 
dutch ag example coq compilation type checking les model les proof obligations le proofs completed user validations needs machine ghz processor 
presentation tool tool aimed producing proof obligations provers including coq 
core language typed functional language la ml additional imperative features ml exception constructs 
syntax part language need 
full concrete syntax manual 
core language basic types int bool unit constant void 
usual functional languages syntactic distinction statements expressions statements seen expressions type unit 
expressions constants basic types primitive operations unary binary applied expressions variables local bindings var conditionals applications denoted curried form anonymous function de nitions denoted fun 
language mainly functional provides imperative features local binding var ref access var assignment var blocks loops done tool internal exception mechanism allows raising exception carrying value raise exc exception exc carrying value type declared exception exc catching exception try 
annotations expression annotated hoare triple notation generally expression may raise exceptions exc post 
exc post additionally loops annotated invariant inv variant var done order specify loop invariant variant supposed decrease loop 
jml annotations pre post inv boolean expressions formulas rst order logic 
variables program variables predicate function symbols assumed de ned target proof assistant declared logic keyword 
post may special keyword result denote value expression denote value evaluation expression 
external declarations program called sub program de ned earlier declared external 
external declaration form external prog id type ects ects type tell external program may access modify may throw exception 
general form type ects 
result reads writes raises post exc post possibly accessed possibly modi ed exceptions possibly raised 
keyword result may appear normal resp 
exceptional post condition refer returned value resp 
value carried thrown exception 
model translation java statements values 
structure java objects de ned data types 
type eld class names respectively classid 
introduce type java types expected constructors classid de ne type name value denote java values primitive ones integers booleans 
objects arrays 
represented addresses referring global heap type store 
type cell integer access array eld name accessing object 
introduce primitive function returns length array 
signature null value field cell index int cell value int instanceof value bool heap accesses updates 
specify operations allowed store mainly accesses updates regarding elds array cells 
access store value cell value update store value cell value store access update operations valid extra conditions satis ed 
cell meaningful value value object cell eld class value array cell non negative integer length array 
case update stored value allocated heap appropriate type cell updated 
order achieve introduce predicates express conditions access update performed 
valid cell value cell prop valid update store value cell value prop functions translate access update heap 
firstly global memory de ned modi able variable type store parameter heap store ref eld access translated hoare triple temp valid cell temp field access heap temp field translation note heap explicitly dereferenced modi able variable 
temp local variable necessary possible side ects expression 
analogously array access translated temp valid cell temp index access heap temp index eld array accesses access function protected pre condition ensures access valid 
null pointer dereferencing bounds accesses ruled point discussed section 
see section discussion authorize 
field update translated temp valid update heap temp field heap update heap temp field array update translated temp valid update heap temp index heap update heap temp index interpretation coq 
methodology data types realized coq 
lead design coq model java 
roughly speaking model contains enumerated type classid class names relation extends type java types booleans integers classes arrays enumerated type eld names type value java values primitive booleans integers null objects arrays generic model de ned coq functor parameterized set classes elds names 
instantiated automatically krakatoa java program 
built address heap kind name class object type length array 
store partial function pairs kinds addresses maps cells values 
furthermore constrained certain formedness conditions 
say value alive heap primitive value null pointer address allocated heap 
heap said formed value allocated heap cell valid value value cell alive appropriate type 
basic operations store update store new ref de ned object creation built way preserve formedness stores 
method calls class invariants assignable clauses handle assignable clauses de ne type mod loc corresponding assignable sets locations location de ned value cell 
expressions type may appear speci cations 
interpreted coq higher order type relation addresses cells 
object jml construction assignable clause loc mod loc loc mod loc inter loc mod loc mod loc mod loc access loc value cell mod loc array sub loc value int int mod loc loc value mod loc fields reachable loc store value mod loc reachable speci cations appear relations formed store value prop modifiable store store mod loc prop formed means value alive heap type modifiable means value alive alive location belong assignable locations allocated left unchanged method call translated 
parameter 
notice take dynamic method call account 
see section comments issue 
object creation involves allocation heap call constructor 
introduce new parameters new obj store classid value new array store int value store new ref store value store object creation new translated new new obj heap heap store new ref heap new ci parameter new 
new ci parameter user de ned constructor index optional number handle constructor overloading 
method constructor class annotated jml speci cation requires assignable ensures parameter generated parameter parameter value 
null formed heap invariant heap formed heap invariant heap 
reads read writes write invariant heap invariant heap 
modifiable heap heap value types int integer types bool booleans 
point case primitive types formed invariant generated 
read write ects computed second step described section 
dutch flag example krakatoa generates speci cations logic flag invariant store value prop order improve readability omitted constructors field index easily inferred context 
parameter flag swap parameter value int int null formed heap flag flag invariant heap unit reads heap writes heap access heap access heap access heap access heap access heap access heap access heap access heap flag invariant heap modifiable heap heap inter loc access loc access heap access loc access heap coq de nition interprets flag invariant predicate definition flag invariant heap store value access heap null flag int val access heap access heap 
handling pure methods pure methods jml dutch flag example need additional treatment need able annotations coq proofs 
regarding annotations need generate speci cation le declaration types regarding coq addition types need generate de nition jml speci cation 
di culty coq classical rst order logic clear distinction function symbols predicate symbols 
pure method return type boolean naturally translated function 
return type boolean natural translate predicate 
practice possible post condition form result expr result occur expr 
considerations technical important user pure methods appear frequently proof obligations important easy manipulate interactive proving 
dutch flag example get declarations logic flag int prop logic flag store value int int int prop get coq de nitions definition flag flag blue flag white flag red 
definition flag heap store value int val access heap access heap 
discussed pure methods may preconditions may throw exceptions 
semantics calls assertion invalid case precondition exceptional case return ed value 
means translation safely forgot precondition exceptional case 
translating method bodies translation method body translate jml speci cation way speci cation method body translated 
body translated shown section 
instance method flag translated annotated program roughly lines long 
available example programs krakatoa web page 
important issue regarding assignable clauses loops addition loop invariant user usually mandatory constrain set assignable locations inside body loop 
purpose method supposed assign set locations add loop invariant clause modifiable heap init heap means current heap di ers original heap calling method set locations 
abrupt termination exceptions abrupt termination occurs statement left break continue return thrown exception 
cases translated exceptions 
java exceptions handled unique exception declared exception exception value carrying java value java exception object 
exception throwing throw translated raise exception try catch construct try catch exc 
catch exc translated try exception temp instanceof temp exc 
instanceof temp exc raise exception temp signals clauses desugared multiple signals clauses gathered single expression stating exception instance declared exceptional types added 
easily translated exceptions constructs special treatment needed 
cases abrupt termination translated additional exceptions continue break return switch declare 
instruction return raise return method body body may return abruptly translated try body return instruction break lab raise break lab continue lab raise continue lab labelled loop translated try try continue lab raise continue done break lab raise break similar translation schemes exist switch try catch nally statements 
instance proving method withdraw classical electronic purse application class purse int balance public invariant balance public behavior requires modifiable balance ensures signals old balance balance old balance public void withdraw int throws balance balance throw new leads program lines long proof obligations needed 
important notice proof generation mechanism automatically split normal case exceptional cases need special exception handling proving obligations interactively 
example proof obligation exceptional post condition invariant kept case exceptional branch executed 
design choices tool krakatoa 
particular method interpreted terminating function raise dynamic errors nullpointerexception 
order ensure extra properties proved accessing memory cells 
note design choice due limitation method translation may translate eld access temp temp null raise nullpointerexception valid cell temp field access heap temp field result complicated translated programs probably complicated proof obligations 
assumption javacard programs rely nullpointerexception thrown catch 
architecture generic tool program certi cation provides modular readable interpretation java program intermediate language exceptions 
tool generates automatically proof obligations functional certi ed version program 
tool successfully experimented simple java programs ones 
currently verifying security properties particular exceptions raised real javacard applet 
experiment shows tool supports larger programs speci cations easily main problem prove proof obligations 
time consuming ort due low level automation currently provided coq 
numerous proof obligations remain human readable concerns designed model 
unsupported features important features supported krakatoa plan add near 
mentioned prove termination recursive methods issues semantics measured jml clauses particular mutually recursive methods 
consider possible ow integer operations 
plan continue map java numerical values integers adding preconditions numerical type assertions arithmetic operations prevent ow 
alternative model loop model semantic java operations precisely 
di culty handling overloading methods static typing phase java able resolve ambiguities method names unique 
hand explicit support rede nition overriding method de ned name parameter types existing superclass requiring dynamic method call 
handle case speci cation method combination speci cations rede ned methods depending dynamic type 
implemented 
methodological point constrain rede ned methods satisfy speci cation method overrides called subclassing contract discussed 
alternative models values developed functional semantics java values represented inductive type coq 
aim translate java variable variable avoid global heap 
course update operation case valid aliasing occurs di erent variables 
idea su cient syntactic conditions ensure aliasing occurs 
wanted address quickly real javacard applications bu er usually aliased decided move global memory model 
believe proofs easier model may associate di erent variables di erent values internalize separation memory 
particular plan experiment local representation heap di erent store eld 
experimenting alternative representation requires modify translation java programs 
acknowledgments jean jean christophe participation design krakatoa methodology anonymous referees fruitful comments rst version 
leavens baker ruby preliminary design jml behavioral interface speci cation language java tech 
rep iowa state university 
leavens poll clifton cheon ruby jml manual draft apr 
sun microsystems javacard tm application programming interface api java sun com products javacard 
chen javacard tm technology smart cards java series addisonwesley 
poll van den berg jacobs formal speci cation javacard tm api jml class computer networks 
meijer poll full formal speci cation java card jensen eds smart card programming security lecture notes computer science springer verlag pp 

burdy cheon cok ernst leavens leino poll overview jml tools applications tech 
rep dept computer science university nijmegen 
detlefs leino nelson saxe extended static checking tech 
rep compaq systems research center see research 
compaq com src esc dec 
jacobs loop project www cs kun nl bart loop 
van den berg huisman jacobs poll type theoretic memory model veri cation sequential java programs bert choppy mosses eds trends algebraic development techniques vol 
lecture notes computer science springer verlag pp 

van den berg jacobs loop compiler java jml margaria yi eds tools algorithms construction analysis software vol 
lecture notes computer science springerverlag pp 

meyer mller poetzsch ter jive system implementation description available www informatik hagen de pi publications html 
burdy jack java applet correctness kit developer conference 

abrial book assigning programs meaning cambridge university press 
jacobs weakest precondition reasoning java programs jml annotations available www cs kun nl bart 

veri cation non functional programs interpretations type theory journal functional programming appear 

multi language multi prover veri cation tool www lri fr ftp tool ps gz 

certi cation tool lri fr 
coq development team coq proof assistant manual version coq inria fr jan 
dijkstra discipline programming series automatic computation prentice hall int 
asymptotically optimal algorithm dutch national ag problem siam journal computing 
raghavan leavens desugaring jml method speci cations tech 
rep iowa state university 
leavens cheon clifton ruby cok design jml runtime assertion checking formal veri cation tech 
report iowa state university mar 
march paulin krakatoa proof tool krakatoa lri fr 
ruby leavens safely creating correct subclasses seeing superclass code tech 
report iowa state university jul 
proving pointer programs hoare logic mathematics program construction pp 

mehta nipkow proving pointer programs higher order logic baader ed th conference automated deduction lecture notes computer science springer verlag 

de programmes en des types de doctorat universit paris sud jul 

