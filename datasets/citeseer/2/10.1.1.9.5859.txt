finding frequent patterns large sparse graph george karypis department computer science engineering digital technology center army hpc research center university minnesota ee cs building union st se minneapolis mn karypis cs umn edu updated september pm presents algorithms horizontal vertical pattern discovery paradigms find connected subgraphs sufficient number embeddings single large undirected labeled sparse graph 
algorithms different methods determine number edge disjoint embeddings subgraph approximate exact maximum independent set computations prune infrequent subgraphs 
experimental evaluation real datasets various domains show algorithms achieve performance scale sparse input graphs vertices edges significantly outperform previously developed algorithms 
keywords pattern discovery frequent subgraph graph mining 
data mining process automatically extracting new useful knowledge hidden large datasets 
emerging discipline increasingly important advances data collection led explosive growth amount available data 
years increased interest developing data mining algorithms operate graphs 
graphs arise naturally number different application domains including network intrusion semantic web behavioral modeling vlsi reverse en supported part nsf ccr eia aci aci aci digital technology center university minnesota army high performance computing research center auspices department army army research laboratory arl cooperative agreement number daad 
content necessarily reflect position policy government official endorsement inferred 
access research computing facilities provided digital technology center minnesota supercomputing institute 
link analysis chemical compound classification 
effectively model structural relational characteristics variety datasets arising areas physical sciences chemistry fluid dynamics astronomy structural mechanics ecosystem modeling life sciences genomics proteomics health informatics home land defense information assurance network intrusion infrastructure protection terrorist threat prediction identification 
focus developing algorithms particular data mining task finding frequently occurring patterns graph datasets 
frequent patterns play critical role data mining tasks derive association rules act composite features classification algorithms cluster graph transactions help determining similarity graphs 
context graphs widely definition pattern connected subgraph definition :10.1.1.13.6963
different pattern definitions proposed 
distinct problem formulations frequent pattern mining graph datasets referred graph transaction setting single graph setting 
graph transaction setting input pattern mining algorithm set relatively small graphs called transactions single graph setting input data single large graph 
difference affects way frequency various patterns determined 
setting frequency pattern determined number graph transactions pattern occurs irrespective times pattern occurs particular transaction single graph setting frequency pattern number occurrences embeddings single graph 
due inherent differences characteristics underlying dataset problem formulation algorithms developed setting solve single graph setting algorithms easily adapted solve problem 
years number efficient scalable algorithms developed find patterns setting :10.1.1.13.6963
algorithms complete sense guaranteed discover frequent subgraphs shown scale large graph datasets 
developing algorithms capable finding patterns single graph setting received attention despite fact problem setting generic applicable wider range datasets application domains 
existing algorithms guaranteed find frequent patterns algorithms heuristic subdue tend large number frequent patterns computationally expensive scale large datasets :10.1.1.44.6602
developing algorithms find complete set frequent patterns single graph setting focus 
computationally efficient algorithms find subgraphs frequently embedded large sparse graph 
algorithm called hsigram follows horizontal approach finds frequent subgraphs breadth fashion second algorithm called vsigram follows vertical approach finds frequent subgraphs depth fashion 
algorithms incorporate efficient algorithms candidate generation frequency counting allow scale graphs containing vertices find patterns relatively low occurrence frequency 
experimental evaluation real graphs shows hsigram vsigram achieve reasonably performance scale large graphs substantially outperform previously developed approaches solving similar simpler versions problem 
rest organized follows 
section defines graph model reviews graph related definitions introduces notation 
section surveys related research area 
section formally defines problem frequent subgraph discovery discusses challenges associated finding computationally efficient manner 
section describes detail hsigram vsigram algorithms developed solving problem frequent subgraph discovery single large sparse graph 
section provides detailed experimental evaluation hsigram vsigram algorithms various real datasets compares existing algorithms 
section provides concluding remarks 
definitions notation graph sets set vertices set edges edge pair vertices assume graph undirected edge unordered pair vertices 
table notation notation description subgraph connected subgraph edges written size subgraph graphs size edges graph vertices graph cl canonical label graph dia diameter graph edges vertices degree vertex label vertex label edge graph obtained deletion edge input graph connected component set connected size subgraphs embeddings subgraph anchor edges subgraph candidate subgraph set candidates edges set candidates frequent subgraph set frequent subgraphs set frequent subgraphs size largest frequent subgraph set edge labels set vertex labels furthermore assume graph labeled 
vertex edge label associated drawn predefined set vertex labels edge labels 
vertex edge graph required unique label label assigned vertices edges graph 
vertices edges graph vertex edge label assigned call graph unlabeled 
graph graph subgraph graph connected path pair vertices graph 
graphs isomorphic topologically identical mapping edge mapped single edge vice versa 
case labeled graphs mapping preserve labels vertices edges 
automorphism isomorphism mapping graphs problem subgraph isomorphism find isomorphism subgraph determine included subgraph graph embeddings called identical set edges called edge disjoint edges common 
set embeddings particular subgraph graph overlap graph graph obtained creating vertex embedding creating edge pair non edge disjoint embeddings 
example subgraph overlap graph shown 
notation shown table 
code aaa code aaa simple examples codes canonical adjacency matrices canonical labeling key operations required frequent subgraph discovery algorithm mechanism check subgraphs identical 
way performing check perform graph isomorphism operation 
cases checks required set subgraphs better way performing task assign graph unique code sequence bits string sequence numbers invariant ordering vertices edges graph 
code referred canonical label graph denote cl 
canonical labels check graphs identical checking see identical canonical labels 
comparing canonical labels obtain complete ordering set graphs unique deterministic way regardless original vertex edge ordering 
simple way defining canonical label graph string obtained concatenating upper triangular entries graph adjacency matrix matrix symmetrically permuted string lexicographically largest smallest strings obtained permutations 
illustrated shows graph permutation adjacency matrix leads canonical label 
code aaa obtained concatenating order appear adjacency matrix obtained concatenating columns upper triangular portion matrix 
note permutation adjacency matrix lead code lexicographically smaller equal 
graph vertices complexity determining canonical label scheme making impractical moderate size graphs 
note problem determining canonical label graph equivalent determining isomorphism graphs graphs isomorphic canonical labels identical 
canonical labeling determining graph isomorphism known np complete 
practice complexity finding canonical labeling graph reduced various heuristics symbol vertex id vertex label blank elements adjacency matrix means edge corresponding pair vertices 
narrow search space alternate canonical label definitions take advantage special properties may exist particular set graphs 
part earlier research developed canonical labeling algorithm fully edge fast processing various vertex invariants reduce complexity determining canonical label graph 
algorithm compute canonical label graphs containing vertices extremely fast algorithm compute canonical labels different subgraphs 
maximum independent set discussed section frequent subgraph discovery algorithm focuses finding subgraphs embeddings edge disjoint 
critical step obtaining set edge disjoint embeddings particular subgraph find maximum independent set overlap graph 
graph subset vertices called independent vertices connected edge independent set called maximal independent set vertex edge connects vertex maximal independent set called maximum independent set mis contains vertices possible 
problem finding mis graph problems proved np complete remains bounded degree graphs 
shown size mis approximated factor polynomial time 
importance problem applicability domains attracted considerable amount research 
research focused developing faster exact algorithms approximate algorithms 
faster exact algorithm date algorithm robson solves mis problem time making possible solve reasonable amount time problem instances containing vertices 
study fast implementation exact maximum clique mc problem solver fast exact mis algorithms 
mis problem graph equivalent mc problem complement graph fast exact mis algorithm emis 
heuristic algorithms focus finding maximal independent sets size bounded terms size optimal solution number methods developed 
widely heuristic greedy algorithm selects vertex minimum degree deletes vertex neighbors graph repeats process graph empty 
detailed analysis algorithm shown produces reasonably approximations mis bounded low degree graphs 
particular graph maximum degree average degree size mis satisfies min size approximate mis algorithm 
related previous research finding frequent subgraphs graph datasets falls categories 
category contains algorithms finding subgraphs occur multiple times single input graph directly related algorithms second category contains algorithms find subgraphs occur frequently database small graphs :10.1.1.13.6963:10.1.1.44.6602
classes algorithms developed problem general mature moderate computational requirements scale large datasets 
rest section describe related research single graph setting directly related topic 
known algorithm finding recurring subgraphs single large graph subdue system originally developed improved years 
subdue approximate algorithm finds patterns compress original input graph substituting patterns single vertex 
evaluating extent particular pattern compress original graph uses minimum description length mdl principle employs heuristic beam search narrow search space 
approximations improve computational efficiency time prevents finding subgraphs frequent 
greedy heuristics algorithm similar subdue 
chawathe developed algorithm called seus uses data structure called summary construct lossy compressed representation input graph 
summary obtained collapsing vertices input graph label quickly prune infrequent candidates 
authors indicate summary data structure useful input graph contains relatively small number frequent subgraphs high frequency effective large number frequent subgraphs low frequency 
shimony algorithm finding frequently occurring subgraphs single labeled undirected graph maximum number edge disjoint embeddings graph measure frequency 
subgraph represented minimum number edge disjoint paths path number level approach grow patterns 
emphasis efficient candidate generation special attention paid frequency counting 
size graph size subgraph size subgraph patterns non monotonic frequency discovering frequent patterns single graph problem definition fundamental issue needs considered frequent subgraph discovery problem formulation similar single graph setting counting method occurrence frequency 
general possible methods frequency counting 
method embeddings subgraph considered different long differ edge non identical 
result arbitrary overlaps embeddings subgraph allowed 
hand second method embeddings considered different share edges edge disjoint 
methods illustrated 
example possible embeddings subgraph shown input graph 
embeddings figures share edges third embedding shares edges 
allow overlaps frequency subgraph 
ways counting frequency subgraph lead problems dramatically different characteristics 
allow arbitrary overlaps non identical embeddings resulting frequency longer downward closed frequency subgraph monotonically decrease function length 
illustrated 
subgraphs smaller subgraph embedding larger non identical embeddings 
hand determine frequency subgraph counting maximum number embeddings resulting frequency downward closed 
able take advantage frequency counting method downward closed essential computational tractability frequent pattern discovery algorithms 
reason problem formulations uses embeddings 
way formulating frequent subgraph discovery problem single graph setting follows definition exact discovery problem input graph undirected labeled parameter find connected undirected labeled subgraphs edge disjoint embeddings unfortunately quite problem intractable 
definition order determine subgraph frequent need find overlap graph non subgraph input graph embedding embedding embedding embedding embedding embedding overlaps overlapped embeddings identical embeddings contain independent set size subgraph relatively frequent compared frequency threshold approximate mis algorithms quickly tell subgraph frequent 
cases approximate mis algorithm find sufficiently large independent set exact mis needs computed pattern kept discarded 
depending resulting size maximum independent set subgraph identified frequent infrequent 
need find frequent subgraphs find exact frequency exact mis needs computed overlap graph pattern 
cases solving exact mis problem np complete see section definition frequent subgraph discovery problem tractable relatively simple input graph 
problem practical propose alternative formulations find frequent subgraphs solving exact mis problem 
definition approximate discovery problem input graph undirected labeled parameter find connected undirected labeled subgraphs edge disjoint embeddings possible 
definition upper bound discovery problem input graph undirected labeled parameter find connected undirected labeled subgraphs upper bound number edge disjoint embeddings threshold essentially solutions problems subset superset solution definition respectively 
formulation definition asks subset solution definition requires embeddings subgraph form overlap graph approximate mis size greater equal second formulation definition asks superset solution definition requires upper bound size exact mis overlap graph greater equal note discussed section upper bounds easily obtained algorithm approximate algorithms 
algorithms finding frequent subgraphs large graph developed algorithms called hsigram vsi gram find frequent subgraphs definitions described section 
algorithms frequent patterns conceptually organized form lattice referred lattice frequent subgraphs 
kth level lattice contains frequent subgraphs edges size subgraphs node level representing subgraph connected nodes level corresponding distinct nonisomorphic connected size subgraph goal hsigram vsigram identify various nodes lattice frequency associated subgraphs 
difference algorithms method discover generate nodes lattice 
hsigram follows horizontal approach discovers nodes breadth fashion vsigram follows vertical approach discovers nodes depth fashion 
horizontal vertical approaches previously find frequent subgraphs setting origins algorithms developed finding frequent itemsets sequences :10.1.1.13.6963
detailed description hsigram vsigram provided rest section 
horizontal algorithm hsigram general structure hsigram shown algorithm notation pseudo code shown table 
hsigram takes input graph minimum frequency threshold parameter mis type specifies particular problem definition discussed section 
starts enumerating frequent single double edge subgraphs enters main computational loop lines 
iteration hsigram generates candidate subgraphs size joining pairs size frequent subgraphs line computes frequency hsigram count line 
candidate subgraphs frequency lower minimum threshold discarded remaining kept level algorithm 
computation terminates frequent subgraphs generated particular iteration 
key components hsigram algorithm significantly affect computational complexity stands single graph miner 
algorithm hsigram mis type minimum frequency threshold 
mis type approximate exact upper bound 
frequent size subgraphs frequent size subgraphs hsigram gen candidate freq hsigram count mis type freq add return methods perform candidate generation compute frequency candidate subgraphs 
rest section provide additional details operations performed describe various optimizations designed reduce runtime 
candidate generation hsigram generates candidate subgraphs size joining frequent size subgraphs 
order frequent size subgraphs eligible joining contain size connected subgraph 
simplest way generate complete set candidate subgraphs join pairs size frequent subgraphs common size subgraph 
unfortunately problem approach particular size subgraph may different size subgraphs result consider possible subgraphs perform resulting join operations generating candidate pattern multiple times generating large number candidate patterns downward closed 
algorithm spend significant amount time identifying unique candidates eliminating non downward closed candidates operations non trivial require determine canonical label generated subgraphs 
hsigram addresses problems joining frequent subgraphs share certain properly selected size subgraph 
algorithm shows pseudo code candidate generation properly selected size subgraph denoted frequent size subgraph size connected subgraphs smallest canonical label second smallest canonical label various connected size subgraphs refer subgraphs primary subgraphs note size subgraph isomorphic 
hsigram join frequent subgraphs join operation done respect common size subgraph 
proof approach correctly generate algorithm hsigram gen pair children join test downward closure property holds 
connected size subgraphs primary subgraphs size skip false freq skip true break skip true add add children children return algorithm hsigram count mis type hsigram embed build overlap graph 
gm decompose mis 
gm easy handle mis mis emis mis type approximate mis mis mis type exact mis mis emis mis type upper bound mis mis min set connected size subgraphs lowest frequency return min mis valid candidate subgraphs 
candidate generation approach dramatically reduces number redundant non downward closed patterns generated leads significant performance improvements naive approach 
frequency counting hsigram count algorithm computes frequency candidate subgraph identifying embeddings constructing overlap graph embeddings mis type parameter finding approximate exact mis overlap graph 
outline process shown algorithms 
rest section describe various embeddings identified followed description method efficiently compute desired maximal independent sets 
embedding identification order identify embeddings candidate hsigram embed shown algorithm needs solve subgraph isomorphism problem 
performing subgraph isomorphism candidate scratch may expensive especially input graph large 
hsigram embed reduces computational requirement anchor edges 
anchor edge partial embedding candidate works algorithm hsigram embed set anchor edges intersection anchor edges collect unique embeddings anchor edge embeddings includes edge collect unique anchor edges embedding choose edge arbitrarily add return constraint subgraph isomorphism problem narrows search space anchor edge 
specifically hsigram embed creates uses anchor edges follows 
list anchor edges created right frequency counting size frequent subgraph converting list non identical embeddings 
edges counting candidate size denote frequent subgraph size suppose non identical embeddings total 
frequency counting list embeddings 

anchor edge embedding edge part hsigram embed arbitrarily chooses edge adds line algorithm 
overlapped embeddings embeddings may lead anchor edge 
iteration suppose candidate contains frequent subgraph edges may distinct frequent subgraphs size holds anchor edge list 
starting frequency counting hsigram embed selects frequency lowest 
hsigram embed checks edge shortest path length denoted diameter denoted dia 
edge may part embedding frequent subgraph size set frequent subgraphs size inside embedding compute exact path length edges requires pairs shortest paths may computationally expensive large 
hsigram embed bounds length difference lengths shortest path lengths arbitrarily chosen vertex respectively 
embedding dia holds dm dia true may belong embedding embedding see 
find removed line 
subgraph isomorphism performed pruning procedure effectively reduce run time 
dia dn dm distance estimation edges removing unnecessary anchor edges remaining anchor edges subgraph isomorphisms repeatedly identified set embeddings built line 
computing frequency frequency subgraph computed hsigram count function shown algorithm 
particular hsigram count computes different frequencies 
denoted mis computed size mis overlap graph created embeddings second denoted frequency connected size subgraphs line represents upper bound frequency derived entirely lattice frequent subgraphs 
case mis computed definition frequency bound provided may tighter may lead effective pruning 
reason frequency obtained minimum mis frequency mis computed follows lines 
pattern non identical embeddings hsigram count generates overlap graph hsigram count decomposes connected components 

connected component checks maximum degree vertices equal cycle path computes maximum independent set directly emis algorithm trivial compute exact mis class graphs line 
maximum degree greater hsigram count uses result algorithm line result emis algorithm line upper bound size exact mis equation 
summation mis sizes components final value mis note decomposition overlap graph connected components allow take advantage properties special graphs obtain tighter bounds component maximum degree lower maximum degree entire overlap graph 
addition edge marked included embedding frequent subgraph 
unmarked edges removed proceeding iteration 
vertical algorithm vsigram computationally expensive step hsigram algorithm frequency counting needs repeatedly perform subgraph isomorphism computations 
time greatly reduced storing anchor edges store complete set embeddings successive levels algorithm 
hsigram level level structure complete embeddings need stored entire set frequent candidate patterns successive pair levels 
substantially increases memory requirements approach making impractical interesting datasets 
hand context vertical algorithm storing complete set embeddings feasible need subgraphs path current node root 
vertical algorithm potentially computational advantage horizontal algorithm motivated development vsigram 
developing efficient algorithms generate lattice frequent subgraphs depth fashion critical steps need addressed 
step method ensure node lattice depth subtree rooted node discovered explored multiple times 
important node level connected different nodes level 
result mechanisms prevent repeated generation node depth algorithm performing redundant computations generating nodes multiple times adversely impacting performance algorithm 
vsigram eliminates redundant computations assigning node level corresponding subgraph unique parent node level corresponding subgraph allowed create subgraph called generating parent details achieved provided section 
second step method create successor nodes course traversal 
case hsi gram corresponds candidate generation phase performed joining frequent subgraphs previous level 
lattice explored depthfirst fashion joining approach algorithm may discovered required frequent subgraphs 
address problem vsigram creates successor nodes extended subgraphs analyzing embeddings current subgraph identifying distinct edge extensions embeddings sufficiently frequent 
frequent extensions generating parent successor nodes depth traversal 
general structure vsigram shown algorithm 
vsigram starts determining frequent size patterns uses starting point recursive depth extension vsigram extend function vsigram extend takes input size frequent subgraph embeddings proceeds follows 
size embedding identifies stores possible size subgraph contains set subgraphs extracts size subgraphs isomorphic stores vsigram extend eliminates subgraphs algorithm vsigram vsigram mis type frequent size subgraphs embeddings vsigram extend return vsigram extend mis type embedding subgraphs containing generating parent continue compute freq freq continue add return generating parent lines infrequent lines 
subgraphs remaining frequent subgraphs size obtained edge extension input recursive call 
recursion terminates depth search backtracks 
rest section provide additional details various operations performed describe various optimizations designed reduce vsigram run time 
generating parent identification scheme vsigram uses determine generating parent particular subgraph follows 
suppose size frequent subgraph just created extension size frequent subgraph canonical labeling order edges vertices uniquely determined 
vsigram removes edge disconnect obtains size subgraph isomorphic generating parent vsigram keeps exploration similar type approaches earlier context vertical algorithms graph transaction setting 
share idea avoids redundant frequent pattern generation traverses lattice patterns tree 
efficient subgraph extension starting frequent size subgraph vsigram obtains extended subgraphs size adding additional edge preserving connectivity possible embeddings 
specifically embedding frequent subgraph vsigram enumerates edges added form size extended subgraph 
edges represented tuple elements called stem vertex canonical vertex id graph size graph canonical vertex ids canonical automorphism ids edge corresponding vertex ids label edge 
corresponding vertex show outside subgraph automorphism subgraph stem representation directly 
particular embedding frequent subgraph may vertex mapping subgraph embedding 
simply pair vertex ids subgraph represent stem depending mapping edge addition considered different stem result wrong frequency subgraph 
avoid problem time stem generated representation normalized follows vsigram enumerates possible automorphisms denoted 
appropriate obtain canonical vertex id vertex 
canonical id vertex denoted defined min 
automorphism subscript gives canonical id called canonical automorphism denoted arg min example size graph shown shows vertex note smaller subscript stem defined follows 
stem rewritten automorphism invariant representation vsigram properly determine frequency size extended subgraphs 
additional optimization keeping track edge creation status frequent subgraph maintains threedimensional table called connection table 
element table denoted ct shows possible form edge vertices edge label time stem discarded corresponding element connection table updated show impossible create edge label ct deactivated frequent subgraph size frequent subgraph edge edge label reduce number stems generated looking connection table stem enumeration phase 
frequency counting vertical algorithm size extension processed size frequent subgraph visible generating parent 
vsigram frequency counting similar hsigram count computation see line algorithm 
hsigram enforces downward closure property frequency size candidate frequency size subgraphs candidate 
vsigram take step vsigram hold size frequent subgraphs time size extended subgraph created 
vsigram simply uses frequency size generating parent current size extension obtained 
result vsigram pruning looser hsigram 
experimental evaluation section study performance proposed algorithms various parameters real datasets 
experiments done dual amd athlon mp ghz machines gbytes main memory running linux operating system 
run times reported seconds 
datasets different datasets obtained different domain evaluate compare performance hsi gram vsigram 
basic characteristics datasets shown table 
note graphs consist multiple connected components hsigram vsigram algorithm treat large graph discover frequent patterns definitions described section 
aviation credit datasets obtained 
aviation dataset originally aviation safety reporting system database credit dataset uci machine learning repository 
directed edges original graph data converted undirected ones 
aviation dataset removed undirected edges show near relation vertices edges form cliques graph difficult mine 
citation dataset created citation graph kdd cup 
vertex graph corresponds document edge corresponds citation 
algorithms undirected graphs direction citations ignored 
original dataset meaningful label vertices generated vertex labels follows 
clustering algorithm form clusters document abstracts thematically coherent topics assigned cluster id label corresponding vertices 
edges labels difference publication year papers 
example papers published edge created document vertices label 
vertices resulting graph high degree authorities hubs kept vertices degree equal 
contact map dataset proteins protein data bank pairwise sequence identity lower 
vertices graphs correspond different amino acids edges connect amino acids consecutive sequence positions contact structure 
amino acids considered contact distance atoms furthermore creating graphs considered non local contacts defined contacts amino acids sequence separation amino acids 
dtp dataset collection chemical compounds randomly selected dataset chemical compounds provided developmental program dtp national cancer institute note chemical compound forms connected component components dataset 
vertex corresponds atom label represents atom type 
edge formed vertices corresponding atoms connected bond 
type bond edge label distinct edge labels 
vlsi dataset obtained international symposium physical design benchmark suite corresponds netlist real circuit 
netlist converted graph removing nets longer star approach replace net hyperedge set edges 
note dataset limited size largest discovered pattern edges 
values frequency threshold experiments frequent patterns contained edges paths highly connected nature underlying graph large number paths making hard find longer path patterns reasonable amount time 
results table shows results obtained hsigram vsigram algorithms different datasets wide range minimum frequency threshold values different mis problem definitions 
experiment table shows amount time seconds re dtp structural information 
dtp nci nih gov docs database structural information structural data html cs ucla edu cheese html table datasets experiments dataset connected vertices edges labels components vertex edge aviation credit citation contact map dtp vlsi quired particular algorithm total number patterns discovered size largest pattern 
entries table marked represents experiments aborted high computational requirements 
results see expected datasets algorithms value decreases runtime finding frequent patterns increases 
rate increase runtime follows corresponding rate increase number patterns discovered 
results table help illustrate relation key variables experiments type particular algorithm hsigram vs vsi gram type frequency calculation approximate mis exact mis upper bound mis 
general amount time required vsigram smaller required hsigram 
fact value frequency threshold decreases vsigram times faster hsigram 
true datasets approximate exact mis problem formulation datasets upper bound mis formulation leads number frequent patterns algorithms 
discussed section reason performance advantage fact keeping track embeddings frequent subgraphs depth path vsigram spends significantly time subgraph isomorphism related computations hsigram 
certain datasets upper bound mis formulation vsigram ends generating significantly patterns generated hsigram 
example case dtp dataset vsi gram generates times patterns hsi gram 
cases amount time required vsi gram substantially greater required hsi gram times greater dtp example 
reason fact depth nature vsigram take advantage frequent subgraph lattice get tight upper bound frequency subgraph frequency subgraphs bases upper bound frequency generating parent 
hand level level nature hsigram information subpatterns obtains better upper bounds see discussion section 
comparing different mis problem formulations see approximate mis usually leads fastest execution time algorithms 
datasets various overlap graphs table run time seconds number frequent patterns different datasets 

aviation run time sec number patterns largest pattern size 
exact ub 
exact ub 
exact ub citation run time sec number patterns largest pattern size 
exact ub 
exact ub 
exact ub contact run time sec number patterns largest pattern size map 
exact ub 
exact ub 
exact ub credit run time sec number patterns largest pattern size 
exact ub 
exact ub 
exact ub dtp run time sec number patterns largest pattern size 
exact ub 
exact ub 
exact ub vlsi run time sec number patterns largest pattern size 
exact ub 
exact ub 
exact ub note 
dashes indicate computation aborted long run time memory exhaustion 
minimum frequency threshold hsigram vsigram approx approximate mis exact exact mis ub upper bound mis reasonably small true datasets vlsi exact mis formulation leads small execution time 
upper bound mis formulation tends slower primarily generates patterns 
advantage upper bound formulation exact mis seen vlsi graph resulting overlap graph large exact mis computations finish reasonable amount time 
comparing number patterns approximate exact mis formulations see general approximate algorithm fails discover small number patterns 
table subdue results dataset run time number pattern frequency sec patterns size patterns aviation citation contact map credit dtp vlsi performance comparison existing algorithms comparison subdue ran subdue version datasets described section version latest runs significantly faster current latest version :10.1.1.44.6602
measured run time number discovered patterns size frequency 
results shown table 
results obtained subdue default settings vlsi dataset 
vlsi dataset run subdue find subgraphs contain edges done case hsigram vsigram 
note subdue default settings returns subgraphs determined important 
inherent differences subdue algorithms impossible perform direct comparison results generate 
reason comparisons focus highlighting key points 
amount time required subdue general considerably higher required algorithms 
example subdue finish computation aviation dataset spending entire days 
citation contact map datasets subdue find meaningful patterns patterns frequency 
credit dataset minimum frequency threshold hsigram vsi gram upper bound mis spent seconds respectively discover number subgraphs 
largest pattern edges frequency 
contrast largest pattern subdue edges frequency 
indicates small subgraphs relatively high frequency subdue focus discover larger patterns 
see similar result dtp dataset 
size patterns subdue small edges frequency high 
hand results table show minimum frequency threshold hsigram vsigram exact mis spend seconds respectively find frequent subgraphs largest size 
comparison seus seus algorithm designed find frequent subgraphs single graph setting 
determining frequency subgraph consider embeddings irrespective disjoint 
result subgraph may high frequency small number edge disjoint embeddings overlapped embeddings 
run time seus pte chemical dataset reported 
seus seus spent seconds find frequent subgraphs frequent subgraphs second 
dataset minimum frequency threshold vsigram upper bound mis requires seconds find frequent subgraphs translates frequent subgraphs second 
similarly credit dataset called credit seus spent seconds produce frequent subgraphs frequent subgraphs second vsigram upper bound mis finds frequent subgraphs seconds minimum frequency threshold frequent subgraphs ftp ftp comlab ox ac uk pub packages ilp datasets progol tar second 
addressed problem finding subgraphs edge disjoint embeddings large sparse graph step critical discovering patterns graph datasets 
studied distinct formulations problem motivated complexity identifying maximum set edge disjoint embeddings subgraph developed frequent subgraph mining algorithms solving 
algorithms horizontal vertical paradigms respectively 
experimental evaluation real datasets showed datasets problem formulations algorithms achieve performance vertical algorithm times faster 
agrawal gehrke gunopulos raghavan 
automatic subspace clustering high dimensional data data mining applications 
proc 
acm sigmod int 
conf 
management data 
agrawal srikant 
fast algorithms mining association rules 
jarke zaniolo editors proc 
th int 
conf 
large data bases vldb pages 
morgan kaufmann september 
agrawal srikant 
mining sequential patterns 
yu chen editors proc 
th int 
conf 
data engineering icde pages 
ieee press 
berendt hotho stumme 
semantic web mining 
international semantic web conference iswc pages 
berman westbrook feng bhat bourne 
protein data bank 
nucleic acids research 
berman 
approximation properties independent set problem degree graphs 
proc 
workshop algorithms data structures pages 
blake merz 
uci repository machine learning databases 
borgelt berthold 
mining molecular fragments finding relevant substructures molecules 
proc 
ieee international conference data mining icdm 
chew huttenlocher kedem kleinberg 
fast detection common geometric substructure proteins 
proc 
rd acm recomb international conference computational molecular biology 
cook holder 
substructure discovery minimum description length background knowledge 
journal artificial intelligence research 
cook holder 
graph data mining 
ieee intelligent systems 
cook holder 
knowledge discovery structural data 
journal intelligent information systems 
de raedt kramer 
level wise version space algorithm application molecular fragment finding 
proc 
th international joint conference artificial intelligence ijcai 
dehaspe toivonen king 
finding frequent substructures chemical compounds 
agrawal stolorz piatetsky shapiro editors proc 
th acm sigkdd international conference knowledge discovery data mining kdd pages 
aaai press 
deshpande karypis 
automated approaches classifying structures 
proc 
nd workshop data mining bioinformatics 
deshpande karypis 
frequent sub structure approaches classifying chemical compounds 
proc 
ieee international conference data mining icdm 
appear 
feige goldwasser lovasz safra szegedy 
approximating clique np complete 
proc 
nd ieee symposium foundations computer science focs pages 

graph isomorphism problem 
technical report tr department computing science university alberta 
garey johnson 
computers intractability guide theory np completeness 
freeman new york 
chawathe 
discovering structures summaries 
technical report cs tr department computer science university maryland 
chawathe 
seus structure extraction summaries 
proc 
th international conference discovery science 
gonzalez holder cook 
application graph concept learning predictive toxicology domain 
proc 
predictive toxicology challenge workshop 
rice willett 
identification tertiary structure resemblance proteins maximal common subgraph isomorphism algorithm 
journal molecular biology 
karypis 
algorithm clustering sequence datasets 
proc 
ieee international conference data mining icdm 
radhakrishnan 
greed approximating independent sets sparse bounded degree graphs 
algorithmica 
han pei yin 
mining frequent patterns candidate generation 
proc 
acm sigmod int 
conf 
management data dallas tx may 
hochbaum 
efficient bounds stable set vertex cover set packing problems 
discrete applied mathematics 
holder cook :10.1.1.44.6602
substructure discovery subdue system 
proc 
aaai workshop knowledge discovery databases pages 
hong zhou wang shi 
efficient algorithm frequent connected subgraph extraction 
proc 
th pacific asia conference knowledge discovery data mining pakdd volume lecture notes computer science pages 
springer verlag 
huan wang prins 
efficient mining frequent subgraph presence 
proc 
ieee international conference data mining icdm 
appear 
inokuchi washio motoda 
apriori algorithm mining frequent substructures graph data 
proc 
th european conference principles practice knowledge discovery databases pkdd pages lyon france september 
inokuchi washio motoda 
complete mining frequent patterns graphs mining graph data 
machine learning march 
inokuchi washio nishimura motoda 
fast algorithm mining frequent connected subgraphs 
technical report rt ibm research tokyo research laboratory 
jensen goldberg editors 
artificial intelligence link analysis papers fall symposium 
aaai press 
cook holder 
discovery evaluation graph hierarchical conceptual clusters 
journal machine learning research 
holder cook 
hierarchical conceptual structural clustering 
international journal artificial intelligence tools 
kdd cup 
www cs cornell edu projects kddcup datasets html 
khanna motwani sudan vazirani 
syntactic versus computational views approximability 
proc 
ieee symposium foundations computer science pages 
kleinberg 
authoritative sources hyperlinked environment 
journal acm jacm 
kleinberg kumar raghavan rajagopalan tomkins 
web graph measurements models methods 
lecture notes computer science 
ko 
logic induction valid behavior specifications intrusion detection 
ieee symposium security privacy pages 
koch lengauer 
algorithm finding maximal common set protein structures 
journal computational biology 
kramer de raedt 
molecular feature mining hiv data 
proc 
th acm sigkdd international conference knowledge discovery data mining kdd pages 
karypis 
efficient algorithm discovering frequent subgraphs 
ieee transactions knowledge data engineering 
press 
karypis 
frequent subgraph discovery 
proc 
ieee international conference data mining icdm november 
karypis 
efficient algorithm discovering frequent subgraphs 
technical report university minnesota department computer science 
lee stolfo 
framework constructing features models intrusion detection systems 
acm transactions information system security 
wolfson 
multiple structural alignment core detection geometric hashing 
proc 
th international conference intelligent systems molecular biology pages heidelberg germany august 
wolfson 
general efficient automated method multiple structure alignment detection common motifs application proteins 
journal computational biology 
li han pei 
accurate efficient classification multiple class association rules 
proc 
ieee international conference data mining icdm 
liu hsu ma 
integrating classification association rule mining 
th internation conference knowledge discovery data mining 
mckay 
nauty users guide 
cs anu edu au bdm nauty 
mckay 
practical graph isomorphism 
congressus numerantium 
mitchell rice willett 
techniques derived graph theory compare secondary structure motifs proteins 
journal molecular biology 
mooney melville tang shavlik de castro page costa 
relational data mining inductive logic programming link discovery 
national science foundation workshop generation data mining november 
muggleton 
scientific knowledge discovery inductive logic programming 
communications acm 
ard 
fast algorithm maximum clique problem 
discrete applied mathematics 
palmer gibbons faloutsos 
anf fast scalable tool data mining massive graphs 
proc 
th acm sigkdd internal conference discovery data mining kdd edmonton ab canada july 
pennec ayache 
geometric algorithm find small highly substructures proteins 
bioinformatics 
raymond 
heuristics similarity searching chemical graphs maximum common edge subgraph algorithm 
chem 
inf 
comput 
sci 
read corneil 
graph isomorph disease 
journal graph theory 
robson 
algorithms maximum independent sets 
journal algorithms 
srinivasan king muggleton sternberg 
predictions ilp 
zeroski lavra editors proc 
th international workshop inductive logic programming volume pages 
springer verlag 
subdue databases 
cygnus uta edu subdue databases index html 
shimony 
computing frequent graph patterns semistructured data 
proc 
ieee international conference data mining icdm pages 
wang wang shasha shapiro rigoutsos zhang 
finding patterns dimensional graphs algorithms applications scientific data mining 
ieee transactions knowledge data engineering july august 
wasserman faust 
social network analysis methods applications 
cambridge university press 
yan han 
gspan graph substructure pattern mining 
proc 
ieee international conference data mining icdm 
yan han 
mining closed frequent graph patterns 
proc 
th acm sigkdd international conference knowledge discovery data mining kdd 
yoshida motoda 
clip concept learning inference patterns 
artificial intelligence 
yoshida motoda indurkhya 
graph induction unified learning framework 
journal applied intelligence 
zaki gouda 
fast vertical mining diffsets 
proc 
th acm sigkdd international conference knowledge discovery data mining kdd 
