distributed computing practice condor experience douglas thain todd tannenbaum miron livny computer sciences department university wisconsin madison west dayton street madison wi summary condor project enabled ordinary users extraordinary computing 
today project continues explore social technical problems cooperative computing scales ranging desktop world wide computational grid 
chapter provide history philosophy condor project describe interacted projects evolved field distributed computing 
outline core components condor system describe technology computing correspond social structures 
reflect lessons experience chart course traveled research ideas grow production systems 
key words condor grid history community planning scheduling split execution 
ready access large amounts computing power persistent goal computer scientists decades 
visions computing utilities pervasive simple telephone driven users system designers 
recognized power achieved inexpensively collections small devices expensive single supercomputers 
interest schemes managing distributed processors popular minor controversy meaning word distributed early clear distributed computing feasible researchers began take notice distributed computing difficult 
messages may lost corrupted delayed robust algorithms order build coherent controllable system 
lessons lost system designers early 
production systems locus grapevine fundamental tension consistency availability performance distributed systems 
distributed computing practice condor experience environment condor project born 
university wisconsin miron livny combined doctoral thesis cooperative processing powerful crystal multicomputer designed dewitt finkel solomon novel remote unix software designed michael litzkow 
result condor new system distributed computing 
contrast dominant centralized control model day condor unique insistence participant system remain free contribute little cared 
condor system soon production computing environment university wisconsin partially concern protecting individual interests 
production setting curse blessing condor project learned hard lessons gained real users 
soon discovered machine owners quickly withdraw community 
led longstanding condor leave owner control regardless cost 
fixed schema representing users machines constant change eventually led development schema free resource allocation language called classads 
observed complex systems struggle years 
condor exception 
scientific interests began recognize coupled commodity machines significantly expensive supercomputers equivalent power 
wide variety powerful batch execution systems descendant condor lsf maui pbs spread academia business 
high profile distributed computing efforts seti home napster raised public consciousness power distributed computing generating little moral legal controversy way 
vision called grid computing began build case resource sharing organizational boundaries 
period condor project immersed problems production users 
new programming environments pvm mpi java popular project added system support contributed standards development 
scientists grouped international computing efforts grid physics network particle physics data grid ppdg condor project took part initial design user support 
new protocols gram gsi gridftp developed project applied production systems suggested changes experience :10.1.1.25.9598
years condor project adapted computing structures fit changing human communities 
previous publications condor described fine detail features system 
chapter lay broad history condor project design philosophy 
describe philosophy led organic growth computing communities discuss planning scheduling techniques needed uncontrolled system 
describe insistence dividing responsibility led unique model cooperative computing called split execution 
years project added new focus data intensive computing 
outline new research area describe contributions 
security increasing user concern years 
describe condor interacts variety security systems 
conclude describing real users put condor 
copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny 
philosophy flexibility condor design philosophy summarized word flexibility 
distributed systems scale larger sizes difficult control describe 
international distributed systems heterogeneous way composed types brands hardware run various operating systems applications connected unreliable networks change configuration constantly old components obsolete new components powered 
importantly owners private policies requirements control participation community 
flexibility key surviving hostile environment 
outline philosophy flexibility 
communities grow naturally 
people natural desire common problems 
tools sufficient power people organize computing structures need 
human relationships complex 
people invest time resources communities varying degrees 
trust rarely complete symmetric 
communities contracts formalized level precision computer code 
relationships requirements change time 
aim build structures permit require cooperation 
believe relationships obligations schemata develop user necessity 
leave owner control cost 
attract maximum number participants community barriers participation low 
users donate property common maintain control 
careful provide tools owner resource set policies instantly retract resource private 
plan 
progress requires optimism 
community sufficient size idle resources available 
resources slow misconfigured disconnected broken 
dependence correct operation remote device recipe disaster 
design software spend time contemplating consequences failure potential benefits success 
failures come way prepared retry reassign situation permits 
lend borrow 
condor project developed large body expertise distributed resource management 
countless practitioners field experts related fields networking databases programming languages security 
condor project aims give research community benefits expertise accepting integrating knowledge software sources 
field developed decades known overlapping names operating systems distributed computing meta computing peer peer computing grid computing 
emphasizes particular aspect discipline united fundamental concepts 
fail understand apply previous research best rediscover charted 
worst charted rocks 
copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls 
condor software distributed computing practice condor experience research distributed computing requires immersion real world 
condor project maintains distributes supports variety computing systems deployed commercial academic interests world wide 
products proving grounds ideas generated academic research environment 
project best known products condor high throughput computing system condor agent grid computing 

condor high throughput computing system condor high throughput distributed batch computing system 
batch systems condor provides job management mechanism scheduling policy priority scheme resource monitoring resource management 
users submit jobs condor condor subsequently chooses run policy monitors progress ultimately informs user completion 
similar conventional batch systems condor novel architecture allows perform environments batch systems weak high throughput computing opportunistic computing 
goal high throughput computing environment provide large amounts fault tolerant computational power prolonged periods time effectively utilizing resources available network 
goal opportunistic computing ability resources available requiring percent availability 
goals naturally coupled 
high throughput computing easily achieved opportunistic means 
requires unique powerful tools classads 
classad language condor provides extremely flexible expressive framework matching resource requests jobs resource offers machines 
classads allow condor adopt nearly allocation policy adopt planning approach incorporating grid resources 
discuss approach section 
job checkpoint migration 
certain types jobs condor transparently record checkpoint subsequently resume application checkpoint file 
periodic checkpoint provides form fault tolerance safeguards accumulated computation time job 
checkpoint permits job migrate machine machine enabling condor perform low penalty preemptive resume scheduling 
remote system calls 
running jobs remote machines condor preserve local execution environment remote system calls 
remote system calls condor mobile sandbox mechanisms redirecting jobs related system calls back machine submitted job 
users need data files available remote workstations condor executes programs absence shared filesystem 
copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny user grid fabric application problem solver 
condor globus toolkit condor condor processing storage communication 

condor grid tools condor effectively manage dedicated compute clusters 
condor scavenge manage wasted cpu power idle desktop workstations entire organization minimal effort 
example condor configured run jobs desktop workstations keyboard cpu idle 
job running workstation user returns hits key condor migrate job different workstation resume job right left 
mechanisms enable preemptive resume scheduling dedicated compute cluster resources 
allows condor cleanly support priority scheduling clusters 
node dedicated cluster scheduled run job condor utilize node opportunistic manner schedule reservation requires node condor preempt opportunistic computing job may placed 
result condor seamlessly combine organization computational power resource 

condor agent grid computing condor represents marriage technologies condor globus projects 
globus comes protocols secure inter domain communications standardized access variety remote batch systems 
condor comes user concerns job submission job allocation error recovery creation friendly execution environment 
result tool binds resources spread systems personal high throughput computing system 
condor technology exist front back ends grid depicted 
condor reliable submission job management service sites condor high throughput computing system fabric copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls distributed computing practice condor experience user problem solver dagman master worker agent resource shadow shadow matchmaker central manager sandbox 
condor kernel shows major processes condor system 
common generic name process large print 
parentheses technical names publications 
management service grid generator sites globus toolkit bridge 
fact serve simplified diagram emerging grids testbed grid european union data grid 

architectural history condor course condor project fundamental structure system remained constant power functionality steadily grown 
core components known kernel shown 
section examine wide variety computing communities may constructed small variations kernel 
briefly kernel works follows user submits jobs agent 
agent responsible remembering jobs persistent storage finding resources willing run 
agents resources advertise matchmaker responsible introducing potentially compatible agents resources 
introduced agent responsible contacting resource verifying match valid 
execute job side start new process 
agent shadow responsible providing details necessary execute job 
resource sandbox responsible creating safe execution environment job protecting resource 
examining agents resources come form condor pools 
chapter return examine components kernel 
initial conception condor shown 
agents resources independently report information known matchmaker information available community 
single machine typically runs agent copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls starter job thain tannenbaum livny condor pool 
condor pool ca 
agent executes job resource help matchmaker 
step agent resource advertise matchmaker 
step matchmaker informs parties potentially compatible 
step agent contacts resource executes job 
resource server capable submitting executing jobs 
agents resources logically distinct 
single machine may run reflecting needs owner 
parties agents resources independent individually responsible enforcing owner policies 
agent enforces submitting user policies resources trusted suitable running jobs 
example user may wish machines running linux operating system preferring faster cpus 
resource enforces machine owner policies users trusted serviced 
example machine owner willing serve user give preference members computer science department rejecting user known untrustworthy 
matchmaker responsible enforcing communal policies 
example matchmaker allow user access pool limit non members computer science department consuming machines time 
participant autonomous community single entity defined common selection matchmaker 
condor software developed pools began sprout world 
original design easy accomplish resource sharing context community 
participant merely get touch single matchmaker consume provide resources 
user participate community defined matchmaker 
users began express need share organizational boundaries 
observation led development gateway flocking 
time workstations wisconsin tens workstations scattered organizations europe 
combining machines condor pool possibility organization wished retain existing community policies enforced established 
university wisconsin researchers unable share resources separate engineering computer science pools 
concept gateway flocking shown 
structure existing pools preserved gateway nodes pass information participants copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls distributed computing practice condor experience condor pool condor pool 
gateway flocking ca 
agent shown executing job resource gateway 
step agent resource advertise locally 
step gateway forwards agent unsatisfied request condor pool step matchmaker informs parties potentially compatible 
step agent contacts resource executes job gateway 
madison delft geneva berlin amsterdam warsaw 
condor world map ca 
map worldwide condor flock 
dot indicates complete condor pool 
numbers indicate size condor pool 
lines indicate flocking gateways 
arrows indicate direction jobs may flow 
copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny condor pool condor pool 
direct flocking ca 
agent shown executing job resource direct flocking 
step agent resource advertise locally 
step agent unsatisfied advertises condor pool step matchmaker informs parties potentially compatible 
step agent contacts resource executes job 
pools 
gateway detects idle agents resources home pool passes peer advertises remote pool subject admission controls remote matchmaker 
gateway flocking necessarily bidirectional 
gateway may configured entirely different policies advertising accepting remote participants 
gateway flocking deployed years share computing resources united states european institutions 
shows state worldwide condor flock 
primary advantage gateway flocking completely transparent participants 
owners pool agree policies sharing load cross pool matches modification users 
large system may grown incrementally administration required adjacent pools 
significant limitations gateway flocking 
pool represented single gateway machine accounting individual remote users essentially impossible 
importantly gateway flocking allows sharing organizational level permit individual user join multiple communities 
significant limitation distributed computing larger larger part daily production scientific commercial circles 
individual users members multiple communities power need establish formal relationship communities 
problem solved direct flocking shown 
agent may simply report multiple 
jobs need assigned individual community may execute resources available 
agent may community policy participants maintain autonomy 
forms flocking uses may applied time 
gateway flocking requires agreement organizational level provides immediate transparent copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls distributed computing practice condor experience foreign batch system foreign batch system 
condor ca 
agent shown executing jobs foreign batch queues 
step agent transfers jobs directly remote queues 
step jobs wait idle resources execute 
benefit users 
direct flocking requires agreement individual organization accordingly benefits user takes initiative 
reasonable trade everyday life 
consider agreement airlines cross book flights 
may require years negotiation pages contracts complex compensation schemes satisfy executives high level 
put place customer immediate access twice flights inconvenience 
conversely individual may take initiative seek service competing airlines individually 
places additional burden customer seek multiple services requires administrative agreement 
gateway flocking great development direct flocking survive evolution condor 
addition necessary administrative complexity technically complex 
gateway participated interaction condor kernel 
appear agent resource communicate matchmaker provide tunneling interaction shadows 
change protocol components required change gateway 
direct flocking powerful simpler build easier users understand deploy 
vision worldwide computational grid began grow 
significant early piece grid computing vision uniform interface batch execution 
globus project designed grid resource access management gram protocol fill need 
gram provides abstraction remote process queuing execution powerful features strong security file transfer 
globus project provides server speaks gram converts commands form understood variety batch systems 
take advantage gram user needs system remember jobs submitted doing 
jobs fail system copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny step user submits condor servers batch jobs foreign systems 
step submitted servers form ad hoc personal condor pool 
step user runs jobs 
personal condor pool 
foreign batch system foreign batch system gram gram personal condor pool personal condor pool 
condor ca 
condor agent executes jobs resources remote batch queues 
step condor agent submits condor servers foreign batch queues gram 
step servers form personal condor pool user personal matchmaker 
step agent executes jobs 
copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls distributed computing practice condor experience analyze failure re submit job necessary 
track large numbers jobs users need queuing prioritization logging accounting 
provide service condor project adapted standard condor agent speak gram yielding system called condor shown 
required small changes gram adding durability phase commit prevent loss repetition jobs 
gram expands reach user sort batch system runs condor batch system 
example solution nug quadratic assignment problem relied ability condor mediate access hosts spread tens batch systems continents 
describe nug greater detail 
disadvantages gram 
primarily couples resource allocation job execution 
direct flocking agent direct particular job executable image particular queue knowing availability resources queue 
forces agent subscribe submitting jobs multiple queues subscribe submitting jobs potentially long queues 
disadvantage condor support varied features batch system underlying gram 
course necessity gram included bells underlying system complex unusable 
problem solved technique called shown 
take advantage powerful reach gram full condor machinery personal condor pool may carved remote resources 
requires steps 
step condor agent submit standard condor servers jobs remote batch systems 
remote system perspective condor servers ordinary jobs special privileges 
second step servers executing contact personal matchmaker started user 
remote resources user condor agent matchmaker personal condor pool 
step user may submit normal jobs condor agent matched executed remote resources full capabilities condor 
point defined communities terms concepts responsibility ownership control 
communities may defined function tangible properties location accessibility performance 
resources may group express nearby measurable properties network latency system throughput 
call groupings communities 
communities expressed early computational grids distributed batch controller dbc 
dbc designed processing data nasa goddard space flight center 
communities included original design university wisconsin district columbia 
high level scheduler goddard divide set data files available communities 
community responsible transferring input data performing computation transferring output back 
high level scheduler directed general progress computation community retained local control employing condor manage resources 
example community execution domain 
concept developed improve efficiency data transfers wide area network 
execution domain copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny torino milano pavia padova bologna trieste aquila roma napoli bari 
infn condor pool ca 
map single condor pool spread italy 
resources country share matchmaker bologna 
dotted lines indicate execution domains resources share checkpoint server 
numbers indicate resources site 
resources assigned domain checkpoint server bologna 
copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls distributed computing practice condor experience pool size condor pools mar pools hosts 
condor world map ca 
dot indicates independent condor pool 
area covered dot proportional number machines pool 
location pool determined top level country domain name matchmaker public whois records 
dot scattered small random factor appear fall sea 
small number pools mapped plotted south pacific 
collection resources identify checkpoint server close provide performance 
agent may informed placement migration decisions account rough physical information provided execution domain 
example agent strictly require job remain execution domain submitted 
permit job migrate domain suitable waiting period 
examples policies expressed classad language may 
shows deployed example execution domains 
istituto nazionale de infn condor pool consists large set workstations spread italy 
resources physically distributed part national organization share common matchmaker bologna enforces institutional policies 
encourage local access data execution domains defined pool indicated dotted lines 
domain internally connected fast network shares checkpoint server 
machines specifically assigned execution domain default checkpoint server bologna 
today condor deployed world pools ranging handful cpus thousands cpus 
matchmaker periodically sends message home university wisconsin email udp maintain global catalog condor pools 
plots data map showing size distribution condor world 
course map incomplete condor pools deployed firewalls users voluntarily disable periodic messages 
seen condor today 
copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny 
planning scheduling preparing battle plans useless planning indispensable 
central purpose distributed computing enable community users perform pool shared resources 
number jobs done nearly available resources somebody decide allocate resources jobs 
historically known scheduling 
large amount research scheduling motivated proliferation massively parallel processor machines early desire expensive resources efficiently possible 
resource management systems mentioned contain powerful scheduling components architecture 
grid computing served centralized scheduling algorithm 
definition grid multiple owners 
supercomputers purchased separate organizations distinct funds share single scheduling algorithm 
owners resources retain ultimate control machines may change scheduling policies local decisions 
draw distinction ownership 
grid computing requires planning scheduling planning acquisition resources users 
users typically interested increasing personal metrics response time turnaround time throughput jobs reasonable costs 
example airline customer performs planning examines available flights madison melbourne attempt arrive friday 
planning usually concerned matters 
scheduling management resource owner 
resource owners typically interested increasing system metrics efficiency utilization throughput losing customers intend serve 
example airline performs scheduling sets routes times planes travel 
interest keeping planes full prices high losing customers competitors 
scheduling usually concerned matters 
course feedback planning scheduling 
customers change plans discover scheduled flight frequently late 
airlines change schedules number customers purchase tickets board plane 
parties retain independence 
customer may purchase tickets uses 
airline may change schedules knowing full lose customers 
side weigh social financial consequences benefits 
challenges faced planning scheduling grid computing environment similar challenges faced cycle scavenging desktop workstations 
insistence desktop workstation sole property individual complete control characterized success personal computer results distributed ownership 
personal preferences fact desktop workstations purchased upgraded configured haphazard manner results heterogeneous resources 
workstation owners copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls distributed computing practice condor experience advertisement matchmaker matchmaking algorithm notification claiming notification advertisement agent resource 
matchmaking powering machines desire creates dynamic resource pool owners performing interactive machines creates external influences 
condor uses matchmaking bridge gap planning scheduling 
matchmaking creates opportunities planners schedulers respecting essential independence 
condor traditionally focused producing robust planners complex schedulers matchmaking framework allows parties implement sophisticated algorithms 
matchmaking requires steps shown 
step agents resources advertise characteristics requirements classified advertisements classads named brief advertisements goods services morning newspaper 
second step matchmaker scans known classads creates pairs satisfy constraints preferences 
third step matchmaker informs parties match 
responsibility matchmaker ceases respect match 
final step claiming matched agent resource establish contact possibly negotiate terms cooperate execute job 
clean separation claiming step allows resource agent independently verify match 
classad set uniquely named expressions semi structured data model specific schema required matchmaker 
named expression called attribute 
attribute name value 
version classad language allowed simple values integers strings expressions comprised arithmetic logical operators 
gaining experience classads created second version language permitted richer values operators permitting complex data structures records lists sets 
classads schema free participants system may attempt refer attributes exist 
example job may prefer machines attribute owner fred machines may fail define attribute owner 
solve classads valued logic allows expressions evaluated true copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny job classad machine classad job machine requirements arch intel linux disk rank memory cmd home bin sim exe department owner machine job machine cs wisc edu requirements rank department self department arch intel linux disk 
sample classads condor 
false undefined 
explicit support missing information allows users build robust requirements fixed schema 
condor matchmaker assigns significance special attributes requirements rank 
requirements indicates constraint rank measures desirability match 
matchmaking algorithm requires classads match corresponding requirements evaluate true 
rank attribute evaluate arbitrary floating point number 
rank choose compatible matches provider ads matching customer ad matchmaker chooses highest rank value values treated zero breaking ties provider rank value 
classads job machine shown 
requirements state job matched intel linux machine free disk space megabytes 
machines meet requirements job prefers machine lots memory followed floating point performance 
machine ad requirements states machine willing match job load average low keyboard idle minutes 
words willing run jobs sit idle 
willing run job rank expression states prefers run jobs submitted users department 

combinations planning scheduling mentioned planning scheduling related independent 
planning scheduling combined system 
condor instance perform planning schedule 
remote site schedulers control resources condor submits job remote queue run mercy remote scheduler see 
remote scheduler publishes information timetable workload priorities classad condor copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls distributed computing practice condor experience matchmaker condor better choices planning submit jobs authorized multiple sites submit types jobs submit 
approach ppdg 
information published condor perform better planning 
complete absence information remote scheduler condor perform planning plan may start resemble shooting dark 
example plan submit job site willing take wait see completes completion delete job remaining sites 
combination scheduling plan 
consider analogy large purchases advance seats train week year 
control train schedule plan utilize buses 
purchasing tickets free decide employees send train station week 
manner condor performs scheduling plan scheduling parallel jobs compute clusters 
matchmaking framework offers match agent subsequent claiming protocol successful agent considers owner resource told 
agent creates schedule running tasks resources claimed planning 

matchmaking practice matchmaking emerged versions condor software 
initial system fixed structure representing resources jobs 
needs users developed structures went major revisions introducing complexity attempt retain backwards compatibility old 
led realization fixed schema serve time resulted development language known control expressions 
expressions generalized classified advertisements classads 
implementation heavily condor time writing 
slowly replaced new implementation incorporated lessons language theory database systems 
standalone open source software package manipulating classads available java 
package enables matchmaking framework distributed computing projects 
research extensions matchmaking built 
gang matching permits allocation resource license machine 
collections provide persistent storage large numbers classads database features transactions indexing 
set matching permits selection claiming large numbers resource compact expression representation 
named permit classad refer facilitate construction communities mentioned 
practice matchmaking classads powerful 
resource management systems allow customers set provide requirements preferences resources wish 
matchmaking framework ability allow resources impose constraints customers wish service unique necessary preserving distributed ownership 
clean separation matchmaking claiming allows copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny matchmaker ignorant actual mechanics allocation permitting general service change new types resources customers added 
stale information may lead bad match resource free refuse claim matched 
matchmaking capable representing wildly divergent resources ranging electron storage arrays resources free describe schema 
similar resources organizations track different data schema condor software sufficient 
matchmaker stateless scale large systems complex failure recovery 

problem solvers far details condor user relies may see 
move condor kernel discuss environment user works 
problem solver higher level structure built top condor agent 
problem solvers provided condor master worker directed acyclic graph manager 
provides unique programming model managing large numbers jobs 
problem solvers possible may built public interfaces agent 
problem solver relies condor agent important ways 
problem solver uses agent service reliably executing jobs 
need worry ways job may fail distributed system agent assumes responsibility hiding retrying errors 
problem solver need concern applicationspecific details ordering task selection 
agent responsible making problem solver reliable 
accomplish problem solver normal condor job simply executes submission site 
started problem solver may turn submit sub jobs back agent 
perspective user problem solver condor agent identical condor agent 
structures describe may applied ordinary condor pool wide area grid computing scenario 

master worker master worker mw system solving problem indeterminate size large unreliable workforce 
mw model suited problems parameter searches large portions problem space may examined independently progress program guided intermediate results 
mw model shown 
master process directs computation assistance remote workers computing environment provide 
master contains components list tracking module steering module 
list simply record outstanding master wishes done 
tracking module accounts remote worker processes assigns uncompleted 
copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls distributed computing practice condor experience steering master process list tracking worker processes 
structure master worker program steering module directs computation examining results modifying list communicating condor obtain sufficient number worker processes 
course workers inherently unreliable disappear machines crash reappear new resources available 
worker disappear holding unit tracking module simply returns list 
tracking module may take additional steps replicate reassign greater reliability simply speed completion remaining units 
mw packaged source code classes 
user extend classes perform necessary application specific worker processing master assignment necessary communication details transparent user 
mw result generations software development 
james pruyne proposed applications ought explicit interface finding resource placing jobs batch system 
facilitate interface contributed pvm programming environment 
user interface distributor pronounced woody provided simple interface list processed large number workers 
interface high level abstraction fundamental dependencies pvm 
quickly realized functionality built entirely pvm 
mw born 
mw provides interface similar interchangeable implementations 
today mw operate communicating pvm shared file system sockets standard universe described 
copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny 
dagman pl pl 
directed acyclic graph job condor job condor job condor job condor job condor parent child parent child script pre pl script post pl retry directed acyclic graph manager dagman service executing multiple jobs dependencies declarative form 
dagman thought distributed faulttolerant version traditional tool 
ancestor accepts declaration lists done constraints order 
depend file system record dag progress 
indications completion may scattered distributed system dagman keeps private logs allowing resume dag left face crashes failures 
demonstrates language accepted dagman 
job statement associates name file condor describes complete condor job 
parent child statement describes relationship jobs 
script jobs may run completed jobs may run completed 
jobs independent may run order possibly simultaneously 
script job associated pre post program 
commands indicate programs run job executes 
pre post programs submitted condor jobs run dagman submitting machine 
pre programs generally prepare execution environment transferring files post programs generally tear environment evaluate output job 
dagman presents excellent opportunity study problem multi level error processing 
complex system ranges high level view dags way copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls distributed computing practice condor experience minutiae remote procedure calls essential tease source error avoid unnecessarily burdening user error messages 
jobs may fail nature distributed system 
network outages reclaimed resources may cause condor lose contact running job 
failures indications job failed system failed 
situations detected retried agent responsibility execute jobs reliably 
dagman aware failures 
jobs may fail accord 
job may produce ordinary error result user forgets provide necessary argument input file 
case dagman aware job completed sees program result indicating error 
responds writing rescue dag exiting error code 
rescue dag new dag listing elements original dag left 
remedy situation user may examine rescue dag fix mistakes submission resubmit normal dag 
environmental errors go undetected distributed system 
example corrupted executable file system detected distributed system retried level agent 
job executed condor foreign batch system detail job failed may available job appear failed accord 
reasons dagman allows user specify failed job retried retry command shown 
errors may reported unusual ways 
applications detecting corrupt environment set appropriate exit code simply produce message output stream exit indication success 
remedy user may provide post script examines program output valid format 
post script may return failure indicating job failed triggering retry production rescue dag 

split execution far explored techniques needed merely get job appropriate execution site 
solves part problem 
placed job may find hostile environment may files needs may firewall may necessary user credentials access data 
worse resources sites uniform hostility 
site may user files recognize user site may just opposite situation 
single party solve problem information tools necessary reproduce user home environment 
execution machine knows file systems networks databases may accessed reached 
submission machine knows runtime precise resources job directed 
knows advance names job may find resources function location time user preference 
cooperation needed 
call cooperation split execution 
accomplished distinct components shadow sandbox 
mentioned 
examine detail 
copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny shadow represents user system 
responsible deciding exactly job runs 
shadow provides absolutely needed specify job runtime executable arguments environment input files 
known outside agent actual moment execution 
allows agent defer placement decisions possible moment 
agent submits requests resources may award highest priority job resource available breaking previous commitments 
sandbox responsible giving job safe place 
ask shadow job details create appropriate environment 
sandbox really distinct components sand box 
sand job feel home providing needs run correctly 
box protect resource harm malicious job cause 
box received attention focus describing sand 
condor provides universes create specific job environment 
universe defined matched sandbox shadow development new universe necessarily requires deployment new software modules sides 
matchmaking framework described select resources equipped appropriate universe 
describe oldest newest universes condor standard universe java universe 

standard universe standard universe universe supplied earliest versions condor descendant remote unix facility 
goal standard universe faithfully reproduce user home unix environment single process running remote site 
standard universe provides emulation vast majority standard system calls including file signal routing resource management 
process creation inter process communication supported 
users requiring features advised consider mpi pvm universes mw problem solver described 
standard universe provides checkpointing 
ability take snapshot running process place stable storage 
snapshot may moved site entire process reconstructed resumed right left 
may done migrate process machine may recover failed processes improve throughput face failures 
shows components necessary create standard universe 
execution site sandbox responsible creating safe usable execution environment 
prepares machine creating temporary directory job fetches job details executable environment arguments places execute directory 
invokes job responsible monitoring health protecting interference destroying necessary 
submission site shadow responsible representing user 
provides job details sandbox necessary policy decisions job copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls distributed computing practice condor experience shadow server home file system local system calls job setup secure rpc job secure rpc sandbox fork 
standard universe condor library job runs 
addition provides service accessible secure rpc channel 
provides remote access user home storage device 
communicate shadow user job re linked special library provided condor 
library interface standard library changes user code necessary 
library converts job standard system calls secure remote procedure calls back shadow 
capable converting operations variety remote access protocols nest addition may apply number transformations buffering compression speculative vital note shadow remains control entire operation 
sandbox condor library equipped powerful mechanisms authorized decisions shadow consent 
maximizes flexibility user run time decisions exactly runs 
example principle phase open 
sandbox library permitted simply open file name 
issue request map logical file name application argument open physical file name 
physical file name similar url describes actual file name method access transformations applied 
demonstrates phase open 
application requests file named alpha 
library asks shadow file accessed 
shadow responds copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny shadow server shadow server file alpha compress remote data gz open data gz success open alpha 
phase open shadow job condor library job file beta open beta nest nest wisc edu beta open beta condor library success 
phase open nest success success nest storage appliance copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls distributed computing practice condor experience shadow server home file system local system calls job setup secure rpc jvm sandbox proxy fork 
java universe wrapper job library chirp local rpc file available remote procedure calls compressed different name 
library issues open access file 
example 
application requests file named beta 
library asks shadow file accessed 
shadow responds file available nest protocol server named nest wisc edu 
library contacts server indicates success user job 
mechanics checkpointing remote system calls condor described great detail litzkow 

java universe universe java programs added condor late 
due growing community scientific users wished perform simulations java 
programs run slower native code losses offset faster development times access larger numbers machines 
targeting applications java virtual machine jvm users avoid dealing time consuming details specific computing systems 
previously users run java programs condor submitting entire jvm binary standard universe job 
worked inefficient counts jvm binary run type cpu point universal instruction copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny set repeated transfer jvm standard libraries waste resources static data 
new java universe developed raise level abstraction create complete java environment unix environment 
components new java universe shown 
responsibilities component universes functionality changes accommodate unique features java 
sandbox responsible creating safe comfortable execution environment 
ask shadow job details just standard universe 
location jvm provided local administrator may change machine machine 
addition java program consists variety runtime components including class files archive files standard libraries 
sandbox place components private execution directory user credentials start jvm local details 
mechanism somewhat complicated java universe 
job linked java library presents remote terms standard interfaces inputstream outputstream 
library communicate directly storage device calls proxy managed sandbox 
unencrypted connection secure making loopback network interface presenting shared secret 
sandbox executes job requests secure rpc channel shadow security mechanisms techniques standard universe 
initially chose mechanism avoid re implementing security features java suffering attendant maintenance 
advantages proxy direct route standard universe 
proxy allows sandbox pass obstacles job know 
example firewall lies execution site job storage sandbox may knowledge firewall authenticate pass 
likewise user may provide credentials sandbox behalf job rewriting job 
java universe sensitive wider variety errors distributed computing environments 
addition usual failures plague remote execution java environment notoriously sensitive installation problems jobs sites unable find runtime components shared libraries java classes jvm 
unfortunately environmental errors job ordinary exceptions expressed sandbox environmental failure 
combat problem small java wrapper program execute user job indirectly analyze meaning errors execution 
complete discussion problem solution may 

data intensive computing condor initially conceived manager computing resources incidental facilities accessing small amounts data 
data needs batch computing users grown dramatically decades 
forms science increasingly copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls dagman distributed computing practice condor experience stork match maker nest nest nest 
data intensive computing tools parrot job centered large data sets image libraries biological genomes simulation results 
years condor project built variety tools managing accessing data batch system 
tools shown naturally analogous condor kernel described earlier 
tools relative newcomers project give high level overview purpose role direct reader detailed publications 
basic resource managed data intensive system storage 
resource manager called nest supervises storage device periodically advertising matchmaker external user may discover harness 
discovered nest managed storage may allocated amount time 
user may access allocated space variety standard protocols ftp 
transfer data remote nest may thought batch job program run transfer named queued scheduled logged retried fails 
user transfers carry part batch workload may queue transfers stork 
agent process standard condor stork negotiates matchmaker communicates remote storage devices generally large data transfers reliable 
stork speaks standard protocols ftp nest may arrange transfers types devices 
choice protocol dynamically chosen maximize throughput 
large data transfers wide area adversely affected fluctuating local network congestion 
smooth large transfers series serve buffering space transfers storage devices 
arranging transfer stork may arrange smooth local bandwidth fluctuations achieve higher bandwidth 
heterogeneous environment job data may stored wide variety devices peculiar naming scheme access protocol 
parrot connects ordinary programs unusual devices 
parrot uses debugger interface trap program copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny system calls convert operations remote storage devices simply appear entries filesystem 
way ordinary programs scripts deployed system changes 
components variety protocols supported 
course condor data components concert computation components :10.1.1.3.777
coordination achieved high level dagman problem solver 
manner dagman dispatch ready jobs condor agent dispatch data placement requests stork 
manner entire dag constructed stages data remote site runs series jobs retrieves output cleans space 
project just develop experience deploying tools 
management data large multi faceted problem continue explore 

security condor shares security challenges distributed computing environments notion split execution adds 
security mechanisms condor strive provide flexible secure communication protect resource owners errant malicious jobs protect condor users errant malicious resources 

secure communication secure communication condor handled cedar message communication library developed condor project 
library allows clients servers negotiate variety security protocols ability critical condor deployed different sites local security mechanism policy 
cedar permits authentication kerberos gsi des blowfish microsoft :10.1.1.25.9598
sites secured external device firewall cedar permits simple authentication trusted hosts networks 
cedar bears similarity supports connection connectionless datagram communications ability negotiate data integrity privacy algorithms separately authentication protocol 
currently condor secure communication model secure connection established cedar currently investigating message security models digital signatures classad attributes 
message security authenticity attached payload attached communication channel 
clear advantage message security information exchanged continues secure network channel torn permitting data transferred stored persistently disk transferred multiple connections remain authentic 
copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls 
secure execution distributed computing practice condor experience general condor assumes fair amount trust exists machine owners users wish run jobs 
parties typically relationship employees organization agreed collaborate specific project 
condor allows owners users specify parties trusted general user external reason believe machine execute computations requested 
said condor provides mechanisms protect machine owners users runaway crashing cases malicious parties 
machine owners protected sandbox execution site users protected shadow submission site 
sandbox execution site prevents job accessing resources 
sandbox evolved years condor reaction tensions usability security 
early versions condor restricted running jobs limited portion filesystem unix feature 
technique abandoned dynamic linking prevalent quite difficult users compose jobs execute correctly library support 
today jobs run unrestricted filesystem restricted login account 
filesystem access control lists restrict access remote jobs 
selection restricted account tricky problem 
unix may standard account run job privileges 
multi cpu machine run multiple jobs able interfere virtue having user id malicious condor user submit jobs hijack user jobs 
exploit ones similar described miller prevent condor dynamically allocates user ids running job 
unix machines requires administrator manually set aside certain ids 
windows machines condor automatically allocate users fly 
condor installations operate cluster workgroup environment common user database shared large number machines 
environments users may wish jobs run normal credentials may access existing distributed filesystems resources 
allow behavior condor notion user id domain set machines known share user database 
running job condor checks see submitting executing machine members user id domain 
job runs submitter user id job sandboxed 
develop new mechanisms permit split execution requiring relink hope return days running jobs dynamic account 
having unique account specific launch job beneficial ease administration cleanup 
cleanup processes left job easy dynamic model just kill processes owned user 
conversely cleanup problematic running job real user 
condor just go kill processes owned user may launched condor 
sadly unix provides facility reliably cleaning process tree 
feature voluntary copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny grouping 
note starting windows microsoft ahead unix regard providing reliable way track descendants process 

case studies today condor organizations world 
brief case studies provide glimpse ways condor deployed industry academy 

digital pictures digital pictures highly successful toronto computer animation studio william talented animators 
photo realistic animation especially cutting edge film special effects compute intensive process 
frame take hour second animation require frames 
today condor manages pool consisting hundreds linux silicon graphics machines 
linux machines dual cpu reside desktops animators 
advantage condor classads native support multiprocessor machines cpu dedicated running condor jobs second cpu runs jobs machine interactively owner 
animator condor agent desktop 
busy day animators submit jobs condor 
developers created session meta scheduler interfaces condor manner similar dagman service previously described 
animator hits render button new session created custom meta scheduler submitted job condor 
meta scheduler translates session series rendering jobs subsequently submits condor 
considerable schema free properties classads inserting custom attributes job classad 
attributes allow condor planning decisions real time input production managers tag project shot individual animator priority 
jobs preempted due changing priorities condor preempt jobs way minimizes loss forward progress defined policy expressions 
condor major productions men blade ii professor ii time machine 

micron technology micron technology worldwide provider semiconductors 
significant computational analysis required tightly control steps engineering process enabling micron achieve short cycle times high yields low production costs die sizes smallest industry 
condor micron purchase dedicated compute resources meet peak demand engineering analysis tasks 
condor ability consolidate idle compute resources enterprise offered micron opportunity meet engineering needs incurring cost associated traditional dedicated compute copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls distributed computing practice condor experience table nug computation statistics 
part lists cpus utilized different locations grid day nug run 
part lists interesting statistics run 
part number architecture location sgi irix ncsa intel linux argonne intel linux wisconsin intel linux georgia tech intel solaris wisconsin sun solaris wisconsin sgi irix argonne intel solaris georgia tech intel linux italy infn sgi irix ncsa intel linux new mexico intel linux ncsa sun solaris northwestern sun solaris columbia intel linux columbia part total number cpus utilized average number simultaneous cpus maximum number simultaneous cpus running wall clock time sec total cpu time consumed sec number times machine joined computation equivalent cpu time sec hp workstation resources 
far micron setup primary condor pools contain mixture desktop machines dedicated compute servers 
condor manages processing tens thousands engineering analysis jobs week 
micron engineers report analysis jobs run faster require maintenance 

nug optimization challenge summer year mathematicians argonne national laboratory university iowa northwestern university condor technologies discussed document solve problem known nug 
nug quadratic assignment problem proposed difficult combinatorial optimization challenges remained unsolved years complexity 
order solve nug mathematicians started sequential solver branch bound tree search technique 
sophistication level solver drastically reduce amount compute time take determine solution amount time considerable 
combat computation hurdle parallel implementation solver developed fit master worker model 
actual computation managed condor master worker mw problem solving environment 
mw submitted condor provided compute resources world direct flocking condor pools compute resources accessible globus gram protocol 
remote system calls part copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny condor standard universe service master workers 
checkpointing performed minutes fault tolerance 
technologies introduced earlier 
result solution nug discovered utilizing condor computational run week 
week cpu hours solve linear assignment problems necessary crack nug 
condor allowed mathematicians harness cpus different sites condor pools compute cluster managed pbs supercomputer managed lsf spanning different institutions 
additional statistics nug run table 
lifetime condor software grown power flexibility 
systems kerberos pvm java reached maturity widespread deployment condor adjusted accommodate needs users administrators sacrificing essential design 
fact condor kernel shown changed 

believe key lasting system design outline structures terms responsibility expected functionality 
may lead interactions blush complex 
consider example steps matchmaking shown steps accessing file shown figures 
step necessary discharging component responsibility 
apparent complexity preserves independence component 
may update complex policies mechanisms harming 
condor project continue grow 
project home variety systems research ventures addition condor software classad resource management language cluster management system nest storage appliance 
public key infrastructure lab 
ventures project seeks gain hard valuable experience research concepts production software 
project key player collaborations national middleware initiative aim disseminate research systems stable tools users 
project continue train students solve hard problems accept integrate solutions 
look forward challenges ahead 
acknowledge people contributed development condor system years 
list include faculty staff graduates undergraduates visitors residents 
particularly recognize core architect condor mike litzkow guidance example advice deeply influenced condor software philosophy 
copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls distributed computing practice condor experience grateful gore doug warner micron technology mark visser digital pictures condor enthusiasm sharing experiences 
jamie frey mike litzkow alain roy provided sound advice chapter written 
condor project supported wide variety funding sources 
addition douglas thain supported part cisco distinguished graduate fellowship lawrence landweber ncr fellowship distributed systems 

european union datagrid project 
www eu datagrid org 

compact muon collaboration 
gov august 

grid physics network griphyn 
www griphyn org august 


www cs wisc edu condor august 

nsf middleware initiative nmi 
www nsf middleware org august 

particle physics data grid ppdg 
www ppdg net august 

public key infrastructure lab pki lab 
www cs wisc edu august 

william allcock ann chervenak ian foster carl kesselman steve tuecke 
protocols services distributed data intensive science 
proceedings advanced computing analysis techniques physics research pages 

anderson bowyer cobb sullivan 
astronomical biochemical origins search life universe 
proceedings th international conference 
bologna italy 

foster liu yang 
design evaluation resource selection framework grid applications 
proceedings th ieee symposium high performance distributed computing hpdc edinburgh scotland july 

anstreicher 

solving large quadratic assignment problems computational grids 
mathematical programming 

jim miron livny 
deploying high throughput computing cluster 
rajkumar buyya editor high performance cluster computing architectures systems volume 
prentice hall ptr 

jim miron livny paolo 
utilizing widely distributed computational resources efficiently execution domains 
computer physics communications 

john bent nick leroy alain roy joseph stanley andrea arpaci dusseau arpaci dusseau miron livny 
flexibility manageability performance grid storage appliance 
proceedings eleventh ieee symposium high performance distributed computing edinburgh scotland july 

bershad savage pardyak sirer becker eggers chambers 
extensibility safety performance spin operating system 
proceedings th acm symposium operating systems principles pages december 

andrew birrell roy levin roger needham michael schroeder 
grapevine exercise distributed computing 
communications acm april 

alan mike litzkow miron livny 
condor technical summary 
technical report university wisconsin computer sciences department january 

bryant 
stable distributed scheduling algorithm 
proceedings second international conference distributed computing systems pages paris france april 

chandy lamport 
distributed snapshots determining global states distributed systems 
acm transactions computer systems 

chen kenneth salem miron livny 
dbc processing scientific data internet 
th international conference distributed computing systems may 

chow kohler 
dynamic load balancing homogeneous processor distributed systems 
proceedings international symposium computer performance modeling measurement evaluation pages yorktown heights new york august 


ibm load user guide 
september 

czajkowski foster karonis kesselman martin smith tuecke 
resource management architecture metacomputing systems 
proceedings ipps spdp workshop job scheduling strategies parallel processing pages 
copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny 
david dewitt raphael finkel marvin solomon 
crystal multicomputer design implementation experience 
ieee transactions software engineering september 


distributed data processing system 
computer january 

livny van dantzig pruyne 
worldwide flock load sharing workstation clusters 
generation computer systems 

integrating grid tools build computing resource broker activities datagrid wp 
proceedings conference computing high energy physics chep beijing september 

foster kesselman tsudik tuecke 
security architecture computational grids 
proceedings th acm conference computer communications security conference pages 

ian foster carl kesselman 
globus metacomputing toolkit 
international journal supercomputer applications 

ian foster carl kesselman editors 
grid blueprint new computing infrastructure 
morgan kaufmann 

james frey todd tannenbaum ian foster miron livny steve tuecke 
condor computation management agent multi institutional grids 
proceedings tenth ieee symposium high performance distributed computing hpdc pages san francisco california august 

james frey todd tannenbaum ian foster miron livny steve tuecke 
condor computation management agent multi institutional grids 
cluster computing 

henderson 
portable batch system external specification 
technical report nasa ames research center 

cray introducing 
technical report cray seattle wa february 

jackson snell clement 
core algorithms maui scheduler 
proceedings th workshop job scheduling strategies parallel processing 

george miron livny 
framework self optimising fault tolerant high performance bulk data transfers heterogeneous grid environment 
proceedings nd international symposium parallel distributed computing ljubljana slovenia october 

miron livny 
stork making data placement class citizen grid 
th ieee international conference distributed computing systems tokyo japan march 

phillip krueger 
distributed scheduling changing environment 
technical report uw cs tr university wisconsin madison computer sciences department june 

lamport shostak pease 
byzantine generals problem 
acm transactions programming languages systems july 

leslie lamport 
time clocks ordering events distributed system 
communications acm july 

butler lampson 
protection 
proceedings th princeton symposium information sciences systems princeton university march 

hugh lauer 
observations development operating system 
proceedings th symposium operating systems principles sosp pages 

jeff sanjeev kulkarni jean pierre michael yoder 
enabling framework master worker applications computational grid 
proceedings ninth ieee symposium high performance distributed computing hpdc pages pittsburgh pennsylvania august 

michael litzkow miron livny 
experience condor distributed batch system 
proceedings ieee workshop experimental distributed systems october 

michael litzkow todd tannenbaum jim miron livny 
checkpoint migration unix processes condor distributed processing system 
technical report uw cs tr university wisconsin madison computer sciences department april 

michael litzkow 
remote unix turning idle workstations cycle servers 
proceedings usenix pages summer 

miron livny 
study load balancing algorithms decentralized distributed processing systems 
phd thesis weizmann institute science 

miron livny rajesh raman 
high throughput resource management 
ian foster carl kesselman editors grid blueprint new computing infrastructure 
morgan kaufmann 

microsoft security support provider interface white 

barton miller mihai robert iverson alexander 
playing inside black box dynamic instrumentation create security copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls distributed computing practice condor experience holes 
parallel processing letters june september 

myers 
rfc simple authentication security layer 
network working group request comments october 

national bureau standards 
data encryption standard 
department commerce washington dc usa january 

needham 
systems aspects cambridge ring 
proceedings seventh symposium operating systems principles pages 

organick 
multics system examination structure 
mit press cambridge massachusetts london england 

james pruyne 
resource management services parallel applications 
phd thesis university wisconsin 

jim pruyne miron livny 
providing resource management services parallel applications 
proceedings second workshop environments tools parallel scientific computing may 

jim pruyne miron livny 
interfacing condor pvm harness cycles workstation clusters 
generation computer systems may 

rajesh raman 
matchmaking frameworks distributed resource management 
phd thesis university wisconsin october 

rajesh raman miron livny marvin solomon 
matchmaking distributed resource management high throughput computing 
proceedings seventh ieee international symposium high performance distributed computing hpdc july 

rajesh raman miron livny marvin solomon 
resource management multilateral matchmaking 
proceedings ninth ieee symposium high performance distributed computing hpdc pages pittsburgh pa august 

saltzer schroeder 
protection information computer systems 
proceedings ieee september 

bruce schneier 
blowfish encryption algorithm 
dr dobb journal software tools april 

seltzer endo small smith 
dealing disaster surviving misbehaved kernel extensions 
proceedings nd usenix symposium operating systems design implementation osdi pages october 

marvin solomon michael litzkow 
supporting checkpointing process migration outside unix kernel 
proceedings usenix pages winter 

steiner neuman schiller 
kerberos authentication service open network systems 
proceedings usenix pages winter 

sterling savarese becker 
beowulf parallel workstation scientific computation 
proceedings th international conference parallel processing pages wisconsin 

richard stern 
micro law napster walking copyright infringement 
ieee micro november december 

stone 
multiprocessor scheduling aid network flow algorithms 
ieee trans software engineering se january 

todd tannenbaum derek wright karen miller miron livny 
condor distributed job scheduler 
thomas sterling editor beowulf cluster computing linux 
mit press october 

todd tannenbaum derek wright karen miller miron livny 
condor distributed job scheduler 
thomas sterling editor beowulf cluster computing windows 
mit press october 

condor team 
condor manual 
available www cs wisc edu condor manual 

douglas thain john bent andrea arpaci dusseau arpaci dusseau miron livny 
gathering creating communities grid proceedings supercomputing denver colorado november 

douglas thain miron livny 
bypass tool building split execution systems 
proceedings ninth ieee symposium high performance distributed computing hpdc pages pittsburg pa august 

douglas thain miron livny 
error scope computational grid theory practice 
proceedings th ieee symposium high performance distributed computing hpdc july 

douglas thain miron livny 
parrot transparent user level middleware data intensive computing 
proceedings workshop adaptive grid middleware new orleans september 
copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls thain tannenbaum livny 
steven tuecke ian foster 
replica selection globus data grid 
ieee international symposium cluster computing grid ccgrid pages may 

walker gerald popek robert english charles kline greg thiel 
locus distributed operating system 
proceedings th symposium operating systems principles sosp pages november 

derek wright 
cheap cycles desktop dedicated cluster combining dedicated scheduling condor 
conference linux clusters hpc revolution champaign urbana illinois june 

zhou 
lsf load sharing large scale heterogenous distributed systems 
proc 
workshop cluster computing 
copyright john wiley sons concurrency pract 
exper 
prepared cpeauth cls 
