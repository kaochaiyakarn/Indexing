kernels structured data thomas rtner john lloyd peter flach knowledge discovery fraunhofer institut systeme germany thomas ais fraunhofer de computer sciences laboratory research school information sciences engineering australian national university csl anu edu au machine learning department computer science university bristol uk peter flach bristol ac uk 
learning structured data increasingly important 
prior kernel methods focused learning attribute value data 
researchers started investigating kernels structured data 
describes kernel definitions simplified identifying structure data kernels defined structure 
propose kernel structured data prove positive definite show adapted practical applications 
support vector machines kernel methods successfully applied various tasks attribute value learning 
real world data structured natural representation tuple constants 
defining kernels individuals easily described feature vector means crossing boundary attribute value relational learning 
enables support vector machines kernel methods applied easily complex representation spaces 
engineering point view interesting property kernel methods dis similarity learning algorithms modularity 
basing learning algorithm dis similarity individuals learning task search strategy hand hypothesis language hand separated 
kernel trick replace inner product representation space inner product feature space 
definition inner product determines hypothesis language 
trick representation spaces natural inner product defined 
defining valid kernel representations embedded linear space 
different kernel corresponds different embedding different hypothesis language 
crucial success kernel learning algorithms extent semantics domain reflected definition kernel 
kernel calculates high similarity examples class low similarity examples different classes 
express semantics data machine readable form strongly typed syntaxes 
kernels attempt define kernels semantics domain described syntax representation 
definition kernel structured data proof kernel valid main contributions 
kernel seen default kernel structured data sense canonical dot product seen default kernel vectors numbers 
default kernels may best choice 
reason gaussian polynomial normalised versions default kernels 
outline follows 
section introduces kernel methods defines meant valid kernels 
section gives account knowledge representation formalism typed higher order logic 
section defines kernel terms logic 
section describes kernels adapted particular domains 
section illustrates application kernel examples 
concluding remarks 
kernel methods distinguish components kernel methods kernel machine kernel function 
different kernel machines tackle different learning tasks support vector machines supervised learning support vector clustering unsupervised learning kernel principal component analysis feature extraction 
kernel machine implements search strategy hypothesis language adapted plugging different kernel function 
kernel function encapsulates hypothesis language knowledge problem domain 
learning tasks considered problem domain hypothesis language simply kernel 
classes kernels useful distinction different classes kernels driving force 
distinguish semantics syntax model data driving force kernel definition 
similar terminology previously context constructive induction algorithms semantics ideal driving force definition proximities 
related called knowledge driven approaches incorporating expert knowledge domain representation 
syntax typed systems search strategy determines hypothesis space searched hypotheses preferred 
example search strategy svms prefers large margin hypotheses small margin hypotheses 
formally describe semantics data 
common driving force 
simplest case untyped attribute value representation treats attribute way 
models extract useful knowledge previous learning attempts 
done learn semantics data data violates encapsulation search strategy kernel methods 
model driven kernels fisher kernel dynamic alignment kernel inner product weight evidence feature space defined kernels probabilistic models data 
data driven approaches results obtained analysing training data 
violates encapsulation search strategy search needed analysing data 
data driven approach described kernels adapted optimising empirical measure called alignment 
want maintain modularity aspect focus syntax driven approaches remainder syntax understood carefully engineered reflect underlying semantics data 
valid kernels technically kernel calculates inner product feature space general different representation space instances 
computational attractiveness kernel methods comes fact quite closed form feature space inner products exists 
performing expensive transformation step explicitly kernel calculates inner product directly performs feature transformation implicitly 
function feature transformation hilbert space exists inner product span checked verifying function positive definite 
means set linear space admits positive definite kernel embedded linear space 
take valid mean positive definite 
definition positive definite kernel 
set positive integers 
definition 
set 
symmetric function positive definite kernel 
xn 
cn follows ci cj xi xj 
easy prove positive definiteness kernel positive definite kernels nice closure properties 
particular closed sum direct sum multiplication scalar product tensor product zero extension pointwise limits exponentiation 
hilbert space linear space endowed dot product complete norm corresponding dot product 
kernels kernel method perform domain validity kernel issue 
valid kernel performs poorly valid kernel member concept performs ideally 
distinguish issues crucial kernels completeness correctness appropriateness 
similar terminology previously context constructive induction algorithms 
completeness refers extent knowledge incorporated proximity sufficient solving problem hand 
proximity said complete takes account information necessary represent concept underlies problem domain 
correctness refers extent underlying semantics problem obeyed proximity 
appropriateness refers extent examples close class membership close proximity space 
frequently term smoothness kernel respect class membership 
empirically correct appropriate kernel exhibits properties 
correct kernel separates concept learning algorithm achieves high accuracy learning validating part data 
appropriate kernel generalises learning algorithm achieves high accuracy learning validating different parts data 
kernels discrete structures summarize prior syntax driven kernels discrete spaces relevant context 
best known kernel representation spaces mere attributevalue tuples convolution kernel proposed haussler 
defined kd xd yd relation instances parts decomposes instance set tuples 
term convolution kernel refers class kernels formulated way 
advantage convolution kernels general applied different problems 
generality require significant amount adapt specific problem choosing non trivial task 
specific kernels discrete spaces described 
kernels elementary symbols sets multi sets elementary symbols boolean domains discussed concept classes separated linear classifiers kernels 
overview various extensions 
kernels boolean domains suggested 
string subsequence kernel described 
knowledge representation syntax driven kernel definition needs knowledge representation formalism able accurately naturally model underlying semantics data 
knowledge representation formalism principles typed syntax representing individuals closed terms 
theory knowledge representation formalism brief outline section 
typed syntax important pruning search spaces modelling closely possible semantics data human machine readable form 
individuals terms representation natural generalisation attribute value representation collects information individual single term 
setting typed higher order logic provides variety important data types including sets multisets graphs representing individuals 
logic church simple theory types extensions 
assume set type constructors various arities 
included constructor arity 
domain corresponding set containing just true false boolean values 
types logic built set type constructors set parameters type variables symbol function types product types 
example type constructor list provide list types 
type list type lists elements type 
closed type type containing parameters set closed types denoted standard types include nat type natural numbers 
set constants various types 
included true false 
different kinds constants data constructors functions distinguished 
knowledge representation context data constructors represent individuals 
programming language context data constructors construct data values 
data constructors called functors prolog 
contrast functions compute data values functions definitions data constructors 
semantics logic data constructors construct models cf 
herbrand models prolog 
signature declared type constant 
example empty list constructor signature list parameter 
list constructor usually written infix signature list list expects arguments element type list type list produces new list type list constant signature denote 
terms logic terms typed calculus formed usual way abstraction tupling application constants read list list set variables 
denotes set terms obtained particular alphabet 
term type called formula 
function codomain type called predicate 
logic introduce usual connectives quantifiers functions appropriate types 
connectives conjunction disjunction functions type 
addition type abstraction written emphasise intended meaning set 
tuple forming notation 

tn terms type 
respectively 
tn term type come key definition basic terms 
intuitively basic terms represent individuals subject learning prolog ground terms 
basic terms fall kinds represent individuals lists trees represent sets multisets represent tuples 
second kind abstractions 
example basic term representing set representation multiset occurrences occurrences 
adopt abstractions form 
tn sn represent extensional sets multisets 
term called default term case sets multisets 
generally define default terms closed type 
set default terms denoted 
full details default terms 
definition 
set basic terms defined inductively follows 

data constructor having signature 
ak 
tn 
tn 

tn 
sn 
tn sn 

tn 
tn part definition set basic terms states particular individual natural numbers integers basic terms 
term formed applying data constructor arguments basic term basic term 
example lists formed data constructors having signature list having signature list list basic term type list representing list constants having signature 
basic terms coming part definition called basic structures type form 
abstractions formed part definition constant abstractions take default term value finite number points domain 
called basic abstractions type form 
class abstractions includes useful data types finite sets multisets assuming default terms 
generally basic abstractions regarded lookup tables value items table 
fact precise definition basic terms little complicated definition basic abstractions 
tn ordered 
sn default terms 
conditions avoid redundant representations abstractions 
part definition basic terms just states form tuple basic terms obtain basic term 
terms called basic tuples type form compared prolog knowledge representation offers type system express structure hypothesis space acts declarative bias 
important extension abstractions allow genuine sets multisets 
fact prolog data constructors functors emulate tuples 
convenient gather basic terms type general specific closed type 
definition types general exists type substitution 
definition 
define type general 
intuitive meaning set terms representing individuals type 
definition kernel introduce notation 
denotes value returned applied 
precise definition 
example 
support denoted supp set 
supp 
example formalism directed graphs type constructor graph type graph graph type information vertices type information edges 
graph defined graph label label label label type labels 
note definition corresponds closely mathematical definition graph vertex uniquely labelled edge uniquely labelled ordered pair labels vertices connects 
embedding basic terms linear spaces having introduced kernels section knowledge representation formalism section ready define default kernels basic terms 
definition kernel basic terms assumes existence kernels various sets data constructors 
precisely type constructor assumed positive definite kernel set data constructors associated example type constructor nat nat product kernel defined nat mn 
type constructor matching kernel defined 
definition 
function defined inductively structure terms follows 



si ti 
sn 
tm 


supp supp 

si ti 
sn 
tn 

exist 
example 
suppose list matching kernel 
nullary type constructor suppose matching kernel 
list list 
list list list 
kernel counts list constructor terms matching heads list second list constructor terms differ 
notice recursive matching lists performed kernel similar kind matching performed anti unification 
example 
suppose matching kernel 
nullary type constructor suppose matching kernel 
set bm set bm 
kernel performs pairwise match elements set 
equivalently seen inner product representing sets 
example 
suppose nat product kernel 
nullary type constructor suppose matching kernel 
bm nat multiset containing occurrences bm nat 
represent multisets multiplicity vectors kernel computes inner product 
formulate main theoretical result 
proposition 
function defined definition 
positive definite kernel 
inductive proof proposition appendix 
intuitive outline 
assume kernels occurring right hand side kernel definition positive definite 
positive definiteness left hand side kernel follows closure properties class positive definite kernels 
kernel basic structures positive definite closure sum zero extension direct sum kernels defined data constructors assumed positive definite 
kernel basic abstractions positive definite function supp returns finite set kernels closed zero extension sum tensor product 
kernel basic tuples positive definite closure direct sum 
adapting kernels kernel defined previous section closely follows type structure individuals learning 
indicated kernel assumes existence atomic kernels data constructors 
kernels product kernel numbers matching kernel just checks constructors user defined kernel 
addition kernel modifiers customise kernel definition domain hand 
section describe commonly kernel modifiers 
suggest atomic kernels kernel modifiers specified extension haskell language 
incorporate domain knowledge kernel definition frequently necessary modify default kernels type 
formally describe modifications terms function modifier modifier parameters element parameter space maps kernel modified kernel 
modifiers choices offered 
default modifier default 
polynomial version default kernel polynomial 
gaussian version gaussian 
frequently modification normalisation kernel normalised modifiers defined user 
suggest kernels defined directly type structure specifying structure domain declarative bias 
introduce suggested kernel definition syntax means example east west challenge 
train bool type train car bool modifier gaussian type car shape length roof wheels load data shape rectangle oval data length long short data roof flat peaked kernel type wheels int kernel type load data rectangle circle triangle type int line declares learning target mapping trains booleans 
train set cars car tuple describing shape length roof number wheels load 
specified data constructors load pair data constructors describing shape number loads 
keyword describes property type case kernels kernel modifiers 
declarations state trains gaussian kernel modifier bandwidth 
default shape length matching kernel product kernel 
default kernel overridden wheels defined integer uses matching kernel 
roof endowed user defined atomic kernel defined follows roof roof real flat peaked peaked flat kernel counts identical roofs matching flat peaked roofs cases car open closed 
normalisation modifier implemented follows normalised real real normalised sqrt example applications having kernel definition important note aside kernel methods kernel function dis similarity algorithms 
normalised kernel canonical similarity function metric defined kernel standard manner 
learning algorithms nearest neighbour means easily extended structured data 
section empirically investigate appropriateness kernel definitions domains 
implementation algorithms mentioned simplified weka data mining toolkit 
east west challenge performed experiments east west challenge dataset 
default kernels types product kernel numbers matching kernel atomic types kernel modifiers 
toy data set contains labelled instances aim experiments achieve high predictive accuracy check problem separated default kernel 
applied support vector machine nearest neighbour classifier full data set 
experiments achieved accuracy verifying data separable default kernels 
spatial clustering consider problem clustering spatially close thematically similar data points 
problem occurs example demographic data households city trying optimise facility locations demographic data 
location planning algorithms usually deal fairly small number customers small cities number households easily exceeds 
households aggregated little information possible lost 
households aggregated spatially close little geographic information lost similar demographic description little demographic information lost 
problem automatically find aggregation unsupervised learning algorithm 
due difficulty obtaining suitable data investigated problem slightly smaller scale 
demographic data aggregated data protection anonymity reasons information household level part street level 
data set describes roughly points small german city geographic ordinates statistics number people certain age levels number people certain income levels number males females living small area data point 
simplest way represent data feature vector entries ordinates statistics 
drawing results simple means algorithm representation clearly shows spatial ordinates taken account spatially compact clusters achieved 
due fact semantics ordinates demographic statistics different 
alternative representation kernel specification follows type statistics type real real modifier gaussian type statistics real real real modifier normalised representation applying version means algorithm kernel shows clusters spatially compact compactness depending choice kernel bandwidth 
illustrations results online instances belonging cluster represented colour 
street map buildings city shown grey 
drug activity prediction frequently concept class data limited structure multi instance concepts 
multi instance learning problems occur individuals described single characteristic feature vector require bag vectors 
popular real world example multi instance problem prediction drug activity introduced 
common drug activity prediction represent molecule bag descriptions different conformations 
drug active conformations binds enzymes cell surface receptors 
conformation described feature vector component corresponds ray emanating origin measuring distance molecule surface 
musk domain uniformly distributed rays chosen represent conformation 
additionally features describe position oxygen atom conformation 
formal specification structure musk data set kernel applied follows type molecule con int type con rays distance offset modifier gaussian type rays real real real type offset real real real type distance real best result achieved literature musk best results range 
support vector machine kernel achieved accuracy better results achieved smaller 
best result achieved literature musk best results range 
support vector machine kernel achieved accuracy 
detailed evaluation discussion results reader referred 
bringing kernel methods structured data important direction practical machine learning research 
done defining positive note performing means feature space requires modifications algorithm 
description scope 
www ais fraunhofer de definite kernel structured data embedding structured data linear space 
defined kernel structured data proved positive definite showed example applications 
kernel definition follows syntax driven approach making knowledge representation formalism able accurately naturally model underlying semantics structured data 
principles typed syntax representing individuals closed terms 
typed syntax important pruning search spaces modelling closely possible semantics data human machine readable form 
individuals terms representation simple natural generalisation attribute value representation collects information individual single term 
spite simplicity knowledge representation formalism powerful accurately model highly structured data graphs 
definition kernel example applications show structured data reasonably embedded linear spaces 
embedding complete sense incorporates information individual 
correctness illustrated toy example classifying trains appropriateness verified drug activity prediction domain 
research supported part esprit project ist data mining decision support business competitiveness solomon virtual enterprise bmbf funded project 

ben hur horn siegelmann vapnik 
support vector clustering 
journal machine learning research dec 

bloedorn michalski 
matching methods problems comparative analysis constructive induction approaches 
technical report machine learning inference laboratory mli george mason university fairfax va 

boser guyon vapnik 
training algorithm optimal margin classifiers 
haussler editor proceedings th annual acm workshop computational learning theory pages pittsburgh pa july 
acm press 

church 
formulation simple theory types 
journal symbolic logic 

cristianini shawe taylor 
support vector machines kernel learning methods 
cambridge university press 

cristianini shawe taylor elisseeff kandola 
kernel target alignment 
dietterich becker ghahramani editors advances neural information processing systems volume 
mit press 

dietterich lathrop lozano rez 
solving multiple instance problem axis parallel rectangles 
artificial intelligence 

rtner 
kernel feature space transformation inductive logic programming 
master thesis university bristol 

rtner flach 
weighted bayesian classification support vector machines 
brodley editors proceedings th international conference machine learning pages 
morgan kaufmann june 

rtner flach kowalczyk smola 
multi instance kernels 
proceedings th international conference machine learning appear 

haussler 
convolution kernels discrete structures 
technical report department computer science university california santa cruz 

jaakkola haussler 
exploiting generative models discriminative classifiers 
advances neural information processing systems volume 

jones 
editors 
haskell non strict purely functional language 
available haskell org 

khardon roth 
efficiency versus convergence boolean kernels line learning algorithms 
dietterich becker ghahramani editors advances neural information processing systems volume 
mit press 

kowalczyk smola williamson 
kernel machines boolean functions 
dietterich becker ghahramani editors advances neural information processing systems volume 
mit press 

lloyd 
knowledge representation computation learning higher order logic 
available csl anu edu au 

lodhi shawe taylor watkins 
text classification string kernels 
leen dietterich tresp editors advances neural information processing systems volume 
mit press 

michie muggleton page srinivasan 
international computing community new challenge 
technical report oxford university computing laboratory oxford uk 


learning boolean functions support vector machines 
abe khardon editors proceedings th conference algorithmic learning theory pages 
springer verlag 

sch lkopf smola 
learning kernels 
mit press 

smith gales 
speech recognition svms 
dietterich becker ghahramani editors advances neural information processing systems volume 
mit press 

tsuda tsch sonnenburg 
ller 
new discriminative kernel probabilistic models 
dietterich becker ghahramani editors advances neural information processing systems volume 
mit press 

watkins 
dynamic alignment kernels 
smola bartlett sch lkopf editors advances large margin classifiers pages 
mit press 

witten frank 
data mining practical machine learning tools techniques java implementations 
morgan kaufmann 
proof proposition giving proof induction argument preparation needed 
key idea base induction bottom definition relevant definition 
definition 
define bm inductively follows 
data constructor arity bm 
tn data constructor arity 
tn bm 
tn sn 
tn bm 
sn bm 
tn 
tn bm 
prove bm bm bm 
proof proposition 
proof 
symmetry established 
sym property bm follows 
shown induction sym holds symmetry follows immediately exists bm bm bm bm 
shown sym holds 
case data constructors arity associated type constructor say 
definition result follows symmetric 
assume sym holds 
proved sym holds 
suppose sc bm 
shown 
cases consider corresponding having form 
case easy see definition induction hypothesis 
completes proof symmetric 
remaining part proof pd property 
tn bm 
cn follows ci cj ti tj 
shown induction pd holds remaining condition positive definiteness follows immediately 
tn exists 
tn bm 
shown pd holds 
case ti data constructor arity associated type constructor say 
definition ti tj ti tj result follows assumed positive definite 
assume pd holds 
proved pd holds 
suppose sc 
tn bm 
cn shown ci cj ti tj 
cases consider 


suppose ti ci 
mi mi 
ci 

ci cj ci cj ti tj ci cj ci cj ci cj arity ci ci cj ci cj 
fact positive definite kernel set data constructors associated ci cj ci cj ci cj arity induction hypothesis 
arity ci arity ci cj ci cj ci cj 

ci cj ti tj ci cj supp ti supp tj supp ti supp tj supp tk 
ti tj ci cj ti tj ci cj ti tj step proceed follows 
induction hypothesis positive definite bm bm 
function bm bm bm bm defined positive definite tensor product positive definite kernels 
consider set ti 
supp ti points bm bm corresponding set constants ci 
supp ti ci ci 
supp ti 

suppose ti 

ci cj ti tj ci cj ci cj induction hypothesis 

